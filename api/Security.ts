/// Auto-generated by Deno Win32: Windows.Win32.Security.Apis

import * as util from "../util.ts";

// Enums
export type SAFER_COMPUTE_TOKEN_FROM_LEVEL_FLAGS = number;
export type SECPKG_ATTR = number;
export type MSV1_0 = number;
export type SECPKG_CRED = number;
export type MSV_SUB_AUTHENTICATION_FILTER = number;
export type EXPORT_SECURITY_CONTEXT_FLAGS = number;
export type KERB_TICKET_FLAGS = number;
export type KERB_ADDRESS_TYPE = number;
export type SCHANNEL_CRED_FLAGS = number;
export type DOMAIN_PASSWORD_PROPERTIES = number;
export type SCHANNEL_ALERT_TOKEN_ALERT_TYPE = number;
export type TRUSTED_DOMAIN_TRUST_TYPE = number;
export type MSV_SUBAUTH_LOGON_PARAMETER_CONTROL = number;
export type KERB_REQUEST_FLAGS = number;
export type TRUSTED_DOMAIN_TRUST_DIRECTION = number;
export type MSV_SUPPLEMENTAL_CREDENTIAL_FLAGS = number;
export type SECURITY_PACKAGE_OPTIONS_TYPE = number;
export type SCHANNEL_SESSION_TOKEN_FLAGS = number;
export type KERB_CRYPTO_KEY_TYPE = number;
export type LSA_AUTH_INFORMATION_AUTH_TYPE = number;
export type SECPKG_PACKAGE_CHANGE_TYPE = number;
export type TRUSTED_DOMAIN_TRUST_ATTRIBUTES = number;
export type ISC_REQ_HIGH_FLAGS = Deno.PointerValue;
export type ISC_REQ_FLAGS = number;
export type ASC_REQ_HIGH_FLAGS = Deno.PointerValue;
export type ASC_REQ_FLAGS = number;
export type AUTHZ_RESOURCE_MANAGER_FLAGS = number;
export type AUTHZ_ACCESS_CHECK_FLAGS = number;
export type AUTHZ_INITIALIZE_OBJECT_ACCESS_AUDIT_EVENT_FLAGS = number;
export type TREE_SEC_INFO = number;
export type AUTHZ_GENERATE_RESULTS = number;
export type ACTRL_ACCESS_ENTRY_ACCESS_FLAGS = number;
export type AUTHZ_SECURITY_ATTRIBUTE_FLAGS = number;
export type SECURITY_INFO_PAGE_FLAGS = number;
export type SI_OBJECT_INFO_FLAGS = number;
export type SCE_LOG_ERR_LEVEL = number;
export type CRED_FLAGS = number;
export type CRED_TYPE = number;
export type CRED_PERSIST = number;
export type CREDUI_FLAGS = number;
export type SCARD_SCOPE = number;
export type CRED_ENUMERATE_FLAGS = number;
export type CREDUIWIN_FLAGS = number;
export type SCARD_STATE = number;
export type CRED_PACK_FLAGS = number;
export type CRYPTCAT_VERSION = number;
export type CRYPTCAT_OPEN_FLAGS = number;
export type CERT_VIEW_COLUMN_INDEX = number;
export type CERT_DELETE_ROW_FLAGS = number;
export type FULL_RESPONSE_PROPERTY_ID = number;
export type CVRC_COLUMN = number;
export type CERT_IMPORT_FLAGS = number;
export type CERT_GET_CONFIG_FLAGS = number;
export type ENUM_CERT_COLUMN_VALUE_FLAGS = number;
export type PENDING_REQUEST_DESIRED_PROPERTY = number;
export type CERTADMIN_GET_ROLES_FLAGS = number;
export type CR_DISP = number;
export type XEKL_KEYSIZE = number;
export type CERT_CREATE_REQUEST_FLAGS = number;
export type CERT_EXIT_EVENT_MASK = number;
export type ADDED_CERT_TYPE = number;
export type CVRC_TABLE = number;
export type CERT_PROPERTY_TYPE = number;
export type CERT_ALT_NAME = number;
export type CSBACKUP_TYPE = number;
export type XEKL_KEYSPEC = number;
export type CERT_REQUEST_OUT_TYPE = number;
export type CERT_VIEW_SEEK_OPERATOR_FLAGS = number;
export type BCRYPT_OPERATION = number;
export type NCRYPT_OPERATION = number;
export type CERT_FIND_FLAGS = number;
export type CERT_QUERY_OBJECT_TYPE = number;
export type CERT_QUERY_CONTENT_TYPE = number;
export type CERT_QUERY_CONTENT_TYPE_FLAGS = number;
export type CERT_QUERY_FORMAT_TYPE = number;
export type CERT_QUERY_FORMAT_TYPE_FLAGS = number;
export type CERT_QUERY_ENCODING_TYPE = number;
export type CERT_RDN_ATTR_VALUE_TYPE = number;
export type CERT_STRING_TYPE = number;
export type BCRYPT_TABLE = number;
export type CERT_KEY_SPEC = number;
export type BCRYPT_INTERFACE = number;
export type NCRYPT_FLAGS = number;
export type CRYPT_STRING = number;
export type CRYPT_IMPORT_PUBLIC_KEY_FLAGS = number;
export type CRYPT_XML_FLAGS = number;
export type CRYPT_ENCODE_OBJECT_FLAGS = number;
export type CRYPT_OBJECT_LOCATOR_RELEASE_REASON = number;
export type CRYPT_ACQUIRE_FLAGS = number;
export type CRYPT_GET_URL_FLAGS = number;
export type CERT_STORE_SAVE_AS = number;
export type BCRYPT_QUERY_PROVIDER_MODE = number;
export type CERT_FIND_CHAIN_IN_STORE_FLAGS = number;
export type CERT_CONTROL_STORE_FLAGS = number;
export type BCRYPT_OPEN_ALGORITHM_PROVIDER_FLAGS = number;
export type CERT_STORE_SAVE_TO = number;
export type CRYPT_SET_PROV_PARAM_ID = number;
export type CRYPT_KEY_PARAM_ID = number;
export type CRYPT_KEY_FLAGS = number;
export type CRYPT_MSG_TYPE = number;
export type CERT_OPEN_STORE_FLAGS = number;
export type CRYPT_DEFAULT_CONTEXT_FLAGS = number;
export type CRYPT_VERIFY_CERT_FLAGS = number;
export type CRYPT_SET_HASH_PARAM = number;
export type CERT_SYSTEM_STORE_FLAGS = number;
export type CERT_CREATE_SELFSIGN_FLAGS = number;
export type CRYPT_DEFAULT_CONTEXT_TYPE = number;
export type BCRYPT_RESOLVE_PROVIDERS_FLAGS = number;
export type CERT_FIND_TYPE = number;
export type CRYPT_FIND_FLAGS = number;
export type CRYPT_IMAGE_REF_FLAGS = number;
export type CERT_REVOCATION_STATUS_REASON = number;
export type CERT_ROOT_PROGRAM_FLAGS = number;
export type CRYPT_XML_KEY_VALUE_TYPE = number;
export type CERT_LOGOTYPE_CHOICE = number;
export type CMSG_KEY_AGREE_OPTION = number;
export type CERT_LOGOTYPE_OPTION = number;
export type CERT_STORE_PROV_FLAGS = number;
export type CMSG_KEY_AGREE_ORIGINATOR = number;
export type CRYPT_CONTEXT_CONFIG_FLAGS = number;
export type BCRYPT_DSA_MAGIC = number;
export type CRYPT_XML_X509DATA_TYPE = number;
export type CERT_BIOMETRIC_DATA_TYPE = number;
export type CERT_CHAIN_POLICY_FLAGS = number;
export type CERT_STRONG_SIGN_FLAGS = number;
export type CERT_LOGOTYPE_IMAGE_INFO_TYPE = number;
export type CRYPT_XML_STATUS_INFO_STATUS = number;
export type CRYPT_XML_TRANSFORM_FLAGS = number;
export type CRYPT_XML_GROUP_ID = number;
export type CERT_SELECT_CRITERIA_TYPE = number;
export type BCRYPT_RSAKEY_BLOB_MAGIC = number;
export type CRYPT_XML_KEYINFO_TYPE = number;
export type CRYPT_TIMESTAMP_VERSION = number;
export type CERT_ID_OPTION = number;
export type HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE = number;
export type BCRYPT_DH_KEY_BLOB_MAGIC = number;
export type CRYPT_XML_STATUS_ERROR_STATUS = number;
export type CRYPT_TIMESTAMP_RESPONSE_STATUS = number;
export type NCRYPT_ALGORITHM_NAME_CLASS = number;
export type CRYPTUI_WIZ_FLAGS = number;
export type CRYPTUI_VIEWCERTIFICATE_FLAGS = number;
export type CERT_SELECT_STRUCT_FLAGS = number;
export type CRYPTUI_WIZ_IMPORT_SUBJECT_OPTION = number;
export type CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT = number;
export type CRYPTUI_WIZ_DIGITAL_SIGN = number;
export type CRYPTUI_WIZ_EXPORT_SUBJECT = number;
export type CRYPTUI_WIZ_DIGITAL_SIGN_SIG_TYPE = number;
export type CRYPTUI_WIZ_DIGITAL_SIGN_PVK_OPTION = number;
export type CERT_VIEWPROPERTIES_STRUCT_FLAGS = number;
export type CRYPTUI_WIZ_EXPORT_FORMAT = number;
export type CRYPTUI_WIZ_DIGITAL_ADDITIONAL_CERT_CHOICE = number;
export type CTL_MODIFY_REQUEST_OPERATION = number;
export type TOKEN_PRIVILEGES_ATTRIBUTES = number;
export type LOGON32_PROVIDER = number;
export type CREATE_RESTRICTED_TOKEN_FLAGS = number;
export type LOGON32_LOGON = number;
export type ACE_FLAGS = number;
export type OBJECT_SECURITY_INFORMATION = number;
export type SECURITY_AUTO_INHERIT_FLAGS = number;
export type ACE_REVISION = number;
export type TOKEN_MANDATORY_POLICY_ID = number;
export type SYSTEM_AUDIT_OBJECT_ACE_FLAGS = number;
export type CLAIM_SECURITY_ATTRIBUTE_FLAGS = number;
export type CLAIM_SECURITY_ATTRIBUTE_VALUE_TYPE = number;
export type TOKEN_ACCESS_MASK = number;
export type WINTRUST_GET_DEFAULT_FOR_USAGE_ACTION = number;
export type WINTRUST_POLICY_FLAGS = number;
export type WINTRUST_DATA_PROVIDER_FLAGS = number;
export type WINTRUST_DATA_UICHOICE = number;
export type WINTRUST_SIGNATURE_SETTINGS_FLAGS = number;
export type WINTRUST_DATA_STATE_ACTION = number;
export type WINTRUST_DATA_UNION_CHOICE = number;
export type WINTRUST_DATA_REVOCATION_CHECKS = number;
export type WINTRUST_DATA_UICONTEXT = number;
export type WLX_SHUTDOWN_TYPE = number;
export type SE_OBJECT_TYPE = number;
export type TRUSTEE_TYPE = number;
export type TRUSTEE_FORM = number;
export type MULTIPLE_TRUSTEE_OPERATION = number;
export type ACCESS_MODE = number;
export type PROG_INVOKE_SETTING = number;
export type AUDIT_PARAM_TYPE = number;
export type AUTHZ_SECURITY_ATTRIBUTE_OPERATION = number;
export type AUTHZ_SID_OPERATION = number;
export type AUTHZ_CONTEXT_INFORMATION_CLASS = number;
export type AUTHZ_AUDIT_EVENT_INFORMATION_CLASS = number;
export type AZ_PROP_CONSTANTS = number;
export type SI_PAGE_TYPE = number;
export type SI_PAGE_ACTIVATED = number;
export type OCSPSigningFlag = number;
export type OCSPRequestFlag = number;
export type X509EnrollmentAuthFlags = number;
export type X509SCEPMessageType = number;
export type X509SCEPDisposition = number;
export type X509SCEPFailInfo = number;
export type CERTENROLL_OBJECTID = number;
export type WebSecurityLevel = number;
export type EncodingType = number;
export type PFXExportOptions = number;
export type ObjectIdGroupId = number;
export type ObjectIdPublicKeyFlags = number;
export type AlgorithmFlags = number;
export type X500NameFlags = number;
export type X509CertificateEnrollmentContext = number;
export type EnrollmentEnrollStatus = number;
export type EnrollmentSelectionStatus = number;
export type EnrollmentDisplayStatus = number;
export type X509ProviderType = number;
export type AlgorithmType = number;
export type AlgorithmOperationFlags = number;
export type X509KeySpec = number;
export type KeyIdentifierHashAlgorithm = number;
export type X509PrivateKeyExportFlags = number;
export type X509PrivateKeyUsageFlags = number;
export type X509PrivateKeyProtection = number;
export type X509PrivateKeyVerify = number;
export type X509HardwareKeyUsageFlags = number;
export type X509KeyParametersExportType = number;
export type X509KeyUsageFlags = number;
export type AlternativeNameType = number;
export type PolicyQualifierType = number;
export type RequestClientInfoClientId = number;
export type CERTENROLL_PROPERTYID = number;
export type EnrollmentPolicyServerPropertyFlags = number;
export type PolicyServerUrlFlags = number;
export type EnrollmentTemplateProperty = number;
export type CommitTemplateFlags = number;
export type EnrollmentCAProperty = number;
export type X509EnrollmentPolicyLoadOption = number;
export type EnrollmentPolicyFlags = number;
export type PolicyServerUrlPropertyID = number;
export type X509EnrollmentPolicyExportFlags = number;
export type X509RequestType = number;
export type X509RequestInheritOptions = number;
export type InnerRequestLevel = number;
export type Pkcs10AllowedSignatureTypes = number;
export type KeyAttestationClaimType = number;
export type InstallResponseRestrictionFlags = number;
export type WebEnrollmentFlags = number;
export type CRLRevocationReason = number;
export type X509SCEPProcessMessageFlags = number;
export type DelayRetryAction = number;
export type X509CertificateTemplateGeneralFlag = number;
export type X509CertificateTemplateEnrollmentFlag = number;
export type X509CertificateTemplateSubjectNameFlag = number;
export type X509CertificateTemplatePrivateKeyFlag = number;
export type ImportPFXFlags = number;
export type ENUM_CATYPES = number;
export type KeyCredentialManagerOperationErrorStates = number;
export type KeyCredentialManagerOperationType = number;
export type CRED_MARSHAL_TYPE = number;
export type CRED_PROTECTION_TYPE = number;
export type READER_SEL_REQUEST_MATCH_TYPE = number;
export type CREDSPP_SUBMIT_TYPE = number;
export type RAS_AUTH_ATTRIBUTE_TYPE = number;
export type PPP_EAP_ACTION = number;
export type EAP_ATTRIBUTE_TYPE = number;
export type EAP_CONFIG_INPUT_FIELD_TYPE = number;
export type EAP_INTERACTIVE_UI_DATA_TYPE = number;
export type EAP_METHOD_PROPERTY_TYPE = number;
export type EAP_METHOD_PROPERTY_VALUE_TYPE = number;
export type EapCredentialType = number;
export type EapHostPeerMethodResultReason = number;
export type EapHostPeerResponseAction = number;
export type EapHostPeerAuthParams = number;
export type EAPHOST_AUTH_STATUS = number;
export type ISOLATION_STATE = number;
export type EapCode = number;
export type EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION = number;
export type EapPeerMethodResponseAction = number;
export type EapPeerMethodResultReason = number;
export type EAP_AUTHENTICATOR_SEND_TIMEOUT = number;
export type ENTERPRISE_DATA_POLICIES = number;
export type SRPHOSTING_TYPE = number;
export type SRPHOSTING_VERSION = number;
export type SID_NAME_USE = number;
export type LSA_LOOKUP_DOMAIN_INFO_CLASS = number;
export type SECURITY_LOGON_TYPE = number;
export type SE_ADT_PARAMETER_TYPE = number;
export type POLICY_AUDIT_EVENT_TYPE = number;
export type POLICY_LSA_SERVER_ROLE = number;
export type POLICY_INFORMATION_CLASS = number;
export type POLICY_DOMAIN_INFORMATION_CLASS = number;
export type POLICY_NOTIFICATION_INFORMATION_CLASS = number;
export type TRUSTED_INFORMATION_CLASS = number;
export type LSA_FOREST_TRUST_RECORD_TYPE = number;
export type LSA_FOREST_TRUST_COLLISION_RECORD_TYPE = number;
export type NEGOTIATE_MESSAGES = number;
export type MSV1_0_LOGON_SUBMIT_TYPE = number;
export type MSV1_0_PROFILE_BUFFER_TYPE = number;
export type MSV1_0_CREDENTIAL_KEY_TYPE = number;
export type MSV1_0_AVID = number;
export type MSV1_0_PROTOCOL_MESSAGE_TYPE = number;
export type KERB_LOGON_SUBMIT_TYPE = number;
export type KERB_PROFILE_BUFFER_TYPE = number;
export type KERB_PROTOCOL_MESSAGE_TYPE = number;
export type KERB_CERTIFICATE_INFO_TYPE = number;
export type PKU2U_LOGON_SUBMIT_TYPE = number;
export type SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT = number;
export type SEC_TRAFFIC_SECRET_TYPE = number;
export type SECPKG_CRED_CLASS = number;
export type SECPKG_ATTR_LCT_STATUS = number;
export type SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS = number;
export type SecDelegationType = number;
export type SASL_AUTHZID_STATE = number;
export type SEC_WINNT_AUTH_IDENTITY = number;
export type LSA_TOKEN_INFORMATION_TYPE = number;
export type SECURITY_IMPERSONATION_LEVEL = number;
export type SECPKG_EXTENDED_INFORMATION_CLASS = number;
export type NtmsDriveState = number;
export type FILE_DEVICE_TYPE = number;
export type NtmsLibraryType = number;
export type NtmsInventoryMethod = number;
export type NtmsLibraryFlags = number;
export type NtmsDoorState = number;
export type NtmsPortContent = number;
export type NtmsPortPosition = number;
export type NtmsBarCodeState = number;
export type NtmsMediaState = number;
export type NtmsPartitionState = number;
export type NtmsReadWriteCharacteristics = number;
export type NtmsLmOperation = number;
export type NtmsLmState = number;
export type NtmsOpreqCommand = number;
export type NtmsOpreqState = number;
export type NtmsObjectsTypes = number;
export type SECPKG_CALL_PACKAGE_MESSAGE_TYPE = number;
export type SECPKG_SESSIONINFO_TYPE = number;
export type SECPKG_NAME_TYPE = number;
export type CRED_FETCH = number;
export type KSEC_CONTEXT_TYPE = number;
export type eTlsSignatureAlgorithm = number;
export type eTlsHashAlgorithm = number;
export type SchGetExtensionsOptions = number;
export type NETLOGON_LOGON_INFO_CLASS = number;
export type TOKENBINDING_TYPE = number;
export type TOKENBINDING_EXTENSION_FORMAT = number;
export type TOKENBINDING_KEY_PARAMETERS_TYPE = number;
export type EXTENDED_NAME_FORMAT = number;
export type SLDATATYPE = number;
export type SLIDTYPE = number;
export type SLLICENSINGSTATUS = number;
export type SL_ACTIVATION_TYPE = number;
export type SLREFERRALTYPE = number;
export type SL_GENUINE_STATE = number;
export type IDENTITY_TYPE = number;
export type IdentityUpdateEvent = number;
export type IDENTITY_URL = number;
export type ACCOUNT_STATE = number;
export type IsolationState = number;
export type ExtendedIsolationState = number;
export type NapTracingLevel = number;
export type FailureCategory = number;
export type FixupState = number;
export type NapNotifyType = number;
export type RemoteConfigurationType = number;
export type SAFER_POLICY_INFO_CLASS = number;
export type SAFER_OBJECT_INFO_CLASS = number;
export type SAFER_IDENTIFICATION_TYPES = number;
export type SCESVC_INFO_TYPE = number;
export type ECC_CURVE_TYPE_ENUM = number;
export type ECC_CURVE_ALG_ID_ENUM = number;
export type HASHALGORITHM_ENUM = number;
export type DSAFIPSVERSION_ENUM = number;
export type BCRYPT_HASH_OPERATION_TYPE = number;
export type BCRYPT_MULTI_OPERATION_TYPE = number;
export type CertKeyType = number;
export type CRYPT_XML_CHARSET = number;
export type CRYPT_XML_PROPERTY_ID = number;
export type CRYPT_XML_KEYINFO_SPEC = number;
export type HandleType = number;
export type PaddingMode = number;
export type Direction = number;
export type CASetupProperty = number;
export type MSCEPSetupProperty = number;
export type CESSetupProperty = number;
export type CEPSetupProperty = number;
export type ENUM_PERIOD = number;
export type DdqAccessLevel = number;
export type LicenseProtectionStatus = number;
export type TPMVSC_ATTESTATION_TYPE = number;
export type TPMVSCMGR_STATUS = number;
export type TPMVSCMGR_ERROR = number;
export type WELL_KNOWN_SID_TYPE = number;
export type ACL_INFORMATION_CLASS = number;
export type AUDIT_EVENT_TYPE = number;
export type TOKEN_TYPE = number;
export type TOKEN_ELEVATION_TYPE = number;
export type TOKEN_INFORMATION_CLASS = number;
export type MANDATORY_LEVEL = number;

// Constants
export const wszREGKEYNOSYSTEMCERTSVCPATH = `CurrentControlSet\\Services\\CertSvc`;
export const wszREGKEYCERTSVCPATH = `SYSTEM\\CurrentControlSet\\Services\\CertSvc`;
export const CA_DISP_INCOMPLETE = 0;
export const CA_DISP_ERROR = 1;
export const CA_DISP_REVOKED = 2;
export const CA_DISP_VALID = 3;
export const CA_DISP_INVALID = 4;
export const CA_DISP_UNDER_SUBMISSION = 5;
export const KRA_DISP_EXPIRED = 0;
export const KRA_DISP_NOTFOUND = 1;
export const KRA_DISP_REVOKED = 2;
export const KRA_DISP_VALID = 3;
export const KRA_DISP_INVALID = 4;
export const KRA_DISP_UNTRUSTED = 5;
export const KRA_DISP_NOTLOADED = 6;
export const CA_ACCESS_MASKROLES = 255;
export const CA_CRL_BASE = 1;
export const CA_CRL_DELTA = 2;
export const CA_CRL_REPUBLISH = 16;
export const ICF_ALLOWFOREIGN = 65536;
export const ICF_EXISTINGROW = 131072;
export const IKF_OVERWRITE = 65536;
export const wszOCSPCAPROP_CACERTIFICATE = `CACertificate`;
export const wszOCSPCAPROP_HASHALGORITHMID = `HashAlgorithmId`;
export const wszOCSPCAPROP_SIGNINGFLAGS = `SigningFlags`;
export const wszOCSPCAPROP_REMINDERDURATION = `ReminderDuration`;
export const wszOCSPCAPROP_SIGNINGCERTIFICATE = `SigningCertificate`;
export const wszOCSPCAPROP_CSPNAME = `CSPName`;
export const wszOCSPCAPROP_KEYSPEC = `KeySpec`;
export const wszOCSPCAPROP_ERRORCODE = `ErrorCode`;
export const wszOCSPCAPROP_PROVIDERCLSID = `ProviderCLSID`;
export const wszOCSPCAPROP_PROVIDERPROPERTIES = `Provider`;
export const wszOCSPCAPROP_LOCALREVOCATIONINFORMATION = `LocalRevocationInformation`;
export const wszOCSPCAPROP_SIGNINGCERTIFICATETEMPLATE = `SigningCertificateTemplate`;
export const wszOCSPCAPROP_CACONFIG = `CAConfig`;
export const wszOCSPPROP_LOGLEVEL = `LogLevel`;
export const wszOCSPPROP_DEBUG = `Debug`;
export const wszOCSPPROP_AUDITFILTER = `AuditFilter`;
export const wszOCSPPROP_ARRAYCONTROLLER = `ArrayController`;
export const wszOCSPPROP_ARRAYMEMBERS = `ArrayMembers`;
export const wszOCSPPROP_ENROLLPOLLINTERVAL = `EnrollPollInterval`;
export const wszOCSPISAPIPROP_VIRTUALROOTNAME = `VirtualRootName`;
export const wszOCSPISAPIPROP_NUMOFTHREADS = `NumOfThreads`;
export const wszOCSPISAPIPROP_NUMOFBACKENDCONNECTIONS = `NumOfBackendConnections`;
export const wszOCSPISAPIPROP_REFRESHRATE = `RefreshRate`;
export const wszOCSPISAPIPROP_MAXNUMOFCACHEENTRIES = `MaxNumOfCacheEntries`;
export const wszOCSPISAPIPROP_MAXAGE = `MaxAge`;
export const wszOCSPISAPIPROP_DEBUG = `ISAPIDebug`;
export const wszOCSPCOMMONPROP_REQFLAGS = `RequestFlags`;
export const wszOCSPCOMMONPROP_MAXINCOMINGMESSAGESIZE = `MaxIncomingMessageSize`;
export const wszOCSPCOMMONPROP_MAXNUMOFREQUESTENTRIES = `MaxNumOfRequestEntries`;
export const wszOCSPREVPROP_CRLURLTIMEOUT = `CrlUrlTimeOut`;
export const wszOCSPREVPROP_BASECRLURLS = `BaseCrlUrls`;
export const wszOCSPREVPROP_SERIALNUMBERSDIRS = `IssuedSerialNumbersDirectories`;
export const wszOCSPREVPROP_BASECRL = `BaseCrl`;
export const wszOCSPREVPROP_DELTACRLURLS = `DeltaCrlUrls`;
export const wszOCSPREVPROP_DELTACRL = `DeltaCrl`;
export const wszOCSPREVPROP_REFRESHTIMEOUT = `RefreshTimeOut`;
export const wszOCSPREVPROP_ERRORCODE = `RevocationErrorCode`;
export const szBACKUPANNOTATION = `Cert Server Backup Interface`;
export const szRESTOREANNOTATION = `Cert Server Restore Interface`;
export const CSBACKUP_TYPE_MASK = 3;
export const CSRESTORE_TYPE_FULL = 1;
export const CSRESTORE_TYPE_ONLINE = 2;
export const CSRESTORE_TYPE_CATCHUP = 4;
export const CSRESTORE_TYPE_MASK = 5;
export const CSBACKUP_DISABLE_INCREMENTAL = 4294967295;
export const CSBFT_DIRECTORY = 128;
export const CSBFT_DATABASE_DIRECTORY = 64;
export const CSBFT_LOG_DIRECTORY = 32;
export const CSCONTROL_SHUTDOWN = 1;
export const CSCONTROL_SUSPEND = 2;
export const CSCONTROL_RESTART = 3;
export const wszCONFIG_COMMONNAME = `CommonName`;
export const wszCONFIG_ORGUNIT = `OrgUnit`;
export const wszCONFIG_ORGANIZATION = `Organization`;
export const wszCONFIG_LOCALITY = `Locality`;
export const wszCONFIG_STATE = `State`;
export const wszCONFIG_COUNTRY = `Country`;
export const wszCONFIG_CONFIG = `Config`;
export const wszCONFIG_EXCHANGECERTIFICATE = `ExchangeCertificate`;
export const wszCONFIG_SIGNATURECERTIFICATE = `SignatureCertificate`;
export const wszCONFIG_DESCRIPTION = `Description`;
export const wszCONFIG_COMMENT = `Comment`;
export const wszCONFIG_SERVER = `Server`;
export const wszCONFIG_AUTHORITY = `Authority`;
export const wszCONFIG_SANITIZEDNAME = `SanitizedName`;
export const wszCONFIG_SHORTNAME = `ShortName`;
export const wszCONFIG_SANITIZEDSHORTNAME = `SanitizedShortName`;
export const wszCONFIG_FLAGS = `Flags`;
export const wszCONFIG_WEBENROLLMENTSERVERS = `WebEnrollmentServers`;
export const CAIF_DSENTRY = 1;
export const CAIF_SHAREDFOLDERENTRY = 2;
export const CAIF_REGISTRY = 4;
export const CAIF_LOCAL = 8;
export const CAIF_REGISTRYPARENT = 16;
export const CR_IN_ENCODEANY = 255;
export const CR_IN_ENCODEMASK = 255;
export const CR_IN_FORMATANY = 0;
export const CR_IN_PKCS10 = 256;
export const CR_IN_KEYGEN = 512;
export const CR_IN_PKCS7 = 768;
export const CR_IN_CMC = 1024;
export const CR_IN_CHALLENGERESPONSE = 1280;
export const CR_IN_SIGNEDCERTIFICATETIMESTAMPLIST = 1536;
export const CR_IN_FORMATMASK = 65280;
export const CR_IN_SCEP = 65536;
export const CR_IN_RPC = 131072;
export const CR_IN_HTTP = 196608;
export const CR_IN_FULLRESPONSE = 262144;
export const CR_IN_CRLS = 524288;
export const CR_IN_MACHINE = 1048576;
export const CR_IN_ROBO = 2097152;
export const CR_IN_CLIENTIDNONE = 4194304;
export const CR_IN_CONNECTONLY = 8388608;
export const CR_IN_RETURNCHALLENGE = 16777216;
export const CR_IN_SCEPPOST = 33554432;
export const CR_IN_CERTIFICATETRANSPARENCY = 67108864;
export const CR_DISP_REVOKED = 6;
export const CR_OUT_BASE64REQUESTHEADER = 3;
export const CR_OUT_HEX = 4;
export const CR_OUT_HEXASCII = 5;
export const CR_OUT_BASE64X509CRLHEADER = 9;
export const CR_OUT_HEXADDR = 10;
export const CR_OUT_HEXASCIIADDR = 11;
export const CR_OUT_HEXRAW = 12;
export const CR_OUT_ENCODEMASK = 255;
export const CR_OUT_CHAIN = 256;
export const CR_OUT_CRLS = 512;
export const CR_OUT_NOCRLF = 1073741824;
export const CR_OUT_NOCR = 2147483648;
export const CR_GEMT_DEFAULT = 0;
export const CR_GEMT_HRESULT_STRING = 1;
export const CR_GEMT_HTTP_ERROR = 2;
export const CR_PROP_NONE = 0;
export const CR_PROP_FILEVERSION = 1;
export const CR_PROP_PRODUCTVERSION = 2;
export const CR_PROP_EXITCOUNT = 3;
export const CR_PROP_EXITDESCRIPTION = 4;
export const CR_PROP_POLICYDESCRIPTION = 5;
export const CR_PROP_CANAME = 6;
export const CR_PROP_SANITIZEDCANAME = 7;
export const CR_PROP_SHAREDFOLDER = 8;
export const CR_PROP_PARENTCA = 9;
export const CR_PROP_CATYPE = 10;
export const CR_PROP_CASIGCERTCOUNT = 11;
export const CR_PROP_CASIGCERT = 12;
export const CR_PROP_CASIGCERTCHAIN = 13;
export const CR_PROP_CAXCHGCERTCOUNT = 14;
export const CR_PROP_CAXCHGCERT = 15;
export const CR_PROP_CAXCHGCERTCHAIN = 16;
export const CR_PROP_BASECRL = 17;
export const CR_PROP_DELTACRL = 18;
export const CR_PROP_CACERTSTATE = 19;
export const CR_PROP_CRLSTATE = 20;
export const CR_PROP_CAPROPIDMAX = 21;
export const CR_PROP_DNSNAME = 22;
export const CR_PROP_ROLESEPARATIONENABLED = 23;
export const CR_PROP_KRACERTUSEDCOUNT = 24;
export const CR_PROP_KRACERTCOUNT = 25;
export const CR_PROP_KRACERT = 26;
export const CR_PROP_KRACERTSTATE = 27;
export const CR_PROP_ADVANCEDSERVER = 28;
export const CR_PROP_TEMPLATES = 29;
export const CR_PROP_BASECRLPUBLISHSTATUS = 30;
export const CR_PROP_DELTACRLPUBLISHSTATUS = 31;
export const CR_PROP_CASIGCERTCRLCHAIN = 32;
export const CR_PROP_CAXCHGCERTCRLCHAIN = 33;
export const CR_PROP_CACERTSTATUSCODE = 34;
export const CR_PROP_CAFORWARDCROSSCERT = 35;
export const CR_PROP_CABACKWARDCROSSCERT = 36;
export const CR_PROP_CAFORWARDCROSSCERTSTATE = 37;
export const CR_PROP_CABACKWARDCROSSCERTSTATE = 38;
export const CR_PROP_CACERTVERSION = 39;
export const CR_PROP_SANITIZEDCASHORTNAME = 40;
export const CR_PROP_CERTCDPURLS = 41;
export const CR_PROP_CERTAIAURLS = 42;
export const CR_PROP_CERTAIAOCSPURLS = 43;
export const CR_PROP_LOCALENAME = 44;
export const CR_PROP_SUBJECTTEMPLATE_OIDS = 45;
export const CR_PROP_SCEPSERVERCERTS = 1000;
export const CR_PROP_SCEPSERVERCAPABILITIES = 1001;
export const CR_PROP_SCEPSERVERCERTSCHAIN = 1002;
export const CR_PROP_SCEPMIN = 1000;
export const CR_PROP_SCEPMAX = 1002;
export const FR_PROP_CLAIMCHALLENGE = 22;
export const EAN_NAMEOBJECTID = 2147483648;
export const EANR_SUPPRESS_IA5CONVERSION = 2147483648;
export const CERTENROLL_INDEX_BASE = 0;
export const EXITEVENT_INVALID = 0;
export const EXITEVENT_STARTUP = 128;
export const EXITEVENT_CERTIMPORTED = 512;
export const ENUMEXT_OBJECTID = 1;
export const CMM_REFRESHONLY = 1;
export const CMM_READONLY = 2;
export const DBG_CERTSRV = 1;
export const wszSERVICE_NAME = `CertSvc`;
export const wszREGKEYBASE = `SYSTEM\\CurrentControlSet\\Services\\CertSvc`;
export const wszREGKEYCONFIG = `Configuration`;
export const wszREGACTIVE = `Active`;
export const wszREGDIRECTORY = `ConfigurationDirectory`;
export const wszREGDBDIRECTORY = `DBDirectory`;
export const wszREGDBLOGDIRECTORY = `DBLogDirectory`;
export const wszREGDBSYSDIRECTORY = `DBSystemDirectory`;
export const wszREGDBTEMPDIRECTORY = `DBTempDirectory`;
export const wszREGDBSESSIONCOUNT = `DBSessionCount`;
export const wszREGDBMAXREADSESSIONCOUNT = `DBMaxReadSessionCount`;
export const wszREGDBFLAGS = `DBFlags`;
export const wszREGDBLASTFULLBACKUP = `DBLastFullBackup`;
export const wszREGDBLASTINCREMENTALBACKUP = `DBLastIncrementalBackup`;
export const wszREGDBLASTRECOVERY = `DBLastRecovery`;
export const wszREGWEBCLIENTCAMACHINE = `WebClientCAMachine`;
export const wszREGVERSION = `Version`;
export const wszREGWEBCLIENTCANAME = `WebClientCAName`;
export const wszREGWEBCLIENTCATYPE = `WebClientCAType`;
export const wszREGLDAPFLAGS = `LDAPFlags`;
export const wszREGCERTSRVDEBUG = `Debug`;
export const DBSESSIONCOUNTDEFAULT = 100;
export const DBFLAGS_READONLY = 1;
export const DBFLAGS_CREATEIFNEEDED = 2;
export const DBFLAGS_CIRCULARLOGGING = 4;
export const DBFLAGS_LAZYFLUSH = 8;
export const DBFLAGS_MAXCACHESIZEX100 = 16;
export const DBFLAGS_CHECKPOINTDEPTH60MB = 32;
export const DBFLAGS_LOGBUFFERSLARGE = 64;
export const DBFLAGS_LOGBUFFERSHUGE = 128;
export const DBFLAGS_LOGFILESIZE16MB = 256;
export const DBFLAGS_MULTITHREADTRANSACTIONS = 512;
export const DBFLAGS_DISABLESNAPSHOTBACKUP = 1024;
export const DBFLAGS_ENABLEVOLATILEREQUESTS = 2048;
export const LDAPF_SSLENABLE = 1;
export const LDAPF_SIGNDISABLE = 2;
export const CSVER_MAJOR_WIN2K = 1;
export const CSVER_MINOR_WIN2K = 1;
export const CSVER_MAJOR_WHISTLER = 2;
export const CSVER_MINOR_WHISTLER_BETA2 = 1;
export const CSVER_MINOR_WHISTLER_BETA3 = 2;
export const CSVER_MAJOR_LONGHORN = 3;
export const CSVER_MINOR_LONGHORN_BETA1 = 1;
export const CSVER_MAJOR_WIN7 = 4;
export const CSVER_MINOR_WIN7 = 1;
export const CSVER_MAJOR_WIN8 = 5;
export const CSVER_MINOR_WIN8 = 1;
export const CSVER_MAJOR_WINBLUE = 6;
export const CSVER_MINOR_WINBLUE = 1;
export const CSVER_MAJOR_THRESHOLD = 7;
export const CSVER_MINOR_THRESHOLD = 1;
export const CSVER_MAJOR = 7;
export const CSVER_MINOR = 1;
export const wszREGKEYRESTOREINPROGRESS = `RestoreInProgress`;
export const wszREGKEYDBPARAMETERS = `DBParameters`;
export const wszREGCADESCRIPTION = `CADescription`;
export const wszREGCACERTHASH = `CACertHash`;
export const wszREGCASERIALNUMBER = `CACertSerialNumber`;
export const wszREGCAXCHGCERTHASH = `CAXchgCertHash`;
export const wszREGKRACERTHASH = `KRACertHash`;
export const wszREGKRACERTCOUNT = `KRACertCount`;
export const wszREGKRAFLAGS = `KRAFlags`;
export const wszREGCATYPE = `CAType`;
export const wszREGCERTENROLLCOMPATIBLE = `CertEnrollCompatible`;
export const wszREGENFORCEX500NAMELENGTHS = `EnforceX500NameLengths`;
export const wszREGCOMMONNAME = `CommonName`;
export const wszREGCLOCKSKEWMINUTES = `ClockSkewMinutes`;
export const wszREGCRLNEXTPUBLISH = `CRLNextPublish`;
export const wszREGCRLPERIODSTRING = `CRLPeriod`;
export const wszREGCRLPERIODCOUNT = `CRLPeriodUnits`;
export const wszREGCRLOVERLAPPERIODSTRING = `CRLOverlapPeriod`;
export const wszREGCRLOVERLAPPERIODCOUNT = `CRLOverlapUnits`;
export const wszREGCRLDELTANEXTPUBLISH = `CRLDeltaNextPublish`;
export const wszREGCRLDELTAPERIODSTRING = `CRLDeltaPeriod`;
export const wszREGCRLDELTAPERIODCOUNT = `CRLDeltaPeriodUnits`;
export const wszREGCRLDELTAOVERLAPPERIODSTRING = `CRLDeltaOverlapPeriod`;
export const wszREGCRLDELTAOVERLAPPERIODCOUNT = `CRLDeltaOverlapUnits`;
export const wszREGCRLPUBLICATIONURLS = `CRLPublicationURLs`;
export const wszREGCACERTPUBLICATIONURLS = `CACertPublicationURLs`;
export const wszREGCAXCHGVALIDITYPERIODSTRING = `CAXchgValidityPeriod`;
export const wszREGCAXCHGVALIDITYPERIODCOUNT = `CAXchgValidityPeriodUnits`;
export const wszREGCAXCHGOVERLAPPERIODSTRING = `CAXchgOverlapPeriod`;
export const wszREGCAXCHGOVERLAPPERIODCOUNT = `CAXchgOverlapPeriodUnits`;
export const wszREGCRLPATH_OLD = `CRLPath`;
export const wszREGCRLEDITFLAGS = `CRLEditFlags`;
export const wszREGCRLFLAGS = `CRLFlags`;
export const wszREGCRLATTEMPTREPUBLISH = `CRLAttemptRepublish`;
export const wszREGENABLED = `Enabled`;
export const wszREGFORCETELETEX = `ForceTeletex`;
export const wszREGLOGLEVEL = `LogLevel`;
export const wszREGHIGHSERIAL = `HighSerial`;
export const wszREGPOLICYFLAGS = `PolicyFlags`;
export const wszREGNAMESEPARATOR = `SubjectNameSeparator`;
export const wszREGSUBJECTTEMPLATE = `SubjectTemplate`;
export const wszREGCAUSEDS = `UseDS`;
export const wszREGVALIDITYPERIODSTRING = `ValidityPeriod`;
export const wszREGVALIDITYPERIODCOUNT = `ValidityPeriodUnits`;
export const wszREGPARENTCAMACHINE = `ParentCAMachine`;
export const wszREGPARENTCANAME = `ParentCAName`;
export const wszREGREQUESTFILENAME = `RequestFileName`;
export const wszREGREQUESTID = `RequestId`;
export const wszREGREQUESTKEYCONTAINER = `RequestKeyContainer`;
export const wszREGREQUESTKEYINDEX = `RequestKeyIndex`;
export const wszREGCASERVERNAME = `CAServerName`;
export const wszREGCACERTFILENAME = `CACertFileName`;
export const wszREGCASECURITY = `Security`;
export const wszREGAUDITFILTER = `AuditFilter`;
export const wszREGOFFICERRIGHTS = `OfficerRights`;
export const wszENROLLMENTAGENTRIGHTS = `EnrollmentAgentRights`;
export const wszREGMAXINCOMINGMESSAGESIZE = `MaxIncomingMessageSize`;
export const wszREGMAXINCOMINGALLOCSIZE = `MaxIncomingAllocSize`;
export const wszREGROLESEPARATIONENABLED = `RoleSeparationEnabled`;
export const wszREGALTERNATEPUBLISHDOMAINS = `AlternatePublishDomains`;
export const wszREGSETUPSTATUS = `SetupStatus`;
export const wszREGINTERFACEFLAGS = `InterfaceFlags`;
export const wszREGDSCONFIGDN = `DSConfigDN`;
export const wszREGDSDOMAINDN = `DSDomainDN`;
export const wszREGVIEWAGEMINUTES = `ViewAgeMinutes`;
export const wszREGVIEWIDLEMINUTES = `ViewIdleMinutes`;
export const wszREGEKPUBLISTDIRECTORIES = `EndorsementKeyListDirectories`;
export const wszCERTIFICATETRANSPARENCYFLAGS = `CertificateTransparencyFlags`;
export const wszREGMAXSCTLISTSIZE = `MaxSCTListSize`;
export const wszREGCERTIFICATETRANSPARENCYINFOOID = `CTInformationExtensionOid`;
export const wszREGPROCESSINGFLAGS = `ProcessingFlags`;
export const wszREGUSEDEFINEDCACERTINREQ = `UseDefinedCACertInRequest`;
export const wszREGENABLEDEKUFORDEFINEDCACERT = `EnabledEKUForDefinedCACert`;
export const wszREGEKUOIDSFORPUBLISHEXPIREDCERTINCRL = `EKUOIDsForPublishExpiredCertInCRL`;
export const wszCRTFILENAMEEXT = `.crt`;
export const wszPFXFILENAMEEXT = `.p12`;
export const wszDATFILENAMEEXT = `.dat`;
export const wszLOGFILENAMEEXT = `.log`;
export const wszDBFILENAMEEXT = `.edb`;
export const szDBBASENAMEPARM = `edb`;
export const wszLOGPATH = `CertLog`;
export const wszDBBACKUPSUBDIR = `DataBase`;
export const wszDBBACKUPCERTBACKDAT = `certbkxp.dat`;
export const CCLOCKSKEWMINUTESDEFAULT = 10;
export const CVIEWAGEMINUTESDEFAULT = 16;
export const dwVALIDITYPERIODCOUNTDEFAULT_ROOT = 5;
export const dwVALIDITYPERIODCOUNTDEFAULT_ENTERPRISE = 2;
export const dwVALIDITYPERIODCOUNTDEFAULT_STANDALONE = 1;
export const dwCAXCHGVALIDITYPERIODCOUNTDEFAULT = 1;
export const dwCAXCHGOVERLAPPERIODCOUNTDEFAULT = 1;
export const dwCRLPERIODCOUNTDEFAULT = 1;
export const dwCRLOVERLAPPERIODCOUNTDEFAULT = 0;
export const dwCRLDELTAPERIODCOUNTDEFAULT = 1;
export const dwCRLDELTAOVERLAPPERIODCOUNTDEFAULT = 0;
export const SETUP_SERVER_FLAG = 1;
export const SETUP_CLIENT_FLAG = 2;
export const SETUP_SUSPEND_FLAG = 4;
export const SETUP_REQUEST_FLAG = 8;
export const SETUP_ONLINE_FLAG = 16;
export const SETUP_DENIED_FLAG = 32;
export const SETUP_CREATEDB_FLAG = 64;
export const SETUP_ATTEMPT_VROOT_CREATE = 128;
export const SETUP_FORCECRL_FLAG = 256;
export const SETUP_UPDATE_CAOBJECT_SVRTYPE = 512;
export const SETUP_SERVER_UPGRADED_FLAG = 1024;
export const SETUP_W2K_SECURITY_NOT_UPGRADED_FLAG = 2048;
export const SETUP_SECURITY_CHANGED = 4096;
export const SETUP_DCOM_SECURITY_UPDATED_FLAG = 8192;
export const SETUP_SERVER_IS_UP_TO_DATE_FLAG = 16384;
export const CRLF_DELTA_USE_OLDEST_UNEXPIRED_BASE = 1;
export const CRLF_DELETE_EXPIRED_CRLS = 2;
export const CRLF_CRLNUMBER_CRITICAL = 4;
export const CRLF_REVCHECK_IGNORE_OFFLINE = 8;
export const CRLF_IGNORE_INVALID_POLICIES = 16;
export const CRLF_REBUILD_MODIFIED_SUBJECT_ONLY = 32;
export const CRLF_SAVE_FAILED_CERTS = 64;
export const CRLF_IGNORE_UNKNOWN_CMC_ATTRIBUTES = 128;
export const CRLF_IGNORE_CROSS_CERT_TRUST_ERROR = 256;
export const CRLF_PUBLISH_EXPIRED_CERT_CRLS = 512;
export const CRLF_ENFORCE_ENROLLMENT_AGENT = 1024;
export const CRLF_DISABLE_RDN_REORDER = 2048;
export const CRLF_DISABLE_ROOT_CROSS_CERTS = 4096;
export const CRLF_LOG_FULL_RESPONSE = 8192;
export const CRLF_USE_XCHG_CERT_TEMPLATE = 16384;
export const CRLF_USE_CROSS_CERT_TEMPLATE = 32768;
export const CRLF_ALLOW_REQUEST_ATTRIBUTE_SUBJECT = 65536;
export const CRLF_REVCHECK_IGNORE_NOREVCHECK = 131072;
export const CRLF_PRESERVE_EXPIRED_CA_CERTS = 262144;
export const CRLF_PRESERVE_REVOKED_CA_CERTS = 524288;
export const CRLF_DISABLE_CHAIN_VERIFICATION = 1048576;
export const CRLF_BUILD_ROOTCA_CRLENTRIES_BASEDONKEY = 2097152;
export const KRAF_ENABLEFOREIGN = 1;
export const KRAF_SAVEBADREQUESTKEY = 2;
export const KRAF_ENABLEARCHIVEALL = 4;
export const KRAF_DISABLEUSEDEFAULTPROVIDER = 8;
export const IF_LOCKICERTREQUEST = 1;
export const IF_NOREMOTEICERTREQUEST = 2;
export const IF_NOLOCALICERTREQUEST = 4;
export const IF_NORPCICERTREQUEST = 8;
export const IF_NOREMOTEICERTADMIN = 16;
export const IF_NOLOCALICERTADMIN = 32;
export const IF_NOREMOTEICERTADMINBACKUP = 64;
export const IF_NOLOCALICERTADMINBACKUP = 128;
export const IF_NOSNAPSHOTBACKUP = 256;
export const IF_ENFORCEENCRYPTICERTREQUEST = 512;
export const IF_ENFORCEENCRYPTICERTADMIN = 1024;
export const IF_ENABLEEXITKEYRETRIEVAL = 2048;
export const IF_ENABLEADMINASAUDITOR = 4096;
export const PROCFLG_NONE = 0;
export const PROCFLG_ENFORCEGOODKEYS = 1;
export const CSURL_SERVERPUBLISH = 1;
export const CSURL_ADDTOCERTCDP = 2;
export const CSURL_ADDTOFRESHESTCRL = 4;
export const CSURL_ADDTOCRLCDP = 8;
export const CSURL_PUBLISHRETRY = 16;
export const CSURL_ADDTOCERTOCSP = 32;
export const CSURL_SERVERPUBLISHDELTA = 64;
export const CSURL_ADDTOIDP = 128;
export const wszREGKEYCSP = `CSP`;
export const wszREGKEYENCRYPTIONCSP = `EncryptionCSP`;
export const wszREGKEYEXITMODULES = `ExitModules`;
export const wszREGKEYPOLICYMODULES = `PolicyModules`;
export const wszSECUREDATTRIBUTES = `SignedAttributes`;
export const wszzDEFAULTSIGNEDATTRIBUTES = `RequesterName\0`;
export const wszREGBACKUPLOGDIRECTORY = `BackupLogDirectory`;
export const wszREGCHECKPOINTFILE = `CheckPointFile`;
export const wszREGHIGHLOGNUMBER = `HighLogNumber`;
export const wszREGLOWLOGNUMBER = `LowLogNumber`;
export const wszREGLOGPATH = `LogPath`;
export const wszREGRESTOREMAPCOUNT = `RestoreMapCount`;
export const wszREGRESTOREMAP = `RestoreMap`;
export const wszREGDATABASERECOVERED = `DatabaseRecovered`;
export const wszREGRESTORESTATUS = `RestoreStatus`;
export const wszREGB2ICERTMANAGEMODULE = `ICertManageModule`;
export const wszREGSP4DEFAULTCONFIGURATION = `DefaultConfiguration`;
export const wszREGSP4KEYSETNAME = `KeySetName`;
export const wszREGSP4SUBJECTNAMESEPARATOR = `SubjectNameSeparator`;
export const wszREGSP4NAMES = `Names`;
export const wszREGSP4QUERIES = `Queries`;
export const wszREGNETSCAPECERTTYPE = `NetscapeCertType`;
export const wszNETSCAPEREVOCATIONTYPE = `Netscape`;
export const wszREGPROVIDERTYPE = `ProviderType`;
export const wszREGPROVIDER = `Provider`;
export const wszHASHALGORITHM = `HashAlgorithm`;
export const wszENCRYPTIONALGORITHM = `EncryptionAlgorithm`;
export const wszMACHINEKEYSET = `MachineKeyset`;
export const wszREGKEYSIZE = `KeySize`;
export const wszREGSYMMETRICKEYSIZE = `SymmetricKeySize`;
export const wszCNGPUBLICKEYALGORITHM = `CNGPublicKeyAlgorithm`;
export const wszCNGHASHALGORITHM = `CNGHashAlgorithm`;
export const wszCNGENCRYPTIONALGORITHM = `CNGEncryptionAlgorithm`;
export const wszREGALTERNATESIGNATUREALGORITHM = `AlternateSignatureAlgorithm`;
export const szNAMESEPARATORDEFAULT = `\n`;
export const wszPERIODYEARS = `Years`;
export const wszPERIODMONTHS = `Months`;
export const wszPERIODWEEKS = `Weeks`;
export const wszPERIODDAYS = `Days`;
export const wszPERIODHOURS = `Hours`;
export const wszPERIODMINUTES = `Minutes`;
export const wszPERIODSECONDS = `Seconds`;
export const wszREGISSUERCERTURLFLAGS = `IssuerCertURLFlags`;
export const wszREGEDITFLAGS = `EditFlags`;
export const wszREGUPNMAP = `UPNMap`;
export const wszREGSUBJECTALTNAME = `SubjectAltName`;
export const wszREGSUBJECTALTNAME2 = `SubjectAltName2`;
export const wszREGREQUESTDISPOSITION = `RequestDisposition`;
export const wszREGCAPATHLENGTH = `CAPathLength`;
export const wszREGREVOCATIONTYPE = `RevocationType`;
export const wszREGLDAPREVOCATIONCRLURL_OLD = `LDAPRevocationCRLURL`;
export const wszREGREVOCATIONCRLURL_OLD = `RevocationCRLURL`;
export const wszREGFTPREVOCATIONCRLURL_OLD = `FTPRevocationCRLURL`;
export const wszREGFILEREVOCATIONCRLURL_OLD = `FileRevocationCRLURL`;
export const wszREGREVOCATIONURL = `RevocationURL`;
export const wszREGLDAPISSUERCERTURL_OLD = `LDAPIssuerCertURL`;
export const wszREGISSUERCERTURL_OLD = `IssuerCertURL`;
export const wszREGFTPISSUERCERTURL_OLD = `FTPIssuerCertURL`;
export const wszREGFILEISSUERCERTURL_OLD = `FileIssuerCertURL`;
export const wszREGENABLEREQUESTEXTENSIONLIST = `EnableRequestExtensionList`;
export const wszREGENABLEENROLLEEREQUESTEXTENSIONLIST = `EnableEnrolleeRequestExtensionList`;
export const wszREGDISABLEEXTENSIONLIST = `DisableExtensionList`;
export const wszREGEKUOIDSFORVOLATILEREQUESTS = `EKUOIDsforVolatileRequests`;
export const wszREGLDAPSESSIONOPTIONS = `LDAPSessionOptions`;
export const wszLDAPSESSIONOPTIONVALUE = `LDAPSessionOptionValue`;
export const wszREGDEFAULTSMIME = `DefaultSMIME`;
export const CAPATHLENGTH_INFINITE = 4294967295;
export const REQDISP_PENDING = 0;
export const REQDISP_ISSUE = 1;
export const REQDISP_DENY = 2;
export const REQDISP_USEREQUESTATTRIBUTE = 3;
export const REQDISP_MASK = 255;
export const REQDISP_PENDINGFIRST = 256;
export const REQDISP_DEFAULT_ENTERPRISE = 1;
export const REVEXT_CDPLDAPURL_OLD = 1;
export const REVEXT_CDPHTTPURL_OLD = 2;
export const REVEXT_CDPFTPURL_OLD = 4;
export const REVEXT_CDPFILEURL_OLD = 8;
export const REVEXT_CDPURLMASK_OLD = 255;
export const REVEXT_CDPENABLE = 256;
export const REVEXT_ASPENABLE = 512;
export const REVEXT_DEFAULT_NODS = 256;
export const REVEXT_DEFAULT_DS = 256;
export const ISSCERT_LDAPURL_OLD = 1;
export const ISSCERT_HTTPURL_OLD = 2;
export const ISSCERT_FTPURL_OLD = 4;
export const ISSCERT_FILEURL_OLD = 8;
export const ISSCERT_URLMASK_OLD = 255;
export const ISSCERT_ENABLE = 256;
export const ISSCERT_DEFAULT_NODS = 256;
export const ISSCERT_DEFAULT_DS = 256;
export const EDITF_ENABLEREQUESTEXTENSIONS = 1;
export const EDITF_REQUESTEXTENSIONLIST = 2;
export const EDITF_DISABLEEXTENSIONLIST = 4;
export const EDITF_ADDOLDKEYUSAGE = 8;
export const EDITF_ADDOLDCERTTYPE = 16;
export const EDITF_ATTRIBUTEENDDATE = 32;
export const EDITF_BASICCONSTRAINTSCRITICAL = 64;
export const EDITF_BASICCONSTRAINTSCA = 128;
export const EDITF_ENABLEAKIKEYID = 256;
export const EDITF_ATTRIBUTECA = 512;
export const EDITF_IGNOREREQUESTERGROUP = 1024;
export const EDITF_ENABLEAKIISSUERNAME = 2048;
export const EDITF_ENABLEAKIISSUERSERIAL = 4096;
export const EDITF_ENABLEAKICRITICAL = 8192;
export const EDITF_SERVERUPGRADED = 16384;
export const EDITF_ATTRIBUTEEKU = 32768;
export const EDITF_ENABLEDEFAULTSMIME = 65536;
export const EDITF_EMAILOPTIONAL = 131072;
export const EDITF_ATTRIBUTESUBJECTALTNAME2 = 262144;
export const EDITF_ENABLELDAPREFERRALS = 524288;
export const EDITF_ENABLECHASECLIENTDC = 1048576;
export const EDITF_AUDITCERTTEMPLATELOAD = 2097152;
export const EDITF_DISABLEOLDOSCNUPN = 4194304;
export const EDITF_DISABLELDAPPACKAGELIST = 8388608;
export const EDITF_ENABLEUPNMAP = 16777216;
export const EDITF_ENABLEOCSPREVNOCHECK = 33554432;
export const EDITF_ENABLERENEWONBEHALFOF = 67108864;
export const EDITF_ENABLEKEYENCIPHERMENTCACERT = 134217728;
export const wszREGLDAPREVOCATIONDN_OLD = `LDAPRevocationDN`;
export const wszREGLDAPREVOCATIONDNTEMPLATE_OLD = `LDAPRevocationDNTemplate`;
export const wszCRLPUBLISHRETRYCOUNT = `CRLPublishRetryCount`;
export const wszREGCERTPUBLISHFLAGS = `PublishCertFlags`;
export const EXITPUB_FILE = 1;
export const EXITPUB_ACTIVEDIRECTORY = 2;
export const EXITPUB_REMOVEOLDCERTS = 16;
export const EXITPUB_DEFAULT_ENTERPRISE = 2;
export const EXITPUB_DEFAULT_STANDALONE = 1;
export const wszCLASS_CERTADMIN = `CertificateAuthority.Admin`;
export const wszCLASS_CERTCONFIG = `CertificateAuthority.Config`;
export const wszCLASS_CERTGETCONFIG = `CertificateAuthority.GetConfig`;
export const wszCLASS_CERTENCODE = `CertificateAuthority.Encode`;
export const wszCLASS_CERTDBMEM = `CertificateAuthority.DBMem`;
export const wszCLASS_CERTREQUEST = `CertificateAuthority.Request`;
export const wszCLASS_CERTSERVEREXIT = `CertificateAuthority.ServerExit`;
export const wszCLASS_CERTSERVERPOLICY = `CertificateAuthority.ServerPolicy`;
export const wszCLASS_CERTVIEW = `CertificateAuthority.View`;
export const wszMICROSOFTCERTMODULE_PREFIX = `CertificateAuthority_MicrosoftDefault`;
export const wszCERTMANAGE_SUFFIX = `Manage`;
export const wszCERTEXITMODULE_POSTFIX = `.Exit`;
export const wszCERTPOLICYMODULE_POSTFIX = `.Policy`;
export const wszCAPOLICYFILE = `CAPolicy.inf`;
export const wszINFSECTION_CDP = `CRLDistributionPoint`;
export const wszINFSECTION_AIA = `AuthorityInformationAccess`;
export const wszINFSECTION_EKU = `EnhancedKeyUsageExtension`;
export const wszINFSECTION_CCDP = `CrossCertificateDistributionPointsExtension`;
export const wszINFSECTION_CERTSERVER = `certsrv_server`;
export const wszINFKEY_RENEWALKEYLENGTH = `RenewalKeyLength`;
export const wszINFKEY_RENEWALVALIDITYPERIODSTRING = `RenewalValidityPeriod`;
export const wszINFKEY_RENEWALVALIDITYPERIODCOUNT = `RenewalValidityPeriodUnits`;
export const wszINFKEY_UTF8 = `UTF8`;
export const wszINFKEY_CRLPERIODSTRING = `CRLPeriod`;
export const wszINFKEY_CRLPERIODCOUNT = `CRLPeriodUnits`;
export const wszINFKEY_CRLDELTAPERIODSTRING = `CRLDeltaPeriod`;
export const wszINFKEY_CRLDELTAPERIODCOUNT = `CRLDeltaPeriodUnits`;
export const wszINFKEY_LOADDEFAULTTEMPLATES = `LoadDefaultTemplates`;
export const wszINFKEY_ENABLEKEYCOUNTING = `EnableKeyCounting`;
export const wszINFKEY_FORCEUTF8 = `ForceUTF8`;
export const wszINFKEY_ALTERNATESIGNATUREALGORITHM = `AlternateSignatureAlgorithm`;
export const wszINFKEY_SHOWALLCSPS = `ShowAllCSPs`;
export const wszINFKEY_CRITICAL = `Critical`;
export const wszINFKEY_EMPTY = `Empty`;
export const wszINFKEY_CCDPSYNCDELTATIME = `SyncDeltaTime`;
export const wszINFSECTION_CAPOLICY = `CAPolicy`;
export const wszINFSECTION_POLICYSTATEMENT = `PolicyStatementExtension`;
export const wszINFSECTION_APPLICATIONPOLICYSTATEMENT = `ApplicationPolicyStatementExtension`;
export const wszINFKEY_POLICIES = `Policies`;
export const wszINFKEY_OID = `OID`;
export const wszINFKEY_NOTICE = `Notice`;
export const wszINFKEY_FLAGS = `Flags`;
export const wszINFSECTION_REQUESTATTRIBUTES = `RequestAttributes`;
export const wszINFSECTION_NAMECONSTRAINTS = `NameConstraintsExtension`;
export const wszINFKEY_INCLUDE = `Include`;
export const wszINFKEY_EXCLUDE = `Exclude`;
export const wszINFKEY_SUBTREE = `SubTree`;
export const wszINFKEY_UPN = `UPN`;
export const wszINFKEY_EMAIL = `EMail`;
export const wszINFKEY_DNS = `DNS`;
export const wszINFKEY_DIRECTORYNAME = `DirectoryName`;
export const wszINFKEY_URL = `URL`;
export const wszINFKEY_IPADDRESS = `IPAddress`;
export const wszINFKEY_REGISTEREDID = `RegisteredId`;
export const wszINFKEY_OTHERNAME = `OtherName`;
export const wszINFSECTION_POLICYMAPPINGS = `PolicyMappingsExtension`;
export const wszINFSECTION_APPLICATIONPOLICYMAPPINGS = `ApplicationPolicyMappingsExtension`;
export const wszINFSECTION_POLICYCONSTRAINTS = `PolicyConstraintsExtension`;
export const wszINFSECTION_APPLICATIONPOLICYCONSTRAINTS = `ApplicationPolicyConstraintsExtension`;
export const wszINFKEY_REQUIREEXPLICITPOLICY = `RequireExplicitPolicy`;
export const wszINFKEY_INHIBITPOLICYMAPPING = `InhibitPolicyMapping`;
export const wszINFSECTION_BASICCONSTRAINTS = `BasicConstraintsExtension`;
export const wszINFKEY_PATHLENGTH = `PathLength`;
export const wszINFSECTION_EXTENSIONS = `Extensions`;
export const wszINFSECTION_PROPERTIES = `Properties`;
export const wszINFKEY_CONTINUE = `_continue_`;
export const wszINFSECTION_NEWREQUEST = `NewRequest`;
export const wszINFKEY_SUBJECT = `Subject`;
export const wszINFKEY_SUBJECTNAMEFLAGS = `SubjectNameFlags`;
export const wszINFKEY_X500NAMEFLAGS = `X500NameFlags`;
export const wszINFKEY_EXPORTABLE = `Exportable`;
export const wszINFKEY_EXPORTABLEENCRYPTED = `ExportableEncrypted`;
export const wszINFKEY_HASHALGORITHM = `HashAlgorithm`;
export const wszINFKEY_KEYALGORITHM = `KeyAlgorithm`;
export const wszINFKEY_KEYALGORITHMPARMETERS = `KeyAlgorithmParameters`;
export const wszINFKEY_KEYCONTAINER = `KeyContainer`;
export const wszINFKEY_READERNAME = `ReaderName`;
export const wszINFKEY_KEYLENGTH = `KeyLength`;
export const wszINFKEY_LEGACYKEYSPEC = `KeySpec`;
export const wszINFKEY_KEYUSAGEEXTENSION = `KeyUsage`;
export const wszINFKEY_KEYUSAGEPROPERTY = `KeyUsageProperty`;
export const wszINFKEY_MACHINEKEYSET = `MachineKeySet`;
export const wszINFKEY_PRIVATEKEYARCHIVE = `PrivateKeyArchive`;
export const wszINFKEY_ENCRYPTIONALGORITHM = `EncryptionAlgorithm`;
export const wszINFKEY_ENCRYPTIONLENGTH = `EncryptionLength`;
export const wszINFKEY_PROVIDERNAME = `ProviderName`;
export const wszINFKEY_PROVIDERTYPE = `ProviderType`;
export const wszINFKEY_RENEWALCERT = `RenewalCert`;
export const wszINFKEY_REQUESTTYPE = `RequestType`;
export const wszINFKEY_SECURITYDESCRIPTOR = `SecurityDescriptor`;
export const wszINFKEY_SILENT = `Silent`;
export const wszINFKEY_SMIME = `SMIME`;
export const wszINFKEY_SUPPRESSDEFAULTS = `SuppressDefaults`;
export const wszINFKEY_USEEXISTINGKEY = `UseExistingKeySet`;
export const wszINFKEY_USERPROTECTED = `UserProtected`;
export const wszINFKEY_KEYPROTECTION = `KeyProtection`;
export const wszINFKEY_UICONTEXTMESSAGE = `UIContextMessage`;
export const wszINFKEY_FRIENDLYNAME = `FriendlyName`;
export const wszINFKEY_NOTBEFORE = `NotBefore`;
export const wszINFKEY_NOTAFTER = `NotAfter`;
export const wszINFKEY_ATTESTPRIVATEKEY = `AttestPrivateKey`;
export const wszINFKEY_PUBLICKEY = `PublicKey`;
export const wszINFKEY_PUBLICKEYPARAMETERS = `PublicKeyParameters`;
export const wszINFKEY_ECCKEYPARAMETERS = `EccKeyParameters`;
export const wszINFKEY_ECCKEYPARAMETERS_P = `EccKeyParameters_P`;
export const wszINFKEY_ECCKEYPARAMETERS_A = `EccKeyParameters_A`;
export const wszINFKEY_ECCKEYPARAMETERS_B = `EccKeyParameters_B`;
export const wszINFKEY_ECCKEYPARAMETERS_SEED = `EccKeyParameters_Seed`;
export const wszINFKEY_ECCKEYPARAMETERS_BASE = `EccKeyParameters_Base`;
export const wszINFKEY_ECCKEYPARAMETERS_ORDER = `EccKeyParameters_Order`;
export const wszINFKEY_ECCKEYPARAMETERS_COFACTOR = `EccKeyParameters_Cofactor`;
export const wszINFKEY_ECCKEYPARAMETERSTYPE = `EccKeyParametersType`;
export const wszINFKEY_SERIALNUMBER = `SerialNumber`;
export const wszINFKEY_CATHUMBPRINT = `CAThumbprint`;
export const wszINFKEY_CACERTS = `CACerts`;
export const wszINFKEY_CACAPABILITIES = `CACapabilities`;
export const wszINFKEY_CHALLENGEPASSWORD = `ChallengePassword`;
export const wszINFVALUE_REQUESTTYPE_PKCS10 = `PKCS10`;
export const wszINFVALUE_REQUESTTYPE_PKCS7 = `PKCS7`;
export const wszINFVALUE_REQUESTTYPE_CMC = `CMC`;
export const wszINFVALUE_REQUESTTYPE_CERT = `Cert`;
export const wszINFVALUE_REQUESTTYPE_SCEP = `SCEP`;
export const wszINFVALUE_ENDORSEMENTKEY = `EndorsementKey`;
export const wszREGEXITSMTPKEY = `SMTP`;
export const wszREGEXITSMTPTEMPLATES = `Templates`;
export const wszREGEXITSMTPEVENTFILTER = `EventFilter`;
export const wszREGEXITSMTPSERVER = `SMTPServer`;
export const wszREGEXITSMTPAUTHENTICATE = `SMTPAuthenticate`;
export const wszREGEXITDENIEDKEY = `Denied`;
export const wszREGEXITISSUEDKEY = `Issued`;
export const wszREGEXITPENDINGKEY = `Pending`;
export const wszREGEXITREVOKEDKEY = `Revoked`;
export const wszREGEXITCRLISSUEDKEY = `CRLIssued`;
export const wszREGEXITSHUTDOWNKEY = `Shutdown`;
export const wszREGEXITSTARTUPKEY = `Startup`;
export const wszREGEXITIMPORTEDKEY = `Imported`;
export const wszREGEXITSMTPFROM = `From`;
export const wszREGEXITSMTPTO = `To`;
export const wszREGEXITSMTPCC = `Cc`;
export const wszREGEXITTITLEFORMAT = `TitleFormat`;
export const wszREGEXITTITLEARG = `TitleArg`;
export const wszREGEXITBODYFORMAT = `BodyFormat`;
export const wszREGEXITBODYARG = `BodyArg`;
export const wszREGEXITPROPNOTFOUND = `???`;
export const wszREGKEYENROLLMENT = `Software\\Microsoft\\Cryptography\\AutoEnrollment`;
export const wszREGKEYGROUPPOLICYENROLLMENT = `Software\\Policies\\Microsoft\\Cryptography\\AutoEnrollment`;
export const wszREGMAXPENDINGREQUESTDAYS = `MaxPendingRequestDays`;
export const wszREGAELOGLEVEL_OLD = `AEEventLogLevel`;
export const wszREGENROLLFLAGS = `EnrollFlags`;
export const wszREGVERIFYFLAGS = `VerifyFlags`;
export const wszREGUNICODE = `Unicode`;
export const wszREGAIKCLOUDCAURL = `AIKCloudCAURL`;
export const wszREGAIKKEYALGORITHM = `AIKKeyAlgorithm`;
export const wszREGAIKKEYLENGTH = `AIKKeyLength`;
export const wszREGPRESERVESCEPDUMMYCERTS = `PreserveSCEPDummyCerts`;
export const wszREGALLPROVIDERS = `All`;
export const TP_MACHINEPOLICY = 1;
export const wszREGKEYREPAIR = `KeyRepair`;
export const KR_ENABLE_MACHINE = 1;
export const KR_ENABLE_USER = 2;
export const wszPROPDISTINGUISHEDNAME = `DistinguishedName`;
export const wszPROPRAWNAME = `RawName`;
export const wszPROPCOUNTRY = `Country`;
export const wszPROPORGANIZATION = `Organization`;
export const wszPROPORGUNIT = `OrgUnit`;
export const wszPROPCOMMONNAME = `CommonName`;
export const wszPROPLOCALITY = `Locality`;
export const wszPROPSTATE = `State`;
export const wszPROPTITLE = `Title`;
export const wszPROPGIVENNAME = `GivenName`;
export const wszPROPINITIALS = `Initials`;
export const wszPROPSURNAME = `SurName`;
export const wszPROPDOMAINCOMPONENT = `DomainComponent`;
export const wszPROPEMAIL = `EMail`;
export const wszPROPSTREETADDRESS = `StreetAddress`;
export const wszPROPUNSTRUCTUREDNAME = `UnstructuredName`;
export const wszPROPUNSTRUCTUREDADDRESS = `UnstructuredAddress`;
export const wszPROPDEVICESERIALNUMBER = `DeviceSerialNumber`;
export const wszPROPSUBJECTDOT = `Subject.`;
export const wszPROPREQUESTDOT = `Request.`;
export const wszPROPREQUESTREQUESTID = `RequestID`;
export const wszPROPREQUESTRAWREQUEST = `RawRequest`;
export const wszPROPREQUESTRAWARCHIVEDKEY = `RawArchivedKey`;
export const wszPROPREQUESTARCHIVEDKEY = `ArchivedKey`;
export const wszPROPREQUESTKEYRECOVERYHASHES = `KeyRecoveryHashes`;
export const wszPROPREQUESTRAWOLDCERTIFICATE = `RawOldCertificate`;
export const wszPROPREQUESTATTRIBUTES = `RequestAttributes`;
export const wszPROPREQUESTTYPE = `RequestType`;
export const wszPROPREQUESTFLAGS = `RequestFlags`;
export const wszPROPREQUESTSTATUSCODE = `StatusCode`;
export const wszPROPREQUESTDISPOSITION = `Disposition`;
export const wszPROPREQUESTDISPOSITIONMESSAGE = `DispositionMessage`;
export const wszPROPREQUESTSUBMITTEDWHEN = `SubmittedWhen`;
export const wszPROPREQUESTRESOLVEDWHEN = `ResolvedWhen`;
export const wszPROPREQUESTREVOKEDWHEN = `RevokedWhen`;
export const wszPROPREQUESTREVOKEDEFFECTIVEWHEN = `RevokedEffectiveWhen`;
export const wszPROPREQUESTREVOKEDREASON = `RevokedReason`;
export const wszPROPREQUESTERNAME = `RequesterName`;
export const wszPROPCALLERNAME = `CallerName`;
export const wszPROPSIGNERPOLICIES = `SignerPolicies`;
export const wszPROPSIGNERAPPLICATIONPOLICIES = `SignerApplicationPolicies`;
export const wszPROPOFFICER = `Officer`;
export const wszPROPPUBLISHEXPIREDCERTINCRL = `PublishExpiredCertInCRL`;
export const wszPROPREQUESTERNAMEFROMOLDCERTIFICATE = `RequesterNameFromOldCertificate`;
export const wszPROPATTESTATIONCHALLENGE = `AttestationChallenge`;
export const wszPROPENDORSEMENTKEYHASH = `EndorsementKeyHash`;
export const wszPROPENDORSEMENTCERTIFICATEHASH = `EndorsementCertificateHash`;
export const wszPROPRAWPRECERTIFICATE = `RawPrecertificate`;
export const wszPROPCHALLENGE = `Challenge`;
export const wszPROPEXPECTEDCHALLENGE = `ExpectedChallenge`;
export const wszPROPDISPOSITION = `Disposition`;
export const wszPROPDISPOSITIONDENY = `Deny`;
export const wszPROPDISPOSITIONPENDING = `Pending`;
export const wszPROPVALIDITYPERIODSTRING = `ValidityPeriod`;
export const wszPROPVALIDITYPERIODCOUNT = `ValidityPeriodUnits`;
export const wszPROPEXPIRATIONDATE = `ExpirationDate`;
export const wszPROPCERTTYPE = `CertType`;
export const wszPROPCERTTEMPLATE = `CertificateTemplate`;
export const wszPROPCERTUSAGE = `CertificateUsage`;
export const wszPROPREQUESTOSVERSION = `RequestOSVersion`;
export const wszPROPREQUESTCSPPROVIDER = `RequestCSPProvider`;
export const wszPROPEXITCERTFILE = `CertFile`;
export const wszPROPCLIENTBROWSERMACHINE = `cbm`;
export const wszPROPCERTCLIENTMACHINE = `ccm`;
export const wszPROPCLIENTDCDNS = `cdc`;
export const wszPROPREQUESTMACHINEDNS = `rmd`;
export const wszPROPSUBJECTALTNAME2 = `san`;
export const wszPROPDNS = `dns`;
export const wszPROPDN = `dn`;
export const wszPROPURL = `url`;
export const wszPROPIPADDRESS = `ipaddress`;
export const wszPROPGUID = `guid`;
export const wszPROPOID = `oid`;
export const wszPROPUPN = `upn`;
export const szPROPASNTAG = `{asn}`;
export const wszPROPCRITICALTAG = `{critical}`;
export const wszPROPUTF8TAG = `{utf8}`;
export const wszPROPOCTETTAG = `{octet}`;
export const wszPROPHEXTAG = `{hex}`;
export const wszPROPTEXTTAG = `{text}`;
export const wszPROPDECIMALTAG = `{decimal}`;
export const wszPROPFILETAG = `{file}`;
export const wszAT_EKCERTINF = `@EKCert`;
export const wszAT_TESTROOT = `@TestRoot`;
export const wszPROPCATYPE = `CAType`;
export const wszPROPSANITIZEDCANAME = `SanitizedCAName`;
export const wszPROPSANITIZEDSHORTNAME = `SanitizedShortName`;
export const wszPROPMACHINEDNSNAME = `MachineDNSName`;
export const wszPROPMODULEREGLOC = `ModuleRegistryLocation`;
export const wszPROPUSEDS = `fUseDS`;
export const wszPROPDELTACRLSDISABLED = `fDeltaCRLsDisabled`;
export const wszPROPSERVERUPGRADED = `fServerUpgraded`;
export const wszPROPCONFIGDN = `ConfigDN`;
export const wszPROPDOMAINDN = `DomainDN`;
export const wszPROPLOGLEVEL = `LogLevel`;
export const wszPROPSESSIONCOUNT = `SessionCount`;
export const wszPROPTEMPLATECHANGESEQUENCENUMBER = `TemplateChangeSequenceNumber`;
export const wszPROPVOLATILEMODE = `VolatileMode`;
export const wszLOCALIZEDTIMEPERIODUNITS = `LocalizedTimePeriodUnits`;
export const wszPROPREQUESTERCAACCESS = `RequesterCAAccess`;
export const wszPROPUSERDN = `UserDN`;
export const wszPROPKEYARCHIVED = `KeyArchived`;
export const wszPROPCERTCOUNT = `CertCount`;
export const wszPROPRAWCACERTIFICATE = `RawCACertificate`;
export const wszPROPCERTSTATE = `CertState`;
export const wszPROPCERTSUFFIX = `CertSuffix`;
export const wszPROPRAWCRL = `RawCRL`;
export const wszPROPRAWDELTACRL = `RawDeltaCRL`;
export const wszPROPCRLINDEX = `CRLIndex`;
export const wszPROPCRLSTATE = `CRLState`;
export const wszPROPCRLSUFFIX = `CRLSuffix`;
export const wszPROPEVENTLOGTERSE = `EventLogTerse`;
export const wszPROPEVENTLOGERROR = `EventLogError`;
export const wszPROPEVENTLOGWARNING = `EventLogWarning`;
export const wszPROPEVENTLOGVERBOSE = `EventLogVerbose`;
export const wszPROPEVENTLOGEXHAUSTIVE = `EventLogExhaustive`;
export const wszPROPDCNAME = `DCName`;
export const wszPROPCROSSFOREST = `CrossForest`;
export const wszPROPREQUESTERSAMNAME = `RequesterSAMName`;
export const wszPROPREQUESTERUPN = `RequesterUPN`;
export const wszPROPREQUESTERDN = `RequesterDN`;
export const wszPROPSEAUDITID = `SEAuditId`;
export const wszPROPSEAUDITFILTER = `SEAuditFilter`;
export const wszPROPCERTIFICATEREQUESTID = `RequestID`;
export const wszPROPRAWCERTIFICATE = `RawCertificate`;
export const wszPROPCERTIFICATEHASH = `CertificateHash`;
export const wszPROPCERTIFICATETEMPLATE = `CertificateTemplate`;
export const wszPROPCERTIFICATEENROLLMENTFLAGS = `EnrollmentFlags`;
export const wszPROPCERTIFICATEGENERALFLAGS = `GeneralFlags`;
export const wszPROPCERTIFICATEPRIVATEKEYFLAGS = `PrivatekeyFlags`;
export const wszPROPCERTIFICATESERIALNUMBER = `SerialNumber`;
export const wszPROPCERTIFICATENOTBEFOREDATE = `NotBefore`;
export const wszPROPCERTIFICATENOTAFTERDATE = `NotAfter`;
export const wszPROPCERTIFICATESUBJECTKEYIDENTIFIER = `SubjectKeyIdentifier`;
export const wszPROPCERTIFICATERAWPUBLICKEY = `RawPublicKey`;
export const wszPROPCERTIFICATEPUBLICKEYLENGTH = `PublicKeyLength`;
export const wszPROPCERTIFICATEPUBLICKEYALGORITHM = `PublicKeyAlgorithm`;
export const wszPROPCERTIFICATERAWPUBLICKEYALGORITHMPARAMETERS = `RawPublicKeyAlgorithmParameters`;
export const wszPROPCERTIFICATEUPN = `UPN`;
export const wszPROPCERTIFICATETYPE = `CertificateType`;
export const wszPROPCERTIFICATERAWSMIMECAPABILITIES = `RawSMIMECapabilities`;
export const wszPROPNAMETYPE = `NameType`;
export const EXTENSION_CRITICAL_FLAG = 1;
export const EXTENSION_DISABLE_FLAG = 2;
export const EXTENSION_DELETE_FLAG = 4;
export const EXTENSION_POLICY_MASK = 65535;
export const EXTENSION_ORIGIN_REQUEST = 65536;
export const EXTENSION_ORIGIN_POLICY = 131072;
export const EXTENSION_ORIGIN_ADMIN = 196608;
export const EXTENSION_ORIGIN_SERVER = 262144;
export const EXTENSION_ORIGIN_RENEWALCERT = 327680;
export const EXTENSION_ORIGIN_IMPORTEDCERT = 393216;
export const EXTENSION_ORIGIN_PKCS7 = 458752;
export const EXTENSION_ORIGIN_CMC = 524288;
export const EXTENSION_ORIGIN_CACERT = 589824;
export const EXTENSION_ORIGIN_MASK = 983040;
export const wszPROPEXTREQUESTID = `ExtensionRequestId`;
export const wszPROPEXTNAME = `ExtensionName`;
export const wszPROPEXTFLAGS = `ExtensionFlags`;
export const wszPROPEXTRAWVALUE = `ExtensionRawValue`;
export const wszPROPATTRIBREQUESTID = `AttributeRequestId`;
export const wszPROPATTRIBNAME = `AttributeName`;
export const wszPROPATTRIBVALUE = `AttributeValue`;
export const wszPROPCRLROWID = `CRLRowId`;
export const wszPROPCRLNUMBER = `CRLNumber`;
export const wszPROPCRLMINBASE = `CRLMinBase`;
export const wszPROPCRLNAMEID = `CRLNameId`;
export const wszPROPCRLCOUNT = `CRLCount`;
export const wszPROPCRLTHISUPDATE = `CRLThisUpdate`;
export const wszPROPCRLNEXTUPDATE = `CRLNextUpdate`;
export const wszPROPCRLTHISPUBLISH = `CRLThisPublish`;
export const wszPROPCRLNEXTPUBLISH = `CRLNextPublish`;
export const wszPROPCRLEFFECTIVE = `CRLEffective`;
export const wszPROPCRLPROPAGATIONCOMPLETE = `CRLPropagationComplete`;
export const wszPROPCRLLASTPUBLISHED = `CRLLastPublished`;
export const wszPROPCRLPUBLISHATTEMPTS = `CRLPublishAttempts`;
export const wszPROPCRLPUBLISHFLAGS = `CRLPublishFlags`;
export const wszPROPCRLPUBLISHSTATUSCODE = `CRLPublishStatusCode`;
export const wszPROPCRLPUBLISHERROR = `CRLPublishError`;
export const wszPROPCRLRAWCRL = `CRLRawCRL`;
export const CPF_BASE = 1;
export const CPF_DELTA = 2;
export const CPF_COMPLETE = 4;
export const CPF_SHADOW = 8;
export const CPF_CASTORE_ERROR = 16;
export const CPF_BADURL_ERROR = 32;
export const CPF_MANUAL = 64;
export const CPF_SIGNATURE_ERROR = 128;
export const CPF_LDAP_ERROR = 256;
export const CPF_FILE_ERROR = 512;
export const CPF_FTP_ERROR = 1024;
export const CPF_HTTP_ERROR = 2048;
export const CPF_POSTPONED_BASE_LDAP_ERROR = 4096;
export const CPF_POSTPONED_BASE_FILE_ERROR = 8192;
export const PROPTYPE_MASK = 255;
export const PROPCALLER_SERVER = 256;
export const PROPCALLER_POLICY = 512;
export const PROPCALLER_EXIT = 768;
export const PROPCALLER_ADMIN = 1024;
export const PROPCALLER_REQUEST = 1280;
export const PROPCALLER_MASK = 3840;
export const PROPFLAGS_INDEXED = 65536;
export const CR_FLG_FORCETELETEX = 1;
export const CR_FLG_RENEWAL = 2;
export const CR_FLG_FORCEUTF8 = 4;
export const CR_FLG_CAXCHGCERT = 8;
export const CR_FLG_ENROLLONBEHALFOF = 16;
export const CR_FLG_SUBJECTUNMODIFIED = 32;
export const CR_FLG_VALIDENCRYPTEDKEYHASH = 64;
export const CR_FLG_CACROSSCERT = 128;
export const CR_FLG_ENFORCEUTF8 = 256;
export const CR_FLG_DEFINEDCACERT = 512;
export const CR_FLG_CHALLENGEPENDING = 1024;
export const CR_FLG_CHALLENGESATISFIED = 2048;
export const CR_FLG_TRUSTONUSE = 4096;
export const CR_FLG_TRUSTEKCERT = 8192;
export const CR_FLG_TRUSTEKKEY = 16384;
export const CR_FLG_PUBLISHERROR = 2147483648;
export const DB_DISP_ACTIVE = 8;
export const DB_DISP_PENDING = 9;
export const DB_DISP_QUEUE_MAX = 9;
export const DB_DISP_FOREIGN = 12;
export const DB_DISP_CA_CERT = 15;
export const DB_DISP_CA_CERT_CHAIN = 16;
export const DB_DISP_KRA_CERT = 17;
export const DB_DISP_LOG_MIN = 20;
export const DB_DISP_ISSUED = 20;
export const DB_DISP_REVOKED = 21;
export const DB_DISP_LOG_FAILED_MIN = 30;
export const DB_DISP_ERROR = 30;
export const DB_DISP_DENIED = 31;
export const VR_PENDING = 0;
export const VR_INSTANT_OK = 1;
export const VR_INSTANT_BAD = 2;
export const wszCERT_TYPE = `RequestType`;
export const wszCERT_TYPE_CLIENT = `Client`;
export const wszCERT_TYPE_SERVER = `Server`;
export const wszCERT_TYPE_CODESIGN = `CodeSign`;
export const wszCERT_TYPE_CUSTOMER = `SetCustomer`;
export const wszCERT_TYPE_MERCHANT = `SetMerchant`;
export const wszCERT_TYPE_PAYMENT = `SetPayment`;
export const wszCERT_VERSION = `Version`;
export const wszCERT_VERSION_1 = 1;
export const wszCERT_VERSION_2 = 2;
export const wszCERT_VERSION_3 = 3;
export const CV_OUT_HEXRAW = 12;
export const CV_OUT_ENCODEMASK = 255;
export const CV_OUT_NOCRLF = 1073741824;
export const CV_OUT_NOCR = 2147483648;
export const CVR_SEEK_NONE = 0;
export const CVR_SEEK_MASK = 255;
export const CVR_SEEK_NODELTA = 4096;
export const CVR_SORT_NONE = 0;
export const CVR_SORT_ASCEND = 1;
export const CVR_SORT_DESCEND = 2;
export const CV_COLUMN_EXTENSION_DEFAULT = `-4`;
export const CV_COLUMN_ATTRIBUTE_DEFAULT = `-5`;
export const CV_COLUMN_CRL_DEFAULT = `-6`;
export const CV_COLUMN_LOG_REVOKED_DEFAULT = `-7`;
export const CVRC_TABLE_MASK = 61440;
export const CVRC_TABLE_SHIFT = 12;
export const CRYPT_ENUM_ALL_PROVIDERS = 1;
export const XEPR_ENUM_FIRST = `-1`;
export const XEPR_DATE = 5;
export const XEPR_TEMPLATENAME = 6;
export const XEPR_VERSION = 7;
export const XEPR_V1TEMPLATENAME = 9;
export const XEPR_V2TEMPLATEOID = 16;
export const XEKL_KEYSIZE_DEFAULT = 4;
export const XECP_STRING_PROPERTY = 1;
export const XECI_DISABLE = 0;
export const XECI_XENROLL = 1;
export const XECI_AUTOENROLL = 2;
export const XECI_REQWIZARD = 3;
export const XECI_CERTREQ = 4;
export const wszCMM_PROP_NAME = `Name`;
export const wszCMM_PROP_DESCRIPTION = `Description`;
export const wszCMM_PROP_COPYRIGHT = `Copyright`;
export const wszCMM_PROP_FILEVER = `File Version`;
export const wszCMM_PROP_PRODUCTVER = `Product Version`;
export const wszCMM_PROP_DISPLAY_HWND = `HWND`;
export const wszCMM_PROP_ISMULTITHREADED = `IsMultiThreaded`;
export const SAFER_TOKEN_NULL_IF_EQUAL = 1;
export const SAFER_TOKEN_COMPARE_ONLY = 2;
export const SAFER_TOKEN_MAKE_INERT = 4;
export const SAFER_TOKEN_WANT_FLAGS = 8;
export const SECPKG_ATTR_C_ACCESS_TOKEN = 2147483666;
export const SECPKG_ATTR_C_FULL_ACCESS_TOKEN = 2147483778;
export const SECPKG_ATTR_CERT_TRUST_STATUS = 2147483780;
export const SECPKG_ATTR_CREDS = 2147483776;
export const SECPKG_ATTR_CREDS_2 = 2147483782;
export const SECPKG_ATTR_NEGOTIATION_PACKAGE = 2147483777;
export const SECPKG_ATTR_PACKAGE_INFO = 10;
export const SECPKG_ATTR_SERVER_AUTH_FLAGS = 2147483779;
export const SECPKG_ATTR_SIZES = 0;
export const SECPKG_ATTR_SUBJECT_SECURITY_ATTRIBUTES = 124;
export const SECPKG_ATTR_APP_DATA = 94;
export const SECPKG_ATTR_EAP_PRF_INFO = 101;
export const SECPKG_ATTR_EARLY_START = 105;
export const SECPKG_ATTR_DTLS_MTU = 34;
export const SECPKG_ATTR_KEYING_MATERIAL_INFO = 106;
export const SECPKG_ATTR_ACCESS_TOKEN = 18;
export const SECPKG_ATTR_AUTHORITY = 6;
export const SECPKG_ATTR_CLIENT_SPECIFIED_TARGET = 27;
export const SECPKG_ATTR_CONNECTION_INFO = 90;
export const SECPKG_ATTR_DCE_INFO = 3;
export const SECPKG_ATTR_ENDPOINT_BINDINGS = 26;
export const SECPKG_ATTR_EAP_KEY_BLOCK = 91;
export const SECPKG_ATTR_FLAGS = 14;
export const SECPKG_ATTR_ISSUER_LIST_EX = 89;
export const SECPKG_ATTR_KEY_INFO = 5;
export const SECPKG_ATTR_LAST_CLIENT_TOKEN_STATUS = 30;
export const SECPKG_ATTR_LIFESPAN = 2;
export const SECPKG_ATTR_LOCAL_CERT_CONTEXT = 84;
export const SECPKG_ATTR_LOCAL_CRED = 82;
export const SECPKG_ATTR_NAMES = 1;
export const SECPKG_ATTR_NATIVE_NAMES = 13;
export const SECPKG_ATTR_NEGOTIATION_INFO = 12;
export const SECPKG_ATTR_PASSWORD_EXPIRY = 8;
export const SECPKG_ATTR_REMOTE_CERT_CONTEXT = 83;
export const SECPKG_ATTR_ROOT_STORE = 85;
export const SECPKG_ATTR_SESSION_KEY = 9;
export const SECPKG_ATTR_SESSION_INFO = 93;
export const SECPKG_ATTR_STREAM_SIZES = 4;
export const SECPKG_ATTR_SUPPORTED_SIGNATURES = 102;
export const SECPKG_ATTR_TARGET_INFORMATION = 17;
export const SECPKG_ATTR_UNIQUE_BINDINGS = 25;
export const MSV1_0_PASSTHRU = 1;
export const MSV1_0_GUEST_LOGON = 2;
export const SECPKG_CRED_INBOUND = 1;
export const SECPKG_CRED_OUTBOUND = 2;
export const LOGON_GUEST = 1;
export const LOGON_NOENCRYPTION = 2;
export const LOGON_CACHED_ACCOUNT = 4;
export const LOGON_USED_LM_PASSWORD = 8;
export const LOGON_EXTRA_SIDS = 32;
export const LOGON_SUBAUTH_SESSION_KEY = 64;
export const LOGON_SERVER_TRUST_ACCOUNT = 128;
export const LOGON_PROFILE_PATH_RETURNED = 1024;
export const LOGON_RESOURCE_GROUPS = 512;
export const SECPKG_CONTEXT_EXPORT_RESET_NEW = 1;
export const SECPKG_CONTEXT_EXPORT_DELETE_OLD = 2;
export const SECPKG_CONTEXT_EXPORT_TO_KERNEL = 4;
export const KERB_TICKET_FLAGS_forwardable = 1073741824;
export const KERB_TICKET_FLAGS_forwarded = 536870912;
export const KERB_TICKET_FLAGS_hw_authent = 1048576;
export const KERB_TICKET_FLAGS_initial = 4194304;
export const KERB_TICKET_FLAGS_invalid = 16777216;
export const KERB_TICKET_FLAGS_may_postdate = 67108864;
export const KERB_TICKET_FLAGS_ok_as_delegate = 262144;
export const KERB_TICKET_FLAGS_postdated = 33554432;
export const KERB_TICKET_FLAGS_pre_authent = 2097152;
export const KERB_TICKET_FLAGS_proxiable = 268435456;
export const KERB_TICKET_FLAGS_proxy = 134217728;
export const KERB_TICKET_FLAGS_renewable = 8388608;
export const KERB_TICKET_FLAGS_reserved = 2147483648;
export const KERB_TICKET_FLAGS_reserved1 = 1;
export const DS_INET_ADDRESS = 1;
export const DS_NETBIOS_ADDRESS = 2;
export const SCH_CRED_AUTO_CRED_VALIDATION = 32;
export const SCH_CRED_CACHE_ONLY_URL_RETRIEVAL_ON_CREATE = 131072;
export const SCH_DISABLE_RECONNECTS = 128;
export const SCH_CRED_IGNORE_NO_REVOCATION_CHECK = 2048;
export const SCH_CRED_IGNORE_REVOCATION_OFFLINE = 4096;
export const SCH_CRED_MANUAL_CRED_VALIDATION = 8;
export const SCH_CRED_NO_DEFAULT_CREDS = 16;
export const SCH_CRED_NO_SERVERNAME_CHECK = 4;
export const SCH_CRED_NO_SYSTEM_MAPPER = 2;
export const SCH_CRED_REVOCATION_CHECK_CHAIN = 512;
export const SCH_CRED_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 1024;
export const SCH_CRED_REVOCATION_CHECK_END_CERT = 256;
export const SCH_CRED_USE_DEFAULT_CREDS = 64;
export const SCH_SEND_AUX_RECORD = 2097152;
export const SCH_SEND_ROOT_CERT = 262144;
export const SCH_USE_STRONG_CRYPTO = 4194304;
export const SCH_USE_PRESHAREDKEY_ONLY = 8388608;
export const DOMAIN_PASSWORD_COMPLEX = 1;
export const DOMAIN_PASSWORD_NO_ANON_CHANGE = 2;
export const DOMAIN_PASSWORD_NO_CLEAR_CHANGE = 4;
export const DOMAIN_LOCKOUT_ADMINS = 8;
export const DOMAIN_PASSWORD_STORE_CLEARTEXT = 16;
export const DOMAIN_REFUSE_PASSWORD_CHANGE = 32;
export const TLS1_ALERT_WARNING = 1;
export const TLS1_ALERT_FATAL = 2;
export const TRUST_TYPE_DOWNLEVEL = 1;
export const TRUST_TYPE_UPLEVEL = 2;
export const TRUST_TYPE_MIT = 3;
export const TRUST_TYPE_DCE = 4;
export const MSV1_0_CLEARTEXT_PASSWORD_ALLOWED = 2;
export const MSV1_0_UPDATE_LOGON_STATISTICS = 4;
export const MSV1_0_RETURN_USER_PARAMETERS = 8;
export const MSV1_0_DONT_TRY_GUEST_ACCOUNT = 16;
export const MSV1_0_ALLOW_SERVER_TRUST_ACCOUNT = 32;
export const MSV1_0_RETURN_PASSWORD_EXPIRY = 64;
export const MSV1_0_ALLOW_WORKSTATION_TRUST_ACCOUNT = 2048;
export const MSV1_0_TRY_GUEST_ACCOUNT_ONLY = 256;
export const MSV1_0_RETURN_PROFILE_PATH = 512;
export const MSV1_0_TRY_SPECIFIED_DOMAIN_ONLY = 1024;
export const KERB_REQUEST_ADD_CREDENTIAL = 1;
export const KERB_REQUEST_REPLACE_CREDENTIAL = 2;
export const KERB_REQUEST_REMOVE_CREDENTIAL = 4;
export const TRUST_DIRECTION_DISABLED = 0;
export const TRUST_DIRECTION_INBOUND = 1;
export const TRUST_DIRECTION_OUTBOUND = 2;
export const TRUST_DIRECTION_BIDIRECTIONAL = 3;
export const MSV1_0_CRED_LM_PRESENT = 1;
export const MSV1_0_CRED_NT_PRESENT = 2;
export const MSV1_0_CRED_VERSION = 0;
export const SECPKG_OPTIONS_TYPE_UNKNOWN = 0;
export const SECPKG_OPTIONS_TYPE_LSA = 1;
export const SECPKG_OPTIONS_TYPE_SSPI = 2;
export const SSL_SESSION_ENABLE_RECONNECTS = 1;
export const SSL_SESSION_DISABLE_RECONNECTS = 2;
export const KERB_ETYPE_DES_CBC_CRC = 1;
export const KERB_ETYPE_DES_CBC_MD4 = 2;
export const KERB_ETYPE_DES_CBC_MD5 = 3;
export const KERB_ETYPE_NULL = 0;
export const KERB_ETYPE_RC4_HMAC_NT = 23;
export const KERB_ETYPE_RC4_MD4 = `-128`;
export const TRUST_AUTH_TYPE_NONE = 0;
export const TRUST_AUTH_TYPE_NT4OWF = 1;
export const TRUST_AUTH_TYPE_CLEAR = 2;
export const TRUST_AUTH_TYPE_VERSION = 3;
export const SECPKG_PACKAGE_CHANGE_LOAD = 0;
export const SECPKG_PACKAGE_CHANGE_UNLOAD = 1;
export const SECPKG_PACKAGE_CHANGE_SELECT = 2;
export const TRUST_ATTRIBUTE_NON_TRANSITIVE = 1;
export const TRUST_ATTRIBUTE_UPLEVEL_ONLY = 2;
export const TRUST_ATTRIBUTE_FILTER_SIDS = 4;
export const TRUST_ATTRIBUTE_FOREST_TRANSITIVE = 8;
export const TRUST_ATTRIBUTE_CROSS_ORGANIZATION = 16;
export const TRUST_ATTRIBUTE_TREAT_AS_EXTERNAL = 64;
export const TRUST_ATTRIBUTE_WITHIN_FOREST = 32;
export const ISC_REQ_MESSAGES = 4294967296;
export const ISC_REQ_DEFERRED_CRED_VALIDATION = 8589934592;
export const ISC_REQ_DELEGATE = 1;
export const ISC_REQ_MUTUAL_AUTH = 2;
export const ISC_REQ_REPLAY_DETECT = 4;
export const ISC_REQ_SEQUENCE_DETECT = 8;
export const ISC_REQ_CONFIDENTIALITY = 16;
export const ISC_REQ_USE_SESSION_KEY = 32;
export const ISC_REQ_PROMPT_FOR_CREDS = 64;
export const ISC_REQ_USE_SUPPLIED_CREDS = 128;
export const ISC_REQ_ALLOCATE_MEMORY = 256;
export const ISC_REQ_USE_DCE_STYLE = 512;
export const ISC_REQ_DATAGRAM = 1024;
export const ISC_REQ_CONNECTION = 2048;
export const ISC_REQ_CALL_LEVEL = 4096;
export const ISC_REQ_FRAGMENT_SUPPLIED = 8192;
export const ISC_REQ_EXTENDED_ERROR = 16384;
export const ISC_REQ_STREAM = 32768;
export const ISC_REQ_INTEGRITY = 65536;
export const ISC_REQ_IDENTIFY = 131072;
export const ISC_REQ_NULL_SESSION = 262144;
export const ISC_REQ_MANUAL_CRED_VALIDATION = 524288;
export const ISC_REQ_RESERVED1 = 1048576;
export const ISC_REQ_FRAGMENT_TO_FIT = 2097152;
export const ISC_REQ_FORWARD_CREDENTIALS = 4194304;
export const ISC_REQ_NO_INTEGRITY = 8388608;
export const ISC_REQ_USE_HTTP_STYLE = 16777216;
export const ISC_REQ_UNVERIFIED_TARGET_NAME = 536870912;
export const ISC_REQ_CONFIDENTIALITY_ONLY = 1073741824;
export const ASC_REQ_MESSAGES = 4294967296;
export const ASC_REQ_DELEGATE = 1;
export const ASC_REQ_MUTUAL_AUTH = 2;
export const ASC_REQ_REPLAY_DETECT = 4;
export const ASC_REQ_SEQUENCE_DETECT = 8;
export const ASC_REQ_CONFIDENTIALITY = 16;
export const ASC_REQ_USE_SESSION_KEY = 32;
export const ASC_REQ_SESSION_TICKET = 64;
export const ASC_REQ_ALLOCATE_MEMORY = 256;
export const ASC_REQ_USE_DCE_STYLE = 512;
export const ASC_REQ_DATAGRAM = 1024;
export const ASC_REQ_CONNECTION = 2048;
export const ASC_REQ_CALL_LEVEL = 4096;
export const ASC_REQ_FRAGMENT_SUPPLIED = 8192;
export const ASC_REQ_EXTENDED_ERROR = 32768;
export const ASC_REQ_STREAM = 65536;
export const ASC_REQ_INTEGRITY = 131072;
export const ASC_REQ_LICENSING = 262144;
export const ASC_REQ_IDENTIFY = 524288;
export const ASC_REQ_ALLOW_NULL_SESSION = 1048576;
export const ASC_REQ_ALLOW_NON_USER_LOGONS = 2097152;
export const ASC_REQ_ALLOW_CONTEXT_REPLAY = 4194304;
export const ASC_REQ_FRAGMENT_TO_FIT = 8388608;
export const ASC_REQ_NO_TOKEN = 16777216;
export const ASC_REQ_PROXY_BINDINGS = 67108864;
export const ASC_REQ_ALLOW_MISSING_BINDINGS = 268435456;
export const AUTHZ_RM_FLAG_NO_AUDIT = 1;
export const AUTHZ_RM_FLAG_INITIALIZE_UNDER_IMPERSONATION = 2;
export const AUTHZ_RM_FLAG_NO_CENTRAL_ACCESS_POLICIES = 4;
export const AUTHZ_ACCESS_CHECK_NO_DEEP_COPY_SD = 1;
export const AUTHZ_NO_SUCCESS_AUDIT = 1;
export const AUTHZ_NO_FAILURE_AUDIT = 2;
export const AUTHZ_NO_ALLOC_STRINGS = 4;
export const TREE_SEC_INFO_SET = 1;
export const TREE_SEC_INFO_RESET = 2;
export const TREE_SEC_INFO_RESET_KEEP_EXPLICIT = 3;
export const AUTHZ_GENERATE_SUCCESS_AUDIT = 1;
export const AUTHZ_GENERATE_FAILURE_AUDIT = 2;
export const ACTRL_ACCESS_ALLOWED = 1;
export const ACTRL_ACCESS_DENIED = 2;
export const ACTRL_AUDIT_SUCCESS = 4;
export const ACTRL_AUDIT_FAILURE = 8;
export const AUTHZ_SECURITY_ATTRIBUTE_NON_INHERITABLE = 1;
export const AUTHZ_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE = 2;
export const SI_ADVANCED = 16;
export const SI_EDIT_AUDITS = 2;
export const SI_EDIT_PROPERTIES = 128;
export const SI_AUDITS_ELEVATION_REQUIRED = 33554432;
export const SI_DISABLE_DENY_ACE = 2147483648;
export const SI_EDIT_EFFECTIVE = 131072;
export const SI_ENABLE_CENTRAL_POLICY = 1073741824;
export const SI_ENABLE_EDIT_ATTRIBUTE_CONDITION = 536870912;
export const SI_MAY_WRITE = 268435456;
export const SI_NO_ADDITIONAL_PERMISSION = 2097152;
export const SI_OWNER_ELEVATION_REQUIRED = 67108864;
export const SI_PERMS_ELEVATION_REQUIRED = 16777216;
export const SI_RESET_DACL = 262144;
export const SI_RESET_OWNER = 1048576;
export const SI_RESET_SACL = 524288;
export const SI_SCOPE_ELEVATION_REQUIRED = 134217728;
export const SI_VIEW_ONLY = 4194304;
export const SCE_LOG_LEVEL_ALWAYS = 0;
export const SCE_LOG_LEVEL_ERROR = 1;
export const SCE_LOG_LEVEL_DETAIL = 2;
export const SCE_LOG_LEVEL_DEBUG = 3;
export const CRED_FLAGS_PASSWORD_FOR_CERT = 1;
export const CRED_FLAGS_PROMPT_NOW = 2;
export const CRED_FLAGS_USERNAME_TARGET = 4;
export const CRED_FLAGS_OWF_CRED_BLOB = 8;
export const CRED_FLAGS_REQUIRE_CONFIRMATION = 16;
export const CRED_FLAGS_WILDCARD_MATCH = 32;
export const CRED_FLAGS_VSM_PROTECTED = 64;
export const CRED_FLAGS_NGC_CERT = 128;
export const CRED_FLAGS_VALID_FLAGS = 61695;
export const CRED_FLAGS_VALID_INPUT_FLAGS = 61599;
export const CRED_TYPE_GENERIC = 1;
export const CRED_TYPE_DOMAIN_PASSWORD = 2;
export const CRED_TYPE_DOMAIN_CERTIFICATE = 3;
export const CRED_TYPE_DOMAIN_VISIBLE_PASSWORD = 4;
export const CRED_TYPE_GENERIC_CERTIFICATE = 5;
export const CRED_TYPE_DOMAIN_EXTENDED = 6;
export const CRED_TYPE_MAXIMUM = 7;
export const CRED_TYPE_MAXIMUM_EX = 1007;
export const CRED_PERSIST_NONE = 0;
export const CRED_PERSIST_SESSION = 1;
export const CRED_PERSIST_LOCAL_MACHINE = 2;
export const CRED_PERSIST_ENTERPRISE = 3;
export const CREDUI_FLAGS_ALWAYS_SHOW_UI = 128;
export const CREDUI_FLAGS_COMPLETE_USERNAME = 2048;
export const CREDUI_FLAGS_DO_NOT_PERSIST = 2;
export const CREDUI_FLAGS_EXCLUDE_CERTIFICATES = 8;
export const CREDUI_FLAGS_EXPECT_CONFIRMATION = 131072;
export const CREDUI_FLAGS_GENERIC_CREDENTIALS = 262144;
export const CREDUI_FLAGS_INCORRECT_PASSWORD = 1;
export const CREDUI_FLAGS_KEEP_USERNAME = 1048576;
export const CREDUI_FLAGS_PASSWORD_ONLY_OK = 512;
export const CREDUI_FLAGS_PERSIST = 4096;
export const CREDUI_FLAGS_REQUEST_ADMINISTRATOR = 4;
export const CREDUI_FLAGS_REQUIRE_CERTIFICATE = 16;
export const CREDUI_FLAGS_REQUIRE_SMARTCARD = 256;
export const CREDUI_FLAGS_SERVER_CREDENTIAL = 16384;
export const CREDUI_FLAGS_SHOW_SAVE_CHECK_BOX = 64;
export const CREDUI_FLAGS_USERNAME_TARGET_CREDENTIALS = 524288;
export const CREDUI_FLAGS_VALIDATE_USERNAME = 1024;
export const SCARD_SCOPE_USER = 0;
export const SCARD_SCOPE_SYSTEM = 2;
export const CRED_ENUMERATE_ALL_CREDENTIALS = 1;
export const CREDUIWIN_GENERIC = 1;
export const CREDUIWIN_CHECKBOX = 2;
export const CREDUIWIN_AUTHPACKAGE_ONLY = 16;
export const CREDUIWIN_IN_CRED_ONLY = 32;
export const CREDUIWIN_ENUMERATE_ADMINS = 256;
export const CREDUIWIN_ENUMERATE_CURRENT_USER = 512;
export const CREDUIWIN_SECURE_PROMPT = 4096;
export const CREDUIWIN_PREPROMPTING = 8192;
export const CREDUIWIN_PACK_32_WOW = 268435456;
export const SCARD_STATE_UNAWARE = 0;
export const SCARD_STATE_IGNORE = 1;
export const SCARD_STATE_UNAVAILABLE = 8;
export const SCARD_STATE_EMPTY = 16;
export const SCARD_STATE_PRESENT = 32;
export const SCARD_STATE_ATRMATCH = 64;
export const SCARD_STATE_EXCLUSIVE = 128;
export const SCARD_STATE_INUSE = 256;
export const SCARD_STATE_MUTE = 512;
export const SCARD_STATE_CHANGED = 2;
export const SCARD_STATE_UNKNOWN = 4;
export const CRED_PACK_PROTECTED_CREDENTIALS = 1;
export const CRED_PACK_WOW_BUFFER = 2;
export const CRED_PACK_GENERIC_CREDENTIALS = 4;
export const CRED_PACK_ID_PROVIDER_CREDENTIALS = 8;
export const CRYPTCAT_VERSION_1 = 256;
export const CRYPTCAT_VERSION_2 = 512;
export const CRYPTCAT_OPEN_ALWAYS = 2;
export const CRYPTCAT_OPEN_CREATENEW = 1;
export const CRYPTCAT_OPEN_EXISTING = 4;
export const CRYPTCAT_OPEN_EXCLUDE_PAGE_HASHES = 65536;
export const CRYPTCAT_OPEN_INCLUDE_PAGE_HASHES = 131072;
export const CRYPTCAT_OPEN_VERIFYSIGHASH = 268435456;
export const CRYPTCAT_OPEN_NO_CONTENT_HCRYPTMSG = 536870912;
export const CRYPTCAT_OPEN_SORTED = 1073741824;
export const CRYPTCAT_OPEN_FLAGS_MASK = 4294901760;
export const CV_COLUMN_LOG_DEFAULT = `-2`;
export const CV_COLUMN_LOG_FAILED_DEFAULT = `-3`;
export const CV_COLUMN_QUEUE_DEFAULT = `-1`;
export const CDR_EXPIRED = 1;
export const CDR_REQUEST_LAST_CHANGED = 2;
export const FR_PROP_NONE = 0;
export const FR_PROP_FULLRESPONSE = 1;
export const FR_PROP_STATUSINFOCOUNT = 2;
export const FR_PROP_BODYPARTSTRING = 3;
export const FR_PROP_STATUS = 4;
export const FR_PROP_STATUSSTRING = 5;
export const FR_PROP_OTHERINFOCHOICE = 6;
export const FR_PROP_FAILINFO = 7;
export const FR_PROP_PENDINFOTOKEN = 8;
export const FR_PROP_PENDINFOTIME = 9;
export const FR_PROP_ISSUEDCERTIFICATEHASH = 10;
export const FR_PROP_ISSUEDCERTIFICATE = 11;
export const FR_PROP_ISSUEDCERTIFICATECHAIN = 12;
export const FR_PROP_ISSUEDCERTIFICATECRLCHAIN = 13;
export const FR_PROP_ENCRYPTEDKEYHASH = 14;
export const FR_PROP_FULLRESPONSENOPKCS7 = 15;
export const FR_PROP_CAEXCHANGECERTIFICATEHASH = 16;
export const FR_PROP_CAEXCHANGECERTIFICATE = 17;
export const FR_PROP_CAEXCHANGECERTIFICATECHAIN = 18;
export const FR_PROP_CAEXCHANGECERTIFICATECRLCHAIN = 19;
export const FR_PROP_ATTESTATIONCHALLENGE = 20;
export const FR_PROP_ATTESTATIONPROVIDERNAME = 21;
export const CVRC_COLUMN_SCHEMA = 0;
export const CVRC_COLUMN_RESULT = 1;
export const CVRC_COLUMN_VALUE = 2;
export const CVRC_COLUMN_MASK = 4095;
export const CR_IN_BASE64HEADER = 0;
export const CR_IN_BASE64 = 1;
export const CR_IN_BINARY = 2;
export const CC_DEFAULTCONFIG = 0;
export const CC_FIRSTCONFIG = 2;
export const CC_LOCALACTIVECONFIG = 4;
export const CC_LOCALCONFIG = 3;
export const CC_UIPICKCONFIG = 1;
export const CC_UIPICKCONFIGSKIPLOCALCA = 5;
export const CV_OUT_BASE64 = 1;
export const CV_OUT_BASE64HEADER = 0;
export const CV_OUT_BASE64REQUESTHEADER = 3;
export const CV_OUT_BASE64X509CRLHEADER = 9;
export const CV_OUT_BINARY = 2;
export const CV_OUT_HEX = 4;
export const CV_OUT_HEXADDR = 10;
export const CV_OUT_HEXASCII = 5;
export const CV_OUT_HEXASCIIADDR = 11;
export const XEPR_CADNS = 1;
export const XEPR_CAFRIENDLYNAME = 3;
export const XEPR_CANAME = 2;
export const XEPR_HASH = 8;
export const XEPR_REQUESTID = 4;
export const CA_ACCESS_ADMIN = 1;
export const CA_ACCESS_AUDITOR = 4;
export const CA_ACCESS_ENROLL = 512;
export const CA_ACCESS_OFFICER = 2;
export const CA_ACCESS_OPERATOR = 8;
export const CA_ACCESS_READ = 256;
export const CR_DISP_DENIED = 2;
export const CR_DISP_ERROR = 1;
export const CR_DISP_INCOMPLETE = 0;
export const CR_DISP_ISSUED = 3;
export const CR_DISP_ISSUED_OUT_OF_BAND = 4;
export const CR_DISP_UNDER_SUBMISSION = 5;
export const XEKL_KEYSIZE_MIN = 1;
export const XEKL_KEYSIZE_MAX = 2;
export const XEKL_KEYSIZE_INC = 3;
export const XECR_CMC = 3;
export const XECR_PKCS10_V1_5 = 4;
export const XECR_PKCS10_V2_0 = 1;
export const XECR_PKCS7 = 2;
export const EXITEVENT_CERTDENIED = 4;
export const EXITEVENT_CERTISSUED = 1;
export const EXITEVENT_CERTPENDING = 2;
export const EXITEVENT_CERTRETRIEVEPENDING = 16;
export const EXITEVENT_CERTREVOKED = 8;
export const EXITEVENT_CRLISSUED = 32;
export const EXITEVENT_SHUTDOWN = 64;
export const XECT_EXTENSION_V1 = 1;
export const XECT_EXTENSION_V2 = 2;
export const CVRC_TABLE_ATTRIBUTES = 16384;
export const CVRC_TABLE_CRL = 20480;
export const CVRC_TABLE_EXTENSIONS = 12288;
export const CVRC_TABLE_REQCERT = 0;
export const PROPTYPE_BINARY = 3;
export const PROPTYPE_DATE = 2;
export const PROPTYPE_LONG = 1;
export const PROPTYPE_STRING = 4;
export const CERT_ALT_NAME_RFC822_NAME = 2;
export const CERT_ALT_NAME_DNS_NAME = 3;
export const CERT_ALT_NAME_URL = 7;
export const CERT_ALT_NAME_REGISTERED_ID = 9;
export const CERT_ALT_NAME_DIRECTORY_NAME = 5;
export const CERT_ALT_NAME_IP_ADDRESS = 8;
export const CERT_ALT_NAME_OTHER_NAME = 1;
export const CSBACKUP_TYPE_FULL = 1;
export const CSBACKUP_TYPE_LOGS_ONLY = 2;
export const XEKL_KEYSPEC_KEYX = 1;
export const XEKL_KEYSPEC_SIG = 2;
export const CR_OUT_BASE64HEADER = 0;
export const CR_OUT_BASE64 = 1;
export const CR_OUT_BINARY = 2;
export const CVR_SEEK_EQ = 1;
export const CVR_SEEK_LE = 4;
export const CVR_SEEK_LT = 2;
export const CVR_SEEK_GE = 8;
export const CVR_SEEK_GT = 16;
export const BCRYPT_CIPHER_OPERATION = 1;
export const BCRYPT_HASH_OPERATION = 2;
export const BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4;
export const BCRYPT_SECRET_AGREEMENT_OPERATION = 8;
export const BCRYPT_SIGNATURE_OPERATION = 16;
export const BCRYPT_RNG_OPERATION = 32;
export const NCRYPT_CIPHER_OPERATION = 1;
export const NCRYPT_HASH_OPERATION = 2;
export const NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4;
export const NCRYPT_SECRET_AGREEMENT_OPERATION = 8;
export const NCRYPT_SIGNATURE_OPERATION = 16;
export const CERT_FIND_ANY = 0;
export const CERT_FIND_CERT_ID = 1048576;
export const CERT_FIND_CTL_USAGE = 655360;
export const CERT_FIND_ENHKEY_USAGE = 655360;
export const CERT_FIND_EXISTING = 851968;
export const CERT_FIND_HASH = 65536;
export const CERT_FIND_HAS_PRIVATE_KEY = 1376256;
export const CERT_FIND_ISSUER_ATTR = 196612;
export const CERT_FIND_ISSUER_NAME = 131076;
export const CERT_FIND_ISSUER_OF = 786432;
export const CERT_FIND_ISSUER_STR = 524292;
export const CERT_FIND_KEY_IDENTIFIER = 983040;
export const CERT_FIND_KEY_SPEC = 589824;
export const CERT_FIND_MD5_HASH = 262144;
export const CERT_FIND_PROPERTY = 327680;
export const CERT_FIND_PUBLIC_KEY = 393216;
export const CERT_FIND_SHA1_HASH = 65536;
export const CERT_FIND_SIGNATURE_HASH = 917504;
export const CERT_FIND_SUBJECT_ATTR = 196615;
export const CERT_FIND_SUBJECT_CERT = 720896;
export const CERT_FIND_SUBJECT_NAME = 131079;
export const CERT_FIND_SUBJECT_STR = 524295;
export const CERT_FIND_CROSS_CERT_DIST_POINTS = 1114112;
export const CERT_FIND_PUBKEY_MD5_HASH = 1179648;
export const CERT_FIND_SUBJECT_STR_A = 458759;
export const CERT_FIND_SUBJECT_STR_W = 524295;
export const CERT_FIND_ISSUER_STR_A = 458756;
export const CERT_FIND_ISSUER_STR_W = 524292;
export const CERT_FIND_SUBJECT_INFO_ACCESS = 1245184;
export const CERT_FIND_HASH_STR = 1310720;
export const CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG = 1;
export const CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG = 2;
export const CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = 4;
export const CERT_FIND_NO_ENHKEY_USAGE_FLAG = 8;
export const CERT_FIND_OR_ENHKEY_USAGE_FLAG = 16;
export const CERT_FIND_VALID_ENHKEY_USAGE_FLAG = 32;
export const CERT_FIND_OPTIONAL_CTL_USAGE_FLAG = 1;
export const CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG = 2;
export const CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG = 4;
export const CERT_FIND_NO_CTL_USAGE_FLAG = 8;
export const CERT_FIND_OR_CTL_USAGE_FLAG = 16;
export const CERT_FIND_VALID_CTL_USAGE_FLAG = 32;
export const CERT_QUERY_OBJECT_FILE = 1;
export const CERT_QUERY_OBJECT_BLOB = 2;
export const CERT_QUERY_CONTENT_CERT = 1;
export const CERT_QUERY_CONTENT_CTL = 2;
export const CERT_QUERY_CONTENT_CRL = 3;
export const CERT_QUERY_CONTENT_SERIALIZED_STORE = 4;
export const CERT_QUERY_CONTENT_SERIALIZED_CERT = 5;
export const CERT_QUERY_CONTENT_SERIALIZED_CTL = 6;
export const CERT_QUERY_CONTENT_SERIALIZED_CRL = 7;
export const CERT_QUERY_CONTENT_PKCS7_SIGNED = 8;
export const CERT_QUERY_CONTENT_PKCS7_UNSIGNED = 9;
export const CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED = 10;
export const CERT_QUERY_CONTENT_PKCS10 = 11;
export const CERT_QUERY_CONTENT_PFX = 12;
export const CERT_QUERY_CONTENT_CERT_PAIR = 13;
export const CERT_QUERY_CONTENT_PFX_AND_LOAD = 14;
export const CERT_QUERY_CONTENT_FLAG_CERT = 2;
export const CERT_QUERY_CONTENT_FLAG_CTL = 4;
export const CERT_QUERY_CONTENT_FLAG_CRL = 8;
export const CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE = 16;
export const CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT = 32;
export const CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL = 64;
export const CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL = 128;
export const CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED = 256;
export const CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED = 512;
export const CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = 1024;
export const CERT_QUERY_CONTENT_FLAG_PKCS10 = 2048;
export const CERT_QUERY_CONTENT_FLAG_PFX = 4096;
export const CERT_QUERY_CONTENT_FLAG_CERT_PAIR = 8192;
export const CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD = 16384;
export const CERT_QUERY_CONTENT_FLAG_ALL = 16382;
export const CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT = 818;
export const CERT_QUERY_FORMAT_BINARY = 1;
export const CERT_QUERY_FORMAT_BASE64_ENCODED = 2;
export const CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED = 3;
export const CERT_QUERY_FORMAT_FLAG_BINARY = 2;
export const CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED = 4;
export const CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED = 8;
export const CERT_QUERY_FORMAT_FLAG_ALL = 14;
export const X509_ASN_ENCODING = 1;
export const PKCS_7_ASN_ENCODING = 65536;
export const CERT_RDN_ANY_TYPE = 0;
export const CERT_RDN_NUMERIC_STRING = 3;
export const CERT_RDN_PRINTABLE_STRING = 4;
export const CERT_RDN_T61_STRING = 5;
export const CERT_RDN_VIDEOTEX_STRING = 6;
export const CERT_RDN_IA5_STRING = 7;
export const CERT_RDN_GRAPHIC_STRING = 8;
export const CERT_RDN_ISO646_STRING = 9;
export const CERT_RDN_GENERAL_STRING = 10;
export const CERT_RDN_INT4_STRING = 11;
export const CERT_RDN_UNICODE_STRING = 12;
export const CERT_RDN_BMP_STRING = 12;
export const CERT_RDN_ENCODED_BLOB = 1;
export const CERT_RDN_OCTET_STRING = 2;
export const CERT_RDN_TELETEX_STRING = 5;
export const CERT_RDN_UNIVERSAL_STRING = 11;
export const CERT_RDN_UTF8_STRING = 13;
export const CERT_RDN_VISIBLE_STRING = 9;
export const CERT_SIMPLE_NAME_STR = 1;
export const CERT_OID_NAME_STR = 2;
export const CERT_X500_NAME_STR = 3;
export const CRYPT_LOCAL = 1;
export const CRYPT_DOMAIN = 2;
export const AT_KEYEXCHANGE = 1;
export const AT_SIGNATURE = 2;
export const CERT_NCRYPT_KEY_SPEC = 4294967295;
export const BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3;
export const BCRYPT_CIPHER_INTERFACE = 1;
export const BCRYPT_HASH_INTERFACE = 2;
export const BCRYPT_RNG_INTERFACE = 6;
export const BCRYPT_SECRET_AGREEMENT_INTERFACE = 4;
export const BCRYPT_SIGNATURE_INTERFACE = 5;
export const NCRYPT_KEY_STORAGE_INTERFACE = 65537;
export const NCRYPT_SCHANNEL_INTERFACE = 65538;
export const NCRYPT_SCHANNEL_SIGNATURE_INTERFACE = 65539;
export const BCRYPT_PAD_NONE = 1;
export const BCRYPT_PAD_OAEP = 4;
export const BCRYPT_PAD_PKCS1 = 2;
export const BCRYPT_PAD_PSS = 8;
export const NCRYPT_SILENT_FLAG = 64;
export const NCRYPT_NO_PADDING_FLAG = 1;
export const NCRYPT_PAD_OAEP_FLAG = 4;
export const NCRYPT_PAD_PKCS1_FLAG = 2;
export const NCRYPT_REGISTER_NOTIFY_FLAG = 1;
export const NCRYPT_UNREGISTER_NOTIFY_FLAG = 2;
export const NCRYPT_MACHINE_KEY_FLAG = 32;
export const NCRYPT_UNPROTECT_NO_DECRYPT = 1;
export const NCRYPT_OVERWRITE_KEY_FLAG = 128;
export const NCRYPT_NO_KEY_VALIDATION = 8;
export const NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG = 512;
export const NCRYPT_PAD_PSS_FLAG = 8;
export const NCRYPT_PERSIST_FLAG = 2147483648;
export const NCRYPT_PERSIST_ONLY_FLAG = 1073741824;
export const CRYPT_STRING_BASE64HEADER = 0;
export const CRYPT_STRING_BASE64 = 1;
export const CRYPT_STRING_BINARY = 2;
export const CRYPT_STRING_BASE64REQUESTHEADER = 3;
export const CRYPT_STRING_HEX = 4;
export const CRYPT_STRING_HEXASCII = 5;
export const CRYPT_STRING_BASE64X509CRLHEADER = 9;
export const CRYPT_STRING_HEXADDR = 10;
export const CRYPT_STRING_HEXASCIIADDR = 11;
export const CRYPT_STRING_HEXRAW = 12;
export const CRYPT_STRING_STRICT = 536870912;
export const CRYPT_STRING_BASE64_ANY = 6;
export const CRYPT_STRING_ANY = 7;
export const CRYPT_STRING_HEX_ANY = 8;
export const CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = 2147483648;
export const CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 1073741824;
export const CRYPT_XML_FLAG_DISABLE_EXTENSIONS = 268435456;
export const CRYPT_XML_FLAG_NO_SERIALIZE = 2147483648;
export const CRYPT_XML_SIGN_ADD_KEYVALUE = 1;
export const CRYPT_ENCODE_ALLOC_FLAG = 32768;
export const CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG = 131072;
export const CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG = 1073741824;
export const CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG = 2147483648;
export const CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG = 536870912;
export const CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN = 1;
export const CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP = 2;
export const CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT = 3;
export const CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD = 4;
export const CRYPT_ACQUIRE_CACHE_FLAG = 1;
export const CRYPT_ACQUIRE_COMPARE_KEY_FLAG = 4;
export const CRYPT_ACQUIRE_NO_HEALING = 8;
export const CRYPT_ACQUIRE_SILENT_FLAG = 64;
export const CRYPT_ACQUIRE_USE_PROV_INFO_FLAG = 2;
export const CRYPT_GET_URL_FROM_PROPERTY = 1;
export const CRYPT_GET_URL_FROM_EXTENSION = 2;
export const CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE = 4;
export const CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE = 8;
export const CERT_STORE_SAVE_AS_PKCS7 = 2;
export const CERT_STORE_SAVE_AS_STORE = 1;
export const CRYPT_ANY = 4;
export const CRYPT_UM = 1;
export const CRYPT_KM = 2;
export const CRYPT_MM = 3;
export const CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG = 1;
export const CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG = 2;
export const CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG = 32768;
export const CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = 4;
export const CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG = 8;
export const CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG = 16384;
export const CERT_STORE_CTRL_COMMIT_FORCE_FLAG = 1;
export const CERT_STORE_CTRL_COMMIT_CLEAR_FLAG = 2;
export const CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG = 1;
export const BCRYPT_ALG_HANDLE_HMAC_FLAG = 8;
export const BCRYPT_PROV_DISPATCH = 1;
export const BCRYPT_HASH_REUSABLE_FLAG = 32;
export const CERT_STORE_SAVE_TO_FILE = 1;
export const CERT_STORE_SAVE_TO_FILENAME = 4;
export const CERT_STORE_SAVE_TO_FILENAME_A = 3;
export const CERT_STORE_SAVE_TO_FILENAME_W = 4;
export const CERT_STORE_SAVE_TO_MEMORY = 2;
export const PP_CLIENT_HWND = 1;
export const PP_DELETEKEY = 24;
export const PP_KEYEXCHANGE_ALG = 14;
export const PP_KEYEXCHANGE_PIN = 32;
export const PP_KEYEXCHANGE_KEYSIZE = 12;
export const PP_KEYSET_SEC_DESCR = 8;
export const PP_PIN_PROMPT_STRING = 44;
export const PP_ROOT_CERTSTORE = 46;
export const PP_SIGNATURE_ALG = 15;
export const PP_SIGNATURE_PIN = 33;
export const PP_SIGNATURE_KEYSIZE = 13;
export const PP_UI_PROMPT = 21;
export const PP_USE_HARDWARE_RNG = 38;
export const PP_USER_CERTSTORE = 42;
export const PP_SECURE_KEYEXCHANGE_PIN = 47;
export const PP_SECURE_SIGNATURE_PIN = 48;
export const PP_SMARTCARD_READER = 43;
export const KP_ALGID = 7;
export const KP_CERTIFICATE = 26;
export const KP_PERMISSIONS = 6;
export const KP_SALT = 2;
export const KP_SALT_EX = 10;
export const KP_BLOCKLEN = 8;
export const KP_GET_USE_COUNT = 42;
export const KP_KEYLEN = 9;
export const CRYPT_EXPORTABLE = 1;
export const CRYPT_USER_PROTECTED = 2;
export const CRYPT_ARCHIVABLE = 16384;
export const CRYPT_CREATE_IV = 512;
export const CRYPT_CREATE_SALT = 4;
export const CRYPT_DATA_KEY = 2048;
export const CRYPT_FORCE_KEY_PROTECTION_HIGH = 32768;
export const CRYPT_KEK = 1024;
export const CRYPT_INITIATOR = 64;
export const CRYPT_NO_SALT = 16;
export const CRYPT_ONLINE = 128;
export const CRYPT_PREGEN = 64;
export const CRYPT_RECIPIENT = 16;
export const CRYPT_SF = 256;
export const CRYPT_SGCKEY = 8192;
export const CRYPT_VOLATILE = 4096;
export const CRYPT_MACHINE_KEYSET = 32;
export const CRYPT_USER_KEYSET = 4096;
export const PKCS12_PREFER_CNG_KSP = 256;
export const PKCS12_ALWAYS_CNG_KSP = 512;
export const PKCS12_ALLOW_OVERWRITE_KEY = 16384;
export const PKCS12_NO_PERSIST_KEY = 32768;
export const PKCS12_INCLUDE_EXTENDED_PROPERTIES = 16;
export const CRYPT_OAEP = 64;
export const CRYPT_BLOB_VER3 = 128;
export const CRYPT_DESTROYKEY = 4;
export const CRYPT_SSL2_FALLBACK = 2;
export const CRYPT_Y_ONLY = 1;
export const CRYPT_IPSEC_HMAC_KEY = 256;
export const CERT_SET_KEY_PROV_HANDLE_PROP_ID = 1;
export const CERT_SET_KEY_CONTEXT_PROP_ID = 1;
export const CMSG_DATA = 1;
export const CMSG_SIGNED = 2;
export const CMSG_ENVELOPED = 3;
export const CMSG_SIGNED_AND_ENVELOPED = 4;
export const CMSG_HASHED = 5;
export const CERT_STORE_BACKUP_RESTORE_FLAG = 2048;
export const CERT_STORE_CREATE_NEW_FLAG = 8192;
export const CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 4;
export const CERT_STORE_DELETE_FLAG = 16;
export const CERT_STORE_ENUM_ARCHIVED_FLAG = 512;
export const CERT_STORE_MAXIMUM_ALLOWED_FLAG = 4096;
export const CERT_STORE_NO_CRYPT_RELEASE_FLAG = 1;
export const CERT_STORE_OPEN_EXISTING_FLAG = 16384;
export const CERT_STORE_READONLY_FLAG = 32768;
export const CERT_STORE_SET_LOCALIZED_NAME_FLAG = 2;
export const CERT_STORE_SHARE_CONTEXT_FLAG = 128;
export const CERT_STORE_UPDATE_KEYID_FLAG = 1024;
export const CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG = 1;
export const CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG = 2;
export const CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG = 1;
export const CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG = 2;
export const CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG = 4;
export const HP_HMAC_INFO = 5;
export const HP_HASHVAL = 2;
export const CERT_SYSTEM_STORE_LOCATION_MASK = 16711680;
export const CERT_SYSTEM_STORE_RELOCATE_FLAG = 2147483648;
export const CERT_CREATE_SELFSIGN_NO_KEY_INFO = 2;
export const CERT_CREATE_SELFSIGN_NO_SIGN = 1;
export const CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID = 1;
export const CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID = 2;
export const CRYPT_ALL_FUNCTIONS = 1;
export const CRYPT_ALL_PROVIDERS = 2;
export const CTL_FIND_ANY = 0;
export const CTL_FIND_SHA1_HASH = 1;
export const CTL_FIND_MD5_HASH = 2;
export const CTL_FIND_USAGE = 3;
export const CTL_FIND_SAME_USAGE_FLAG = 1;
export const CTL_FIND_EXISTING = 5;
export const CTL_FIND_SUBJECT = 4;
export const CRYPT_FIND_USER_KEYSET_FLAG = 1;
export const CRYPT_FIND_MACHINE_KEYSET_FLAG = 2;
export const CRYPT_FIND_SILENT_KEYSET_FLAG = 64;
export const CRYPT_MIN_DEPENDENCIES = 1;
export const CRYPT_PROCESS_ISOLATE = 65536;
export const CRL_REASON_UNSPECIFIED = 0;
export const CRL_REASON_KEY_COMPROMISE = 1;
export const CRL_REASON_CA_COMPROMISE = 2;
export const CRL_REASON_AFFILIATION_CHANGED = 3;
export const CRL_REASON_SUPERSEDED = 4;
export const CRL_REASON_CESSATION_OF_OPERATION = 5;
export const CRL_REASON_CERTIFICATE_HOLD = 6;
export const CRL_REASON_REMOVE_FROM_CRL = 8;
export const CERT_ROOT_PROGRAM_FLAG_LSC = 64;
export const CERT_ROOT_PROGRAM_FLAG_ORG = 128;
export const CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO = 32;
export const CRYPT_XML_KEY_VALUE_TYPE_DSA = 1;
export const CRYPT_XML_KEY_VALUE_TYPE_RSA = 2;
export const CRYPT_XML_KEY_VALUE_TYPE_ECDSA = 3;
export const CRYPT_XML_KEY_VALUE_TYPE_CUSTOM = 4;
export const CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE = 0;
export const CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE = 1;
export const CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE = 2;
export const CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE = 1;
export const CMSG_KEY_AGREE_STATIC_KEY_CHOICE = 2;
export const CERT_LOGOTYPE_DIRECT_INFO_CHOICE = 1;
export const CERT_LOGOTYPE_INDIRECT_INFO_CHOICE = 2;
export const CERT_STORE_PROV_EXTERNAL_FLAG = 1;
export const CERT_STORE_PROV_DELETED_FLAG = 2;
export const CERT_STORE_PROV_NO_PERSIST_FLAG = 4;
export const CERT_STORE_PROV_SYSTEM_STORE_FLAG = 8;
export const CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG = 16;
export const CMSG_KEY_AGREE_ORIGINATOR_CERT = 1;
export const CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY = 2;
export const CRYPT_EXCLUSIVE = 1;
export const CRYPT_OVERRIDE = 65536;
export const BCRYPT_DSA_PUBLIC_MAGIC = 1112560452;
export const BCRYPT_DSA_PRIVATE_MAGIC = 1448104772;
export const CRYPT_XML_X509DATA_TYPE_ISSUER_SERIAL = 1;
export const CRYPT_XML_X509DATA_TYPE_SKI = 2;
export const CRYPT_XML_X509DATA_TYPE_SUBJECT_NAME = 3;
export const CRYPT_XML_X509DATA_TYPE_CERTIFICATE = 4;
export const CRYPT_XML_X509DATA_TYPE_CRL = 5;
export const CRYPT_XML_X509DATA_TYPE_CUSTOM = 6;
export const CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE = 1;
export const CERT_BIOMETRIC_OID_DATA_CHOICE = 2;
export const CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG = 1;
export const CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG = 2;
export const CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG = 4;
export const CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS = 7;
export const CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG = 8;
export const CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG = 16;
export const CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG = 32;
export const CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG = 64;
export const CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG = 128;
export const CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG = 256;
export const CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG = 512;
export const CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG = 1024;
export const CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG = 2048;
export const CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS = 3840;
export const CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG = 32768;
export const CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG = 16384;
export const CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG = 8192;
export const CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG = 4096;
export const CERT_STRONG_SIGN_ENABLE_CRL_CHECK = 1;
export const CERT_STRONG_SIGN_ENABLE_OCSP_CHECK = 2;
export const CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE = 1;
export const CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE = 2;
export const CRYPT_XML_STATUS_INTERNAL_REFERENCE = 1;
export const CRYPT_XML_STATUS_KEY_AVAILABLE = 2;
export const CRYPT_XML_STATUS_DIGESTING = 4;
export const CRYPT_XML_STATUS_DIGEST_VALID = 8;
export const CRYPT_XML_STATUS_SIGNATURE_VALID = 65536;
export const CRYPT_XML_STATUS_OPENED_TO_ENCODE = 2147483648;
export const CRYPT_XML_TRANSFORM_ON_STREAM = 1;
export const CRYPT_XML_TRANSFORM_ON_NODESET = 2;
export const CRYPT_XML_TRANSFORM_URI_QUERY_STRING = 3;
export const CRYPT_XML_GROUP_ID_HASH = 1;
export const CRYPT_XML_GROUP_ID_SIGN = 2;
export const CERT_SELECT_BY_ENHKEY_USAGE = 1;
export const CERT_SELECT_BY_KEY_USAGE = 2;
export const CERT_SELECT_BY_POLICY_OID = 3;
export const CERT_SELECT_BY_PROV_NAME = 4;
export const CERT_SELECT_BY_EXTENSION = 5;
export const CERT_SELECT_BY_SUBJECT_HOST_NAME = 6;
export const CERT_SELECT_BY_ISSUER_ATTR = 7;
export const CERT_SELECT_BY_SUBJECT_ATTR = 8;
export const CERT_SELECT_BY_ISSUER_NAME = 9;
export const CERT_SELECT_BY_PUBLIC_KEY = 10;
export const CERT_SELECT_BY_TLS_SIGNATURES = 11;
export const BCRYPT_RSAPUBLIC_MAGIC = 826364754;
export const BCRYPT_RSAPRIVATE_MAGIC = 843141970;
export const BCRYPT_RSAFULLPRIVATE_MAGIC = 859919186;
export const CRYPT_XML_KEYINFO_TYPE_KEYNAME = 1;
export const CRYPT_XML_KEYINFO_TYPE_KEYVALUE = 2;
export const CRYPT_XML_KEYINFO_TYPE_RETRIEVAL = 3;
export const CRYPT_XML_KEYINFO_TYPE_X509DATA = 4;
export const CRYPT_XML_KEYINFO_TYPE_CUSTOM = 5;
export const TIMESTAMP_VERSION = 1;
export const CERT_ID_ISSUER_SERIAL_NUMBER = 1;
export const CERT_ID_KEY_IDENTIFIER = 2;
export const CERT_ID_SHA1_HASH = 3;
export const AUTHTYPE_CLIENT = 1;
export const AUTHTYPE_SERVER = 2;
export const BCRYPT_DH_PUBLIC_MAGIC = 1112557636;
export const BCRYPT_DH_PRIVATE_MAGIC = 1448101956;
export const CRYPT_XML_STATUS_ERROR_NOT_RESOLVED = 1;
export const CRYPT_XML_STATUS_ERROR_DIGEST_INVALID = 2;
export const CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_ALGORITHM = 5;
export const CRYPT_XML_STATUS_ERROR_NOT_SUPPORTED_TRANSFORM = 8;
export const CRYPT_XML_STATUS_ERROR_SIGNATURE_INVALID = 65536;
export const CRYPT_XML_STATUS_ERROR_KEYINFO_NOT_PARSED = 131072;
export const TIMESTAMP_STATUS_GRANTED = 0;
export const TIMESTAMP_STATUS_GRANTED_WITH_MODS = 1;
export const TIMESTAMP_STATUS_REJECTED = 2;
export const TIMESTAMP_STATUS_WAITING = 3;
export const TIMESTAMP_STATUS_REVOCATION_WARNING = 4;
export const TIMESTAMP_STATUS_REVOKED = 5;
export const NCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3;
export const NCRYPT_SECRET_AGREEMENT_INTERFACE = 4;
export const NCRYPT_SIGNATURE_INTERFACE = 5;
export const CRYPTUI_WIZ_NO_UI = 1;
export const CRYPTUI_WIZ_IGNORE_NO_UI_FLAG_FOR_CSPS = 2;
export const CRYPTUI_WIZ_NO_UI_EXCEPT_CSP = 3;
export const CRYPTUI_WIZ_IMPORT_ALLOW_CERT = 131072;
export const CRYPTUI_WIZ_IMPORT_ALLOW_CRL = 262144;
export const CRYPTUI_WIZ_IMPORT_ALLOW_CTL = 524288;
export const CRYPTUI_WIZ_IMPORT_NO_CHANGE_DEST_STORE = 65536;
export const CRYPTUI_WIZ_IMPORT_TO_LOCALMACHINE = 1048576;
export const CRYPTUI_WIZ_IMPORT_TO_CURRENTUSER = 2097152;
export const CRYPTUI_WIZ_IMPORT_REMOTE_DEST_STORE = 4194304;
export const CRYPTUI_WIZ_EXPORT_PRIVATE_KEY = 256;
export const CRYPTUI_WIZ_EXPORT_NO_DELETE_PRIVATE_KEY = 512;
export const CRYPTUI_HIDE_HIERARCHYPAGE = 1;
export const CRYPTUI_HIDE_DETAILPAGE = 2;
export const CRYPTUI_DISABLE_EDITPROPERTIES = 4;
export const CRYPTUI_ENABLE_EDITPROPERTIES = 8;
export const CRYPTUI_DISABLE_ADDTOSTORE = 16;
export const CRYPTUI_ENABLE_ADDTOSTORE = 32;
export const CRYPTUI_ACCEPT_DECLINE_STYLE = 64;
export const CRYPTUI_IGNORE_UNTRUSTED_ROOT = 128;
export const CRYPTUI_DONT_OPEN_STORES = 256;
export const CRYPTUI_ONLY_OPEN_ROOT_STORE = 512;
export const CRYPTUI_WARN_UNTRUSTED_ROOT = 1024;
export const CRYPTUI_ENABLE_REVOCATION_CHECKING = 2048;
export const CRYPTUI_WARN_REMOTE_TRUST = 4096;
export const CRYPTUI_DISABLE_EXPORT = 8192;
export const CRYPTUI_ENABLE_REVOCATION_CHECK_END_CERT = 16384;
export const CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN = 32768;
export const CRYPTUI_ENABLE_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 2048;
export const CRYPTUI_DISABLE_HTMLLINK = 65536;
export const CRYPTUI_DISABLE_ISSUERSTATEMENT = 131072;
export const CRYPTUI_CACHE_ONLY_URL_RETRIEVAL = 262144;
export const CSS_HIDE_PROPERTIES = 1;
export const CSS_ENABLEHOOK = 2;
export const CSS_ALLOWMULTISELECT = 4;
export const CSS_SHOW_HELP = 16;
export const CSS_ENABLETEMPLATE = 32;
export const CSS_ENABLETEMPLATEHANDLE = 64;
export const CRYPTUI_WIZ_IMPORT_SUBJECT_FILE = 1;
export const CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_CONTEXT = 2;
export const CRYPTUI_WIZ_IMPORT_SUBJECT_CTL_CONTEXT = 3;
export const CRYPTUI_WIZ_IMPORT_SUBJECT_CRL_CONTEXT = 4;
export const CRYPTUI_WIZ_IMPORT_SUBJECT_CERT_STORE = 5;
export const CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_BLOB = 2;
export const CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_FILE = 1;
export const CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT_NONE = 0;
export const CRYPTUI_WIZ_DIGITAL_SIGN_CERT = 1;
export const CRYPTUI_WIZ_DIGITAL_SIGN_STORE = 2;
export const CRYPTUI_WIZ_DIGITAL_SIGN_PVK = 3;
export const CRYPTUI_WIZ_DIGITAL_SIGN_NONE = 0;
export const CRYPTUI_WIZ_EXPORT_CERT_CONTEXT = 1;
export const CRYPTUI_WIZ_EXPORT_CTL_CONTEXT = 2;
export const CRYPTUI_WIZ_EXPORT_CRL_CONTEXT = 3;
export const CRYPTUI_WIZ_EXPORT_CERT_STORE = 4;
export const CRYPTUI_WIZ_EXPORT_CERT_STORE_CERTIFICATES_ONLY = 5;
export const CRYPTUI_WIZ_DIGITAL_SIGN_COMMERCIAL = 1;
export const CRYPTUI_WIZ_DIGITAL_SIGN_INDIVIDUAL = 2;
export const CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE = 1;
export const CRYPTUI_WIZ_DIGITAL_SIGN_PVK_PROV = 2;
export const CM_ENABLEHOOK = 1;
export const CM_SHOW_HELP = 2;
export const CM_SHOW_HELPICON = 4;
export const CM_ENABLETEMPLATE = 8;
export const CM_HIDE_ADVANCEPAGE = 16;
export const CM_HIDE_TRUSTPAGE = 32;
export const CM_NO_NAMECHANGE = 64;
export const CM_NO_EDITTRUST = 128;
export const CM_HIDE_DETAILPAGE = 256;
export const CM_ADD_CERT_STORES = 512;
export const CRYPTUI_WIZ_EXPORT_FORMAT_DER = 1;
export const CRYPTUI_WIZ_EXPORT_FORMAT_PFX = 2;
export const CRYPTUI_WIZ_EXPORT_FORMAT_PKCS7 = 3;
export const CRYPTUI_WIZ_EXPORT_FORMAT_BASE64 = 4;
export const CRYPTUI_WIZ_EXPORT_FORMAT_CRL = 6;
export const CRYPTUI_WIZ_EXPORT_FORMAT_CTL = 7;
export const CRYPTUI_WIZ_DIGITAL_SIGN_ADD_CHAIN = 1;
export const CRYPTUI_WIZ_DIGITAL_SIGN_ADD_CHAIN_NO_ROOT = 2;
export const CRYPTUI_WIZ_DIGITAL_SIGN_ADD_NONE = 0;
export const CTL_MODIFY_REQUEST_ADD_TRUSTED = 3;
export const CTL_MODIFY_REQUEST_ADD_NOT_TRUSTED = 1;
export const CTL_MODIFY_REQUEST_REMOVE = 2;
export const SE_PRIVILEGE_ENABLED = 2;
export const SE_PRIVILEGE_ENABLED_BY_DEFAULT = 1;
export const SE_PRIVILEGE_REMOVED = 4;
export const SE_PRIVILEGE_USED_FOR_ACCESS = 2147483648;
export const LOGON32_PROVIDER_DEFAULT = 0;
export const LOGON32_PROVIDER_WINNT50 = 3;
export const LOGON32_PROVIDER_WINNT40 = 2;
export const DISABLE_MAX_PRIVILEGE = 1;
export const SANDBOX_INERT = 2;
export const LUA_TOKEN = 4;
export const WRITE_RESTRICTED = 8;
export const LOGON32_LOGON_BATCH = 4;
export const LOGON32_LOGON_INTERACTIVE = 2;
export const LOGON32_LOGON_NETWORK = 3;
export const LOGON32_LOGON_NETWORK_CLEARTEXT = 8;
export const LOGON32_LOGON_NEW_CREDENTIALS = 9;
export const LOGON32_LOGON_SERVICE = 5;
export const LOGON32_LOGON_UNLOCK = 7;
export const CONTAINER_INHERIT_ACE = 2;
export const FAILED_ACCESS_ACE_FLAG = 128;
export const INHERIT_ONLY_ACE = 8;
export const INHERITED_ACE = 16;
export const NO_PROPAGATE_INHERIT_ACE = 4;
export const OBJECT_INHERIT_ACE = 1;
export const SUCCESSFUL_ACCESS_ACE_FLAG = 64;
export const SUB_CONTAINERS_AND_OBJECTS_INHERIT = 3;
export const SUB_CONTAINERS_ONLY_INHERIT = 2;
export const SUB_OBJECTS_ONLY_INHERIT = 1;
export const INHERIT_NO_PROPAGATE = 4;
export const INHERIT_ONLY = 8;
export const NO_INHERITANCE = 0;
export const ATTRIBUTE_SECURITY_INFORMATION = 32;
export const BACKUP_SECURITY_INFORMATION = 65536;
export const DACL_SECURITY_INFORMATION = 4;
export const GROUP_SECURITY_INFORMATION = 2;
export const LABEL_SECURITY_INFORMATION = 16;
export const OWNER_SECURITY_INFORMATION = 1;
export const PROTECTED_DACL_SECURITY_INFORMATION = 2147483648;
export const PROTECTED_SACL_SECURITY_INFORMATION = 1073741824;
export const SACL_SECURITY_INFORMATION = 8;
export const SCOPE_SECURITY_INFORMATION = 64;
export const UNPROTECTED_DACL_SECURITY_INFORMATION = 536870912;
export const UNPROTECTED_SACL_SECURITY_INFORMATION = 268435456;
export const SEF_AVOID_OWNER_CHECK = 16;
export const SEF_AVOID_OWNER_RESTRICTION = 4096;
export const SEF_AVOID_PRIVILEGE_CHECK = 8;
export const SEF_DACL_AUTO_INHERIT = 1;
export const SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = 4;
export const SEF_DEFAULT_GROUP_FROM_PARENT = 64;
export const SEF_DEFAULT_OWNER_FROM_PARENT = 32;
export const SEF_MACL_NO_EXECUTE_UP = 1024;
export const SEF_MACL_NO_READ_UP = 512;
export const SEF_MACL_NO_WRITE_UP = 256;
export const SEF_SACL_AUTO_INHERIT = 2;
export const ACL_REVISION = 2;
export const ACL_REVISION_DS = 4;
export const TOKEN_MANDATORY_POLICY_OFF = 0;
export const TOKEN_MANDATORY_POLICY_NO_WRITE_UP = 1;
export const TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN = 2;
export const TOKEN_MANDATORY_POLICY_VALID_MASK = 3;
export const ACE_OBJECT_TYPE_PRESENT = 1;
export const ACE_INHERITED_OBJECT_TYPE_PRESENT = 2;
export const CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE = 1;
export const CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE = 2;
export const CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY = 4;
export const CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT = 8;
export const CLAIM_SECURITY_ATTRIBUTE_DISABLED = 16;
export const CLAIM_SECURITY_ATTRIBUTE_MANDATORY = 32;
export const CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64 = 1;
export const CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64 = 2;
export const CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING = 3;
export const CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING = 16;
export const CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN = 4;
export const CLAIM_SECURITY_ATTRIBUTE_TYPE_SID = 5;
export const CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN = 6;
export const TOKEN_DELETE = 65536;
export const TOKEN_READ_CONTROL = 131072;
export const TOKEN_WRITE_DAC = 262144;
export const TOKEN_WRITE_OWNER = 524288;
export const TOKEN_ACCESS_SYSTEM_SECURITY = 16777216;
export const TOKEN_ASSIGN_PRIMARY = 1;
export const TOKEN_DUPLICATE = 2;
export const TOKEN_IMPERSONATE = 4;
export const TOKEN_QUERY = 8;
export const TOKEN_QUERY_SOURCE = 16;
export const TOKEN_ADJUST_PRIVILEGES = 32;
export const TOKEN_ADJUST_GROUPS = 64;
export const TOKEN_ADJUST_DEFAULT = 128;
export const TOKEN_ADJUST_SESSIONID = 256;
export const TOKEN_READ = 131080;
export const TOKEN_WRITE = 131296;
export const TOKEN_EXECUTE = 131072;
export const TOKEN_TRUST_CONSTRAINT_MASK = 131096;
export const TOKEN_ACCESS_PSEUDO_HANDLE_WIN8 = 24;
export const TOKEN_ACCESS_PSEUDO_HANDLE = 24;
export const TOKEN_ALL_ACCESS = 983295;
export const CRED_MAX_CREDENTIAL_BLOB_SIZE = 2560;
export const CRED_MAX_USERNAME_LENGTH = 513;
export const CRED_MAX_DOMAIN_TARGET_NAME_LENGTH = 337;
export const FILE_DEVICE_SMARTCARD = 49;
export const SCARD_ATR_LENGTH = 33;
export const SCARD_PROTOCOL_UNDEFINED = 0;
export const SCARD_PROTOCOL_T0 = 1;
export const SCARD_PROTOCOL_T1 = 2;
export const SCARD_PROTOCOL_RAW = 65536;
export const SCARD_PROTOCOL_DEFAULT = 2147483648;
export const SCARD_PROTOCOL_OPTIMAL = 0;
export const SCARD_POWER_DOWN = 0;
export const SCARD_COLD_RESET = 1;
export const SCARD_WARM_RESET = 2;
export const MAXIMUM_ATTR_STRING_LENGTH = 32;
export const MAXIMUM_SMARTCARD_READERS = 10;
export const SCARD_CLASS_VENDOR_INFO = 1;
export const SCARD_CLASS_COMMUNICATIONS = 2;
export const SCARD_CLASS_PROTOCOL = 3;
export const SCARD_CLASS_POWER_MGMT = 4;
export const SCARD_CLASS_SECURITY = 5;
export const SCARD_CLASS_MECHANICAL = 6;
export const SCARD_CLASS_VENDOR_DEFINED = 7;
export const SCARD_CLASS_IFD_PROTOCOL = 8;
export const SCARD_CLASS_ICC_STATE = 9;
export const SCARD_CLASS_PERF = 32766;
export const SCARD_CLASS_SYSTEM = 32767;
export const SCARD_T0_HEADER_LENGTH = 7;
export const SCARD_T0_CMD_LENGTH = 5;
export const SCARD_T1_PROLOGUE_LENGTH = 3;
export const SCARD_T1_EPILOGUE_LENGTH = 2;
export const SCARD_T1_EPILOGUE_LENGTH_LRC = 1;
export const SCARD_T1_MAX_IFS = 254;
export const SCARD_UNKNOWN = 0;
export const SCARD_ABSENT = 1;
export const SCARD_PRESENT = 2;
export const SCARD_SWALLOWED = 3;
export const SCARD_POWERED = 4;
export const SCARD_NEGOTIABLE = 5;
export const SCARD_SPECIFIC = 6;
export const SCARD_READER_SWALLOWS = 1;
export const SCARD_READER_EJECTS = 2;
export const SCARD_READER_CONFISCATES = 4;
export const SCARD_READER_CONTACTLESS = 8;
export const SCARD_READER_TYPE_SERIAL = 1;
export const SCARD_READER_TYPE_PARALELL = 2;
export const SCARD_READER_TYPE_KEYBOARD = 4;
export const SCARD_READER_TYPE_SCSI = 8;
export const SCARD_READER_TYPE_IDE = 16;
export const SCARD_READER_TYPE_USB = 32;
export const SCARD_READER_TYPE_PCMCIA = 64;
export const SCARD_READER_TYPE_TPM = 128;
export const SCARD_READER_TYPE_NFC = 256;
export const SCARD_READER_TYPE_UICC = 512;
export const SCARD_READER_TYPE_NGC = 1024;
export const SCARD_READER_TYPE_EMBEDDEDSE = 2048;
export const SCARD_READER_TYPE_VENDOR = 240;
export const STATUS_LOGON_FAILURE = 116568633639021;
export const STATUS_WRONG_PASSWORD = 124265215033450;
export const STATUS_PASSWORD_EXPIRED = 602552773116017;
export const STATUS_PASSWORD_MUST_CHANGE = 993978912604708;
export const STATUS_DOWNGRADE_DETECTED = 1146811028865928;
export const STATUS_AUTHENTICATION_FIREWALL_FAILED = 125364726662163;
export const STATUS_ACCOUNT_DISABLED = 120966680150130;
export const STATUS_ACCOUNT_RESTRICTION = 620144959160430;
export const STATUS_ACCOUNT_LOCKED_OUT = 443123587088948;
export const STATUS_ACCOUNT_EXPIRED = 381550935933331;
export const STATUS_LOGON_TYPE_NOT_GRANTED = 104474005733723;
export const STATUS_NO_SUCH_LOGON_SESSION = 109971563872351;
export const STATUS_NO_SUCH_USER = 5980826556577087588n;
export const CRED_MAX_STRING_LENGTH = 256;
export const CRED_MAX_GENERIC_TARGET_NAME_LENGTH = 32767;
export const CRED_MAX_TARGETNAME_NAMESPACE_LENGTH = 256;
export const CRED_MAX_TARGETNAME_ATTRIBUTE_LENGTH = 256;
export const CRED_MAX_VALUE_SIZE = 256;
export const CRED_MAX_ATTRIBUTES = 64;
export const CRED_SESSION_WILDCARD_NAME_W = `*Session`;
export const CRED_SESSION_WILDCARD_NAME_A = `*Session`;
export const CRED_TARGETNAME_DOMAIN_NAMESPACE_W = `Domain`;
export const CRED_TARGETNAME_DOMAIN_NAMESPACE_A = `Domain`;
export const CRED_TARGETNAME_LEGACYGENERIC_NAMESPACE_W = `LegacyGeneric`;
export const CRED_TARGETNAME_LEGACYGENERIC_NAMESPACE_A = `LegacyGeneric`;
export const CRED_TARGETNAME_ATTRIBUTE_TARGET_W = `target`;
export const CRED_TARGETNAME_ATTRIBUTE_TARGET_A = `target`;
export const CRED_TARGETNAME_ATTRIBUTE_NAME_W = `name`;
export const CRED_TARGETNAME_ATTRIBUTE_NAME_A = `name`;
export const CRED_TARGETNAME_ATTRIBUTE_BATCH_W = `batch`;
export const CRED_TARGETNAME_ATTRIBUTE_BATCH_A = `batch`;
export const CRED_TARGETNAME_ATTRIBUTE_INTERACTIVE_W = `interactive`;
export const CRED_TARGETNAME_ATTRIBUTE_INTERACTIVE_A = `interactive`;
export const CRED_TARGETNAME_ATTRIBUTE_SERVICE_W = `service`;
export const CRED_TARGETNAME_ATTRIBUTE_SERVICE_A = `service`;
export const CRED_TARGETNAME_ATTRIBUTE_NETWORK_W = `network`;
export const CRED_TARGETNAME_ATTRIBUTE_NETWORK_A = `network`;
export const CRED_TARGETNAME_ATTRIBUTE_NETWORKCLEARTEXT_W = `networkcleartext`;
export const CRED_TARGETNAME_ATTRIBUTE_NETWORKCLEARTEXT_A = `networkcleartext`;
export const CRED_TARGETNAME_ATTRIBUTE_REMOTEINTERACTIVE_W = `remoteinteractive`;
export const CRED_TARGETNAME_ATTRIBUTE_REMOTEINTERACTIVE_A = `remoteinteractive`;
export const CRED_TARGETNAME_ATTRIBUTE_CACHEDINTERACTIVE_W = `cachedinteractive`;
export const CRED_TARGETNAME_ATTRIBUTE_CACHEDINTERACTIVE_A = `cachedinteractive`;
export const CRED_SESSION_WILDCARD_NAME = `*Session`;
export const CRED_TARGETNAME_DOMAIN_NAMESPACE = `Domain`;
export const CRED_TARGETNAME_ATTRIBUTE_NAME = `name`;
export const CRED_TARGETNAME_ATTRIBUTE_TARGET = `target`;
export const CRED_TARGETNAME_ATTRIBUTE_BATCH = `batch`;
export const CRED_TARGETNAME_ATTRIBUTE_INTERACTIVE = `interactive`;
export const CRED_TARGETNAME_ATTRIBUTE_SERVICE = `service`;
export const CRED_TARGETNAME_ATTRIBUTE_NETWORK = `network`;
export const CRED_TARGETNAME_ATTRIBUTE_NETWORKCLEARTEXT = `networkcleartext`;
export const CRED_TARGETNAME_ATTRIBUTE_REMOTEINTERACTIVE = `remoteinteractive`;
export const CRED_TARGETNAME_ATTRIBUTE_CACHEDINTERACTIVE = `cachedinteractive`;
export const CRED_LOGON_TYPES_MASK = 61440;
export const CRED_TI_SERVER_FORMAT_UNKNOWN = 1;
export const CRED_TI_DOMAIN_FORMAT_UNKNOWN = 2;
export const CRED_TI_ONLY_PASSWORD_REQUIRED = 4;
export const CRED_TI_USERNAME_TARGET = 8;
export const CRED_TI_CREATE_EXPLICIT_CRED = 16;
export const CRED_TI_WORKGROUP_MEMBER = 32;
export const CRED_TI_DNSTREE_IS_DFS_SERVER = 64;
export const CRED_TI_VALID_FLAGS = 61567;
export const CERT_HASH_LENGTH = 20;
export const CREDUI_MAX_MESSAGE_LENGTH = 1024;
export const CREDUI_MAX_CAPTION_LENGTH = 128;
export const CREDUI_MAX_GENERIC_TARGET_LENGTH = 32767;
export const CREDUI_MAX_DOMAIN_TARGET_LENGTH = 337;
export const CREDUI_MAX_USERNAME_LENGTH = 513;
export const CREDUIWIN_IGNORE_CLOUDAUTHORITY_NAME = 262144;
export const CREDUIWIN_DOWNLEVEL_HELLO_AS_SMART_CARD = 2147483648;
export const CRED_PRESERVE_CREDENTIAL_BLOB = 1;
export const CRED_CACHE_TARGET_INFORMATION = 1;
export const CRED_ALLOW_NAME_RESOLUTION = 1;
export const CRED_PROTECT_AS_SELF = 1;
export const CRED_PROTECT_TO_SYSTEM = 2;
export const CRED_UNPROTECT_AS_SELF = 1;
export const CRED_UNPROTECT_ALLOW_TO_SYSTEM = 2;
export const SCARD_SCOPE_TERMINAL = 1;
export const SCARD_ALL_READERS = `SCard$AllReaders\000`;
export const SCARD_DEFAULT_READERS = `SCard$DefaultReaders\000`;
export const SCARD_LOCAL_READERS = `SCard$LocalReaders\000`;
export const SCARD_SYSTEM_READERS = `SCard$SystemReaders\000`;
export const SCARD_PROVIDER_PRIMARY = 1;
export const SCARD_PROVIDER_CSP = 2;
export const SCARD_PROVIDER_KSP = 3;
export const SCARD_STATE_UNPOWERED = 1024;
export const SCARD_SHARE_EXCLUSIVE = 1;
export const SCARD_SHARE_SHARED = 2;
export const SCARD_SHARE_DIRECT = 3;
export const SCARD_LEAVE_CARD = 0;
export const SCARD_RESET_CARD = 1;
export const SCARD_UNPOWER_CARD = 2;
export const SCARD_EJECT_CARD = 3;
export const SC_DLG_MINIMAL_UI = 1;
export const SC_DLG_NO_UI = 2;
export const SC_DLG_FORCE_UI = 4;
export const SCERR_NOCARDNAME = 16384;
export const SCERR_NOGUIDS = 32768;
export const SCARD_AUDIT_CHV_FAILURE = 0;
export const SCARD_AUDIT_CHV_SUCCESS = 1;
export const CREDSSP_NAME = `CREDSSP`;
export const TS_SSP_NAME_A = `TSSSP`;
export const TS_SSP_NAME = `TSSSP`;
export const szOID_TS_KP_TS_SERVER_AUTH = `1.3.6.1.4.1.311.54.1.2`;
export const CREDSSP_SERVER_AUTH_NEGOTIATE = 1;
export const CREDSSP_SERVER_AUTH_CERTIFICATE = 2;
export const CREDSSP_SERVER_AUTH_LOOPBACK = 4;
export const SECPKG_ALT_ATTR = 2147483648;
export const SECPKG_ATTR_C_FULL_IDENT_TOKEN = 2147483781;
export const CREDSSP_CRED_EX_VERSION = 0;
export const CREDSSP_FLAG_REDIRECT = 1;
export const CERT_COMPARE_SHIFT = 16;
export const BCRYPT_OBJECT_ALIGNMENT = 16;
export const BCRYPT_KDF_HASH = `HASH`;
export const BCRYPT_KDF_HMAC = `HMAC`;
export const BCRYPT_KDF_TLS_PRF = `TLS_PRF`;
export const BCRYPT_KDF_SP80056A_CONCAT = `SP800_56A_CONCAT`;
export const BCRYPT_KDF_RAW_SECRET = `TRUNCATE`;
export const BCRYPT_KDF_HKDF = `HKDF`;
export const KDF_HASH_ALGORITHM = 0;
export const KDF_SECRET_PREPEND = 1;
export const KDF_SECRET_APPEND = 2;
export const KDF_HMAC_KEY = 3;
export const KDF_TLS_PRF_LABEL = 4;
export const KDF_TLS_PRF_SEED = 5;
export const KDF_SECRET_HANDLE = 6;
export const KDF_TLS_PRF_PROTOCOL = 7;
export const KDF_ALGORITHMID = 8;
export const KDF_PARTYUINFO = 9;
export const KDF_PARTYVINFO = 10;
export const KDF_SUPPPUBINFO = 11;
export const KDF_SUPPPRIVINFO = 12;
export const KDF_LABEL = 13;
export const KDF_CONTEXT = 14;
export const KDF_SALT = 15;
export const KDF_ITERATION_COUNT = 16;
export const KDF_GENERIC_PARAMETER = 17;
export const KDF_KEYBITLENGTH = 18;
export const KDF_HKDF_SALT = 19;
export const KDF_HKDF_INFO = 20;
export const KDF_USE_SECRET_AS_HMAC_KEY_FLAG = 1;
export const BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION = 1;
export const BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG = 1;
export const BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG = 2;
export const BCRYPT_OPAQUE_KEY_BLOB = `OpaqueKeyBlob`;
export const BCRYPT_KEY_DATA_BLOB = `KeyDataBlob`;
export const BCRYPT_AES_WRAP_KEY_BLOB = `Rfc3565KeyWrapBlob`;
export const BCRYPT_OBJECT_LENGTH = `ObjectLength`;
export const BCRYPT_ALGORITHM_NAME = `AlgorithmName`;
export const BCRYPT_PROVIDER_HANDLE = `ProviderHandle`;
export const BCRYPT_CHAINING_MODE = `ChainingMode`;
export const BCRYPT_BLOCK_LENGTH = `BlockLength`;
export const BCRYPT_KEY_LENGTH = `KeyLength`;
export const BCRYPT_KEY_OBJECT_LENGTH = `KeyObjectLength`;
export const BCRYPT_KEY_STRENGTH = `KeyStrength`;
export const BCRYPT_KEY_LENGTHS = `KeyLengths`;
export const BCRYPT_BLOCK_SIZE_LIST = `BlockSizeList`;
export const BCRYPT_EFFECTIVE_KEY_LENGTH = `EffectiveKeyLength`;
export const BCRYPT_HASH_LENGTH = `HashDigestLength`;
export const BCRYPT_HASH_OID_LIST = `HashOIDList`;
export const BCRYPT_PADDING_SCHEMES = `PaddingSchemes`;
export const BCRYPT_SIGNATURE_LENGTH = `SignatureLength`;
export const BCRYPT_HASH_BLOCK_LENGTH = `HashBlockLength`;
export const BCRYPT_AUTH_TAG_LENGTH = `AuthTagLength`;
export const BCRYPT_PRIMITIVE_TYPE = `PrimitiveType`;
export const BCRYPT_IS_KEYED_HASH = `IsKeyedHash`;
export const BCRYPT_IS_REUSABLE_HASH = `IsReusableHash`;
export const BCRYPT_MESSAGE_BLOCK_LENGTH = `MessageBlockLength`;
export const BCRYPT_PUBLIC_KEY_LENGTH = `PublicKeyLength`;
export const BCRYPT_PCP_PLATFORM_TYPE_PROPERTY = `PCP_PLATFORM_TYPE`;
export const BCRYPT_PCP_PROVIDER_VERSION_PROPERTY = `PCP_PROVIDER_VERSION`;
export const BCRYPT_MULTI_OBJECT_LENGTH = `MultiObjectLength`;
export const BCRYPT_IS_IFX_TPM_WEAK_KEY = `IsIfxTpmWeakKey`;
export const BCRYPT_HKDF_HASH_ALGORITHM = `HkdfHashAlgorithm`;
export const BCRYPT_HKDF_SALT_AND_FINALIZE = `HkdfSaltAndFinalize`;
export const BCRYPT_HKDF_PRK_AND_FINALIZE = `HkdfPrkAndFinalize`;
export const BCRYPT_INITIALIZATION_VECTOR = `IV`;
export const BCRYPT_CHAIN_MODE_NA = `ChainingModeN/A`;
export const BCRYPT_CHAIN_MODE_CBC = `ChainingModeCBC`;
export const BCRYPT_CHAIN_MODE_ECB = `ChainingModeECB`;
export const BCRYPT_CHAIN_MODE_CFB = `ChainingModeCFB`;
export const BCRYPT_CHAIN_MODE_CCM = `ChainingModeCCM`;
export const BCRYPT_CHAIN_MODE_GCM = `ChainingModeGCM`;
export const BCRYPT_SUPPORTED_PAD_ROUTER = 1;
export const BCRYPT_SUPPORTED_PAD_PKCS1_ENC = 2;
export const BCRYPT_SUPPORTED_PAD_PKCS1_SIG = 4;
export const BCRYPT_SUPPORTED_PAD_OAEP = 8;
export const BCRYPT_SUPPORTED_PAD_PSS = 16;
export const BCRYPT_BLOCK_PADDING = 1;
export const BCRYPT_GENERATE_IV = 32;
export const BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID = 16;
export const BCRYPTBUFFER_VERSION = 0;
export const BCRYPT_PUBLIC_KEY_BLOB = `PUBLICBLOB`;
export const BCRYPT_PRIVATE_KEY_BLOB = `PRIVATEBLOB`;
export const BCRYPT_RSAPUBLIC_BLOB = `RSAPUBLICBLOB`;
export const BCRYPT_RSAPRIVATE_BLOB = `RSAPRIVATEBLOB`;
export const LEGACY_RSAPUBLIC_BLOB = `CAPIPUBLICBLOB`;
export const LEGACY_RSAPRIVATE_BLOB = `CAPIPRIVATEBLOB`;
export const BCRYPT_RSAFULLPRIVATE_BLOB = `RSAFULLPRIVATEBLOB`;
export const BCRYPT_GLOBAL_PARAMETERS = `SecretAgreementParam`;
export const BCRYPT_PRIVATE_KEY = `PrivKeyVal`;
export const BCRYPT_ECCPUBLIC_BLOB = `ECCPUBLICBLOB`;
export const BCRYPT_ECCPRIVATE_BLOB = `ECCPRIVATEBLOB`;
export const BCRYPT_ECCFULLPUBLIC_BLOB = `ECCFULLPUBLICBLOB`;
export const BCRYPT_ECCFULLPRIVATE_BLOB = `ECCFULLPRIVATEBLOB`;
export const SSL_ECCPUBLIC_BLOB = `SSLECCPUBLICBLOB`;
export const BCRYPT_ECDH_PUBLIC_P256_MAGIC = 827016005;
export const BCRYPT_ECDH_PRIVATE_P256_MAGIC = 843793221;
export const BCRYPT_ECDH_PUBLIC_P384_MAGIC = 860570437;
export const BCRYPT_ECDH_PRIVATE_P384_MAGIC = 877347653;
export const BCRYPT_ECDH_PUBLIC_P521_MAGIC = 894124869;
export const BCRYPT_ECDH_PRIVATE_P521_MAGIC = 910902085;
export const BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC = 1347109701;
export const BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC = 1447772997;
export const BCRYPT_ECDSA_PUBLIC_P256_MAGIC = 827540293;
export const BCRYPT_ECDSA_PRIVATE_P256_MAGIC = 844317509;
export const BCRYPT_ECDSA_PUBLIC_P384_MAGIC = 861094725;
export const BCRYPT_ECDSA_PRIVATE_P384_MAGIC = 877871941;
export const BCRYPT_ECDSA_PUBLIC_P521_MAGIC = 894649157;
export const BCRYPT_ECDSA_PRIVATE_P521_MAGIC = 911426373;
export const BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC = 1346650949;
export const BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC = 1447314245;
export const BCRYPT_ECC_FULLKEY_BLOB_V1 = 1;
export const BCRYPT_DH_PUBLIC_BLOB = `DHPUBLICBLOB`;
export const BCRYPT_DH_PRIVATE_BLOB = `DHPRIVATEBLOB`;
export const LEGACY_DH_PUBLIC_BLOB = `CAPIDHPUBLICBLOB`;
export const LEGACY_DH_PRIVATE_BLOB = `CAPIDHPRIVATEBLOB`;
export const BCRYPT_DH_PARAMETERS = `DHParameters`;
export const BCRYPT_DH_PARAMETERS_MAGIC = 1297107012;
export const BCRYPT_DSA_PUBLIC_BLOB = `DSAPUBLICBLOB`;
export const BCRYPT_DSA_PRIVATE_BLOB = `DSAPRIVATEBLOB`;
export const LEGACY_DSA_PUBLIC_BLOB = `CAPIDSAPUBLICBLOB`;
export const LEGACY_DSA_PRIVATE_BLOB = `CAPIDSAPRIVATEBLOB`;
export const LEGACY_DSA_V2_PUBLIC_BLOB = `V2CAPIDSAPUBLICBLOB`;
export const LEGACY_DSA_V2_PRIVATE_BLOB = `V2CAPIDSAPRIVATEBLOB`;
export const BCRYPT_DSA_PUBLIC_MAGIC_V2 = 843206724;
export const BCRYPT_DSA_PRIVATE_MAGIC_V2 = 844517444;
export const BCRYPT_KEY_DATA_BLOB_MAGIC = 1296188491;
export const BCRYPT_KEY_DATA_BLOB_VERSION1 = 1;
export const BCRYPT_DSA_PARAMETERS = `DSAParameters`;
export const BCRYPT_DSA_PARAMETERS_MAGIC = 1297109828;
export const BCRYPT_DSA_PARAMETERS_MAGIC_V2 = 843927620;
export const BCRYPT_ECC_PARAMETERS = `ECCParameters`;
export const BCRYPT_ECC_CURVE_NAME = `ECCCurveName`;
export const BCRYPT_ECC_CURVE_NAME_LIST = `ECCCurveNameList`;
export const BCRYPT_ECC_PARAMETERS_MAGIC = 1346585413;
export const BCRYPT_ECC_CURVE_BRAINPOOLP160R1 = `brainpoolP160r1`;
export const BCRYPT_ECC_CURVE_BRAINPOOLP160T1 = `brainpoolP160t1`;
export const BCRYPT_ECC_CURVE_BRAINPOOLP192R1 = `brainpoolP192r1`;
export const BCRYPT_ECC_CURVE_BRAINPOOLP192T1 = `brainpoolP192t1`;
export const BCRYPT_ECC_CURVE_BRAINPOOLP224R1 = `brainpoolP224r1`;
export const BCRYPT_ECC_CURVE_BRAINPOOLP224T1 = `brainpoolP224t1`;
export const BCRYPT_ECC_CURVE_BRAINPOOLP256R1 = `brainpoolP256r1`;
export const BCRYPT_ECC_CURVE_BRAINPOOLP256T1 = `brainpoolP256t1`;
export const BCRYPT_ECC_CURVE_BRAINPOOLP320R1 = `brainpoolP320r1`;
export const BCRYPT_ECC_CURVE_BRAINPOOLP320T1 = `brainpoolP320t1`;
export const BCRYPT_ECC_CURVE_BRAINPOOLP384R1 = `brainpoolP384r1`;
export const BCRYPT_ECC_CURVE_BRAINPOOLP384T1 = `brainpoolP384t1`;
export const BCRYPT_ECC_CURVE_BRAINPOOLP512R1 = `brainpoolP512r1`;
export const BCRYPT_ECC_CURVE_BRAINPOOLP512T1 = `brainpoolP512t1`;
export const BCRYPT_ECC_CURVE_25519 = `curve25519`;
export const BCRYPT_ECC_CURVE_EC192WAPI = `ec192wapi`;
export const BCRYPT_ECC_CURVE_NISTP192 = `nistP192`;
export const BCRYPT_ECC_CURVE_NISTP224 = `nistP224`;
export const BCRYPT_ECC_CURVE_NISTP256 = `nistP256`;
export const BCRYPT_ECC_CURVE_NISTP384 = `nistP384`;
export const BCRYPT_ECC_CURVE_NISTP521 = `nistP521`;
export const BCRYPT_ECC_CURVE_NUMSP256T1 = `numsP256t1`;
export const BCRYPT_ECC_CURVE_NUMSP384T1 = `numsP384t1`;
export const BCRYPT_ECC_CURVE_NUMSP512T1 = `numsP512t1`;
export const BCRYPT_ECC_CURVE_SECP160K1 = `secP160k1`;
export const BCRYPT_ECC_CURVE_SECP160R1 = `secP160r1`;
export const BCRYPT_ECC_CURVE_SECP160R2 = `secP160r2`;
export const BCRYPT_ECC_CURVE_SECP192K1 = `secP192k1`;
export const BCRYPT_ECC_CURVE_SECP192R1 = `secP192r1`;
export const BCRYPT_ECC_CURVE_SECP224K1 = `secP224k1`;
export const BCRYPT_ECC_CURVE_SECP224R1 = `secP224r1`;
export const BCRYPT_ECC_CURVE_SECP256K1 = `secP256k1`;
export const BCRYPT_ECC_CURVE_SECP256R1 = `secP256r1`;
export const BCRYPT_ECC_CURVE_SECP384R1 = `secP384r1`;
export const BCRYPT_ECC_CURVE_SECP521R1 = `secP521r1`;
export const BCRYPT_ECC_CURVE_WTLS7 = `wtls7`;
export const BCRYPT_ECC_CURVE_WTLS9 = `wtls9`;
export const BCRYPT_ECC_CURVE_WTLS12 = `wtls12`;
export const BCRYPT_ECC_CURVE_X962P192V1 = `x962P192v1`;
export const BCRYPT_ECC_CURVE_X962P192V2 = `x962P192v2`;
export const BCRYPT_ECC_CURVE_X962P192V3 = `x962P192v3`;
export const BCRYPT_ECC_CURVE_X962P239V1 = `x962P239v1`;
export const BCRYPT_ECC_CURVE_X962P239V2 = `x962P239v2`;
export const BCRYPT_ECC_CURVE_X962P239V3 = `x962P239v3`;
export const BCRYPT_ECC_CURVE_X962P256V1 = `x962P256v1`;
export const MS_PRIMITIVE_PROVIDER = `Microsoft Primitive Provider`;
export const MS_PLATFORM_CRYPTO_PROVIDER = `Microsoft Platform Crypto Provider`;
export const BCRYPT_RSA_ALGORITHM = `RSA`;
export const BCRYPT_RSA_SIGN_ALGORITHM = `RSA_SIGN`;
export const BCRYPT_DH_ALGORITHM = `DH`;
export const BCRYPT_DSA_ALGORITHM = `DSA`;
export const BCRYPT_RC2_ALGORITHM = `RC2`;
export const BCRYPT_RC4_ALGORITHM = `RC4`;
export const BCRYPT_AES_ALGORITHM = `AES`;
export const BCRYPT_DES_ALGORITHM = `DES`;
export const BCRYPT_DESX_ALGORITHM = `DESX`;
export const BCRYPT_3DES_ALGORITHM = `3DES`;
export const BCRYPT_3DES_112_ALGORITHM = `3DES_112`;
export const BCRYPT_MD2_ALGORITHM = `MD2`;
export const BCRYPT_MD4_ALGORITHM = `MD4`;
export const BCRYPT_MD5_ALGORITHM = `MD5`;
export const BCRYPT_SHA1_ALGORITHM = `SHA1`;
export const BCRYPT_SHA256_ALGORITHM = `SHA256`;
export const BCRYPT_SHA384_ALGORITHM = `SHA384`;
export const BCRYPT_SHA512_ALGORITHM = `SHA512`;
export const BCRYPT_AES_GMAC_ALGORITHM = `AES-GMAC`;
export const BCRYPT_AES_CMAC_ALGORITHM = `AES-CMAC`;
export const BCRYPT_ECDSA_P256_ALGORITHM = `ECDSA_P256`;
export const BCRYPT_ECDSA_P384_ALGORITHM = `ECDSA_P384`;
export const BCRYPT_ECDSA_P521_ALGORITHM = `ECDSA_P521`;
export const BCRYPT_ECDH_P256_ALGORITHM = `ECDH_P256`;
export const BCRYPT_ECDH_P384_ALGORITHM = `ECDH_P384`;
export const BCRYPT_ECDH_P521_ALGORITHM = `ECDH_P521`;
export const BCRYPT_RNG_ALGORITHM = `RNG`;
export const BCRYPT_RNG_FIPS186_DSA_ALGORITHM = `FIPS186DSARNG`;
export const BCRYPT_RNG_DUAL_EC_ALGORITHM = `DUALECRNG`;
export const BCRYPT_SP800108_CTR_HMAC_ALGORITHM = `SP800_108_CTR_HMAC`;
export const BCRYPT_SP80056A_CONCAT_ALGORITHM = `SP800_56A_CONCAT`;
export const BCRYPT_PBKDF2_ALGORITHM = `PBKDF2`;
export const BCRYPT_CAPI_KDF_ALGORITHM = `CAPI_KDF`;
export const BCRYPT_TLS1_1_KDF_ALGORITHM = `TLS1_1_KDF`;
export const BCRYPT_TLS1_2_KDF_ALGORITHM = `TLS1_2_KDF`;
export const BCRYPT_ECDSA_ALGORITHM = `ECDSA`;
export const BCRYPT_ECDH_ALGORITHM = `ECDH`;
export const BCRYPT_XTS_AES_ALGORITHM = `XTS-AES`;
export const BCRYPT_HKDF_ALGORITHM = `HKDF`;
export const BCRYPT_CHACHA20_POLY1305_ALGORITHM = `CHACHA20_POLY1305`;
export const BCRYPT_KEY_DERIVATION_INTERFACE = 7;
export const BCRYPT_MD2_ALG_HANDLE = 2216203124737;
export const BCRYPT_MD4_ALG_HANDLE = 19808389169169;
export const BCRYPT_MD5_ALG_HANDLE = 37400575213601;
export const BCRYPT_SHA1_ALG_HANDLE = 57191784513585;
export const BCRYPT_SHA256_ALG_HANDLE = 72584947302465;
export const BCRYPT_SHA384_ALG_HANDLE = 102271761252433;
export const BCRYPT_SHA512_ALG_HANDLE = 107769319391329;
export const BCRYPT_RC4_ALG_HANDLE = 125361505435761;
export const BCRYPT_RNG_ALG_HANDLE = 142953691480193;
export const BCRYPT_HMAC_MD5_ALG_HANDLE = 160545877524625;
export const BCRYPT_HMAC_SHA1_ALG_HANDLE = 178138063569057;
export const BCRYPT_HMAC_SHA256_ALG_HANDLE = 195730249613489;
export const BCRYPT_HMAC_SHA384_ALG_HANDLE = 213322435657921;
export const BCRYPT_HMAC_SHA512_ALG_HANDLE = 230914621702353;
export const BCRYPT_RSA_ALG_HANDLE = 248506807746785;
export const BCRYPT_ECDSA_ALG_HANDLE = 266098993791217;
export const BCRYPT_AES_CMAC_ALG_HANDLE = 283691179835649;
export const BCRYPT_AES_GMAC_ALG_HANDLE = 301283365880081;
export const BCRYPT_HMAC_MD2_ALG_HANDLE = 318875551924513;
export const BCRYPT_HMAC_MD4_ALG_HANDLE = 336467737968945;
export const BCRYPT_3DES_CBC_ALG_HANDLE = 354059924013377;
export const BCRYPT_3DES_ECB_ALG_HANDLE = 371652110057809;
export const BCRYPT_3DES_CFB_ALG_HANDLE = 389244296102241;
export const BCRYPT_3DES_112_CBC_ALG_HANDLE = 406836482146673;
export const BCRYPT_3DES_112_ECB_ALG_HANDLE = 424428668191105;
export const BCRYPT_3DES_112_CFB_ALG_HANDLE = 443120365863313;
export const BCRYPT_AES_CBC_ALG_HANDLE = 459613040279969;
export const BCRYPT_AES_ECB_ALG_HANDLE = 477205226324401;
export const BCRYPT_AES_CFB_ALG_HANDLE = 494797412368833;
export const BCRYPT_AES_CCM_ALG_HANDLE = 915910365807057;
export const BCRYPT_AES_GCM_ALG_HANDLE = 529981784457697;
export const BCRYPT_DES_CBC_ALG_HANDLE = 547573970502129;
export const BCRYPT_DES_ECB_ALG_HANDLE = 565166156546561;
export const BCRYPT_DES_CFB_ALG_HANDLE = 582758342590993;
export const BCRYPT_DESX_CBC_ALG_HANDLE = 600350528635425;
export const BCRYPT_DESX_ECB_ALG_HANDLE = 619042226307633;
export const BCRYPT_DESX_CFB_ALG_HANDLE = 635534900724289;
export const BCRYPT_RC2_CBC_ALG_HANDLE = 653127086768721;
export const BCRYPT_RC2_ECB_ALG_HANDLE = 670719272813153;
export const BCRYPT_RC2_CFB_ALG_HANDLE = 688311458857585;
export const BCRYPT_DH_ALG_HANDLE = 705903644902017;
export const BCRYPT_ECDH_ALG_HANDLE = 731192412340881;
export const BCRYPT_ECDH_P256_ALG_HANDLE = 742187528618657;
export const BCRYPT_ECDH_P384_ALG_HANDLE = 758680203035313;
export const BCRYPT_ECDH_P521_ALG_HANDLE = 776272389079745;
export const BCRYPT_DSA_ALG_HANDLE = 793864575124177;
export const BCRYPT_ECDSA_P256_ALG_HANDLE = 811456761168609;
export const BCRYPT_ECDSA_P384_ALG_HANDLE = 829048947213041;
export const BCRYPT_ECDSA_P521_ALG_HANDLE = 846641133257473;
export const BCRYPT_RSA_SIGN_ALG_HANDLE = 864233319301905;
export const BCRYPT_CAPI_KDF_ALG_HANDLE = 881825505346337;
export const BCRYPT_PBKDF2_ALG_HANDLE = 899417691390769;
export const BCRYPT_SP800108_CTR_HMAC_ALG_HANDLE = 951094737896257;
export const BCRYPT_SP80056A_CONCAT_ALG_HANDLE = 1829604528489297;
export const BCRYPT_TLS1_1_KDF_ALG_HANDLE = 968686923940705;
export const BCRYPT_TLS1_2_KDF_ALG_HANDLE = 986279109985137;
export const BCRYPT_XTS_AES_ALG_HANDLE = 8358795549666706305n;
export const BCRYPT_HKDF_ALG_HANDLE = 1004970807657361;
export const BCRYPT_CHACHA20_POLY1305_ALG_HANDLE = 1022562993701793;
export const BCRYPT_CAPI_AES_FLAG = 16;
export const BCRYPT_MULTI_FLAG = 64;
export const BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG = 4;
export const BCRYPT_BUFFERS_LOCKED_FLAG = 64;
export const BCRYPT_EXTENDED_KEYSIZE = 128;
export const BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS = 256;
export const BCRYPT_KEY_DERIVATION_OPERATION = 64;
export const BCRYPT_PUBLIC_KEY_FLAG = 1;
export const BCRYPT_PRIVATE_KEY_FLAG = 2;
export const BCRYPT_NO_KEY_VALIDATION = 8;
export const BCRYPT_KEY_VALIDATION_RANGE = 16;
export const BCRYPT_KEY_VALIDATION_RANGE_AND_ORDER = 24;
export const BCRYPT_KEY_VALIDATION_REGENERATE = 32;
export const BCRYPT_RNG_USE_ENTROPY_IN_BUFFER = 1;
export const BCRYPT_USE_SYSTEM_PREFERRED_RNG = 2;
export const BCRYPT_HASH_INTERFACE_MAJORVERSION_2 = 2;
export const CRYPT_OVERWRITE = 1;
export const CRYPT_PRIORITY_TOP = 0;
export const CRYPT_PRIORITY_BOTTOM = 4294967295;
export const CRYPT_DEFAULT_CONTEXT = `Default`;
export const wszXMLNS_DIGSIG = `http://www.w3.org/2000/09/xmldsig#`;
export const wszXMLNS_DIGSIG_SignatureProperties = `http://www.w3.org/2000/09/xmldsig#SignatureProperties`;
export const wszXMLNS_DIGSIG_Id = `Id`;
export const wszURI_XMLNS_DIGSIG_BASE64 = `http://www.w3.org/2000/09/xmldsig#base64`;
export const wszURI_XMLNS_DIGSIG_SHA1 = `http://www.w3.org/2000/09/xmldsig#sha1`;
export const wszURI_XMLNS_DIGSIG_SHA256 = `http://www.w3.org/2001/04/xmlenc#sha256`;
export const wszURI_XMLNS_DIGSIG_SHA384 = `http://www.w3.org/2001/04/xmldsig-more#sha384`;
export const wszURI_XMLNS_DIGSIG_SHA512 = `http://www.w3.org/2001/04/xmlenc#sha512`;
export const wszURI_XMLNS_DIGSIG_RSA_SHA1 = `http://www.w3.org/2000/09/xmldsig#rsa-sha1`;
export const wszURI_XMLNS_DIGSIG_DSA_SHA1 = `http://www.w3.org/2000/09/xmldsig#dsa-sha1`;
export const wszURI_XMLNS_DIGSIG_RSA_SHA256 = `http://www.w3.org/2001/04/xmldsig-more#rsa-sha256`;
export const wszURI_XMLNS_DIGSIG_RSA_SHA384 = `http://www.w3.org/2001/04/xmldsig-more#rsa-sha384`;
export const wszURI_XMLNS_DIGSIG_RSA_SHA512 = `http://www.w3.org/2001/04/xmldsig-more#rsa-sha512`;
export const wszURI_XMLNS_DIGSIG_ECDSA_SHA1 = `http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1`;
export const wszURI_XMLNS_DIGSIG_ECDSA_SHA256 = `http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256`;
export const wszURI_XMLNS_DIGSIG_ECDSA_SHA384 = `http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384`;
export const wszURI_XMLNS_DIGSIG_ECDSA_SHA512 = `http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512`;
export const wszURI_XMLNS_DIGSIG_HMAC_SHA1 = `http://www.w3.org/2000/09/xmldsig#hmac-sha1`;
export const wszURI_XMLNS_DIGSIG_HMAC_SHA256 = `http://www.w3.org/2001/04/xmldsig-more#hmac-sha256`;
export const wszURI_XMLNS_DIGSIG_HMAC_SHA384 = `http://www.w3.org/2001/04/xmldsig-more#hmac-sha384`;
export const wszURI_XMLNS_DIGSIG_HMAC_SHA512 = `http://www.w3.org/2001/04/xmldsig-more#hmac-sha512`;
export const wszURI_CANONICALIZATION_C14N = `http://www.w3.org/TR/2001/REC-xml-c14n-20010315`;
export const wszURI_CANONICALIZATION_C14NC = `http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments`;
export const wszURI_CANONICALIZATION_EXSLUSIVE_C14N = `http://www.w3.org/2001/10/xml-exc-c14n#`;
export const wszURI_CANONICALIZATION_EXSLUSIVE_C14NC = `http://www.w3.org/2001/10/xml-exc-c14n#WithComments`;
export const wszURI_TRANSFORM_XPATH = `http://www.w3.org/TR/1999/REC-xpath-19991116`;
export const wszURI_XMLNS_TRANSFORM_BASE64 = `http://www.w3.org/2000/09/xmldsig#base64`;
export const wszURI_XMLNS_TRANSFORM_ENVELOPED = `http://www.w3.org/2000/09/xmldsig#enveloped-signature`;
export const CRYPT_XML_BLOB_MAX = 2147483640;
export const CRYPT_XML_ID_MAX = 256;
export const CRYPT_XML_SIGNATURES_MAX = 16;
export const CRYPT_XML_TRANSFORM_MAX = 16;
export const CRYPT_XML_SIGNATURE_VALUE_MAX = 2048;
export const CRYPT_XML_DIGEST_VALUE_MAX = 128;
export const CRYPT_XML_OBJECTS_MAX = 256;
export const CRYPT_XML_REFERENCES_MAX = 32760;
export const CRYPT_XML_E_BASE = 657808139412381952n;
export const CRYPT_XML_E_LARGE = 657809238924009729n;
export const CRYPT_XML_E_TOO_MANY_TRANSFORMS = 657810338435637506n;
export const CRYPT_XML_E_ENCODING = 657811437947265283n;
export const CRYPT_XML_E_ALGORITHM = 657812537458893060n;
export const CRYPT_XML_E_TRANSFORM = 657813636970520837n;
export const CRYPT_XML_E_HANDLE = 657814736482148614n;
export const CRYPT_XML_E_OPERATION = 657815835993776391n;
export const CRYPT_XML_E_UNRESOLVED_REFERENCE = 657816935505404168n;
export const CRYPT_XML_E_INVALID_DIGEST = 657818035017031945n;
export const CRYPT_XML_E_INVALID_SIGNATURE = 657819134528659722n;
export const CRYPT_XML_E_HASH_FAILED = 657820234040287499n;
export const CRYPT_XML_E_SIGN_FAILED = 657821333551915276n;
export const CRYPT_XML_E_VERIFY_FAILED = 657822433063543053n;
export const CRYPT_XML_E_TOO_MANY_SIGNATURES = 657823532575170830n;
export const CRYPT_XML_E_INVALID_KEYVALUE = 657824632086798607n;
export const CRYPT_XML_E_UNEXPECTED_XML = 657825731598426384n;
export const CRYPT_XML_E_SIGNER = 657826831110054161n;
export const CRYPT_XML_E_NON_UNIQUE_ID = 7998470060790849810n;
export const CRYPT_XML_E_LAST = 7998470060790849810n;
export const CRYPT_XML_FLAG_ALWAYS_RETURN_ENCODED_OBJECT = 1073741824;
export const CRYPT_XML_FLAG_ENFORCE_ID_NCNAME_FORMAT = 536870912;
export const CRYPT_XML_FLAG_ENFORCE_ID_NAME_FORMAT = 134217728;
export const CRYPT_XML_FLAG_ECDSA_DSIG11 = 67108864;
export const CRYPT_XML_STATUS_NO_ERROR = 0;
export const CRYPT_XML_FLAG_ADD_OBJECT_CREATE_COPY = 1;
export const CRYPT_XML_FLAG_CREATE_REFERENCE_AS_OBJECT = 1;
export const CRYPT_XML_DIGEST_REFERENCE_DATA_TRANSFORMED = 1;
export const CRYPT_XML_ALGORITHM_INFO_FIND_BY_URI = 1;
export const CRYPT_XML_ALGORITHM_INFO_FIND_BY_NAME = 2;
export const CRYPT_XML_ALGORITHM_INFO_FIND_BY_CNG_ALGID = 3;
export const CRYPT_XML_ALGORITHM_INFO_FIND_BY_CNG_SIGN_ALGID = 4;
export const szFORCE_KEY_PROTECTION = `ForceKeyProtection`;
export const dwFORCE_KEY_PROTECTION_DISABLED = 0;
export const dwFORCE_KEY_PROTECTION_USER_SELECT = 1;
export const dwFORCE_KEY_PROTECTION_HIGH = 2;
export const CRYPTPROTECT_PROMPT_ON_UNPROTECT = 1;
export const CRYPTPROTECT_PROMPT_ON_PROTECT = 2;
export const CRYPTPROTECT_PROMPT_RESERVED = 4;
export const CRYPTPROTECT_PROMPT_STRONG = 8;
export const CRYPTPROTECT_PROMPT_REQUIRE_STRONG = 16;
export const CRYPTPROTECT_UI_FORBIDDEN = 1;
export const CRYPTPROTECT_LOCAL_MACHINE = 4;
export const CRYPTPROTECT_CRED_SYNC = 8;
export const CRYPTPROTECT_AUDIT = 16;
export const CRYPTPROTECT_NO_RECOVERY = 32;
export const CRYPTPROTECT_VERIFY_PROTECTION = 64;
export const CRYPTPROTECT_CRED_REGENERATE = 128;
export const CRYPTPROTECT_FIRST_RESERVED_FLAGVAL = 268435455;
export const CRYPTPROTECT_LAST_RESERVED_FLAGVAL = 4294967295;
export const CRYPTPROTECTMEMORY_BLOCK_SIZE = 16;
export const CRYPTPROTECTMEMORY_SAME_PROCESS = 0;
export const CRYPTPROTECTMEMORY_CROSS_PROCESS = 1;
export const CRYPTPROTECTMEMORY_SAME_LOGON = 2;
export const NCRYPT_MAX_KEY_NAME_LENGTH = 512;
export const NCRYPT_MAX_ALG_ID_LENGTH = 512;
export const MS_KEY_STORAGE_PROVIDER = `Microsoft Software Key Storage Provider`;
export const MS_SMART_CARD_KEY_STORAGE_PROVIDER = `Microsoft Smart Card Key Storage Provider`;
export const MS_PLATFORM_KEY_STORAGE_PROVIDER = `Microsoft Platform Crypto Provider`;
export const MS_NGC_KEY_STORAGE_PROVIDER = `Microsoft Passport Key Storage Provider`;
export const TPM_RSA_SRK_SEAL_KEY = `MICROSOFT_PCP_KSP_RSA_SEAL_KEY_3BD1C4BF-004E-4E2F-8A4D-0BF633DCB074`;
export const NCRYPT_RSA_ALGORITHM = `RSA`;
export const NCRYPT_RSA_SIGN_ALGORITHM = `RSA_SIGN`;
export const NCRYPT_DH_ALGORITHM = `DH`;
export const NCRYPT_DSA_ALGORITHM = `DSA`;
export const NCRYPT_MD2_ALGORITHM = `MD2`;
export const NCRYPT_MD4_ALGORITHM = `MD4`;
export const NCRYPT_MD5_ALGORITHM = `MD5`;
export const NCRYPT_SHA1_ALGORITHM = `SHA1`;
export const NCRYPT_SHA256_ALGORITHM = `SHA256`;
export const NCRYPT_SHA384_ALGORITHM = `SHA384`;
export const NCRYPT_SHA512_ALGORITHM = `SHA512`;
export const NCRYPT_ECDSA_P256_ALGORITHM = `ECDSA_P256`;
export const NCRYPT_ECDSA_P384_ALGORITHM = `ECDSA_P384`;
export const NCRYPT_ECDSA_P521_ALGORITHM = `ECDSA_P521`;
export const NCRYPT_ECDH_P256_ALGORITHM = `ECDH_P256`;
export const NCRYPT_ECDH_P384_ALGORITHM = `ECDH_P384`;
export const NCRYPT_ECDH_P521_ALGORITHM = `ECDH_P521`;
export const NCRYPT_AES_ALGORITHM = `AES`;
export const NCRYPT_RC2_ALGORITHM = `RC2`;
export const NCRYPT_3DES_ALGORITHM = `3DES`;
export const NCRYPT_DES_ALGORITHM = `DES`;
export const NCRYPT_DESX_ALGORITHM = `DESX`;
export const NCRYPT_3DES_112_ALGORITHM = `3DES_112`;
export const NCRYPT_SP800108_CTR_HMAC_ALGORITHM = `SP800_108_CTR_HMAC`;
export const NCRYPT_SP80056A_CONCAT_ALGORITHM = `SP800_56A_CONCAT`;
export const NCRYPT_PBKDF2_ALGORITHM = `PBKDF2`;
export const NCRYPT_CAPI_KDF_ALGORITHM = `CAPI_KDF`;
export const NCRYPT_ECDSA_ALGORITHM = `ECDSA`;
export const NCRYPT_ECDH_ALGORITHM = `ECDH`;
export const NCRYPT_KEY_STORAGE_ALGORITHM = `KEY_STORAGE`;
export const NCRYPT_HMAC_SHA256_ALGORITHM = `HMAC-SHA256`;
export const NCRYPT_KEY_DERIVATION_INTERFACE = 7;
export const NCRYPT_KEY_PROTECTION_INTERFACE = 65540;
export const NCRYPT_RSA_ALGORITHM_GROUP = `RSA`;
export const NCRYPT_DH_ALGORITHM_GROUP = `DH`;
export const NCRYPT_DSA_ALGORITHM_GROUP = `DSA`;
export const NCRYPT_ECDSA_ALGORITHM_GROUP = `ECDSA`;
export const NCRYPT_ECDH_ALGORITHM_GROUP = `ECDH`;
export const NCRYPT_AES_ALGORITHM_GROUP = `AES`;
export const NCRYPT_RC2_ALGORITHM_GROUP = `RC2`;
export const NCRYPT_DES_ALGORITHM_GROUP = `DES`;
export const NCRYPT_KEY_DERIVATION_GROUP = `KEY_DERIVATION`;
export const NCRYPTBUFFER_VERSION = 0;
export const NCRYPTBUFFER_EMPTY = 0;
export const NCRYPTBUFFER_DATA = 1;
export const NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING = 3;
export const NCRYPTBUFFER_PROTECTION_FLAGS = 4;
export const NCRYPTBUFFER_SSL_CLIENT_RANDOM = 20;
export const NCRYPTBUFFER_SSL_SERVER_RANDOM = 21;
export const NCRYPTBUFFER_SSL_HIGHEST_VERSION = 22;
export const NCRYPTBUFFER_SSL_CLEAR_KEY = 23;
export const NCRYPTBUFFER_SSL_KEY_ARG_DATA = 24;
export const NCRYPTBUFFER_SSL_SESSION_HASH = 25;
export const NCRYPTBUFFER_PKCS_OID = 40;
export const NCRYPTBUFFER_PKCS_ALG_OID = 41;
export const NCRYPTBUFFER_PKCS_ALG_PARAM = 42;
export const NCRYPTBUFFER_PKCS_ALG_ID = 43;
export const NCRYPTBUFFER_PKCS_ATTRS = 44;
export const NCRYPTBUFFER_PKCS_KEY_NAME = 45;
export const NCRYPTBUFFER_PKCS_SECRET = 46;
export const NCRYPTBUFFER_CERT_BLOB = 47;
export const NCRYPTBUFFER_CLAIM_IDBINDING_NONCE = 48;
export const NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE = 49;
export const NCRYPTBUFFER_KEY_PROPERTY_FLAGS = 50;
export const NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB = 51;
export const NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE = 52;
export const NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED = 53;
export const NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = 54;
export const NCRYPTBUFFER_ECC_CURVE_NAME = 60;
export const NCRYPTBUFFER_ECC_PARAMETERS = 61;
export const NCRYPTBUFFER_TPM_SEAL_PASSWORD = 70;
export const NCRYPTBUFFER_TPM_SEAL_POLICYINFO = 71;
export const NCRYPTBUFFER_TPM_SEAL_TICKET = 72;
export const NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION = 73;
export const NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK = 80;
export const NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE = 81;
export const NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE = 82;
export const NCRYPT_CIPHER_NO_PADDING_FLAG = 0;
export const NCRYPT_CIPHER_BLOCK_PADDING_FLAG = 1;
export const NCRYPT_CIPHER_OTHER_PADDING_FLAG = 2;
export const NCRYPT_PLATFORM_ATTEST_MAGIC = 1146110288;
export const NCRYPT_KEY_ATTEST_MAGIC = 1146110283;
export const NCRYPT_CLAIM_AUTHORITY_ONLY = 1;
export const NCRYPT_CLAIM_SUBJECT_ONLY = 2;
export const NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY = 258;
export const NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = 3;
export const NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT = 4;
export const NCRYPT_CLAIM_UNKNOWN = 4096;
export const NCRYPT_CLAIM_PLATFORM = 65536;
export const NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION = 1;
export const NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY = 2;
export const NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0 = 0;
export const NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_CURRENT_VERSION = 0;
export const NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0 = 0;
export const NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_CURRENT_VERSION = 0;
export const NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0 = 0;
export const NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_CURRENT_VERSION = 0;
export const NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0 = 0;
export const NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_CURRENT_VERSION = 0;
export const NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0 = 0;
export const NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_CURRENT_VERSION = 0;
export const NCRYPT_PAD_CIPHER_FLAG = 16;
export const NCRYPT_ATTESTATION_FLAG = 32;
export const NCRYPT_SEALING_FLAG = 256;
export const NCRYPT_DO_NOT_FINALIZE_FLAG = 1024;
export const NCRYPT_EXPORT_LEGACY_FLAG = 2048;
export const NCRYPT_IGNORE_DEVICE_STATE_FLAG = 4096;
export const NCRYPT_TREAT_NIST_AS_GENERIC_ECC_FLAG = 8192;
export const NCRYPT_NO_CACHED_PASSWORD = 16384;
export const NCRYPT_PROTECT_TO_LOCAL_SYSTEM = 32768;
export const NCRYPT_PREFER_VIRTUAL_ISOLATION_FLAG = 65536;
export const NCRYPT_USE_VIRTUAL_ISOLATION_FLAG = 131072;
export const NCRYPT_USE_PER_BOOT_KEY_FLAG = 262144;
export const NCRYPT_KEY_DERIVATION_OPERATION = 64;
export const NCRYPT_AUTHORITY_KEY_FLAG = 256;
export const NCRYPT_NAME_PROPERTY = `Name`;
export const NCRYPT_UNIQUE_NAME_PROPERTY = `Unique Name`;
export const NCRYPT_ALGORITHM_PROPERTY = `Algorithm Name`;
export const NCRYPT_LENGTH_PROPERTY = `Length`;
export const NCRYPT_LENGTHS_PROPERTY = `Lengths`;
export const NCRYPT_BLOCK_LENGTH_PROPERTY = `Block Length`;
export const NCRYPT_PUBLIC_LENGTH_PROPERTY = `PublicKeyLength`;
export const NCRYPT_SIGNATURE_LENGTH_PROPERTY = `SignatureLength`;
export const NCRYPT_CHAINING_MODE_PROPERTY = `Chaining Mode`;
export const NCRYPT_AUTH_TAG_LENGTH = `AuthTagLength`;
export const NCRYPT_UI_POLICY_PROPERTY = `UI Policy`;
export const NCRYPT_EXPORT_POLICY_PROPERTY = `Export Policy`;
export const NCRYPT_WINDOW_HANDLE_PROPERTY = `HWND Handle`;
export const NCRYPT_USE_CONTEXT_PROPERTY = `Use Context`;
export const NCRYPT_IMPL_TYPE_PROPERTY = `Impl Type`;
export const NCRYPT_KEY_USAGE_PROPERTY = `Key Usage`;
export const NCRYPT_KEY_TYPE_PROPERTY = `Key Type`;
export const NCRYPT_VERSION_PROPERTY = `Version`;
export const NCRYPT_SECURITY_DESCR_SUPPORT_PROPERTY = `Security Descr Support`;
export const NCRYPT_SECURITY_DESCR_PROPERTY = `Security Descr`;
export const NCRYPT_USE_COUNT_ENABLED_PROPERTY = `Enabled Use Count`;
export const NCRYPT_USE_COUNT_PROPERTY = `Use Count`;
export const NCRYPT_LAST_MODIFIED_PROPERTY = `Modified`;
export const NCRYPT_MAX_NAME_LENGTH_PROPERTY = `Max Name Length`;
export const NCRYPT_ALGORITHM_GROUP_PROPERTY = `Algorithm Group`;
export const NCRYPT_DH_PARAMETERS_PROPERTY = `DHParameters`;
export const NCRYPT_ECC_PARAMETERS_PROPERTY = `ECCParameters`;
export const NCRYPT_ECC_CURVE_NAME_PROPERTY = `ECCCurveName`;
export const NCRYPT_ECC_CURVE_NAME_LIST_PROPERTY = `ECCCurveNameList`;
export const NCRYPT_USE_VIRTUAL_ISOLATION_PROPERTY = `Virtual Iso`;
export const NCRYPT_USE_PER_BOOT_KEY_PROPERTY = `Per Boot Key`;
export const NCRYPT_PROVIDER_HANDLE_PROPERTY = `Provider Handle`;
export const NCRYPT_PIN_PROPERTY = `SmartCardPin`;
export const NCRYPT_READER_PROPERTY = `SmartCardReader`;
export const NCRYPT_SMARTCARD_GUID_PROPERTY = `SmartCardGuid`;
export const NCRYPT_CERTIFICATE_PROPERTY = `SmartCardKeyCertificate`;
export const NCRYPT_PIN_PROMPT_PROPERTY = `SmartCardPinPrompt`;
export const NCRYPT_USER_CERTSTORE_PROPERTY = `SmartCardUserCertStore`;
export const NCRYPT_ROOT_CERTSTORE_PROPERTY = `SmartcardRootCertStore`;
export const NCRYPT_SECURE_PIN_PROPERTY = `SmartCardSecurePin`;
export const NCRYPT_ASSOCIATED_ECDH_KEY = `SmartCardAssociatedECDHKey`;
export const NCRYPT_SCARD_PIN_ID = `SmartCardPinId`;
export const NCRYPT_SCARD_PIN_INFO = `SmartCardPinInfo`;
export const NCRYPT_READER_ICON_PROPERTY = `SmartCardReaderIcon`;
export const NCRYPT_KDF_SECRET_VALUE = `KDFKeySecret`;
export const NCRYPT_DISMISS_UI_TIMEOUT_SEC_PROPERTY = `SmartCardDismissUITimeoutSeconds`;
export const NCRYPT_PCP_PLATFORM_TYPE_PROPERTY = `PCP_PLATFORM_TYPE`;
export const NCRYPT_PCP_PROVIDER_VERSION_PROPERTY = `PCP_PROVIDER_VERSION`;
export const NCRYPT_PCP_EKPUB_PROPERTY = `PCP_EKPUB`;
export const NCRYPT_PCP_EKCERT_PROPERTY = `PCP_EKCERT`;
export const NCRYPT_PCP_EKNVCERT_PROPERTY = `PCP_EKNVCERT`;
export const NCRYPT_PCP_RSA_EKPUB_PROPERTY = `PCP_RSA_EKPUB`;
export const NCRYPT_PCP_RSA_EKCERT_PROPERTY = `PCP_RSA_EKCERT`;
export const NCRYPT_PCP_RSA_EKNVCERT_PROPERTY = `PCP_RSA_EKNVCERT`;
export const NCRYPT_PCP_ECC_EKPUB_PROPERTY = `PCP_ECC_EKPUB`;
export const NCRYPT_PCP_ECC_EKCERT_PROPERTY = `PCP_ECC_EKCERT`;
export const NCRYPT_PCP_ECC_EKNVCERT_PROPERTY = `PCP_ECC_EKNVCERT`;
export const NCRYPT_PCP_SRKPUB_PROPERTY = `PCP_SRKPUB`;
export const NCRYPT_PCP_PCRTABLE_PROPERTY = `PCP_PCRTABLE`;
export const NCRYPT_PCP_CHANGEPASSWORD_PROPERTY = `PCP_CHANGEPASSWORD`;
export const NCRYPT_PCP_PASSWORD_REQUIRED_PROPERTY = `PCP_PASSWORD_REQUIRED`;
export const NCRYPT_PCP_USAGEAUTH_PROPERTY = `PCP_USAGEAUTH`;
export const NCRYPT_PCP_MIGRATIONPASSWORD_PROPERTY = `PCP_MIGRATIONPASSWORD`;
export const NCRYPT_PCP_EXPORT_ALLOWED_PROPERTY = `PCP_EXPORT_ALLOWED`;
export const NCRYPT_PCP_STORAGEPARENT_PROPERTY = `PCP_STORAGEPARENT`;
export const NCRYPT_PCP_PROVIDERHANDLE_PROPERTY = `PCP_PROVIDERMHANDLE`;
export const NCRYPT_PCP_PLATFORMHANDLE_PROPERTY = `PCP_PLATFORMHANDLE`;
export const NCRYPT_PCP_PLATFORM_BINDING_PCRMASK_PROPERTY = `PCP_PLATFORM_BINDING_PCRMASK`;
export const NCRYPT_PCP_PLATFORM_BINDING_PCRDIGESTLIST_PROPERTY = `PCP_PLATFORM_BINDING_PCRDIGESTLIST`;
export const NCRYPT_PCP_PLATFORM_BINDING_PCRDIGEST_PROPERTY = `PCP_PLATFORM_BINDING_PCRDIGEST`;
export const NCRYPT_PCP_KEY_USAGE_POLICY_PROPERTY = `PCP_KEY_USAGE_POLICY`;
export const NCRYPT_PCP_RSA_SCHEME_PROPERTY = `PCP_RSA_SCHEME`;
export const NCRYPT_PCP_TPM12_IDBINDING_PROPERTY = `PCP_TPM12_IDBINDING`;
export const NCRYPT_PCP_TPM12_IDBINDING_DYNAMIC_PROPERTY = `PCP_TPM12_IDBINDING_DYNAMIC`;
export const NCRYPT_PCP_TPM12_IDACTIVATION_PROPERTY = `PCP_TPM12_IDACTIVATION`;
export const NCRYPT_PCP_KEYATTESTATION_PROPERTY = `PCP_TPM12_KEYATTESTATION`;
export const NCRYPT_PCP_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY = `PCP_ALTERNATE_KEY_STORAGE_LOCATION`;
export const NCRYPT_PCP_PLATFORM_BINDING_PCRALGID_PROPERTY = `PCP_PLATFORM_BINDING_PCRALGID`;
export const NCRYPT_PCP_HMAC_AUTH_POLICYREF = `PCP_HMAC_AUTH_POLICYREF`;
export const NCRYPT_PCP_HMAC_AUTH_POLICYINFO = `PCP_HMAC_AUTH_POLICYINFO`;
export const NCRYPT_PCP_HMAC_AUTH_NONCE = `PCP_HMAC_AUTH_NONCE`;
export const NCRYPT_PCP_HMAC_AUTH_SIGNATURE = `PCP_HMAC_AUTH_SIGNATURE`;
export const NCRYPT_PCP_HMAC_AUTH_TICKET = `PCP_HMAC_AUTH_TICKET`;
export const NCRYPT_PCP_NO_DA_PROTECTION_PROPERTY = `PCP_NO_DA_PROTECTION`;
export const NCRYPT_PCP_TPM_MANUFACTURER_ID_PROPERTY = `PCP_TPM_MANUFACTURER_ID`;
export const NCRYPT_PCP_TPM_FW_VERSION_PROPERTY = `PCP_TPM_FW_VERSION`;
export const NCRYPT_PCP_TPM2BNAME_PROPERTY = `PCP_TPM2BNAME`;
export const NCRYPT_PCP_TPM_VERSION_PROPERTY = `PCP_TPM_VERSION`;
export const NCRYPT_PCP_RAW_POLICYDIGEST_PROPERTY = `PCP_RAW_POLICYDIGEST`;
export const NCRYPT_PCP_KEY_CREATIONHASH_PROPERTY = `PCP_KEY_CREATIONHASH`;
export const NCRYPT_PCP_KEY_CREATIONTICKET_PROPERTY = `PCP_KEY_CREATIONTICKET`;
export const NCRYPT_PCP_RSA_SCHEME_HASH_ALG_PROPERTY = `PCP_RSA_SCHEME_HASH_ALG`;
export const NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_PROHIBITED_PROPERTY = `PCP_TPM_IFX_RSA_KEYGEN_PROHIBITED`;
export const NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY_PROPERTY = `PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY`;
export const IFX_RSA_KEYGEN_VUL_NOT_AFFECTED = 0;
export const IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_1 = 1;
export const IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_2 = 2;
export const NCRYPT_PCP_SESSIONID_PROPERTY = `PCP_SESSIONID`;
export const NCRYPT_PCP_PSS_SALT_SIZE_PROPERTY = `PSS Salt Size`;
export const NCRYPT_TPM_PSS_SALT_SIZE_UNKNOWN = 0;
export const NCRYPT_TPM_PSS_SALT_SIZE_MAXIMUM = 1;
export const NCRYPT_TPM_PSS_SALT_SIZE_HASHSIZE = 2;
export const NCRYPT_PCP_INTERMEDIATE_CA_EKCERT_PROPERTY = `PCP_INTERMEDIATE_CA_EKCERT`;
export const NCRYPT_PCP_PCRTABLE_ALGORITHM_PROPERTY = `PCP_PCRTABLE_ALGORITHM`;
export const NCRYPT_PCP_SYMMETRIC_KEYBITS_PROPERTY = `PCP_SYMMETRIC_KEYBITS`;
export const NCRYPT_TPM_PAD_PSS_IGNORE_SALT = 32;
export const NCRYPT_TPM12_PROVIDER = 65536;
export const NCRYPT_PCP_SIGNATURE_KEY = 1;
export const NCRYPT_PCP_ENCRYPTION_KEY = 2;
export const NCRYPT_PCP_STORAGE_KEY = 4;
export const NCRYPT_PCP_IDENTITY_KEY = 8;
export const NCRYPT_PCP_HMACVERIFICATION_KEY = 16;
export const NCRYPT_SCARD_NGC_KEY_NAME = `SmartCardNgcKeyName`;
export const NCRYPT_INITIALIZATION_VECTOR = `IV`;
export const NCRYPT_CHANGEPASSWORD_PROPERTY = `PCP_CHANGEPASSWORD`;
export const NCRYPT_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY = `PCP_ALTERNATE_KEY_STORAGE_LOCATION`;
export const NCRYPT_KEY_ACCESS_POLICY_PROPERTY = `Key Access Policy`;
export const NCRYPT_MAX_PROPERTY_NAME = 64;
export const NCRYPT_MAX_PROPERTY_DATA = 1048576;
export const NCRYPT_ALLOW_EXPORT_FLAG = 1;
export const NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = 2;
export const NCRYPT_ALLOW_ARCHIVING_FLAG = 4;
export const NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = 8;
export const NCRYPT_IMPL_HARDWARE_FLAG = 1;
export const NCRYPT_IMPL_SOFTWARE_FLAG = 2;
export const NCRYPT_IMPL_REMOVABLE_FLAG = 8;
export const NCRYPT_IMPL_HARDWARE_RNG_FLAG = 16;
export const NCRYPT_IMPL_VIRTUAL_ISOLATION_FLAG = 32;
export const NCRYPT_ALLOW_DECRYPT_FLAG = 1;
export const NCRYPT_ALLOW_SIGNING_FLAG = 2;
export const NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = 4;
export const NCRYPT_ALLOW_KEY_IMPORT_FLAG = 8;
export const NCRYPT_ALLOW_ALL_USAGES = 16777215;
export const NCRYPT_UI_PROTECT_KEY_FLAG = 1;
export const NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = 2;
export const NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = 4;
export const NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = 8;
export const NCRYPT_PIN_CACHE_FREE_APPLICATION_TICKET_PROPERTY = `PinCacheFreeApplicationTicket`;
export const NCRYPT_PIN_CACHE_FLAGS_PROPERTY = `PinCacheFlags`;
export const NCRYPT_PIN_CACHE_DISABLE_DPL_FLAG = 1;
export const NCRYPT_PIN_CACHE_APPLICATION_TICKET_PROPERTY = `PinCacheApplicationTicket`;
export const NCRYPT_PIN_CACHE_APPLICATION_IMAGE_PROPERTY = `PinCacheApplicationImage`;
export const NCRYPT_PIN_CACHE_APPLICATION_STATUS_PROPERTY = `PinCacheApplicationStatus`;
export const NCRYPT_PIN_CACHE_PIN_PROPERTY = `PinCachePin`;
export const NCRYPT_PIN_CACHE_IS_GESTURE_REQUIRED_PROPERTY = `PinCacheIsGestureRequired`;
export const NCRYPT_PIN_CACHE_REQUIRE_GESTURE_FLAG = 1;
export const NCRYPT_PIN_CACHE_APPLICATION_TICKET_BYTE_LENGTH = 90;
export const NCRYPT_PIN_CACHE_CLEAR_PROPERTY = `PinCacheClear`;
export const NCRYPT_PIN_CACHE_CLEAR_FOR_CALLING_PROCESS_OPTION = 1;
export const NCRYPT_KEY_ACCESS_POLICY_VERSION = 1;
export const NCRYPT_ALLOW_SILENT_KEY_ACCESS = 1;
export const NCRYPT_CIPHER_KEY_BLOB_MAGIC = 1380470851;
export const NCRYPT_KDF_KEY_BLOB_MAGIC = 826688587;
export const NCRYPT_PROTECTED_KEY_BLOB_MAGIC = 1263817296;
export const NCRYPT_CIPHER_KEY_BLOB = `CipherKeyBlob`;
export const NCRYPT_KDF_KEY_BLOB = `KDFKeyBlob`;
export const NCRYPT_PROTECTED_KEY_BLOB = `ProtectedKeyBlob`;
export const NCRYPT_TPM_LOADABLE_KEY_BLOB = `PcpTpmProtectedKeyBlob`;
export const NCRYPT_TPM_LOADABLE_KEY_BLOB_MAGIC = 1297371211;
export const NCRYPT_PKCS7_ENVELOPE_BLOB = `PKCS7_ENVELOPE`;
export const NCRYPT_PKCS8_PRIVATE_KEY_BLOB = `PKCS8_PRIVATEKEY`;
export const NCRYPT_OPAQUETRANSPORT_BLOB = `OpaqueTransport`;
export const NCRYPT_ISOLATED_KEY_ENVELOPE_BLOB = `ISOLATED_KEY_ENVELOPE`;
export const NCRYPT_DESCR_DELIMITER_OR = `OR`;
export const NCRYPT_DESCR_DELIMITER_AND = `AND`;
export const NCRYPT_DESCR_EQUAL = `=`;
export const MS_KEY_PROTECTION_PROVIDER = `Microsoft Key Protection Provider`;
export const NCRYPT_KEY_PROTECTION_ALGORITHM_SID = `SID`;
export const NCRYPT_KEY_PROTECTION_ALGORITHM_LOCAL = `LOCAL`;
export const NCRYPT_KEY_PROTECTION_LOCAL_LOGON = `logon`;
export const NCRYPT_KEY_PROTECTION_LOCAL_USER = `user`;
export const NCRYPT_KEY_PROTECTION_LOCAL_MACHINE = `machine`;
export const NCRYPT_KEY_PROTECTION_ALGORITHM_SDDL = `SDDL`;
export const NCRYPT_KEY_PROTECTION_ALGORITHM_WEBCREDENTIALS = `WEBCREDENTIALS`;
export const NCRYPT_KEY_PROTECTION_ALGORITHM_LOCKEDCREDENTIALS = `LOCKEDCREDENTIALS`;
export const NCRYPT_KEY_PROTECTION_ALGORITHM_CERTIFICATE = `CERTIFICATE`;
export const NCRYPT_KEY_PROTECTION_CERT_HASHID = `HashId`;
export const NCRYPT_KEY_PROTECTION_CERT_CERTBLOB = `CertBlob`;
export const NCRYPT_NAMED_DESCRIPTOR_FLAG = 1;
export const NCRYPT_PROTECTION_INFO_TYPE_DESCRIPTOR_STRING = 1;
export const ALG_CLASS_ANY = 0;
export const ALG_CLASS_SIGNATURE = 8192;
export const ALG_CLASS_MSG_ENCRYPT = 16384;
export const ALG_CLASS_DATA_ENCRYPT = 24576;
export const ALG_CLASS_HASH = 32768;
export const ALG_CLASS_KEY_EXCHANGE = 40960;
export const ALG_CLASS_ALL = 57344;
export const ALG_TYPE_ANY = 0;
export const ALG_TYPE_DSS = 512;
export const ALG_TYPE_RSA = 1024;
export const ALG_TYPE_BLOCK = 1536;
export const ALG_TYPE_STREAM = 2048;
export const ALG_TYPE_DH = 2560;
export const ALG_TYPE_SECURECHANNEL = 3072;
export const ALG_TYPE_ECDH = 3584;
export const ALG_TYPE_THIRDPARTY = 4096;
export const ALG_SID_ANY = 0;
export const ALG_SID_THIRDPARTY_ANY = 0;
export const ALG_SID_RSA_ANY = 0;
export const ALG_SID_RSA_PKCS = 1;
export const ALG_SID_RSA_MSATWORK = 2;
export const ALG_SID_RSA_ENTRUST = 3;
export const ALG_SID_RSA_PGP = 4;
export const ALG_SID_DSS_ANY = 0;
export const ALG_SID_DSS_PKCS = 1;
export const ALG_SID_DSS_DMS = 2;
export const ALG_SID_ECDSA = 3;
export const ALG_SID_DES = 1;
export const ALG_SID_3DES = 3;
export const ALG_SID_DESX = 4;
export const ALG_SID_IDEA = 5;
export const ALG_SID_CAST = 6;
export const ALG_SID_SAFERSK64 = 7;
export const ALG_SID_SAFERSK128 = 8;
export const ALG_SID_3DES_112 = 9;
export const ALG_SID_CYLINK_MEK = 12;
export const ALG_SID_RC5 = 13;
export const ALG_SID_AES_128 = 14;
export const ALG_SID_AES_192 = 15;
export const ALG_SID_AES_256 = 16;
export const ALG_SID_AES = 17;
export const ALG_SID_SKIPJACK = 10;
export const ALG_SID_TEK = 11;
export const CRYPT_MODE_CBCI = 6;
export const CRYPT_MODE_CFBP = 7;
export const CRYPT_MODE_OFBP = 8;
export const CRYPT_MODE_CBCOFM = 9;
export const CRYPT_MODE_CBCOFMI = 10;
export const ALG_SID_RC2 = 2;
export const ALG_SID_RC4 = 1;
export const ALG_SID_SEAL = 2;
export const ALG_SID_DH_SANDF = 1;
export const ALG_SID_DH_EPHEM = 2;
export const ALG_SID_AGREED_KEY_ANY = 3;
export const ALG_SID_KEA = 4;
export const ALG_SID_ECDH = 5;
export const ALG_SID_ECDH_EPHEM = 6;
export const ALG_SID_MD2 = 1;
export const ALG_SID_MD4 = 2;
export const ALG_SID_MD5 = 3;
export const ALG_SID_SHA = 4;
export const ALG_SID_SHA1 = 4;
export const ALG_SID_MAC = 5;
export const ALG_SID_RIPEMD = 6;
export const ALG_SID_RIPEMD160 = 7;
export const ALG_SID_SSL3SHAMD5 = 8;
export const ALG_SID_HMAC = 9;
export const ALG_SID_TLS1PRF = 10;
export const ALG_SID_HASH_REPLACE_OWF = 11;
export const ALG_SID_SHA_256 = 12;
export const ALG_SID_SHA_384 = 13;
export const ALG_SID_SHA_512 = 14;
export const ALG_SID_SSL3_MASTER = 1;
export const ALG_SID_SCHANNEL_MASTER_HASH = 2;
export const ALG_SID_SCHANNEL_MAC_KEY = 3;
export const ALG_SID_PCT1_MASTER = 4;
export const ALG_SID_SSL2_MASTER = 5;
export const ALG_SID_TLS1_MASTER = 6;
export const ALG_SID_SCHANNEL_ENC_KEY = 7;
export const ALG_SID_ECMQV = 1;
export const ALG_SID_EXAMPLE = 80;
export const SIGNATURE_RESOURCE_NUMBER = 666;
export const CRYPT_VERIFYCONTEXT = 4026531840;
export const CRYPT_NEWKEYSET = 8;
export const CRYPT_DELETEKEYSET = 16;
export const CRYPT_SILENT = 64;
export const CRYPT_DEFAULT_CONTAINER_OPTIONAL = 128;
export const CRYPT_UPDATE_KEY = 8;
export const CRYPT_USER_PROTECTED_STRONG = 1048576;
export const RSA1024BIT_KEY = 67108864;
export const CRYPT_SERVER = 1024;
export const KEY_LENGTH_MASK = 4294901760;
export const CRYPT_DECRYPT_RSA_NO_PADDING_CHECK = 32;
export const CRYPT_SECRETDIGEST = 1;
export const CRYPT_OWF_REPL_LM_HASH = 1;
export const CRYPT_LITTLE_ENDIAN = 1;
export const CRYPT_NOHASHOID = 1;
export const CRYPT_TYPE2_FORMAT = 2;
export const CRYPT_X931_FORMAT = 4;
export const CRYPT_MACHINE_DEFAULT = 1;
export const CRYPT_USER_DEFAULT = 2;
export const CRYPT_DELETE_DEFAULT = 4;
export const SIMPLEBLOB = 1;
export const PUBLICKEYBLOB = 6;
export const PRIVATEKEYBLOB = 7;
export const PLAINTEXTKEYBLOB = 8;
export const OPAQUEKEYBLOB = 9;
export const PUBLICKEYBLOBEX = 10;
export const SYMMETRICWRAPKEYBLOB = 11;
export const KEYSTATEBLOB = 12;
export const CRYPT_USERDATA = 1;
export const KP_IV = 1;
export const KP_PADDING = 3;
export const KP_MODE = 4;
export const KP_MODE_BITS = 5;
export const KP_P = 11;
export const KP_G = 12;
export const KP_Q = 13;
export const KP_X = 14;
export const KP_Y = 15;
export const KP_RA = 16;
export const KP_RB = 17;
export const KP_INFO = 18;
export const KP_EFFECTIVE_KEYLEN = 19;
export const KP_SCHANNEL_ALG = 20;
export const KP_CLIENT_RANDOM = 21;
export const KP_SERVER_RANDOM = 22;
export const KP_RP = 23;
export const KP_PRECOMP_MD5 = 24;
export const KP_PRECOMP_SHA = 25;
export const KP_CLEAR_KEY = 27;
export const KP_PUB_EX_LEN = 28;
export const KP_PUB_EX_VAL = 29;
export const KP_KEYVAL = 30;
export const KP_ADMIN_PIN = 31;
export const KP_KEYEXCHANGE_PIN = 32;
export const KP_SIGNATURE_PIN = 33;
export const KP_PREHASH = 34;
export const KP_ROUNDS = 35;
export const KP_OAEP_PARAMS = 36;
export const KP_CMS_KEY_INFO = 37;
export const KP_CMS_DH_KEY_INFO = 38;
export const KP_PUB_PARAMS = 39;
export const KP_VERIFY_PARAMS = 40;
export const KP_HIGHEST_VERSION = 41;
export const KP_PIN_ID = 43;
export const KP_PIN_INFO = 44;
export const PKCS5_PADDING = 1;
export const RANDOM_PADDING = 2;
export const ZERO_PADDING = 3;
export const CRYPT_MODE_CBC = 1;
export const CRYPT_MODE_ECB = 2;
export const CRYPT_MODE_OFB = 3;
export const CRYPT_MODE_CFB = 4;
export const CRYPT_MODE_CTS = 5;
export const CRYPT_ENCRYPT = 1;
export const CRYPT_DECRYPT = 2;
export const CRYPT_EXPORT = 4;
export const CRYPT_READ = 8;
export const CRYPT_WRITE = 16;
export const CRYPT_MAC = 32;
export const CRYPT_EXPORT_KEY = 64;
export const CRYPT_IMPORT_KEY = 128;
export const CRYPT_ARCHIVE = 256;
export const HP_ALGID = 1;
export const HP_HASHSIZE = 4;
export const HP_TLS1PRF_LABEL = 6;
export const HP_TLS1PRF_SEED = 7;
export const CRYPT_FAILED = 0;
export const CRYPT_SUCCEED = 1;
export const PP_ENUMALGS = 1;
export const PP_ENUMCONTAINERS = 2;
export const PP_IMPTYPE = 3;
export const PP_NAME = 4;
export const PP_VERSION = 5;
export const PP_CONTAINER = 6;
export const PP_CHANGE_PASSWORD = 7;
export const PP_CERTCHAIN = 9;
export const PP_KEY_TYPE_SUBTYPE = 10;
export const PP_PROVTYPE = 16;
export const PP_KEYSTORAGE = 17;
export const PP_APPLI_CERT = 18;
export const PP_SYM_KEYSIZE = 19;
export const PP_SESSION_KEYSIZE = 20;
export const PP_ENUMALGS_EX = 22;
export const PP_ENUMMANDROOTS = 25;
export const PP_ENUMELECTROOTS = 26;
export const PP_KEYSET_TYPE = 27;
export const PP_ADMIN_PIN = 31;
export const PP_SIG_KEYSIZE_INC = 34;
export const PP_KEYX_KEYSIZE_INC = 35;
export const PP_UNIQUE_CONTAINER = 36;
export const PP_SGC_INFO = 37;
export const PP_KEYSPEC = 39;
export const PP_ENUMEX_SIGNING_PROT = 40;
export const PP_CRYPT_COUNT_KEY_USE = 41;
export const PP_SMARTCARD_GUID = 45;
export const PP_SMARTCARD_READER_ICON = 47;
export const CRYPT_FIRST = 1;
export const CRYPT_NEXT = 2;
export const CRYPT_SGC_ENUM = 4;
export const CRYPT_IMPL_HARDWARE = 1;
export const CRYPT_IMPL_SOFTWARE = 2;
export const CRYPT_IMPL_MIXED = 3;
export const CRYPT_IMPL_UNKNOWN = 4;
export const CRYPT_IMPL_REMOVABLE = 8;
export const CRYPT_SEC_DESCR = 1;
export const CRYPT_PSTORE = 2;
export const CRYPT_UI_PROMPT = 4;
export const CRYPT_FLAG_PCT1 = 1;
export const CRYPT_FLAG_SSL2 = 2;
export const CRYPT_FLAG_SSL3 = 4;
export const CRYPT_FLAG_TLS1 = 8;
export const CRYPT_FLAG_IPSEC = 16;
export const CRYPT_FLAG_SIGNING = 32;
export const CRYPT_SGC = 1;
export const CRYPT_FASTSGC = 2;
export const PP_CONTEXT_INFO = 11;
export const PP_DISMISS_PIN_UI_SEC = 49;
export const PROV_RSA_FULL = 1;
export const PROV_RSA_SIG = 2;
export const PROV_DSS = 3;
export const PROV_FORTEZZA = 4;
export const PROV_MS_EXCHANGE = 5;
export const PROV_SSL = 6;
export const PROV_RSA_SCHANNEL = 12;
export const PROV_DSS_DH = 13;
export const PROV_EC_ECDSA_SIG = 14;
export const PROV_EC_ECNRA_SIG = 15;
export const PROV_EC_ECDSA_FULL = 16;
export const PROV_EC_ECNRA_FULL = 17;
export const PROV_DH_SCHANNEL = 18;
export const PROV_SPYRUS_LYNKS = 20;
export const PROV_RNG = 21;
export const PROV_INTEL_SEC = 22;
export const PROV_REPLACE_OWF = 23;
export const PROV_RSA_AES = 24;
export const PROV_STT_MER = 7;
export const PROV_STT_ACQ = 8;
export const PROV_STT_BRND = 9;
export const PROV_STT_ROOT = 10;
export const PROV_STT_ISS = 11;
export const MS_DEF_PROV_A = `Microsoft Base Cryptographic Provider v1.0`;
export const MS_DEF_PROV_W = `Microsoft Base Cryptographic Provider v1.0`;
export const MS_DEF_PROV = `Microsoft Base Cryptographic Provider v1.0`;
export const MS_ENHANCED_PROV_A = `Microsoft Enhanced Cryptographic Provider v1.0`;
export const MS_ENHANCED_PROV_W = `Microsoft Enhanced Cryptographic Provider v1.0`;
export const MS_ENHANCED_PROV = `Microsoft Enhanced Cryptographic Provider v1.0`;
export const MS_STRONG_PROV_A = `Microsoft Strong Cryptographic Provider`;
export const MS_STRONG_PROV_W = `Microsoft Strong Cryptographic Provider`;
export const MS_STRONG_PROV = `Microsoft Strong Cryptographic Provider`;
export const MS_DEF_RSA_SIG_PROV_A = `Microsoft RSA Signature Cryptographic Provider`;
export const MS_DEF_RSA_SIG_PROV_W = `Microsoft RSA Signature Cryptographic Provider`;
export const MS_DEF_RSA_SIG_PROV = `Microsoft RSA Signature Cryptographic Provider`;
export const MS_DEF_RSA_SCHANNEL_PROV_A = `Microsoft RSA SChannel Cryptographic Provider`;
export const MS_DEF_RSA_SCHANNEL_PROV_W = `Microsoft RSA SChannel Cryptographic Provider`;
export const MS_DEF_RSA_SCHANNEL_PROV = `Microsoft RSA SChannel Cryptographic Provider`;
export const MS_DEF_DSS_PROV_A = `Microsoft Base DSS Cryptographic Provider`;
export const MS_DEF_DSS_PROV_W = `Microsoft Base DSS Cryptographic Provider`;
export const MS_DEF_DSS_PROV = `Microsoft Base DSS Cryptographic Provider`;
export const MS_DEF_DSS_DH_PROV_A = `Microsoft Base DSS and Diffie-Hellman Cryptographic Provider`;
export const MS_DEF_DSS_DH_PROV_W = `Microsoft Base DSS and Diffie-Hellman Cryptographic Provider`;
export const MS_DEF_DSS_DH_PROV = `Microsoft Base DSS and Diffie-Hellman Cryptographic Provider`;
export const MS_ENH_DSS_DH_PROV_A = `Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider`;
export const MS_ENH_DSS_DH_PROV_W = `Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider`;
export const MS_ENH_DSS_DH_PROV = `Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider`;
export const MS_DEF_DH_SCHANNEL_PROV_A = `Microsoft DH SChannel Cryptographic Provider`;
export const MS_DEF_DH_SCHANNEL_PROV_W = `Microsoft DH SChannel Cryptographic Provider`;
export const MS_DEF_DH_SCHANNEL_PROV = `Microsoft DH SChannel Cryptographic Provider`;
export const MS_SCARD_PROV_A = `Microsoft Base Smart Card Crypto Provider`;
export const MS_SCARD_PROV_W = `Microsoft Base Smart Card Crypto Provider`;
export const MS_SCARD_PROV = `Microsoft Base Smart Card Crypto Provider`;
export const MS_ENH_RSA_AES_PROV_A = `Microsoft Enhanced RSA and AES Cryptographic Provider`;
export const MS_ENH_RSA_AES_PROV_W = `Microsoft Enhanced RSA and AES Cryptographic Provider`;
export const MS_ENH_RSA_AES_PROV_XP_A = `Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)`;
export const MS_ENH_RSA_AES_PROV_XP_W = `Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)`;
export const MS_ENH_RSA_AES_PROV_XP = `Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)`;
export const MS_ENH_RSA_AES_PROV = `Microsoft Enhanced RSA and AES Cryptographic Provider`;
export const MAXUIDLEN = 64;
export const EXPO_OFFLOAD_REG_VALUE = `ExpoOffload`;
export const EXPO_OFFLOAD_FUNC_NAME = `OffloadModExpo`;
export const szKEY_CRYPTOAPI_PRIVATE_KEY_OPTIONS = `Software\\Policies\\Microsoft\\Cryptography`;
export const szKEY_CACHE_ENABLED = `CachePrivateKeys`;
export const szKEY_CACHE_SECONDS = `PrivateKeyLifetimeSeconds`;
export const szPRIV_KEY_CACHE_MAX_ITEMS = `PrivKeyCacheMaxItems`;
export const cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT = 20;
export const szPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS = `PrivKeyCachePurgeIntervalSeconds`;
export const cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT = 86400;
export const CUR_BLOB_VERSION = 2;
export const SCHANNEL_MAC_KEY = 0;
export const SCHANNEL_ENC_KEY = 1;
export const INTERNATIONAL_USAGE = 1;
export const szOID_RSA = `1.2.840.113549`;
export const szOID_PKCS = `1.2.840.113549.1`;
export const szOID_RSA_HASH = `1.2.840.113549.2`;
export const szOID_RSA_ENCRYPT = `1.2.840.113549.3`;
export const szOID_PKCS_1 = `1.2.840.113549.1.1`;
export const szOID_PKCS_2 = `1.2.840.113549.1.2`;
export const szOID_PKCS_3 = `1.2.840.113549.1.3`;
export const szOID_PKCS_4 = `1.2.840.113549.1.4`;
export const szOID_PKCS_5 = `1.2.840.113549.1.5`;
export const szOID_PKCS_6 = `1.2.840.113549.1.6`;
export const szOID_PKCS_7 = `1.2.840.113549.1.7`;
export const szOID_PKCS_8 = `1.2.840.113549.1.8`;
export const szOID_PKCS_9 = `1.2.840.113549.1.9`;
export const szOID_PKCS_10 = `1.2.840.113549.1.10`;
export const szOID_PKCS_12 = `1.2.840.113549.1.12`;
export const szOID_RSA_RSA = `1.2.840.113549.1.1.1`;
export const szOID_RSA_MD2RSA = `1.2.840.113549.1.1.2`;
export const szOID_RSA_MD4RSA = `1.2.840.113549.1.1.3`;
export const szOID_RSA_MD5RSA = `1.2.840.113549.1.1.4`;
export const szOID_RSA_SHA1RSA = `1.2.840.113549.1.1.5`;
export const szOID_RSA_SETOAEP_RSA = `1.2.840.113549.1.1.6`;
export const szOID_RSAES_OAEP = `1.2.840.113549.1.1.7`;
export const szOID_RSA_MGF1 = `1.2.840.113549.1.1.8`;
export const szOID_RSA_PSPECIFIED = `1.2.840.113549.1.1.9`;
export const szOID_RSA_SSA_PSS = `1.2.840.113549.1.1.10`;
export const szOID_RSA_SHA256RSA = `1.2.840.113549.1.1.11`;
export const szOID_RSA_SHA384RSA = `1.2.840.113549.1.1.12`;
export const szOID_RSA_SHA512RSA = `1.2.840.113549.1.1.13`;
export const szOID_RSA_DH = `1.2.840.113549.1.3.1`;
export const szOID_RSA_data = `1.2.840.113549.1.7.1`;
export const szOID_RSA_signedData = `1.2.840.113549.1.7.2`;
export const szOID_RSA_envelopedData = `1.2.840.113549.1.7.3`;
export const szOID_RSA_signEnvData = `1.2.840.113549.1.7.4`;
export const szOID_RSA_digestedData = `1.2.840.113549.1.7.5`;
export const szOID_RSA_hashedData = `1.2.840.113549.1.7.5`;
export const szOID_RSA_encryptedData = `1.2.840.113549.1.7.6`;
export const szOID_RSA_emailAddr = `1.2.840.113549.1.9.1`;
export const szOID_RSA_unstructName = `1.2.840.113549.1.9.2`;
export const szOID_RSA_contentType = `1.2.840.113549.1.9.3`;
export const szOID_RSA_messageDigest = `1.2.840.113549.1.9.4`;
export const szOID_RSA_signingTime = `1.2.840.113549.1.9.5`;
export const szOID_RSA_counterSign = `1.2.840.113549.1.9.6`;
export const szOID_RSA_challengePwd = `1.2.840.113549.1.9.7`;
export const szOID_RSA_unstructAddr = `1.2.840.113549.1.9.8`;
export const szOID_RSA_extCertAttrs = `1.2.840.113549.1.9.9`;
export const szOID_RSA_certExtensions = `1.2.840.113549.1.9.14`;
export const szOID_RSA_SMIMECapabilities = `1.2.840.113549.1.9.15`;
export const szOID_RSA_preferSignedData = `1.2.840.113549.1.9.15.1`;
export const szOID_TIMESTAMP_TOKEN = `1.2.840.113549.1.9.16.1.4`;
export const szOID_RFC3161_counterSign = `1.3.6.1.4.1.311.3.3.1`;
export const szOID_RSA_SMIMEalg = `1.2.840.113549.1.9.16.3`;
export const szOID_RSA_SMIMEalgESDH = `1.2.840.113549.1.9.16.3.5`;
export const szOID_RSA_SMIMEalgCMS3DESwrap = `1.2.840.113549.1.9.16.3.6`;
export const szOID_RSA_SMIMEalgCMSRC2wrap = `1.2.840.113549.1.9.16.3.7`;
export const szOID_RSA_MD2 = `1.2.840.113549.2.2`;
export const szOID_RSA_MD4 = `1.2.840.113549.2.4`;
export const szOID_RSA_MD5 = `1.2.840.113549.2.5`;
export const szOID_RSA_RC2CBC = `1.2.840.113549.3.2`;
export const szOID_RSA_RC4 = `1.2.840.113549.3.4`;
export const szOID_RSA_DES_EDE3_CBC = `1.2.840.113549.3.7`;
export const szOID_RSA_RC5_CBCPad = `1.2.840.113549.3.9`;
export const szOID_ANSI_X942 = `1.2.840.10046`;
export const szOID_ANSI_X942_DH = `1.2.840.10046.2.1`;
export const szOID_X957 = `1.2.840.10040`;
export const szOID_X957_DSA = `1.2.840.10040.4.1`;
export const szOID_X957_SHA1DSA = `1.2.840.10040.4.3`;
export const szOID_ECC_PUBLIC_KEY = `1.2.840.10045.2.1`;
export const szOID_ECC_CURVE_P256 = `1.2.840.10045.3.1.7`;
export const szOID_ECC_CURVE_P384 = `1.3.132.0.34`;
export const szOID_ECC_CURVE_P521 = `1.3.132.0.35`;
export const szOID_ECC_CURVE_BRAINPOOLP160R1 = `1.3.36.3.3.2.8.1.1.1`;
export const szOID_ECC_CURVE_BRAINPOOLP160T1 = `1.3.36.3.3.2.8.1.1.2`;
export const szOID_ECC_CURVE_BRAINPOOLP192R1 = `1.3.36.3.3.2.8.1.1.3`;
export const szOID_ECC_CURVE_BRAINPOOLP192T1 = `1.3.36.3.3.2.8.1.1.4`;
export const szOID_ECC_CURVE_BRAINPOOLP224R1 = `1.3.36.3.3.2.8.1.1.5`;
export const szOID_ECC_CURVE_BRAINPOOLP224T1 = `1.3.36.3.3.2.8.1.1.6`;
export const szOID_ECC_CURVE_BRAINPOOLP256R1 = `1.3.36.3.3.2.8.1.1.7`;
export const szOID_ECC_CURVE_BRAINPOOLP256T1 = `1.3.36.3.3.2.8.1.1.8`;
export const szOID_ECC_CURVE_BRAINPOOLP320R1 = `1.3.36.3.3.2.8.1.1.9`;
export const szOID_ECC_CURVE_BRAINPOOLP320T1 = `1.3.36.3.3.2.8.1.1.10`;
export const szOID_ECC_CURVE_BRAINPOOLP384R1 = `1.3.36.3.3.2.8.1.1.11`;
export const szOID_ECC_CURVE_BRAINPOOLP384T1 = `1.3.36.3.3.2.8.1.1.12`;
export const szOID_ECC_CURVE_BRAINPOOLP512R1 = `1.3.36.3.3.2.8.1.1.13`;
export const szOID_ECC_CURVE_BRAINPOOLP512T1 = `1.3.36.3.3.2.8.1.1.14`;
export const szOID_ECC_CURVE_EC192WAPI = `1.2.156.11235.1.1.2.1`;
export const szOID_CN_ECDSA_SHA256 = `1.2.156.11235.1.1.1`;
export const szOID_ECC_CURVE_NISTP192 = `1.2.840.10045.3.1.1`;
export const szOID_ECC_CURVE_NISTP224 = `1.3.132.0.33`;
export const szOID_ECC_CURVE_NISTP256 = `1.2.840.10045.3.1.7`;
export const szOID_ECC_CURVE_NISTP384 = `1.3.132.0.34`;
export const szOID_ECC_CURVE_NISTP521 = `1.3.132.0.35`;
export const szOID_ECC_CURVE_SECP160K1 = `1.3.132.0.9`;
export const szOID_ECC_CURVE_SECP160R1 = `1.3.132.0.8`;
export const szOID_ECC_CURVE_SECP160R2 = `1.3.132.0.30`;
export const szOID_ECC_CURVE_SECP192K1 = `1.3.132.0.31`;
export const szOID_ECC_CURVE_SECP192R1 = `1.2.840.10045.3.1.1`;
export const szOID_ECC_CURVE_SECP224K1 = `1.3.132.0.32`;
export const szOID_ECC_CURVE_SECP224R1 = `1.3.132.0.33`;
export const szOID_ECC_CURVE_SECP256K1 = `1.3.132.0.10`;
export const szOID_ECC_CURVE_SECP256R1 = `1.2.840.10045.3.1.7`;
export const szOID_ECC_CURVE_SECP384R1 = `1.3.132.0.34`;
export const szOID_ECC_CURVE_SECP521R1 = `1.3.132.0.35`;
export const szOID_ECC_CURVE_WTLS7 = `1.3.132.0.30`;
export const szOID_ECC_CURVE_WTLS9 = `2.23.43.1.4.9`;
export const szOID_ECC_CURVE_WTLS12 = `1.3.132.0.33`;
export const szOID_ECC_CURVE_X962P192V1 = `1.2.840.10045.3.1.1`;
export const szOID_ECC_CURVE_X962P192V2 = `1.2.840.10045.3.1.2`;
export const szOID_ECC_CURVE_X962P192V3 = `1.2.840.10045.3.1.3`;
export const szOID_ECC_CURVE_X962P239V1 = `1.2.840.10045.3.1.4`;
export const szOID_ECC_CURVE_X962P239V2 = `1.2.840.10045.3.1.5`;
export const szOID_ECC_CURVE_X962P239V3 = `1.2.840.10045.3.1.6`;
export const szOID_ECC_CURVE_X962P256V1 = `1.2.840.10045.3.1.7`;
export const szOID_ECDSA_SHA1 = `1.2.840.10045.4.1`;
export const szOID_ECDSA_SPECIFIED = `1.2.840.10045.4.3`;
export const szOID_ECDSA_SHA256 = `1.2.840.10045.4.3.2`;
export const szOID_ECDSA_SHA384 = `1.2.840.10045.4.3.3`;
export const szOID_ECDSA_SHA512 = `1.2.840.10045.4.3.4`;
export const szOID_NIST_AES128_CBC = `2.16.840.1.101.3.4.1.2`;
export const szOID_NIST_AES192_CBC = `2.16.840.1.101.3.4.1.22`;
export const szOID_NIST_AES256_CBC = `2.16.840.1.101.3.4.1.42`;
export const szOID_NIST_AES128_WRAP = `2.16.840.1.101.3.4.1.5`;
export const szOID_NIST_AES192_WRAP = `2.16.840.1.101.3.4.1.25`;
export const szOID_NIST_AES256_WRAP = `2.16.840.1.101.3.4.1.45`;
export const szOID_DH_SINGLE_PASS_STDDH_SHA1_KDF = `1.3.133.16.840.63.0.2`;
export const szOID_DH_SINGLE_PASS_STDDH_SHA256_KDF = `1.3.132.1.11.1`;
export const szOID_DH_SINGLE_PASS_STDDH_SHA384_KDF = `1.3.132.1.11.2`;
export const szOID_DS = `2.5`;
export const szOID_DSALG = `2.5.8`;
export const szOID_DSALG_CRPT = `2.5.8.1`;
export const szOID_DSALG_HASH = `2.5.8.2`;
export const szOID_DSALG_SIGN = `2.5.8.3`;
export const szOID_DSALG_RSA = `2.5.8.1.1`;
export const szOID_OIW = `1.3.14`;
export const szOID_OIWSEC = `1.3.14.3.2`;
export const szOID_OIWSEC_md4RSA = `1.3.14.3.2.2`;
export const szOID_OIWSEC_md5RSA = `1.3.14.3.2.3`;
export const szOID_OIWSEC_md4RSA2 = `1.3.14.3.2.4`;
export const szOID_OIWSEC_desECB = `1.3.14.3.2.6`;
export const szOID_OIWSEC_desCBC = `1.3.14.3.2.7`;
export const szOID_OIWSEC_desOFB = `1.3.14.3.2.8`;
export const szOID_OIWSEC_desCFB = `1.3.14.3.2.9`;
export const szOID_OIWSEC_desMAC = `1.3.14.3.2.10`;
export const szOID_OIWSEC_rsaSign = `1.3.14.3.2.11`;
export const szOID_OIWSEC_dsa = `1.3.14.3.2.12`;
export const szOID_OIWSEC_shaDSA = `1.3.14.3.2.13`;
export const szOID_OIWSEC_mdc2RSA = `1.3.14.3.2.14`;
export const szOID_OIWSEC_shaRSA = `1.3.14.3.2.15`;
export const szOID_OIWSEC_dhCommMod = `1.3.14.3.2.16`;
export const szOID_OIWSEC_desEDE = `1.3.14.3.2.17`;
export const szOID_OIWSEC_sha = `1.3.14.3.2.18`;
export const szOID_OIWSEC_mdc2 = `1.3.14.3.2.19`;
export const szOID_OIWSEC_dsaComm = `1.3.14.3.2.20`;
export const szOID_OIWSEC_dsaCommSHA = `1.3.14.3.2.21`;
export const szOID_OIWSEC_rsaXchg = `1.3.14.3.2.22`;
export const szOID_OIWSEC_keyHashSeal = `1.3.14.3.2.23`;
export const szOID_OIWSEC_md2RSASign = `1.3.14.3.2.24`;
export const szOID_OIWSEC_md5RSASign = `1.3.14.3.2.25`;
export const szOID_OIWSEC_sha1 = `1.3.14.3.2.26`;
export const szOID_OIWSEC_dsaSHA1 = `1.3.14.3.2.27`;
export const szOID_OIWSEC_dsaCommSHA1 = `1.3.14.3.2.28`;
export const szOID_OIWSEC_sha1RSASign = `1.3.14.3.2.29`;
export const szOID_OIWDIR = `1.3.14.7.2`;
export const szOID_OIWDIR_CRPT = `1.3.14.7.2.1`;
export const szOID_OIWDIR_HASH = `1.3.14.7.2.2`;
export const szOID_OIWDIR_SIGN = `1.3.14.7.2.3`;
export const szOID_OIWDIR_md2 = `1.3.14.7.2.2.1`;
export const szOID_OIWDIR_md2RSA = `1.3.14.7.2.3.1`;
export const szOID_INFOSEC = `2.16.840.1.101.2.1`;
export const szOID_INFOSEC_sdnsSignature = `2.16.840.1.101.2.1.1.1`;
export const szOID_INFOSEC_mosaicSignature = `2.16.840.1.101.2.1.1.2`;
export const szOID_INFOSEC_sdnsConfidentiality = `2.16.840.1.101.2.1.1.3`;
export const szOID_INFOSEC_mosaicConfidentiality = `2.16.840.1.101.2.1.1.4`;
export const szOID_INFOSEC_sdnsIntegrity = `2.16.840.1.101.2.1.1.5`;
export const szOID_INFOSEC_mosaicIntegrity = `2.16.840.1.101.2.1.1.6`;
export const szOID_INFOSEC_sdnsTokenProtection = `2.16.840.1.101.2.1.1.7`;
export const szOID_INFOSEC_mosaicTokenProtection = `2.16.840.1.101.2.1.1.8`;
export const szOID_INFOSEC_sdnsKeyManagement = `2.16.840.1.101.2.1.1.9`;
export const szOID_INFOSEC_mosaicKeyManagement = `2.16.840.1.101.2.1.1.10`;
export const szOID_INFOSEC_sdnsKMandSig = `2.16.840.1.101.2.1.1.11`;
export const szOID_INFOSEC_mosaicKMandSig = `2.16.840.1.101.2.1.1.12`;
export const szOID_INFOSEC_SuiteASignature = `2.16.840.1.101.2.1.1.13`;
export const szOID_INFOSEC_SuiteAConfidentiality = `2.16.840.1.101.2.1.1.14`;
export const szOID_INFOSEC_SuiteAIntegrity = `2.16.840.1.101.2.1.1.15`;
export const szOID_INFOSEC_SuiteATokenProtection = `2.16.840.1.101.2.1.1.16`;
export const szOID_INFOSEC_SuiteAKeyManagement = `2.16.840.1.101.2.1.1.17`;
export const szOID_INFOSEC_SuiteAKMandSig = `2.16.840.1.101.2.1.1.18`;
export const szOID_INFOSEC_mosaicUpdatedSig = `2.16.840.1.101.2.1.1.19`;
export const szOID_INFOSEC_mosaicKMandUpdSig = `2.16.840.1.101.2.1.1.20`;
export const szOID_INFOSEC_mosaicUpdatedInteg = `2.16.840.1.101.2.1.1.21`;
export const szOID_NIST_sha256 = `2.16.840.1.101.3.4.2.1`;
export const szOID_NIST_sha384 = `2.16.840.1.101.3.4.2.2`;
export const szOID_NIST_sha512 = `2.16.840.1.101.3.4.2.3`;
export const szOID_COMMON_NAME = `2.5.4.3`;
export const szOID_SUR_NAME = `2.5.4.4`;
export const szOID_DEVICE_SERIAL_NUMBER = `2.5.4.5`;
export const szOID_COUNTRY_NAME = `2.5.4.6`;
export const szOID_LOCALITY_NAME = `2.5.4.7`;
export const szOID_STATE_OR_PROVINCE_NAME = `2.5.4.8`;
export const szOID_STREET_ADDRESS = `2.5.4.9`;
export const szOID_ORGANIZATION_NAME = `2.5.4.10`;
export const szOID_ORGANIZATIONAL_UNIT_NAME = `2.5.4.11`;
export const szOID_TITLE = `2.5.4.12`;
export const szOID_DESCRIPTION = `2.5.4.13`;
export const szOID_SEARCH_GUIDE = `2.5.4.14`;
export const szOID_BUSINESS_CATEGORY = `2.5.4.15`;
export const szOID_POSTAL_ADDRESS = `2.5.4.16`;
export const szOID_POSTAL_CODE = `2.5.4.17`;
export const szOID_POST_OFFICE_BOX = `2.5.4.18`;
export const szOID_PHYSICAL_DELIVERY_OFFICE_NAME = `2.5.4.19`;
export const szOID_TELEPHONE_NUMBER = `2.5.4.20`;
export const szOID_TELEX_NUMBER = `2.5.4.21`;
export const szOID_TELETEXT_TERMINAL_IDENTIFIER = `2.5.4.22`;
export const szOID_FACSIMILE_TELEPHONE_NUMBER = `2.5.4.23`;
export const szOID_X21_ADDRESS = `2.5.4.24`;
export const szOID_INTERNATIONAL_ISDN_NUMBER = `2.5.4.25`;
export const szOID_REGISTERED_ADDRESS = `2.5.4.26`;
export const szOID_DESTINATION_INDICATOR = `2.5.4.27`;
export const szOID_PREFERRED_DELIVERY_METHOD = `2.5.4.28`;
export const szOID_PRESENTATION_ADDRESS = `2.5.4.29`;
export const szOID_SUPPORTED_APPLICATION_CONTEXT = `2.5.4.30`;
export const szOID_MEMBER = `2.5.4.31`;
export const szOID_OWNER = `2.5.4.32`;
export const szOID_ROLE_OCCUPANT = `2.5.4.33`;
export const szOID_SEE_ALSO = `2.5.4.34`;
export const szOID_USER_PASSWORD = `2.5.4.35`;
export const szOID_USER_CERTIFICATE = `2.5.4.36`;
export const szOID_CA_CERTIFICATE = `2.5.4.37`;
export const szOID_AUTHORITY_REVOCATION_LIST = `2.5.4.38`;
export const szOID_CERTIFICATE_REVOCATION_LIST = `2.5.4.39`;
export const szOID_CROSS_CERTIFICATE_PAIR = `2.5.4.40`;
export const szOID_GIVEN_NAME = `2.5.4.42`;
export const szOID_INITIALS = `2.5.4.43`;
export const szOID_DN_QUALIFIER = `2.5.4.46`;
export const szOID_DOMAIN_COMPONENT = `0.9.2342.19200300.100.1.25`;
export const szOID_PKCS_12_FRIENDLY_NAME_ATTR = `1.2.840.113549.1.9.20`;
export const szOID_PKCS_12_LOCAL_KEY_ID = `1.2.840.113549.1.9.21`;
export const szOID_PKCS_12_KEY_PROVIDER_NAME_ATTR = `1.3.6.1.4.1.311.17.1`;
export const szOID_LOCAL_MACHINE_KEYSET = `1.3.6.1.4.1.311.17.2`;
export const szOID_PKCS_12_EXTENDED_ATTRIBUTES = `1.3.6.1.4.1.311.17.3`;
export const szOID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID = `1.3.6.1.4.1.311.17.4`;
export const szOID_KEYID_RDN = `1.3.6.1.4.1.311.10.7.1`;
export const szOID_EV_RDN_LOCALE = `1.3.6.1.4.1.311.60.2.1.1`;
export const szOID_EV_RDN_STATE_OR_PROVINCE = `1.3.6.1.4.1.311.60.2.1.2`;
export const szOID_EV_RDN_COUNTRY = `1.3.6.1.4.1.311.60.2.1.3`;
export const CERT_RDN_TYPE_MASK = 255;
export const CERT_RDN_FLAGS_MASK = 4278190080;
export const CERT_RDN_ENABLE_T61_UNICODE_FLAG = 2147483648;
export const CERT_RDN_ENABLE_UTF8_UNICODE_FLAG = 536870912;
export const CERT_RDN_FORCE_UTF8_UNICODE_FLAG = 268435456;
export const CERT_RDN_DISABLE_CHECK_TYPE_FLAG = 1073741824;
export const CERT_RDN_DISABLE_IE4_UTF8_FLAG = 16777216;
export const CERT_RDN_ENABLE_PUNYCODE_FLAG = 33554432;
export const CERT_RSA_PUBLIC_KEY_OBJID = `1.2.840.113549.1.1.1`;
export const CERT_DEFAULT_OID_PUBLIC_KEY_SIGN = `1.2.840.113549.1.1.1`;
export const CERT_DEFAULT_OID_PUBLIC_KEY_XCHG = `1.2.840.113549.1.1.1`;
export const CRYPT_ECC_PRIVATE_KEY_INFO_v1 = 1;
export const CERT_V1 = 0;
export const CERT_V2 = 1;
export const CERT_V3 = 2;
export const CERT_INFO_VERSION_FLAG = 1;
export const CERT_INFO_SERIAL_NUMBER_FLAG = 2;
export const CERT_INFO_SIGNATURE_ALGORITHM_FLAG = 3;
export const CERT_INFO_ISSUER_FLAG = 4;
export const CERT_INFO_NOT_BEFORE_FLAG = 5;
export const CERT_INFO_NOT_AFTER_FLAG = 6;
export const CERT_INFO_SUBJECT_FLAG = 7;
export const CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG = 8;
export const CERT_INFO_ISSUER_UNIQUE_ID_FLAG = 9;
export const CERT_INFO_SUBJECT_UNIQUE_ID_FLAG = 10;
export const CERT_INFO_EXTENSION_FLAG = 11;
export const CRL_V1 = 0;
export const CRL_V2 = 1;
export const CERT_BUNDLE_CERTIFICATE = 0;
export const CERT_BUNDLE_CRL = 1;
export const CERT_REQUEST_V1 = 0;
export const CERT_KEYGEN_REQUEST_V1 = 0;
export const CTL_V1 = 0;
export const CERT_ENCODING_TYPE_MASK = 65535;
export const CMSG_ENCODING_TYPE_MASK = 4294901760;
export const CRYPT_ASN_ENCODING = 1;
export const CRYPT_NDR_ENCODING = 2;
export const X509_NDR_ENCODING = 2;
export const PKCS_7_NDR_ENCODING = 131072;
export const CRYPT_FORMAT_STR_MULTI_LINE = 1;
export const CRYPT_FORMAT_STR_NO_HEX = 16;
export const CRYPT_FORMAT_SIMPLE = 1;
export const CRYPT_FORMAT_X509 = 2;
export const CRYPT_FORMAT_OID = 4;
export const CRYPT_FORMAT_RDN_SEMICOLON = 256;
export const CRYPT_FORMAT_RDN_CRLF = 512;
export const CRYPT_FORMAT_RDN_UNQUOTE = 1024;
export const CRYPT_FORMAT_RDN_REVERSE = 2048;
export const CRYPT_FORMAT_COMMA = 4096;
export const CRYPT_FORMAT_SEMICOLON = 256;
export const CRYPT_FORMAT_CRLF = 512;
export const CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 8;
export const CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG = 268435456;
export const CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 65536;
export const CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG = 262144;
export const CRYPT_DECODE_NOCOPY_FLAG = 1;
export const CRYPT_DECODE_TO_BE_SIGNED_FLAG = 2;
export const CRYPT_DECODE_SHARE_OID_STRING_FLAG = 4;
export const CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 8;
export const CRYPT_DECODE_ALLOC_FLAG = 32768;
export const CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG = 16777216;
export const CRYPT_DECODE_ENABLE_PUNYCODE_FLAG = 33554432;
export const CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG = 67108864;
export const CRYPT_ENCODE_DECODE_NONE = 0;
export const X509_CERT = 2216203124737;
export const X509_CERT_TO_BE_SIGNED = 4415226380290;
export const X509_CERT_CRL_TO_BE_SIGNED = 5514738008067;
export const X509_CERT_REQUEST_TO_BE_SIGNED = 1518001159355236356n;
export const X509_EXTENSIONS = 6614249635845;
export const X509_NAME_VALUE = 7713761263622;
export const X509_NAME = 290488781625098247n;
export const X509_PUBLIC_KEY_INFO = 16509854285832;
export const X509_AUTHORITY_KEY_ID = 13211319402505;
export const X509_KEY_ATTRIBUTES = 12111807774730;
export const X509_KEY_USAGE_RESTRICTION = 1147907319267339;
export const X509_ALTERNATE_NAME = 14310831030284;
export const X509_BASIC_CONSTRAINTS = 15410342658061;
export const X509_KEY_USAGE = 11012296146958;
export const X509_BASIC_CONSTRAINTS2 = 1806231535506948111n;
export const X509_CERT_POLICIES = 70385924046864;
export const PKCS_UTC_TIME = 19808389169169;
export const PKCS_TIME_REQUEST = 20907900796946;
export const RSA_CSP_PUBLICKEYBLOB = 28604482191379;
export const X509_UNICODE_NAME = 23106924052500;
export const X509_KEYGEN_REQUEST_TO_BE_SIGNED = 24206435680277;
export const PKCS_ATTRIBUTE = 25305947308054;
export const PKCS_CONTENT_INFO_SEQUENCE_OF_ANY = 26405458935831;
export const X509_UNICODE_NAME_VALUE = 33002528702488;
export const X509_ANY_STRING = 6;
export const X509_UNICODE_ANY_STRING = 24;
export const X509_OCTET_STRING = 4785091783950361;
export const X509_BITS = 29703993819162;
export const X509_INTEGER = 30803505446939;
export const X509_MULTI_BYTE_INTEGER = 31903017074716;
export const X509_ENUMERATED = 39599598469149;
export const X509_CHOICE_OF_TIME = 34102040330270;
export const X509_AUTHORITY_KEY_ID2 = 54992761258015;
export const X509_AUTHORITY_INFO_ACCESS = 36301063585824;
export const X509_SUBJECT_INFO_ACCESS = 32;
export const X509_CRL_REASON_CODE = 29;
export const PKCS_CONTENT_INFO = 37400575213601;
export const X509_SEQUENCE_OF_ANY = 38500086841378;
export const X509_CRL_DIST_POINTS = 17609365913635;
export const X509_ENHANCED_KEY_USAGE = 40699110096932;
export const PKCS_CTL = 41798621724709;
export const X509_MULTI_BYTE_UINT = 42898133352486;
export const X509_DSS_PUBLICKEY = 38;
export const X509_DSS_PARAMETERS = 43997644980263;
export const X509_DSS_SIGNATURE = 45097156608040;
export const PKCS_RC2_CBC_PARAMETERS = 46196668235817;
export const PKCS_SMIME_CAPABILITIES = 47296179863594;
export const X509_QC_STATEMENTS_EXT = 47296179863594;
export const PKCS_RSA_PRIVATE_KEY = 48395691491371;
export const PKCS_PRIVATE_KEY_INFO = 49495203119148;
export const PKCS_ENCRYPTED_PRIVATE_KEY_INFO = 1099528807645229;
export const X509_PKIX_POLICY_QUALIFIER_USERNOTICE = 51694226374702;
export const X509_DH_PUBLICKEY = 38;
export const X509_DH_PARAMETERS = 53893249630255;
export const PKCS_ATTRIBUTES = 2305843026393563184n;
export const PKCS_SORTED_CTL = 57191784513585;
export const X509_ECC_SIGNATURE = 53893249630255;
export const X942_DH_PARAMETERS = 56092272885810;
export const X509_BITS_WITHOUT_TRAILING_ZEROES = 109968342646835;
export const X942_OTHER_INFO = 58291296141364;
export const X509_CERT_PAIR = 59390807769141;
export const X509_ISSUING_DIST_POINT = 60490319396918;
export const X509_NAME_CONSTRAINTS = 61589831024695;
export const X509_POLICY_MAPPINGS = 62689342652472;
export const X509_POLICY_CONSTRAINTS = 63788854280249;
export const X509_CROSS_CERT_DIST_POINTS = 64888365908026;
export const CMC_DATA = 65987877535803;
export const CMC_RESPONSE = 648519531752325180n;
export const CMC_STATUS = 68186900791357;
export const CMC_ADD_EXTENSIONS = 90177133346878;
export const CMC_ADD_ATTRIBUTES = 18410715293870456895n;
export const X509_CERTIFICATE_TEMPLATE = 140754668224576;
export const OCSP_SIGNED_REQUEST = 72584947302465;
export const OCSP_REQUEST = 73684458930242;
export const OCSP_RESPONSE = 74783970558019;
export const OCSP_BASIC_SIGNED_RESPONSE = 75883482185796;
export const OCSP_BASIC_RESPONSE = 76982993813573;
export const X509_LOGOTYPE_EXT = 78082505441350;
export const X509_BIOMETRIC_EXT = 3315714752583;
export const CNG_RSA_PUBLIC_KEY_BLOB = 83580063580232;
export const X509_OBJECT_IDENTIFIER = 81381040324681;
export const X509_ALGORITHM_IDENTIFIER = 82480551952458;
export const PKCS_RSA_SSA_PSS_PARAMETERS = 84679575208011;
export const PKCS_RSAES_OAEP_PARAMETERS = 92376156602444;
export const ECC_CMS_SHARED_INFO = 85779086835789;
export const TIMESTAMP_REQUEST = 86878598463566;
export const TIMESTAMP_RESPONSE = 98973226369103;
export const TIMESTAMP_INFO = 52793738002512;
export const X509_CERT_BUNDLE = 102271761252433;
export const X509_ECC_PRIVATE_KEY = 91276644974674;
export const CNG_RSA_PRIVATE_KEY_BLOB = 93475668230227;
export const X509_SUBJECT_DIR_ATTRS = 175939040313428;
export const X509_ECC_PARAMETERS = 95674691485781;
export const PKCS7_SIGNER_INFO = 551972017013236;
export const CMS_SIGNER_INFO = 553071528641013;
export const szOID_AUTHORITY_KEY_IDENTIFIER = `2.5.29.1`;
export const szOID_KEY_ATTRIBUTES = `2.5.29.2`;
export const szOID_CERT_POLICIES_95 = `2.5.29.3`;
export const szOID_KEY_USAGE_RESTRICTION = `2.5.29.4`;
export const szOID_SUBJECT_ALT_NAME = `2.5.29.7`;
export const szOID_ISSUER_ALT_NAME = `2.5.29.8`;
export const szOID_BASIC_CONSTRAINTS = `2.5.29.10`;
export const szOID_KEY_USAGE = `2.5.29.15`;
export const szOID_PRIVATEKEY_USAGE_PERIOD = `2.5.29.16`;
export const szOID_BASIC_CONSTRAINTS2 = `2.5.29.19`;
export const szOID_CERT_POLICIES = `2.5.29.32`;
export const szOID_ANY_CERT_POLICY = `2.5.29.32.0`;
export const szOID_INHIBIT_ANY_POLICY = `2.5.29.54`;
export const szOID_AUTHORITY_KEY_IDENTIFIER2 = `2.5.29.35`;
export const szOID_SUBJECT_KEY_IDENTIFIER = `2.5.29.14`;
export const szOID_SUBJECT_ALT_NAME2 = `2.5.29.17`;
export const szOID_ISSUER_ALT_NAME2 = `2.5.29.18`;
export const szOID_CRL_REASON_CODE = `2.5.29.21`;
export const szOID_REASON_CODE_HOLD = `2.5.29.23`;
export const szOID_CRL_DIST_POINTS = `2.5.29.31`;
export const szOID_ENHANCED_KEY_USAGE = `2.5.29.37`;
export const szOID_ANY_ENHANCED_KEY_USAGE = `2.5.29.37.0`;
export const szOID_CRL_NUMBER = `2.5.29.20`;
export const szOID_DELTA_CRL_INDICATOR = `2.5.29.27`;
export const szOID_ISSUING_DIST_POINT = `2.5.29.28`;
export const szOID_FRESHEST_CRL = `2.5.29.46`;
export const szOID_NAME_CONSTRAINTS = `2.5.29.30`;
export const szOID_POLICY_MAPPINGS = `2.5.29.33`;
export const szOID_LEGACY_POLICY_MAPPINGS = `2.5.29.5`;
export const szOID_POLICY_CONSTRAINTS = `2.5.29.36`;
export const szOID_RENEWAL_CERTIFICATE = `1.3.6.1.4.1.311.13.1`;
export const szOID_ENROLLMENT_NAME_VALUE_PAIR = `1.3.6.1.4.1.311.13.2.1`;
export const szOID_ENROLLMENT_CSP_PROVIDER = `1.3.6.1.4.1.311.13.2.2`;
export const szOID_OS_VERSION = `1.3.6.1.4.1.311.13.2.3`;
export const szOID_ENROLLMENT_AGENT = `1.3.6.1.4.1.311.20.2.1`;
export const szOID_PKIX = `1.3.6.1.5.5.7`;
export const szOID_PKIX_PE = `1.3.6.1.5.5.7.1`;
export const szOID_AUTHORITY_INFO_ACCESS = `1.3.6.1.5.5.7.1.1`;
export const szOID_SUBJECT_INFO_ACCESS = `1.3.6.1.5.5.7.1.11`;
export const szOID_BIOMETRIC_EXT = `1.3.6.1.5.5.7.1.2`;
export const szOID_QC_STATEMENTS_EXT = `1.3.6.1.5.5.7.1.3`;
export const szOID_LOGOTYPE_EXT = `1.3.6.1.5.5.7.1.12`;
export const szOID_TLS_FEATURES_EXT = `1.3.6.1.5.5.7.1.24`;
export const szOID_CERT_EXTENSIONS = `1.3.6.1.4.1.311.2.1.14`;
export const szOID_NEXT_UPDATE_LOCATION = `1.3.6.1.4.1.311.10.2`;
export const szOID_REMOVE_CERTIFICATE = `1.3.6.1.4.1.311.10.8.1`;
export const szOID_CROSS_CERT_DIST_POINTS = `1.3.6.1.4.1.311.10.9.1`;
export const szOID_CTL = `1.3.6.1.4.1.311.10.1`;
export const szOID_SORTED_CTL = `1.3.6.1.4.1.311.10.1.1`;
export const szOID_SERIALIZED = `1.3.6.1.4.1.311.10.3.3.1`;
export const szOID_NT_PRINCIPAL_NAME = `1.3.6.1.4.1.311.20.2.3`;
export const szOID_INTERNATIONALIZED_EMAIL_ADDRESS = `1.3.6.1.4.1.311.20.2.4`;
export const szOID_PRODUCT_UPDATE = `1.3.6.1.4.1.311.31.1`;
export const szOID_ANY_APPLICATION_POLICY = `1.3.6.1.4.1.311.10.12.1`;
export const szOID_AUTO_ENROLL_CTL_USAGE = `1.3.6.1.4.1.311.20.1`;
export const szOID_ENROLL_CERTTYPE_EXTENSION = `1.3.6.1.4.1.311.20.2`;
export const szOID_CERT_MANIFOLD = `1.3.6.1.4.1.311.20.3`;
export const szOID_CERTSRV_CA_VERSION = `1.3.6.1.4.1.311.21.1`;
export const szOID_CERTSRV_PREVIOUS_CERT_HASH = `1.3.6.1.4.1.311.21.2`;
export const szOID_CRL_VIRTUAL_BASE = `1.3.6.1.4.1.311.21.3`;
export const szOID_CRL_NEXT_PUBLISH = `1.3.6.1.4.1.311.21.4`;
export const szOID_KP_CA_EXCHANGE = `1.3.6.1.4.1.311.21.5`;
export const szOID_KP_PRIVACY_CA = `1.3.6.1.4.1.311.21.36`;
export const szOID_KP_KEY_RECOVERY_AGENT = `1.3.6.1.4.1.311.21.6`;
export const szOID_CERTIFICATE_TEMPLATE = `1.3.6.1.4.1.311.21.7`;
export const szOID_ENTERPRISE_OID_ROOT = `1.3.6.1.4.1.311.21.8`;
export const szOID_RDN_DUMMY_SIGNER = `1.3.6.1.4.1.311.21.9`;
export const szOID_APPLICATION_CERT_POLICIES = `1.3.6.1.4.1.311.21.10`;
export const szOID_APPLICATION_POLICY_MAPPINGS = `1.3.6.1.4.1.311.21.11`;
export const szOID_APPLICATION_POLICY_CONSTRAINTS = `1.3.6.1.4.1.311.21.12`;
export const szOID_ARCHIVED_KEY_ATTR = `1.3.6.1.4.1.311.21.13`;
export const szOID_CRL_SELF_CDP = `1.3.6.1.4.1.311.21.14`;
export const szOID_REQUIRE_CERT_CHAIN_POLICY = `1.3.6.1.4.1.311.21.15`;
export const szOID_ARCHIVED_KEY_CERT_HASH = `1.3.6.1.4.1.311.21.16`;
export const szOID_ISSUED_CERT_HASH = `1.3.6.1.4.1.311.21.17`;
export const szOID_DS_EMAIL_REPLICATION = `1.3.6.1.4.1.311.21.19`;
export const szOID_REQUEST_CLIENT_INFO = `1.3.6.1.4.1.311.21.20`;
export const szOID_ENCRYPTED_KEY_HASH = `1.3.6.1.4.1.311.21.21`;
export const szOID_CERTSRV_CROSSCA_VERSION = `1.3.6.1.4.1.311.21.22`;
export const szOID_NTDS_REPLICATION = `1.3.6.1.4.1.311.25.1`;
export const szOID_SUBJECT_DIR_ATTRS = `2.5.29.9`;
export const szOID_PKIX_KP = `1.3.6.1.5.5.7.3`;
export const szOID_PKIX_KP_SERVER_AUTH = `1.3.6.1.5.5.7.3.1`;
export const szOID_PKIX_KP_CLIENT_AUTH = `1.3.6.1.5.5.7.3.2`;
export const szOID_PKIX_KP_CODE_SIGNING = `1.3.6.1.5.5.7.3.3`;
export const szOID_PKIX_KP_EMAIL_PROTECTION = `1.3.6.1.5.5.7.3.4`;
export const szOID_PKIX_KP_IPSEC_END_SYSTEM = `1.3.6.1.5.5.7.3.5`;
export const szOID_PKIX_KP_IPSEC_TUNNEL = `1.3.6.1.5.5.7.3.6`;
export const szOID_PKIX_KP_IPSEC_USER = `1.3.6.1.5.5.7.3.7`;
export const szOID_PKIX_KP_TIMESTAMP_SIGNING = `1.3.6.1.5.5.7.3.8`;
export const szOID_PKIX_KP_OCSP_SIGNING = `1.3.6.1.5.5.7.3.9`;
export const szOID_PKIX_OCSP_NOCHECK = `1.3.6.1.5.5.7.48.1.5`;
export const szOID_PKIX_OCSP_NONCE = `1.3.6.1.5.5.7.48.1.2`;
export const szOID_IPSEC_KP_IKE_INTERMEDIATE = `1.3.6.1.5.5.8.2.2`;
export const szOID_PKINIT_KP_KDC = `1.3.6.1.5.2.3.5`;
export const szOID_KP_CTL_USAGE_SIGNING = `1.3.6.1.4.1.311.10.3.1`;
export const szOID_KP_TIME_STAMP_SIGNING = `1.3.6.1.4.1.311.10.3.2`;
export const szOID_SERVER_GATED_CRYPTO = `1.3.6.1.4.1.311.10.3.3`;
export const szOID_SGC_NETSCAPE = `2.16.840.1.113730.4.1`;
export const szOID_KP_EFS = `1.3.6.1.4.1.311.10.3.4`;
export const szOID_EFS_RECOVERY = `1.3.6.1.4.1.311.10.3.4.1`;
export const szOID_WHQL_CRYPTO = `1.3.6.1.4.1.311.10.3.5`;
export const szOID_ATTEST_WHQL_CRYPTO = `1.3.6.1.4.1.311.10.3.5.1`;
export const szOID_NT5_CRYPTO = `1.3.6.1.4.1.311.10.3.6`;
export const szOID_OEM_WHQL_CRYPTO = `1.3.6.1.4.1.311.10.3.7`;
export const szOID_EMBEDDED_NT_CRYPTO = `1.3.6.1.4.1.311.10.3.8`;
export const szOID_ROOT_LIST_SIGNER = `1.3.6.1.4.1.311.10.3.9`;
export const szOID_KP_QUALIFIED_SUBORDINATION = `1.3.6.1.4.1.311.10.3.10`;
export const szOID_KP_KEY_RECOVERY = `1.3.6.1.4.1.311.10.3.11`;
export const szOID_KP_DOCUMENT_SIGNING = `1.3.6.1.4.1.311.10.3.12`;
export const szOID_KP_LIFETIME_SIGNING = `1.3.6.1.4.1.311.10.3.13`;
export const szOID_KP_MOBILE_DEVICE_SOFTWARE = `1.3.6.1.4.1.311.10.3.14`;
export const szOID_KP_SMART_DISPLAY = `1.3.6.1.4.1.311.10.3.15`;
export const szOID_KP_CSP_SIGNATURE = `1.3.6.1.4.1.311.10.3.16`;
export const szOID_KP_FLIGHT_SIGNING = `1.3.6.1.4.1.311.10.3.27`;
export const szOID_PLATFORM_MANIFEST_BINARY_ID = `1.3.6.1.4.1.311.10.3.28`;
export const szOID_DRM = `1.3.6.1.4.1.311.10.5.1`;
export const szOID_DRM_INDIVIDUALIZATION = `1.3.6.1.4.1.311.10.5.2`;
export const szOID_LICENSES = `1.3.6.1.4.1.311.10.6.1`;
export const szOID_LICENSE_SERVER = `1.3.6.1.4.1.311.10.6.2`;
export const szOID_KP_SMARTCARD_LOGON = `1.3.6.1.4.1.311.20.2.2`;
export const szOID_KP_KERNEL_MODE_CODE_SIGNING = `1.3.6.1.4.1.311.61.1.1`;
export const szOID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING = `1.3.6.1.4.1.311.61.4.1`;
export const szOID_REVOKED_LIST_SIGNER = `1.3.6.1.4.1.311.10.3.19`;
export const szOID_WINDOWS_KITS_SIGNER = `1.3.6.1.4.1.311.10.3.20`;
export const szOID_WINDOWS_RT_SIGNER = `1.3.6.1.4.1.311.10.3.21`;
export const szOID_PROTECTED_PROCESS_LIGHT_SIGNER = `1.3.6.1.4.1.311.10.3.22`;
export const szOID_WINDOWS_TCB_SIGNER = `1.3.6.1.4.1.311.10.3.23`;
export const szOID_PROTECTED_PROCESS_SIGNER = `1.3.6.1.4.1.311.10.3.24`;
export const szOID_WINDOWS_THIRD_PARTY_COMPONENT_SIGNER = `1.3.6.1.4.1.311.10.3.25`;
export const szOID_WINDOWS_SOFTWARE_EXTENSION_SIGNER = `1.3.6.1.4.1.311.10.3.26`;
export const szOID_DISALLOWED_LIST = `1.3.6.1.4.1.311.10.3.30`;
export const szOID_PIN_RULES_SIGNER = `1.3.6.1.4.1.311.10.3.31`;
export const szOID_PIN_RULES_CTL = `1.3.6.1.4.1.311.10.3.32`;
export const szOID_PIN_RULES_EXT = `1.3.6.1.4.1.311.10.3.33`;
export const szOID_PIN_RULES_DOMAIN_NAME = `1.3.6.1.4.1.311.10.3.34`;
export const szOID_PIN_RULES_LOG_END_DATE_EXT = `1.3.6.1.4.1.311.10.3.35`;
export const szOID_IUM_SIGNING = `1.3.6.1.4.1.311.10.3.37`;
export const szOID_EV_WHQL_CRYPTO = `1.3.6.1.4.1.311.10.3.39`;
export const szOID_BIOMETRIC_SIGNING = `1.3.6.1.4.1.311.10.3.41`;
export const szOID_ENCLAVE_SIGNING = `1.3.6.1.4.1.311.10.3.42`;
export const szOID_SYNC_ROOT_CTL_EXT = `1.3.6.1.4.1.311.10.3.50`;
export const szOID_HPKP_DOMAIN_NAME_CTL = `1.3.6.1.4.1.311.10.3.60`;
export const szOID_HPKP_HEADER_VALUE_CTL = `1.3.6.1.4.1.311.10.3.61`;
export const szOID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING = `1.3.6.1.4.1.311.61.5.1`;
export const szOID_WINDOWS_STORE_SIGNER = `1.3.6.1.4.1.311.76.3.1`;
export const szOID_DYNAMIC_CODE_GEN_SIGNER = `1.3.6.1.4.1.311.76.5.1`;
export const szOID_MICROSOFT_PUBLISHER_SIGNER = `1.3.6.1.4.1.311.76.8.1`;
export const szOID_YESNO_TRUST_ATTR = `1.3.6.1.4.1.311.10.4.1`;
export const szOID_SITE_PIN_RULES_INDEX_ATTR = `1.3.6.1.4.1.311.10.4.2`;
export const szOID_SITE_PIN_RULES_FLAGS_ATTR = `1.3.6.1.4.1.311.10.4.3`;
export const SITE_PIN_RULES_ALL_SUBDOMAINS_FLAG = 1;
export const szOID_PKIX_POLICY_QUALIFIER_CPS = `1.3.6.1.5.5.7.2.1`;
export const szOID_PKIX_POLICY_QUALIFIER_USERNOTICE = `1.3.6.1.5.5.7.2.2`;
export const szOID_ROOT_PROGRAM_FLAGS = `1.3.6.1.4.1.311.60.1.1`;
export const CERT_ROOT_PROGRAM_FLAG_OU = 16;
export const CERT_ROOT_PROGRAM_FLAG_ADDRESS = 8;
export const szOID_CERT_POLICIES_95_QUALIFIER1 = `2.16.840.1.113733.1.7.1.1`;
export const szOID_RDN_TPM_MANUFACTURER = `2.23.133.2.1`;
export const szOID_RDN_TPM_MODEL = `2.23.133.2.2`;
export const szOID_RDN_TPM_VERSION = `2.23.133.2.3`;
export const szOID_RDN_TCG_PLATFORM_MANUFACTURER = `2.23.133.2.4`;
export const szOID_RDN_TCG_PLATFORM_MODEL = `2.23.133.2.5`;
export const szOID_RDN_TCG_PLATFORM_VERSION = `2.23.133.2.6`;
export const szOID_CT_CERT_SCTLIST = `1.3.6.1.4.1.11129.2.4.2`;
export const szOID_ENROLL_EK_INFO = `1.3.6.1.4.1.311.21.23`;
export const szOID_ENROLL_AIK_INFO = `1.3.6.1.4.1.311.21.39`;
export const szOID_ENROLL_ATTESTATION_STATEMENT = `1.3.6.1.4.1.311.21.24`;
export const szOID_ENROLL_KSP_NAME = `1.3.6.1.4.1.311.21.25`;
export const szOID_ENROLL_EKPUB_CHALLENGE = `1.3.6.1.4.1.311.21.26`;
export const szOID_ENROLL_CAXCHGCERT_HASH = `1.3.6.1.4.1.311.21.27`;
export const szOID_ENROLL_ATTESTATION_CHALLENGE = `1.3.6.1.4.1.311.21.28`;
export const szOID_ENROLL_ENCRYPTION_ALGORITHM = `1.3.6.1.4.1.311.21.29`;
export const szOID_KP_TPM_EK_CERTIFICATE = `2.23.133.8.1`;
export const szOID_KP_TPM_PLATFORM_CERTIFICATE = `2.23.133.8.2`;
export const szOID_KP_TPM_AIK_CERTIFICATE = `2.23.133.8.3`;
export const szOID_ENROLL_EKVERIFYKEY = `1.3.6.1.4.1.311.21.30`;
export const szOID_ENROLL_EKVERIFYCERT = `1.3.6.1.4.1.311.21.31`;
export const szOID_ENROLL_EKVERIFYCREDS = `1.3.6.1.4.1.311.21.32`;
export const szOID_ENROLL_SCEP_ERROR = `1.3.6.1.4.1.311.21.33`;
export const szOID_ENROLL_SCEP_SERVER_STATE = `1.3.6.1.4.1.311.21.34`;
export const szOID_ENROLL_SCEP_CHALLENGE_ANSWER = `1.3.6.1.4.1.311.21.35`;
export const szOID_ENROLL_SCEP_CLIENT_REQUEST = `1.3.6.1.4.1.311.21.37`;
export const szOID_ENROLL_SCEP_SERVER_MESSAGE = `1.3.6.1.4.1.311.21.38`;
export const szOID_ENROLL_SCEP_SERVER_SECRET = `1.3.6.1.4.1.311.21.40`;
export const szOID_ENROLL_KEY_AFFINITY = `1.3.6.1.4.1.311.21.41`;
export const szOID_ENROLL_SCEP_SIGNER_HASH = `1.3.6.1.4.1.311.21.42`;
export const szOID_ENROLL_EK_CA_KEYID = `1.3.6.1.4.1.311.21.43`;
export const szOID_ATTR_SUPPORTED_ALGORITHMS = `2.5.4.52`;
export const szOID_ATTR_TPM_SPECIFICATION = `2.23.133.2.16`;
export const szOID_ATTR_PLATFORM_SPECIFICATION = `2.23.133.2.17`;
export const szOID_ATTR_TPM_SECURITY_ASSERTIONS = `2.23.133.2.18`;
export const CERT_UNICODE_RDN_ERR_INDEX_MASK = 1023;
export const CERT_UNICODE_RDN_ERR_INDEX_SHIFT = 22;
export const CERT_UNICODE_ATTR_ERR_INDEX_MASK = 63;
export const CERT_UNICODE_ATTR_ERR_INDEX_SHIFT = 16;
export const CERT_UNICODE_VALUE_ERR_INDEX_MASK = 65535;
export const CERT_UNICODE_VALUE_ERR_INDEX_SHIFT = 0;
export const CERT_DIGITAL_SIGNATURE_KEY_USAGE = 128;
export const CERT_NON_REPUDIATION_KEY_USAGE = 64;
export const CERT_KEY_ENCIPHERMENT_KEY_USAGE = 32;
export const CERT_DATA_ENCIPHERMENT_KEY_USAGE = 16;
export const CERT_KEY_AGREEMENT_KEY_USAGE = 8;
export const CERT_KEY_CERT_SIGN_KEY_USAGE = 4;
export const CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 2;
export const CERT_CRL_SIGN_KEY_USAGE = 2;
export const CERT_ENCIPHER_ONLY_KEY_USAGE = 1;
export const CERT_DECIPHER_ONLY_KEY_USAGE = 128;
export const CERT_ALT_NAME_X400_ADDRESS = 4;
export const CERT_ALT_NAME_EDI_PARTY_NAME = 6;
export const CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK = 255;
export const CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT = 16;
export const CERT_ALT_NAME_VALUE_ERR_INDEX_MASK = 65535;
export const CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT = 0;
export const CERT_CA_SUBJECT_FLAG = 128;
export const CERT_END_ENTITY_SUBJECT_FLAG = 64;
export const szOID_PKIX_ACC_DESCR = `1.3.6.1.5.5.7.48`;
export const szOID_PKIX_OCSP = `1.3.6.1.5.5.7.48.1`;
export const szOID_PKIX_CA_ISSUERS = `1.3.6.1.5.5.7.48.2`;
export const szOID_PKIX_TIME_STAMPING = `1.3.6.1.5.5.7.48.3`;
export const szOID_PKIX_CA_REPOSITORY = `1.3.6.1.5.5.7.48.5`;
export const CRL_REASON_PRIVILEGE_WITHDRAWN = 9;
export const CRL_REASON_AA_COMPROMISE = 10;
export const CRL_DIST_POINT_NO_NAME = 0;
export const CRL_DIST_POINT_FULL_NAME = 1;
export const CRL_DIST_POINT_ISSUER_RDN_NAME = 2;
export const CRL_REASON_UNUSED_FLAG = 128;
export const CRL_REASON_KEY_COMPROMISE_FLAG = 64;
export const CRL_REASON_CA_COMPROMISE_FLAG = 32;
export const CRL_REASON_AFFILIATION_CHANGED_FLAG = 16;
export const CRL_REASON_SUPERSEDED_FLAG = 8;
export const CRL_REASON_CESSATION_OF_OPERATION_FLAG = 4;
export const CRL_REASON_CERTIFICATE_HOLD_FLAG = 2;
export const CRL_REASON_PRIVILEGE_WITHDRAWN_FLAG = 1;
export const CRL_REASON_AA_COMPROMISE_FLAG = 128;
export const CRL_DIST_POINT_ERR_INDEX_MASK = 127;
export const CRL_DIST_POINT_ERR_INDEX_SHIFT = 24;
export const CRL_DIST_POINT_ERR_CRL_ISSUER_BIT = `-2147483648`;
export const CROSS_CERT_DIST_POINT_ERR_INDEX_MASK = 255;
export const CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT = 24;
export const CERT_EXCLUDED_SUBTREE_BIT = `-2147483648`;
export const SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG = 1;
export const CERT_DSS_R_LEN = 20;
export const CERT_DSS_S_LEN = 20;
export const CRYPT_X942_COUNTER_BYTE_LENGTH = 4;
export const CRYPT_X942_KEY_LENGTH_BYTE_LENGTH = 4;
export const CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH = 4;
export const CRYPT_RC2_40BIT_VERSION = 160;
export const CRYPT_RC2_56BIT_VERSION = 52;
export const CRYPT_RC2_64BIT_VERSION = 120;
export const CRYPT_RC2_128BIT_VERSION = 58;
export const szOID_QC_EU_COMPLIANCE = `0.4.0.1862.1.1`;
export const szOID_QC_SSCD = `0.4.0.1862.1.4`;
export const PKCS_RSA_SSA_PSS_TRAILER_FIELD_BC = 1;
export const szOID_VERISIGN_PRIVATE_6_9 = `2.16.840.1.113733.1.6.9`;
export const szOID_VERISIGN_ONSITE_JURISDICTION_HASH = `2.16.840.1.113733.1.6.11`;
export const szOID_VERISIGN_BITSTRING_6_13 = `2.16.840.1.113733.1.6.13`;
export const szOID_VERISIGN_ISS_STRONG_CRYPTO = `2.16.840.1.113733.1.8.1`;
export const szOIDVerisign_MessageType = `2.16.840.1.113733.1.9.2`;
export const szOIDVerisign_PkiStatus = `2.16.840.1.113733.1.9.3`;
export const szOIDVerisign_FailInfo = `2.16.840.1.113733.1.9.4`;
export const szOIDVerisign_SenderNonce = `2.16.840.1.113733.1.9.5`;
export const szOIDVerisign_RecipientNonce = `2.16.840.1.113733.1.9.6`;
export const szOIDVerisign_TransactionID = `2.16.840.1.113733.1.9.7`;
export const szOID_NETSCAPE = `2.16.840.1.113730`;
export const szOID_NETSCAPE_CERT_EXTENSION = `2.16.840.1.113730.1`;
export const szOID_NETSCAPE_CERT_TYPE = `2.16.840.1.113730.1.1`;
export const szOID_NETSCAPE_BASE_URL = `2.16.840.1.113730.1.2`;
export const szOID_NETSCAPE_REVOCATION_URL = `2.16.840.1.113730.1.3`;
export const szOID_NETSCAPE_CA_REVOCATION_URL = `2.16.840.1.113730.1.4`;
export const szOID_NETSCAPE_CERT_RENEWAL_URL = `2.16.840.1.113730.1.7`;
export const szOID_NETSCAPE_CA_POLICY_URL = `2.16.840.1.113730.1.8`;
export const szOID_NETSCAPE_SSL_SERVER_NAME = `2.16.840.1.113730.1.12`;
export const szOID_NETSCAPE_COMMENT = `2.16.840.1.113730.1.13`;
export const szOID_NETSCAPE_DATA_TYPE = `2.16.840.1.113730.2`;
export const szOID_NETSCAPE_CERT_SEQUENCE = `2.16.840.1.113730.2.5`;
export const NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE = 128;
export const NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE = 64;
export const NETSCAPE_SMIME_CERT_TYPE = 32;
export const NETSCAPE_SIGN_CERT_TYPE = 16;
export const NETSCAPE_SSL_CA_CERT_TYPE = 4;
export const NETSCAPE_SMIME_CA_CERT_TYPE = 2;
export const NETSCAPE_SIGN_CA_CERT_TYPE = 1;
export const szOID_CT_PKI_DATA = `1.3.6.1.5.5.7.12.2`;
export const szOID_CT_PKI_RESPONSE = `1.3.6.1.5.5.7.12.3`;
export const szOID_PKIX_NO_SIGNATURE = `1.3.6.1.5.5.7.6.2`;
export const szOID_CMC = `1.3.6.1.5.5.7.7`;
export const szOID_CMC_STATUS_INFO = `1.3.6.1.5.5.7.7.1`;
export const szOID_CMC_IDENTIFICATION = `1.3.6.1.5.5.7.7.2`;
export const szOID_CMC_IDENTITY_PROOF = `1.3.6.1.5.5.7.7.3`;
export const szOID_CMC_DATA_RETURN = `1.3.6.1.5.5.7.7.4`;
export const szOID_CMC_TRANSACTION_ID = `1.3.6.1.5.5.7.7.5`;
export const szOID_CMC_SENDER_NONCE = `1.3.6.1.5.5.7.7.6`;
export const szOID_CMC_RECIPIENT_NONCE = `1.3.6.1.5.5.7.7.7`;
export const szOID_CMC_ADD_EXTENSIONS = `1.3.6.1.5.5.7.7.8`;
export const szOID_CMC_ENCRYPTED_POP = `1.3.6.1.5.5.7.7.9`;
export const szOID_CMC_DECRYPTED_POP = `1.3.6.1.5.5.7.7.10`;
export const szOID_CMC_LRA_POP_WITNESS = `1.3.6.1.5.5.7.7.11`;
export const szOID_CMC_GET_CERT = `1.3.6.1.5.5.7.7.15`;
export const szOID_CMC_GET_CRL = `1.3.6.1.5.5.7.7.16`;
export const szOID_CMC_REVOKE_REQUEST = `1.3.6.1.5.5.7.7.17`;
export const szOID_CMC_REG_INFO = `1.3.6.1.5.5.7.7.18`;
export const szOID_CMC_RESPONSE_INFO = `1.3.6.1.5.5.7.7.19`;
export const szOID_CMC_QUERY_PENDING = `1.3.6.1.5.5.7.7.21`;
export const szOID_CMC_ID_POP_LINK_RANDOM = `1.3.6.1.5.5.7.7.22`;
export const szOID_CMC_ID_POP_LINK_WITNESS = `1.3.6.1.5.5.7.7.23`;
export const szOID_CMC_ID_CONFIRM_CERT_ACCEPTANCE = `1.3.6.1.5.5.7.7.24`;
export const szOID_CMC_ADD_ATTRIBUTES = `1.3.6.1.4.1.311.10.10.1`;
export const CMC_TAGGED_CERT_REQUEST_CHOICE = 1;
export const CMC_OTHER_INFO_NO_CHOICE = 0;
export const CMC_OTHER_INFO_FAIL_CHOICE = 1;
export const CMC_OTHER_INFO_PEND_CHOICE = 2;
export const CMC_STATUS_SUCCESS = 0;
export const CMC_STATUS_FAILED = 2;
export const CMC_STATUS_PENDING = 3;
export const CMC_STATUS_NO_SUPPORT = 4;
export const CMC_STATUS_CONFIRM_REQUIRED = 5;
export const CMC_FAIL_BAD_ALG = 0;
export const CMC_FAIL_BAD_MESSAGE_CHECK = 1;
export const CMC_FAIL_BAD_REQUEST = 2;
export const CMC_FAIL_BAD_TIME = 3;
export const CMC_FAIL_BAD_CERT_ID = 4;
export const CMC_FAIL_UNSUPORTED_EXT = 5;
export const CMC_FAIL_MUST_ARCHIVE_KEYS = 6;
export const CMC_FAIL_BAD_IDENTITY = 7;
export const CMC_FAIL_POP_REQUIRED = 8;
export const CMC_FAIL_POP_FAILED = 9;
export const CMC_FAIL_NO_KEY_REUSE = 10;
export const CMC_FAIL_INTERNAL_CA_ERROR = 11;
export const CMC_FAIL_TRY_LATER = 12;
export const szOID_LOYALTY_OTHER_LOGOTYPE = `1.3.6.1.5.5.7.20.1`;
export const szOID_BACKGROUND_OTHER_LOGOTYPE = `1.3.6.1.5.5.7.20.2`;
export const CERT_BIOMETRIC_PICTURE_TYPE = 0;
export const CERT_BIOMETRIC_SIGNATURE_TYPE = 1;
export const OCSP_REQUEST_V1 = 0;
export const OCSP_SUCCESSFUL_RESPONSE = 0;
export const OCSP_MALFORMED_REQUEST_RESPONSE = 1;
export const OCSP_INTERNAL_ERROR_RESPONSE = 2;
export const OCSP_TRY_LATER_RESPONSE = 3;
export const OCSP_SIG_REQUIRED_RESPONSE = 5;
export const OCSP_UNAUTHORIZED_RESPONSE = 6;
export const szOID_PKIX_OCSP_BASIC_SIGNED_RESPONSE = `1.3.6.1.5.5.7.48.1.1`;
export const OCSP_BASIC_GOOD_CERT_STATUS = 0;
export const OCSP_BASIC_REVOKED_CERT_STATUS = 1;
export const OCSP_BASIC_UNKNOWN_CERT_STATUS = 2;
export const OCSP_BASIC_RESPONSE_V1 = 0;
export const OCSP_BASIC_BY_NAME_RESPONDER_ID = 1;
export const OCSP_BASIC_BY_KEY_RESPONDER_ID = 2;
export const CRYPT_OID_ENCODE_OBJECT_FUNC = `CryptDllEncodeObject`;
export const CRYPT_OID_DECODE_OBJECT_FUNC = `CryptDllDecodeObject`;
export const CRYPT_OID_ENCODE_OBJECT_EX_FUNC = `CryptDllEncodeObjectEx`;
export const CRYPT_OID_DECODE_OBJECT_EX_FUNC = `CryptDllDecodeObjectEx`;
export const CRYPT_OID_CREATE_COM_OBJECT_FUNC = `CryptDllCreateCOMObject`;
export const CRYPT_OID_VERIFY_REVOCATION_FUNC = `CertDllVerifyRevocation`;
export const CRYPT_OID_VERIFY_CTL_USAGE_FUNC = `CertDllVerifyCTLUsage`;
export const CRYPT_OID_FORMAT_OBJECT_FUNC = `CryptDllFormatObject`;
export const CRYPT_OID_FIND_OID_INFO_FUNC = `CryptDllFindOIDInfo`;
export const CRYPT_OID_FIND_LOCALIZED_NAME_FUNC = `CryptDllFindLocalizedName`;
export const CRYPT_OID_REGPATH = `Software\\Microsoft\\Cryptography\\OID`;
export const CRYPT_OID_REG_ENCODING_TYPE_PREFIX = `EncodingType `;
export const CRYPT_OID_REG_DLL_VALUE_NAME = `Dll`;
export const CRYPT_OID_REG_FUNC_NAME_VALUE_NAME = `FuncName`;
export const CRYPT_OID_REG_FUNC_NAME_VALUE_NAME_A = `FuncName`;
export const CRYPT_OID_REG_FLAGS_VALUE_NAME = `CryptFlags`;
export const CRYPT_DEFAULT_OID = `DEFAULT`;
export const CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG = 1;
export const CRYPT_GET_INSTALLED_OID_FUNC_FLAG = 1;
export const CRYPT_REGISTER_FIRST_INDEX = 0;
export const CRYPT_REGISTER_LAST_INDEX = 4294967295;
export const CRYPT_MATCH_ANY_ENCODING_TYPE = 4294967295;
export const CALG_OID_INFO_CNG_ONLY = 4294967295;
export const CALG_OID_INFO_PARAMETERS = 4294967294;
export const CRYPT_OID_INFO_HASH_PARAMETERS_ALGORITHM = `CryptOIDInfoHashParameters`;
export const CRYPT_OID_INFO_ECC_PARAMETERS_ALGORITHM = `CryptOIDInfoECCParameters`;
export const CRYPT_OID_INFO_MGF1_PARAMETERS_ALGORITHM = `CryptOIDInfoMgf1Parameters`;
export const CRYPT_OID_INFO_NO_SIGN_ALGORITHM = `CryptOIDInfoNoSign`;
export const CRYPT_OID_INFO_OAEP_PARAMETERS_ALGORITHM = `CryptOIDInfoOAEPParameters`;
export const CRYPT_OID_INFO_ECC_WRAP_PARAMETERS_ALGORITHM = `CryptOIDInfoECCWrapParameters`;
export const CRYPT_OID_INFO_NO_PARAMETERS_ALGORITHM = `CryptOIDInfoNoParameters`;
export const CRYPT_HASH_ALG_OID_GROUP_ID = 1;
export const CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2;
export const CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3;
export const CRYPT_SIGN_ALG_OID_GROUP_ID = 4;
export const CRYPT_RDN_ATTR_OID_GROUP_ID = 5;
export const CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6;
export const CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7;
export const CRYPT_POLICY_OID_GROUP_ID = 8;
export const CRYPT_TEMPLATE_OID_GROUP_ID = 9;
export const CRYPT_KDF_OID_GROUP_ID = 10;
export const CRYPT_LAST_OID_GROUP_ID = 10;
export const CRYPT_FIRST_ALG_OID_GROUP_ID = 1;
export const CRYPT_LAST_ALG_OID_GROUP_ID = 4;
export const CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG = 1;
export const CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG = 2;
export const CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG = 4;
export const CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG = 2147483648;
export const CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG = 1073741824;
export const CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = 536870912;
export const CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = 268435456;
export const CRYPT_OID_INFO_OID_KEY = 1;
export const CRYPT_OID_INFO_NAME_KEY = 2;
export const CRYPT_OID_INFO_ALGID_KEY = 3;
export const CRYPT_OID_INFO_SIGN_KEY = 4;
export const CRYPT_OID_INFO_CNG_ALGID_KEY = 5;
export const CRYPT_OID_INFO_CNG_SIGN_KEY = 6;
export const CRYPT_OID_INFO_OID_KEY_FLAGS_MASK = 4294901760;
export const CRYPT_OID_DISABLE_SEARCH_DS_FLAG = 2147483648;
export const CRYPT_OID_PREFER_CNG_ALGID_FLAG = 1073741824;
export const CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920;
export const CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16;
export const CRYPT_INSTALL_OID_INFO_BEFORE_FLAG = 1;
export const CRYPT_LOCALIZED_NAME_ENCODING_TYPE = 0;
export const CRYPT_LOCALIZED_NAME_OID = `LocalizedNames`;
export const CERT_STRONG_SIGN_ECDSA_ALGORITHM = `ECDSA`;
export const CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE = 1;
export const CERT_STRONG_SIGN_OID_INFO_CHOICE = 2;
export const szOID_CERT_STRONG_SIGN_OS_PREFIX = `1.3.6.1.4.1.311.72.1.`;
export const szOID_CERT_STRONG_SIGN_OS_1 = `1.3.6.1.4.1.311.72.1.1`;
export const szOID_CERT_STRONG_SIGN_OS_CURRENT = `1.3.6.1.4.1.311.72.1.1`;
export const szOID_CERT_STRONG_KEY_OS_PREFIX = `1.3.6.1.4.1.311.72.2.`;
export const szOID_CERT_STRONG_KEY_OS_1 = `1.3.6.1.4.1.311.72.2.1`;
export const szOID_CERT_STRONG_KEY_OS_CURRENT = `1.3.6.1.4.1.311.72.2.1`;
export const szOID_PKCS_7_DATA = `1.2.840.113549.1.7.1`;
export const szOID_PKCS_7_SIGNED = `1.2.840.113549.1.7.2`;
export const szOID_PKCS_7_ENVELOPED = `1.2.840.113549.1.7.3`;
export const szOID_PKCS_7_SIGNEDANDENVELOPED = `1.2.840.113549.1.7.4`;
export const szOID_PKCS_7_DIGESTED = `1.2.840.113549.1.7.5`;
export const szOID_PKCS_7_ENCRYPTED = `1.2.840.113549.1.7.6`;
export const szOID_PKCS_9_CONTENT_TYPE = `1.2.840.113549.1.9.3`;
export const szOID_PKCS_9_MESSAGE_DIGEST = `1.2.840.113549.1.9.4`;
export const CMSG_ENCRYPTED = 6;
export const CMSG_MAIL_LIST_HANDLE_KEY_CHOICE = 1;
export const CMSG_KEY_TRANS_RECIPIENT = 1;
export const CMSG_KEY_AGREE_RECIPIENT = 2;
export const CMSG_MAIL_LIST_RECIPIENT = 3;
export const CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG = 2147483648;
export const CMSG_RC4_NO_SALT_FLAG = 1073741824;
export const CMSG_INDEFINITE_LENGTH = 4294967295;
export const CMSG_BARE_CONTENT_FLAG = 1;
export const CMSG_LENGTH_ONLY_FLAG = 2;
export const CMSG_DETACHED_FLAG = 4;
export const CMSG_AUTHENTICATED_ATTRIBUTES_FLAG = 8;
export const CMSG_CONTENTS_OCTETS_FLAG = 16;
export const CMSG_MAX_LENGTH_FLAG = 32;
export const CMSG_CMS_ENCAPSULATED_CONTENT_FLAG = 64;
export const CMSG_SIGNED_DATA_NO_SIGN_FLAG = 128;
export const CMSG_CRYPT_RELEASE_CONTEXT_FLAG = 32768;
export const CMSG_TYPE_PARAM = 1;
export const CMSG_CONTENT_PARAM = 2;
export const CMSG_BARE_CONTENT_PARAM = 3;
export const CMSG_INNER_CONTENT_TYPE_PARAM = 4;
export const CMSG_SIGNER_COUNT_PARAM = 5;
export const CMSG_SIGNER_INFO_PARAM = 6;
export const CMSG_SIGNER_CERT_INFO_PARAM = 7;
export const CMSG_SIGNER_HASH_ALGORITHM_PARAM = 8;
export const CMSG_SIGNER_AUTH_ATTR_PARAM = 9;
export const CMSG_SIGNER_UNAUTH_ATTR_PARAM = 10;
export const CMSG_CERT_COUNT_PARAM = 11;
export const CMSG_CERT_PARAM = 12;
export const CMSG_CRL_COUNT_PARAM = 13;
export const CMSG_CRL_PARAM = 14;
export const CMSG_ENVELOPE_ALGORITHM_PARAM = 15;
export const CMSG_RECIPIENT_COUNT_PARAM = 17;
export const CMSG_RECIPIENT_INDEX_PARAM = 18;
export const CMSG_RECIPIENT_INFO_PARAM = 19;
export const CMSG_HASH_ALGORITHM_PARAM = 20;
export const CMSG_HASH_DATA_PARAM = 21;
export const CMSG_COMPUTED_HASH_PARAM = 22;
export const CMSG_ENCRYPT_PARAM = 26;
export const CMSG_ENCRYPTED_DIGEST = 27;
export const CMSG_ENCODED_SIGNER = 28;
export const CMSG_ENCODED_MESSAGE = 29;
export const CMSG_VERSION_PARAM = 30;
export const CMSG_ATTR_CERT_COUNT_PARAM = 31;
export const CMSG_ATTR_CERT_PARAM = 32;
export const CMSG_CMS_RECIPIENT_COUNT_PARAM = 33;
export const CMSG_CMS_RECIPIENT_INDEX_PARAM = 34;
export const CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM = 35;
export const CMSG_CMS_RECIPIENT_INFO_PARAM = 36;
export const CMSG_UNPROTECTED_ATTR_PARAM = 37;
export const CMSG_SIGNER_CERT_ID_PARAM = 38;
export const CMSG_CMS_SIGNER_INFO_PARAM = 39;
export const CMSG_SIGNED_DATA_V1 = 1;
export const CMSG_SIGNED_DATA_V3 = 3;
export const CMSG_SIGNED_DATA_PKCS_1_5_VERSION = 1;
export const CMSG_SIGNED_DATA_CMS_VERSION = 3;
export const CMSG_SIGNER_INFO_V1 = 1;
export const CMSG_SIGNER_INFO_V3 = 3;
export const CMSG_SIGNER_INFO_PKCS_1_5_VERSION = 1;
export const CMSG_SIGNER_INFO_CMS_VERSION = 3;
export const CMSG_HASHED_DATA_V0 = 0;
export const CMSG_HASHED_DATA_V2 = 2;
export const CMSG_HASHED_DATA_PKCS_1_5_VERSION = 0;
export const CMSG_HASHED_DATA_CMS_VERSION = 2;
export const CMSG_ENVELOPED_DATA_V0 = 0;
export const CMSG_ENVELOPED_DATA_V2 = 2;
export const CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION = 0;
export const CMSG_ENVELOPED_DATA_CMS_VERSION = 2;
export const CMSG_ENVELOPED_RECIPIENT_V0 = 0;
export const CMSG_ENVELOPED_RECIPIENT_V2 = 2;
export const CMSG_ENVELOPED_RECIPIENT_V3 = 3;
export const CMSG_ENVELOPED_RECIPIENT_V4 = 4;
export const CMSG_KEY_TRANS_PKCS_1_5_VERSION = 0;
export const CMSG_KEY_TRANS_CMS_VERSION = 2;
export const CMSG_KEY_AGREE_VERSION = 3;
export const CMSG_MAIL_LIST_VERSION = 4;
export const CMSG_CTRL_VERIFY_SIGNATURE = 1;
export const CMSG_CTRL_DECRYPT = 2;
export const CMSG_CTRL_VERIFY_HASH = 5;
export const CMSG_CTRL_ADD_SIGNER = 6;
export const CMSG_CTRL_DEL_SIGNER = 7;
export const CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR = 8;
export const CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR = 9;
export const CMSG_CTRL_ADD_CERT = 10;
export const CMSG_CTRL_DEL_CERT = 11;
export const CMSG_CTRL_ADD_CRL = 12;
export const CMSG_CTRL_DEL_CRL = 13;
export const CMSG_CTRL_ADD_ATTR_CERT = 14;
export const CMSG_CTRL_DEL_ATTR_CERT = 15;
export const CMSG_CTRL_KEY_TRANS_DECRYPT = 16;
export const CMSG_CTRL_KEY_AGREE_DECRYPT = 17;
export const CMSG_CTRL_MAIL_LIST_DECRYPT = 18;
export const CMSG_CTRL_VERIFY_SIGNATURE_EX = 19;
export const CMSG_CTRL_ADD_CMS_SIGNER_INFO = 20;
export const CMSG_CTRL_ENABLE_STRONG_SIGNATURE = 21;
export const CMSG_VERIFY_SIGNER_PUBKEY = 1;
export const CMSG_VERIFY_SIGNER_CERT = 2;
export const CMSG_VERIFY_SIGNER_CHAIN = 3;
export const CMSG_VERIFY_SIGNER_NULL = 4;
export const CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG = 1;
export const CMSG_OID_GEN_ENCRYPT_KEY_FUNC = `CryptMsgDllGenEncryptKey`;
export const CMSG_OID_EXPORT_ENCRYPT_KEY_FUNC = `CryptMsgDllExportEncryptKey`;
export const CMSG_OID_IMPORT_ENCRYPT_KEY_FUNC = `CryptMsgDllImportEncryptKey`;
export const CMSG_DEFAULT_INSTALLABLE_FUNC_OID = 2216203124737;
export const CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG = 1;
export const CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG = 1;
export const CMSG_CONTENT_ENCRYPT_FREE_OBJID_FLAG = 2;
export const CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG = 32768;
export const CMSG_OID_GEN_CONTENT_ENCRYPT_KEY_FUNC = `CryptMsgDllGenContentEncryptKey`;
export const CMSG_OID_CAPI1_GEN_CONTENT_ENCRYPT_KEY_FUNC = `CryptMsgDllGenContentEncryptKey`;
export const CMSG_OID_CNG_GEN_CONTENT_ENCRYPT_KEY_FUNC = `CryptMsgDllCNGGenContentEncryptKey`;
export const CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG = 1;
export const CMSG_KEY_TRANS_ENCRYPT_FREE_OBJID_FLAG = 2;
export const CMSG_OID_EXPORT_KEY_TRANS_FUNC = `CryptMsgDllExportKeyTrans`;
export const CMSG_OID_CAPI1_EXPORT_KEY_TRANS_FUNC = `CryptMsgDllExportKeyTrans`;
export const CMSG_OID_CNG_EXPORT_KEY_TRANS_FUNC = `CryptMsgDllCNGExportKeyTrans`;
export const CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG = 1;
export const CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG = 2;
export const CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG = 4;
export const CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG = 8;
export const CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG = 16;
export const CMSG_KEY_AGREE_ENCRYPT_FREE_OBJID_FLAG = 32;
export const CMSG_OID_EXPORT_KEY_AGREE_FUNC = `CryptMsgDllExportKeyAgree`;
export const CMSG_OID_CAPI1_EXPORT_KEY_AGREE_FUNC = `CryptMsgDllExportKeyAgree`;
export const CMSG_OID_CNG_EXPORT_KEY_AGREE_FUNC = `CryptMsgDllCNGExportKeyAgree`;
export const CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG = 1;
export const CMSG_MAIL_LIST_ENCRYPT_FREE_OBJID_FLAG = 2;
export const CMSG_OID_EXPORT_MAIL_LIST_FUNC = `CryptMsgDllExportMailList`;
export const CMSG_OID_CAPI1_EXPORT_MAIL_LIST_FUNC = `CryptMsgDllExportMailList`;
export const CMSG_OID_IMPORT_KEY_TRANS_FUNC = `CryptMsgDllImportKeyTrans`;
export const CMSG_OID_CAPI1_IMPORT_KEY_TRANS_FUNC = `CryptMsgDllImportKeyTrans`;
export const CMSG_OID_IMPORT_KEY_AGREE_FUNC = `CryptMsgDllImportKeyAgree`;
export const CMSG_OID_CAPI1_IMPORT_KEY_AGREE_FUNC = `CryptMsgDllImportKeyAgree`;
export const CMSG_OID_IMPORT_MAIL_LIST_FUNC = `CryptMsgDllImportMailList`;
export const CMSG_OID_CAPI1_IMPORT_MAIL_LIST_FUNC = `CryptMsgDllImportMailList`;
export const CMSG_OID_CNG_IMPORT_KEY_TRANS_FUNC = `CryptMsgDllCNGImportKeyTrans`;
export const CMSG_OID_CNG_IMPORT_KEY_AGREE_FUNC = `CryptMsgDllCNGImportKeyAgree`;
export const CMSG_OID_CNG_IMPORT_CONTENT_ENCRYPT_KEY_FUNC = `CryptMsgDllCNGImportContentEncryptKey`;
export const CERT_KEY_PROV_HANDLE_PROP_ID = 1;
export const CERT_KEY_PROV_INFO_PROP_ID = 2;
export const CERT_SHA1_HASH_PROP_ID = 3;
export const CERT_MD5_HASH_PROP_ID = 4;
export const CERT_HASH_PROP_ID = 3;
export const CERT_KEY_CONTEXT_PROP_ID = 5;
export const CERT_KEY_SPEC_PROP_ID = 6;
export const CERT_IE30_RESERVED_PROP_ID = 7;
export const CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8;
export const CERT_ENHKEY_USAGE_PROP_ID = 9;
export const CERT_CTL_USAGE_PROP_ID = 9;
export const CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10;
export const CERT_FRIENDLY_NAME_PROP_ID = 11;
export const CERT_PVK_FILE_PROP_ID = 12;
export const CERT_DESCRIPTION_PROP_ID = 13;
export const CERT_ACCESS_STATE_PROP_ID = 14;
export const CERT_SIGNATURE_HASH_PROP_ID = 15;
export const CERT_SMART_CARD_DATA_PROP_ID = 16;
export const CERT_EFS_PROP_ID = 17;
export const CERT_FORTEZZA_DATA_PROP_ID = 18;
export const CERT_ARCHIVED_PROP_ID = 19;
export const CERT_KEY_IDENTIFIER_PROP_ID = 20;
export const CERT_AUTO_ENROLL_PROP_ID = 21;
export const CERT_PUBKEY_ALG_PARA_PROP_ID = 22;
export const CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23;
export const CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24;
export const CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25;
export const CERT_ENROLLMENT_PROP_ID = 26;
export const CERT_DATE_STAMP_PROP_ID = 27;
export const CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28;
export const CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29;
export const CERT_EXTENDED_ERROR_INFO_PROP_ID = 30;
export const CERT_RENEWAL_PROP_ID = 64;
export const CERT_ARCHIVED_KEY_HASH_PROP_ID = 65;
export const CERT_AUTO_ENROLL_RETRY_PROP_ID = 66;
export const CERT_AIA_URL_RETRIEVED_PROP_ID = 67;
export const CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68;
export const CERT_BACKED_UP_PROP_ID = 69;
export const CERT_OCSP_RESPONSE_PROP_ID = 70;
export const CERT_REQUEST_ORIGINATOR_PROP_ID = 71;
export const CERT_SOURCE_LOCATION_PROP_ID = 72;
export const CERT_SOURCE_URL_PROP_ID = 73;
export const CERT_NEW_KEY_PROP_ID = 74;
export const CERT_OCSP_CACHE_PREFIX_PROP_ID = 75;
export const CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76;
export const CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77;
export const CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78;
export const CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79;
export const CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80;
export const CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81;
export const CERT_CA_DISABLE_CRL_PROP_ID = 82;
export const CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83;
export const CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84;
export const CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85;
export const CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86;
export const CERT_CEP_PROP_ID = 87;
export const CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89;
export const CERT_SCARD_PIN_ID_PROP_ID = 90;
export const CERT_SCARD_PIN_INFO_PROP_ID = 91;
export const CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92;
export const CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93;
export const CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94;
export const CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95;
export const CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96;
export const CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97;
export const CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98;
export const CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99;
export const CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100;
export const CERT_SMART_CARD_READER_PROP_ID = 101;
export const CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102;
export const CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103;
export const CERT_DISALLOWED_FILETIME_PROP_ID = 104;
export const CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105;
export const CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106;
export const CERT_SHA256_HASH_PROP_ID = 107;
export const CERT_SCEP_SERVER_CERTS_PROP_ID = 108;
export const CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109;
export const CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110;
export const CERT_SCEP_CA_CERT_PROP_ID = 111;
export const CERT_SCEP_SIGNER_CERT_PROP_ID = 112;
export const CERT_SCEP_NONCE_PROP_ID = 113;
export const CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114;
export const CERT_SCEP_FLAGS_PROP_ID = 115;
export const CERT_SCEP_GUID_PROP_ID = 116;
export const CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117;
export const CERT_ISOLATED_KEY_PROP_ID = 118;
export const CERT_SERIAL_CHAIN_PROP_ID = 119;
export const CERT_KEY_CLASSIFICATION_PROP_ID = 120;
export const CERT_OCSP_MUST_STAPLE_PROP_ID = 121;
export const CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122;
export const CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123;
export const CERT_PIN_SHA256_HASH_PROP_ID = 124;
export const CERT_CLR_DELETE_KEY_PROP_ID = 125;
export const CERT_NOT_BEFORE_FILETIME_PROP_ID = 126;
export const CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127;
export const CERT_FIRST_RESERVED_PROP_ID = 128;
export const CERT_LAST_RESERVED_PROP_ID = 32767;
export const CERT_FIRST_USER_PROP_ID = 32768;
export const CERT_LAST_USER_PROP_ID = 65535;
export const szOID_CERT_PROP_ID_PREFIX = `1.3.6.1.4.1.311.10.11.`;
export const szOID_CERT_KEY_IDENTIFIER_PROP_ID = `1.3.6.1.4.1.311.10.11.20`;
export const szOID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = `1.3.6.1.4.1.311.10.11.28`;
export const szOID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = `1.3.6.1.4.1.311.10.11.29`;
export const szOID_CERT_MD5_HASH_PROP_ID = `1.3.6.1.4.1.311.10.11.4`;
export const szOID_CERT_SIGNATURE_HASH_PROP_ID = `1.3.6.1.4.1.311.10.11.15`;
export const szOID_DISALLOWED_HASH = `1.3.6.1.4.1.311.10.11.15`;
export const szOID_CERT_DISALLOWED_FILETIME_PROP_ID = `1.3.6.1.4.1.311.10.11.104`;
export const CERT_ACCESS_STATE_WRITE_PERSIST_FLAG = 1;
export const CERT_ACCESS_STATE_SYSTEM_STORE_FLAG = 2;
export const CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG = 4;
export const CERT_ACCESS_STATE_GP_SYSTEM_STORE_FLAG = 8;
export const CERT_ACCESS_STATE_SHARED_USER_FLAG = 16;
export const szOID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION = `1.3.6.1.4.1.311.60.3.1`;
export const szOID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION = `1.3.6.1.4.1.311.60.3.2`;
export const szOID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL = `1.3.6.1.4.1.311.60.3.3`;
export const CERT_STORE_PROV_MSG = 2216203124737;
export const CERT_STORE_PROV_MEMORY = 4415226380290;
export const CERT_STORE_PROV_FILE = 5514738008067;
export const CERT_STORE_PROV_REG = 1518001159355236356n;
export const CERT_STORE_PROV_PKCS7 = 6614249635845;
export const CERT_STORE_PROV_SERIALIZED = 7713761263622;
export const CERT_STORE_PROV_FILENAME_A = 290488781625098247n;
export const CERT_STORE_PROV_FILENAME_W = 16509854285832;
export const CERT_STORE_PROV_FILENAME = 8;
export const CERT_STORE_PROV_SYSTEM_A = 13211319402505;
export const CERT_STORE_PROV_SYSTEM_W = 12111807774730;
export const CERT_STORE_PROV_SYSTEM = 10;
export const CERT_STORE_PROV_COLLECTION = 1147907319267339;
export const CERT_STORE_PROV_SYSTEM_REGISTRY_A = 14310831030284;
export const CERT_STORE_PROV_SYSTEM_REGISTRY_W = 15410342658061;
export const CERT_STORE_PROV_SYSTEM_REGISTRY = 13;
export const CERT_STORE_PROV_PHYSICAL_W = 11012296146958;
export const CERT_STORE_PROV_PHYSICAL = 14;
export const CERT_STORE_PROV_SMART_CARD_W = 1806231535506948111n;
export const CERT_STORE_PROV_SMART_CARD = 15;
export const CERT_STORE_PROV_LDAP_W = 70385924046864;
export const CERT_STORE_PROV_LDAP = 16;
export const CERT_STORE_PROV_PKCS12 = 19808389169169;
export const sz_CERT_STORE_PROV_MEMORY = `Memory`;
export const sz_CERT_STORE_PROV_FILENAME_W = `File`;
export const sz_CERT_STORE_PROV_FILENAME = `File`;
export const sz_CERT_STORE_PROV_SYSTEM_W = `System`;
export const sz_CERT_STORE_PROV_SYSTEM = `System`;
export const sz_CERT_STORE_PROV_PKCS7 = `PKCS7`;
export const sz_CERT_STORE_PROV_PKCS12 = `PKCS12`;
export const sz_CERT_STORE_PROV_SERIALIZED = `Serialized`;
export const sz_CERT_STORE_PROV_COLLECTION = `Collection`;
export const sz_CERT_STORE_PROV_SYSTEM_REGISTRY_W = `SystemRegistry`;
export const sz_CERT_STORE_PROV_SYSTEM_REGISTRY = `SystemRegistry`;
export const sz_CERT_STORE_PROV_PHYSICAL_W = `Physical`;
export const sz_CERT_STORE_PROV_PHYSICAL = `Physical`;
export const sz_CERT_STORE_PROV_SMART_CARD_W = `SmartCard`;
export const sz_CERT_STORE_PROV_SMART_CARD = `SmartCard`;
export const sz_CERT_STORE_PROV_LDAP_W = `Ldap`;
export const sz_CERT_STORE_PROV_LDAP = `Ldap`;
export const CERT_STORE_SIGNATURE_FLAG = 1;
export const CERT_STORE_TIME_VALIDITY_FLAG = 2;
export const CERT_STORE_REVOCATION_FLAG = 4;
export const CERT_STORE_NO_CRL_FLAG = 65536;
export const CERT_STORE_NO_ISSUER_FLAG = 131072;
export const CERT_STORE_BASE_CRL_FLAG = 256;
export const CERT_STORE_DELTA_CRL_FLAG = 512;
export const CERT_STORE_UNSAFE_PHYSICAL_FLAG = 32;
export const CERT_STORE_SHARE_STORE_FLAG = 64;
export const CERT_STORE_MANIFOLD_FLAG = 256;
export const CERT_SYSTEM_STORE_MASK = 4294901760;
export const CERT_SYSTEM_STORE_UNPROTECTED_FLAG = 1073741824;
export const CERT_SYSTEM_STORE_DEFER_READ_FLAG = 536870912;
export const CERT_SYSTEM_STORE_LOCATION_SHIFT = 16;
export const CERT_SYSTEM_STORE_CURRENT_USER_ID = 1;
export const CERT_SYSTEM_STORE_LOCAL_MACHINE_ID = 2;
export const CERT_SYSTEM_STORE_CURRENT_SERVICE_ID = 4;
export const CERT_SYSTEM_STORE_SERVICES_ID = 5;
export const CERT_SYSTEM_STORE_USERS_ID = 6;
export const CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID = 7;
export const CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID = 8;
export const CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID = 9;
export const CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID = 10;
export const CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH = `Software\\Policies\\Microsoft\\SystemCertificates`;
export const CERT_EFSBLOB_VALUE_NAME = `EFSBlob`;
export const CERT_PROT_ROOT_FLAGS_VALUE_NAME = `Flags`;
export const CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG = 1;
export const CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG = 2;
export const CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG = 4;
export const CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG = 8;
export const CERT_PROT_ROOT_ONLY_LM_GPT_FLAG = 8;
export const CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG = 16;
export const CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG = 32;
export const CERT_PROT_ROOT_DISABLE_PEER_TRUST = 65536;
export const CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME = `PeerUsages`;
export const CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME_A = `PeerUsages`;
export const CERT_LOCAL_MACHINE_SYSTEM_STORE_REGPATH = `Software\\Microsoft\\SystemCertificates`;
export const CERT_TRUST_PUB_AUTHENTICODE_FLAGS_VALUE_NAME = `AuthenticodeFlags`;
export const CERT_TRUST_PUB_ALLOW_TRUST_MASK = 3;
export const CERT_TRUST_PUB_ALLOW_END_USER_TRUST = 0;
export const CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST = 1;
export const CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST = 2;
export const CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG = 256;
export const CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG = 512;
export const CERT_OCM_SUBCOMPONENTS_LOCAL_MACHINE_REGPATH = `SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\OC Manager\\Subcomponents`;
export const CERT_OCM_SUBCOMPONENTS_ROOT_AUTO_UPDATE_VALUE_NAME = `RootAutoUpdate`;
export const CERT_DISABLE_ROOT_AUTO_UPDATE_VALUE_NAME = `DisableRootAutoUpdate`;
export const CERT_ENABLE_DISALLOWED_CERT_AUTO_UPDATE_VALUE_NAME = `EnableDisallowedCertAutoUpdate`;
export const CERT_DISABLE_PIN_RULES_AUTO_UPDATE_VALUE_NAME = `DisablePinRulesAutoUpdate`;
export const CERT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME = `RootDirUrl`;
export const CERT_AUTO_UPDATE_SYNC_FROM_DIR_URL_VALUE_NAME = `SyncFromDirUrl`;
export const CERT_AUTH_ROOT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME = `RootDirUrl`;
export const CERT_AUTH_ROOT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME = `SyncDeltaTime`;
export const CERT_AUTH_ROOT_AUTO_UPDATE_FLAGS_VALUE_NAME = `Flags`;
export const CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG = 1;
export const CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG = 2;
export const CERT_AUTO_UPDATE_DISABLE_RANDOM_QUERY_STRING_FLAG = 4;
export const CERT_AUTH_ROOT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME = `LastSyncTime`;
export const CERT_AUTH_ROOT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME = `EncodedCtl`;
export const CERT_AUTH_ROOT_CTL_FILENAME = `authroot.stl`;
export const CERT_AUTH_ROOT_CTL_FILENAME_A = `authroot.stl`;
export const CERT_AUTH_ROOT_CAB_FILENAME = `authrootstl.cab`;
export const CERT_AUTH_ROOT_SEQ_FILENAME = `authrootseq.txt`;
export const CERT_AUTH_ROOT_CERT_EXT = `.crt`;
export const CERT_DISALLOWED_CERT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME = `DisallowedCertSyncDeltaTime`;
export const CERT_DISALLOWED_CERT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME = `DisallowedCertLastSyncTime`;
export const CERT_DISALLOWED_CERT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME = `DisallowedCertEncodedCtl`;
export const CERT_DISALLOWED_CERT_CTL_FILENAME = `disallowedcert.stl`;
export const CERT_DISALLOWED_CERT_CTL_FILENAME_A = `disallowedcert.stl`;
export const CERT_DISALLOWED_CERT_CAB_FILENAME = `disallowedcertstl.cab`;
export const CERT_DISALLOWED_CERT_AUTO_UPDATE_LIST_IDENTIFIER = `DisallowedCert_AutoUpdate_1`;
export const CERT_PIN_RULES_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME = `PinRulesSyncDeltaTime`;
export const CERT_PIN_RULES_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME = `PinRulesLastSyncTime`;
export const CERT_PIN_RULES_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME = `PinRulesEncodedCtl`;
export const CERT_PIN_RULES_CTL_FILENAME = `pinrules.stl`;
export const CERT_PIN_RULES_CTL_FILENAME_A = `pinrules.stl`;
export const CERT_PIN_RULES_CAB_FILENAME = `pinrulesstl.cab`;
export const CERT_PIN_RULES_AUTO_UPDATE_LIST_IDENTIFIER = `PinRules_AutoUpdate_1`;
export const CERT_REGISTRY_STORE_REMOTE_FLAG = 65536;
export const CERT_REGISTRY_STORE_SERIALIZED_FLAG = 131072;
export const CERT_REGISTRY_STORE_CLIENT_GPT_FLAG = 2147483648;
export const CERT_REGISTRY_STORE_LM_GPT_FLAG = 16777216;
export const CERT_REGISTRY_STORE_ROAMING_FLAG = 262144;
export const CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG = 524288;
export const CERT_REGISTRY_STORE_EXTERNAL_FLAG = 1048576;
export const CERT_IE_DIRTY_FLAGS_REGPATH = `Software\\Microsoft\\Cryptography\\IEDirtyFlags`;
export const CERT_FILE_STORE_COMMIT_ENABLE_FLAG = 65536;
export const CERT_LDAP_STORE_SIGN_FLAG = 65536;
export const CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG = 131072;
export const CERT_LDAP_STORE_OPENED_FLAG = 262144;
export const CERT_LDAP_STORE_UNBIND_FLAG = 524288;
export const CRYPT_OID_OPEN_STORE_PROV_FUNC = `CertDllOpenStoreProv`;
export const CERT_STORE_PROV_GP_SYSTEM_STORE_FLAG = 32;
export const CERT_STORE_PROV_SHARED_USER_FLAG = 64;
export const CERT_STORE_PROV_CLOSE_FUNC = 0;
export const CERT_STORE_PROV_READ_CERT_FUNC = 1;
export const CERT_STORE_PROV_WRITE_CERT_FUNC = 2;
export const CERT_STORE_PROV_DELETE_CERT_FUNC = 3;
export const CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC = 4;
export const CERT_STORE_PROV_READ_CRL_FUNC = 5;
export const CERT_STORE_PROV_WRITE_CRL_FUNC = 6;
export const CERT_STORE_PROV_DELETE_CRL_FUNC = 7;
export const CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC = 8;
export const CERT_STORE_PROV_READ_CTL_FUNC = 9;
export const CERT_STORE_PROV_WRITE_CTL_FUNC = 10;
export const CERT_STORE_PROV_DELETE_CTL_FUNC = 11;
export const CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC = 12;
export const CERT_STORE_PROV_CONTROL_FUNC = 13;
export const CERT_STORE_PROV_FIND_CERT_FUNC = 14;
export const CERT_STORE_PROV_FREE_FIND_CERT_FUNC = 15;
export const CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC = 16;
export const CERT_STORE_PROV_FIND_CRL_FUNC = 17;
export const CERT_STORE_PROV_FREE_FIND_CRL_FUNC = 18;
export const CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC = 19;
export const CERT_STORE_PROV_FIND_CTL_FUNC = 20;
export const CERT_STORE_PROV_FREE_FIND_CTL_FUNC = 21;
export const CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC = 22;
export const CERT_STORE_PROV_WRITE_ADD_FLAG = 1;
export const CERT_STORE_SAVE_AS_PKCS12 = 3;
export const CERT_CLOSE_STORE_FORCE_FLAG = 1;
export const CERT_CLOSE_STORE_CHECK_FLAG = 2;
export const CERT_COMPARE_MASK = 65535;
export const CERT_COMPARE_ANY = 0;
export const CERT_COMPARE_SHA1_HASH = 1;
export const CERT_COMPARE_NAME = 2;
export const CERT_COMPARE_ATTR = 3;
export const CERT_COMPARE_MD5_HASH = 4;
export const CERT_COMPARE_PROPERTY = 5;
export const CERT_COMPARE_PUBLIC_KEY = 6;
export const CERT_COMPARE_HASH = 1;
export const CERT_COMPARE_NAME_STR_A = 7;
export const CERT_COMPARE_NAME_STR_W = 8;
export const CERT_COMPARE_KEY_SPEC = 9;
export const CERT_COMPARE_ENHKEY_USAGE = 10;
export const CERT_COMPARE_CTL_USAGE = 10;
export const CERT_COMPARE_SUBJECT_CERT = 11;
export const CERT_COMPARE_ISSUER_OF = 12;
export const CERT_COMPARE_EXISTING = 13;
export const CERT_COMPARE_SIGNATURE_HASH = 14;
export const CERT_COMPARE_KEY_IDENTIFIER = 15;
export const CERT_COMPARE_CERT_ID = 16;
export const CERT_COMPARE_CROSS_CERT_DIST_POINTS = 17;
export const CERT_COMPARE_PUBKEY_MD5_HASH = 18;
export const CERT_COMPARE_SUBJECT_INFO_ACCESS = 19;
export const CERT_COMPARE_HASH_STR = 20;
export const CERT_COMPARE_HAS_PRIVATE_KEY = 21;
export const CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG = 2147483648;
export const CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG = 1073741824;
export const CTL_ENTRY_FROM_PROP_CHAIN_FLAG = 1;
export const CRL_FIND_ANY = 0;
export const CRL_FIND_ISSUED_BY = 1;
export const CRL_FIND_EXISTING = 2;
export const CRL_FIND_ISSUED_FOR = 3;
export const CRL_FIND_ISSUED_BY_AKI_FLAG = 1;
export const CRL_FIND_ISSUED_BY_SIGNATURE_FLAG = 2;
export const CRL_FIND_ISSUED_BY_DELTA_FLAG = 4;
export const CRL_FIND_ISSUED_BY_BASE_FLAG = 8;
export const CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG = 16;
export const CERT_STORE_ADD_NEW = 1;
export const CERT_STORE_ADD_USE_EXISTING = 2;
export const CERT_STORE_ADD_REPLACE_EXISTING = 3;
export const CERT_STORE_ADD_ALWAYS = 4;
export const CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES = 5;
export const CERT_STORE_ADD_NEWER = 6;
export const CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES = 7;
export const CERT_STORE_CERTIFICATE_CONTEXT = 1;
export const CERT_STORE_CRL_CONTEXT = 2;
export const CERT_STORE_CTL_CONTEXT = 3;
export const CTL_ANY_SUBJECT_TYPE = 1;
export const CTL_CERT_SUBJECT_TYPE = 2;
export const CTL_FIND_NO_LIST_ID_CBDATA = 4294967295;
export const CERT_STORE_CTRL_RESYNC = 1;
export const CERT_STORE_CTRL_NOTIFY_CHANGE = 2;
export const CERT_STORE_CTRL_COMMIT = 3;
export const CERT_STORE_CTRL_AUTO_RESYNC = 4;
export const CERT_STORE_CTRL_CANCEL_NOTIFY = 5;
export const CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096;
export const CERT_CREATE_CONTEXT_NOCOPY_FLAG = 1;
export const CERT_CREATE_CONTEXT_SORTED_FLAG = 2;
export const CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG = 4;
export const CERT_CREATE_CONTEXT_NO_ENTRY_FLAG = 8;
export const CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG = 1;
export const CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG = 2;
export const CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG = 4;
export const CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG = 8;
export const CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG = 1;
export const CERT_PHYSICAL_STORE_DEFAULT_NAME = `.Default`;
export const CERT_PHYSICAL_STORE_GROUP_POLICY_NAME = `.GroupPolicy`;
export const CERT_PHYSICAL_STORE_LOCAL_MACHINE_NAME = `.LocalMachine`;
export const CERT_PHYSICAL_STORE_DS_USER_CERTIFICATE_NAME = `.UserCertificate`;
export const CERT_PHYSICAL_STORE_LOCAL_MACHINE_GROUP_POLICY_NAME = `.LocalMachineGroupPolicy`;
export const CERT_PHYSICAL_STORE_ENTERPRISE_NAME = `.Enterprise`;
export const CERT_PHYSICAL_STORE_AUTH_ROOT_NAME = `.AuthRoot`;
export const CERT_PHYSICAL_STORE_SMART_CARD_NAME = `.SmartCard`;
export const CRYPT_OID_OPEN_SYSTEM_STORE_PROV_FUNC = `CertDllOpenSystemStoreProv`;
export const CRYPT_OID_REGISTER_SYSTEM_STORE_FUNC = `CertDllRegisterSystemStore`;
export const CRYPT_OID_UNREGISTER_SYSTEM_STORE_FUNC = `CertDllUnregisterSystemStore`;
export const CRYPT_OID_ENUM_SYSTEM_STORE_FUNC = `CertDllEnumSystemStore`;
export const CRYPT_OID_REGISTER_PHYSICAL_STORE_FUNC = `CertDllRegisterPhysicalStore`;
export const CRYPT_OID_UNREGISTER_PHYSICAL_STORE_FUNC = `CertDllUnregisterPhysicalStore`;
export const CRYPT_OID_ENUM_PHYSICAL_STORE_FUNC = `CertDllEnumPhysicalStore`;
export const CRYPT_OID_SYSTEM_STORE_LOCATION_VALUE_NAME = `SystemStoreLocation`;
export const CMSG_TRUSTED_SIGNER_FLAG = 1;
export const CMSG_SIGNER_ONLY_FLAG = 2;
export const CMSG_USE_SIGNER_INDEX_FLAG = 4;
export const CMSG_CMS_ENCAPSULATED_CTL_FLAG = 32768;
export const CMSG_ENCODE_SORTED_CTL_FLAG = 1;
export const CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 2;
export const CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG = 1;
export const CERT_VERIFY_TRUSTED_SIGNERS_FLAG = 2;
export const CERT_VERIFY_NO_TIME_CHECK_FLAG = 4;
export const CERT_VERIFY_ALLOW_MORE_USAGE_FLAG = 8;
export const CERT_VERIFY_UPDATED_CTL_FLAG = 1;
export const CERT_CONTEXT_REVOCATION_TYPE = 1;
export const CERT_VERIFY_REV_CHAIN_FLAG = 1;
export const CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION = 2;
export const CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG = 4;
export const CERT_VERIFY_REV_SERVER_OCSP_FLAG = 8;
export const CERT_VERIFY_REV_NO_OCSP_FAILOVER_TO_CRL_FLAG = 16;
export const CERT_VERIFY_REV_SERVER_OCSP_WIRE_ONLY_FLAG = 32;
export const CERT_UNICODE_IS_RDN_ATTRS_FLAG = 1;
export const CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG = 2;
export const CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB = 1;
export const CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT = 2;
export const CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL = 3;
export const CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE = 4;
export const CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY = 1;
export const CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT = 2;
export const CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN = 3;
export const CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL = 4;
export const CRYPT_VERIFY_CERT_SIGN_CHECK_WEAK_HASH_FLAG = 8;
export const CRYPT_OID_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = `CryptDllExtractEncodedSignatureParameters`;
export const CRYPT_OID_SIGN_AND_ENCODE_HASH_FUNC = `CryptDllSignAndEncodeHash`;
export const CRYPT_OID_VERIFY_ENCODED_SIGNATURE_FUNC = `CryptDllVerifyEncodedSignature`;
export const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC = `CryptDllExportPublicKeyInfoEx`;
export const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = `CryptDllExportPublicKeyInfoEx2`;
export const CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = `CryptDllExportPublicKeyInfoFromBCryptKeyHandle`;
export const CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC = `CryptDllImportPublicKeyInfoEx`;
export const CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = `CryptDllImportPublicKeyInfoEx2`;
export const CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG = 128;
export const CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK = 458752;
export const CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG = 65536;
export const CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG = 131072;
export const CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG = 262144;
export const CRYPT_OID_IMPORT_PRIVATE_KEY_INFO_FUNC = `CryptDllImportPrivateKeyInfoEx`;
export const CRYPT_OID_EXPORT_PRIVATE_KEY_INFO_FUNC = `CryptDllExportPrivateKeyInfoEx`;
export const CRYPT_DELETE_KEYSET = 16;
export const CERT_XML_NAME_STR = 4;
export const CERT_NAME_STR_SEMICOLON_FLAG = 1073741824;
export const CERT_NAME_STR_NO_PLUS_FLAG = 536870912;
export const CERT_NAME_STR_NO_QUOTING_FLAG = 268435456;
export const CERT_NAME_STR_CRLF_FLAG = 134217728;
export const CERT_NAME_STR_COMMA_FLAG = 67108864;
export const CERT_NAME_STR_REVERSE_FLAG = 33554432;
export const CERT_NAME_STR_FORWARD_FLAG = 16777216;
export const CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536;
export const CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072;
export const CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144;
export const CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288;
export const CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576;
export const CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152;
export const CERT_NAME_EMAIL_TYPE = 1;
export const CERT_NAME_RDN_TYPE = 2;
export const CERT_NAME_ATTR_TYPE = 3;
export const CERT_NAME_SIMPLE_DISPLAY_TYPE = 4;
export const CERT_NAME_FRIENDLY_DISPLAY_TYPE = 5;
export const CERT_NAME_DNS_TYPE = 6;
export const CERT_NAME_URL_TYPE = 7;
export const CERT_NAME_UPN_TYPE = 8;
export const CERT_NAME_ISSUER_FLAG = 1;
export const CERT_NAME_DISABLE_IE4_UTF8_FLAG = 65536;
export const CERT_NAME_SEARCH_ALL_NAMES_FLAG = 2;
export const CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG = 1;
export const CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG = 2;
export const CRYPT_MESSAGE_KEYID_SIGNER_FLAG = 4;
export const CRYPT_MESSAGE_SILENT_KEYSET_FLAG = 64;
export const CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG = 4;
export const CREDENTIAL_OID_PASSWORD_CREDENTIALS_A = 2216203124737;
export const CREDENTIAL_OID_PASSWORD_CREDENTIALS_W = 4415226380290;
export const CREDENTIAL_OID_PASSWORD_CREDENTIALS = 2;
export const SCHEME_OID_RETRIEVE_ENCODED_OBJECT_FUNC = `SchemeDllRetrieveEncodedObject`;
export const SCHEME_OID_RETRIEVE_ENCODED_OBJECTW_FUNC = `SchemeDllRetrieveEncodedObjectW`;
export const CONTEXT_OID_CREATE_OBJECT_CONTEXT_FUNC = `ContextDllCreateObjectContext`;
export const CONTEXT_OID_CERTIFICATE = 2216203124737;
export const CONTEXT_OID_CRL = 4415226380290;
export const CONTEXT_OID_CTL = 5514738008067;
export const CONTEXT_OID_PKCS7 = 1518001159355236356n;
export const CONTEXT_OID_CAPI2_ANY = 6614249635845;
export const CONTEXT_OID_OCSP_RESP = 7713761263622;
export const CRYPT_RETRIEVE_MULTIPLE_OBJECTS = 1;
export const CRYPT_CACHE_ONLY_RETRIEVAL = 2;
export const CRYPT_WIRE_ONLY_RETRIEVAL = 4;
export const CRYPT_DONT_CACHE_RESULT = 8;
export const CRYPT_ASYNC_RETRIEVAL = 16;
export const CRYPT_STICKY_CACHE_RETRIEVAL = 4096;
export const CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL = 8192;
export const CRYPT_OFFLINE_CHECK_RETRIEVAL = 16384;
export const CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE = 32768;
export const CRYPT_LDAP_SIGN_RETRIEVAL = 65536;
export const CRYPT_NO_AUTH_RETRIEVAL = 131072;
export const CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL = 262144;
export const CRYPT_AIA_RETRIEVAL = 524288;
export const CRYPT_HTTP_POST_RETRIEVAL = 1048576;
export const CRYPT_PROXY_CACHE_RETRIEVAL = 2097152;
export const CRYPT_NOT_MODIFIED_RETRIEVAL = 4194304;
export const CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL = 8388608;
export const CRYPT_RANDOM_QUERY_STRING_RETRIEVAL = 67108864;
export const CRYPT_ENABLE_FILE_RETRIEVAL = 134217728;
export const CRYPT_CREATE_NEW_FLUSH_ENTRY = 268435456;
export const CRYPT_VERIFY_CONTEXT_SIGNATURE = 32;
export const CRYPT_VERIFY_DATA_HASH = 64;
export const CRYPT_KEEP_TIME_VALID = 128;
export const CRYPT_DONT_VERIFY_SIGNATURE = 256;
export const CRYPT_DONT_CHECK_TIME_VALIDITY = 512;
export const CRYPT_CHECK_FRESHNESS_TIME_VALIDITY = 1024;
export const CRYPT_ACCUMULATIVE_TIMEOUT = 2048;
export const CRYPT_OCSP_ONLY_RETRIEVAL = 16777216;
export const CRYPT_NO_OCSP_FAILOVER_TO_CRL_RETRIEVAL = 33554432;
export const CRYPTNET_URL_CACHE_PRE_FETCH_NONE = 0;
export const CRYPTNET_URL_CACHE_PRE_FETCH_BLOB = 1;
export const CRYPTNET_URL_CACHE_PRE_FETCH_CRL = 2;
export const CRYPTNET_URL_CACHE_PRE_FETCH_OCSP = 3;
export const CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB = 5;
export const CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB = 6;
export const CRYPTNET_URL_CACHE_PRE_FETCH_PIN_RULES_CAB = 7;
export const CRYPTNET_URL_CACHE_DEFAULT_FLUSH = 0;
export const CRYPTNET_URL_CACHE_DISABLE_FLUSH = 4294967295;
export const CRYPTNET_URL_CACHE_RESPONSE_NONE = 0;
export const CRYPTNET_URL_CACHE_RESPONSE_HTTP = 1;
export const CRYPTNET_URL_CACHE_RESPONSE_VALIDATED = 32768;
export const CRYPT_RETRIEVE_MAX_ERROR_CONTENT_LENGTH = 4096;
export const CRYPT_PARAM_ASYNC_RETRIEVAL_COMPLETION = 2216203124737;
export const CRYPT_PARAM_CANCEL_ASYNC_RETRIEVAL = 4415226380290;
export const URL_OID_GET_OBJECT_URL_FUNC = `UrlDllGetObjectUrl`;
export const URL_OID_CERTIFICATE_ISSUER = 2216203124737;
export const URL_OID_CERTIFICATE_CRL_DIST_POINT = 4415226380290;
export const URL_OID_CTL_ISSUER = 5514738008067;
export const URL_OID_CTL_NEXT_UPDATE = 1518001159355236356n;
export const URL_OID_CRL_ISSUER = 6614249635845;
export const URL_OID_CERTIFICATE_FRESHEST_CRL = 7713761263622;
export const URL_OID_CRL_FRESHEST_CRL = 290488781625098247n;
export const URL_OID_CROSS_CERT_DIST_POINT = 16509854285832;
export const URL_OID_CERTIFICATE_OCSP = 13211319402505;
export const URL_OID_CERTIFICATE_OCSP_AND_CRL_DIST_POINT = 12111807774730;
export const URL_OID_CERTIFICATE_CRL_DIST_POINT_AND_OCSP = 1147907319267339;
export const URL_OID_CROSS_CERT_SUBJECT_INFO_ACCESS = 14310831030284;
export const URL_OID_CERTIFICATE_ONLY_OCSP = 15410342658061;
export const TIME_VALID_OID_GET_OBJECT_FUNC = `TimeValidDllGetObject`;
export const TIME_VALID_OID_GET_CTL = 2216203124737;
export const TIME_VALID_OID_GET_CRL = 4415226380290;
export const TIME_VALID_OID_GET_CRL_FROM_CERT = 5514738008067;
export const TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CERT = 1518001159355236356n;
export const TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CRL = 6614249635845;
export const TIME_VALID_OID_FLUSH_OBJECT_FUNC = `TimeValidDllFlushObject`;
export const TIME_VALID_OID_FLUSH_CTL = 2216203124737;
export const TIME_VALID_OID_FLUSH_CRL = 4415226380290;
export const TIME_VALID_OID_FLUSH_CRL_FROM_CERT = 5514738008067;
export const TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CERT = 1518001159355236356n;
export const TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CRL = 6614249635845;
export const CRYPT_KEYID_MACHINE_FLAG = 32;
export const CRYPT_KEYID_ALLOC_FLAG = 32768;
export const CRYPT_KEYID_DELETE_FLAG = 16;
export const CRYPT_KEYID_SET_NEW_FLAG = 8192;
export const CERT_CHAIN_CONFIG_REGPATH = `Software\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CertDllCreateCertificateChainEngine\\Config`;
export const CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME = `MaxUrlRetrievalByteCount`;
export const CERT_CHAIN_CACHE_RESYNC_FILETIME_VALUE_NAME = `ChainCacheResyncFiletime`;
export const CERT_CHAIN_DISABLE_MANDATORY_BASIC_CONSTRAINTS_VALUE_NAME = `DisableMandatoryBasicConstraints`;
export const CERT_CHAIN_DISABLE_CA_NAME_CONSTRAINTS_VALUE_NAME = `DisableCANameConstraints`;
export const CERT_CHAIN_DISABLE_UNSUPPORTED_CRITICAL_EXTENSIONS_VALUE_NAME = `DisableUnsupportedCriticalExtensions`;
export const CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_VALUE_NAME = `MaxAIAUrlCountInCert`;
export const CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT = 5;
export const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_VALUE_NAME = `MaxAIAUrlRetrievalCountPerChain`;
export const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT = 3;
export const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME = `MaxAIAUrlRetrievalByteCount`;
export const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT = 100000;
export const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_VALUE_NAME = `MaxAIAUrlRetrievalCertCount`;
export const CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT = 10;
export const CERT_CHAIN_OCSP_VALIDITY_SECONDS_VALUE_NAME = `OcspValiditySeconds`;
export const CERT_CHAIN_DISABLE_SERIAL_CHAIN_VALUE_NAME = `DisableSerialChain`;
export const CERT_CHAIN_SERIAL_CHAIN_LOG_FILE_NAME_VALUE_NAME = `SerialChainLogFileName`;
export const CERT_CHAIN_DISABLE_SYNC_WITH_SSL_TIME_VALUE_NAME = `DisableSyncWithSslTime`;
export const CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_VALUE_NAME = `MaxSslTimeUpdatedEventCount`;
export const CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DEFAULT = 5;
export const CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DISABLE = 4294967295;
export const CERT_CHAIN_SSL_HANDSHAKE_LOG_FILE_NAME_VALUE_NAME = `SslHandshakeLogFileName`;
export const CERT_CHAIN_ENABLE_WEAK_SIGNATURE_FLAGS_VALUE_NAME = `EnableWeakSignatureFlags`;
export const CERT_CHAIN_ENABLE_MD2_MD4_FLAG = 1;
export const CERT_CHAIN_ENABLE_WEAK_RSA_ROOT_FLAG = 2;
export const CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG = 4;
export const CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG = 8;
export const CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_VALUE_NAME = `MinRsaPubKeyBitLength`;
export const CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT = 1023;
export const CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE = 4294967295;
export const CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_VALUE_NAME = `WeakRsaPubKeyTime`;
export const CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME = `WeakSignatureLogDir`;
export const CERT_CHAIN_DEFAULT_CONFIG_SUBDIR = `Default`;
export const CERT_CHAIN_WEAK_PREFIX_NAME = `Weak`;
export const CERT_CHAIN_WEAK_THIRD_PARTY_CONFIG_NAME = `ThirdParty`;
export const CERT_CHAIN_WEAK_ALL_CONFIG_NAME = `All`;
export const CERT_CHAIN_WEAK_FLAGS_NAME = `Flags`;
export const CERT_CHAIN_WEAK_HYGIENE_NAME = `Hygiene`;
export const CERT_CHAIN_WEAK_AFTER_TIME_NAME = `AfterTime`;
export const CERT_CHAIN_WEAK_FILE_HASH_AFTER_TIME_NAME = `FileHashAfterTime`;
export const CERT_CHAIN_WEAK_TIMESTAMP_HASH_AFTER_TIME_NAME = `TimestampHashAfterTime`;
export const CERT_CHAIN_WEAK_MIN_BIT_LENGTH_NAME = `MinBitLength`;
export const CERT_CHAIN_WEAK_SHA256_ALLOW_NAME = `Sha256Allow`;
export const CERT_CHAIN_MIN_PUB_KEY_BIT_LENGTH_DISABLE = 4294967295;
export const CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG = 2147483648;
export const CERT_CHAIN_DISABLE_ECC_PARA_FLAG = 16;
export const CERT_CHAIN_DISABLE_ALL_EKU_WEAK_FLAG = 65536;
export const CERT_CHAIN_ENABLE_ALL_EKU_HYGIENE_FLAG = 131072;
export const CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG = 262144;
export const CERT_CHAIN_DISABLE_SERVER_AUTH_WEAK_FLAG = 1048576;
export const CERT_CHAIN_ENABLE_SERVER_AUTH_HYGIENE_FLAG = 2097152;
export const CERT_CHAIN_DISABLE_CODE_SIGNING_WEAK_FLAG = 4194304;
export const CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG = 8388608;
export const CERT_CHAIN_ENABLE_CODE_SIGNING_HYGIENE_FLAG = 16777216;
export const CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG = 33554432;
export const CERT_CHAIN_DISABLE_TIMESTAMP_WEAK_FLAG = 67108864;
export const CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG = 134217728;
export const CERT_CHAIN_ENABLE_TIMESTAMP_HYGIENE_FLAG = 268435456;
export const CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG = 536870912;
export const CERT_CHAIN_MOTW_IGNORE_AFTER_TIME_WEAK_FLAG = 1073741824;
export const CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAG = 4096;
export const CERT_CHAIN_DISABLE_MOTW_FILE_HASH_WEAK_FLAG = 8192;
export const CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAG = 16384;
export const CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_HASH_WEAK_FLAG = 32768;
export const CERT_CHAIN_OPT_IN_WEAK_FLAGS = 262144;
export const CERT_CHAIN_AUTO_CURRENT_USER = 1;
export const CERT_CHAIN_AUTO_LOCAL_MACHINE = 2;
export const CERT_CHAIN_AUTO_IMPERSONATED = 3;
export const CERT_CHAIN_AUTO_PROCESS_INFO = 4;
export const CERT_CHAIN_AUTO_PINRULE_INFO = 5;
export const CERT_CHAIN_AUTO_NETWORK_INFO = 6;
export const CERT_CHAIN_AUTO_SERIAL_LOCAL_MACHINE = 7;
export const CERT_CHAIN_AUTO_HPKP_RULE_INFO = 8;
export const CERT_CHAIN_AUTO_FLAGS_VALUE_NAME = `AutoFlags`;
export const CERT_CHAIN_AUTO_FLUSH_DISABLE_FLAG = 1;
export const CERT_CHAIN_AUTO_LOG_CREATE_FLAG = 2;
export const CERT_CHAIN_AUTO_LOG_FREE_FLAG = 4;
export const CERT_CHAIN_AUTO_LOG_FLUSH_FLAG = 8;
export const CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_VALUE_NAME = `AutoFlushFirstDeltaSeconds`;
export const CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_VALUE_NAME = `AutoFlushNextDeltaSeconds`;
export const CERT_CHAIN_AUTO_LOG_FILE_NAME_VALUE_NAME = `AutoLogFileName`;
export const CERT_CHAIN_DISABLE_AUTO_FLUSH_PROCESS_NAME_LIST_VALUE_NAME = `DisableAutoFlushProcessNameList`;
export const CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_VALUE_NAME = `SrvOcspRespMinValiditySeconds`;
export const CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME = `SrvOcspRespUrlRetrievalTimeoutMilliseconds`;
export const CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME = `SrvOcspRespMaxBeforeNextUpdateSeconds`;
export const CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME = `SrvOcspRespMinBeforeNextUpdateSeconds`;
export const CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME = `SrvOcspRespMinAfterNextUpdateSeconds`;
export const CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_VALUE_NAME = `SrvOcspRespMinSyncCertFileSeconds`;
export const CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_DEFAULT = 5;
export const CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_VALUE_NAME = `SrvOcspRespMaxSyncCertFileSeconds`;
export const CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_VALUE_NAME = `CryptnetMaxCachedOcspPerCrlCount`;
export const CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT = 500;
export const CRYPTNET_OCSP_AFTER_CRL_DISABLE = 4294967295;
export const CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_VALUE_NAME = `CryptnetDefaultFlushExemptSeconds`;
export const CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_VALUE_NAME = `CryptnetPreFetchMinMaxAgeSeconds`;
export const CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_VALUE_NAME = `CryptnetPreFetchMaxMaxAgeSeconds`;
export const CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_VALUE_NAME = `CryptnetPreFetchMinOcspValidityPeriodSeconds`;
export const CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_VALUE_NAME = `CryptnetPreFetchAfterPublishPreFetchDivisor`;
export const CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT = 10;
export const CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME = `CryptnetPreFetchBeforeNextUpdatePreFetchDivisor`;
export const CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT = 20;
export const CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME = `CryptnetPreFetchMinBeforeNextUpdatePreFetchSeconds`;
export const CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME = `CryptnetPreFetchValidityPeriodAfterNextUpdatePreFetchDivisor`;
export const CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT = 10;
export const CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME = `CryptnetPreFetchMaxAfterNextUpdatePreFetchPeriodSeconds`;
export const CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME = `CryptnetPreFetchMinAfterNextUpdatePreFetchPeriodSeconds`;
export const CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME = `CryptnetPreFetchAfterCurrentTimePreFetchPeriodSeconds`;
export const CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_VALUE_NAME = `CryptnetPreFetchTriggerPeriodSeconds`;
export const CRYPTNET_PRE_FETCH_TRIGGER_DISABLE = 4294967295;
export const CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_VALUE_NAME = `CryptnetPreFetchScanAfterTriggerDelaySeconds`;
export const CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT = 60;
export const CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_VALUE_NAME = `CryptnetPreFetchRetrievalTimeoutSeconds`;
export const CRYPTNET_CRL_PRE_FETCH_PROCESS_NAME_LIST_VALUE_NAME = `ProcessNameList`;
export const CRYPTNET_CRL_PRE_FETCH_URL_LIST_VALUE_NAME = `PreFetchUrlList`;
export const CRYPTNET_CRL_PRE_FETCH_DISABLE_INFORMATION_EVENTS_VALUE_NAME = `DisableInformationEvents`;
export const CRYPTNET_CRL_PRE_FETCH_LOG_FILE_NAME_VALUE_NAME = `LogFileName`;
export const CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_VALUE_NAME = `TimeoutSeconds`;
export const CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_VALUE_NAME = `MaxAgeSeconds`;
export const CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME = `PublishBeforeNextUpdateSeconds`;
export const CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_VALUE_NAME = `PublishRandomIntervalSeconds`;
export const CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME = `MinBeforeNextUpdateSeconds`;
export const CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME = `MinAfterNextUpdateSeconds`;
export const CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME = `ChainUrlRetrievalTimeoutMilliseconds`;
export const CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME = `ChainRevAccumulativeUrlRetrievalTimeoutMilliseconds`;
export const CERT_RETR_BEHAVIOR_INET_AUTH_VALUE_NAME = `EnableInetUnknownAuth`;
export const CERT_RETR_BEHAVIOR_INET_STATUS_VALUE_NAME = `EnableInetLocal`;
export const CERT_RETR_BEHAVIOR_FILE_VALUE_NAME = `AllowFileUrlScheme`;
export const CERT_RETR_BEHAVIOR_LDAP_VALUE_NAME = `DisableLDAPSignAndEncrypt`;
export const CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_VALUE_NAME = `CryptnetCachedOcspSwitchToCrlCount`;
export const CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT = 50;
export const CRYPTNET_CRL_BEFORE_OCSP_ENABLE = 4294967295;
export const CERT_CHAIN_DISABLE_AIA_URL_RETRIEVAL_VALUE_NAME = `DisableAIAUrlRetrieval`;
export const CERT_CHAIN_OPTIONS_VALUE_NAME = `Options`;
export const CERT_CHAIN_OPTION_DISABLE_AIA_URL_RETRIEVAL = 2;
export const CERT_CHAIN_OPTION_ENABLE_SIA_URL_RETRIEVAL = 4;
export const CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_VALUE_NAME = `CrossCertDownloadIntervalHours`;
export const CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_VALUE_NAME = `CRLValidityExtensionPeriod`;
export const CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT = 12;
export const CERT_CHAIN_CACHE_END_CERT = 1;
export const CERT_CHAIN_THREAD_STORE_SYNC = 2;
export const CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL = 4;
export const CERT_CHAIN_USE_LOCAL_MACHINE_STORE = 8;
export const CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE = 16;
export const CERT_CHAIN_ENABLE_SHARE_STORE = 32;
export const CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG = 1;
export const CERT_TRUST_NO_ERROR = 0;
export const CERT_TRUST_IS_NOT_TIME_VALID = 1;
export const CERT_TRUST_IS_NOT_TIME_NESTED = 2;
export const CERT_TRUST_IS_REVOKED = 4;
export const CERT_TRUST_IS_NOT_SIGNATURE_VALID = 8;
export const CERT_TRUST_IS_NOT_VALID_FOR_USAGE = 16;
export const CERT_TRUST_IS_UNTRUSTED_ROOT = 32;
export const CERT_TRUST_REVOCATION_STATUS_UNKNOWN = 64;
export const CERT_TRUST_IS_CYCLIC = 128;
export const CERT_TRUST_INVALID_EXTENSION = 256;
export const CERT_TRUST_INVALID_POLICY_CONSTRAINTS = 512;
export const CERT_TRUST_INVALID_BASIC_CONSTRAINTS = 1024;
export const CERT_TRUST_INVALID_NAME_CONSTRAINTS = 2048;
export const CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT = 4096;
export const CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT = 8192;
export const CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT = 16384;
export const CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT = 32768;
export const CERT_TRUST_IS_OFFLINE_REVOCATION = 16777216;
export const CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY = 33554432;
export const CERT_TRUST_IS_EXPLICIT_DISTRUST = 67108864;
export const CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT = 134217728;
export const CERT_TRUST_HAS_WEAK_SIGNATURE = 1048576;
export const CERT_TRUST_HAS_WEAK_HYGIENE = 2097152;
export const CERT_TRUST_IS_PARTIAL_CHAIN = 65536;
export const CERT_TRUST_CTL_IS_NOT_TIME_VALID = 131072;
export const CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID = 262144;
export const CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE = 524288;
export const CERT_TRUST_HAS_EXACT_MATCH_ISSUER = 1;
export const CERT_TRUST_HAS_KEY_MATCH_ISSUER = 2;
export const CERT_TRUST_HAS_NAME_MATCH_ISSUER = 4;
export const CERT_TRUST_IS_SELF_SIGNED = 8;
export const CERT_TRUST_AUTO_UPDATE_CA_REVOCATION = 16;
export const CERT_TRUST_AUTO_UPDATE_END_REVOCATION = 32;
export const CERT_TRUST_NO_OCSP_FAILOVER_TO_CRL = 64;
export const CERT_TRUST_IS_KEY_ROLLOVER = 128;
export const CERT_TRUST_SSL_HANDSHAKE_OCSP = 262144;
export const CERT_TRUST_SSL_TIME_VALID_OCSP = 524288;
export const CERT_TRUST_SSL_RECONNECT_OCSP = 1048576;
export const CERT_TRUST_HAS_PREFERRED_ISSUER = 256;
export const CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY = 512;
export const CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS = 1024;
export const CERT_TRUST_IS_PEER_TRUSTED = 2048;
export const CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED = 4096;
export const CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE = 8192;
export const CERT_TRUST_IS_CA_TRUSTED = 16384;
export const CERT_TRUST_HAS_AUTO_UPDATE_WEAK_SIGNATURE = 32768;
export const CERT_TRUST_HAS_ALLOW_WEAK_SIGNATURE = 131072;
export const CERT_TRUST_IS_COMPLEX_CHAIN = 65536;
export const CERT_TRUST_SSL_TIME_VALID = 16777216;
export const CERT_TRUST_NO_TIME_CHECK = 33554432;
export const USAGE_MATCH_TYPE_AND = 0;
export const USAGE_MATCH_TYPE_OR = 1;
export const CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG = 1;
export const CERT_CHAIN_REVOCATION_CHECK_END_CERT = 268435456;
export const CERT_CHAIN_REVOCATION_CHECK_CHAIN = 536870912;
export const CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 1073741824;
export const CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY = 2147483648;
export const CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT = 134217728;
export const CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT = 67108864;
export const CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING = 64;
export const CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS = 128;
export const CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE = 256;
export const CERT_CHAIN_TIMESTAMP_TIME = 512;
export const CERT_CHAIN_ENABLE_PEER_TRUST = 1024;
export const CERT_CHAIN_DISABLE_MY_PEER_TRUST = 2048;
export const CERT_CHAIN_DISABLE_MD2_MD4 = 4096;
export const CERT_CHAIN_DISABLE_AIA = 8192;
export const CERT_CHAIN_HAS_MOTW = 16384;
export const CERT_CHAIN_ONLY_ADDITIONAL_AND_AUTH_ROOT = 32768;
export const CERT_CHAIN_OPT_IN_WEAK_SIGNATURE = 65536;
export const REVOCATION_OID_CRL_REVOCATION = 2216203124737;
export const CERT_CHAIN_FIND_BY_ISSUER = 1;
export const CERT_CHAIN_POLICY_IGNORE_WEAK_SIGNATURE_FLAG = 134217728;
export const CRYPT_OID_VERIFY_CERTIFICATE_CHAIN_POLICY_FUNC = `CertDllVerifyCertificateChainPolicy`;
export const CERT_CHAIN_POLICY_BASE = 2216203124737;
export const CERT_CHAIN_POLICY_AUTHENTICODE = 4415226380290;
export const CERT_CHAIN_POLICY_AUTHENTICODE_TS = 5514738008067;
export const CERT_CHAIN_POLICY_SSL = 1518001159355236356n;
export const CERT_CHAIN_POLICY_BASIC_CONSTRAINTS = 6614249635845;
export const CERT_CHAIN_POLICY_NT_AUTH = 7713761263622;
export const CERT_CHAIN_POLICY_MICROSOFT_ROOT = 290488781625098247n;
export const CERT_CHAIN_POLICY_EV = 16509854285832;
export const CERT_CHAIN_POLICY_SSL_F12 = 13211319402505;
export const CERT_CHAIN_POLICY_SSL_HPKP_HEADER = 12111807774730;
export const CERT_CHAIN_POLICY_THIRD_PARTY_ROOT = 1147907319267339;
export const CERT_CHAIN_POLICY_SSL_KEY_PIN = 14310831030284;
export const BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG = 2147483648;
export const BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG = 1073741824;
export const MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG = 65536;
export const MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG = 131072;
export const MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG = 262144;
export const SSL_F12_ERROR_TEXT_LENGTH = 256;
export const CERT_CHAIN_POLICY_SSL_F12_SUCCESS_LEVEL = 0;
export const CERT_CHAIN_POLICY_SSL_F12_WARNING_LEVEL = 1;
export const CERT_CHAIN_POLICY_SSL_F12_ERROR_LEVEL = 2;
export const CERT_CHAIN_POLICY_SSL_F12_NONE_CATEGORY = 0;
export const CERT_CHAIN_POLICY_SSL_F12_WEAK_CRYPTO_CATEGORY = 1;
export const CERT_CHAIN_POLICY_SSL_F12_ROOT_PROGRAM_CATEGORY = 2;
export const SSL_HPKP_PKP_HEADER_INDEX = 0;
export const SSL_HPKP_PKP_RO_HEADER_INDEX = 1;
export const SSL_HPKP_HEADER_COUNT = 2;
export const SSL_KEY_PIN_ERROR_TEXT_LENGTH = 512;
export const CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_ERROR = `-2`;
export const CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_ERROR = `-1`;
export const CERT_CHAIN_POLICY_SSL_KEY_PIN_SUCCESS = 0;
export const CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_WARNING = 1;
export const CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_WARNING = 2;
export const CRYPT_STRING_BASE64URI = 13;
export const CRYPT_STRING_ENCODEMASK = 255;
export const CRYPT_STRING_RESERVED100 = 256;
export const CRYPT_STRING_RESERVED200 = 512;
export const CRYPT_STRING_PERCENTESCAPE = 134217728;
export const CRYPT_STRING_HASHDATA = 268435456;
export const CRYPT_STRING_NOCRLF = 1073741824;
export const CRYPT_STRING_NOCR = 2147483648;
export const szOID_PKCS_12_PbeIds = `1.2.840.113549.1.12.1`;
export const szOID_PKCS_12_pbeWithSHA1And128BitRC4 = `1.2.840.113549.1.12.1.1`;
export const szOID_PKCS_12_pbeWithSHA1And40BitRC4 = `1.2.840.113549.1.12.1.2`;
export const szOID_PKCS_12_pbeWithSHA1And3KeyTripleDES = `1.2.840.113549.1.12.1.3`;
export const szOID_PKCS_12_pbeWithSHA1And2KeyTripleDES = `1.2.840.113549.1.12.1.4`;
export const szOID_PKCS_12_pbeWithSHA1And128BitRC2 = `1.2.840.113549.1.12.1.5`;
export const szOID_PKCS_12_pbeWithSHA1And40BitRC2 = `1.2.840.113549.1.12.1.6`;
export const szOID_PKCS_5_PBKDF2 = `1.2.840.113549.1.5.12`;
export const szOID_PKCS_5_PBES2 = `1.2.840.113549.1.5.13`;
export const PKCS12_IMPORT_SILENT = 64;
export const PKCS12_ONLY_CERTIFICATES = 1024;
export const PKCS12_ONLY_NOT_ENCRYPTED_CERTIFICATES = 2048;
export const PKCS12_VIRTUAL_ISOLATION_KEY = 65536;
export const PKCS12_IMPORT_RESERVED_MASK = 4294901760;
export const PKCS12_ONLY_CERTIFICATES_PROVIDER_TYPE = 0;
export const PKCS12_ONLY_CERTIFICATES_PROVIDER_NAME = `PfxProvider`;
export const PKCS12_ONLY_CERTIFICATES_CONTAINER_NAME = `PfxContainer`;
export const REPORT_NO_PRIVATE_KEY = 1;
export const REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY = 2;
export const EXPORT_PRIVATE_KEYS = 4;
export const PKCS12_PROTECT_TO_DOMAIN_SIDS = 32;
export const PKCS12_EXPORT_SILENT = 64;
export const PKCS12_EXPORT_PBES2_PARAMS = 128;
export const PKCS12_DISABLE_ENCRYPT_CERTIFICATES = 256;
export const PKCS12_ENCRYPT_CERTIFICATES = 512;
export const PKCS12_EXPORT_ECC_CURVE_PARAMETERS = 4096;
export const PKCS12_EXPORT_ECC_CURVE_OID = 8192;
export const PKCS12_EXPORT_RESERVED_MASK = 4294901760;
export const PKCS12_PBKDF2_ID_HMAC_SHA1 = `1.2.840.113549.2.7`;
export const PKCS12_PBKDF2_ID_HMAC_SHA256 = `1.2.840.113549.2.9`;
export const PKCS12_PBKDF2_ID_HMAC_SHA384 = `1.2.840.113549.2.10`;
export const PKCS12_PBKDF2_ID_HMAC_SHA512 = `1.2.840.113549.2.11`;
export const PKCS12_PBES2_ALG_AES256_SHA256 = `AES256-SHA256`;
export const PKCS12_CONFIG_REGPATH = `Software\\Microsoft\\Windows\\CurrentVersion\\PFX`;
export const PKCS12_ENCRYPT_CERTIFICATES_VALUE_NAME = `EncryptCertificates`;
export const CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_READ_FLAG = 1;
export const CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_WRITE_FLAG = 2;
export const CERT_SERVER_OCSP_RESPONSE_ASYNC_FLAG = 1;
export const CERT_RETRIEVE_ISSUER_LOGO = 2216203124737;
export const CERT_RETRIEVE_SUBJECT_LOGO = 4415226380290;
export const CERT_RETRIEVE_COMMUNITY_LOGO = 5514738008067;
export const CERT_RETRIEVE_BIOMETRIC_PREDEFINED_BASE_TYPE = 1100628319273960;
export const CERT_SELECT_MAX_PARA = 500;
export const CERT_SELECT_BY_ISSUER_DISPLAYNAME = 12;
export const CERT_SELECT_BY_FRIENDLYNAME = 13;
export const CERT_SELECT_BY_THUMBPRINT = 14;
export const CERT_SELECT_ALLOW_EXPIRED = 1;
export const CERT_SELECT_TRUSTED_ROOT = 2;
export const CERT_SELECT_DISALLOW_SELFSIGNED = 4;
export const CERT_SELECT_HAS_PRIVATE_KEY = 8;
export const CERT_SELECT_HAS_KEY_FOR_SIGNATURE = 16;
export const CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE = 32;
export const CERT_SELECT_HARDWARE_ONLY = 64;
export const CERT_SELECT_ALLOW_DUPLICATES = 128;
export const CERT_SELECT_IGNORE_AUTOSELECT = 256;
export const TIMESTAMP_FAILURE_BAD_ALG = 0;
export const TIMESTAMP_FAILURE_BAD_REQUEST = 2;
export const TIMESTAMP_FAILURE_BAD_FORMAT = 5;
export const TIMESTAMP_FAILURE_TIME_NOT_AVAILABLE = 14;
export const TIMESTAMP_FAILURE_POLICY_NOT_SUPPORTED = 15;
export const TIMESTAMP_FAILURE_EXTENSION_NOT_SUPPORTED = 16;
export const TIMESTAMP_FAILURE_INFO_NOT_AVAILABLE = 17;
export const TIMESTAMP_FAILURE_SYSTEM_FAILURE = 25;
export const TIMESTAMP_DONT_HASH_DATA = 1;
export const TIMESTAMP_VERIFY_CONTEXT_SIGNATURE = 32;
export const TIMESTAMP_NO_AUTH_RETRIEVAL = 131072;
export const CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE = 1;
export const CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE = 32;
export const CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE = 33;
export const CRYPT_OBJECT_LOCATOR_LAST_RESERVED_USER_NAME_TYPE = 65535;
export const SSL_OBJECT_LOCATOR_PFX_FUNC = `SslObjectLocatorInitializePfx`;
export const SSL_OBJECT_LOCATOR_ISSUER_LIST_FUNC = `SslObjectLocatorInitializeIssuerList`;
export const SSL_OBJECT_LOCATOR_CERT_VALIDATION_CONFIG_FUNC = `SslObjectLocatorInitializeCertValidationConfig`;
export const CERT_FILE_HASH_USE_TYPE = 1;
export const CERT_TIMESTAMP_HASH_USE_TYPE = 2;
export const RECIPIENTPOLICYV1 = 1;
export const RECIPIENTPOLICYV2 = 2;
export const E_ICARD_COMMUNICATION = 360570565079400704n;
export const E_ICARD_DATA_ACCESS = 360571664591028481n;
export const E_ICARD_EXPORT = 360572764102656258n;
export const E_ICARD_IDENTITY = 360573863614284035n;
export const E_ICARD_IMPORT = 360574963125911812n;
export const E_ICARD_ARGUMENT = 360576062637539589n;
export const E_ICARD_REQUEST = 360577162149167366n;
export const E_ICARD_INFORMATIONCARD = 360578261660795143n;
export const E_ICARD_STOREKEY = 360579361172422920n;
export const E_ICARD_LOGOVALIDATION = 360580460684050697n;
export const E_ICARD_PASSWORDVALIDATION = 360581560195678474n;
export const E_ICARD_POLICY = 360582659707306251n;
export const E_ICARD_PROCESSDIED = 360583759218934028n;
export const E_ICARD_SERVICEBUSY = 360584858730561805n;
export const E_ICARD_SERVICE = 360585958242189582n;
export const E_ICARD_SHUTTINGDOWN = 360587057753817359n;
export const E_ICARD_TOKENCREATION = 360588157265445136n;
export const E_ICARD_TRUSTEXCHANGE = 360589256777072913n;
export const E_ICARD_UNTRUSTED = 360590356288700690n;
export const E_ICARD_USERCANCELLED = 360591455800328467n;
export const E_ICARD_STORE_IMPORT = 360592555311956244n;
export const E_ICARD_FAIL = 360598052870095125n;
export const E_ICARD_UI_INITIALIZATION = 360710203056128282n;
export const E_ICARD_REFRESH_REQUIRED = 360711302567756160n;
export const E_ICARD_MISSING_APPLIESTO = 360712402079383937n;
export const E_ICARD_INVALID_PROOF_KEY = 360713501591011714n;
export const E_ICARD_UNKNOWN_REFERENCE = 360714601102639491n;
export const E_ICARD_FAILED_REQUIRED_CLAIMS = 360850940544483716n;
export const AUDIT_CARD_WRITTEN = 360852037908627968n;
export const AUDIT_CARD_DELETE = 360853137420255745n;
export const AUDIT_CARD_IMPORT = 360854236931883522n;
export const AUDIT_STORE_IMPORT = 360855336443511299n;
export const AUDIT_STORE_EXPORT = 360856435955139076n;
export const AUDIT_STORE_DELETE = 360857535466766853n;
export const AUDIT_SERVICE_IDLE_STOP = 1226386526142005766n;
export const DWACTION_ALLOCANDFILL = 1;
export const DWACTION_FREE = 2;
export const WTPF_TRUSTTEST = 32;
export const WTPF_TESTCANBEVALID = 128;
export const WTPF_IGNOREEXPIRATION = 256;
export const WTPF_IGNOREREVOKATION = 512;
export const WTPF_OFFLINEOK_IND = 1024;
export const WTPF_OFFLINEOK_COM = 2048;
export const WTPF_OFFLINEOKNBU_IND = 4096;
export const WTPF_OFFLINEOKNBU_COM = 8192;
export const WTPF_VERIFY_V1_OFF = 65536;
export const WTPF_IGNOREREVOCATIONONTS = 131072;
export const WTPF_ALLOWONLYPERTRUST = 262144;
export const WTD_USE_IE4_TRUST_FLAG = 1;
export const WTD_NO_IE4_CHAIN_FLAG = 2;
export const WTD_NO_POLICY_USAGE_FLAG = 4;
export const WTD_REVOCATION_CHECK_NONE = 16;
export const WTD_REVOCATION_CHECK_END_CERT = 32;
export const WTD_REVOCATION_CHECK_CHAIN = 64;
export const WTD_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 128;
export const WTD_SAFER_FLAG = 256;
export const WTD_HASH_ONLY_FLAG = 512;
export const WTD_USE_DEFAULT_OSVER_CHECK = 1024;
export const WTD_LIFETIME_SIGNING_FLAG = 2048;
export const WTD_CACHE_ONLY_URL_RETRIEVAL = 4096;
export const WTD_DISABLE_MD2_MD4 = 8192;
export const WTD_MOTW = 16384;
export const WTD_UI_ALL = 1;
export const WTD_UI_NONE = 2;
export const WTD_UI_NOBAD = 3;
export const WTD_UI_NOGOOD = 4;
export const WSS_VERIFY_SPECIFIC = 1;
export const WSS_GET_SECONDARY_SIG_COUNT = 2;
export const WTD_STATEACTION_IGNORE = 0;
export const WTD_STATEACTION_VERIFY = 1;
export const WTD_STATEACTION_CLOSE = 2;
export const WTD_STATEACTION_AUTO_CACHE = 3;
export const WTD_STATEACTION_AUTO_CACHE_FLUSH = 4;
export const WTD_CHOICE_FILE = 1;
export const WTD_CHOICE_CATALOG = 2;
export const WTD_CHOICE_BLOB = 3;
export const WTD_CHOICE_SIGNER = 4;
export const WTD_CHOICE_CERT = 5;
export const WTD_REVOKE_NONE = 0;
export const WTD_REVOKE_WHOLECHAIN = 1;
export const WTD_UICONTEXT_EXECUTE = 0;
export const WTD_UICONTEXT_INSTALL = 1;
export const WLX_SAS_ACTION_SHUTDOWN = 5;
export const WLX_SAS_ACTION_SHUTDOWN_REBOOT = 11;
export const WLX_SAS_ACTION_SHUTDOWN_POWER_OFF = 10;
export const SAFER_SCOPEID_MACHINE = 1;
export const SAFER_SCOPEID_USER = 2;
export const SAFER_LEVELID_FULLYTRUSTED = 262144;
export const SAFER_LEVELID_NORMALUSER = 131072;
export const SAFER_LEVELID_CONSTRAINED = 65536;
export const SAFER_LEVELID_UNTRUSTED = 4096;
export const SAFER_LEVELID_DISALLOWED = 0;
export const SAFER_LEVEL_OPEN = 1;
export const SAFER_MAX_FRIENDLYNAME_SIZE = 256;
export const SAFER_MAX_DESCRIPTION_SIZE = 256;
export const SAFER_MAX_HASH_SIZE = 64;
export const SAFER_CRITERIA_IMAGEPATH = 1;
export const SAFER_CRITERIA_NOSIGNEDHASH = 2;
export const SAFER_CRITERIA_IMAGEHASH = 4;
export const SAFER_CRITERIA_AUTHENTICODE = 8;
export const SAFER_CRITERIA_URLZONE = 16;
export const SAFER_CRITERIA_APPX_PACKAGE = 32;
export const SAFER_CRITERIA_IMAGEPATH_NT = 4096;
export const SAFER_POLICY_JOBID_MASK = 4278190080;
export const SAFER_POLICY_JOBID_CONSTRAINED = 67108864;
export const SAFER_POLICY_JOBID_UNTRUSTED = 50331648;
export const SAFER_POLICY_ONLY_EXES = 65536;
export const SAFER_POLICY_SANDBOX_INERT = 131072;
export const SAFER_POLICY_HASH_DUPLICATE = 262144;
export const SAFER_POLICY_ONLY_AUDIT = 4096;
export const SAFER_POLICY_BLOCK_CLIENT_UI = 8192;
export const SAFER_POLICY_UIFLAGS_MASK = 255;
export const SAFER_POLICY_UIFLAGS_INFORMATION_PROMPT = 1;
export const SAFER_POLICY_UIFLAGS_OPTION_PROMPT = 2;
export const SAFER_POLICY_UIFLAGS_HIDDEN = 4;
export const SRP_POLICY_EXE = `EXE`;
export const SRP_POLICY_DLL = `DLL`;
export const SRP_POLICY_MSI = `MSI`;
export const SRP_POLICY_SCRIPT = `SCRIPT`;
export const SRP_POLICY_SHELL = `SHELL`;
export const SRP_POLICY_NOV2 = `IGNORESRPV2`;
export const SRP_POLICY_APPX = `APPX`;
export const SRP_POLICY_WLDPMSI = `WLDPMSI`;
export const SRP_POLICY_WLDPSCRIPT = `WLDPSCRIPT`;
export const SRP_POLICY_WLDPCONFIGCI = `WLDPCONFIGCI`;
export const SRP_POLICY_MANAGEDINSTALLER = `MANAGEDINSTALLER`;
export const NTLMSP_NAME_A = `NTLM`;
export const NTLMSP_NAME = `NTLM`;
export const MICROSOFT_KERBEROS_NAME_A = `Kerberos`;
export const MICROSOFT_KERBEROS_NAME_W = `Kerberos`;
export const MICROSOFT_KERBEROS_NAME = `Kerberos`;
export const NEGOSSP_NAME_W = `Negotiate`;
export const NEGOSSP_NAME_A = `Negotiate`;
export const NEGOSSP_NAME = `Negotiate`;
export const CLOUDAP_NAME_W = `CloudAP`;
export const ClOUDAP_NAME_A = `CloudAP`;
export const CLOUDAP_NAME = `CloudAP`;
export const ISSP_LEVEL = 32;
export const ISSP_MODE = 1;
export const SECPKG_FLAG_INTEGRITY = 1;
export const SECPKG_FLAG_PRIVACY = 2;
export const SECPKG_FLAG_TOKEN_ONLY = 4;
export const SECPKG_FLAG_DATAGRAM = 8;
export const SECPKG_FLAG_CONNECTION = 16;
export const SECPKG_FLAG_MULTI_REQUIRED = 32;
export const SECPKG_FLAG_CLIENT_ONLY = 64;
export const SECPKG_FLAG_EXTENDED_ERROR = 128;
export const SECPKG_FLAG_IMPERSONATION = 256;
export const SECPKG_FLAG_ACCEPT_WIN32_NAME = 512;
export const SECPKG_FLAG_STREAM = 1024;
export const SECPKG_FLAG_NEGOTIABLE = 2048;
export const SECPKG_FLAG_GSS_COMPATIBLE = 4096;
export const SECPKG_FLAG_LOGON = 8192;
export const SECPKG_FLAG_ASCII_BUFFERS = 16384;
export const SECPKG_FLAG_FRAGMENT = 32768;
export const SECPKG_FLAG_MUTUAL_AUTH = 65536;
export const SECPKG_FLAG_DELEGATION = 131072;
export const SECPKG_FLAG_READONLY_WITH_CHECKSUM = 262144;
export const SECPKG_FLAG_RESTRICTED_TOKENS = 524288;
export const SECPKG_FLAG_NEGO_EXTENDER = 1048576;
export const SECPKG_FLAG_NEGOTIABLE2 = 2097152;
export const SECPKG_FLAG_APPCONTAINER_PASSTHROUGH = 4194304;
export const SECPKG_FLAG_APPCONTAINER_CHECKS = 8388608;
export const SECPKG_FLAG_CREDENTIAL_ISOLATION_ENABLED = 16777216;
export const SECPKG_FLAG_APPLY_LOOPBACK = 33554432;
export const SECPKG_ID_NONE = 65535;
export const SECPKG_CALLFLAGS_APPCONTAINER = 1;
export const SECPKG_CALLFLAGS_APPCONTAINER_AUTHCAPABLE = 2;
export const SECPKG_CALLFLAGS_FORCE_SUPPLIED = 4;
export const SECPKG_CALLFLAGS_APPCONTAINER_UPNCAPABLE = 8;
export const SECBUFFER_VERSION = 0;
export const SECBUFFER_EMPTY = 0;
export const SECBUFFER_DATA = 1;
export const SECBUFFER_TOKEN = 2;
export const SECBUFFER_PKG_PARAMS = 3;
export const SECBUFFER_MISSING = 4;
export const SECBUFFER_EXTRA = 5;
export const SECBUFFER_STREAM_TRAILER = 6;
export const SECBUFFER_STREAM_HEADER = 7;
export const SECBUFFER_NEGOTIATION_INFO = 8;
export const SECBUFFER_PADDING = 9;
export const SECBUFFER_STREAM = 10;
export const SECBUFFER_MECHLIST = 11;
export const SECBUFFER_MECHLIST_SIGNATURE = 12;
export const SECBUFFER_TARGET = 13;
export const SECBUFFER_CHANNEL_BINDINGS = 14;
export const SECBUFFER_CHANGE_PASS_RESPONSE = 15;
export const SECBUFFER_TARGET_HOST = 16;
export const SECBUFFER_ALERT = 17;
export const SECBUFFER_APPLICATION_PROTOCOLS = 18;
export const SECBUFFER_SRTP_PROTECTION_PROFILES = 19;
export const SECBUFFER_SRTP_MASTER_KEY_IDENTIFIER = 20;
export const SECBUFFER_TOKEN_BINDING = 21;
export const SECBUFFER_PRESHARED_KEY = 22;
export const SECBUFFER_PRESHARED_KEY_IDENTITY = 23;
export const SECBUFFER_DTLS_MTU = 24;
export const SECBUFFER_SEND_GENERIC_TLS_EXTENSION = 25;
export const SECBUFFER_SUBSCRIBE_GENERIC_TLS_EXTENSION = 26;
export const SECBUFFER_FLAGS = 27;
export const SECBUFFER_TRAFFIC_SECRETS = 28;
export const SECBUFFER_ATTRMASK = 4026531840;
export const SECBUFFER_READONLY = 2147483648;
export const SECBUFFER_READONLY_WITH_CHECKSUM = 268435456;
export const SECBUFFER_RESERVED = 1610612736;
export const SZ_ALG_MAX_SIZE = 64;
export const SECURITY_NATIVE_DREP = 16;
export const SECURITY_NETWORK_DREP = 0;
export const SECPKG_CRED_BOTH = 3;
export const SECPKG_CRED_DEFAULT = 4;
export const SECPKG_CRED_RESERVED = 4026531840;
export const SECPKG_CRED_AUTOLOGON_RESTRICTED = 16;
export const SECPKG_CRED_PROCESS_POLICY_ONLY = 32;
export const ISC_RET_DELEGATE = 1;
export const ISC_RET_MUTUAL_AUTH = 2;
export const ISC_RET_REPLAY_DETECT = 4;
export const ISC_RET_SEQUENCE_DETECT = 8;
export const ISC_RET_CONFIDENTIALITY = 16;
export const ISC_RET_USE_SESSION_KEY = 32;
export const ISC_RET_USED_COLLECTED_CREDS = 64;
export const ISC_RET_USED_SUPPLIED_CREDS = 128;
export const ISC_RET_ALLOCATED_MEMORY = 256;
export const ISC_RET_USED_DCE_STYLE = 512;
export const ISC_RET_DATAGRAM = 1024;
export const ISC_RET_CONNECTION = 2048;
export const ISC_RET_INTERMEDIATE_RETURN = 4096;
export const ISC_RET_CALL_LEVEL = 8192;
export const ISC_RET_EXTENDED_ERROR = 16384;
export const ISC_RET_STREAM = 32768;
export const ISC_RET_INTEGRITY = 65536;
export const ISC_RET_IDENTIFY = 131072;
export const ISC_RET_NULL_SESSION = 262144;
export const ISC_RET_MANUAL_CRED_VALIDATION = 524288;
export const ISC_RET_RESERVED1 = 1048576;
export const ISC_RET_FRAGMENT_ONLY = 2097152;
export const ISC_RET_FORWARD_CREDENTIALS = 4194304;
export const ISC_RET_USED_HTTP_STYLE = 16777216;
export const ISC_RET_NO_ADDITIONAL_TOKEN = 33554432;
export const ISC_RET_REAUTHENTICATION = 134217728;
export const ISC_RET_CONFIDENTIALITY_ONLY = 1073741824;
export const ISC_RET_MESSAGES = 4294967296;
export const ISC_RET_DEFERRED_CRED_VALIDATION = 8589934592;
export const ASC_RET_DELEGATE = 1;
export const ASC_RET_MUTUAL_AUTH = 2;
export const ASC_RET_REPLAY_DETECT = 4;
export const ASC_RET_SEQUENCE_DETECT = 8;
export const ASC_RET_CONFIDENTIALITY = 16;
export const ASC_RET_USE_SESSION_KEY = 32;
export const ASC_RET_SESSION_TICKET = 64;
export const ASC_RET_ALLOCATED_MEMORY = 256;
export const ASC_RET_USED_DCE_STYLE = 512;
export const ASC_RET_DATAGRAM = 1024;
export const ASC_RET_CONNECTION = 2048;
export const ASC_RET_CALL_LEVEL = 8192;
export const ASC_RET_THIRD_LEG_FAILED = 16384;
export const ASC_RET_EXTENDED_ERROR = 32768;
export const ASC_RET_STREAM = 65536;
export const ASC_RET_INTEGRITY = 131072;
export const ASC_RET_LICENSING = 262144;
export const ASC_RET_IDENTIFY = 524288;
export const ASC_RET_NULL_SESSION = 1048576;
export const ASC_RET_ALLOW_NON_USER_LOGONS = 2097152;
export const ASC_RET_ALLOW_CONTEXT_REPLAY = 4194304;
export const ASC_RET_FRAGMENT_ONLY = 8388608;
export const ASC_RET_NO_TOKEN = 16777216;
export const ASC_RET_NO_ADDITIONAL_TOKEN = 33554432;
export const ASC_RET_MESSAGES = 4294967296;
export const SECPKG_CRED_ATTR_NAMES = 1;
export const SECPKG_CRED_ATTR_SSI_PROVIDER = 2;
export const SECPKG_CRED_ATTR_KDC_PROXY_SETTINGS = 3;
export const SECPKG_CRED_ATTR_CERT = 4;
export const SECPKG_CRED_ATTR_PAC_BYPASS = 5;
export const KDC_PROXY_SETTINGS_V1 = 1;
export const KDC_PROXY_SETTINGS_FLAGS_FORCEPROXY = 1;
export const SECPKG_ATTR_PROTO_INFO = 7;
export const SECPKG_ATTR_USER_FLAGS = 11;
export const SECPKG_ATTR_USE_VALIDATED = 15;
export const SECPKG_ATTR_CREDENTIAL_NAME = 16;
export const SECPKG_ATTR_TARGET = 19;
export const SECPKG_ATTR_AUTHENTICATION_ID = 20;
export const SECPKG_ATTR_LOGOFF_TIME = 21;
export const SECPKG_ATTR_NEGO_KEYS = 22;
export const SECPKG_ATTR_PROMPTING_NEEDED = 24;
export const SECPKG_ATTR_NEGO_PKG_INFO = 31;
export const SECPKG_ATTR_NEGO_STATUS = 32;
export const SECPKG_ATTR_CONTEXT_DELETED = 33;
export const SECPKG_ATTR_APPLICATION_PROTOCOL = 35;
export const SECPKG_ATTR_NEGOTIATED_TLS_EXTENSIONS = 36;
export const SECPKG_ATTR_IS_LOOPBACK = 37;
export const SECPKG_ATTR_NEGO_INFO_FLAG_NO_KERBEROS = 1;
export const SECPKG_ATTR_NEGO_INFO_FLAG_NO_NTLM = 2;
export const SECPKG_NEGOTIATION_COMPLETE = 0;
export const SECPKG_NEGOTIATION_OPTIMISTIC = 1;
export const SECPKG_NEGOTIATION_IN_PROGRESS = 2;
export const SECPKG_NEGOTIATION_DIRECT = 3;
export const SECPKG_NEGOTIATION_TRY_MULTICRED = 4;
export const MAX_PROTOCOL_ID_SIZE = 255;
export const SECQOP_WRAP_NO_ENCRYPT = 2147483649;
export const SECQOP_WRAP_OOB_DATA = 1073741824;
export const SECURITY_ENTRYPOINT_ANSIW = `InitSecurityInterfaceW`;
export const SECURITY_ENTRYPOINT_ANSIA = `InitSecurityInterfaceA`;
export const SECURITY_ENTRYPOINT16 = `INITSECURITYINTERFACEA`;
export const SECURITY_ENTRYPOINT_ANSI = `InitSecurityInterfaceW`;
export const SECURITY_ENTRYPOINT = `INITSECURITYINTERFACEA`;
export const SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION = 1;
export const SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION_2 = 2;
export const SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION_3 = 3;
export const SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION_4 = 4;
export const SECURITY_SUPPORT_PROVIDER_INTERFACE_VERSION_5 = 5;
export const SASL_OPTION_SEND_SIZE = 1;
export const SASL_OPTION_RECV_SIZE = 2;
export const SASL_OPTION_AUTHZ_STRING = 3;
export const SASL_OPTION_AUTHZ_PROCESSING = 4;
export const SEC_WINNT_AUTH_IDENTITY_VERSION_2 = 513;
export const SEC_WINNT_AUTH_IDENTITY_VERSION = 512;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_PROCESS_ENCRYPTED = 16;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SYSTEM_PROTECTED = 32;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_USER_PROTECTED = 64;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SYSTEM_ENCRYPTED = 128;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_RESERVED = 65536;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_NULL_USER = 131072;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_NULL_DOMAIN = 262144;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_ID_PROVIDER = 524288;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_USE_MASK = 4278190080;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_CREDPROV_DO_NOT_SAVE = 2147483648;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_SAVE_CRED_BY_CALLER = 2147483648;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_SAVE_CRED_CHECKED = 1073741824;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_NO_CHECKBOX = 536870912;
export const SEC_WINNT_AUTH_IDENTITY_FLAGS_SSPIPFC_CREDPROV_DO_NOT_LOAD = 268435456;
export const SSPIPFC_CREDPROV_DO_NOT_SAVE = 1;
export const SSPIPFC_SAVE_CRED_BY_CALLER = 1;
export const SSPIPFC_NO_CHECKBOX = 2;
export const SSPIPFC_CREDPROV_DO_NOT_LOAD = 4;
export const SSPIPFC_USE_CREDUIBROKER = 8;
export const NGC_DATA_FLAG_KERB_CERTIFICATE_LOGON_FLAG_CHECK_DUPLICATES = 1;
export const NGC_DATA_FLAG_KERB_CERTIFICATE_LOGON_FLAG_USE_CERTIFICATE_INFO = 2;
export const NGC_DATA_FLAG_IS_SMARTCARD_DATA = 4;
export const NGC_DATA_FLAG_IS_CLOUD_TRUST_CRED = 8;
export const SEC_WINNT_AUTH_IDENTITY_ENCRYPT_SAME_LOGON = 1;
export const SEC_WINNT_AUTH_IDENTITY_ENCRYPT_SAME_PROCESS = 2;
export const SEC_WINNT_AUTH_IDENTITY_ENCRYPT_FOR_SYSTEM = 4;
export const SEC_WINNT_AUTH_IDENTITY_MARSHALLED = 4;
export const SEC_WINNT_AUTH_IDENTITY_ONLY = 8;
export const SECPKG_OPTIONS_PERMANENT = 1;
export const LOOKUP_VIEW_LOCAL_INFORMATION = 1;
export const LOOKUP_TRANSLATE_NAMES = 2048;
export const SECPKG_ATTR_ISSUER_LIST = 80;
export const SECPKG_ATTR_REMOTE_CRED = 81;
export const SECPKG_ATTR_SUPPORTED_ALGS = 86;
export const SECPKG_ATTR_CIPHER_STRENGTHS = 87;
export const SECPKG_ATTR_SUPPORTED_PROTOCOLS = 88;
export const SECPKG_ATTR_MAPPED_CRED_ATTR = 92;
export const SECPKG_ATTR_REMOTE_CERTIFICATES = 95;
export const SECPKG_ATTR_CLIENT_CERT_POLICY = 96;
export const SECPKG_ATTR_CC_POLICY_RESULT = 97;
export const SECPKG_ATTR_USE_NCRYPT = 98;
export const SECPKG_ATTR_LOCAL_CERT_INFO = 99;
export const SECPKG_ATTR_CIPHER_INFO = 100;
export const SECPKG_ATTR_REMOTE_CERT_CHAIN = 103;
export const SECPKG_ATTR_UI_INFO = 104;
export const SECPKG_ATTR_KEYING_MATERIAL = 107;
export const SECPKG_ATTR_SRTP_PARAMETERS = 108;
export const SECPKG_ATTR_TOKEN_BINDING = 109;
export const SECPKG_ATTR_CONNECTION_INFO_EX = 110;
export const SECPKG_ATTR_KEYING_MATERIAL_TOKEN_BINDING = 111;
export const SECPKG_ATTR_KEYING_MATERIAL_INPROC = 112;
export const SECPKG_ATTR_CERT_CHECK_RESULT = 113;
export const SECPKG_ATTR_CERT_CHECK_RESULT_INPROC = 114;
export const SECPKG_ATTR_SESSION_TICKET_KEYS = 115;
export const SESSION_TICKET_INFO_V0 = 0;
export const SESSION_TICKET_INFO_VERSION = 0;
export const LSA_MODE_PASSWORD_PROTECTED = 1;
export const LSA_MODE_INDIVIDUAL_ACCOUNTS = 2;
export const LSA_MODE_MANDATORY_ACCESS = 4;
export const LSA_MODE_LOG_FULL = 8;
export const LSA_MAXIMUM_SID_COUNT = 256;
export const LSA_MAXIMUM_ENUMERATION_LENGTH = 32000;
export const LSA_CALL_LICENSE_SERVER = 2147483648;
export const SE_ADT_OBJECT_ONLY = 1;
export const SE_MAX_AUDIT_PARAMETERS = 32;
export const SE_MAX_GENERIC_AUDIT_PARAMETERS = 28;
export const SE_ADT_PARAMETERS_SELF_RELATIVE = 1;
export const SE_ADT_PARAMETERS_SEND_TO_LSA = 2;
export const SE_ADT_PARAMETER_EXTENSIBLE_AUDIT = 4;
export const SE_ADT_PARAMETER_GENERIC_AUDIT = 8;
export const SE_ADT_PARAMETER_WRITE_SYNCHRONOUS = 16;
export const LSA_ADT_SECURITY_SOURCE_NAME = `Microsoft-Windows-Security-Auditing`;
export const LSA_ADT_LEGACY_SECURITY_SOURCE_NAME = `Security`;
export const SE_ADT_POLICY_AUDIT_EVENT_TYPE_EX_BEGIN = 100;
export const POLICY_AUDIT_EVENT_UNCHANGED = 0;
export const POLICY_AUDIT_EVENT_SUCCESS = 1;
export const POLICY_AUDIT_EVENT_FAILURE = 2;
export const POLICY_AUDIT_EVENT_NONE = 4;
export const LSA_AP_NAME_INITIALIZE_PACKAGE = `LsaApInitializePackage\0`;
export const LSA_AP_NAME_LOGON_USER = `LsaApLogonUser\0`;
export const LSA_AP_NAME_LOGON_USER_EX = `LsaApLogonUserEx\0`;
export const LSA_AP_NAME_CALL_PACKAGE = `LsaApCallPackage\0`;
export const LSA_AP_NAME_LOGON_TERMINATED = `LsaApLogonTerminated\0`;
export const LSA_AP_NAME_CALL_PACKAGE_UNTRUSTED = `LsaApCallPackageUntrusted\0`;
export const LSA_AP_NAME_CALL_PACKAGE_PASSTHROUGH = `LsaApCallPackagePassthrough\0`;
export const POLICY_VIEW_LOCAL_INFORMATION = 1;
export const POLICY_VIEW_AUDIT_INFORMATION = 2;
export const POLICY_GET_PRIVATE_INFORMATION = 4;
export const POLICY_TRUST_ADMIN = 8;
export const POLICY_CREATE_ACCOUNT = 16;
export const POLICY_CREATE_SECRET = 32;
export const POLICY_CREATE_PRIVILEGE = 64;
export const POLICY_SET_DEFAULT_QUOTA_LIMITS = 128;
export const POLICY_SET_AUDIT_REQUIREMENTS = 256;
export const POLICY_AUDIT_LOG_ADMIN = 512;
export const POLICY_SERVER_ADMIN = 1024;
export const POLICY_LOOKUP_NAMES = 2048;
export const POLICY_NOTIFICATION = 4096;
export const LSA_LOOKUP_ISOLATED_AS_LOCAL = 2147483648;
export const LSA_LOOKUP_DISALLOW_CONNECTED_ACCOUNT_INTERNET_SID = 2147483648;
export const LSA_LOOKUP_PREFER_INTERNET_NAMES = 1073741824;
export const PER_USER_POLICY_UNCHANGED = 0;
export const PER_USER_AUDIT_SUCCESS_INCLUDE = 1;
export const PER_USER_AUDIT_SUCCESS_EXCLUDE = 2;
export const PER_USER_AUDIT_FAILURE_INCLUDE = 4;
export const PER_USER_AUDIT_FAILURE_EXCLUDE = 8;
export const PER_USER_AUDIT_NONE = 16;
export const POLICY_QOS_SCHANNEL_REQUIRED = 1;
export const POLICY_QOS_OUTBOUND_INTEGRITY = 2;
export const POLICY_QOS_OUTBOUND_CONFIDENTIALITY = 4;
export const POLICY_QOS_INBOUND_INTEGRITY = 8;
export const POLICY_QOS_INBOUND_CONFIDENTIALITY = 16;
export const POLICY_QOS_ALLOW_LOCAL_ROOT_CERT_STORE = 32;
export const POLICY_QOS_RAS_SERVER_ALLOWED = 64;
export const POLICY_QOS_DHCP_SERVER_ALLOWED = 128;
export const POLICY_KERBEROS_VALIDATE_CLIENT = 128;
export const ACCOUNT_VIEW = 1;
export const ACCOUNT_ADJUST_PRIVILEGES = 2;
export const ACCOUNT_ADJUST_QUOTAS = 4;
export const ACCOUNT_ADJUST_SYSTEM_ACCESS = 8;
export const TRUSTED_QUERY_DOMAIN_NAME = 1;
export const TRUSTED_QUERY_CONTROLLERS = 2;
export const TRUSTED_SET_CONTROLLERS = 4;
export const TRUSTED_QUERY_POSIX = 8;
export const TRUSTED_SET_POSIX = 16;
export const TRUSTED_SET_AUTH = 32;
export const TRUSTED_QUERY_AUTH = 64;
export const TRUST_ATTRIBUTE_TREE_PARENT = 4194304;
export const TRUST_ATTRIBUTE_TREE_ROOT = 8388608;
export const TRUST_ATTRIBUTES_VALID = 4278386687;
export const TRUST_ATTRIBUTE_QUARANTINED_DOMAIN = 4;
export const TRUST_ATTRIBUTE_TRUST_USES_RC4_ENCRYPTION = 128;
export const TRUST_ATTRIBUTE_TRUST_USES_AES_KEYS = 256;
export const TRUST_ATTRIBUTE_CROSS_ORGANIZATION_NO_TGT_DELEGATION = 512;
export const TRUST_ATTRIBUTE_PIM_TRUST = 1024;
export const TRUST_ATTRIBUTE_CROSS_ORGANIZATION_ENABLE_TGT_DELEGATION = 2048;
export const TRUST_ATTRIBUTES_USER = 4278190080;
export const LSA_FOREST_TRUST_RECORD_TYPE_UNRECOGNIZED = 2147483648;
export const LSA_FTRECORD_DISABLED_REASONS = 65535;
export const LSA_TLN_DISABLED_NEW = 1;
export const LSA_TLN_DISABLED_ADMIN = 2;
export const LSA_TLN_DISABLED_CONFLICT = 4;
export const LSA_SID_DISABLED_ADMIN = 1;
export const LSA_SID_DISABLED_CONFLICT = 2;
export const LSA_NB_DISABLED_ADMIN = 4;
export const LSA_NB_DISABLED_CONFLICT = 8;
export const MAX_RECORDS_IN_FOREST_TRUST_INFO = 4000;
export const SECRET_SET_VALUE = 1;
export const SECRET_QUERY_VALUE = 2;
export const LSA_GLOBAL_SECRET_PREFIX = `G$`;
export const LSA_GLOBAL_SECRET_PREFIX_LENGTH = 2;
export const LSA_LOCAL_SECRET_PREFIX = `L$`;
export const LSA_LOCAL_SECRET_PREFIX_LENGTH = 2;
export const LSA_MACHINE_SECRET_PREFIX = `M$`;
export const LSA_SECRET_MAXIMUM_COUNT = 4096;
export const LSA_SECRET_MAXIMUM_LENGTH = 512;
export const MAXIMUM_CAPES_PER_CAP = 127;
export const CENTRAL_ACCESS_POLICY_OWNER_RIGHTS_PRESENT_FLAG = 1;
export const CENTRAL_ACCESS_POLICY_STAGED_OWNER_RIGHTS_PRESENT_FLAG = 256;
export const CENTRAL_ACCESS_POLICY_STAGED_FLAG = 65536;
export const LSASETCAPS_RELOAD_FLAG = 1;
export const LSASETCAPS_VALID_FLAG_MASK = 1;
export const SE_INTERACTIVE_LOGON_NAME = `SeInteractiveLogonRight`;
export const SE_NETWORK_LOGON_NAME = `SeNetworkLogonRight`;
export const SE_BATCH_LOGON_NAME = `SeBatchLogonRight`;
export const SE_SERVICE_LOGON_NAME = `SeServiceLogonRight`;
export const SE_DENY_INTERACTIVE_LOGON_NAME = `SeDenyInteractiveLogonRight`;
export const SE_DENY_NETWORK_LOGON_NAME = `SeDenyNetworkLogonRight`;
export const SE_DENY_BATCH_LOGON_NAME = `SeDenyBatchLogonRight`;
export const SE_DENY_SERVICE_LOGON_NAME = `SeDenyServiceLogonRight`;
export const SE_REMOTE_INTERACTIVE_LOGON_NAME = `SeRemoteInteractiveLogonRight`;
export const SE_DENY_REMOTE_INTERACTIVE_LOGON_NAME = `SeDenyRemoteInteractiveLogonRight`;
export const NEGOTIATE_MAX_PREFIX = 32;
export const NEGOTIATE_ALLOW_NTLM = 268435456;
export const NEGOTIATE_NEG_NTLM = 536870912;
export const MAX_USER_RECORDS = 1000;
export const DOMAIN_NO_LM_OWF_CHANGE = 64;
export const SAM_PASSWORD_CHANGE_NOTIFY_ROUTINE = `PasswordChangeNotify`;
export const SAM_INIT_NOTIFICATION_ROUTINE = `InitializeChangeNotify`;
export const SAM_PASSWORD_FILTER_ROUTINE = `PasswordFilter`;
export const MSV1_0_PACKAGE_NAME = `MICROSOFT_AUTHENTICATION_PACKAGE_V1_0`;
export const MSV1_0_PACKAGE_NAMEW = `MICROSOFT_AUTHENTICATION_PACKAGE_V1_0`;
export const MSV1_0_SUBAUTHENTICATION_KEY = `SYSTEM\\CurrentControlSet\\Control\\Lsa\\MSV1_0`;
export const MSV1_0_SUBAUTHENTICATION_VALUE = `Auth`;
export const MSV1_0_CHALLENGE_LENGTH = 8;
export const MSV1_0_USER_SESSION_KEY_LENGTH = 16;
export const MSV1_0_LANMAN_SESSION_KEY_LENGTH = 8;
export const MSV1_0_USE_CLIENT_CHALLENGE = 128;
export const MSV1_0_DISABLE_PERSONAL_FALLBACK = 4096;
export const MSV1_0_ALLOW_FORCE_GUEST = 8192;
export const MSV1_0_CLEARTEXT_PASSWORD_SUPPLIED = 16384;
export const MSV1_0_USE_DOMAIN_FOR_ROUTING_ONLY = 32768;
export const MSV1_0_SUBAUTHENTICATION_DLL_EX = 1048576;
export const MSV1_0_ALLOW_MSVCHAPV2 = 65536;
export const MSV1_0_S4U2SELF = 131072;
export const MSV1_0_CHECK_LOGONHOURS_FOR_S4U = 262144;
export const MSV1_0_INTERNET_DOMAIN = 524288;
export const MSV1_0_SUBAUTHENTICATION_DLL = 4278190080;
export const MSV1_0_SUBAUTHENTICATION_DLL_SHIFT = 24;
export const MSV1_0_MNS_LOGON = 16777216;
export const MSV1_0_SUBAUTHENTICATION_DLL_RAS = 2;
export const MSV1_0_SUBAUTHENTICATION_DLL_IIS = 132;
export const MSV1_0_S4U_LOGON_FLAG_CHECK_LOGONHOURS = 2;
export const LOGON_NTLMV2_ENABLED = 256;
export const LOGON_NT_V2 = 2048;
export const LOGON_LM_V2 = 4096;
export const LOGON_NTLM_V2 = 8192;
export const LOGON_OPTIMIZED = 16384;
export const LOGON_WINLOGON = 32768;
export const LOGON_PKINIT = 65536;
export const LOGON_NO_OPTIMIZED = 131072;
export const LOGON_NO_ELEVATION = 262144;
export const LOGON_MANAGED_SERVICE = 524288;
export const MSV1_0_SUBAUTHENTICATION_FLAGS = 4278190080;
export const LOGON_GRACE_LOGON = 16777216;
export const MSV1_0_OWF_PASSWORD_LENGTH = 16;
export const MSV1_0_SHA_PASSWORD_LENGTH = 20;
export const MSV1_0_CREDENTIAL_KEY_LENGTH = 20;
export const MSV1_0_CRED_REMOVED = 4;
export const MSV1_0_CRED_CREDKEY_PRESENT = 8;
export const MSV1_0_CRED_SHA_PRESENT = 16;
export const MSV1_0_CRED_VERSION_V2 = 2;
export const MSV1_0_CRED_VERSION_V3 = 4;
export const MSV1_0_CRED_VERSION_IUM = 4294901761;
export const MSV1_0_CRED_VERSION_REMOTE = 4294901762;
export const MSV1_0_CRED_VERSION_ARSO = 4294901763;
export const MSV1_0_CRED_VERSION_RESERVED_1 = 4294967294;
export const MSV1_0_CRED_VERSION_INVALID = 4294967295;
export const MSV1_0_NTLM3_RESPONSE_LENGTH = 16;
export const MSV1_0_NTLM3_OWF_LENGTH = 16;
export const MSV1_0_MAX_NTLM3_LIFE = 1800;
export const MSV1_0_MAX_AVL_SIZE = 64000;
export const MSV1_0_AV_FLAG_FORCE_GUEST = 1;
export const MSV1_0_AV_FLAG_MIC_HANDSHAKE_MESSAGES = 2;
export const MSV1_0_AV_FLAG_UNVERIFIED_TARGET = 4;
export const RTL_ENCRYPT_MEMORY_SIZE = 8;
export const RTL_ENCRYPT_OPTION_CROSS_PROCESS = 1;
export const RTL_ENCRYPT_OPTION_SAME_LOGON = 2;
export const RTL_ENCRYPT_OPTION_FOR_SYSTEM = 4;
export const KERBEROS_VERSION = 5;
export const KERBEROS_REVISION = 6;
export const KERB_ETYPE_AES128_CTS_HMAC_SHA1_96 = 17;
export const KERB_ETYPE_AES256_CTS_HMAC_SHA1_96 = 18;
export const KERB_ETYPE_RC4_PLAIN2 = `-129`;
export const KERB_ETYPE_RC4_LM = `-130`;
export const KERB_ETYPE_RC4_SHA = `-131`;
export const KERB_ETYPE_DES_PLAIN = `-132`;
export const KERB_ETYPE_RC4_HMAC_OLD = `-133`;
export const KERB_ETYPE_RC4_PLAIN_OLD = `-134`;
export const KERB_ETYPE_RC4_HMAC_OLD_EXP = `-135`;
export const KERB_ETYPE_RC4_PLAIN_OLD_EXP = `-136`;
export const KERB_ETYPE_RC4_PLAIN = `-140`;
export const KERB_ETYPE_RC4_PLAIN_EXP = `-141`;
export const KERB_ETYPE_AES128_CTS_HMAC_SHA1_96_PLAIN = `-148`;
export const KERB_ETYPE_AES256_CTS_HMAC_SHA1_96_PLAIN = `-149`;
export const KERB_ETYPE_DSA_SHA1_CMS = 9;
export const KERB_ETYPE_RSA_MD5_CMS = 10;
export const KERB_ETYPE_RSA_SHA1_CMS = 11;
export const KERB_ETYPE_RC2_CBC_ENV = 12;
export const KERB_ETYPE_RSA_ENV = 13;
export const KERB_ETYPE_RSA_ES_OEAP_ENV = 14;
export const KERB_ETYPE_DES_EDE3_CBC_ENV = 15;
export const KERB_ETYPE_DSA_SIGN = 8;
export const KERB_ETYPE_RSA_PRIV = 9;
export const KERB_ETYPE_RSA_PUB = 10;
export const KERB_ETYPE_RSA_PUB_MD5 = 11;
export const KERB_ETYPE_RSA_PUB_SHA1 = 12;
export const KERB_ETYPE_PKCS7_PUB = 13;
export const KERB_ETYPE_DES3_CBC_MD5 = 5;
export const KERB_ETYPE_DES3_CBC_SHA1 = 7;
export const KERB_ETYPE_DES3_CBC_SHA1_KD = 16;
export const KERB_ETYPE_DES_CBC_MD5_NT = 20;
export const KERB_ETYPE_RC4_HMAC_NT_EXP = 24;
export const KERB_CHECKSUM_NONE = 0;
export const KERB_CHECKSUM_CRC32 = 1;
export const KERB_CHECKSUM_MD4 = 2;
export const KERB_CHECKSUM_KRB_DES_MAC = 4;
export const KERB_CHECKSUM_KRB_DES_MAC_K = 5;
export const KERB_CHECKSUM_MD5 = 7;
export const KERB_CHECKSUM_MD5_DES = 8;
export const KERB_CHECKSUM_SHA1_NEW = 14;
export const KERB_CHECKSUM_HMAC_SHA1_96_AES128 = 15;
export const KERB_CHECKSUM_HMAC_SHA1_96_AES256 = 16;
export const KERB_CHECKSUM_LM = `-130`;
export const KERB_CHECKSUM_SHA1 = `-131`;
export const KERB_CHECKSUM_REAL_CRC32 = `-132`;
export const KERB_CHECKSUM_DES_MAC = `-133`;
export const KERB_CHECKSUM_DES_MAC_MD5 = `-134`;
export const KERB_CHECKSUM_MD25 = `-135`;
export const KERB_CHECKSUM_RC4_MD5 = `-136`;
export const KERB_CHECKSUM_MD5_HMAC = `-137`;
export const KERB_CHECKSUM_HMAC_MD5 = `-138`;
export const KERB_CHECKSUM_HMAC_SHA1_96_AES128_Ki = `-150`;
export const KERB_CHECKSUM_HMAC_SHA1_96_AES256_Ki = `-151`;
export const AUTH_REQ_ALLOW_FORWARDABLE = 1;
export const AUTH_REQ_ALLOW_PROXIABLE = 2;
export const AUTH_REQ_ALLOW_POSTDATE = 4;
export const AUTH_REQ_ALLOW_RENEWABLE = 8;
export const AUTH_REQ_ALLOW_NOADDRESS = 16;
export const AUTH_REQ_ALLOW_ENC_TKT_IN_SKEY = 32;
export const AUTH_REQ_ALLOW_VALIDATE = 64;
export const AUTH_REQ_VALIDATE_CLIENT = 128;
export const AUTH_REQ_OK_AS_DELEGATE = 256;
export const AUTH_REQ_PREAUTH_REQUIRED = 512;
export const AUTH_REQ_TRANSITIVE_TRUST = 1024;
export const AUTH_REQ_ALLOW_S4U_DELEGATE = 2048;
export const KERB_TICKET_FLAGS_name_canonicalize = 65536;
export const KERB_TICKET_FLAGS_cname_in_pa_data = 262144;
export const KERB_TICKET_FLAGS_enc_pa_rep = 65536;
export const KRB_NT_UNKNOWN = 0;
export const KRB_NT_PRINCIPAL = 1;
export const KRB_NT_PRINCIPAL_AND_ID = `-131`;
export const KRB_NT_SRV_INST = 2;
export const KRB_NT_SRV_INST_AND_ID = `-132`;
export const KRB_NT_SRV_HST = 3;
export const KRB_NT_SRV_XHST = 4;
export const KRB_NT_UID = 5;
export const KRB_NT_ENTERPRISE_PRINCIPAL = 10;
export const KRB_NT_WELLKNOWN = 11;
export const KRB_NT_ENT_PRINCIPAL_AND_ID = `-130`;
export const KRB_NT_MS_PRINCIPAL = `-128`;
export const KRB_NT_MS_PRINCIPAL_AND_ID = `-129`;
export const KRB_NT_MS_BRANCH_ID = `-133`;
export const KRB_NT_X500_PRINCIPAL = 6;
export const KRB_WELLKNOWN_STRING = `WELLKNOWN`;
export const KRB_ANONYMOUS_STRING = `ANONYMOUS`;
export const KERB_WRAP_NO_ENCRYPT = 2147483649;
export const KERB_CERTIFICATE_LOGON_FLAG_CHECK_DUPLICATES = 1;
export const KERB_CERTIFICATE_LOGON_FLAG_USE_CERTIFICATE_INFO = 2;
export const KERB_CERTIFICATE_S4U_LOGON_FLAG_CHECK_DUPLICATES = 1;
export const KERB_CERTIFICATE_S4U_LOGON_FLAG_CHECK_LOGONHOURS = 2;
export const KERB_CERTIFICATE_S4U_LOGON_FLAG_FAIL_IF_NT_AUTH_POLICY_REQUIRED = 4;
export const KERB_CERTIFICATE_S4U_LOGON_FLAG_IDENTIFY = 8;
export const KERB_LOGON_FLAG_ALLOW_EXPIRED_TICKET = 1;
export const KERB_LOGON_FLAG_REDIRECTED = 2;
export const KERB_S4U_LOGON_FLAG_CHECK_LOGONHOURS = 2;
export const KERB_S4U_LOGON_FLAG_IDENTIFY = 8;
export const KERB_USE_DEFAULT_TICKET_FLAGS = 0;
export const KERB_RETRIEVE_TICKET_DEFAULT = 0;
export const KERB_RETRIEVE_TICKET_DONT_USE_CACHE = 1;
export const KERB_RETRIEVE_TICKET_USE_CACHE_ONLY = 2;
export const KERB_RETRIEVE_TICKET_USE_CREDHANDLE = 4;
export const KERB_RETRIEVE_TICKET_AS_KERB_CRED = 8;
export const KERB_RETRIEVE_TICKET_WITH_SEC_CRED = 16;
export const KERB_RETRIEVE_TICKET_CACHE_TICKET = 32;
export const KERB_RETRIEVE_TICKET_MAX_LIFETIME = 64;
export const KERB_ETYPE_DEFAULT = 0;
export const KERB_PURGE_ALL_TICKETS = 1;
export const KERB_S4U2PROXY_CACHE_ENTRY_INFO_FLAG_NEGATIVE = 1;
export const KERB_S4U2PROXY_CRED_FLAG_NEGATIVE = 1;
export const KERB_REFRESH_POLICY_KERBEROS = 1;
export const KERB_REFRESH_POLICY_KDC = 2;
export const KERB_CLOUD_KERBEROS_DEBUG_DATA_VERSION = 0;
export const DS_UNKNOWN_ADDRESS_TYPE = 0;
export const KERB_SETPASS_USE_LOGONID = 1;
export const KERB_SETPASS_USE_CREDHANDLE = 2;
export const KERB_DECRYPT_FLAG_DEFAULT_KEY = 1;
export const KERB_REFRESH_SCCRED_RELEASE = 0;
export const KERB_REFRESH_SCCRED_GETTGT = 1;
export const KERB_TRANSFER_CRED_WITH_TICKETS = 1;
export const KERB_TRANSFER_CRED_CLEANUP_CREDENTIALS = 2;
export const KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE_FLAG_DAC_DISABLED = 1;
export const AUDIT_SET_SYSTEM_POLICY = 1;
export const AUDIT_QUERY_SYSTEM_POLICY = 2;
export const AUDIT_SET_USER_POLICY = 4;
export const AUDIT_QUERY_USER_POLICY = 8;
export const AUDIT_ENUMERATE_USERS = 16;
export const AUDIT_SET_MISC_POLICY = 32;
export const AUDIT_QUERY_MISC_POLICY = 64;
export const PKU2U_PACKAGE_NAME_A = `pku2u`;
export const PKU2U_PACKAGE_NAME = `pku2u`;
export const PKU2U_PACKAGE_NAME_W = `pku2u`;
export const SAM_CREDENTIAL_UPDATE_NOTIFY_ROUTINE = `CredentialUpdateNotify`;
export const SAM_CREDENTIAL_UPDATE_REGISTER_ROUTINE = `CredentialUpdateRegister`;
export const SAM_CREDENTIAL_UPDATE_FREE_ROUTINE = `CredentialUpdateFree`;
export const SAM_CREDENTIAL_UPDATE_REGISTER_MAPPED_ENTRYPOINTS_ROUTINE = `RegisterMappedEntrypoints`;
export const SECPKG_CLIENT_PROCESS_TERMINATED = 1;
export const SECPKG_CLIENT_THREAD_TERMINATED = 2;
export const SECPKG_CALL_KERNEL_MODE = 1;
export const SECPKG_CALL_ANSI = 2;
export const SECPKG_CALL_URGENT = 4;
export const SECPKG_CALL_RECURSIVE = 8;
export const SECPKG_CALL_IN_PROC = 16;
export const SECPKG_CALL_CLEANUP = 32;
export const SECPKG_CALL_WOWCLIENT = 64;
export const SECPKG_CALL_THREAD_TERM = 128;
export const SECPKG_CALL_PROCESS_TERM = 256;
export const SECPKG_CALL_IS_TCB = 512;
export const SECPKG_CALL_NETWORK_ONLY = 1024;
export const SECPKG_CALL_WINLOGON = 2048;
export const SECPKG_CALL_ASYNC_UPDATE = 4096;
export const SECPKG_CALL_SYSTEM_PROC = 8192;
export const SECPKG_CALL_NEGO = 16384;
export const SECPKG_CALL_NEGO_EXTENDER = 32768;
export const SECPKG_CALL_BUFFER_MARSHAL = 65536;
export const SECPKG_CALL_UNLOCK = 131072;
export const SECPKG_CALL_CLOUDAP_CONNECT = 262144;
export const SECPKG_CALL_WOWX86 = 64;
export const SECPKG_CALL_WOWA32 = 262144;
export const SECPKG_CREDENTIAL_VERSION = 201;
export const SECPKG_CREDENTIAL_FLAGS_CALLER_HAS_TCB = 1;
export const SECPKG_CREDENTIAL_FLAGS_CREDMAN_CRED = 2;
export const SECPKG_SURROGATE_LOGON_VERSION_1 = 1;
export const SECBUFFER_UNMAPPED = 1073741824;
export const SECBUFFER_KERNEL_MAP = 536870912;
export const PRIMARY_CRED_CLEAR_PASSWORD = 1;
export const PRIMARY_CRED_OWF_PASSWORD = 2;
export const PRIMARY_CRED_UPDATE = 4;
export const PRIMARY_CRED_CACHED_LOGON = 8;
export const PRIMARY_CRED_LOGON_NO_TCB = 16;
export const PRIMARY_CRED_LOGON_LUA = 32;
export const PRIMARY_CRED_INTERACTIVE_SMARTCARD_LOGON = 64;
export const PRIMARY_CRED_REFRESH_NEEDED = 128;
export const PRIMARY_CRED_INTERNET_USER = 256;
export const PRIMARY_CRED_AUTH_ID = 512;
export const PRIMARY_CRED_DO_NOT_SPLIT = 1024;
export const PRIMARY_CRED_PROTECTED_USER = 2048;
export const PRIMARY_CRED_EX = 4096;
export const PRIMARY_CRED_TRANSFER = 8192;
export const PRIMARY_CRED_RESTRICTED_TS = 16384;
export const PRIMARY_CRED_PACKED_CREDS = 32768;
export const PRIMARY_CRED_ENTERPRISE_INTERNET_USER = 65536;
export const PRIMARY_CRED_ENCRYPTED_CREDGUARD_PASSWORD = 131072;
export const PRIMARY_CRED_CACHED_INTERACTIVE_LOGON = 262144;
export const PRIMARY_CRED_INTERACTIVE_NGC_LOGON = 524288;
export const PRIMARY_CRED_INTERACTIVE_FIDO_LOGON = 1048576;
export const PRIMARY_CRED_ARSO_LOGON = 2097152;
export const PRIMARY_CRED_SUPPLEMENTAL = 4194304;
export const PRIMARY_CRED_LOGON_PACKAGE_SHIFT = 24;
export const PRIMARY_CRED_PACKAGE_MASK = 4278190080;
export const SECPKG_PRIMARY_CRED_EX_FLAGS_EX_DELEGATION_TOKEN = 1;
export const MAX_CRED_SIZE = 1024;
export const SECPKG_STATE_ENCRYPTION_PERMITTED = 1;
export const SECPKG_STATE_STRONG_ENCRYPTION_PERMITTED = 2;
export const SECPKG_STATE_DOMAIN_CONTROLLER = 4;
export const SECPKG_STATE_WORKSTATION = 8;
export const SECPKG_STATE_STANDALONE = 16;
export const SECPKG_STATE_CRED_ISOLATION_ENABLED = 32;
export const SECPKG_STATE_RESERVED_1 = 2147483648;
export const SECPKG_MAX_OID_LENGTH = 32;
export const SECPKG_ATTR_SASL_CONTEXT = 65536;
export const SECPKG_ATTR_THUNK_ALL = 65536;
export const UNDERSTANDS_LONG_NAMES = 1;
export const NO_LONG_NAMES = 2;
export const SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST_FLAG_OPTIMISTIC_LOGON = 1;
export const SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST_FLAG_CLEANUP_CREDENTIALS = 2;
export const SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST_FLAG_TO_SSO_SESSION = 4;
export const NOTIFIER_FLAG_NEW_THREAD = 1;
export const NOTIFIER_FLAG_ONE_SHOT = 2;
export const NOTIFIER_FLAG_SECONDS = 2147483648;
export const NOTIFIER_TYPE_INTERVAL = 1;
export const NOTIFIER_TYPE_HANDLE_WAIT = 2;
export const NOTIFIER_TYPE_STATE_CHANGE = 3;
export const NOTIFIER_TYPE_NOTIFY_EVENT = 4;
export const NOTIFIER_TYPE_IMMEDIATE = 16;
export const NOTIFY_CLASS_PACKAGE_CHANGE = 1;
export const NOTIFY_CLASS_ROLE_CHANGE = 2;
export const NOTIFY_CLASS_DOMAIN_CHANGE = 3;
export const NOTIFY_CLASS_REGISTRY_CHANGE = 4;
export const LSA_QUERY_CLIENT_PRELOGON_SESSION_ID = 1;
export const CREDP_FLAGS_IN_PROCESS = 1;
export const CREDP_FLAGS_USE_MIDL_HEAP = 2;
export const CREDP_FLAGS_DONT_CACHE_TI = 4;
export const CREDP_FLAGS_CLEAR_PASSWORD = 8;
export const CREDP_FLAGS_USER_ENCRYPTED_PASSWORD = 16;
export const CREDP_FLAGS_TRUSTED_CALLER = 32;
export const CREDP_FLAGS_VALIDATE_PROXY_TARGET = 64;
export const CRED_MARSHALED_TI_SIZE_SIZE = 12;
export const LSA_AP_NAME_LOGON_USER_EX2 = `LsaApLogonUserEx2\0`;
export const SP_ACCEPT_CREDENTIALS_NAME = `SpAcceptCredentials\0`;
export const SECPKG_UNICODE_ATTRIBUTE = 2147483648;
export const SECPKG_ANSI_ATTRIBUTE = 0;
export const SECPKG_CREDENTIAL_ATTRIBUTE = 0;
export const SECPKG_LSAMODEINIT_NAME = `SpLsaModeInitialize`;
export const SECPKG_USERMODEINIT_NAME = `SpUserModeInitialize`;
export const SECPKG_INTERFACE_VERSION = 65536;
export const SECPKG_INTERFACE_VERSION_2 = 131072;
export const SECPKG_INTERFACE_VERSION_3 = 262144;
export const SECPKG_INTERFACE_VERSION_4 = 524288;
export const SECPKG_INTERFACE_VERSION_5 = 1048576;
export const SECPKG_INTERFACE_VERSION_6 = 2097152;
export const SECPKG_INTERFACE_VERSION_7 = 4194304;
export const SECPKG_INTERFACE_VERSION_8 = 8388608;
export const SECPKG_INTERFACE_VERSION_9 = 16777216;
export const SECPKG_INTERFACE_VERSION_10 = 33554432;
export const UNISP_NAME_A = `Microsoft Unified Security Protocol Provider`;
export const UNISP_NAME_W = `Microsoft Unified Security Protocol Provider`;
export const SSL2SP_NAME_A = `Microsoft SSL 2.0`;
export const SSL2SP_NAME_W = `Microsoft SSL 2.0`;
export const SSL3SP_NAME_A = `Microsoft SSL 3.0`;
export const SSL3SP_NAME_W = `Microsoft SSL 3.0`;
export const TLS1SP_NAME_A = `Microsoft TLS 1.0`;
export const TLS1SP_NAME_W = `Microsoft TLS 1.0`;
export const PCT1SP_NAME_A = `Microsoft PCT 1.0`;
export const PCT1SP_NAME_W = `Microsoft PCT 1.0`;
export const SCHANNEL_NAME_A = `Schannel`;
export const SCHANNEL_NAME_W = `Schannel`;
export const DEFAULT_TLS_SSP_NAME_A = `Default TLS SSP`;
export const DEFAULT_TLS_SSP_NAME_W = `Default TLS SSP`;
export const UNISP_NAME = `Microsoft Unified Security Protocol Provider`;
export const PCT1SP_NAME = `Microsoft PCT 1.0`;
export const SSL2SP_NAME = `Microsoft SSL 2.0`;
export const SSL3SP_NAME = `Microsoft SSL 3.0`;
export const TLS1SP_NAME = `Microsoft TLS 1.0`;
export const SCHANNEL_NAME = `Schannel`;
export const DEFAULT_TLS_SSP_NAME = `Default TLS SSP`;
export const UNISP_RPC_ID = 14;
export const RCRED_STATUS_NOCRED = 0;
export const RCRED_CRED_EXISTS = 1;
export const RCRED_STATUS_UNKNOWN_ISSUER = 2;
export const LCRED_STATUS_NOCRED = 0;
export const LCRED_CRED_EXISTS = 1;
export const LCRED_STATUS_UNKNOWN_ISSUER = 2;
export const SECPKGCONTEXT_CONNECTION_INFO_EX_V1 = 1;
export const SECPKGCONTEXT_CIPHERINFO_V1 = 1;
export const SSL_SESSION_RECONNECT = 1;
export const KERN_CONTEXT_CERT_INFO_V1 = 0;
export const ENABLE_TLS_CLIENT_EARLY_START = 1;
export const SCH_CRED_V1 = 1;
export const SCH_CRED_V2 = 2;
export const SCH_CRED_VERSION = 2;
export const SCH_CRED_V3 = 3;
export const SCHANNEL_CRED_VERSION = 4;
export const SCH_CREDENTIALS_VERSION = 5;
export const TLS_PARAMS_OPTIONAL = 1;
export const SCH_CRED_MAX_SUPPORTED_PARAMETERS = 16;
export const SCH_CRED_MAX_SUPPORTED_ALPN_IDS = 16;
export const SCH_CRED_MAX_SUPPORTED_CRYPTO_SETTINGS = 16;
export const SCH_CRED_MAX_SUPPORTED_CHAINING_MODES = 16;
export const SCH_MAX_EXT_SUBSCRIPTIONS = 2;
export const SCH_CRED_FORMAT_CERT_CONTEXT = 0;
export const SCH_CRED_FORMAT_CERT_HASH = 1;
export const SCH_CRED_FORMAT_CERT_HASH_STORE = 2;
export const SCH_CRED_MAX_STORE_NAME_SIZE = 128;
export const SCH_CRED_MAX_SUPPORTED_ALGS = 256;
export const SCH_CRED_MAX_SUPPORTED_CERTS = 100;
export const SCH_MACHINE_CERT_HASH = 1;
export const SCH_CRED_DISABLE_RECONNECTS = 128;
export const SCH_CRED_RESTRICTED_ROOTS = 8192;
export const SCH_CRED_REVOCATION_CHECK_CACHE_ONLY = 16384;
export const SCH_CRED_CACHE_ONLY_URL_RETRIEVAL = 32768;
export const SCH_CRED_MEMORY_STORE_CERT = 65536;
export const SCH_CRED_SNI_CREDENTIAL = 524288;
export const SCH_CRED_SNI_ENABLE_OCSP = 1048576;
export const SCH_USE_DTLS_ONLY = 16777216;
export const SCH_ALLOW_NULL_ENCRYPTION = 33554432;
export const SCH_CRED_DEFERRED_CRED_VALIDATION = 67108864;
export const SCHANNEL_RENEGOTIATE = 0;
export const SCHANNEL_SHUTDOWN = 1;
export const SCHANNEL_ALERT = 2;
export const SCHANNEL_SESSION = 3;
export const TLS1_ALERT_CLOSE_NOTIFY = 0;
export const TLS1_ALERT_UNEXPECTED_MESSAGE = 10;
export const TLS1_ALERT_BAD_RECORD_MAC = 20;
export const TLS1_ALERT_DECRYPTION_FAILED = 21;
export const TLS1_ALERT_RECORD_OVERFLOW = 22;
export const TLS1_ALERT_DECOMPRESSION_FAIL = 30;
export const TLS1_ALERT_HANDSHAKE_FAILURE = 40;
export const TLS1_ALERT_BAD_CERTIFICATE = 42;
export const TLS1_ALERT_UNSUPPORTED_CERT = 43;
export const TLS1_ALERT_CERTIFICATE_REVOKED = 44;
export const TLS1_ALERT_CERTIFICATE_EXPIRED = 45;
export const TLS1_ALERT_CERTIFICATE_UNKNOWN = 46;
export const TLS1_ALERT_ILLEGAL_PARAMETER = 47;
export const TLS1_ALERT_UNKNOWN_CA = 48;
export const TLS1_ALERT_ACCESS_DENIED = 49;
export const TLS1_ALERT_DECODE_ERROR = 50;
export const TLS1_ALERT_DECRYPT_ERROR = 51;
export const TLS1_ALERT_EXPORT_RESTRICTION = 60;
export const TLS1_ALERT_PROTOCOL_VERSION = 70;
export const TLS1_ALERT_INSUFFIENT_SECURITY = 71;
export const TLS1_ALERT_INTERNAL_ERROR = 80;
export const TLS1_ALERT_USER_CANCELED = 90;
export const TLS1_ALERT_NO_RENEGOTIATION = 100;
export const TLS1_ALERT_UNSUPPORTED_EXT = 110;
export const TLS1_ALERT_UNKNOWN_PSK_IDENTITY = 115;
export const TLS1_ALERT_NO_APP_PROTOCOL = 120;
export const SP_PROT_PCT1_SERVER = 1;
export const SP_PROT_PCT1_CLIENT = 2;
export const SP_PROT_SSL2_SERVER = 4;
export const SP_PROT_SSL2_CLIENT = 8;
export const SP_PROT_SSL3_SERVER = 16;
export const SP_PROT_SSL3_CLIENT = 32;
export const SP_PROT_TLS1_SERVER = 64;
export const SP_PROT_TLS1_CLIENT = 128;
export const SP_PROT_UNI_SERVER = 1073741824;
export const SP_PROT_UNI_CLIENT = 2147483648;
export const SP_PROT_ALL = 4294967295;
export const SP_PROT_NONE = 0;
export const SP_PROT_TLS1_0_SERVER = 64;
export const SP_PROT_TLS1_0_CLIENT = 128;
export const SP_PROT_TLS1_1_SERVER = 256;
export const SP_PROT_TLS1_1_CLIENT = 512;
export const SP_PROT_TLS1_2_SERVER = 1024;
export const SP_PROT_TLS1_2_CLIENT = 2048;
export const SP_PROT_TLS1_3_SERVER = 4096;
export const SP_PROT_TLS1_3_CLIENT = 8192;
export const SP_PROT_DTLS_SERVER = 65536;
export const SP_PROT_DTLS_CLIENT = 131072;
export const SP_PROT_DTLS1_0_SERVER = 65536;
export const SP_PROT_DTLS1_0_CLIENT = 131072;
export const SP_PROT_DTLS1_2_SERVER = 262144;
export const SP_PROT_DTLS1_2_CLIENT = 524288;
export const SP_PROT_TLS1_3PLUS_SERVER = 4096;
export const SP_PROT_TLS1_3PLUS_CLIENT = 8192;
export const SCHANNEL_SECRET_TYPE_CAPI = 1;
export const SCHANNEL_SECRET_PRIVKEY = 2;
export const SCH_CRED_X509_CERTCHAIN = 1;
export const SCH_CRED_X509_CAPI = 2;
export const SCH_CRED_CERT_CONTEXT = 3;
export const SSL_CRACK_CERTIFICATE_NAME = `SslCrackCertificate`;
export const SSL_FREE_CERTIFICATE_NAME = `SslFreeCertificate`;
export const SL_INFO_KEY_CHANNEL = `Channel`;
export const SL_INFO_KEY_NAME = `Name`;
export const SL_INFO_KEY_AUTHOR = `Author`;
export const SL_INFO_KEY_DESCRIPTION = `Description`;
export const SL_INFO_KEY_LICENSOR_URL = `LicensorUrl`;
export const SL_INFO_KEY_DIGITAL_PID = `DigitalPID`;
export const SL_INFO_KEY_DIGITAL_PID2 = `DigitalPID2`;
export const SL_INFO_KEY_PARTIAL_PRODUCT_KEY = `PartialProductKey`;
export const SL_INFO_KEY_PRODUCT_SKU_ID = `ProductSkuId`;
export const SL_INFO_KEY_LICENSE_TYPE = `LicenseType`;
export const SL_INFO_KEY_VERSION = `Version`;
export const SL_INFO_KEY_SYSTEM_STATE = `SystemState`;
export const SL_INFO_KEY_ACTIVE_PLUGINS = `ActivePlugins`;
export const SL_INFO_KEY_SECURE_STORE_ID = `SecureStoreId`;
export const SL_INFO_KEY_BIOS_PKEY = `BiosProductKey`;
export const SL_INFO_KEY_BIOS_SLIC_STATE = `BiosSlicState`;
export const SL_INFO_KEY_BIOS_OA2_MINOR_VERSION = `BiosOA2MinorVersion`;
export const SL_INFO_KEY_BIOS_PKEY_DESCRIPTION = `BiosProductKeyDescription`;
export const SL_INFO_KEY_BIOS_PKEY_PKPN = `BiosProductKeyPkPn`;
export const SL_INFO_KEY_SECURE_PROCESSOR_ACTIVATION_URL = `SPCURL`;
export const SL_INFO_KEY_RIGHT_ACCOUNT_ACTIVATION_URL = `RACURL`;
export const SL_INFO_KEY_PRODUCT_KEY_ACTIVATION_URL = `PKCURL`;
export const SL_INFO_KEY_USE_LICENSE_ACTIVATION_URL = `EULURL`;
export const SL_INFO_KEY_IS_KMS = `IsKeyManagementService`;
export const SL_INFO_KEY_KMS_CURRENT_COUNT = `KeyManagementServiceCurrentCount`;
export const SL_INFO_KEY_KMS_REQUIRED_CLIENT_COUNT = `KeyManagementServiceRequiredClientCount`;
export const SL_INFO_KEY_KMS_UNLICENSED_REQUESTS = `KeyManagementServiceUnlicensedRequests`;
export const SL_INFO_KEY_KMS_LICENSED_REQUESTS = `KeyManagementServiceLicensedRequests`;
export const SL_INFO_KEY_KMS_OOB_GRACE_REQUESTS = `KeyManagementServiceOOBGraceRequests`;
export const SL_INFO_KEY_KMS_OOT_GRACE_REQUESTS = `KeyManagementServiceOOTGraceRequests`;
export const SL_INFO_KEY_KMS_NON_GENUINE_GRACE_REQUESTS = `KeyManagementServiceNonGenuineGraceRequests`;
export const SL_INFO_KEY_KMS_NOTIFICATION_REQUESTS = `KeyManagementServiceNotificationRequests`;
export const SL_INFO_KEY_KMS_TOTAL_REQUESTS = `KeyManagementServiceTotalRequests`;
export const SL_INFO_KEY_KMS_FAILED_REQUESTS = `KeyManagementServiceFailedRequests`;
export const SL_INFO_KEY_IS_PRS = `IsPRS`;
export const SL_PKEY_MS2005 = `msft:rm/algorithm/pkey/2005`;
export const SL_PKEY_MS2009 = `msft:rm/algorithm/pkey/2009`;
export const SL_PKEY_DETECT = `msft:rm/algorithm/pkey/detect`;
export const SL_EVENT_LICENSING_STATE_CHANGED = `msft:rm/event/licensingstatechanged`;
export const SL_EVENT_POLICY_CHANGED = `msft:rm/event/policychanged`;
export const SL_EVENT_USER_NOTIFICATION = `msft:rm/event/usernotification`;
export const SL_SYSTEM_STATE_REBOOT_POLICY_FOUND = 1;
export const SL_SYSTEM_STATE_TAMPERED = 2;
export const SL_REARM_REBOOT_REQUIRED = 1;
export const SPP_MIGRATION_GATHER_MIGRATABLE_APPS = 1;
export const SPP_MIGRATION_GATHER_ACTIVATED_WINDOWS_STATE = 2;
export const SPP_MIGRATION_GATHER_ALL = 4294967295;
export const SL_PROP_BRT_DATA = `SL_BRT_DATA`;
export const SL_PROP_BRT_COMMIT = `SL_BRT_COMMIT`;
export const SL_PROP_GENUINE_RESULT = `SL_GENUINE_RESULT`;
export const SL_PROP_NONGENUINE_GRACE_FLAG = `SL_NONGENUINE_GRACE_FLAG`;
export const SL_PROP_GET_GENUINE_AUTHZ = `SL_GET_GENUINE_AUTHZ`;
export const SL_PROP_GET_GENUINE_SERVER_AUTHZ = `SL_GET_GENUINE_SERVER_AUTHZ`;
export const SL_PROP_LAST_ACT_ATTEMPT_HRESULT = `SL_LAST_ACT_ATTEMPT_HRESULT`;
export const SL_PROP_LAST_ACT_ATTEMPT_TIME = `SL_LAST_ACT_ATTEMPT_TIME`;
export const SL_PROP_LAST_ACT_ATTEMPT_SERVER_FLAGS = `SL_LAST_ACT_ATTEMPT_SERVER_FLAGS`;
export const SL_PROP_ACTIVATION_VALIDATION_IN_PROGRESS = `SL_ACTIVATION_VALIDATION_IN_PROGRESS`;
export const SL_POLICY_EVALUATION_MODE_ENABLED = `Security-SPP-EvaluationModeEnabled`;
export const SL_DEFAULT_MIGRATION_ENCRYPTOR_URI = `msft:spp/migrationencryptor/tokenact/1.0`;
export const ID_CAP_SLAPI = `slapiQueryLicenseValue`;
export const USER_ACCOUNT_DISABLED = 1;
export const USER_HOME_DIRECTORY_REQUIRED = 2;
export const USER_PASSWORD_NOT_REQUIRED = 4;
export const USER_TEMP_DUPLICATE_ACCOUNT = 8;
export const USER_NORMAL_ACCOUNT = 16;
export const USER_MNS_LOGON_ACCOUNT = 32;
export const USER_INTERDOMAIN_TRUST_ACCOUNT = 64;
export const USER_WORKSTATION_TRUST_ACCOUNT = 128;
export const USER_SERVER_TRUST_ACCOUNT = 256;
export const USER_DONT_EXPIRE_PASSWORD = 512;
export const USER_ACCOUNT_AUTO_LOCKED = 1024;
export const USER_ENCRYPTED_TEXT_PASSWORD_ALLOWED = 2048;
export const USER_SMARTCARD_REQUIRED = 4096;
export const USER_TRUSTED_FOR_DELEGATION = 8192;
export const USER_NOT_DELEGATED = 16384;
export const USER_USE_DES_KEY_ONLY = 32768;
export const USER_DONT_REQUIRE_PREAUTH = 65536;
export const USER_PASSWORD_EXPIRED = 131072;
export const USER_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 262144;
export const USER_NO_AUTH_DATA_REQUIRED = 524288;
export const USER_PARTIAL_SECRETS_ACCOUNT = 1048576;
export const USER_USE_AES_KEYS = 2097152;
export const SAM_DAYS_PER_WEEK = 7;
export const USER_ALL_PARAMETERS = 2097152;
export const CLEAR_BLOCK_LENGTH = 8;
export const CYPHER_BLOCK_LENGTH = 8;
export const MSV1_0_VALIDATION_LOGOFF_TIME = 1;
export const MSV1_0_VALIDATION_KICKOFF_TIME = 2;
export const MSV1_0_VALIDATION_LOGON_SERVER = 4;
export const MSV1_0_VALIDATION_LOGON_DOMAIN = 8;
export const MSV1_0_VALIDATION_SESSION_KEY = 16;
export const MSV1_0_VALIDATION_USER_FLAGS = 32;
export const MSV1_0_VALIDATION_USER_ID = 64;
export const MSV1_0_SUBAUTH_ACCOUNT_DISABLED = 1;
export const MSV1_0_SUBAUTH_PASSWORD = 2;
export const MSV1_0_SUBAUTH_WORKSTATIONS = 4;
export const MSV1_0_SUBAUTH_LOGON_HOURS = 8;
export const MSV1_0_SUBAUTH_ACCOUNT_EXPIRY = 16;
export const MSV1_0_SUBAUTH_PASSWORD_EXPIRY = 32;
export const MSV1_0_SUBAUTH_ACCOUNT_TYPE = 64;
export const MSV1_0_SUBAUTH_LOCKOUT = 128;
export const SL_MDOLLAR_ZONE = 40960;
export const SL_SERVER_ZONE = 45056;
export const SL_MSCH_ZONE = 49152;
export const SL_INTERNAL_ZONE = 57344;
export const SL_CLIENTAPI_ZONE = 61440;
export const FACILITY_SL_ITF = 4;
export const _FACILITY_WINDOWS_STORE = 63;
export const SL_E_SRV_INVALID_PUBLISH_LICENSE = 337772191477444609n;
export const SL_E_SRV_INVALID_PRODUCT_KEY_LICENSE = 337773290989072386n;
export const SL_E_SRV_INVALID_RIGHTS_ACCOUNT_LICENSE = 337774390500700163n;
export const SL_E_SRV_INVALID_LICENSE_STRUCTURE = 337775490012327940n;
export const SL_E_SRV_AUTHORIZATION_FAILED = 337776589523955717n;
export const SL_E_SRV_INVALID_BINDING = 337777689035583494n;
export const SL_E_SRV_SERVER_PONG = 337778788547211271n;
export const SL_E_SRV_INVALID_PAYLOAD = 337779888058839048n;
export const SL_E_SRV_INVALID_SECURITY_PROCESSOR_LICENSE = 337787584640233481n;
export const SL_E_SRV_BUSINESS_TOKEN_ENTRY_NOT_FOUND = 337788684151861264n;
export const SL_E_SRV_CLIENT_CLOCK_OUT_OF_SYNC = 338051467430899729n;
export const SL_E_SRV_GENERAL_ERROR = 342274691593187584n;
export const SL_E_CHPA_PRODUCT_KEY_OUT_OF_RANGE = 342275791104819201n;
export const SL_E_CHPA_INVALID_BINDING = 342276890616446978n;
export const SL_E_CHPA_PRODUCT_KEY_BLOCKED = 342277990128074755n;
export const SL_E_CHPA_INVALID_PRODUCT_KEY = 342279089639702532n;
export const SL_E_CHPA_BINDING_NOT_FOUND = 342280189151330309n;
export const SL_E_CHPA_BINDING_MAPPING_NOT_FOUND = 342281288662958086n;
export const SL_E_CHPA_UNSUPPORTED_PRODUCT_KEY = 342282388174585863n;
export const SL_E_CHPA_MAXIMUM_UNLOCK_EXCEEDED = 342283487686213640n;
export const SL_E_CHPA_ACTCONFIG_ID_NOT_FOUND = 342284587197841417n;
export const SL_E_CHPA_INVALID_PRODUCT_DATA_ID = 342285686709469194n;
export const SL_E_CHPA_INVALID_PRODUCT_DATA = 342286786221096971n;
export const SL_E_CHPA_SYSTEM_ERROR = 342287885732724748n;
export const SL_E_CHPA_INVALID_ACTCONFIG_ID = 342288985244352525n;
export const SL_E_CHPA_INVALID_PRODUCT_KEY_LENGTH = 342290084755980302n;
export const SL_E_CHPA_INVALID_PRODUCT_KEY_FORMAT = 342291184267608079n;
export const SL_E_CHPA_INVALID_PRODUCT_KEY_CHAR = 342292283779235856n;
export const SL_E_CHPA_INVALID_BINDING_URI = 342293383290863633n;
export const SL_E_CHPA_NETWORK_ERROR = 342294482802491410n;
export const SL_E_CHPA_DATABASE_ERROR = 342295582314119187n;
export const SL_E_CHPA_INVALID_ARGUMENT = 342308776453652500n;
export const SL_E_CHPA_DMAK_LIMIT_EXCEEDED = 342309875965280288n;
export const SL_E_CHPA_DMAK_EXTENSION_LIMIT_EXCEEDED = 342310975476908065n;
export const SL_E_CHPA_REISSUANCE_LIMIT_NOT_FOUND = 342312074988535842n;
export const SL_E_CHPA_OVERRIDE_REQUEST_NOT_FOUND = 342297781337374755n;
export const SL_E_CHPA_OEM_SLP_COA0 = 342298880849002518n;
export const SL_E_CHPA_PRODUCT_KEY_BLOCKED_IPLOCATION = 342296681825746967n;
export const SL_E_CHPA_RESPONSE_NOT_AVAILABLE = 342361553011785749n;
export const SL_E_CHPA_GENERAL_ERROR = 342326368639696976n;
export const SL_E_CHPA_TIMEBASED_ACTIVATION_BEFORE_START_DATE = 342327468151324720n;
export const SL_E_CHPA_TIMEBASED_ACTIVATION_AFTER_END_DATE = 342328567662952497n;
export const SL_E_CHPA_TIMEBASED_ACTIVATION_NOT_AVAILABLE = 342329667174580274n;
export const SL_E_CHPA_TIMEBASED_PRODUCT_KEY_NOT_CONFIGURED = 342360453500158003n;
export const SL_E_CHPA_NO_RULES_TO_ACTIVATE = 342362652523413583n;
export const SL_E_CHPA_DIGITALMARKER_INVALID_BINDING = 342363752035041361n;
export const SL_E_CHPA_DIGITALMARKER_BINDING_NOT_CONFIGURED = 342379145197830226n;
export const SL_E_CHPA_DYNAMICALLY_BLOCKED_PRODUCT_KEY = 343398392476778592n;
export const SL_E_CHPA_MSCH_RESPONSE_NOT_AVAILABLE_VGA = 344243916918539263n;
export const SL_E_CHPA_BUSINESS_RULE_INPUT_NOT_FOUND = 344331877848762112n;
export const SL_E_CHPA_NULL_VALUE_FOR_PROPERTY_NAME_OR_ID = 344332977360389968n;
export const SL_E_CHPA_UNKNOWN_PROPERTY_NAME = 344334076872017745n;
export const SL_E_CHPA_UNKNOWN_PROPERTY_ID = 344337375406901074n;
export const SL_E_CHPA_FAILED_TO_UPDATE_PRODUCTKEY_BINDING = 344338474918528853n;
export const SL_E_CHPA_FAILED_TO_INSERT_PRODUCTKEY_BINDING = 344339574430156630n;
export const SL_E_CHPA_FAILED_TO_DELETE_PRODUCTKEY_BINDING = 344340673941784407n;
export const SL_E_CHPA_FAILED_TO_PROCESS_PRODUCT_KEY_BINDINGS_XML = 344342872965039960n;
export const SL_E_CHPA_FAILED_TO_INSERT_PRODUCT_KEY_PROPERTY = 344343972476667738n;
export const SL_E_CHPA_FAILED_TO_UPDATE_PRODUCT_KEY_PROPERTY = 344345071988295515n;
export const SL_E_CHPA_FAILED_TO_DELETE_PRODUCT_KEY_PROPERTY = 344353868081317724n;
export const SL_E_CHPA_UNKNOWN_PRODUCT_KEY_TYPE = 344367062220851044n;
export const SL_E_CHPA_PRODUCT_KEY_BEING_USED = 344384654406895472n;
export const SL_E_CHPA_FAILED_TO_INSERT_PRODUCT_KEY_RECORD = 344385753918523264n;
export const SL_E_CHPA_FAILED_TO_UPDATE_PRODUCT_KEY_RECORD = 342995971221014401n;
export const SL_E_INVALID_LICENSE_STATE_BREACH_GRACE = 342997070732640913n;
export const SL_E_INVALID_LICENSE_STATE_BREACH_GRACE_EXPIRED = 343107021895418514n;
export const SL_E_INVALID_TEMPLATE_ID = 343111419941929718n;
export const SL_E_INVALID_XML_BLOB = 343160897965179642n;
export const SL_E_VALIDATION_BLOB_PARAM_NOT_FOUND = 343161997476807463n;
export const SL_E_INVALID_CLIENT_TOKEN = 343163096988435240n;
export const SL_E_INVALID_OFFLINE_BLOB = 343164196500063017n;
export const SL_E_OFFLINE_VALIDATION_BLOB_PARAM_NOT_FOUND = 343165296011690794n;
export const SL_E_INVALID_OSVERSION_TEMPLATEID = 343166395523318571n;
export const SL_E_OFFLINE_GENUINE_BLOB_REVOKED = 343167495034946348n;
export const SL_E_OFFLINE_GENUINE_BLOB_NOT_FOUND = 343400591500034861n;
export const SL_E_INVALID_OS_FOR_PRODUCT_KEY = 343576513360479233n;
export const SL_E_INVALID_FILE_HASH = 343577612872107169n;
export const SL_E_VALIDATION_BLOCKED_PRODUCT_KEY = 343579811895362722n;
export const SL_E_MISMATCHED_KEY_TYPES = 343580911406990500n;
export const SL_E_VALIDATION_INVALID_PRODUCT_KEY = 343583110430246053n;
export const SL_E_INVALID_OEM_OR_VOLUME_BINDING_DATA = 343584209941873831n;
export const SL_E_INVALID_LICENSE_STATE = 343585309453501608n;
export const SL_E_IP_LOCATION_FALIED = 343587508476757161n;
export const SL_E_SOFTMOD_EXPLOIT_DETECTED = 343588607988384939n;
export const SL_E_INVALID_TOKEN_DATA = 343589707500012716n;
export const SL_E_HEALTH_CHECK_FAILED_NEUTRAL_FILES = 343590807011640493n;
export const SL_E_HEALTH_CHECK_FAILED_MUI_FILES = 343591906523268270n;
export const SL_E_INVALID_AD_DATA = 343593006034896047n;
export const SL_E_INVALID_RSDP_COUNT = 343594105546523824n;
export const SL_E_ENGINE_DETECTED_EXPLOIT = 343962441941828785n;
export const SL_E_NON_GENUINE_STATUS_LAST = 343734843034879488n;
export const SL_E_NOTIFICATION_BREACH_DETECTED = 343735942546507057n;
export const SL_E_NOTIFICATION_GRACE_EXPIRED = 343737042058134834n;
export const SL_E_NOTIFICATION_OTHER_REASONS = 351281890847933747n;
export const SL_E_INVALID_CONTEXT = 351282990359568385n;
export const SL_E_TOKEN_STORE_INVALID_STATE = 351284089871196162n;
export const SL_E_EVALUATION_FAILED = 351285189382823939n;
export const SL_E_NOT_EVALUATED = 351286288894451716n;
export const SL_E_NOT_ACTIVATED = 351287388406079493n;
export const SL_E_INVALID_GUID = 351288487917707270n;
export const SL_E_TOKSTO_TOKEN_NOT_FOUND = 351289587429335047n;
export const SL_E_TOKSTO_NO_PROPERTIES = 351290686940962824n;
export const SL_E_TOKSTO_NOT_INITIALIZED = 351291786452590601n;
export const SL_E_TOKSTO_ALREADY_INITIALIZED = 351292885964218378n;
export const SL_E_TOKSTO_NO_ID_SET = 351293985475846155n;
export const SL_E_TOKSTO_CANT_CREATE_FILE = 351295084987473932n;
export const SL_E_TOKSTO_CANT_WRITE_TO_FILE = 351296184499101709n;
export const SL_E_TOKSTO_CANT_READ_FILE = 351297284010729486n;
export const SL_E_TOKSTO_CANT_PARSE_PROPERTIES = 351298383522357263n;
export const SL_E_TOKSTO_PROPERTY_NOT_FOUND = 351299483033985040n;
export const SL_E_TOKSTO_INVALID_FILE = 351300582545612817n;
export const SL_E_TOKSTO_CANT_CREATE_MUTEX = 351301682057240594n;
export const SL_E_TOKSTO_CANT_ACQUIRE_MUTEX = 351302781568868371n;
export const SL_E_TOKSTO_NO_TOKEN_DATA = 351303881080496148n;
export const SL_E_EUL_CONSUMPTION_FAILED = 351304980592123925n;
export const SL_E_PKEY_INVALID_CONFIG = 351306080103751702n;
export const SL_E_PKEY_INVALID_UNIQUEID = 351307179615379479n;
export const SL_E_PKEY_INVALID_ALGORITHM = 351308279127007256n;
export const SL_E_PKEY_INTERNAL_ERROR = 351309378638635033n;
export const SL_E_LICENSE_INVALID_ADDON_INFO = 351310478150262810n;
export const SL_E_HWID_ERROR = 351311577661890587n;
export const SL_E_PKEY_INVALID_KEYCHANGE1 = 351312677173518364n;
export const SL_E_PKEY_INVALID_KEYCHANGE2 = 351313776685146141n;
export const SL_E_PKEY_INVALID_KEYCHANGE3 = 351315975708401694n;
export const SL_E_POLICY_OTHERINFO_MISMATCH = 351317075220029472n;
export const SL_E_PRODUCT_UNIQUENESS_GROUP_ID_INVALID = 351318174731657249n;
export const SL_E_SECURE_STORE_ID_MISMATCH = 351319274243285026n;
export const SL_E_INVALID_RULESET_RULE = 351320373754912803n;
export const SL_E_INVALID_CONTEXT_DATA = 351321473266540580n;
export const SL_E_INVALID_HASH = 351323672289796133n;
export const SL_E_INVALID_USE_OF_ADD_ON_PKEY = 351323671216054310n;
export const SL_E_WINDOWS_VERSION_MISMATCH = 351324771801423911n;
export const SL_E_ACTIVATION_IN_PROGRESS = 351325871313051688n;
export const SL_E_STORE_UPGRADE_TOKEN_REQUIRED = 351326970824679465n;
export const SL_E_STORE_UPGRADE_TOKEN_WRONG_EDITION = 351328070336307242n;
export const SL_E_STORE_UPGRADE_TOKEN_WRONG_PID = 351329169847935019n;
export const SL_E_STORE_UPGRADE_TOKEN_NOT_PRS_SIGNED = 351330269359562796n;
export const SL_E_STORE_UPGRADE_TOKEN_WRONG_VERSION = 351331368871190573n;
export const SL_E_STORE_UPGRADE_TOKEN_NOT_AUTHORIZED = 351563365824651310n;
export const SL_E_SFS_INVALID_FS_VERSION = 351564464262537473n;
export const SL_E_SFS_INVALID_FD_TABLE = 351565563774165250n;
export const SL_E_SFS_INVALID_SYNC = 351566663285793027n;
export const SL_E_SFS_BAD_TOKEN_NAME = 351567762797420804n;
export const SL_E_SFS_BAD_TOKEN_EXT = 351568862309048581n;
export const SL_E_SFS_DUPLICATE_TOKEN_NAME = 351569961820676358n;
export const SL_E_SFS_TOKEN_SIZE_MISMATCH = 351571061332304135n;
export const SL_E_SFS_INVALID_TOKEN_DATA_HASH = 351572160843931912n;
export const SL_E_SFS_FILE_READ_ERROR = 351573260355559689n;
export const SL_E_SFS_FILE_WRITE_ERROR = 351574359867187466n;
export const SL_E_SFS_INVALID_FILE_POSITION = 351575459378815243n;
export const SL_E_SFS_NO_ACTIVE_TRANSACTION = 351576558890443020n;
export const SL_E_SFS_INVALID_FS_HEADER = 351577658402070797n;
export const SL_E_SFS_INVALID_TOKEN_DESCRIPTOR = 355787688424825102n;
export const SL_E_INTERNAL_ERROR = 355786589986942977n;
export const SL_E_RIGHT_NOT_CONSUMED = 355788789010198530n;
export const SL_E_USE_LICENSE_NOT_INSTALLED = 355792087545081859n;
export const SL_E_MISMATCHED_PKEY_RANGE = 355789888521826308n;
export const SL_E_MISMATCHED_PID = 355790988033454085n;
export const SL_E_EXTERNAL_SIGNATURE_NOT_FOUND = 355793187056709638n;
export const SL_E_RAC_NOT_AVAILABLE = 355794286568337415n;
export const SL_E_SPC_NOT_AVAILABLE = 10520409918170001416n;
export const SL_E_GRACE_TIME_EXPIRED = 355795386079965193n;
export const SL_E_MISMATCHED_APPID = 355796485591592970n;
export const SL_E_NO_PID_CONFIG_DATA = 355797585103220747n;
export const SL_I_OOB_GRACE_PERIOD = 355798682467364876n;
export const SL_I_OOT_GRACE_PERIOD = 355799781978992653n;
export const SL_E_MISMATCHED_SECURITY_PROCESSOR = 355800883638104078n;
export const SL_E_OUT_OF_TOLERANCE = 355801983149731855n;
export const SL_E_INVALID_PKEY = 355803082661359632n;
export const SL_E_LICENSE_FILE_NOT_INSTALLED = 355804182172987409n;
export const SL_E_VALUE_NOT_FOUND = 355805281684615186n;
export const SL_E_RIGHT_NOT_GRANTED = 355806381196242963n;
export const SL_E_PKEY_NOT_INSTALLED = 355807480707870740n;
export const SL_E_PRODUCT_SKU_NOT_INSTALLED = 355808580219498517n;
export const SL_E_NOT_SUPPORTED = 355809679731126294n;
export const SL_E_PUBLISHING_LICENSE_NOT_INSTALLED = 355810779242754071n;
export const SL_E_LICENSE_SERVER_URL_NOT_FOUND = 355811878754381848n;
export const SL_E_INVALID_EVENT_ID = 355812978266009625n;
export const SL_E_EVENT_NOT_REGISTERED = 355814077777637402n;
export const SL_E_EVENT_ALREADY_REGISTERED = 355815177289265179n;
export const SL_E_DECRYPTION_LICENSES_NOT_AVAILABLE = 355816276800892956n;
export const SL_E_LICENSE_SIGNATURE_VERIFICATION_FAILED = 355817376312520733n;
export const SL_E_DATATYPE_MISMATCHED = 355818475824148510n;
export const SL_E_INVALID_LICENSE = 355819575335776287n;
export const SL_E_INVALID_PACKAGE = 355820674847404064n;
export const SL_E_VALIDITY_TIME_EXPIRED = 355821774359031841n;
export const SL_E_LICENSE_AUTHORIZATION_FAILED = 355822873870659618n;
export const SL_E_LICENSE_DECRYPTION_FAILED = 355823973382287395n;
export const SL_E_WINDOWS_INVALID_LICENSE_STATE = 355825072893915172n;
export const SL_E_LUA_ACCESSDENIED = 355826172405542949n;
export const SL_E_PROXY_KEY_NOT_FOUND = 355827271917170726n;
export const SL_E_TAMPER_DETECTED = 355828371428798503n;
export const SL_E_POLICY_CACHE_INVALID = 355829470940426280n;
export const SL_E_INVALID_RUNNING_MODE = 355830570452054057n;
export const SL_E_SLP_NOT_SIGNED = 355832769475309610n;
export const SL_E_CIDIID_INVALID_DATA = 355833868986937388n;
export const SL_E_CIDIID_INVALID_VERSION = 355834968498565165n;
export const SL_E_CIDIID_VERSION_NOT_SUPPORTED = 355836068010192942n;
export const SL_E_CIDIID_INVALID_DATA_LENGTH = 355837167521820719n;
export const SL_E_CIDIID_NOT_DEPOSITED = 355838267033448496n;
export const SL_E_CIDIID_MISMATCHED = 355839366545076273n;
export const SL_E_INVALID_BINDING_BLOB = 355840466056704050n;
export const SL_E_PRODUCT_KEY_INSTALLATION_NOT_ALLOWED = 355841565568331827n;
export const SL_E_EUL_NOT_AVAILABLE = 355842665079959604n;
export const SL_E_VL_NOT_WINDOWS_SLP = 355845963614842933n;
export const SL_E_VL_NOT_ENOUGH_COUNT = 355847063126470712n;
export const SL_E_VL_BINDING_SERVICE_NOT_ENABLED = 355854759707865145n;
export const SL_E_VL_INFO_PRODUCT_USER_RIGHT = 355855857072009280n;
export const SL_E_VL_KEY_MANAGEMENT_SERVICE_NOT_ACTIVATED = 355856958731120705n;
export const SL_E_VL_KEY_MANAGEMENT_SERVICE_ID_MISMATCH = 355862456289259586n;
export const SL_E_PROXY_POLICY_NOT_UPDATED = 355869053359026247n;
export const SL_E_CIDIID_INVALID_CHECK_DIGITS = 355871252382281805n;
export const SL_E_LICENSE_MANAGEMENT_DATA_NOT_FOUND = 355872351893909583n;
export const SL_E_INVALID_PRODUCT_KEY = 355873451405537360n;
export const SL_E_BLOCKED_PRODUCT_KEY = 355874550917165137n;
export const SL_E_DUPLICATE_POLICY = 355875650428792914n;
export const SL_E_MISSING_OVERRIDE_ONLY_ATTRIBUTE = 355876749940420691n;
export const SL_E_LICENSE_MANAGEMENT_DATA_DUPLICATED = 355877849452048468n;
export const SL_E_BASE_SKU_NOT_AVAILABLE = 355878948963676245n;
export const SL_E_VL_MACHINE_NOT_BOUND = 355880048475304022n;
export const SL_E_SLP_MISSING_ACPI_SLIC = 355881147986931799n;
export const SL_E_SLP_MISSING_SLP_MARKER = 355882247498559576n;
export const SL_E_SLP_BAD_FORMAT = 355889944079954009n;
export const SL_E_INVALID_PACKAGE_VERSION = 355891043591581792n;
export const SL_E_PKEY_INVALID_UPGRADE = 355892143103209569n;
export const SL_E_ISSUANCE_LICENSE_NOT_INSTALLED = 355893242614837346n;
export const SL_E_SLP_OEM_CERT_MISSING = 355894342126465123n;
export const SL_E_NONGENUINE_GRACE_TIME_EXPIRED = 355895441638092900n;
export const SL_I_NONGENUINE_GRACE_PERIOD = 355896539002237029n;
export const SL_E_DEPENDENT_PROPERTY_NOT_SET = 355897640661348454n;
export const SL_E_NONGENUINE_GRACE_TIME_EXPIRED_2 = 355898740172976231n;
export const SL_I_NONGENUINE_GRACE_PERIOD_2 = 355899837537120360n;
export const SL_E_MISMATCHED_PRODUCT_SKU = 355900939196231785n;
export const SL_E_OPERATION_NOT_ALLOWED = 355902038707859562n;
export const SL_E_VL_KEY_MANAGEMENT_SERVICE_VM_NOT_SUPPORTED = 355903138219487339n;
export const SL_E_VL_INVALID_TIMESTAMP = 355908635777626220n;
export const SL_E_PLUGIN_INVALID_MANIFEST = 355909735289254001n;
export const SL_E_APPLICATION_POLICIES_MISSING = 355910834800881778n;
export const SL_E_APPLICATION_POLICIES_NOT_LOADED = 355911934312509555n;
export const SL_E_VL_BINDING_SERVICE_UNAVAILABLE = 355913033824137332n;
export const SL_E_SERVICE_STOPPING = 355914133335765109n;
export const SL_E_PLUGIN_NOT_REGISTERED = 355915232847392886n;
export const SL_E_AUTHN_WRONG_VERSION = 355916332359020663n;
export const SL_E_AUTHN_MISMATCHED_KEY = 355917431870648440n;
export const SL_E_AUTHN_CHALLENGE_NOT_SET = 355918531382276217n;
export const SL_E_AUTHN_CANT_VERIFY = 355919630893903994n;
export const SL_E_SERVICE_RUNNING = 355920730405531771n;
export const SL_E_SLP_INVALID_MARKER_VERSION = 355921829917159548n;
export const SL_E_INVALID_PRODUCT_KEY_TYPE = 355922929428787325n;
export const SL_E_CIDIID_MISMATCHED_PKEY = 355924028940415102n;
export const SL_E_CIDIID_NOT_BOUND = 355925128452042879n;
export const SL_E_LICENSE_NOT_BOUND = 355926227963670656n;
export const SL_E_VL_AD_AO_NOT_FOUND = 355927327475298433n;
export const SL_E_VL_AD_AO_NAME_TOO_LONG = 355928426986926210n;
export const SL_E_VL_AD_SCHEMA_VERSION_NOT_SUPPORTED = 356347340917108867n;
export const SL_E_NOT_GENUINE = 356364933103153664n;
export const SL_E_EDITION_MISMATCHED = 356366032614781456n;
export const SL_E_HWID_CHANGED = 356367132126409233n;
export const SL_E_OEM_KEY_EDITION_MISMATCH = 356368231638037010n;
export const SL_E_NO_PRODUCT_KEY_FOUND = 356369331149664787n;
export const SL_E_DOWNLEVEL_SETUP_KEY = 356370430661292564n;
export const SL_E_BIOS_KEY = 356629915405447701n;
export const SL_E_TKA_CHALLENGE_EXPIRED = 356631014917075713n;
export const SL_E_TKA_SILENT_ACTIVATION_FAILURE = 356632114428703490n;
export const SL_E_TKA_INVALID_CERT_CHAIN = 356633213940331267n;
export const SL_E_TKA_GRANT_NOT_FOUND = 356634313451959044n;
export const SL_E_TKA_CERT_NOT_FOUND = 356635412963586821n;
export const SL_E_TKA_INVALID_SKU_ID = 356636512475214598n;
export const SL_E_TKA_INVALID_BLOB = 356637611986842375n;
export const SL_E_TKA_TAMPERED_CERT_CHAIN = 356638711498470152n;
export const SL_E_TKA_CHALLENGE_MISMATCH = 356639811010097929n;
export const SL_E_TKA_INVALID_CERTIFICATE = 356640910521725706n;
export const SL_E_TKA_INVALID_SMARTCARD = 356642010033353483n;
export const SL_E_TKA_FAILED_GRANT_PARSING = 356643109544981260n;
export const SL_E_TKA_INVALID_THUMBPRINT = 356644209056609037n;
export const SL_E_TKA_THUMBPRINT_CERT_NOT_FOUND = 356645308568236814n;
export const SL_E_TKA_CRITERIA_MISMATCH = 356646408079864591n;
export const SL_E_TKA_TPID_MISMATCH = 356647507591492368n;
export const SL_E_TKA_SOFT_CERT_DISALLOWED = 356648607103120145n;
export const SL_E_TKA_SOFT_CERT_INVALID = 356649706614747922n;
export const SL_E_TKA_CERT_CNG_NOT_AVAILABLE = 356911390382158611n;
export const SL_I_STORE_BASED_ACTIVATION = 359165387071616001n;
export const E_RM_UNKNOWN_ERROR = 359166488730729475n;
export const SL_I_TIMEBASED_VALIDITY_PERIOD = 359167586094873604n;
export const SL_I_PERPETUAL_OOB_GRACE_PERIOD = 359168685606501381n;
export const SL_I_TIMEBASED_EXTENDED_GRACE_PERIOD = 359169785118129158n;
export const SL_E_VALIDITY_PERIOD_EXPIRED = 359443565660929031n;
export const SL_E_IA_THROTTLE_LIMIT_EXCEEDED = 359444665172557056n;
export const SL_E_IA_INVALID_VIRTUALIZATION_PLATFORM = 359445764684184833n;
export const SL_E_IA_PARENT_PARTITION_NOT_ACTIVATED = 359446864195812610n;
export const SL_E_IA_ID_MISMATCH = 359447963707440387n;
export const SL_E_IA_MACHINE_NOT_BOUND = 359725040637639940n;
export const SL_E_TAMPER_RECOVERY_REQUIRES_ACTIVATION = 347059766197288448n;
export const SL_REMAPPING_SP_PUB_GENERAL_NOT_INITIALIZED = 347060865708904705n;
export const SL_REMAPPING_SP_STATUS_SYSTEM_TIME_SKEWED = 347061964146790658n;
export const SL_REMAPPING_SP_STATUS_GENERIC_FAILURE = 347063064732160259n;
export const SL_REMAPPING_SP_STATUS_INVALIDARG = 347064164243788036n;
export const SL_REMAPPING_SP_STATUS_ALREADY_EXISTS = 347066363267043589n;
export const SL_REMAPPING_SP_STATUS_INSUFFICIENT_BUFFER = 347067462778671367n;
export const SL_REMAPPING_SP_STATUS_INVALIDDATA = 347068562290299144n;
export const SL_REMAPPING_SP_STATUS_INVALID_SPAPI_CALL = 347069661801926921n;
export const SL_REMAPPING_SP_STATUS_INVALID_SPAPI_VERSION = 347070761313554698n;
export const SL_REMAPPING_SP_STATUS_DEBUGGER_DETECTED = 347071859751440651n;
export const SL_REMAPPING_SP_STATUS_NO_MORE_DATA = 347341241173987596n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_KEYLENGTH = 347342340685615617n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_BLOCKLENGTH = 347343440197243394n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_CIPHER = 347344539708871171n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_CIPHERMODE = 347345639220498948n;
export const SL_REMAPPING_SP_PUB_CRYPTO_UNKNOWN_PROVIDERID = 347346738732126725n;
export const SL_REMAPPING_SP_PUB_CRYPTO_UNKNOWN_KEYID = 347347838243754502n;
export const SL_REMAPPING_SP_PUB_CRYPTO_UNKNOWN_HASHID = 347348937755382279n;
export const SL_REMAPPING_SP_PUB_CRYPTO_UNKNOWN_ATTRIBUTEID = 347350037267010056n;
export const SL_REMAPPING_SP_PUB_CRYPTO_HASH_FINALIZED = 347351136778637833n;
export const SL_REMAPPING_SP_PUB_CRYPTO_KEY_NOT_AVAILABLE = 347352236290265610n;
export const SL_REMAPPING_SP_PUB_CRYPTO_KEY_NOT_FOUND = 347353335801893387n;
export const SL_REMAPPING_SP_PUB_CRYPTO_NOT_BLOCK_ALIGNED = 347354435313521164n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_SIGNATURELENGTH = 347355534825148941n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_SIGNATURE = 347356634336776718n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_BLOCK = 347357733848404495n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_FORMAT = 347358833360032272n;
export const SL_REMAPPING_SP_PUB_CRYPTO_INVALID_PADDING = 347622716150698513n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED = 347623815662326529n;
export const SL_REMAPPING_SP_PUB_TS_REARMED = 347624915173954306n;
export const SL_REMAPPING_SP_PUB_TS_RECREATED = 347626014685582083n;
export const SL_REMAPPING_SP_PUB_TS_ENTRY_KEY_NOT_FOUND = 347627114197209860n;
export const SL_REMAPPING_SP_PUB_TS_ENTRY_KEY_ALREADY_EXISTS = 347628213708837637n;
export const SL_REMAPPING_SP_PUB_TS_ENTRY_KEY_SIZE_TOO_BIG = 347629313220465414n;
export const SL_REMAPPING_SP_PUB_TS_MAX_REARM_REACHED = 347630412732093191n;
export const SL_REMAPPING_SP_PUB_TS_DATA_SIZE_TOO_BIG = 347631512243720968n;
export const SL_REMAPPING_SP_PUB_TS_INVALID_HW_BINDING = 347632611755348745n;
export const SL_REMAPPING_SP_PUB_TIMER_ALREADY_EXISTS = 347633711266976522n;
export const SL_REMAPPING_SP_PUB_TIMER_NOT_FOUND = 347634810778604299n;
export const SL_REMAPPING_SP_PUB_TIMER_EXPIRED = 347635910290232076n;
export const SL_REMAPPING_SP_PUB_TIMER_NAME_SIZE_TOO_BIG = 347637009801859853n;
export const SL_REMAPPING_SP_PUB_TS_FULL = 347638109313487630n;
export const SL_REMAPPING_SP_PUB_TRUSTED_TIME_OK = 347639206677631759n;
export const SL_REMAPPING_SP_PUB_TS_ENTRY_READ_ONLY = 347640308336743184n;
export const SL_REMAPPING_SP_PUB_TIMER_READ_ONLY = 347641407848370961n;
export const SL_REMAPPING_SP_PUB_TS_ATTRIBUTE_READ_ONLY = 347642507359998738n;
export const SL_REMAPPING_SP_PUB_TS_ATTRIBUTE_NOT_FOUND = 347643606871626515n;
export const SL_REMAPPING_SP_PUB_TS_ACCESS_DENIED = 347644706383254292n;
export const SL_REMAPPING_SP_PUB_TS_NAMESPACE_NOT_FOUND = 347645805894882069n;
export const SL_REMAPPING_SP_PUB_TS_NAMESPACE_IN_USE = 347646905406509846n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED_BREADCRUMB_LOAD_INVALID = 347648004918137623n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED_BREADCRUMB_GENERATION = 347649104429765400n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED_INVALID_DATA = 347650203941393177n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED_NO_DATA = 347651303453020954n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED_DATA_BREADCRUMB_MISMATCH = 347652402964648731n;
export const SL_REMAPPING_SP_PUB_TS_TAMPERED_DATA_VERSION_MISMATCH = 347904191127409436n;
export const SL_REMAPPING_SP_PUB_TAMPER_MODULE_AUTHENTICATION = 347905290639037441n;
export const SL_REMAPPING_SP_PUB_TAMPER_SECURITY_PROCESSOR_PATCHED = 348185666104120322n;
export const SL_REMAPPING_SP_PUB_KM_CACHE_TAMPER = 348186765615748353n;
export const SL_REMAPPING_SP_PUB_KM_CACHE_TAMPER_RESTORE_FAILED = 348467141080831234n;
export const SL_REMAPPING_SP_PUB_KM_CACHE_IDENTICAL = 348468238444975617n;
export const SL_REMAPPING_SP_PUB_KM_CACHE_POLICY_CHANGED = 348748613910058498n;
export const SL_REMAPPING_SP_STATUS_PUSHKEY_CONFLICT = 348749715569170177n;
export const SL_REMAPPING_SP_PUB_PROXY_SOFT_TAMPER = 346777191708940034n;
export const SL_REMAPPING_SP_PUB_API_INVALID_LICENSE = 346787087313588224n;
export const SL_REMAPPING_SP_PUB_API_INVALID_ALGORITHM_TYPE = 346790385848471561n;
export const SL_REMAPPING_SP_PUB_API_TOO_MANY_LOADED_ENVIRONMENTS = 346796982918238220n;
export const SL_REMAPPING_SP_PUB_API_BAD_GET_INFO_QUERY = 346825570220560402n;
export const SL_REMAPPING_SP_PUB_API_INVALID_HANDLE = 346870650197299244n;
export const SL_REMAPPING_SP_PUB_API_INVALID_KEY_LENGTH = 346903635546132565n;
export const SL_REMAPPING_SP_PUB_API_NO_AES_PROVIDER = 346919028708921459n;
export const SL_REMAPPING_SP_PUB_API_HANDLE_NOT_COMMITED = 4584775491738980481n;
export const SL_REMAPPING_MDOLLAR_PRODUCT_KEY_OUT_OF_RANGE = 4584776590180720741n;
export const SL_REMAPPING_MDOLLAR_INVALID_BINDING = 4584777689692348518n;
export const SL_REMAPPING_MDOLLAR_PRODUCT_KEY_BLOCKED = 4584778789203976295n;
export const SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_KEY = 4584783187250487400n;
export const SL_REMAPPING_MDOLLAR_UNSUPPORTED_PRODUCT_KEY = 4584788684808626284n;
export const SL_REMAPPING_MDOLLAR_MAXIMUM_UNLOCK_EXCEEDED = 4584790883831881841n;
export const SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_DATA_ID = 4584791983343509619n;
export const SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_DATA = 4584794182366765172n;
export const SL_REMAPPING_MDOLLAR_INVALID_ACTCONFIG_ID = 4584795281878392950n;
export const SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_KEY_LENGTH = 4584796381390020727n;
export const SL_REMAPPING_MDOLLAR_INVALID_PRODUCT_KEY_FORMAT = 4584798580413276280n;
export const SL_REMAPPING_MDOLLAR_INVALID_BINDING_URI = 4584801878948159610n;
export const SL_REMAPPING_MDOLLAR_INVALID_ARGUMENT = 4584804077971415165n;
export const SL_REMAPPING_MDOLLAR_DMAK_LIMIT_EXCEEDED = 4584805177483042943n;
export const SL_REMAPPING_MDOLLAR_DMAK_EXTENSION_LIMIT_EXCEEDED = 4584808476017926272n;
export const SL_REMAPPING_MDOLLAR_OEM_SLP_COA0 = 4584819471134204035n;
export const SL_REMAPPING_MDOLLAR_CIDIID_INVALID_VERSION = 4584820570645831821n;
export const SL_REMAPPING_MDOLLAR_CIDIID_INVALID_DATA = 4584821670157459598n;
export const SL_REMAPPING_MDOLLAR_CIDIID_INVALID_DATA_LENGTH = 4584822769669087375n;
export const SL_REMAPPING_MDOLLAR_CIDIID_INVALID_CHECK_DIGITS = 4584830466250481808n;
export const SL_REMAPPING_MDOLLAR_TIMEBASED_ACTIVATION_BEFORE_START_DATE = 4584831565762109591n;
export const SL_REMAPPING_MDOLLAR_TIMEBASED_ACTIVATION_AFTER_END_DATE = 4584832665273737368n;
export const SL_REMAPPING_MDOLLAR_TIMEBASED_ACTIVATION_NOT_AVAILABLE = 4584833764785365145n;
export const SL_REMAPPING_MDOLLAR_TIMEBASED_PRODUCT_KEY_NOT_CONFIGURED = 4584884342320242842n;
export const SL_REMAPPING_MDOLLAR_NO_RULES_TO_ACTIVATE = 4584887640855126216n;
export const SL_REMAPPING_MDOLLAR_PRODUCT_KEY_BLOCKED_IPLOCATION = 4584896436948148427n;
export const SL_REMAPPING_MDOLLAR_DIGITALMARKER_INVALID_BINDING = 4584897536459776211n;
export const SL_REMAPPING_MDOLLAR_DIGITALMARKER_BINDING_NOT_CONFIGURED = 4584898635971403988n;
export const SL_REMAPPING_MDOLLAR_ROT_OVERRIDE_LIMIT_REACHED = 4584899735483031765n;
export const SL_REMAPPING_MDOLLAR_DMAK_OVERRIDE_LIMIT_REACHED = 4585790339901530326n;
export const SL_REMAPPING_MDOLLAR_FREE_OFFER_EXPIRED = 4587962974878016512n;
export const SL_REMAPPING_MDOLLAR_OSR_DONOR_HWID_NO_ENTITLEMENT = 4587964074389646264n;
export const SL_REMAPPING_MDOLLAR_OSR_GENERIC_ERROR = 4587965173901274041n;
export const SL_REMAPPING_MDOLLAR_OSR_NO_ASSOCIATION = 4587966273412901818n;
export const SL_REMAPPING_MDOLLAR_OSR_NOT_ADMIN = 4587967372924529595n;
export const SL_REMAPPING_MDOLLAR_OSR_USER_THROTTLED = 4587968472436157372n;
export const SL_REMAPPING_MDOLLAR_OSR_LICENSE_THROTTLED = 4587969571947785149n;
export const SL_REMAPPING_MDOLLAR_OSR_DEVICE_THROTTLED = 4587970671459412926n;
export const SL_REMAPPING_MDOLLAR_OSR_GP_DISABLED = 4587971770971040703n;
export const SL_REMAPPING_MDOLLAR_OSR_HARDWARE_BLOCKED = 4587972870482668480n;
export const SL_REMAPPING_MDOLLAR_OSR_USER_BLOCKED = 4587973969994296257n;
export const SL_REMAPPING_MDOLLAR_OSR_LICENSE_BLOCKED = 4587975069505924034n;
export const SL_REMAPPING_MDOLLAR_OSR_DEVICE_BLOCKED = 3746996077534882755n;
export const WDIGEST_SP_NAME_A = `WDigest`;
export const WDIGEST_SP_NAME_W = `WDigest`;
export const WDIGEST_SP_NAME = `WDigest`;
export const IDENTITY_KEYWORD_ASSOCIATED = `associated`;
export const IDENTITY_KEYWORD_LOCAL = `local`;
export const IDENTITY_KEYWORD_HOMEGROUP = `homegroup`;
export const IDENTITY_KEYWORD_CONNECTED = `connected`;
export const STR_OUT_OF_BOX_EXPERIENCE = `OutOfBoxExperience`;
export const STR_MODERN_SETTINGS_ADD_USER = `ModernSettingsAddUser`;
export const STR_OUT_OF_BOX_UPGRADE_EXPERIENCE = `OutOfBoxUpgradeExperience`;
export const STR_COMPLETE_ACCOUNT = `CompleteAccount`;
export const STR_NTH_USER_FIRST_AUTH = `NthUserFirstAuth`;
export const STR_USER_NAME = `Username`;
export const STR_PROPERTY_STORE = `PropertyStore`;
export const SDDL_REVISION_1 = 1;
export const SDDL_REVISION = 1;
export const SDDL_OWNER = `O`;
export const SDDL_GROUP = `G`;
export const SDDL_DACL = `D`;
export const SDDL_SACL = `S`;
export const SDDL_PROTECTED = `P`;
export const SDDL_AUTO_INHERIT_REQ = `AR`;
export const SDDL_AUTO_INHERITED = `AI`;
export const SDDL_NULL_ACL = `NO_ACCESS_CONTROL`;
export const SDDL_ACCESS_ALLOWED = `A`;
export const SDDL_ACCESS_DENIED = `D`;
export const SDDL_OBJECT_ACCESS_ALLOWED = `OA`;
export const SDDL_OBJECT_ACCESS_DENIED = `OD`;
export const SDDL_AUDIT = `AU`;
export const SDDL_ALARM = `AL`;
export const SDDL_OBJECT_AUDIT = `OU`;
export const SDDL_OBJECT_ALARM = `OL`;
export const SDDL_MANDATORY_LABEL = `ML`;
export const SDDL_PROCESS_TRUST_LABEL = `TL`;
export const SDDL_CALLBACK_ACCESS_ALLOWED = `XA`;
export const SDDL_CALLBACK_ACCESS_DENIED = `XD`;
export const SDDL_RESOURCE_ATTRIBUTE = `RA`;
export const SDDL_SCOPED_POLICY_ID = `SP`;
export const SDDL_CALLBACK_AUDIT = `XU`;
export const SDDL_CALLBACK_OBJECT_ACCESS_ALLOWED = `ZA`;
export const SDDL_ACCESS_FILTER = `FL`;
export const SDDL_INT = `TI`;
export const SDDL_UINT = `TU`;
export const SDDL_WSTRING = `TS`;
export const SDDL_SID = `TD`;
export const SDDL_BLOB = `TX`;
export const SDDL_BOOLEAN = `TB`;
export const SDDL_CONTAINER_INHERIT = `CI`;
export const SDDL_OBJECT_INHERIT = `OI`;
export const SDDL_NO_PROPAGATE = `NP`;
export const SDDL_INHERIT_ONLY = `IO`;
export const SDDL_INHERITED = `ID`;
export const SDDL_CRITICAL = `CR`;
export const SDDL_TRUST_PROTECTED_FILTER = `TP`;
export const SDDL_AUDIT_SUCCESS = `SA`;
export const SDDL_AUDIT_FAILURE = `FA`;
export const SDDL_READ_PROPERTY = `RP`;
export const SDDL_WRITE_PROPERTY = `WP`;
export const SDDL_CREATE_CHILD = `CC`;
export const SDDL_DELETE_CHILD = `DC`;
export const SDDL_LIST_CHILDREN = `LC`;
export const SDDL_SELF_WRITE = `SW`;
export const SDDL_LIST_OBJECT = `LO`;
export const SDDL_DELETE_TREE = `DT`;
export const SDDL_CONTROL_ACCESS = `CR`;
export const SDDL_READ_CONTROL = `RC`;
export const SDDL_WRITE_DAC = `WD`;
export const SDDL_WRITE_OWNER = `WO`;
export const SDDL_STANDARD_DELETE = `SD`;
export const SDDL_GENERIC_ALL = `GA`;
export const SDDL_GENERIC_READ = `GR`;
export const SDDL_GENERIC_WRITE = `GW`;
export const SDDL_GENERIC_EXECUTE = `GX`;
export const SDDL_FILE_ALL = `FA`;
export const SDDL_FILE_READ = `FR`;
export const SDDL_FILE_WRITE = `FW`;
export const SDDL_FILE_EXECUTE = `FX`;
export const SDDL_KEY_ALL = `KA`;
export const SDDL_KEY_READ = `KR`;
export const SDDL_KEY_WRITE = `KW`;
export const SDDL_KEY_EXECUTE = `KX`;
export const SDDL_NO_WRITE_UP = `NW`;
export const SDDL_NO_READ_UP = `NR`;
export const SDDL_NO_EXECUTE_UP = `NX`;
export const SDDL_ALIAS_SIZE = 2;
export const SDDL_DOMAIN_ADMINISTRATORS = `DA`;
export const SDDL_DOMAIN_GUESTS = `DG`;
export const SDDL_DOMAIN_USERS = `DU`;
export const SDDL_ENTERPRISE_DOMAIN_CONTROLLERS = `ED`;
export const SDDL_DOMAIN_DOMAIN_CONTROLLERS = `DD`;
export const SDDL_DOMAIN_COMPUTERS = `DC`;
export const SDDL_BUILTIN_ADMINISTRATORS = `BA`;
export const SDDL_BUILTIN_GUESTS = `BG`;
export const SDDL_BUILTIN_USERS = `BU`;
export const SDDL_LOCAL_ADMIN = `LA`;
export const SDDL_LOCAL_GUEST = `LG`;
export const SDDL_ACCOUNT_OPERATORS = `AO`;
export const SDDL_BACKUP_OPERATORS = `BO`;
export const SDDL_PRINTER_OPERATORS = `PO`;
export const SDDL_SERVER_OPERATORS = `SO`;
export const SDDL_AUTHENTICATED_USERS = `AU`;
export const SDDL_PERSONAL_SELF = `PS`;
export const SDDL_CREATOR_OWNER = `CO`;
export const SDDL_CREATOR_GROUP = `CG`;
export const SDDL_LOCAL_SYSTEM = `SY`;
export const SDDL_POWER_USERS = `PU`;
export const SDDL_EVERYONE = `WD`;
export const SDDL_REPLICATOR = `RE`;
export const SDDL_INTERACTIVE = `IU`;
export const SDDL_NETWORK = `NU`;
export const SDDL_SERVICE = `SU`;
export const SDDL_RESTRICTED_CODE = `RC`;
export const SDDL_WRITE_RESTRICTED_CODE = `WR`;
export const SDDL_ANONYMOUS = `AN`;
export const SDDL_SCHEMA_ADMINISTRATORS = `SA`;
export const SDDL_CERT_SERV_ADMINISTRATORS = `CA`;
export const SDDL_RAS_SERVERS = `RS`;
export const SDDL_ENTERPRISE_ADMINS = `EA`;
export const SDDL_GROUP_POLICY_ADMINS = `PA`;
export const SDDL_ALIAS_PREW2KCOMPACC = `RU`;
export const SDDL_LOCAL_SERVICE = `LS`;
export const SDDL_NETWORK_SERVICE = `NS`;
export const SDDL_REMOTE_DESKTOP = `RD`;
export const SDDL_NETWORK_CONFIGURATION_OPS = `NO`;
export const SDDL_PERFMON_USERS = `MU`;
export const SDDL_PERFLOG_USERS = `LU`;
export const SDDL_IIS_USERS = `IS`;
export const SDDL_CRYPTO_OPERATORS = `CY`;
export const SDDL_OWNER_RIGHTS = `OW`;
export const SDDL_EVENT_LOG_READERS = `ER`;
export const SDDL_ENTERPRISE_RO_DCs = `RO`;
export const SDDL_CERTSVC_DCOM_ACCESS = `CD`;
export const SDDL_ALL_APP_PACKAGES = `AC`;
export const SDDL_RDS_REMOTE_ACCESS_SERVERS = `RA`;
export const SDDL_RDS_ENDPOINT_SERVERS = `ES`;
export const SDDL_RDS_MANAGEMENT_SERVERS = `MS`;
export const SDDL_USER_MODE_DRIVERS = `UD`;
export const SDDL_HYPER_V_ADMINS = `HA`;
export const SDDL_CLONEABLE_CONTROLLERS = `CN`;
export const SDDL_ACCESS_CONTROL_ASSISTANCE_OPS = `AA`;
export const SDDL_REMOTE_MANAGEMENT_USERS = `RM`;
export const SDDL_AUTHORITY_ASSERTED = `AS`;
export const SDDL_SERVICE_ASSERTED = `SS`;
export const SDDL_PROTECTED_USERS = `AP`;
export const SDDL_KEY_ADMINS = `KA`;
export const SDDL_ENTERPRISE_KEY_ADMINS = `EK`;
export const SDDL_ML_LOW = `LW`;
export const SDDL_ML_MEDIUM = `ME`;
export const SDDL_ML_MEDIUM_PLUS = `MP`;
export const SDDL_ML_HIGH = `HI`;
export const SDDL_ML_SYSTEM = `SI`;
export const SDDL_SEPERATOR = `;`;
export const SDDL_DELIMINATOR = `:`;
export const SDDL_ACE_BEGIN = `(`;
export const SDDL_ACE_END = `)`;
export const SDDL_ACE_COND_BEGIN = `(`;
export const SDDL_ACE_COND_END = `)`;
export const SDDL_SPACE = ` `;
export const SDDL_ACE_COND_BLOB_PREFIX = `#`;
export const SDDL_ACE_COND_SID_PREFIX = `SID`;
export const SDDL_ACE_COND_ATTRIBUTE_PREFIX = `@`;
export const SDDL_ACE_COND_USER_ATTRIBUTE_PREFIX = `@USER.`;
export const SDDL_ACE_COND_RESOURCE_ATTRIBUTE_PREFIX = `@RESOURCE.`;
export const SDDL_ACE_COND_DEVICE_ATTRIBUTE_PREFIX = `@DEVICE.`;
export const SDDL_ACE_COND_TOKEN_ATTRIBUTE_PREFIX = `@TOKEN.`;
export const INHERITED_ACCESS_ENTRY = 16;
export const INHERITED_PARENT = 268435456;
export const INHERITED_GRANDPARENT = 536870912;
export const ACCCTRL_DEFAULT_PROVIDERA = `Windows NT Access Provider`;
export const ACCCTRL_DEFAULT_PROVIDERW = `Windows NT Access Provider`;
export const ACCCTRL_DEFAULT_PROVIDER = `Windows NT Access Provider`;
export const TRUSTEE_ACCESS_ALLOWED = 1;
export const TRUSTEE_ACCESS_READ = 2;
export const TRUSTEE_ACCESS_WRITE = 4;
export const TRUSTEE_ACCESS_EXPLICIT = 1;
export const TRUSTEE_ACCESS_ALL = `-1`;
export const ACTRL_RESERVED = 0;
export const ACTRL_PERM_1 = 1;
export const ACTRL_PERM_2 = 2;
export const ACTRL_PERM_3 = 4;
export const ACTRL_PERM_4 = 8;
export const ACTRL_PERM_5 = 16;
export const ACTRL_PERM_6 = 32;
export const ACTRL_PERM_7 = 64;
export const ACTRL_PERM_8 = 128;
export const ACTRL_PERM_9 = 256;
export const ACTRL_PERM_10 = 512;
export const ACTRL_PERM_11 = 1024;
export const ACTRL_PERM_12 = 2048;
export const ACTRL_PERM_13 = 4096;
export const ACTRL_PERM_14 = 8192;
export const ACTRL_PERM_15 = 16384;
export const ACTRL_PERM_16 = 32768;
export const ACTRL_PERM_17 = 65536;
export const ACTRL_PERM_18 = 131072;
export const ACTRL_PERM_19 = 262144;
export const ACTRL_PERM_20 = 524288;
export const ACTRL_ACCESS_PROTECTED = 1;
export const ACTRL_SYSTEM_ACCESS = 67108864;
export const ACTRL_DELETE = 134217728;
export const ACTRL_READ_CONTROL = 268435456;
export const ACTRL_CHANGE_ACCESS = 536870912;
export const ACTRL_CHANGE_OWNER = 1073741824;
export const ACTRL_SYNCHRONIZE = 2147483648;
export const ACTRL_STD_RIGHTS_ALL = 4160749568;
export const ACTRL_FILE_READ = 1;
export const ACTRL_FILE_WRITE = 2;
export const ACTRL_FILE_APPEND = 4;
export const ACTRL_FILE_READ_PROP = 8;
export const ACTRL_FILE_WRITE_PROP = 16;
export const ACTRL_FILE_EXECUTE = 32;
export const ACTRL_FILE_READ_ATTRIB = 128;
export const ACTRL_FILE_WRITE_ATTRIB = 256;
export const ACTRL_FILE_CREATE_PIPE = 512;
export const ACTRL_DIR_LIST = 1;
export const ACTRL_DIR_CREATE_OBJECT = 2;
export const ACTRL_DIR_CREATE_CHILD = 4;
export const ACTRL_DIR_DELETE_CHILD = 64;
export const ACTRL_DIR_TRAVERSE = 32;
export const ACTRL_KERNEL_TERMINATE = 1;
export const ACTRL_KERNEL_THREAD = 2;
export const ACTRL_KERNEL_VM = 4;
export const ACTRL_KERNEL_VM_READ = 8;
export const ACTRL_KERNEL_VM_WRITE = 16;
export const ACTRL_KERNEL_DUP_HANDLE = 32;
export const ACTRL_KERNEL_PROCESS = 64;
export const ACTRL_KERNEL_SET_INFO = 128;
export const ACTRL_KERNEL_GET_INFO = 256;
export const ACTRL_KERNEL_CONTROL = 512;
export const ACTRL_KERNEL_ALERT = 1024;
export const ACTRL_KERNEL_GET_CONTEXT = 2048;
export const ACTRL_KERNEL_SET_CONTEXT = 4096;
export const ACTRL_KERNEL_TOKEN = 8192;
export const ACTRL_KERNEL_IMPERSONATE = 16384;
export const ACTRL_KERNEL_DIMPERSONATE = 32768;
export const ACTRL_PRINT_SADMIN = 1;
export const ACTRL_PRINT_SLIST = 2;
export const ACTRL_PRINT_PADMIN = 4;
export const ACTRL_PRINT_PUSE = 8;
export const ACTRL_PRINT_JADMIN = 16;
export const ACTRL_SVC_GET_INFO = 1;
export const ACTRL_SVC_SET_INFO = 2;
export const ACTRL_SVC_STATUS = 4;
export const ACTRL_SVC_LIST = 8;
export const ACTRL_SVC_START = 16;
export const ACTRL_SVC_STOP = 32;
export const ACTRL_SVC_PAUSE = 64;
export const ACTRL_SVC_INTERROGATE = 128;
export const ACTRL_SVC_UCONTROL = 256;
export const ACTRL_REG_QUERY = 1;
export const ACTRL_REG_SET = 2;
export const ACTRL_REG_CREATE_CHILD = 4;
export const ACTRL_REG_LIST = 8;
export const ACTRL_REG_NOTIFY = 16;
export const ACTRL_REG_LINK = 32;
export const ACTRL_WIN_CLIPBRD = 1;
export const ACTRL_WIN_GLOBAL_ATOMS = 2;
export const ACTRL_WIN_CREATE = 4;
export const ACTRL_WIN_LIST_DESK = 8;
export const ACTRL_WIN_LIST = 16;
export const ACTRL_WIN_READ_ATTRIBS = 32;
export const ACTRL_WIN_WRITE_ATTRIBS = 64;
export const ACTRL_WIN_SCREEN = 128;
export const ACTRL_WIN_EXIT = 256;
export const ACTRL_ACCESS_NO_OPTIONS = 0;
export const ACTRL_ACCESS_SUPPORTS_OBJECT_ENTRIES = 1;
export const AUDIT_TYPE_LEGACY = 1;
export const AUDIT_TYPE_WMI = 2;
export const AP_ParamTypeBits = 8;
export const AP_ParamTypeMask = 255;
export const _AUTHZ_SS_MAXSIZE = 128;
export const APF_AuditFailure = 0;
export const APF_AuditSuccess = 1;
export const APF_ValidFlags = 1;
export const AUTHZP_WPD_EVENT = 16;
export const AUTHZ_ALLOW_MULTIPLE_SOURCE_INSTANCES = 1;
export const AUTHZ_MIGRATED_LEGACY_PUBLISHER = 2;
export const AUTHZ_AUDIT_INSTANCE_INFORMATION = 2;
export const AUTHZ_SKIP_TOKEN_GROUPS = 2;
export const AUTHZ_REQUIRE_S4U_LOGON = 4;
export const AUTHZ_COMPUTE_PRIVILEGES = 8;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_INVALID = 0;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_INT64 = 1;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_UINT64 = 2;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_STRING = 3;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_FQBN = 4;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_SID = 5;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_BOOLEAN = 6;
export const AUTHZ_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING = 16;
export const AUTHZ_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1 = 1;
export const AUTHZ_SECURITY_ATTRIBUTES_INFORMATION_VERSION = 1;
export const AUTHZ_RPC_INIT_INFO_CLIENT_VERSION_V1 = 1;
export const AUTHZ_INIT_INFO_VERSION_V1 = 1;
export const AUTHZ_WPD_CATEGORY_FLAG = 16;
export const AUTHZ_FLAG_ALLOW_MULTIPLE_SOURCE_INSTANCES = 1;
export const OLESCRIPT_E_SYNTAX = 1227512508726771969n;
export const SI_EDIT_PERMS = 0;
export const SI_EDIT_OWNER = 1;
export const SI_CONTAINER = 4;
export const SI_READONLY = 8;
export const SI_RESET = 32;
export const SI_OWNER_READONLY = 64;
export const SI_OWNER_RECURSE = 256;
export const SI_NO_ACL_PROTECT = 512;
export const SI_NO_TREE_APPLY = 1024;
export const SI_PAGE_TITLE = 2048;
export const SI_SERVER_IS_DC = 4096;
export const SI_RESET_DACL_TREE = 16384;
export const SI_RESET_SACL_TREE = 32768;
export const SI_OBJECT_GUID = 65536;
export const SI_ACCESS_SPECIFIC = 65536;
export const SI_ACCESS_GENERAL = 131072;
export const SI_ACCESS_CONTAINER = 262144;
export const SI_ACCESS_PROPERTY = 524288;
export const DOBJ_RES_CONT = 1;
export const DOBJ_RES_ROOT = 2;
export const DOBJ_VOL_NTACLS = 4;
export const DOBJ_COND_NTACLS = 8;
export const DOBJ_RIBBON_LAUNCH = 16;
export const CFSTR_ACLUI_SID_INFO_LIST = `CFSTR_ACLUI_SID_INFO_LIST`;
export const SECURITY_OBJECT_ID_OBJECT_SD = 1;
export const SECURITY_OBJECT_ID_SHARE = 2;
export const SECURITY_OBJECT_ID_CENTRAL_POLICY = 3;
export const SECURITY_OBJECT_ID_CENTRAL_ACCESS_RULE = 4;
export const SCESTATUS_SUCCESS = 0;
export const SCESTATUS_INVALID_PARAMETER = 1;
export const SCESTATUS_RECORD_NOT_FOUND = 2;
export const SCESTATUS_INVALID_DATA = 3;
export const SCESTATUS_OBJECT_EXIST = 4;
export const SCESTATUS_BUFFER_TOO_SMALL = 5;
export const SCESTATUS_PROFILE_NOT_FOUND = 6;
export const SCESTATUS_BAD_FORMAT = 7;
export const SCESTATUS_NOT_ENOUGH_RESOURCE = 8;
export const SCESTATUS_ACCESS_DENIED = 9;
export const SCESTATUS_CANT_DELETE = 10;
export const SCESTATUS_PREFIX_OVERFLOW = 11;
export const SCESTATUS_OTHER_ERROR = 12;
export const SCESTATUS_ALREADY_RUNNING = 13;
export const SCESTATUS_SERVICE_NOT_SUPPORT = 14;
export const SCESTATUS_MOD_NOT_FOUND = 15;
export const SCESTATUS_EXCEPTION_IN_SERVER = 16;
export const SCESTATUS_NO_TEMPLATE_GIVEN = 17;
export const SCESTATUS_NO_MAPPING = 18;
export const SCESTATUS_TRUST_FAIL = 19;
export const SCE_ROOT_PATH = `Software\\Microsoft\\Windows NT\\CurrentVersion\\SeCEdit`;
export const SCESVC_ENUMERATION_MAX = 100;
export const struuidNodetypeSceTemplateServices = `{24a7f717-1f0c-11d1-affb-00c04fb984f9}`;
export const lstruuidNodetypeSceTemplateServices = `{24a7f717-1f0c-11d1-affb-00c04fb984f9}`;
export const struuidNodetypeSceAnalysisServices = `{678050c7-1ff8-11d1-affb-00c04fb984f9}`;
export const lstruuidNodetypeSceAnalysisServices = `{678050c7-1ff8-11d1-affb-00c04fb984f9}`;
export const struuidNodetypeSceEventLog = `{2ce06698-4bf3-11d1-8c30-00c04fb984f9}`;
export const lstruuidNodetypeSceEventLog = `{2ce06698-4bf3-11d1-8c30-00c04fb984f9}`;
export const CCF_SCESVC_ATTACHMENT = `CCF_SCESVC_ATTACHMENT`;
export const CCF_SCESVC_ATTACHMENT_DATA = `CCF_SCESVC_ATTACHMENT_DATA`;
export const wszCERTENROLLSHAREPATH = `CertSrv\\CertEnroll`;
export const cwcHRESULTSTRING = 40;
export const szLBRACE = `{`;
export const szRBRACE = `}`;
export const wszLBRACE = `{`;
export const wszRBRACE = `}`;
export const szLPAREN = `(`;
export const szRPAREN = `)`;
export const wszLPAREN = `(`;
export const wszRPAREN = `)`;
export const CVT_SECONDS = 1;
export const cwcFILENAMESUFFIXMAX = 20;
export const wszFCSAPARM_SERVERDNSNAME = `%1`;
export const wszFCSAPARM_SERVERSHORTNAME = `%2`;
export const wszFCSAPARM_SANITIZEDCANAME = `%3`;
export const wszFCSAPARM_CERTFILENAMESUFFIX = `%4`;
export const wszFCSAPARM_DOMAINDN = `%5`;
export const wszFCSAPARM_CONFIGDN = `%6`;
export const wszFCSAPARM_SANITIZEDCANAMEHASH = `%7`;
export const wszFCSAPARM_CRLFILENAMESUFFIX = `%8`;
export const wszFCSAPARM_CRLDELTAFILENAMESUFFIX = `%9`;
export const wszFCSAPARM_DSCRLATTRIBUTE = `%10`;
export const wszFCSAPARM_DSCACERTATTRIBUTE = `%11`;
export const wszFCSAPARM_DSUSERCERTATTRIBUTE = `%12`;
export const wszFCSAPARM_DSKRACERTATTRIBUTE = `%13`;
export const wszFCSAPARM_DSCROSSCERTPAIRATTRIBUTE = `%14`;
export const szOID_CATALOG_LIST = `1.3.6.1.4.1.311.12.1.1`;
export const szOID_CATALOG_LIST_MEMBER = `1.3.6.1.4.1.311.12.1.2`;
export const szOID_CATALOG_LIST_MEMBER2 = `1.3.6.1.4.1.311.12.1.3`;
export const CRYPTCAT_FILEEXT = `CAT`;
export const CRYPTCAT_MAX_MEMBERTAG = 64;
export const CRYPTCAT_MEMBER_SORTED = 1073741824;
export const CRYPTCAT_ATTR_AUTHENTICATED = 268435456;
export const CRYPTCAT_ATTR_UNAUTHENTICATED = 536870912;
export const CRYPTCAT_ATTR_NAMEASCII = 1;
export const CRYPTCAT_ATTR_NAMEOBJID = 2;
export const CRYPTCAT_ATTR_DATAASCII = 65536;
export const CRYPTCAT_ATTR_DATABASE64 = 131072;
export const CRYPTCAT_ATTR_DATAREPLACE = 262144;
export const CRYPTCAT_ATTR_NO_AUTO_COMPAT_ENTRY = 16777216;
export const CRYPTCAT_E_AREA_HEADER = 0;
export const CRYPTCAT_E_AREA_MEMBER = 65536;
export const CRYPTCAT_E_AREA_ATTRIBUTE = 131072;
export const CRYPTCAT_E_CDF_UNSUPPORTED = 1;
export const CRYPTCAT_E_CDF_DUPLICATE = 2;
export const CRYPTCAT_E_CDF_TAGNOTFOUND = 4;
export const CRYPTCAT_E_CDF_MEMBER_FILE_PATH = 65537;
export const CRYPTCAT_E_CDF_MEMBER_INDIRECTDATA = 65538;
export const CRYPTCAT_E_CDF_MEMBER_FILENOTFOUND = 65540;
export const CRYPTCAT_E_CDF_BAD_GUID_CONV = 131073;
export const CRYPTCAT_E_CDF_ATTR_TOOFEWVALUES = 131074;
export const CRYPTCAT_E_CDF_ATTR_TYPECOMBO = 131076;
export const CRYPTCAT_ADDCATALOG_NONE = 0;
export const CRYPTCAT_ADDCATALOG_HARDLINK = 1;
export const MSSIP_FLAGS_PROHIBIT_RESIZE_ON_CREATE = 65536;
export const MSSIP_FLAGS_USE_CATALOG = 131072;
export const MSSIP_FLAGS_MULTI_HASH = 262144;
export const SPC_INC_PE_RESOURCES_FLAG = 128;
export const SPC_INC_PE_DEBUG_INFO_FLAG = 64;
export const SPC_INC_PE_IMPORT_ADDR_TABLE_FLAG = 32;
export const SPC_EXC_PE_PAGE_HASHES_FLAG = 16;
export const SPC_INC_PE_PAGE_HASHES_FLAG = 256;
export const SPC_DIGEST_GENERATE_FLAG = 512;
export const SPC_DIGEST_SIGN_FLAG = 1024;
export const SPC_DIGEST_SIGN_EX_FLAG = 16384;
export const SPC_RELAXED_PE_MARKER_CHECK = 2048;
export const SPC_MARKER_CHECK_SKIP_SIP_INDIRECT_DATA_FLAG = 1;
export const SPC_MARKER_CHECK_CURRENTLY_SUPPORTED_FLAGS = 1;
export const MSSIP_ADDINFO_NONE = 0;
export const MSSIP_ADDINFO_FLAT = 1;
export const MSSIP_ADDINFO_CATMEMBER = 2;
export const MSSIP_ADDINFO_BLOB = 3;
export const MSSIP_ADDINFO_NONMSSIP = 500;
export const SIP_CAP_SET_VERSION_2 = 2;
export const SIP_CAP_SET_VERSION_3 = 3;
export const SIP_CAP_SET_CUR_VER = 3;
export const SIP_CAP_FLAG_SEALING = 1;
export const SIP_MAX_MAGIC_NUMBER = 4;
export const CRYTPDLG_FLAGS_MASK = 4278190080;
export const CRYPTDLG_REVOCATION_DEFAULT = 0;
export const CRYPTDLG_REVOCATION_ONLINE = 2147483648;
export const CRYPTDLG_REVOCATION_CACHE = 1073741824;
export const CRYPTDLG_REVOCATION_NONE = 536870912;
export const CRYPTDLG_CACHE_ONLY_URL_RETRIEVAL = 268435456;
export const CRYPTDLG_DISABLE_AIA = 134217728;
export const CRYPTDLG_POLICY_MASK = 65535;
export const POLICY_IGNORE_NON_CRITICAL_BC = 1;
export const CRYPTDLG_ACTION_MASK = 4294901760;
export const ACTION_REVOCATION_DEFAULT_ONLINE = 65536;
export const ACTION_REVOCATION_DEFAULT_CACHE = 131072;
export const CERT_DISPWELL_SELECT = 1;
export const CERT_DISPWELL_TRUST_CA_CERT = 2;
export const CERT_DISPWELL_TRUST_LEAF_CERT = 3;
export const CERT_DISPWELL_TRUST_ADD_CA_CERT = 4;
export const CERT_DISPWELL_TRUST_ADD_LEAF_CERT = 5;
export const CERT_DISPWELL_DISTRUST_CA_CERT = 6;
export const CERT_DISPWELL_DISTRUST_LEAF_CERT = 7;
export const CERT_DISPWELL_DISTRUST_ADD_CA_CERT = 8;
export const CERT_DISPWELL_DISTRUST_ADD_LEAF_CERT = 9;
export const CSS_SELECTCERT_MASK = 16777215;
export const SELCERT_PROPERTIES = 100;
export const SELCERT_FINEPRINT = 101;
export const SELCERT_CERTLIST = 102;
export const SELCERT_ISSUED_TO = 103;
export const SELCERT_VALIDITY = 104;
export const SELCERT_ALGORITHM = 105;
export const SELCERT_SERIAL_NUM = 106;
export const SELCERT_THUMBPRINT = 107;
export const CM_VIEWFLAGS_MASK = 16777215;
export const CERTVIEW_CRYPTUI_LPARAM = 8388608;
export const CERT_FILTER_OP_EXISTS = 1;
export const CERT_FILTER_OP_NOT_EXISTS = 2;
export const CERT_FILTER_OP_EQUALITY = 3;
export const CERT_FILTER_INCLUDE_V1_CERTS = 1;
export const CERT_FILTER_VALID_TIME_RANGE = 2;
export const CERT_FILTER_VALID_SIGNATURE = 4;
export const CERT_FILTER_LEAF_CERTS_ONLY = 8;
export const CERT_FILTER_ISSUER_CERTS_ONLY = 16;
export const CERT_FILTER_KEY_EXISTS = 32;
export const szCERT_CERTIFICATE_ACTION_VERIFY = `{7801ebd0-cf4b-11d0-851f-0060979387ea}`;
export const CERT_VALIDITY_BEFORE_START = 1;
export const CERT_VALIDITY_AFTER_END = 2;
export const CERT_VALIDITY_SIGNATURE_FAILS = 4;
export const CERT_VALIDITY_CERTIFICATE_REVOKED = 8;
export const CERT_VALIDITY_KEY_USAGE_EXT_FAILURE = 16;
export const CERT_VALIDITY_EXTENDED_USAGE_FAILURE = 32;
export const CERT_VALIDITY_NAME_CONSTRAINTS_FAILURE = 64;
export const CERT_VALIDITY_UNKNOWN_CRITICAL_EXTENSION = 128;
export const CERT_VALIDITY_ISSUER_INVALID = 256;
export const CERT_VALIDITY_OTHER_EXTENSION_FAILURE = 512;
export const CERT_VALIDITY_PERIOD_NESTING_FAILURE = 1024;
export const CERT_VALIDITY_OTHER_ERROR = 2048;
export const CERT_VALIDITY_ISSUER_DISTRUST = 33554432;
export const CERT_VALIDITY_EXPLICITLY_DISTRUSTED = 16777216;
export const CERT_VALIDITY_NO_ISSUER_CERT_FOUND = 268435456;
export const CERT_VALIDITY_NO_CRL_FOUND = 536870912;
export const CERT_VALIDITY_CRL_OUT_OF_DATE = 1073741824;
export const CERT_VALIDITY_NO_TRUST_DATA = 2147483648;
export const CERT_VALIDITY_MASK_TRUST = 4294901760;
export const CERT_VALIDITY_MASK_VALIDITY = 65535;
export const CERT_TRUST_MASK = 16777215;
export const CERT_TRUST_DO_FULL_SEARCH = 1;
export const CERT_TRUST_PERMIT_MISSING_CRLS = 2;
export const CERT_TRUST_DO_FULL_TRUST = 5;
export const CERT_CREDENTIAL_PROVIDER_ID = `-509`;
export const CRYPTUI_SELECT_ISSUEDTO_COLUMN = 1;
export const CRYPTUI_SELECT_ISSUEDBY_COLUMN = 2;
export const CRYPTUI_SELECT_INTENDEDUSE_COLUMN = 4;
export const CRYPTUI_SELECT_FRIENDLYNAME_COLUMN = 8;
export const CRYPTUI_SELECT_LOCATION_COLUMN = 16;
export const CRYPTUI_SELECT_EXPIRATION_COLUMN = 32;
export const CRYPTUI_CERT_MGR_TAB_MASK = 15;
export const CRYPTUI_CERT_MGR_PUBLISHER_TAB = 4;
export const CRYPTUI_CERT_MGR_SINGLE_TAB_FLAG = 32768;
export const CRYPTUI_WIZ_DIGITAL_SIGN_EXCLUDE_PAGE_HASHES = 2;
export const CRYPTUI_WIZ_DIGITAL_SIGN_INCLUDE_PAGE_HASHES = 4;
export const CRYPTUI_WIZ_EXPORT_FORMAT_SERIALIZED_CERT_STORE = 5;
export const DSSI_READ_ONLY = 1;
export const DSSI_NO_ACCESS_CHECK = 2;
export const DSSI_NO_EDIT_SACL = 4;
export const DSSI_NO_EDIT_OWNER = 8;
export const DSSI_IS_ROOT = 16;
export const DSSI_NO_FILTER = 32;
export const DSSI_NO_READONLY_MESSAGE = 64;
export const FACILITY_EAP_MESSAGE = 2114;
export const EAP_GROUP_MASK = 65280;
export const EAP_E_EAPHOST_FIRST = `-2143158272`;
export const EAP_E_EAPHOST_LAST = `-2143158017`;
export const EAP_I_EAPHOST_FIRST = `-2143158272`;
export const EAP_I_EAPHOST_LAST = `-2143158017`;
export const EAP_E_CERT_STORE_INACCESSIBLE = 2151809040;
export const EAP_E_EAPHOST_METHOD_NOT_INSTALLED = 2151809041;
export const EAP_E_EAPHOST_THIRDPARTY_METHOD_HOST_RESET = 2151809042;
export const EAP_E_EAPHOST_EAPQEC_INACCESSIBLE = 2151809043;
export const EAP_E_EAPHOST_IDENTITY_UNKNOWN = 2151809044;
export const EAP_E_AUTHENTICATION_FAILED = 2151809045;
export const EAP_I_EAPHOST_EAP_NEGOTIATION_FAILED = 1078067222;
export const EAP_E_EAPHOST_METHOD_INVALID_PACKET = 2151809047;
export const EAP_E_EAPHOST_REMOTE_INVALID_PACKET = 2151809048;
export const EAP_E_EAPHOST_XML_MALFORMED = 2151809049;
export const EAP_E_METHOD_CONFIG_DOES_NOT_SUPPORT_SSO = 2151809050;
export const EAP_E_EAPHOST_METHOD_OPERATION_NOT_SUPPORTED = 2151809056;
export const EAP_E_USER_FIRST = `-2143158016`;
export const EAP_E_USER_LAST = `-2143157761`;
export const EAP_I_USER_FIRST = 1078067456;
export const EAP_I_USER_LAST = 1078067711;
export const EAP_E_USER_CERT_NOT_FOUND = 2151809280;
export const EAP_E_USER_CERT_INVALID = 2151809281;
export const EAP_E_USER_CERT_EXPIRED = 2151809282;
export const EAP_E_USER_CERT_REVOKED = 2151809283;
export const EAP_E_USER_CERT_OTHER_ERROR = 2151809284;
export const EAP_E_USER_CERT_REJECTED = 2151809285;
export const EAP_I_USER_ACCOUNT_OTHER_ERROR = 1078067472;
export const EAP_E_USER_CREDENTIALS_REJECTED = 2151809297;
export const EAP_E_USER_NAME_PASSWORD_REJECTED = 2151809298;
export const EAP_E_NO_SMART_CARD_READER = 2151809299;
export const EAP_E_SERVER_FIRST = `-2143157760`;
export const EAP_E_SERVER_LAST = `-2143157505`;
export const EAP_E_SERVER_CERT_NOT_FOUND = 2151809536;
export const EAP_E_SERVER_CERT_INVALID = 2151809537;
export const EAP_E_SERVER_CERT_EXPIRED = 2151809538;
export const EAP_E_SERVER_CERT_REVOKED = 2151809539;
export const EAP_E_SERVER_CERT_OTHER_ERROR = 2151809540;
export const EAP_E_USER_ROOT_CERT_FIRST = `-2143157504`;
export const EAP_E_USER_ROOT_CERT_LAST = `-2143157249`;
export const EAP_E_USER_ROOT_CERT_NOT_FOUND = 2151809792;
export const EAP_E_USER_ROOT_CERT_INVALID = 2151809793;
export const EAP_E_USER_ROOT_CERT_EXPIRED = 2151809794;
export const EAP_E_SERVER_ROOT_CERT_FIRST = `-2143157248`;
export const EAP_E_SERVER_ROOT_CERT_LAST = `-2143156993`;
export const EAP_E_SERVER_ROOT_CERT_NOT_FOUND = 2151810048;
export const EAP_E_SERVER_ROOT_CERT_INVALID = 2151810049;
export const EAP_E_SERVER_ROOT_CERT_NAME_REQUIRED = 2151810054;
export const EAP_E_SIM_NOT_VALID = 2151810304;
export const EAP_METHOD_INVALID_PACKET = 2151809047;
export const EAP_INVALID_PACKET = 2151809048;
export const EAP_PEER_FLAG_GUEST_ACCESS = 64;
export const eapPropCipherSuiteNegotiation = 1;
export const eapPropMutualAuth = 2;
export const eapPropIntegrity = 4;
export const eapPropReplayProtection = 8;
export const eapPropConfidentiality = 16;
export const eapPropKeyDerivation = 32;
export const eapPropKeyStrength64 = 64;
export const eapPropKeyStrength128 = 128;
export const eapPropKeyStrength256 = 256;
export const eapPropKeyStrength512 = 512;
export const eapPropKeyStrength1024 = 1024;
export const eapPropDictionaryAttackResistance = 2048;
export const eapPropFastReconnect = 4096;
export const eapPropCryptoBinding = 8192;
export const eapPropSessionIndependence = 16384;
export const eapPropFragmentation = 32768;
export const eapPropChannelBinding = 65536;
export const eapPropNap = 131072;
export const eapPropStandalone = 262144;
export const eapPropMppeEncryption = 524288;
export const eapPropTunnelMethod = 1048576;
export const eapPropSupportsConfig = 2097152;
export const eapPropCertifiedMethod = 4194304;
export const eapPropHiddenMethod = 8388608;
export const eapPropMachineAuth = 16777216;
export const eapPropUserAuth = 33554432;
export const eapPropIdentityPrivacy = 67108864;
export const eapPropMethodChaining = 134217728;
export const eapPropSharedStateEquivalence = 268435456;
export const eapPropReserved = 2147483648;
export const EAP_VALUENAME_PROPERTIES = `Properties`;
export const EAP_FLAG_Reserved1 = 1;
export const EAP_FLAG_NON_INTERACTIVE = 2;
export const EAP_FLAG_LOGON = 4;
export const EAP_FLAG_PREVIEW = 8;
export const EAP_FLAG_Reserved2 = 16;
export const EAP_FLAG_MACHINE_AUTH = 32;
export const EAP_FLAG_GUEST_ACCESS = 64;
export const EAP_FLAG_Reserved3 = 128;
export const EAP_FLAG_Reserved4 = 256;
export const EAP_FLAG_RESUME_FROM_HIBERNATE = 512;
export const EAP_FLAG_Reserved5 = 1024;
export const EAP_FLAG_Reserved6 = 2048;
export const EAP_FLAG_FULL_AUTH = 4096;
export const EAP_FLAG_PREFER_ALT_CREDENTIALS = 8192;
export const EAP_FLAG_Reserved7 = 16384;
export const EAP_PEER_FLAG_HEALTH_STATE_CHANGE = 32768;
export const EAP_FLAG_SUPRESS_UI = 65536;
export const EAP_FLAG_PRE_LOGON = 131072;
export const EAP_FLAG_USER_AUTH = 262144;
export const EAP_FLAG_CONFG_READONLY = 524288;
export const EAP_FLAG_Reserved8 = 1048576;
export const EAP_FLAG_Reserved9 = 4194304;
export const EAP_FLAG_VPN = 8388608;
export const EAP_FLAG_ONLY_EAP_TLS = 16777216;
export const EAP_FLAG_SERVER_VALIDATION_REQUIRED = 33554432;
export const EAP_CONFIG_INPUT_FIELD_PROPS_DEFAULT = 0;
export const EAP_CONFIG_INPUT_FIELD_PROPS_NON_DISPLAYABLE = 1;
export const EAP_CONFIG_INPUT_FIELD_PROPS_NON_PERSIST = 2;
export const EAP_UI_INPUT_FIELD_PROPS_DEFAULT = 0;
export const EAP_UI_INPUT_FIELD_PROPS_NON_DISPLAYABLE = 1;
export const EAP_UI_INPUT_FIELD_PROPS_NON_PERSIST = 2;
export const EAP_UI_INPUT_FIELD_PROPS_READ_ONLY = 4;
export const EAP_CREDENTIAL_VERSION = 1;
export const EAP_INTERACTIVE_UI_DATA_VERSION = 1;
export const EAPHOST_PEER_API_VERSION = 1;
export const EAPHOST_METHOD_API_VERSION = 1;
export const MAX_EAP_CONFIG_INPUT_FIELD_LENGTH = 256;
export const MAX_EAP_CONFIG_INPUT_FIELD_VALUE_LENGTH = 1024;
export const CERTIFICATE_HASH_LENGTH = 20;
export const NCRYPT_PIN_CACHE_PIN_BYTE_LENGTH = 90;
export const EAP_REGISTRY_LOCATION = `System\\CurrentControlSet\\Services\\EapHost\\Methods`;
export const EAP_PEER_VALUENAME_DLL_PATH = `PeerDllPath`;
export const EAP_PEER_VALUENAME_FRIENDLY_NAME = `PeerFriendlyName`;
export const EAP_PEER_VALUENAME_CONFIGUI = `PeerConfigUIPath`;
export const EAP_PEER_VALUENAME_REQUIRE_CONFIGUI = `PeerRequireConfigUI`;
export const EAP_PEER_VALUENAME_IDENTITY = `PeerIdentityPath`;
export const EAP_PEER_VALUENAME_INTERACTIVEUI = `PeerInteractiveUIPath`;
export const EAP_PEER_VALUENAME_INVOKE_NAMEDLG = `PeerInvokeUsernameDialog`;
export const EAP_PEER_VALUENAME_INVOKE_PWDDLG = `PeerInvokePasswordDialog`;
export const EAP_PEER_VALUENAME_PROPERTIES = `Properties`;
export const EAP_AUTHENTICATOR_VALUENAME_DLL_PATH = `AuthenticatorDllPath`;
export const EAP_AUTHENTICATOR_VALUENAME_FRIENDLY_NAME = `AuthenticatorFriendlyName`;
export const EAP_AUTHENTICATOR_VALUENAME_PROPERTIES = `Properties`;
export const EAP_AUTHENTICATOR_VALUENAME_CONFIGUI = `AuthenticatorConfigUIPath`;
export const EAP_METHOD_AUTHENTICATOR_CONFIG_IS_IDENTITY_PRIVACY = 1;
export const RAS_EAP_REGISTRY_LOCATION = `System\\CurrentControlSet\\Services\\Rasman\\PPP\\EAP`;
export const RAS_EAP_VALUENAME_PATH = `Path`;
export const RAS_EAP_VALUENAME_CONFIGUI = `ConfigUIPath`;
export const RAS_EAP_VALUENAME_INTERACTIVEUI = `InteractiveUIPath`;
export const RAS_EAP_VALUENAME_IDENTITY = `IdentityPath`;
export const RAS_EAP_VALUENAME_FRIENDLY_NAME = `FriendlyName`;
export const RAS_EAP_VALUENAME_DEFAULT_DATA = `ConfigData`;
export const RAS_EAP_VALUENAME_REQUIRE_CONFIGUI = `RequireConfigUI`;
export const RAS_EAP_VALUENAME_ENCRYPTION = `MPPEEncryptionSupported`;
export const RAS_EAP_VALUENAME_INVOKE_NAMEDLG = `InvokeUsernameDialog`;
export const RAS_EAP_VALUENAME_INVOKE_PWDDLG = `InvokePasswordDialog`;
export const RAS_EAP_VALUENAME_CONFIG_CLSID = `ConfigCLSID`;
export const RAS_EAP_VALUENAME_STANDALONE_SUPPORTED = `StandaloneSupported`;
export const RAS_EAP_VALUENAME_ROLES_SUPPORTED = `RolesSupported`;
export const RAS_EAP_VALUENAME_PER_POLICY_CONFIG = `PerPolicyConfig`;
export const RAS_EAP_VALUENAME_ISTUNNEL_METHOD = `IsTunnelMethod`;
export const RAS_EAP_VALUENAME_FILTER_INNERMETHODS = `FilterInnerMethods`;
export const RAS_EAP_ROLE_AUTHENTICATOR = 1;
export const RAS_EAP_ROLE_AUTHENTICATEE = 2;
export const RAS_EAP_ROLE_EXCLUDE_IN_EAP = 4;
export const RAS_EAP_ROLE_EXCLUDE_IN_PEAP = 8;
export const RAS_EAP_ROLE_EXCLUDE_IN_VPN = 16;
export const raatARAPChallenge = 33;
export const raatARAPOldPassword = 19;
export const raatARAPNewPassword = 20;
export const raatARAPPasswordChangeReason = 21;
export const EAPCODE_Request = 1;
export const EAPCODE_Response = 2;
export const EAPCODE_Success = 3;
export const EAPCODE_Failure = 4;
export const MAXEAPCODE = 4;
export const RAS_EAP_FLAG_ROUTER = 1;
export const RAS_EAP_FLAG_NON_INTERACTIVE = 2;
export const RAS_EAP_FLAG_LOGON = 4;
export const RAS_EAP_FLAG_PREVIEW = 8;
export const RAS_EAP_FLAG_FIRST_LINK = 16;
export const RAS_EAP_FLAG_MACHINE_AUTH = 32;
export const RAS_EAP_FLAG_GUEST_ACCESS = 64;
export const RAS_EAP_FLAG_8021X_AUTH = 128;
export const RAS_EAP_FLAG_HOSTED_IN_PEAP = 256;
export const RAS_EAP_FLAG_RESUME_FROM_HIBERNATE = 512;
export const RAS_EAP_FLAG_PEAP_UPFRONT = 1024;
export const RAS_EAP_FLAG_ALTERNATIVE_USER_DB = 2048;
export const RAS_EAP_FLAG_PEAP_FORCE_FULL_AUTH = 4096;
export const RAS_EAP_FLAG_PRE_LOGON = 131072;
export const RAS_EAP_FLAG_CONFG_READONLY = 524288;
export const RAS_EAP_FLAG_RESERVED = 1048576;
export const RAS_EAP_FLAG_SAVE_CREDMAN = 2097152;
export const RAS_EAP_FLAG_SERVER_VALIDATION_REQUIRED = 33554432;
export const maxSoHAttributeCount = 100;
export const maxSoHAttributeSize = 4000;
export const minNetworkSoHSize = 12;
export const maxNetworkSoHSize = 4000;
export const maxStringLength = 1024;
export const maxSystemHealthEntityCount = 20;
export const maxEnforcerCount = 20;
export const maxPrivateDataSize = 200;
export const maxConnectionCountPerEnforcer = 20;
export const freshSoHRequest = 1;
export const shaFixup = 1;
export const failureCategoryCount = 5;
export const ComponentTypeEnforcementClientSoH = 1;
export const ComponentTypeEnforcementClientRp = 2;
export const percentageNotSupported = 101;
export const TPMVSC_DEFAULT_ADMIN_ALGORITHM_ID = 130;
export const WINTRUST_CONFIG_REGPATH = `Software\\Microsoft\\Cryptography\\Wintrust\\Config`;
export const WINTRUST_MAX_HEADER_BYTES_TO_MAP_VALUE_NAME = `MaxHeaderBytesToMap`;
export const WINTRUST_MAX_HEADER_BYTES_TO_MAP_DEFAULT = 10485760;
export const WINTRUST_MAX_HASH_BYTES_TO_MAP_VALUE_NAME = `MaxHashBytesToMap`;
export const WINTRUST_MAX_HASH_BYTES_TO_MAP_DEFAULT = 1048576;
export const WTD_PROV_FLAGS_MASK = 65535;
export const WTD_CODE_INTEGRITY_DRIVER_MODE = 32768;
export const WSS_VERIFY_SEALING = 4;
export const WSS_INPUT_FLAG_MASK = 7;
export const WSS_OUT_SEALING_STATUS_VERIFIED = 2147483648;
export const WSS_OUT_HAS_SEALING_INTENT = 1073741824;
export const WSS_OUT_FILE_SUPPORTS_SEAL = 536870912;
export const WSS_OUTPUT_FLAG_MASK = 3758096384;
export const WTCI_DONT_OPEN_STORES = 1;
export const WTCI_OPEN_ONLY_ROOT = 2;
export const WTCI_USE_LOCAL_MACHINE = 4;
export const TRUSTERROR_STEP_WVTPARAMS = 0;
export const TRUSTERROR_STEP_FILEIO = 2;
export const TRUSTERROR_STEP_SIP = 3;
export const TRUSTERROR_STEP_SIPSUBJINFO = 5;
export const TRUSTERROR_STEP_CATALOGFILE = 6;
export const TRUSTERROR_STEP_CERTSTORE = 7;
export const TRUSTERROR_STEP_MESSAGE = 8;
export const TRUSTERROR_STEP_MSG_SIGNERCOUNT = 9;
export const TRUSTERROR_STEP_MSG_INNERCNTTYPE = 10;
export const TRUSTERROR_STEP_MSG_INNERCNT = 11;
export const TRUSTERROR_STEP_MSG_STORE = 12;
export const TRUSTERROR_STEP_MSG_SIGNERINFO = 13;
export const TRUSTERROR_STEP_MSG_SIGNERCERT = 14;
export const TRUSTERROR_STEP_MSG_CERTCHAIN = 15;
export const TRUSTERROR_STEP_MSG_COUNTERSIGINFO = 16;
export const TRUSTERROR_STEP_MSG_COUNTERSIGCERT = 17;
export const TRUSTERROR_STEP_VERIFY_MSGHASH = 18;
export const TRUSTERROR_STEP_VERIFY_MSGINDIRECTDATA = 19;
export const TRUSTERROR_STEP_FINAL_WVTINIT = 30;
export const TRUSTERROR_STEP_FINAL_INITPROV = 31;
export const TRUSTERROR_STEP_FINAL_OBJPROV = 32;
export const TRUSTERROR_STEP_FINAL_SIGPROV = 33;
export const TRUSTERROR_STEP_FINAL_CERTPROV = 34;
export const TRUSTERROR_STEP_FINAL_CERTCHKPROV = 35;
export const TRUSTERROR_STEP_FINAL_POLICYPROV = 36;
export const TRUSTERROR_STEP_FINAL_UIPROV = 37;
export const TRUSTERROR_MAX_STEPS = 38;
export const CPD_CHOICE_SIP = 1;
export const CPD_USE_NT5_CHAIN_FLAG = 2147483648;
export const CPD_REVOCATION_CHECK_NONE = 65536;
export const CPD_REVOCATION_CHECK_END_CERT = 131072;
export const CPD_REVOCATION_CHECK_CHAIN = 262144;
export const CPD_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 524288;
export const CPD_RETURN_LOWER_QUALITY_CHAINS = 1048576;
export const CPD_UISTATE_MODE_PROMPT = 0;
export const CPD_UISTATE_MODE_BLOCK = 1;
export const CPD_UISTATE_MODE_ALLOW = 2;
export const CPD_UISTATE_MODE_MASK = 3;
export const WSS_OBJTRUST_SUPPORT = 1;
export const WSS_SIGTRUST_SUPPORT = 2;
export const WSS_CERTTRUST_SUPPORT = 4;
export const SGNR_TYPE_TIMESTAMP = 16;
export const CERT_CONFIDENCE_SIG = 268435456;
export const CERT_CONFIDENCE_TIME = 16777216;
export const CERT_CONFIDENCE_TIMENEST = 1048576;
export const CERT_CONFIDENCE_AUTHIDEXT = 65536;
export const CERT_CONFIDENCE_HYGIENE = 4096;
export const CERT_CONFIDENCE_HIGHEST = 286330880;
export const WT_CURRENT_VERSION = 512;
export const WT_PROVIDER_DLL_NAME = `WINTRUST.DLL`;
export const WT_PROVIDER_CERTTRUST_FUNCTION = `WintrustCertificateTrust`;
export const WT_ADD_ACTION_ID_RET_RESULT_FLAG = 1;
export const szOID_TRUSTED_CODESIGNING_CA_LIST = `1.3.6.1.4.1.311.2.2.1`;
export const szOID_TRUSTED_CLIENT_AUTH_CA_LIST = `1.3.6.1.4.1.311.2.2.2`;
export const szOID_TRUSTED_SERVER_AUTH_CA_LIST = `1.3.6.1.4.1.311.2.2.3`;
export const SPC_COMMON_NAME_OBJID = `2.5.4.3`;
export const SPC_TIME_STAMP_REQUEST_OBJID = `1.3.6.1.4.1.311.3.2.1`;
export const SPC_INDIRECT_DATA_OBJID = `1.3.6.1.4.1.311.2.1.4`;
export const SPC_SP_AGENCY_INFO_OBJID = `1.3.6.1.4.1.311.2.1.10`;
export const SPC_STATEMENT_TYPE_OBJID = `1.3.6.1.4.1.311.2.1.11`;
export const SPC_SP_OPUS_INFO_OBJID = `1.3.6.1.4.1.311.2.1.12`;
export const SPC_CERT_EXTENSIONS_OBJID = `1.3.6.1.4.1.311.2.1.14`;
export const SPC_PE_IMAGE_DATA_OBJID = `1.3.6.1.4.1.311.2.1.15`;
export const SPC_RAW_FILE_DATA_OBJID = `1.3.6.1.4.1.311.2.1.18`;
export const SPC_STRUCTURED_STORAGE_DATA_OBJID = `1.3.6.1.4.1.311.2.1.19`;
export const SPC_JAVA_CLASS_DATA_OBJID = `1.3.6.1.4.1.311.2.1.20`;
export const SPC_INDIVIDUAL_SP_KEY_PURPOSE_OBJID = `1.3.6.1.4.1.311.2.1.21`;
export const SPC_COMMERCIAL_SP_KEY_PURPOSE_OBJID = `1.3.6.1.4.1.311.2.1.22`;
export const SPC_CAB_DATA_OBJID = `1.3.6.1.4.1.311.2.1.25`;
export const SPC_GLUE_RDN_OBJID = `1.3.6.1.4.1.311.2.1.25`;
export const SPC_MINIMAL_CRITERIA_OBJID = `1.3.6.1.4.1.311.2.1.26`;
export const SPC_FINANCIAL_CRITERIA_OBJID = `1.3.6.1.4.1.311.2.1.27`;
export const SPC_LINK_OBJID = `1.3.6.1.4.1.311.2.1.28`;
export const SPC_SIGINFO_OBJID = `1.3.6.1.4.1.311.2.1.30`;
export const SPC_PE_IMAGE_PAGE_HASHES_V1_OBJID = `1.3.6.1.4.1.311.2.3.1`;
export const SPC_PE_IMAGE_PAGE_HASHES_V2_OBJID = `1.3.6.1.4.1.311.2.3.2`;
export const szOID_NESTED_SIGNATURE = `1.3.6.1.4.1.311.2.4.1`;
export const szOID_INTENT_TO_SEAL = `1.3.6.1.4.1.311.2.4.2`;
export const szOID_SEALING_SIGNATURE = `1.3.6.1.4.1.311.2.4.3`;
export const szOID_SEALING_TIMESTAMP = `1.3.6.1.4.1.311.2.4.4`;
export const szOID_ENHANCED_HASH = `1.3.6.1.4.1.311.2.5.1`;
export const SPC_RELAXED_PE_MARKER_CHECK_OBJID = `1.3.6.1.4.1.311.2.6.1`;
export const SPC_ENCRYPTED_DIGEST_RETRY_COUNT_OBJID = `1.3.6.1.4.1.311.2.6.2`;
export const szOID_PKCS_9_SEQUENCE_NUMBER = `1.2.840.113549.1.9.25.4`;
export const CAT_NAMEVALUE_OBJID = `1.3.6.1.4.1.311.12.2.1`;
export const CAT_MEMBERINFO_OBJID = `1.3.6.1.4.1.311.12.2.2`;
export const CAT_MEMBERINFO2_OBJID = `1.3.6.1.4.1.311.12.2.3`;
export const SPC_WINDOWS_HELLO_COMPATIBILITY_OBJID = `1.3.6.1.4.1.311.10.41.1`;
export const SPC_NATURAL_AUTH_PLUGIN_OBJID = `1.3.6.1.4.1.311.96.1.1`;
export const SPC_SP_AGENCY_INFO_STRUCT = 2200139947050960;
export const SPC_MINIMAL_CRITERIA_STRUCT = 2201239458678737;
export const SPC_FINANCIAL_CRITERIA_STRUCT = 2202338970306514;
export const SPC_INDIRECT_DATA_CONTENT_STRUCT = 2203438481934291;
export const SPC_PE_IMAGE_DATA_STRUCT = 2204537993562068;
export const SPC_LINK_STRUCT = 2210035551700949;
export const SPC_STATEMENT_TYPE_STRUCT = 2206737016817622;
export const SPC_SP_OPUS_INFO_STRUCT = 2350773040056279;
export const SPC_CAB_DATA_STRUCT = 2324384760989656;
export const SPC_JAVA_CLASS_DATA_STRUCT = 2226528226117593;
export const INTENT_TO_SEAL_ATTRIBUTE_STRUCT = 2212234574956506;
export const SEALING_SIGNATURE_ATTRIBUTE_STRUCT = 16971004890035783643n;
export const SEALING_TIMESTAMP_ATTRIBUTE_STRUCT = 2213334086584284;
export const SPC_SIGINFO_STRUCT = 2343076458661970;
export const CAT_NAMEVALUE_STRUCT = 2443132016789677;
export const CAT_MEMBERINFO_STRUCT = 2451928109811886;
export const CAT_MEMBERINFO2_STRUCT = 2446430551673007;
export const SPC_UUID_LENGTH = 16;
export const SPC_URL_LINK_CHOICE = 1;
export const SPC_MONIKER_LINK_CHOICE = 2;
export const SPC_FILE_LINK_CHOICE = 3;
export const WIN_CERT_REVISION_1_0 = 256;
export const WIN_CERT_REVISION_2_0 = 512;
export const WIN_CERT_TYPE_X509 = 1;
export const WIN_CERT_TYPE_PKCS_SIGNED_DATA = 2;
export const WIN_CERT_TYPE_RESERVED_1 = 3;
export const WIN_CERT_TYPE_TS_STACK_SIGNED = 4;
export const WT_TRUSTDBDIALOG_NO_UI_FLAG = 1;
export const WT_TRUSTDBDIALOG_ONLY_PUB_TAB_FLAG = 2;
export const WT_TRUSTDBDIALOG_WRITE_LEGACY_REG_FLAG = 256;
export const WT_TRUSTDBDIALOG_WRITE_IEAK_STORE_FLAG = 512;
export const SP_POLICY_PROVIDER_DLL_NAME = `WINTRUST.DLL`;
export const SP_INIT_FUNCTION = `SoftpubInitialize`;
export const SP_OBJTRUST_FUNCTION = `SoftpubLoadMessage`;
export const SP_SIGTRUST_FUNCTION = `SoftpubLoadSignature`;
export const SP_CHKCERT_FUNCTION = `SoftpubCheckCert`;
export const SP_FINALPOLICY_FUNCTION = `SoftpubAuthenticode`;
export const SP_CLEANUPPOLICY_FUNCTION = `SoftpubCleanup`;
export const SP_TESTDUMPPOLICY_FUNCTION_TEST = `SoftpubDumpStructure`;
export const SP_GENERIC_CERT_INIT_FUNCTION = `SoftpubDefCertInit`;
export const GENERIC_CHAIN_FINALPOLICY_FUNCTION = `GenericChainFinalProv`;
export const GENERIC_CHAIN_CERTTRUST_FUNCTION = `GenericChainCertificateTrust`;
export const HTTPS_FINALPOLICY_FUNCTION = `HTTPSFinalProv`;
export const HTTPS_CHKCERT_FUNCTION = `HTTPSCheckCertProv`;
export const HTTPS_CERTTRUST_FUNCTION = `HTTPSCertificateTrust`;
export const OFFICE_POLICY_PROVIDER_DLL_NAME = `WINTRUST.DLL`;
export const OFFICE_INITPROV_FUNCTION = `OfficeInitializePolicy`;
export const OFFICE_CLEANUPPOLICY_FUNCTION = `OfficeCleanupPolicy`;
export const DRIVER_INITPROV_FUNCTION = `DriverInitializePolicy`;
export const DRIVER_FINALPOLPROV_FUNCTION = `DriverFinalPolicy`;
export const DRIVER_CLEANUPPOLICY_FUNCTION = `DriverCleanupPolicy`;
export const CCPI_RESULT_ALLOW = 1;
export const CCPI_RESULT_DENY = 2;
export const CCPI_RESULT_AUDIT = 3;
export const WLX_VERSION_1_0 = 65536;
export const WLX_VERSION_1_1 = 65537;
export const WLX_VERSION_1_2 = 65538;
export const WLX_VERSION_1_3 = 65539;
export const WLX_VERSION_1_4 = 65540;
export const WLX_CURRENT_VERSION = 65540;
export const WLX_SAS_TYPE_TIMEOUT = 0;
export const WLX_SAS_TYPE_CTRL_ALT_DEL = 1;
export const WLX_SAS_TYPE_SCRNSVR_TIMEOUT = 2;
export const WLX_SAS_TYPE_SCRNSVR_ACTIVITY = 3;
export const WLX_SAS_TYPE_USER_LOGOFF = 4;
export const WLX_SAS_TYPE_SC_INSERT = 5;
export const WLX_SAS_TYPE_SC_REMOVE = 6;
export const WLX_SAS_TYPE_AUTHENTICATED = 7;
export const WLX_SAS_TYPE_SC_FIRST_READER_ARRIVED = 8;
export const WLX_SAS_TYPE_SC_LAST_READER_REMOVED = 9;
export const WLX_SAS_TYPE_SWITCHUSER = 10;
export const WLX_SAS_TYPE_MAX_MSFT_VALUE = 127;
export const WLX_LOGON_OPT_NO_PROFILE = 1;
export const WLX_PROFILE_TYPE_V1_0 = 1;
export const WLX_PROFILE_TYPE_V2_0 = 2;
export const WLX_SAS_ACTION_LOGON = 1;
export const WLX_SAS_ACTION_NONE = 2;
export const WLX_SAS_ACTION_LOCK_WKSTA = 3;
export const WLX_SAS_ACTION_LOGOFF = 4;
export const WLX_SAS_ACTION_PWD_CHANGED = 6;
export const WLX_SAS_ACTION_TASKLIST = 7;
export const WLX_SAS_ACTION_UNLOCK_WKSTA = 8;
export const WLX_SAS_ACTION_FORCE_LOGOFF = 9;
export const WLX_SAS_ACTION_SHUTDOWN_SLEEP = 12;
export const WLX_SAS_ACTION_SHUTDOWN_SLEEP2 = 13;
export const WLX_SAS_ACTION_SHUTDOWN_HIBERNATE = 14;
export const WLX_SAS_ACTION_RECONNECTED = 15;
export const WLX_SAS_ACTION_DELAYED_FORCE_LOGOFF = 16;
export const WLX_SAS_ACTION_SWITCH_CONSOLE = 17;
export const WLX_WM_SAS = 1625;
export const WLX_DLG_SAS = 101;
export const WLX_DLG_INPUT_TIMEOUT = 102;
export const WLX_DLG_SCREEN_SAVER_TIMEOUT = 103;
export const WLX_DLG_USER_LOGOFF = 104;
export const WLX_DIRECTORY_LENGTH = 256;
export const WLX_CREDENTIAL_TYPE_V1_0 = 1;
export const WLX_CREDENTIAL_TYPE_V2_0 = 2;
export const WLX_CONSOLESWITCHCREDENTIAL_TYPE_V1_0 = 1;
export const STATUSMSG_OPTION_NOANIMATION = 1;
export const STATUSMSG_OPTION_SETFOREGROUND = 2;
export const WLX_DESKTOP_NAME = 1;
export const WLX_DESKTOP_HANDLE = 2;
export const WLX_CREATE_INSTANCE_ONLY = 1;
export const WLX_CREATE_USER = 2;
export const WLX_OPTION_USE_CTRL_ALT_DEL = 1;
export const WLX_OPTION_CONTEXT_POINTER = 2;
export const WLX_OPTION_USE_SMART_CARD = 3;
export const WLX_OPTION_FORCE_LOGOFF_TIME = 4;
export const WLX_OPTION_IGNORE_AUTO_LOGON = 8;
export const WLX_OPTION_NO_SWITCH_ON_SAS = 9;
export const WLX_OPTION_SMART_CARD_PRESENT = 65537;
export const WLX_OPTION_SMART_CARD_INFO = 65538;
export const WLX_OPTION_DISPATCH_TABLE_SIZE = 65539;
export const SE_UNKNOWN_OBJECT_TYPE = 0;
export const SE_FILE_OBJECT = 1;
export const SE_SERVICE = 2;
export const SE_PRINTER = 3;
export const SE_REGISTRY_KEY = 4;
export const SE_LMSHARE = 5;
export const SE_KERNEL_OBJECT = 6;
export const SE_WINDOW_OBJECT = 7;
export const SE_DS_OBJECT = 8;
export const SE_DS_OBJECT_ALL = 9;
export const SE_PROVIDER_DEFINED_OBJECT = 10;
export const SE_WMIGUID_OBJECT = 11;
export const SE_REGISTRY_WOW64_32KEY = 12;
export const SE_REGISTRY_WOW64_64KEY = 13;
export const TRUSTEE_IS_UNKNOWN = 0;
export const TRUSTEE_IS_USER = 1;
export const TRUSTEE_IS_GROUP = 2;
export const TRUSTEE_IS_DOMAIN = 3;
export const TRUSTEE_IS_ALIAS = 4;
export const TRUSTEE_IS_WELL_KNOWN_GROUP = 5;
export const TRUSTEE_IS_DELETED = 6;
export const TRUSTEE_IS_INVALID = 7;
export const TRUSTEE_IS_COMPUTER = 8;
export const TRUSTEE_IS_SID = 0;
export const TRUSTEE_IS_NAME = 1;
export const TRUSTEE_BAD_FORM = 2;
export const TRUSTEE_IS_OBJECTS_AND_SID = 3;
export const TRUSTEE_IS_OBJECTS_AND_NAME = 4;
export const NO_MULTIPLE_TRUSTEE = 0;
export const TRUSTEE_IS_IMPERSONATE = 1;
export const NOT_USED_ACCESS = 0;
export const GRANT_ACCESS = 1;
export const SET_ACCESS = 2;
export const DENY_ACCESS = 3;
export const REVOKE_ACCESS = 4;
export const SET_AUDIT_SUCCESS = 5;
export const SET_AUDIT_FAILURE = 6;
export const ProgressInvokeNever = 1;
export const ProgressInvokeEveryObject = 2;
export const ProgressInvokeOnError = 3;
export const ProgressCancelOperation = 4;
export const ProgressRetryOperation = 5;
export const ProgressInvokePrePostError = 6;
export const APT_None = 1;
export const APT_String = 2;
export const APT_Ulong = 3;
export const APT_Pointer = 4;
export const APT_Sid = 5;
export const APT_LogonId = 6;
export const APT_ObjectTypeList = 7;
export const APT_Luid = 8;
export const APT_Guid = 9;
export const APT_Time = 10;
export const APT_Int64 = 11;
export const APT_IpAddress = 12;
export const APT_LogonIdWithSid = 13;
export const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_NONE = 0;
export const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL = 1;
export const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_ADD = 2;
export const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_DELETE = 3;
export const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE = 4;
export const AUTHZ_SID_OPERATION_NONE = 0;
export const AUTHZ_SID_OPERATION_REPLACE_ALL = 1;
export const AUTHZ_SID_OPERATION_ADD = 2;
export const AUTHZ_SID_OPERATION_DELETE = 3;
export const AUTHZ_SID_OPERATION_REPLACE = 4;
export const AuthzContextInfoUserSid = 1;
export const AuthzContextInfoGroupsSids = 2;
export const AuthzContextInfoRestrictedSids = 3;
export const AuthzContextInfoPrivileges = 4;
export const AuthzContextInfoExpirationTime = 5;
export const AuthzContextInfoServerContext = 6;
export const AuthzContextInfoIdentifier = 7;
export const AuthzContextInfoSource = 8;
export const AuthzContextInfoAll = 9;
export const AuthzContextInfoAuthenticationId = 10;
export const AuthzContextInfoSecurityAttributes = 11;
export const AuthzContextInfoDeviceSids = 12;
export const AuthzContextInfoUserClaims = 13;
export const AuthzContextInfoDeviceClaims = 14;
export const AuthzContextInfoAppContainerSid = 15;
export const AuthzContextInfoCapabilitySids = 16;
export const AuthzAuditEventInfoFlags = 1;
export const AuthzAuditEventInfoOperationType = 2;
export const AuthzAuditEventInfoObjectType = 3;
export const AuthzAuditEventInfoObjectName = 4;
export const AuthzAuditEventInfoAdditionalInfo = 5;
export const AZ_PROP_NAME = 1;
export const AZ_PROP_DESCRIPTION = 2;
export const AZ_PROP_WRITABLE = 3;
export const AZ_PROP_APPLICATION_DATA = 4;
export const AZ_PROP_CHILD_CREATE = 5;
export const AZ_MAX_APPLICATION_NAME_LENGTH = 512;
export const AZ_MAX_OPERATION_NAME_LENGTH = 64;
export const AZ_MAX_TASK_NAME_LENGTH = 64;
export const AZ_MAX_SCOPE_NAME_LENGTH = 65536;
export const AZ_MAX_GROUP_NAME_LENGTH = 64;
export const AZ_MAX_ROLE_NAME_LENGTH = 64;
export const AZ_MAX_NAME_LENGTH = 65536;
export const AZ_MAX_DESCRIPTION_LENGTH = 1024;
export const AZ_MAX_APPLICATION_DATA_LENGTH = 4096;
export const AZ_SUBMIT_FLAG_ABORT = 1;
export const AZ_SUBMIT_FLAG_FLUSH = 2;
export const AZ_MAX_POLICY_URL_LENGTH = 65536;
export const AZ_AZSTORE_FLAG_CREATE = 1;
export const AZ_AZSTORE_FLAG_MANAGE_STORE_ONLY = 2;
export const AZ_AZSTORE_FLAG_BATCH_UPDATE = 4;
export const AZ_AZSTORE_FLAG_AUDIT_IS_CRITICAL = 8;
export const AZ_AZSTORE_FORCE_APPLICATION_CLOSE = 16;
export const AZ_AZSTORE_NT6_FUNCTION_LEVEL = 32;
export const AZ_AZSTORE_FLAG_MANAGE_ONLY_PASSIVE_SUBMIT = 32768;
export const AZ_PROP_AZSTORE_DOMAIN_TIMEOUT = 100;
export const AZ_AZSTORE_DEFAULT_DOMAIN_TIMEOUT = 15000;
export const AZ_PROP_AZSTORE_SCRIPT_ENGINE_TIMEOUT = 101;
export const AZ_AZSTORE_MIN_DOMAIN_TIMEOUT = 500;
export const AZ_AZSTORE_MIN_SCRIPT_ENGINE_TIMEOUT = 5000;
export const AZ_AZSTORE_DEFAULT_SCRIPT_ENGINE_TIMEOUT = 45000;
export const AZ_PROP_AZSTORE_MAX_SCRIPT_ENGINES = 102;
export const AZ_AZSTORE_DEFAULT_MAX_SCRIPT_ENGINES = 120;
export const AZ_PROP_AZSTORE_MAJOR_VERSION = 103;
export const AZ_PROP_AZSTORE_MINOR_VERSION = 104;
export const AZ_PROP_AZSTORE_TARGET_MACHINE = 105;
export const AZ_PROP_AZTORE_IS_ADAM_INSTANCE = 106;
export const AZ_PROP_OPERATION_ID = 200;
export const AZ_PROP_TASK_OPERATIONS = 300;
export const AZ_PROP_TASK_BIZRULE = 301;
export const AZ_PROP_TASK_BIZRULE_LANGUAGE = 302;
export const AZ_PROP_TASK_TASKS = 303;
export const AZ_PROP_TASK_BIZRULE_IMPORTED_PATH = 304;
export const AZ_PROP_TASK_IS_ROLE_DEFINITION = 305;
export const AZ_MAX_TASK_BIZRULE_LENGTH = 65536;
export const AZ_MAX_TASK_BIZRULE_LANGUAGE_LENGTH = 64;
export const AZ_MAX_TASK_BIZRULE_IMPORTED_PATH_LENGTH = 512;
export const AZ_MAX_BIZRULE_STRING = 65536;
export const AZ_PROP_GROUP_TYPE = 400;
export const AZ_GROUPTYPE_LDAP_QUERY = 1;
export const AZ_GROUPTYPE_BASIC = 2;
export const AZ_GROUPTYPE_BIZRULE = 3;
export const AZ_PROP_GROUP_APP_MEMBERS = 401;
export const AZ_PROP_GROUP_APP_NON_MEMBERS = 402;
export const AZ_PROP_GROUP_LDAP_QUERY = 403;
export const AZ_MAX_GROUP_LDAP_QUERY_LENGTH = 4096;
export const AZ_PROP_GROUP_MEMBERS = 404;
export const AZ_PROP_GROUP_NON_MEMBERS = 405;
export const AZ_PROP_GROUP_MEMBERS_NAME = 406;
export const AZ_PROP_GROUP_NON_MEMBERS_NAME = 407;
export const AZ_PROP_GROUP_BIZRULE = 408;
export const AZ_PROP_GROUP_BIZRULE_LANGUAGE = 409;
export const AZ_PROP_GROUP_BIZRULE_IMPORTED_PATH = 410;
export const AZ_MAX_GROUP_BIZRULE_LENGTH = 65536;
export const AZ_MAX_GROUP_BIZRULE_LANGUAGE_LENGTH = 64;
export const AZ_MAX_GROUP_BIZRULE_IMPORTED_PATH_LENGTH = 512;
export const AZ_PROP_ROLE_APP_MEMBERS = 500;
export const AZ_PROP_ROLE_MEMBERS = 501;
export const AZ_PROP_ROLE_OPERATIONS = 502;
export const AZ_PROP_ROLE_TASKS = 504;
export const AZ_PROP_ROLE_MEMBERS_NAME = 505;
export const AZ_PROP_SCOPE_BIZRULES_WRITABLE = 600;
export const AZ_PROP_SCOPE_CAN_BE_DELEGATED = 601;
export const AZ_PROP_CLIENT_CONTEXT_USER_DN = 700;
export const AZ_PROP_CLIENT_CONTEXT_USER_SAM_COMPAT = 701;
export const AZ_PROP_CLIENT_CONTEXT_USER_DISPLAY = 702;
export const AZ_PROP_CLIENT_CONTEXT_USER_GUID = 703;
export const AZ_PROP_CLIENT_CONTEXT_USER_CANONICAL = 704;
export const AZ_PROP_CLIENT_CONTEXT_USER_UPN = 705;
export const AZ_PROP_CLIENT_CONTEXT_USER_DNS_SAM_COMPAT = 707;
export const AZ_PROP_CLIENT_CONTEXT_ROLE_FOR_ACCESS_CHECK = 708;
export const AZ_PROP_CLIENT_CONTEXT_LDAP_QUERY_DN = 709;
export const AZ_PROP_APPLICATION_AUTHZ_INTERFACE_CLSID = 800;
export const AZ_PROP_APPLICATION_VERSION = 801;
export const AZ_MAX_APPLICATION_VERSION_LENGTH = 512;
export const AZ_PROP_APPLICATION_NAME = 802;
export const AZ_PROP_APPLICATION_BIZRULE_ENABLED = 803;
export const AZ_PROP_APPLY_STORE_SACL = 900;
export const AZ_PROP_GENERATE_AUDITS = 901;
export const AZ_PROP_POLICY_ADMINS = 902;
export const AZ_PROP_POLICY_READERS = 903;
export const AZ_PROP_DELEGATED_POLICY_USERS = 904;
export const AZ_PROP_POLICY_ADMINS_NAME = 905;
export const AZ_PROP_POLICY_READERS_NAME = 906;
export const AZ_PROP_DELEGATED_POLICY_USERS_NAME = 907;
export const AZ_CLIENT_CONTEXT_SKIP_GROUP = 1;
export const AZ_CLIENT_CONTEXT_SKIP_LDAP_QUERY = 1;
export const AZ_CLIENT_CONTEXT_GET_GROUP_RECURSIVE = 2;
export const AZ_CLIENT_CONTEXT_GET_GROUPS_STORE_LEVEL_ONLY = 2;
export const SI_PAGE_PERM = 0;
export const SI_PAGE_ADVPERM = 1;
export const SI_PAGE_AUDIT = 2;
export const SI_PAGE_OWNER = 3;
export const SI_PAGE_EFFECTIVE = 4;
export const SI_PAGE_TAKEOWNERSHIP = 5;
export const SI_PAGE_SHARE = 6;
export const SI_SHOW_DEFAULT = 0;
export const SI_SHOW_PERM_ACTIVATED = 1;
export const SI_SHOW_AUDIT_ACTIVATED = 2;
export const SI_SHOW_OWNER_ACTIVATED = 3;
export const SI_SHOW_EFFECTIVE_ACTIVATED = 4;
export const SI_SHOW_SHARE_ACTIVATED = 5;
export const SI_SHOW_CENTRAL_POLICY_ACTIVATED = 6;
export const OCSP_SF_SILENT = 1;
export const OCSP_SF_USE_CACERT = 2;
export const OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL = 4;
export const OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA = 8;
export const OCSP_SF_AUTODISCOVER_SIGNINGCERT = 16;
export const OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT = 32;
export const OCSP_SF_RESPONDER_ID_KEYHASH = 64;
export const OCSP_SF_RESPONDER_ID_NAME = 128;
export const OCSP_SF_ALLOW_NONCE_EXTENSION = 256;
export const OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT = 512;
export const OCSP_RF_REJECT_SIGNED_REQUESTS = 1;
export const X509AuthNone = 0;
export const X509AuthAnonymous = 1;
export const X509AuthKerberos = 2;
export const X509AuthUsername = 4;
export const X509AuthCertificate = 8;
export const SCEPMessageUnknown = `-1`;
export const SCEPMessageCertResponse = 3;
export const SCEPMessagePKCSRequest = 19;
export const SCEPMessageGetCertInitial = 20;
export const SCEPMessageGetCert = 21;
export const SCEPMessageGetCRL = 22;
export const SCEPMessageClaimChallengeAnswer = 41;
export const SCEPDispositionUnknown = `-1`;
export const SCEPDispositionSuccess = 0;
export const SCEPDispositionFailure = 2;
export const SCEPDispositionPending = 3;
export const SCEPDispositionPendingChallenge = 11;
export const SCEPFailUnknown = `-1`;
export const SCEPFailBadAlgorithm = 0;
export const SCEPFailBadMessageCheck = 1;
export const SCEPFailBadRequest = 2;
export const SCEPFailBadTime = 3;
export const SCEPFailBadCertId = 4;
export const XCN_OID_NONE = 0;
export const XCN_OID_RSA = 1;
export const XCN_OID_PKCS = 2;
export const XCN_OID_RSA_HASH = 3;
export const XCN_OID_RSA_ENCRYPT = 4;
export const XCN_OID_PKCS_1 = 5;
export const XCN_OID_PKCS_2 = 6;
export const XCN_OID_PKCS_3 = 7;
export const XCN_OID_PKCS_4 = 8;
export const XCN_OID_PKCS_5 = 9;
export const XCN_OID_PKCS_6 = 10;
export const XCN_OID_PKCS_7 = 11;
export const XCN_OID_PKCS_8 = 12;
export const XCN_OID_PKCS_9 = 13;
export const XCN_OID_PKCS_10 = 14;
export const XCN_OID_PKCS_12 = 15;
export const XCN_OID_RSA_RSA = 16;
export const XCN_OID_RSA_MD2RSA = 17;
export const XCN_OID_RSA_MD4RSA = 18;
export const XCN_OID_RSA_MD5RSA = 19;
export const XCN_OID_RSA_SHA1RSA = 20;
export const XCN_OID_RSA_SETOAEP_RSA = 21;
export const XCN_OID_RSA_DH = 22;
export const XCN_OID_RSA_data = 23;
export const XCN_OID_RSA_signedData = 24;
export const XCN_OID_RSA_envelopedData = 25;
export const XCN_OID_RSA_signEnvData = 26;
export const XCN_OID_RSA_digestedData = 27;
export const XCN_OID_RSA_hashedData = 28;
export const XCN_OID_RSA_encryptedData = 29;
export const XCN_OID_RSA_emailAddr = 30;
export const XCN_OID_RSA_unstructName = 31;
export const XCN_OID_RSA_contentType = 32;
export const XCN_OID_RSA_messageDigest = 33;
export const XCN_OID_RSA_signingTime = 34;
export const XCN_OID_RSA_counterSign = 35;
export const XCN_OID_RSA_challengePwd = 36;
export const XCN_OID_RSA_unstructAddr = 37;
export const XCN_OID_RSA_extCertAttrs = 38;
export const XCN_OID_RSA_certExtensions = 39;
export const XCN_OID_RSA_SMIMECapabilities = 40;
export const XCN_OID_RSA_preferSignedData = 41;
export const XCN_OID_RSA_SMIMEalg = 42;
export const XCN_OID_RSA_SMIMEalgESDH = 43;
export const XCN_OID_RSA_SMIMEalgCMS3DESwrap = 44;
export const XCN_OID_RSA_SMIMEalgCMSRC2wrap = 45;
export const XCN_OID_RSA_MD2 = 46;
export const XCN_OID_RSA_MD4 = 47;
export const XCN_OID_RSA_MD5 = 48;
export const XCN_OID_RSA_RC2CBC = 49;
export const XCN_OID_RSA_RC4 = 50;
export const XCN_OID_RSA_DES_EDE3_CBC = 51;
export const XCN_OID_RSA_RC5_CBCPad = 52;
export const XCN_OID_ANSI_X942 = 53;
export const XCN_OID_ANSI_X942_DH = 54;
export const XCN_OID_X957 = 55;
export const XCN_OID_X957_DSA = 56;
export const XCN_OID_X957_SHA1DSA = 57;
export const XCN_OID_DS = 58;
export const XCN_OID_DSALG = 59;
export const XCN_OID_DSALG_CRPT = 60;
export const XCN_OID_DSALG_HASH = 61;
export const XCN_OID_DSALG_SIGN = 62;
export const XCN_OID_DSALG_RSA = 63;
export const XCN_OID_OIW = 64;
export const XCN_OID_OIWSEC = 65;
export const XCN_OID_OIWSEC_md4RSA = 66;
export const XCN_OID_OIWSEC_md5RSA = 67;
export const XCN_OID_OIWSEC_md4RSA2 = 68;
export const XCN_OID_OIWSEC_desECB = 69;
export const XCN_OID_OIWSEC_desCBC = 70;
export const XCN_OID_OIWSEC_desOFB = 71;
export const XCN_OID_OIWSEC_desCFB = 72;
export const XCN_OID_OIWSEC_desMAC = 73;
export const XCN_OID_OIWSEC_rsaSign = 74;
export const XCN_OID_OIWSEC_dsa = 75;
export const XCN_OID_OIWSEC_shaDSA = 76;
export const XCN_OID_OIWSEC_mdc2RSA = 77;
export const XCN_OID_OIWSEC_shaRSA = 78;
export const XCN_OID_OIWSEC_dhCommMod = 79;
export const XCN_OID_OIWSEC_desEDE = 80;
export const XCN_OID_OIWSEC_sha = 81;
export const XCN_OID_OIWSEC_mdc2 = 82;
export const XCN_OID_OIWSEC_dsaComm = 83;
export const XCN_OID_OIWSEC_dsaCommSHA = 84;
export const XCN_OID_OIWSEC_rsaXchg = 85;
export const XCN_OID_OIWSEC_keyHashSeal = 86;
export const XCN_OID_OIWSEC_md2RSASign = 87;
export const XCN_OID_OIWSEC_md5RSASign = 88;
export const XCN_OID_OIWSEC_sha1 = 89;
export const XCN_OID_OIWSEC_dsaSHA1 = 90;
export const XCN_OID_OIWSEC_dsaCommSHA1 = 91;
export const XCN_OID_OIWSEC_sha1RSASign = 92;
export const XCN_OID_OIWDIR = 93;
export const XCN_OID_OIWDIR_CRPT = 94;
export const XCN_OID_OIWDIR_HASH = 95;
export const XCN_OID_OIWDIR_SIGN = 96;
export const XCN_OID_OIWDIR_md2 = 97;
export const XCN_OID_OIWDIR_md2RSA = 98;
export const XCN_OID_INFOSEC = 99;
export const XCN_OID_INFOSEC_sdnsSignature = 100;
export const XCN_OID_INFOSEC_mosaicSignature = 101;
export const XCN_OID_INFOSEC_sdnsConfidentiality = 102;
export const XCN_OID_INFOSEC_mosaicConfidentiality = 103;
export const XCN_OID_INFOSEC_sdnsIntegrity = 104;
export const XCN_OID_INFOSEC_mosaicIntegrity = 105;
export const XCN_OID_INFOSEC_sdnsTokenProtection = 106;
export const XCN_OID_INFOSEC_mosaicTokenProtection = 107;
export const XCN_OID_INFOSEC_sdnsKeyManagement = 108;
export const XCN_OID_INFOSEC_mosaicKeyManagement = 109;
export const XCN_OID_INFOSEC_sdnsKMandSig = 110;
export const XCN_OID_INFOSEC_mosaicKMandSig = 111;
export const XCN_OID_INFOSEC_SuiteASignature = 112;
export const XCN_OID_INFOSEC_SuiteAConfidentiality = 113;
export const XCN_OID_INFOSEC_SuiteAIntegrity = 114;
export const XCN_OID_INFOSEC_SuiteATokenProtection = 115;
export const XCN_OID_INFOSEC_SuiteAKeyManagement = 116;
export const XCN_OID_INFOSEC_SuiteAKMandSig = 117;
export const XCN_OID_INFOSEC_mosaicUpdatedSig = 118;
export const XCN_OID_INFOSEC_mosaicKMandUpdSig = 119;
export const XCN_OID_INFOSEC_mosaicUpdatedInteg = 120;
export const XCN_OID_COMMON_NAME = 121;
export const XCN_OID_SUR_NAME = 122;
export const XCN_OID_DEVICE_SERIAL_NUMBER = 123;
export const XCN_OID_COUNTRY_NAME = 124;
export const XCN_OID_LOCALITY_NAME = 125;
export const XCN_OID_STATE_OR_PROVINCE_NAME = 126;
export const XCN_OID_STREET_ADDRESS = 127;
export const XCN_OID_ORGANIZATION_NAME = 128;
export const XCN_OID_ORGANIZATIONAL_UNIT_NAME = 129;
export const XCN_OID_TITLE = 130;
export const XCN_OID_DESCRIPTION = 131;
export const XCN_OID_SEARCH_GUIDE = 132;
export const XCN_OID_BUSINESS_CATEGORY = 133;
export const XCN_OID_POSTAL_ADDRESS = 134;
export const XCN_OID_POSTAL_CODE = 135;
export const XCN_OID_POST_OFFICE_BOX = 136;
export const XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME = 137;
export const XCN_OID_TELEPHONE_NUMBER = 138;
export const XCN_OID_TELEX_NUMBER = 139;
export const XCN_OID_TELETEXT_TERMINAL_IDENTIFIER = 140;
export const XCN_OID_FACSIMILE_TELEPHONE_NUMBER = 141;
export const XCN_OID_X21_ADDRESS = 142;
export const XCN_OID_INTERNATIONAL_ISDN_NUMBER = 143;
export const XCN_OID_REGISTERED_ADDRESS = 144;
export const XCN_OID_DESTINATION_INDICATOR = 145;
export const XCN_OID_PREFERRED_DELIVERY_METHOD = 146;
export const XCN_OID_PRESENTATION_ADDRESS = 147;
export const XCN_OID_SUPPORTED_APPLICATION_CONTEXT = 148;
export const XCN_OID_MEMBER = 149;
export const XCN_OID_OWNER = 150;
export const XCN_OID_ROLE_OCCUPANT = 151;
export const XCN_OID_SEE_ALSO = 152;
export const XCN_OID_USER_PASSWORD = 153;
export const XCN_OID_USER_CERTIFICATE = 154;
export const XCN_OID_CA_CERTIFICATE = 155;
export const XCN_OID_AUTHORITY_REVOCATION_LIST = 156;
export const XCN_OID_CERTIFICATE_REVOCATION_LIST = 157;
export const XCN_OID_CROSS_CERTIFICATE_PAIR = 158;
export const XCN_OID_GIVEN_NAME = 159;
export const XCN_OID_INITIALS = 160;
export const XCN_OID_DN_QUALIFIER = 161;
export const XCN_OID_DOMAIN_COMPONENT = 162;
export const XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR = 163;
export const XCN_OID_PKCS_12_LOCAL_KEY_ID = 164;
export const XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR = 165;
export const XCN_OID_LOCAL_MACHINE_KEYSET = 166;
export const XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES = 167;
export const XCN_OID_KEYID_RDN = 168;
export const XCN_OID_AUTHORITY_KEY_IDENTIFIER = 169;
export const XCN_OID_KEY_ATTRIBUTES = 170;
export const XCN_OID_CERT_POLICIES_95 = 171;
export const XCN_OID_KEY_USAGE_RESTRICTION = 172;
export const XCN_OID_SUBJECT_ALT_NAME = 173;
export const XCN_OID_ISSUER_ALT_NAME = 174;
export const XCN_OID_BASIC_CONSTRAINTS = 175;
export const XCN_OID_KEY_USAGE = 176;
export const XCN_OID_PRIVATEKEY_USAGE_PERIOD = 177;
export const XCN_OID_BASIC_CONSTRAINTS2 = 178;
export const XCN_OID_CERT_POLICIES = 179;
export const XCN_OID_ANY_CERT_POLICY = 180;
export const XCN_OID_AUTHORITY_KEY_IDENTIFIER2 = 181;
export const XCN_OID_SUBJECT_KEY_IDENTIFIER = 182;
export const XCN_OID_SUBJECT_ALT_NAME2 = 183;
export const XCN_OID_ISSUER_ALT_NAME2 = 184;
export const XCN_OID_CRL_REASON_CODE = 185;
export const XCN_OID_REASON_CODE_HOLD = 186;
export const XCN_OID_CRL_DIST_POINTS = 187;
export const XCN_OID_ENHANCED_KEY_USAGE = 188;
export const XCN_OID_CRL_NUMBER = 189;
export const XCN_OID_DELTA_CRL_INDICATOR = 190;
export const XCN_OID_ISSUING_DIST_POINT = 191;
export const XCN_OID_FRESHEST_CRL = 192;
export const XCN_OID_NAME_CONSTRAINTS = 193;
export const XCN_OID_POLICY_MAPPINGS = 194;
export const XCN_OID_LEGACY_POLICY_MAPPINGS = 195;
export const XCN_OID_POLICY_CONSTRAINTS = 196;
export const XCN_OID_RENEWAL_CERTIFICATE = 197;
export const XCN_OID_ENROLLMENT_NAME_VALUE_PAIR = 198;
export const XCN_OID_ENROLLMENT_CSP_PROVIDER = 199;
export const XCN_OID_OS_VERSION = 200;
export const XCN_OID_ENROLLMENT_AGENT = 201;
export const XCN_OID_PKIX = 202;
export const XCN_OID_PKIX_PE = 203;
export const XCN_OID_AUTHORITY_INFO_ACCESS = 204;
export const XCN_OID_BIOMETRIC_EXT = 205;
export const XCN_OID_LOGOTYPE_EXT = 206;
export const XCN_OID_CERT_EXTENSIONS = 207;
export const XCN_OID_NEXT_UPDATE_LOCATION = 208;
export const XCN_OID_REMOVE_CERTIFICATE = 209;
export const XCN_OID_CROSS_CERT_DIST_POINTS = 210;
export const XCN_OID_CTL = 211;
export const XCN_OID_SORTED_CTL = 212;
export const XCN_OID_SERIALIZED = 213;
export const XCN_OID_NT_PRINCIPAL_NAME = 214;
export const XCN_OID_PRODUCT_UPDATE = 215;
export const XCN_OID_ANY_APPLICATION_POLICY = 216;
export const XCN_OID_AUTO_ENROLL_CTL_USAGE = 217;
export const XCN_OID_ENROLL_CERTTYPE_EXTENSION = 218;
export const XCN_OID_CERT_MANIFOLD = 219;
export const XCN_OID_CERTSRV_CA_VERSION = 220;
export const XCN_OID_CERTSRV_PREVIOUS_CERT_HASH = 221;
export const XCN_OID_CRL_VIRTUAL_BASE = 222;
export const XCN_OID_CRL_NEXT_PUBLISH = 223;
export const XCN_OID_KP_CA_EXCHANGE = 224;
export const XCN_OID_KP_KEY_RECOVERY_AGENT = 225;
export const XCN_OID_CERTIFICATE_TEMPLATE = 226;
export const XCN_OID_ENTERPRISE_OID_ROOT = 227;
export const XCN_OID_RDN_DUMMY_SIGNER = 228;
export const XCN_OID_APPLICATION_CERT_POLICIES = 229;
export const XCN_OID_APPLICATION_POLICY_MAPPINGS = 230;
export const XCN_OID_APPLICATION_POLICY_CONSTRAINTS = 231;
export const XCN_OID_ARCHIVED_KEY_ATTR = 232;
export const XCN_OID_CRL_SELF_CDP = 233;
export const XCN_OID_REQUIRE_CERT_CHAIN_POLICY = 234;
export const XCN_OID_ARCHIVED_KEY_CERT_HASH = 235;
export const XCN_OID_ISSUED_CERT_HASH = 236;
export const XCN_OID_DS_EMAIL_REPLICATION = 237;
export const XCN_OID_REQUEST_CLIENT_INFO = 238;
export const XCN_OID_ENCRYPTED_KEY_HASH = 239;
export const XCN_OID_CERTSRV_CROSSCA_VERSION = 240;
export const XCN_OID_NTDS_REPLICATION = 241;
export const XCN_OID_SUBJECT_DIR_ATTRS = 242;
export const XCN_OID_PKIX_KP = 243;
export const XCN_OID_PKIX_KP_SERVER_AUTH = 244;
export const XCN_OID_PKIX_KP_CLIENT_AUTH = 245;
export const XCN_OID_PKIX_KP_CODE_SIGNING = 246;
export const XCN_OID_PKIX_KP_EMAIL_PROTECTION = 247;
export const XCN_OID_PKIX_KP_IPSEC_END_SYSTEM = 248;
export const XCN_OID_PKIX_KP_IPSEC_TUNNEL = 249;
export const XCN_OID_PKIX_KP_IPSEC_USER = 250;
export const XCN_OID_PKIX_KP_TIMESTAMP_SIGNING = 251;
export const XCN_OID_PKIX_KP_OCSP_SIGNING = 252;
export const XCN_OID_PKIX_OCSP_NOCHECK = 253;
export const XCN_OID_IPSEC_KP_IKE_INTERMEDIATE = 254;
export const XCN_OID_KP_CTL_USAGE_SIGNING = 255;
export const XCN_OID_KP_TIME_STAMP_SIGNING = 256;
export const XCN_OID_SERVER_GATED_CRYPTO = 257;
export const XCN_OID_SGC_NETSCAPE = 258;
export const XCN_OID_KP_EFS = 259;
export const XCN_OID_EFS_RECOVERY = 260;
export const XCN_OID_WHQL_CRYPTO = 261;
export const XCN_OID_NT5_CRYPTO = 262;
export const XCN_OID_OEM_WHQL_CRYPTO = 263;
export const XCN_OID_EMBEDDED_NT_CRYPTO = 264;
export const XCN_OID_ROOT_LIST_SIGNER = 265;
export const XCN_OID_KP_QUALIFIED_SUBORDINATION = 266;
export const XCN_OID_KP_KEY_RECOVERY = 267;
export const XCN_OID_KP_DOCUMENT_SIGNING = 268;
export const XCN_OID_KP_LIFETIME_SIGNING = 269;
export const XCN_OID_KP_MOBILE_DEVICE_SOFTWARE = 270;
export const XCN_OID_KP_SMART_DISPLAY = 271;
export const XCN_OID_KP_CSP_SIGNATURE = 272;
export const XCN_OID_DRM = 273;
export const XCN_OID_DRM_INDIVIDUALIZATION = 274;
export const XCN_OID_LICENSES = 275;
export const XCN_OID_LICENSE_SERVER = 276;
export const XCN_OID_KP_SMARTCARD_LOGON = 277;
export const XCN_OID_YESNO_TRUST_ATTR = 278;
export const XCN_OID_PKIX_POLICY_QUALIFIER_CPS = 279;
export const XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE = 280;
export const XCN_OID_CERT_POLICIES_95_QUALIFIER1 = 281;
export const XCN_OID_PKIX_ACC_DESCR = 282;
export const XCN_OID_PKIX_OCSP = 283;
export const XCN_OID_PKIX_CA_ISSUERS = 284;
export const XCN_OID_VERISIGN_PRIVATE_6_9 = 285;
export const XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH = 286;
export const XCN_OID_VERISIGN_BITSTRING_6_13 = 287;
export const XCN_OID_VERISIGN_ISS_STRONG_CRYPTO = 288;
export const XCN_OID_NETSCAPE = 289;
export const XCN_OID_NETSCAPE_CERT_EXTENSION = 290;
export const XCN_OID_NETSCAPE_CERT_TYPE = 291;
export const XCN_OID_NETSCAPE_BASE_URL = 292;
export const XCN_OID_NETSCAPE_REVOCATION_URL = 293;
export const XCN_OID_NETSCAPE_CA_REVOCATION_URL = 294;
export const XCN_OID_NETSCAPE_CERT_RENEWAL_URL = 295;
export const XCN_OID_NETSCAPE_CA_POLICY_URL = 296;
export const XCN_OID_NETSCAPE_SSL_SERVER_NAME = 297;
export const XCN_OID_NETSCAPE_COMMENT = 298;
export const XCN_OID_NETSCAPE_DATA_TYPE = 299;
export const XCN_OID_NETSCAPE_CERT_SEQUENCE = 300;
export const XCN_OID_CT_PKI_DATA = 301;
export const XCN_OID_CT_PKI_RESPONSE = 302;
export const XCN_OID_PKIX_NO_SIGNATURE = 303;
export const XCN_OID_CMC = 304;
export const XCN_OID_CMC_STATUS_INFO = 305;
export const XCN_OID_CMC_IDENTIFICATION = 306;
export const XCN_OID_CMC_IDENTITY_PROOF = 307;
export const XCN_OID_CMC_DATA_RETURN = 308;
export const XCN_OID_CMC_TRANSACTION_ID = 309;
export const XCN_OID_CMC_SENDER_NONCE = 310;
export const XCN_OID_CMC_RECIPIENT_NONCE = 311;
export const XCN_OID_CMC_ADD_EXTENSIONS = 312;
export const XCN_OID_CMC_ENCRYPTED_POP = 313;
export const XCN_OID_CMC_DECRYPTED_POP = 314;
export const XCN_OID_CMC_LRA_POP_WITNESS = 315;
export const XCN_OID_CMC_GET_CERT = 316;
export const XCN_OID_CMC_GET_CRL = 317;
export const XCN_OID_CMC_REVOKE_REQUEST = 318;
export const XCN_OID_CMC_REG_INFO = 319;
export const XCN_OID_CMC_RESPONSE_INFO = 320;
export const XCN_OID_CMC_QUERY_PENDING = 321;
export const XCN_OID_CMC_ID_POP_LINK_RANDOM = 322;
export const XCN_OID_CMC_ID_POP_LINK_WITNESS = 323;
export const XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE = 324;
export const XCN_OID_CMC_ADD_ATTRIBUTES = 325;
export const XCN_OID_LOYALTY_OTHER_LOGOTYPE = 326;
export const XCN_OID_BACKGROUND_OTHER_LOGOTYPE = 327;
export const XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE = 328;
export const XCN_OID_PKCS_7_DATA = 329;
export const XCN_OID_PKCS_7_SIGNED = 330;
export const XCN_OID_PKCS_7_ENVELOPED = 331;
export const XCN_OID_PKCS_7_SIGNEDANDENVELOPED = 332;
export const XCN_OID_PKCS_7_DIGESTED = 333;
export const XCN_OID_PKCS_7_ENCRYPTED = 334;
export const XCN_OID_PKCS_9_CONTENT_TYPE = 335;
export const XCN_OID_PKCS_9_MESSAGE_DIGEST = 336;
export const XCN_OID_CERT_PROP_ID_PREFIX = 337;
export const XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID = 338;
export const XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 339;
export const XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 340;
export const XCN_OID_CERT_MD5_HASH_PROP_ID = 341;
export const XCN_OID_RSA_SHA256RSA = 342;
export const XCN_OID_RSA_SHA384RSA = 343;
export const XCN_OID_RSA_SHA512RSA = 344;
export const XCN_OID_NIST_sha256 = 345;
export const XCN_OID_NIST_sha384 = 346;
export const XCN_OID_NIST_sha512 = 347;
export const XCN_OID_RSA_MGF1 = 348;
export const XCN_OID_ECC_PUBLIC_KEY = 349;
export const XCN_OID_ECDSA_SHA1 = 350;
export const XCN_OID_ECDSA_SPECIFIED = 351;
export const XCN_OID_ANY_ENHANCED_KEY_USAGE = 352;
export const XCN_OID_RSA_SSA_PSS = 353;
export const XCN_OID_ATTR_SUPPORTED_ALGORITHMS = 355;
export const XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS = 356;
export const XCN_OID_ATTR_TPM_SPECIFICATION = 357;
export const XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID = 358;
export const XCN_OID_CERT_SIGNATURE_HASH_PROP_ID = 359;
export const XCN_OID_CERT_STRONG_KEY_OS_1 = 360;
export const XCN_OID_CERT_STRONG_KEY_OS_CURRENT = 361;
export const XCN_OID_CERT_STRONG_KEY_OS_PREFIX = 362;
export const XCN_OID_CERT_STRONG_SIGN_OS_1 = 363;
export const XCN_OID_CERT_STRONG_SIGN_OS_CURRENT = 364;
export const XCN_OID_CERT_STRONG_SIGN_OS_PREFIX = 365;
export const XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF = 366;
export const XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF = 367;
export const XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF = 368;
export const XCN_OID_DISALLOWED_HASH = 369;
export const XCN_OID_DISALLOWED_LIST = 370;
export const XCN_OID_ECC_CURVE_P256 = 371;
export const XCN_OID_ECC_CURVE_P384 = 372;
export const XCN_OID_ECC_CURVE_P521 = 373;
export const XCN_OID_ECDSA_SHA256 = 374;
export const XCN_OID_ECDSA_SHA384 = 375;
export const XCN_OID_ECDSA_SHA512 = 376;
export const XCN_OID_ENROLL_CAXCHGCERT_HASH = 377;
export const XCN_OID_ENROLL_EK_INFO = 378;
export const XCN_OID_ENROLL_EKPUB_CHALLENGE = 379;
export const XCN_OID_ENROLL_EKVERIFYCERT = 380;
export const XCN_OID_ENROLL_EKVERIFYCREDS = 381;
export const XCN_OID_ENROLL_EKVERIFYKEY = 382;
export const XCN_OID_EV_RDN_COUNTRY = 383;
export const XCN_OID_EV_RDN_LOCALE = 384;
export const XCN_OID_EV_RDN_STATE_OR_PROVINCE = 385;
export const XCN_OID_INHIBIT_ANY_POLICY = 386;
export const XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS = 387;
export const XCN_OID_KP_KERNEL_MODE_CODE_SIGNING = 388;
export const XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING = 389;
export const XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING = 390;
export const XCN_OID_KP_TPM_AIK_CERTIFICATE = 391;
export const XCN_OID_KP_TPM_EK_CERTIFICATE = 392;
export const XCN_OID_KP_TPM_PLATFORM_CERTIFICATE = 393;
export const XCN_OID_NIST_AES128_CBC = 394;
export const XCN_OID_NIST_AES128_WRAP = 395;
export const XCN_OID_NIST_AES192_CBC = 396;
export const XCN_OID_NIST_AES192_WRAP = 397;
export const XCN_OID_NIST_AES256_CBC = 398;
export const XCN_OID_NIST_AES256_WRAP = 399;
export const XCN_OID_PKCS_12_PbeIds = 400;
export const XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2 = 401;
export const XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4 = 402;
export const XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES = 403;
export const XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES = 404;
export const XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2 = 405;
export const XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4 = 406;
export const XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID = 407;
export const XCN_OID_PKINIT_KP_KDC = 408;
export const XCN_OID_PKIX_CA_REPOSITORY = 409;
export const XCN_OID_PKIX_OCSP_NONCE = 410;
export const XCN_OID_PKIX_TIME_STAMPING = 411;
export const XCN_OID_QC_EU_COMPLIANCE = 412;
export const XCN_OID_QC_SSCD = 413;
export const XCN_OID_QC_STATEMENTS_EXT = 414;
export const XCN_OID_RDN_TPM_MANUFACTURER = 415;
export const XCN_OID_RDN_TPM_MODEL = 416;
export const XCN_OID_RDN_TPM_VERSION = 417;
export const XCN_OID_REVOKED_LIST_SIGNER = 418;
export const XCN_OID_RFC3161_counterSign = 419;
export const XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION = 420;
export const XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION = 421;
export const XCN_OID_ROOT_PROGRAM_FLAGS = 422;
export const XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL = 423;
export const XCN_OID_RSA_PSPECIFIED = 424;
export const XCN_OID_RSAES_OAEP = 425;
export const XCN_OID_SUBJECT_INFO_ACCESS = 426;
export const XCN_OID_TIMESTAMP_TOKEN = 427;
export const XCN_OID_ENROLL_SCEP_ERROR = 428;
export const XCN_OIDVerisign_MessageType = 429;
export const XCN_OIDVerisign_PkiStatus = 430;
export const XCN_OIDVerisign_FailInfo = 431;
export const XCN_OIDVerisign_SenderNonce = 432;
export const XCN_OIDVerisign_RecipientNonce = 433;
export const XCN_OIDVerisign_TransactionID = 434;
export const XCN_OID_ENROLL_ATTESTATION_CHALLENGE = 435;
export const XCN_OID_ENROLL_ATTESTATION_STATEMENT = 436;
export const XCN_OID_ENROLL_ENCRYPTION_ALGORITHM = 437;
export const XCN_OID_ENROLL_KSP_NAME = 438;
export const LevelUnsafe = 0;
export const LevelSafe = 1;
export const XCN_CRYPT_STRING_BASE64HEADER = 0;
export const XCN_CRYPT_STRING_BASE64 = 1;
export const XCN_CRYPT_STRING_BINARY = 2;
export const XCN_CRYPT_STRING_BASE64REQUESTHEADER = 3;
export const XCN_CRYPT_STRING_HEX = 4;
export const XCN_CRYPT_STRING_HEXASCII = 5;
export const XCN_CRYPT_STRING_BASE64_ANY = 6;
export const XCN_CRYPT_STRING_ANY = 7;
export const XCN_CRYPT_STRING_HEX_ANY = 8;
export const XCN_CRYPT_STRING_BASE64X509CRLHEADER = 9;
export const XCN_CRYPT_STRING_HEXADDR = 10;
export const XCN_CRYPT_STRING_HEXASCIIADDR = 11;
export const XCN_CRYPT_STRING_HEXRAW = 12;
export const XCN_CRYPT_STRING_BASE64URI = 13;
export const XCN_CRYPT_STRING_ENCODEMASK = 255;
export const XCN_CRYPT_STRING_CHAIN = 256;
export const XCN_CRYPT_STRING_TEXT = 512;
export const XCN_CRYPT_STRING_PERCENTESCAPE = 134217728;
export const XCN_CRYPT_STRING_HASHDATA = 268435456;
export const XCN_CRYPT_STRING_STRICT = 536870912;
export const XCN_CRYPT_STRING_NOCRLF = 1073741824;
export const XCN_CRYPT_STRING_NOCR = `-2147483648`;
export const PFXExportEEOnly = 0;
export const PFXExportChainNoRoot = 1;
export const PFXExportChainWithRoot = 2;
export const XCN_CRYPT_ANY_GROUP_ID = 0;
export const XCN_CRYPT_HASH_ALG_OID_GROUP_ID = 1;
export const XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2;
export const XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3;
export const XCN_CRYPT_SIGN_ALG_OID_GROUP_ID = 4;
export const XCN_CRYPT_RDN_ATTR_OID_GROUP_ID = 5;
export const XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6;
export const XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7;
export const XCN_CRYPT_POLICY_OID_GROUP_ID = 8;
export const XCN_CRYPT_TEMPLATE_OID_GROUP_ID = 9;
export const XCN_CRYPT_KDF_OID_GROUP_ID = 10;
export const XCN_CRYPT_LAST_OID_GROUP_ID = 10;
export const XCN_CRYPT_FIRST_ALG_OID_GROUP_ID = 1;
export const XCN_CRYPT_LAST_ALG_OID_GROUP_ID = 4;
export const XCN_CRYPT_GROUP_ID_MASK = 65535;
export const XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG = 1073741824;
export const XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG = `-2147483648`;
export const XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920;
export const XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16;
export const XCN_CRYPT_KEY_LENGTH_MASK = 268369920;
export const XCN_CRYPT_OID_INFO_PUBKEY_ANY = 0;
export const XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = `-2147483648`;
export const XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 1073741824;
export const AlgorithmFlagsNone = 0;
export const AlgorithmFlagsWrap = 1;
export const XCN_CERT_NAME_STR_NONE = 0;
export const XCN_CERT_SIMPLE_NAME_STR = 1;
export const XCN_CERT_OID_NAME_STR = 2;
export const XCN_CERT_X500_NAME_STR = 3;
export const XCN_CERT_XML_NAME_STR = 4;
export const XCN_CERT_NAME_STR_SEMICOLON_FLAG = 1073741824;
export const XCN_CERT_NAME_STR_NO_PLUS_FLAG = 536870912;
export const XCN_CERT_NAME_STR_NO_QUOTING_FLAG = 268435456;
export const XCN_CERT_NAME_STR_CRLF_FLAG = 134217728;
export const XCN_CERT_NAME_STR_COMMA_FLAG = 67108864;
export const XCN_CERT_NAME_STR_REVERSE_FLAG = 33554432;
export const XCN_CERT_NAME_STR_FORWARD_FLAG = 16777216;
export const XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS = 1275068416;
export const XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536;
export const XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072;
export const XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144;
export const XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288;
export const XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576;
export const XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152;
export const XCN_CERT_NAME_STR_DS_ESCAPED = 8388608;
export const ContextNone = 0;
export const ContextUser = 1;
export const ContextMachine = 2;
export const ContextAdministratorForceMachine = 3;
export const Enrolled = 1;
export const EnrollPended = 2;
export const EnrollUIDeferredEnrollmentRequired = 4;
export const EnrollError = 16;
export const EnrollUnknown = 32;
export const EnrollSkipped = 64;
export const EnrollDenied = 256;
export const SelectedNo = 0;
export const SelectedYes = 1;
export const DisplayNo = 0;
export const DisplayYes = 1;
export const XCN_PROV_NONE = 0;
export const XCN_PROV_RSA_FULL = 1;
export const XCN_PROV_RSA_SIG = 2;
export const XCN_PROV_DSS = 3;
export const XCN_PROV_FORTEZZA = 4;
export const XCN_PROV_MS_EXCHANGE = 5;
export const XCN_PROV_SSL = 6;
export const XCN_PROV_RSA_SCHANNEL = 12;
export const XCN_PROV_DSS_DH = 13;
export const XCN_PROV_EC_ECDSA_SIG = 14;
export const XCN_PROV_EC_ECNRA_SIG = 15;
export const XCN_PROV_EC_ECDSA_FULL = 16;
export const XCN_PROV_EC_ECNRA_FULL = 17;
export const XCN_PROV_DH_SCHANNEL = 18;
export const XCN_PROV_SPYRUS_LYNKS = 20;
export const XCN_PROV_RNG = 21;
export const XCN_PROV_INTEL_SEC = 22;
export const XCN_PROV_REPLACE_OWF = 23;
export const XCN_PROV_RSA_AES = 24;
export const XCN_BCRYPT_UNKNOWN_INTERFACE = 0;
export const XCN_BCRYPT_CIPHER_INTERFACE = 1;
export const XCN_BCRYPT_HASH_INTERFACE = 2;
export const XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3;
export const XCN_BCRYPT_SIGNATURE_INTERFACE = 5;
export const XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE = 4;
export const XCN_BCRYPT_RNG_INTERFACE = 6;
export const XCN_BCRYPT_KEY_DERIVATION_INTERFACE = 7;
export const XCN_NCRYPT_NO_OPERATION = 0;
export const XCN_NCRYPT_CIPHER_OPERATION = 1;
export const XCN_NCRYPT_HASH_OPERATION = 2;
export const XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4;
export const XCN_NCRYPT_SECRET_AGREEMENT_OPERATION = 8;
export const XCN_NCRYPT_SIGNATURE_OPERATION = 16;
export const XCN_NCRYPT_RNG_OPERATION = 32;
export const XCN_NCRYPT_KEY_DERIVATION_OPERATION = 64;
export const XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION = 28;
export const XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION = 2097152;
export const XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION = 4194304;
export const XCN_NCRYPT_EXACT_MATCH_OPERATION = 8388608;
export const XCN_NCRYPT_PREFERENCE_MASK_OPERATION = 14680064;
export const XCN_AT_NONE = 0;
export const XCN_AT_KEYEXCHANGE = 1;
export const XCN_AT_SIGNATURE = 2;
export const SKIHashDefault = 0;
export const SKIHashSha1 = 1;
export const SKIHashCapiSha1 = 2;
export const SKIHashSha256 = 3;
export const SKIHashHPKP = 5;
export const XCN_NCRYPT_ALLOW_EXPORT_NONE = 0;
export const XCN_NCRYPT_ALLOW_EXPORT_FLAG = 1;
export const XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = 2;
export const XCN_NCRYPT_ALLOW_ARCHIVING_FLAG = 4;
export const XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = 8;
export const XCN_NCRYPT_ALLOW_USAGES_NONE = 0;
export const XCN_NCRYPT_ALLOW_DECRYPT_FLAG = 1;
export const XCN_NCRYPT_ALLOW_SIGNING_FLAG = 2;
export const XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = 4;
export const XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG = 8;
export const XCN_NCRYPT_ALLOW_ALL_USAGES = 16777215;
export const XCN_NCRYPT_UI_NO_PROTECTION_FLAG = 0;
export const XCN_NCRYPT_UI_PROTECT_KEY_FLAG = 1;
export const XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = 2;
export const XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = 4;
export const XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = 8;
export const VerifyNone = 0;
export const VerifySilent = 1;
export const VerifySmartCardNone = 2;
export const VerifySmartCardSilent = 3;
export const VerifyAllowUI = 4;
export const XCN_NCRYPT_PCP_NONE = 0;
export const XCN_NCRYPT_TPM12_PROVIDER = 65536;
export const XCN_NCRYPT_PCP_SIGNATURE_KEY = 1;
export const XCN_NCRYPT_PCP_ENCRYPTION_KEY = 2;
export const XCN_NCRYPT_PCP_GENERIC_KEY = 3;
export const XCN_NCRYPT_PCP_STORAGE_KEY = 4;
export const XCN_NCRYPT_PCP_IDENTITY_KEY = 8;
export const XCN_CRYPT_OID_USE_CURVE_NONE = 0;
export const XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = 536870912;
export const XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = 268435456;
export const XCN_CERT_NO_KEY_USAGE = 0;
export const XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE = 128;
export const XCN_CERT_NON_REPUDIATION_KEY_USAGE = 64;
export const XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE = 32;
export const XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE = 16;
export const XCN_CERT_KEY_AGREEMENT_KEY_USAGE = 8;
export const XCN_CERT_KEY_CERT_SIGN_KEY_USAGE = 4;
export const XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 2;
export const XCN_CERT_CRL_SIGN_KEY_USAGE = 2;
export const XCN_CERT_ENCIPHER_ONLY_KEY_USAGE = 1;
export const XCN_CERT_DECIPHER_ONLY_KEY_USAGE = 32768;
export const XCN_CERT_ALT_NAME_UNKNOWN = 0;
export const XCN_CERT_ALT_NAME_OTHER_NAME = 1;
export const XCN_CERT_ALT_NAME_RFC822_NAME = 2;
export const XCN_CERT_ALT_NAME_DNS_NAME = 3;
export const XCN_CERT_ALT_NAME_X400_ADDRESS = 4;
export const XCN_CERT_ALT_NAME_DIRECTORY_NAME = 5;
export const XCN_CERT_ALT_NAME_EDI_PARTY_NAME = 6;
export const XCN_CERT_ALT_NAME_URL = 7;
export const XCN_CERT_ALT_NAME_IP_ADDRESS = 8;
export const XCN_CERT_ALT_NAME_REGISTERED_ID = 9;
export const XCN_CERT_ALT_NAME_GUID = 10;
export const XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME = 11;
export const PolicyQualifierTypeUnknown = 0;
export const PolicyQualifierTypeUrl = 1;
export const PolicyQualifierTypeUserNotice = 2;
export const PolicyQualifierTypeFlags = 3;
export const ClientIdNone = 0;
export const ClientIdXEnroll2003 = 1;
export const ClientIdAutoEnroll2003 = 2;
export const ClientIdWizard2003 = 3;
export const ClientIdCertReq2003 = 4;
export const ClientIdDefaultRequest = 5;
export const ClientIdAutoEnroll = 6;
export const ClientIdRequestWizard = 7;
export const ClientIdEOBO = 8;
export const ClientIdCertReq = 9;
export const ClientIdTest = 10;
export const ClientIdWinRT = 11;
export const ClientIdUserStart = 1000;
export const XCN_PROPERTYID_NONE = 0;
export const XCN_CERT_KEY_PROV_HANDLE_PROP_ID = 1;
export const XCN_CERT_KEY_PROV_INFO_PROP_ID = 2;
export const XCN_CERT_SHA1_HASH_PROP_ID = 3;
export const XCN_CERT_MD5_HASH_PROP_ID = 4;
export const XCN_CERT_HASH_PROP_ID = 3;
export const XCN_CERT_KEY_CONTEXT_PROP_ID = 5;
export const XCN_CERT_KEY_SPEC_PROP_ID = 6;
export const XCN_CERT_IE30_RESERVED_PROP_ID = 7;
export const XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8;
export const XCN_CERT_ENHKEY_USAGE_PROP_ID = 9;
export const XCN_CERT_CTL_USAGE_PROP_ID = 9;
export const XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10;
export const XCN_CERT_FRIENDLY_NAME_PROP_ID = 11;
export const XCN_CERT_PVK_FILE_PROP_ID = 12;
export const XCN_CERT_DESCRIPTION_PROP_ID = 13;
export const XCN_CERT_ACCESS_STATE_PROP_ID = 14;
export const XCN_CERT_SIGNATURE_HASH_PROP_ID = 15;
export const XCN_CERT_SMART_CARD_DATA_PROP_ID = 16;
export const XCN_CERT_EFS_PROP_ID = 17;
export const XCN_CERT_FORTEZZA_DATA_PROP_ID = 18;
export const XCN_CERT_ARCHIVED_PROP_ID = 19;
export const XCN_CERT_KEY_IDENTIFIER_PROP_ID = 20;
export const XCN_CERT_AUTO_ENROLL_PROP_ID = 21;
export const XCN_CERT_PUBKEY_ALG_PARA_PROP_ID = 22;
export const XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23;
export const XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24;
export const XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25;
export const XCN_CERT_ENROLLMENT_PROP_ID = 26;
export const XCN_CERT_DATE_STAMP_PROP_ID = 27;
export const XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28;
export const XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29;
export const XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID = 30;
export const XCN_CERT_RENEWAL_PROP_ID = 64;
export const XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID = 65;
export const XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID = 66;
export const XCN_CERT_AIA_URL_RETRIEVED_PROP_ID = 67;
export const XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68;
export const XCN_CERT_BACKED_UP_PROP_ID = 69;
export const XCN_CERT_OCSP_RESPONSE_PROP_ID = 70;
export const XCN_CERT_REQUEST_ORIGINATOR_PROP_ID = 71;
export const XCN_CERT_SOURCE_LOCATION_PROP_ID = 72;
export const XCN_CERT_SOURCE_URL_PROP_ID = 73;
export const XCN_CERT_NEW_KEY_PROP_ID = 74;
export const XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID = 75;
export const XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76;
export const XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77;
export const XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78;
export const XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79;
export const XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80;
export const XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81;
export const XCN_CERT_CA_DISABLE_CRL_PROP_ID = 82;
export const XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83;
export const XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84;
export const XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85;
export const XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86;
export const XCN_CERT_CEP_PROP_ID = 87;
export const XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89;
export const XCN_CERT_SCARD_PIN_ID_PROP_ID = 90;
export const XCN_CERT_SCARD_PIN_INFO_PROP_ID = 91;
export const XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92;
export const XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93;
export const XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94;
export const XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95;
export const XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96;
export const XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97;
export const XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98;
export const XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99;
export const XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100;
export const XCN_CERT_SMART_CARD_READER_PROP_ID = 101;
export const XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102;
export const XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103;
export const XCN_CERT_DISALLOWED_FILETIME_PROP_ID = 104;
export const XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105;
export const XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106;
export const XCN_CERT_SHA256_HASH_PROP_ID = 107;
export const XCN_CERT_SCEP_SERVER_CERTS_PROP_ID = 108;
export const XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109;
export const XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110;
export const XCN_CERT_SCEP_CA_CERT_PROP_ID = 111;
export const XCN_CERT_SCEP_SIGNER_CERT_PROP_ID = 112;
export const XCN_CERT_SCEP_NONCE_PROP_ID = 113;
export const XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114;
export const XCN_CERT_SCEP_FLAGS_PROP_ID = 115;
export const XCN_CERT_SCEP_GUID_PROP_ID = 116;
export const XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117;
export const XCN_CERT_ISOLATED_KEY_PROP_ID = 118;
export const XCN_CERT_SERIAL_CHAIN_PROP_ID = 119;
export const XCN_CERT_KEY_CLASSIFICATION_PROP_ID = 120;
export const XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122;
export const XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123;
export const XCN_CERT_PIN_SHA256_HASH_PROP_ID = 124;
export const XCN_CERT_CLR_DELETE_KEY_PROP_ID = 125;
export const XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID = 126;
export const XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127;
export const XCN_CERT_FIRST_RESERVED_PROP_ID = 128;
export const XCN_CERT_LAST_RESERVED_PROP_ID = 32767;
export const XCN_CERT_FIRST_USER_PROP_ID = 32768;
export const XCN_CERT_LAST_USER_PROP_ID = 65535;
export const XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096;
export const DefaultNone = 0;
export const DefaultPolicyServer = 1;
export const PsfNone = 0;
export const PsfLocationGroupPolicy = 1;
export const PsfLocationRegistry = 2;
export const PsfUseClientId = 4;
export const PsfAutoEnrollmentEnabled = 16;
export const PsfAllowUnTrustedCA = 32;
export const TemplatePropCommonName = 1;
export const TemplatePropFriendlyName = 2;
export const TemplatePropEKUs = 3;
export const TemplatePropCryptoProviders = 4;
export const TemplatePropMajorRevision = 5;
export const TemplatePropDescription = 6;
export const TemplatePropKeySpec = 7;
export const TemplatePropSchemaVersion = 8;
export const TemplatePropMinorRevision = 9;
export const TemplatePropRASignatureCount = 10;
export const TemplatePropMinimumKeySize = 11;
export const TemplatePropOID = 12;
export const TemplatePropSupersede = 13;
export const TemplatePropRACertificatePolicies = 14;
export const TemplatePropRAEKUs = 15;
export const TemplatePropCertificatePolicies = 16;
export const TemplatePropV1ApplicationPolicy = 17;
export const TemplatePropAsymmetricAlgorithm = 18;
export const TemplatePropKeySecurityDescriptor = 19;
export const TemplatePropSymmetricAlgorithm = 20;
export const TemplatePropSymmetricKeyLength = 21;
export const TemplatePropHashAlgorithm = 22;
export const TemplatePropKeyUsage = 23;
export const TemplatePropEnrollmentFlags = 24;
export const TemplatePropSubjectNameFlags = 25;
export const TemplatePropPrivateKeyFlags = 26;
export const TemplatePropGeneralFlags = 27;
export const TemplatePropSecurityDescriptor = 28;
export const TemplatePropExtensions = 29;
export const TemplatePropValidityPeriod = 30;
export const TemplatePropRenewalPeriod = 31;
export const CommitFlagSaveTemplateGenerateOID = 1;
export const CommitFlagSaveTemplateUseCurrentOID = 2;
export const CommitFlagSaveTemplateOverwrite = 3;
export const CommitFlagDeleteTemplate = 4;
export const CAPropCommonName = 1;
export const CAPropDistinguishedName = 2;
export const CAPropSanitizedName = 3;
export const CAPropSanitizedShortName = 4;
export const CAPropDNSName = 5;
export const CAPropCertificateTypes = 6;
export const CAPropCertificate = 7;
export const CAPropDescription = 8;
export const CAPropWebServers = 9;
export const CAPropSiteName = 10;
export const CAPropSecurity = 11;
export const CAPropRenewalOnly = 12;
export const LoadOptionDefault = 0;
export const LoadOptionCacheOnly = 1;
export const LoadOptionReload = 2;
export const LoadOptionRegisterForADChanges = 4;
export const DisableGroupPolicyList = 2;
export const DisableUserServerList = 4;
export const PsPolicyID = 0;
export const PsFriendlyName = 1;
export const ExportTemplates = 1;
export const ExportOIDs = 2;
export const ExportCAs = 4;
export const TypeAny = 0;
export const TypePkcs10 = 1;
export const TypePkcs7 = 2;
export const TypeCmc = 3;
export const TypeCertificate = 4;
export const InheritDefault = 0;
export const InheritNewDefaultKey = 1;
export const InheritNewSimilarKey = 2;
export const InheritPrivateKey = 3;
export const InheritPublicKey = 4;
export const InheritKeyMask = 15;
export const InheritNone = 16;
export const InheritRenewalCertificateFlag = 32;
export const InheritTemplateFlag = 64;
export const InheritSubjectFlag = 128;
export const InheritExtensionsFlag = 256;
export const InheritSubjectAltNameFlag = 512;
export const InheritValidityPeriodFlag = 1024;
export const InheritReserved80000000 = `-2147483648`;
export const LevelInnermost = 0;
export const LevelNext = 1;
export const AllowedKeySignature = 1;
export const AllowedNullSignature = 2;
export const XCN_NCRYPT_CLAIM_NONE = 0;
export const XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = 3;
export const XCN_NCRYPT_CLAIM_AUTHORITY_ONLY = 1;
export const XCN_NCRYPT_CLAIM_SUBJECT_ONLY = 2;
export const XCN_NCRYPT_CLAIM_UNKNOWN = 4096;
export const AllowNone = 0;
export const AllowNoOutstandingRequest = 1;
export const AllowUntrustedCertificate = 2;
export const AllowUntrustedRoot = 4;
export const EnrollPrompt = 1;
export const XCN_CRL_REASON_UNSPECIFIED = 0;
export const XCN_CRL_REASON_KEY_COMPROMISE = 1;
export const XCN_CRL_REASON_CA_COMPROMISE = 2;
export const XCN_CRL_REASON_AFFILIATION_CHANGED = 3;
export const XCN_CRL_REASON_SUPERSEDED = 4;
export const XCN_CRL_REASON_CESSATION_OF_OPERATION = 5;
export const XCN_CRL_REASON_CERTIFICATE_HOLD = 6;
export const XCN_CRL_REASON_REMOVE_FROM_CRL = 8;
export const XCN_CRL_REASON_PRIVILEGE_WITHDRAWN = 9;
export const XCN_CRL_REASON_AA_COMPROMISE = 10;
export const SCEPProcessDefault = 0;
export const SCEPProcessSkipCertInstall = 1;
export const DelayRetryUnknown = 0;
export const DelayRetryNone = 1;
export const DelayRetryShort = 2;
export const DelayRetryLong = 3;
export const DelayRetrySuccess = 4;
export const DelayRetryPastSuccess = 5;
export const GeneralMachineType = 64;
export const GeneralCA = 128;
export const GeneralCrossCA = 2048;
export const GeneralDefault = 65536;
export const GeneralModified = 131072;
export const GeneralDonotPersist = 4096;
export const EnrollmentIncludeSymmetricAlgorithms = 1;
export const EnrollmentPendAllRequests = 2;
export const EnrollmentPublishToKRAContainer = 4;
export const EnrollmentPublishToDS = 8;
export const EnrollmentAutoEnrollmentCheckUserDSCertificate = 16;
export const EnrollmentAutoEnrollment = 32;
export const EnrollmentDomainAuthenticationNotRequired = 128;
export const EnrollmentPreviousApprovalValidateReenrollment = 64;
export const EnrollmentUserInteractionRequired = 256;
export const EnrollmentAddTemplateName = 512;
export const EnrollmentRemoveInvalidCertificateFromPersonalStore = 1024;
export const EnrollmentAllowEnrollOnBehalfOf = 2048;
export const EnrollmentAddOCSPNoCheck = 4096;
export const EnrollmentReuseKeyOnFullSmartCard = 8192;
export const EnrollmentNoRevocationInfoInCerts = 16384;
export const EnrollmentIncludeBasicConstraintsForEECerts = 32768;
export const EnrollmentPreviousApprovalKeyBasedValidateReenrollment = 65536;
export const EnrollmentCertificateIssuancePoliciesFromRequest = 131072;
export const EnrollmentSkipAutoRenewal = 262144;
export const SubjectNameEnrolleeSupplies = 1;
export const SubjectNameRequireDirectoryPath = `-2147483648`;
export const SubjectNameRequireCommonName = 1073741824;
export const SubjectNameRequireEmail = 536870912;
export const SubjectNameRequireDNS = 268435456;
export const SubjectNameAndAlternativeNameOldCertSupplies = 8;
export const SubjectAlternativeNameEnrolleeSupplies = 65536;
export const SubjectAlternativeNameRequireDirectoryGUID = 16777216;
export const SubjectAlternativeNameRequireUPN = 33554432;
export const SubjectAlternativeNameRequireEmail = 67108864;
export const SubjectAlternativeNameRequireSPN = 8388608;
export const SubjectAlternativeNameRequireDNS = 134217728;
export const SubjectAlternativeNameRequireDomainDNS = 4194304;
export const PrivateKeyRequireArchival = 1;
export const PrivateKeyExportable = 16;
export const PrivateKeyRequireStrongKeyProtection = 32;
export const PrivateKeyRequireAlternateSignatureAlgorithm = 64;
export const PrivateKeyRequireSameKeyRenewal = 128;
export const PrivateKeyUseLegacyProvider = 256;
export const PrivateKeyEKTrustOnUse = 512;
export const PrivateKeyEKValidateCert = 1024;
export const PrivateKeyEKValidateKey = 2048;
export const PrivateKeyAttestNone = 0;
export const PrivateKeyAttestPreferred = 4096;
export const PrivateKeyAttestRequired = 8192;
export const PrivateKeyAttestMask = 12288;
export const PrivateKeyAttestWithoutPolicy = 16384;
export const PrivateKeyServerVersionMask = 983040;
export const PrivateKeyServerVersionShift = 16;
export const PrivateKeyHelloKspKey = 1048576;
export const PrivateKeyHelloLogonKey = 2097152;
export const PrivateKeyClientVersionMask = 251658240;
export const PrivateKeyClientVersionShift = 24;
export const ImportNone = 0;
export const ImportMachineContext = 1;
export const ImportForceOverwrite = 2;
export const ImportSilent = 4;
export const ImportSaveProperties = 8;
export const ImportExportable = 16;
export const ImportExportableEncrypted = 32;
export const ImportNoUserProtected = 64;
export const ImportUserProtected = 128;
export const ImportUserProtectedHigh = 256;
export const ImportInstallCertificate = 512;
export const ImportInstallChain = 1024;
export const ImportInstallChainAndRoot = 2048;
export const ENUM_ENTERPRISE_ROOTCA = 0;
export const ENUM_ENTERPRISE_SUBCA = 1;
export const ENUM_STANDALONE_ROOTCA = 3;
export const ENUM_STANDALONE_SUBCA = 4;
export const ENUM_UNKNOWN_CA = 5;
export const KeyCredentialManagerOperationErrorStateNone = 0;
export const KeyCredentialManagerOperationErrorStateDeviceJoinFailure = 1;
export const KeyCredentialManagerOperationErrorStateTokenFailure = 2;
export const KeyCredentialManagerOperationErrorStateCertificateFailure = 4;
export const KeyCredentialManagerOperationErrorStateRemoteSessionFailure = 8;
export const KeyCredentialManagerOperationErrorStatePolicyFailure = 16;
export const KeyCredentialManagerOperationErrorStateHardwareFailure = 32;
export const KeyCredentialManagerOperationErrorStatePinExistsFailure = 64;
export const KeyCredentialManagerProvisioning = 0;
export const KeyCredentialManagerPinChange = 1;
export const KeyCredentialManagerPinReset = 2;
export const CertCredential = 1;
export const UsernameTargetCredential = 2;
export const BinaryBlobCredential = 3;
export const UsernameForPackedCredentials = 4;
export const BinaryBlobForSystem = 5;
export const CredUnprotected = 0;
export const CredUserProtection = 1;
export const CredTrustedProtection = 2;
export const CredForSystemProtection = 3;
export const RSR_MATCH_TYPE_READER_AND_CONTAINER = 1;
export const RSR_MATCH_TYPE_SERIAL_NUMBER = 2;
export const RSR_MATCH_TYPE_ALL_CARDS = 3;
export const CredsspPasswordCreds = 2;
export const CredsspSchannelCreds = 4;
export const CredsspCertificateCreds = 13;
export const CredsspSubmitBufferBoth = 50;
export const CredsspSubmitBufferBothOld = 51;
export const CredsspCredEx = 100;
export const raatMinimum = 0;
export const raatUserName = 1;
export const raatUserPassword = 2;
export const raatMD5CHAPPassword = 3;
export const raatNASIPAddress = 4;
export const raatNASPort = 5;
export const raatServiceType = 6;
export const raatFramedProtocol = 7;
export const raatFramedIPAddress = 8;
export const raatFramedIPNetmask = 9;
export const raatFramedRouting = 10;
export const raatFilterId = 11;
export const raatFramedMTU = 12;
export const raatFramedCompression = 13;
export const raatLoginIPHost = 14;
export const raatLoginService = 15;
export const raatLoginTCPPort = 16;
export const raatUnassigned17 = 17;
export const raatReplyMessage = 18;
export const raatCallbackNumber = 19;
export const raatCallbackId = 20;
export const raatUnassigned21 = 21;
export const raatFramedRoute = 22;
export const raatFramedIPXNetwork = 23;
export const raatState = 24;
export const raatClass = 25;
export const raatVendorSpecific = 26;
export const raatSessionTimeout = 27;
export const raatIdleTimeout = 28;
export const raatTerminationAction = 29;
export const raatCalledStationId = 30;
export const raatCallingStationId = 31;
export const raatNASIdentifier = 32;
export const raatProxyState = 33;
export const raatLoginLATService = 34;
export const raatLoginLATNode = 35;
export const raatLoginLATGroup = 36;
export const raatFramedAppleTalkLink = 37;
export const raatFramedAppleTalkNetwork = 38;
export const raatFramedAppleTalkZone = 39;
export const raatAcctStatusType = 40;
export const raatAcctDelayTime = 41;
export const raatAcctInputOctets = 42;
export const raatAcctOutputOctets = 43;
export const raatAcctSessionId = 44;
export const raatAcctAuthentic = 45;
export const raatAcctSessionTime = 46;
export const raatAcctInputPackets = 47;
export const raatAcctOutputPackets = 48;
export const raatAcctTerminateCause = 49;
export const raatAcctMultiSessionId = 50;
export const raatAcctLinkCount = 51;
export const raatAcctEventTimeStamp = 55;
export const raatMD5CHAPChallenge = 60;
export const raatNASPortType = 61;
export const raatPortLimit = 62;
export const raatLoginLATPort = 63;
export const raatTunnelType = 64;
export const raatTunnelMediumType = 65;
export const raatTunnelClientEndpoint = 66;
export const raatTunnelServerEndpoint = 67;
export const raatARAPPassword = 70;
export const raatARAPFeatures = 71;
export const raatARAPZoneAccess = 72;
export const raatARAPSecurity = 73;
export const raatARAPSecurityData = 74;
export const raatPasswordRetry = 75;
export const raatPrompt = 76;
export const raatConnectInfo = 77;
export const raatConfigurationToken = 78;
export const raatEAPMessage = 79;
export const raatSignature = 80;
export const raatARAPChallengeResponse = 84;
export const raatAcctInterimInterval = 85;
export const raatNASIPv6Address = 95;
export const raatFramedInterfaceId = 96;
export const raatFramedIPv6Prefix = 97;
export const raatLoginIPv6Host = 98;
export const raatFramedIPv6Route = 99;
export const raatFramedIPv6Pool = 100;
export const raatARAPGuestLogon = 8096;
export const raatCertificateOID = 8097;
export const raatEAPConfiguration = 8098;
export const raatPEAPEmbeddedEAPTypeId = 8099;
export const raatInnerEAPTypeId = 8099;
export const raatPEAPFastRoamedSession = 8100;
export const raatFastRoamedSession = 8100;
export const raatEAPTLV = 8102;
export const raatCredentialsChanged = 8103;
export const raatCertificateThumbprint = 8250;
export const raatPeerId = 9000;
export const raatServerId = 9001;
export const raatMethodId = 9002;
export const raatEMSK = 9003;
export const raatSessionId = 9004;
export const raatReserved = `-1`;
export const EAPACTION_NoAction = 0;
export const EAPACTION_Authenticate = 1;
export const EAPACTION_Done = 2;
export const EAPACTION_SendAndDone = 3;
export const EAPACTION_Send = 4;
export const EAPACTION_SendWithTimeout = 5;
export const EAPACTION_SendWithTimeoutInteractive = 6;
export const EAPACTION_IndicateTLV = 7;
export const EAPACTION_IndicateIdentity = 8;
export const eatMinimum = 0;
export const eatUserName = 1;
export const eatUserPassword = 2;
export const eatMD5CHAPPassword = 3;
export const eatNASIPAddress = 4;
export const eatNASPort = 5;
export const eatServiceType = 6;
export const eatFramedProtocol = 7;
export const eatFramedIPAddress = 8;
export const eatFramedIPNetmask = 9;
export const eatFramedRouting = 10;
export const eatFilterId = 11;
export const eatFramedMTU = 12;
export const eatFramedCompression = 13;
export const eatLoginIPHost = 14;
export const eatLoginService = 15;
export const eatLoginTCPPort = 16;
export const eatUnassigned17 = 17;
export const eatReplyMessage = 18;
export const eatCallbackNumber = 19;
export const eatCallbackId = 20;
export const eatUnassigned21 = 21;
export const eatFramedRoute = 22;
export const eatFramedIPXNetwork = 23;
export const eatState = 24;
export const eatClass = 25;
export const eatVendorSpecific = 26;
export const eatSessionTimeout = 27;
export const eatIdleTimeout = 28;
export const eatTerminationAction = 29;
export const eatCalledStationId = 30;
export const eatCallingStationId = 31;
export const eatNASIdentifier = 32;
export const eatProxyState = 33;
export const eatLoginLATService = 34;
export const eatLoginLATNode = 35;
export const eatLoginLATGroup = 36;
export const eatFramedAppleTalkLink = 37;
export const eatFramedAppleTalkNetwork = 38;
export const eatFramedAppleTalkZone = 39;
export const eatAcctStatusType = 40;
export const eatAcctDelayTime = 41;
export const eatAcctInputOctets = 42;
export const eatAcctOutputOctets = 43;
export const eatAcctSessionId = 44;
export const eatAcctAuthentic = 45;
export const eatAcctSessionTime = 46;
export const eatAcctInputPackets = 47;
export const eatAcctOutputPackets = 48;
export const eatAcctTerminateCause = 49;
export const eatAcctMultiSessionId = 50;
export const eatAcctLinkCount = 51;
export const eatAcctEventTimeStamp = 55;
export const eatMD5CHAPChallenge = 60;
export const eatNASPortType = 61;
export const eatPortLimit = 62;
export const eatLoginLATPort = 63;
export const eatTunnelType = 64;
export const eatTunnelMediumType = 65;
export const eatTunnelClientEndpoint = 66;
export const eatTunnelServerEndpoint = 67;
export const eatARAPPassword = 70;
export const eatARAPFeatures = 71;
export const eatARAPZoneAccess = 72;
export const eatARAPSecurity = 73;
export const eatARAPSecurityData = 74;
export const eatPasswordRetry = 75;
export const eatPrompt = 76;
export const eatConnectInfo = 77;
export const eatConfigurationToken = 78;
export const eatEAPMessage = 79;
export const eatSignature = 80;
export const eatARAPChallengeResponse = 84;
export const eatAcctInterimInterval = 85;
export const eatNASIPv6Address = 95;
export const eatFramedInterfaceId = 96;
export const eatFramedIPv6Prefix = 97;
export const eatLoginIPv6Host = 98;
export const eatFramedIPv6Route = 99;
export const eatFramedIPv6Pool = 100;
export const eatARAPGuestLogon = 8096;
export const eatCertificateOID = 8097;
export const eatEAPConfiguration = 8098;
export const eatPEAPEmbeddedEAPTypeId = 8099;
export const eatPEAPFastRoamedSession = 8100;
export const eatFastRoamedSession = 8100;
export const eatEAPTLV = 8102;
export const eatCredentialsChanged = 8103;
export const eatInnerEapMethodType = 8104;
export const eatClearTextPassword = 8107;
export const eatQuarantineSoH = 8150;
export const eatCertificateThumbprint = 8250;
export const eatPeerId = 9000;
export const eatServerId = 9001;
export const eatMethodId = 9002;
export const eatEMSK = 9003;
export const eatSessionId = 9004;
export const eatReserved = `-1`;
export const EapConfigInputUsername = 0;
export const EapConfigInputPassword = 1;
export const EapConfigInputNetworkUsername = 2;
export const EapConfigInputNetworkPassword = 3;
export const EapConfigInputPin = 4;
export const EapConfigInputPSK = 5;
export const EapConfigInputEdit = 6;
export const EapConfigSmartCardUsername = 7;
export const EapConfigSmartCardError = 8;
export const EapCredReq = 0;
export const EapCredResp = 1;
export const EapCredExpiryReq = 2;
export const EapCredExpiryResp = 3;
export const EapCredLogonReq = 4;
export const EapCredLogonResp = 5;
export const emptPropCipherSuiteNegotiation = 0;
export const emptPropMutualAuth = 1;
export const emptPropIntegrity = 2;
export const emptPropReplayProtection = 3;
export const emptPropConfidentiality = 4;
export const emptPropKeyDerivation = 5;
export const emptPropKeyStrength64 = 6;
export const emptPropKeyStrength128 = 7;
export const emptPropKeyStrength256 = 8;
export const emptPropKeyStrength512 = 9;
export const emptPropKeyStrength1024 = 10;
export const emptPropDictionaryAttackResistance = 11;
export const emptPropFastReconnect = 12;
export const emptPropCryptoBinding = 13;
export const emptPropSessionIndependence = 14;
export const emptPropFragmentation = 15;
export const emptPropChannelBinding = 16;
export const emptPropNap = 17;
export const emptPropStandalone = 18;
export const emptPropMppeEncryption = 19;
export const emptPropTunnelMethod = 20;
export const emptPropSupportsConfig = 21;
export const emptPropCertifiedMethod = 22;
export const emptPropHiddenMethod = 23;
export const emptPropMachineAuth = 24;
export const emptPropUserAuth = 25;
export const emptPropIdentityPrivacy = 26;
export const emptPropMethodChaining = 27;
export const emptPropSharedStateEquivalence = 28;
export const emptLegacyMethodPropertyFlag = 31;
export const emptPropVendorSpecific = 255;
export const empvtBool = 0;
export const empvtDword = 1;
export const empvtString = 2;
export const EAP_EMPTY_CREDENTIAL = 0;
export const EAP_USERNAME_PASSWORD_CREDENTIAL = 1;
export const EAP_WINLOGON_CREDENTIAL = 2;
export const EAP_CERTIFICATE_CREDENTIAL = 3;
export const EAP_SIM_CREDENTIAL = 4;
export const EapHostPeerMethodResultAltSuccessReceived = 1;
export const EapHostPeerMethodResultTimeout = 2;
export const EapHostPeerMethodResultFromMethod = 3;
export const EapHostPeerResponseDiscard = 0;
export const EapHostPeerResponseSend = 1;
export const EapHostPeerResponseResult = 2;
export const EapHostPeerResponseInvokeUi = 3;
export const EapHostPeerResponseRespond = 4;
export const EapHostPeerResponseStartAuthentication = 5;
export const EapHostPeerResponseNone = 6;
export const EapHostPeerAuthStatus = 1;
export const EapHostPeerIdentity = 2;
export const EapHostPeerIdentityExtendedInfo = 3;
export const EapHostNapInfo = 4;
export const EapHostInvalidSession = 0;
export const EapHostAuthNotStarted = 1;
export const EapHostAuthIdentityExchange = 2;
export const EapHostAuthNegotiatingType = 3;
export const EapHostAuthInProgress = 4;
export const EapHostAuthSucceeded = 5;
export const EapHostAuthFailed = 6;
export const ISOLATION_STATE_UNKNOWN = 0;
export const ISOLATION_STATE_NOT_RESTRICTED = 1;
export const ISOLATION_STATE_IN_PROBATION = 2;
export const ISOLATION_STATE_RESTRICTED_ACCESS = 3;
export const EapCodeMinimum = 1;
export const EapCodeRequest = 1;
export const EapCodeResponse = 2;
export const EapCodeSuccess = 3;
export const EapCodeFailure = 4;
export const EapCodeMaximum = 4;
export const EAP_METHOD_AUTHENTICATOR_RESPONSE_DISCARD = 0;
export const EAP_METHOD_AUTHENTICATOR_RESPONSE_SEND = 1;
export const EAP_METHOD_AUTHENTICATOR_RESPONSE_RESULT = 2;
export const EAP_METHOD_AUTHENTICATOR_RESPONSE_RESPOND = 3;
export const EAP_METHOD_AUTHENTICATOR_RESPONSE_AUTHENTICATE = 4;
export const EAP_METHOD_AUTHENTICATOR_RESPONSE_HANDLE_IDENTITY = 5;
export const EapPeerMethodResponseActionDiscard = 0;
export const EapPeerMethodResponseActionSend = 1;
export const EapPeerMethodResponseActionResult = 2;
export const EapPeerMethodResponseActionInvokeUI = 3;
export const EapPeerMethodResponseActionRespond = 4;
export const EapPeerMethodResponseActionNone = 5;
export const EapPeerMethodResultUnknown = 1;
export const EapPeerMethodResultSuccess = 2;
export const EapPeerMethodResultFailure = 3;
export const EAP_AUTHENTICATOR_SEND_TIMEOUT_NONE = 0;
export const EAP_AUTHENTICATOR_SEND_TIMEOUT_BASIC = 1;
export const EAP_AUTHENTICATOR_SEND_TIMEOUT_INTERACTIVE = 2;
export const ENTERPRISE_POLICY_NONE = 0;
export const ENTERPRISE_POLICY_ALLOWED = 1;
export const ENTERPRISE_POLICY_ENLIGHTENED = 2;
export const ENTERPRISE_POLICY_EXEMPT = 4;
export const SRPHOSTING_TYPE_NONE = 0;
export const SRPHOSTING_TYPE_WINHTTP = 1;
export const SRPHOSTING_TYPE_WININET = 2;
export const SRPHOSTING_VERSION1 = 1;
export const SidTypeUser = 1;
export const SidTypeGroup = 2;
export const SidTypeDomain = 3;
export const SidTypeAlias = 4;
export const SidTypeWellKnownGroup = 5;
export const SidTypeDeletedAccount = 6;
export const SidTypeInvalid = 7;
export const SidTypeUnknown = 8;
export const SidTypeComputer = 9;
export const SidTypeLabel = 10;
export const SidTypeLogonSession = 11;
export const AccountDomainInformation = 5;
export const DnsDomainInformation = 12;
export const UndefinedLogonType = 0;
export const Interactive = 2;
export const Network = 3;
export const Batch = 4;
export const Service = 5;
export const Proxy = 6;
export const Unlock = 7;
export const NetworkCleartext = 8;
export const NewCredentials = 9;
export const RemoteInteractive = 10;
export const CachedInteractive = 11;
export const CachedRemoteInteractive = 12;
export const CachedUnlock = 13;
export const SeAdtParmTypeNone = 0;
export const SeAdtParmTypeString = 1;
export const SeAdtParmTypeFileSpec = 2;
export const SeAdtParmTypeUlong = 3;
export const SeAdtParmTypeSid = 4;
export const SeAdtParmTypeLogonId = 5;
export const SeAdtParmTypeNoLogonId = 6;
export const SeAdtParmTypeAccessMask = 7;
export const SeAdtParmTypePrivs = 8;
export const SeAdtParmTypeObjectTypes = 9;
export const SeAdtParmTypeHexUlong = 10;
export const SeAdtParmTypePtr = 11;
export const SeAdtParmTypeTime = 12;
export const SeAdtParmTypeGuid = 13;
export const SeAdtParmTypeLuid = 14;
export const SeAdtParmTypeHexInt64 = 15;
export const SeAdtParmTypeStringList = 16;
export const SeAdtParmTypeSidList = 17;
export const SeAdtParmTypeDuration = 18;
export const SeAdtParmTypeUserAccountControl = 19;
export const SeAdtParmTypeNoUac = 20;
export const SeAdtParmTypeMessage = 21;
export const SeAdtParmTypeDateTime = 22;
export const SeAdtParmTypeSockAddr = 23;
export const SeAdtParmTypeSD = 24;
export const SeAdtParmTypeLogonHours = 25;
export const SeAdtParmTypeLogonIdNoSid = 26;
export const SeAdtParmTypeUlongNoConv = 27;
export const SeAdtParmTypeSockAddrNoPort = 28;
export const SeAdtParmTypeAccessReason = 29;
export const SeAdtParmTypeStagingReason = 30;
export const SeAdtParmTypeResourceAttribute = 31;
export const SeAdtParmTypeClaims = 32;
export const SeAdtParmTypeLogonIdAsSid = 33;
export const SeAdtParmTypeMultiSzString = 34;
export const SeAdtParmTypeLogonIdEx = 35;
export const AuditCategorySystem = 0;
export const AuditCategoryLogon = 1;
export const AuditCategoryObjectAccess = 2;
export const AuditCategoryPrivilegeUse = 3;
export const AuditCategoryDetailedTracking = 4;
export const AuditCategoryPolicyChange = 5;
export const AuditCategoryAccountManagement = 6;
export const AuditCategoryDirectoryServiceAccess = 7;
export const AuditCategoryAccountLogon = 8;
export const PolicyServerRoleBackup = 2;
export const PolicyServerRolePrimary = 3;
export const PolicyAuditLogInformation = 1;
export const PolicyAuditEventsInformation = 2;
export const PolicyPrimaryDomainInformation = 3;
export const PolicyPdAccountInformation = 4;
export const PolicyAccountDomainInformation = 5;
export const PolicyLsaServerRoleInformation = 6;
export const PolicyReplicaSourceInformation = 7;
export const PolicyDefaultQuotaInformation = 8;
export const PolicyModificationInformation = 9;
export const PolicyAuditFullSetInformation = 10;
export const PolicyAuditFullQueryInformation = 11;
export const PolicyDnsDomainInformation = 12;
export const PolicyDnsDomainInformationInt = 13;
export const PolicyLocalAccountDomainInformation = 14;
export const PolicyMachineAccountInformation = 15;
export const PolicyLastEntry = 16;
export const PolicyDomainEfsInformation = 2;
export const PolicyDomainKerberosTicketInformation = 3;
export const PolicyNotifyAuditEventsInformation = 1;
export const PolicyNotifyAccountDomainInformation = 2;
export const PolicyNotifyServerRoleInformation = 3;
export const PolicyNotifyDnsDomainInformation = 4;
export const PolicyNotifyDomainEfsInformation = 5;
export const PolicyNotifyDomainKerberosTicketInformation = 6;
export const PolicyNotifyMachineAccountPasswordInformation = 7;
export const PolicyNotifyGlobalSaclInformation = 8;
export const PolicyNotifyMax = 9;
export const TrustedDomainNameInformation = 1;
export const TrustedControllersInformation = 2;
export const TrustedPosixOffsetInformation = 3;
export const TrustedPasswordInformation = 4;
export const TrustedDomainInformationBasic = 5;
export const TrustedDomainInformationEx = 6;
export const TrustedDomainAuthInformation = 7;
export const TrustedDomainFullInformation = 8;
export const TrustedDomainAuthInformationInternal = 9;
export const TrustedDomainFullInformationInternal = 10;
export const TrustedDomainInformationEx2Internal = 11;
export const TrustedDomainFullInformation2Internal = 12;
export const TrustedDomainSupportedEncryptionTypes = 13;
export const ForestTrustTopLevelName = 0;
export const ForestTrustTopLevelNameEx = 1;
export const ForestTrustDomainInfo = 2;
export const ForestTrustRecordTypeLast = 2;
export const CollisionTdo = 0;
export const CollisionXref = 1;
export const CollisionOther = 2;
export const NegEnumPackagePrefixes = 0;
export const NegGetCallerName = 1;
export const NegTransferCredentials = 2;
export const NegMsgReserved1 = 3;
export const NegCallPackageMax = 4;
export const MsV1_0InteractiveLogon = 2;
export const MsV1_0Lm20Logon = 3;
export const MsV1_0NetworkLogon = 4;
export const MsV1_0SubAuthLogon = 5;
export const MsV1_0WorkstationUnlockLogon = 7;
export const MsV1_0S4ULogon = 12;
export const MsV1_0VirtualLogon = 82;
export const MsV1_0NoElevationLogon = 83;
export const MsV1_0LuidLogon = 84;
export const MsV1_0InteractiveProfile = 2;
export const MsV1_0Lm20LogonProfile = 3;
export const MsV1_0SmartCardProfile = 4;
export const InvalidCredKey = 0;
export const DeprecatedIUMCredKey = 1;
export const DomainUserCredKey = 2;
export const LocalUserCredKey = 3;
export const ExternallySuppliedCredKey = 4;
export const MsvAvEOL = 0;
export const MsvAvNbComputerName = 1;
export const MsvAvNbDomainName = 2;
export const MsvAvDnsComputerName = 3;
export const MsvAvDnsDomainName = 4;
export const MsvAvDnsTreeName = 5;
export const MsvAvFlags = 6;
export const MsvAvTimestamp = 7;
export const MsvAvRestrictions = 8;
export const MsvAvTargetName = 9;
export const MsvAvChannelBindings = 10;
export const MsV1_0Lm20ChallengeRequest = 0;
export const MsV1_0Lm20GetChallengeResponse = 1;
export const MsV1_0EnumerateUsers = 2;
export const MsV1_0GetUserInfo = 3;
export const MsV1_0ReLogonUsers = 4;
export const MsV1_0ChangePassword = 5;
export const MsV1_0ChangeCachedPassword = 6;
export const MsV1_0GenericPassthrough = 7;
export const MsV1_0CacheLogon = 8;
export const MsV1_0SubAuth = 9;
export const MsV1_0DeriveCredential = 10;
export const MsV1_0CacheLookup = 11;
export const MsV1_0SetProcessOption = 12;
export const MsV1_0ConfigLocalAliases = 13;
export const MsV1_0ClearCachedCredentials = 14;
export const MsV1_0LookupToken = 15;
export const MsV1_0ValidateAuth = 16;
export const MsV1_0CacheLookupEx = 17;
export const MsV1_0GetCredentialKey = 18;
export const MsV1_0SetThreadOption = 19;
export const MsV1_0DecryptDpapiMasterKey = 20;
export const MsV1_0GetStrongCredentialKey = 21;
export const MsV1_0TransferCred = 22;
export const MsV1_0ProvisionTbal = 23;
export const MsV1_0DeleteTbalSecrets = 24;
export const KerbInteractiveLogon = 2;
export const KerbSmartCardLogon = 6;
export const KerbWorkstationUnlockLogon = 7;
export const KerbSmartCardUnlockLogon = 8;
export const KerbProxyLogon = 9;
export const KerbTicketLogon = 10;
export const KerbTicketUnlockLogon = 11;
export const KerbS4ULogon = 12;
export const KerbCertificateLogon = 13;
export const KerbCertificateS4ULogon = 14;
export const KerbCertificateUnlockLogon = 15;
export const KerbNoElevationLogon = 83;
export const KerbLuidLogon = 84;
export const KerbInteractiveProfile = 2;
export const KerbSmartCardProfile = 4;
export const KerbTicketProfile = 6;
export const KerbDebugRequestMessage = 0;
export const KerbQueryTicketCacheMessage = 1;
export const KerbChangeMachinePasswordMessage = 2;
export const KerbVerifyPacMessage = 3;
export const KerbRetrieveTicketMessage = 4;
export const KerbUpdateAddressesMessage = 5;
export const KerbPurgeTicketCacheMessage = 6;
export const KerbChangePasswordMessage = 7;
export const KerbRetrieveEncodedTicketMessage = 8;
export const KerbDecryptDataMessage = 9;
export const KerbAddBindingCacheEntryMessage = 10;
export const KerbSetPasswordMessage = 11;
export const KerbSetPasswordExMessage = 12;
export const KerbVerifyCredentialsMessage = 13;
export const KerbQueryTicketCacheExMessage = 14;
export const KerbPurgeTicketCacheExMessage = 15;
export const KerbRefreshSmartcardCredentialsMessage = 16;
export const KerbAddExtraCredentialsMessage = 17;
export const KerbQuerySupplementalCredentialsMessage = 18;
export const KerbTransferCredentialsMessage = 19;
export const KerbQueryTicketCacheEx2Message = 20;
export const KerbSubmitTicketMessage = 21;
export const KerbAddExtraCredentialsExMessage = 22;
export const KerbQueryKdcProxyCacheMessage = 23;
export const KerbPurgeKdcProxyCacheMessage = 24;
export const KerbQueryTicketCacheEx3Message = 25;
export const KerbCleanupMachinePkinitCredsMessage = 26;
export const KerbAddBindingCacheEntryExMessage = 27;
export const KerbQueryBindingCacheMessage = 28;
export const KerbPurgeBindingCacheMessage = 29;
export const KerbPinKdcMessage = 30;
export const KerbUnpinAllKdcsMessage = 31;
export const KerbQueryDomainExtendedPoliciesMessage = 32;
export const KerbQueryS4U2ProxyCacheMessage = 33;
export const KerbRetrieveKeyTabMessage = 34;
export const KerbRefreshPolicyMessage = 35;
export const KerbPrintCloudKerberosDebugMessage = 36;
export const CertHashInfo = 1;
export const Pku2uCertificateS4ULogon = 14;
export const SecApplicationProtocolNegotiationExt_None = 0;
export const SecApplicationProtocolNegotiationExt_NPN = 1;
export const SecApplicationProtocolNegotiationExt_ALPN = 2;
export const SecTrafficSecret_None = 0;
export const SecTrafficSecret_Client = 1;
export const SecTrafficSecret_Server = 2;
export const SecPkgCredClass_None = 0;
export const SecPkgCredClass_Ephemeral = 10;
export const SecPkgCredClass_PersistedGeneric = 20;
export const SecPkgCredClass_PersistedSpecific = 30;
export const SecPkgCredClass_Explicit = 40;
export const SecPkgAttrLastClientTokenYes = 0;
export const SecPkgAttrLastClientTokenNo = 1;
export const SecPkgAttrLastClientTokenMaybe = 2;
export const SecApplicationProtocolNegotiationStatus_None = 0;
export const SecApplicationProtocolNegotiationStatus_Success = 1;
export const SecApplicationProtocolNegotiationStatus_SelectedClientOnly = 2;
export const SecFull = 0;
export const SecService = 1;
export const SecTree = 2;
export const SecDirectory = 3;
export const SecObject = 4;
export const Sasl_AuthZIDForbidden = 0;
export const Sasl_AuthZIDProcessed = 1;
export const SEC_WINNT_AUTH_IDENTITY_ANSI = 1;
export const SEC_WINNT_AUTH_IDENTITY_UNICODE = 2;
export const LsaTokenInformationNull = 0;
export const LsaTokenInformationV1 = 1;
export const LsaTokenInformationV2 = 2;
export const LsaTokenInformationV3 = 3;
export const SecurityAnonymous = 0;
export const SecurityIdentification = 1;
export const SecurityImpersonation = 2;
export const SecurityDelegation = 3;
export const SecpkgGssInfo = 1;
export const SecpkgContextThunks = 2;
export const SecpkgMutualAuthLevel = 3;
export const SecpkgWowClientDll = 4;
export const SecpkgExtraOids = 5;
export const SecpkgMaxInfo = 6;
export const SecpkgNego2Info = 7;
export const NTMS_DRIVESTATE_DISMOUNTED = 0;
export const NTMS_DRIVESTATE_MOUNTED = 1;
export const NTMS_DRIVESTATE_LOADED = 2;
export const NTMS_DRIVESTATE_UNLOADED = 5;
export const NTMS_DRIVESTATE_BEING_CLEANED = 6;
export const NTMS_DRIVESTATE_DISMOUNTABLE = 7;
export const FILE_DEVICE_CD_ROM = 2;
export const FILE_DEVICE_DISK = 7;
export const FILE_DEVICE_TAPE = 31;
export const FILE_DEVICE_DVD = 51;
export const NTMS_LIBRARYTYPE_UNKNOWN = 0;
export const NTMS_LIBRARYTYPE_OFFLINE = 1;
export const NTMS_LIBRARYTYPE_ONLINE = 2;
export const NTMS_LIBRARYTYPE_STANDALONE = 3;
export const NTMS_INVENTORY_NONE = 0;
export const NTMS_INVENTORY_FAST = 1;
export const NTMS_INVENTORY_OMID = 2;
export const NTMS_INVENTORY_DEFAULT = 3;
export const NTMS_INVENTORY_SLOT = 4;
export const NTMS_INVENTORY_STOP = 5;
export const NTMS_INVENTORY_MAX = 6;
export const NTMS_LIBRARYFLAG_FIXEDOFFLINE = 1;
export const NTMS_LIBRARYFLAG_CLEANERPRESENT = 2;
export const NTMS_LIBRARYFLAG_AUTODETECTCHANGE = 4;
export const NTMS_LIBRARYFLAG_IGNORECLEANERUSESREMAINING = 8;
export const NTMS_LIBRARYFLAG_RECOGNIZECLEANERBARCODE = 16;
export const NTMS_DOORSTATE_UNKNOWN = 0;
export const NTMS_DOORSTATE_CLOSED = 1;
export const NTMS_DOORSTATE_OPEN = 2;
export const NTMS_PORTCONTENT_UNKNOWN = 0;
export const NTMS_PORTCONTENT_FULL = 1;
export const NTMS_PORTCONTENT_EMPTY = 2;
export const NTMS_PORTPOSITION_UNKNOWN = 0;
export const NTMS_PORTPOSITION_EXTENDED = 1;
export const NTMS_PORTPOSITION_RETRACTED = 2;
export const NTMS_BARCODESTATE_OK = 1;
export const NTMS_BARCODESTATE_UNREADABLE = 2;
export const NTMS_MEDIASTATE_IDLE = 0;
export const NTMS_MEDIASTATE_INUSE = 1;
export const NTMS_MEDIASTATE_MOUNTED = 2;
export const NTMS_MEDIASTATE_LOADED = 3;
export const NTMS_MEDIASTATE_UNLOADED = 4;
export const NTMS_MEDIASTATE_OPERROR = 5;
export const NTMS_MEDIASTATE_OPREQ = 6;
export const NTMS_PARTSTATE_UNKNOWN = 0;
export const NTMS_PARTSTATE_UNPREPARED = 1;
export const NTMS_PARTSTATE_INCOMPATIBLE = 2;
export const NTMS_PARTSTATE_DECOMMISSIONED = 3;
export const NTMS_PARTSTATE_AVAILABLE = 4;
export const NTMS_PARTSTATE_ALLOCATED = 5;
export const NTMS_PARTSTATE_COMPLETE = 6;
export const NTMS_PARTSTATE_FOREIGN = 7;
export const NTMS_PARTSTATE_IMPORT = 8;
export const NTMS_PARTSTATE_RESERVED = 9;
export const NTMS_MEDIARW_UNKNOWN = 0;
export const NTMS_MEDIARW_REWRITABLE = 1;
export const NTMS_MEDIARW_WRITEONCE = 2;
export const NTMS_MEDIARW_READONLY = 3;
export const NTMS_LM_REMOVE = 0;
export const NTMS_LM_DISABLECHANGER = 1;
export const NTMS_LM_DISABLELIBRARY = 1;
export const NTMS_LM_ENABLECHANGER = 2;
export const NTMS_LM_ENABLELIBRARY = 2;
export const NTMS_LM_DISABLEDRIVE = 3;
export const NTMS_LM_ENABLEDRIVE = 4;
export const NTMS_LM_DISABLEMEDIA = 5;
export const NTMS_LM_ENABLEMEDIA = 6;
export const NTMS_LM_UPDATEOMID = 7;
export const NTMS_LM_INVENTORY = 8;
export const NTMS_LM_DOORACCESS = 9;
export const NTMS_LM_EJECT = 10;
export const NTMS_LM_EJECTCLEANER = 11;
export const NTMS_LM_INJECT = 12;
export const NTMS_LM_INJECTCLEANER = 13;
export const NTMS_LM_PROCESSOMID = 14;
export const NTMS_LM_CLEANDRIVE = 15;
export const NTMS_LM_DISMOUNT = 16;
export const NTMS_LM_MOUNT = 17;
export const NTMS_LM_WRITESCRATCH = 18;
export const NTMS_LM_CLASSIFY = 19;
export const NTMS_LM_RESERVECLEANER = 20;
export const NTMS_LM_RELEASECLEANER = 21;
export const NTMS_LM_MAXWORKITEM = 22;
export const NTMS_LM_QUEUED = 0;
export const NTMS_LM_INPROCESS = 1;
export const NTMS_LM_PASSED = 2;
export const NTMS_LM_FAILED = 3;
export const NTMS_LM_INVALID = 4;
export const NTMS_LM_WAITING = 5;
export const NTMS_LM_DEFERRED = 6;
export const NTMS_LM_DEFFERED = 6;
export const NTMS_LM_CANCELLED = 7;
export const NTMS_LM_STOPPED = 8;
export const NTMS_OPREQ_UNKNOWN = 0;
export const NTMS_OPREQ_NEWMEDIA = 1;
export const NTMS_OPREQ_CLEANER = 2;
export const NTMS_OPREQ_DEVICESERVICE = 3;
export const NTMS_OPREQ_MOVEMEDIA = 4;
export const NTMS_OPREQ_MESSAGE = 5;
export const NTMS_OPSTATE_UNKNOWN = 0;
export const NTMS_OPSTATE_SUBMITTED = 1;
export const NTMS_OPSTATE_ACTIVE = 2;
export const NTMS_OPSTATE_INPROGRESS = 3;
export const NTMS_OPSTATE_REFUSED = 4;
export const NTMS_OPSTATE_COMPLETE = 5;
export const NTMS_UNKNOWN = 0;
export const NTMS_OBJECT = 1;
export const NTMS_CHANGER = 2;
export const NTMS_CHANGER_TYPE = 3;
export const NTMS_COMPUTER = 4;
export const NTMS_DRIVE = 5;
export const NTMS_DRIVE_TYPE = 6;
export const NTMS_IEDOOR = 7;
export const NTMS_IEPORT = 8;
export const NTMS_LIBRARY = 9;
export const NTMS_LIBREQUEST = 10;
export const NTMS_LOGICAL_MEDIA = 11;
export const NTMS_MEDIA_POOL = 12;
export const NTMS_MEDIA_TYPE = 13;
export const NTMS_PARTITION = 14;
export const NTMS_PHYSICAL_MEDIA = 15;
export const NTMS_STORAGESLOT = 16;
export const NTMS_OPREQUEST = 17;
export const NTMS_UI_DESTINATION = 18;
export const NTMS_NUMBER_OF_OBJECT_TYPES = 19;
export const SecPkgCallPackageMinMessage = 1024;
export const SecPkgCallPackagePinDcMessage = 1024;
export const SecPkgCallPackageUnpinAllDcsMessage = 1025;
export const SecPkgCallPackageTransferCredMessage = 1026;
export const SecPkgCallPackageMaxMessage = 1026;
export const SecSessionPrimaryCred = 0;
export const SecNameSamCompatible = 0;
export const SecNameAlternateId = 1;
export const SecNameFlat = 2;
export const SecNameDN = 3;
export const SecNameSPN = 4;
export const CredFetchDefault = 0;
export const CredFetchDPAPI = 1;
export const CredFetchForced = 2;
export const KSecPaged = 0;
export const KSecNonPaged = 1;
export const TlsSignatureAlgorithm_Anonymous = 0;
export const TlsSignatureAlgorithm_Rsa = 1;
export const TlsSignatureAlgorithm_Dsa = 2;
export const TlsSignatureAlgorithm_Ecdsa = 3;
export const TlsHashAlgorithm_None = 0;
export const TlsHashAlgorithm_Md5 = 1;
export const TlsHashAlgorithm_Sha1 = 2;
export const TlsHashAlgorithm_Sha224 = 3;
export const TlsHashAlgorithm_Sha256 = 4;
export const TlsHashAlgorithm_Sha384 = 5;
export const TlsHashAlgorithm_Sha512 = 6;
export const SCH_EXTENSIONS_OPTIONS_NONE = 0;
export const SCH_NO_RECORD_HEADER = 1;
export const NetlogonInteractiveInformation = 1;
export const NetlogonNetworkInformation = 2;
export const NetlogonServiceInformation = 3;
export const NetlogonGenericInformation = 4;
export const NetlogonInteractiveTransitiveInformation = 5;
export const NetlogonNetworkTransitiveInformation = 6;
export const NetlogonServiceTransitiveInformation = 7;
export const TOKENBINDING_TYPE_PROVIDED = 0;
export const TOKENBINDING_TYPE_REFERRED = 1;
export const TOKENBINDING_EXTENSION_FORMAT_UNDEFINED = 0;
export const TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PKCS = 0;
export const TOKENBINDING_KEY_PARAMETERS_TYPE_RSA2048_PSS = 1;
export const TOKENBINDING_KEY_PARAMETERS_TYPE_ECDSAP256 = 2;
export const TOKENBINDING_KEY_PARAMETERS_TYPE_ANYEXISTING = 255;
export const NameUnknown = 0;
export const NameFullyQualifiedDN = 1;
export const NameSamCompatible = 2;
export const NameDisplay = 3;
export const NameUniqueId = 6;
export const NameCanonical = 7;
export const NameUserPrincipal = 8;
export const NameCanonicalEx = 9;
export const NameServicePrincipal = 10;
export const NameDnsDomain = 12;
export const NameGivenName = 13;
export const NameSurname = 14;
export const SL_DATA_NONE = 0;
export const SL_DATA_SZ = 1;
export const SL_DATA_DWORD = 4;
export const SL_DATA_BINARY = 3;
export const SL_DATA_MULTI_SZ = 7;
export const SL_DATA_SUM = 100;
export const SL_ID_APPLICATION = 0;
export const SL_ID_PRODUCT_SKU = 1;
export const SL_ID_LICENSE_FILE = 2;
export const SL_ID_LICENSE = 3;
export const SL_ID_PKEY = 4;
export const SL_ID_ALL_LICENSES = 5;
export const SL_ID_ALL_LICENSE_FILES = 6;
export const SL_ID_STORE_TOKEN = 7;
export const SL_ID_LAST = 8;
export const SL_LICENSING_STATUS_UNLICENSED = 0;
export const SL_LICENSING_STATUS_LICENSED = 1;
export const SL_LICENSING_STATUS_IN_GRACE_PERIOD = 2;
export const SL_LICENSING_STATUS_NOTIFICATION = 3;
export const SL_LICENSING_STATUS_LAST = 4;
export const SL_ACTIVATION_TYPE_DEFAULT = 0;
export const SL_ACTIVATION_TYPE_ACTIVE_DIRECTORY = 1;
export const SL_REFERRALTYPE_SKUID = 0;
export const SL_REFERRALTYPE_APPID = 1;
export const SL_REFERRALTYPE_OVERRIDE_SKUID = 2;
export const SL_REFERRALTYPE_OVERRIDE_APPID = 3;
export const SL_REFERRALTYPE_BEST_MATCH = 4;
export const SL_GEN_STATE_IS_GENUINE = 0;
export const SL_GEN_STATE_INVALID_LICENSE = 1;
export const SL_GEN_STATE_TAMPERED = 2;
export const SL_GEN_STATE_OFFLINE = 3;
export const SL_GEN_STATE_LAST = 4;
export const IDENTITIES_ALL = 0;
export const IDENTITIES_ME_ONLY = 1;
export const IDENTITY_ASSOCIATED = 1;
export const IDENTITY_DISASSOCIATED = 2;
export const IDENTITY_CREATED = 4;
export const IDENTITY_IMPORTED = 8;
export const IDENTITY_DELETED = 16;
export const IDENTITY_PROPCHANGED = 32;
export const IDENTITY_CONNECTED = 64;
export const IDENTITY_DISCONNECTED = 128;
export const IDENTITY_URL_CREATE_ACCOUNT_WIZARD = 0;
export const IDENTITY_URL_SIGN_IN_WIZARD = 1;
export const IDENTITY_URL_CHANGE_PASSWORD_WIZARD = 2;
export const IDENTITY_URL_IFEXISTS_WIZARD = 3;
export const IDENTITY_URL_ACCOUNT_SETTINGS = 4;
export const IDENTITY_URL_RESTORE_WIZARD = 5;
export const IDENTITY_URL_CONNECT_WIZARD = 6;
export const NOT_CONNECTED = 0;
export const CONNECTING = 1;
export const CONNECT_COMPLETED = 2;
export const isolationStateNotRestricted = 1;
export const isolationStateInProbation = 2;
export const isolationStateRestrictedAccess = 3;
export const extendedIsolationStateNoData = 0;
export const extendedIsolationStateTransition = 1;
export const extendedIsolationStateInfected = 2;
export const extendedIsolationStateUnknown = 3;
export const tracingLevelUndefined = 0;
export const tracingLevelBasic = 1;
export const tracingLevelAdvanced = 2;
export const tracingLevelDebug = 3;
export const failureCategoryNone = 0;
export const failureCategoryOther = 1;
export const failureCategoryClientComponent = 2;
export const failureCategoryClientCommunication = 3;
export const failureCategoryServerComponent = 4;
export const failureCategoryServerCommunication = 5;
export const fixupStateSuccess = 0;
export const fixupStateInProgress = 1;
export const fixupStateCouldNotUpdate = 2;
export const napNotifyTypeUnknown = 0;
export const napNotifyTypeServiceState = 1;
export const napNotifyTypeQuarState = 2;
export const remoteConfigTypeMachine = 1;
export const remoteConfigTypeConfigBlob = 2;
export const SaferPolicyLevelList = 1;
export const SaferPolicyEnableTransparentEnforcement = 2;
export const SaferPolicyDefaultLevel = 3;
export const SaferPolicyEvaluateUserScope = 4;
export const SaferPolicyScopeFlags = 5;
export const SaferPolicyDefaultLevelFlags = 6;
export const SaferPolicyAuthenticodeEnabled = 7;
export const SaferObjectLevelId = 1;
export const SaferObjectScopeId = 2;
export const SaferObjectFriendlyName = 3;
export const SaferObjectDescription = 4;
export const SaferObjectBuiltin = 5;
export const SaferObjectDisallowed = 6;
export const SaferObjectDisableMaxPrivilege = 7;
export const SaferObjectInvertDeletedPrivileges = 8;
export const SaferObjectDeletedPrivileges = 9;
export const SaferObjectDefaultOwner = 10;
export const SaferObjectSidsToDisable = 11;
export const SaferObjectRestrictedSidsInverted = 12;
export const SaferObjectRestrictedSidsAdded = 13;
export const SaferObjectAllIdentificationGuids = 14;
export const SaferObjectSingleIdentification = 15;
export const SaferObjectExtendedError = 16;
export const SaferIdentityDefault = 0;
export const SaferIdentityTypeImageName = 1;
export const SaferIdentityTypeImageHash = 2;
export const SaferIdentityTypeUrlZone = 3;
export const SaferIdentityTypeCertificate = 4;
export const SceSvcConfigurationInfo = 0;
export const SceSvcMergedPolicyInfo = 1;
export const SceSvcAnalysisInfo = 2;
export const SceSvcInternalUse = 3;
export const BCRYPT_ECC_PRIME_SHORT_WEIERSTRASS_CURVE = 1;
export const BCRYPT_ECC_PRIME_TWISTED_EDWARDS_CURVE = 2;
export const BCRYPT_ECC_PRIME_MONTGOMERY_CURVE = 3;
export const BCRYPT_NO_CURVE_GENERATION_ALG_ID = 0;
export const DSA_HASH_ALGORITHM_SHA1 = 0;
export const DSA_HASH_ALGORITHM_SHA256 = 1;
export const DSA_HASH_ALGORITHM_SHA512 = 2;
export const DSA_FIPS186_2 = 0;
export const DSA_FIPS186_3 = 1;
export const BCRYPT_HASH_OPERATION_HASH_DATA = 1;
export const BCRYPT_HASH_OPERATION_FINISH_HASH = 2;
export const BCRYPT_OPERATION_TYPE_HASH = 1;
export const KeyTypeOther = 0;
export const KeyTypeVirtualSmartCard = 1;
export const KeyTypePhysicalSmartCard = 2;
export const KeyTypePassport = 3;
export const KeyTypePassportRemote = 4;
export const KeyTypePassportSmartCard = 5;
export const KeyTypeHardware = 6;
export const KeyTypeSoftware = 7;
export const KeyTypeSelfSigned = 8;
export const CRYPT_XML_CHARSET_AUTO = 0;
export const CRYPT_XML_CHARSET_UTF8 = 1;
export const CRYPT_XML_CHARSET_UTF16LE = 2;
export const CRYPT_XML_CHARSET_UTF16BE = 3;
export const CRYPT_XML_PROPERTY_MAX_HEAP_SIZE = 1;
export const CRYPT_XML_PROPERTY_SIGNATURE_LOCATION = 2;
export const CRYPT_XML_PROPERTY_MAX_SIGNATURES = 3;
export const CRYPT_XML_PROPERTY_DOC_DECLARATION = 4;
export const CRYPT_XML_PROPERTY_XML_OUTPUT_CHARSET = 5;
export const CRYPT_XML_KEYINFO_SPEC_NONE = 0;
export const CRYPT_XML_KEYINFO_SPEC_ENCODED = 1;
export const CRYPT_XML_KEYINFO_SPEC_PARAM = 2;
export const Asymmetric = 1;
export const Symmetric = 2;
export const Transform = 3;
export const Hash = 4;
export const None = 1;
export const PKCS7 = 2;
export const Zeros = 3;
export const ANSIX923 = 4;
export const ISO10126 = 5;
export const DirectionEncrypt = 1;
export const DirectionDecrypt = 2;
export const ENUM_SETUPPROP_INVALID = `-1`;
export const ENUM_SETUPPROP_CATYPE = 0;
export const ENUM_SETUPPROP_CAKEYINFORMATION = 1;
export const ENUM_SETUPPROP_INTERACTIVE = 2;
export const ENUM_SETUPPROP_CANAME = 3;
export const ENUM_SETUPPROP_CADSSUFFIX = 4;
export const ENUM_SETUPPROP_VALIDITYPERIOD = 5;
export const ENUM_SETUPPROP_VALIDITYPERIODUNIT = 6;
export const ENUM_SETUPPROP_EXPIRATIONDATE = 7;
export const ENUM_SETUPPROP_PRESERVEDATABASE = 8;
export const ENUM_SETUPPROP_DATABASEDIRECTORY = 9;
export const ENUM_SETUPPROP_LOGDIRECTORY = 10;
export const ENUM_SETUPPROP_SHAREDFOLDER = 11;
export const ENUM_SETUPPROP_PARENTCAMACHINE = 12;
export const ENUM_SETUPPROP_PARENTCANAME = 13;
export const ENUM_SETUPPROP_REQUESTFILE = 14;
export const ENUM_SETUPPROP_WEBCAMACHINE = 15;
export const ENUM_SETUPPROP_WEBCANAME = 16;
export const ENUM_CEPSETUPPROP_USELOCALSYSTEM = 0;
export const ENUM_CEPSETUPPROP_USECHALLENGE = 1;
export const ENUM_CEPSETUPPROP_RANAME_CN = 2;
export const ENUM_CEPSETUPPROP_RANAME_EMAIL = 3;
export const ENUM_CEPSETUPPROP_RANAME_COMPANY = 4;
export const ENUM_CEPSETUPPROP_RANAME_DEPT = 5;
export const ENUM_CEPSETUPPROP_RANAME_CITY = 6;
export const ENUM_CEPSETUPPROP_RANAME_STATE = 7;
export const ENUM_CEPSETUPPROP_RANAME_COUNTRY = 8;
export const ENUM_CEPSETUPPROP_SIGNINGKEYINFORMATION = 9;
export const ENUM_CEPSETUPPROP_EXCHANGEKEYINFORMATION = 10;
export const ENUM_CEPSETUPPROP_CAINFORMATION = 11;
export const ENUM_CEPSETUPPROP_MSCEPURL = 12;
export const ENUM_CEPSETUPPROP_CHALLENGEURL = 13;
export const ENUM_CESSETUPPROP_USE_IISAPPPOOLIDENTITY = 0;
export const ENUM_CESSETUPPROP_CACONFIG = 1;
export const ENUM_CESSETUPPROP_AUTHENTICATION = 2;
export const ENUM_CESSETUPPROP_SSLCERTHASH = 3;
export const ENUM_CESSETUPPROP_URL = 4;
export const ENUM_CESSETUPPROP_RENEWALONLY = 5;
export const ENUM_CESSETUPPROP_ALLOW_KEYBASED_RENEWAL = 6;
export const ENUM_CEPSETUPPROP_AUTHENTICATION = 0;
export const ENUM_CEPSETUPPROP_SSLCERTHASH = 1;
export const ENUM_CEPSETUPPROP_URL = 2;
export const ENUM_CEPSETUPPROP_KEYBASED_RENEWAL = 3;
export const ENUM_PERIOD_INVALID = `-1`;
export const ENUM_PERIOD_SECONDS = 0;
export const ENUM_PERIOD_MINUTES = 1;
export const ENUM_PERIOD_HOURS = 2;
export const ENUM_PERIOD_DAYS = 3;
export const ENUM_PERIOD_WEEKS = 4;
export const ENUM_PERIOD_MONTHS = 5;
export const ENUM_PERIOD_YEARS = 6;
export const NoData = 0;
export const CurrentUserData = 1;
export const AllUserData = 2;
export const Success = 0;
export const LicenseKeyNotFound = 1;
export const LicenseKeyUnprotected = 2;
export const LicenseKeyCorrupted = 3;
export const LicenseKeyAlreadyExists = 4;
export const TPMVSC_ATTESTATION_NONE = 0;
export const TPMVSC_ATTESTATION_AIK_ONLY = 1;
export const TPMVSC_ATTESTATION_AIK_AND_CERTIFICATE = 2;
export const TPMVSCMGR_STATUS_VTPMSMARTCARD_INITIALIZING = 0;
export const TPMVSCMGR_STATUS_VTPMSMARTCARD_CREATING = 1;
export const TPMVSCMGR_STATUS_VTPMSMARTCARD_DESTROYING = 2;
export const TPMVSCMGR_STATUS_VGIDSSIMULATOR_INITIALIZING = 3;
export const TPMVSCMGR_STATUS_VGIDSSIMULATOR_CREATING = 4;
export const TPMVSCMGR_STATUS_VGIDSSIMULATOR_DESTROYING = 5;
export const TPMVSCMGR_STATUS_VREADER_INITIALIZING = 6;
export const TPMVSCMGR_STATUS_VREADER_CREATING = 7;
export const TPMVSCMGR_STATUS_VREADER_DESTROYING = 8;
export const TPMVSCMGR_STATUS_GENERATE_WAITING = 9;
export const TPMVSCMGR_STATUS_GENERATE_AUTHENTICATING = 10;
export const TPMVSCMGR_STATUS_GENERATE_RUNNING = 11;
export const TPMVSCMGR_STATUS_CARD_CREATED = 12;
export const TPMVSCMGR_STATUS_CARD_DESTROYED = 13;
export const TPMVSCMGR_ERROR_IMPERSONATION = 0;
export const TPMVSCMGR_ERROR_PIN_COMPLEXITY = 1;
export const TPMVSCMGR_ERROR_READER_COUNT_LIMIT = 2;
export const TPMVSCMGR_ERROR_TERMINAL_SERVICES_SESSION = 3;
export const TPMVSCMGR_ERROR_VTPMSMARTCARD_INITIALIZE = 4;
export const TPMVSCMGR_ERROR_VTPMSMARTCARD_CREATE = 5;
export const TPMVSCMGR_ERROR_VTPMSMARTCARD_DESTROY = 6;
export const TPMVSCMGR_ERROR_VGIDSSIMULATOR_INITIALIZE = 7;
export const TPMVSCMGR_ERROR_VGIDSSIMULATOR_CREATE = 8;
export const TPMVSCMGR_ERROR_VGIDSSIMULATOR_DESTROY = 9;
export const TPMVSCMGR_ERROR_VGIDSSIMULATOR_WRITE_PROPERTY = 10;
export const TPMVSCMGR_ERROR_VGIDSSIMULATOR_READ_PROPERTY = 11;
export const TPMVSCMGR_ERROR_VREADER_INITIALIZE = 12;
export const TPMVSCMGR_ERROR_VREADER_CREATE = 13;
export const TPMVSCMGR_ERROR_VREADER_DESTROY = 14;
export const TPMVSCMGR_ERROR_GENERATE_LOCATE_READER = 15;
export const TPMVSCMGR_ERROR_GENERATE_FILESYSTEM = 16;
export const TPMVSCMGR_ERROR_CARD_CREATE = 17;
export const TPMVSCMGR_ERROR_CARD_DESTROY = 18;
export const WinNullSid = 0;
export const WinWorldSid = 1;
export const WinLocalSid = 2;
export const WinCreatorOwnerSid = 3;
export const WinCreatorGroupSid = 4;
export const WinCreatorOwnerServerSid = 5;
export const WinCreatorGroupServerSid = 6;
export const WinNtAuthoritySid = 7;
export const WinDialupSid = 8;
export const WinNetworkSid = 9;
export const WinBatchSid = 10;
export const WinInteractiveSid = 11;
export const WinServiceSid = 12;
export const WinAnonymousSid = 13;
export const WinProxySid = 14;
export const WinEnterpriseControllersSid = 15;
export const WinSelfSid = 16;
export const WinAuthenticatedUserSid = 17;
export const WinRestrictedCodeSid = 18;
export const WinTerminalServerSid = 19;
export const WinRemoteLogonIdSid = 20;
export const WinLogonIdsSid = 21;
export const WinLocalSystemSid = 22;
export const WinLocalServiceSid = 23;
export const WinNetworkServiceSid = 24;
export const WinBuiltinDomainSid = 25;
export const WinBuiltinAdministratorsSid = 26;
export const WinBuiltinUsersSid = 27;
export const WinBuiltinGuestsSid = 28;
export const WinBuiltinPowerUsersSid = 29;
export const WinBuiltinAccountOperatorsSid = 30;
export const WinBuiltinSystemOperatorsSid = 31;
export const WinBuiltinPrintOperatorsSid = 32;
export const WinBuiltinBackupOperatorsSid = 33;
export const WinBuiltinReplicatorSid = 34;
export const WinBuiltinPreWindows2000CompatibleAccessSid = 35;
export const WinBuiltinRemoteDesktopUsersSid = 36;
export const WinBuiltinNetworkConfigurationOperatorsSid = 37;
export const WinAccountAdministratorSid = 38;
export const WinAccountGuestSid = 39;
export const WinAccountKrbtgtSid = 40;
export const WinAccountDomainAdminsSid = 41;
export const WinAccountDomainUsersSid = 42;
export const WinAccountDomainGuestsSid = 43;
export const WinAccountComputersSid = 44;
export const WinAccountControllersSid = 45;
export const WinAccountCertAdminsSid = 46;
export const WinAccountSchemaAdminsSid = 47;
export const WinAccountEnterpriseAdminsSid = 48;
export const WinAccountPolicyAdminsSid = 49;
export const WinAccountRasAndIasServersSid = 50;
export const WinNTLMAuthenticationSid = 51;
export const WinDigestAuthenticationSid = 52;
export const WinSChannelAuthenticationSid = 53;
export const WinThisOrganizationSid = 54;
export const WinOtherOrganizationSid = 55;
export const WinBuiltinIncomingForestTrustBuildersSid = 56;
export const WinBuiltinPerfMonitoringUsersSid = 57;
export const WinBuiltinPerfLoggingUsersSid = 58;
export const WinBuiltinAuthorizationAccessSid = 59;
export const WinBuiltinTerminalServerLicenseServersSid = 60;
export const WinBuiltinDCOMUsersSid = 61;
export const WinBuiltinIUsersSid = 62;
export const WinIUserSid = 63;
export const WinBuiltinCryptoOperatorsSid = 64;
export const WinUntrustedLabelSid = 65;
export const WinLowLabelSid = 66;
export const WinMediumLabelSid = 67;
export const WinHighLabelSid = 68;
export const WinSystemLabelSid = 69;
export const WinWriteRestrictedCodeSid = 70;
export const WinCreatorOwnerRightsSid = 71;
export const WinCacheablePrincipalsGroupSid = 72;
export const WinNonCacheablePrincipalsGroupSid = 73;
export const WinEnterpriseReadonlyControllersSid = 74;
export const WinAccountReadonlyControllersSid = 75;
export const WinBuiltinEventLogReadersGroup = 76;
export const WinNewEnterpriseReadonlyControllersSid = 77;
export const WinBuiltinCertSvcDComAccessGroup = 78;
export const WinMediumPlusLabelSid = 79;
export const WinLocalLogonSid = 80;
export const WinConsoleLogonSid = 81;
export const WinThisOrganizationCertificateSid = 82;
export const WinApplicationPackageAuthoritySid = 83;
export const WinBuiltinAnyPackageSid = 84;
export const WinCapabilityInternetClientSid = 85;
export const WinCapabilityInternetClientServerSid = 86;
export const WinCapabilityPrivateNetworkClientServerSid = 87;
export const WinCapabilityPicturesLibrarySid = 88;
export const WinCapabilityVideosLibrarySid = 89;
export const WinCapabilityMusicLibrarySid = 90;
export const WinCapabilityDocumentsLibrarySid = 91;
export const WinCapabilitySharedUserCertificatesSid = 92;
export const WinCapabilityEnterpriseAuthenticationSid = 93;
export const WinCapabilityRemovableStorageSid = 94;
export const WinBuiltinRDSRemoteAccessServersSid = 95;
export const WinBuiltinRDSEndpointServersSid = 96;
export const WinBuiltinRDSManagementServersSid = 97;
export const WinUserModeDriversSid = 98;
export const WinBuiltinHyperVAdminsSid = 99;
export const WinAccountCloneableControllersSid = 100;
export const WinBuiltinAccessControlAssistanceOperatorsSid = 101;
export const WinBuiltinRemoteManagementUsersSid = 102;
export const WinAuthenticationAuthorityAssertedSid = 103;
export const WinAuthenticationServiceAssertedSid = 104;
export const WinLocalAccountSid = 105;
export const WinLocalAccountAndAdministratorSid = 106;
export const WinAccountProtectedUsersSid = 107;
export const WinCapabilityAppointmentsSid = 108;
export const WinCapabilityContactsSid = 109;
export const WinAccountDefaultSystemManagedSid = 110;
export const WinBuiltinDefaultSystemManagedGroupSid = 111;
export const WinBuiltinStorageReplicaAdminsSid = 112;
export const WinAccountKeyAdminsSid = 113;
export const WinAccountEnterpriseKeyAdminsSid = 114;
export const WinAuthenticationKeyTrustSid = 115;
export const WinAuthenticationKeyPropertyMFASid = 116;
export const WinAuthenticationKeyPropertyAttestationSid = 117;
export const WinAuthenticationFreshKeyAuthSid = 118;
export const WinBuiltinDeviceOwnersSid = 119;
export const AclRevisionInformation = 1;
export const AclSizeInformation = 2;
export const AuditEventObjectAccess = 0;
export const AuditEventDirectoryServiceAccess = 1;
export const TokenPrimary = 1;
export const TokenImpersonation = 2;
export const TokenElevationTypeDefault = 1;
export const TokenElevationTypeFull = 2;
export const TokenElevationTypeLimited = 3;
export const TokenUser = 1;
export const TokenGroups = 2;
export const TokenPrivileges = 3;
export const TokenOwner = 4;
export const TokenPrimaryGroup = 5;
export const TokenDefaultDacl = 6;
export const TokenSource = 7;
export const TokenType = 8;
export const TokenImpersonationLevel = 9;
export const TokenStatistics = 10;
export const TokenRestrictedSids = 11;
export const TokenSessionId = 12;
export const TokenGroupsAndPrivileges = 13;
export const TokenSessionReference = 14;
export const TokenSandBoxInert = 15;
export const TokenAuditPolicy = 16;
export const TokenOrigin = 17;
export const TokenElevationType = 18;
export const TokenLinkedToken = 19;
export const TokenElevation = 20;
export const TokenHasRestrictions = 21;
export const TokenAccessInformation = 22;
export const TokenVirtualizationAllowed = 23;
export const TokenVirtualizationEnabled = 24;
export const TokenIntegrityLevel = 25;
export const TokenUIAccess = 26;
export const TokenMandatoryPolicy = 27;
export const TokenLogonSid = 28;
export const TokenIsAppContainer = 29;
export const TokenCapabilities = 30;
export const TokenAppContainerSid = 31;
export const TokenAppContainerNumber = 32;
export const TokenUserClaimAttributes = 33;
export const TokenDeviceClaimAttributes = 34;
export const TokenRestrictedUserClaimAttributes = 35;
export const TokenRestrictedDeviceClaimAttributes = 36;
export const TokenDeviceGroups = 37;
export const TokenRestrictedDeviceGroups = 38;
export const TokenSecurityAttributes = 39;
export const TokenIsRestricted = 40;
export const TokenProcessTrustLevel = 41;
export const TokenPrivateNameSpace = 42;
export const TokenSingletonAttributes = 43;
export const TokenBnoIsolation = 44;
export const TokenChildProcessFlags = 45;
export const TokenIsLessPrivilegedAppContainer = 46;
export const TokenIsSandboxed = 47;
export const MaxTokenInfoClass = 48;
export const MandatoryLevelUntrusted = 0;
export const MandatoryLevelLow = 1;
export const MandatoryLevelMedium = 2;
export const MandatoryLevelHigh = 3;
export const MandatoryLevelSystem = 4;
export const MandatoryLevelSecureProcess = 5;
export const MandatoryLevelCount = 6;

// Structs

/**
 * Windows.Win32.Security.Authorization.OBJECTS_AND_SID (size: 32)
 */
export interface OBJECTS_AND_SID {
  /** Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE_FLAGS */
  ObjectsPresent: SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
  /** System.Guid */
  ObjectTypeGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  InheritedObjectTypeGuid: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pSid: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOBJECTS_AND_SID = 32;

export function allocOBJECTS_AND_SID(data?: Partial<OBJECTS_AND_SID>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECTS_AND_SID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ObjectsPresent !== undefined) view.setUint32(0, Number(data.ObjectsPresent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ObjectTypeGuid !== undefined) view.setBigUint64(8, data.ObjectTypeGuid === null ? 0n : BigInt(util.toPointer(data.ObjectTypeGuid)), true);
  // 0x10: pointer
  if (data?.InheritedObjectTypeGuid !== undefined) view.setBigUint64(16, data.InheritedObjectTypeGuid === null ? 0n : BigInt(util.toPointer(data.InheritedObjectTypeGuid)), true);
  // 0x18: pointer
  if (data?.pSid !== undefined) view.setBigUint64(24, data.pSid === null ? 0n : BigInt(util.toPointer(data.pSid)), true);
  return buf;
}

export class OBJECTS_AND_SIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ObjectsPresent(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ObjectTypeGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get InheritedObjectTypeGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pSid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ObjectsPresent(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ObjectTypeGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set InheritedObjectTypeGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pSid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Security.Authorization.OBJECTS_AND_NAME_A (size: 32)
 */
export interface OBJECTS_AND_NAME_A {
  /** Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE_FLAGS */
  ObjectsPresent: SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
  /** Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */
  ObjectType: SE_OBJECT_TYPE;
  /** Windows.Win32.Foundation.PSTR */
  ObjectTypeName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  InheritedObjectTypeName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ptstrName: string | null | Uint8Array;
}

export const sizeofOBJECTS_AND_NAME_A = 32;

export function allocOBJECTS_AND_NAME_A(data?: Partial<OBJECTS_AND_NAME_A>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECTS_AND_NAME_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ObjectsPresent !== undefined) view.setUint32(0, Number(data.ObjectsPresent), true);
  // 0x04: i32
  if (data?.ObjectType !== undefined) view.setInt32(4, Number(data.ObjectType), true);
  // 0x08: buffer
  if (data?.ObjectTypeName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.ObjectTypeName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.InheritedObjectTypeName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.InheritedObjectTypeName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.ptstrName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.ptstrName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export class OBJECTS_AND_NAME_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ObjectsPresent(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ObjectType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: buffer
  get ObjectTypeName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get InheritedObjectTypeName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get ptstrName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ObjectsPresent(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ObjectType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: buffer
  set ObjectTypeName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set InheritedObjectTypeName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set ptstrName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Security.Authorization.OBJECTS_AND_NAME_W (size: 32)
 */
export interface OBJECTS_AND_NAME_W {
  /** Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE_FLAGS */
  ObjectsPresent: SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
  /** Windows.Win32.Security.Authorization.SE_OBJECT_TYPE */
  ObjectType: SE_OBJECT_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  ObjectTypeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  InheritedObjectTypeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ptstrName: string | null | Uint8Array | Uint16Array;
}

export const sizeofOBJECTS_AND_NAME_W = 32;

export function allocOBJECTS_AND_NAME_W(data?: Partial<OBJECTS_AND_NAME_W>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECTS_AND_NAME_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ObjectsPresent !== undefined) view.setUint32(0, Number(data.ObjectsPresent), true);
  // 0x04: i32
  if (data?.ObjectType !== undefined) view.setInt32(4, Number(data.ObjectType), true);
  // 0x08: buffer
  if (data?.ObjectTypeName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ObjectTypeName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.InheritedObjectTypeName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.InheritedObjectTypeName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.ptstrName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ptstrName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export class OBJECTS_AND_NAME_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ObjectsPresent(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ObjectType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: buffer
  get ObjectTypeName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get InheritedObjectTypeName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get ptstrName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ObjectsPresent(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ObjectType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: buffer
  set ObjectTypeName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set InheritedObjectTypeName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set ptstrName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.TRUSTEE_A (size: 32)
 */
export interface TRUSTEE_A {
  /** ptr */
  pMultipleTrustee: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Authorization.MULTIPLE_TRUSTEE_OPERATION */
  MultipleTrusteeOperation: MULTIPLE_TRUSTEE_OPERATION;
  /** Windows.Win32.Security.Authorization.TRUSTEE_FORM */
  TrusteeForm: TRUSTEE_FORM;
  /** Windows.Win32.Security.Authorization.TRUSTEE_TYPE */
  TrusteeType: TRUSTEE_TYPE;
  /** Windows.Win32.Foundation.PSTR */
  ptstrName: string | null | Uint8Array;
}

export const sizeofTRUSTEE_A = 32;

export function allocTRUSTEE_A(data?: Partial<TRUSTEE_A>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTEE_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pMultipleTrustee !== undefined) view.setBigUint64(0, data.pMultipleTrustee === null ? 0n : BigInt(util.toPointer(data.pMultipleTrustee)), true);
  // 0x08: i32
  if (data?.MultipleTrusteeOperation !== undefined) view.setInt32(8, Number(data.MultipleTrusteeOperation), true);
  // 0x0c: i32
  if (data?.TrusteeForm !== undefined) view.setInt32(12, Number(data.TrusteeForm), true);
  // 0x10: i32
  if (data?.TrusteeType !== undefined) view.setInt32(16, Number(data.TrusteeType), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.ptstrName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.ptstrName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export class TRUSTEE_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pMultipleTrustee(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get MultipleTrusteeOperation(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get TrusteeForm(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get TrusteeType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get ptstrName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pMultipleTrustee(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set MultipleTrusteeOperation(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set TrusteeForm(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set TrusteeType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set ptstrName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.TRUSTEE_W (size: 32)
 */
export interface TRUSTEE_W {
  /** ptr */
  pMultipleTrustee: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Authorization.MULTIPLE_TRUSTEE_OPERATION */
  MultipleTrusteeOperation: MULTIPLE_TRUSTEE_OPERATION;
  /** Windows.Win32.Security.Authorization.TRUSTEE_FORM */
  TrusteeForm: TRUSTEE_FORM;
  /** Windows.Win32.Security.Authorization.TRUSTEE_TYPE */
  TrusteeType: TRUSTEE_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  ptstrName: string | null | Uint8Array | Uint16Array;
}

export const sizeofTRUSTEE_W = 32;

export function allocTRUSTEE_W(data?: Partial<TRUSTEE_W>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTEE_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pMultipleTrustee !== undefined) view.setBigUint64(0, data.pMultipleTrustee === null ? 0n : BigInt(util.toPointer(data.pMultipleTrustee)), true);
  // 0x08: i32
  if (data?.MultipleTrusteeOperation !== undefined) view.setInt32(8, Number(data.MultipleTrusteeOperation), true);
  // 0x0c: i32
  if (data?.TrusteeForm !== undefined) view.setInt32(12, Number(data.TrusteeForm), true);
  // 0x10: i32
  if (data?.TrusteeType !== undefined) view.setInt32(16, Number(data.TrusteeType), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.ptstrName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ptstrName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export class TRUSTEE_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pMultipleTrustee(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get MultipleTrusteeOperation(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get TrusteeForm(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get TrusteeType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get ptstrName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pMultipleTrustee(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set MultipleTrusteeOperation(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set TrusteeForm(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set TrusteeType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set ptstrName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.EXPLICIT_ACCESS_A (size: 24)
 */
export interface EXPLICIT_ACCESS_A {
  /** u32 */
  grfAccessPermissions: number;
  /** Windows.Win32.Security.Authorization.ACCESS_MODE */
  grfAccessMode: ACCESS_MODE;
  /** Windows.Win32.Security.ACE_FLAGS */
  grfInheritance: ACE_FLAGS;
  /** Windows.Win32.Security.Authorization.TRUSTEE_A */
  Trustee: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEXPLICIT_ACCESS_A = 24;

export function allocEXPLICIT_ACCESS_A(data?: Partial<EXPLICIT_ACCESS_A>): Uint8Array {
  const buf = new Uint8Array(sizeofEXPLICIT_ACCESS_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.grfAccessPermissions !== undefined) view.setUint32(0, Number(data.grfAccessPermissions), true);
  // 0x04: i32
  if (data?.grfAccessMode !== undefined) view.setInt32(4, Number(data.grfAccessMode), true);
  // 0x08: u32
  if (data?.grfInheritance !== undefined) view.setUint32(8, Number(data.grfInheritance), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Trustee !== undefined) view.setBigUint64(16, data.Trustee === null ? 0n : BigInt(util.toPointer(data.Trustee)), true);
  return buf;
}

export class EXPLICIT_ACCESS_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get grfAccessPermissions(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get grfAccessMode(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get grfInheritance(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Trustee(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set grfAccessPermissions(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set grfAccessMode(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set grfInheritance(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Trustee(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.EXPLICIT_ACCESS_W (size: 24)
 */
export interface EXPLICIT_ACCESS_W {
  /** u32 */
  grfAccessPermissions: number;
  /** Windows.Win32.Security.Authorization.ACCESS_MODE */
  grfAccessMode: ACCESS_MODE;
  /** Windows.Win32.Security.ACE_FLAGS */
  grfInheritance: ACE_FLAGS;
  /** Windows.Win32.Security.Authorization.TRUSTEE_W */
  Trustee: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEXPLICIT_ACCESS_W = 24;

export function allocEXPLICIT_ACCESS_W(data?: Partial<EXPLICIT_ACCESS_W>): Uint8Array {
  const buf = new Uint8Array(sizeofEXPLICIT_ACCESS_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.grfAccessPermissions !== undefined) view.setUint32(0, Number(data.grfAccessPermissions), true);
  // 0x04: i32
  if (data?.grfAccessMode !== undefined) view.setInt32(4, Number(data.grfAccessMode), true);
  // 0x08: u32
  if (data?.grfInheritance !== undefined) view.setUint32(8, Number(data.grfInheritance), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Trustee !== undefined) view.setBigUint64(16, data.Trustee === null ? 0n : BigInt(util.toPointer(data.Trustee)), true);
  return buf;
}

export class EXPLICIT_ACCESS_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get grfAccessPermissions(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get grfAccessMode(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get grfInheritance(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Trustee(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set grfAccessPermissions(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set grfAccessMode(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set grfInheritance(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Trustee(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESS_ENTRYA (size: 32)
 */
export interface ACTRL_ACCESS_ENTRYA {
  /** Windows.Win32.Security.Authorization.TRUSTEE_A */
  Trustee: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.ACTRL_ACCESS_ENTRY_ACCESS_FLAGS */
  fAccessFlags: ACTRL_ACCESS_ENTRY_ACCESS_FLAGS;
  /** u32 */
  Access: number;
  /** u32 */
  ProvSpecificAccess: number;
  /** Windows.Win32.Security.ACE_FLAGS */
  Inheritance: ACE_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  lpInheritProperty: string | null | Uint8Array;
}

export const sizeofACTRL_ACCESS_ENTRYA = 32;

export function allocACTRL_ACCESS_ENTRYA(data?: Partial<ACTRL_ACCESS_ENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESS_ENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Trustee !== undefined) view.setBigUint64(0, data.Trustee === null ? 0n : BigInt(util.toPointer(data.Trustee)), true);
  // 0x08: u32
  if (data?.fAccessFlags !== undefined) view.setUint32(8, Number(data.fAccessFlags), true);
  // 0x0c: u32
  if (data?.Access !== undefined) view.setUint32(12, Number(data.Access), true);
  // 0x10: u32
  if (data?.ProvSpecificAccess !== undefined) view.setUint32(16, Number(data.ProvSpecificAccess), true);
  // 0x14: u32
  if (data?.Inheritance !== undefined) view.setUint32(20, Number(data.Inheritance), true);
  // 0x18: buffer
  if (data?.lpInheritProperty !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpInheritProperty);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export class ACTRL_ACCESS_ENTRYAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Trustee(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get fAccessFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Access(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ProvSpecificAccess(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Inheritance(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: buffer
  get lpInheritProperty(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Trustee(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set fAccessFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Access(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ProvSpecificAccess(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Inheritance(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: buffer
  set lpInheritProperty(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESS_ENTRYW (size: 32)
 */
export interface ACTRL_ACCESS_ENTRYW {
  /** Windows.Win32.Security.Authorization.TRUSTEE_W */
  Trustee: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.ACTRL_ACCESS_ENTRY_ACCESS_FLAGS */
  fAccessFlags: ACTRL_ACCESS_ENTRY_ACCESS_FLAGS;
  /** u32 */
  Access: number;
  /** u32 */
  ProvSpecificAccess: number;
  /** Windows.Win32.Security.ACE_FLAGS */
  Inheritance: ACE_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  lpInheritProperty: string | null | Uint8Array | Uint16Array;
}

export const sizeofACTRL_ACCESS_ENTRYW = 32;

export function allocACTRL_ACCESS_ENTRYW(data?: Partial<ACTRL_ACCESS_ENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESS_ENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Trustee !== undefined) view.setBigUint64(0, data.Trustee === null ? 0n : BigInt(util.toPointer(data.Trustee)), true);
  // 0x08: u32
  if (data?.fAccessFlags !== undefined) view.setUint32(8, Number(data.fAccessFlags), true);
  // 0x0c: u32
  if (data?.Access !== undefined) view.setUint32(12, Number(data.Access), true);
  // 0x10: u32
  if (data?.ProvSpecificAccess !== undefined) view.setUint32(16, Number(data.ProvSpecificAccess), true);
  // 0x14: u32
  if (data?.Inheritance !== undefined) view.setUint32(20, Number(data.Inheritance), true);
  // 0x18: buffer
  if (data?.lpInheritProperty !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpInheritProperty);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export class ACTRL_ACCESS_ENTRYWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Trustee(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get fAccessFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Access(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ProvSpecificAccess(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Inheritance(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: buffer
  get lpInheritProperty(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Trustee(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set fAccessFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Access(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ProvSpecificAccess(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Inheritance(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: buffer
  set lpInheritProperty(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESS_ENTRY_LISTA (size: 16)
 */
export interface ACTRL_ACCESS_ENTRY_LISTA {
  /** u32 */
  cEntries: number;
  /** ptr */
  pAccessList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofACTRL_ACCESS_ENTRY_LISTA = 16;

export function allocACTRL_ACCESS_ENTRY_LISTA(data?: Partial<ACTRL_ACCESS_ENTRY_LISTA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESS_ENTRY_LISTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pAccessList !== undefined) view.setBigUint64(8, data.pAccessList === null ? 0n : BigInt(util.toPointer(data.pAccessList)), true);
  return buf;
}

export class ACTRL_ACCESS_ENTRY_LISTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pAccessList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pAccessList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESS_ENTRY_LISTW (size: 16)
 */
export interface ACTRL_ACCESS_ENTRY_LISTW {
  /** u32 */
  cEntries: number;
  /** ptr */
  pAccessList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofACTRL_ACCESS_ENTRY_LISTW = 16;

export function allocACTRL_ACCESS_ENTRY_LISTW(data?: Partial<ACTRL_ACCESS_ENTRY_LISTW>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESS_ENTRY_LISTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pAccessList !== undefined) view.setBigUint64(8, data.pAccessList === null ? 0n : BigInt(util.toPointer(data.pAccessList)), true);
  return buf;
}

export class ACTRL_ACCESS_ENTRY_LISTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pAccessList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pAccessList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_PROPERTY_ENTRYA (size: 24)
 */
export interface ACTRL_PROPERTY_ENTRYA {
  /** Windows.Win32.Foundation.PSTR */
  lpProperty: string | null | Uint8Array;
  /** ptr */
  pAccessEntryList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fListFlags: number;
}

export const sizeofACTRL_PROPERTY_ENTRYA = 24;

export function allocACTRL_PROPERTY_ENTRYA(data?: Partial<ACTRL_PROPERTY_ENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_PROPERTY_ENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpProperty !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpProperty);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pAccessEntryList !== undefined) view.setBigUint64(8, data.pAccessEntryList === null ? 0n : BigInt(util.toPointer(data.pAccessEntryList)), true);
  // 0x10: u32
  if (data?.fListFlags !== undefined) view.setUint32(16, Number(data.fListFlags), true);
  // 0x14: pad4
  return buf;
}

export class ACTRL_PROPERTY_ENTRYAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpProperty(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pAccessEntryList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get fListFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set lpProperty(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set pAccessEntryList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set fListFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_PROPERTY_ENTRYW (size: 24)
 */
export interface ACTRL_PROPERTY_ENTRYW {
  /** Windows.Win32.Foundation.PWSTR */
  lpProperty: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pAccessEntryList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fListFlags: number;
}

export const sizeofACTRL_PROPERTY_ENTRYW = 24;

export function allocACTRL_PROPERTY_ENTRYW(data?: Partial<ACTRL_PROPERTY_ENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_PROPERTY_ENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpProperty !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpProperty);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pAccessEntryList !== undefined) view.setBigUint64(8, data.pAccessEntryList === null ? 0n : BigInt(util.toPointer(data.pAccessEntryList)), true);
  // 0x10: u32
  if (data?.fListFlags !== undefined) view.setUint32(16, Number(data.fListFlags), true);
  // 0x14: pad4
  return buf;
}

export class ACTRL_PROPERTY_ENTRYWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpProperty(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pAccessEntryList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get fListFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set lpProperty(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set pAccessEntryList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set fListFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESSA (size: 16)
 */
export interface ACTRL_ACCESSA {
  /** u32 */
  cEntries: number;
  /** ptr */
  pPropertyAccessList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofACTRL_ACCESSA = 16;

export function allocACTRL_ACCESSA(data?: Partial<ACTRL_ACCESSA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPropertyAccessList !== undefined) view.setBigUint64(8, data.pPropertyAccessList === null ? 0n : BigInt(util.toPointer(data.pPropertyAccessList)), true);
  return buf;
}

export class ACTRL_ACCESSAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pPropertyAccessList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pPropertyAccessList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESSW (size: 16)
 */
export interface ACTRL_ACCESSW {
  /** u32 */
  cEntries: number;
  /** ptr */
  pPropertyAccessList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofACTRL_ACCESSW = 16;

export function allocACTRL_ACCESSW(data?: Partial<ACTRL_ACCESSW>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPropertyAccessList !== undefined) view.setBigUint64(8, data.pPropertyAccessList === null ? 0n : BigInt(util.toPointer(data.pPropertyAccessList)), true);
  return buf;
}

export class ACTRL_ACCESSWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pPropertyAccessList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pPropertyAccessList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.TRUSTEE_ACCESSA (size: 24)
 */
export interface TRUSTEE_ACCESSA {
  /** Windows.Win32.Foundation.PSTR */
  lpProperty: string | null | Uint8Array;
  /** u32 */
  Access: number;
  /** u32 */
  fAccessFlags: number;
  /** u32 */
  fReturnedAccess: number;
}

export const sizeofTRUSTEE_ACCESSA = 24;

export function allocTRUSTEE_ACCESSA(data?: Partial<TRUSTEE_ACCESSA>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTEE_ACCESSA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpProperty !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpProperty);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Access !== undefined) view.setUint32(8, Number(data.Access), true);
  // 0x0c: u32
  if (data?.fAccessFlags !== undefined) view.setUint32(12, Number(data.fAccessFlags), true);
  // 0x10: u32
  if (data?.fReturnedAccess !== undefined) view.setUint32(16, Number(data.fReturnedAccess), true);
  // 0x14: pad4
  return buf;
}

export class TRUSTEE_ACCESSAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpProperty(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Access(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get fAccessFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get fReturnedAccess(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set lpProperty(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set Access(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set fAccessFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set fReturnedAccess(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authorization.TRUSTEE_ACCESSW (size: 24)
 */
export interface TRUSTEE_ACCESSW {
  /** Windows.Win32.Foundation.PWSTR */
  lpProperty: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Access: number;
  /** u32 */
  fAccessFlags: number;
  /** u32 */
  fReturnedAccess: number;
}

export const sizeofTRUSTEE_ACCESSW = 24;

export function allocTRUSTEE_ACCESSW(data?: Partial<TRUSTEE_ACCESSW>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTEE_ACCESSW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpProperty !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpProperty);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Access !== undefined) view.setUint32(8, Number(data.Access), true);
  // 0x0c: u32
  if (data?.fAccessFlags !== undefined) view.setUint32(12, Number(data.fAccessFlags), true);
  // 0x10: u32
  if (data?.fReturnedAccess !== undefined) view.setUint32(16, Number(data.fReturnedAccess), true);
  // 0x14: pad4
  return buf;
}

export class TRUSTEE_ACCESSWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpProperty(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Access(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get fAccessFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get fReturnedAccess(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set lpProperty(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set Access(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set fAccessFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set fReturnedAccess(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Security.Authorization.ACTRL_OVERLAPPED (size: 24)
 */
export interface ACTRL_OVERLAPPED {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Reserved2: number;
  /** Windows.Win32.Foundation.HANDLE */
  hEvent: Uint8Array | Deno.PointerValue | null;
}

export const sizeofACTRL_OVERLAPPED = 24;

export function allocACTRL_OVERLAPPED(data?: Partial<ACTRL_OVERLAPPED>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_OVERLAPPED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.Reserved2 !== undefined) view.setUint32(8, Number(data.Reserved2), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hEvent !== undefined) view.setBigUint64(16, data.hEvent === null ? 0n : BigInt(util.toPointer(data.hEvent)), true);
  return buf;
}

export class ACTRL_OVERLAPPEDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Reserved2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hEvent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Reserved2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hEvent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESS_INFOA (size: 16)
 */
export interface ACTRL_ACCESS_INFOA {
  /** u32 */
  fAccessPermission: number;
  /** Windows.Win32.Foundation.PSTR */
  lpAccessPermissionName: string | null | Uint8Array;
}

export const sizeofACTRL_ACCESS_INFOA = 16;

export function allocACTRL_ACCESS_INFOA(data?: Partial<ACTRL_ACCESS_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESS_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fAccessPermission !== undefined) view.setUint32(0, Number(data.fAccessPermission), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpAccessPermissionName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpAccessPermissionName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class ACTRL_ACCESS_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fAccessPermission(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpAccessPermissionName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fAccessPermission(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpAccessPermissionName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_ACCESS_INFOW (size: 16)
 */
export interface ACTRL_ACCESS_INFOW {
  /** u32 */
  fAccessPermission: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpAccessPermissionName: string | null | Uint8Array | Uint16Array;
}

export const sizeofACTRL_ACCESS_INFOW = 16;

export function allocACTRL_ACCESS_INFOW(data?: Partial<ACTRL_ACCESS_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_ACCESS_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fAccessPermission !== undefined) view.setUint32(0, Number(data.fAccessPermission), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpAccessPermissionName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpAccessPermissionName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class ACTRL_ACCESS_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fAccessPermission(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpAccessPermissionName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fAccessPermission(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpAccessPermissionName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_CONTROL_INFOA (size: 16)
 */
export interface ACTRL_CONTROL_INFOA {
  /** Windows.Win32.Foundation.PSTR */
  lpControlId: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpControlName: string | null | Uint8Array;
}

export const sizeofACTRL_CONTROL_INFOA = 16;

export function allocACTRL_CONTROL_INFOA(data?: Partial<ACTRL_CONTROL_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_CONTROL_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpControlId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpControlId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.lpControlName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpControlName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class ACTRL_CONTROL_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpControlId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get lpControlName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set lpControlId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set lpControlName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.ACTRL_CONTROL_INFOW (size: 16)
 */
export interface ACTRL_CONTROL_INFOW {
  /** Windows.Win32.Foundation.PWSTR */
  lpControlId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpControlName: string | null | Uint8Array | Uint16Array;
}

export const sizeofACTRL_CONTROL_INFOW = 16;

export function allocACTRL_CONTROL_INFOW(data?: Partial<ACTRL_CONTROL_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofACTRL_CONTROL_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpControlId !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpControlId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.lpControlName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpControlName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class ACTRL_CONTROL_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpControlId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get lpControlName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set lpControlId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set lpControlName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.FN_OBJECT_MGR_FUNCTS (size: 8)
 */
export interface FN_OBJECT_MGR_FUNCTS {
  /** u32 */
  Placeholder: number;
}

export const sizeofFN_OBJECT_MGR_FUNCTS = 8;

export function allocFN_OBJECT_MGR_FUNCTS(data?: Partial<FN_OBJECT_MGR_FUNCTS>): Uint8Array {
  const buf = new Uint8Array(sizeofFN_OBJECT_MGR_FUNCTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Placeholder !== undefined) view.setUint32(0, Number(data.Placeholder), true);
  // 0x04: pad4
  return buf;
}

export class FN_OBJECT_MGR_FUNCTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Placeholder(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Placeholder(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authorization.INHERITED_FROMA (size: 16)
 */
export interface INHERITED_FROMA {
  /** i32 */
  GenerationGap: number;
  /** Windows.Win32.Foundation.PSTR */
  AncestorName: string | null | Uint8Array;
}

export const sizeofINHERITED_FROMA = 16;

export function allocINHERITED_FROMA(data?: Partial<INHERITED_FROMA>): Uint8Array {
  const buf = new Uint8Array(sizeofINHERITED_FROMA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.GenerationGap !== undefined) view.setInt32(0, Number(data.GenerationGap), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.AncestorName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.AncestorName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class INHERITED_FROMAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get GenerationGap(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get AncestorName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set GenerationGap(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set AncestorName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.INHERITED_FROMW (size: 16)
 */
export interface INHERITED_FROMW {
  /** i32 */
  GenerationGap: number;
  /** Windows.Win32.Foundation.PWSTR */
  AncestorName: string | null | Uint8Array | Uint16Array;
}

export const sizeofINHERITED_FROMW = 16;

export function allocINHERITED_FROMW(data?: Partial<INHERITED_FROMW>): Uint8Array {
  const buf = new Uint8Array(sizeofINHERITED_FROMW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.GenerationGap !== undefined) view.setInt32(0, Number(data.GenerationGap), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.AncestorName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.AncestorName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class INHERITED_FROMWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get GenerationGap(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get AncestorName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set GenerationGap(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set AncestorName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUDIT_OBJECT_TYPE (size: 16)
 */
export interface AUDIT_OBJECT_TYPE {
  /** System.Guid */
  ObjectType: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Flags: number;
  /** u16 */
  Level: number;
  /** u32 */
  AccessMask: number;
}

export const sizeofAUDIT_OBJECT_TYPE = 16;

export function allocAUDIT_OBJECT_TYPE(data?: Partial<AUDIT_OBJECT_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIT_OBJECT_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectType !== undefined) view.setBigUint64(0, data.ObjectType === null ? 0n : BigInt(util.toPointer(data.ObjectType)), true);
  // 0x08: u16
  if (data?.Flags !== undefined) view.setUint16(8, Number(data.Flags), true);
  // 0x0a: u16
  if (data?.Level !== undefined) view.setUint16(10, Number(data.Level), true);
  // 0x0c: u32
  if (data?.AccessMask !== undefined) view.setUint32(12, Number(data.AccessMask), true);
  return buf;
}

export class AUDIT_OBJECT_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get Flags(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get Level(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get AccessMask(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set ObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set Flags(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set Level(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set AccessMask(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUDIT_OBJECT_TYPES (size: 16)
 */
export interface AUDIT_OBJECT_TYPES {
  /** u16 */
  Count: number;
  /** u16 */
  Flags: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAUDIT_OBJECT_TYPES = 16;

export function allocAUDIT_OBJECT_TYPES(data?: Partial<AUDIT_OBJECT_TYPES>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIT_OBJECT_TYPES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Count !== undefined) view.setUint16(0, Number(data.Count), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(8, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  return buf;
}

export class AUDIT_OBJECT_TYPESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Count(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Count(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUDIT_IP_ADDRESS (size: 8)
 */
export interface AUDIT_IP_ADDRESS {
  /** array */
  pIpAddress: Deno.PointerValue | null;
}

export const sizeofAUDIT_IP_ADDRESS = 8;

export function allocAUDIT_IP_ADDRESS(data?: Partial<AUDIT_IP_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIT_IP_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(0, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

export class AUDIT_IP_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: usize
  get u(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: usize
  set Data0(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: usize
  set u(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authorization.AUDIT_PARAM (size: 32)
 */
export interface AUDIT_PARAM {
  /** Windows.Win32.Security.Authorization.AUDIT_PARAM_TYPE */
  Type: AUDIT_PARAM_TYPE;
  /** u32 */
  Length: number;
  /** u32 */
  Flags: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIT_PARAM = 32;

export function allocAUDIT_PARAM(data?: Partial<AUDIT_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIT_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

export class AUDIT_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUDIT_PARAMS (size: 24)
 */
export interface AUDIT_PARAMS {
  /** u32 */
  Length: number;
  /** u32 */
  Flags: number;
  /** u16 */
  Count: number;
  /** ptr */
  Parameters: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAUDIT_PARAMS = 24;

export function allocAUDIT_PARAMS(data?: Partial<AUDIT_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIT_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u16
  if (data?.Count !== undefined) view.setUint16(8, Number(data.Count), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(16, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class AUDIT_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get Count(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set Count(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_TYPE_LEGACY (size: 8)
 */
export interface AUTHZ_AUDIT_EVENT_TYPE_LEGACY {
  /** u16 */
  CategoryId: number;
  /** u16 */
  AuditId: number;
  /** u16 */
  ParameterCount: number;
}

export const sizeofAUTHZ_AUDIT_EVENT_TYPE_LEGACY = 8;

export function allocAUTHZ_AUDIT_EVENT_TYPE_LEGACY(data?: Partial<AUTHZ_AUDIT_EVENT_TYPE_LEGACY>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_AUDIT_EVENT_TYPE_LEGACY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.CategoryId !== undefined) view.setUint16(0, Number(data.CategoryId), true);
  // 0x02: u16
  if (data?.AuditId !== undefined) view.setUint16(2, Number(data.AuditId), true);
  // 0x04: u16
  if (data?.ParameterCount !== undefined) view.setUint16(4, Number(data.ParameterCount), true);
  // 0x06: pad2
  return buf;
}

export class AUTHZ_AUDIT_EVENT_TYPE_LEGACYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get CategoryId(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get AuditId(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get ParameterCount(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u16
  set CategoryId(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set AuditId(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set ParameterCount(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_TYPE_UNION (size: 8)
 */
export interface AUTHZ_AUDIT_EVENT_TYPE_UNION {
  /** Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_TYPE_LEGACY */
  Legacy: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUTHZ_AUDIT_EVENT_TYPE_UNION = 8;

export function allocAUTHZ_AUDIT_EVENT_TYPE_UNION(data?: Partial<AUTHZ_AUDIT_EVENT_TYPE_UNION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_AUDIT_EVENT_TYPE_UNION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Legacy !== undefined) view.setBigUint64(0, data.Legacy === null ? 0n : BigInt(util.toPointer(data.Legacy)), true);
  return buf;
}

export class AUTHZ_AUDIT_EVENT_TYPE_UNIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Legacy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Legacy(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Foundation.LUID (size: 8)
 */
export interface LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofLUID = 8;

export function allocLUID(data?: Partial<LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

export class LUIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LowPart(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get HighPart(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set LowPart(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set HighPart(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_TYPE_OLD (size: 40)
 */
export interface AUTHZ_AUDIT_EVENT_TYPE_OLD {
  /** u32 */
  Version: number;
  /** u32 */
  dwFlags: number;
  /** i32 */
  RefCount: number;
  /** usize */
  hAudit: Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  LinkId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.AUTHZ_AUDIT_EVENT_TYPE_UNION */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUTHZ_AUDIT_EVENT_TYPE_OLD = 40;

export function allocAUTHZ_AUDIT_EVENT_TYPE_OLD(data?: Partial<AUTHZ_AUDIT_EVENT_TYPE_OLD>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_AUDIT_EVENT_TYPE_OLD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: i32
  if (data?.RefCount !== undefined) view.setInt32(8, Number(data.RefCount), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.hAudit !== undefined) view.setBigUint64(16, BigInt(data.hAudit), true);
  // 0x18: pointer
  if (data?.LinkId !== undefined) view.setBigUint64(24, data.LinkId === null ? 0n : BigInt(util.toPointer(data.LinkId)), true);
  // 0x20: pointer
  if (data?.u !== undefined) view.setBigUint64(32, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

export class AUTHZ_AUDIT_EVENT_TYPE_OLDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get RefCount(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  get hAudit(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get LinkId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set RefCount(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  set hAudit(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set LinkId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__ (size: 8)
 */
export interface AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__ {
  /** i32 */
  unused: number;
}

export const sizeofAUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__ = 8;

export function allocAUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__(data?: Partial<AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.unused !== undefined) view.setInt32(0, Number(data.unused), true);
  // 0x04: pad4
  return buf;
}

export class AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get unused(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set unused(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

export type PSID = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Security.Authorization.AUTHZ_ACCESS_REQUEST (size: 40)
 */
export interface AUTHZ_ACCESS_REQUEST {
  /** u32 */
  DesiredAccess: number;
  /** Windows.Win32.Foundation.PSID */
  PrincipalSelfSid: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  ObjectTypeList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ObjectTypeListLength: number;
  /** ptr */
  OptionalArguments: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAUTHZ_ACCESS_REQUEST = 40;

export function allocAUTHZ_ACCESS_REQUEST(data?: Partial<AUTHZ_ACCESS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_ACCESS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DesiredAccess !== undefined) view.setUint32(0, Number(data.DesiredAccess), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PrincipalSelfSid !== undefined) view.setBigUint64(8, data.PrincipalSelfSid === null ? 0n : BigInt(util.toPointer(data.PrincipalSelfSid)), true);
  // 0x10: pointer
  if (data?.ObjectTypeList !== undefined) view.setBigUint64(16, data.ObjectTypeList === null ? 0n : BigInt(util.toPointer(data.ObjectTypeList)), true);
  // 0x18: u32
  if (data?.ObjectTypeListLength !== undefined) view.setUint32(24, Number(data.ObjectTypeListLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.OptionalArguments !== undefined) view.setBigUint64(32, data.OptionalArguments === null ? 0n : BigInt(util.toPointer(data.OptionalArguments)), true);
  return buf;
}

export class AUTHZ_ACCESS_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get DesiredAccess(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get PrincipalSelfSid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ObjectTypeList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get ObjectTypeListLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get OptionalArguments(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set DesiredAccess(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set PrincipalSelfSid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ObjectTypeList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set ObjectTypeListLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set OptionalArguments(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_ACCESS_REPLY (size: 32)
 */
export interface AUTHZ_ACCESS_REPLY {
  /** u32 */
  ResultListLength: number;
  /** ptr */
  GrantedAccessMask: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  SaclEvaluationResults: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Error: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAUTHZ_ACCESS_REPLY = 32;

export function allocAUTHZ_ACCESS_REPLY(data?: Partial<AUTHZ_ACCESS_REPLY>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_ACCESS_REPLY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ResultListLength !== undefined) view.setUint32(0, Number(data.ResultListLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.GrantedAccessMask !== undefined) view.setBigUint64(8, data.GrantedAccessMask === null ? 0n : BigInt(util.toPointer(data.GrantedAccessMask)), true);
  // 0x10: pointer
  if (data?.SaclEvaluationResults !== undefined) view.setBigUint64(16, data.SaclEvaluationResults === null ? 0n : BigInt(util.toPointer(data.SaclEvaluationResults)), true);
  // 0x18: pointer
  if (data?.Error !== undefined) view.setBigUint64(24, data.Error === null ? 0n : BigInt(util.toPointer(data.Error)), true);
  return buf;
}

export class AUTHZ_ACCESS_REPLYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ResultListLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get GrantedAccessMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get SaclEvaluationResults(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Error(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ResultListLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set GrantedAccessMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set SaclEvaluationResults(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Error(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE (size: 16)
 */
export interface AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE {
  /** u64 */
  Version: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
}

export const sizeofAUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE = 16;

export function allocAUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE(data?: Partial<AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Version !== undefined) view.setBigUint64(0, BigInt(data.Version), true);
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Version(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Version(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE (size: 16)
 */
export interface AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
  /** ptr */
  pValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ValueLength: number;
}

export const sizeofAUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = 16;

export function allocAUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE(data?: Partial<AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pValue !== undefined) view.setBigUint64(0, data.pValue === null ? 0n : BigInt(util.toPointer(data.pValue)), true);
  // 0x08: u32
  if (data?.ValueLength !== undefined) view.setUint32(8, Number(data.ValueLength), true);
  // 0x0c: pad4
  return buf;
}

export class AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ValueLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ValueLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _Values_e__Union (size: 40)
 */
export interface _Values_e__Union {
  /** ptr */
  pInt64: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pUint64: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ppString: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFqbn: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pOctetString: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Values_e__Union = 40;

export function alloc_Values_e__Union(data?: Partial<_Values_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Values_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pInt64 !== undefined) view.setBigUint64(0, data.pInt64 === null ? 0n : BigInt(util.toPointer(data.pInt64)), true);
  // 0x08: pointer
  if (data?.pUint64 !== undefined) view.setBigUint64(8, data.pUint64 === null ? 0n : BigInt(util.toPointer(data.pUint64)), true);
  // 0x10: pointer
  if (data?.ppString !== undefined) view.setBigUint64(16, data.ppString === null ? 0n : BigInt(util.toPointer(data.ppString)), true);
  // 0x18: pointer
  if (data?.pFqbn !== undefined) view.setBigUint64(24, data.pFqbn === null ? 0n : BigInt(util.toPointer(data.pFqbn)), true);
  // 0x20: pointer
  if (data?.pOctetString !== undefined) view.setBigUint64(32, data.pOctetString === null ? 0n : BigInt(util.toPointer(data.pOctetString)), true);
  return buf;
}

export class _Values_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pInt64(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pUint64(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ppString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pFqbn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pOctetString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pInt64(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pUint64(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ppString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pFqbn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pOctetString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_SECURITY_ATTRIBUTE_V1 (size: 32)
 */
export interface AUTHZ_SECURITY_ATTRIBUTE_V1 {
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** u16 */
  ValueType: number;
  /** u16 */
  Reserved: number;
  /** Windows.Win32.Security.Authorization.AUTHZ_SECURITY_ATTRIBUTE_FLAGS */
  Flags: AUTHZ_SECURITY_ATTRIBUTE_FLAGS;
  /** u32 */
  ValueCount: number;
  /** _Values_e__Union */
  Values: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUTHZ_SECURITY_ATTRIBUTE_V1 = 32;

export function allocAUTHZ_SECURITY_ATTRIBUTE_V1(data?: Partial<AUTHZ_SECURITY_ATTRIBUTE_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_SECURITY_ATTRIBUTE_V1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.ValueType !== undefined) view.setUint16(8, Number(data.ValueType), true);
  // 0x0a: u16
  if (data?.Reserved !== undefined) view.setUint16(10, Number(data.Reserved), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.ValueCount !== undefined) view.setUint32(16, Number(data.ValueCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Values !== undefined) view.setBigUint64(24, data.Values === null ? 0n : BigInt(util.toPointer(data.Values)), true);
  return buf;
}

export class AUTHZ_SECURITY_ATTRIBUTE_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get ValueType(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get Reserved(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ValueCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Values(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u16
  set ValueType(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set Reserved(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ValueCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Values(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _Attribute_e__Union (size: 8)
 */
export interface _Attribute_e__Union {
  /** ptr */
  pAttributeV1: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Attribute_e__Union = 8;

export function alloc_Attribute_e__Union(data?: Partial<_Attribute_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Attribute_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pAttributeV1 !== undefined) view.setBigUint64(0, data.pAttributeV1 === null ? 0n : BigInt(util.toPointer(data.pAttributeV1)), true);
  return buf;
}

export class _Attribute_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pAttributeV1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pAttributeV1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_SECURITY_ATTRIBUTES_INFORMATION (size: 16)
 */
export interface AUTHZ_SECURITY_ATTRIBUTES_INFORMATION {
  /** u16 */
  Version: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  AttributeCount: number;
  /** _Attribute_e__Union */
  Attribute: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUTHZ_SECURITY_ATTRIBUTES_INFORMATION = 16;

export function allocAUTHZ_SECURITY_ATTRIBUTES_INFORMATION(data?: Partial<AUTHZ_SECURITY_ATTRIBUTES_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_SECURITY_ATTRIBUTES_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Version !== undefined) view.setUint16(0, Number(data.Version), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.AttributeCount !== undefined) view.setUint32(4, Number(data.AttributeCount), true);
  // 0x08: pointer
  if (data?.Attribute !== undefined) view.setBigUint64(8, data.Attribute === null ? 0n : BigInt(util.toPointer(data.Attribute)), true);
  return buf;
}

export class AUTHZ_SECURITY_ATTRIBUTES_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Version(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Reserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get AttributeCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Attribute(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Version(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Reserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set AttributeCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Attribute(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_RPC_INIT_INFO_CLIENT (size: 56)
 */
export interface AUTHZ_RPC_INIT_INFO_CLIENT {
  /** u16 */
  version: number;
  /** Windows.Win32.Foundation.PWSTR */
  ObjectUuid: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ProtSeq: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  NetworkAddr: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Endpoint: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Options: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ServerSpn: string | null | Uint8Array | Uint16Array;
}

export const sizeofAUTHZ_RPC_INIT_INFO_CLIENT = 56;

export function allocAUTHZ_RPC_INIT_INFO_CLIENT(data?: Partial<AUTHZ_RPC_INIT_INFO_CLIENT>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_RPC_INIT_INFO_CLIENT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.version !== undefined) view.setUint16(0, Number(data.version), true);
  // 0x02: pad6
  // 0x08: buffer
  if (data?.ObjectUuid !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ObjectUuid);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.ProtSeq !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ProtSeq);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.NetworkAddr !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.NetworkAddr);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.Endpoint !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.Endpoint);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.Options !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.Options);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.ServerSpn !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.ServerSpn);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  return buf;
}

export class AUTHZ_RPC_INIT_INFO_CLIENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get version(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  get ObjectUuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get ProtSeq(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get NetworkAddr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get Endpoint(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get Options(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: buffer
  get ServerSpn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set version(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  set ObjectUuid(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set ProtSeq(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set NetworkAddr(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set Endpoint(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: buffer
  set Options(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: buffer
  set ServerSpn(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(util.toPointer((this.buf as any)._f48)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_INIT_INFO (size: 56)
 */
export interface AUTHZ_INIT_INFO {
  /** u16 */
  version: number;
  /** Windows.Win32.Foundation.PWSTR */
  szResourceManagerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Authorization.PFN_AUTHZ_DYNAMIC_ACCESS_CHECK */
  pfnDynamicAccessCheck: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS */
  pfnComputeDynamicGroups: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.PFN_AUTHZ_FREE_DYNAMIC_GROUPS */
  pfnFreeDynamicGroups: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY */
  pfnGetCentralAccessPolicy: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authorization.PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY */
  pfnFreeCentralAccessPolicy: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUTHZ_INIT_INFO = 56;

export function allocAUTHZ_INIT_INFO(data?: Partial<AUTHZ_INIT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_INIT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.version !== undefined) view.setUint16(0, Number(data.version), true);
  // 0x02: pad6
  // 0x08: buffer
  if (data?.szResourceManagerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szResourceManagerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pfnDynamicAccessCheck !== undefined) view.setBigUint64(16, data.pfnDynamicAccessCheck === null ? 0n : BigInt(util.toPointer(data.pfnDynamicAccessCheck)), true);
  // 0x18: pointer
  if (data?.pfnComputeDynamicGroups !== undefined) view.setBigUint64(24, data.pfnComputeDynamicGroups === null ? 0n : BigInt(util.toPointer(data.pfnComputeDynamicGroups)), true);
  // 0x20: pointer
  if (data?.pfnFreeDynamicGroups !== undefined) view.setBigUint64(32, data.pfnFreeDynamicGroups === null ? 0n : BigInt(util.toPointer(data.pfnFreeDynamicGroups)), true);
  // 0x28: pointer
  if (data?.pfnGetCentralAccessPolicy !== undefined) view.setBigUint64(40, data.pfnGetCentralAccessPolicy === null ? 0n : BigInt(util.toPointer(data.pfnGetCentralAccessPolicy)), true);
  // 0x30: pointer
  if (data?.pfnFreeCentralAccessPolicy !== undefined) view.setBigUint64(48, data.pfnFreeCentralAccessPolicy === null ? 0n : BigInt(util.toPointer(data.pfnFreeCentralAccessPolicy)), true);
  return buf;
}

export class AUTHZ_INIT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get version(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  get szResourceManagerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pfnDynamicAccessCheck(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pfnComputeDynamicGroups(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pfnFreeDynamicGroups(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pfnGetCentralAccessPolicy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pfnFreeCentralAccessPolicy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set version(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  set szResourceManagerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set pfnDynamicAccessCheck(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pfnComputeDynamicGroups(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pfnFreeDynamicGroups(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pfnGetCentralAccessPolicy(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pfnFreeCentralAccessPolicy(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET (size: 16)
 */
export interface AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET {
  /** Windows.Win32.Foundation.PWSTR */
  szObjectTypeName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwOffset: number;
}

export const sizeofAUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET = 16;

export function allocAUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET(data?: Partial<AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szObjectTypeName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szObjectTypeName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwOffset !== undefined) view.setUint32(8, Number(data.dwOffset), true);
  // 0x0c: pad4
  return buf;
}

export class AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szObjectTypeName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set szObjectTypeName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set dwOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authorization.AUTHZ_SOURCE_SCHEMA_REGISTRATION (size: 72)
 */
export interface AUTHZ_SOURCE_SCHEMA_REGISTRATION {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  szEventSourceName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szEventMessageFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szEventSourceXmlSchemaFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szEventAccessStringsFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  szExecutableImagePath: string | null | Uint8Array | Uint16Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwObjectTypeNameCount: number;
  /** array */
  ObjectTypeNames: Deno.PointerValue | null;
}

export const sizeofAUTHZ_SOURCE_SCHEMA_REGISTRATION = 72;

export function allocAUTHZ_SOURCE_SCHEMA_REGISTRATION(data?: Partial<AUTHZ_SOURCE_SCHEMA_REGISTRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHZ_SOURCE_SCHEMA_REGISTRATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.szEventSourceName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.szEventSourceName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.szEventMessageFile !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szEventMessageFile);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.szEventSourceXmlSchemaFile !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szEventSourceXmlSchemaFile);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.szEventAccessStringsFile !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.szEventAccessStringsFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.szExecutableImagePath !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.szExecutableImagePath);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(48, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x38: u32
  if (data?.dwObjectTypeNameCount !== undefined) view.setUint32(56, Number(data.dwObjectTypeNameCount), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.ObjectTypeNames !== undefined) view.setBigUint64(64, data.ObjectTypeNames === null ? 0n : BigInt(util.toPointer(data.ObjectTypeNames)), true);
  return buf;
}

export class AUTHZ_SOURCE_SCHEMA_REGISTRATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get szEventSourceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get szEventMessageFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get szEventSourceXmlSchemaFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get szEventAccessStringsFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get szExecutableImagePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get dwObjectTypeNameCount(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get ObjectTypeNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set szEventSourceName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set szEventMessageFile(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set szEventSourceXmlSchemaFile(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set szEventAccessStringsFile(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: buffer
  set szExecutableImagePath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set dwObjectTypeNameCount(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set ObjectTypeNames(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

export type HINSTANCE = Deno.PointerValue;

/**
 * Windows.Win32.Security.Authorization.UI.SI_OBJECT_INFO (size: 48)
 */
export interface SI_OBJECT_INFO {
  /** Windows.Win32.Security.Authorization.UI.SI_OBJECT_INFO_FLAGS */
  dwFlags: SI_OBJECT_INFO_FLAGS;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszServerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszObjectName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPageTitle: string | null | Uint8Array | Uint16Array;
  /** System.Guid */
  guidObjectType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSI_OBJECT_INFO = 48;

export function allocSI_OBJECT_INFO(data?: Partial<SI_OBJECT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSI_OBJECT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(8, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x10: buffer
  if (data?.pszServerName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszServerName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszObjectName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszObjectName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszPageTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszPageTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.guidObjectType !== undefined) view.setBigUint64(40, data.guidObjectType === null ? 0n : BigInt(util.toPointer(data.guidObjectType)), true);
  return buf;
}

export class SI_OBJECT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pszObjectName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pszPageTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get guidObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set pszServerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pszObjectName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set pszPageTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: pointer
  set guidObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.UI.SI_ACCESS (size: 32)
 */
export interface SI_ACCESS {
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  mask: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwFlags: number;
}

export const sizeofSI_ACCESS = 32;

export function allocSI_ACCESS(data?: Partial<SI_ACCESS>): Uint8Array {
  const buf = new Uint8Array(sizeofSI_ACCESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pguid !== undefined) view.setBigUint64(0, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x08: u32
  if (data?.mask !== undefined) view.setUint32(8, Number(data.mask), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

export class SI_ACCESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pguid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set pguid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authorization.UI.SI_INHERIT_TYPE (size: 24)
 */
export interface SI_INHERIT_TYPE {
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.ACE_FLAGS */
  dwFlags: ACE_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
}

export const sizeofSI_INHERIT_TYPE = 24;

export function allocSI_INHERIT_TYPE(data?: Partial<SI_INHERIT_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofSI_INHERIT_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pguid !== undefined) view.setBigUint64(0, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class SI_INHERIT_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pguid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pguid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.UI.SID_INFO (size: 32)
 */
export interface SID_INFO {
  /** Windows.Win32.Foundation.PSID */
  pSid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwzCommonName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzClass: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzUPN: string | null | Uint8Array | Uint16Array;
}

export const sizeofSID_INFO = 32;

export function allocSID_INFO(data?: Partial<SID_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSID_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSid !== undefined) view.setBigUint64(0, data.pSid === null ? 0n : BigInt(util.toPointer(data.pSid)), true);
  // 0x08: buffer
  if (data?.pwzCommonName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzCommonName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwzClass !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzClass);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwzUPN !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwzUPN);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export class SID_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pSid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pwzCommonName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwzClass(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pwzUPN(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pSid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set pwzCommonName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pwzClass(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pwzUPN(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.UI.SID_INFO_LIST (size: 16)
 */
export interface SID_INFO_LIST {
  /** u32 */
  cItems: number;
  /** array */
  aSidInfo: Deno.PointerValue | null;
}

export const sizeofSID_INFO_LIST = 16;

export function allocSID_INFO_LIST(data?: Partial<SID_INFO_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSID_INFO_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cItems !== undefined) view.setUint32(0, Number(data.cItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.aSidInfo !== undefined) view.setBigUint64(8, data.aSidInfo === null ? 0n : BigInt(util.toPointer(data.aSidInfo)), true);
  return buf;
}

export class SID_INFO_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cItems(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get aSidInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cItems(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set aSidInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Security.Authorization.UI.SECURITY_OBJECT (size: 48)
 */
export interface SECURITY_OBJECT {
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbData: number;
  /** ptr */
  pData2: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbData2: number;
  /** u32 */
  Id: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  fWellKnown: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECURITY_OBJECT = 48;

export function allocSECURITY_OBJECT(data?: Partial<SECURITY_OBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_OBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pData2 !== undefined) view.setBigUint64(24, data.pData2 === null ? 0n : BigInt(util.toPointer(data.pData2)), true);
  // 0x20: u32
  if (data?.cbData2 !== undefined) view.setUint32(32, Number(data.cbData2), true);
  // 0x24: u32
  if (data?.Id !== undefined) view.setUint32(36, Number(data.Id), true);
  // 0x28: pointer
  if (data?.fWellKnown !== undefined) view.setBigUint64(40, data.fWellKnown === null ? 0n : BigInt(util.toPointer(data.fWellKnown)), true);
  return buf;
}

export class SECURITY_OBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pData2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cbData2(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get Id(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get fWellKnown(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set pData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pData2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cbData2(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set Id(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set fWellKnown(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authorization.UI.EFFPERM_RESULT_LIST (size: 32)
 */
export interface EFFPERM_RESULT_LIST {
  /** Windows.Win32.Foundation.BOOLEAN */
  fEvaluated: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cObjectTypeListLength: number;
  /** ptr */
  pObjectTypeList: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pGrantedAccessList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEFFPERM_RESULT_LIST = 32;

export function allocEFFPERM_RESULT_LIST(data?: Partial<EFFPERM_RESULT_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofEFFPERM_RESULT_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fEvaluated !== undefined) view.setBigUint64(0, data.fEvaluated === null ? 0n : BigInt(util.toPointer(data.fEvaluated)), true);
  // 0x08: u32
  if (data?.cObjectTypeListLength !== undefined) view.setUint32(8, Number(data.cObjectTypeListLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pObjectTypeList !== undefined) view.setBigUint64(16, data.pObjectTypeList === null ? 0n : BigInt(util.toPointer(data.pObjectTypeList)), true);
  // 0x18: pointer
  if (data?.pGrantedAccessList !== undefined) view.setBigUint64(24, data.pGrantedAccessList === null ? 0n : BigInt(util.toPointer(data.pGrantedAccessList)), true);
  return buf;
}

export class EFFPERM_RESULT_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get fEvaluated(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cObjectTypeListLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pObjectTypeList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pGrantedAccessList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set fEvaluated(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set cObjectTypeListLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pObjectTypeList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pGrantedAccessList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

export type HCRYPTASYNC = Deno.PointerValue;

export type HCERTCHAINENGINE = Deno.PointerValue;

export type LsaHandle = Deno.PointerValue;

export type BCRYPT_ALG_HANDLE = Deno.PointerValue;

export type BCRYPT_KEY_HANDLE = Deno.PointerValue;

export type BCRYPT_HASH_HANDLE = Deno.PointerValue;

export type BCRYPT_SECRET_HANDLE = Deno.PointerValue;

export type HDIAGNOSTIC_DATA_QUERY_SESSION = Deno.PointerValue;

export type HDIAGNOSTIC_REPORT = Deno.PointerValue;

export type HDIAGNOSTIC_EVENT_TAG_DESCRIPTION = Deno.PointerValue;

export type HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION = Deno.PointerValue;

export type HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION = Deno.PointerValue;

export type HDIAGNOSTIC_RECORD = Deno.PointerValue;

export type NCRYPT_DESCRIPTOR_HANDLE = Deno.PointerValue;

export type NCRYPT_STREAM_HANDLE = Deno.PointerValue;

export type SAFER_LEVEL_HANDLE = Deno.PointerValue;

export type SC_HANDLE = Deno.PointerValue;

export type PSECURITY_DESCRIPTOR = Deno.PointerValue | Uint8Array | null;

export type AUTHZ_ACCESS_CHECK_RESULTS_HANDLE = Deno.PointerValue;

export type AUTHZ_CLIENT_CONTEXT_HANDLE = Deno.PointerValue;

export type AUTHZ_RESOURCE_MANAGER_HANDLE = Deno.PointerValue;

export type AUTHZ_AUDIT_EVENT_HANDLE = Deno.PointerValue;

export type AUTHZ_AUDIT_EVENT_TYPE_HANDLE = Deno.PointerValue;

export type AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE = Deno.PointerValue;

export type BCRYPT_HANDLE = Deno.PointerValue;

export type NCRYPT_HANDLE = Deno.PointerValue;

export type NCRYPT_PROV_HANDLE = Deno.PointerValue;

export type NCRYPT_KEY_HANDLE = Deno.PointerValue;

export type NCRYPT_HASH_HANDLE = Deno.PointerValue;

export type NCRYPT_SECRET_HANDLE = Deno.PointerValue;

export type HCRYPTPROV_LEGACY = Deno.PointerValue;

export type HCRYPTPROV_OR_NCRYPT_KEY_HANDLE = Deno.PointerValue;

export type HCERTSTORE = Deno.PointerValue | Uint8Array | null;

export type HCERTSTOREPROV = Deno.PointerValue | Uint8Array | null;

export type BOOL = number;

/**
 * Windows.Win32.Security.SECURITY_ATTRIBUTES (size: 24)
 */
export interface SECURITY_ATTRIBUTES {
  /** u32 */
  nLength: number;
  /** ptr */
  lpSecurityDescriptor: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  bInheritHandle: boolean;
}

export const sizeofSECURITY_ATTRIBUTES = 24;

export function allocSECURITY_ATTRIBUTES(data?: Partial<SECURITY_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nLength !== undefined) view.setUint32(0, Number(data.nLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpSecurityDescriptor !== undefined) view.setBigUint64(8, data.lpSecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.lpSecurityDescriptor)), true);
  // 0x10: i32
  if (data?.bInheritHandle !== undefined) view.setInt32(16, Number(data.bInheritHandle), true);
  // 0x14: pad4
  return buf;
}

export class SECURITY_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpSecurityDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get bInheritHandle(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set nLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpSecurityDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set bInheritHandle(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.Certificates.CSEDB_RSTMAPW (size: 16)
 */
export interface CSEDB_RSTMAPW {
  /** Windows.Win32.Foundation.PWSTR */
  pwszDatabaseName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszNewDatabaseName: string | null | Uint8Array | Uint16Array;
}

export const sizeofCSEDB_RSTMAPW = 16;

export function allocCSEDB_RSTMAPW(data?: Partial<CSEDB_RSTMAPW>): Uint8Array {
  const buf = new Uint8Array(sizeofCSEDB_RSTMAPW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszDatabaseName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszDatabaseName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwszNewDatabaseName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszNewDatabaseName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class CSEDB_RSTMAPWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszDatabaseName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pwszNewDatabaseName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pwszDatabaseName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pwszNewDatabaseName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Certificates.CERTTRANSBLOB (size: 16)
 */
export interface CERTTRANSBLOB {
  /** u32 */
  cb: number;
  /** ptr */
  pb: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERTTRANSBLOB = 16;

export function allocCERTTRANSBLOB(data?: Partial<CERTTRANSBLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofCERTTRANSBLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cb !== undefined) view.setUint32(0, Number(data.cb), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pb !== undefined) view.setBigUint64(8, data.pb === null ? 0n : BigInt(util.toPointer(data.pb)), true);
  return buf;
}

export class CERTTRANSBLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cb(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pb(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cb(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pb(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Certificates.CERTVIEWRESTRICTION (size: 32)
 */
export interface CERTVIEWRESTRICTION {
  /** u32 */
  ColumnIndex: number;
  /** i32 */
  SeekOperator: number;
  /** i32 */
  SortOrder: number;
  /** ptr */
  pbValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbValue: number;
}

export const sizeofCERTVIEWRESTRICTION = 32;

export function allocCERTVIEWRESTRICTION(data?: Partial<CERTVIEWRESTRICTION>): Uint8Array {
  const buf = new Uint8Array(sizeofCERTVIEWRESTRICTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ColumnIndex !== undefined) view.setUint32(0, Number(data.ColumnIndex), true);
  // 0x04: i32
  if (data?.SeekOperator !== undefined) view.setInt32(4, Number(data.SeekOperator), true);
  // 0x08: i32
  if (data?.SortOrder !== undefined) view.setInt32(8, Number(data.SortOrder), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pbValue !== undefined) view.setBigUint64(16, data.pbValue === null ? 0n : BigInt(util.toPointer(data.pbValue)), true);
  // 0x18: u32
  if (data?.cbValue !== undefined) view.setUint32(24, Number(data.cbValue), true);
  // 0x1c: pad4
  return buf;
}

export class CERTVIEWRESTRICTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ColumnIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get SeekOperator(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get SortOrder(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pbValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get cbValue(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set ColumnIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set SeekOperator(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set SortOrder(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pbValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set cbValue(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.Certificates.CAINFO (size: 40)
 */
export interface CAINFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.Certificates.ENUM_CATYPES */
  CAType: ENUM_CATYPES;
  /** u32 */
  cCASignatureCerts: number;
  /** u32 */
  cCAExchangeCerts: number;
  /** u32 */
  cExitModules: number;
  /** i32 */
  lPropIdMax: number;
  /** i32 */
  lRoleSeparationEnabled: number;
  /** u32 */
  cKRACertUsedCount: number;
  /** u32 */
  cKRACertCount: number;
  /** u32 */
  fAdvancedServer: number;
}

export const sizeofCAINFO = 40;

export function allocCAINFO(data?: Partial<CAINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCAINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.CAType !== undefined) view.setInt32(4, Number(data.CAType), true);
  // 0x08: u32
  if (data?.cCASignatureCerts !== undefined) view.setUint32(8, Number(data.cCASignatureCerts), true);
  // 0x0c: u32
  if (data?.cCAExchangeCerts !== undefined) view.setUint32(12, Number(data.cCAExchangeCerts), true);
  // 0x10: u32
  if (data?.cExitModules !== undefined) view.setUint32(16, Number(data.cExitModules), true);
  // 0x14: i32
  if (data?.lPropIdMax !== undefined) view.setInt32(20, Number(data.lPropIdMax), true);
  // 0x18: i32
  if (data?.lRoleSeparationEnabled !== undefined) view.setInt32(24, Number(data.lRoleSeparationEnabled), true);
  // 0x1c: u32
  if (data?.cKRACertUsedCount !== undefined) view.setUint32(28, Number(data.cKRACertUsedCount), true);
  // 0x20: u32
  if (data?.cKRACertCount !== undefined) view.setUint32(32, Number(data.cKRACertCount), true);
  // 0x24: u32
  if (data?.fAdvancedServer !== undefined) view.setUint32(36, Number(data.fAdvancedServer), true);
  return buf;
}

export class CAINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get CAType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get cCASignatureCerts(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cCAExchangeCerts(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cExitModules(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get lPropIdMax(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get lRoleSeparationEnabled(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get cKRACertUsedCount(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get cKRACertCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get fAdvancedServer(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set CAType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set cCASignatureCerts(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cCAExchangeCerts(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cExitModules(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set lPropIdMax(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set lRoleSeparationEnabled(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set cKRACertUsedCount(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set cKRACertCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set fAdvancedServer(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Security.Credentials.KeyCredentialManagerInfo (size: 8)
 */
export interface KeyCredentialManagerInfo {
  /** System.Guid */
  containerId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKeyCredentialManagerInfo = 8;

export function allocKeyCredentialManagerInfo(data?: Partial<KeyCredentialManagerInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofKeyCredentialManagerInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.containerId !== undefined) view.setBigUint64(0, data.containerId === null ? 0n : BigInt(util.toPointer(data.containerId)), true);
  return buf;
}

export class KeyCredentialManagerInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get containerId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set containerId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SecHandle (size: 16)
 */
export interface SecHandle {
  /** usize */
  dwLower: Deno.PointerValue;
  /** usize */
  dwUpper: Deno.PointerValue;
}

export const sizeofSecHandle = 16;

export function allocSecHandle(data?: Partial<SecHandle>): Uint8Array {
  const buf = new Uint8Array(sizeofSecHandle);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwLower !== undefined) view.setBigUint64(0, BigInt(data.dwLower), true);
  // 0x08: usize
  if (data?.dwUpper !== undefined) view.setBigUint64(8, BigInt(data.dwUpper), true);
  return buf;
}

export class SecHandleView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get dwLower(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: usize
  get dwUpper(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: usize
  set dwLower(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: usize
  set dwUpper(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDENTIAL_ATTRIBUTEA (size: 24)
 */
export interface CREDENTIAL_ATTRIBUTEA {
  /** Windows.Win32.Foundation.PSTR */
  Keyword: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  ValueSize: number;
  /** ptr */
  Value: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCREDENTIAL_ATTRIBUTEA = 24;

export function allocCREDENTIAL_ATTRIBUTEA(data?: Partial<CREDENTIAL_ATTRIBUTEA>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIAL_ATTRIBUTEA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Keyword !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Keyword);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.ValueSize !== undefined) view.setUint32(12, Number(data.ValueSize), true);
  // 0x10: pointer
  if (data?.Value !== undefined) view.setBigUint64(16, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class CREDENTIAL_ATTRIBUTEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Keyword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ValueSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set Keyword(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ValueSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDENTIAL_ATTRIBUTEW (size: 24)
 */
export interface CREDENTIAL_ATTRIBUTEW {
  /** Windows.Win32.Foundation.PWSTR */
  Keyword: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Flags: number;
  /** u32 */
  ValueSize: number;
  /** ptr */
  Value: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCREDENTIAL_ATTRIBUTEW = 24;

export function allocCREDENTIAL_ATTRIBUTEW(data?: Partial<CREDENTIAL_ATTRIBUTEW>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIAL_ATTRIBUTEW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Keyword !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Keyword);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.ValueSize !== undefined) view.setUint32(12, Number(data.ValueSize), true);
  // 0x10: pointer
  if (data?.Value !== undefined) view.setBigUint64(16, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class CREDENTIAL_ATTRIBUTEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Keyword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ValueSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set Keyword(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ValueSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDENTIALA (size: 80)
 */
export interface CREDENTIALA {
  /** Windows.Win32.Security.Credentials.CRED_FLAGS */
  Flags: CRED_FLAGS;
  /** Windows.Win32.Security.Credentials.CRED_TYPE */
  Type: CRED_TYPE;
  /** Windows.Win32.Foundation.PSTR */
  TargetName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Comment: string | null | Uint8Array;
  /** Windows.Win32.Foundation.FILETIME */
  LastWritten: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CredentialBlobSize: number;
  /** ptr */
  CredentialBlob: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Credentials.CRED_PERSIST */
  Persist: CRED_PERSIST;
  /** u32 */
  AttributeCount: number;
  /** ptr */
  Attributes: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  TargetAlias: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  UserName: string | null | Uint8Array;
}

export const sizeofCREDENTIALA = 80;

export function allocCREDENTIALA(data?: Partial<CREDENTIALA>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIALA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: buffer
  if (data?.TargetName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.TargetName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.Comment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.LastWritten !== undefined) view.setBigUint64(24, data.LastWritten === null ? 0n : BigInt(util.toPointer(data.LastWritten)), true);
  // 0x20: u32
  if (data?.CredentialBlobSize !== undefined) view.setUint32(32, Number(data.CredentialBlobSize), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.CredentialBlob !== undefined) view.setBigUint64(40, data.CredentialBlob === null ? 0n : BigInt(util.toPointer(data.CredentialBlob)), true);
  // 0x30: u32
  if (data?.Persist !== undefined) view.setUint32(48, Number(data.Persist), true);
  // 0x34: u32
  if (data?.AttributeCount !== undefined) view.setUint32(52, Number(data.AttributeCount), true);
  // 0x38: pointer
  if (data?.Attributes !== undefined) view.setBigUint64(56, data.Attributes === null ? 0n : BigInt(util.toPointer(data.Attributes)), true);
  // 0x40: buffer
  if (data?.TargetAlias !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.TargetAlias);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.UserName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  return buf;
}

export class CREDENTIALAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Type(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get TargetName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get Comment(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get LastWritten(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get CredentialBlobSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get CredentialBlob(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get Persist(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get AttributeCount(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get Attributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: buffer
  get TargetAlias(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: buffer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Type(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set TargetName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set Comment(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: pointer
  set LastWritten(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set CredentialBlobSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set CredentialBlob(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set Persist(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set AttributeCount(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set Attributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: buffer
  set TargetAlias(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(util.toPointer((this.buf as any)._f64)), true);
  }

  // 0x48: buffer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(util.toPointer((this.buf as any)._f72)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDENTIALW (size: 80)
 */
export interface CREDENTIALW {
  /** Windows.Win32.Security.Credentials.CRED_FLAGS */
  Flags: CRED_FLAGS;
  /** Windows.Win32.Security.Credentials.CRED_TYPE */
  Type: CRED_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  TargetName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Comment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.FILETIME */
  LastWritten: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CredentialBlobSize: number;
  /** ptr */
  CredentialBlob: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Credentials.CRED_PERSIST */
  Persist: CRED_PERSIST;
  /** u32 */
  AttributeCount: number;
  /** ptr */
  Attributes: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  TargetAlias: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  UserName: string | null | Uint8Array | Uint16Array;
}

export const sizeofCREDENTIALW = 80;

export function allocCREDENTIALW(data?: Partial<CREDENTIALW>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIALW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: buffer
  if (data?.TargetName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.TargetName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.Comment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Comment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.LastWritten !== undefined) view.setBigUint64(24, data.LastWritten === null ? 0n : BigInt(util.toPointer(data.LastWritten)), true);
  // 0x20: u32
  if (data?.CredentialBlobSize !== undefined) view.setUint32(32, Number(data.CredentialBlobSize), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.CredentialBlob !== undefined) view.setBigUint64(40, data.CredentialBlob === null ? 0n : BigInt(util.toPointer(data.CredentialBlob)), true);
  // 0x30: u32
  if (data?.Persist !== undefined) view.setUint32(48, Number(data.Persist), true);
  // 0x34: u32
  if (data?.AttributeCount !== undefined) view.setUint32(52, Number(data.AttributeCount), true);
  // 0x38: pointer
  if (data?.Attributes !== undefined) view.setBigUint64(56, data.Attributes === null ? 0n : BigInt(util.toPointer(data.Attributes)), true);
  // 0x40: buffer
  if (data?.TargetAlias !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.TargetAlias);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.UserName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  return buf;
}

export class CREDENTIALWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Type(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get TargetName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get Comment(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get LastWritten(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get CredentialBlobSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get CredentialBlob(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get Persist(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get AttributeCount(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get Attributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: buffer
  get TargetAlias(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: buffer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Type(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set TargetName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set Comment(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: pointer
  set LastWritten(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set CredentialBlobSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set CredentialBlob(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set Persist(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set AttributeCount(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set Attributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: buffer
  set TargetAlias(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(util.toPointer((this.buf as any)._f64)), true);
  }

  // 0x48: buffer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(util.toPointer((this.buf as any)._f72)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDENTIAL_TARGET_INFORMATIONA (size: 72)
 */
export interface CREDENTIAL_TARGET_INFORMATIONA {
  /** Windows.Win32.Foundation.PSTR */
  TargetName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  NetbiosServerName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  DnsServerName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  NetbiosDomainName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  DnsDomainName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  DnsTreeName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  PackageName: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  CredTypeCount: number;
  /** ptr */
  CredTypes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCREDENTIAL_TARGET_INFORMATIONA = 72;

export function allocCREDENTIAL_TARGET_INFORMATIONA(data?: Partial<CREDENTIAL_TARGET_INFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIAL_TARGET_INFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.TargetName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.TargetName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.NetbiosServerName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.NetbiosServerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.DnsServerName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.DnsServerName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.NetbiosDomainName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.NetbiosDomainName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.DnsDomainName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.DnsDomainName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.DnsTreeName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.DnsTreeName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.PackageName !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.PackageName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.Flags !== undefined) view.setUint32(56, Number(data.Flags), true);
  // 0x3c: u32
  if (data?.CredTypeCount !== undefined) view.setUint32(60, Number(data.CredTypeCount), true);
  // 0x40: pointer
  if (data?.CredTypes !== undefined) view.setBigUint64(64, data.CredTypes === null ? 0n : BigInt(util.toPointer(data.CredTypes)), true);
  return buf;
}

export class CREDENTIAL_TARGET_INFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get TargetName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get NetbiosServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get DnsServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get NetbiosDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get DnsDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get DnsTreeName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: buffer
  get PackageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get Flags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get CredTypeCount(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get CredTypes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set TargetName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set NetbiosServerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set DnsServerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set NetbiosDomainName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: buffer
  set DnsTreeName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: buffer
  set PackageName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(util.toPointer((this.buf as any)._f48)), true);
  }

  // 0x38: u32
  set Flags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set CredTypeCount(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set CredTypes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDENTIAL_TARGET_INFORMATIONW (size: 72)
 */
export interface CREDENTIAL_TARGET_INFORMATIONW {
  /** Windows.Win32.Foundation.PWSTR */
  TargetName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  NetbiosServerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DnsServerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  NetbiosDomainName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DnsDomainName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DnsTreeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  PackageName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Flags: number;
  /** u32 */
  CredTypeCount: number;
  /** ptr */
  CredTypes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCREDENTIAL_TARGET_INFORMATIONW = 72;

export function allocCREDENTIAL_TARGET_INFORMATIONW(data?: Partial<CREDENTIAL_TARGET_INFORMATIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDENTIAL_TARGET_INFORMATIONW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.TargetName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.TargetName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.NetbiosServerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.NetbiosServerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.DnsServerName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.DnsServerName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.NetbiosDomainName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.NetbiosDomainName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.DnsDomainName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.DnsDomainName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.DnsTreeName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.DnsTreeName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.PackageName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.PackageName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.Flags !== undefined) view.setUint32(56, Number(data.Flags), true);
  // 0x3c: u32
  if (data?.CredTypeCount !== undefined) view.setUint32(60, Number(data.CredTypeCount), true);
  // 0x40: pointer
  if (data?.CredTypes !== undefined) view.setBigUint64(64, data.CredTypes === null ? 0n : BigInt(util.toPointer(data.CredTypes)), true);
  return buf;
}

export class CREDENTIAL_TARGET_INFORMATIONWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get TargetName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get NetbiosServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get DnsServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get NetbiosDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get DnsDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get DnsTreeName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: buffer
  get PackageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get Flags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get CredTypeCount(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get CredTypes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set TargetName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set NetbiosServerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set DnsServerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set NetbiosDomainName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: buffer
  set DnsTreeName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: buffer
  set PackageName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(util.toPointer((this.buf as any)._f48)), true);
  }

  // 0x38: u32
  set Flags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set CredTypeCount(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set CredTypes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CERT_CREDENTIAL_INFO (size: 16)
 */
export interface CERT_CREDENTIAL_INFO {
  /** u32 */
  cbSize: number;
  /** array */
  rgbHashOfCert: Deno.PointerValue | null;
}

export const sizeofCERT_CREDENTIAL_INFO = 16;

export function allocCERT_CREDENTIAL_INFO(data?: Partial<CERT_CREDENTIAL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CREDENTIAL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgbHashOfCert !== undefined) view.setBigUint64(8, data.rgbHashOfCert === null ? 0n : BigInt(util.toPointer(data.rgbHashOfCert)), true);
  return buf;
}

export class CERT_CREDENTIAL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgbHashOfCert(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgbHashOfCert(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.USERNAME_TARGET_CREDENTIAL_INFO (size: 8)
 */
export interface USERNAME_TARGET_CREDENTIAL_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  UserName: string | null | Uint8Array | Uint16Array;
}

export const sizeofUSERNAME_TARGET_CREDENTIAL_INFO = 8;

export function allocUSERNAME_TARGET_CREDENTIAL_INFO(data?: Partial<USERNAME_TARGET_CREDENTIAL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUSERNAME_TARGET_CREDENTIAL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.UserName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

export class USERNAME_TARGET_CREDENTIAL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.BINARY_BLOB_CREDENTIAL_INFO (size: 16)
 */
export interface BINARY_BLOB_CREDENTIAL_INFO {
  /** u32 */
  cbBlob: number;
  /** ptr */
  pbBlob: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBINARY_BLOB_CREDENTIAL_INFO = 16;

export function allocBINARY_BLOB_CREDENTIAL_INFO(data?: Partial<BINARY_BLOB_CREDENTIAL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBINARY_BLOB_CREDENTIAL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbBlob !== undefined) view.setUint32(0, Number(data.cbBlob), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbBlob !== undefined) view.setBigUint64(8, data.pbBlob === null ? 0n : BigInt(util.toPointer(data.pbBlob)), true);
  return buf;
}

export class BINARY_BLOB_CREDENTIAL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbBlob(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbBlob(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbBlob(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbBlob(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

export type HWND = Deno.PointerValue;

export type HBITMAP = Deno.PointerValue;

/**
 * Windows.Win32.Security.Credentials.CREDUI_INFOA (size: 40)
 */
export interface CREDUI_INFOA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszMessageText: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszCaptionText: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmBanner: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREDUI_INFOA = 40;

export function allocCREDUI_INFOA(data?: Partial<CREDUI_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDUI_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: buffer
  if (data?.pszMessageText !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszMessageText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszCaptionText !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszCaptionText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.hbmBanner !== undefined) view.setBigUint64(32, data.hbmBanner === null ? 0n : BigInt(util.toPointer(data.hbmBanner)), true);
  return buf;
}

export class CREDUI_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszMessageText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pszCaptionText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get hbmBanner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set pszMessageText(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pszCaptionText(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: pointer
  set hbmBanner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDUI_INFOW (size: 40)
 */
export interface CREDUI_INFOW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszMessageText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszCaptionText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Gdi.HBITMAP */
  hbmBanner: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREDUI_INFOW = 40;

export function allocCREDUI_INFOW(data?: Partial<CREDUI_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDUI_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: buffer
  if (data?.pszMessageText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszMessageText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszCaptionText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszCaptionText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.hbmBanner !== undefined) view.setBigUint64(32, data.hbmBanner === null ? 0n : BigInt(util.toPointer(data.hbmBanner)), true);
  return buf;
}

export class CREDUI_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszMessageText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pszCaptionText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get hbmBanner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set pszMessageText(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pszCaptionText(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: pointer
  set hbmBanner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SCARD_IO_REQUEST (size: 8)
 */
export interface SCARD_IO_REQUEST {
  /** u32 */
  dwProtocol: number;
  /** u32 */
  cbPciLength: number;
}

export const sizeofSCARD_IO_REQUEST = 8;

export function allocSCARD_IO_REQUEST(data?: Partial<SCARD_IO_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_IO_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwProtocol !== undefined) view.setUint32(0, Number(data.dwProtocol), true);
  // 0x04: u32
  if (data?.cbPciLength !== undefined) view.setUint32(4, Number(data.cbPciLength), true);
  return buf;
}

export class SCARD_IO_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwProtocol(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbPciLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwProtocol(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbPciLength(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SCARD_T0_COMMAND (size: 8)
 */
export interface SCARD_T0_COMMAND {
  /** u8 */
  bCla: number;
  /** u8 */
  bIns: number;
  /** u8 */
  bP1: number;
  /** u8 */
  bP2: number;
  /** u8 */
  bP3: number;
}

export const sizeofSCARD_T0_COMMAND = 8;

export function allocSCARD_T0_COMMAND(data?: Partial<SCARD_T0_COMMAND>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_T0_COMMAND);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bCla !== undefined) view.setUint8(0, Number(data.bCla));
  // 0x01: u8
  if (data?.bIns !== undefined) view.setUint8(1, Number(data.bIns));
  // 0x02: u8
  if (data?.bP1 !== undefined) view.setUint8(2, Number(data.bP1));
  // 0x03: u8
  if (data?.bP2 !== undefined) view.setUint8(3, Number(data.bP2));
  // 0x04: u8
  if (data?.bP3 !== undefined) view.setUint8(4, Number(data.bP3));
  // 0x05: pad3
  return buf;
}

export class SCARD_T0_COMMANDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bCla(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bIns(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get bP1(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get bP2(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u8
  get bP3(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x00: u8
  set bCla(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bIns(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set bP1(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set bP2(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u8
  set bP3(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3
}

/**
 * Windows.Win32.Security.Credentials.SCARD_T0_REQUEST (size: 24)
 */
export interface SCARD_T0_REQUEST {
  /** Windows.Win32.Security.Credentials.SCARD_IO_REQUEST */
  ioRequest: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  bSw1: number;
  /** u8 */
  bSw2: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSCARD_T0_REQUEST = 24;

export function allocSCARD_T0_REQUEST(data?: Partial<SCARD_T0_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_T0_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ioRequest !== undefined) view.setBigUint64(0, data.ioRequest === null ? 0n : BigInt(util.toPointer(data.ioRequest)), true);
  // 0x08: u8
  if (data?.bSw1 !== undefined) view.setUint8(8, Number(data.bSw1));
  // 0x09: u8
  if (data?.bSw2 !== undefined) view.setUint8(9, Number(data.bSw2));
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class SCARD_T0_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ioRequest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get bSw1(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get bSw2(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ioRequest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set bSw1(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set bSw2(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SCARD_T1_REQUEST (size: 8)
 */
export interface SCARD_T1_REQUEST {
  /** Windows.Win32.Security.Credentials.SCARD_IO_REQUEST */
  ioRequest: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSCARD_T1_REQUEST = 8;

export function allocSCARD_T1_REQUEST(data?: Partial<SCARD_T1_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_T1_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ioRequest !== undefined) view.setBigUint64(0, data.ioRequest === null ? 0n : BigInt(util.toPointer(data.ioRequest)), true);
  return buf;
}

export class SCARD_T1_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ioRequest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ioRequest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SCARD_READERSTATEA (size: 40)
 */
export interface SCARD_READERSTATEA {
  /** Windows.Win32.Foundation.PSTR */
  szReader: string | null | Uint8Array;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Credentials.SCARD_STATE */
  dwCurrentState: SCARD_STATE;
  /** Windows.Win32.Security.Credentials.SCARD_STATE */
  dwEventState: SCARD_STATE;
  /** u32 */
  cbAtr: number;
  /** array */
  rgbAtr: Deno.PointerValue | null;
}

export const sizeofSCARD_READERSTATEA = 40;

export function allocSCARD_READERSTATEA(data?: Partial<SCARD_READERSTATEA>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_READERSTATEA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szReader !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.szReader);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(8, data.pvUserData === null ? 0n : BigInt(util.toPointer(data.pvUserData)), true);
  // 0x10: u32
  if (data?.dwCurrentState !== undefined) view.setUint32(16, Number(data.dwCurrentState), true);
  // 0x14: u32
  if (data?.dwEventState !== undefined) view.setUint32(20, Number(data.dwEventState), true);
  // 0x18: u32
  if (data?.cbAtr !== undefined) view.setUint32(24, Number(data.cbAtr), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgbAtr !== undefined) view.setBigUint64(32, data.rgbAtr === null ? 0n : BigInt(util.toPointer(data.rgbAtr)), true);
  return buf;
}

export class SCARD_READERSTATEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szReader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwCurrentState(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwEventState(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cbAtr(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgbAtr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set szReader(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwCurrentState(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwEventState(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cbAtr(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgbAtr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SCARD_READERSTATEW (size: 40)
 */
export interface SCARD_READERSTATEW {
  /** Windows.Win32.Foundation.PWSTR */
  szReader: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Credentials.SCARD_STATE */
  dwCurrentState: SCARD_STATE;
  /** Windows.Win32.Security.Credentials.SCARD_STATE */
  dwEventState: SCARD_STATE;
  /** u32 */
  cbAtr: number;
  /** array */
  rgbAtr: Deno.PointerValue | null;
}

export const sizeofSCARD_READERSTATEW = 40;

export function allocSCARD_READERSTATEW(data?: Partial<SCARD_READERSTATEW>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_READERSTATEW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szReader !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.szReader);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(8, data.pvUserData === null ? 0n : BigInt(util.toPointer(data.pvUserData)), true);
  // 0x10: u32
  if (data?.dwCurrentState !== undefined) view.setUint32(16, Number(data.dwCurrentState), true);
  // 0x14: u32
  if (data?.dwEventState !== undefined) view.setUint32(20, Number(data.dwEventState), true);
  // 0x18: u32
  if (data?.cbAtr !== undefined) view.setUint32(24, Number(data.cbAtr), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgbAtr !== undefined) view.setBigUint64(32, data.rgbAtr === null ? 0n : BigInt(util.toPointer(data.rgbAtr)), true);
  return buf;
}

export class SCARD_READERSTATEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szReader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwCurrentState(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwEventState(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cbAtr(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgbAtr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set szReader(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwCurrentState(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwEventState(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cbAtr(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgbAtr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SCARD_ATRMASK (size: 24)
 */
export interface SCARD_ATRMASK {
  /** u32 */
  cbAtr: number;
  /** array */
  rgbAtr: Deno.PointerValue | null;
  /** array */
  rgbMask: Deno.PointerValue | null;
}

export const sizeofSCARD_ATRMASK = 24;

export function allocSCARD_ATRMASK(data?: Partial<SCARD_ATRMASK>): Uint8Array {
  const buf = new Uint8Array(sizeofSCARD_ATRMASK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbAtr !== undefined) view.setUint32(0, Number(data.cbAtr), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgbAtr !== undefined) view.setBigUint64(8, data.rgbAtr === null ? 0n : BigInt(util.toPointer(data.rgbAtr)), true);
  // 0x10: pointer
  if (data?.rgbMask !== undefined) view.setBigUint64(16, data.rgbMask === null ? 0n : BigInt(util.toPointer(data.rgbMask)), true);
  return buf;
}

export class SCARD_ATRMASKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbAtr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgbAtr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get rgbMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbAtr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgbAtr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set rgbMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.OPENCARD_SEARCH_CRITERIAA (size: 96)
 */
export interface OPENCARD_SEARCH_CRITERIAA {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrGroupNames: string | null | Uint8Array;
  /** u32 */
  nMaxGroupNames: number;
  /** ptr */
  rgguidInterfaces: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cguidInterfaces: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCardNames: string | null | Uint8Array;
  /** u32 */
  nMaxCardNames: number;
  /** Windows.Win32.Security.Credentials.LPOCNCHKPROC */
  lpfnCheck: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Credentials.LPOCNCONNPROCA */
  lpfnConnect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Credentials.LPOCNDSCPROC */
  lpfnDisconnect: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
}

export const sizeofOPENCARD_SEARCH_CRITERIAA = 96;

export function allocOPENCARD_SEARCH_CRITERIAA(data?: Partial<OPENCARD_SEARCH_CRITERIAA>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENCARD_SEARCH_CRITERIAA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpstrGroupNames !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpstrGroupNames);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.nMaxGroupNames !== undefined) view.setUint32(16, Number(data.nMaxGroupNames), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgguidInterfaces !== undefined) view.setBigUint64(24, data.rgguidInterfaces === null ? 0n : BigInt(util.toPointer(data.rgguidInterfaces)), true);
  // 0x20: u32
  if (data?.cguidInterfaces !== undefined) view.setUint32(32, Number(data.cguidInterfaces), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.lpstrCardNames !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpstrCardNames);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.nMaxCardNames !== undefined) view.setUint32(48, Number(data.nMaxCardNames), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.lpfnCheck !== undefined) view.setBigUint64(56, data.lpfnCheck === null ? 0n : BigInt(util.toPointer(data.lpfnCheck)), true);
  // 0x40: pointer
  if (data?.lpfnConnect !== undefined) view.setBigUint64(64, data.lpfnConnect === null ? 0n : BigInt(util.toPointer(data.lpfnConnect)), true);
  // 0x48: pointer
  if (data?.lpfnDisconnect !== undefined) view.setBigUint64(72, data.lpfnDisconnect === null ? 0n : BigInt(util.toPointer(data.lpfnDisconnect)), true);
  // 0x50: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(80, data.pvUserData === null ? 0n : BigInt(util.toPointer(data.pvUserData)), true);
  // 0x58: u32
  if (data?.dwShareMode !== undefined) view.setUint32(88, Number(data.dwShareMode), true);
  // 0x5c: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(92, Number(data.dwPreferredProtocols), true);
  return buf;
}

export class OPENCARD_SEARCH_CRITERIAAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpstrGroupNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get nMaxGroupNames(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgguidInterfaces(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cguidInterfaces(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get lpstrCardNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get nMaxCardNames(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get lpfnCheck(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get lpfnConnect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get lpfnDisconnect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get dwShareMode(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(92, true);
  }

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpstrGroupNames(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set nMaxGroupNames(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgguidInterfaces(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cguidInterfaces(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set lpstrCardNames(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: u32
  set nMaxCardNames(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set lpfnCheck(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set lpfnConnect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set lpfnDisconnect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set dwShareMode(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(92, value, true);
  }
}

/**
 * Windows.Win32.Security.Credentials.OPENCARD_SEARCH_CRITERIAW (size: 96)
 */
export interface OPENCARD_SEARCH_CRITERIAW {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrGroupNames: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxGroupNames: number;
  /** ptr */
  rgguidInterfaces: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cguidInterfaces: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCardNames: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxCardNames: number;
  /** Windows.Win32.Security.Credentials.LPOCNCHKPROC */
  lpfnCheck: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Credentials.LPOCNCONNPROCW */
  lpfnConnect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Credentials.LPOCNDSCPROC */
  lpfnDisconnect: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
}

export const sizeofOPENCARD_SEARCH_CRITERIAW = 96;

export function allocOPENCARD_SEARCH_CRITERIAW(data?: Partial<OPENCARD_SEARCH_CRITERIAW>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENCARD_SEARCH_CRITERIAW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpstrGroupNames !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpstrGroupNames);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.nMaxGroupNames !== undefined) view.setUint32(16, Number(data.nMaxGroupNames), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgguidInterfaces !== undefined) view.setBigUint64(24, data.rgguidInterfaces === null ? 0n : BigInt(util.toPointer(data.rgguidInterfaces)), true);
  // 0x20: u32
  if (data?.cguidInterfaces !== undefined) view.setUint32(32, Number(data.cguidInterfaces), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.lpstrCardNames !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpstrCardNames);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.nMaxCardNames !== undefined) view.setUint32(48, Number(data.nMaxCardNames), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.lpfnCheck !== undefined) view.setBigUint64(56, data.lpfnCheck === null ? 0n : BigInt(util.toPointer(data.lpfnCheck)), true);
  // 0x40: pointer
  if (data?.lpfnConnect !== undefined) view.setBigUint64(64, data.lpfnConnect === null ? 0n : BigInt(util.toPointer(data.lpfnConnect)), true);
  // 0x48: pointer
  if (data?.lpfnDisconnect !== undefined) view.setBigUint64(72, data.lpfnDisconnect === null ? 0n : BigInt(util.toPointer(data.lpfnDisconnect)), true);
  // 0x50: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(80, data.pvUserData === null ? 0n : BigInt(util.toPointer(data.pvUserData)), true);
  // 0x58: u32
  if (data?.dwShareMode !== undefined) view.setUint32(88, Number(data.dwShareMode), true);
  // 0x5c: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(92, Number(data.dwPreferredProtocols), true);
  return buf;
}

export class OPENCARD_SEARCH_CRITERIAWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpstrGroupNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get nMaxGroupNames(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgguidInterfaces(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cguidInterfaces(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get lpstrCardNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get nMaxCardNames(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get lpfnCheck(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get lpfnConnect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get lpfnDisconnect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get dwShareMode(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(92, true);
  }

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpstrGroupNames(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set nMaxGroupNames(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgguidInterfaces(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cguidInterfaces(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set lpstrCardNames(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: u32
  set nMaxCardNames(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set lpfnCheck(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set lpfnConnect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set lpfnDisconnect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set dwShareMode(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(92, value, true);
  }
}

export type HICON = Deno.PointerValue;

/**
 * Windows.Win32.Security.Credentials.OPENCARDNAME_EXA (size: 128)
 */
export interface OPENCARDNAME_EXA {
  /** u32 */
  dwStructSize: number;
  /** usize */
  hSCardContext: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrTitle: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpstrSearchDesc: string | null | Uint8Array;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pOpenCardSearchCriteria: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Credentials.LPOCNCONNPROCA */
  lpfnConnect: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrRdr: string | null | Uint8Array;
  /** u32 */
  nMaxRdr: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCard: string | null | Uint8Array;
  /** u32 */
  nMaxCard: number;
  /** u32 */
  dwActiveProtocol: number;
  /** usize */
  hCardHandle: Deno.PointerValue;
}

export const sizeofOPENCARDNAME_EXA = 128;

export function allocOPENCARDNAME_EXA(data?: Partial<OPENCARDNAME_EXA>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENCARDNAME_EXA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.hSCardContext !== undefined) view.setBigUint64(8, BigInt(data.hSCardContext), true);
  // 0x10: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(16, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpstrTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.lpstrSearchDesc !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpstrSearchDesc);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(48, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x38: pointer
  if (data?.pOpenCardSearchCriteria !== undefined) view.setBigUint64(56, data.pOpenCardSearchCriteria === null ? 0n : BigInt(util.toPointer(data.pOpenCardSearchCriteria)), true);
  // 0x40: pointer
  if (data?.lpfnConnect !== undefined) view.setBigUint64(64, data.lpfnConnect === null ? 0n : BigInt(util.toPointer(data.lpfnConnect)), true);
  // 0x48: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(72, data.pvUserData === null ? 0n : BigInt(util.toPointer(data.pvUserData)), true);
  // 0x50: u32
  if (data?.dwShareMode !== undefined) view.setUint32(80, Number(data.dwShareMode), true);
  // 0x54: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(84, Number(data.dwPreferredProtocols), true);
  // 0x58: buffer
  if (data?.lpstrRdr !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.lpstrRdr);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: u32
  if (data?.nMaxRdr !== undefined) view.setUint32(96, Number(data.nMaxRdr), true);
  // 0x64: pad4
  // 0x68: buffer
  if (data?.lpstrCard !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.lpstrCard);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  // 0x70: u32
  if (data?.nMaxCard !== undefined) view.setUint32(112, Number(data.nMaxCard), true);
  // 0x74: u32
  if (data?.dwActiveProtocol !== undefined) view.setUint32(116, Number(data.dwActiveProtocol), true);
  // 0x78: usize
  if (data?.hCardHandle !== undefined) view.setBigUint64(120, BigInt(data.hCardHandle), true);
  return buf;
}

export class OPENCARDNAME_EXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get hSCardContext(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get lpstrSearchDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hIcon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pOpenCardSearchCriteria(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get lpfnConnect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get dwShareMode(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: buffer
  get lpstrRdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: u32
  get nMaxRdr(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  get lpstrCard(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u32
  get nMaxCard(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get dwActiveProtocol(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: usize
  get hCardHandle(): Deno.PointerValue {
    return Number(this.view.getBigUint64(120, true));
  }

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set hSCardContext(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: buffer
  set lpstrSearchDesc(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: pointer
  set hIcon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set pOpenCardSearchCriteria(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set lpfnConnect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set dwShareMode(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: buffer
  set lpstrRdr(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(util.toPointer((this.buf as any)._f88)), true);
  }

  // 0x60: u32
  set nMaxRdr(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  set lpstrCard(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(util.toPointer((this.buf as any)._f104)), true);
  }

  // 0x70: u32
  set nMaxCard(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set dwActiveProtocol(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: usize
  set hCardHandle(value: Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.OPENCARDNAME_EXW (size: 128)
 */
export interface OPENCARDNAME_EXW {
  /** u32 */
  dwStructSize: number;
  /** usize */
  hSCardContext: Deno.PointerValue;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrSearchDesc: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pOpenCardSearchCriteria: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Credentials.LPOCNCONNPROCW */
  lpfnConnect: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrRdr: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxRdr: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCard: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxCard: number;
  /** u32 */
  dwActiveProtocol: number;
  /** usize */
  hCardHandle: Deno.PointerValue;
}

export const sizeofOPENCARDNAME_EXW = 128;

export function allocOPENCARDNAME_EXW(data?: Partial<OPENCARDNAME_EXW>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENCARDNAME_EXW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.hSCardContext !== undefined) view.setBigUint64(8, BigInt(data.hSCardContext), true);
  // 0x10: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(16, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpstrTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.lpstrSearchDesc !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpstrSearchDesc);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(48, data.hIcon === null ? 0n : BigInt(util.toPointer(data.hIcon)), true);
  // 0x38: pointer
  if (data?.pOpenCardSearchCriteria !== undefined) view.setBigUint64(56, data.pOpenCardSearchCriteria === null ? 0n : BigInt(util.toPointer(data.pOpenCardSearchCriteria)), true);
  // 0x40: pointer
  if (data?.lpfnConnect !== undefined) view.setBigUint64(64, data.lpfnConnect === null ? 0n : BigInt(util.toPointer(data.lpfnConnect)), true);
  // 0x48: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(72, data.pvUserData === null ? 0n : BigInt(util.toPointer(data.pvUserData)), true);
  // 0x50: u32
  if (data?.dwShareMode !== undefined) view.setUint32(80, Number(data.dwShareMode), true);
  // 0x54: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(84, Number(data.dwPreferredProtocols), true);
  // 0x58: buffer
  if (data?.lpstrRdr !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpstrRdr);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: u32
  if (data?.nMaxRdr !== undefined) view.setUint32(96, Number(data.nMaxRdr), true);
  // 0x64: pad4
  // 0x68: buffer
  if (data?.lpstrCard !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.lpstrCard);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  // 0x70: u32
  if (data?.nMaxCard !== undefined) view.setUint32(112, Number(data.nMaxCard), true);
  // 0x74: u32
  if (data?.dwActiveProtocol !== undefined) view.setUint32(116, Number(data.dwActiveProtocol), true);
  // 0x78: usize
  if (data?.hCardHandle !== undefined) view.setBigUint64(120, BigInt(data.hCardHandle), true);
  return buf;
}

export class OPENCARDNAME_EXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get hSCardContext(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get lpstrSearchDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hIcon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pOpenCardSearchCriteria(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get lpfnConnect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get dwShareMode(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: buffer
  get lpstrRdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: u32
  get nMaxRdr(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  get lpstrCard(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u32
  get nMaxCard(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get dwActiveProtocol(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: usize
  get hCardHandle(): Deno.PointerValue {
    return Number(this.view.getBigUint64(120, true));
  }

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set hSCardContext(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: buffer
  set lpstrSearchDesc(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: pointer
  set hIcon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set pOpenCardSearchCriteria(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set lpfnConnect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set dwShareMode(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: buffer
  set lpstrRdr(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(util.toPointer((this.buf as any)._f88)), true);
  }

  // 0x60: u32
  set nMaxRdr(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  set lpstrCard(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(util.toPointer((this.buf as any)._f104)), true);
  }

  // 0x70: u32
  set nMaxCard(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set dwActiveProtocol(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: usize
  set hCardHandle(value: Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.READER_SEL_REQUEST (size: 24)
 */
export interface READER_SEL_REQUEST {
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
  /** Windows.Win32.Security.Credentials.READER_SEL_REQUEST_MATCH_TYPE */
  MatchType: READER_SEL_REQUEST_MATCH_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofREADER_SEL_REQUEST = 24;

export function allocREADER_SEL_REQUEST(data?: Partial<READER_SEL_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofREADER_SEL_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwShareMode !== undefined) view.setUint32(0, Number(data.dwShareMode), true);
  // 0x04: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(4, Number(data.dwPreferredProtocols), true);
  // 0x08: i32
  if (data?.MatchType !== undefined) view.setInt32(8, Number(data.MatchType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class READER_SEL_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwShareMode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get MatchType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwShareMode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set MatchType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.READER_SEL_RESPONSE (size: 16)
 */
export interface READER_SEL_RESPONSE {
  /** u32 */
  cbReaderNameOffset: number;
  /** u32 */
  cchReaderNameLength: number;
  /** u32 */
  cbCardNameOffset: number;
  /** u32 */
  cchCardNameLength: number;
}

export const sizeofREADER_SEL_RESPONSE = 16;

export function allocREADER_SEL_RESPONSE(data?: Partial<READER_SEL_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofREADER_SEL_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbReaderNameOffset !== undefined) view.setUint32(0, Number(data.cbReaderNameOffset), true);
  // 0x04: u32
  if (data?.cchReaderNameLength !== undefined) view.setUint32(4, Number(data.cchReaderNameLength), true);
  // 0x08: u32
  if (data?.cbCardNameOffset !== undefined) view.setUint32(8, Number(data.cbCardNameOffset), true);
  // 0x0c: u32
  if (data?.cchCardNameLength !== undefined) view.setUint32(12, Number(data.cchCardNameLength), true);
  return buf;
}

export class READER_SEL_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbReaderNameOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cchReaderNameLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbCardNameOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cchCardNameLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set cbReaderNameOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cchReaderNameLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbCardNameOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cchCardNameLength(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Credentials.OPENCARDNAMEA (size: 176)
 */
export interface OPENCARDNAMEA {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** usize */
  hSCardContext: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  lpstrGroupNames: string | null | Uint8Array;
  /** u32 */
  nMaxGroupNames: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCardNames: string | null | Uint8Array;
  /** u32 */
  nMaxCardNames: number;
  /** ptr */
  rgguidInterfaces: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cguidInterfaces: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrRdr: string | null | Uint8Array;
  /** u32 */
  nMaxRdr: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrCard: string | null | Uint8Array;
  /** u32 */
  nMaxCard: number;
  /** Windows.Win32.Foundation.PSTR */
  lpstrTitle: string | null | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
  /** u32 */
  dwActiveProtocol: number;
  /** Windows.Win32.Security.Credentials.LPOCNCONNPROCA */
  lpfnConnect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Credentials.LPOCNCHKPROC */
  lpfnCheck: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Credentials.LPOCNDSCPROC */
  lpfnDisconnect: Uint8Array | Deno.PointerValue | null;
  /** usize */
  hCardHandle: Deno.PointerValue;
}

export const sizeofOPENCARDNAMEA = 176;

export function allocOPENCARDNAMEA(data?: Partial<OPENCARDNAMEA>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENCARDNAMEA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: usize
  if (data?.hSCardContext !== undefined) view.setBigUint64(16, BigInt(data.hSCardContext), true);
  // 0x18: buffer
  if (data?.lpstrGroupNames !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpstrGroupNames);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.nMaxGroupNames !== undefined) view.setUint32(32, Number(data.nMaxGroupNames), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.lpstrCardNames !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpstrCardNames);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.nMaxCardNames !== undefined) view.setUint32(48, Number(data.nMaxCardNames), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rgguidInterfaces !== undefined) view.setBigUint64(56, data.rgguidInterfaces === null ? 0n : BigInt(util.toPointer(data.rgguidInterfaces)), true);
  // 0x40: u32
  if (data?.cguidInterfaces !== undefined) view.setUint32(64, Number(data.cguidInterfaces), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.lpstrRdr !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.lpstrRdr);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.nMaxRdr !== undefined) view.setUint32(80, Number(data.nMaxRdr), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.lpstrCard !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.lpstrCard);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: u32
  if (data?.nMaxCard !== undefined) view.setUint32(96, Number(data.nMaxCard), true);
  // 0x64: pad4
  // 0x68: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.lpstrTitle);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  // 0x70: u32
  if (data?.dwFlags !== undefined) view.setUint32(112, Number(data.dwFlags), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(120, data.pvUserData === null ? 0n : BigInt(util.toPointer(data.pvUserData)), true);
  // 0x80: u32
  if (data?.dwShareMode !== undefined) view.setUint32(128, Number(data.dwShareMode), true);
  // 0x84: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(132, Number(data.dwPreferredProtocols), true);
  // 0x88: u32
  if (data?.dwActiveProtocol !== undefined) view.setUint32(136, Number(data.dwActiveProtocol), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.lpfnConnect !== undefined) view.setBigUint64(144, data.lpfnConnect === null ? 0n : BigInt(util.toPointer(data.lpfnConnect)), true);
  // 0x98: pointer
  if (data?.lpfnCheck !== undefined) view.setBigUint64(152, data.lpfnCheck === null ? 0n : BigInt(util.toPointer(data.lpfnCheck)), true);
  // 0xa0: pointer
  if (data?.lpfnDisconnect !== undefined) view.setBigUint64(160, data.lpfnDisconnect === null ? 0n : BigInt(util.toPointer(data.lpfnDisconnect)), true);
  // 0xa8: usize
  if (data?.hCardHandle !== undefined) view.setBigUint64(168, BigInt(data.hCardHandle), true);
  return buf;
}

export class OPENCARDNAMEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: usize
  get hSCardContext(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: buffer
  get lpstrGroupNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get nMaxGroupNames(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get lpstrCardNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get nMaxCardNames(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get rgguidInterfaces(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get cguidInterfaces(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  get lpstrRdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get nMaxRdr(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  get lpstrCard(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: u32
  get nMaxCard(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u32
  get dwFlags(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: u32
  get dwShareMode(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get dwActiveProtocol(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get lpfnConnect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: pointer
  get lpfnCheck(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: pointer
  get lpfnDisconnect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(160, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa8: usize
  get hCardHandle(): Deno.PointerValue {
    return Number(this.view.getBigUint64(168, true));
  }

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: usize
  set hSCardContext(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: buffer
  set lpstrGroupNames(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set nMaxGroupNames(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set lpstrCardNames(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: u32
  set nMaxCardNames(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set rgguidInterfaces(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set cguidInterfaces(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  set lpstrRdr(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(util.toPointer((this.buf as any)._f72)), true);
  }

  // 0x50: u32
  set nMaxRdr(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  set lpstrCard(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(util.toPointer((this.buf as any)._f88)), true);
  }

  // 0x60: u32
  set nMaxCard(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(util.toPointer((this.buf as any)._f104)), true);
  }

  // 0x70: u32
  set dwFlags(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: u32
  set dwShareMode(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set dwActiveProtocol(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set lpfnConnect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, BigInt(util.toPointer(value)), true);
  }

  // 0x98: pointer
  set lpfnCheck(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, BigInt(util.toPointer(value)), true);
  }

  // 0xa0: pointer
  set lpfnDisconnect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(160, BigInt(util.toPointer(value)), true);
  }

  // 0xa8: usize
  set hCardHandle(value: Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.OPENCARDNAMEW (size: 176)
 */
export interface OPENCARDNAMEW {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue | null;
  /** usize */
  hSCardContext: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrGroupNames: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxGroupNames: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCardNames: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxCardNames: number;
  /** ptr */
  rgguidInterfaces: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cguidInterfaces: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrRdr: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxRdr: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrCard: string | null | Uint8Array | Uint16Array;
  /** u32 */
  nMaxCard: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpstrTitle: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  pvUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwShareMode: number;
  /** u32 */
  dwPreferredProtocols: number;
  /** u32 */
  dwActiveProtocol: number;
  /** Windows.Win32.Security.Credentials.LPOCNCONNPROCW */
  lpfnConnect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Credentials.LPOCNCHKPROC */
  lpfnCheck: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Credentials.LPOCNDSCPROC */
  lpfnDisconnect: Uint8Array | Deno.PointerValue | null;
  /** usize */
  hCardHandle: Deno.PointerValue;
}

export const sizeofOPENCARDNAMEW = 176;

export function allocOPENCARDNAMEW(data?: Partial<OPENCARDNAMEW>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENCARDNAMEW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(util.toPointer(data.hwndOwner)), true);
  // 0x10: usize
  if (data?.hSCardContext !== undefined) view.setBigUint64(16, BigInt(data.hSCardContext), true);
  // 0x18: buffer
  if (data?.lpstrGroupNames !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpstrGroupNames);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.nMaxGroupNames !== undefined) view.setUint32(32, Number(data.nMaxGroupNames), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.lpstrCardNames !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpstrCardNames);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.nMaxCardNames !== undefined) view.setUint32(48, Number(data.nMaxCardNames), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rgguidInterfaces !== undefined) view.setBigUint64(56, data.rgguidInterfaces === null ? 0n : BigInt(util.toPointer(data.rgguidInterfaces)), true);
  // 0x40: u32
  if (data?.cguidInterfaces !== undefined) view.setUint32(64, Number(data.cguidInterfaces), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.lpstrRdr !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.lpstrRdr);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.nMaxRdr !== undefined) view.setUint32(80, Number(data.nMaxRdr), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.lpstrCard !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpstrCard);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: u32
  if (data?.nMaxCard !== undefined) view.setUint32(96, Number(data.nMaxCard), true);
  // 0x64: pad4
  // 0x68: buffer
  if (data?.lpstrTitle !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.lpstrTitle);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  // 0x70: u32
  if (data?.dwFlags !== undefined) view.setUint32(112, Number(data.dwFlags), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.pvUserData !== undefined) view.setBigUint64(120, data.pvUserData === null ? 0n : BigInt(util.toPointer(data.pvUserData)), true);
  // 0x80: u32
  if (data?.dwShareMode !== undefined) view.setUint32(128, Number(data.dwShareMode), true);
  // 0x84: u32
  if (data?.dwPreferredProtocols !== undefined) view.setUint32(132, Number(data.dwPreferredProtocols), true);
  // 0x88: u32
  if (data?.dwActiveProtocol !== undefined) view.setUint32(136, Number(data.dwActiveProtocol), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.lpfnConnect !== undefined) view.setBigUint64(144, data.lpfnConnect === null ? 0n : BigInt(util.toPointer(data.lpfnConnect)), true);
  // 0x98: pointer
  if (data?.lpfnCheck !== undefined) view.setBigUint64(152, data.lpfnCheck === null ? 0n : BigInt(util.toPointer(data.lpfnCheck)), true);
  // 0xa0: pointer
  if (data?.lpfnDisconnect !== undefined) view.setBigUint64(160, data.lpfnDisconnect === null ? 0n : BigInt(util.toPointer(data.lpfnDisconnect)), true);
  // 0xa8: usize
  if (data?.hCardHandle !== undefined) view.setBigUint64(168, BigInt(data.hCardHandle), true);
  return buf;
}

export class OPENCARDNAMEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: usize
  get hSCardContext(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: buffer
  get lpstrGroupNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get nMaxGroupNames(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get lpstrCardNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get nMaxCardNames(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get rgguidInterfaces(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get cguidInterfaces(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  get lpstrRdr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get nMaxRdr(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  get lpstrCard(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: u32
  get nMaxCard(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  get lpstrTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u32
  get dwFlags(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get pvUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: u32
  get dwShareMode(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwPreferredProtocols(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get dwActiveProtocol(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get lpfnConnect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: pointer
  get lpfnCheck(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: pointer
  get lpfnDisconnect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(160, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa8: usize
  get hCardHandle(): Deno.PointerValue {
    return Number(this.view.getBigUint64(168, true));
  }

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: usize
  set hSCardContext(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: buffer
  set lpstrGroupNames(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set nMaxGroupNames(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set lpstrCardNames(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: u32
  set nMaxCardNames(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set rgguidInterfaces(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set cguidInterfaces(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  set lpstrRdr(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(util.toPointer((this.buf as any)._f72)), true);
  }

  // 0x50: u32
  set nMaxRdr(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  set lpstrCard(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(util.toPointer((this.buf as any)._f88)), true);
  }

  // 0x60: u32
  set nMaxCard(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: buffer
  set lpstrTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(util.toPointer((this.buf as any)._f104)), true);
  }

  // 0x70: u32
  set dwFlags(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set pvUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: u32
  set dwShareMode(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwPreferredProtocols(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set dwActiveProtocol(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set lpfnConnect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, BigInt(util.toPointer(value)), true);
  }

  // 0x98: pointer
  set lpfnCheck(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, BigInt(util.toPointer(value)), true);
  }

  // 0xa0: pointer
  set lpfnDisconnect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(160, BigInt(util.toPointer(value)), true);
  }

  // 0xa8: usize
  set hCardHandle(value: Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.SecPkgContext_ClientCreds (size: 16)
 */
export interface SecPkgContext_ClientCreds {
  /** u32 */
  AuthBufferLen: number;
  /** ptr */
  AuthBuffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_ClientCreds = 16;

export function allocSecPkgContext_ClientCreds(data?: Partial<SecPkgContext_ClientCreds>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ClientCreds);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AuthBufferLen !== undefined) view.setUint32(0, Number(data.AuthBufferLen), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.AuthBuffer !== undefined) view.setBigUint64(8, data.AuthBuffer === null ? 0n : BigInt(util.toPointer(data.AuthBuffer)), true);
  return buf;
}

export class SecPkgContext_ClientCredsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AuthBufferLen(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get AuthBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AuthBufferLen(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set AuthBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDSSP_CRED (size: 24)
 */
export interface CREDSSP_CRED {
  /** Windows.Win32.Security.Credentials.CREDSPP_SUBMIT_TYPE */
  Type: CREDSPP_SUBMIT_TYPE;
  /** ptr */
  pSchannelCred: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pSpnegoCred: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCREDSSP_CRED = 24;

export function allocCREDSSP_CRED(data?: Partial<CREDSSP_CRED>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDSSP_CRED);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pSchannelCred !== undefined) view.setBigUint64(8, data.pSchannelCred === null ? 0n : BigInt(util.toPointer(data.pSchannelCred)), true);
  // 0x10: pointer
  if (data?.pSpnegoCred !== undefined) view.setBigUint64(16, data.pSpnegoCred === null ? 0n : BigInt(util.toPointer(data.pSpnegoCred)), true);
  return buf;
}

export class CREDSSP_CREDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pSchannelCred(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pSpnegoCred(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pSchannelCred(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pSpnegoCred(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Credentials.CREDSSP_CRED_EX (size: 24)
 */
export interface CREDSSP_CRED_EX {
  /** Windows.Win32.Security.Credentials.CREDSPP_SUBMIT_TYPE */
  Type: CREDSPP_SUBMIT_TYPE;
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
  /** Windows.Win32.Security.Credentials.CREDSSP_CRED */
  Cred: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREDSSP_CRED_EX = 24;

export function allocCREDSSP_CRED_EX(data?: Partial<CREDSSP_CRED_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofCREDSSP_CRED_EX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.Reserved !== undefined) view.setUint32(12, Number(data.Reserved), true);
  // 0x10: pointer
  if (data?.Cred !== undefined) view.setBigUint64(16, data.Cred === null ? 0n : BigInt(util.toPointer(data.Cred)), true);
  return buf;
}

export class CREDSSP_CRED_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Reserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Cred(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Reserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Cred(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.NgcTicketContext (size: 24)
 */
export interface NgcTicketContext {
  /** array */
  wszTicket: Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.NCRYPT_KEY_HANDLE */
  hKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hImpersonateToken: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNgcTicketContext = 24;

export function allocNgcTicketContext(data?: Partial<NgcTicketContext>): Uint8Array {
  const buf = new Uint8Array(sizeofNgcTicketContext);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wszTicket !== undefined) view.setBigUint64(0, data.wszTicket === null ? 0n : BigInt(util.toPointer(data.wszTicket)), true);
  // 0x08: pointer
  if (data?.hKey !== undefined) view.setBigUint64(8, data.hKey === null ? 0n : BigInt(util.toPointer(data.hKey)), true);
  // 0x10: pointer
  if (data?.hImpersonateToken !== undefined) view.setBigUint64(16, data.hImpersonateToken === null ? 0n : BigInt(util.toPointer(data.hImpersonateToken)), true);
  return buf;
}

export class NgcTicketContextView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wszTicket(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get hKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hImpersonateToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set wszTicket(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set hKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hImpersonateToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.RAS_AUTH_ATTRIBUTE (size: 16)
 */
export interface RAS_AUTH_ATTRIBUTE {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.RAS_AUTH_ATTRIBUTE_TYPE */
  raaType: RAS_AUTH_ATTRIBUTE_TYPE;
  /** u32 */
  dwLength: number;
  /** ptr */
  Value: Deno.PointerValue | Uint8Array | null;
}

export const sizeofRAS_AUTH_ATTRIBUTE = 16;

export function allocRAS_AUTH_ATTRIBUTE(data?: Partial<RAS_AUTH_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofRAS_AUTH_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.raaType !== undefined) view.setInt32(0, Number(data.raaType), true);
  // 0x04: u32
  if (data?.dwLength !== undefined) view.setUint32(4, Number(data.dwLength), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class RAS_AUTH_ATTRIBUTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get raaType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set raaType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.PPP_EAP_PACKET (size: 24)
 */
export interface PPP_EAP_PACKET {
  /** u8 */
  Code: number;
  /** u8 */
  Id: number;
  /** array */
  Length: Deno.PointerValue | null;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofPPP_EAP_PACKET = 24;

export function allocPPP_EAP_PACKET(data?: Partial<PPP_EAP_PACKET>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_EAP_PACKET);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Code !== undefined) view.setUint8(0, Number(data.Code));
  // 0x01: u8
  if (data?.Id !== undefined) view.setUint8(1, Number(data.Id));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Length !== undefined) view.setBigUint64(8, data.Length === null ? 0n : BigInt(util.toPointer(data.Length)), true);
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class PPP_EAP_PACKETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Code(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Id(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Length(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set Code(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Id(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Length(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.PPP_EAP_INPUT (size: 144)
 */
export interface PPP_EAP_INPUT {
  /** u32 */
  dwSizeInBytes: number;
  /** u32 */
  fFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fAuthenticator: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIdentity: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPassword: string | null | Uint8Array | Uint16Array;
  /** u8 */
  bInitialId: number;
  /** ptr */
  pUserAttributes: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fAuthenticationComplete: boolean;
  /** u32 */
  dwAuthResultCode: number;
  /** Windows.Win32.Foundation.HANDLE */
  hTokenImpersonateUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fSuccessPacketReceived: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDataReceivedFromInteractiveUI: boolean;
  /** ptr */
  pDataFromInteractiveUI: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOfDataFromInteractiveUI: number;
  /** ptr */
  pConnectionData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOfConnectionData: number;
  /** ptr */
  pUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOfUserData: number;
  /** Windows.Win32.Foundation.HANDLE */
  hReserved: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidConnectionId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  isVpn: boolean;
}

export const sizeofPPP_EAP_INPUT = 144;

export function allocPPP_EAP_INPUT(data?: Partial<PPP_EAP_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_EAP_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeInBytes !== undefined) view.setUint32(0, Number(data.dwSizeInBytes), true);
  // 0x04: u32
  if (data?.fFlags !== undefined) view.setUint32(4, Number(data.fFlags), true);
  // 0x08: i32
  if (data?.fAuthenticator !== undefined) view.setInt32(8, Number(data.fAuthenticator), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pwszIdentity !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszIdentity);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszPassword !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszPassword);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u8
  if (data?.bInitialId !== undefined) view.setUint8(32, Number(data.bInitialId));
  // 0x21: pad7
  // 0x28: pointer
  if (data?.pUserAttributes !== undefined) view.setBigUint64(40, data.pUserAttributes === null ? 0n : BigInt(util.toPointer(data.pUserAttributes)), true);
  // 0x30: i32
  if (data?.fAuthenticationComplete !== undefined) view.setInt32(48, Number(data.fAuthenticationComplete), true);
  // 0x34: u32
  if (data?.dwAuthResultCode !== undefined) view.setUint32(52, Number(data.dwAuthResultCode), true);
  // 0x38: pointer
  if (data?.hTokenImpersonateUser !== undefined) view.setBigUint64(56, data.hTokenImpersonateUser === null ? 0n : BigInt(util.toPointer(data.hTokenImpersonateUser)), true);
  // 0x40: i32
  if (data?.fSuccessPacketReceived !== undefined) view.setInt32(64, Number(data.fSuccessPacketReceived), true);
  // 0x44: i32
  if (data?.fDataReceivedFromInteractiveUI !== undefined) view.setInt32(68, Number(data.fDataReceivedFromInteractiveUI), true);
  // 0x48: pointer
  if (data?.pDataFromInteractiveUI !== undefined) view.setBigUint64(72, data.pDataFromInteractiveUI === null ? 0n : BigInt(util.toPointer(data.pDataFromInteractiveUI)), true);
  // 0x50: u32
  if (data?.dwSizeOfDataFromInteractiveUI !== undefined) view.setUint32(80, Number(data.dwSizeOfDataFromInteractiveUI), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pConnectionData !== undefined) view.setBigUint64(88, data.pConnectionData === null ? 0n : BigInt(util.toPointer(data.pConnectionData)), true);
  // 0x60: u32
  if (data?.dwSizeOfConnectionData !== undefined) view.setUint32(96, Number(data.dwSizeOfConnectionData), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.pUserData !== undefined) view.setBigUint64(104, data.pUserData === null ? 0n : BigInt(util.toPointer(data.pUserData)), true);
  // 0x70: u32
  if (data?.dwSizeOfUserData !== undefined) view.setUint32(112, Number(data.dwSizeOfUserData), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.hReserved !== undefined) view.setBigUint64(120, data.hReserved === null ? 0n : BigInt(util.toPointer(data.hReserved)), true);
  // 0x80: pointer
  if (data?.guidConnectionId !== undefined) view.setBigUint64(128, data.guidConnectionId === null ? 0n : BigInt(util.toPointer(data.guidConnectionId)), true);
  // 0x88: i32
  if (data?.isVpn !== undefined) view.setInt32(136, Number(data.isVpn), true);
  // 0x8c: pad4
  return buf;
}

export class PPP_EAP_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSizeInBytes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get fAuthenticator(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pwszIdentity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pwszPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u8
  get bInitialId(): number {
    return this.view.getUint8(32);
  }

  // 0x21: pad7

  // 0x28: pointer
  get pUserAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: i32
  get fAuthenticationComplete(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get dwAuthResultCode(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get hTokenImpersonateUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: i32
  get fSuccessPacketReceived(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: i32
  get fDataReceivedFromInteractiveUI(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: pointer
  get pDataFromInteractiveUI(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get dwSizeOfDataFromInteractiveUI(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get pConnectionData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: u32
  get dwSizeOfConnectionData(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get pUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u32
  get dwSizeOfUserData(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get hReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get guidConnectionId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: i32
  get isVpn(): number {
    return this.view.getInt32(136, true);
  }

  // 0x8c: pad4

  // 0x00: u32
  set dwSizeInBytes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set fAuthenticator(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pwszIdentity(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pwszPassword(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u8
  set bInitialId(value: number) {
    this.view.setUint8(32, value);
  }

  // 0x21: pad7

  // 0x28: pointer
  set pUserAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: i32
  set fAuthenticationComplete(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set dwAuthResultCode(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set hTokenImpersonateUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: i32
  set fSuccessPacketReceived(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: i32
  set fDataReceivedFromInteractiveUI(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: pointer
  set pDataFromInteractiveUI(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set dwSizeOfDataFromInteractiveUI(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set pConnectionData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: u32
  set dwSizeOfConnectionData(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set pUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: u32
  set dwSizeOfUserData(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set hReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set guidConnectionId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }

  // 0x88: i32
  set isVpn(value: number) {
    this.view.setInt32(136, value, true);
  }

  // 0x8c: pad4
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.PPP_EAP_OUTPUT (size: 96)
 */
export interface PPP_EAP_OUTPUT {
  /** u32 */
  dwSizeInBytes: number;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.PPP_EAP_ACTION */
  Action: PPP_EAP_ACTION;
  /** u32 */
  dwAuthResultCode: number;
  /** ptr */
  pUserAttributes: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fInvokeInteractiveUI: boolean;
  /** ptr */
  pUIContextData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOfUIContextData: number;
  /** Windows.Win32.Foundation.BOOL */
  fSaveConnectionData: boolean;
  /** ptr */
  pConnectionData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOfConnectionData: number;
  /** Windows.Win32.Foundation.BOOL */
  fSaveUserData: boolean;
  /** ptr */
  pUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeOfUserData: number;
  /** ptr */
  pNgcKerbTicket: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fSaveToCredMan: boolean;
}

export const sizeofPPP_EAP_OUTPUT = 96;

export function allocPPP_EAP_OUTPUT(data?: Partial<PPP_EAP_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_EAP_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeInBytes !== undefined) view.setUint32(0, Number(data.dwSizeInBytes), true);
  // 0x04: i32
  if (data?.Action !== undefined) view.setInt32(4, Number(data.Action), true);
  // 0x08: u32
  if (data?.dwAuthResultCode !== undefined) view.setUint32(8, Number(data.dwAuthResultCode), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pUserAttributes !== undefined) view.setBigUint64(16, data.pUserAttributes === null ? 0n : BigInt(util.toPointer(data.pUserAttributes)), true);
  // 0x18: i32
  if (data?.fInvokeInteractiveUI !== undefined) view.setInt32(24, Number(data.fInvokeInteractiveUI), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pUIContextData !== undefined) view.setBigUint64(32, data.pUIContextData === null ? 0n : BigInt(util.toPointer(data.pUIContextData)), true);
  // 0x28: u32
  if (data?.dwSizeOfUIContextData !== undefined) view.setUint32(40, Number(data.dwSizeOfUIContextData), true);
  // 0x2c: i32
  if (data?.fSaveConnectionData !== undefined) view.setInt32(44, Number(data.fSaveConnectionData), true);
  // 0x30: pointer
  if (data?.pConnectionData !== undefined) view.setBigUint64(48, data.pConnectionData === null ? 0n : BigInt(util.toPointer(data.pConnectionData)), true);
  // 0x38: u32
  if (data?.dwSizeOfConnectionData !== undefined) view.setUint32(56, Number(data.dwSizeOfConnectionData), true);
  // 0x3c: i32
  if (data?.fSaveUserData !== undefined) view.setInt32(60, Number(data.fSaveUserData), true);
  // 0x40: pointer
  if (data?.pUserData !== undefined) view.setBigUint64(64, data.pUserData === null ? 0n : BigInt(util.toPointer(data.pUserData)), true);
  // 0x48: u32
  if (data?.dwSizeOfUserData !== undefined) view.setUint32(72, Number(data.dwSizeOfUserData), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pNgcKerbTicket !== undefined) view.setBigUint64(80, data.pNgcKerbTicket === null ? 0n : BigInt(util.toPointer(data.pNgcKerbTicket)), true);
  // 0x58: i32
  if (data?.fSaveToCredMan !== undefined) view.setInt32(88, Number(data.fSaveToCredMan), true);
  // 0x5c: pad4
  return buf;
}

export class PPP_EAP_OUTPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSizeInBytes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Action(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get dwAuthResultCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pUserAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get fInvokeInteractiveUI(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pUIContextData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwSizeOfUIContextData(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: i32
  get fSaveConnectionData(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: pointer
  get pConnectionData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get dwSizeOfConnectionData(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: i32
  get fSaveUserData(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: pointer
  get pUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get dwSizeOfUserData(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get pNgcKerbTicket(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: i32
  get fSaveToCredMan(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: pad4

  // 0x00: u32
  set dwSizeInBytes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Action(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set dwAuthResultCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pUserAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set fInvokeInteractiveUI(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pUIContextData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set dwSizeOfUIContextData(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: i32
  set fSaveConnectionData(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: pointer
  set pConnectionData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set dwSizeOfConnectionData(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: i32
  set fSaveUserData(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: pointer
  set pUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set dwSizeOfUserData(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set pNgcKerbTicket(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: i32
  set fSaveToCredMan(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.PPP_EAP_INFO (size: 40)
 */
export interface PPP_EAP_INFO {
  /** u32 */
  dwSizeInBytes: number;
  /** u32 */
  dwEapTypeId: number;
  /** isize */
  RasEapInitialize: Deno.PointerValue;
  /** isize */
  RasEapBegin: Deno.PointerValue;
  /** isize */
  RasEapEnd: Deno.PointerValue;
  /** isize */
  RasEapMakeMessage: Deno.PointerValue;
}

export const sizeofPPP_EAP_INFO = 40;

export function allocPPP_EAP_INFO(data?: Partial<PPP_EAP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPPP_EAP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeInBytes !== undefined) view.setUint32(0, Number(data.dwSizeInBytes), true);
  // 0x04: u32
  if (data?.dwEapTypeId !== undefined) view.setUint32(4, Number(data.dwEapTypeId), true);
  // 0x08: isize
  if (data?.RasEapInitialize !== undefined) view.setBigInt64(8, BigInt(data.RasEapInitialize), true);
  // 0x10: isize
  if (data?.RasEapBegin !== undefined) view.setBigInt64(16, BigInt(data.RasEapBegin), true);
  // 0x18: isize
  if (data?.RasEapEnd !== undefined) view.setBigInt64(24, BigInt(data.RasEapEnd), true);
  // 0x20: isize
  if (data?.RasEapMakeMessage !== undefined) view.setBigInt64(32, BigInt(data.RasEapMakeMessage), true);
  return buf;
}

export class PPP_EAP_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSizeInBytes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwEapTypeId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: isize
  get RasEapInitialize(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get RasEapBegin(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get RasEapEnd(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get RasEapMakeMessage(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x00: u32
  set dwSizeInBytes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwEapTypeId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: isize
  set RasEapInitialize(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set RasEapBegin(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set RasEapEnd(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set RasEapMakeMessage(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.LEGACY_IDENTITY_UI_PARAMS (size: 72)
 */
export interface LEGACY_IDENTITY_UI_PARAMS {
  /** u32 */
  eapType: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwSizeofConnectionData: number;
  /** ptr */
  pConnectionData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeofUserData: number;
  /** ptr */
  pUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeofUserDataOut: number;
  /** ptr */
  pUserDataOut: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIdentity: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwError: number;
}

export const sizeofLEGACY_IDENTITY_UI_PARAMS = 72;

export function allocLEGACY_IDENTITY_UI_PARAMS(data?: Partial<LEGACY_IDENTITY_UI_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofLEGACY_IDENTITY_UI_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.eapType !== undefined) view.setUint32(0, Number(data.eapType), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwSizeofConnectionData !== undefined) view.setUint32(8, Number(data.dwSizeofConnectionData), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pConnectionData !== undefined) view.setBigUint64(16, data.pConnectionData === null ? 0n : BigInt(util.toPointer(data.pConnectionData)), true);
  // 0x18: u32
  if (data?.dwSizeofUserData !== undefined) view.setUint32(24, Number(data.dwSizeofUserData), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pUserData !== undefined) view.setBigUint64(32, data.pUserData === null ? 0n : BigInt(util.toPointer(data.pUserData)), true);
  // 0x28: u32
  if (data?.dwSizeofUserDataOut !== undefined) view.setUint32(40, Number(data.dwSizeofUserDataOut), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pUserDataOut !== undefined) view.setBigUint64(48, data.pUserDataOut === null ? 0n : BigInt(util.toPointer(data.pUserDataOut)), true);
  // 0x38: buffer
  if (data?.pwszIdentity !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pwszIdentity);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.dwError !== undefined) view.setUint32(64, Number(data.dwError), true);
  // 0x44: pad4
  return buf;
}

export class LEGACY_IDENTITY_UI_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get eapType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSizeofConnectionData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pConnectionData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwSizeofUserData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwSizeofUserDataOut(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pUserDataOut(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: buffer
  get pwszIdentity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get dwError(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set eapType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSizeofConnectionData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pConnectionData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwSizeofUserData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set dwSizeofUserDataOut(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pUserDataOut(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: buffer
  set pwszIdentity(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(util.toPointer((this.buf as any)._f56)), true);
  }

  // 0x40: u32
  set dwError(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.LEGACY_INTERACTIVE_UI_PARAMS (size: 40)
 */
export interface LEGACY_INTERACTIVE_UI_PARAMS {
  /** u32 */
  eapType: number;
  /** u32 */
  dwSizeofContextData: number;
  /** ptr */
  pContextData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeofInteractiveUIData: number;
  /** ptr */
  pInteractiveUIData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwError: number;
}

export const sizeofLEGACY_INTERACTIVE_UI_PARAMS = 40;

export function allocLEGACY_INTERACTIVE_UI_PARAMS(data?: Partial<LEGACY_INTERACTIVE_UI_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofLEGACY_INTERACTIVE_UI_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.eapType !== undefined) view.setUint32(0, Number(data.eapType), true);
  // 0x04: u32
  if (data?.dwSizeofContextData !== undefined) view.setUint32(4, Number(data.dwSizeofContextData), true);
  // 0x08: pointer
  if (data?.pContextData !== undefined) view.setBigUint64(8, data.pContextData === null ? 0n : BigInt(util.toPointer(data.pContextData)), true);
  // 0x10: u32
  if (data?.dwSizeofInteractiveUIData !== undefined) view.setUint32(16, Number(data.dwSizeofInteractiveUIData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pInteractiveUIData !== undefined) view.setBigUint64(24, data.pInteractiveUIData === null ? 0n : BigInt(util.toPointer(data.pInteractiveUIData)), true);
  // 0x20: u32
  if (data?.dwError !== undefined) view.setUint32(32, Number(data.dwError), true);
  // 0x24: pad4
  return buf;
}

export class LEGACY_INTERACTIVE_UI_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get eapType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSizeofContextData(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pContextData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwSizeofInteractiveUIData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pInteractiveUIData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwError(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set eapType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSizeofContextData(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pContextData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwSizeofInteractiveUIData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pInteractiveUIData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwError(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_TYPE (size: 16)
 */
export interface EAP_TYPE {
  /** u8 */
  type: number;
  /** u32 */
  dwVendorId: number;
  /** u32 */
  dwVendorType: number;
}

export const sizeofEAP_TYPE = 16;

export function allocEAP_TYPE(data?: Partial<EAP_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.type !== undefined) view.setUint8(0, Number(data.type));
  // 0x01: u32
  if (data?.dwVendorId !== undefined) view.setUint32(1, Number(data.dwVendorId), true);
  // 0x05: u32
  if (data?.dwVendorType !== undefined) view.setUint32(5, Number(data.dwVendorType), true);
  // 0x09: pad7
  return buf;
}

export class EAP_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get type(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u32
  get dwVendorId(): number {
    return this.view.getUint32(1, true);
  }

  // 0x05: u32
  get dwVendorType(): number {
    return this.view.getUint32(5, true);
  }

  // 0x09: pad7

  // 0x00: u8
  set type(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u32
  set dwVendorId(value: number) {
    this.view.setUint32(1, value, true);
  }

  // 0x05: u32
  set dwVendorType(value: number) {
    this.view.setUint32(5, value, true);
  }

  // 0x09: pad7
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE (size: 16)
 */
export interface EAP_METHOD_TYPE {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_TYPE */
  eapType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAuthorId: number;
}

export const sizeofEAP_METHOD_TYPE = 16;

export function allocEAP_METHOD_TYPE(data?: Partial<EAP_METHOD_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.eapType !== undefined) view.setBigUint64(0, data.eapType === null ? 0n : BigInt(util.toPointer(data.eapType)), true);
  // 0x08: u32
  if (data?.dwAuthorId !== undefined) view.setUint32(8, Number(data.dwAuthorId), true);
  // 0x0c: pad4
  return buf;
}

export class EAP_METHOD_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get eapType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwAuthorId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set eapType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwAuthorId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_INFO (size: 40)
 */
export interface EAP_METHOD_INFO {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */
  eaptype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszAuthorName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFriendlyName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  eapProperties: number;
  /** ptr */
  pInnerMethodInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_INFO = 40;

export function allocEAP_METHOD_INFO(data?: Partial<EAP_METHOD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.eaptype !== undefined) view.setBigUint64(0, data.eaptype === null ? 0n : BigInt(util.toPointer(data.eaptype)), true);
  // 0x08: buffer
  if (data?.pwszAuthorName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszAuthorName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszFriendlyName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszFriendlyName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.eapProperties !== undefined) view.setUint32(24, Number(data.eapProperties), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pInnerMethodInfo !== undefined) view.setBigUint64(32, data.pInnerMethodInfo === null ? 0n : BigInt(util.toPointer(data.pInnerMethodInfo)), true);
  return buf;
}

export class EAP_METHOD_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get eaptype(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pwszAuthorName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszFriendlyName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get eapProperties(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pInnerMethodInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set eaptype(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set pwszAuthorName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pwszFriendlyName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u32
  set eapProperties(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pInnerMethodInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_INFO_EX (size: 40)
 */
export interface EAP_METHOD_INFO_EX {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */
  eaptype: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszAuthorName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFriendlyName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  eapProperties: number;
  /** ptr */
  pInnerMethodInfoArray: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_INFO_EX = 40;

export function allocEAP_METHOD_INFO_EX(data?: Partial<EAP_METHOD_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.eaptype !== undefined) view.setBigUint64(0, data.eaptype === null ? 0n : BigInt(util.toPointer(data.eaptype)), true);
  // 0x08: buffer
  if (data?.pwszAuthorName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszAuthorName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszFriendlyName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszFriendlyName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.eapProperties !== undefined) view.setUint32(24, Number(data.eapProperties), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pInnerMethodInfoArray !== undefined) view.setBigUint64(32, data.pInnerMethodInfoArray === null ? 0n : BigInt(util.toPointer(data.pInnerMethodInfoArray)), true);
  return buf;
}

export class EAP_METHOD_INFO_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get eaptype(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pwszAuthorName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszFriendlyName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get eapProperties(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pInnerMethodInfoArray(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set eaptype(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set pwszAuthorName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pwszFriendlyName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u32
  set eapProperties(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pInnerMethodInfoArray(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_INFO_ARRAY (size: 16)
 */
export interface EAP_METHOD_INFO_ARRAY {
  /** u32 */
  dwNumberOfMethods: number;
  /** ptr */
  pEapMethods: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_INFO_ARRAY = 16;

export function allocEAP_METHOD_INFO_ARRAY(data?: Partial<EAP_METHOD_INFO_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_INFO_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfMethods !== undefined) view.setUint32(0, Number(data.dwNumberOfMethods), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEapMethods !== undefined) view.setBigUint64(8, data.pEapMethods === null ? 0n : BigInt(util.toPointer(data.pEapMethods)), true);
  return buf;
}

export class EAP_METHOD_INFO_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumberOfMethods(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pEapMethods(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwNumberOfMethods(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pEapMethods(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_INFO_ARRAY_EX (size: 16)
 */
export interface EAP_METHOD_INFO_ARRAY_EX {
  /** u32 */
  dwNumberOfMethods: number;
  /** ptr */
  pEapMethods: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_INFO_ARRAY_EX = 16;

export function allocEAP_METHOD_INFO_ARRAY_EX(data?: Partial<EAP_METHOD_INFO_ARRAY_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_INFO_ARRAY_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfMethods !== undefined) view.setUint32(0, Number(data.dwNumberOfMethods), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEapMethods !== undefined) view.setBigUint64(8, data.pEapMethods === null ? 0n : BigInt(util.toPointer(data.pEapMethods)), true);
  return buf;
}

export class EAP_METHOD_INFO_ARRAY_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumberOfMethods(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pEapMethods(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwNumberOfMethods(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pEapMethods(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_ERROR (size: 64)
 */
export interface EAP_ERROR {
  /** u32 */
  dwWinError: number;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */
  type: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReasonCode: number;
  /** System.Guid */
  rootCauseGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  repairGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  helpLinkGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pRootCauseString: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pRepairString: string | null | Uint8Array | Uint16Array;
}

export const sizeofEAP_ERROR = 64;

export function allocEAP_ERROR(data?: Partial<EAP_ERROR>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_ERROR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwWinError !== undefined) view.setUint32(0, Number(data.dwWinError), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.type !== undefined) view.setBigUint64(8, data.type === null ? 0n : BigInt(util.toPointer(data.type)), true);
  // 0x10: u32
  if (data?.dwReasonCode !== undefined) view.setUint32(16, Number(data.dwReasonCode), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rootCauseGuid !== undefined) view.setBigUint64(24, data.rootCauseGuid === null ? 0n : BigInt(util.toPointer(data.rootCauseGuid)), true);
  // 0x20: pointer
  if (data?.repairGuid !== undefined) view.setBigUint64(32, data.repairGuid === null ? 0n : BigInt(util.toPointer(data.repairGuid)), true);
  // 0x28: pointer
  if (data?.helpLinkGuid !== undefined) view.setBigUint64(40, data.helpLinkGuid === null ? 0n : BigInt(util.toPointer(data.helpLinkGuid)), true);
  // 0x30: buffer
  if (data?.pRootCauseString !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pRootCauseString);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pRepairString !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pRepairString);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  return buf;
}

export class EAP_ERRORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwWinError(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get type(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwReasonCode(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rootCauseGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get repairGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get helpLinkGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: buffer
  get pRootCauseString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: buffer
  get pRepairString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwWinError(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set type(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwReasonCode(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rootCauseGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set repairGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set helpLinkGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: buffer
  set pRootCauseString(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(util.toPointer((this.buf as any)._f48)), true);
  }

  // 0x38: buffer
  set pRepairString(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(util.toPointer((this.buf as any)._f56)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_ATTRIBUTE (size: 16)
 */
export interface EAP_ATTRIBUTE {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_ATTRIBUTE_TYPE */
  eaType: EAP_ATTRIBUTE_TYPE;
  /** u32 */
  dwLength: number;
  /** ptr */
  pValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_ATTRIBUTE = 16;

export function allocEAP_ATTRIBUTE(data?: Partial<EAP_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eaType !== undefined) view.setInt32(0, Number(data.eaType), true);
  // 0x04: u32
  if (data?.dwLength !== undefined) view.setUint32(4, Number(data.dwLength), true);
  // 0x08: pointer
  if (data?.pValue !== undefined) view.setBigUint64(8, data.pValue === null ? 0n : BigInt(util.toPointer(data.pValue)), true);
  return buf;
}

export class EAP_ATTRIBUTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eaType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set eaType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_ATTRIBUTES (size: 16)
 */
export interface EAP_ATTRIBUTES {
  /** u32 */
  dwNumberOfAttributes: number;
  /** ptr */
  pAttribs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_ATTRIBUTES = 16;

export function allocEAP_ATTRIBUTES(data?: Partial<EAP_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfAttributes !== undefined) view.setUint32(0, Number(data.dwNumberOfAttributes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pAttribs !== undefined) view.setBigUint64(8, data.pAttribs === null ? 0n : BigInt(util.toPointer(data.pAttribs)), true);
  return buf;
}

export class EAP_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumberOfAttributes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pAttribs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwNumberOfAttributes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pAttribs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_CONFIG_INPUT_FIELD_DATA (size: 40)
 */
export interface EAP_CONFIG_INPUT_FIELD_DATA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_CONFIG_INPUT_FIELD_TYPE */
  Type: EAP_CONFIG_INPUT_FIELD_TYPE;
  /** u32 */
  dwFlagProps: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszLabel: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszData: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwMinDataLength: number;
  /** u32 */
  dwMaxDataLength: number;
}

export const sizeofEAP_CONFIG_INPUT_FIELD_DATA = 40;

export function allocEAP_CONFIG_INPUT_FIELD_DATA(data?: Partial<EAP_CONFIG_INPUT_FIELD_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_CONFIG_INPUT_FIELD_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.dwFlagProps !== undefined) view.setUint32(8, Number(data.dwFlagProps), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pwszLabel !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszLabel);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszData !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszData);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwMinDataLength !== undefined) view.setUint32(32, Number(data.dwMinDataLength), true);
  // 0x24: u32
  if (data?.dwMaxDataLength !== undefined) view.setUint32(36, Number(data.dwMaxDataLength), true);
  return buf;
}

export class EAP_CONFIG_INPUT_FIELD_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get dwFlagProps(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pwszLabel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pwszData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwMinDataLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwMaxDataLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set dwFlagProps(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pwszLabel(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pwszData(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set dwMinDataLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwMaxDataLength(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_CONFIG_INPUT_FIELD_ARRAY (size: 16)
 */
export interface EAP_CONFIG_INPUT_FIELD_ARRAY {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwNumberOfFields: number;
  /** ptr */
  pFields: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_CONFIG_INPUT_FIELD_ARRAY = 16;

export function allocEAP_CONFIG_INPUT_FIELD_ARRAY(data?: Partial<EAP_CONFIG_INPUT_FIELD_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_CONFIG_INPUT_FIELD_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwNumberOfFields !== undefined) view.setUint32(4, Number(data.dwNumberOfFields), true);
  // 0x08: pointer
  if (data?.pFields !== undefined) view.setBigUint64(8, data.pFields === null ? 0n : BigInt(util.toPointer(data.pFields)), true);
  return buf;
}

export class EAP_CONFIG_INPUT_FIELD_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNumberOfFields(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pFields(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNumberOfFields(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pFields(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_CRED_EXPIRY_REQ (size: 16)
 */
export interface EAP_CRED_EXPIRY_REQ {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_CONFIG_INPUT_FIELD_ARRAY */
  curCreds: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_CONFIG_INPUT_FIELD_ARRAY */
  newCreds: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEAP_CRED_EXPIRY_REQ = 16;

export function allocEAP_CRED_EXPIRY_REQ(data?: Partial<EAP_CRED_EXPIRY_REQ>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_CRED_EXPIRY_REQ);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.curCreds !== undefined) view.setBigUint64(0, data.curCreds === null ? 0n : BigInt(util.toPointer(data.curCreds)), true);
  // 0x08: pointer
  if (data?.newCreds !== undefined) view.setBigUint64(8, data.newCreds === null ? 0n : BigInt(util.toPointer(data.newCreds)), true);
  return buf;
}

export class EAP_CRED_EXPIRY_REQView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get curCreds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get newCreds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set curCreds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set newCreds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_UI_DATA_FORMAT (size: 24)
 */
export interface EAP_UI_DATA_FORMAT {
  /** ptr */
  credData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  credExpiryData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  credLogonData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_UI_DATA_FORMAT = 24;

export function allocEAP_UI_DATA_FORMAT(data?: Partial<EAP_UI_DATA_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_UI_DATA_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.credData !== undefined) view.setBigUint64(0, data.credData === null ? 0n : BigInt(util.toPointer(data.credData)), true);
  // 0x08: pointer
  if (data?.credExpiryData !== undefined) view.setBigUint64(8, data.credExpiryData === null ? 0n : BigInt(util.toPointer(data.credExpiryData)), true);
  // 0x10: pointer
  if (data?.credLogonData !== undefined) view.setBigUint64(16, data.credLogonData === null ? 0n : BigInt(util.toPointer(data.credLogonData)), true);
  return buf;
}

export class EAP_UI_DATA_FORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get credData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get credExpiryData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get credLogonData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set credData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set credExpiryData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set credLogonData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_INTERACTIVE_UI_DATA (size: 24)
 */
export interface EAP_INTERACTIVE_UI_DATA {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_INTERACTIVE_UI_DATA_TYPE */
  dwDataType: EAP_INTERACTIVE_UI_DATA_TYPE;
  /** u32 */
  cbUiData: number;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_UI_DATA_FORMAT */
  pbUiData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEAP_INTERACTIVE_UI_DATA = 24;

export function allocEAP_INTERACTIVE_UI_DATA(data?: Partial<EAP_INTERACTIVE_UI_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_INTERACTIVE_UI_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwSize !== undefined) view.setUint32(4, Number(data.dwSize), true);
  // 0x08: i32
  if (data?.dwDataType !== undefined) view.setInt32(8, Number(data.dwDataType), true);
  // 0x0c: u32
  if (data?.cbUiData !== undefined) view.setUint32(12, Number(data.cbUiData), true);
  // 0x10: pointer
  if (data?.pbUiData !== undefined) view.setBigUint64(16, data.pbUiData === null ? 0n : BigInt(util.toPointer(data.pbUiData)), true);
  return buf;
}

export class EAP_INTERACTIVE_UI_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get dwDataType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get cbUiData(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pbUiData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set dwDataType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set cbUiData(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pbUiData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_BOOL (size: 8)
 */
export interface EAP_METHOD_PROPERTY_VALUE_BOOL {
  /** u32 */
  length: number;
  /** Windows.Win32.Foundation.BOOL */
  value: boolean;
}

export const sizeofEAP_METHOD_PROPERTY_VALUE_BOOL = 8;

export function allocEAP_METHOD_PROPERTY_VALUE_BOOL(data?: Partial<EAP_METHOD_PROPERTY_VALUE_BOOL>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_PROPERTY_VALUE_BOOL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.length !== undefined) view.setUint32(0, Number(data.length), true);
  // 0x04: i32
  if (data?.value !== undefined) view.setInt32(4, Number(data.value), true);
  return buf;
}

export class EAP_METHOD_PROPERTY_VALUE_BOOLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get value(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set value(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_DWORD (size: 8)
 */
export interface EAP_METHOD_PROPERTY_VALUE_DWORD {
  /** u32 */
  length: number;
  /** u32 */
  value: number;
}

export const sizeofEAP_METHOD_PROPERTY_VALUE_DWORD = 8;

export function allocEAP_METHOD_PROPERTY_VALUE_DWORD(data?: Partial<EAP_METHOD_PROPERTY_VALUE_DWORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_PROPERTY_VALUE_DWORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.length !== undefined) view.setUint32(0, Number(data.length), true);
  // 0x04: u32
  if (data?.value !== undefined) view.setUint32(4, Number(data.value), true);
  return buf;
}

export class EAP_METHOD_PROPERTY_VALUE_DWORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get value(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set value(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_STRING (size: 16)
 */
export interface EAP_METHOD_PROPERTY_VALUE_STRING {
  /** u32 */
  length: number;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_PROPERTY_VALUE_STRING = 16;

export function allocEAP_METHOD_PROPERTY_VALUE_STRING(data?: Partial<EAP_METHOD_PROPERTY_VALUE_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_PROPERTY_VALUE_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.length !== undefined) view.setUint32(0, Number(data.length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

export class EAP_METHOD_PROPERTY_VALUE_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE (size: 24)
 */
export interface EAP_METHOD_PROPERTY_VALUE {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_BOOL */
  empvBool: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_DWORD */
  empvDword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_STRING */
  empvString: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEAP_METHOD_PROPERTY_VALUE = 24;

export function allocEAP_METHOD_PROPERTY_VALUE(data?: Partial<EAP_METHOD_PROPERTY_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_PROPERTY_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.empvBool !== undefined) view.setBigUint64(0, data.empvBool === null ? 0n : BigInt(util.toPointer(data.empvBool)), true);
  // 0x08: pointer
  if (data?.empvDword !== undefined) view.setBigUint64(8, data.empvDword === null ? 0n : BigInt(util.toPointer(data.empvDword)), true);
  // 0x10: pointer
  if (data?.empvString !== undefined) view.setBigUint64(16, data.empvString === null ? 0n : BigInt(util.toPointer(data.empvString)), true);
  return buf;
}

export class EAP_METHOD_PROPERTY_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get empvBool(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get empvDword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get empvString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set empvBool(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set empvDword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set empvString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY (size: 16)
 */
export interface EAP_METHOD_PROPERTY {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_TYPE */
  eapMethodPropertyType: EAP_METHOD_PROPERTY_TYPE;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE_TYPE */
  eapMethodPropertyValueType: EAP_METHOD_PROPERTY_VALUE_TYPE;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_VALUE */
  eapMethodPropertyValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEAP_METHOD_PROPERTY = 16;

export function allocEAP_METHOD_PROPERTY(data?: Partial<EAP_METHOD_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eapMethodPropertyType !== undefined) view.setInt32(0, Number(data.eapMethodPropertyType), true);
  // 0x04: i32
  if (data?.eapMethodPropertyValueType !== undefined) view.setInt32(4, Number(data.eapMethodPropertyValueType), true);
  // 0x08: pointer
  if (data?.eapMethodPropertyValue !== undefined) view.setBigUint64(8, data.eapMethodPropertyValue === null ? 0n : BigInt(util.toPointer(data.eapMethodPropertyValue)), true);
  return buf;
}

export class EAP_METHOD_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eapMethodPropertyType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get eapMethodPropertyValueType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get eapMethodPropertyValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set eapMethodPropertyType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set eapMethodPropertyValueType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set eapMethodPropertyValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_PROPERTY_ARRAY (size: 16)
 */
export interface EAP_METHOD_PROPERTY_ARRAY {
  /** u32 */
  dwNumberOfProperties: number;
  /** ptr */
  pMethodProperty: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_PROPERTY_ARRAY = 16;

export function allocEAP_METHOD_PROPERTY_ARRAY(data?: Partial<EAP_METHOD_PROPERTY_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_PROPERTY_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNumberOfProperties !== undefined) view.setUint32(0, Number(data.dwNumberOfProperties), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pMethodProperty !== undefined) view.setBigUint64(8, data.pMethodProperty === null ? 0n : BigInt(util.toPointer(data.pMethodProperty)), true);
  return buf;
}

export class EAP_METHOD_PROPERTY_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwNumberOfProperties(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pMethodProperty(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwNumberOfProperties(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pMethodProperty(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAPHOST_IDENTITY_UI_PARAMS (size: 80)
 */
export interface EAPHOST_IDENTITY_UI_PARAMS {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_TYPE */
  eapMethodType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwSizeofConnectionData: number;
  /** ptr */
  pConnectionData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeofUserData: number;
  /** ptr */
  pUserData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeofUserDataOut: number;
  /** ptr */
  pUserDataOut: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIdentity: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwError: number;
  /** ptr */
  pEapError: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAPHOST_IDENTITY_UI_PARAMS = 80;

export function allocEAPHOST_IDENTITY_UI_PARAMS(data?: Partial<EAPHOST_IDENTITY_UI_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofEAPHOST_IDENTITY_UI_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.eapMethodType !== undefined) view.setBigUint64(0, data.eapMethodType === null ? 0n : BigInt(util.toPointer(data.eapMethodType)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwSizeofConnectionData !== undefined) view.setUint32(12, Number(data.dwSizeofConnectionData), true);
  // 0x10: pointer
  if (data?.pConnectionData !== undefined) view.setBigUint64(16, data.pConnectionData === null ? 0n : BigInt(util.toPointer(data.pConnectionData)), true);
  // 0x18: u32
  if (data?.dwSizeofUserData !== undefined) view.setUint32(24, Number(data.dwSizeofUserData), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pUserData !== undefined) view.setBigUint64(32, data.pUserData === null ? 0n : BigInt(util.toPointer(data.pUserData)), true);
  // 0x28: u32
  if (data?.dwSizeofUserDataOut !== undefined) view.setUint32(40, Number(data.dwSizeofUserDataOut), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pUserDataOut !== undefined) view.setBigUint64(48, data.pUserDataOut === null ? 0n : BigInt(util.toPointer(data.pUserDataOut)), true);
  // 0x38: buffer
  if (data?.pwszIdentity !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pwszIdentity);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.dwError !== undefined) view.setUint32(64, Number(data.dwError), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.pEapError !== undefined) view.setBigUint64(72, data.pEapError === null ? 0n : BigInt(util.toPointer(data.pEapError)), true);
  return buf;
}

export class EAPHOST_IDENTITY_UI_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get eapMethodType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwSizeofConnectionData(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pConnectionData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwSizeofUserData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwSizeofUserDataOut(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pUserDataOut(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: buffer
  get pwszIdentity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get dwError(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get pEapError(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set eapMethodType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwSizeofConnectionData(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pConnectionData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwSizeofUserData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set dwSizeofUserDataOut(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pUserDataOut(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: buffer
  set pwszIdentity(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(util.toPointer((this.buf as any)._f56)), true);
  }

  // 0x40: u32
  set dwError(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set pEapError(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAPHOST_INTERACTIVE_UI_PARAMS (size: 48)
 */
export interface EAPHOST_INTERACTIVE_UI_PARAMS {
  /** u32 */
  dwSizeofContextData: number;
  /** ptr */
  pContextData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSizeofInteractiveUIData: number;
  /** ptr */
  pInteractiveUIData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwError: number;
  /** ptr */
  pEapError: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAPHOST_INTERACTIVE_UI_PARAMS = 48;

export function allocEAPHOST_INTERACTIVE_UI_PARAMS(data?: Partial<EAPHOST_INTERACTIVE_UI_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofEAPHOST_INTERACTIVE_UI_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeofContextData !== undefined) view.setUint32(0, Number(data.dwSizeofContextData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pContextData !== undefined) view.setBigUint64(8, data.pContextData === null ? 0n : BigInt(util.toPointer(data.pContextData)), true);
  // 0x10: u32
  if (data?.dwSizeofInteractiveUIData !== undefined) view.setUint32(16, Number(data.dwSizeofInteractiveUIData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pInteractiveUIData !== undefined) view.setBigUint64(24, data.pInteractiveUIData === null ? 0n : BigInt(util.toPointer(data.pInteractiveUIData)), true);
  // 0x20: u32
  if (data?.dwError !== undefined) view.setUint32(32, Number(data.dwError), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pEapError !== undefined) view.setBigUint64(40, data.pEapError === null ? 0n : BigInt(util.toPointer(data.pEapError)), true);
  return buf;
}

export class EAPHOST_INTERACTIVE_UI_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSizeofContextData(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pContextData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwSizeofInteractiveUIData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pInteractiveUIData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwError(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pEapError(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSizeofContextData(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pContextData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwSizeofInteractiveUIData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pInteractiveUIData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwError(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pEapError(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapUsernamePasswordCredential (size: 16)
 */
export interface EapUsernamePasswordCredential {
  /** Windows.Win32.Foundation.PWSTR */
  username: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  password: string | null | Uint8Array | Uint16Array;
}

export const sizeofEapUsernamePasswordCredential = 16;

export function allocEapUsernamePasswordCredential(data?: Partial<EapUsernamePasswordCredential>): Uint8Array {
  const buf = new Uint8Array(sizeofEapUsernamePasswordCredential);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.username !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.username);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.password !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.password);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class EapUsernamePasswordCredentialView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get username(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set username(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set password(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapCertificateCredential (size: 16)
 */
export interface EapCertificateCredential {
  /** array */
  certHash: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  password: string | null | Uint8Array | Uint16Array;
}

export const sizeofEapCertificateCredential = 16;

export function allocEapCertificateCredential(data?: Partial<EapCertificateCredential>): Uint8Array {
  const buf = new Uint8Array(sizeofEapCertificateCredential);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.certHash !== undefined) view.setBigUint64(0, data.certHash === null ? 0n : BigInt(util.toPointer(data.certHash)), true);
  // 0x08: buffer
  if (data?.password !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.password);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class EapCertificateCredentialView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get certHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set certHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set password(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapSimCredential (size: 8)
 */
export interface EapSimCredential {
  /** Windows.Win32.Foundation.PWSTR */
  iccID: string | null | Uint8Array | Uint16Array;
}

export const sizeofEapSimCredential = 8;

export function allocEapSimCredential(data?: Partial<EapSimCredential>): Uint8Array {
  const buf = new Uint8Array(sizeofEapSimCredential);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.iccID !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.iccID);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

export class EapSimCredentialView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get iccID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set iccID(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapCredentialTypeData (size: 24)
 */
export interface EapCredentialTypeData {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapUsernamePasswordCredential */
  username_password: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapCertificateCredential */
  certificate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapSimCredential */
  sim: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEapCredentialTypeData = 24;

export function allocEapCredentialTypeData(data?: Partial<EapCredentialTypeData>): Uint8Array {
  const buf = new Uint8Array(sizeofEapCredentialTypeData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.username_password !== undefined) view.setBigUint64(0, data.username_password === null ? 0n : BigInt(util.toPointer(data.username_password)), true);
  // 0x08: pointer
  if (data?.certificate !== undefined) view.setBigUint64(8, data.certificate === null ? 0n : BigInt(util.toPointer(data.certificate)), true);
  // 0x10: pointer
  if (data?.sim !== undefined) view.setBigUint64(16, data.sim === null ? 0n : BigInt(util.toPointer(data.sim)), true);
  return buf;
}

export class EapCredentialTypeDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get username_password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get certificate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get sim(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set username_password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set certificate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set sim(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapCredential (size: 16)
 */
export interface EapCredential {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapCredentialType */
  credType: EapCredentialType;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapCredentialTypeData */
  credData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofEapCredential = 16;

export function allocEapCredential(data?: Partial<EapCredential>): Uint8Array {
  const buf = new Uint8Array(sizeofEapCredential);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.credType !== undefined) view.setInt32(0, Number(data.credType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.credData !== undefined) view.setBigUint64(8, data.credData === null ? 0n : BigInt(util.toPointer(data.credData)), true);
  return buf;
}

export class EapCredentialView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get credType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get credData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set credType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set credData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAPHOST_AUTH_INFO (size: 16)
 */
export interface EAPHOST_AUTH_INFO {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAPHOST_AUTH_STATUS */
  status: EAPHOST_AUTH_STATUS;
  /** u32 */
  dwErrorCode: number;
  /** u32 */
  dwReasonCode: number;
}

export const sizeofEAPHOST_AUTH_INFO = 16;

export function allocEAPHOST_AUTH_INFO(data?: Partial<EAPHOST_AUTH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEAPHOST_AUTH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.status !== undefined) view.setInt32(0, Number(data.status), true);
  // 0x04: u32
  if (data?.dwErrorCode !== undefined) view.setUint32(4, Number(data.dwErrorCode), true);
  // 0x08: u32
  if (data?.dwReasonCode !== undefined) view.setUint32(8, Number(data.dwReasonCode), true);
  // 0x0c: pad4
  return buf;
}

export class EAPHOST_AUTH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get status(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwErrorCode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwReasonCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set status(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwErrorCode(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwReasonCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapHostPeerMethodResult (size: 72)
 */
export interface EapHostPeerMethodResult {
  /** Windows.Win32.Foundation.BOOL */
  fIsSuccess: boolean;
  /** u32 */
  dwFailureReasonCode: number;
  /** Windows.Win32.Foundation.BOOL */
  fSaveConnectionData: boolean;
  /** u32 */
  dwSizeofConnectionData: number;
  /** ptr */
  pConnectionData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fSaveUserData: boolean;
  /** u32 */
  dwSizeofUserData: number;
  /** ptr */
  pUserData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pAttribArray: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.ISOLATION_STATE */
  isolationState: ISOLATION_STATE;
  /** ptr */
  pEapMethodInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pEapError: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEapHostPeerMethodResult = 72;

export function allocEapHostPeerMethodResult(data?: Partial<EapHostPeerMethodResult>): Uint8Array {
  const buf = new Uint8Array(sizeofEapHostPeerMethodResult);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fIsSuccess !== undefined) view.setInt32(0, Number(data.fIsSuccess), true);
  // 0x04: u32
  if (data?.dwFailureReasonCode !== undefined) view.setUint32(4, Number(data.dwFailureReasonCode), true);
  // 0x08: i32
  if (data?.fSaveConnectionData !== undefined) view.setInt32(8, Number(data.fSaveConnectionData), true);
  // 0x0c: u32
  if (data?.dwSizeofConnectionData !== undefined) view.setUint32(12, Number(data.dwSizeofConnectionData), true);
  // 0x10: pointer
  if (data?.pConnectionData !== undefined) view.setBigUint64(16, data.pConnectionData === null ? 0n : BigInt(util.toPointer(data.pConnectionData)), true);
  // 0x18: i32
  if (data?.fSaveUserData !== undefined) view.setInt32(24, Number(data.fSaveUserData), true);
  // 0x1c: u32
  if (data?.dwSizeofUserData !== undefined) view.setUint32(28, Number(data.dwSizeofUserData), true);
  // 0x20: pointer
  if (data?.pUserData !== undefined) view.setBigUint64(32, data.pUserData === null ? 0n : BigInt(util.toPointer(data.pUserData)), true);
  // 0x28: pointer
  if (data?.pAttribArray !== undefined) view.setBigUint64(40, data.pAttribArray === null ? 0n : BigInt(util.toPointer(data.pAttribArray)), true);
  // 0x30: i32
  if (data?.isolationState !== undefined) view.setInt32(48, Number(data.isolationState), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pEapMethodInfo !== undefined) view.setBigUint64(56, data.pEapMethodInfo === null ? 0n : BigInt(util.toPointer(data.pEapMethodInfo)), true);
  // 0x40: pointer
  if (data?.pEapError !== undefined) view.setBigUint64(64, data.pEapError === null ? 0n : BigInt(util.toPointer(data.pEapError)), true);
  return buf;
}

export class EapHostPeerMethodResultView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fIsSuccess(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwFailureReasonCode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get fSaveConnectionData(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwSizeofConnectionData(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pConnectionData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get fSaveUserData(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get dwSizeofUserData(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get pUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pAttribArray(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: i32
  get isolationState(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pEapMethodInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get pEapError(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set fIsSuccess(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwFailureReasonCode(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set fSaveConnectionData(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwSizeofConnectionData(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pConnectionData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set fSaveUserData(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set dwSizeofUserData(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set pUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pAttribArray(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: i32
  set isolationState(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pEapMethodInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set pEapError(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapPacket (size: 24)
 */
export interface EapPacket {
  /** u8 */
  Code: number;
  /** u8 */
  Id: number;
  /** array */
  Length: Deno.PointerValue | null;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofEapPacket = 24;

export function allocEapPacket(data?: Partial<EapPacket>): Uint8Array {
  const buf = new Uint8Array(sizeofEapPacket);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Code !== undefined) view.setUint8(0, Number(data.Code));
  // 0x01: u8
  if (data?.Id !== undefined) view.setUint8(1, Number(data.Id));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Length !== undefined) view.setBigUint64(8, data.Length === null ? 0n : BigInt(util.toPointer(data.Length)), true);
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class EapPacketView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Code(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Id(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Length(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set Code(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Id(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Length(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_METHOD_AUTHENTICATOR_RESULT (size: 16)
 */
export interface EAP_METHOD_AUTHENTICATOR_RESULT {
  /** Windows.Win32.Foundation.BOOL */
  fIsSuccess: boolean;
  /** u32 */
  dwFailureReason: number;
  /** ptr */
  pAuthAttribs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofEAP_METHOD_AUTHENTICATOR_RESULT = 16;

export function allocEAP_METHOD_AUTHENTICATOR_RESULT(data?: Partial<EAP_METHOD_AUTHENTICATOR_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_METHOD_AUTHENTICATOR_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fIsSuccess !== undefined) view.setInt32(0, Number(data.fIsSuccess), true);
  // 0x04: u32
  if (data?.dwFailureReason !== undefined) view.setUint32(4, Number(data.dwFailureReason), true);
  // 0x08: pointer
  if (data?.pAuthAttribs !== undefined) view.setBigUint64(8, data.pAuthAttribs === null ? 0n : BigInt(util.toPointer(data.pAuthAttribs)), true);
  return buf;
}

export class EAP_METHOD_AUTHENTICATOR_RESULTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fIsSuccess(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwFailureReason(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pAuthAttribs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set fIsSuccess(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwFailureReason(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pAuthAttribs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapPeerMethodOutput (size: 8)
 */
export interface EapPeerMethodOutput {
  /** Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapPeerMethodResponseAction */
  action: EapPeerMethodResponseAction;
  /** Windows.Win32.Foundation.BOOL */
  fAllowNotifications: boolean;
}

export const sizeofEapPeerMethodOutput = 8;

export function allocEapPeerMethodOutput(data?: Partial<EapPeerMethodOutput>): Uint8Array {
  const buf = new Uint8Array(sizeofEapPeerMethodOutput);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.action !== undefined) view.setInt32(0, Number(data.action), true);
  // 0x04: i32
  if (data?.fAllowNotifications !== undefined) view.setInt32(4, Number(data.fAllowNotifications), true);
  return buf;
}

export class EapPeerMethodOutputView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get action(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get fAllowNotifications(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set action(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set fAllowNotifications(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EapPeerMethodResult (size: 72)
 */
export interface EapPeerMethodResult {
  /** Windows.Win32.Foundation.BOOL */
  fIsSuccess: boolean;
  /** u32 */
  dwFailureReasonCode: number;
  /** Windows.Win32.Foundation.BOOL */
  fSaveConnectionData: boolean;
  /** u32 */
  dwSizeofConnectionData: number;
  /** ptr */
  pConnectionData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fSaveUserData: boolean;
  /** u32 */
  dwSizeofUserData: number;
  /** ptr */
  pUserData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pAttribArray: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pEapError: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pNgcKerbTicket: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fSaveToCredMan: boolean;
}

export const sizeofEapPeerMethodResult = 72;

export function allocEapPeerMethodResult(data?: Partial<EapPeerMethodResult>): Uint8Array {
  const buf = new Uint8Array(sizeofEapPeerMethodResult);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fIsSuccess !== undefined) view.setInt32(0, Number(data.fIsSuccess), true);
  // 0x04: u32
  if (data?.dwFailureReasonCode !== undefined) view.setUint32(4, Number(data.dwFailureReasonCode), true);
  // 0x08: i32
  if (data?.fSaveConnectionData !== undefined) view.setInt32(8, Number(data.fSaveConnectionData), true);
  // 0x0c: u32
  if (data?.dwSizeofConnectionData !== undefined) view.setUint32(12, Number(data.dwSizeofConnectionData), true);
  // 0x10: pointer
  if (data?.pConnectionData !== undefined) view.setBigUint64(16, data.pConnectionData === null ? 0n : BigInt(util.toPointer(data.pConnectionData)), true);
  // 0x18: i32
  if (data?.fSaveUserData !== undefined) view.setInt32(24, Number(data.fSaveUserData), true);
  // 0x1c: u32
  if (data?.dwSizeofUserData !== undefined) view.setUint32(28, Number(data.dwSizeofUserData), true);
  // 0x20: pointer
  if (data?.pUserData !== undefined) view.setBigUint64(32, data.pUserData === null ? 0n : BigInt(util.toPointer(data.pUserData)), true);
  // 0x28: pointer
  if (data?.pAttribArray !== undefined) view.setBigUint64(40, data.pAttribArray === null ? 0n : BigInt(util.toPointer(data.pAttribArray)), true);
  // 0x30: pointer
  if (data?.pEapError !== undefined) view.setBigUint64(48, data.pEapError === null ? 0n : BigInt(util.toPointer(data.pEapError)), true);
  // 0x38: pointer
  if (data?.pNgcKerbTicket !== undefined) view.setBigUint64(56, data.pNgcKerbTicket === null ? 0n : BigInt(util.toPointer(data.pNgcKerbTicket)), true);
  // 0x40: i32
  if (data?.fSaveToCredMan !== undefined) view.setInt32(64, Number(data.fSaveToCredMan), true);
  // 0x44: pad4
  return buf;
}

export class EapPeerMethodResultView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fIsSuccess(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwFailureReasonCode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get fSaveConnectionData(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwSizeofConnectionData(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pConnectionData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get fSaveUserData(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get dwSizeofUserData(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get pUserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pAttribArray(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pEapError(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pNgcKerbTicket(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: i32
  get fSaveToCredMan(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: pad4

  // 0x00: i32
  set fIsSuccess(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwFailureReasonCode(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set fSaveConnectionData(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwSizeofConnectionData(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pConnectionData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set fSaveUserData(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set dwSizeofUserData(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set pUserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pAttribArray(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pEapError(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set pNgcKerbTicket(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: i32
  set fSaveToCredMan(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_PEER_METHOD_ROUTINES (size: 120)
 */
export interface EAP_PEER_METHOD_ROUTINES {
  /** u32 */
  dwVersion: number;
  /** ptr */
  pEapType: Deno.PointerValue | Uint8Array | null;
  /** isize */
  EapPeerInitialize: Deno.PointerValue;
  /** isize */
  EapPeerGetIdentity: Deno.PointerValue;
  /** isize */
  EapPeerBeginSession: Deno.PointerValue;
  /** isize */
  EapPeerSetCredentials: Deno.PointerValue;
  /** isize */
  EapPeerProcessRequestPacket: Deno.PointerValue;
  /** isize */
  EapPeerGetResponsePacket: Deno.PointerValue;
  /** isize */
  EapPeerGetResult: Deno.PointerValue;
  /** isize */
  EapPeerGetUIContext: Deno.PointerValue;
  /** isize */
  EapPeerSetUIContext: Deno.PointerValue;
  /** isize */
  EapPeerGetResponseAttributes: Deno.PointerValue;
  /** isize */
  EapPeerSetResponseAttributes: Deno.PointerValue;
  /** isize */
  EapPeerEndSession: Deno.PointerValue;
  /** isize */
  EapPeerShutdown: Deno.PointerValue;
}

export const sizeofEAP_PEER_METHOD_ROUTINES = 120;

export function allocEAP_PEER_METHOD_ROUTINES(data?: Partial<EAP_PEER_METHOD_ROUTINES>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_PEER_METHOD_ROUTINES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEapType !== undefined) view.setBigUint64(8, data.pEapType === null ? 0n : BigInt(util.toPointer(data.pEapType)), true);
  // 0x10: isize
  if (data?.EapPeerInitialize !== undefined) view.setBigInt64(16, BigInt(data.EapPeerInitialize), true);
  // 0x18: isize
  if (data?.EapPeerGetIdentity !== undefined) view.setBigInt64(24, BigInt(data.EapPeerGetIdentity), true);
  // 0x20: isize
  if (data?.EapPeerBeginSession !== undefined) view.setBigInt64(32, BigInt(data.EapPeerBeginSession), true);
  // 0x28: isize
  if (data?.EapPeerSetCredentials !== undefined) view.setBigInt64(40, BigInt(data.EapPeerSetCredentials), true);
  // 0x30: isize
  if (data?.EapPeerProcessRequestPacket !== undefined) view.setBigInt64(48, BigInt(data.EapPeerProcessRequestPacket), true);
  // 0x38: isize
  if (data?.EapPeerGetResponsePacket !== undefined) view.setBigInt64(56, BigInt(data.EapPeerGetResponsePacket), true);
  // 0x40: isize
  if (data?.EapPeerGetResult !== undefined) view.setBigInt64(64, BigInt(data.EapPeerGetResult), true);
  // 0x48: isize
  if (data?.EapPeerGetUIContext !== undefined) view.setBigInt64(72, BigInt(data.EapPeerGetUIContext), true);
  // 0x50: isize
  if (data?.EapPeerSetUIContext !== undefined) view.setBigInt64(80, BigInt(data.EapPeerSetUIContext), true);
  // 0x58: isize
  if (data?.EapPeerGetResponseAttributes !== undefined) view.setBigInt64(88, BigInt(data.EapPeerGetResponseAttributes), true);
  // 0x60: isize
  if (data?.EapPeerSetResponseAttributes !== undefined) view.setBigInt64(96, BigInt(data.EapPeerSetResponseAttributes), true);
  // 0x68: isize
  if (data?.EapPeerEndSession !== undefined) view.setBigInt64(104, BigInt(data.EapPeerEndSession), true);
  // 0x70: isize
  if (data?.EapPeerShutdown !== undefined) view.setBigInt64(112, BigInt(data.EapPeerShutdown), true);
  return buf;
}

export class EAP_PEER_METHOD_ROUTINESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pEapType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: isize
  get EapPeerInitialize(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get EapPeerGetIdentity(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get EapPeerBeginSession(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get EapPeerSetCredentials(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get EapPeerProcessRequestPacket(): Deno.PointerValue {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get EapPeerGetResponsePacket(): Deno.PointerValue {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get EapPeerGetResult(): Deno.PointerValue {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get EapPeerGetUIContext(): Deno.PointerValue {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get EapPeerSetUIContext(): Deno.PointerValue {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get EapPeerGetResponseAttributes(): Deno.PointerValue {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x60: isize
  get EapPeerSetResponseAttributes(): Deno.PointerValue {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x68: isize
  get EapPeerEndSession(): Deno.PointerValue {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: isize
  get EapPeerShutdown(): Deno.PointerValue {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pEapType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: isize
  set EapPeerInitialize(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set EapPeerGetIdentity(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set EapPeerBeginSession(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set EapPeerSetCredentials(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set EapPeerProcessRequestPacket(value: Deno.PointerValue) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set EapPeerGetResponsePacket(value: Deno.PointerValue) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set EapPeerGetResult(value: Deno.PointerValue) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set EapPeerGetUIContext(value: Deno.PointerValue) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set EapPeerSetUIContext(value: Deno.PointerValue) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set EapPeerGetResponseAttributes(value: Deno.PointerValue) {
    this.view.setBigInt64(88, BigInt(value), true);
  }

  // 0x60: isize
  set EapPeerSetResponseAttributes(value: Deno.PointerValue) {
    this.view.setBigInt64(96, BigInt(value), true);
  }

  // 0x68: isize
  set EapPeerEndSession(value: Deno.PointerValue) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: isize
  set EapPeerShutdown(value: Deno.PointerValue) {
    this.view.setBigInt64(112, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.ExtensibleAuthenticationProtocol.EAP_AUTHENTICATOR_METHOD_ROUTINES (size: 96)
 */
export interface EAP_AUTHENTICATOR_METHOD_ROUTINES {
  /** u32 */
  dwSizeInBytes: number;
  /** ptr */
  pEapType: Deno.PointerValue | Uint8Array | null;
  /** isize */
  EapMethodAuthenticatorInitialize: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorBeginSession: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorUpdateInnerMethodParams: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorReceivePacket: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorSendPacket: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorGetAttributes: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorSetAttributes: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorGetResult: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorEndSession: Deno.PointerValue;
  /** isize */
  EapMethodAuthenticatorShutdown: Deno.PointerValue;
}

export const sizeofEAP_AUTHENTICATOR_METHOD_ROUTINES = 96;

export function allocEAP_AUTHENTICATOR_METHOD_ROUTINES(data?: Partial<EAP_AUTHENTICATOR_METHOD_ROUTINES>): Uint8Array {
  const buf = new Uint8Array(sizeofEAP_AUTHENTICATOR_METHOD_ROUTINES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSizeInBytes !== undefined) view.setUint32(0, Number(data.dwSizeInBytes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEapType !== undefined) view.setBigUint64(8, data.pEapType === null ? 0n : BigInt(util.toPointer(data.pEapType)), true);
  // 0x10: isize
  if (data?.EapMethodAuthenticatorInitialize !== undefined) view.setBigInt64(16, BigInt(data.EapMethodAuthenticatorInitialize), true);
  // 0x18: isize
  if (data?.EapMethodAuthenticatorBeginSession !== undefined) view.setBigInt64(24, BigInt(data.EapMethodAuthenticatorBeginSession), true);
  // 0x20: isize
  if (data?.EapMethodAuthenticatorUpdateInnerMethodParams !== undefined) view.setBigInt64(32, BigInt(data.EapMethodAuthenticatorUpdateInnerMethodParams), true);
  // 0x28: isize
  if (data?.EapMethodAuthenticatorReceivePacket !== undefined) view.setBigInt64(40, BigInt(data.EapMethodAuthenticatorReceivePacket), true);
  // 0x30: isize
  if (data?.EapMethodAuthenticatorSendPacket !== undefined) view.setBigInt64(48, BigInt(data.EapMethodAuthenticatorSendPacket), true);
  // 0x38: isize
  if (data?.EapMethodAuthenticatorGetAttributes !== undefined) view.setBigInt64(56, BigInt(data.EapMethodAuthenticatorGetAttributes), true);
  // 0x40: isize
  if (data?.EapMethodAuthenticatorSetAttributes !== undefined) view.setBigInt64(64, BigInt(data.EapMethodAuthenticatorSetAttributes), true);
  // 0x48: isize
  if (data?.EapMethodAuthenticatorGetResult !== undefined) view.setBigInt64(72, BigInt(data.EapMethodAuthenticatorGetResult), true);
  // 0x50: isize
  if (data?.EapMethodAuthenticatorEndSession !== undefined) view.setBigInt64(80, BigInt(data.EapMethodAuthenticatorEndSession), true);
  // 0x58: isize
  if (data?.EapMethodAuthenticatorShutdown !== undefined) view.setBigInt64(88, BigInt(data.EapMethodAuthenticatorShutdown), true);
  return buf;
}

export class EAP_AUTHENTICATOR_METHOD_ROUTINESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSizeInBytes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pEapType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: isize
  get EapMethodAuthenticatorInitialize(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get EapMethodAuthenticatorBeginSession(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get EapMethodAuthenticatorUpdateInnerMethodParams(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get EapMethodAuthenticatorReceivePacket(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get EapMethodAuthenticatorSendPacket(): Deno.PointerValue {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get EapMethodAuthenticatorGetAttributes(): Deno.PointerValue {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get EapMethodAuthenticatorSetAttributes(): Deno.PointerValue {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get EapMethodAuthenticatorGetResult(): Deno.PointerValue {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get EapMethodAuthenticatorEndSession(): Deno.PointerValue {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get EapMethodAuthenticatorShutdown(): Deno.PointerValue {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x00: u32
  set dwSizeInBytes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pEapType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: isize
  set EapMethodAuthenticatorInitialize(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set EapMethodAuthenticatorBeginSession(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set EapMethodAuthenticatorUpdateInnerMethodParams(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set EapMethodAuthenticatorReceivePacket(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set EapMethodAuthenticatorSendPacket(value: Deno.PointerValue) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set EapMethodAuthenticatorGetAttributes(value: Deno.PointerValue) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set EapMethodAuthenticatorSetAttributes(value: Deno.PointerValue) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set EapMethodAuthenticatorGetResult(value: Deno.PointerValue) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set EapMethodAuthenticatorEndSession(value: Deno.PointerValue) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set EapMethodAuthenticatorShutdown(value: Deno.PointerValue) {
    this.view.setBigInt64(88, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.EnterpriseData.HTHREAD_NETWORK_CONTEXT (size: 16)
 */
export interface HTHREAD_NETWORK_CONTEXT {
  /** u32 */
  ThreadId: number;
  /** Windows.Win32.Foundation.HANDLE */
  ThreadContext: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTHREAD_NETWORK_CONTEXT = 16;

export function allocHTHREAD_NETWORK_CONTEXT(data?: Partial<HTHREAD_NETWORK_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofHTHREAD_NETWORK_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadId !== undefined) view.setUint32(0, Number(data.ThreadId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ThreadContext !== undefined) view.setBigUint64(8, data.ThreadContext === null ? 0n : BigInt(util.toPointer(data.ThreadContext)), true);
  return buf;
}

export class HTHREAD_NETWORK_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ThreadId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ThreadContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ThreadId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ThreadContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.EnterpriseData.FILE_UNPROTECT_OPTIONS (size: 8)
 */
export interface FILE_UNPROTECT_OPTIONS {
  /** u8 */
  audit: number;
}

export const sizeofFILE_UNPROTECT_OPTIONS = 8;

export function allocFILE_UNPROTECT_OPTIONS(data?: Partial<FILE_UNPROTECT_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofFILE_UNPROTECT_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.audit !== undefined) view.setUint8(0, Number(data.audit));
  // 0x01: pad7
  return buf;
}

export class FILE_UNPROTECT_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get audit(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set audit(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.Foundation.UNICODE_STRING (size: 16)
 */
export interface UNICODE_STRING {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  Buffer: string | null | Uint8Array | Uint16Array;
}

export const sizeofUNICODE_STRING = 16;

export function allocUNICODE_STRING(data?: Partial<UNICODE_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofUNICODE_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class UNICODE_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MaximumLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MaximumLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TRUST_INFORMATION (size: 16)
 */
export interface LSA_TRUST_INFORMATION {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLSA_TRUST_INFORMATION = 16;

export function allocLSA_TRUST_INFORMATION(data?: Partial<LSA_TRUST_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TRUST_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x08: pointer
  if (data?.Sid !== undefined) view.setBigUint64(8, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  return buf;
}

export class LSA_TRUST_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Sid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Sid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_REFERENCED_DOMAIN_LIST (size: 16)
 */
export interface LSA_REFERENCED_DOMAIN_LIST {
  /** u32 */
  Entries: number;
  /** ptr */
  Domains: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLSA_REFERENCED_DOMAIN_LIST = 16;

export function allocLSA_REFERENCED_DOMAIN_LIST(data?: Partial<LSA_REFERENCED_DOMAIN_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_REFERENCED_DOMAIN_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Entries !== undefined) view.setUint32(0, Number(data.Entries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Domains !== undefined) view.setBigUint64(8, data.Domains === null ? 0n : BigInt(util.toPointer(data.Domains)), true);
  return buf;
}

export class LSA_REFERENCED_DOMAIN_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Entries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Domains(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Entries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Domains(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TRANSLATED_SID2 (size: 24)
 */
export interface LSA_TRANSLATED_SID2 {
  /** Windows.Win32.Security.SID_NAME_USE */
  Use: SID_NAME_USE;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  DomainIndex: number;
  /** u32 */
  Flags: number;
}

export const sizeofLSA_TRANSLATED_SID2 = 24;

export function allocLSA_TRANSLATED_SID2(data?: Partial<LSA_TRANSLATED_SID2>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TRANSLATED_SID2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Use !== undefined) view.setInt32(0, Number(data.Use), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Sid !== undefined) view.setBigUint64(8, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  // 0x10: i32
  if (data?.DomainIndex !== undefined) view.setInt32(16, Number(data.DomainIndex), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  return buf;
}

export class LSA_TRANSLATED_SID2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Use(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Sid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get DomainIndex(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get Flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: i32
  set Use(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Sid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set DomainIndex(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set Flags(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TRANSLATED_NAME (size: 24)
 */
export interface LSA_TRANSLATED_NAME {
  /** Windows.Win32.Security.SID_NAME_USE */
  Use: SID_NAME_USE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  DomainIndex: number;
}

export const sizeofLSA_TRANSLATED_NAME = 24;

export function allocLSA_TRANSLATED_NAME(data?: Partial<LSA_TRANSLATED_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TRANSLATED_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Use !== undefined) view.setInt32(0, Number(data.Use), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Name !== undefined) view.setBigUint64(8, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x10: i32
  if (data?.DomainIndex !== undefined) view.setInt32(16, Number(data.DomainIndex), true);
  // 0x14: pad4
  return buf;
}

export class LSA_TRANSLATED_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Use(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get DomainIndex(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set Use(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set DomainIndex(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_ACCOUNT_DOMAIN_INFO (size: 16)
 */
export interface POLICY_ACCOUNT_DOMAIN_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSID */
  DomainSid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOLICY_ACCOUNT_DOMAIN_INFO = 16;

export function allocPOLICY_ACCOUNT_DOMAIN_INFO(data?: Partial<POLICY_ACCOUNT_DOMAIN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_ACCOUNT_DOMAIN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(0, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x08: pointer
  if (data?.DomainSid !== undefined) view.setBigUint64(8, data.DomainSid === null ? 0n : BigInt(util.toPointer(data.DomainSid)), true);
  return buf;
}

export class POLICY_ACCOUNT_DOMAIN_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DomainSid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DomainSid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_DNS_DOMAIN_INFO (size: 40)
 */
export interface POLICY_DNS_DOMAIN_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsDomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsForestName: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  DomainGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOLICY_DNS_DOMAIN_INFO = 40;

export function allocPOLICY_DNS_DOMAIN_INFO(data?: Partial<POLICY_DNS_DOMAIN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_DNS_DOMAIN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x08: pointer
  if (data?.DnsDomainName !== undefined) view.setBigUint64(8, data.DnsDomainName === null ? 0n : BigInt(util.toPointer(data.DnsDomainName)), true);
  // 0x10: pointer
  if (data?.DnsForestName !== undefined) view.setBigUint64(16, data.DnsForestName === null ? 0n : BigInt(util.toPointer(data.DnsForestName)), true);
  // 0x18: pointer
  if (data?.DomainGuid !== undefined) view.setBigUint64(24, data.DomainGuid === null ? 0n : BigInt(util.toPointer(data.DomainGuid)), true);
  // 0x20: pointer
  if (data?.Sid !== undefined) view.setBigUint64(32, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  return buf;
}

export class POLICY_DNS_DOMAIN_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DnsDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DnsForestName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DomainGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Sid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DnsForestName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DomainGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Sid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SE_ADT_OBJECT_TYPE (size: 16)
 */
export interface SE_ADT_OBJECT_TYPE {
  /** System.Guid */
  ObjectType: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  Flags: number;
  /** u16 */
  Level: number;
  /** u32 */
  AccessMask: number;
}

export const sizeofSE_ADT_OBJECT_TYPE = 16;

export function allocSE_ADT_OBJECT_TYPE(data?: Partial<SE_ADT_OBJECT_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ADT_OBJECT_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectType !== undefined) view.setBigUint64(0, data.ObjectType === null ? 0n : BigInt(util.toPointer(data.ObjectType)), true);
  // 0x08: u16
  if (data?.Flags !== undefined) view.setUint16(8, Number(data.Flags), true);
  // 0x0a: u16
  if (data?.Level !== undefined) view.setUint16(10, Number(data.Level), true);
  // 0x0c: u32
  if (data?.AccessMask !== undefined) view.setUint32(12, Number(data.AccessMask), true);
  return buf;
}

export class SE_ADT_OBJECT_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get Flags(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get Level(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get AccessMask(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set ObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set Flags(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set Level(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set AccessMask(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SE_ADT_PARAMETER_ARRAY_ENTRY (size: 24)
 */
export interface SE_ADT_PARAMETER_ARRAY_ENTRY {
  /** Windows.Win32.Security.Authentication.Identity.SE_ADT_PARAMETER_TYPE */
  Type: SE_ADT_PARAMETER_TYPE;
  /** u32 */
  Length: number;
  /** array */
  Data: Deno.PointerValue | null;
  /** ptr */
  Address: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSE_ADT_PARAMETER_ARRAY_ENTRY = 24;

export function allocSE_ADT_PARAMETER_ARRAY_ENTRY(data?: Partial<SE_ADT_PARAMETER_ARRAY_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ADT_PARAMETER_ARRAY_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  // 0x10: pointer
  if (data?.Address !== undefined) view.setBigUint64(16, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  return buf;
}

export class SE_ADT_PARAMETER_ARRAY_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Address(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Address(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SE_ADT_ACCESS_REASON (size: 32)
 */
export interface SE_ADT_ACCESS_REASON {
  /** u32 */
  AccessMask: number;
  /** array */
  AccessReasons: Deno.PointerValue | null;
  /** u32 */
  ObjectTypeIndex: number;
  /** u32 */
  AccessGranted: number;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSE_ADT_ACCESS_REASON = 32;

export function allocSE_ADT_ACCESS_REASON(data?: Partial<SE_ADT_ACCESS_REASON>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ADT_ACCESS_REASON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AccessMask !== undefined) view.setUint32(0, Number(data.AccessMask), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.AccessReasons !== undefined) view.setBigUint64(8, data.AccessReasons === null ? 0n : BigInt(util.toPointer(data.AccessReasons)), true);
  // 0x10: u32
  if (data?.ObjectTypeIndex !== undefined) view.setUint32(16, Number(data.ObjectTypeIndex), true);
  // 0x14: u32
  if (data?.AccessGranted !== undefined) view.setUint32(20, Number(data.AccessGranted), true);
  // 0x18: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(24, data.SecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.SecurityDescriptor)), true);
  return buf;
}

export class SE_ADT_ACCESS_REASONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AccessMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get AccessReasons(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get ObjectTypeIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get AccessGranted(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get SecurityDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AccessMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set AccessReasons(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set ObjectTypeIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set AccessGranted(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set SecurityDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SE_ADT_CLAIMS (size: 16)
 */
export interface SE_ADT_CLAIMS {
  /** u32 */
  Length: number;
  /** ptr */
  Claims: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSE_ADT_CLAIMS = 16;

export function allocSE_ADT_CLAIMS(data?: Partial<SE_ADT_CLAIMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ADT_CLAIMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Claims !== undefined) view.setBigUint64(8, data.Claims === null ? 0n : BigInt(util.toPointer(data.Claims)), true);
  return buf;
}

export class SE_ADT_CLAIMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Claims(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Claims(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SE_ADT_PARAMETER_ARRAY (size: 32)
 */
export interface SE_ADT_PARAMETER_ARRAY {
  /** u32 */
  CategoryId: number;
  /** u32 */
  AuditId: number;
  /** u32 */
  ParameterCount: number;
  /** u32 */
  Length: number;
  /** u16 */
  FlatSubCategoryId: number;
  /** u16 */
  Type: number;
  /** u32 */
  Flags: number;
  /** array */
  Parameters: Deno.PointerValue | null;
}

export const sizeofSE_ADT_PARAMETER_ARRAY = 32;

export function allocSE_ADT_PARAMETER_ARRAY(data?: Partial<SE_ADT_PARAMETER_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ADT_PARAMETER_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CategoryId !== undefined) view.setUint32(0, Number(data.CategoryId), true);
  // 0x04: u32
  if (data?.AuditId !== undefined) view.setUint32(4, Number(data.AuditId), true);
  // 0x08: u32
  if (data?.ParameterCount !== undefined) view.setUint32(8, Number(data.ParameterCount), true);
  // 0x0c: u32
  if (data?.Length !== undefined) view.setUint32(12, Number(data.Length), true);
  // 0x10: u16
  if (data?.FlatSubCategoryId !== undefined) view.setUint16(16, Number(data.FlatSubCategoryId), true);
  // 0x12: u16
  if (data?.Type !== undefined) view.setUint16(18, Number(data.Type), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  // 0x18: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(24, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class SE_ADT_PARAMETER_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CategoryId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AuditId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ParameterCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Length(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u16
  get FlatSubCategoryId(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get Type(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u32
  get Flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set CategoryId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AuditId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ParameterCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Length(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u16
  set FlatSubCategoryId(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set Type(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u32
  set Flags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SE_ADT_PARAMETER_ARRAY_EX (size: 40)
 */
export interface SE_ADT_PARAMETER_ARRAY_EX {
  /** u32 */
  CategoryId: number;
  /** u32 */
  AuditId: number;
  /** u32 */
  Version: number;
  /** u32 */
  ParameterCount: number;
  /** u32 */
  Length: number;
  /** u16 */
  FlatSubCategoryId: number;
  /** u16 */
  Type: number;
  /** u32 */
  Flags: number;
  /** array */
  Parameters: Deno.PointerValue | null;
}

export const sizeofSE_ADT_PARAMETER_ARRAY_EX = 40;

export function allocSE_ADT_PARAMETER_ARRAY_EX(data?: Partial<SE_ADT_PARAMETER_ARRAY_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ADT_PARAMETER_ARRAY_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CategoryId !== undefined) view.setUint32(0, Number(data.CategoryId), true);
  // 0x04: u32
  if (data?.AuditId !== undefined) view.setUint32(4, Number(data.AuditId), true);
  // 0x08: u32
  if (data?.Version !== undefined) view.setUint32(8, Number(data.Version), true);
  // 0x0c: u32
  if (data?.ParameterCount !== undefined) view.setUint32(12, Number(data.ParameterCount), true);
  // 0x10: u32
  if (data?.Length !== undefined) view.setUint32(16, Number(data.Length), true);
  // 0x14: u16
  if (data?.FlatSubCategoryId !== undefined) view.setUint16(20, Number(data.FlatSubCategoryId), true);
  // 0x16: u16
  if (data?.Type !== undefined) view.setUint16(22, Number(data.Type), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(32, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class SE_ADT_PARAMETER_ARRAY_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CategoryId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AuditId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Version(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ParameterCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Length(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get FlatSubCategoryId(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get Type(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set CategoryId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AuditId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Version(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ParameterCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Length(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set FlatSubCategoryId(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set Type(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TRANSLATED_SID (size: 16)
 */
export interface LSA_TRANSLATED_SID {
  /** Windows.Win32.Security.SID_NAME_USE */
  Use: SID_NAME_USE;
  /** u32 */
  RelativeId: number;
  /** i32 */
  DomainIndex: number;
}

export const sizeofLSA_TRANSLATED_SID = 16;

export function allocLSA_TRANSLATED_SID(data?: Partial<LSA_TRANSLATED_SID>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TRANSLATED_SID);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Use !== undefined) view.setInt32(0, Number(data.Use), true);
  // 0x04: u32
  if (data?.RelativeId !== undefined) view.setUint32(4, Number(data.RelativeId), true);
  // 0x08: i32
  if (data?.DomainIndex !== undefined) view.setInt32(8, Number(data.DomainIndex), true);
  // 0x0c: pad4
  return buf;
}

export class LSA_TRANSLATED_SIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Use(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get RelativeId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get DomainIndex(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set Use(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set RelativeId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set DomainIndex(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i64
  get QuadPart(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i64
  set QuadPart(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_LOG_INFO (size: 40)
 */
export interface POLICY_AUDIT_LOG_INFO {
  /** u32 */
  AuditLogPercentFull: number;
  /** u32 */
  MaximumLogSize: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  AuditRetentionPeriod: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  AuditLogFullShutdownInProgress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeToShutdown: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NextAuditRecordId: number;
}

export const sizeofPOLICY_AUDIT_LOG_INFO = 40;

export function allocPOLICY_AUDIT_LOG_INFO(data?: Partial<POLICY_AUDIT_LOG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_LOG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AuditLogPercentFull !== undefined) view.setUint32(0, Number(data.AuditLogPercentFull), true);
  // 0x04: u32
  if (data?.MaximumLogSize !== undefined) view.setUint32(4, Number(data.MaximumLogSize), true);
  // 0x08: pointer
  if (data?.AuditRetentionPeriod !== undefined) view.setBigUint64(8, data.AuditRetentionPeriod === null ? 0n : BigInt(util.toPointer(data.AuditRetentionPeriod)), true);
  // 0x10: pointer
  if (data?.AuditLogFullShutdownInProgress !== undefined) view.setBigUint64(16, data.AuditLogFullShutdownInProgress === null ? 0n : BigInt(util.toPointer(data.AuditLogFullShutdownInProgress)), true);
  // 0x18: pointer
  if (data?.TimeToShutdown !== undefined) view.setBigUint64(24, data.TimeToShutdown === null ? 0n : BigInt(util.toPointer(data.TimeToShutdown)), true);
  // 0x20: u32
  if (data?.NextAuditRecordId !== undefined) view.setUint32(32, Number(data.NextAuditRecordId), true);
  // 0x24: pad4
  return buf;
}

export class POLICY_AUDIT_LOG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AuditLogPercentFull(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MaximumLogSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get AuditRetentionPeriod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AuditLogFullShutdownInProgress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get TimeToShutdown(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get NextAuditRecordId(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set AuditLogPercentFull(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MaximumLogSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set AuditRetentionPeriod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AuditLogFullShutdownInProgress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set TimeToShutdown(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set NextAuditRecordId(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_EVENTS_INFO (size: 24)
 */
export interface POLICY_AUDIT_EVENTS_INFO {
  /** Windows.Win32.Foundation.BOOLEAN */
  AuditingMode: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  EventAuditingOptions: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  MaximumAuditEventCount: number;
}

export const sizeofPOLICY_AUDIT_EVENTS_INFO = 24;

export function allocPOLICY_AUDIT_EVENTS_INFO(data?: Partial<POLICY_AUDIT_EVENTS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_EVENTS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AuditingMode !== undefined) view.setBigUint64(0, data.AuditingMode === null ? 0n : BigInt(util.toPointer(data.AuditingMode)), true);
  // 0x08: pointer
  if (data?.EventAuditingOptions !== undefined) view.setBigUint64(8, data.EventAuditingOptions === null ? 0n : BigInt(util.toPointer(data.EventAuditingOptions)), true);
  // 0x10: u32
  if (data?.MaximumAuditEventCount !== undefined) view.setUint32(16, Number(data.MaximumAuditEventCount), true);
  // 0x14: pad4
  return buf;
}

export class POLICY_AUDIT_EVENTS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AuditingMode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get EventAuditingOptions(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get MaximumAuditEventCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set AuditingMode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set EventAuditingOptions(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set MaximumAuditEventCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_SUBCATEGORIES_INFO (size: 16)
 */
export interface POLICY_AUDIT_SUBCATEGORIES_INFO {
  /** u32 */
  MaximumSubCategoryCount: number;
  /** ptr */
  EventAuditingOptions: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPOLICY_AUDIT_SUBCATEGORIES_INFO = 16;

export function allocPOLICY_AUDIT_SUBCATEGORIES_INFO(data?: Partial<POLICY_AUDIT_SUBCATEGORIES_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_SUBCATEGORIES_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaximumSubCategoryCount !== undefined) view.setUint32(0, Number(data.MaximumSubCategoryCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EventAuditingOptions !== undefined) view.setBigUint64(8, data.EventAuditingOptions === null ? 0n : BigInt(util.toPointer(data.EventAuditingOptions)), true);
  return buf;
}

export class POLICY_AUDIT_SUBCATEGORIES_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaximumSubCategoryCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EventAuditingOptions(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set MaximumSubCategoryCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EventAuditingOptions(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_CATEGORIES_INFO (size: 16)
 */
export interface POLICY_AUDIT_CATEGORIES_INFO {
  /** u32 */
  MaximumCategoryCount: number;
  /** ptr */
  SubCategoriesInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPOLICY_AUDIT_CATEGORIES_INFO = 16;

export function allocPOLICY_AUDIT_CATEGORIES_INFO(data?: Partial<POLICY_AUDIT_CATEGORIES_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_CATEGORIES_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaximumCategoryCount !== undefined) view.setUint32(0, Number(data.MaximumCategoryCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SubCategoriesInfo !== undefined) view.setBigUint64(8, data.SubCategoriesInfo === null ? 0n : BigInt(util.toPointer(data.SubCategoriesInfo)), true);
  return buf;
}

export class POLICY_AUDIT_CATEGORIES_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MaximumCategoryCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SubCategoriesInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set MaximumCategoryCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SubCategoriesInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_PRIMARY_DOMAIN_INFO (size: 16)
 */
export interface POLICY_PRIMARY_DOMAIN_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOLICY_PRIMARY_DOMAIN_INFO = 16;

export function allocPOLICY_PRIMARY_DOMAIN_INFO(data?: Partial<POLICY_PRIMARY_DOMAIN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_PRIMARY_DOMAIN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x08: pointer
  if (data?.Sid !== undefined) view.setBigUint64(8, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  return buf;
}

export class POLICY_PRIMARY_DOMAIN_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Sid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Sid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_PD_ACCOUNT_INFO (size: 8)
 */
export interface POLICY_PD_ACCOUNT_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOLICY_PD_ACCOUNT_INFO = 8;

export function allocPOLICY_PD_ACCOUNT_INFO(data?: Partial<POLICY_PD_ACCOUNT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_PD_ACCOUNT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  return buf;
}

export class POLICY_PD_ACCOUNT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_LSA_SERVER_ROLE_INFO (size: 8)
 */
export interface POLICY_LSA_SERVER_ROLE_INFO {
  /** Windows.Win32.Security.Authentication.Identity.POLICY_LSA_SERVER_ROLE */
  LsaServerRole: POLICY_LSA_SERVER_ROLE;
}

export const sizeofPOLICY_LSA_SERVER_ROLE_INFO = 8;

export function allocPOLICY_LSA_SERVER_ROLE_INFO(data?: Partial<POLICY_LSA_SERVER_ROLE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_LSA_SERVER_ROLE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LsaServerRole !== undefined) view.setInt32(0, Number(data.LsaServerRole), true);
  // 0x04: pad4
  return buf;
}

export class POLICY_LSA_SERVER_ROLE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get LsaServerRole(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set LsaServerRole(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_REPLICA_SOURCE_INFO (size: 16)
 */
export interface POLICY_REPLICA_SOURCE_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ReplicaSource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ReplicaAccountName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOLICY_REPLICA_SOURCE_INFO = 16;

export function allocPOLICY_REPLICA_SOURCE_INFO(data?: Partial<POLICY_REPLICA_SOURCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_REPLICA_SOURCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ReplicaSource !== undefined) view.setBigUint64(0, data.ReplicaSource === null ? 0n : BigInt(util.toPointer(data.ReplicaSource)), true);
  // 0x08: pointer
  if (data?.ReplicaAccountName !== undefined) view.setBigUint64(8, data.ReplicaAccountName === null ? 0n : BigInt(util.toPointer(data.ReplicaAccountName)), true);
  return buf;
}

export class POLICY_REPLICA_SOURCE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ReplicaSource(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ReplicaAccountName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ReplicaSource(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ReplicaAccountName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.QUOTA_LIMITS (size: 48)
 */
export interface QUOTA_LIMITS {
  /** usize */
  PagedPoolLimit: Deno.PointerValue;
  /** usize */
  NonPagedPoolLimit: Deno.PointerValue;
  /** usize */
  MinimumWorkingSetSize: Deno.PointerValue;
  /** usize */
  MaximumWorkingSetSize: Deno.PointerValue;
  /** usize */
  PagefileLimit: Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeLimit: Uint8Array | Deno.PointerValue | null;
}

export const sizeofQUOTA_LIMITS = 48;

export function allocQUOTA_LIMITS(data?: Partial<QUOTA_LIMITS>): Uint8Array {
  const buf = new Uint8Array(sizeofQUOTA_LIMITS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.PagedPoolLimit !== undefined) view.setBigUint64(0, BigInt(data.PagedPoolLimit), true);
  // 0x08: usize
  if (data?.NonPagedPoolLimit !== undefined) view.setBigUint64(8, BigInt(data.NonPagedPoolLimit), true);
  // 0x10: usize
  if (data?.MinimumWorkingSetSize !== undefined) view.setBigUint64(16, BigInt(data.MinimumWorkingSetSize), true);
  // 0x18: usize
  if (data?.MaximumWorkingSetSize !== undefined) view.setBigUint64(24, BigInt(data.MaximumWorkingSetSize), true);
  // 0x20: usize
  if (data?.PagefileLimit !== undefined) view.setBigUint64(32, BigInt(data.PagefileLimit), true);
  // 0x28: pointer
  if (data?.TimeLimit !== undefined) view.setBigUint64(40, data.TimeLimit === null ? 0n : BigInt(util.toPointer(data.TimeLimit)), true);
  return buf;
}

export class QUOTA_LIMITSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get PagedPoolLimit(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: usize
  get NonPagedPoolLimit(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: usize
  get MinimumWorkingSetSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: usize
  get MaximumWorkingSetSize(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: usize
  get PagefileLimit(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: pointer
  get TimeLimit(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: usize
  set PagedPoolLimit(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: usize
  set NonPagedPoolLimit(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: usize
  set MinimumWorkingSetSize(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: usize
  set MaximumWorkingSetSize(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: usize
  set PagefileLimit(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set TimeLimit(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_DEFAULT_QUOTA_INFO (size: 8)
 */
export interface POLICY_DEFAULT_QUOTA_INFO {
  /** Windows.Win32.Security.QUOTA_LIMITS */
  QuotaLimits: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOLICY_DEFAULT_QUOTA_INFO = 8;

export function allocPOLICY_DEFAULT_QUOTA_INFO(data?: Partial<POLICY_DEFAULT_QUOTA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_DEFAULT_QUOTA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.QuotaLimits !== undefined) view.setBigUint64(0, data.QuotaLimits === null ? 0n : BigInt(util.toPointer(data.QuotaLimits)), true);
  return buf;
}

export class POLICY_DEFAULT_QUOTA_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get QuotaLimits(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set QuotaLimits(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_MODIFICATION_INFO (size: 16)
 */
export interface POLICY_MODIFICATION_INFO {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ModifiedId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DatabaseCreationTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOLICY_MODIFICATION_INFO = 16;

export function allocPOLICY_MODIFICATION_INFO(data?: Partial<POLICY_MODIFICATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_MODIFICATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ModifiedId !== undefined) view.setBigUint64(0, data.ModifiedId === null ? 0n : BigInt(util.toPointer(data.ModifiedId)), true);
  // 0x08: pointer
  if (data?.DatabaseCreationTime !== undefined) view.setBigUint64(8, data.DatabaseCreationTime === null ? 0n : BigInt(util.toPointer(data.DatabaseCreationTime)), true);
  return buf;
}

export class POLICY_MODIFICATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ModifiedId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DatabaseCreationTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ModifiedId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DatabaseCreationTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_FULL_SET_INFO (size: 8)
 */
export interface POLICY_AUDIT_FULL_SET_INFO {
  /** Windows.Win32.Foundation.BOOLEAN */
  ShutDownOnFull: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOLICY_AUDIT_FULL_SET_INFO = 8;

export function allocPOLICY_AUDIT_FULL_SET_INFO(data?: Partial<POLICY_AUDIT_FULL_SET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_FULL_SET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ShutDownOnFull !== undefined) view.setBigUint64(0, data.ShutDownOnFull === null ? 0n : BigInt(util.toPointer(data.ShutDownOnFull)), true);
  return buf;
}

export class POLICY_AUDIT_FULL_SET_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ShutDownOnFull(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ShutDownOnFull(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_FULL_QUERY_INFO (size: 16)
 */
export interface POLICY_AUDIT_FULL_QUERY_INFO {
  /** Windows.Win32.Foundation.BOOLEAN */
  ShutDownOnFull: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  LogIsFull: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOLICY_AUDIT_FULL_QUERY_INFO = 16;

export function allocPOLICY_AUDIT_FULL_QUERY_INFO(data?: Partial<POLICY_AUDIT_FULL_QUERY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_FULL_QUERY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ShutDownOnFull !== undefined) view.setBigUint64(0, data.ShutDownOnFull === null ? 0n : BigInt(util.toPointer(data.ShutDownOnFull)), true);
  // 0x08: pointer
  if (data?.LogIsFull !== undefined) view.setBigUint64(8, data.LogIsFull === null ? 0n : BigInt(util.toPointer(data.LogIsFull)), true);
  return buf;
}

export class POLICY_AUDIT_FULL_QUERY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ShutDownOnFull(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LogIsFull(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ShutDownOnFull(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LogIsFull(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_DOMAIN_EFS_INFO (size: 16)
 */
export interface POLICY_DOMAIN_EFS_INFO {
  /** u32 */
  InfoLength: number;
  /** ptr */
  EfsBlob: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPOLICY_DOMAIN_EFS_INFO = 16;

export function allocPOLICY_DOMAIN_EFS_INFO(data?: Partial<POLICY_DOMAIN_EFS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_DOMAIN_EFS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InfoLength !== undefined) view.setUint32(0, Number(data.InfoLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EfsBlob !== undefined) view.setBigUint64(8, data.EfsBlob === null ? 0n : BigInt(util.toPointer(data.EfsBlob)), true);
  return buf;
}

export class POLICY_DOMAIN_EFS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get InfoLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EfsBlob(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set InfoLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EfsBlob(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_DOMAIN_KERBEROS_TICKET_INFO (size: 48)
 */
export interface POLICY_DOMAIN_KERBEROS_TICKET_INFO {
  /** u32 */
  AuthenticationOptions: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MaxServiceTicketAge: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MaxTicketAge: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MaxRenewAge: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MaxClockSkew: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Reserved: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOLICY_DOMAIN_KERBEROS_TICKET_INFO = 48;

export function allocPOLICY_DOMAIN_KERBEROS_TICKET_INFO(data?: Partial<POLICY_DOMAIN_KERBEROS_TICKET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_DOMAIN_KERBEROS_TICKET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AuthenticationOptions !== undefined) view.setUint32(0, Number(data.AuthenticationOptions), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MaxServiceTicketAge !== undefined) view.setBigUint64(8, data.MaxServiceTicketAge === null ? 0n : BigInt(util.toPointer(data.MaxServiceTicketAge)), true);
  // 0x10: pointer
  if (data?.MaxTicketAge !== undefined) view.setBigUint64(16, data.MaxTicketAge === null ? 0n : BigInt(util.toPointer(data.MaxTicketAge)), true);
  // 0x18: pointer
  if (data?.MaxRenewAge !== undefined) view.setBigUint64(24, data.MaxRenewAge === null ? 0n : BigInt(util.toPointer(data.MaxRenewAge)), true);
  // 0x20: pointer
  if (data?.MaxClockSkew !== undefined) view.setBigUint64(32, data.MaxClockSkew === null ? 0n : BigInt(util.toPointer(data.MaxClockSkew)), true);
  // 0x28: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(40, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class POLICY_DOMAIN_KERBEROS_TICKET_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AuthenticationOptions(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get MaxServiceTicketAge(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get MaxTicketAge(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get MaxRenewAge(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get MaxClockSkew(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AuthenticationOptions(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set MaxServiceTicketAge(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set MaxTicketAge(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set MaxRenewAge(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set MaxClockSkew(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_MACHINE_ACCT_INFO (size: 16)
 */
export interface POLICY_MACHINE_ACCT_INFO {
  /** u32 */
  Rid: number;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPOLICY_MACHINE_ACCT_INFO = 16;

export function allocPOLICY_MACHINE_ACCT_INFO(data?: Partial<POLICY_MACHINE_ACCT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_MACHINE_ACCT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Rid !== undefined) view.setUint32(0, Number(data.Rid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Sid !== undefined) view.setBigUint64(8, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  return buf;
}

export class POLICY_MACHINE_ACCT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Rid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Sid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Rid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Sid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_NAME_INFO (size: 8)
 */
export interface TRUSTED_DOMAIN_NAME_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRUSTED_DOMAIN_NAME_INFO = 8;

export function allocTRUSTED_DOMAIN_NAME_INFO(data?: Partial<TRUSTED_DOMAIN_NAME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_NAME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  return buf;
}

export class TRUSTED_DOMAIN_NAME_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_CONTROLLERS_INFO (size: 16)
 */
export interface TRUSTED_CONTROLLERS_INFO {
  /** u32 */
  Entries: number;
  /** ptr */
  Names: Deno.PointerValue | Uint8Array | null;
}

export const sizeofTRUSTED_CONTROLLERS_INFO = 16;

export function allocTRUSTED_CONTROLLERS_INFO(data?: Partial<TRUSTED_CONTROLLERS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_CONTROLLERS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Entries !== undefined) view.setUint32(0, Number(data.Entries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Names !== undefined) view.setBigUint64(8, data.Names === null ? 0n : BigInt(util.toPointer(data.Names)), true);
  return buf;
}

export class TRUSTED_CONTROLLERS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Entries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Names(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Entries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Names(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_POSIX_OFFSET_INFO (size: 8)
 */
export interface TRUSTED_POSIX_OFFSET_INFO {
  /** u32 */
  Offset: number;
}

export const sizeofTRUSTED_POSIX_OFFSET_INFO = 8;

export function allocTRUSTED_POSIX_OFFSET_INFO(data?: Partial<TRUSTED_POSIX_OFFSET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_POSIX_OFFSET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Offset !== undefined) view.setUint32(0, Number(data.Offset), true);
  // 0x04: pad4
  return buf;
}

export class TRUSTED_POSIX_OFFSET_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Offset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Offset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_PASSWORD_INFO (size: 16)
 */
export interface TRUSTED_PASSWORD_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  OldPassword: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRUSTED_PASSWORD_INFO = 16;

export function allocTRUSTED_PASSWORD_INFO(data?: Partial<TRUSTED_PASSWORD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_PASSWORD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Password !== undefined) view.setBigUint64(0, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x08: pointer
  if (data?.OldPassword !== undefined) view.setBigUint64(8, data.OldPassword === null ? 0n : BigInt(util.toPointer(data.OldPassword)), true);
  return buf;
}

export class TRUSTED_PASSWORD_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get OldPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set OldPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_INFORMATION_EX (size: 40)
 */
export interface TRUSTED_DOMAIN_INFORMATION_EX {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  FlatName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_TRUST_DIRECTION */
  TrustDirection: TRUSTED_DOMAIN_TRUST_DIRECTION;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_TRUST_TYPE */
  TrustType: TRUSTED_DOMAIN_TRUST_TYPE;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_TRUST_ATTRIBUTES */
  TrustAttributes: TRUSTED_DOMAIN_TRUST_ATTRIBUTES;
}

export const sizeofTRUSTED_DOMAIN_INFORMATION_EX = 40;

export function allocTRUSTED_DOMAIN_INFORMATION_EX(data?: Partial<TRUSTED_DOMAIN_INFORMATION_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_INFORMATION_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x08: pointer
  if (data?.FlatName !== undefined) view.setBigUint64(8, data.FlatName === null ? 0n : BigInt(util.toPointer(data.FlatName)), true);
  // 0x10: pointer
  if (data?.Sid !== undefined) view.setBigUint64(16, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  // 0x18: u32
  if (data?.TrustDirection !== undefined) view.setUint32(24, Number(data.TrustDirection), true);
  // 0x1c: u32
  if (data?.TrustType !== undefined) view.setUint32(28, Number(data.TrustType), true);
  // 0x20: u32
  if (data?.TrustAttributes !== undefined) view.setUint32(32, Number(data.TrustAttributes), true);
  // 0x24: pad4
  return buf;
}

export class TRUSTED_DOMAIN_INFORMATION_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get FlatName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Sid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get TrustDirection(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get TrustType(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get TrustAttributes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set FlatName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Sid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set TrustDirection(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set TrustType(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set TrustAttributes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_INFORMATION_EX2 (size: 48)
 */
export interface TRUSTED_DOMAIN_INFORMATION_EX2 {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  FlatName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TrustDirection: number;
  /** u32 */
  TrustType: number;
  /** u32 */
  TrustAttributes: number;
  /** u32 */
  ForestTrustLength: number;
  /** ptr */
  ForestTrustInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofTRUSTED_DOMAIN_INFORMATION_EX2 = 48;

export function allocTRUSTED_DOMAIN_INFORMATION_EX2(data?: Partial<TRUSTED_DOMAIN_INFORMATION_EX2>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_INFORMATION_EX2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x08: pointer
  if (data?.FlatName !== undefined) view.setBigUint64(8, data.FlatName === null ? 0n : BigInt(util.toPointer(data.FlatName)), true);
  // 0x10: pointer
  if (data?.Sid !== undefined) view.setBigUint64(16, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  // 0x18: u32
  if (data?.TrustDirection !== undefined) view.setUint32(24, Number(data.TrustDirection), true);
  // 0x1c: u32
  if (data?.TrustType !== undefined) view.setUint32(28, Number(data.TrustType), true);
  // 0x20: u32
  if (data?.TrustAttributes !== undefined) view.setUint32(32, Number(data.TrustAttributes), true);
  // 0x24: u32
  if (data?.ForestTrustLength !== undefined) view.setUint32(36, Number(data.ForestTrustLength), true);
  // 0x28: pointer
  if (data?.ForestTrustInfo !== undefined) view.setBigUint64(40, data.ForestTrustInfo === null ? 0n : BigInt(util.toPointer(data.ForestTrustInfo)), true);
  return buf;
}

export class TRUSTED_DOMAIN_INFORMATION_EX2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get FlatName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Sid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get TrustDirection(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get TrustType(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get TrustAttributes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get ForestTrustLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get ForestTrustInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set FlatName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Sid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set TrustDirection(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set TrustType(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set TrustAttributes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set ForestTrustLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set ForestTrustInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_AUTH_INFORMATION (size: 24)
 */
export interface LSA_AUTH_INFORMATION {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastUpdateTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.LSA_AUTH_INFORMATION_AUTH_TYPE */
  AuthType: LSA_AUTH_INFORMATION_AUTH_TYPE;
  /** u32 */
  AuthInfoLength: number;
  /** ptr */
  AuthInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLSA_AUTH_INFORMATION = 24;

export function allocLSA_AUTH_INFORMATION(data?: Partial<LSA_AUTH_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_AUTH_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LastUpdateTime !== undefined) view.setBigUint64(0, data.LastUpdateTime === null ? 0n : BigInt(util.toPointer(data.LastUpdateTime)), true);
  // 0x08: u32
  if (data?.AuthType !== undefined) view.setUint32(8, Number(data.AuthType), true);
  // 0x0c: u32
  if (data?.AuthInfoLength !== undefined) view.setUint32(12, Number(data.AuthInfoLength), true);
  // 0x10: pointer
  if (data?.AuthInfo !== undefined) view.setBigUint64(16, data.AuthInfo === null ? 0n : BigInt(util.toPointer(data.AuthInfo)), true);
  return buf;
}

export class LSA_AUTH_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LastUpdateTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get AuthType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get AuthInfoLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get AuthInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set LastUpdateTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set AuthType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set AuthInfoLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set AuthInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_AUTH_INFORMATION (size: 48)
 */
export interface TRUSTED_DOMAIN_AUTH_INFORMATION {
  /** u32 */
  IncomingAuthInfos: number;
  /** ptr */
  IncomingAuthenticationInformation: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  IncomingPreviousAuthenticationInformation: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  OutgoingAuthInfos: number;
  /** ptr */
  OutgoingAuthenticationInformation: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  OutgoingPreviousAuthenticationInformation: Deno.PointerValue | Uint8Array | null;
}

export const sizeofTRUSTED_DOMAIN_AUTH_INFORMATION = 48;

export function allocTRUSTED_DOMAIN_AUTH_INFORMATION(data?: Partial<TRUSTED_DOMAIN_AUTH_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_AUTH_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IncomingAuthInfos !== undefined) view.setUint32(0, Number(data.IncomingAuthInfos), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.IncomingAuthenticationInformation !== undefined) view.setBigUint64(8, data.IncomingAuthenticationInformation === null ? 0n : BigInt(util.toPointer(data.IncomingAuthenticationInformation)), true);
  // 0x10: pointer
  if (data?.IncomingPreviousAuthenticationInformation !== undefined) view.setBigUint64(16, data.IncomingPreviousAuthenticationInformation === null ? 0n : BigInt(util.toPointer(data.IncomingPreviousAuthenticationInformation)), true);
  // 0x18: u32
  if (data?.OutgoingAuthInfos !== undefined) view.setUint32(24, Number(data.OutgoingAuthInfos), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.OutgoingAuthenticationInformation !== undefined) view.setBigUint64(32, data.OutgoingAuthenticationInformation === null ? 0n : BigInt(util.toPointer(data.OutgoingAuthenticationInformation)), true);
  // 0x28: pointer
  if (data?.OutgoingPreviousAuthenticationInformation !== undefined) view.setBigUint64(40, data.OutgoingPreviousAuthenticationInformation === null ? 0n : BigInt(util.toPointer(data.OutgoingPreviousAuthenticationInformation)), true);
  return buf;
}

export class TRUSTED_DOMAIN_AUTH_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get IncomingAuthInfos(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get IncomingAuthenticationInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get IncomingPreviousAuthenticationInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get OutgoingAuthInfos(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get OutgoingAuthenticationInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get OutgoingPreviousAuthenticationInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set IncomingAuthInfos(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set IncomingAuthenticationInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set IncomingPreviousAuthenticationInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set OutgoingAuthInfos(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set OutgoingAuthenticationInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set OutgoingPreviousAuthenticationInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_FULL_INFORMATION (size: 24)
 */
export interface TRUSTED_DOMAIN_FULL_INFORMATION {
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_INFORMATION_EX */
  Information: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_POSIX_OFFSET_INFO */
  PosixOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_AUTH_INFORMATION */
  AuthInformation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRUSTED_DOMAIN_FULL_INFORMATION = 24;

export function allocTRUSTED_DOMAIN_FULL_INFORMATION(data?: Partial<TRUSTED_DOMAIN_FULL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_FULL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Information !== undefined) view.setBigUint64(0, data.Information === null ? 0n : BigInt(util.toPointer(data.Information)), true);
  // 0x08: pointer
  if (data?.PosixOffset !== undefined) view.setBigUint64(8, data.PosixOffset === null ? 0n : BigInt(util.toPointer(data.PosixOffset)), true);
  // 0x10: pointer
  if (data?.AuthInformation !== undefined) view.setBigUint64(16, data.AuthInformation === null ? 0n : BigInt(util.toPointer(data.AuthInformation)), true);
  return buf;
}

export class TRUSTED_DOMAIN_FULL_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Information(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PosixOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AuthInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Information(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PosixOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AuthInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_FULL_INFORMATION2 (size: 24)
 */
export interface TRUSTED_DOMAIN_FULL_INFORMATION2 {
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_INFORMATION_EX2 */
  Information: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_POSIX_OFFSET_INFO */
  PosixOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_AUTH_INFORMATION */
  AuthInformation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRUSTED_DOMAIN_FULL_INFORMATION2 = 24;

export function allocTRUSTED_DOMAIN_FULL_INFORMATION2(data?: Partial<TRUSTED_DOMAIN_FULL_INFORMATION2>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_FULL_INFORMATION2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Information !== undefined) view.setBigUint64(0, data.Information === null ? 0n : BigInt(util.toPointer(data.Information)), true);
  // 0x08: pointer
  if (data?.PosixOffset !== undefined) view.setBigUint64(8, data.PosixOffset === null ? 0n : BigInt(util.toPointer(data.PosixOffset)), true);
  // 0x10: pointer
  if (data?.AuthInformation !== undefined) view.setBigUint64(16, data.AuthInformation === null ? 0n : BigInt(util.toPointer(data.AuthInformation)), true);
  return buf;
}

export class TRUSTED_DOMAIN_FULL_INFORMATION2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Information(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PosixOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AuthInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Information(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PosixOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AuthInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES (size: 8)
 */
export interface TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES {
  /** u32 */
  SupportedEncryptionTypes: number;
}

export const sizeofTRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES = 8;

export function allocTRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES(data?: Partial<TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES>): Uint8Array {
  const buf = new Uint8Array(sizeofTRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SupportedEncryptionTypes !== undefined) view.setUint32(0, Number(data.SupportedEncryptionTypes), true);
  // 0x04: pad4
  return buf;
}

export class TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SupportedEncryptionTypes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set SupportedEncryptionTypes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_DOMAIN_INFO (size: 24)
 */
export interface LSA_FOREST_TRUST_DOMAIN_INFO {
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  NetbiosName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLSA_FOREST_TRUST_DOMAIN_INFO = 24;

export function allocLSA_FOREST_TRUST_DOMAIN_INFO(data?: Partial<LSA_FOREST_TRUST_DOMAIN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_FOREST_TRUST_DOMAIN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Sid !== undefined) view.setBigUint64(0, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  // 0x08: pointer
  if (data?.DnsName !== undefined) view.setBigUint64(8, data.DnsName === null ? 0n : BigInt(util.toPointer(data.DnsName)), true);
  // 0x10: pointer
  if (data?.NetbiosName !== undefined) view.setBigUint64(16, data.NetbiosName === null ? 0n : BigInt(util.toPointer(data.NetbiosName)), true);
  return buf;
}

export class LSA_FOREST_TRUST_DOMAIN_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Sid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DnsName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get NetbiosName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Sid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DnsName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set NetbiosName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_BINARY_DATA (size: 16)
 */
export interface LSA_FOREST_TRUST_BINARY_DATA {
  /** u32 */
  Length: number;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLSA_FOREST_TRUST_BINARY_DATA = 16;

export function allocLSA_FOREST_TRUST_BINARY_DATA(data?: Partial<LSA_FOREST_TRUST_BINARY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_FOREST_TRUST_BINARY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

export class LSA_FOREST_TRUST_BINARY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * _ForestTrustData_e__Union (size: 24)
 */
export interface _ForestTrustData_e__Union {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  TopLevelName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_DOMAIN_INFO */
  DomainInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_BINARY_DATA */
  Data: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_ForestTrustData_e__Union = 24;

export function alloc_ForestTrustData_e__Union(data?: Partial<_ForestTrustData_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_ForestTrustData_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TopLevelName !== undefined) view.setBigUint64(0, data.TopLevelName === null ? 0n : BigInt(util.toPointer(data.TopLevelName)), true);
  // 0x08: pointer
  if (data?.DomainInfo !== undefined) view.setBigUint64(8, data.DomainInfo === null ? 0n : BigInt(util.toPointer(data.DomainInfo)), true);
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class _ForestTrustData_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TopLevelName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DomainInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set TopLevelName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DomainInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_RECORD (size: 24)
 */
export interface LSA_FOREST_TRUST_RECORD {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_RECORD_TYPE */
  ForestTrustType: LSA_FOREST_TRUST_RECORD_TYPE;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Time: Uint8Array | Deno.PointerValue | null;
  /** _ForestTrustData_e__Union */
  ForestTrustData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLSA_FOREST_TRUST_RECORD = 24;

export function allocLSA_FOREST_TRUST_RECORD(data?: Partial<LSA_FOREST_TRUST_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_FOREST_TRUST_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: i32
  if (data?.ForestTrustType !== undefined) view.setInt32(4, Number(data.ForestTrustType), true);
  // 0x08: pointer
  if (data?.Time !== undefined) view.setBigUint64(8, data.Time === null ? 0n : BigInt(util.toPointer(data.Time)), true);
  // 0x10: pointer
  if (data?.ForestTrustData !== undefined) view.setBigUint64(16, data.ForestTrustData === null ? 0n : BigInt(util.toPointer(data.ForestTrustData)), true);
  return buf;
}

export class LSA_FOREST_TRUST_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ForestTrustType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get Time(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ForestTrustData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ForestTrustType(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set Time(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ForestTrustData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_INFORMATION (size: 16)
 */
export interface LSA_FOREST_TRUST_INFORMATION {
  /** u32 */
  RecordCount: number;
  /** ptr */
  Entries: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLSA_FOREST_TRUST_INFORMATION = 16;

export function allocLSA_FOREST_TRUST_INFORMATION(data?: Partial<LSA_FOREST_TRUST_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_FOREST_TRUST_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RecordCount !== undefined) view.setUint32(0, Number(data.RecordCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Entries !== undefined) view.setBigUint64(8, data.Entries === null ? 0n : BigInt(util.toPointer(data.Entries)), true);
  return buf;
}

export class LSA_FOREST_TRUST_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get RecordCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Entries(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set RecordCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Entries(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_COLLISION_RECORD (size: 24)
 */
export interface LSA_FOREST_TRUST_COLLISION_RECORD {
  /** u32 */
  Index: number;
  /** Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_COLLISION_RECORD_TYPE */
  Type: LSA_FOREST_TRUST_COLLISION_RECORD_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLSA_FOREST_TRUST_COLLISION_RECORD = 24;

export function allocLSA_FOREST_TRUST_COLLISION_RECORD(data?: Partial<LSA_FOREST_TRUST_COLLISION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_FOREST_TRUST_COLLISION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Index !== undefined) view.setUint32(0, Number(data.Index), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Name !== undefined) view.setBigUint64(16, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  return buf;
}

export class LSA_FOREST_TRUST_COLLISION_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Index(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Index(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Type(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_FOREST_TRUST_COLLISION_INFORMATION (size: 16)
 */
export interface LSA_FOREST_TRUST_COLLISION_INFORMATION {
  /** u32 */
  RecordCount: number;
  /** ptr */
  Entries: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLSA_FOREST_TRUST_COLLISION_INFORMATION = 16;

export function allocLSA_FOREST_TRUST_COLLISION_INFORMATION(data?: Partial<LSA_FOREST_TRUST_COLLISION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_FOREST_TRUST_COLLISION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RecordCount !== undefined) view.setUint32(0, Number(data.RecordCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Entries !== undefined) view.setBigUint64(8, data.Entries === null ? 0n : BigInt(util.toPointer(data.Entries)), true);
  return buf;
}

export class LSA_FOREST_TRUST_COLLISION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get RecordCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Entries(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set RecordCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Entries(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_ENUMERATION_INFORMATION (size: 8)
 */
export interface LSA_ENUMERATION_INFORMATION {
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLSA_ENUMERATION_INFORMATION = 8;

export function allocLSA_ENUMERATION_INFORMATION(data?: Partial<LSA_ENUMERATION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_ENUMERATION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Sid !== undefined) view.setBigUint64(0, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  return buf;
}

export class LSA_ENUMERATION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Sid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Sid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_LAST_INTER_LOGON_INFO (size: 24)
 */
export interface LSA_LAST_INTER_LOGON_INFO {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastSuccessfulLogon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastFailedLogon: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FailedAttemptCountSinceLastSuccessfulLogon: number;
}

export const sizeofLSA_LAST_INTER_LOGON_INFO = 24;

export function allocLSA_LAST_INTER_LOGON_INFO(data?: Partial<LSA_LAST_INTER_LOGON_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_LAST_INTER_LOGON_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LastSuccessfulLogon !== undefined) view.setBigUint64(0, data.LastSuccessfulLogon === null ? 0n : BigInt(util.toPointer(data.LastSuccessfulLogon)), true);
  // 0x08: pointer
  if (data?.LastFailedLogon !== undefined) view.setBigUint64(8, data.LastFailedLogon === null ? 0n : BigInt(util.toPointer(data.LastFailedLogon)), true);
  // 0x10: u32
  if (data?.FailedAttemptCountSinceLastSuccessfulLogon !== undefined) view.setUint32(16, Number(data.FailedAttemptCountSinceLastSuccessfulLogon), true);
  // 0x14: pad4
  return buf;
}

export class LSA_LAST_INTER_LOGON_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LastSuccessfulLogon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LastFailedLogon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get FailedAttemptCountSinceLastSuccessfulLogon(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set LastSuccessfulLogon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LastFailedLogon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set FailedAttemptCountSinceLastSuccessfulLogon(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECURITY_LOGON_SESSION_DATA (size: 176)
 */
export interface SECURITY_LOGON_SESSION_DATA {
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomain: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AuthenticationPackage: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LogonType: number;
  /** u32 */
  Session: number;
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogonTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsDomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Upn: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UserFlags: number;
  /** Windows.Win32.Security.Authentication.Identity.LSA_LAST_INTER_LOGON_INFO */
  LastLogonInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonScript: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ProfilePath: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectory: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectoryDrive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogoffTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KickOffTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordLastSet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordCanChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordMustChange: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECURITY_LOGON_SESSION_DATA = 176;

export function allocSECURITY_LOGON_SESSION_DATA(data?: Partial<SECURITY_LOGON_SESSION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_LOGON_SESSION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x18: pointer
  if (data?.LogonDomain !== undefined) view.setBigUint64(24, data.LogonDomain === null ? 0n : BigInt(util.toPointer(data.LogonDomain)), true);
  // 0x20: pointer
  if (data?.AuthenticationPackage !== undefined) view.setBigUint64(32, data.AuthenticationPackage === null ? 0n : BigInt(util.toPointer(data.AuthenticationPackage)), true);
  // 0x28: u32
  if (data?.LogonType !== undefined) view.setUint32(40, Number(data.LogonType), true);
  // 0x2c: u32
  if (data?.Session !== undefined) view.setUint32(44, Number(data.Session), true);
  // 0x30: pointer
  if (data?.Sid !== undefined) view.setBigUint64(48, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  // 0x38: pointer
  if (data?.LogonTime !== undefined) view.setBigUint64(56, data.LogonTime === null ? 0n : BigInt(util.toPointer(data.LogonTime)), true);
  // 0x40: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(64, data.LogonServer === null ? 0n : BigInt(util.toPointer(data.LogonServer)), true);
  // 0x48: pointer
  if (data?.DnsDomainName !== undefined) view.setBigUint64(72, data.DnsDomainName === null ? 0n : BigInt(util.toPointer(data.DnsDomainName)), true);
  // 0x50: pointer
  if (data?.Upn !== undefined) view.setBigUint64(80, data.Upn === null ? 0n : BigInt(util.toPointer(data.Upn)), true);
  // 0x58: u32
  if (data?.UserFlags !== undefined) view.setUint32(88, Number(data.UserFlags), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.LastLogonInfo !== undefined) view.setBigUint64(96, data.LastLogonInfo === null ? 0n : BigInt(util.toPointer(data.LastLogonInfo)), true);
  // 0x68: pointer
  if (data?.LogonScript !== undefined) view.setBigUint64(104, data.LogonScript === null ? 0n : BigInt(util.toPointer(data.LogonScript)), true);
  // 0x70: pointer
  if (data?.ProfilePath !== undefined) view.setBigUint64(112, data.ProfilePath === null ? 0n : BigInt(util.toPointer(data.ProfilePath)), true);
  // 0x78: pointer
  if (data?.HomeDirectory !== undefined) view.setBigUint64(120, data.HomeDirectory === null ? 0n : BigInt(util.toPointer(data.HomeDirectory)), true);
  // 0x80: pointer
  if (data?.HomeDirectoryDrive !== undefined) view.setBigUint64(128, data.HomeDirectoryDrive === null ? 0n : BigInt(util.toPointer(data.HomeDirectoryDrive)), true);
  // 0x88: pointer
  if (data?.LogoffTime !== undefined) view.setBigUint64(136, data.LogoffTime === null ? 0n : BigInt(util.toPointer(data.LogoffTime)), true);
  // 0x90: pointer
  if (data?.KickOffTime !== undefined) view.setBigUint64(144, data.KickOffTime === null ? 0n : BigInt(util.toPointer(data.KickOffTime)), true);
  // 0x98: pointer
  if (data?.PasswordLastSet !== undefined) view.setBigUint64(152, data.PasswordLastSet === null ? 0n : BigInt(util.toPointer(data.PasswordLastSet)), true);
  // 0xa0: pointer
  if (data?.PasswordCanChange !== undefined) view.setBigUint64(160, data.PasswordCanChange === null ? 0n : BigInt(util.toPointer(data.PasswordCanChange)), true);
  // 0xa8: pointer
  if (data?.PasswordMustChange !== undefined) view.setBigUint64(168, data.PasswordMustChange === null ? 0n : BigInt(util.toPointer(data.PasswordMustChange)), true);
  return buf;
}

export class SECURITY_LOGON_SESSION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get LogonDomain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get AuthenticationPackage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get LogonType(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Session(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get Sid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get LogonTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get DnsDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get Upn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get UserFlags(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get LastLogonInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get LogonScript(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get ProfilePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get HomeDirectory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get HomeDirectoryDrive(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: pointer
  get LogoffTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x90: pointer
  get KickOffTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: pointer
  get PasswordLastSet(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: pointer
  get PasswordCanChange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(160, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa8: pointer
  get PasswordMustChange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(168, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set LogonDomain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set AuthenticationPackage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set LogonType(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Session(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set Sid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set LogonTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set Upn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set UserFlags(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set LastLogonInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set LogonScript(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set ProfilePath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set HomeDirectory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set HomeDirectoryDrive(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }

  // 0x88: pointer
  set LogoffTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, BigInt(util.toPointer(value)), true);
  }

  // 0x90: pointer
  set KickOffTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, BigInt(util.toPointer(value)), true);
  }

  // 0x98: pointer
  set PasswordLastSet(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, BigInt(util.toPointer(value)), true);
  }

  // 0xa0: pointer
  set PasswordCanChange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(160, BigInt(util.toPointer(value)), true);
  }

  // 0xa8: pointer
  set PasswordMustChange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(168, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.CENTRAL_ACCESS_POLICY_ENTRY (size: 80)
 */
export interface CENTRAL_ACCESS_POLICY_ENTRY {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Description: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ChangeId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LengthAppliesTo: number;
  /** ptr */
  AppliesTo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LengthSD: number;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  SD: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LengthStagedSD: number;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  StagedSD: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofCENTRAL_ACCESS_POLICY_ENTRY = 80;

export function allocCENTRAL_ACCESS_POLICY_ENTRY(data?: Partial<CENTRAL_ACCESS_POLICY_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofCENTRAL_ACCESS_POLICY_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Name !== undefined) view.setBigUint64(0, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x08: pointer
  if (data?.Description !== undefined) view.setBigUint64(8, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x10: pointer
  if (data?.ChangeId !== undefined) view.setBigUint64(16, data.ChangeId === null ? 0n : BigInt(util.toPointer(data.ChangeId)), true);
  // 0x18: u32
  if (data?.LengthAppliesTo !== undefined) view.setUint32(24, Number(data.LengthAppliesTo), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.AppliesTo !== undefined) view.setBigUint64(32, data.AppliesTo === null ? 0n : BigInt(util.toPointer(data.AppliesTo)), true);
  // 0x28: u32
  if (data?.LengthSD !== undefined) view.setUint32(40, Number(data.LengthSD), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.SD !== undefined) view.setBigUint64(48, data.SD === null ? 0n : BigInt(util.toPointer(data.SD)), true);
  // 0x38: u32
  if (data?.LengthStagedSD !== undefined) view.setUint32(56, Number(data.LengthStagedSD), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.StagedSD !== undefined) view.setBigUint64(64, data.StagedSD === null ? 0n : BigInt(util.toPointer(data.StagedSD)), true);
  // 0x48: u32
  if (data?.Flags !== undefined) view.setUint32(72, Number(data.Flags), true);
  // 0x4c: pad4
  return buf;
}

export class CENTRAL_ACCESS_POLICY_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Description(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ChangeId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get LengthAppliesTo(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get AppliesTo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get LengthSD(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get SD(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get LengthStagedSD(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get StagedSD(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get Flags(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Description(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ChangeId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set LengthAppliesTo(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set AppliesTo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set LengthSD(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set SD(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set LengthStagedSD(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set StagedSD(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set Flags(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.CENTRAL_ACCESS_POLICY (size: 48)
 */
export interface CENTRAL_ACCESS_POLICY {
  /** Windows.Win32.Foundation.PSID */
  CAPID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Name: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Description: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ChangeId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u32 */
  CAPECount: number;
  /** ptr */
  CAPEs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCENTRAL_ACCESS_POLICY = 48;

export function allocCENTRAL_ACCESS_POLICY(data?: Partial<CENTRAL_ACCESS_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofCENTRAL_ACCESS_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CAPID !== undefined) view.setBigUint64(0, data.CAPID === null ? 0n : BigInt(util.toPointer(data.CAPID)), true);
  // 0x08: pointer
  if (data?.Name !== undefined) view.setBigUint64(8, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x10: pointer
  if (data?.Description !== undefined) view.setBigUint64(16, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x18: pointer
  if (data?.ChangeId !== undefined) view.setBigUint64(24, data.ChangeId === null ? 0n : BigInt(util.toPointer(data.ChangeId)), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u32
  if (data?.CAPECount !== undefined) view.setUint32(36, Number(data.CAPECount), true);
  // 0x28: pointer
  if (data?.CAPEs !== undefined) view.setBigUint64(40, data.CAPEs === null ? 0n : BigInt(util.toPointer(data.CAPEs)), true);
  return buf;
}

export class CENTRAL_ACCESS_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CAPID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Description(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ChangeId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CAPECount(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get CAPEs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set CAPID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Description(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ChangeId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CAPECount(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set CAPEs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NEGOTIATE_PACKAGE_PREFIX (size: 40)
 */
export interface NEGOTIATE_PACKAGE_PREFIX {
  /** usize */
  PackageId: Deno.PointerValue;
  /** ptr */
  PackageDataA: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  PackageDataW: Deno.PointerValue | Uint8Array | null;
  /** usize */
  PrefixLen: Deno.PointerValue;
  /** array */
  Prefix: Deno.PointerValue | null;
}

export const sizeofNEGOTIATE_PACKAGE_PREFIX = 40;

export function allocNEGOTIATE_PACKAGE_PREFIX(data?: Partial<NEGOTIATE_PACKAGE_PREFIX>): Uint8Array {
  const buf = new Uint8Array(sizeofNEGOTIATE_PACKAGE_PREFIX);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.PackageId !== undefined) view.setBigUint64(0, BigInt(data.PackageId), true);
  // 0x08: pointer
  if (data?.PackageDataA !== undefined) view.setBigUint64(8, data.PackageDataA === null ? 0n : BigInt(util.toPointer(data.PackageDataA)), true);
  // 0x10: pointer
  if (data?.PackageDataW !== undefined) view.setBigUint64(16, data.PackageDataW === null ? 0n : BigInt(util.toPointer(data.PackageDataW)), true);
  // 0x18: usize
  if (data?.PrefixLen !== undefined) view.setBigUint64(24, BigInt(data.PrefixLen), true);
  // 0x20: pointer
  if (data?.Prefix !== undefined) view.setBigUint64(32, data.Prefix === null ? 0n : BigInt(util.toPointer(data.Prefix)), true);
  return buf;
}

export class NEGOTIATE_PACKAGE_PREFIXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get PackageId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get PackageDataA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get PackageDataW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: usize
  get PrefixLen(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get Prefix(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: usize
  set PackageId(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set PackageDataA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set PackageDataW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: usize
  set PrefixLen(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set Prefix(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NEGOTIATE_PACKAGE_PREFIXES (size: 16)
 */
export interface NEGOTIATE_PACKAGE_PREFIXES {
  /** u32 */
  MessageType: number;
  /** u32 */
  PrefixCount: number;
  /** u32 */
  Offset: number;
  /** u32 */
  Pad: number;
}

export const sizeofNEGOTIATE_PACKAGE_PREFIXES = 16;

export function allocNEGOTIATE_PACKAGE_PREFIXES(data?: Partial<NEGOTIATE_PACKAGE_PREFIXES>): Uint8Array {
  const buf = new Uint8Array(sizeofNEGOTIATE_PACKAGE_PREFIXES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MessageType !== undefined) view.setUint32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.PrefixCount !== undefined) view.setUint32(4, Number(data.PrefixCount), true);
  // 0x08: u32
  if (data?.Offset !== undefined) view.setUint32(8, Number(data.Offset), true);
  // 0x0c: u32
  if (data?.Pad !== undefined) view.setUint32(12, Number(data.Pad), true);
  return buf;
}

export class NEGOTIATE_PACKAGE_PREFIXESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MessageType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get PrefixCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Offset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Pad(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MessageType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set PrefixCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Offset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Pad(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NEGOTIATE_CALLER_NAME_REQUEST (size: 16)
 */
export interface NEGOTIATE_CALLER_NAME_REQUEST {
  /** u32 */
  MessageType: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNEGOTIATE_CALLER_NAME_REQUEST = 16;

export function allocNEGOTIATE_CALLER_NAME_REQUEST(data?: Partial<NEGOTIATE_CALLER_NAME_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofNEGOTIATE_CALLER_NAME_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MessageType !== undefined) view.setUint32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  return buf;
}

export class NEGOTIATE_CALLER_NAME_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MessageType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set MessageType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NEGOTIATE_CALLER_NAME_RESPONSE (size: 16)
 */
export interface NEGOTIATE_CALLER_NAME_RESPONSE {
  /** u32 */
  MessageType: number;
  /** Windows.Win32.Foundation.PWSTR */
  CallerName: string | null | Uint8Array | Uint16Array;
}

export const sizeofNEGOTIATE_CALLER_NAME_RESPONSE = 16;

export function allocNEGOTIATE_CALLER_NAME_RESPONSE(data?: Partial<NEGOTIATE_CALLER_NAME_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofNEGOTIATE_CALLER_NAME_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MessageType !== undefined) view.setUint32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.CallerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.CallerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class NEGOTIATE_CALLER_NAME_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MessageType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get CallerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set MessageType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set CallerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.DOMAIN_PASSWORD_INFORMATION (size: 24)
 */
export interface DOMAIN_PASSWORD_INFORMATION {
  /** u16 */
  MinPasswordLength: number;
  /** u16 */
  PasswordHistoryLength: number;
  /** Windows.Win32.Security.Authentication.Identity.DOMAIN_PASSWORD_PROPERTIES */
  PasswordProperties: DOMAIN_PASSWORD_PROPERTIES;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MaxPasswordAge: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  MinPasswordAge: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDOMAIN_PASSWORD_INFORMATION = 24;

export function allocDOMAIN_PASSWORD_INFORMATION(data?: Partial<DOMAIN_PASSWORD_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDOMAIN_PASSWORD_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MinPasswordLength !== undefined) view.setUint16(0, Number(data.MinPasswordLength), true);
  // 0x02: u16
  if (data?.PasswordHistoryLength !== undefined) view.setUint16(2, Number(data.PasswordHistoryLength), true);
  // 0x04: u32
  if (data?.PasswordProperties !== undefined) view.setUint32(4, Number(data.PasswordProperties), true);
  // 0x08: pointer
  if (data?.MaxPasswordAge !== undefined) view.setBigUint64(8, data.MaxPasswordAge === null ? 0n : BigInt(util.toPointer(data.MaxPasswordAge)), true);
  // 0x10: pointer
  if (data?.MinPasswordAge !== undefined) view.setBigUint64(16, data.MinPasswordAge === null ? 0n : BigInt(util.toPointer(data.MinPasswordAge)), true);
  return buf;
}

export class DOMAIN_PASSWORD_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MinPasswordLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get PasswordHistoryLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get PasswordProperties(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get MaxPasswordAge(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get MinPasswordAge(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set MinPasswordLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set PasswordHistoryLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set PasswordProperties(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set MaxPasswordAge(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set MinPasswordAge(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_INTERACTIVE_LOGON (size: 32)
 */
export interface MSV1_0_INTERACTIVE_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_LOGON_SUBMIT_TYPE */
  MessageType: MSV1_0_LOGON_SUBMIT_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMSV1_0_INTERACTIVE_LOGON = 32;

export function allocMSV1_0_INTERACTIVE_LOGON(data?: Partial<MSV1_0_INTERACTIVE_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_INTERACTIVE_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(8, data.LogonDomainName === null ? 0n : BigInt(util.toPointer(data.LogonDomainName)), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x18: pointer
  if (data?.Password !== undefined) view.setBigUint64(24, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  return buf;
}

export class MSV1_0_INTERACTIVE_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_INTERACTIVE_PROFILE (size: 112)
 */
export interface MSV1_0_INTERACTIVE_PROFILE {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROFILE_BUFFER_TYPE */
  MessageType: MSV1_0_PROFILE_BUFFER_TYPE;
  /** u16 */
  LogonCount: number;
  /** u16 */
  BadPasswordCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogonTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogoffTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KickOffTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordLastSet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordCanChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordMustChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonScript: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectory: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  FullName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ProfilePath: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectoryDrive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UserFlags: number;
}

export const sizeofMSV1_0_INTERACTIVE_PROFILE = 112;

export function allocMSV1_0_INTERACTIVE_PROFILE(data?: Partial<MSV1_0_INTERACTIVE_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_INTERACTIVE_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u16
  if (data?.LogonCount !== undefined) view.setUint16(4, Number(data.LogonCount), true);
  // 0x06: u16
  if (data?.BadPasswordCount !== undefined) view.setUint16(6, Number(data.BadPasswordCount), true);
  // 0x08: pointer
  if (data?.LogonTime !== undefined) view.setBigUint64(8, data.LogonTime === null ? 0n : BigInt(util.toPointer(data.LogonTime)), true);
  // 0x10: pointer
  if (data?.LogoffTime !== undefined) view.setBigUint64(16, data.LogoffTime === null ? 0n : BigInt(util.toPointer(data.LogoffTime)), true);
  // 0x18: pointer
  if (data?.KickOffTime !== undefined) view.setBigUint64(24, data.KickOffTime === null ? 0n : BigInt(util.toPointer(data.KickOffTime)), true);
  // 0x20: pointer
  if (data?.PasswordLastSet !== undefined) view.setBigUint64(32, data.PasswordLastSet === null ? 0n : BigInt(util.toPointer(data.PasswordLastSet)), true);
  // 0x28: pointer
  if (data?.PasswordCanChange !== undefined) view.setBigUint64(40, data.PasswordCanChange === null ? 0n : BigInt(util.toPointer(data.PasswordCanChange)), true);
  // 0x30: pointer
  if (data?.PasswordMustChange !== undefined) view.setBigUint64(48, data.PasswordMustChange === null ? 0n : BigInt(util.toPointer(data.PasswordMustChange)), true);
  // 0x38: pointer
  if (data?.LogonScript !== undefined) view.setBigUint64(56, data.LogonScript === null ? 0n : BigInt(util.toPointer(data.LogonScript)), true);
  // 0x40: pointer
  if (data?.HomeDirectory !== undefined) view.setBigUint64(64, data.HomeDirectory === null ? 0n : BigInt(util.toPointer(data.HomeDirectory)), true);
  // 0x48: pointer
  if (data?.FullName !== undefined) view.setBigUint64(72, data.FullName === null ? 0n : BigInt(util.toPointer(data.FullName)), true);
  // 0x50: pointer
  if (data?.ProfilePath !== undefined) view.setBigUint64(80, data.ProfilePath === null ? 0n : BigInt(util.toPointer(data.ProfilePath)), true);
  // 0x58: pointer
  if (data?.HomeDirectoryDrive !== undefined) view.setBigUint64(88, data.HomeDirectoryDrive === null ? 0n : BigInt(util.toPointer(data.HomeDirectoryDrive)), true);
  // 0x60: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(96, data.LogonServer === null ? 0n : BigInt(util.toPointer(data.LogonServer)), true);
  // 0x68: u32
  if (data?.UserFlags !== undefined) view.setUint32(104, Number(data.UserFlags), true);
  // 0x6c: pad4
  return buf;
}

export class MSV1_0_INTERACTIVE_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get LogonCount(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get BadPasswordCount(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: pointer
  get LogonTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get LogoffTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get KickOffTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get PasswordLastSet(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get PasswordCanChange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get PasswordMustChange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get LogonScript(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get HomeDirectory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get FullName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get ProfilePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get HomeDirectoryDrive(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: u32
  get UserFlags(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set LogonCount(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set BadPasswordCount(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: pointer
  set LogonTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set LogoffTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set KickOffTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set PasswordLastSet(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set PasswordCanChange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set PasswordMustChange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set LogonScript(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set HomeDirectory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set FullName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set ProfilePath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set HomeDirectoryDrive(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: u32
  set UserFlags(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4
}

/**
 * Windows.Win32.System.Kernel.STRING (size: 16)
 */
export interface STRING {
  /** u16 */
  Length: number;
  /** u16 */
  MaximumLength: number;
  /** Windows.Win32.Foundation.PSTR */
  Buffer: string | null | Uint8Array;
}

export const sizeofSTRING = 16;

export function allocSTRING(data?: Partial<STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofSTRING);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Length !== undefined) view.setUint16(0, Number(data.Length), true);
  // 0x02: u16
  if (data?.MaximumLength !== undefined) view.setUint16(2, Number(data.MaximumLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MaximumLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MaximumLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_LM20_LOGON (size: 64)
 */
export interface MSV1_0_LM20_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_LOGON_SUBMIT_TYPE */
  MessageType: MSV1_0_LOGON_SUBMIT_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Workstation: Uint8Array | Deno.PointerValue | null;
  /** array */
  ChallengeToClient: Deno.PointerValue | null;
  /** Windows.Win32.System.Kernel.STRING */
  CaseSensitiveChallengeResponse: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Kernel.STRING */
  CaseInsensitiveChallengeResponse: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ParameterControl: number;
}

export const sizeofMSV1_0_LM20_LOGON = 64;

export function allocMSV1_0_LM20_LOGON(data?: Partial<MSV1_0_LM20_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_LM20_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(8, data.LogonDomainName === null ? 0n : BigInt(util.toPointer(data.LogonDomainName)), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x18: pointer
  if (data?.Workstation !== undefined) view.setBigUint64(24, data.Workstation === null ? 0n : BigInt(util.toPointer(data.Workstation)), true);
  // 0x20: pointer
  if (data?.ChallengeToClient !== undefined) view.setBigUint64(32, data.ChallengeToClient === null ? 0n : BigInt(util.toPointer(data.ChallengeToClient)), true);
  // 0x28: pointer
  if (data?.CaseSensitiveChallengeResponse !== undefined) view.setBigUint64(40, data.CaseSensitiveChallengeResponse === null ? 0n : BigInt(util.toPointer(data.CaseSensitiveChallengeResponse)), true);
  // 0x30: pointer
  if (data?.CaseInsensitiveChallengeResponse !== undefined) view.setBigUint64(48, data.CaseInsensitiveChallengeResponse === null ? 0n : BigInt(util.toPointer(data.CaseInsensitiveChallengeResponse)), true);
  // 0x38: u32
  if (data?.ParameterControl !== undefined) view.setUint32(56, Number(data.ParameterControl), true);
  // 0x3c: pad4
  return buf;
}

export class MSV1_0_LM20_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Workstation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ChallengeToClient(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get CaseSensitiveChallengeResponse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get CaseInsensitiveChallengeResponse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get ParameterControl(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Workstation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ChallengeToClient(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set CaseSensitiveChallengeResponse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set CaseInsensitiveChallengeResponse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set ParameterControl(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_SUBAUTH_LOGON (size: 64)
 */
export interface MSV1_0_SUBAUTH_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_LOGON_SUBMIT_TYPE */
  MessageType: MSV1_0_LOGON_SUBMIT_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Workstation: Uint8Array | Deno.PointerValue | null;
  /** array */
  ChallengeToClient: Deno.PointerValue | null;
  /** Windows.Win32.System.Kernel.STRING */
  AuthenticationInfo1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Kernel.STRING */
  AuthenticationInfo2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.MSV_SUBAUTH_LOGON_PARAMETER_CONTROL */
  ParameterControl: MSV_SUBAUTH_LOGON_PARAMETER_CONTROL;
  /** u32 */
  SubAuthPackageId: number;
}

export const sizeofMSV1_0_SUBAUTH_LOGON = 64;

export function allocMSV1_0_SUBAUTH_LOGON(data?: Partial<MSV1_0_SUBAUTH_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_SUBAUTH_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(8, data.LogonDomainName === null ? 0n : BigInt(util.toPointer(data.LogonDomainName)), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x18: pointer
  if (data?.Workstation !== undefined) view.setBigUint64(24, data.Workstation === null ? 0n : BigInt(util.toPointer(data.Workstation)), true);
  // 0x20: pointer
  if (data?.ChallengeToClient !== undefined) view.setBigUint64(32, data.ChallengeToClient === null ? 0n : BigInt(util.toPointer(data.ChallengeToClient)), true);
  // 0x28: pointer
  if (data?.AuthenticationInfo1 !== undefined) view.setBigUint64(40, data.AuthenticationInfo1 === null ? 0n : BigInt(util.toPointer(data.AuthenticationInfo1)), true);
  // 0x30: pointer
  if (data?.AuthenticationInfo2 !== undefined) view.setBigUint64(48, data.AuthenticationInfo2 === null ? 0n : BigInt(util.toPointer(data.AuthenticationInfo2)), true);
  // 0x38: u32
  if (data?.ParameterControl !== undefined) view.setUint32(56, Number(data.ParameterControl), true);
  // 0x3c: u32
  if (data?.SubAuthPackageId !== undefined) view.setUint32(60, Number(data.SubAuthPackageId), true);
  return buf;
}

export class MSV1_0_SUBAUTH_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Workstation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ChallengeToClient(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get AuthenticationInfo1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get AuthenticationInfo2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get ParameterControl(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get SubAuthPackageId(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Workstation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ChallengeToClient(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set AuthenticationInfo1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set AuthenticationInfo2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set ParameterControl(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set SubAuthPackageId(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_S4U_LOGON (size: 24)
 */
export interface MSV1_0_S4U_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_LOGON_SUBMIT_TYPE */
  MessageType: MSV1_0_LOGON_SUBMIT_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserPrincipalName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMSV1_0_S4U_LOGON = 24;

export function allocMSV1_0_S4U_LOGON(data?: Partial<MSV1_0_S4U_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_S4U_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.UserPrincipalName !== undefined) view.setBigUint64(8, data.UserPrincipalName === null ? 0n : BigInt(util.toPointer(data.UserPrincipalName)), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  return buf;
}

export class MSV1_0_S4U_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get UserPrincipalName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set UserPrincipalName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_LM20_LOGON_PROFILE (size: 72)
 */
export interface MSV1_0_LM20_LOGON_PROFILE {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROFILE_BUFFER_TYPE */
  MessageType: MSV1_0_PROFILE_BUFFER_TYPE;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KickOffTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogoffTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.MSV_SUB_AUTHENTICATION_FILTER */
  UserFlags: MSV_SUB_AUTHENTICATION_FILTER;
  /** array */
  UserSessionKey: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue | null;
  /** array */
  LanmanSessionKey: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserParameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMSV1_0_LM20_LOGON_PROFILE = 72;

export function allocMSV1_0_LM20_LOGON_PROFILE(data?: Partial<MSV1_0_LM20_LOGON_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_LM20_LOGON_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KickOffTime !== undefined) view.setBigUint64(8, data.KickOffTime === null ? 0n : BigInt(util.toPointer(data.KickOffTime)), true);
  // 0x10: pointer
  if (data?.LogoffTime !== undefined) view.setBigUint64(16, data.LogoffTime === null ? 0n : BigInt(util.toPointer(data.LogoffTime)), true);
  // 0x18: u32
  if (data?.UserFlags !== undefined) view.setUint32(24, Number(data.UserFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.UserSessionKey !== undefined) view.setBigUint64(32, data.UserSessionKey === null ? 0n : BigInt(util.toPointer(data.UserSessionKey)), true);
  // 0x28: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(40, data.LogonDomainName === null ? 0n : BigInt(util.toPointer(data.LogonDomainName)), true);
  // 0x30: pointer
  if (data?.LanmanSessionKey !== undefined) view.setBigUint64(48, data.LanmanSessionKey === null ? 0n : BigInt(util.toPointer(data.LanmanSessionKey)), true);
  // 0x38: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(56, data.LogonServer === null ? 0n : BigInt(util.toPointer(data.LogonServer)), true);
  // 0x40: pointer
  if (data?.UserParameters !== undefined) view.setBigUint64(64, data.UserParameters === null ? 0n : BigInt(util.toPointer(data.UserParameters)), true);
  return buf;
}

export class MSV1_0_LM20_LOGON_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KickOffTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get LogoffTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get UserFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get UserSessionKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get LanmanSessionKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get UserParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KickOffTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set LogoffTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set UserFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set UserSessionKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set LanmanSessionKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set UserParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_CREDENTIAL_KEY (size: 8)
 */
export interface MSV1_0_CREDENTIAL_KEY {
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofMSV1_0_CREDENTIAL_KEY = 8;

export function allocMSV1_0_CREDENTIAL_KEY(data?: Partial<MSV1_0_CREDENTIAL_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_CREDENTIAL_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Data !== undefined) view.setBigUint64(0, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class MSV1_0_CREDENTIAL_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_SUPPLEMENTAL_CREDENTIAL (size: 24)
 */
export interface MSV1_0_SUPPLEMENTAL_CREDENTIAL {
  /** u32 */
  Version: number;
  /** Windows.Win32.Security.Authentication.Identity.MSV_SUPPLEMENTAL_CREDENTIAL_FLAGS */
  Flags: MSV_SUPPLEMENTAL_CREDENTIAL_FLAGS;
  /** array */
  LmPassword: Deno.PointerValue | null;
  /** array */
  NtPassword: Deno.PointerValue | null;
}

export const sizeofMSV1_0_SUPPLEMENTAL_CREDENTIAL = 24;

export function allocMSV1_0_SUPPLEMENTAL_CREDENTIAL(data?: Partial<MSV1_0_SUPPLEMENTAL_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_SUPPLEMENTAL_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.LmPassword !== undefined) view.setBigUint64(8, data.LmPassword === null ? 0n : BigInt(util.toPointer(data.LmPassword)), true);
  // 0x10: pointer
  if (data?.NtPassword !== undefined) view.setBigUint64(16, data.NtPassword === null ? 0n : BigInt(util.toPointer(data.NtPassword)), true);
  return buf;
}

export class MSV1_0_SUPPLEMENTAL_CREDENTIALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get LmPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get NtPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set LmPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set NtPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2 (size: 24)
 */
export interface MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2 {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** array */
  NtPassword: Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_CREDENTIAL_KEY */
  CredentialKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMSV1_0_SUPPLEMENTAL_CREDENTIAL_V2 = 24;

export function allocMSV1_0_SUPPLEMENTAL_CREDENTIAL_V2(data?: Partial<MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_SUPPLEMENTAL_CREDENTIAL_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.NtPassword !== undefined) view.setBigUint64(8, data.NtPassword === null ? 0n : BigInt(util.toPointer(data.NtPassword)), true);
  // 0x10: pointer
  if (data?.CredentialKey !== undefined) view.setBigUint64(16, data.CredentialKey === null ? 0n : BigInt(util.toPointer(data.CredentialKey)), true);
  return buf;
}

export class MSV1_0_SUPPLEMENTAL_CREDENTIAL_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get NtPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CredentialKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set NtPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CredentialKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3 (size: 40)
 */
export interface MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3 {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_CREDENTIAL_KEY_TYPE */
  CredentialKeyType: MSV1_0_CREDENTIAL_KEY_TYPE;
  /** array */
  NtPassword: Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_CREDENTIAL_KEY */
  CredentialKey: Uint8Array | Deno.PointerValue | null;
  /** array */
  ShaPassword: Deno.PointerValue | null;
}

export const sizeofMSV1_0_SUPPLEMENTAL_CREDENTIAL_V3 = 40;

export function allocMSV1_0_SUPPLEMENTAL_CREDENTIAL_V3(data?: Partial<MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_SUPPLEMENTAL_CREDENTIAL_V3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: i32
  if (data?.CredentialKeyType !== undefined) view.setInt32(8, Number(data.CredentialKeyType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.NtPassword !== undefined) view.setBigUint64(16, data.NtPassword === null ? 0n : BigInt(util.toPointer(data.NtPassword)), true);
  // 0x18: pointer
  if (data?.CredentialKey !== undefined) view.setBigUint64(24, data.CredentialKey === null ? 0n : BigInt(util.toPointer(data.CredentialKey)), true);
  // 0x20: pointer
  if (data?.ShaPassword !== undefined) view.setBigUint64(32, data.ShaPassword === null ? 0n : BigInt(util.toPointer(data.ShaPassword)), true);
  return buf;
}

export class MSV1_0_SUPPLEMENTAL_CREDENTIAL_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get CredentialKeyType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get NtPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get CredentialKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ShaPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set CredentialKeyType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set NtPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set CredentialKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ShaPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL (size: 16)
 */
export interface MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL {
  /** u32 */
  Version: number;
  /** u32 */
  EncryptedCredsSize: number;
  /** array */
  EncryptedCreds: Deno.PointerValue | null;
}

export const sizeofMSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL = 16;

export function allocMSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL(data?: Partial<MSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_IUM_SUPPLEMENTAL_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.EncryptedCredsSize !== undefined) view.setUint32(4, Number(data.EncryptedCredsSize), true);
  // 0x08: pointer
  if (data?.EncryptedCreds !== undefined) view.setBigUint64(8, data.EncryptedCreds === null ? 0n : BigInt(util.toPointer(data.EncryptedCreds)), true);
  return buf;
}

export class MSV1_0_IUM_SUPPLEMENTAL_CREDENTIALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get EncryptedCredsSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get EncryptedCreds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set EncryptedCredsSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set EncryptedCreds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL (size: 32)
 */
export interface MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_CREDENTIAL_KEY */
  CredentialKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_CREDENTIAL_KEY_TYPE */
  CredentialKeyType: MSV1_0_CREDENTIAL_KEY_TYPE;
  /** u32 */
  EncryptedCredsSize: number;
  /** array */
  EncryptedCreds: Deno.PointerValue | null;
}

export const sizeofMSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL = 32;

export function allocMSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL(data?: Partial<MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.CredentialKey !== undefined) view.setBigUint64(8, data.CredentialKey === null ? 0n : BigInt(util.toPointer(data.CredentialKey)), true);
  // 0x10: i32
  if (data?.CredentialKeyType !== undefined) view.setInt32(16, Number(data.CredentialKeyType), true);
  // 0x14: u32
  if (data?.EncryptedCredsSize !== undefined) view.setUint32(20, Number(data.EncryptedCredsSize), true);
  // 0x18: pointer
  if (data?.EncryptedCreds !== undefined) view.setBigUint64(24, data.EncryptedCreds === null ? 0n : BigInt(util.toPointer(data.EncryptedCreds)), true);
  return buf;
}

export class MSV1_0_REMOTE_SUPPLEMENTAL_CREDENTIALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get CredentialKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get CredentialKeyType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get EncryptedCredsSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get EncryptedCreds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set CredentialKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set CredentialKeyType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set EncryptedCredsSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set EncryptedCreds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_NTLM3_RESPONSE (size: 48)
 */
export interface MSV1_0_NTLM3_RESPONSE {
  /** array */
  Response: Deno.PointerValue | null;
  /** u8 */
  RespType: number;
  /** u8 */
  HiRespType: number;
  /** u16 */
  Flags: number;
  /** u32 */
  MsgWord: number;
  /** u64 */
  TimeStamp: Deno.PointerValue;
  /** array */
  ChallengeFromClient: Deno.PointerValue | null;
  /** u32 */
  AvPairsOff: number;
  /** array */
  Buffer: Deno.PointerValue | null;
}

export const sizeofMSV1_0_NTLM3_RESPONSE = 48;

export function allocMSV1_0_NTLM3_RESPONSE(data?: Partial<MSV1_0_NTLM3_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_NTLM3_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Response !== undefined) view.setBigUint64(0, data.Response === null ? 0n : BigInt(util.toPointer(data.Response)), true);
  // 0x08: u8
  if (data?.RespType !== undefined) view.setUint8(8, Number(data.RespType));
  // 0x09: u8
  if (data?.HiRespType !== undefined) view.setUint8(9, Number(data.HiRespType));
  // 0x0a: u16
  if (data?.Flags !== undefined) view.setUint16(10, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.MsgWord !== undefined) view.setUint32(12, Number(data.MsgWord), true);
  // 0x10: u64
  if (data?.TimeStamp !== undefined) view.setBigUint64(16, BigInt(data.TimeStamp), true);
  // 0x18: pointer
  if (data?.ChallengeFromClient !== undefined) view.setBigUint64(24, data.ChallengeFromClient === null ? 0n : BigInt(util.toPointer(data.ChallengeFromClient)), true);
  // 0x20: u32
  if (data?.AvPairsOff !== undefined) view.setUint32(32, Number(data.AvPairsOff), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(40, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

export class MSV1_0_NTLM3_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Response(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u8
  get RespType(): number {
    return this.view.getUint8(8);
  }

  // 0x09: u8
  get HiRespType(): number {
    return this.view.getUint8(9);
  }

  // 0x0a: u16
  get Flags(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get MsgWord(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u64
  get TimeStamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get ChallengeFromClient(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get AvPairsOff(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Response(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u8
  set RespType(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: u8
  set HiRespType(value: number) {
    this.view.setUint8(9, value);
  }

  // 0x0a: u16
  set Flags(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set MsgWord(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u64
  set TimeStamp(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set ChallengeFromClient(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set AvPairsOff(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_AV_PAIR (size: 8)
 */
export interface MSV1_0_AV_PAIR {
  /** u16 */
  AvId: number;
  /** u16 */
  AvLen: number;
}

export const sizeofMSV1_0_AV_PAIR = 8;

export function allocMSV1_0_AV_PAIR(data?: Partial<MSV1_0_AV_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_AV_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AvId !== undefined) view.setUint16(0, Number(data.AvId), true);
  // 0x02: u16
  if (data?.AvLen !== undefined) view.setUint16(2, Number(data.AvLen), true);
  // 0x04: pad4
  return buf;
}

export class MSV1_0_AV_PAIRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AvId(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get AvLen(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set AvId(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set AvLen(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_CHANGEPASSWORD_REQUEST (size: 48)
 */
export interface MSV1_0_CHANGEPASSWORD_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROTOCOL_MESSAGE_TYPE */
  MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AccountName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  OldPassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  NewPassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Impersonating: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMSV1_0_CHANGEPASSWORD_REQUEST = 48;

export function allocMSV1_0_CHANGEPASSWORD_REQUEST(data?: Partial<MSV1_0_CHANGEPASSWORD_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_CHANGEPASSWORD_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x10: pointer
  if (data?.AccountName !== undefined) view.setBigUint64(16, data.AccountName === null ? 0n : BigInt(util.toPointer(data.AccountName)), true);
  // 0x18: pointer
  if (data?.OldPassword !== undefined) view.setBigUint64(24, data.OldPassword === null ? 0n : BigInt(util.toPointer(data.OldPassword)), true);
  // 0x20: pointer
  if (data?.NewPassword !== undefined) view.setBigUint64(32, data.NewPassword === null ? 0n : BigInt(util.toPointer(data.NewPassword)), true);
  // 0x28: pointer
  if (data?.Impersonating !== undefined) view.setBigUint64(40, data.Impersonating === null ? 0n : BigInt(util.toPointer(data.Impersonating)), true);
  return buf;
}

export class MSV1_0_CHANGEPASSWORD_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AccountName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get OldPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get NewPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Impersonating(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AccountName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set OldPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set NewPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Impersonating(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_CHANGEPASSWORD_RESPONSE (size: 24)
 */
export interface MSV1_0_CHANGEPASSWORD_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROTOCOL_MESSAGE_TYPE */
  MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.BOOLEAN */
  PasswordInfoValid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.DOMAIN_PASSWORD_INFORMATION */
  DomainPasswordInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMSV1_0_CHANGEPASSWORD_RESPONSE = 24;

export function allocMSV1_0_CHANGEPASSWORD_RESPONSE(data?: Partial<MSV1_0_CHANGEPASSWORD_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_CHANGEPASSWORD_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PasswordInfoValid !== undefined) view.setBigUint64(8, data.PasswordInfoValid === null ? 0n : BigInt(util.toPointer(data.PasswordInfoValid)), true);
  // 0x10: pointer
  if (data?.DomainPasswordInfo !== undefined) view.setBigUint64(16, data.DomainPasswordInfo === null ? 0n : BigInt(util.toPointer(data.DomainPasswordInfo)), true);
  return buf;
}

export class MSV1_0_CHANGEPASSWORD_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get PasswordInfoValid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DomainPasswordInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set PasswordInfoValid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DomainPasswordInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_PASSTHROUGH_REQUEST (size: 48)
 */
export interface MSV1_0_PASSTHROUGH_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROTOCOL_MESSAGE_TYPE */
  MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  PackageName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DataLength: number;
  /** ptr */
  LogonData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Pad: number;
}

export const sizeofMSV1_0_PASSTHROUGH_REQUEST = 48;

export function allocMSV1_0_PASSTHROUGH_REQUEST(data?: Partial<MSV1_0_PASSTHROUGH_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_PASSTHROUGH_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x10: pointer
  if (data?.PackageName !== undefined) view.setBigUint64(16, data.PackageName === null ? 0n : BigInt(util.toPointer(data.PackageName)), true);
  // 0x18: u32
  if (data?.DataLength !== undefined) view.setUint32(24, Number(data.DataLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.LogonData !== undefined) view.setBigUint64(32, data.LogonData === null ? 0n : BigInt(util.toPointer(data.LogonData)), true);
  // 0x28: u32
  if (data?.Pad !== undefined) view.setUint32(40, Number(data.Pad), true);
  // 0x2c: pad4
  return buf;
}

export class MSV1_0_PASSTHROUGH_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get PackageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get DataLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get LogonData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get Pad(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set PackageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set DataLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set LogonData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set Pad(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_PASSTHROUGH_RESPONSE (size: 24)
 */
export interface MSV1_0_PASSTHROUGH_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROTOCOL_MESSAGE_TYPE */
  MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Pad: number;
  /** u32 */
  DataLength: number;
  /** ptr */
  ValidationData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMSV1_0_PASSTHROUGH_RESPONSE = 24;

export function allocMSV1_0_PASSTHROUGH_RESPONSE(data?: Partial<MSV1_0_PASSTHROUGH_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_PASSTHROUGH_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Pad !== undefined) view.setUint32(4, Number(data.Pad), true);
  // 0x08: u32
  if (data?.DataLength !== undefined) view.setUint32(8, Number(data.DataLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ValidationData !== undefined) view.setBigUint64(16, data.ValidationData === null ? 0n : BigInt(util.toPointer(data.ValidationData)), true);
  return buf;
}

export class MSV1_0_PASSTHROUGH_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Pad(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get DataLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ValidationData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Pad(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set DataLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ValidationData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_SUBAUTH_REQUEST (size: 24)
 */
export interface MSV1_0_SUBAUTH_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROTOCOL_MESSAGE_TYPE */
  MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  SubAuthPackageId: number;
  /** u32 */
  SubAuthInfoLength: number;
  /** ptr */
  SubAuthSubmitBuffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMSV1_0_SUBAUTH_REQUEST = 24;

export function allocMSV1_0_SUBAUTH_REQUEST(data?: Partial<MSV1_0_SUBAUTH_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_SUBAUTH_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.SubAuthPackageId !== undefined) view.setUint32(4, Number(data.SubAuthPackageId), true);
  // 0x08: u32
  if (data?.SubAuthInfoLength !== undefined) view.setUint32(8, Number(data.SubAuthInfoLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SubAuthSubmitBuffer !== undefined) view.setBigUint64(16, data.SubAuthSubmitBuffer === null ? 0n : BigInt(util.toPointer(data.SubAuthSubmitBuffer)), true);
  return buf;
}

export class MSV1_0_SUBAUTH_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get SubAuthPackageId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SubAuthInfoLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get SubAuthSubmitBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set SubAuthPackageId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SubAuthInfoLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set SubAuthSubmitBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_SUBAUTH_RESPONSE (size: 16)
 */
export interface MSV1_0_SUBAUTH_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.MSV1_0_PROTOCOL_MESSAGE_TYPE */
  MessageType: MSV1_0_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  SubAuthInfoLength: number;
  /** ptr */
  SubAuthReturnBuffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMSV1_0_SUBAUTH_RESPONSE = 16;

export function allocMSV1_0_SUBAUTH_RESPONSE(data?: Partial<MSV1_0_SUBAUTH_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_SUBAUTH_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.SubAuthInfoLength !== undefined) view.setUint32(4, Number(data.SubAuthInfoLength), true);
  // 0x08: pointer
  if (data?.SubAuthReturnBuffer !== undefined) view.setBigUint64(8, data.SubAuthReturnBuffer === null ? 0n : BigInt(util.toPointer(data.SubAuthReturnBuffer)), true);
  return buf;
}

export class MSV1_0_SUBAUTH_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get SubAuthInfoLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get SubAuthReturnBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set SubAuthInfoLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set SubAuthReturnBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_INTERACTIVE_LOGON (size: 32)
 */
export interface KERB_INTERACTIVE_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_LOGON_SUBMIT_TYPE */
  MessageType: KERB_LOGON_SUBMIT_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_INTERACTIVE_LOGON = 32;

export function allocKERB_INTERACTIVE_LOGON(data?: Partial<KERB_INTERACTIVE_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_INTERACTIVE_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(8, data.LogonDomainName === null ? 0n : BigInt(util.toPointer(data.LogonDomainName)), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x18: pointer
  if (data?.Password !== undefined) view.setBigUint64(24, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  return buf;
}

export class KERB_INTERACTIVE_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_INTERACTIVE_UNLOCK_LOGON (size: 16)
 */
export interface KERB_INTERACTIVE_UNLOCK_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_INTERACTIVE_LOGON */
  Logon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_INTERACTIVE_UNLOCK_LOGON = 16;

export function allocKERB_INTERACTIVE_UNLOCK_LOGON(data?: Partial<KERB_INTERACTIVE_UNLOCK_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_INTERACTIVE_UNLOCK_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Logon !== undefined) view.setBigUint64(0, data.Logon === null ? 0n : BigInt(util.toPointer(data.Logon)), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  return buf;
}

export class KERB_INTERACTIVE_UNLOCK_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Logon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Logon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_SMART_CARD_LOGON (size: 32)
 */
export interface KERB_SMART_CARD_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_LOGON_SUBMIT_TYPE */
  MessageType: KERB_LOGON_SUBMIT_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Pin: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CspDataLength: number;
  /** ptr */
  CspData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_SMART_CARD_LOGON = 32;

export function allocKERB_SMART_CARD_LOGON(data?: Partial<KERB_SMART_CARD_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_SMART_CARD_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Pin !== undefined) view.setBigUint64(8, data.Pin === null ? 0n : BigInt(util.toPointer(data.Pin)), true);
  // 0x10: u32
  if (data?.CspDataLength !== undefined) view.setUint32(16, Number(data.CspDataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.CspData !== undefined) view.setBigUint64(24, data.CspData === null ? 0n : BigInt(util.toPointer(data.CspData)), true);
  return buf;
}

export class KERB_SMART_CARD_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Pin(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get CspDataLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get CspData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Pin(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set CspDataLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set CspData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_SMART_CARD_UNLOCK_LOGON (size: 16)
 */
export interface KERB_SMART_CARD_UNLOCK_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_SMART_CARD_LOGON */
  Logon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_SMART_CARD_UNLOCK_LOGON = 16;

export function allocKERB_SMART_CARD_UNLOCK_LOGON(data?: Partial<KERB_SMART_CARD_UNLOCK_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_SMART_CARD_UNLOCK_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Logon !== undefined) view.setBigUint64(0, data.Logon === null ? 0n : BigInt(util.toPointer(data.Logon)), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  return buf;
}

export class KERB_SMART_CARD_UNLOCK_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Logon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Logon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CERTIFICATE_LOGON (size: 48)
 */
export interface KERB_CERTIFICATE_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_LOGON_SUBMIT_TYPE */
  MessageType: KERB_LOGON_SUBMIT_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Pin: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u32 */
  CspDataLength: number;
  /** ptr */
  CspData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_CERTIFICATE_LOGON = 48;

export function allocKERB_CERTIFICATE_LOGON(data?: Partial<KERB_CERTIFICATE_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CERTIFICATE_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x10: pointer
  if (data?.UserName !== undefined) view.setBigUint64(16, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x18: pointer
  if (data?.Pin !== undefined) view.setBigUint64(24, data.Pin === null ? 0n : BigInt(util.toPointer(data.Pin)), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u32
  if (data?.CspDataLength !== undefined) view.setUint32(36, Number(data.CspDataLength), true);
  // 0x28: pointer
  if (data?.CspData !== undefined) view.setBigUint64(40, data.CspData === null ? 0n : BigInt(util.toPointer(data.CspData)), true);
  return buf;
}

export class KERB_CERTIFICATE_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Pin(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CspDataLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get CspData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Pin(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CspDataLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set CspData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CERTIFICATE_UNLOCK_LOGON (size: 16)
 */
export interface KERB_CERTIFICATE_UNLOCK_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_CERTIFICATE_LOGON */
  Logon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_CERTIFICATE_UNLOCK_LOGON = 16;

export function allocKERB_CERTIFICATE_UNLOCK_LOGON(data?: Partial<KERB_CERTIFICATE_UNLOCK_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CERTIFICATE_UNLOCK_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Logon !== undefined) view.setBigUint64(0, data.Logon === null ? 0n : BigInt(util.toPointer(data.Logon)), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  return buf;
}

export class KERB_CERTIFICATE_UNLOCK_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Logon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Logon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CERTIFICATE_S4U_LOGON (size: 40)
 */
export interface KERB_CERTIFICATE_S4U_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_LOGON_SUBMIT_TYPE */
  MessageType: KERB_LOGON_SUBMIT_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserPrincipalName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CertificateLength: number;
  /** ptr */
  Certificate: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_CERTIFICATE_S4U_LOGON = 40;

export function allocKERB_CERTIFICATE_S4U_LOGON(data?: Partial<KERB_CERTIFICATE_S4U_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CERTIFICATE_S4U_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.UserPrincipalName !== undefined) view.setBigUint64(8, data.UserPrincipalName === null ? 0n : BigInt(util.toPointer(data.UserPrincipalName)), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x18: u32
  if (data?.CertificateLength !== undefined) view.setUint32(24, Number(data.CertificateLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Certificate !== undefined) view.setBigUint64(32, data.Certificate === null ? 0n : BigInt(util.toPointer(data.Certificate)), true);
  return buf;
}

export class KERB_CERTIFICATE_S4U_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get UserPrincipalName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get CertificateLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Certificate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set UserPrincipalName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set CertificateLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Certificate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_LOGON (size: 32)
 */
export interface KERB_TICKET_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_LOGON_SUBMIT_TYPE */
  MessageType: KERB_LOGON_SUBMIT_TYPE;
  /** u32 */
  Flags: number;
  /** u32 */
  ServiceTicketLength: number;
  /** u32 */
  TicketGrantingTicketLength: number;
  /** ptr */
  ServiceTicket: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TicketGrantingTicket: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_TICKET_LOGON = 32;

export function allocKERB_TICKET_LOGON(data?: Partial<KERB_TICKET_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ServiceTicketLength !== undefined) view.setUint32(8, Number(data.ServiceTicketLength), true);
  // 0x0c: u32
  if (data?.TicketGrantingTicketLength !== undefined) view.setUint32(12, Number(data.TicketGrantingTicketLength), true);
  // 0x10: pointer
  if (data?.ServiceTicket !== undefined) view.setBigUint64(16, data.ServiceTicket === null ? 0n : BigInt(util.toPointer(data.ServiceTicket)), true);
  // 0x18: pointer
  if (data?.TicketGrantingTicket !== undefined) view.setBigUint64(24, data.TicketGrantingTicket === null ? 0n : BigInt(util.toPointer(data.TicketGrantingTicket)), true);
  return buf;
}

export class KERB_TICKET_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ServiceTicketLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get TicketGrantingTicketLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ServiceTicket(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get TicketGrantingTicket(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ServiceTicketLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set TicketGrantingTicketLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ServiceTicket(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set TicketGrantingTicket(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_UNLOCK_LOGON (size: 16)
 */
export interface KERB_TICKET_UNLOCK_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_TICKET_LOGON */
  Logon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_TICKET_UNLOCK_LOGON = 16;

export function allocKERB_TICKET_UNLOCK_LOGON(data?: Partial<KERB_TICKET_UNLOCK_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_UNLOCK_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Logon !== undefined) view.setBigUint64(0, data.Logon === null ? 0n : BigInt(util.toPointer(data.Logon)), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  return buf;
}

export class KERB_TICKET_UNLOCK_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Logon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Logon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_S4U_LOGON (size: 24)
 */
export interface KERB_S4U_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.KERB_LOGON_SUBMIT_TYPE */
  MessageType: KERB_LOGON_SUBMIT_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientUpn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientRealm: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_S4U_LOGON = 24;

export function allocKERB_S4U_LOGON(data?: Partial<KERB_S4U_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_S4U_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.ClientUpn !== undefined) view.setBigUint64(8, data.ClientUpn === null ? 0n : BigInt(util.toPointer(data.ClientUpn)), true);
  // 0x10: pointer
  if (data?.ClientRealm !== undefined) view.setBigUint64(16, data.ClientRealm === null ? 0n : BigInt(util.toPointer(data.ClientRealm)), true);
  return buf;
}

export class KERB_S4U_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ClientUpn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ClientRealm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ClientUpn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ClientRealm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_INTERACTIVE_PROFILE (size: 112)
 */
export interface KERB_INTERACTIVE_PROFILE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROFILE_BUFFER_TYPE */
  MessageType: KERB_PROFILE_BUFFER_TYPE;
  /** u16 */
  LogonCount: number;
  /** u16 */
  BadPasswordCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogonTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogoffTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KickOffTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordLastSet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordCanChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordMustChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonScript: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectory: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  FullName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ProfilePath: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectoryDrive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UserFlags: number;
}

export const sizeofKERB_INTERACTIVE_PROFILE = 112;

export function allocKERB_INTERACTIVE_PROFILE(data?: Partial<KERB_INTERACTIVE_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_INTERACTIVE_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u16
  if (data?.LogonCount !== undefined) view.setUint16(4, Number(data.LogonCount), true);
  // 0x06: u16
  if (data?.BadPasswordCount !== undefined) view.setUint16(6, Number(data.BadPasswordCount), true);
  // 0x08: pointer
  if (data?.LogonTime !== undefined) view.setBigUint64(8, data.LogonTime === null ? 0n : BigInt(util.toPointer(data.LogonTime)), true);
  // 0x10: pointer
  if (data?.LogoffTime !== undefined) view.setBigUint64(16, data.LogoffTime === null ? 0n : BigInt(util.toPointer(data.LogoffTime)), true);
  // 0x18: pointer
  if (data?.KickOffTime !== undefined) view.setBigUint64(24, data.KickOffTime === null ? 0n : BigInt(util.toPointer(data.KickOffTime)), true);
  // 0x20: pointer
  if (data?.PasswordLastSet !== undefined) view.setBigUint64(32, data.PasswordLastSet === null ? 0n : BigInt(util.toPointer(data.PasswordLastSet)), true);
  // 0x28: pointer
  if (data?.PasswordCanChange !== undefined) view.setBigUint64(40, data.PasswordCanChange === null ? 0n : BigInt(util.toPointer(data.PasswordCanChange)), true);
  // 0x30: pointer
  if (data?.PasswordMustChange !== undefined) view.setBigUint64(48, data.PasswordMustChange === null ? 0n : BigInt(util.toPointer(data.PasswordMustChange)), true);
  // 0x38: pointer
  if (data?.LogonScript !== undefined) view.setBigUint64(56, data.LogonScript === null ? 0n : BigInt(util.toPointer(data.LogonScript)), true);
  // 0x40: pointer
  if (data?.HomeDirectory !== undefined) view.setBigUint64(64, data.HomeDirectory === null ? 0n : BigInt(util.toPointer(data.HomeDirectory)), true);
  // 0x48: pointer
  if (data?.FullName !== undefined) view.setBigUint64(72, data.FullName === null ? 0n : BigInt(util.toPointer(data.FullName)), true);
  // 0x50: pointer
  if (data?.ProfilePath !== undefined) view.setBigUint64(80, data.ProfilePath === null ? 0n : BigInt(util.toPointer(data.ProfilePath)), true);
  // 0x58: pointer
  if (data?.HomeDirectoryDrive !== undefined) view.setBigUint64(88, data.HomeDirectoryDrive === null ? 0n : BigInt(util.toPointer(data.HomeDirectoryDrive)), true);
  // 0x60: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(96, data.LogonServer === null ? 0n : BigInt(util.toPointer(data.LogonServer)), true);
  // 0x68: u32
  if (data?.UserFlags !== undefined) view.setUint32(104, Number(data.UserFlags), true);
  // 0x6c: pad4
  return buf;
}

export class KERB_INTERACTIVE_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get LogonCount(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get BadPasswordCount(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: pointer
  get LogonTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get LogoffTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get KickOffTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get PasswordLastSet(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get PasswordCanChange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get PasswordMustChange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get LogonScript(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get HomeDirectory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get FullName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get ProfilePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get HomeDirectoryDrive(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: u32
  get UserFlags(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set LogonCount(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set BadPasswordCount(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: pointer
  set LogonTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set LogoffTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set KickOffTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set PasswordLastSet(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set PasswordCanChange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set PasswordMustChange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set LogonScript(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set HomeDirectory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set FullName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set ProfilePath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set HomeDirectoryDrive(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: u32
  set UserFlags(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_SMART_CARD_PROFILE (size: 24)
 */
export interface KERB_SMART_CARD_PROFILE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_INTERACTIVE_PROFILE */
  Profile: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CertificateSize: number;
  /** ptr */
  CertificateData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_SMART_CARD_PROFILE = 24;

export function allocKERB_SMART_CARD_PROFILE(data?: Partial<KERB_SMART_CARD_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_SMART_CARD_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Profile !== undefined) view.setBigUint64(0, data.Profile === null ? 0n : BigInt(util.toPointer(data.Profile)), true);
  // 0x08: u32
  if (data?.CertificateSize !== undefined) view.setUint32(8, Number(data.CertificateSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.CertificateData !== undefined) view.setBigUint64(16, data.CertificateData === null ? 0n : BigInt(util.toPointer(data.CertificateData)), true);
  return buf;
}

export class KERB_SMART_CARD_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Profile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get CertificateSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get CertificateData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Profile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set CertificateSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set CertificateData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY (size: 16)
 */
export interface KERB_CRYPTO_KEY {
  /** Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY_TYPE */
  KeyType: KERB_CRYPTO_KEY_TYPE;
  /** u32 */
  Length: number;
  /** ptr */
  Value: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_CRYPTO_KEY = 16;

export function allocKERB_CRYPTO_KEY(data?: Partial<KERB_CRYPTO_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CRYPTO_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.KeyType !== undefined) view.setInt32(0, Number(data.KeyType), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class KERB_CRYPTO_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get KeyType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set KeyType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY32 (size: 16)
 */
export interface KERB_CRYPTO_KEY32 {
  /** i32 */
  KeyType: number;
  /** u32 */
  Length: number;
  /** u32 */
  Offset: number;
}

export const sizeofKERB_CRYPTO_KEY32 = 16;

export function allocKERB_CRYPTO_KEY32(data?: Partial<KERB_CRYPTO_KEY32>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CRYPTO_KEY32);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.KeyType !== undefined) view.setInt32(0, Number(data.KeyType), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.Offset !== undefined) view.setUint32(8, Number(data.Offset), true);
  // 0x0c: pad4
  return buf;
}

export class KERB_CRYPTO_KEY32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get KeyType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Offset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set KeyType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Offset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_PROFILE (size: 16)
 */
export interface KERB_TICKET_PROFILE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_INTERACTIVE_PROFILE */
  Profile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY */
  SessionKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_TICKET_PROFILE = 16;

export function allocKERB_TICKET_PROFILE(data?: Partial<KERB_TICKET_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Profile !== undefined) view.setBigUint64(0, data.Profile === null ? 0n : BigInt(util.toPointer(data.Profile)), true);
  // 0x08: pointer
  if (data?.SessionKey !== undefined) view.setBigUint64(8, data.SessionKey === null ? 0n : BigInt(util.toPointer(data.SessionKey)), true);
  return buf;
}

export class KERB_TICKET_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Profile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SessionKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Profile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SessionKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_TKT_CACHE_REQUEST (size: 16)
 */
export interface KERB_QUERY_TKT_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_QUERY_TKT_CACHE_REQUEST = 16;

export function allocKERB_QUERY_TKT_CACHE_REQUEST(data?: Partial<KERB_QUERY_TKT_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_TKT_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  return buf;
}

export class KERB_QUERY_TKT_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_CACHE_INFO (size: 48)
 */
export interface KERB_TICKET_CACHE_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  RealmName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RenewTime: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  EncryptionType: number;
  /** Windows.Win32.Security.Authentication.Identity.KERB_TICKET_FLAGS */
  TicketFlags: KERB_TICKET_FLAGS;
}

export const sizeofKERB_TICKET_CACHE_INFO = 48;

export function allocKERB_TICKET_CACHE_INFO(data?: Partial<KERB_TICKET_CACHE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_CACHE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(0, data.ServerName === null ? 0n : BigInt(util.toPointer(data.ServerName)), true);
  // 0x08: pointer
  if (data?.RealmName !== undefined) view.setBigUint64(8, data.RealmName === null ? 0n : BigInt(util.toPointer(data.RealmName)), true);
  // 0x10: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(16, data.StartTime === null ? 0n : BigInt(util.toPointer(data.StartTime)), true);
  // 0x18: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(24, data.EndTime === null ? 0n : BigInt(util.toPointer(data.EndTime)), true);
  // 0x20: pointer
  if (data?.RenewTime !== undefined) view.setBigUint64(32, data.RenewTime === null ? 0n : BigInt(util.toPointer(data.RenewTime)), true);
  // 0x28: i32
  if (data?.EncryptionType !== undefined) view.setInt32(40, Number(data.EncryptionType), true);
  // 0x2c: u32
  if (data?.TicketFlags !== undefined) view.setUint32(44, Number(data.TicketFlags), true);
  return buf;
}

export class KERB_TICKET_CACHE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get RealmName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get StartTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get EndTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get RenewTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: i32
  get EncryptionType(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get TicketFlags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set ServerName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set RealmName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set StartTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set EndTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set RenewTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: i32
  set EncryptionType(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set TicketFlags(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_CACHE_INFO_EX (size: 64)
 */
export interface KERB_TICKET_CACHE_INFO_EX {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientRealm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerRealm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RenewTime: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  EncryptionType: number;
  /** u32 */
  TicketFlags: number;
}

export const sizeofKERB_TICKET_CACHE_INFO_EX = 64;

export function allocKERB_TICKET_CACHE_INFO_EX(data?: Partial<KERB_TICKET_CACHE_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_CACHE_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(0, data.ClientName === null ? 0n : BigInt(util.toPointer(data.ClientName)), true);
  // 0x08: pointer
  if (data?.ClientRealm !== undefined) view.setBigUint64(8, data.ClientRealm === null ? 0n : BigInt(util.toPointer(data.ClientRealm)), true);
  // 0x10: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(16, data.ServerName === null ? 0n : BigInt(util.toPointer(data.ServerName)), true);
  // 0x18: pointer
  if (data?.ServerRealm !== undefined) view.setBigUint64(24, data.ServerRealm === null ? 0n : BigInt(util.toPointer(data.ServerRealm)), true);
  // 0x20: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(32, data.StartTime === null ? 0n : BigInt(util.toPointer(data.StartTime)), true);
  // 0x28: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(40, data.EndTime === null ? 0n : BigInt(util.toPointer(data.EndTime)), true);
  // 0x30: pointer
  if (data?.RenewTime !== undefined) view.setBigUint64(48, data.RenewTime === null ? 0n : BigInt(util.toPointer(data.RenewTime)), true);
  // 0x38: i32
  if (data?.EncryptionType !== undefined) view.setInt32(56, Number(data.EncryptionType), true);
  // 0x3c: u32
  if (data?.TicketFlags !== undefined) view.setUint32(60, Number(data.TicketFlags), true);
  return buf;
}

export class KERB_TICKET_CACHE_INFO_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClientName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ClientRealm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ServerRealm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get StartTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get EndTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get RenewTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: i32
  get EncryptionType(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get TicketFlags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x00: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ClientRealm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ServerName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ServerRealm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set StartTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set EndTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set RenewTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: i32
  set EncryptionType(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set TicketFlags(value: number) {
    this.view.setUint32(60, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_CACHE_INFO_EX2 (size: 72)
 */
export interface KERB_TICKET_CACHE_INFO_EX2 {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientRealm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerRealm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RenewTime: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  EncryptionType: number;
  /** u32 */
  TicketFlags: number;
  /** u32 */
  SessionKeyType: number;
  /** u32 */
  BranchId: number;
}

export const sizeofKERB_TICKET_CACHE_INFO_EX2 = 72;

export function allocKERB_TICKET_CACHE_INFO_EX2(data?: Partial<KERB_TICKET_CACHE_INFO_EX2>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_CACHE_INFO_EX2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(0, data.ClientName === null ? 0n : BigInt(util.toPointer(data.ClientName)), true);
  // 0x08: pointer
  if (data?.ClientRealm !== undefined) view.setBigUint64(8, data.ClientRealm === null ? 0n : BigInt(util.toPointer(data.ClientRealm)), true);
  // 0x10: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(16, data.ServerName === null ? 0n : BigInt(util.toPointer(data.ServerName)), true);
  // 0x18: pointer
  if (data?.ServerRealm !== undefined) view.setBigUint64(24, data.ServerRealm === null ? 0n : BigInt(util.toPointer(data.ServerRealm)), true);
  // 0x20: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(32, data.StartTime === null ? 0n : BigInt(util.toPointer(data.StartTime)), true);
  // 0x28: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(40, data.EndTime === null ? 0n : BigInt(util.toPointer(data.EndTime)), true);
  // 0x30: pointer
  if (data?.RenewTime !== undefined) view.setBigUint64(48, data.RenewTime === null ? 0n : BigInt(util.toPointer(data.RenewTime)), true);
  // 0x38: i32
  if (data?.EncryptionType !== undefined) view.setInt32(56, Number(data.EncryptionType), true);
  // 0x3c: u32
  if (data?.TicketFlags !== undefined) view.setUint32(60, Number(data.TicketFlags), true);
  // 0x40: u32
  if (data?.SessionKeyType !== undefined) view.setUint32(64, Number(data.SessionKeyType), true);
  // 0x44: u32
  if (data?.BranchId !== undefined) view.setUint32(68, Number(data.BranchId), true);
  return buf;
}

export class KERB_TICKET_CACHE_INFO_EX2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClientName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ClientRealm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ServerRealm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get StartTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get EndTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get RenewTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: i32
  get EncryptionType(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get TicketFlags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get SessionKeyType(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get BranchId(): number {
    return this.view.getUint32(68, true);
  }

  // 0x00: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ClientRealm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ServerName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ServerRealm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set StartTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set EndTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set RenewTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: i32
  set EncryptionType(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set TicketFlags(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set SessionKeyType(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set BranchId(value: number) {
    this.view.setUint32(68, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TICKET_CACHE_INFO_EX3 (size: 88)
 */
export interface KERB_TICKET_CACHE_INFO_EX3 {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientRealm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerRealm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RenewTime: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  EncryptionType: number;
  /** u32 */
  TicketFlags: number;
  /** u32 */
  SessionKeyType: number;
  /** u32 */
  BranchId: number;
  /** u32 */
  CacheFlags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  KdcCalled: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_TICKET_CACHE_INFO_EX3 = 88;

export function allocKERB_TICKET_CACHE_INFO_EX3(data?: Partial<KERB_TICKET_CACHE_INFO_EX3>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TICKET_CACHE_INFO_EX3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(0, data.ClientName === null ? 0n : BigInt(util.toPointer(data.ClientName)), true);
  // 0x08: pointer
  if (data?.ClientRealm !== undefined) view.setBigUint64(8, data.ClientRealm === null ? 0n : BigInt(util.toPointer(data.ClientRealm)), true);
  // 0x10: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(16, data.ServerName === null ? 0n : BigInt(util.toPointer(data.ServerName)), true);
  // 0x18: pointer
  if (data?.ServerRealm !== undefined) view.setBigUint64(24, data.ServerRealm === null ? 0n : BigInt(util.toPointer(data.ServerRealm)), true);
  // 0x20: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(32, data.StartTime === null ? 0n : BigInt(util.toPointer(data.StartTime)), true);
  // 0x28: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(40, data.EndTime === null ? 0n : BigInt(util.toPointer(data.EndTime)), true);
  // 0x30: pointer
  if (data?.RenewTime !== undefined) view.setBigUint64(48, data.RenewTime === null ? 0n : BigInt(util.toPointer(data.RenewTime)), true);
  // 0x38: i32
  if (data?.EncryptionType !== undefined) view.setInt32(56, Number(data.EncryptionType), true);
  // 0x3c: u32
  if (data?.TicketFlags !== undefined) view.setUint32(60, Number(data.TicketFlags), true);
  // 0x40: u32
  if (data?.SessionKeyType !== undefined) view.setUint32(64, Number(data.SessionKeyType), true);
  // 0x44: u32
  if (data?.BranchId !== undefined) view.setUint32(68, Number(data.BranchId), true);
  // 0x48: u32
  if (data?.CacheFlags !== undefined) view.setUint32(72, Number(data.CacheFlags), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.KdcCalled !== undefined) view.setBigUint64(80, data.KdcCalled === null ? 0n : BigInt(util.toPointer(data.KdcCalled)), true);
  return buf;
}

export class KERB_TICKET_CACHE_INFO_EX3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClientName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ClientRealm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ServerRealm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get StartTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get EndTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get RenewTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: i32
  get EncryptionType(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get TicketFlags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get SessionKeyType(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get BranchId(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get CacheFlags(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get KdcCalled(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ClientRealm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ServerName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ServerRealm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set StartTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set EndTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set RenewTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: i32
  set EncryptionType(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set TicketFlags(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set SessionKeyType(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set BranchId(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set CacheFlags(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set KdcCalled(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_TKT_CACHE_RESPONSE (size: 16)
 */
export interface KERB_QUERY_TKT_CACHE_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfTickets: number;
  /** array */
  Tickets: Deno.PointerValue | null;
}

export const sizeofKERB_QUERY_TKT_CACHE_RESPONSE = 16;

export function allocKERB_QUERY_TKT_CACHE_RESPONSE(data?: Partial<KERB_QUERY_TKT_CACHE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_TKT_CACHE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfTickets !== undefined) view.setUint32(4, Number(data.CountOfTickets), true);
  // 0x08: pointer
  if (data?.Tickets !== undefined) view.setBigUint64(8, data.Tickets === null ? 0n : BigInt(util.toPointer(data.Tickets)), true);
  return buf;
}

export class KERB_QUERY_TKT_CACHE_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfTickets(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Tickets(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfTickets(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Tickets(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_TKT_CACHE_EX_RESPONSE (size: 16)
 */
export interface KERB_QUERY_TKT_CACHE_EX_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfTickets: number;
  /** array */
  Tickets: Deno.PointerValue | null;
}

export const sizeofKERB_QUERY_TKT_CACHE_EX_RESPONSE = 16;

export function allocKERB_QUERY_TKT_CACHE_EX_RESPONSE(data?: Partial<KERB_QUERY_TKT_CACHE_EX_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_TKT_CACHE_EX_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfTickets !== undefined) view.setUint32(4, Number(data.CountOfTickets), true);
  // 0x08: pointer
  if (data?.Tickets !== undefined) view.setBigUint64(8, data.Tickets === null ? 0n : BigInt(util.toPointer(data.Tickets)), true);
  return buf;
}

export class KERB_QUERY_TKT_CACHE_EX_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfTickets(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Tickets(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfTickets(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Tickets(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_TKT_CACHE_EX2_RESPONSE (size: 16)
 */
export interface KERB_QUERY_TKT_CACHE_EX2_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfTickets: number;
  /** array */
  Tickets: Deno.PointerValue | null;
}

export const sizeofKERB_QUERY_TKT_CACHE_EX2_RESPONSE = 16;

export function allocKERB_QUERY_TKT_CACHE_EX2_RESPONSE(data?: Partial<KERB_QUERY_TKT_CACHE_EX2_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_TKT_CACHE_EX2_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfTickets !== undefined) view.setUint32(4, Number(data.CountOfTickets), true);
  // 0x08: pointer
  if (data?.Tickets !== undefined) view.setBigUint64(8, data.Tickets === null ? 0n : BigInt(util.toPointer(data.Tickets)), true);
  return buf;
}

export class KERB_QUERY_TKT_CACHE_EX2_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfTickets(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Tickets(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfTickets(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Tickets(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_TKT_CACHE_EX3_RESPONSE (size: 16)
 */
export interface KERB_QUERY_TKT_CACHE_EX3_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfTickets: number;
  /** array */
  Tickets: Deno.PointerValue | null;
}

export const sizeofKERB_QUERY_TKT_CACHE_EX3_RESPONSE = 16;

export function allocKERB_QUERY_TKT_CACHE_EX3_RESPONSE(data?: Partial<KERB_QUERY_TKT_CACHE_EX3_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_TKT_CACHE_EX3_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfTickets !== undefined) view.setUint32(4, Number(data.CountOfTickets), true);
  // 0x08: pointer
  if (data?.Tickets !== undefined) view.setBigUint64(8, data.Tickets === null ? 0n : BigInt(util.toPointer(data.Tickets)), true);
  return buf;
}

export class KERB_QUERY_TKT_CACHE_EX3_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfTickets(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Tickets(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfTickets(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Tickets(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_AUTH_DATA (size: 16)
 */
export interface KERB_AUTH_DATA {
  /** u32 */
  Type: number;
  /** u32 */
  Length: number;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_AUTH_DATA = 16;

export function allocKERB_AUTH_DATA(data?: Partial<KERB_AUTH_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_AUTH_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class KERB_AUTH_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_NET_ADDRESS (size: 16)
 */
export interface KERB_NET_ADDRESS {
  /** u32 */
  Family: number;
  /** u32 */
  Length: number;
  /** Windows.Win32.Foundation.PSTR */
  Address: string | null | Uint8Array;
}

export const sizeofKERB_NET_ADDRESS = 16;

export function allocKERB_NET_ADDRESS(data?: Partial<KERB_NET_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_NET_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Family !== undefined) view.setUint32(0, Number(data.Family), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: buffer
  if (data?.Address !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Address);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class KERB_NET_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Family(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get Address(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Family(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set Address(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_NET_ADDRESSES (size: 16)
 */
export interface KERB_NET_ADDRESSES {
  /** u32 */
  Number: number;
  /** array */
  Addresses: Deno.PointerValue | null;
}

export const sizeofKERB_NET_ADDRESSES = 16;

export function allocKERB_NET_ADDRESSES(data?: Partial<KERB_NET_ADDRESSES>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_NET_ADDRESSES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Addresses !== undefined) view.setBigUint64(8, data.Addresses === null ? 0n : BigInt(util.toPointer(data.Addresses)), true);
  return buf;
}

export class KERB_NET_ADDRESSESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Addresses(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Addresses(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_EXTERNAL_NAME (size: 16)
 */
export interface KERB_EXTERNAL_NAME {
  /** i16 */
  NameType: number;
  /** u16 */
  NameCount: number;
  /** array */
  Names: Deno.PointerValue | null;
}

export const sizeofKERB_EXTERNAL_NAME = 16;

export function allocKERB_EXTERNAL_NAME(data?: Partial<KERB_EXTERNAL_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_EXTERNAL_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.NameType !== undefined) view.setInt16(0, Number(data.NameType), true);
  // 0x02: u16
  if (data?.NameCount !== undefined) view.setUint16(2, Number(data.NameCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Names !== undefined) view.setBigUint64(8, data.Names === null ? 0n : BigInt(util.toPointer(data.Names)), true);
  return buf;
}

export class KERB_EXTERNAL_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get NameType(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: u16
  get NameCount(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Names(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i16
  set NameType(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: u16
  set NameCount(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Names(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_EXTERNAL_TICKET (size: 120)
 */
export interface KERB_EXTERNAL_TICKET {
  /** ptr */
  ServiceName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  TargetName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ClientName: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  TargetDomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AltTargetDomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY */
  SessionKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KERB_TICKET_FLAGS */
  TicketFlags: KERB_TICKET_FLAGS;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KeyExpirationTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  StartTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  EndTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  RenewUntil: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  TimeSkew: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EncodedTicketSize: number;
  /** ptr */
  EncodedTicket: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_EXTERNAL_TICKET = 120;

export function allocKERB_EXTERNAL_TICKET(data?: Partial<KERB_EXTERNAL_TICKET>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_EXTERNAL_TICKET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ServiceName !== undefined) view.setBigUint64(0, data.ServiceName === null ? 0n : BigInt(util.toPointer(data.ServiceName)), true);
  // 0x08: pointer
  if (data?.TargetName !== undefined) view.setBigUint64(8, data.TargetName === null ? 0n : BigInt(util.toPointer(data.TargetName)), true);
  // 0x10: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(16, data.ClientName === null ? 0n : BigInt(util.toPointer(data.ClientName)), true);
  // 0x18: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(24, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x20: pointer
  if (data?.TargetDomainName !== undefined) view.setBigUint64(32, data.TargetDomainName === null ? 0n : BigInt(util.toPointer(data.TargetDomainName)), true);
  // 0x28: pointer
  if (data?.AltTargetDomainName !== undefined) view.setBigUint64(40, data.AltTargetDomainName === null ? 0n : BigInt(util.toPointer(data.AltTargetDomainName)), true);
  // 0x30: pointer
  if (data?.SessionKey !== undefined) view.setBigUint64(48, data.SessionKey === null ? 0n : BigInt(util.toPointer(data.SessionKey)), true);
  // 0x38: u32
  if (data?.TicketFlags !== undefined) view.setUint32(56, Number(data.TicketFlags), true);
  // 0x3c: u32
  if (data?.Flags !== undefined) view.setUint32(60, Number(data.Flags), true);
  // 0x40: pointer
  if (data?.KeyExpirationTime !== undefined) view.setBigUint64(64, data.KeyExpirationTime === null ? 0n : BigInt(util.toPointer(data.KeyExpirationTime)), true);
  // 0x48: pointer
  if (data?.StartTime !== undefined) view.setBigUint64(72, data.StartTime === null ? 0n : BigInt(util.toPointer(data.StartTime)), true);
  // 0x50: pointer
  if (data?.EndTime !== undefined) view.setBigUint64(80, data.EndTime === null ? 0n : BigInt(util.toPointer(data.EndTime)), true);
  // 0x58: pointer
  if (data?.RenewUntil !== undefined) view.setBigUint64(88, data.RenewUntil === null ? 0n : BigInt(util.toPointer(data.RenewUntil)), true);
  // 0x60: pointer
  if (data?.TimeSkew !== undefined) view.setBigUint64(96, data.TimeSkew === null ? 0n : BigInt(util.toPointer(data.TimeSkew)), true);
  // 0x68: u32
  if (data?.EncodedTicketSize !== undefined) view.setUint32(104, Number(data.EncodedTicketSize), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.EncodedTicket !== undefined) view.setBigUint64(112, data.EncodedTicket === null ? 0n : BigInt(util.toPointer(data.EncodedTicket)), true);
  return buf;
}

export class KERB_EXTERNAL_TICKETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ServiceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get TargetName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ClientName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get TargetDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get AltTargetDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get SessionKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get TicketFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Flags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get KeyExpirationTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get StartTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get EndTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get RenewUntil(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get TimeSkew(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: u32
  get EncodedTicketSize(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get EncodedTicket(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ServiceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set TargetName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set TargetDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set AltTargetDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set SessionKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set TicketFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Flags(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set KeyExpirationTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set StartTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set EndTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set RenewUntil(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set TimeSkew(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: u32
  set EncodedTicketSize(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set EncodedTicket(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_RETRIEVE_TKT_REQUEST (size: 48)
 */
export interface KERB_RETRIEVE_TKT_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  TargetName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  TicketFlags: number;
  /** u32 */
  CacheOptions: number;
  /** Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY_TYPE */
  EncryptionType: KERB_CRYPTO_KEY_TYPE;
  /** Windows.Win32.Security.Credentials.SecHandle */
  CredentialsHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_RETRIEVE_TKT_REQUEST = 48;

export function allocKERB_RETRIEVE_TKT_REQUEST(data?: Partial<KERB_RETRIEVE_TKT_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_RETRIEVE_TKT_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x10: pointer
  if (data?.TargetName !== undefined) view.setBigUint64(16, data.TargetName === null ? 0n : BigInt(util.toPointer(data.TargetName)), true);
  // 0x18: u32
  if (data?.TicketFlags !== undefined) view.setUint32(24, Number(data.TicketFlags), true);
  // 0x1c: u32
  if (data?.CacheOptions !== undefined) view.setUint32(28, Number(data.CacheOptions), true);
  // 0x20: i32
  if (data?.EncryptionType !== undefined) view.setInt32(32, Number(data.EncryptionType), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.CredentialsHandle !== undefined) view.setBigUint64(40, data.CredentialsHandle === null ? 0n : BigInt(util.toPointer(data.CredentialsHandle)), true);
  return buf;
}

export class KERB_RETRIEVE_TKT_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get TargetName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get TicketFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get CacheOptions(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get EncryptionType(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get CredentialsHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set TargetName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set TicketFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set CacheOptions(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set EncryptionType(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set CredentialsHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_RETRIEVE_TKT_RESPONSE (size: 8)
 */
export interface KERB_RETRIEVE_TKT_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_EXTERNAL_TICKET */
  Ticket: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_RETRIEVE_TKT_RESPONSE = 8;

export function allocKERB_RETRIEVE_TKT_RESPONSE(data?: Partial<KERB_RETRIEVE_TKT_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_RETRIEVE_TKT_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ticket !== undefined) view.setBigUint64(0, data.Ticket === null ? 0n : BigInt(util.toPointer(data.Ticket)), true);
  return buf;
}

export class KERB_RETRIEVE_TKT_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Ticket(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Ticket(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_PURGE_TKT_CACHE_REQUEST (size: 32)
 */
export interface KERB_PURGE_TKT_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  RealmName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_PURGE_TKT_CACHE_REQUEST = 32;

export function allocKERB_PURGE_TKT_CACHE_REQUEST(data?: Partial<KERB_PURGE_TKT_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_PURGE_TKT_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x10: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(16, data.ServerName === null ? 0n : BigInt(util.toPointer(data.ServerName)), true);
  // 0x18: pointer
  if (data?.RealmName !== undefined) view.setBigUint64(24, data.RealmName === null ? 0n : BigInt(util.toPointer(data.RealmName)), true);
  return buf;
}

export class KERB_PURGE_TKT_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get RealmName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ServerName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set RealmName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_PURGE_TKT_CACHE_EX_REQUEST (size: 32)
 */
export interface KERB_PURGE_TKT_CACHE_EX_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Security.Authentication.Identity.KERB_TICKET_CACHE_INFO_EX */
  TicketTemplate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_PURGE_TKT_CACHE_EX_REQUEST = 32;

export function allocKERB_PURGE_TKT_CACHE_EX_REQUEST(data?: Partial<KERB_PURGE_TKT_CACHE_EX_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_PURGE_TKT_CACHE_EX_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.TicketTemplate !== undefined) view.setBigUint64(24, data.TicketTemplate === null ? 0n : BigInt(util.toPointer(data.TicketTemplate)), true);
  return buf;
}

export class KERB_PURGE_TKT_CACHE_EX_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get TicketTemplate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set TicketTemplate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_SUBMIT_TKT_REQUEST (size: 40)
 */
export interface KERB_SUBMIT_TKT_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY32 */
  Key: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  KerbCredSize: number;
  /** u32 */
  KerbCredOffset: number;
}

export const sizeofKERB_SUBMIT_TKT_REQUEST = 40;

export function allocKERB_SUBMIT_TKT_REQUEST(data?: Partial<KERB_SUBMIT_TKT_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_SUBMIT_TKT_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Key !== undefined) view.setBigUint64(24, data.Key === null ? 0n : BigInt(util.toPointer(data.Key)), true);
  // 0x20: u32
  if (data?.KerbCredSize !== undefined) view.setUint32(32, Number(data.KerbCredSize), true);
  // 0x24: u32
  if (data?.KerbCredOffset !== undefined) view.setUint32(36, Number(data.KerbCredOffset), true);
  return buf;
}

export class KERB_SUBMIT_TKT_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get KerbCredSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get KerbCredOffset(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set KerbCredSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set KerbCredOffset(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_KDC_PROXY_CACHE_REQUEST (size: 16)
 */
export interface KERB_QUERY_KDC_PROXY_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_QUERY_KDC_PROXY_CACHE_REQUEST = 16;

export function allocKERB_QUERY_KDC_PROXY_CACHE_REQUEST(data?: Partial<KERB_QUERY_KDC_PROXY_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_KDC_PROXY_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  return buf;
}

export class KERB_QUERY_KDC_PROXY_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KDC_PROXY_CACHE_ENTRY_DATA (size: 72)
 */
export interface KDC_PROXY_CACHE_ENTRY_DATA {
  /** u64 */
  SinceLastUsed: Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ProxyServerName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ProxyServerVdir: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  ProxyServerPort: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  CredUserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  CredDomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  GlobalCache: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKDC_PROXY_CACHE_ENTRY_DATA = 72;

export function allocKDC_PROXY_CACHE_ENTRY_DATA(data?: Partial<KDC_PROXY_CACHE_ENTRY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKDC_PROXY_CACHE_ENTRY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SinceLastUsed !== undefined) view.setBigUint64(0, BigInt(data.SinceLastUsed), true);
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x10: pointer
  if (data?.ProxyServerName !== undefined) view.setBigUint64(16, data.ProxyServerName === null ? 0n : BigInt(util.toPointer(data.ProxyServerName)), true);
  // 0x18: pointer
  if (data?.ProxyServerVdir !== undefined) view.setBigUint64(24, data.ProxyServerVdir === null ? 0n : BigInt(util.toPointer(data.ProxyServerVdir)), true);
  // 0x20: u16
  if (data?.ProxyServerPort !== undefined) view.setUint16(32, Number(data.ProxyServerPort), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(40, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x30: pointer
  if (data?.CredUserName !== undefined) view.setBigUint64(48, data.CredUserName === null ? 0n : BigInt(util.toPointer(data.CredUserName)), true);
  // 0x38: pointer
  if (data?.CredDomainName !== undefined) view.setBigUint64(56, data.CredDomainName === null ? 0n : BigInt(util.toPointer(data.CredDomainName)), true);
  // 0x40: pointer
  if (data?.GlobalCache !== undefined) view.setBigUint64(64, data.GlobalCache === null ? 0n : BigInt(util.toPointer(data.GlobalCache)), true);
  return buf;
}

export class KDC_PROXY_CACHE_ENTRY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get SinceLastUsed(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ProxyServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ProxyServerVdir(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u16
  get ProxyServerPort(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get CredUserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get CredDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get GlobalCache(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set SinceLastUsed(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ProxyServerName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ProxyServerVdir(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u16
  set ProxyServerPort(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6

  // 0x28: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set CredUserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set CredDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set GlobalCache(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_KDC_PROXY_CACHE_RESPONSE (size: 16)
 */
export interface KERB_QUERY_KDC_PROXY_CACHE_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfEntries: number;
  /** ptr */
  Entries: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_QUERY_KDC_PROXY_CACHE_RESPONSE = 16;

export function allocKERB_QUERY_KDC_PROXY_CACHE_RESPONSE(data?: Partial<KERB_QUERY_KDC_PROXY_CACHE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_KDC_PROXY_CACHE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfEntries !== undefined) view.setUint32(4, Number(data.CountOfEntries), true);
  // 0x08: pointer
  if (data?.Entries !== undefined) view.setBigUint64(8, data.Entries === null ? 0n : BigInt(util.toPointer(data.Entries)), true);
  return buf;
}

export class KERB_QUERY_KDC_PROXY_CACHE_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Entries(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Entries(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_PURGE_KDC_PROXY_CACHE_REQUEST (size: 16)
 */
export interface KERB_PURGE_KDC_PROXY_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_PURGE_KDC_PROXY_CACHE_REQUEST = 16;

export function allocKERB_PURGE_KDC_PROXY_CACHE_REQUEST(data?: Partial<KERB_PURGE_KDC_PROXY_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_PURGE_KDC_PROXY_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  return buf;
}

export class KERB_PURGE_KDC_PROXY_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_PURGE_KDC_PROXY_CACHE_RESPONSE (size: 8)
 */
export interface KERB_PURGE_KDC_PROXY_CACHE_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfPurged: number;
}

export const sizeofKERB_PURGE_KDC_PROXY_CACHE_RESPONSE = 8;

export function allocKERB_PURGE_KDC_PROXY_CACHE_RESPONSE(data?: Partial<KERB_PURGE_KDC_PROXY_CACHE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_PURGE_KDC_PROXY_CACHE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfPurged !== undefined) view.setUint32(4, Number(data.CountOfPurged), true);
  return buf;
}

export class KERB_PURGE_KDC_PROXY_CACHE_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfPurged(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfPurged(value: number) {
    this.view.setUint32(4, value, true);
  }
}

export type NTSTATUS = number;

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_S4U2PROXY_CACHE_ENTRY_INFO (size: 32)
 */
export interface KERB_S4U2PROXY_CACHE_ENTRY_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ServerName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.NTSTATUS */
  LastStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Expiry: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_S4U2PROXY_CACHE_ENTRY_INFO = 32;

export function allocKERB_S4U2PROXY_CACHE_ENTRY_INFO(data?: Partial<KERB_S4U2PROXY_CACHE_ENTRY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_S4U2PROXY_CACHE_ENTRY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ServerName !== undefined) view.setBigUint64(0, data.ServerName === null ? 0n : BigInt(util.toPointer(data.ServerName)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.LastStatus !== undefined) view.setBigUint64(16, data.LastStatus === null ? 0n : BigInt(util.toPointer(data.LastStatus)), true);
  // 0x18: pointer
  if (data?.Expiry !== undefined) view.setBigUint64(24, data.Expiry === null ? 0n : BigInt(util.toPointer(data.Expiry)), true);
  return buf;
}

export class KERB_S4U2PROXY_CACHE_ENTRY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get LastStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Expiry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ServerName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set LastStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Expiry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_S4U2PROXY_CRED (size: 56)
 */
export interface KERB_S4U2PROXY_CRED {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.NTSTATUS */
  LastStatus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Expiry: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CountOfEntries: number;
  /** ptr */
  Entries: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_S4U2PROXY_CRED = 56;

export function allocKERB_S4U2PROXY_CRED(data?: Partial<KERB_S4U2PROXY_CRED>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_S4U2PROXY_CRED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UserName !== undefined) view.setBigUint64(0, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.LastStatus !== undefined) view.setBigUint64(24, data.LastStatus === null ? 0n : BigInt(util.toPointer(data.LastStatus)), true);
  // 0x20: pointer
  if (data?.Expiry !== undefined) view.setBigUint64(32, data.Expiry === null ? 0n : BigInt(util.toPointer(data.Expiry)), true);
  // 0x28: u32
  if (data?.CountOfEntries !== undefined) view.setUint32(40, Number(data.CountOfEntries), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.Entries !== undefined) view.setBigUint64(48, data.Entries === null ? 0n : BigInt(util.toPointer(data.Entries)), true);
  return buf;
}

export class KERB_S4U2PROXY_CREDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get LastStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Expiry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get CountOfEntries(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get Entries(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set LastStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Expiry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set CountOfEntries(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set Entries(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_S4U2PROXY_CACHE_REQUEST (size: 16)
 */
export interface KERB_QUERY_S4U2PROXY_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_QUERY_S4U2PROXY_CACHE_REQUEST = 16;

export function allocKERB_QUERY_S4U2PROXY_CACHE_REQUEST(data?: Partial<KERB_QUERY_S4U2PROXY_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_S4U2PROXY_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  return buf;
}

export class KERB_QUERY_S4U2PROXY_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_S4U2PROXY_CACHE_RESPONSE (size: 16)
 */
export interface KERB_QUERY_S4U2PROXY_CACHE_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfCreds: number;
  /** ptr */
  Creds: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_QUERY_S4U2PROXY_CACHE_RESPONSE = 16;

export function allocKERB_QUERY_S4U2PROXY_CACHE_RESPONSE(data?: Partial<KERB_QUERY_S4U2PROXY_CACHE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_S4U2PROXY_CACHE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfCreds !== undefined) view.setUint32(4, Number(data.CountOfCreds), true);
  // 0x08: pointer
  if (data?.Creds !== undefined) view.setBigUint64(8, data.Creds === null ? 0n : BigInt(util.toPointer(data.Creds)), true);
  return buf;
}

export class KERB_QUERY_S4U2PROXY_CACHE_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfCreds(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Creds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfCreds(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Creds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_RETRIEVE_KEY_TAB_REQUEST (size: 32)
 */
export interface KERB_RETRIEVE_KEY_TAB_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_RETRIEVE_KEY_TAB_REQUEST = 32;

export function allocKERB_RETRIEVE_KEY_TAB_REQUEST(data?: Partial<KERB_RETRIEVE_KEY_TAB_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_RETRIEVE_KEY_TAB_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.UserName !== undefined) view.setBigUint64(8, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x18: pointer
  if (data?.Password !== undefined) view.setBigUint64(24, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  return buf;
}

export class KERB_RETRIEVE_KEY_TAB_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_RETRIEVE_KEY_TAB_RESPONSE (size: 16)
 */
export interface KERB_RETRIEVE_KEY_TAB_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  KeyTabLength: number;
  /** ptr */
  KeyTab: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_RETRIEVE_KEY_TAB_RESPONSE = 16;

export function allocKERB_RETRIEVE_KEY_TAB_RESPONSE(data?: Partial<KERB_RETRIEVE_KEY_TAB_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_RETRIEVE_KEY_TAB_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.KeyTabLength !== undefined) view.setUint32(4, Number(data.KeyTabLength), true);
  // 0x08: pointer
  if (data?.KeyTab !== undefined) view.setBigUint64(8, data.KeyTab === null ? 0n : BigInt(util.toPointer(data.KeyTab)), true);
  return buf;
}

export class KERB_RETRIEVE_KEY_TAB_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get KeyTabLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get KeyTab(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set KeyTabLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set KeyTab(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_REFRESH_POLICY_REQUEST (size: 8)
 */
export interface KERB_REFRESH_POLICY_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
}

export const sizeofKERB_REFRESH_POLICY_REQUEST = 8;

export function allocKERB_REFRESH_POLICY_REQUEST(data?: Partial<KERB_REFRESH_POLICY_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_REFRESH_POLICY_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

export class KERB_REFRESH_POLICY_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_REFRESH_POLICY_RESPONSE (size: 8)
 */
export interface KERB_REFRESH_POLICY_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
}

export const sizeofKERB_REFRESH_POLICY_RESPONSE = 8;

export function allocKERB_REFRESH_POLICY_RESPONSE(data?: Partial<KERB_REFRESH_POLICY_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_REFRESH_POLICY_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

export class KERB_REFRESH_POLICY_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CLOUD_KERBEROS_DEBUG_REQUEST (size: 16)
 */
export interface KERB_CLOUD_KERBEROS_DEBUG_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_CLOUD_KERBEROS_DEBUG_REQUEST = 16;

export function allocKERB_CLOUD_KERBEROS_DEBUG_REQUEST(data?: Partial<KERB_CLOUD_KERBEROS_DEBUG_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CLOUD_KERBEROS_DEBUG_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  return buf;
}

export class KERB_CLOUD_KERBEROS_DEBUG_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CLOUD_KERBEROS_DEBUG_RESPONSE (size: 24)
 */
export interface KERB_CLOUD_KERBEROS_DEBUG_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofKERB_CLOUD_KERBEROS_DEBUG_RESPONSE = 24;

export function allocKERB_CLOUD_KERBEROS_DEBUG_RESPONSE(data?: Partial<KERB_CLOUD_KERBEROS_DEBUG_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CLOUD_KERBEROS_DEBUG_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.Length !== undefined) view.setUint32(8, Number(data.Length), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class KERB_CLOUD_KERBEROS_DEBUG_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CLOUD_KERBEROS_DEBUG_DATA_V0 (size: 8)
 */
export interface KERB_CLOUD_KERBEROS_DEBUG_DATA_V0 {
  /** i32 */
  _bitfield: number;
}

export const sizeofKERB_CLOUD_KERBEROS_DEBUG_DATA_V0 = 8;

export function allocKERB_CLOUD_KERBEROS_DEBUG_DATA_V0(data?: Partial<KERB_CLOUD_KERBEROS_DEBUG_DATA_V0>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CLOUD_KERBEROS_DEBUG_DATA_V0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?._bitfield !== undefined) view.setInt32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class KERB_CLOUD_KERBEROS_DEBUG_DATA_V0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get _bitfield(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set _bitfield(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CHANGEPASSWORD_REQUEST (size: 48)
 */
export interface KERB_CHANGEPASSWORD_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AccountName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  OldPassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  NewPassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Impersonating: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_CHANGEPASSWORD_REQUEST = 48;

export function allocKERB_CHANGEPASSWORD_REQUEST(data?: Partial<KERB_CHANGEPASSWORD_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CHANGEPASSWORD_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x10: pointer
  if (data?.AccountName !== undefined) view.setBigUint64(16, data.AccountName === null ? 0n : BigInt(util.toPointer(data.AccountName)), true);
  // 0x18: pointer
  if (data?.OldPassword !== undefined) view.setBigUint64(24, data.OldPassword === null ? 0n : BigInt(util.toPointer(data.OldPassword)), true);
  // 0x20: pointer
  if (data?.NewPassword !== undefined) view.setBigUint64(32, data.NewPassword === null ? 0n : BigInt(util.toPointer(data.NewPassword)), true);
  // 0x28: pointer
  if (data?.Impersonating !== undefined) view.setBigUint64(40, data.Impersonating === null ? 0n : BigInt(util.toPointer(data.Impersonating)), true);
  return buf;
}

export class KERB_CHANGEPASSWORD_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AccountName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get OldPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get NewPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Impersonating(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AccountName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set OldPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set NewPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Impersonating(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_SETPASSWORD_REQUEST (size: 56)
 */
export interface KERB_SETPASSWORD_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Credentials.SecHandle */
  CredentialsHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AccountName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_SETPASSWORD_REQUEST = 56;

export function allocKERB_SETPASSWORD_REQUEST(data?: Partial<KERB_SETPASSWORD_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_SETPASSWORD_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x10: pointer
  if (data?.CredentialsHandle !== undefined) view.setBigUint64(16, data.CredentialsHandle === null ? 0n : BigInt(util.toPointer(data.CredentialsHandle)), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(32, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x28: pointer
  if (data?.AccountName !== undefined) view.setBigUint64(40, data.AccountName === null ? 0n : BigInt(util.toPointer(data.AccountName)), true);
  // 0x30: pointer
  if (data?.Password !== undefined) view.setBigUint64(48, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  return buf;
}

export class KERB_SETPASSWORD_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CredentialsHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get AccountName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CredentialsHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set AccountName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_SETPASSWORD_EX_REQUEST (size: 96)
 */
export interface KERB_SETPASSWORD_EX_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Credentials.SecHandle */
  CredentialsHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AccountRealm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AccountName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientRealm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ClientName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Impersonating: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  KdcAddress: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  KdcAddressType: number;
}

export const sizeofKERB_SETPASSWORD_EX_REQUEST = 96;

export function allocKERB_SETPASSWORD_EX_REQUEST(data?: Partial<KERB_SETPASSWORD_EX_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_SETPASSWORD_EX_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x10: pointer
  if (data?.CredentialsHandle !== undefined) view.setBigUint64(16, data.CredentialsHandle === null ? 0n : BigInt(util.toPointer(data.CredentialsHandle)), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.AccountRealm !== undefined) view.setBigUint64(32, data.AccountRealm === null ? 0n : BigInt(util.toPointer(data.AccountRealm)), true);
  // 0x28: pointer
  if (data?.AccountName !== undefined) view.setBigUint64(40, data.AccountName === null ? 0n : BigInt(util.toPointer(data.AccountName)), true);
  // 0x30: pointer
  if (data?.Password !== undefined) view.setBigUint64(48, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x38: pointer
  if (data?.ClientRealm !== undefined) view.setBigUint64(56, data.ClientRealm === null ? 0n : BigInt(util.toPointer(data.ClientRealm)), true);
  // 0x40: pointer
  if (data?.ClientName !== undefined) view.setBigUint64(64, data.ClientName === null ? 0n : BigInt(util.toPointer(data.ClientName)), true);
  // 0x48: pointer
  if (data?.Impersonating !== undefined) view.setBigUint64(72, data.Impersonating === null ? 0n : BigInt(util.toPointer(data.Impersonating)), true);
  // 0x50: pointer
  if (data?.KdcAddress !== undefined) view.setBigUint64(80, data.KdcAddress === null ? 0n : BigInt(util.toPointer(data.KdcAddress)), true);
  // 0x58: u32
  if (data?.KdcAddressType !== undefined) view.setUint32(88, Number(data.KdcAddressType), true);
  // 0x5c: pad4
  return buf;
}

export class KERB_SETPASSWORD_EX_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CredentialsHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get AccountRealm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get AccountName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get ClientRealm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get ClientName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get Impersonating(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get KdcAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get KdcAddressType(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CredentialsHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set AccountRealm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set AccountName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set ClientRealm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set ClientName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set Impersonating(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set KdcAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set KdcAddressType(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_DECRYPT_REQUEST (size: 64)
 */
export interface KERB_DECRYPT_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** i32 */
  CryptoType: number;
  /** i32 */
  KeyUsage: number;
  /** Windows.Win32.Security.Authentication.Identity.KERB_CRYPTO_KEY */
  Key: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EncryptedDataSize: number;
  /** u32 */
  InitialVectorSize: number;
  /** ptr */
  InitialVector: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  EncryptedData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_DECRYPT_REQUEST = 64;

export function allocKERB_DECRYPT_REQUEST(data?: Partial<KERB_DECRYPT_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_DECRYPT_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: i32
  if (data?.CryptoType !== undefined) view.setInt32(20, Number(data.CryptoType), true);
  // 0x18: i32
  if (data?.KeyUsage !== undefined) view.setInt32(24, Number(data.KeyUsage), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Key !== undefined) view.setBigUint64(32, data.Key === null ? 0n : BigInt(util.toPointer(data.Key)), true);
  // 0x28: u32
  if (data?.EncryptedDataSize !== undefined) view.setUint32(40, Number(data.EncryptedDataSize), true);
  // 0x2c: u32
  if (data?.InitialVectorSize !== undefined) view.setUint32(44, Number(data.InitialVectorSize), true);
  // 0x30: pointer
  if (data?.InitialVector !== undefined) view.setBigUint64(48, data.InitialVector === null ? 0n : BigInt(util.toPointer(data.InitialVector)), true);
  // 0x38: pointer
  if (data?.EncryptedData !== undefined) view.setBigUint64(56, data.EncryptedData === null ? 0n : BigInt(util.toPointer(data.EncryptedData)), true);
  return buf;
}

export class KERB_DECRYPT_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get CryptoType(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get KeyUsage(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get EncryptedDataSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get InitialVectorSize(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get InitialVector(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get EncryptedData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set CryptoType(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set KeyUsage(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set EncryptedDataSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set InitialVectorSize(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set InitialVector(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set EncryptedData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_DECRYPT_RESPONSE (size: 8)
 */
export interface KERB_DECRYPT_RESPONSE {
  /** array */
  DecryptedData: Deno.PointerValue | null;
}

export const sizeofKERB_DECRYPT_RESPONSE = 8;

export function allocKERB_DECRYPT_RESPONSE(data?: Partial<KERB_DECRYPT_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_DECRYPT_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DecryptedData !== undefined) view.setBigUint64(0, data.DecryptedData === null ? 0n : BigInt(util.toPointer(data.DecryptedData)), true);
  return buf;
}

export class KERB_DECRYPT_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DecryptedData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DecryptedData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_ADD_BINDING_CACHE_ENTRY_REQUEST (size: 32)
 */
export interface KERB_ADD_BINDING_CACHE_ENTRY_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  RealmName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  KdcAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KERB_ADDRESS_TYPE */
  AddressType: KERB_ADDRESS_TYPE;
}

export const sizeofKERB_ADD_BINDING_CACHE_ENTRY_REQUEST = 32;

export function allocKERB_ADD_BINDING_CACHE_ENTRY_REQUEST(data?: Partial<KERB_ADD_BINDING_CACHE_ENTRY_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_ADD_BINDING_CACHE_ENTRY_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.RealmName !== undefined) view.setBigUint64(8, data.RealmName === null ? 0n : BigInt(util.toPointer(data.RealmName)), true);
  // 0x10: pointer
  if (data?.KdcAddress !== undefined) view.setBigUint64(16, data.KdcAddress === null ? 0n : BigInt(util.toPointer(data.KdcAddress)), true);
  // 0x18: u32
  if (data?.AddressType !== undefined) view.setUint32(24, Number(data.AddressType), true);
  // 0x1c: pad4
  return buf;
}

export class KERB_ADD_BINDING_CACHE_ENTRY_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get RealmName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get KdcAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get AddressType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set RealmName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set KdcAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set AddressType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_REFRESH_SCCRED_REQUEST (size: 32)
 */
export interface KERB_REFRESH_SCCRED_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  CredentialBlob: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofKERB_REFRESH_SCCRED_REQUEST = 32;

export function allocKERB_REFRESH_SCCRED_REQUEST(data?: Partial<KERB_REFRESH_SCCRED_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_REFRESH_SCCRED_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CredentialBlob !== undefined) view.setBigUint64(8, data.CredentialBlob === null ? 0n : BigInt(util.toPointer(data.CredentialBlob)), true);
  // 0x10: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(16, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

export class KERB_REFRESH_SCCRED_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get CredentialBlob(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set CredentialBlob(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_ADD_CREDENTIALS_REQUEST (size: 48)
 */
export interface KERB_ADD_CREDENTIALS_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KERB_REQUEST_FLAGS */
  Flags: KERB_REQUEST_FLAGS;
}

export const sizeofKERB_ADD_CREDENTIALS_REQUEST = 48;

export function allocKERB_ADD_CREDENTIALS_REQUEST(data?: Partial<KERB_ADD_CREDENTIALS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_ADD_CREDENTIALS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UserName !== undefined) view.setBigUint64(8, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x18: pointer
  if (data?.Password !== undefined) view.setBigUint64(24, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x20: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(32, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: pad4
  return buf;
}

export class KERB_ADD_CREDENTIALS_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get Flags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set Flags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_ADD_CREDENTIALS_REQUEST_EX (size: 24)
 */
export interface KERB_ADD_CREDENTIALS_REQUEST_EX {
  /** Windows.Win32.Security.Authentication.Identity.KERB_ADD_CREDENTIALS_REQUEST */
  Credentials: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PrincipalNameCount: number;
  /** array */
  PrincipalNames: Deno.PointerValue | null;
}

export const sizeofKERB_ADD_CREDENTIALS_REQUEST_EX = 24;

export function allocKERB_ADD_CREDENTIALS_REQUEST_EX(data?: Partial<KERB_ADD_CREDENTIALS_REQUEST_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_ADD_CREDENTIALS_REQUEST_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Credentials !== undefined) view.setBigUint64(0, data.Credentials === null ? 0n : BigInt(util.toPointer(data.Credentials)), true);
  // 0x08: u32
  if (data?.PrincipalNameCount !== undefined) view.setUint32(8, Number(data.PrincipalNameCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.PrincipalNames !== undefined) view.setBigUint64(16, data.PrincipalNames === null ? 0n : BigInt(util.toPointer(data.PrincipalNames)), true);
  return buf;
}

export class KERB_ADD_CREDENTIALS_REQUEST_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Credentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get PrincipalNameCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get PrincipalNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Credentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set PrincipalNameCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set PrincipalNames(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_TRANSFER_CRED_REQUEST (size: 32)
 */
export interface KERB_TRANSFER_CRED_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  OriginLogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  DestinationLogonId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofKERB_TRANSFER_CRED_REQUEST = 32;

export function allocKERB_TRANSFER_CRED_REQUEST(data?: Partial<KERB_TRANSFER_CRED_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_TRANSFER_CRED_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.OriginLogonId !== undefined) view.setBigUint64(8, data.OriginLogonId === null ? 0n : BigInt(util.toPointer(data.OriginLogonId)), true);
  // 0x10: pointer
  if (data?.DestinationLogonId !== undefined) view.setBigUint64(16, data.DestinationLogonId === null ? 0n : BigInt(util.toPointer(data.DestinationLogonId)), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

export class KERB_TRANSFER_CRED_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get OriginLogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DestinationLogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set OriginLogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DestinationLogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST (size: 16)
 */
export interface KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST = 16;

export function allocKERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST(data?: Partial<KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  return buf;
}

export class KERB_CLEANUP_MACHINE_PKINIT_CREDS_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_BINDING_CACHE_ENTRY_DATA (size: 48)
 */
export interface KERB_BINDING_CACHE_ENTRY_DATA {
  /** u64 */
  DiscoveryTime: Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  RealmName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  KdcAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KERB_ADDRESS_TYPE */
  AddressType: KERB_ADDRESS_TYPE;
  /** u32 */
  Flags: number;
  /** u32 */
  DcFlags: number;
  /** u32 */
  CacheFlags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  KdcName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_BINDING_CACHE_ENTRY_DATA = 48;

export function allocKERB_BINDING_CACHE_ENTRY_DATA(data?: Partial<KERB_BINDING_CACHE_ENTRY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_BINDING_CACHE_ENTRY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.DiscoveryTime !== undefined) view.setBigUint64(0, BigInt(data.DiscoveryTime), true);
  // 0x08: pointer
  if (data?.RealmName !== undefined) view.setBigUint64(8, data.RealmName === null ? 0n : BigInt(util.toPointer(data.RealmName)), true);
  // 0x10: pointer
  if (data?.KdcAddress !== undefined) view.setBigUint64(16, data.KdcAddress === null ? 0n : BigInt(util.toPointer(data.KdcAddress)), true);
  // 0x18: u32
  if (data?.AddressType !== undefined) view.setUint32(24, Number(data.AddressType), true);
  // 0x1c: u32
  if (data?.Flags !== undefined) view.setUint32(28, Number(data.Flags), true);
  // 0x20: u32
  if (data?.DcFlags !== undefined) view.setUint32(32, Number(data.DcFlags), true);
  // 0x24: u32
  if (data?.CacheFlags !== undefined) view.setUint32(36, Number(data.CacheFlags), true);
  // 0x28: pointer
  if (data?.KdcName !== undefined) view.setBigUint64(40, data.KdcName === null ? 0n : BigInt(util.toPointer(data.KdcName)), true);
  return buf;
}

export class KERB_BINDING_CACHE_ENTRY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get DiscoveryTime(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get RealmName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get KdcAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get AddressType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Flags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get DcFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get CacheFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get KdcName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set DiscoveryTime(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set RealmName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set KdcAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set AddressType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Flags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set DcFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set CacheFlags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set KdcName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_BINDING_CACHE_RESPONSE (size: 16)
 */
export interface KERB_QUERY_BINDING_CACHE_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  CountOfEntries: number;
  /** ptr */
  Entries: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKERB_QUERY_BINDING_CACHE_RESPONSE = 16;

export function allocKERB_QUERY_BINDING_CACHE_RESPONSE(data?: Partial<KERB_QUERY_BINDING_CACHE_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_BINDING_CACHE_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.CountOfEntries !== undefined) view.setUint32(4, Number(data.CountOfEntries), true);
  // 0x08: pointer
  if (data?.Entries !== undefined) view.setBigUint64(8, data.Entries === null ? 0n : BigInt(util.toPointer(data.Entries)), true);
  return buf;
}

export class KERB_QUERY_BINDING_CACHE_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get CountOfEntries(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Entries(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set CountOfEntries(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Entries(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST (size: 32)
 */
export interface KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  RealmName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  KdcAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KERB_ADDRESS_TYPE */
  AddressType: KERB_ADDRESS_TYPE;
  /** u32 */
  DcFlags: number;
}

export const sizeofKERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST = 32;

export function allocKERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST(data?: Partial<KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_ADD_BINDING_CACHE_ENTRY_EX_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.RealmName !== undefined) view.setBigUint64(8, data.RealmName === null ? 0n : BigInt(util.toPointer(data.RealmName)), true);
  // 0x10: pointer
  if (data?.KdcAddress !== undefined) view.setBigUint64(16, data.KdcAddress === null ? 0n : BigInt(util.toPointer(data.KdcAddress)), true);
  // 0x18: u32
  if (data?.AddressType !== undefined) view.setUint32(24, Number(data.AddressType), true);
  // 0x1c: u32
  if (data?.DcFlags !== undefined) view.setUint32(28, Number(data.DcFlags), true);
  return buf;
}

export class KERB_ADD_BINDING_CACHE_ENTRY_EX_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get RealmName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get KdcAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get AddressType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DcFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set RealmName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set KdcAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set AddressType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DcFlags(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_BINDING_CACHE_REQUEST (size: 8)
 */
export interface KERB_QUERY_BINDING_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
}

export const sizeofKERB_QUERY_BINDING_CACHE_REQUEST = 8;

export function allocKERB_QUERY_BINDING_CACHE_REQUEST(data?: Partial<KERB_QUERY_BINDING_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_BINDING_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  return buf;
}

export class KERB_QUERY_BINDING_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_PURGE_BINDING_CACHE_REQUEST (size: 8)
 */
export interface KERB_PURGE_BINDING_CACHE_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
}

export const sizeofKERB_PURGE_BINDING_CACHE_REQUEST = 8;

export function allocKERB_PURGE_BINDING_CACHE_REQUEST(data?: Partial<KERB_PURGE_BINDING_CACHE_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_PURGE_BINDING_CACHE_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: pad4
  return buf;
}

export class KERB_PURGE_BINDING_CACHE_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST (size: 16)
 */
export interface KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST = 16;

export function allocKERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST(data?: Partial<KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  return buf;
}

export class KERB_QUERY_DOMAIN_EXTENDED_POLICIES_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE (size: 16)
 */
export interface KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE {
  /** Windows.Win32.Security.Authentication.Identity.KERB_PROTOCOL_MESSAGE_TYPE */
  MessageType: KERB_PROTOCOL_MESSAGE_TYPE;
  /** u32 */
  Flags: number;
  /** u32 */
  ExtendedPolicies: number;
  /** u32 */
  DsFlags: number;
}

export const sizeofKERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE = 16;

export function allocKERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE(data?: Partial<KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.ExtendedPolicies !== undefined) view.setUint32(8, Number(data.ExtendedPolicies), true);
  // 0x0c: u32
  if (data?.DsFlags !== undefined) view.setUint32(12, Number(data.DsFlags), true);
  return buf;
}

export class KERB_QUERY_DOMAIN_EXTENDED_POLICIES_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ExtendedPolicies(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DsFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ExtendedPolicies(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DsFlags(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CERTIFICATE_HASHINFO (size: 8)
 */
export interface KERB_CERTIFICATE_HASHINFO {
  /** u16 */
  StoreNameLength: number;
  /** u16 */
  HashLength: number;
}

export const sizeofKERB_CERTIFICATE_HASHINFO = 8;

export function allocKERB_CERTIFICATE_HASHINFO(data?: Partial<KERB_CERTIFICATE_HASHINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CERTIFICATE_HASHINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.StoreNameLength !== undefined) view.setUint16(0, Number(data.StoreNameLength), true);
  // 0x02: u16
  if (data?.HashLength !== undefined) view.setUint16(2, Number(data.HashLength), true);
  // 0x04: pad4
  return buf;
}

export class KERB_CERTIFICATE_HASHINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get StoreNameLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get HashLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set StoreNameLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set HashLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.KERB_CERTIFICATE_INFO (size: 8)
 */
export interface KERB_CERTIFICATE_INFO {
  /** u32 */
  CertInfoSize: number;
  /** u32 */
  InfoType: number;
}

export const sizeofKERB_CERTIFICATE_INFO = 8;

export function allocKERB_CERTIFICATE_INFO(data?: Partial<KERB_CERTIFICATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofKERB_CERTIFICATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CertInfoSize !== undefined) view.setUint32(0, Number(data.CertInfoSize), true);
  // 0x04: u32
  if (data?.InfoType !== undefined) view.setUint32(4, Number(data.InfoType), true);
  return buf;
}

export class KERB_CERTIFICATE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CertInfoSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get InfoType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set CertInfoSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set InfoType(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.POLICY_AUDIT_SID_ARRAY (size: 16)
 */
export interface POLICY_AUDIT_SID_ARRAY {
  /** u32 */
  UsersCount: number;
  /** ptr */
  UserSidArray: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPOLICY_AUDIT_SID_ARRAY = 16;

export function allocPOLICY_AUDIT_SID_ARRAY(data?: Partial<POLICY_AUDIT_SID_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_AUDIT_SID_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UsersCount !== undefined) view.setUint32(0, Number(data.UsersCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UserSidArray !== undefined) view.setBigUint64(8, data.UserSidArray === null ? 0n : BigInt(util.toPointer(data.UserSidArray)), true);
  return buf;
}

export class POLICY_AUDIT_SID_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UsersCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get UserSidArray(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set UsersCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set UserSidArray(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.AUDIT_POLICY_INFORMATION (size: 24)
 */
export interface AUDIT_POLICY_INFORMATION {
  /** System.Guid */
  AuditSubCategoryGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AuditingInformation: number;
  /** System.Guid */
  AuditCategoryGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAUDIT_POLICY_INFORMATION = 24;

export function allocAUDIT_POLICY_INFORMATION(data?: Partial<AUDIT_POLICY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofAUDIT_POLICY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AuditSubCategoryGuid !== undefined) view.setBigUint64(0, data.AuditSubCategoryGuid === null ? 0n : BigInt(util.toPointer(data.AuditSubCategoryGuid)), true);
  // 0x08: u32
  if (data?.AuditingInformation !== undefined) view.setUint32(8, Number(data.AuditingInformation), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.AuditCategoryGuid !== undefined) view.setBigUint64(16, data.AuditCategoryGuid === null ? 0n : BigInt(util.toPointer(data.AuditCategoryGuid)), true);
  return buf;
}

export class AUDIT_POLICY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AuditSubCategoryGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get AuditingInformation(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get AuditCategoryGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set AuditSubCategoryGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set AuditingInformation(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set AuditCategoryGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.PKU2U_CERT_BLOB (size: 8)
 */
export interface PKU2U_CERT_BLOB {
  /** u32 */
  CertOffset: number;
  /** u16 */
  CertLength: number;
}

export const sizeofPKU2U_CERT_BLOB = 8;

export function allocPKU2U_CERT_BLOB(data?: Partial<PKU2U_CERT_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofPKU2U_CERT_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CertOffset !== undefined) view.setUint32(0, Number(data.CertOffset), true);
  // 0x04: u16
  if (data?.CertLength !== undefined) view.setUint16(4, Number(data.CertLength), true);
  // 0x06: pad2
  return buf;
}

export class PKU2U_CERT_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CertOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get CertLength(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u32
  set CertOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set CertLength(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Security.Authentication.Identity.PKU2U_CREDUI_CONTEXT (size: 24)
 */
export interface PKU2U_CREDUI_CONTEXT {
  /** u64 */
  Version: Deno.PointerValue;
  /** u16 */
  cbHeaderLength: number;
  /** u32 */
  cbStructureLength: number;
  /** u16 */
  CertArrayCount: number;
  /** u32 */
  CertArrayOffset: number;
}

export const sizeofPKU2U_CREDUI_CONTEXT = 24;

export function allocPKU2U_CREDUI_CONTEXT(data?: Partial<PKU2U_CREDUI_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofPKU2U_CREDUI_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Version !== undefined) view.setBigUint64(0, BigInt(data.Version), true);
  // 0x08: u16
  if (data?.cbHeaderLength !== undefined) view.setUint16(8, Number(data.cbHeaderLength), true);
  // 0x0a: u32
  if (data?.cbStructureLength !== undefined) view.setUint32(10, Number(data.cbStructureLength), true);
  // 0x0e: u16
  if (data?.CertArrayCount !== undefined) view.setUint16(14, Number(data.CertArrayCount), true);
  // 0x10: u32
  if (data?.CertArrayOffset !== undefined) view.setUint32(16, Number(data.CertArrayOffset), true);
  // 0x14: pad4
  return buf;
}

export class PKU2U_CREDUI_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Version(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u16
  get cbHeaderLength(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u32
  get cbStructureLength(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: u16
  get CertArrayCount(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u32
  get CertArrayOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u64
  set Version(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u16
  set cbHeaderLength(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u32
  set cbStructureLength(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: u16
  set CertArrayCount(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u32
  set CertArrayOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.PKU2U_CERTIFICATE_S4U_LOGON (size: 40)
 */
export interface PKU2U_CERTIFICATE_S4U_LOGON {
  /** Windows.Win32.Security.Authentication.Identity.PKU2U_LOGON_SUBMIT_TYPE */
  MessageType: PKU2U_LOGON_SUBMIT_TYPE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserPrincipalName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CertificateLength: number;
  /** ptr */
  Certificate: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPKU2U_CERTIFICATE_S4U_LOGON = 40;

export function allocPKU2U_CERTIFICATE_S4U_LOGON(data?: Partial<PKU2U_CERTIFICATE_S4U_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofPKU2U_CERTIFICATE_S4U_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MessageType !== undefined) view.setInt32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.UserPrincipalName !== undefined) view.setBigUint64(8, data.UserPrincipalName === null ? 0n : BigInt(util.toPointer(data.UserPrincipalName)), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x18: u32
  if (data?.CertificateLength !== undefined) view.setUint32(24, Number(data.CertificateLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Certificate !== undefined) view.setBigUint64(32, data.Certificate === null ? 0n : BigInt(util.toPointer(data.Certificate)), true);
  return buf;
}

export class PKU2U_CERTIFICATE_S4U_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MessageType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get UserPrincipalName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get CertificateLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Certificate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set MessageType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set UserPrincipalName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set CertificateLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Certificate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgInfoW (size: 32)
 */
export interface SecPkgInfoW {
  /** u32 */
  fCapabilities: number;
  /** u16 */
  wVersion: number;
  /** u16 */
  wRPCID: number;
  /** u32 */
  cbMaxToken: number;
  /** ptr */
  Name: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Comment: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgInfoW = 32;

export function allocSecPkgInfoW(data?: Partial<SecPkgInfoW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgInfoW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fCapabilities !== undefined) view.setUint32(0, Number(data.fCapabilities), true);
  // 0x04: u16
  if (data?.wVersion !== undefined) view.setUint16(4, Number(data.wVersion), true);
  // 0x06: u16
  if (data?.wRPCID !== undefined) view.setUint16(6, Number(data.wRPCID), true);
  // 0x08: u32
  if (data?.cbMaxToken !== undefined) view.setUint32(8, Number(data.cbMaxToken), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Name !== undefined) view.setBigUint64(16, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x18: pointer
  if (data?.Comment !== undefined) view.setBigUint64(24, data.Comment === null ? 0n : BigInt(util.toPointer(data.Comment)), true);
  return buf;
}

export class SecPkgInfoWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fCapabilities(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wVersion(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wRPCID(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u32
  get cbMaxToken(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Comment(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fCapabilities(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wVersion(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wRPCID(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u32
  set cbMaxToken(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Comment(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgInfoA (size: 32)
 */
export interface SecPkgInfoA {
  /** u32 */
  fCapabilities: number;
  /** u16 */
  wVersion: number;
  /** u16 */
  wRPCID: number;
  /** u32 */
  cbMaxToken: number;
  /** ptr */
  Name: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Comment: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgInfoA = 32;

export function allocSecPkgInfoA(data?: Partial<SecPkgInfoA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgInfoA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fCapabilities !== undefined) view.setUint32(0, Number(data.fCapabilities), true);
  // 0x04: u16
  if (data?.wVersion !== undefined) view.setUint16(4, Number(data.wVersion), true);
  // 0x06: u16
  if (data?.wRPCID !== undefined) view.setUint16(6, Number(data.wRPCID), true);
  // 0x08: u32
  if (data?.cbMaxToken !== undefined) view.setUint32(8, Number(data.cbMaxToken), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Name !== undefined) view.setBigUint64(16, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x18: pointer
  if (data?.Comment !== undefined) view.setBigUint64(24, data.Comment === null ? 0n : BigInt(util.toPointer(data.Comment)), true);
  return buf;
}

export class SecPkgInfoAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fCapabilities(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wVersion(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wRPCID(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u32
  get cbMaxToken(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Comment(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set fCapabilities(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wVersion(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wRPCID(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u32
  set cbMaxToken(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Comment(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecBuffer (size: 16)
 */
export interface SecBuffer {
  /** u32 */
  cbBuffer: number;
  /** u32 */
  BufferType: number;
  /** ptr */
  pvBuffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecBuffer = 16;

export function allocSecBuffer(data?: Partial<SecBuffer>): Uint8Array {
  const buf = new Uint8Array(sizeofSecBuffer);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbBuffer !== undefined) view.setUint32(0, Number(data.cbBuffer), true);
  // 0x04: u32
  if (data?.BufferType !== undefined) view.setUint32(4, Number(data.BufferType), true);
  // 0x08: pointer
  if (data?.pvBuffer !== undefined) view.setBigUint64(8, data.pvBuffer === null ? 0n : BigInt(util.toPointer(data.pvBuffer)), true);
  return buf;
}

export class SecBufferView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbBuffer(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get BufferType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pvBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbBuffer(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set BufferType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pvBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecBufferDesc (size: 16)
 */
export interface SecBufferDesc {
  /** u32 */
  ulVersion: number;
  /** u32 */
  cBuffers: number;
  /** ptr */
  pBuffers: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecBufferDesc = 16;

export function allocSecBufferDesc(data?: Partial<SecBufferDesc>): Uint8Array {
  const buf = new Uint8Array(sizeofSecBufferDesc);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulVersion !== undefined) view.setUint32(0, Number(data.ulVersion), true);
  // 0x04: u32
  if (data?.cBuffers !== undefined) view.setUint32(4, Number(data.cBuffers), true);
  // 0x08: pointer
  if (data?.pBuffers !== undefined) view.setBigUint64(8, data.pBuffers === null ? 0n : BigInt(util.toPointer(data.pBuffers)), true);
  return buf;
}

export class SecBufferDescView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cBuffers(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pBuffers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cBuffers(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pBuffers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_NEGOTIATION_INFO (size: 24)
 */
export interface SEC_NEGOTIATION_INFO {
  /** u32 */
  Size: number;
  /** u32 */
  NameLength: number;
  /** ptr */
  Name: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSEC_NEGOTIATION_INFO = 24;

export function allocSEC_NEGOTIATION_INFO(data?: Partial<SEC_NEGOTIATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_NEGOTIATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.NameLength !== undefined) view.setUint32(4, Number(data.NameLength), true);
  // 0x08: pointer
  if (data?.Name !== undefined) view.setBigUint64(8, data.Name === null ? 0n : BigInt(util.toPointer(data.Name)), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class SEC_NEGOTIATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NameLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NameLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_CHANNEL_BINDINGS (size: 32)
 */
export interface SEC_CHANNEL_BINDINGS {
  /** u32 */
  dwInitiatorAddrType: number;
  /** u32 */
  cbInitiatorLength: number;
  /** u32 */
  dwInitiatorOffset: number;
  /** u32 */
  dwAcceptorAddrType: number;
  /** u32 */
  cbAcceptorLength: number;
  /** u32 */
  dwAcceptorOffset: number;
  /** u32 */
  cbApplicationDataLength: number;
  /** u32 */
  dwApplicationDataOffset: number;
}

export const sizeofSEC_CHANNEL_BINDINGS = 32;

export function allocSEC_CHANNEL_BINDINGS(data?: Partial<SEC_CHANNEL_BINDINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_CHANNEL_BINDINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwInitiatorAddrType !== undefined) view.setUint32(0, Number(data.dwInitiatorAddrType), true);
  // 0x04: u32
  if (data?.cbInitiatorLength !== undefined) view.setUint32(4, Number(data.cbInitiatorLength), true);
  // 0x08: u32
  if (data?.dwInitiatorOffset !== undefined) view.setUint32(8, Number(data.dwInitiatorOffset), true);
  // 0x0c: u32
  if (data?.dwAcceptorAddrType !== undefined) view.setUint32(12, Number(data.dwAcceptorAddrType), true);
  // 0x10: u32
  if (data?.cbAcceptorLength !== undefined) view.setUint32(16, Number(data.cbAcceptorLength), true);
  // 0x14: u32
  if (data?.dwAcceptorOffset !== undefined) view.setUint32(20, Number(data.dwAcceptorOffset), true);
  // 0x18: u32
  if (data?.cbApplicationDataLength !== undefined) view.setUint32(24, Number(data.cbApplicationDataLength), true);
  // 0x1c: u32
  if (data?.dwApplicationDataOffset !== undefined) view.setUint32(28, Number(data.dwApplicationDataOffset), true);
  return buf;
}

export class SEC_CHANNEL_BINDINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwInitiatorAddrType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbInitiatorLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwInitiatorOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwAcceptorAddrType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbAcceptorLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwAcceptorOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cbApplicationDataLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwApplicationDataOffset(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set dwInitiatorAddrType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbInitiatorLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwInitiatorOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwAcceptorAddrType(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbAcceptorLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwAcceptorOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cbApplicationDataLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwApplicationDataOffset(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_APPLICATION_PROTOCOL_LIST (size: 16)
 */
export interface SEC_APPLICATION_PROTOCOL_LIST {
  /** Windows.Win32.Security.Authentication.Identity.SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT */
  ProtoNegoExt: SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT;
  /** u16 */
  ProtocolListSize: number;
  /** array */
  ProtocolList: Deno.PointerValue | null;
}

export const sizeofSEC_APPLICATION_PROTOCOL_LIST = 16;

export function allocSEC_APPLICATION_PROTOCOL_LIST(data?: Partial<SEC_APPLICATION_PROTOCOL_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_APPLICATION_PROTOCOL_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ProtoNegoExt !== undefined) view.setInt32(0, Number(data.ProtoNegoExt), true);
  // 0x04: u16
  if (data?.ProtocolListSize !== undefined) view.setUint16(4, Number(data.ProtocolListSize), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.ProtocolList !== undefined) view.setBigUint64(8, data.ProtocolList === null ? 0n : BigInt(util.toPointer(data.ProtocolList)), true);
  return buf;
}

export class SEC_APPLICATION_PROTOCOL_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ProtoNegoExt(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get ProtocolListSize(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get ProtocolList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set ProtoNegoExt(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set ProtocolListSize(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set ProtocolList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_APPLICATION_PROTOCOLS (size: 16)
 */
export interface SEC_APPLICATION_PROTOCOLS {
  /** u32 */
  ProtocolListsSize: number;
  /** array */
  ProtocolLists: Deno.PointerValue | null;
}

export const sizeofSEC_APPLICATION_PROTOCOLS = 16;

export function allocSEC_APPLICATION_PROTOCOLS(data?: Partial<SEC_APPLICATION_PROTOCOLS>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_APPLICATION_PROTOCOLS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProtocolListsSize !== undefined) view.setUint32(0, Number(data.ProtocolListsSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ProtocolLists !== undefined) view.setBigUint64(8, data.ProtocolLists === null ? 0n : BigInt(util.toPointer(data.ProtocolLists)), true);
  return buf;
}

export class SEC_APPLICATION_PROTOCOLSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ProtocolListsSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ProtocolLists(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ProtocolListsSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ProtocolLists(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_SRTP_PROTECTION_PROFILES (size: 16)
 */
export interface SEC_SRTP_PROTECTION_PROFILES {
  /** u16 */
  ProfilesSize: number;
  /** array */
  ProfilesList: Deno.PointerValue | null;
}

export const sizeofSEC_SRTP_PROTECTION_PROFILES = 16;

export function allocSEC_SRTP_PROTECTION_PROFILES(data?: Partial<SEC_SRTP_PROTECTION_PROFILES>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_SRTP_PROTECTION_PROFILES);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ProfilesSize !== undefined) view.setUint16(0, Number(data.ProfilesSize), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.ProfilesList !== undefined) view.setBigUint64(8, data.ProfilesList === null ? 0n : BigInt(util.toPointer(data.ProfilesList)), true);
  return buf;
}

export class SEC_SRTP_PROTECTION_PROFILESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ProfilesSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get ProfilesList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set ProfilesSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set ProfilesList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_SRTP_MASTER_KEY_IDENTIFIER (size: 16)
 */
export interface SEC_SRTP_MASTER_KEY_IDENTIFIER {
  /** u8 */
  MasterKeyIdentifierSize: number;
  /** array */
  MasterKeyIdentifier: Deno.PointerValue | null;
}

export const sizeofSEC_SRTP_MASTER_KEY_IDENTIFIER = 16;

export function allocSEC_SRTP_MASTER_KEY_IDENTIFIER(data?: Partial<SEC_SRTP_MASTER_KEY_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_SRTP_MASTER_KEY_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.MasterKeyIdentifierSize !== undefined) view.setUint8(0, Number(data.MasterKeyIdentifierSize));
  // 0x01: pad7
  // 0x08: pointer
  if (data?.MasterKeyIdentifier !== undefined) view.setBigUint64(8, data.MasterKeyIdentifier === null ? 0n : BigInt(util.toPointer(data.MasterKeyIdentifier)), true);
  return buf;
}

export class SEC_SRTP_MASTER_KEY_IDENTIFIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get MasterKeyIdentifierSize(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: pointer
  get MasterKeyIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set MasterKeyIdentifierSize(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: pointer
  set MasterKeyIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_TOKEN_BINDING (size: 16)
 */
export interface SEC_TOKEN_BINDING {
  /** u8 */
  MajorVersion: number;
  /** u8 */
  MinorVersion: number;
  /** u16 */
  KeyParametersSize: number;
  /** array */
  KeyParameters: Deno.PointerValue | null;
}

export const sizeofSEC_TOKEN_BINDING = 16;

export function allocSEC_TOKEN_BINDING(data?: Partial<SEC_TOKEN_BINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_TOKEN_BINDING);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.MajorVersion !== undefined) view.setUint8(0, Number(data.MajorVersion));
  // 0x01: u8
  if (data?.MinorVersion !== undefined) view.setUint8(1, Number(data.MinorVersion));
  // 0x02: u16
  if (data?.KeyParametersSize !== undefined) view.setUint16(2, Number(data.KeyParametersSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyParameters !== undefined) view.setBigUint64(8, data.KeyParameters === null ? 0n : BigInt(util.toPointer(data.KeyParameters)), true);
  return buf;
}

export class SEC_TOKEN_BINDINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get MajorVersion(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get MinorVersion(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get KeyParametersSize(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set MajorVersion(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set MinorVersion(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set KeyParametersSize(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_PRESHAREDKEY (size: 16)
 */
export interface SEC_PRESHAREDKEY {
  /** u16 */
  KeySize: number;
  /** array */
  Key: Deno.PointerValue | null;
}

export const sizeofSEC_PRESHAREDKEY = 16;

export function allocSEC_PRESHAREDKEY(data?: Partial<SEC_PRESHAREDKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_PRESHAREDKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.KeySize !== undefined) view.setUint16(0, Number(data.KeySize), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Key !== undefined) view.setBigUint64(8, data.Key === null ? 0n : BigInt(util.toPointer(data.Key)), true);
  return buf;
}

export class SEC_PRESHAREDKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get KeySize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set KeySize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_PRESHAREDKEY_IDENTITY (size: 16)
 */
export interface SEC_PRESHAREDKEY_IDENTITY {
  /** u16 */
  KeyIdentitySize: number;
  /** array */
  KeyIdentity: Deno.PointerValue | null;
}

export const sizeofSEC_PRESHAREDKEY_IDENTITY = 16;

export function allocSEC_PRESHAREDKEY_IDENTITY(data?: Partial<SEC_PRESHAREDKEY_IDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_PRESHAREDKEY_IDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.KeyIdentitySize !== undefined) view.setUint16(0, Number(data.KeyIdentitySize), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.KeyIdentity !== undefined) view.setBigUint64(8, data.KeyIdentity === null ? 0n : BigInt(util.toPointer(data.KeyIdentity)), true);
  return buf;
}

export class SEC_PRESHAREDKEY_IDENTITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get KeyIdentitySize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get KeyIdentity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set KeyIdentitySize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set KeyIdentity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_DTLS_MTU (size: 8)
 */
export interface SEC_DTLS_MTU {
  /** u16 */
  PathMTU: number;
}

export const sizeofSEC_DTLS_MTU = 8;

export function allocSEC_DTLS_MTU(data?: Partial<SEC_DTLS_MTU>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_DTLS_MTU);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.PathMTU !== undefined) view.setUint16(0, Number(data.PathMTU), true);
  // 0x02: pad6
  return buf;
}

export class SEC_DTLS_MTUView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get PathMTU(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x00: u16
  set PathMTU(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_FLAGS (size: 8)
 */
export interface SEC_FLAGS {
  /** u64 */
  Flags: Deno.PointerValue;
}

export const sizeofSEC_FLAGS = 8;

export function allocSEC_FLAGS(data?: Partial<SEC_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Flags !== undefined) view.setBigUint64(0, BigInt(data.Flags), true);
  return buf;
}

export class SEC_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Flags(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: u64
  set Flags(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_TRAFFIC_SECRETS (size: 48)
 */
export interface SEC_TRAFFIC_SECRETS {
  /** array */
  SymmetricAlgId: Deno.PointerValue | null;
  /** array */
  ChainingMode: Deno.PointerValue | null;
  /** array */
  HashAlgId: Deno.PointerValue | null;
  /** u16 */
  KeySize: number;
  /** u16 */
  IvSize: number;
  /** u16 */
  MsgSequenceStart: number;
  /** u16 */
  MsgSequenceEnd: number;
  /** Windows.Win32.Security.Authentication.Identity.SEC_TRAFFIC_SECRET_TYPE */
  TrafficSecretType: SEC_TRAFFIC_SECRET_TYPE;
  /** u16 */
  TrafficSecretSize: number;
  /** array */
  TrafficSecret: Deno.PointerValue | null;
}

export const sizeofSEC_TRAFFIC_SECRETS = 48;

export function allocSEC_TRAFFIC_SECRETS(data?: Partial<SEC_TRAFFIC_SECRETS>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_TRAFFIC_SECRETS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SymmetricAlgId !== undefined) view.setBigUint64(0, data.SymmetricAlgId === null ? 0n : BigInt(util.toPointer(data.SymmetricAlgId)), true);
  // 0x08: pointer
  if (data?.ChainingMode !== undefined) view.setBigUint64(8, data.ChainingMode === null ? 0n : BigInt(util.toPointer(data.ChainingMode)), true);
  // 0x10: pointer
  if (data?.HashAlgId !== undefined) view.setBigUint64(16, data.HashAlgId === null ? 0n : BigInt(util.toPointer(data.HashAlgId)), true);
  // 0x18: u16
  if (data?.KeySize !== undefined) view.setUint16(24, Number(data.KeySize), true);
  // 0x1a: u16
  if (data?.IvSize !== undefined) view.setUint16(26, Number(data.IvSize), true);
  // 0x1c: u16
  if (data?.MsgSequenceStart !== undefined) view.setUint16(28, Number(data.MsgSequenceStart), true);
  // 0x1e: u16
  if (data?.MsgSequenceEnd !== undefined) view.setUint16(30, Number(data.MsgSequenceEnd), true);
  // 0x20: i32
  if (data?.TrafficSecretType !== undefined) view.setInt32(32, Number(data.TrafficSecretType), true);
  // 0x24: u16
  if (data?.TrafficSecretSize !== undefined) view.setUint16(36, Number(data.TrafficSecretSize), true);
  // 0x26: pad2
  // 0x28: pointer
  if (data?.TrafficSecret !== undefined) view.setBigUint64(40, data.TrafficSecret === null ? 0n : BigInt(util.toPointer(data.TrafficSecret)), true);
  return buf;
}

export class SEC_TRAFFIC_SECRETSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SymmetricAlgId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ChainingMode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get HashAlgId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u16
  get KeySize(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get IvSize(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: u16
  get MsgSequenceStart(): number {
    return this.view.getUint16(28, true);
  }

  // 0x1e: u16
  get MsgSequenceEnd(): number {
    return this.view.getUint16(30, true);
  }

  // 0x20: i32
  get TrafficSecretType(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u16
  get TrafficSecretSize(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: pad2

  // 0x28: pointer
  get TrafficSecret(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SymmetricAlgId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ChainingMode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set HashAlgId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u16
  set KeySize(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set IvSize(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: u16
  set MsgSequenceStart(value: number) {
    this.view.setUint16(28, value, true);
  }

  // 0x1e: u16
  set MsgSequenceEnd(value: number) {
    this.view.setUint16(30, value, true);
  }

  // 0x20: i32
  set TrafficSecretType(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u16
  set TrafficSecretSize(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: pad2

  // 0x28: pointer
  set TrafficSecret(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCredentials_NamesW (size: 8)
 */
export interface SecPkgCredentials_NamesW {
  /** ptr */
  sUserName: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgCredentials_NamesW = 8;

export function allocSecPkgCredentials_NamesW(data?: Partial<SecPkgCredentials_NamesW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCredentials_NamesW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sUserName !== undefined) view.setBigUint64(0, data.sUserName === null ? 0n : BigInt(util.toPointer(data.sUserName)), true);
  return buf;
}

export class SecPkgCredentials_NamesWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sUserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sUserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCredentials_NamesA (size: 8)
 */
export interface SecPkgCredentials_NamesA {
  /** ptr */
  sUserName: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgCredentials_NamesA = 8;

export function allocSecPkgCredentials_NamesA(data?: Partial<SecPkgCredentials_NamesA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCredentials_NamesA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sUserName !== undefined) view.setBigUint64(0, data.sUserName === null ? 0n : BigInt(util.toPointer(data.sUserName)), true);
  return buf;
}

export class SecPkgCredentials_NamesAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sUserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sUserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCredentials_SSIProviderW (size: 24)
 */
export interface SecPkgCredentials_SSIProviderW {
  /** ptr */
  sProviderName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ProviderInfoLength: number;
  /** Windows.Win32.Foundation.PSTR */
  ProviderInfo: string | null | Uint8Array;
}

export const sizeofSecPkgCredentials_SSIProviderW = 24;

export function allocSecPkgCredentials_SSIProviderW(data?: Partial<SecPkgCredentials_SSIProviderW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCredentials_SSIProviderW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sProviderName !== undefined) view.setBigUint64(0, data.sProviderName === null ? 0n : BigInt(util.toPointer(data.sProviderName)), true);
  // 0x08: u32
  if (data?.ProviderInfoLength !== undefined) view.setUint32(8, Number(data.ProviderInfoLength), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.ProviderInfo !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.ProviderInfo);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class SecPkgCredentials_SSIProviderWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sProviderName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ProviderInfoLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get ProviderInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sProviderName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ProviderInfoLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set ProviderInfo(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCredentials_SSIProviderA (size: 24)
 */
export interface SecPkgCredentials_SSIProviderA {
  /** ptr */
  sProviderName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ProviderInfoLength: number;
  /** Windows.Win32.Foundation.PSTR */
  ProviderInfo: string | null | Uint8Array;
}

export const sizeofSecPkgCredentials_SSIProviderA = 24;

export function allocSecPkgCredentials_SSIProviderA(data?: Partial<SecPkgCredentials_SSIProviderA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCredentials_SSIProviderA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sProviderName !== undefined) view.setBigUint64(0, data.sProviderName === null ? 0n : BigInt(util.toPointer(data.sProviderName)), true);
  // 0x08: u32
  if (data?.ProviderInfoLength !== undefined) view.setUint32(8, Number(data.ProviderInfoLength), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.ProviderInfo !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.ProviderInfo);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class SecPkgCredentials_SSIProviderAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sProviderName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ProviderInfoLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get ProviderInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sProviderName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ProviderInfoLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set ProviderInfo(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCredentials_KdcProxySettingsW (size: 16)
 */
export interface SecPkgCredentials_KdcProxySettingsW {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u16 */
  ProxyServerOffset: number;
  /** u16 */
  ProxyServerLength: number;
  /** u16 */
  ClientTlsCredOffset: number;
  /** u16 */
  ClientTlsCredLength: number;
}

export const sizeofSecPkgCredentials_KdcProxySettingsW = 16;

export function allocSecPkgCredentials_KdcProxySettingsW(data?: Partial<SecPkgCredentials_KdcProxySettingsW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCredentials_KdcProxySettingsW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u16
  if (data?.ProxyServerOffset !== undefined) view.setUint16(8, Number(data.ProxyServerOffset), true);
  // 0x0a: u16
  if (data?.ProxyServerLength !== undefined) view.setUint16(10, Number(data.ProxyServerLength), true);
  // 0x0c: u16
  if (data?.ClientTlsCredOffset !== undefined) view.setUint16(12, Number(data.ClientTlsCredOffset), true);
  // 0x0e: u16
  if (data?.ClientTlsCredLength !== undefined) view.setUint16(14, Number(data.ClientTlsCredLength), true);
  return buf;
}

export class SecPkgCredentials_KdcProxySettingsWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get ProxyServerOffset(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get ProxyServerLength(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get ClientTlsCredOffset(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get ClientTlsCredLength(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set ProxyServerOffset(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set ProxyServerLength(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set ClientTlsCredOffset(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set ClientTlsCredLength(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCredentials_Cert (size: 16)
 */
export interface SecPkgCredentials_Cert {
  /** u32 */
  EncodedCertSize: number;
  /** ptr */
  EncodedCert: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgCredentials_Cert = 16;

export function allocSecPkgCredentials_Cert(data?: Partial<SecPkgCredentials_Cert>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCredentials_Cert);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EncodedCertSize !== undefined) view.setUint32(0, Number(data.EncodedCertSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EncodedCert !== undefined) view.setBigUint64(8, data.EncodedCert === null ? 0n : BigInt(util.toPointer(data.EncodedCert)), true);
  return buf;
}

export class SecPkgCredentials_CertView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EncodedCertSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EncodedCert(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set EncodedCertSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EncodedCert(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SubjectAttributes (size: 8)
 */
export interface SecPkgContext_SubjectAttributes {
  /** ptr */
  AttributeInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_SubjectAttributes = 8;

export function allocSecPkgContext_SubjectAttributes(data?: Partial<SecPkgContext_SubjectAttributes>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SubjectAttributes);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AttributeInfo !== undefined) view.setBigUint64(0, data.AttributeInfo === null ? 0n : BigInt(util.toPointer(data.AttributeInfo)), true);
  return buf;
}

export class SecPkgContext_SubjectAttributesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AttributeInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set AttributeInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_CredInfo (size: 8)
 */
export interface SecPkgContext_CredInfo {
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_CRED_CLASS */
  CredClass: SECPKG_CRED_CLASS;
  /** u32 */
  IsPromptingNeeded: number;
}

export const sizeofSecPkgContext_CredInfo = 8;

export function allocSecPkgContext_CredInfo(data?: Partial<SecPkgContext_CredInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_CredInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CredClass !== undefined) view.setInt32(0, Number(data.CredClass), true);
  // 0x04: u32
  if (data?.IsPromptingNeeded !== undefined) view.setUint32(4, Number(data.IsPromptingNeeded), true);
  return buf;
}

export class SecPkgContext_CredInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get CredClass(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get IsPromptingNeeded(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set CredClass(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set IsPromptingNeeded(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NegoPackageInfo (size: 8)
 */
export interface SecPkgContext_NegoPackageInfo {
  /** u32 */
  PackageMask: number;
}

export const sizeofSecPkgContext_NegoPackageInfo = 8;

export function allocSecPkgContext_NegoPackageInfo(data?: Partial<SecPkgContext_NegoPackageInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NegoPackageInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PackageMask !== undefined) view.setUint32(0, Number(data.PackageMask), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgContext_NegoPackageInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PackageMask(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set PackageMask(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NegoStatus (size: 8)
 */
export interface SecPkgContext_NegoStatus {
  /** u32 */
  LastStatus: number;
}

export const sizeofSecPkgContext_NegoStatus = 8;

export function allocSecPkgContext_NegoStatus(data?: Partial<SecPkgContext_NegoStatus>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NegoStatus);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LastStatus !== undefined) view.setUint32(0, Number(data.LastStatus), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgContext_NegoStatusView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LastStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set LastStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_Sizes (size: 16)
 */
export interface SecPkgContext_Sizes {
  /** u32 */
  cbMaxToken: number;
  /** u32 */
  cbMaxSignature: number;
  /** u32 */
  cbBlockSize: number;
  /** u32 */
  cbSecurityTrailer: number;
}

export const sizeofSecPkgContext_Sizes = 16;

export function allocSecPkgContext_Sizes(data?: Partial<SecPkgContext_Sizes>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_Sizes);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbMaxToken !== undefined) view.setUint32(0, Number(data.cbMaxToken), true);
  // 0x04: u32
  if (data?.cbMaxSignature !== undefined) view.setUint32(4, Number(data.cbMaxSignature), true);
  // 0x08: u32
  if (data?.cbBlockSize !== undefined) view.setUint32(8, Number(data.cbBlockSize), true);
  // 0x0c: u32
  if (data?.cbSecurityTrailer !== undefined) view.setUint32(12, Number(data.cbSecurityTrailer), true);
  return buf;
}

export class SecPkgContext_SizesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbMaxToken(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbMaxSignature(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbBlockSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbSecurityTrailer(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set cbMaxToken(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbMaxSignature(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbBlockSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbSecurityTrailer(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_StreamSizes (size: 24)
 */
export interface SecPkgContext_StreamSizes {
  /** u32 */
  cbHeader: number;
  /** u32 */
  cbTrailer: number;
  /** u32 */
  cbMaximumMessage: number;
  /** u32 */
  cBuffers: number;
  /** u32 */
  cbBlockSize: number;
}

export const sizeofSecPkgContext_StreamSizes = 24;

export function allocSecPkgContext_StreamSizes(data?: Partial<SecPkgContext_StreamSizes>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_StreamSizes);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbHeader !== undefined) view.setUint32(0, Number(data.cbHeader), true);
  // 0x04: u32
  if (data?.cbTrailer !== undefined) view.setUint32(4, Number(data.cbTrailer), true);
  // 0x08: u32
  if (data?.cbMaximumMessage !== undefined) view.setUint32(8, Number(data.cbMaximumMessage), true);
  // 0x0c: u32
  if (data?.cBuffers !== undefined) view.setUint32(12, Number(data.cBuffers), true);
  // 0x10: u32
  if (data?.cbBlockSize !== undefined) view.setUint32(16, Number(data.cbBlockSize), true);
  // 0x14: pad4
  return buf;
}

export class SecPkgContext_StreamSizesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbHeader(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbTrailer(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbMaximumMessage(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cBuffers(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbBlockSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set cbHeader(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbTrailer(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbMaximumMessage(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cBuffers(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbBlockSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NamesW (size: 8)
 */
export interface SecPkgContext_NamesW {
  /** ptr */
  sUserName: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_NamesW = 8;

export function allocSecPkgContext_NamesW(data?: Partial<SecPkgContext_NamesW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NamesW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sUserName !== undefined) view.setBigUint64(0, data.sUserName === null ? 0n : BigInt(util.toPointer(data.sUserName)), true);
  return buf;
}

export class SecPkgContext_NamesWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sUserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sUserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_LastClientTokenStatus (size: 8)
 */
export interface SecPkgContext_LastClientTokenStatus {
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_ATTR_LCT_STATUS */
  LastClientTokenStatus: SECPKG_ATTR_LCT_STATUS;
}

export const sizeofSecPkgContext_LastClientTokenStatus = 8;

export function allocSecPkgContext_LastClientTokenStatus(data?: Partial<SecPkgContext_LastClientTokenStatus>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_LastClientTokenStatus);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LastClientTokenStatus !== undefined) view.setInt32(0, Number(data.LastClientTokenStatus), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgContext_LastClientTokenStatusView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get LastClientTokenStatus(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set LastClientTokenStatus(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NamesA (size: 8)
 */
export interface SecPkgContext_NamesA {
  /** ptr */
  sUserName: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_NamesA = 8;

export function allocSecPkgContext_NamesA(data?: Partial<SecPkgContext_NamesA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NamesA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sUserName !== undefined) view.setBigUint64(0, data.sUserName === null ? 0n : BigInt(util.toPointer(data.sUserName)), true);
  return buf;
}

export class SecPkgContext_NamesAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sUserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sUserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_Lifespan (size: 16)
 */
export interface SecPkgContext_Lifespan {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  tsStart: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  tsExpiry: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSecPkgContext_Lifespan = 16;

export function allocSecPkgContext_Lifespan(data?: Partial<SecPkgContext_Lifespan>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_Lifespan);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tsStart !== undefined) view.setBigUint64(0, data.tsStart === null ? 0n : BigInt(util.toPointer(data.tsStart)), true);
  // 0x08: pointer
  if (data?.tsExpiry !== undefined) view.setBigUint64(8, data.tsExpiry === null ? 0n : BigInt(util.toPointer(data.tsExpiry)), true);
  return buf;
}

export class SecPkgContext_LifespanView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get tsStart(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get tsExpiry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set tsStart(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set tsExpiry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_DceInfo (size: 16)
 */
export interface SecPkgContext_DceInfo {
  /** u32 */
  AuthzSvc: number;
  /** ptr */
  pPac: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_DceInfo = 16;

export function allocSecPkgContext_DceInfo(data?: Partial<SecPkgContext_DceInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_DceInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AuthzSvc !== undefined) view.setUint32(0, Number(data.AuthzSvc), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPac !== undefined) view.setBigUint64(8, data.pPac === null ? 0n : BigInt(util.toPointer(data.pPac)), true);
  return buf;
}

export class SecPkgContext_DceInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AuthzSvc(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pPac(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AuthzSvc(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pPac(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_KeyInfoA (size: 32)
 */
export interface SecPkgContext_KeyInfoA {
  /** ptr */
  sSignatureAlgorithmName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  sEncryptAlgorithmName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  KeySize: number;
  /** u32 */
  SignatureAlgorithm: number;
  /** u32 */
  EncryptAlgorithm: number;
}

export const sizeofSecPkgContext_KeyInfoA = 32;

export function allocSecPkgContext_KeyInfoA(data?: Partial<SecPkgContext_KeyInfoA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_KeyInfoA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sSignatureAlgorithmName !== undefined) view.setBigUint64(0, data.sSignatureAlgorithmName === null ? 0n : BigInt(util.toPointer(data.sSignatureAlgorithmName)), true);
  // 0x08: pointer
  if (data?.sEncryptAlgorithmName !== undefined) view.setBigUint64(8, data.sEncryptAlgorithmName === null ? 0n : BigInt(util.toPointer(data.sEncryptAlgorithmName)), true);
  // 0x10: u32
  if (data?.KeySize !== undefined) view.setUint32(16, Number(data.KeySize), true);
  // 0x14: u32
  if (data?.SignatureAlgorithm !== undefined) view.setUint32(20, Number(data.SignatureAlgorithm), true);
  // 0x18: u32
  if (data?.EncryptAlgorithm !== undefined) view.setUint32(24, Number(data.EncryptAlgorithm), true);
  // 0x1c: pad4
  return buf;
}

export class SecPkgContext_KeyInfoAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sSignatureAlgorithmName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get sEncryptAlgorithmName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get KeySize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get SignatureAlgorithm(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get EncryptAlgorithm(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set sSignatureAlgorithmName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set sEncryptAlgorithmName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set KeySize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set SignatureAlgorithm(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set EncryptAlgorithm(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_KeyInfoW (size: 32)
 */
export interface SecPkgContext_KeyInfoW {
  /** ptr */
  sSignatureAlgorithmName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  sEncryptAlgorithmName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  KeySize: number;
  /** u32 */
  SignatureAlgorithm: number;
  /** u32 */
  EncryptAlgorithm: number;
}

export const sizeofSecPkgContext_KeyInfoW = 32;

export function allocSecPkgContext_KeyInfoW(data?: Partial<SecPkgContext_KeyInfoW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_KeyInfoW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sSignatureAlgorithmName !== undefined) view.setBigUint64(0, data.sSignatureAlgorithmName === null ? 0n : BigInt(util.toPointer(data.sSignatureAlgorithmName)), true);
  // 0x08: pointer
  if (data?.sEncryptAlgorithmName !== undefined) view.setBigUint64(8, data.sEncryptAlgorithmName === null ? 0n : BigInt(util.toPointer(data.sEncryptAlgorithmName)), true);
  // 0x10: u32
  if (data?.KeySize !== undefined) view.setUint32(16, Number(data.KeySize), true);
  // 0x14: u32
  if (data?.SignatureAlgorithm !== undefined) view.setUint32(20, Number(data.SignatureAlgorithm), true);
  // 0x18: u32
  if (data?.EncryptAlgorithm !== undefined) view.setUint32(24, Number(data.EncryptAlgorithm), true);
  // 0x1c: pad4
  return buf;
}

export class SecPkgContext_KeyInfoWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sSignatureAlgorithmName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get sEncryptAlgorithmName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get KeySize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get SignatureAlgorithm(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get EncryptAlgorithm(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set sSignatureAlgorithmName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set sEncryptAlgorithmName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set KeySize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set SignatureAlgorithm(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set EncryptAlgorithm(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_AuthorityA (size: 8)
 */
export interface SecPkgContext_AuthorityA {
  /** ptr */
  sAuthorityName: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_AuthorityA = 8;

export function allocSecPkgContext_AuthorityA(data?: Partial<SecPkgContext_AuthorityA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_AuthorityA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sAuthorityName !== undefined) view.setBigUint64(0, data.sAuthorityName === null ? 0n : BigInt(util.toPointer(data.sAuthorityName)), true);
  return buf;
}

export class SecPkgContext_AuthorityAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sAuthorityName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sAuthorityName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_AuthorityW (size: 8)
 */
export interface SecPkgContext_AuthorityW {
  /** ptr */
  sAuthorityName: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_AuthorityW = 8;

export function allocSecPkgContext_AuthorityW(data?: Partial<SecPkgContext_AuthorityW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_AuthorityW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sAuthorityName !== undefined) view.setBigUint64(0, data.sAuthorityName === null ? 0n : BigInt(util.toPointer(data.sAuthorityName)), true);
  return buf;
}

export class SecPkgContext_AuthorityWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sAuthorityName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sAuthorityName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ProtoInfoA (size: 16)
 */
export interface SecPkgContext_ProtoInfoA {
  /** ptr */
  sProtocolName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  majorVersion: number;
  /** u32 */
  minorVersion: number;
}

export const sizeofSecPkgContext_ProtoInfoA = 16;

export function allocSecPkgContext_ProtoInfoA(data?: Partial<SecPkgContext_ProtoInfoA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ProtoInfoA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sProtocolName !== undefined) view.setBigUint64(0, data.sProtocolName === null ? 0n : BigInt(util.toPointer(data.sProtocolName)), true);
  // 0x08: u32
  if (data?.majorVersion !== undefined) view.setUint32(8, Number(data.majorVersion), true);
  // 0x0c: u32
  if (data?.minorVersion !== undefined) view.setUint32(12, Number(data.minorVersion), true);
  return buf;
}

export class SecPkgContext_ProtoInfoAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sProtocolName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get majorVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get minorVersion(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set sProtocolName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set majorVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set minorVersion(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ProtoInfoW (size: 16)
 */
export interface SecPkgContext_ProtoInfoW {
  /** ptr */
  sProtocolName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  majorVersion: number;
  /** u32 */
  minorVersion: number;
}

export const sizeofSecPkgContext_ProtoInfoW = 16;

export function allocSecPkgContext_ProtoInfoW(data?: Partial<SecPkgContext_ProtoInfoW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ProtoInfoW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sProtocolName !== undefined) view.setBigUint64(0, data.sProtocolName === null ? 0n : BigInt(util.toPointer(data.sProtocolName)), true);
  // 0x08: u32
  if (data?.majorVersion !== undefined) view.setUint32(8, Number(data.majorVersion), true);
  // 0x0c: u32
  if (data?.minorVersion !== undefined) view.setUint32(12, Number(data.minorVersion), true);
  return buf;
}

export class SecPkgContext_ProtoInfoWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sProtocolName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get majorVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get minorVersion(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set sProtocolName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set majorVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set minorVersion(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_PasswordExpiry (size: 8)
 */
export interface SecPkgContext_PasswordExpiry {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  tsPasswordExpires: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSecPkgContext_PasswordExpiry = 8;

export function allocSecPkgContext_PasswordExpiry(data?: Partial<SecPkgContext_PasswordExpiry>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_PasswordExpiry);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tsPasswordExpires !== undefined) view.setBigUint64(0, data.tsPasswordExpires === null ? 0n : BigInt(util.toPointer(data.tsPasswordExpires)), true);
  return buf;
}

export class SecPkgContext_PasswordExpiryView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get tsPasswordExpires(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set tsPasswordExpires(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_LogoffTime (size: 8)
 */
export interface SecPkgContext_LogoffTime {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  tsLogoffTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSecPkgContext_LogoffTime = 8;

export function allocSecPkgContext_LogoffTime(data?: Partial<SecPkgContext_LogoffTime>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_LogoffTime);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.tsLogoffTime !== undefined) view.setBigUint64(0, data.tsLogoffTime === null ? 0n : BigInt(util.toPointer(data.tsLogoffTime)), true);
  return buf;
}

export class SecPkgContext_LogoffTimeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get tsLogoffTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set tsLogoffTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SessionKey (size: 16)
 */
export interface SecPkgContext_SessionKey {
  /** u32 */
  SessionKeyLength: number;
  /** ptr */
  SessionKey: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_SessionKey = 16;

export function allocSecPkgContext_SessionKey(data?: Partial<SecPkgContext_SessionKey>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SessionKey);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionKeyLength !== undefined) view.setUint32(0, Number(data.SessionKeyLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SessionKey !== undefined) view.setBigUint64(8, data.SessionKey === null ? 0n : BigInt(util.toPointer(data.SessionKey)), true);
  return buf;
}

export class SecPkgContext_SessionKeyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SessionKeyLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SessionKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SessionKeyLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SessionKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NegoKeys (size: 32)
 */
export interface SecPkgContext_NegoKeys {
  /** u32 */
  KeyType: number;
  /** u16 */
  KeyLength: number;
  /** ptr */
  KeyValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  VerifyKeyType: number;
  /** u16 */
  VerifyKeyLength: number;
  /** ptr */
  VerifyKeyValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_NegoKeys = 32;

export function allocSecPkgContext_NegoKeys(data?: Partial<SecPkgContext_NegoKeys>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NegoKeys);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.KeyType !== undefined) view.setUint32(0, Number(data.KeyType), true);
  // 0x04: u16
  if (data?.KeyLength !== undefined) view.setUint16(4, Number(data.KeyLength), true);
  // 0x06: pad2
  // 0x08: pointer
  if (data?.KeyValue !== undefined) view.setBigUint64(8, data.KeyValue === null ? 0n : BigInt(util.toPointer(data.KeyValue)), true);
  // 0x10: u32
  if (data?.VerifyKeyType !== undefined) view.setUint32(16, Number(data.VerifyKeyType), true);
  // 0x14: u16
  if (data?.VerifyKeyLength !== undefined) view.setUint16(20, Number(data.VerifyKeyLength), true);
  // 0x16: pad2
  // 0x18: pointer
  if (data?.VerifyKeyValue !== undefined) view.setBigUint64(24, data.VerifyKeyValue === null ? 0n : BigInt(util.toPointer(data.VerifyKeyValue)), true);
  return buf;
}

export class SecPkgContext_NegoKeysView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get KeyType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get KeyLength(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  get KeyValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get VerifyKeyType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get VerifyKeyLength(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: pad2

  // 0x18: pointer
  get VerifyKeyValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set KeyType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set KeyLength(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2

  // 0x08: pointer
  set KeyValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set VerifyKeyType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set VerifyKeyLength(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: pad2

  // 0x18: pointer
  set VerifyKeyValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_PackageInfoW (size: 8)
 */
export interface SecPkgContext_PackageInfoW {
  /** ptr */
  PackageInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_PackageInfoW = 8;

export function allocSecPkgContext_PackageInfoW(data?: Partial<SecPkgContext_PackageInfoW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_PackageInfoW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PackageInfo !== undefined) view.setBigUint64(0, data.PackageInfo === null ? 0n : BigInt(util.toPointer(data.PackageInfo)), true);
  return buf;
}

export class SecPkgContext_PackageInfoWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PackageInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set PackageInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_PackageInfoA (size: 8)
 */
export interface SecPkgContext_PackageInfoA {
  /** ptr */
  PackageInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_PackageInfoA = 8;

export function allocSecPkgContext_PackageInfoA(data?: Partial<SecPkgContext_PackageInfoA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_PackageInfoA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PackageInfo !== undefined) view.setBigUint64(0, data.PackageInfo === null ? 0n : BigInt(util.toPointer(data.PackageInfo)), true);
  return buf;
}

export class SecPkgContext_PackageInfoAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PackageInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set PackageInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_UserFlags (size: 8)
 */
export interface SecPkgContext_UserFlags {
  /** u32 */
  UserFlags: number;
}

export const sizeofSecPkgContext_UserFlags = 8;

export function allocSecPkgContext_UserFlags(data?: Partial<SecPkgContext_UserFlags>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_UserFlags);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UserFlags !== undefined) view.setUint32(0, Number(data.UserFlags), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgContext_UserFlagsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UserFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set UserFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_Flags (size: 8)
 */
export interface SecPkgContext_Flags {
  /** u32 */
  Flags: number;
}

export const sizeofSecPkgContext_Flags = 8;

export function allocSecPkgContext_Flags(data?: Partial<SecPkgContext_Flags>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_Flags);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgContext_FlagsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NegotiationInfoA (size: 16)
 */
export interface SecPkgContext_NegotiationInfoA {
  /** ptr */
  PackageInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NegotiationState: number;
}

export const sizeofSecPkgContext_NegotiationInfoA = 16;

export function allocSecPkgContext_NegotiationInfoA(data?: Partial<SecPkgContext_NegotiationInfoA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NegotiationInfoA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PackageInfo !== undefined) view.setBigUint64(0, data.PackageInfo === null ? 0n : BigInt(util.toPointer(data.PackageInfo)), true);
  // 0x08: u32
  if (data?.NegotiationState !== undefined) view.setUint32(8, Number(data.NegotiationState), true);
  // 0x0c: pad4
  return buf;
}

export class SecPkgContext_NegotiationInfoAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PackageInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NegotiationState(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set PackageInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NegotiationState(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NegotiationInfoW (size: 16)
 */
export interface SecPkgContext_NegotiationInfoW {
  /** ptr */
  PackageInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NegotiationState: number;
}

export const sizeofSecPkgContext_NegotiationInfoW = 16;

export function allocSecPkgContext_NegotiationInfoW(data?: Partial<SecPkgContext_NegotiationInfoW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NegotiationInfoW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PackageInfo !== undefined) view.setBigUint64(0, data.PackageInfo === null ? 0n : BigInt(util.toPointer(data.PackageInfo)), true);
  // 0x08: u32
  if (data?.NegotiationState !== undefined) view.setUint32(8, Number(data.NegotiationState), true);
  // 0x0c: pad4
  return buf;
}

export class SecPkgContext_NegotiationInfoWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PackageInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get NegotiationState(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set PackageInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set NegotiationState(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NativeNamesW (size: 16)
 */
export interface SecPkgContext_NativeNamesW {
  /** ptr */
  sClientName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  sServerName: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_NativeNamesW = 16;

export function allocSecPkgContext_NativeNamesW(data?: Partial<SecPkgContext_NativeNamesW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NativeNamesW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sClientName !== undefined) view.setBigUint64(0, data.sClientName === null ? 0n : BigInt(util.toPointer(data.sClientName)), true);
  // 0x08: pointer
  if (data?.sServerName !== undefined) view.setBigUint64(8, data.sServerName === null ? 0n : BigInt(util.toPointer(data.sServerName)), true);
  return buf;
}

export class SecPkgContext_NativeNamesWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sClientName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get sServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sClientName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set sServerName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NativeNamesA (size: 16)
 */
export interface SecPkgContext_NativeNamesA {
  /** ptr */
  sClientName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  sServerName: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_NativeNamesA = 16;

export function allocSecPkgContext_NativeNamesA(data?: Partial<SecPkgContext_NativeNamesA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NativeNamesA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sClientName !== undefined) view.setBigUint64(0, data.sClientName === null ? 0n : BigInt(util.toPointer(data.sClientName)), true);
  // 0x08: pointer
  if (data?.sServerName !== undefined) view.setBigUint64(8, data.sServerName === null ? 0n : BigInt(util.toPointer(data.sServerName)), true);
  return buf;
}

export class SecPkgContext_NativeNamesAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sClientName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get sServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sClientName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set sServerName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_CredentialNameW (size: 16)
 */
export interface SecPkgContext_CredentialNameW {
  /** u32 */
  CredentialType: number;
  /** ptr */
  sCredentialName: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_CredentialNameW = 16;

export function allocSecPkgContext_CredentialNameW(data?: Partial<SecPkgContext_CredentialNameW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_CredentialNameW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CredentialType !== undefined) view.setUint32(0, Number(data.CredentialType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sCredentialName !== undefined) view.setBigUint64(8, data.sCredentialName === null ? 0n : BigInt(util.toPointer(data.sCredentialName)), true);
  return buf;
}

export class SecPkgContext_CredentialNameWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CredentialType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get sCredentialName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set CredentialType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set sCredentialName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_CredentialNameA (size: 16)
 */
export interface SecPkgContext_CredentialNameA {
  /** u32 */
  CredentialType: number;
  /** ptr */
  sCredentialName: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_CredentialNameA = 16;

export function allocSecPkgContext_CredentialNameA(data?: Partial<SecPkgContext_CredentialNameA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_CredentialNameA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CredentialType !== undefined) view.setUint32(0, Number(data.CredentialType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sCredentialName !== undefined) view.setBigUint64(8, data.sCredentialName === null ? 0n : BigInt(util.toPointer(data.sCredentialName)), true);
  return buf;
}

export class SecPkgContext_CredentialNameAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CredentialType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get sCredentialName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set CredentialType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set sCredentialName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_AccessToken (size: 8)
 */
export interface SecPkgContext_AccessToken {
  /** ptr */
  AccessToken: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_AccessToken = 8;

export function allocSecPkgContext_AccessToken(data?: Partial<SecPkgContext_AccessToken>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_AccessToken);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AccessToken !== undefined) view.setBigUint64(0, data.AccessToken === null ? 0n : BigInt(util.toPointer(data.AccessToken)), true);
  return buf;
}

export class SecPkgContext_AccessTokenView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AccessToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set AccessToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_TargetInformation (size: 16)
 */
export interface SecPkgContext_TargetInformation {
  /** u32 */
  MarshalledTargetInfoLength: number;
  /** ptr */
  MarshalledTargetInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_TargetInformation = 16;

export function allocSecPkgContext_TargetInformation(data?: Partial<SecPkgContext_TargetInformation>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_TargetInformation);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MarshalledTargetInfoLength !== undefined) view.setUint32(0, Number(data.MarshalledTargetInfoLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MarshalledTargetInfo !== undefined) view.setBigUint64(8, data.MarshalledTargetInfo === null ? 0n : BigInt(util.toPointer(data.MarshalledTargetInfo)), true);
  return buf;
}

export class SecPkgContext_TargetInformationView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MarshalledTargetInfoLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get MarshalledTargetInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set MarshalledTargetInfoLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set MarshalledTargetInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_AuthzID (size: 16)
 */
export interface SecPkgContext_AuthzID {
  /** u32 */
  AuthzIDLength: number;
  /** Windows.Win32.Foundation.PSTR */
  AuthzID: string | null | Uint8Array;
}

export const sizeofSecPkgContext_AuthzID = 16;

export function allocSecPkgContext_AuthzID(data?: Partial<SecPkgContext_AuthzID>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_AuthzID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AuthzIDLength !== undefined) view.setUint32(0, Number(data.AuthzIDLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.AuthzID !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.AuthzID);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class SecPkgContext_AuthzIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AuthzIDLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get AuthzID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AuthzIDLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set AuthzID(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_Target (size: 16)
 */
export interface SecPkgContext_Target {
  /** u32 */
  TargetLength: number;
  /** Windows.Win32.Foundation.PSTR */
  Target: string | null | Uint8Array;
}

export const sizeofSecPkgContext_Target = 16;

export function allocSecPkgContext_Target(data?: Partial<SecPkgContext_Target>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_Target);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TargetLength !== undefined) view.setUint32(0, Number(data.TargetLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Target !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Target);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class SecPkgContext_TargetView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TargetLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get Target(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set TargetLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set Target(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ClientSpecifiedTarget (size: 8)
 */
export interface SecPkgContext_ClientSpecifiedTarget {
  /** ptr */
  sTargetName: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_ClientSpecifiedTarget = 8;

export function allocSecPkgContext_ClientSpecifiedTarget(data?: Partial<SecPkgContext_ClientSpecifiedTarget>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ClientSpecifiedTarget);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sTargetName !== undefined) view.setBigUint64(0, data.sTargetName === null ? 0n : BigInt(util.toPointer(data.sTargetName)), true);
  return buf;
}

export class SecPkgContext_ClientSpecifiedTargetView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sTargetName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sTargetName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_Bindings (size: 16)
 */
export interface SecPkgContext_Bindings {
  /** u32 */
  BindingsLength: number;
  /** ptr */
  Bindings: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_Bindings = 16;

export function allocSecPkgContext_Bindings(data?: Partial<SecPkgContext_Bindings>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_Bindings);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BindingsLength !== undefined) view.setUint32(0, Number(data.BindingsLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Bindings !== undefined) view.setBigUint64(8, data.Bindings === null ? 0n : BigInt(util.toPointer(data.Bindings)), true);
  return buf;
}

export class SecPkgContext_BindingsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get BindingsLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Bindings(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set BindingsLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Bindings(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ApplicationProtocol (size: 24)
 */
export interface SecPkgContext_ApplicationProtocol {
  /** Windows.Win32.Security.Authentication.Identity.SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS */
  ProtoNegoStatus: SEC_APPLICATION_PROTOCOL_NEGOTIATION_STATUS;
  /** Windows.Win32.Security.Authentication.Identity.SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT */
  ProtoNegoExt: SEC_APPLICATION_PROTOCOL_NEGOTIATION_EXT;
  /** u8 */
  ProtocolIdSize: number;
  /** array */
  ProtocolId: Deno.PointerValue | null;
}

export const sizeofSecPkgContext_ApplicationProtocol = 24;

export function allocSecPkgContext_ApplicationProtocol(data?: Partial<SecPkgContext_ApplicationProtocol>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ApplicationProtocol);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ProtoNegoStatus !== undefined) view.setInt32(0, Number(data.ProtoNegoStatus), true);
  // 0x04: i32
  if (data?.ProtoNegoExt !== undefined) view.setInt32(4, Number(data.ProtoNegoExt), true);
  // 0x08: u8
  if (data?.ProtocolIdSize !== undefined) view.setUint8(8, Number(data.ProtocolIdSize));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.ProtocolId !== undefined) view.setBigUint64(16, data.ProtocolId === null ? 0n : BigInt(util.toPointer(data.ProtocolId)), true);
  return buf;
}

export class SecPkgContext_ApplicationProtocolView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ProtoNegoStatus(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get ProtoNegoExt(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u8
  get ProtocolIdSize(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get ProtocolId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set ProtoNegoStatus(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set ProtoNegoExt(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u8
  set ProtocolIdSize(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set ProtocolId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_NegotiatedTlsExtensions (size: 16)
 */
export interface SecPkgContext_NegotiatedTlsExtensions {
  /** u32 */
  ExtensionsCount: number;
  /** ptr */
  Extensions: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_NegotiatedTlsExtensions = 16;

export function allocSecPkgContext_NegotiatedTlsExtensions(data?: Partial<SecPkgContext_NegotiatedTlsExtensions>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_NegotiatedTlsExtensions);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ExtensionsCount !== undefined) view.setUint32(0, Number(data.ExtensionsCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Extensions !== undefined) view.setBigUint64(8, data.Extensions === null ? 0n : BigInt(util.toPointer(data.Extensions)), true);
  return buf;
}

export class SecPkgContext_NegotiatedTlsExtensionsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ExtensionsCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Extensions(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ExtensionsCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Extensions(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_APP_MODE_INFO (size: 40)
 */
export interface SECPKG_APP_MODE_INFO {
  /** u32 */
  UserFunction: number;
  /** usize */
  Argument1: Deno.PointerValue;
  /** usize */
  Argument2: Deno.PointerValue;
  /** Windows.Win32.Security.Authentication.Identity.SecBuffer */
  UserData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  ReturnToLsa: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_APP_MODE_INFO = 40;

export function allocSECPKG_APP_MODE_INFO(data?: Partial<SECPKG_APP_MODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_APP_MODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UserFunction !== undefined) view.setUint32(0, Number(data.UserFunction), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.Argument1 !== undefined) view.setBigUint64(8, BigInt(data.Argument1), true);
  // 0x10: usize
  if (data?.Argument2 !== undefined) view.setBigUint64(16, BigInt(data.Argument2), true);
  // 0x18: pointer
  if (data?.UserData !== undefined) view.setBigUint64(24, data.UserData === null ? 0n : BigInt(util.toPointer(data.UserData)), true);
  // 0x20: pointer
  if (data?.ReturnToLsa !== undefined) view.setBigUint64(32, data.ReturnToLsa === null ? 0n : BigInt(util.toPointer(data.ReturnToLsa)), true);
  return buf;
}

export class SECPKG_APP_MODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UserFunction(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get Argument1(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: usize
  get Argument2(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get UserData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ReturnToLsa(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set UserFunction(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set Argument1(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: usize
  set Argument2(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set UserData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ReturnToLsa(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecurityFunctionTableW (size: 256)
 */
export interface SecurityFunctionTableW {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Authentication.Identity.ENUMERATE_SECURITY_PACKAGES_FN_W */
  EnumerateSecurityPackagesW: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CREDENTIALS_ATTRIBUTES_FN_W */
  QueryCredentialsAttributesW: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.ACQUIRE_CREDENTIALS_HANDLE_FN_W */
  AcquireCredentialsHandleW: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.FREE_CREDENTIALS_HANDLE_FN */
  FreeCredentialsHandle: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved2: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Authentication.Identity.INITIALIZE_SECURITY_CONTEXT_FN_W */
  InitializeSecurityContextW: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.ACCEPT_SECURITY_CONTEXT_FN */
  AcceptSecurityContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.COMPLETE_AUTH_TOKEN_FN */
  CompleteAuthToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.DELETE_SECURITY_CONTEXT_FN */
  DeleteSecurityContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.APPLY_CONTROL_TOKEN_FN */
  ApplyControlToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CONTEXT_ATTRIBUTES_FN_W */
  QueryContextAttributesW: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.IMPERSONATE_SECURITY_CONTEXT_FN */
  ImpersonateSecurityContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.REVERT_SECURITY_CONTEXT_FN */
  RevertSecurityContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.MAKE_SIGNATURE_FN */
  MakeSignature: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.VERIFY_SIGNATURE_FN */
  VerifySignature: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.FREE_CONTEXT_BUFFER_FN */
  FreeContextBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_SECURITY_PACKAGE_INFO_FN_W */
  QuerySecurityPackageInfoW: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved3: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Reserved4: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Authentication.Identity.EXPORT_SECURITY_CONTEXT_FN */
  ExportSecurityContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.IMPORT_SECURITY_CONTEXT_FN_W */
  ImportSecurityContextW: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.ADD_CREDENTIALS_FN_W */
  AddCredentialsW: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved8: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_SECURITY_CONTEXT_TOKEN_FN */
  QuerySecurityContextToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.ENCRYPT_MESSAGE_FN */
  EncryptMessage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.DECRYPT_MESSAGE_FN */
  DecryptMessage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SET_CONTEXT_ATTRIBUTES_FN_W */
  SetContextAttributesW: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SET_CREDENTIALS_ATTRIBUTES_FN_W */
  SetCredentialsAttributesW: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.CHANGE_PASSWORD_FN_W */
  ChangeAccountPasswordW: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CONTEXT_ATTRIBUTES_EX_FN_W */
  QueryContextAttributesExW: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_W */
  QueryCredentialsAttributesExW: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSecurityFunctionTableW = 256;

export function allocSecurityFunctionTableW(data?: Partial<SecurityFunctionTableW>): Uint8Array {
  const buf = new Uint8Array(sizeofSecurityFunctionTableW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EnumerateSecurityPackagesW !== undefined) view.setBigUint64(8, data.EnumerateSecurityPackagesW === null ? 0n : BigInt(util.toPointer(data.EnumerateSecurityPackagesW)), true);
  // 0x10: pointer
  if (data?.QueryCredentialsAttributesW !== undefined) view.setBigUint64(16, data.QueryCredentialsAttributesW === null ? 0n : BigInt(util.toPointer(data.QueryCredentialsAttributesW)), true);
  // 0x18: pointer
  if (data?.AcquireCredentialsHandleW !== undefined) view.setBigUint64(24, data.AcquireCredentialsHandleW === null ? 0n : BigInt(util.toPointer(data.AcquireCredentialsHandleW)), true);
  // 0x20: pointer
  if (data?.FreeCredentialsHandle !== undefined) view.setBigUint64(32, data.FreeCredentialsHandle === null ? 0n : BigInt(util.toPointer(data.FreeCredentialsHandle)), true);
  // 0x28: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(40, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x30: pointer
  if (data?.InitializeSecurityContextW !== undefined) view.setBigUint64(48, data.InitializeSecurityContextW === null ? 0n : BigInt(util.toPointer(data.InitializeSecurityContextW)), true);
  // 0x38: pointer
  if (data?.AcceptSecurityContext !== undefined) view.setBigUint64(56, data.AcceptSecurityContext === null ? 0n : BigInt(util.toPointer(data.AcceptSecurityContext)), true);
  // 0x40: pointer
  if (data?.CompleteAuthToken !== undefined) view.setBigUint64(64, data.CompleteAuthToken === null ? 0n : BigInt(util.toPointer(data.CompleteAuthToken)), true);
  // 0x48: pointer
  if (data?.DeleteSecurityContext !== undefined) view.setBigUint64(72, data.DeleteSecurityContext === null ? 0n : BigInt(util.toPointer(data.DeleteSecurityContext)), true);
  // 0x50: pointer
  if (data?.ApplyControlToken !== undefined) view.setBigUint64(80, data.ApplyControlToken === null ? 0n : BigInt(util.toPointer(data.ApplyControlToken)), true);
  // 0x58: pointer
  if (data?.QueryContextAttributesW !== undefined) view.setBigUint64(88, data.QueryContextAttributesW === null ? 0n : BigInt(util.toPointer(data.QueryContextAttributesW)), true);
  // 0x60: pointer
  if (data?.ImpersonateSecurityContext !== undefined) view.setBigUint64(96, data.ImpersonateSecurityContext === null ? 0n : BigInt(util.toPointer(data.ImpersonateSecurityContext)), true);
  // 0x68: pointer
  if (data?.RevertSecurityContext !== undefined) view.setBigUint64(104, data.RevertSecurityContext === null ? 0n : BigInt(util.toPointer(data.RevertSecurityContext)), true);
  // 0x70: pointer
  if (data?.MakeSignature !== undefined) view.setBigUint64(112, data.MakeSignature === null ? 0n : BigInt(util.toPointer(data.MakeSignature)), true);
  // 0x78: pointer
  if (data?.VerifySignature !== undefined) view.setBigUint64(120, data.VerifySignature === null ? 0n : BigInt(util.toPointer(data.VerifySignature)), true);
  // 0x80: pointer
  if (data?.FreeContextBuffer !== undefined) view.setBigUint64(128, data.FreeContextBuffer === null ? 0n : BigInt(util.toPointer(data.FreeContextBuffer)), true);
  // 0x88: pointer
  if (data?.QuerySecurityPackageInfoW !== undefined) view.setBigUint64(136, data.QuerySecurityPackageInfoW === null ? 0n : BigInt(util.toPointer(data.QuerySecurityPackageInfoW)), true);
  // 0x90: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(144, data.Reserved3 === null ? 0n : BigInt(util.toPointer(data.Reserved3)), true);
  // 0x98: pointer
  if (data?.Reserved4 !== undefined) view.setBigUint64(152, data.Reserved4 === null ? 0n : BigInt(util.toPointer(data.Reserved4)), true);
  // 0xa0: pointer
  if (data?.ExportSecurityContext !== undefined) view.setBigUint64(160, data.ExportSecurityContext === null ? 0n : BigInt(util.toPointer(data.ExportSecurityContext)), true);
  // 0xa8: pointer
  if (data?.ImportSecurityContextW !== undefined) view.setBigUint64(168, data.ImportSecurityContextW === null ? 0n : BigInt(util.toPointer(data.ImportSecurityContextW)), true);
  // 0xb0: pointer
  if (data?.AddCredentialsW !== undefined) view.setBigUint64(176, data.AddCredentialsW === null ? 0n : BigInt(util.toPointer(data.AddCredentialsW)), true);
  // 0xb8: pointer
  if (data?.Reserved8 !== undefined) view.setBigUint64(184, data.Reserved8 === null ? 0n : BigInt(util.toPointer(data.Reserved8)), true);
  // 0xc0: pointer
  if (data?.QuerySecurityContextToken !== undefined) view.setBigUint64(192, data.QuerySecurityContextToken === null ? 0n : BigInt(util.toPointer(data.QuerySecurityContextToken)), true);
  // 0xc8: pointer
  if (data?.EncryptMessage !== undefined) view.setBigUint64(200, data.EncryptMessage === null ? 0n : BigInt(util.toPointer(data.EncryptMessage)), true);
  // 0xd0: pointer
  if (data?.DecryptMessage !== undefined) view.setBigUint64(208, data.DecryptMessage === null ? 0n : BigInt(util.toPointer(data.DecryptMessage)), true);
  // 0xd8: pointer
  if (data?.SetContextAttributesW !== undefined) view.setBigUint64(216, data.SetContextAttributesW === null ? 0n : BigInt(util.toPointer(data.SetContextAttributesW)), true);
  // 0xe0: pointer
  if (data?.SetCredentialsAttributesW !== undefined) view.setBigUint64(224, data.SetCredentialsAttributesW === null ? 0n : BigInt(util.toPointer(data.SetCredentialsAttributesW)), true);
  // 0xe8: pointer
  if (data?.ChangeAccountPasswordW !== undefined) view.setBigUint64(232, data.ChangeAccountPasswordW === null ? 0n : BigInt(util.toPointer(data.ChangeAccountPasswordW)), true);
  // 0xf0: pointer
  if (data?.QueryContextAttributesExW !== undefined) view.setBigUint64(240, data.QueryContextAttributesExW === null ? 0n : BigInt(util.toPointer(data.QueryContextAttributesExW)), true);
  // 0xf8: pointer
  if (data?.QueryCredentialsAttributesExW !== undefined) view.setBigUint64(248, data.QueryCredentialsAttributesExW === null ? 0n : BigInt(util.toPointer(data.QueryCredentialsAttributesExW)), true);
  return buf;
}

export class SecurityFunctionTableWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EnumerateSecurityPackagesW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get QueryCredentialsAttributesW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get AcquireCredentialsHandleW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get FreeCredentialsHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get InitializeSecurityContextW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get AcceptSecurityContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get CompleteAuthToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get DeleteSecurityContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get ApplyControlToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get QueryContextAttributesW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get ImpersonateSecurityContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get RevertSecurityContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get MakeSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get VerifySignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get FreeContextBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: pointer
  get QuerySecurityPackageInfoW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x90: pointer
  get Reserved3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: pointer
  get Reserved4(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: pointer
  get ExportSecurityContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(160, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa8: pointer
  get ImportSecurityContextW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(168, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb0: pointer
  get AddCredentialsW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(176, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb8: pointer
  get Reserved8(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(184, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc0: pointer
  get QuerySecurityContextToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(192, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc8: pointer
  get EncryptMessage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(200, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd0: pointer
  get DecryptMessage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(208, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd8: pointer
  get SetContextAttributesW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(216, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xe0: pointer
  get SetCredentialsAttributesW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(224, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xe8: pointer
  get ChangeAccountPasswordW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(232, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xf0: pointer
  get QueryContextAttributesExW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(240, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xf8: pointer
  get QueryCredentialsAttributesExW(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(248, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EnumerateSecurityPackagesW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set QueryCredentialsAttributesW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set AcquireCredentialsHandleW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set FreeCredentialsHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set InitializeSecurityContextW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set AcceptSecurityContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set CompleteAuthToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set DeleteSecurityContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set ApplyControlToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set QueryContextAttributesW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set ImpersonateSecurityContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set RevertSecurityContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set MakeSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set VerifySignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set FreeContextBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }

  // 0x88: pointer
  set QuerySecurityPackageInfoW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, BigInt(util.toPointer(value)), true);
  }

  // 0x90: pointer
  set Reserved3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, BigInt(util.toPointer(value)), true);
  }

  // 0x98: pointer
  set Reserved4(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, BigInt(util.toPointer(value)), true);
  }

  // 0xa0: pointer
  set ExportSecurityContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(160, BigInt(util.toPointer(value)), true);
  }

  // 0xa8: pointer
  set ImportSecurityContextW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(168, BigInt(util.toPointer(value)), true);
  }

  // 0xb0: pointer
  set AddCredentialsW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(176, BigInt(util.toPointer(value)), true);
  }

  // 0xb8: pointer
  set Reserved8(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(184, BigInt(util.toPointer(value)), true);
  }

  // 0xc0: pointer
  set QuerySecurityContextToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(192, BigInt(util.toPointer(value)), true);
  }

  // 0xc8: pointer
  set EncryptMessage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(200, BigInt(util.toPointer(value)), true);
  }

  // 0xd0: pointer
  set DecryptMessage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(208, BigInt(util.toPointer(value)), true);
  }

  // 0xd8: pointer
  set SetContextAttributesW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(216, BigInt(util.toPointer(value)), true);
  }

  // 0xe0: pointer
  set SetCredentialsAttributesW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(224, BigInt(util.toPointer(value)), true);
  }

  // 0xe8: pointer
  set ChangeAccountPasswordW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(232, BigInt(util.toPointer(value)), true);
  }

  // 0xf0: pointer
  set QueryContextAttributesExW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(240, BigInt(util.toPointer(value)), true);
  }

  // 0xf8: pointer
  set QueryCredentialsAttributesExW(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(248, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecurityFunctionTableA (size: 256)
 */
export interface SecurityFunctionTableA {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Authentication.Identity.ENUMERATE_SECURITY_PACKAGES_FN_A */
  EnumerateSecurityPackagesA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CREDENTIALS_ATTRIBUTES_FN_A */
  QueryCredentialsAttributesA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.ACQUIRE_CREDENTIALS_HANDLE_FN_A */
  AcquireCredentialsHandleA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.FREE_CREDENTIALS_HANDLE_FN */
  FreeCredentialsHandle: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved2: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Authentication.Identity.INITIALIZE_SECURITY_CONTEXT_FN_A */
  InitializeSecurityContextA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.ACCEPT_SECURITY_CONTEXT_FN */
  AcceptSecurityContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.COMPLETE_AUTH_TOKEN_FN */
  CompleteAuthToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.DELETE_SECURITY_CONTEXT_FN */
  DeleteSecurityContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.APPLY_CONTROL_TOKEN_FN */
  ApplyControlToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CONTEXT_ATTRIBUTES_FN_A */
  QueryContextAttributesA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.IMPERSONATE_SECURITY_CONTEXT_FN */
  ImpersonateSecurityContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.REVERT_SECURITY_CONTEXT_FN */
  RevertSecurityContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.MAKE_SIGNATURE_FN */
  MakeSignature: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.VERIFY_SIGNATURE_FN */
  VerifySignature: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.FREE_CONTEXT_BUFFER_FN */
  FreeContextBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_SECURITY_PACKAGE_INFO_FN_A */
  QuerySecurityPackageInfoA: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved3: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Reserved4: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Authentication.Identity.EXPORT_SECURITY_CONTEXT_FN */
  ExportSecurityContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.IMPORT_SECURITY_CONTEXT_FN_A */
  ImportSecurityContextA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.ADD_CREDENTIALS_FN_A */
  AddCredentialsA: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Reserved8: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_SECURITY_CONTEXT_TOKEN_FN */
  QuerySecurityContextToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.ENCRYPT_MESSAGE_FN */
  EncryptMessage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.DECRYPT_MESSAGE_FN */
  DecryptMessage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SET_CONTEXT_ATTRIBUTES_FN_A */
  SetContextAttributesA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SET_CREDENTIALS_ATTRIBUTES_FN_A */
  SetCredentialsAttributesA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.CHANGE_PASSWORD_FN_A */
  ChangeAccountPasswordA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CONTEXT_ATTRIBUTES_EX_FN_A */
  QueryContextAttributesExA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.QUERY_CREDENTIALS_ATTRIBUTES_EX_FN_A */
  QueryCredentialsAttributesExA: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSecurityFunctionTableA = 256;

export function allocSecurityFunctionTableA(data?: Partial<SecurityFunctionTableA>): Uint8Array {
  const buf = new Uint8Array(sizeofSecurityFunctionTableA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EnumerateSecurityPackagesA !== undefined) view.setBigUint64(8, data.EnumerateSecurityPackagesA === null ? 0n : BigInt(util.toPointer(data.EnumerateSecurityPackagesA)), true);
  // 0x10: pointer
  if (data?.QueryCredentialsAttributesA !== undefined) view.setBigUint64(16, data.QueryCredentialsAttributesA === null ? 0n : BigInt(util.toPointer(data.QueryCredentialsAttributesA)), true);
  // 0x18: pointer
  if (data?.AcquireCredentialsHandleA !== undefined) view.setBigUint64(24, data.AcquireCredentialsHandleA === null ? 0n : BigInt(util.toPointer(data.AcquireCredentialsHandleA)), true);
  // 0x20: pointer
  if (data?.FreeCredentialsHandle !== undefined) view.setBigUint64(32, data.FreeCredentialsHandle === null ? 0n : BigInt(util.toPointer(data.FreeCredentialsHandle)), true);
  // 0x28: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(40, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  // 0x30: pointer
  if (data?.InitializeSecurityContextA !== undefined) view.setBigUint64(48, data.InitializeSecurityContextA === null ? 0n : BigInt(util.toPointer(data.InitializeSecurityContextA)), true);
  // 0x38: pointer
  if (data?.AcceptSecurityContext !== undefined) view.setBigUint64(56, data.AcceptSecurityContext === null ? 0n : BigInt(util.toPointer(data.AcceptSecurityContext)), true);
  // 0x40: pointer
  if (data?.CompleteAuthToken !== undefined) view.setBigUint64(64, data.CompleteAuthToken === null ? 0n : BigInt(util.toPointer(data.CompleteAuthToken)), true);
  // 0x48: pointer
  if (data?.DeleteSecurityContext !== undefined) view.setBigUint64(72, data.DeleteSecurityContext === null ? 0n : BigInt(util.toPointer(data.DeleteSecurityContext)), true);
  // 0x50: pointer
  if (data?.ApplyControlToken !== undefined) view.setBigUint64(80, data.ApplyControlToken === null ? 0n : BigInt(util.toPointer(data.ApplyControlToken)), true);
  // 0x58: pointer
  if (data?.QueryContextAttributesA !== undefined) view.setBigUint64(88, data.QueryContextAttributesA === null ? 0n : BigInt(util.toPointer(data.QueryContextAttributesA)), true);
  // 0x60: pointer
  if (data?.ImpersonateSecurityContext !== undefined) view.setBigUint64(96, data.ImpersonateSecurityContext === null ? 0n : BigInt(util.toPointer(data.ImpersonateSecurityContext)), true);
  // 0x68: pointer
  if (data?.RevertSecurityContext !== undefined) view.setBigUint64(104, data.RevertSecurityContext === null ? 0n : BigInt(util.toPointer(data.RevertSecurityContext)), true);
  // 0x70: pointer
  if (data?.MakeSignature !== undefined) view.setBigUint64(112, data.MakeSignature === null ? 0n : BigInt(util.toPointer(data.MakeSignature)), true);
  // 0x78: pointer
  if (data?.VerifySignature !== undefined) view.setBigUint64(120, data.VerifySignature === null ? 0n : BigInt(util.toPointer(data.VerifySignature)), true);
  // 0x80: pointer
  if (data?.FreeContextBuffer !== undefined) view.setBigUint64(128, data.FreeContextBuffer === null ? 0n : BigInt(util.toPointer(data.FreeContextBuffer)), true);
  // 0x88: pointer
  if (data?.QuerySecurityPackageInfoA !== undefined) view.setBigUint64(136, data.QuerySecurityPackageInfoA === null ? 0n : BigInt(util.toPointer(data.QuerySecurityPackageInfoA)), true);
  // 0x90: pointer
  if (data?.Reserved3 !== undefined) view.setBigUint64(144, data.Reserved3 === null ? 0n : BigInt(util.toPointer(data.Reserved3)), true);
  // 0x98: pointer
  if (data?.Reserved4 !== undefined) view.setBigUint64(152, data.Reserved4 === null ? 0n : BigInt(util.toPointer(data.Reserved4)), true);
  // 0xa0: pointer
  if (data?.ExportSecurityContext !== undefined) view.setBigUint64(160, data.ExportSecurityContext === null ? 0n : BigInt(util.toPointer(data.ExportSecurityContext)), true);
  // 0xa8: pointer
  if (data?.ImportSecurityContextA !== undefined) view.setBigUint64(168, data.ImportSecurityContextA === null ? 0n : BigInt(util.toPointer(data.ImportSecurityContextA)), true);
  // 0xb0: pointer
  if (data?.AddCredentialsA !== undefined) view.setBigUint64(176, data.AddCredentialsA === null ? 0n : BigInt(util.toPointer(data.AddCredentialsA)), true);
  // 0xb8: pointer
  if (data?.Reserved8 !== undefined) view.setBigUint64(184, data.Reserved8 === null ? 0n : BigInt(util.toPointer(data.Reserved8)), true);
  // 0xc0: pointer
  if (data?.QuerySecurityContextToken !== undefined) view.setBigUint64(192, data.QuerySecurityContextToken === null ? 0n : BigInt(util.toPointer(data.QuerySecurityContextToken)), true);
  // 0xc8: pointer
  if (data?.EncryptMessage !== undefined) view.setBigUint64(200, data.EncryptMessage === null ? 0n : BigInt(util.toPointer(data.EncryptMessage)), true);
  // 0xd0: pointer
  if (data?.DecryptMessage !== undefined) view.setBigUint64(208, data.DecryptMessage === null ? 0n : BigInt(util.toPointer(data.DecryptMessage)), true);
  // 0xd8: pointer
  if (data?.SetContextAttributesA !== undefined) view.setBigUint64(216, data.SetContextAttributesA === null ? 0n : BigInt(util.toPointer(data.SetContextAttributesA)), true);
  // 0xe0: pointer
  if (data?.SetCredentialsAttributesA !== undefined) view.setBigUint64(224, data.SetCredentialsAttributesA === null ? 0n : BigInt(util.toPointer(data.SetCredentialsAttributesA)), true);
  // 0xe8: pointer
  if (data?.ChangeAccountPasswordA !== undefined) view.setBigUint64(232, data.ChangeAccountPasswordA === null ? 0n : BigInt(util.toPointer(data.ChangeAccountPasswordA)), true);
  // 0xf0: pointer
  if (data?.QueryContextAttributesExA !== undefined) view.setBigUint64(240, data.QueryContextAttributesExA === null ? 0n : BigInt(util.toPointer(data.QueryContextAttributesExA)), true);
  // 0xf8: pointer
  if (data?.QueryCredentialsAttributesExA !== undefined) view.setBigUint64(248, data.QueryCredentialsAttributesExA === null ? 0n : BigInt(util.toPointer(data.QueryCredentialsAttributesExA)), true);
  return buf;
}

export class SecurityFunctionTableAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EnumerateSecurityPackagesA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get QueryCredentialsAttributesA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get AcquireCredentialsHandleA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get FreeCredentialsHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get InitializeSecurityContextA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get AcceptSecurityContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get CompleteAuthToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get DeleteSecurityContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get ApplyControlToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get QueryContextAttributesA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get ImpersonateSecurityContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get RevertSecurityContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get MakeSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get VerifySignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get FreeContextBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: pointer
  get QuerySecurityPackageInfoA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x90: pointer
  get Reserved3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: pointer
  get Reserved4(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: pointer
  get ExportSecurityContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(160, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa8: pointer
  get ImportSecurityContextA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(168, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb0: pointer
  get AddCredentialsA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(176, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb8: pointer
  get Reserved8(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(184, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc0: pointer
  get QuerySecurityContextToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(192, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc8: pointer
  get EncryptMessage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(200, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd0: pointer
  get DecryptMessage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(208, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd8: pointer
  get SetContextAttributesA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(216, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xe0: pointer
  get SetCredentialsAttributesA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(224, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xe8: pointer
  get ChangeAccountPasswordA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(232, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xf0: pointer
  get QueryContextAttributesExA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(240, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xf8: pointer
  get QueryCredentialsAttributesExA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(248, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EnumerateSecurityPackagesA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set QueryCredentialsAttributesA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set AcquireCredentialsHandleA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set FreeCredentialsHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set InitializeSecurityContextA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set AcceptSecurityContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set CompleteAuthToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set DeleteSecurityContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set ApplyControlToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set QueryContextAttributesA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set ImpersonateSecurityContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set RevertSecurityContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set MakeSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set VerifySignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set FreeContextBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }

  // 0x88: pointer
  set QuerySecurityPackageInfoA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, BigInt(util.toPointer(value)), true);
  }

  // 0x90: pointer
  set Reserved3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, BigInt(util.toPointer(value)), true);
  }

  // 0x98: pointer
  set Reserved4(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, BigInt(util.toPointer(value)), true);
  }

  // 0xa0: pointer
  set ExportSecurityContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(160, BigInt(util.toPointer(value)), true);
  }

  // 0xa8: pointer
  set ImportSecurityContextA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(168, BigInt(util.toPointer(value)), true);
  }

  // 0xb0: pointer
  set AddCredentialsA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(176, BigInt(util.toPointer(value)), true);
  }

  // 0xb8: pointer
  set Reserved8(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(184, BigInt(util.toPointer(value)), true);
  }

  // 0xc0: pointer
  set QuerySecurityContextToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(192, BigInt(util.toPointer(value)), true);
  }

  // 0xc8: pointer
  set EncryptMessage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(200, BigInt(util.toPointer(value)), true);
  }

  // 0xd0: pointer
  set DecryptMessage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(208, BigInt(util.toPointer(value)), true);
  }

  // 0xd8: pointer
  set SetContextAttributesA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(216, BigInt(util.toPointer(value)), true);
  }

  // 0xe0: pointer
  set SetCredentialsAttributesA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(224, BigInt(util.toPointer(value)), true);
  }

  // 0xe8: pointer
  set ChangeAccountPasswordA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(232, BigInt(util.toPointer(value)), true);
  }

  // 0xf0: pointer
  set QueryContextAttributesExA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(240, BigInt(util.toPointer(value)), true);
  }

  // 0xf8: pointer
  set QueryCredentialsAttributesExA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(248, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EX2 (size: 40)
 */
export interface SEC_WINNT_AUTH_IDENTITY_EX2 {
  /** u32 */
  Version: number;
  /** u16 */
  cbHeaderLength: number;
  /** u32 */
  cbStructureLength: number;
  /** u32 */
  UserOffset: number;
  /** u16 */
  UserLength: number;
  /** u32 */
  DomainOffset: number;
  /** u16 */
  DomainLength: number;
  /** u32 */
  PackedCredentialsOffset: number;
  /** u16 */
  PackedCredentialsLength: number;
  /** u32 */
  Flags: number;
  /** u32 */
  PackageListOffset: number;
  /** u16 */
  PackageListLength: number;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_EX2 = 40;

export function allocSEC_WINNT_AUTH_IDENTITY_EX2(data?: Partial<SEC_WINNT_AUTH_IDENTITY_EX2>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_EX2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u16
  if (data?.cbHeaderLength !== undefined) view.setUint16(4, Number(data.cbHeaderLength), true);
  // 0x06: u32
  if (data?.cbStructureLength !== undefined) view.setUint32(6, Number(data.cbStructureLength), true);
  // 0x0a: u32
  if (data?.UserOffset !== undefined) view.setUint32(10, Number(data.UserOffset), true);
  // 0x0e: u16
  if (data?.UserLength !== undefined) view.setUint16(14, Number(data.UserLength), true);
  // 0x10: u32
  if (data?.DomainOffset !== undefined) view.setUint32(16, Number(data.DomainOffset), true);
  // 0x14: u16
  if (data?.DomainLength !== undefined) view.setUint16(20, Number(data.DomainLength), true);
  // 0x16: u32
  if (data?.PackedCredentialsOffset !== undefined) view.setUint32(22, Number(data.PackedCredentialsOffset), true);
  // 0x1a: u16
  if (data?.PackedCredentialsLength !== undefined) view.setUint16(26, Number(data.PackedCredentialsLength), true);
  // 0x1c: u32
  if (data?.Flags !== undefined) view.setUint32(28, Number(data.Flags), true);
  // 0x20: u32
  if (data?.PackageListOffset !== undefined) view.setUint32(32, Number(data.PackageListOffset), true);
  // 0x24: u16
  if (data?.PackageListLength !== undefined) view.setUint16(36, Number(data.PackageListLength), true);
  // 0x26: pad2
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_EX2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get cbHeaderLength(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u32
  get cbStructureLength(): number {
    return this.view.getUint32(6, true);
  }

  // 0x0a: u32
  get UserOffset(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: u16
  get UserLength(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u32
  get DomainOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u16
  get DomainLength(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u32
  get PackedCredentialsOffset(): number {
    return this.view.getUint32(22, true);
  }

  // 0x1a: u16
  get PackedCredentialsLength(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: u32
  get Flags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get PackageListOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u16
  get PackageListLength(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: pad2

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set cbHeaderLength(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u32
  set cbStructureLength(value: number) {
    this.view.setUint32(6, value, true);
  }

  // 0x0a: u32
  set UserOffset(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: u16
  set UserLength(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u32
  set DomainOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u16
  set DomainLength(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u32
  set PackedCredentialsOffset(value: number) {
    this.view.setUint32(22, value, true);
  }

  // 0x1a: u16
  set PackedCredentialsLength(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: u32
  set Flags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set PackageListOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u16
  set PackageListLength(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: pad2
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EXW (size: 72)
 */
export interface SEC_WINNT_AUTH_IDENTITY_EXW {
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** ptr */
  User: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  UserLength: number;
  /** ptr */
  Domain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  DomainLength: number;
  /** ptr */
  Password: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PasswordLength: number;
  /** u32 */
  Flags: number;
  /** ptr */
  PackageList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PackageListLength: number;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_EXW = 72;

export function allocSEC_WINNT_AUTH_IDENTITY_EXW(data?: Partial<SEC_WINNT_AUTH_IDENTITY_EXW>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_EXW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: pointer
  if (data?.User !== undefined) view.setBigUint64(8, data.User === null ? 0n : BigInt(util.toPointer(data.User)), true);
  // 0x10: u32
  if (data?.UserLength !== undefined) view.setUint32(16, Number(data.UserLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Domain !== undefined) view.setBigUint64(24, data.Domain === null ? 0n : BigInt(util.toPointer(data.Domain)), true);
  // 0x20: u32
  if (data?.DomainLength !== undefined) view.setUint32(32, Number(data.DomainLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Password !== undefined) view.setBigUint64(40, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x30: u32
  if (data?.PasswordLength !== undefined) view.setUint32(48, Number(data.PasswordLength), true);
  // 0x34: u32
  if (data?.Flags !== undefined) view.setUint32(52, Number(data.Flags), true);
  // 0x38: pointer
  if (data?.PackageList !== undefined) view.setBigUint64(56, data.PackageList === null ? 0n : BigInt(util.toPointer(data.PackageList)), true);
  // 0x40: u32
  if (data?.PackageListLength !== undefined) view.setUint32(64, Number(data.PackageListLength), true);
  // 0x44: pad4
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_EXWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get User(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get UserLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Domain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get DomainLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get PasswordLength(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get Flags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get PackageList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get PackageListLength(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set User(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set UserLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Domain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set DomainLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set PasswordLength(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set Flags(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set PackageList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set PackageListLength(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EXA (size: 72)
 */
export interface SEC_WINNT_AUTH_IDENTITY_EXA {
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** ptr */
  User: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  UserLength: number;
  /** ptr */
  Domain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  DomainLength: number;
  /** ptr */
  Password: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PasswordLength: number;
  /** u32 */
  Flags: number;
  /** ptr */
  PackageList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PackageListLength: number;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_EXA = 72;

export function allocSEC_WINNT_AUTH_IDENTITY_EXA(data?: Partial<SEC_WINNT_AUTH_IDENTITY_EXA>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_EXA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: pointer
  if (data?.User !== undefined) view.setBigUint64(8, data.User === null ? 0n : BigInt(util.toPointer(data.User)), true);
  // 0x10: u32
  if (data?.UserLength !== undefined) view.setUint32(16, Number(data.UserLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Domain !== undefined) view.setBigUint64(24, data.Domain === null ? 0n : BigInt(util.toPointer(data.Domain)), true);
  // 0x20: u32
  if (data?.DomainLength !== undefined) view.setUint32(32, Number(data.DomainLength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Password !== undefined) view.setBigUint64(40, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x30: u32
  if (data?.PasswordLength !== undefined) view.setUint32(48, Number(data.PasswordLength), true);
  // 0x34: u32
  if (data?.Flags !== undefined) view.setUint32(52, Number(data.Flags), true);
  // 0x38: pointer
  if (data?.PackageList !== undefined) view.setBigUint64(56, data.PackageList === null ? 0n : BigInt(util.toPointer(data.PackageList)), true);
  // 0x40: u32
  if (data?.PackageListLength !== undefined) view.setUint32(64, Number(data.PackageListLength), true);
  // 0x44: pad4
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_EXAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get User(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get UserLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Domain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get DomainLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get PasswordLength(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get Flags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get PackageList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get PackageListLength(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set User(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set UserLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Domain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set DomainLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set PasswordLength(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set Flags(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set PackageList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set PackageListLength(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY_A (size: 48)
 */
export interface SEC_WINNT_AUTH_IDENTITY_A {
  /** ptr */
  User: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  UserLength: number;
  /** ptr */
  Domain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  DomainLength: number;
  /** ptr */
  Password: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PasswordLength: number;
  /** Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY */
  Flags: SEC_WINNT_AUTH_IDENTITY;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_A = 48;

export function allocSEC_WINNT_AUTH_IDENTITY_A(data?: Partial<SEC_WINNT_AUTH_IDENTITY_A>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.User !== undefined) view.setBigUint64(0, data.User === null ? 0n : BigInt(util.toPointer(data.User)), true);
  // 0x08: u32
  if (data?.UserLength !== undefined) view.setUint32(8, Number(data.UserLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Domain !== undefined) view.setBigUint64(16, data.Domain === null ? 0n : BigInt(util.toPointer(data.Domain)), true);
  // 0x18: u32
  if (data?.DomainLength !== undefined) view.setUint32(24, Number(data.DomainLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Password !== undefined) view.setBigUint64(32, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x28: u32
  if (data?.PasswordLength !== undefined) view.setUint32(40, Number(data.PasswordLength), true);
  // 0x2c: u32
  if (data?.Flags !== undefined) view.setUint32(44, Number(data.Flags), true);
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get User(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get UserLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Domain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get DomainLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get PasswordLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Flags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set User(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set UserLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Domain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set DomainLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set PasswordLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Flags(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY_W (size: 48)
 */
export interface SEC_WINNT_AUTH_IDENTITY_W {
  /** ptr */
  User: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  UserLength: number;
  /** ptr */
  Domain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  DomainLength: number;
  /** ptr */
  Password: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PasswordLength: number;
  /** Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY */
  Flags: SEC_WINNT_AUTH_IDENTITY;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_W = 48;

export function allocSEC_WINNT_AUTH_IDENTITY_W(data?: Partial<SEC_WINNT_AUTH_IDENTITY_W>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.User !== undefined) view.setBigUint64(0, data.User === null ? 0n : BigInt(util.toPointer(data.User)), true);
  // 0x08: u32
  if (data?.UserLength !== undefined) view.setUint32(8, Number(data.UserLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Domain !== undefined) view.setBigUint64(16, data.Domain === null ? 0n : BigInt(util.toPointer(data.Domain)), true);
  // 0x18: u32
  if (data?.DomainLength !== undefined) view.setUint32(24, Number(data.DomainLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Password !== undefined) view.setBigUint64(32, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x28: u32
  if (data?.PasswordLength !== undefined) view.setUint32(40, Number(data.PasswordLength), true);
  // 0x2c: u32
  if (data?.Flags !== undefined) view.setUint32(44, Number(data.Flags), true);
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get User(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get UserLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Domain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get DomainLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get PasswordLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Flags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set User(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set UserLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Domain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set DomainLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set PasswordLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Flags(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_INFO (size: 40)
 */
export interface SEC_WINNT_AUTH_IDENTITY_INFO {
  /** Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EXW */
  AuthIdExw: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EXA */
  AuthIdExa: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY_A */
  AuthId_a: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Rpc.SEC_WINNT_AUTH_IDENTITY_W */
  AuthId_w: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EX2 */
  AuthIdEx2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_INFO = 40;

export function allocSEC_WINNT_AUTH_IDENTITY_INFO(data?: Partial<SEC_WINNT_AUTH_IDENTITY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AuthIdExw !== undefined) view.setBigUint64(0, data.AuthIdExw === null ? 0n : BigInt(util.toPointer(data.AuthIdExw)), true);
  // 0x08: pointer
  if (data?.AuthIdExa !== undefined) view.setBigUint64(8, data.AuthIdExa === null ? 0n : BigInt(util.toPointer(data.AuthIdExa)), true);
  // 0x10: pointer
  if (data?.AuthId_a !== undefined) view.setBigUint64(16, data.AuthId_a === null ? 0n : BigInt(util.toPointer(data.AuthId_a)), true);
  // 0x18: pointer
  if (data?.AuthId_w !== undefined) view.setBigUint64(24, data.AuthId_w === null ? 0n : BigInt(util.toPointer(data.AuthId_w)), true);
  // 0x20: pointer
  if (data?.AuthIdEx2 !== undefined) view.setBigUint64(32, data.AuthIdEx2 === null ? 0n : BigInt(util.toPointer(data.AuthIdEx2)), true);
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AuthIdExw(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get AuthIdExa(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AuthId_a(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get AuthId_w(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get AuthIdEx2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set AuthIdExw(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set AuthIdExa(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AuthId_a(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set AuthId_w(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set AuthIdEx2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECURITY_PACKAGE_OPTIONS (size: 24)
 */
export interface SECURITY_PACKAGE_OPTIONS {
  /** u32 */
  Size: number;
  /** Windows.Win32.Security.Authentication.Identity.SECURITY_PACKAGE_OPTIONS_TYPE */
  Type: SECURITY_PACKAGE_OPTIONS_TYPE;
  /** u32 */
  Flags: number;
  /** u32 */
  SignatureSize: number;
  /** ptr */
  Signature: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSECURITY_PACKAGE_OPTIONS = 24;

export function allocSECURITY_PACKAGE_OPTIONS(data?: Partial<SECURITY_PACKAGE_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_PACKAGE_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Type !== undefined) view.setUint32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.SignatureSize !== undefined) view.setUint32(12, Number(data.SignatureSize), true);
  // 0x10: pointer
  if (data?.Signature !== undefined) view.setBigUint64(16, data.Signature === null ? 0n : BigInt(util.toPointer(data.Signature)), true);
  return buf;
}

export class SECURITY_PACKAGE_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Type(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SignatureSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Signature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Type(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SignatureSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Signature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TOKEN_INFORMATION_NULL (size: 16)
 */
export interface LSA_TOKEN_INFORMATION_NULL {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ExpirationTime: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Groups: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLSA_TOKEN_INFORMATION_NULL = 16;

export function allocLSA_TOKEN_INFORMATION_NULL(data?: Partial<LSA_TOKEN_INFORMATION_NULL>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TOKEN_INFORMATION_NULL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExpirationTime !== undefined) view.setBigUint64(0, data.ExpirationTime === null ? 0n : BigInt(util.toPointer(data.ExpirationTime)), true);
  // 0x08: pointer
  if (data?.Groups !== undefined) view.setBigUint64(8, data.Groups === null ? 0n : BigInt(util.toPointer(data.Groups)), true);
  return buf;
}

export class LSA_TOKEN_INFORMATION_NULLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExpirationTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Groups(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ExpirationTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Groups(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.SID_AND_ATTRIBUTES (size: 16)
 */
export interface SID_AND_ATTRIBUTES {
  /** Windows.Win32.Foundation.PSID */
  Sid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Attributes: number;
}

export const sizeofSID_AND_ATTRIBUTES = 16;

export function allocSID_AND_ATTRIBUTES(data?: Partial<SID_AND_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofSID_AND_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Sid !== undefined) view.setBigUint64(0, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  // 0x08: u32
  if (data?.Attributes !== undefined) view.setUint32(8, Number(data.Attributes), true);
  // 0x0c: pad4
  return buf;
}

export class SID_AND_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Sid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Attributes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Sid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Attributes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.TOKEN_USER (size: 8)
 */
export interface TOKEN_USER {
  /** Windows.Win32.Security.SID_AND_ATTRIBUTES */
  User: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOKEN_USER = 8;

export function allocTOKEN_USER(data?: Partial<TOKEN_USER>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_USER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.User !== undefined) view.setBigUint64(0, data.User === null ? 0n : BigInt(util.toPointer(data.User)), true);
  return buf;
}

export class TOKEN_USERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get User(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set User(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_PRIMARY_GROUP (size: 8)
 */
export interface TOKEN_PRIMARY_GROUP {
  /** Windows.Win32.Foundation.PSID */
  PrimaryGroup: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOKEN_PRIMARY_GROUP = 8;

export function allocTOKEN_PRIMARY_GROUP(data?: Partial<TOKEN_PRIMARY_GROUP>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_PRIMARY_GROUP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PrimaryGroup !== undefined) view.setBigUint64(0, data.PrimaryGroup === null ? 0n : BigInt(util.toPointer(data.PrimaryGroup)), true);
  return buf;
}

export class TOKEN_PRIMARY_GROUPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PrimaryGroup(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set PrimaryGroup(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_OWNER (size: 8)
 */
export interface TOKEN_OWNER {
  /** Windows.Win32.Foundation.PSID */
  Owner: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOKEN_OWNER = 8;

export function allocTOKEN_OWNER(data?: Partial<TOKEN_OWNER>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_OWNER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Owner !== undefined) view.setBigUint64(0, data.Owner === null ? 0n : BigInt(util.toPointer(data.Owner)), true);
  return buf;
}

export class TOKEN_OWNERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Owner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Owner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_DEFAULT_DACL (size: 8)
 */
export interface TOKEN_DEFAULT_DACL {
  /** ptr */
  DefaultDacl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofTOKEN_DEFAULT_DACL = 8;

export function allocTOKEN_DEFAULT_DACL(data?: Partial<TOKEN_DEFAULT_DACL>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_DEFAULT_DACL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DefaultDacl !== undefined) view.setBigUint64(0, data.DefaultDacl === null ? 0n : BigInt(util.toPointer(data.DefaultDacl)), true);
  return buf;
}

export class TOKEN_DEFAULT_DACLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DefaultDacl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DefaultDacl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TOKEN_INFORMATION_V1 (size: 56)
 */
export interface LSA_TOKEN_INFORMATION_V1 {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ExpirationTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.TOKEN_USER */
  User: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Groups: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.TOKEN_PRIMARY_GROUP */
  PrimaryGroup: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Privileges: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.TOKEN_OWNER */
  Owner: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.TOKEN_DEFAULT_DACL */
  DefaultDacl: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLSA_TOKEN_INFORMATION_V1 = 56;

export function allocLSA_TOKEN_INFORMATION_V1(data?: Partial<LSA_TOKEN_INFORMATION_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TOKEN_INFORMATION_V1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExpirationTime !== undefined) view.setBigUint64(0, data.ExpirationTime === null ? 0n : BigInt(util.toPointer(data.ExpirationTime)), true);
  // 0x08: pointer
  if (data?.User !== undefined) view.setBigUint64(8, data.User === null ? 0n : BigInt(util.toPointer(data.User)), true);
  // 0x10: pointer
  if (data?.Groups !== undefined) view.setBigUint64(16, data.Groups === null ? 0n : BigInt(util.toPointer(data.Groups)), true);
  // 0x18: pointer
  if (data?.PrimaryGroup !== undefined) view.setBigUint64(24, data.PrimaryGroup === null ? 0n : BigInt(util.toPointer(data.PrimaryGroup)), true);
  // 0x20: pointer
  if (data?.Privileges !== undefined) view.setBigUint64(32, data.Privileges === null ? 0n : BigInt(util.toPointer(data.Privileges)), true);
  // 0x28: pointer
  if (data?.Owner !== undefined) view.setBigUint64(40, data.Owner === null ? 0n : BigInt(util.toPointer(data.Owner)), true);
  // 0x30: pointer
  if (data?.DefaultDacl !== undefined) view.setBigUint64(48, data.DefaultDacl === null ? 0n : BigInt(util.toPointer(data.DefaultDacl)), true);
  return buf;
}

export class LSA_TOKEN_INFORMATION_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExpirationTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get User(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Groups(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get PrimaryGroup(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Privileges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Owner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get DefaultDacl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ExpirationTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set User(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Groups(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set PrimaryGroup(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Privileges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Owner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set DefaultDacl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_USER_CLAIMS (size: 8)
 */
export interface TOKEN_USER_CLAIMS {
  /** ptr */
  UserClaims: Deno.PointerValue | Uint8Array | null;
}

export const sizeofTOKEN_USER_CLAIMS = 8;

export function allocTOKEN_USER_CLAIMS(data?: Partial<TOKEN_USER_CLAIMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_USER_CLAIMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UserClaims !== undefined) view.setBigUint64(0, data.UserClaims === null ? 0n : BigInt(util.toPointer(data.UserClaims)), true);
  return buf;
}

export class TOKEN_USER_CLAIMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get UserClaims(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set UserClaims(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_DEVICE_CLAIMS (size: 8)
 */
export interface TOKEN_DEVICE_CLAIMS {
  /** ptr */
  DeviceClaims: Deno.PointerValue | Uint8Array | null;
}

export const sizeofTOKEN_DEVICE_CLAIMS = 8;

export function allocTOKEN_DEVICE_CLAIMS(data?: Partial<TOKEN_DEVICE_CLAIMS>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_DEVICE_CLAIMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceClaims !== undefined) view.setBigUint64(0, data.DeviceClaims === null ? 0n : BigInt(util.toPointer(data.DeviceClaims)), true);
  return buf;
}

export class TOKEN_DEVICE_CLAIMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DeviceClaims(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DeviceClaims(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_TOKEN_INFORMATION_V3 (size: 80)
 */
export interface LSA_TOKEN_INFORMATION_V3 {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ExpirationTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.TOKEN_USER */
  User: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Groups: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.TOKEN_PRIMARY_GROUP */
  PrimaryGroup: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Privileges: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.TOKEN_OWNER */
  Owner: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.TOKEN_DEFAULT_DACL */
  DefaultDacl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.TOKEN_USER_CLAIMS */
  UserClaims: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.TOKEN_DEVICE_CLAIMS */
  DeviceClaims: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  DeviceGroups: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLSA_TOKEN_INFORMATION_V3 = 80;

export function allocLSA_TOKEN_INFORMATION_V3(data?: Partial<LSA_TOKEN_INFORMATION_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_TOKEN_INFORMATION_V3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExpirationTime !== undefined) view.setBigUint64(0, data.ExpirationTime === null ? 0n : BigInt(util.toPointer(data.ExpirationTime)), true);
  // 0x08: pointer
  if (data?.User !== undefined) view.setBigUint64(8, data.User === null ? 0n : BigInt(util.toPointer(data.User)), true);
  // 0x10: pointer
  if (data?.Groups !== undefined) view.setBigUint64(16, data.Groups === null ? 0n : BigInt(util.toPointer(data.Groups)), true);
  // 0x18: pointer
  if (data?.PrimaryGroup !== undefined) view.setBigUint64(24, data.PrimaryGroup === null ? 0n : BigInt(util.toPointer(data.PrimaryGroup)), true);
  // 0x20: pointer
  if (data?.Privileges !== undefined) view.setBigUint64(32, data.Privileges === null ? 0n : BigInt(util.toPointer(data.Privileges)), true);
  // 0x28: pointer
  if (data?.Owner !== undefined) view.setBigUint64(40, data.Owner === null ? 0n : BigInt(util.toPointer(data.Owner)), true);
  // 0x30: pointer
  if (data?.DefaultDacl !== undefined) view.setBigUint64(48, data.DefaultDacl === null ? 0n : BigInt(util.toPointer(data.DefaultDacl)), true);
  // 0x38: pointer
  if (data?.UserClaims !== undefined) view.setBigUint64(56, data.UserClaims === null ? 0n : BigInt(util.toPointer(data.UserClaims)), true);
  // 0x40: pointer
  if (data?.DeviceClaims !== undefined) view.setBigUint64(64, data.DeviceClaims === null ? 0n : BigInt(util.toPointer(data.DeviceClaims)), true);
  // 0x48: pointer
  if (data?.DeviceGroups !== undefined) view.setBigUint64(72, data.DeviceGroups === null ? 0n : BigInt(util.toPointer(data.DeviceGroups)), true);
  return buf;
}

export class LSA_TOKEN_INFORMATION_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExpirationTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get User(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Groups(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get PrimaryGroup(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Privileges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Owner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get DefaultDacl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get UserClaims(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get DeviceClaims(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get DeviceGroups(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ExpirationTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set User(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Groups(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set PrimaryGroup(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Privileges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Owner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set DefaultDacl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set UserClaims(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set DeviceClaims(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set DeviceGroups(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_DISPATCH_TABLE (size: 88)
 */
export interface LSA_DISPATCH_TABLE {
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CREATE_LOGON_SESSION */
  CreateLogonSession: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DELETE_LOGON_SESSION */
  DeleteLogonSession: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ADD_CREDENTIAL */
  AddCredential: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_CREDENTIALS */
  GetCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DELETE_CREDENTIAL */
  DeleteCredential: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_LSA_HEAP */
  AllocateLsaHeap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_LSA_HEAP */
  FreeLsaHeap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_CLIENT_BUFFER */
  AllocateClientBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_CLIENT_BUFFER */
  FreeClientBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_COPY_TO_CLIENT_BUFFER */
  CopyToClientBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_COPY_FROM_CLIENT_BUFFER */
  CopyFromClientBuffer: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLSA_DISPATCH_TABLE = 88;

export function allocLSA_DISPATCH_TABLE(data?: Partial<LSA_DISPATCH_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_DISPATCH_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CreateLogonSession !== undefined) view.setBigUint64(0, data.CreateLogonSession === null ? 0n : BigInt(util.toPointer(data.CreateLogonSession)), true);
  // 0x08: pointer
  if (data?.DeleteLogonSession !== undefined) view.setBigUint64(8, data.DeleteLogonSession === null ? 0n : BigInt(util.toPointer(data.DeleteLogonSession)), true);
  // 0x10: pointer
  if (data?.AddCredential !== undefined) view.setBigUint64(16, data.AddCredential === null ? 0n : BigInt(util.toPointer(data.AddCredential)), true);
  // 0x18: pointer
  if (data?.GetCredentials !== undefined) view.setBigUint64(24, data.GetCredentials === null ? 0n : BigInt(util.toPointer(data.GetCredentials)), true);
  // 0x20: pointer
  if (data?.DeleteCredential !== undefined) view.setBigUint64(32, data.DeleteCredential === null ? 0n : BigInt(util.toPointer(data.DeleteCredential)), true);
  // 0x28: pointer
  if (data?.AllocateLsaHeap !== undefined) view.setBigUint64(40, data.AllocateLsaHeap === null ? 0n : BigInt(util.toPointer(data.AllocateLsaHeap)), true);
  // 0x30: pointer
  if (data?.FreeLsaHeap !== undefined) view.setBigUint64(48, data.FreeLsaHeap === null ? 0n : BigInt(util.toPointer(data.FreeLsaHeap)), true);
  // 0x38: pointer
  if (data?.AllocateClientBuffer !== undefined) view.setBigUint64(56, data.AllocateClientBuffer === null ? 0n : BigInt(util.toPointer(data.AllocateClientBuffer)), true);
  // 0x40: pointer
  if (data?.FreeClientBuffer !== undefined) view.setBigUint64(64, data.FreeClientBuffer === null ? 0n : BigInt(util.toPointer(data.FreeClientBuffer)), true);
  // 0x48: pointer
  if (data?.CopyToClientBuffer !== undefined) view.setBigUint64(72, data.CopyToClientBuffer === null ? 0n : BigInt(util.toPointer(data.CopyToClientBuffer)), true);
  // 0x50: pointer
  if (data?.CopyFromClientBuffer !== undefined) view.setBigUint64(80, data.CopyFromClientBuffer === null ? 0n : BigInt(util.toPointer(data.CopyFromClientBuffer)), true);
  return buf;
}

export class LSA_DISPATCH_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CreateLogonSession(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DeleteLogonSession(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AddCredential(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get GetCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get DeleteCredential(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get AllocateLsaHeap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get FreeLsaHeap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get AllocateClientBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get FreeClientBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get CopyToClientBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get CopyFromClientBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set CreateLogonSession(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DeleteLogonSession(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AddCredential(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set GetCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set DeleteCredential(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set AllocateLsaHeap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set FreeLsaHeap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set AllocateClientBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set FreeClientBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set CopyToClientBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set CopyFromClientBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SAM_REGISTER_MAPPING_ELEMENT (size: 24)
 */
export interface SAM_REGISTER_MAPPING_ELEMENT {
  /** Windows.Win32.Foundation.PSTR */
  Original: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Mapped: string | null | Uint8Array;
  /** Windows.Win32.Foundation.BOOLEAN */
  Continuable: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSAM_REGISTER_MAPPING_ELEMENT = 24;

export function allocSAM_REGISTER_MAPPING_ELEMENT(data?: Partial<SAM_REGISTER_MAPPING_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSAM_REGISTER_MAPPING_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Original !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Original);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Mapped !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Mapped);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.Continuable !== undefined) view.setBigUint64(16, data.Continuable === null ? 0n : BigInt(util.toPointer(data.Continuable)), true);
  return buf;
}

export class SAM_REGISTER_MAPPING_ELEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Original(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Mapped(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Continuable(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set Original(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set Mapped(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set Continuable(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SAM_REGISTER_MAPPING_LIST (size: 16)
 */
export interface SAM_REGISTER_MAPPING_LIST {
  /** u32 */
  Count: number;
  /** ptr */
  Elements: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSAM_REGISTER_MAPPING_LIST = 16;

export function allocSAM_REGISTER_MAPPING_LIST(data?: Partial<SAM_REGISTER_MAPPING_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSAM_REGISTER_MAPPING_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Elements !== undefined) view.setBigUint64(8, data.Elements === null ? 0n : BigInt(util.toPointer(data.Elements)), true);
  return buf;
}

export class SAM_REGISTER_MAPPING_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Elements(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Elements(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SAM_REGISTER_MAPPING_TABLE (size: 16)
 */
export interface SAM_REGISTER_MAPPING_TABLE {
  /** u32 */
  Count: number;
  /** ptr */
  Lists: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSAM_REGISTER_MAPPING_TABLE = 16;

export function allocSAM_REGISTER_MAPPING_TABLE(data?: Partial<SAM_REGISTER_MAPPING_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofSAM_REGISTER_MAPPING_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Lists !== undefined) view.setBigUint64(8, data.Lists === null ? 0n : BigInt(util.toPointer(data.Lists)), true);
  return buf;
}

export class SAM_REGISTER_MAPPING_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Lists(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Lists(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CLIENT_INFO (size: 56)
 */
export interface SECPKG_CLIENT_INFO {
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProcessID: number;
  /** u32 */
  ThreadID: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  HasTcbPrivilege: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Impersonating: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Restricted: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  ClientFlags: number;
  /** Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL */
  ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL;
  /** Windows.Win32.Foundation.HANDLE */
  ClientToken: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_CLIENT_INFO = 56;

export function allocSECPKG_CLIENT_INFO(data?: Partial<SECPKG_CLIENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CLIENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(0, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x08: u32
  if (data?.ProcessID !== undefined) view.setUint32(8, Number(data.ProcessID), true);
  // 0x0c: u32
  if (data?.ThreadID !== undefined) view.setUint32(12, Number(data.ThreadID), true);
  // 0x10: pointer
  if (data?.HasTcbPrivilege !== undefined) view.setBigUint64(16, data.HasTcbPrivilege === null ? 0n : BigInt(util.toPointer(data.HasTcbPrivilege)), true);
  // 0x18: pointer
  if (data?.Impersonating !== undefined) view.setBigUint64(24, data.Impersonating === null ? 0n : BigInt(util.toPointer(data.Impersonating)), true);
  // 0x20: pointer
  if (data?.Restricted !== undefined) view.setBigUint64(32, data.Restricted === null ? 0n : BigInt(util.toPointer(data.Restricted)), true);
  // 0x28: u8
  if (data?.ClientFlags !== undefined) view.setUint8(40, Number(data.ClientFlags));
  // 0x29: i32
  if (data?.ImpersonationLevel !== undefined) view.setInt32(41, Number(data.ImpersonationLevel), true);
  // 0x2d: pad3
  // 0x30: pointer
  if (data?.ClientToken !== undefined) view.setBigUint64(48, data.ClientToken === null ? 0n : BigInt(util.toPointer(data.ClientToken)), true);
  return buf;
}

export class SECPKG_CLIENT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ProcessID(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ThreadID(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get HasTcbPrivilege(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Impersonating(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Restricted(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u8
  get ClientFlags(): number {
    return this.view.getUint8(40);
  }

  // 0x29: i32
  get ImpersonationLevel(): number {
    return this.view.getInt32(41, true);
  }

  // 0x2d: pad3

  // 0x30: pointer
  get ClientToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ProcessID(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ThreadID(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set HasTcbPrivilege(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Impersonating(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Restricted(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u8
  set ClientFlags(value: number) {
    this.view.setUint8(40, value);
  }

  // 0x29: i32
  set ImpersonationLevel(value: number) {
    this.view.setInt32(41, value, true);
  }

  // 0x2d: pad3

  // 0x30: pointer
  set ClientToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CALL_INFO (size: 24)
 */
export interface SECPKG_CALL_INFO {
  /** u32 */
  ProcessId: number;
  /** u32 */
  ThreadId: number;
  /** u32 */
  Attributes: number;
  /** u32 */
  CallCount: number;
  /** ptr */
  MechOid: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSECPKG_CALL_INFO = 24;

export function allocSECPKG_CALL_INFO(data?: Partial<SECPKG_CALL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CALL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProcessId !== undefined) view.setUint32(0, Number(data.ProcessId), true);
  // 0x04: u32
  if (data?.ThreadId !== undefined) view.setUint32(4, Number(data.ThreadId), true);
  // 0x08: u32
  if (data?.Attributes !== undefined) view.setUint32(8, Number(data.Attributes), true);
  // 0x0c: u32
  if (data?.CallCount !== undefined) view.setUint32(12, Number(data.CallCount), true);
  // 0x10: pointer
  if (data?.MechOid !== undefined) view.setBigUint64(16, data.MechOid === null ? 0n : BigInt(util.toPointer(data.MechOid)), true);
  return buf;
}

export class SECPKG_CALL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ProcessId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ThreadId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Attributes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get CallCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get MechOid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ProcessId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ThreadId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Attributes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set CallCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set MechOid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SUPPLEMENTAL_CRED (size: 24)
 */
export interface SECPKG_SUPPLEMENTAL_CRED {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  PackageName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CredentialSize: number;
  /** ptr */
  Credentials: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSECPKG_SUPPLEMENTAL_CRED = 24;

export function allocSECPKG_SUPPLEMENTAL_CRED(data?: Partial<SECPKG_SUPPLEMENTAL_CRED>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SUPPLEMENTAL_CRED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PackageName !== undefined) view.setBigUint64(0, data.PackageName === null ? 0n : BigInt(util.toPointer(data.PackageName)), true);
  // 0x08: u32
  if (data?.CredentialSize !== undefined) view.setUint32(8, Number(data.CredentialSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Credentials !== undefined) view.setBigUint64(16, data.Credentials === null ? 0n : BigInt(util.toPointer(data.Credentials)), true);
  return buf;
}

export class SECPKG_SUPPLEMENTAL_CREDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PackageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get CredentialSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Credentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set PackageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set CredentialSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Credentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_BYTE_VECTOR (size: 8)
 */
export interface SECPKG_BYTE_VECTOR {
  /** u32 */
  ByteArrayOffset: number;
  /** u16 */
  ByteArrayLength: number;
}

export const sizeofSECPKG_BYTE_VECTOR = 8;

export function allocSECPKG_BYTE_VECTOR(data?: Partial<SECPKG_BYTE_VECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_BYTE_VECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ByteArrayOffset !== undefined) view.setUint32(0, Number(data.ByteArrayOffset), true);
  // 0x04: u16
  if (data?.ByteArrayLength !== undefined) view.setUint16(4, Number(data.ByteArrayLength), true);
  // 0x06: pad2
  return buf;
}

export class SECPKG_BYTE_VECTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ByteArrayOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get ByteArrayLength(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u32
  set ByteArrayOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set ByteArrayLength(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SHORT_VECTOR (size: 8)
 */
export interface SECPKG_SHORT_VECTOR {
  /** u32 */
  ShortArrayOffset: number;
  /** u16 */
  ShortArrayCount: number;
}

export const sizeofSECPKG_SHORT_VECTOR = 8;

export function allocSECPKG_SHORT_VECTOR(data?: Partial<SECPKG_SHORT_VECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SHORT_VECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ShortArrayOffset !== undefined) view.setUint32(0, Number(data.ShortArrayOffset), true);
  // 0x04: u16
  if (data?.ShortArrayCount !== undefined) view.setUint16(4, Number(data.ShortArrayCount), true);
  // 0x06: pad2
  return buf;
}

export class SECPKG_SHORT_VECTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ShortArrayOffset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get ShortArrayCount(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: u32
  set ShortArrayOffset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set ShortArrayCount(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SUPPLIED_CREDENTIAL (size: 40)
 */
export interface SECPKG_SUPPLIED_CREDENTIAL {
  /** u16 */
  cbHeaderLength: number;
  /** u16 */
  cbStructureLength: number;
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_SHORT_VECTOR */
  UserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_SHORT_VECTOR */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_BYTE_VECTOR */
  PackedCredentials: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  CredFlags: number;
}

export const sizeofSECPKG_SUPPLIED_CREDENTIAL = 40;

export function allocSECPKG_SUPPLIED_CREDENTIAL(data?: Partial<SECPKG_SUPPLIED_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SUPPLIED_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbHeaderLength !== undefined) view.setUint16(0, Number(data.cbHeaderLength), true);
  // 0x02: u16
  if (data?.cbStructureLength !== undefined) view.setUint16(2, Number(data.cbStructureLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UserName !== undefined) view.setBigUint64(8, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x18: pointer
  if (data?.PackedCredentials !== undefined) view.setBigUint64(24, data.PackedCredentials === null ? 0n : BigInt(util.toPointer(data.PackedCredentials)), true);
  // 0x20: u32
  if (data?.CredFlags !== undefined) view.setUint32(32, Number(data.CredFlags), true);
  // 0x24: pad4
  return buf;
}

export class SECPKG_SUPPLIED_CREDENTIALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbHeaderLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get cbStructureLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get PackedCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get CredFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u16
  set cbHeaderLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set cbStructureLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set PackedCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set CredFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CREDENTIAL (size: 88)
 */
export interface SECPKG_CREDENTIAL {
  /** u64 */
  Version: Deno.PointerValue;
  /** u16 */
  cbHeaderLength: number;
  /** u32 */
  cbStructureLength: number;
  /** u32 */
  ClientProcess: number;
  /** u32 */
  ClientThread: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  ClientToken: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SessionId: number;
  /** Windows.Win32.Foundation.LUID */
  ModifiedId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  fCredentials: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_BYTE_VECTOR */
  PrincipalName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_BYTE_VECTOR */
  PackageList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_BYTE_VECTOR */
  MarshaledSuppliedCreds: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_CREDENTIAL = 88;

export function allocSECPKG_CREDENTIAL(data?: Partial<SECPKG_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Version !== undefined) view.setBigUint64(0, BigInt(data.Version), true);
  // 0x08: u16
  if (data?.cbHeaderLength !== undefined) view.setUint16(8, Number(data.cbHeaderLength), true);
  // 0x0a: u32
  if (data?.cbStructureLength !== undefined) view.setUint32(10, Number(data.cbStructureLength), true);
  // 0x0e: u32
  if (data?.ClientProcess !== undefined) view.setUint32(14, Number(data.ClientProcess), true);
  // 0x12: u32
  if (data?.ClientThread !== undefined) view.setUint32(18, Number(data.ClientThread), true);
  // 0x16: pad2
  // 0x18: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(24, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x20: pointer
  if (data?.ClientToken !== undefined) view.setBigUint64(32, data.ClientToken === null ? 0n : BigInt(util.toPointer(data.ClientToken)), true);
  // 0x28: u32
  if (data?.SessionId !== undefined) view.setUint32(40, Number(data.SessionId), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ModifiedId !== undefined) view.setBigUint64(48, data.ModifiedId === null ? 0n : BigInt(util.toPointer(data.ModifiedId)), true);
  // 0x38: u32
  if (data?.fCredentials !== undefined) view.setUint32(56, Number(data.fCredentials), true);
  // 0x3c: u32
  if (data?.Flags !== undefined) view.setUint32(60, Number(data.Flags), true);
  // 0x40: pointer
  if (data?.PrincipalName !== undefined) view.setBigUint64(64, data.PrincipalName === null ? 0n : BigInt(util.toPointer(data.PrincipalName)), true);
  // 0x48: pointer
  if (data?.PackageList !== undefined) view.setBigUint64(72, data.PackageList === null ? 0n : BigInt(util.toPointer(data.PackageList)), true);
  // 0x50: pointer
  if (data?.MarshaledSuppliedCreds !== undefined) view.setBigUint64(80, data.MarshaledSuppliedCreds === null ? 0n : BigInt(util.toPointer(data.MarshaledSuppliedCreds)), true);
  return buf;
}

export class SECPKG_CREDENTIALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Version(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u16
  get cbHeaderLength(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u32
  get cbStructureLength(): number {
    return this.view.getUint32(10, true);
  }

  // 0x0e: u32
  get ClientProcess(): number {
    return this.view.getUint32(14, true);
  }

  // 0x12: u32
  get ClientThread(): number {
    return this.view.getUint32(18, true);
  }

  // 0x16: pad2

  // 0x18: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ClientToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get SessionId(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ModifiedId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get fCredentials(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Flags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get PrincipalName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get PackageList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get MarshaledSuppliedCreds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Version(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u16
  set cbHeaderLength(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u32
  set cbStructureLength(value: number) {
    this.view.setUint32(10, value, true);
  }

  // 0x0e: u32
  set ClientProcess(value: number) {
    this.view.setUint32(14, value, true);
  }

  // 0x12: u32
  set ClientThread(value: number) {
    this.view.setUint32(18, value, true);
  }

  // 0x16: pad2

  // 0x18: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ClientToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set SessionId(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ModifiedId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set fCredentials(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Flags(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set PrincipalName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set PackageList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set MarshaledSuppliedCreds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SUPPLEMENTAL_CRED_ARRAY (size: 16)
 */
export interface SECPKG_SUPPLEMENTAL_CRED_ARRAY {
  /** u32 */
  CredentialCount: number;
  /** array */
  Credentials: Deno.PointerValue | null;
}

export const sizeofSECPKG_SUPPLEMENTAL_CRED_ARRAY = 16;

export function allocSECPKG_SUPPLEMENTAL_CRED_ARRAY(data?: Partial<SECPKG_SUPPLEMENTAL_CRED_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SUPPLEMENTAL_CRED_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CredentialCount !== undefined) view.setUint32(0, Number(data.CredentialCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Credentials !== undefined) view.setBigUint64(8, data.Credentials === null ? 0n : BigInt(util.toPointer(data.Credentials)), true);
  return buf;
}

export class SECPKG_SUPPLEMENTAL_CRED_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CredentialCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Credentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set CredentialCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Credentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SURROGATE_LOGON_ENTRY (size: 16)
 */
export interface SECPKG_SURROGATE_LOGON_ENTRY {
  /** System.Guid */
  Type: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSECPKG_SURROGATE_LOGON_ENTRY = 16;

export function allocSECPKG_SURROGATE_LOGON_ENTRY(data?: Partial<SECPKG_SURROGATE_LOGON_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SURROGATE_LOGON_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Type !== undefined) view.setBigUint64(0, data.Type === null ? 0n : BigInt(util.toPointer(data.Type)), true);
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class SECPKG_SURROGATE_LOGON_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Type(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Type(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SURROGATE_LOGON (size: 32)
 */
export interface SECPKG_SURROGATE_LOGON {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.LUID */
  SurrogateLogonID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EntryCount: number;
  /** ptr */
  Entries: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSECPKG_SURROGATE_LOGON = 32;

export function allocSECPKG_SURROGATE_LOGON(data?: Partial<SECPKG_SURROGATE_LOGON>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SURROGATE_LOGON);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SurrogateLogonID !== undefined) view.setBigUint64(8, data.SurrogateLogonID === null ? 0n : BigInt(util.toPointer(data.SurrogateLogonID)), true);
  // 0x10: u32
  if (data?.EntryCount !== undefined) view.setUint32(16, Number(data.EntryCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Entries !== undefined) view.setBigUint64(24, data.Entries === null ? 0n : BigInt(util.toPointer(data.Entries)), true);
  return buf;
}

export class SECPKG_SURROGATE_LOGONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SurrogateLogonID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get EntryCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Entries(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SurrogateLogonID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set EntryCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Entries(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_PRIMARY_CRED (size: 112)
 */
export interface SECPKG_PRIMARY_CRED {
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DownlevelName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  OldPassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSID */
  UserSid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsDomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Upn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare3: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare4: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_PRIMARY_CRED = 112;

export function allocSECPKG_PRIMARY_CRED(data?: Partial<SECPKG_PRIMARY_CRED>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_PRIMARY_CRED);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(0, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x08: pointer
  if (data?.DownlevelName !== undefined) view.setBigUint64(8, data.DownlevelName === null ? 0n : BigInt(util.toPointer(data.DownlevelName)), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x18: pointer
  if (data?.Password !== undefined) view.setBigUint64(24, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x20: pointer
  if (data?.OldPassword !== undefined) view.setBigUint64(32, data.OldPassword === null ? 0n : BigInt(util.toPointer(data.OldPassword)), true);
  // 0x28: pointer
  if (data?.UserSid !== undefined) view.setBigUint64(40, data.UserSid === null ? 0n : BigInt(util.toPointer(data.UserSid)), true);
  // 0x30: u32
  if (data?.Flags !== undefined) view.setUint32(48, Number(data.Flags), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.DnsDomainName !== undefined) view.setBigUint64(56, data.DnsDomainName === null ? 0n : BigInt(util.toPointer(data.DnsDomainName)), true);
  // 0x40: pointer
  if (data?.Upn !== undefined) view.setBigUint64(64, data.Upn === null ? 0n : BigInt(util.toPointer(data.Upn)), true);
  // 0x48: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(72, data.LogonServer === null ? 0n : BigInt(util.toPointer(data.LogonServer)), true);
  // 0x50: pointer
  if (data?.Spare1 !== undefined) view.setBigUint64(80, data.Spare1 === null ? 0n : BigInt(util.toPointer(data.Spare1)), true);
  // 0x58: pointer
  if (data?.Spare2 !== undefined) view.setBigUint64(88, data.Spare2 === null ? 0n : BigInt(util.toPointer(data.Spare2)), true);
  // 0x60: pointer
  if (data?.Spare3 !== undefined) view.setBigUint64(96, data.Spare3 === null ? 0n : BigInt(util.toPointer(data.Spare3)), true);
  // 0x68: pointer
  if (data?.Spare4 !== undefined) view.setBigUint64(104, data.Spare4 === null ? 0n : BigInt(util.toPointer(data.Spare4)), true);
  return buf;
}

export class SECPKG_PRIMARY_CREDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DownlevelName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get OldPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UserSid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get Flags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get DnsDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get Upn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get Spare1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get Spare2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get Spare3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get Spare4(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DownlevelName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set OldPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UserSid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set Flags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set Upn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set Spare1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set Spare2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set Spare3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set Spare4(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_PRIMARY_CRED_EX (size: 136)
 */
export interface SECPKG_PRIMARY_CRED_EX {
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DownlevelName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Password: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  OldPassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSID */
  UserSid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsDomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Upn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare3: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Spare4: Uint8Array | Deno.PointerValue | null;
  /** usize */
  PackageId: Deno.PointerValue;
  /** Windows.Win32.Foundation.LUID */
  PrevLogonId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  FlagsEx: number;
}

export const sizeofSECPKG_PRIMARY_CRED_EX = 136;

export function allocSECPKG_PRIMARY_CRED_EX(data?: Partial<SECPKG_PRIMARY_CRED_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_PRIMARY_CRED_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(0, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x08: pointer
  if (data?.DownlevelName !== undefined) view.setBigUint64(8, data.DownlevelName === null ? 0n : BigInt(util.toPointer(data.DownlevelName)), true);
  // 0x10: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(16, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x18: pointer
  if (data?.Password !== undefined) view.setBigUint64(24, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x20: pointer
  if (data?.OldPassword !== undefined) view.setBigUint64(32, data.OldPassword === null ? 0n : BigInt(util.toPointer(data.OldPassword)), true);
  // 0x28: pointer
  if (data?.UserSid !== undefined) view.setBigUint64(40, data.UserSid === null ? 0n : BigInt(util.toPointer(data.UserSid)), true);
  // 0x30: u32
  if (data?.Flags !== undefined) view.setUint32(48, Number(data.Flags), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.DnsDomainName !== undefined) view.setBigUint64(56, data.DnsDomainName === null ? 0n : BigInt(util.toPointer(data.DnsDomainName)), true);
  // 0x40: pointer
  if (data?.Upn !== undefined) view.setBigUint64(64, data.Upn === null ? 0n : BigInt(util.toPointer(data.Upn)), true);
  // 0x48: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(72, data.LogonServer === null ? 0n : BigInt(util.toPointer(data.LogonServer)), true);
  // 0x50: pointer
  if (data?.Spare1 !== undefined) view.setBigUint64(80, data.Spare1 === null ? 0n : BigInt(util.toPointer(data.Spare1)), true);
  // 0x58: pointer
  if (data?.Spare2 !== undefined) view.setBigUint64(88, data.Spare2 === null ? 0n : BigInt(util.toPointer(data.Spare2)), true);
  // 0x60: pointer
  if (data?.Spare3 !== undefined) view.setBigUint64(96, data.Spare3 === null ? 0n : BigInt(util.toPointer(data.Spare3)), true);
  // 0x68: pointer
  if (data?.Spare4 !== undefined) view.setBigUint64(104, data.Spare4 === null ? 0n : BigInt(util.toPointer(data.Spare4)), true);
  // 0x70: usize
  if (data?.PackageId !== undefined) view.setBigUint64(112, BigInt(data.PackageId), true);
  // 0x78: pointer
  if (data?.PrevLogonId !== undefined) view.setBigUint64(120, data.PrevLogonId === null ? 0n : BigInt(util.toPointer(data.PrevLogonId)), true);
  // 0x80: u32
  if (data?.FlagsEx !== undefined) view.setUint32(128, Number(data.FlagsEx), true);
  // 0x84: pad4
  return buf;
}

export class SECPKG_PRIMARY_CRED_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DownlevelName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Password(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get OldPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UserSid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get Flags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get DnsDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get Upn(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get Spare1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get Spare2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get Spare3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get Spare4(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: usize
  get PackageId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(112, true));
  }

  // 0x78: pointer
  get PrevLogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: u32
  get FlagsEx(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x00: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DownlevelName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Password(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set OldPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UserSid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set Flags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set Upn(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set Spare1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set Spare2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set Spare3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set Spare4(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: usize
  set PackageId(value: Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(value), true);
  }

  // 0x78: pointer
  set PrevLogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: u32
  set FlagsEx(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_PARAMETERS (size: 48)
 */
export interface SECPKG_PARAMETERS {
  /** u32 */
  Version: number;
  /** u32 */
  MachineState: number;
  /** u32 */
  SetupMode: number;
  /** Windows.Win32.Foundation.PSID */
  DomainSid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DnsDomainName: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  DomainGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_PARAMETERS = 48;

export function allocSECPKG_PARAMETERS(data?: Partial<SECPKG_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.MachineState !== undefined) view.setUint32(4, Number(data.MachineState), true);
  // 0x08: u32
  if (data?.SetupMode !== undefined) view.setUint32(8, Number(data.SetupMode), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.DomainSid !== undefined) view.setBigUint64(16, data.DomainSid === null ? 0n : BigInt(util.toPointer(data.DomainSid)), true);
  // 0x18: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(24, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x20: pointer
  if (data?.DnsDomainName !== undefined) view.setBigUint64(32, data.DnsDomainName === null ? 0n : BigInt(util.toPointer(data.DnsDomainName)), true);
  // 0x28: pointer
  if (data?.DomainGuid !== undefined) view.setBigUint64(40, data.DomainGuid === null ? 0n : BigInt(util.toPointer(data.DomainGuid)), true);
  return buf;
}

export class SECPKG_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get MachineState(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get SetupMode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get DomainSid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get DnsDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get DomainGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set MachineState(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set SetupMode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set DomainSid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set DomainGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_GSS_INFO (size: 16)
 */
export interface SECPKG_GSS_INFO {
  /** u32 */
  EncodedIdLength: number;
  /** array */
  EncodedId: Deno.PointerValue | null;
}

export const sizeofSECPKG_GSS_INFO = 16;

export function allocSECPKG_GSS_INFO(data?: Partial<SECPKG_GSS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_GSS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EncodedIdLength !== undefined) view.setUint32(0, Number(data.EncodedIdLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EncodedId !== undefined) view.setBigUint64(8, data.EncodedId === null ? 0n : BigInt(util.toPointer(data.EncodedId)), true);
  return buf;
}

export class SECPKG_GSS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EncodedIdLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EncodedId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set EncodedIdLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EncodedId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CONTEXT_THUNKS (size: 16)
 */
export interface SECPKG_CONTEXT_THUNKS {
  /** u32 */
  InfoLevelCount: number;
  /** array */
  Levels: Deno.PointerValue | null;
}

export const sizeofSECPKG_CONTEXT_THUNKS = 16;

export function allocSECPKG_CONTEXT_THUNKS(data?: Partial<SECPKG_CONTEXT_THUNKS>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CONTEXT_THUNKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.InfoLevelCount !== undefined) view.setUint32(0, Number(data.InfoLevelCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Levels !== undefined) view.setBigUint64(8, data.Levels === null ? 0n : BigInt(util.toPointer(data.Levels)), true);
  return buf;
}

export class SECPKG_CONTEXT_THUNKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get InfoLevelCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Levels(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set InfoLevelCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Levels(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_MUTUAL_AUTH_LEVEL (size: 8)
 */
export interface SECPKG_MUTUAL_AUTH_LEVEL {
  /** u32 */
  MutualAuthLevel: number;
}

export const sizeofSECPKG_MUTUAL_AUTH_LEVEL = 8;

export function allocSECPKG_MUTUAL_AUTH_LEVEL(data?: Partial<SECPKG_MUTUAL_AUTH_LEVEL>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_MUTUAL_AUTH_LEVEL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MutualAuthLevel !== undefined) view.setUint32(0, Number(data.MutualAuthLevel), true);
  // 0x04: pad4
  return buf;
}

export class SECPKG_MUTUAL_AUTH_LEVELView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MutualAuthLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set MutualAuthLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_WOW_CLIENT_DLL (size: 8)
 */
export interface SECPKG_WOW_CLIENT_DLL {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  WowClientDllPath: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_WOW_CLIENT_DLL = 8;

export function allocSECPKG_WOW_CLIENT_DLL(data?: Partial<SECPKG_WOW_CLIENT_DLL>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_WOW_CLIENT_DLL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WowClientDllPath !== undefined) view.setBigUint64(0, data.WowClientDllPath === null ? 0n : BigInt(util.toPointer(data.WowClientDllPath)), true);
  return buf;
}

export class SECPKG_WOW_CLIENT_DLLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get WowClientDllPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set WowClientDllPath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_SERIALIZED_OID (size: 16)
 */
export interface SECPKG_SERIALIZED_OID {
  /** u32 */
  OidLength: number;
  /** u32 */
  OidAttributes: number;
  /** array */
  OidValue: Deno.PointerValue | null;
}

export const sizeofSECPKG_SERIALIZED_OID = 16;

export function allocSECPKG_SERIALIZED_OID(data?: Partial<SECPKG_SERIALIZED_OID>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_SERIALIZED_OID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OidLength !== undefined) view.setUint32(0, Number(data.OidLength), true);
  // 0x04: u32
  if (data?.OidAttributes !== undefined) view.setUint32(4, Number(data.OidAttributes), true);
  // 0x08: pointer
  if (data?.OidValue !== undefined) view.setBigUint64(8, data.OidValue === null ? 0n : BigInt(util.toPointer(data.OidValue)), true);
  return buf;
}

export class SECPKG_SERIALIZED_OIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OidLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get OidAttributes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get OidValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set OidLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set OidAttributes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set OidValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_EXTRA_OIDS (size: 16)
 */
export interface SECPKG_EXTRA_OIDS {
  /** u32 */
  OidCount: number;
  /** array */
  Oids: Deno.PointerValue | null;
}

export const sizeofSECPKG_EXTRA_OIDS = 16;

export function allocSECPKG_EXTRA_OIDS(data?: Partial<SECPKG_EXTRA_OIDS>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_EXTRA_OIDS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OidCount !== undefined) view.setUint32(0, Number(data.OidCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Oids !== undefined) view.setBigUint64(8, data.Oids === null ? 0n : BigInt(util.toPointer(data.Oids)), true);
  return buf;
}

export class SECPKG_EXTRA_OIDSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OidCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Oids(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set OidCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Oids(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_NEGO2_INFO (size: 16)
 */
export interface SECPKG_NEGO2_INFO {
  /** array */
  AuthScheme: Deno.PointerValue | null;
  /** u32 */
  PackageFlags: number;
}

export const sizeofSECPKG_NEGO2_INFO = 16;

export function allocSECPKG_NEGO2_INFO(data?: Partial<SECPKG_NEGO2_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_NEGO2_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AuthScheme !== undefined) view.setBigUint64(0, data.AuthScheme === null ? 0n : BigInt(util.toPointer(data.AuthScheme)), true);
  // 0x08: u32
  if (data?.PackageFlags !== undefined) view.setUint32(8, Number(data.PackageFlags), true);
  // 0x0c: pad4
  return buf;
}

export class SECPKG_NEGO2_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AuthScheme(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get PackageFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set AuthScheme(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set PackageFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

export class SYSTEMTIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wYear(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wMonth(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get wDayOfWeek(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wDay(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get wHour(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get wMinute(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get wSecond(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get wMilliseconds(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u16
  set wYear(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wMonth(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set wDayOfWeek(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wDay(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set wHour(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set wMinute(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set wSecond(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set wMilliseconds(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_DRIVEINFORMATIONA (size: 96)
 */
export interface NTMS_DRIVEINFORMATIONA {
  /** u32 */
  Number: number;
  /** Windows.Win32.Storage.FileSystem.NtmsDriveState */
  State: NtmsDriveState;
  /** System.Guid */
  DriveType: Uint8Array | Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szSerialNumber: Deno.PointerValue | null;
  /** array */
  szRevision: Deno.PointerValue | null;
  /** u16 */
  ScsiPort: number;
  /** u16 */
  ScsiBus: number;
  /** u16 */
  ScsiTarget: number;
  /** u16 */
  ScsiLun: number;
  /** u32 */
  dwMountCount: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  LastCleanedTs: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SavedPartitionId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Reserved: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwDeferDismountDelay: number;
}

export const sizeofNTMS_DRIVEINFORMATIONA = 96;

export function allocNTMS_DRIVEINFORMATIONA(data?: Partial<NTMS_DRIVEINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_DRIVEINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: i32
  if (data?.State !== undefined) view.setInt32(4, Number(data.State), true);
  // 0x08: pointer
  if (data?.DriveType !== undefined) view.setBigUint64(8, data.DriveType === null ? 0n : BigInt(util.toPointer(data.DriveType)), true);
  // 0x10: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(16, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x18: pointer
  if (data?.szSerialNumber !== undefined) view.setBigUint64(24, data.szSerialNumber === null ? 0n : BigInt(util.toPointer(data.szSerialNumber)), true);
  // 0x20: pointer
  if (data?.szRevision !== undefined) view.setBigUint64(32, data.szRevision === null ? 0n : BigInt(util.toPointer(data.szRevision)), true);
  // 0x28: u16
  if (data?.ScsiPort !== undefined) view.setUint16(40, Number(data.ScsiPort), true);
  // 0x2a: u16
  if (data?.ScsiBus !== undefined) view.setUint16(42, Number(data.ScsiBus), true);
  // 0x2c: u16
  if (data?.ScsiTarget !== undefined) view.setUint16(44, Number(data.ScsiTarget), true);
  // 0x2e: u16
  if (data?.ScsiLun !== undefined) view.setUint16(46, Number(data.ScsiLun), true);
  // 0x30: u32
  if (data?.dwMountCount !== undefined) view.setUint32(48, Number(data.dwMountCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.LastCleanedTs !== undefined) view.setBigUint64(56, data.LastCleanedTs === null ? 0n : BigInt(util.toPointer(data.LastCleanedTs)), true);
  // 0x40: pointer
  if (data?.SavedPartitionId !== undefined) view.setBigUint64(64, data.SavedPartitionId === null ? 0n : BigInt(util.toPointer(data.SavedPartitionId)), true);
  // 0x48: pointer
  if (data?.Library !== undefined) view.setBigUint64(72, data.Library === null ? 0n : BigInt(util.toPointer(data.Library)), true);
  // 0x50: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(80, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x58: u32
  if (data?.dwDeferDismountDelay !== undefined) view.setUint32(88, Number(data.dwDeferDismountDelay), true);
  // 0x5c: pad4
  return buf;
}

export class NTMS_DRIVEINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get State(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get DriveType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get szDeviceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get szSerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get szRevision(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u16
  get ScsiPort(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u16
  get ScsiBus(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: u16
  get ScsiTarget(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get ScsiLun(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: u32
  get dwMountCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get LastCleanedTs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get SavedPartitionId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get dwDeferDismountDelay(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set State(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set DriveType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set szDeviceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set szSerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set szRevision(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u16
  set ScsiPort(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u16
  set ScsiBus(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: u16
  set ScsiTarget(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set ScsiLun(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: u32
  set dwMountCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set LastCleanedTs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set SavedPartitionId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set dwDeferDismountDelay(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_DRIVETYPEINFORMATIONA (size: 24)
 */
export interface NTMS_DRIVETYPEINFORMATIONA {
  /** array */
  szVendor: Deno.PointerValue | null;
  /** array */
  szProduct: Deno.PointerValue | null;
  /** u32 */
  NumberOfHeads: number;
  /** Windows.Win32.Storage.FileSystem.FILE_DEVICE_TYPE */
  DeviceType: FILE_DEVICE_TYPE;
}

export const sizeofNTMS_DRIVETYPEINFORMATIONA = 24;

export function allocNTMS_DRIVETYPEINFORMATIONA(data?: Partial<NTMS_DRIVETYPEINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_DRIVETYPEINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szVendor !== undefined) view.setBigUint64(0, data.szVendor === null ? 0n : BigInt(util.toPointer(data.szVendor)), true);
  // 0x08: pointer
  if (data?.szProduct !== undefined) view.setBigUint64(8, data.szProduct === null ? 0n : BigInt(util.toPointer(data.szProduct)), true);
  // 0x10: u32
  if (data?.NumberOfHeads !== undefined) view.setUint32(16, Number(data.NumberOfHeads), true);
  // 0x14: u32
  if (data?.DeviceType !== undefined) view.setUint32(20, Number(data.DeviceType), true);
  return buf;
}

export class NTMS_DRIVETYPEINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szVendor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get szProduct(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get NumberOfHeads(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DeviceType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set szVendor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set szProduct(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set NumberOfHeads(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DeviceType(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_LIBRARYINFORMATION (size: 112)
 */
export interface NTMS_LIBRARYINFORMATION {
  /** Windows.Win32.Storage.FileSystem.NtmsLibraryType */
  LibraryType: NtmsLibraryType;
  /** System.Guid */
  CleanerSlot: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  CleanerSlotDefault: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  LibrarySupportsDriveCleaning: boolean;
  /** Windows.Win32.Foundation.BOOL */
  BarCodeReaderInstalled: boolean;
  /** Windows.Win32.Storage.FileSystem.NtmsInventoryMethod */
  InventoryMethod: NtmsInventoryMethod;
  /** u32 */
  dwCleanerUsesRemaining: number;
  /** u32 */
  FirstDriveNumber: number;
  /** u32 */
  dwNumberOfDrives: number;
  /** u32 */
  FirstSlotNumber: number;
  /** u32 */
  dwNumberOfSlots: number;
  /** u32 */
  FirstDoorNumber: number;
  /** u32 */
  dwNumberOfDoors: number;
  /** u32 */
  FirstPortNumber: number;
  /** u32 */
  dwNumberOfPorts: number;
  /** u32 */
  FirstChangerNumber: number;
  /** u32 */
  dwNumberOfChangers: number;
  /** u32 */
  dwNumberOfMedia: number;
  /** u32 */
  dwNumberOfMediaTypes: number;
  /** u32 */
  dwNumberOfLibRequests: number;
  /** System.Guid */
  Reserved: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AutoRecovery: boolean;
  /** Windows.Win32.Storage.FileSystem.NtmsLibraryFlags */
  dwFlags: NtmsLibraryFlags;
}

export const sizeofNTMS_LIBRARYINFORMATION = 112;

export function allocNTMS_LIBRARYINFORMATION(data?: Partial<NTMS_LIBRARYINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_LIBRARYINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LibraryType !== undefined) view.setInt32(0, Number(data.LibraryType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CleanerSlot !== undefined) view.setBigUint64(8, data.CleanerSlot === null ? 0n : BigInt(util.toPointer(data.CleanerSlot)), true);
  // 0x10: pointer
  if (data?.CleanerSlotDefault !== undefined) view.setBigUint64(16, data.CleanerSlotDefault === null ? 0n : BigInt(util.toPointer(data.CleanerSlotDefault)), true);
  // 0x18: i32
  if (data?.LibrarySupportsDriveCleaning !== undefined) view.setInt32(24, Number(data.LibrarySupportsDriveCleaning), true);
  // 0x1c: i32
  if (data?.BarCodeReaderInstalled !== undefined) view.setInt32(28, Number(data.BarCodeReaderInstalled), true);
  // 0x20: i32
  if (data?.InventoryMethod !== undefined) view.setInt32(32, Number(data.InventoryMethod), true);
  // 0x24: u32
  if (data?.dwCleanerUsesRemaining !== undefined) view.setUint32(36, Number(data.dwCleanerUsesRemaining), true);
  // 0x28: u32
  if (data?.FirstDriveNumber !== undefined) view.setUint32(40, Number(data.FirstDriveNumber), true);
  // 0x2c: u32
  if (data?.dwNumberOfDrives !== undefined) view.setUint32(44, Number(data.dwNumberOfDrives), true);
  // 0x30: u32
  if (data?.FirstSlotNumber !== undefined) view.setUint32(48, Number(data.FirstSlotNumber), true);
  // 0x34: u32
  if (data?.dwNumberOfSlots !== undefined) view.setUint32(52, Number(data.dwNumberOfSlots), true);
  // 0x38: u32
  if (data?.FirstDoorNumber !== undefined) view.setUint32(56, Number(data.FirstDoorNumber), true);
  // 0x3c: u32
  if (data?.dwNumberOfDoors !== undefined) view.setUint32(60, Number(data.dwNumberOfDoors), true);
  // 0x40: u32
  if (data?.FirstPortNumber !== undefined) view.setUint32(64, Number(data.FirstPortNumber), true);
  // 0x44: u32
  if (data?.dwNumberOfPorts !== undefined) view.setUint32(68, Number(data.dwNumberOfPorts), true);
  // 0x48: u32
  if (data?.FirstChangerNumber !== undefined) view.setUint32(72, Number(data.FirstChangerNumber), true);
  // 0x4c: u32
  if (data?.dwNumberOfChangers !== undefined) view.setUint32(76, Number(data.dwNumberOfChangers), true);
  // 0x50: u32
  if (data?.dwNumberOfMedia !== undefined) view.setUint32(80, Number(data.dwNumberOfMedia), true);
  // 0x54: u32
  if (data?.dwNumberOfMediaTypes !== undefined) view.setUint32(84, Number(data.dwNumberOfMediaTypes), true);
  // 0x58: u32
  if (data?.dwNumberOfLibRequests !== undefined) view.setUint32(88, Number(data.dwNumberOfLibRequests), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(96, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x68: i32
  if (data?.AutoRecovery !== undefined) view.setInt32(104, Number(data.AutoRecovery), true);
  // 0x6c: i32
  if (data?.dwFlags !== undefined) view.setInt32(108, Number(data.dwFlags), true);
  return buf;
}

export class NTMS_LIBRARYINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get LibraryType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get CleanerSlot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CleanerSlotDefault(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get LibrarySupportsDriveCleaning(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get BarCodeReaderInstalled(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get InventoryMethod(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get dwCleanerUsesRemaining(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get FirstDriveNumber(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwNumberOfDrives(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get FirstSlotNumber(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwNumberOfSlots(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get FirstDoorNumber(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwNumberOfDoors(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get FirstPortNumber(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwNumberOfPorts(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get FirstChangerNumber(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwNumberOfChangers(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwNumberOfMedia(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwNumberOfMediaTypes(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwNumberOfLibRequests(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: i32
  get AutoRecovery(): number {
    return this.view.getInt32(104, true);
  }

  // 0x6c: i32
  get dwFlags(): number {
    return this.view.getInt32(108, true);
  }

  // 0x00: i32
  set LibraryType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set CleanerSlot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CleanerSlotDefault(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set LibrarySupportsDriveCleaning(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set BarCodeReaderInstalled(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set InventoryMethod(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set dwCleanerUsesRemaining(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set FirstDriveNumber(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwNumberOfDrives(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set FirstSlotNumber(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwNumberOfSlots(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set FirstDoorNumber(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwNumberOfDoors(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set FirstPortNumber(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwNumberOfPorts(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set FirstChangerNumber(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwNumberOfChangers(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwNumberOfMedia(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwNumberOfMediaTypes(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwNumberOfLibRequests(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: i32
  set AutoRecovery(value: number) {
    this.view.setInt32(104, value, true);
  }

  // 0x6c: i32
  set dwFlags(value: number) {
    this.view.setInt32(108, value, true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_CHANGERINFORMATIONA (size: 56)
 */
export interface NTMS_CHANGERINFORMATIONA {
  /** u32 */
  Number: number;
  /** System.Guid */
  ChangerType: Uint8Array | Deno.PointerValue | null;
  /** array */
  szSerialNumber: Deno.PointerValue | null;
  /** array */
  szRevision: Deno.PointerValue | null;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** u16 */
  ScsiPort: number;
  /** u16 */
  ScsiBus: number;
  /** u16 */
  ScsiTarget: number;
  /** u16 */
  ScsiLun: number;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTMS_CHANGERINFORMATIONA = 56;

export function allocNTMS_CHANGERINFORMATIONA(data?: Partial<NTMS_CHANGERINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_CHANGERINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ChangerType !== undefined) view.setBigUint64(8, data.ChangerType === null ? 0n : BigInt(util.toPointer(data.ChangerType)), true);
  // 0x10: pointer
  if (data?.szSerialNumber !== undefined) view.setBigUint64(16, data.szSerialNumber === null ? 0n : BigInt(util.toPointer(data.szSerialNumber)), true);
  // 0x18: pointer
  if (data?.szRevision !== undefined) view.setBigUint64(24, data.szRevision === null ? 0n : BigInt(util.toPointer(data.szRevision)), true);
  // 0x20: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(32, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x28: u16
  if (data?.ScsiPort !== undefined) view.setUint16(40, Number(data.ScsiPort), true);
  // 0x2a: u16
  if (data?.ScsiBus !== undefined) view.setUint16(42, Number(data.ScsiBus), true);
  // 0x2c: u16
  if (data?.ScsiTarget !== undefined) view.setUint16(44, Number(data.ScsiTarget), true);
  // 0x2e: u16
  if (data?.ScsiLun !== undefined) view.setUint16(46, Number(data.ScsiLun), true);
  // 0x30: pointer
  if (data?.Library !== undefined) view.setBigUint64(48, data.Library === null ? 0n : BigInt(util.toPointer(data.Library)), true);
  return buf;
}

export class NTMS_CHANGERINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ChangerType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get szSerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get szRevision(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get szDeviceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u16
  get ScsiPort(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: u16
  get ScsiBus(): number {
    return this.view.getUint16(42, true);
  }

  // 0x2c: u16
  get ScsiTarget(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get ScsiLun(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ChangerType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set szSerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set szRevision(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set szDeviceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u16
  set ScsiPort(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: u16
  set ScsiBus(value: number) {
    this.view.setUint16(42, value, true);
  }

  // 0x2c: u16
  set ScsiTarget(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set ScsiLun(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_CHANGERTYPEINFORMATIONA (size: 24)
 */
export interface NTMS_CHANGERTYPEINFORMATIONA {
  /** array */
  szVendor: Deno.PointerValue | null;
  /** array */
  szProduct: Deno.PointerValue | null;
  /** u32 */
  DeviceType: number;
}

export const sizeofNTMS_CHANGERTYPEINFORMATIONA = 24;

export function allocNTMS_CHANGERTYPEINFORMATIONA(data?: Partial<NTMS_CHANGERTYPEINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_CHANGERTYPEINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szVendor !== undefined) view.setBigUint64(0, data.szVendor === null ? 0n : BigInt(util.toPointer(data.szVendor)), true);
  // 0x08: pointer
  if (data?.szProduct !== undefined) view.setBigUint64(8, data.szProduct === null ? 0n : BigInt(util.toPointer(data.szProduct)), true);
  // 0x10: u32
  if (data?.DeviceType !== undefined) view.setUint32(16, Number(data.DeviceType), true);
  // 0x14: pad4
  return buf;
}

export class NTMS_CHANGERTYPEINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szVendor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get szProduct(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get DeviceType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set szVendor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set szProduct(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set DeviceType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_STORAGESLOTINFORMATION (size: 16)
 */
export interface NTMS_STORAGESLOTINFORMATION {
  /** u32 */
  Number: number;
  /** u32 */
  State: number;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTMS_STORAGESLOTINFORMATION = 16;

export function allocNTMS_STORAGESLOTINFORMATION(data?: Partial<NTMS_STORAGESLOTINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_STORAGESLOTINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: u32
  if (data?.State !== undefined) view.setUint32(4, Number(data.State), true);
  // 0x08: pointer
  if (data?.Library !== undefined) view.setBigUint64(8, data.Library === null ? 0n : BigInt(util.toPointer(data.Library)), true);
  return buf;
}

export class NTMS_STORAGESLOTINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get State(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set State(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_IEDOORINFORMATION (size: 24)
 */
export interface NTMS_IEDOORINFORMATION {
  /** u32 */
  Number: number;
  /** Windows.Win32.Storage.FileSystem.NtmsDoorState */
  State: NtmsDoorState;
  /** u16 */
  MaxOpenSecs: number;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTMS_IEDOORINFORMATION = 24;

export function allocNTMS_IEDOORINFORMATION(data?: Partial<NTMS_IEDOORINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_IEDOORINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: i32
  if (data?.State !== undefined) view.setInt32(4, Number(data.State), true);
  // 0x08: u16
  if (data?.MaxOpenSecs !== undefined) view.setUint16(8, Number(data.MaxOpenSecs), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Library !== undefined) view.setBigUint64(16, data.Library === null ? 0n : BigInt(util.toPointer(data.Library)), true);
  return buf;
}

export class NTMS_IEDOORINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get State(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u16
  get MaxOpenSecs(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set State(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u16
  set MaxOpenSecs(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_IEPORTINFORMATION (size: 24)
 */
export interface NTMS_IEPORTINFORMATION {
  /** u32 */
  Number: number;
  /** Windows.Win32.Storage.FileSystem.NtmsPortContent */
  Content: NtmsPortContent;
  /** Windows.Win32.Storage.FileSystem.NtmsPortPosition */
  Position: NtmsPortPosition;
  /** u16 */
  MaxExtendSecs: number;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTMS_IEPORTINFORMATION = 24;

export function allocNTMS_IEPORTINFORMATION(data?: Partial<NTMS_IEPORTINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_IEPORTINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Number !== undefined) view.setUint32(0, Number(data.Number), true);
  // 0x04: i32
  if (data?.Content !== undefined) view.setInt32(4, Number(data.Content), true);
  // 0x08: i32
  if (data?.Position !== undefined) view.setInt32(8, Number(data.Position), true);
  // 0x0c: u16
  if (data?.MaxExtendSecs !== undefined) view.setUint16(12, Number(data.MaxExtendSecs), true);
  // 0x0e: pad2
  // 0x10: pointer
  if (data?.Library !== undefined) view.setBigUint64(16, data.Library === null ? 0n : BigInt(util.toPointer(data.Library)), true);
  return buf;
}

export class NTMS_IEPORTINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Number(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get Content(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get Position(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u16
  get MaxExtendSecs(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Number(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set Content(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set Position(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u16
  set MaxExtendSecs(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: pad2

  // 0x10: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_PMIDINFORMATIONA (size: 96)
 */
export interface NTMS_PMIDINFORMATIONA {
  /** System.Guid */
  CurrentLibrary: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  MediaPool: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Location: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LocationType: number;
  /** System.Guid */
  MediaType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  HomeSlot: Uint8Array | Deno.PointerValue | null;
  /** array */
  szBarCode: Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NtmsBarCodeState */
  BarCodeState: NtmsBarCodeState;
  /** array */
  szSequenceNumber: Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NtmsMediaState */
  MediaState: NtmsMediaState;
  /** u32 */
  dwNumberOfPartitions: number;
  /** u32 */
  dwMediaTypeCode: number;
  /** u32 */
  dwDensityCode: number;
  /** System.Guid */
  MountedPartition: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTMS_PMIDINFORMATIONA = 96;

export function allocNTMS_PMIDINFORMATIONA(data?: Partial<NTMS_PMIDINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_PMIDINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CurrentLibrary !== undefined) view.setBigUint64(0, data.CurrentLibrary === null ? 0n : BigInt(util.toPointer(data.CurrentLibrary)), true);
  // 0x08: pointer
  if (data?.MediaPool !== undefined) view.setBigUint64(8, data.MediaPool === null ? 0n : BigInt(util.toPointer(data.MediaPool)), true);
  // 0x10: pointer
  if (data?.Location !== undefined) view.setBigUint64(16, data.Location === null ? 0n : BigInt(util.toPointer(data.Location)), true);
  // 0x18: u32
  if (data?.LocationType !== undefined) view.setUint32(24, Number(data.LocationType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.MediaType !== undefined) view.setBigUint64(32, data.MediaType === null ? 0n : BigInt(util.toPointer(data.MediaType)), true);
  // 0x28: pointer
  if (data?.HomeSlot !== undefined) view.setBigUint64(40, data.HomeSlot === null ? 0n : BigInt(util.toPointer(data.HomeSlot)), true);
  // 0x30: pointer
  if (data?.szBarCode !== undefined) view.setBigUint64(48, data.szBarCode === null ? 0n : BigInt(util.toPointer(data.szBarCode)), true);
  // 0x38: i32
  if (data?.BarCodeState !== undefined) view.setInt32(56, Number(data.BarCodeState), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.szSequenceNumber !== undefined) view.setBigUint64(64, data.szSequenceNumber === null ? 0n : BigInt(util.toPointer(data.szSequenceNumber)), true);
  // 0x48: i32
  if (data?.MediaState !== undefined) view.setInt32(72, Number(data.MediaState), true);
  // 0x4c: u32
  if (data?.dwNumberOfPartitions !== undefined) view.setUint32(76, Number(data.dwNumberOfPartitions), true);
  // 0x50: u32
  if (data?.dwMediaTypeCode !== undefined) view.setUint32(80, Number(data.dwMediaTypeCode), true);
  // 0x54: u32
  if (data?.dwDensityCode !== undefined) view.setUint32(84, Number(data.dwDensityCode), true);
  // 0x58: pointer
  if (data?.MountedPartition !== undefined) view.setBigUint64(88, data.MountedPartition === null ? 0n : BigInt(util.toPointer(data.MountedPartition)), true);
  return buf;
}

export class NTMS_PMIDINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CurrentLibrary(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get MediaPool(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Location(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get LocationType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get MediaType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get HomeSlot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get szBarCode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: i32
  get BarCodeState(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get szSequenceNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: i32
  get MediaState(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: u32
  get dwNumberOfPartitions(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwMediaTypeCode(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwDensityCode(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: pointer
  get MountedPartition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set CurrentLibrary(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set MediaPool(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Location(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set LocationType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set MediaType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set HomeSlot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set szBarCode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: i32
  set BarCodeState(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set szSequenceNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: i32
  set MediaState(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: u32
  set dwNumberOfPartitions(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwMediaTypeCode(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwDensityCode(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: pointer
  set MountedPartition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_LMIDINFORMATION (size: 16)
 */
export interface NTMS_LMIDINFORMATION {
  /** System.Guid */
  MediaPool: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNumberOfPartitions: number;
}

export const sizeofNTMS_LMIDINFORMATION = 16;

export function allocNTMS_LMIDINFORMATION(data?: Partial<NTMS_LMIDINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_LMIDINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MediaPool !== undefined) view.setBigUint64(0, data.MediaPool === null ? 0n : BigInt(util.toPointer(data.MediaPool)), true);
  // 0x08: u32
  if (data?.dwNumberOfPartitions !== undefined) view.setUint32(8, Number(data.dwNumberOfPartitions), true);
  // 0x0c: pad4
  return buf;
}

export class NTMS_LMIDINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get MediaPool(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwNumberOfPartitions(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set MediaPool(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwNumberOfPartitions(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_PARTITIONINFORMATIONA (size: 72)
 */
export interface NTMS_PARTITIONINFORMATIONA {
  /** System.Guid */
  PhysicalMedia: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  LogicalMedia: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NtmsPartitionState */
  State: NtmsPartitionState;
  /** u16 */
  Side: number;
  /** u32 */
  dwOmidLabelIdLength: number;
  /** array */
  OmidLabelId: Deno.PointerValue | null;
  /** array */
  szOmidLabelType: Deno.PointerValue | null;
  /** array */
  szOmidLabelInfo: Deno.PointerValue | null;
  /** u32 */
  dwMountCount: number;
  /** u32 */
  dwAllocateCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Capacity: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNTMS_PARTITIONINFORMATIONA = 72;

export function allocNTMS_PARTITIONINFORMATIONA(data?: Partial<NTMS_PARTITIONINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_PARTITIONINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PhysicalMedia !== undefined) view.setBigUint64(0, data.PhysicalMedia === null ? 0n : BigInt(util.toPointer(data.PhysicalMedia)), true);
  // 0x08: pointer
  if (data?.LogicalMedia !== undefined) view.setBigUint64(8, data.LogicalMedia === null ? 0n : BigInt(util.toPointer(data.LogicalMedia)), true);
  // 0x10: i32
  if (data?.State !== undefined) view.setInt32(16, Number(data.State), true);
  // 0x14: u16
  if (data?.Side !== undefined) view.setUint16(20, Number(data.Side), true);
  // 0x16: u32
  if (data?.dwOmidLabelIdLength !== undefined) view.setUint32(22, Number(data.dwOmidLabelIdLength), true);
  // 0x1a: pad6
  // 0x20: pointer
  if (data?.OmidLabelId !== undefined) view.setBigUint64(32, data.OmidLabelId === null ? 0n : BigInt(util.toPointer(data.OmidLabelId)), true);
  // 0x28: pointer
  if (data?.szOmidLabelType !== undefined) view.setBigUint64(40, data.szOmidLabelType === null ? 0n : BigInt(util.toPointer(data.szOmidLabelType)), true);
  // 0x30: pointer
  if (data?.szOmidLabelInfo !== undefined) view.setBigUint64(48, data.szOmidLabelInfo === null ? 0n : BigInt(util.toPointer(data.szOmidLabelInfo)), true);
  // 0x38: u32
  if (data?.dwMountCount !== undefined) view.setUint32(56, Number(data.dwMountCount), true);
  // 0x3c: u32
  if (data?.dwAllocateCount !== undefined) view.setUint32(60, Number(data.dwAllocateCount), true);
  // 0x40: pointer
  if (data?.Capacity !== undefined) view.setBigUint64(64, data.Capacity === null ? 0n : BigInt(util.toPointer(data.Capacity)), true);
  return buf;
}

export class NTMS_PARTITIONINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PhysicalMedia(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LogicalMedia(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get State(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u16
  get Side(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u32
  get dwOmidLabelIdLength(): number {
    return this.view.getUint32(22, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  get OmidLabelId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get szOmidLabelType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get szOmidLabelInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get dwMountCount(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwAllocateCount(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get Capacity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set PhysicalMedia(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LogicalMedia(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set State(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u16
  set Side(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u32
  set dwOmidLabelIdLength(value: number) {
    this.view.setUint32(22, value, true);
  }

  // 0x1a: pad6

  // 0x20: pointer
  set OmidLabelId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set szOmidLabelType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set szOmidLabelInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set dwMountCount(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwAllocateCount(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set Capacity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_MEDIAPOOLINFORMATION (size: 48)
 */
export interface NTMS_MEDIAPOOLINFORMATION {
  /** u32 */
  PoolType: number;
  /** System.Guid */
  MediaType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Parent: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AllocationPolicy: number;
  /** u32 */
  DeallocationPolicy: number;
  /** u32 */
  dwMaxAllocates: number;
  /** u32 */
  dwNumberOfPhysicalMedia: number;
  /** u32 */
  dwNumberOfLogicalMedia: number;
  /** u32 */
  dwNumberOfMediaPools: number;
}

export const sizeofNTMS_MEDIAPOOLINFORMATION = 48;

export function allocNTMS_MEDIAPOOLINFORMATION(data?: Partial<NTMS_MEDIAPOOLINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_MEDIAPOOLINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PoolType !== undefined) view.setUint32(0, Number(data.PoolType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MediaType !== undefined) view.setBigUint64(8, data.MediaType === null ? 0n : BigInt(util.toPointer(data.MediaType)), true);
  // 0x10: pointer
  if (data?.Parent !== undefined) view.setBigUint64(16, data.Parent === null ? 0n : BigInt(util.toPointer(data.Parent)), true);
  // 0x18: u32
  if (data?.AllocationPolicy !== undefined) view.setUint32(24, Number(data.AllocationPolicy), true);
  // 0x1c: u32
  if (data?.DeallocationPolicy !== undefined) view.setUint32(28, Number(data.DeallocationPolicy), true);
  // 0x20: u32
  if (data?.dwMaxAllocates !== undefined) view.setUint32(32, Number(data.dwMaxAllocates), true);
  // 0x24: u32
  if (data?.dwNumberOfPhysicalMedia !== undefined) view.setUint32(36, Number(data.dwNumberOfPhysicalMedia), true);
  // 0x28: u32
  if (data?.dwNumberOfLogicalMedia !== undefined) view.setUint32(40, Number(data.dwNumberOfLogicalMedia), true);
  // 0x2c: u32
  if (data?.dwNumberOfMediaPools !== undefined) view.setUint32(44, Number(data.dwNumberOfMediaPools), true);
  return buf;
}

export class NTMS_MEDIAPOOLINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PoolType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get MediaType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Parent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get AllocationPolicy(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get DeallocationPolicy(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwMaxAllocates(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwNumberOfPhysicalMedia(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwNumberOfLogicalMedia(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwNumberOfMediaPools(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set PoolType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set MediaType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Parent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set AllocationPolicy(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set DeallocationPolicy(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwMaxAllocates(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwNumberOfPhysicalMedia(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwNumberOfLogicalMedia(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwNumberOfMediaPools(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_MEDIATYPEINFORMATION (size: 16)
 */
export interface NTMS_MEDIATYPEINFORMATION {
  /** u32 */
  MediaType: number;
  /** u32 */
  NumberOfSides: number;
  /** Windows.Win32.Storage.FileSystem.NtmsReadWriteCharacteristics */
  ReadWriteCharacteristics: NtmsReadWriteCharacteristics;
  /** Windows.Win32.Storage.FileSystem.FILE_DEVICE_TYPE */
  DeviceType: FILE_DEVICE_TYPE;
}

export const sizeofNTMS_MEDIATYPEINFORMATION = 16;

export function allocNTMS_MEDIATYPEINFORMATION(data?: Partial<NTMS_MEDIATYPEINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_MEDIATYPEINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MediaType !== undefined) view.setUint32(0, Number(data.MediaType), true);
  // 0x04: u32
  if (data?.NumberOfSides !== undefined) view.setUint32(4, Number(data.NumberOfSides), true);
  // 0x08: i32
  if (data?.ReadWriteCharacteristics !== undefined) view.setInt32(8, Number(data.ReadWriteCharacteristics), true);
  // 0x0c: u32
  if (data?.DeviceType !== undefined) view.setUint32(12, Number(data.DeviceType), true);
  return buf;
}

export class NTMS_MEDIATYPEINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MediaType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NumberOfSides(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get ReadWriteCharacteristics(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get DeviceType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set MediaType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NumberOfSides(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set ReadWriteCharacteristics(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set DeviceType(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_LIBREQUESTINFORMATIONA (size: 120)
 */
export interface NTMS_LIBREQUESTINFORMATIONA {
  /** Windows.Win32.Storage.FileSystem.NtmsLmOperation */
  OperationCode: NtmsLmOperation;
  /** u32 */
  OperationOption: number;
  /** Windows.Win32.Storage.FileSystem.NtmsLmState */
  State: NtmsLmState;
  /** System.Guid */
  PartitionId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  DriveId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  PhysMediaId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Library: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  SlotId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  TimeQueued: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  TimeCompleted: Uint8Array | Deno.PointerValue | null;
  /** array */
  szApplication: Deno.PointerValue | null;
  /** array */
  szUser: Deno.PointerValue | null;
  /** array */
  szComputer: Deno.PointerValue | null;
  /** u32 */
  dwErrorCode: number;
  /** System.Guid */
  WorkItemId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwPriority: number;
}

export const sizeofNTMS_LIBREQUESTINFORMATIONA = 120;

export function allocNTMS_LIBREQUESTINFORMATIONA(data?: Partial<NTMS_LIBREQUESTINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_LIBREQUESTINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OperationCode !== undefined) view.setInt32(0, Number(data.OperationCode), true);
  // 0x04: u32
  if (data?.OperationOption !== undefined) view.setUint32(4, Number(data.OperationOption), true);
  // 0x08: i32
  if (data?.State !== undefined) view.setInt32(8, Number(data.State), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.PartitionId !== undefined) view.setBigUint64(16, data.PartitionId === null ? 0n : BigInt(util.toPointer(data.PartitionId)), true);
  // 0x18: pointer
  if (data?.DriveId !== undefined) view.setBigUint64(24, data.DriveId === null ? 0n : BigInt(util.toPointer(data.DriveId)), true);
  // 0x20: pointer
  if (data?.PhysMediaId !== undefined) view.setBigUint64(32, data.PhysMediaId === null ? 0n : BigInt(util.toPointer(data.PhysMediaId)), true);
  // 0x28: pointer
  if (data?.Library !== undefined) view.setBigUint64(40, data.Library === null ? 0n : BigInt(util.toPointer(data.Library)), true);
  // 0x30: pointer
  if (data?.SlotId !== undefined) view.setBigUint64(48, data.SlotId === null ? 0n : BigInt(util.toPointer(data.SlotId)), true);
  // 0x38: pointer
  if (data?.TimeQueued !== undefined) view.setBigUint64(56, data.TimeQueued === null ? 0n : BigInt(util.toPointer(data.TimeQueued)), true);
  // 0x40: pointer
  if (data?.TimeCompleted !== undefined) view.setBigUint64(64, data.TimeCompleted === null ? 0n : BigInt(util.toPointer(data.TimeCompleted)), true);
  // 0x48: pointer
  if (data?.szApplication !== undefined) view.setBigUint64(72, data.szApplication === null ? 0n : BigInt(util.toPointer(data.szApplication)), true);
  // 0x50: pointer
  if (data?.szUser !== undefined) view.setBigUint64(80, data.szUser === null ? 0n : BigInt(util.toPointer(data.szUser)), true);
  // 0x58: pointer
  if (data?.szComputer !== undefined) view.setBigUint64(88, data.szComputer === null ? 0n : BigInt(util.toPointer(data.szComputer)), true);
  // 0x60: u32
  if (data?.dwErrorCode !== undefined) view.setUint32(96, Number(data.dwErrorCode), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.WorkItemId !== undefined) view.setBigUint64(104, data.WorkItemId === null ? 0n : BigInt(util.toPointer(data.WorkItemId)), true);
  // 0x70: u32
  if (data?.dwPriority !== undefined) view.setUint32(112, Number(data.dwPriority), true);
  // 0x74: pad4
  return buf;
}

export class NTMS_LIBREQUESTINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get OperationCode(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get OperationOption(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get State(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get PartitionId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DriveId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get PhysMediaId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get SlotId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get TimeQueued(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get TimeCompleted(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get szApplication(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get szUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get szComputer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: u32
  get dwErrorCode(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get WorkItemId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u32
  get dwPriority(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: i32
  set OperationCode(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set OperationOption(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set State(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set PartitionId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DriveId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set PhysMediaId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set SlotId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set TimeQueued(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set TimeCompleted(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set szApplication(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set szUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set szComputer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: u32
  set dwErrorCode(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set WorkItemId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: u32
  set dwPriority(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_OPREQUESTINFORMATIONA (size: 88)
 */
export interface NTMS_OPREQUESTINFORMATIONA {
  /** Windows.Win32.Storage.FileSystem.NtmsOpreqCommand */
  Request: NtmsOpreqCommand;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  Submitted: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NtmsOpreqState */
  State: NtmsOpreqState;
  /** array */
  szMessage: Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NtmsObjectsTypes */
  Arg1Type: NtmsObjectsTypes;
  /** System.Guid */
  Arg1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NtmsObjectsTypes */
  Arg2Type: NtmsObjectsTypes;
  /** System.Guid */
  Arg2: Uint8Array | Deno.PointerValue | null;
  /** array */
  szApplication: Deno.PointerValue | null;
  /** array */
  szUser: Deno.PointerValue | null;
  /** array */
  szComputer: Deno.PointerValue | null;
}

export const sizeofNTMS_OPREQUESTINFORMATIONA = 88;

export function allocNTMS_OPREQUESTINFORMATIONA(data?: Partial<NTMS_OPREQUESTINFORMATIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_OPREQUESTINFORMATIONA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Request !== undefined) view.setInt32(0, Number(data.Request), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Submitted !== undefined) view.setBigUint64(8, data.Submitted === null ? 0n : BigInt(util.toPointer(data.Submitted)), true);
  // 0x10: i32
  if (data?.State !== undefined) view.setInt32(16, Number(data.State), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szMessage !== undefined) view.setBigUint64(24, data.szMessage === null ? 0n : BigInt(util.toPointer(data.szMessage)), true);
  // 0x20: i32
  if (data?.Arg1Type !== undefined) view.setInt32(32, Number(data.Arg1Type), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Arg1 !== undefined) view.setBigUint64(40, data.Arg1 === null ? 0n : BigInt(util.toPointer(data.Arg1)), true);
  // 0x30: i32
  if (data?.Arg2Type !== undefined) view.setInt32(48, Number(data.Arg2Type), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Arg2 !== undefined) view.setBigUint64(56, data.Arg2 === null ? 0n : BigInt(util.toPointer(data.Arg2)), true);
  // 0x40: pointer
  if (data?.szApplication !== undefined) view.setBigUint64(64, data.szApplication === null ? 0n : BigInt(util.toPointer(data.szApplication)), true);
  // 0x48: pointer
  if (data?.szUser !== undefined) view.setBigUint64(72, data.szUser === null ? 0n : BigInt(util.toPointer(data.szUser)), true);
  // 0x50: pointer
  if (data?.szComputer !== undefined) view.setBigUint64(80, data.szComputer === null ? 0n : BigInt(util.toPointer(data.szComputer)), true);
  return buf;
}

export class NTMS_OPREQUESTINFORMATIONAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Request(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Submitted(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get State(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get szMessage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i32
  get Arg1Type(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Arg1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: i32
  get Arg2Type(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get Arg2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get szApplication(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get szUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get szComputer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Request(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Submitted(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set State(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set szMessage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: i32
  set Arg1Type(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Arg1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: i32
  set Arg2Type(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set Arg2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set szApplication(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set szUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set szComputer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Storage.FileSystem.NTMS_COMPUTERINFORMATION (size: 24)
 */
export interface NTMS_COMPUTERINFORMATION {
  /** u32 */
  dwLibRequestPurgeTime: number;
  /** u32 */
  dwOpRequestPurgeTime: number;
  /** u32 */
  dwLibRequestFlags: number;
  /** u32 */
  dwOpRequestFlags: number;
  /** u32 */
  dwMediaPoolPolicy: number;
}

export const sizeofNTMS_COMPUTERINFORMATION = 24;

export function allocNTMS_COMPUTERINFORMATION(data?: Partial<NTMS_COMPUTERINFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNTMS_COMPUTERINFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLibRequestPurgeTime !== undefined) view.setUint32(0, Number(data.dwLibRequestPurgeTime), true);
  // 0x04: u32
  if (data?.dwOpRequestPurgeTime !== undefined) view.setUint32(4, Number(data.dwOpRequestPurgeTime), true);
  // 0x08: u32
  if (data?.dwLibRequestFlags !== undefined) view.setUint32(8, Number(data.dwLibRequestFlags), true);
  // 0x0c: u32
  if (data?.dwOpRequestFlags !== undefined) view.setUint32(12, Number(data.dwOpRequestFlags), true);
  // 0x10: u32
  if (data?.dwMediaPoolPolicy !== undefined) view.setUint32(16, Number(data.dwMediaPoolPolicy), true);
  // 0x14: pad4
  return buf;
}

export class NTMS_COMPUTERINFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLibRequestPurgeTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwOpRequestPurgeTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwLibRequestFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwOpRequestFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwMediaPoolPolicy(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwLibRequestPurgeTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwOpRequestPurgeTime(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwLibRequestFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwOpRequestFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwMediaPoolPolicy(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * _Info_e__Union (size: 128)
 */
export interface _Info_e__Union {
  /** Windows.Win32.Storage.FileSystem.NTMS_DRIVEINFORMATIONA */
  Drive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_DRIVETYPEINFORMATIONA */
  DriveType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_LIBRARYINFORMATION */
  Library: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_CHANGERINFORMATIONA */
  Changer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_CHANGERTYPEINFORMATIONA */
  ChangerType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_STORAGESLOTINFORMATION */
  StorageSlot: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_IEDOORINFORMATION */
  IEDoor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_IEPORTINFORMATION */
  IEPort: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_PMIDINFORMATIONA */
  PhysicalMedia: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_LMIDINFORMATION */
  LogicalMedia: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_PARTITIONINFORMATIONA */
  Partition: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_MEDIAPOOLINFORMATION */
  MediaPool: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_MEDIATYPEINFORMATION */
  MediaType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_LIBREQUESTINFORMATIONA */
  LibRequest: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_OPREQUESTINFORMATIONA */
  OpRequest: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Storage.FileSystem.NTMS_COMPUTERINFORMATION */
  Computer: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Info_e__Union = 128;

export function alloc_Info_e__Union(data?: Partial<_Info_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Info_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Drive !== undefined) view.setBigUint64(0, data.Drive === null ? 0n : BigInt(util.toPointer(data.Drive)), true);
  // 0x08: pointer
  if (data?.DriveType !== undefined) view.setBigUint64(8, data.DriveType === null ? 0n : BigInt(util.toPointer(data.DriveType)), true);
  // 0x10: pointer
  if (data?.Library !== undefined) view.setBigUint64(16, data.Library === null ? 0n : BigInt(util.toPointer(data.Library)), true);
  // 0x18: pointer
  if (data?.Changer !== undefined) view.setBigUint64(24, data.Changer === null ? 0n : BigInt(util.toPointer(data.Changer)), true);
  // 0x20: pointer
  if (data?.ChangerType !== undefined) view.setBigUint64(32, data.ChangerType === null ? 0n : BigInt(util.toPointer(data.ChangerType)), true);
  // 0x28: pointer
  if (data?.StorageSlot !== undefined) view.setBigUint64(40, data.StorageSlot === null ? 0n : BigInt(util.toPointer(data.StorageSlot)), true);
  // 0x30: pointer
  if (data?.IEDoor !== undefined) view.setBigUint64(48, data.IEDoor === null ? 0n : BigInt(util.toPointer(data.IEDoor)), true);
  // 0x38: pointer
  if (data?.IEPort !== undefined) view.setBigUint64(56, data.IEPort === null ? 0n : BigInt(util.toPointer(data.IEPort)), true);
  // 0x40: pointer
  if (data?.PhysicalMedia !== undefined) view.setBigUint64(64, data.PhysicalMedia === null ? 0n : BigInt(util.toPointer(data.PhysicalMedia)), true);
  // 0x48: pointer
  if (data?.LogicalMedia !== undefined) view.setBigUint64(72, data.LogicalMedia === null ? 0n : BigInt(util.toPointer(data.LogicalMedia)), true);
  // 0x50: pointer
  if (data?.Partition !== undefined) view.setBigUint64(80, data.Partition === null ? 0n : BigInt(util.toPointer(data.Partition)), true);
  // 0x58: pointer
  if (data?.MediaPool !== undefined) view.setBigUint64(88, data.MediaPool === null ? 0n : BigInt(util.toPointer(data.MediaPool)), true);
  // 0x60: pointer
  if (data?.MediaType !== undefined) view.setBigUint64(96, data.MediaType === null ? 0n : BigInt(util.toPointer(data.MediaType)), true);
  // 0x68: pointer
  if (data?.LibRequest !== undefined) view.setBigUint64(104, data.LibRequest === null ? 0n : BigInt(util.toPointer(data.LibRequest)), true);
  // 0x70: pointer
  if (data?.OpRequest !== undefined) view.setBigUint64(112, data.OpRequest === null ? 0n : BigInt(util.toPointer(data.OpRequest)), true);
  // 0x78: pointer
  if (data?.Computer !== undefined) view.setBigUint64(120, data.Computer === null ? 0n : BigInt(util.toPointer(data.Computer)), true);
  return buf;
}

export class _Info_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Drive(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DriveType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Library(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Changer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ChangerType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get StorageSlot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get IEDoor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get IEPort(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get PhysicalMedia(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get LogicalMedia(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get Partition(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get MediaPool(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get MediaType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get LibRequest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get OpRequest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get Computer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Drive(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DriveType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Library(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Changer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ChangerType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set StorageSlot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set IEDoor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set IEPort(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set PhysicalMedia(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set LogicalMedia(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set Partition(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set MediaPool(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set MediaType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set LibRequest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set OpRequest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set Computer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_EXTENDED_INFORMATION (size: 16)
 */
export interface SECPKG_EXTENDED_INFORMATION {
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_EXTENDED_INFORMATION_CLASS */
  Class: SECPKG_EXTENDED_INFORMATION_CLASS;
  /** _Info_e__Union */
  Info: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_EXTENDED_INFORMATION = 16;

export function allocSECPKG_EXTENDED_INFORMATION(data?: Partial<SECPKG_EXTENDED_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_EXTENDED_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Class !== undefined) view.setInt32(0, Number(data.Class), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Info !== undefined) view.setBigUint64(8, data.Info === null ? 0n : BigInt(util.toPointer(data.Info)), true);
  return buf;
}

export class SECPKG_EXTENDED_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Class(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Info(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Class(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Info(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_TARGETINFO (size: 16)
 */
export interface SECPKG_TARGETINFO {
  /** Windows.Win32.Foundation.PSID */
  DomainSid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  ComputerName: string | null | Uint8Array | Uint16Array;
}

export const sizeofSECPKG_TARGETINFO = 16;

export function allocSECPKG_TARGETINFO(data?: Partial<SECPKG_TARGETINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_TARGETINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DomainSid !== undefined) view.setBigUint64(0, data.DomainSid === null ? 0n : BigInt(util.toPointer(data.DomainSid)), true);
  // 0x08: buffer
  if (data?.ComputerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ComputerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class SECPKG_TARGETINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DomainSid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get ComputerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DomainSid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set ComputerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SaslContext (size: 8)
 */
export interface SecPkgContext_SaslContext {
  /** ptr */
  SaslContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_SaslContext = 8;

export function allocSecPkgContext_SaslContext(data?: Partial<SecPkgContext_SaslContext>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SaslContext);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SaslContext !== undefined) view.setBigUint64(0, data.SaslContext === null ? 0n : BigInt(util.toPointer(data.SaslContext)), true);
  return buf;
}

export class SecPkgContext_SaslContextView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SaslContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SaslContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECURITY_USER_DATA (size: 32)
 */
export interface SECURITY_USER_DATA {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSID */
  pSid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECURITY_USER_DATA = 32;

export function allocSECURITY_USER_DATA(data?: Partial<SECURITY_USER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_USER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.UserName !== undefined) view.setBigUint64(0, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x08: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(8, data.LogonDomainName === null ? 0n : BigInt(util.toPointer(data.LogonDomainName)), true);
  // 0x10: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(16, data.LogonServer === null ? 0n : BigInt(util.toPointer(data.LogonServer)), true);
  // 0x18: pointer
  if (data?.pSid !== undefined) view.setBigUint64(24, data.pSid === null ? 0n : BigInt(util.toPointer(data.pSid)), true);
  return buf;
}

export class SECURITY_USER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pSid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pSid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CALL_PACKAGE_PIN_DC_REQUEST (size: 32)
 */
export interface SECPKG_CALL_PACKAGE_PIN_DC_REQUEST {
  /** u32 */
  MessageType: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  DcName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DcFlags: number;
}

export const sizeofSECPKG_CALL_PACKAGE_PIN_DC_REQUEST = 32;

export function allocSECPKG_CALL_PACKAGE_PIN_DC_REQUEST(data?: Partial<SECPKG_CALL_PACKAGE_PIN_DC_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CALL_PACKAGE_PIN_DC_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MessageType !== undefined) view.setUint32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.DomainName !== undefined) view.setBigUint64(8, data.DomainName === null ? 0n : BigInt(util.toPointer(data.DomainName)), true);
  // 0x10: pointer
  if (data?.DcName !== undefined) view.setBigUint64(16, data.DcName === null ? 0n : BigInt(util.toPointer(data.DcName)), true);
  // 0x18: u32
  if (data?.DcFlags !== undefined) view.setUint32(24, Number(data.DcFlags), true);
  // 0x1c: pad4
  return buf;
}

export class SECPKG_CALL_PACKAGE_PIN_DC_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MessageType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DcName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get DcFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set MessageType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DcName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set DcFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST (size: 8)
 */
export interface SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST {
  /** u32 */
  MessageType: number;
  /** u32 */
  Flags: number;
}

export const sizeofSECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST = 8;

export function allocSECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST(data?: Partial<SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MessageType !== undefined) view.setUint32(0, Number(data.MessageType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

export class SECPKG_CALL_PACKAGE_UNPIN_ALL_DCS_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MessageType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set MessageType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST (size: 32)
 */
export interface SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST {
  /** u32 */
  MessageType: number;
  /** Windows.Win32.Foundation.LUID */
  OriginLogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  DestinationLogonId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofSECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST = 32;

export function allocSECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST(data?: Partial<SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MessageType !== undefined) view.setUint32(0, Number(data.MessageType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.OriginLogonId !== undefined) view.setBigUint64(8, data.OriginLogonId === null ? 0n : BigInt(util.toPointer(data.OriginLogonId)), true);
  // 0x10: pointer
  if (data?.DestinationLogonId !== undefined) view.setBigUint64(16, data.DestinationLogonId === null ? 0n : BigInt(util.toPointer(data.DestinationLogonId)), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

export class SECPKG_CALL_PACKAGE_TRANSFER_CRED_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get MessageType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get OriginLogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get DestinationLogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set MessageType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set OriginLogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set DestinationLogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_REDIRECTED_LOGON_BUFFER (size: 56)
 */
export interface SECPKG_REDIRECTED_LOGON_BUFFER {
  /** System.Guid */
  RedirectedLogonGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  RedirectedLogonHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REDIRECTED_LOGON_INIT */
  Init: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REDIRECTED_LOGON_CALLBACK */
  Callback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REDIRECTED_LOGON_CLEANUP_CALLBACK */
  CleanupCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REDIRECTED_LOGON_GET_LOGON_CREDS */
  GetLogonCreds: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REDIRECTED_LOGON_GET_SUPP_CREDS */
  GetSupplementalCreds: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_REDIRECTED_LOGON_BUFFER = 56;

export function allocSECPKG_REDIRECTED_LOGON_BUFFER(data?: Partial<SECPKG_REDIRECTED_LOGON_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_REDIRECTED_LOGON_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RedirectedLogonGuid !== undefined) view.setBigUint64(0, data.RedirectedLogonGuid === null ? 0n : BigInt(util.toPointer(data.RedirectedLogonGuid)), true);
  // 0x08: pointer
  if (data?.RedirectedLogonHandle !== undefined) view.setBigUint64(8, data.RedirectedLogonHandle === null ? 0n : BigInt(util.toPointer(data.RedirectedLogonHandle)), true);
  // 0x10: pointer
  if (data?.Init !== undefined) view.setBigUint64(16, data.Init === null ? 0n : BigInt(util.toPointer(data.Init)), true);
  // 0x18: pointer
  if (data?.Callback !== undefined) view.setBigUint64(24, data.Callback === null ? 0n : BigInt(util.toPointer(data.Callback)), true);
  // 0x20: pointer
  if (data?.CleanupCallback !== undefined) view.setBigUint64(32, data.CleanupCallback === null ? 0n : BigInt(util.toPointer(data.CleanupCallback)), true);
  // 0x28: pointer
  if (data?.GetLogonCreds !== undefined) view.setBigUint64(40, data.GetLogonCreds === null ? 0n : BigInt(util.toPointer(data.GetLogonCreds)), true);
  // 0x30: pointer
  if (data?.GetSupplementalCreds !== undefined) view.setBigUint64(48, data.GetSupplementalCreds === null ? 0n : BigInt(util.toPointer(data.GetSupplementalCreds)), true);
  return buf;
}

export class SECPKG_REDIRECTED_LOGON_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get RedirectedLogonGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get RedirectedLogonHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Init(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Callback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get CleanupCallback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get GetLogonCreds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get GetSupplementalCreds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set RedirectedLogonGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set RedirectedLogonHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Init(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Callback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set CleanupCallback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set GetLogonCreds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set GetSupplementalCreds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_POST_LOGON_USER_INFO (size: 24)
 */
export interface SECPKG_POST_LOGON_USER_INFO {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  LinkedLogonId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_POST_LOGON_USER_INFO = 24;

export function allocSECPKG_POST_LOGON_USER_INFO(data?: Partial<SECPKG_POST_LOGON_USER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_POST_LOGON_USER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(8, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x10: pointer
  if (data?.LinkedLogonId !== undefined) view.setBigUint64(16, data.LinkedLogonId === null ? 0n : BigInt(util.toPointer(data.LinkedLogonId)), true);
  return buf;
}

export class SECPKG_POST_LOGON_USER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get LinkedLogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set LinkedLogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_EVENT_PACKAGE_CHANGE (size: 24)
 */
export interface SECPKG_EVENT_PACKAGE_CHANGE {
  /** Windows.Win32.Security.Authentication.Identity.SECPKG_PACKAGE_CHANGE_TYPE */
  ChangeType: SECPKG_PACKAGE_CHANGE_TYPE;
  /** usize */
  PackageId: Deno.PointerValue;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  PackageName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_EVENT_PACKAGE_CHANGE = 24;

export function allocSECPKG_EVENT_PACKAGE_CHANGE(data?: Partial<SECPKG_EVENT_PACKAGE_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_EVENT_PACKAGE_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ChangeType !== undefined) view.setUint32(0, Number(data.ChangeType), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.PackageId !== undefined) view.setBigUint64(8, BigInt(data.PackageId), true);
  // 0x10: pointer
  if (data?.PackageName !== undefined) view.setBigUint64(16, data.PackageName === null ? 0n : BigInt(util.toPointer(data.PackageName)), true);
  return buf;
}

export class SECPKG_EVENT_PACKAGE_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ChangeType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get PackageId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get PackageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ChangeType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set PackageId(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set PackageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_EVENT_ROLE_CHANGE (size: 8)
 */
export interface SECPKG_EVENT_ROLE_CHANGE {
  /** u32 */
  PreviousRole: number;
  /** u32 */
  NewRole: number;
}

export const sizeofSECPKG_EVENT_ROLE_CHANGE = 8;

export function allocSECPKG_EVENT_ROLE_CHANGE(data?: Partial<SECPKG_EVENT_ROLE_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_EVENT_ROLE_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PreviousRole !== undefined) view.setUint32(0, Number(data.PreviousRole), true);
  // 0x04: u32
  if (data?.NewRole !== undefined) view.setUint32(4, Number(data.NewRole), true);
  return buf;
}

export class SECPKG_EVENT_ROLE_CHANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PreviousRole(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NewRole(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set PreviousRole(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NewRole(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_EVENT_NOTIFY (size: 32)
 */
export interface SECPKG_EVENT_NOTIFY {
  /** u32 */
  EventClass: number;
  /** u32 */
  Reserved: number;
  /** u32 */
  EventDataSize: number;
  /** ptr */
  EventData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  PackageParameter: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSECPKG_EVENT_NOTIFY = 32;

export function allocSECPKG_EVENT_NOTIFY(data?: Partial<SECPKG_EVENT_NOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_EVENT_NOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.EventClass !== undefined) view.setUint32(0, Number(data.EventClass), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u32
  if (data?.EventDataSize !== undefined) view.setUint32(8, Number(data.EventDataSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.EventData !== undefined) view.setBigUint64(16, data.EventData === null ? 0n : BigInt(util.toPointer(data.EventData)), true);
  // 0x18: pointer
  if (data?.PackageParameter !== undefined) view.setBigUint64(24, data.PackageParameter === null ? 0n : BigInt(util.toPointer(data.PackageParameter)), true);
  return buf;
}

export class SECPKG_EVENT_NOTIFYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get EventClass(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get EventDataSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get EventData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get PackageParameter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set EventClass(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set EventDataSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set EventData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set PackageParameter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.ENCRYPTED_CREDENTIALW (size: 16)
 */
export interface ENCRYPTED_CREDENTIALW {
  /** Windows.Win32.Security.Credentials.CREDENTIALW */
  Cred: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ClearCredentialBlobSize: number;
}

export const sizeofENCRYPTED_CREDENTIALW = 16;

export function allocENCRYPTED_CREDENTIALW(data?: Partial<ENCRYPTED_CREDENTIALW>): Uint8Array {
  const buf = new Uint8Array(sizeofENCRYPTED_CREDENTIALW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Cred !== undefined) view.setBigUint64(0, data.Cred === null ? 0n : BigInt(util.toPointer(data.Cred)), true);
  // 0x08: u32
  if (data?.ClearCredentialBlobSize !== undefined) view.setUint32(8, Number(data.ClearCredentialBlobSize), true);
  // 0x0c: pad4
  return buf;
}

export class ENCRYPTED_CREDENTIALWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Cred(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ClearCredentialBlobSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Cred(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ClearCredentialBlobSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY32 (size: 32)
 */
export interface SEC_WINNT_AUTH_IDENTITY32 {
  /** u32 */
  User: number;
  /** u32 */
  UserLength: number;
  /** u32 */
  Domain: number;
  /** u32 */
  DomainLength: number;
  /** u32 */
  Password: number;
  /** u32 */
  PasswordLength: number;
  /** u32 */
  Flags: number;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY32 = 32;

export function allocSEC_WINNT_AUTH_IDENTITY32(data?: Partial<SEC_WINNT_AUTH_IDENTITY32>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.User !== undefined) view.setUint32(0, Number(data.User), true);
  // 0x04: u32
  if (data?.UserLength !== undefined) view.setUint32(4, Number(data.UserLength), true);
  // 0x08: u32
  if (data?.Domain !== undefined) view.setUint32(8, Number(data.Domain), true);
  // 0x0c: u32
  if (data?.DomainLength !== undefined) view.setUint32(12, Number(data.DomainLength), true);
  // 0x10: u32
  if (data?.Password !== undefined) view.setUint32(16, Number(data.Password), true);
  // 0x14: u32
  if (data?.PasswordLength !== undefined) view.setUint32(20, Number(data.PasswordLength), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get User(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get UserLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Domain(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get DomainLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Password(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PasswordLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Flags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set User(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set UserLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Domain(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set DomainLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Password(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PasswordLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Flags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEC_WINNT_AUTH_IDENTITY_EX32 (size: 48)
 */
export interface SEC_WINNT_AUTH_IDENTITY_EX32 {
  /** u32 */
  Version: number;
  /** u32 */
  Length: number;
  /** u32 */
  User: number;
  /** u32 */
  UserLength: number;
  /** u32 */
  Domain: number;
  /** u32 */
  DomainLength: number;
  /** u32 */
  Password: number;
  /** u32 */
  PasswordLength: number;
  /** u32 */
  Flags: number;
  /** u32 */
  PackageList: number;
  /** u32 */
  PackageListLength: number;
}

export const sizeofSEC_WINNT_AUTH_IDENTITY_EX32 = 48;

export function allocSEC_WINNT_AUTH_IDENTITY_EX32(data?: Partial<SEC_WINNT_AUTH_IDENTITY_EX32>): Uint8Array {
  const buf = new Uint8Array(sizeofSEC_WINNT_AUTH_IDENTITY_EX32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: u32
  if (data?.User !== undefined) view.setUint32(8, Number(data.User), true);
  // 0x0c: u32
  if (data?.UserLength !== undefined) view.setUint32(12, Number(data.UserLength), true);
  // 0x10: u32
  if (data?.Domain !== undefined) view.setUint32(16, Number(data.Domain), true);
  // 0x14: u32
  if (data?.DomainLength !== undefined) view.setUint32(20, Number(data.DomainLength), true);
  // 0x18: u32
  if (data?.Password !== undefined) view.setUint32(24, Number(data.Password), true);
  // 0x1c: u32
  if (data?.PasswordLength !== undefined) view.setUint32(28, Number(data.PasswordLength), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u32
  if (data?.PackageList !== undefined) view.setUint32(36, Number(data.PackageList), true);
  // 0x28: u32
  if (data?.PackageListLength !== undefined) view.setUint32(40, Number(data.PackageListLength), true);
  // 0x2c: pad4
  return buf;
}

export class SEC_WINNT_AUTH_IDENTITY_EX32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get User(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get UserLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Domain(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DomainLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get Password(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get PasswordLength(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get Flags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get PackageList(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get PackageListLength(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set User(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set UserLength(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Domain(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DomainLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set Password(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set PasswordLength(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set Flags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set PackageList(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set PackageListLength(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.LSA_SECPKG_FUNCTION_TABLE (size: 504)
 */
export interface LSA_SECPKG_FUNCTION_TABLE {
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CREATE_LOGON_SESSION */
  CreateLogonSession: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DELETE_LOGON_SESSION */
  DeleteLogonSession: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ADD_CREDENTIAL */
  AddCredential: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_CREDENTIALS */
  GetCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DELETE_CREDENTIAL */
  DeleteCredential: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_LSA_HEAP */
  AllocateLsaHeap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_LSA_HEAP */
  FreeLsaHeap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_CLIENT_BUFFER */
  AllocateClientBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_CLIENT_BUFFER */
  FreeClientBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_COPY_TO_CLIENT_BUFFER */
  CopyToClientBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_COPY_FROM_CLIENT_BUFFER */
  CopyFromClientBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_IMPERSONATE_CLIENT */
  ImpersonateClient: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_UNLOAD_PACKAGE */
  UnloadPackage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DUPLICATE_HANDLE */
  DuplicateHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_SAVE_SUPPLEMENTAL_CREDENTIALS */
  SaveSupplementalCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CREATE_THREAD */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_CLIENT_INFO */
  GetClientInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REGISTER_NOTIFICATION */
  RegisterNotification: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CANCEL_NOTIFICATION */
  CancelNotification: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_MAP_BUFFER */
  MapBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CREATE_TOKEN */
  CreateToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AUDIT_LOGON */
  AuditLogon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CALL_PACKAGE */
  CallPackage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_LSA_HEAP */
  FreeReturnBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_CALL_INFO */
  GetCallInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CALL_PACKAGEEX */
  CallPackageEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CREATE_SHARED_MEMORY */
  CreateSharedMemory: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_SHARED_MEMORY */
  AllocateSharedMemory: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_SHARED_MEMORY */
  FreeSharedMemory: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DELETE_SHARED_MEMORY */
  DeleteSharedMemory: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_OPEN_SAM_USER */
  OpenSamUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_USER_CREDENTIALS */
  GetUserCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_USER_AUTH_DATA */
  GetUserAuthData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CLOSE_SAM_USER */
  CloseSamUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CONVERT_AUTH_DATA_TO_TOKEN */
  ConvertAuthDataToToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CLIENT_CALLBACK */
  ClientCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_UPDATE_PRIMARY_CREDENTIALS */
  UpdateCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_AUTH_DATA_FOR_USER */
  GetAuthDataForUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CRACK_SINGLE_NAME */
  CrackSingleName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AUDIT_ACCOUNT_LOGON */
  AuditAccountLogon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CALL_PACKAGE_PASSTHROUGH */
  CallPackagePassthrough: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.CredReadFn */
  CrediRead: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.CredReadDomainCredentialsFn */
  CrediReadDomainCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.CredFreeCredentialsFn */
  CrediFreeCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_PROTECT_MEMORY */
  LsaProtectMemory: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_PROTECT_MEMORY */
  LsaUnprotectMemory: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_OPEN_TOKEN_BY_LOGON_ID */
  OpenTokenByLogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_EXPAND_AUTH_DATA_FOR_DOMAIN */
  ExpandAuthDataForDomain: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_PRIVATE_HEAP */
  AllocatePrivateHeap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_PRIVATE_HEAP */
  FreePrivateHeap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CREATE_TOKEN_EX */
  CreateTokenEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.CredWriteFn */
  CrediWrite: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.CrediUnmarshalandDecodeStringFn */
  CrediUnmarshalandDecodeString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_PROTECT_MEMORY */
  DummyFunction6: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_EXTENDED_CALL_FLAGS */
  GetExtendedCallFlags: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_DUPLICATE_HANDLE */
  DuplicateTokenHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_SERVICE_ACCOUNT_PASSWORD */
  GetServiceAccountPassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_PROTECT_MEMORY */
  DummyFunction7: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AUDIT_LOGON_EX */
  AuditLogonEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_CHECK_PROTECTED_USER_BY_TOKEN */
  CheckProtectedUserByToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_QUERY_CLIENT_REQUEST */
  QueryClientRequest: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_GET_APP_MODE_INFO */
  GetAppModeInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_SET_APP_MODE_INFO */
  SetAppModeInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLSA_SECPKG_FUNCTION_TABLE = 504;

export function allocLSA_SECPKG_FUNCTION_TABLE(data?: Partial<LSA_SECPKG_FUNCTION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofLSA_SECPKG_FUNCTION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CreateLogonSession !== undefined) view.setBigUint64(0, data.CreateLogonSession === null ? 0n : BigInt(util.toPointer(data.CreateLogonSession)), true);
  // 0x08: pointer
  if (data?.DeleteLogonSession !== undefined) view.setBigUint64(8, data.DeleteLogonSession === null ? 0n : BigInt(util.toPointer(data.DeleteLogonSession)), true);
  // 0x10: pointer
  if (data?.AddCredential !== undefined) view.setBigUint64(16, data.AddCredential === null ? 0n : BigInt(util.toPointer(data.AddCredential)), true);
  // 0x18: pointer
  if (data?.GetCredentials !== undefined) view.setBigUint64(24, data.GetCredentials === null ? 0n : BigInt(util.toPointer(data.GetCredentials)), true);
  // 0x20: pointer
  if (data?.DeleteCredential !== undefined) view.setBigUint64(32, data.DeleteCredential === null ? 0n : BigInt(util.toPointer(data.DeleteCredential)), true);
  // 0x28: pointer
  if (data?.AllocateLsaHeap !== undefined) view.setBigUint64(40, data.AllocateLsaHeap === null ? 0n : BigInt(util.toPointer(data.AllocateLsaHeap)), true);
  // 0x30: pointer
  if (data?.FreeLsaHeap !== undefined) view.setBigUint64(48, data.FreeLsaHeap === null ? 0n : BigInt(util.toPointer(data.FreeLsaHeap)), true);
  // 0x38: pointer
  if (data?.AllocateClientBuffer !== undefined) view.setBigUint64(56, data.AllocateClientBuffer === null ? 0n : BigInt(util.toPointer(data.AllocateClientBuffer)), true);
  // 0x40: pointer
  if (data?.FreeClientBuffer !== undefined) view.setBigUint64(64, data.FreeClientBuffer === null ? 0n : BigInt(util.toPointer(data.FreeClientBuffer)), true);
  // 0x48: pointer
  if (data?.CopyToClientBuffer !== undefined) view.setBigUint64(72, data.CopyToClientBuffer === null ? 0n : BigInt(util.toPointer(data.CopyToClientBuffer)), true);
  // 0x50: pointer
  if (data?.CopyFromClientBuffer !== undefined) view.setBigUint64(80, data.CopyFromClientBuffer === null ? 0n : BigInt(util.toPointer(data.CopyFromClientBuffer)), true);
  // 0x58: pointer
  if (data?.ImpersonateClient !== undefined) view.setBigUint64(88, data.ImpersonateClient === null ? 0n : BigInt(util.toPointer(data.ImpersonateClient)), true);
  // 0x60: pointer
  if (data?.UnloadPackage !== undefined) view.setBigUint64(96, data.UnloadPackage === null ? 0n : BigInt(util.toPointer(data.UnloadPackage)), true);
  // 0x68: pointer
  if (data?.DuplicateHandle !== undefined) view.setBigUint64(104, data.DuplicateHandle === null ? 0n : BigInt(util.toPointer(data.DuplicateHandle)), true);
  // 0x70: pointer
  if (data?.SaveSupplementalCredentials !== undefined) view.setBigUint64(112, data.SaveSupplementalCredentials === null ? 0n : BigInt(util.toPointer(data.SaveSupplementalCredentials)), true);
  // 0x78: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(120, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x80: pointer
  if (data?.GetClientInfo !== undefined) view.setBigUint64(128, data.GetClientInfo === null ? 0n : BigInt(util.toPointer(data.GetClientInfo)), true);
  // 0x88: pointer
  if (data?.RegisterNotification !== undefined) view.setBigUint64(136, data.RegisterNotification === null ? 0n : BigInt(util.toPointer(data.RegisterNotification)), true);
  // 0x90: pointer
  if (data?.CancelNotification !== undefined) view.setBigUint64(144, data.CancelNotification === null ? 0n : BigInt(util.toPointer(data.CancelNotification)), true);
  // 0x98: pointer
  if (data?.MapBuffer !== undefined) view.setBigUint64(152, data.MapBuffer === null ? 0n : BigInt(util.toPointer(data.MapBuffer)), true);
  // 0xa0: pointer
  if (data?.CreateToken !== undefined) view.setBigUint64(160, data.CreateToken === null ? 0n : BigInt(util.toPointer(data.CreateToken)), true);
  // 0xa8: pointer
  if (data?.AuditLogon !== undefined) view.setBigUint64(168, data.AuditLogon === null ? 0n : BigInt(util.toPointer(data.AuditLogon)), true);
  // 0xb0: pointer
  if (data?.CallPackage !== undefined) view.setBigUint64(176, data.CallPackage === null ? 0n : BigInt(util.toPointer(data.CallPackage)), true);
  // 0xb8: pointer
  if (data?.FreeReturnBuffer !== undefined) view.setBigUint64(184, data.FreeReturnBuffer === null ? 0n : BigInt(util.toPointer(data.FreeReturnBuffer)), true);
  // 0xc0: pointer
  if (data?.GetCallInfo !== undefined) view.setBigUint64(192, data.GetCallInfo === null ? 0n : BigInt(util.toPointer(data.GetCallInfo)), true);
  // 0xc8: pointer
  if (data?.CallPackageEx !== undefined) view.setBigUint64(200, data.CallPackageEx === null ? 0n : BigInt(util.toPointer(data.CallPackageEx)), true);
  // 0xd0: pointer
  if (data?.CreateSharedMemory !== undefined) view.setBigUint64(208, data.CreateSharedMemory === null ? 0n : BigInt(util.toPointer(data.CreateSharedMemory)), true);
  // 0xd8: pointer
  if (data?.AllocateSharedMemory !== undefined) view.setBigUint64(216, data.AllocateSharedMemory === null ? 0n : BigInt(util.toPointer(data.AllocateSharedMemory)), true);
  // 0xe0: pointer
  if (data?.FreeSharedMemory !== undefined) view.setBigUint64(224, data.FreeSharedMemory === null ? 0n : BigInt(util.toPointer(data.FreeSharedMemory)), true);
  // 0xe8: pointer
  if (data?.DeleteSharedMemory !== undefined) view.setBigUint64(232, data.DeleteSharedMemory === null ? 0n : BigInt(util.toPointer(data.DeleteSharedMemory)), true);
  // 0xf0: pointer
  if (data?.OpenSamUser !== undefined) view.setBigUint64(240, data.OpenSamUser === null ? 0n : BigInt(util.toPointer(data.OpenSamUser)), true);
  // 0xf8: pointer
  if (data?.GetUserCredentials !== undefined) view.setBigUint64(248, data.GetUserCredentials === null ? 0n : BigInt(util.toPointer(data.GetUserCredentials)), true);
  // 0x100: pointer
  if (data?.GetUserAuthData !== undefined) view.setBigUint64(256, data.GetUserAuthData === null ? 0n : BigInt(util.toPointer(data.GetUserAuthData)), true);
  // 0x108: pointer
  if (data?.CloseSamUser !== undefined) view.setBigUint64(264, data.CloseSamUser === null ? 0n : BigInt(util.toPointer(data.CloseSamUser)), true);
  // 0x110: pointer
  if (data?.ConvertAuthDataToToken !== undefined) view.setBigUint64(272, data.ConvertAuthDataToToken === null ? 0n : BigInt(util.toPointer(data.ConvertAuthDataToToken)), true);
  // 0x118: pointer
  if (data?.ClientCallback !== undefined) view.setBigUint64(280, data.ClientCallback === null ? 0n : BigInt(util.toPointer(data.ClientCallback)), true);
  // 0x120: pointer
  if (data?.UpdateCredentials !== undefined) view.setBigUint64(288, data.UpdateCredentials === null ? 0n : BigInt(util.toPointer(data.UpdateCredentials)), true);
  // 0x128: pointer
  if (data?.GetAuthDataForUser !== undefined) view.setBigUint64(296, data.GetAuthDataForUser === null ? 0n : BigInt(util.toPointer(data.GetAuthDataForUser)), true);
  // 0x130: pointer
  if (data?.CrackSingleName !== undefined) view.setBigUint64(304, data.CrackSingleName === null ? 0n : BigInt(util.toPointer(data.CrackSingleName)), true);
  // 0x138: pointer
  if (data?.AuditAccountLogon !== undefined) view.setBigUint64(312, data.AuditAccountLogon === null ? 0n : BigInt(util.toPointer(data.AuditAccountLogon)), true);
  // 0x140: pointer
  if (data?.CallPackagePassthrough !== undefined) view.setBigUint64(320, data.CallPackagePassthrough === null ? 0n : BigInt(util.toPointer(data.CallPackagePassthrough)), true);
  // 0x148: pointer
  if (data?.CrediRead !== undefined) view.setBigUint64(328, data.CrediRead === null ? 0n : BigInt(util.toPointer(data.CrediRead)), true);
  // 0x150: pointer
  if (data?.CrediReadDomainCredentials !== undefined) view.setBigUint64(336, data.CrediReadDomainCredentials === null ? 0n : BigInt(util.toPointer(data.CrediReadDomainCredentials)), true);
  // 0x158: pointer
  if (data?.CrediFreeCredentials !== undefined) view.setBigUint64(344, data.CrediFreeCredentials === null ? 0n : BigInt(util.toPointer(data.CrediFreeCredentials)), true);
  // 0x160: pointer
  if (data?.LsaProtectMemory !== undefined) view.setBigUint64(352, data.LsaProtectMemory === null ? 0n : BigInt(util.toPointer(data.LsaProtectMemory)), true);
  // 0x168: pointer
  if (data?.LsaUnprotectMemory !== undefined) view.setBigUint64(360, data.LsaUnprotectMemory === null ? 0n : BigInt(util.toPointer(data.LsaUnprotectMemory)), true);
  // 0x170: pointer
  if (data?.OpenTokenByLogonId !== undefined) view.setBigUint64(368, data.OpenTokenByLogonId === null ? 0n : BigInt(util.toPointer(data.OpenTokenByLogonId)), true);
  // 0x178: pointer
  if (data?.ExpandAuthDataForDomain !== undefined) view.setBigUint64(376, data.ExpandAuthDataForDomain === null ? 0n : BigInt(util.toPointer(data.ExpandAuthDataForDomain)), true);
  // 0x180: pointer
  if (data?.AllocatePrivateHeap !== undefined) view.setBigUint64(384, data.AllocatePrivateHeap === null ? 0n : BigInt(util.toPointer(data.AllocatePrivateHeap)), true);
  // 0x188: pointer
  if (data?.FreePrivateHeap !== undefined) view.setBigUint64(392, data.FreePrivateHeap === null ? 0n : BigInt(util.toPointer(data.FreePrivateHeap)), true);
  // 0x190: pointer
  if (data?.CreateTokenEx !== undefined) view.setBigUint64(400, data.CreateTokenEx === null ? 0n : BigInt(util.toPointer(data.CreateTokenEx)), true);
  // 0x198: pointer
  if (data?.CrediWrite !== undefined) view.setBigUint64(408, data.CrediWrite === null ? 0n : BigInt(util.toPointer(data.CrediWrite)), true);
  // 0x1a0: pointer
  if (data?.CrediUnmarshalandDecodeString !== undefined) view.setBigUint64(416, data.CrediUnmarshalandDecodeString === null ? 0n : BigInt(util.toPointer(data.CrediUnmarshalandDecodeString)), true);
  // 0x1a8: pointer
  if (data?.DummyFunction6 !== undefined) view.setBigUint64(424, data.DummyFunction6 === null ? 0n : BigInt(util.toPointer(data.DummyFunction6)), true);
  // 0x1b0: pointer
  if (data?.GetExtendedCallFlags !== undefined) view.setBigUint64(432, data.GetExtendedCallFlags === null ? 0n : BigInt(util.toPointer(data.GetExtendedCallFlags)), true);
  // 0x1b8: pointer
  if (data?.DuplicateTokenHandle !== undefined) view.setBigUint64(440, data.DuplicateTokenHandle === null ? 0n : BigInt(util.toPointer(data.DuplicateTokenHandle)), true);
  // 0x1c0: pointer
  if (data?.GetServiceAccountPassword !== undefined) view.setBigUint64(448, data.GetServiceAccountPassword === null ? 0n : BigInt(util.toPointer(data.GetServiceAccountPassword)), true);
  // 0x1c8: pointer
  if (data?.DummyFunction7 !== undefined) view.setBigUint64(456, data.DummyFunction7 === null ? 0n : BigInt(util.toPointer(data.DummyFunction7)), true);
  // 0x1d0: pointer
  if (data?.AuditLogonEx !== undefined) view.setBigUint64(464, data.AuditLogonEx === null ? 0n : BigInt(util.toPointer(data.AuditLogonEx)), true);
  // 0x1d8: pointer
  if (data?.CheckProtectedUserByToken !== undefined) view.setBigUint64(472, data.CheckProtectedUserByToken === null ? 0n : BigInt(util.toPointer(data.CheckProtectedUserByToken)), true);
  // 0x1e0: pointer
  if (data?.QueryClientRequest !== undefined) view.setBigUint64(480, data.QueryClientRequest === null ? 0n : BigInt(util.toPointer(data.QueryClientRequest)), true);
  // 0x1e8: pointer
  if (data?.GetAppModeInfo !== undefined) view.setBigUint64(488, data.GetAppModeInfo === null ? 0n : BigInt(util.toPointer(data.GetAppModeInfo)), true);
  // 0x1f0: pointer
  if (data?.SetAppModeInfo !== undefined) view.setBigUint64(496, data.SetAppModeInfo === null ? 0n : BigInt(util.toPointer(data.SetAppModeInfo)), true);
  return buf;
}

export class LSA_SECPKG_FUNCTION_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CreateLogonSession(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DeleteLogonSession(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AddCredential(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get GetCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get DeleteCredential(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get AllocateLsaHeap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get FreeLsaHeap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get AllocateClientBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get FreeClientBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get CopyToClientBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get CopyFromClientBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get ImpersonateClient(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get UnloadPackage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get DuplicateHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get SaveSupplementalCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get CreateThread(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get GetClientInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: pointer
  get RegisterNotification(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x90: pointer
  get CancelNotification(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: pointer
  get MapBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: pointer
  get CreateToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(160, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa8: pointer
  get AuditLogon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(168, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb0: pointer
  get CallPackage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(176, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb8: pointer
  get FreeReturnBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(184, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc0: pointer
  get GetCallInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(192, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc8: pointer
  get CallPackageEx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(200, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd0: pointer
  get CreateSharedMemory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(208, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd8: pointer
  get AllocateSharedMemory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(216, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xe0: pointer
  get FreeSharedMemory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(224, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xe8: pointer
  get DeleteSharedMemory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(232, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xf0: pointer
  get OpenSamUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(240, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xf8: pointer
  get GetUserCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(248, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x100: pointer
  get GetUserAuthData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(256, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x108: pointer
  get CloseSamUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(264, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x110: pointer
  get ConvertAuthDataToToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(272, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x118: pointer
  get ClientCallback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(280, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x120: pointer
  get UpdateCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(288, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x128: pointer
  get GetAuthDataForUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(296, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x130: pointer
  get CrackSingleName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(304, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x138: pointer
  get AuditAccountLogon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(312, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x140: pointer
  get CallPackagePassthrough(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(320, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x148: pointer
  get CrediRead(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(328, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x150: pointer
  get CrediReadDomainCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(336, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x158: pointer
  get CrediFreeCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(344, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x160: pointer
  get LsaProtectMemory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(352, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x168: pointer
  get LsaUnprotectMemory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(360, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x170: pointer
  get OpenTokenByLogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(368, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x178: pointer
  get ExpandAuthDataForDomain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(376, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x180: pointer
  get AllocatePrivateHeap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(384, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x188: pointer
  get FreePrivateHeap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(392, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x190: pointer
  get CreateTokenEx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(400, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x198: pointer
  get CrediWrite(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(408, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x1a0: pointer
  get CrediUnmarshalandDecodeString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(416, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x1a8: pointer
  get DummyFunction6(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(424, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x1b0: pointer
  get GetExtendedCallFlags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(432, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x1b8: pointer
  get DuplicateTokenHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(440, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x1c0: pointer
  get GetServiceAccountPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(448, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x1c8: pointer
  get DummyFunction7(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(456, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x1d0: pointer
  get AuditLogonEx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(464, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x1d8: pointer
  get CheckProtectedUserByToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(472, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x1e0: pointer
  get QueryClientRequest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(480, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x1e8: pointer
  get GetAppModeInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(488, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x1f0: pointer
  get SetAppModeInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(496, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set CreateLogonSession(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DeleteLogonSession(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AddCredential(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set GetCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set DeleteCredential(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set AllocateLsaHeap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set FreeLsaHeap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set AllocateClientBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set FreeClientBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set CopyToClientBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set CopyFromClientBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set ImpersonateClient(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set UnloadPackage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set DuplicateHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set SaveSupplementalCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set CreateThread(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set GetClientInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }

  // 0x88: pointer
  set RegisterNotification(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, BigInt(util.toPointer(value)), true);
  }

  // 0x90: pointer
  set CancelNotification(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, BigInt(util.toPointer(value)), true);
  }

  // 0x98: pointer
  set MapBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, BigInt(util.toPointer(value)), true);
  }

  // 0xa0: pointer
  set CreateToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(160, BigInt(util.toPointer(value)), true);
  }

  // 0xa8: pointer
  set AuditLogon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(168, BigInt(util.toPointer(value)), true);
  }

  // 0xb0: pointer
  set CallPackage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(176, BigInt(util.toPointer(value)), true);
  }

  // 0xb8: pointer
  set FreeReturnBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(184, BigInt(util.toPointer(value)), true);
  }

  // 0xc0: pointer
  set GetCallInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(192, BigInt(util.toPointer(value)), true);
  }

  // 0xc8: pointer
  set CallPackageEx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(200, BigInt(util.toPointer(value)), true);
  }

  // 0xd0: pointer
  set CreateSharedMemory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(208, BigInt(util.toPointer(value)), true);
  }

  // 0xd8: pointer
  set AllocateSharedMemory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(216, BigInt(util.toPointer(value)), true);
  }

  // 0xe0: pointer
  set FreeSharedMemory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(224, BigInt(util.toPointer(value)), true);
  }

  // 0xe8: pointer
  set DeleteSharedMemory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(232, BigInt(util.toPointer(value)), true);
  }

  // 0xf0: pointer
  set OpenSamUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(240, BigInt(util.toPointer(value)), true);
  }

  // 0xf8: pointer
  set GetUserCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(248, BigInt(util.toPointer(value)), true);
  }

  // 0x100: pointer
  set GetUserAuthData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(256, BigInt(util.toPointer(value)), true);
  }

  // 0x108: pointer
  set CloseSamUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(264, BigInt(util.toPointer(value)), true);
  }

  // 0x110: pointer
  set ConvertAuthDataToToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(272, BigInt(util.toPointer(value)), true);
  }

  // 0x118: pointer
  set ClientCallback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(280, BigInt(util.toPointer(value)), true);
  }

  // 0x120: pointer
  set UpdateCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(288, BigInt(util.toPointer(value)), true);
  }

  // 0x128: pointer
  set GetAuthDataForUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(296, BigInt(util.toPointer(value)), true);
  }

  // 0x130: pointer
  set CrackSingleName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(304, BigInt(util.toPointer(value)), true);
  }

  // 0x138: pointer
  set AuditAccountLogon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(312, BigInt(util.toPointer(value)), true);
  }

  // 0x140: pointer
  set CallPackagePassthrough(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(320, BigInt(util.toPointer(value)), true);
  }

  // 0x148: pointer
  set CrediRead(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(328, BigInt(util.toPointer(value)), true);
  }

  // 0x150: pointer
  set CrediReadDomainCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(336, BigInt(util.toPointer(value)), true);
  }

  // 0x158: pointer
  set CrediFreeCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(344, BigInt(util.toPointer(value)), true);
  }

  // 0x160: pointer
  set LsaProtectMemory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(352, BigInt(util.toPointer(value)), true);
  }

  // 0x168: pointer
  set LsaUnprotectMemory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(360, BigInt(util.toPointer(value)), true);
  }

  // 0x170: pointer
  set OpenTokenByLogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(368, BigInt(util.toPointer(value)), true);
  }

  // 0x178: pointer
  set ExpandAuthDataForDomain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(376, BigInt(util.toPointer(value)), true);
  }

  // 0x180: pointer
  set AllocatePrivateHeap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(384, BigInt(util.toPointer(value)), true);
  }

  // 0x188: pointer
  set FreePrivateHeap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(392, BigInt(util.toPointer(value)), true);
  }

  // 0x190: pointer
  set CreateTokenEx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(400, BigInt(util.toPointer(value)), true);
  }

  // 0x198: pointer
  set CrediWrite(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(408, BigInt(util.toPointer(value)), true);
  }

  // 0x1a0: pointer
  set CrediUnmarshalandDecodeString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(416, BigInt(util.toPointer(value)), true);
  }

  // 0x1a8: pointer
  set DummyFunction6(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(424, BigInt(util.toPointer(value)), true);
  }

  // 0x1b0: pointer
  set GetExtendedCallFlags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(432, BigInt(util.toPointer(value)), true);
  }

  // 0x1b8: pointer
  set DuplicateTokenHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(440, BigInt(util.toPointer(value)), true);
  }

  // 0x1c0: pointer
  set GetServiceAccountPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(448, BigInt(util.toPointer(value)), true);
  }

  // 0x1c8: pointer
  set DummyFunction7(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(456, BigInt(util.toPointer(value)), true);
  }

  // 0x1d0: pointer
  set AuditLogonEx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(464, BigInt(util.toPointer(value)), true);
  }

  // 0x1d8: pointer
  set CheckProtectedUserByToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(472, BigInt(util.toPointer(value)), true);
  }

  // 0x1e0: pointer
  set QueryClientRequest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(480, BigInt(util.toPointer(value)), true);
  }

  // 0x1e8: pointer
  set GetAppModeInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(488, BigInt(util.toPointer(value)), true);
  }

  // 0x1f0: pointer
  set SetAppModeInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(496, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_DLL_FUNCTIONS (size: 32)
 */
export interface SECPKG_DLL_FUNCTIONS {
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_LSA_HEAP */
  AllocateHeap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_LSA_HEAP */
  FreeHeap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_REGISTER_CALLBACK */
  RegisterCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_LOCATE_PKG_BY_ID */
  LocatePackageById: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_DLL_FUNCTIONS = 32;

export function allocSECPKG_DLL_FUNCTIONS(data?: Partial<SECPKG_DLL_FUNCTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_DLL_FUNCTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllocateHeap !== undefined) view.setBigUint64(0, data.AllocateHeap === null ? 0n : BigInt(util.toPointer(data.AllocateHeap)), true);
  // 0x08: pointer
  if (data?.FreeHeap !== undefined) view.setBigUint64(8, data.FreeHeap === null ? 0n : BigInt(util.toPointer(data.FreeHeap)), true);
  // 0x10: pointer
  if (data?.RegisterCallback !== undefined) view.setBigUint64(16, data.RegisterCallback === null ? 0n : BigInt(util.toPointer(data.RegisterCallback)), true);
  // 0x18: pointer
  if (data?.LocatePackageById !== undefined) view.setBigUint64(24, data.LocatePackageById === null ? 0n : BigInt(util.toPointer(data.LocatePackageById)), true);
  return buf;
}

export class SECPKG_DLL_FUNCTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AllocateHeap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get FreeHeap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get RegisterCallback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get LocatePackageById(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set AllocateHeap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set FreeHeap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set RegisterCallback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set LocatePackageById(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_FUNCTION_TABLE (size: 336)
 */
export interface SECPKG_FUNCTION_TABLE {
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_INITIALIZE_PACKAGE */
  InitializePackage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_LOGON_USER */
  LogonUserA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_CALL_PACKAGE */
  CallPackage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_LOGON_TERMINATED */
  LogonTerminated: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_CALL_PACKAGE */
  CallPackageUntrusted: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_CALL_PACKAGE_PASSTHROUGH */
  CallPackagePassthrough: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_LOGON_USER_EX */
  LogonUserExA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_LOGON_USER_EX2 */
  LogonUserEx2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpInitializeFn */
  Initialize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpShutdownFn */
  Shutdown: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpGetInfoFn */
  GetInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpAcceptCredentialsFn */
  AcceptCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpAcquireCredentialsHandleFn */
  AcquireCredentialsHandleA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpQueryCredentialsAttributesFn */
  QueryCredentialsAttributesA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpFreeCredentialsHandleFn */
  FreeCredentialsHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpSaveCredentialsFn */
  SaveCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpGetCredentialsFn */
  GetCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpDeleteCredentialsFn */
  DeleteCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpInitLsaModeContextFn */
  InitLsaModeContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpAcceptLsaModeContextFn */
  AcceptLsaModeContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpDeleteContextFn */
  DeleteContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpApplyControlTokenFn */
  ApplyControlToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpGetUserInfoFn */
  GetUserInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpGetExtendedInformationFn */
  GetExtendedInformation: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpQueryContextAttributesFn */
  QueryContextAttributesA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpAddCredentialsFn */
  AddCredentialsA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpSetExtendedInformationFn */
  SetExtendedInformation: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpSetContextAttributesFn */
  SetContextAttributesA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpSetCredentialsAttributesFn */
  SetCredentialsAttributesA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpChangeAccountPasswordFn */
  ChangeAccountPasswordA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpQueryMetaDataFn */
  QueryMetaData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpExchangeMetaDataFn */
  ExchangeMetaData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpGetCredUIContextFn */
  GetCredUIContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpUpdateCredentialsFn */
  UpdateCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpValidateTargetInfoFn */
  ValidateTargetInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.LSA_AP_POST_LOGON_USER */
  PostLogonUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpGetRemoteCredGuardLogonBufferFn */
  GetRemoteCredGuardLogonBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpGetRemoteCredGuardSupplementalCredsFn */
  GetRemoteCredGuardSupplementalCreds: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpGetTbalSupplementalCredsFn */
  GetTbalSupplementalCreds: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_LOGON_USER_EX3 */
  LogonUserEx3: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_PRE_LOGON_USER_SURROGATE */
  PreLogonUserSurrogate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_AP_POST_LOGON_USER_SURROGATE */
  PostLogonUserSurrogate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_FUNCTION_TABLE = 336;

export function allocSECPKG_FUNCTION_TABLE(data?: Partial<SECPKG_FUNCTION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_FUNCTION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InitializePackage !== undefined) view.setBigUint64(0, data.InitializePackage === null ? 0n : BigInt(util.toPointer(data.InitializePackage)), true);
  // 0x08: pointer
  if (data?.LogonUserA !== undefined) view.setBigUint64(8, data.LogonUserA === null ? 0n : BigInt(util.toPointer(data.LogonUserA)), true);
  // 0x10: pointer
  if (data?.CallPackage !== undefined) view.setBigUint64(16, data.CallPackage === null ? 0n : BigInt(util.toPointer(data.CallPackage)), true);
  // 0x18: pointer
  if (data?.LogonTerminated !== undefined) view.setBigUint64(24, data.LogonTerminated === null ? 0n : BigInt(util.toPointer(data.LogonTerminated)), true);
  // 0x20: pointer
  if (data?.CallPackageUntrusted !== undefined) view.setBigUint64(32, data.CallPackageUntrusted === null ? 0n : BigInt(util.toPointer(data.CallPackageUntrusted)), true);
  // 0x28: pointer
  if (data?.CallPackagePassthrough !== undefined) view.setBigUint64(40, data.CallPackagePassthrough === null ? 0n : BigInt(util.toPointer(data.CallPackagePassthrough)), true);
  // 0x30: pointer
  if (data?.LogonUserExA !== undefined) view.setBigUint64(48, data.LogonUserExA === null ? 0n : BigInt(util.toPointer(data.LogonUserExA)), true);
  // 0x38: pointer
  if (data?.LogonUserEx2 !== undefined) view.setBigUint64(56, data.LogonUserEx2 === null ? 0n : BigInt(util.toPointer(data.LogonUserEx2)), true);
  // 0x40: pointer
  if (data?.Initialize !== undefined) view.setBigUint64(64, data.Initialize === null ? 0n : BigInt(util.toPointer(data.Initialize)), true);
  // 0x48: pointer
  if (data?.Shutdown !== undefined) view.setBigUint64(72, data.Shutdown === null ? 0n : BigInt(util.toPointer(data.Shutdown)), true);
  // 0x50: pointer
  if (data?.GetInfo !== undefined) view.setBigUint64(80, data.GetInfo === null ? 0n : BigInt(util.toPointer(data.GetInfo)), true);
  // 0x58: pointer
  if (data?.AcceptCredentials !== undefined) view.setBigUint64(88, data.AcceptCredentials === null ? 0n : BigInt(util.toPointer(data.AcceptCredentials)), true);
  // 0x60: pointer
  if (data?.AcquireCredentialsHandleA !== undefined) view.setBigUint64(96, data.AcquireCredentialsHandleA === null ? 0n : BigInt(util.toPointer(data.AcquireCredentialsHandleA)), true);
  // 0x68: pointer
  if (data?.QueryCredentialsAttributesA !== undefined) view.setBigUint64(104, data.QueryCredentialsAttributesA === null ? 0n : BigInt(util.toPointer(data.QueryCredentialsAttributesA)), true);
  // 0x70: pointer
  if (data?.FreeCredentialsHandle !== undefined) view.setBigUint64(112, data.FreeCredentialsHandle === null ? 0n : BigInt(util.toPointer(data.FreeCredentialsHandle)), true);
  // 0x78: pointer
  if (data?.SaveCredentials !== undefined) view.setBigUint64(120, data.SaveCredentials === null ? 0n : BigInt(util.toPointer(data.SaveCredentials)), true);
  // 0x80: pointer
  if (data?.GetCredentials !== undefined) view.setBigUint64(128, data.GetCredentials === null ? 0n : BigInt(util.toPointer(data.GetCredentials)), true);
  // 0x88: pointer
  if (data?.DeleteCredentials !== undefined) view.setBigUint64(136, data.DeleteCredentials === null ? 0n : BigInt(util.toPointer(data.DeleteCredentials)), true);
  // 0x90: pointer
  if (data?.InitLsaModeContext !== undefined) view.setBigUint64(144, data.InitLsaModeContext === null ? 0n : BigInt(util.toPointer(data.InitLsaModeContext)), true);
  // 0x98: pointer
  if (data?.AcceptLsaModeContext !== undefined) view.setBigUint64(152, data.AcceptLsaModeContext === null ? 0n : BigInt(util.toPointer(data.AcceptLsaModeContext)), true);
  // 0xa0: pointer
  if (data?.DeleteContext !== undefined) view.setBigUint64(160, data.DeleteContext === null ? 0n : BigInt(util.toPointer(data.DeleteContext)), true);
  // 0xa8: pointer
  if (data?.ApplyControlToken !== undefined) view.setBigUint64(168, data.ApplyControlToken === null ? 0n : BigInt(util.toPointer(data.ApplyControlToken)), true);
  // 0xb0: pointer
  if (data?.GetUserInfo !== undefined) view.setBigUint64(176, data.GetUserInfo === null ? 0n : BigInt(util.toPointer(data.GetUserInfo)), true);
  // 0xb8: pointer
  if (data?.GetExtendedInformation !== undefined) view.setBigUint64(184, data.GetExtendedInformation === null ? 0n : BigInt(util.toPointer(data.GetExtendedInformation)), true);
  // 0xc0: pointer
  if (data?.QueryContextAttributesA !== undefined) view.setBigUint64(192, data.QueryContextAttributesA === null ? 0n : BigInt(util.toPointer(data.QueryContextAttributesA)), true);
  // 0xc8: pointer
  if (data?.AddCredentialsA !== undefined) view.setBigUint64(200, data.AddCredentialsA === null ? 0n : BigInt(util.toPointer(data.AddCredentialsA)), true);
  // 0xd0: pointer
  if (data?.SetExtendedInformation !== undefined) view.setBigUint64(208, data.SetExtendedInformation === null ? 0n : BigInt(util.toPointer(data.SetExtendedInformation)), true);
  // 0xd8: pointer
  if (data?.SetContextAttributesA !== undefined) view.setBigUint64(216, data.SetContextAttributesA === null ? 0n : BigInt(util.toPointer(data.SetContextAttributesA)), true);
  // 0xe0: pointer
  if (data?.SetCredentialsAttributesA !== undefined) view.setBigUint64(224, data.SetCredentialsAttributesA === null ? 0n : BigInt(util.toPointer(data.SetCredentialsAttributesA)), true);
  // 0xe8: pointer
  if (data?.ChangeAccountPasswordA !== undefined) view.setBigUint64(232, data.ChangeAccountPasswordA === null ? 0n : BigInt(util.toPointer(data.ChangeAccountPasswordA)), true);
  // 0xf0: pointer
  if (data?.QueryMetaData !== undefined) view.setBigUint64(240, data.QueryMetaData === null ? 0n : BigInt(util.toPointer(data.QueryMetaData)), true);
  // 0xf8: pointer
  if (data?.ExchangeMetaData !== undefined) view.setBigUint64(248, data.ExchangeMetaData === null ? 0n : BigInt(util.toPointer(data.ExchangeMetaData)), true);
  // 0x100: pointer
  if (data?.GetCredUIContext !== undefined) view.setBigUint64(256, data.GetCredUIContext === null ? 0n : BigInt(util.toPointer(data.GetCredUIContext)), true);
  // 0x108: pointer
  if (data?.UpdateCredentials !== undefined) view.setBigUint64(264, data.UpdateCredentials === null ? 0n : BigInt(util.toPointer(data.UpdateCredentials)), true);
  // 0x110: pointer
  if (data?.ValidateTargetInfo !== undefined) view.setBigUint64(272, data.ValidateTargetInfo === null ? 0n : BigInt(util.toPointer(data.ValidateTargetInfo)), true);
  // 0x118: pointer
  if (data?.PostLogonUser !== undefined) view.setBigUint64(280, data.PostLogonUser === null ? 0n : BigInt(util.toPointer(data.PostLogonUser)), true);
  // 0x120: pointer
  if (data?.GetRemoteCredGuardLogonBuffer !== undefined) view.setBigUint64(288, data.GetRemoteCredGuardLogonBuffer === null ? 0n : BigInt(util.toPointer(data.GetRemoteCredGuardLogonBuffer)), true);
  // 0x128: pointer
  if (data?.GetRemoteCredGuardSupplementalCreds !== undefined) view.setBigUint64(296, data.GetRemoteCredGuardSupplementalCreds === null ? 0n : BigInt(util.toPointer(data.GetRemoteCredGuardSupplementalCreds)), true);
  // 0x130: pointer
  if (data?.GetTbalSupplementalCreds !== undefined) view.setBigUint64(304, data.GetTbalSupplementalCreds === null ? 0n : BigInt(util.toPointer(data.GetTbalSupplementalCreds)), true);
  // 0x138: pointer
  if (data?.LogonUserEx3 !== undefined) view.setBigUint64(312, data.LogonUserEx3 === null ? 0n : BigInt(util.toPointer(data.LogonUserEx3)), true);
  // 0x140: pointer
  if (data?.PreLogonUserSurrogate !== undefined) view.setBigUint64(320, data.PreLogonUserSurrogate === null ? 0n : BigInt(util.toPointer(data.PreLogonUserSurrogate)), true);
  // 0x148: pointer
  if (data?.PostLogonUserSurrogate !== undefined) view.setBigUint64(328, data.PostLogonUserSurrogate === null ? 0n : BigInt(util.toPointer(data.PostLogonUserSurrogate)), true);
  return buf;
}

export class SECPKG_FUNCTION_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InitializePackage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LogonUserA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CallPackage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get LogonTerminated(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get CallPackageUntrusted(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get CallPackagePassthrough(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get LogonUserExA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get LogonUserEx2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get Initialize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get Shutdown(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get GetInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get AcceptCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get AcquireCredentialsHandleA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get QueryCredentialsAttributesA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get FreeCredentialsHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get SaveCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get GetCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: pointer
  get DeleteCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x90: pointer
  get InitLsaModeContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: pointer
  get AcceptLsaModeContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: pointer
  get DeleteContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(160, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa8: pointer
  get ApplyControlToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(168, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb0: pointer
  get GetUserInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(176, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb8: pointer
  get GetExtendedInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(184, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc0: pointer
  get QueryContextAttributesA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(192, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc8: pointer
  get AddCredentialsA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(200, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd0: pointer
  get SetExtendedInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(208, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd8: pointer
  get SetContextAttributesA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(216, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xe0: pointer
  get SetCredentialsAttributesA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(224, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xe8: pointer
  get ChangeAccountPasswordA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(232, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xf0: pointer
  get QueryMetaData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(240, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xf8: pointer
  get ExchangeMetaData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(248, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x100: pointer
  get GetCredUIContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(256, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x108: pointer
  get UpdateCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(264, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x110: pointer
  get ValidateTargetInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(272, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x118: pointer
  get PostLogonUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(280, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x120: pointer
  get GetRemoteCredGuardLogonBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(288, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x128: pointer
  get GetRemoteCredGuardSupplementalCreds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(296, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x130: pointer
  get GetTbalSupplementalCreds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(304, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x138: pointer
  get LogonUserEx3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(312, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x140: pointer
  get PreLogonUserSurrogate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(320, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x148: pointer
  get PostLogonUserSurrogate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(328, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set InitializePackage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LogonUserA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CallPackage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set LogonTerminated(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set CallPackageUntrusted(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set CallPackagePassthrough(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set LogonUserExA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set LogonUserEx2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set Initialize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set Shutdown(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set GetInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set AcceptCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set AcquireCredentialsHandleA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set QueryCredentialsAttributesA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set FreeCredentialsHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set SaveCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set GetCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }

  // 0x88: pointer
  set DeleteCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, BigInt(util.toPointer(value)), true);
  }

  // 0x90: pointer
  set InitLsaModeContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, BigInt(util.toPointer(value)), true);
  }

  // 0x98: pointer
  set AcceptLsaModeContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, BigInt(util.toPointer(value)), true);
  }

  // 0xa0: pointer
  set DeleteContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(160, BigInt(util.toPointer(value)), true);
  }

  // 0xa8: pointer
  set ApplyControlToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(168, BigInt(util.toPointer(value)), true);
  }

  // 0xb0: pointer
  set GetUserInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(176, BigInt(util.toPointer(value)), true);
  }

  // 0xb8: pointer
  set GetExtendedInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(184, BigInt(util.toPointer(value)), true);
  }

  // 0xc0: pointer
  set QueryContextAttributesA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(192, BigInt(util.toPointer(value)), true);
  }

  // 0xc8: pointer
  set AddCredentialsA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(200, BigInt(util.toPointer(value)), true);
  }

  // 0xd0: pointer
  set SetExtendedInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(208, BigInt(util.toPointer(value)), true);
  }

  // 0xd8: pointer
  set SetContextAttributesA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(216, BigInt(util.toPointer(value)), true);
  }

  // 0xe0: pointer
  set SetCredentialsAttributesA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(224, BigInt(util.toPointer(value)), true);
  }

  // 0xe8: pointer
  set ChangeAccountPasswordA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(232, BigInt(util.toPointer(value)), true);
  }

  // 0xf0: pointer
  set QueryMetaData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(240, BigInt(util.toPointer(value)), true);
  }

  // 0xf8: pointer
  set ExchangeMetaData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(248, BigInt(util.toPointer(value)), true);
  }

  // 0x100: pointer
  set GetCredUIContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(256, BigInt(util.toPointer(value)), true);
  }

  // 0x108: pointer
  set UpdateCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(264, BigInt(util.toPointer(value)), true);
  }

  // 0x110: pointer
  set ValidateTargetInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(272, BigInt(util.toPointer(value)), true);
  }

  // 0x118: pointer
  set PostLogonUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(280, BigInt(util.toPointer(value)), true);
  }

  // 0x120: pointer
  set GetRemoteCredGuardLogonBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(288, BigInt(util.toPointer(value)), true);
  }

  // 0x128: pointer
  set GetRemoteCredGuardSupplementalCreds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(296, BigInt(util.toPointer(value)), true);
  }

  // 0x130: pointer
  set GetTbalSupplementalCreds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(304, BigInt(util.toPointer(value)), true);
  }

  // 0x138: pointer
  set LogonUserEx3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(312, BigInt(util.toPointer(value)), true);
  }

  // 0x140: pointer
  set PreLogonUserSurrogate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(320, BigInt(util.toPointer(value)), true);
  }

  // 0x148: pointer
  set PostLogonUserSurrogate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(328, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_USER_FUNCTION_TABLE (size: 120)
 */
export interface SECPKG_USER_FUNCTION_TABLE {
  /** Windows.Win32.Security.Authentication.Identity.SpInstanceInitFn */
  InstanceInit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpInitUserModeContextFn */
  InitUserModeContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpMakeSignatureFn */
  MakeSignature: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpVerifySignatureFn */
  VerifySignature: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpSealMessageFn */
  SealMessage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpUnsealMessageFn */
  UnsealMessage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpGetContextTokenFn */
  GetContextToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpQueryContextAttributesFn */
  QueryContextAttributesA: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpCompleteAuthTokenFn */
  CompleteAuthToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpDeleteContextFn */
  DeleteUserModeContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpFormatCredentialsFn */
  FormatCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpMarshallSupplementalCredsFn */
  MarshallSupplementalCreds: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpExportSecurityContextFn */
  ExportContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpImportSecurityContextFn */
  ImportContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpMarshalAttributeDataFn */
  MarshalAttributeData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_USER_FUNCTION_TABLE = 120;

export function allocSECPKG_USER_FUNCTION_TABLE(data?: Partial<SECPKG_USER_FUNCTION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_USER_FUNCTION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InstanceInit !== undefined) view.setBigUint64(0, data.InstanceInit === null ? 0n : BigInt(util.toPointer(data.InstanceInit)), true);
  // 0x08: pointer
  if (data?.InitUserModeContext !== undefined) view.setBigUint64(8, data.InitUserModeContext === null ? 0n : BigInt(util.toPointer(data.InitUserModeContext)), true);
  // 0x10: pointer
  if (data?.MakeSignature !== undefined) view.setBigUint64(16, data.MakeSignature === null ? 0n : BigInt(util.toPointer(data.MakeSignature)), true);
  // 0x18: pointer
  if (data?.VerifySignature !== undefined) view.setBigUint64(24, data.VerifySignature === null ? 0n : BigInt(util.toPointer(data.VerifySignature)), true);
  // 0x20: pointer
  if (data?.SealMessage !== undefined) view.setBigUint64(32, data.SealMessage === null ? 0n : BigInt(util.toPointer(data.SealMessage)), true);
  // 0x28: pointer
  if (data?.UnsealMessage !== undefined) view.setBigUint64(40, data.UnsealMessage === null ? 0n : BigInt(util.toPointer(data.UnsealMessage)), true);
  // 0x30: pointer
  if (data?.GetContextToken !== undefined) view.setBigUint64(48, data.GetContextToken === null ? 0n : BigInt(util.toPointer(data.GetContextToken)), true);
  // 0x38: pointer
  if (data?.QueryContextAttributesA !== undefined) view.setBigUint64(56, data.QueryContextAttributesA === null ? 0n : BigInt(util.toPointer(data.QueryContextAttributesA)), true);
  // 0x40: pointer
  if (data?.CompleteAuthToken !== undefined) view.setBigUint64(64, data.CompleteAuthToken === null ? 0n : BigInt(util.toPointer(data.CompleteAuthToken)), true);
  // 0x48: pointer
  if (data?.DeleteUserModeContext !== undefined) view.setBigUint64(72, data.DeleteUserModeContext === null ? 0n : BigInt(util.toPointer(data.DeleteUserModeContext)), true);
  // 0x50: pointer
  if (data?.FormatCredentials !== undefined) view.setBigUint64(80, data.FormatCredentials === null ? 0n : BigInt(util.toPointer(data.FormatCredentials)), true);
  // 0x58: pointer
  if (data?.MarshallSupplementalCreds !== undefined) view.setBigUint64(88, data.MarshallSupplementalCreds === null ? 0n : BigInt(util.toPointer(data.MarshallSupplementalCreds)), true);
  // 0x60: pointer
  if (data?.ExportContext !== undefined) view.setBigUint64(96, data.ExportContext === null ? 0n : BigInt(util.toPointer(data.ExportContext)), true);
  // 0x68: pointer
  if (data?.ImportContext !== undefined) view.setBigUint64(104, data.ImportContext === null ? 0n : BigInt(util.toPointer(data.ImportContext)), true);
  // 0x70: pointer
  if (data?.MarshalAttributeData !== undefined) view.setBigUint64(112, data.MarshalAttributeData === null ? 0n : BigInt(util.toPointer(data.MarshalAttributeData)), true);
  return buf;
}

export class SECPKG_USER_FUNCTION_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InstanceInit(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get InitUserModeContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get MakeSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get VerifySignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get SealMessage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get UnsealMessage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get GetContextToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get QueryContextAttributesA(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get CompleteAuthToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get DeleteUserModeContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get FormatCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get MarshallSupplementalCreds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get ExportContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get ImportContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get MarshalAttributeData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set InstanceInit(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set InitUserModeContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set MakeSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set VerifySignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set SealMessage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set UnsealMessage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set GetContextToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set QueryContextAttributesA(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set CompleteAuthToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set DeleteUserModeContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set FormatCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set MarshallSupplementalCreds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set ExportContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set ImportContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set MarshalAttributeData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.Kernel.LIST_ENTRY (size: 16)
 */
export interface LIST_ENTRY {
  /** ptr */
  Flink: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Blink: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLIST_ENTRY = 16;

export function allocLIST_ENTRY(data?: Partial<LIST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofLIST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flink !== undefined) view.setBigUint64(0, data.Flink === null ? 0n : BigInt(util.toPointer(data.Flink)), true);
  // 0x08: pointer
  if (data?.Blink !== undefined) view.setBigUint64(8, data.Blink === null ? 0n : BigInt(util.toPointer(data.Blink)), true);
  return buf;
}

export class LIST_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Blink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Flink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Blink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.KSEC_LIST_ENTRY (size: 32)
 */
export interface KSEC_LIST_ENTRY {
  /** Windows.Win32.System.Kernel.LIST_ENTRY */
  List: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  RefCount: number;
  /** u32 */
  Signature: number;
  /** ptr */
  OwningList: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofKSEC_LIST_ENTRY = 32;

export function allocKSEC_LIST_ENTRY(data?: Partial<KSEC_LIST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofKSEC_LIST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.List !== undefined) view.setBigUint64(0, data.List === null ? 0n : BigInt(util.toPointer(data.List)), true);
  // 0x08: i32
  if (data?.RefCount !== undefined) view.setInt32(8, Number(data.RefCount), true);
  // 0x0c: u32
  if (data?.Signature !== undefined) view.setUint32(12, Number(data.Signature), true);
  // 0x10: pointer
  if (data?.OwningList !== undefined) view.setBigUint64(16, data.OwningList === null ? 0n : BigInt(util.toPointer(data.OwningList)), true);
  // 0x18: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(24, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

export class KSEC_LIST_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get List(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get RefCount(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get Signature(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get OwningList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Reserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set List(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set RefCount(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set Signature(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set OwningList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_KERNEL_FUNCTIONS (size: 72)
 */
export interface SECPKG_KERNEL_FUNCTIONS {
  /** Windows.Win32.Security.Authentication.Identity.PLSA_ALLOCATE_LSA_HEAP */
  AllocateHeap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PLSA_FREE_LSA_HEAP */
  FreeHeap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_CREATE_CONTEXT_LIST */
  CreateContextList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_INSERT_LIST_ENTRY */
  InsertListEntry: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_REFERENCE_LIST_ENTRY */
  ReferenceListEntry: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_DEREFERENCE_LIST_ENTRY */
  DereferenceListEntry: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_SERIALIZE_WINNT_AUTH_DATA */
  SerializeWinntAuthData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_SERIALIZE_SCHANNEL_AUTH_DATA */
  SerializeSchannelAuthData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.PKSEC_LOCATE_PKG_BY_ID */
  LocatePackageById: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_KERNEL_FUNCTIONS = 72;

export function allocSECPKG_KERNEL_FUNCTIONS(data?: Partial<SECPKG_KERNEL_FUNCTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_KERNEL_FUNCTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllocateHeap !== undefined) view.setBigUint64(0, data.AllocateHeap === null ? 0n : BigInt(util.toPointer(data.AllocateHeap)), true);
  // 0x08: pointer
  if (data?.FreeHeap !== undefined) view.setBigUint64(8, data.FreeHeap === null ? 0n : BigInt(util.toPointer(data.FreeHeap)), true);
  // 0x10: pointer
  if (data?.CreateContextList !== undefined) view.setBigUint64(16, data.CreateContextList === null ? 0n : BigInt(util.toPointer(data.CreateContextList)), true);
  // 0x18: pointer
  if (data?.InsertListEntry !== undefined) view.setBigUint64(24, data.InsertListEntry === null ? 0n : BigInt(util.toPointer(data.InsertListEntry)), true);
  // 0x20: pointer
  if (data?.ReferenceListEntry !== undefined) view.setBigUint64(32, data.ReferenceListEntry === null ? 0n : BigInt(util.toPointer(data.ReferenceListEntry)), true);
  // 0x28: pointer
  if (data?.DereferenceListEntry !== undefined) view.setBigUint64(40, data.DereferenceListEntry === null ? 0n : BigInt(util.toPointer(data.DereferenceListEntry)), true);
  // 0x30: pointer
  if (data?.SerializeWinntAuthData !== undefined) view.setBigUint64(48, data.SerializeWinntAuthData === null ? 0n : BigInt(util.toPointer(data.SerializeWinntAuthData)), true);
  // 0x38: pointer
  if (data?.SerializeSchannelAuthData !== undefined) view.setBigUint64(56, data.SerializeSchannelAuthData === null ? 0n : BigInt(util.toPointer(data.SerializeSchannelAuthData)), true);
  // 0x40: pointer
  if (data?.LocatePackageById !== undefined) view.setBigUint64(64, data.LocatePackageById === null ? 0n : BigInt(util.toPointer(data.LocatePackageById)), true);
  return buf;
}

export class SECPKG_KERNEL_FUNCTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AllocateHeap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get FreeHeap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CreateContextList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get InsertListEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ReferenceListEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get DereferenceListEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get SerializeWinntAuthData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get SerializeSchannelAuthData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get LocatePackageById(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set AllocateHeap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set FreeHeap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CreateContextList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set InsertListEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ReferenceListEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set DereferenceListEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set SerializeWinntAuthData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set SerializeSchannelAuthData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set LocatePackageById(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SECPKG_KERNEL_FUNCTION_TABLE (size: 120)
 */
export interface SECPKG_KERNEL_FUNCTION_TABLE {
  /** Windows.Win32.Security.Authentication.Identity.KspInitPackageFn */
  Initialize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KspDeleteContextFn */
  DeleteContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KspInitContextFn */
  InitContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KspMapHandleFn */
  MapHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KspMakeSignatureFn */
  Sign: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KspVerifySignatureFn */
  Verify: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KspSealMessageFn */
  Seal: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KspUnsealMessageFn */
  Unseal: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KspGetTokenFn */
  GetToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KspQueryAttributesFn */
  QueryAttributes: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KspCompleteTokenFn */
  CompleteToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpExportSecurityContextFn */
  ExportContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SpImportSecurityContextFn */
  ImportContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KspSetPagingModeFn */
  SetPackagePagingMode: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.KspSerializeAuthDataFn */
  SerializeAuthData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECPKG_KERNEL_FUNCTION_TABLE = 120;

export function allocSECPKG_KERNEL_FUNCTION_TABLE(data?: Partial<SECPKG_KERNEL_FUNCTION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECPKG_KERNEL_FUNCTION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Initialize !== undefined) view.setBigUint64(0, data.Initialize === null ? 0n : BigInt(util.toPointer(data.Initialize)), true);
  // 0x08: pointer
  if (data?.DeleteContext !== undefined) view.setBigUint64(8, data.DeleteContext === null ? 0n : BigInt(util.toPointer(data.DeleteContext)), true);
  // 0x10: pointer
  if (data?.InitContext !== undefined) view.setBigUint64(16, data.InitContext === null ? 0n : BigInt(util.toPointer(data.InitContext)), true);
  // 0x18: pointer
  if (data?.MapHandle !== undefined) view.setBigUint64(24, data.MapHandle === null ? 0n : BigInt(util.toPointer(data.MapHandle)), true);
  // 0x20: pointer
  if (data?.Sign !== undefined) view.setBigUint64(32, data.Sign === null ? 0n : BigInt(util.toPointer(data.Sign)), true);
  // 0x28: pointer
  if (data?.Verify !== undefined) view.setBigUint64(40, data.Verify === null ? 0n : BigInt(util.toPointer(data.Verify)), true);
  // 0x30: pointer
  if (data?.Seal !== undefined) view.setBigUint64(48, data.Seal === null ? 0n : BigInt(util.toPointer(data.Seal)), true);
  // 0x38: pointer
  if (data?.Unseal !== undefined) view.setBigUint64(56, data.Unseal === null ? 0n : BigInt(util.toPointer(data.Unseal)), true);
  // 0x40: pointer
  if (data?.GetToken !== undefined) view.setBigUint64(64, data.GetToken === null ? 0n : BigInt(util.toPointer(data.GetToken)), true);
  // 0x48: pointer
  if (data?.QueryAttributes !== undefined) view.setBigUint64(72, data.QueryAttributes === null ? 0n : BigInt(util.toPointer(data.QueryAttributes)), true);
  // 0x50: pointer
  if (data?.CompleteToken !== undefined) view.setBigUint64(80, data.CompleteToken === null ? 0n : BigInt(util.toPointer(data.CompleteToken)), true);
  // 0x58: pointer
  if (data?.ExportContext !== undefined) view.setBigUint64(88, data.ExportContext === null ? 0n : BigInt(util.toPointer(data.ExportContext)), true);
  // 0x60: pointer
  if (data?.ImportContext !== undefined) view.setBigUint64(96, data.ImportContext === null ? 0n : BigInt(util.toPointer(data.ImportContext)), true);
  // 0x68: pointer
  if (data?.SetPackagePagingMode !== undefined) view.setBigUint64(104, data.SetPackagePagingMode === null ? 0n : BigInt(util.toPointer(data.SetPackagePagingMode)), true);
  // 0x70: pointer
  if (data?.SerializeAuthData !== undefined) view.setBigUint64(112, data.SerializeAuthData === null ? 0n : BigInt(util.toPointer(data.SerializeAuthData)), true);
  return buf;
}

export class SECPKG_KERNEL_FUNCTION_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Initialize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DeleteContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get InitContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get MapHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Sign(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Verify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Seal(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Unseal(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get GetToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get QueryAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get CompleteToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get ExportContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get ImportContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get SetPackagePagingMode(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get SerializeAuthData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Initialize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DeleteContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set InitContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set MapHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Sign(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Verify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Seal(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Unseal(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set GetToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set QueryAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set CompleteToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set ExportContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set ImportContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set SetPackagePagingMode(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set SerializeAuthData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCred_SupportedAlgs (size: 16)
 */
export interface SecPkgCred_SupportedAlgs {
  /** u32 */
  cSupportedAlgs: number;
  /** ptr */
  palgSupportedAlgs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgCred_SupportedAlgs = 16;

export function allocSecPkgCred_SupportedAlgs(data?: Partial<SecPkgCred_SupportedAlgs>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCred_SupportedAlgs);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cSupportedAlgs !== undefined) view.setUint32(0, Number(data.cSupportedAlgs), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.palgSupportedAlgs !== undefined) view.setBigUint64(8, data.palgSupportedAlgs === null ? 0n : BigInt(util.toPointer(data.palgSupportedAlgs)), true);
  return buf;
}

export class SecPkgCred_SupportedAlgsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cSupportedAlgs(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get palgSupportedAlgs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cSupportedAlgs(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set palgSupportedAlgs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCred_CipherStrengths (size: 8)
 */
export interface SecPkgCred_CipherStrengths {
  /** u32 */
  dwMinimumCipherStrength: number;
  /** u32 */
  dwMaximumCipherStrength: number;
}

export const sizeofSecPkgCred_CipherStrengths = 8;

export function allocSecPkgCred_CipherStrengths(data?: Partial<SecPkgCred_CipherStrengths>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCred_CipherStrengths);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMinimumCipherStrength !== undefined) view.setUint32(0, Number(data.dwMinimumCipherStrength), true);
  // 0x04: u32
  if (data?.dwMaximumCipherStrength !== undefined) view.setUint32(4, Number(data.dwMaximumCipherStrength), true);
  return buf;
}

export class SecPkgCred_CipherStrengthsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMinimumCipherStrength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMaximumCipherStrength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwMinimumCipherStrength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMaximumCipherStrength(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCred_SupportedProtocols (size: 8)
 */
export interface SecPkgCred_SupportedProtocols {
  /** u32 */
  grbitProtocol: number;
}

export const sizeofSecPkgCred_SupportedProtocols = 8;

export function allocSecPkgCred_SupportedProtocols(data?: Partial<SecPkgCred_SupportedProtocols>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCred_SupportedProtocols);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.grbitProtocol !== undefined) view.setUint32(0, Number(data.grbitProtocol), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgCred_SupportedProtocolsView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get grbitProtocol(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set grbitProtocol(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCred_ClientCertPolicy (size: 56)
 */
export interface SecPkgCred_ClientCertPolicy {
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidPolicyId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCertFlags: number;
  /** u32 */
  dwUrlRetrievalTimeout: number;
  /** Windows.Win32.Foundation.BOOL */
  fCheckRevocationFreshnessTime: boolean;
  /** u32 */
  dwRevocationFreshnessTime: number;
  /** Windows.Win32.Foundation.BOOL */
  fOmitUsageCheck: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  pwszSslCtlStoreName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszSslCtlIdentifier: string | null | Uint8Array | Uint16Array;
}

export const sizeofSecPkgCred_ClientCertPolicy = 56;

export function allocSecPkgCred_ClientCertPolicy(data?: Partial<SecPkgCred_ClientCertPolicy>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCred_ClientCertPolicy);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidPolicyId !== undefined) view.setBigUint64(8, data.guidPolicyId === null ? 0n : BigInt(util.toPointer(data.guidPolicyId)), true);
  // 0x10: u32
  if (data?.dwCertFlags !== undefined) view.setUint32(16, Number(data.dwCertFlags), true);
  // 0x14: u32
  if (data?.dwUrlRetrievalTimeout !== undefined) view.setUint32(20, Number(data.dwUrlRetrievalTimeout), true);
  // 0x18: i32
  if (data?.fCheckRevocationFreshnessTime !== undefined) view.setInt32(24, Number(data.fCheckRevocationFreshnessTime), true);
  // 0x1c: u32
  if (data?.dwRevocationFreshnessTime !== undefined) view.setUint32(28, Number(data.dwRevocationFreshnessTime), true);
  // 0x20: i32
  if (data?.fOmitUsageCheck !== undefined) view.setInt32(32, Number(data.fOmitUsageCheck), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.pwszSslCtlStoreName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwszSslCtlStoreName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.pwszSslCtlIdentifier !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pwszSslCtlIdentifier);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  return buf;
}

export class SecPkgCred_ClientCertPolicyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidPolicyId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwCertFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwUrlRetrievalTimeout(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get fCheckRevocationFreshnessTime(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get dwRevocationFreshnessTime(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get fOmitUsageCheck(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get pwszSslCtlStoreName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: buffer
  get pwszSslCtlIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidPolicyId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwCertFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwUrlRetrievalTimeout(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set fCheckRevocationFreshnessTime(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set dwRevocationFreshnessTime(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set fOmitUsageCheck(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set pwszSslCtlStoreName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: buffer
  set pwszSslCtlIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(util.toPointer((this.buf as any)._f48)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCred_SessionTicketKey (size: 32)
 */
export interface SecPkgCred_SessionTicketKey {
  /** u32 */
  TicketInfoVersion: number;
  /** array */
  KeyId: Deno.PointerValue | null;
  /** array */
  KeyingMaterial: Deno.PointerValue | null;
  /** u8 */
  KeyingMaterialSize: number;
}

export const sizeofSecPkgCred_SessionTicketKey = 32;

export function allocSecPkgCred_SessionTicketKey(data?: Partial<SecPkgCred_SessionTicketKey>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCred_SessionTicketKey);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TicketInfoVersion !== undefined) view.setUint32(0, Number(data.TicketInfoVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyId !== undefined) view.setBigUint64(8, data.KeyId === null ? 0n : BigInt(util.toPointer(data.KeyId)), true);
  // 0x10: pointer
  if (data?.KeyingMaterial !== undefined) view.setBigUint64(16, data.KeyingMaterial === null ? 0n : BigInt(util.toPointer(data.KeyingMaterial)), true);
  // 0x18: u8
  if (data?.KeyingMaterialSize !== undefined) view.setUint8(24, Number(data.KeyingMaterialSize));
  // 0x19: pad7
  return buf;
}

export class SecPkgCred_SessionTicketKeyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TicketInfoVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get KeyingMaterial(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u8
  get KeyingMaterialSize(): number {
    return this.view.getUint8(24);
  }

  // 0x19: pad7

  // 0x00: u32
  set TicketInfoVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set KeyingMaterial(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u8
  set KeyingMaterialSize(value: number) {
    this.view.setUint8(24, value);
  }

  // 0x19: pad7
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgCred_SessionTicketKeys (size: 16)
 */
export interface SecPkgCred_SessionTicketKeys {
  /** u32 */
  cSessionTicketKeys: number;
  /** ptr */
  pSessionTicketKeys: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgCred_SessionTicketKeys = 16;

export function allocSecPkgCred_SessionTicketKeys(data?: Partial<SecPkgCred_SessionTicketKeys>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgCred_SessionTicketKeys);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cSessionTicketKeys !== undefined) view.setUint32(0, Number(data.cSessionTicketKeys), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pSessionTicketKeys !== undefined) view.setBigUint64(8, data.pSessionTicketKeys === null ? 0n : BigInt(util.toPointer(data.pSessionTicketKeys)), true);
  return buf;
}

export class SecPkgCred_SessionTicketKeysView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cSessionTicketKeys(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pSessionTicketKeys(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cSessionTicketKeys(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pSessionTicketKeys(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_RemoteCredentialInfo (size: 32)
 */
export interface SecPkgContext_RemoteCredentialInfo {
  /** u32 */
  cbCertificateChain: number;
  /** ptr */
  pbCertificateChain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cCertificates: number;
  /** u32 */
  fFlags: number;
  /** u32 */
  dwBits: number;
}

export const sizeofSecPkgContext_RemoteCredentialInfo = 32;

export function allocSecPkgContext_RemoteCredentialInfo(data?: Partial<SecPkgContext_RemoteCredentialInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_RemoteCredentialInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbCertificateChain !== undefined) view.setUint32(0, Number(data.cbCertificateChain), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbCertificateChain !== undefined) view.setBigUint64(8, data.pbCertificateChain === null ? 0n : BigInt(util.toPointer(data.pbCertificateChain)), true);
  // 0x10: u32
  if (data?.cCertificates !== undefined) view.setUint32(16, Number(data.cCertificates), true);
  // 0x14: u32
  if (data?.fFlags !== undefined) view.setUint32(20, Number(data.fFlags), true);
  // 0x18: u32
  if (data?.dwBits !== undefined) view.setUint32(24, Number(data.dwBits), true);
  // 0x1c: pad4
  return buf;
}

export class SecPkgContext_RemoteCredentialInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbCertificateChain(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbCertificateChain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cCertificates(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get fFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwBits(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set cbCertificateChain(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbCertificateChain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cCertificates(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set fFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwBits(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_LocalCredentialInfo (size: 32)
 */
export interface SecPkgContext_LocalCredentialInfo {
  /** u32 */
  cbCertificateChain: number;
  /** ptr */
  pbCertificateChain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cCertificates: number;
  /** u32 */
  fFlags: number;
  /** u32 */
  dwBits: number;
}

export const sizeofSecPkgContext_LocalCredentialInfo = 32;

export function allocSecPkgContext_LocalCredentialInfo(data?: Partial<SecPkgContext_LocalCredentialInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_LocalCredentialInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbCertificateChain !== undefined) view.setUint32(0, Number(data.cbCertificateChain), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbCertificateChain !== undefined) view.setBigUint64(8, data.pbCertificateChain === null ? 0n : BigInt(util.toPointer(data.pbCertificateChain)), true);
  // 0x10: u32
  if (data?.cCertificates !== undefined) view.setUint32(16, Number(data.cCertificates), true);
  // 0x14: u32
  if (data?.fFlags !== undefined) view.setUint32(20, Number(data.fFlags), true);
  // 0x18: u32
  if (data?.dwBits !== undefined) view.setUint32(24, Number(data.dwBits), true);
  // 0x1c: pad4
  return buf;
}

export class SecPkgContext_LocalCredentialInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbCertificateChain(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbCertificateChain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cCertificates(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get fFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwBits(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set cbCertificateChain(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbCertificateChain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cCertificates(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set fFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwBits(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

export type HRESULT = number;

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ClientCertPolicyResult (size: 16)
 */
export interface SecPkgContext_ClientCertPolicyResult {
  /** Windows.Win32.Foundation.HRESULT */
  dwPolicyResult: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guidPolicyId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSecPkgContext_ClientCertPolicyResult = 16;

export function allocSecPkgContext_ClientCertPolicyResult(data?: Partial<SecPkgContext_ClientCertPolicyResult>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ClientCertPolicyResult);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dwPolicyResult !== undefined) view.setBigUint64(0, data.dwPolicyResult === null ? 0n : BigInt(util.toPointer(data.dwPolicyResult)), true);
  // 0x08: pointer
  if (data?.guidPolicyId !== undefined) view.setBigUint64(8, data.guidPolicyId === null ? 0n : BigInt(util.toPointer(data.guidPolicyId)), true);
  return buf;
}

export class SecPkgContext_ClientCertPolicyResultView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dwPolicyResult(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get guidPolicyId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set dwPolicyResult(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set guidPolicyId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_IssuerListInfoEx (size: 16)
 */
export interface SecPkgContext_IssuerListInfoEx {
  /** ptr */
  aIssuers: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cIssuers: number;
}

export const sizeofSecPkgContext_IssuerListInfoEx = 16;

export function allocSecPkgContext_IssuerListInfoEx(data?: Partial<SecPkgContext_IssuerListInfoEx>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_IssuerListInfoEx);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.aIssuers !== undefined) view.setBigUint64(0, data.aIssuers === null ? 0n : BigInt(util.toPointer(data.aIssuers)), true);
  // 0x08: u32
  if (data?.cIssuers !== undefined) view.setUint32(8, Number(data.cIssuers), true);
  // 0x0c: pad4
  return buf;
}

export class SecPkgContext_IssuerListInfoExView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get aIssuers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cIssuers(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set aIssuers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set cIssuers(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ConnectionInfo (size: 32)
 */
export interface SecPkgContext_ConnectionInfo {
  /** u32 */
  dwProtocol: number;
  /** u32 */
  aiCipher: number;
  /** u32 */
  dwCipherStrength: number;
  /** u32 */
  aiHash: number;
  /** u32 */
  dwHashStrength: number;
  /** u32 */
  aiExch: number;
  /** u32 */
  dwExchStrength: number;
}

export const sizeofSecPkgContext_ConnectionInfo = 32;

export function allocSecPkgContext_ConnectionInfo(data?: Partial<SecPkgContext_ConnectionInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ConnectionInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwProtocol !== undefined) view.setUint32(0, Number(data.dwProtocol), true);
  // 0x04: u32
  if (data?.aiCipher !== undefined) view.setUint32(4, Number(data.aiCipher), true);
  // 0x08: u32
  if (data?.dwCipherStrength !== undefined) view.setUint32(8, Number(data.dwCipherStrength), true);
  // 0x0c: u32
  if (data?.aiHash !== undefined) view.setUint32(12, Number(data.aiHash), true);
  // 0x10: u32
  if (data?.dwHashStrength !== undefined) view.setUint32(16, Number(data.dwHashStrength), true);
  // 0x14: u32
  if (data?.aiExch !== undefined) view.setUint32(20, Number(data.aiExch), true);
  // 0x18: u32
  if (data?.dwExchStrength !== undefined) view.setUint32(24, Number(data.dwExchStrength), true);
  // 0x1c: pad4
  return buf;
}

export class SecPkgContext_ConnectionInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwProtocol(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get aiCipher(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCipherStrength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get aiHash(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwHashStrength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get aiExch(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwExchStrength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set dwProtocol(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set aiCipher(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCipherStrength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set aiHash(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwHashStrength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set aiExch(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwExchStrength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ConnectionInfoEx (size: 56)
 */
export interface SecPkgContext_ConnectionInfoEx {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwProtocol: number;
  /** array */
  szCipher: Deno.PointerValue | null;
  /** u32 */
  dwCipherStrength: number;
  /** array */
  szHash: Deno.PointerValue | null;
  /** u32 */
  dwHashStrength: number;
  /** array */
  szExchange: Deno.PointerValue | null;
  /** u32 */
  dwExchStrength: number;
}

export const sizeofSecPkgContext_ConnectionInfoEx = 56;

export function allocSecPkgContext_ConnectionInfoEx(data?: Partial<SecPkgContext_ConnectionInfoEx>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ConnectionInfoEx);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwProtocol !== undefined) view.setUint32(4, Number(data.dwProtocol), true);
  // 0x08: pointer
  if (data?.szCipher !== undefined) view.setBigUint64(8, data.szCipher === null ? 0n : BigInt(util.toPointer(data.szCipher)), true);
  // 0x10: u32
  if (data?.dwCipherStrength !== undefined) view.setUint32(16, Number(data.dwCipherStrength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szHash !== undefined) view.setBigUint64(24, data.szHash === null ? 0n : BigInt(util.toPointer(data.szHash)), true);
  // 0x20: u32
  if (data?.dwHashStrength !== undefined) view.setUint32(32, Number(data.dwHashStrength), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.szExchange !== undefined) view.setBigUint64(40, data.szExchange === null ? 0n : BigInt(util.toPointer(data.szExchange)), true);
  // 0x30: u32
  if (data?.dwExchStrength !== undefined) view.setUint32(48, Number(data.dwExchStrength), true);
  // 0x34: pad4
  return buf;
}

export class SecPkgContext_ConnectionInfoExView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwProtocol(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get szCipher(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwCipherStrength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get szHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwHashStrength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get szExchange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwExchStrength(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwProtocol(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set szCipher(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwCipherStrength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set szHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwHashStrength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set szExchange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set dwExchStrength(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_CipherInfo (size: 88)
 */
export interface SecPkgContext_CipherInfo {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwProtocol: number;
  /** u32 */
  dwCipherSuite: number;
  /** u32 */
  dwBaseCipherSuite: number;
  /** array */
  szCipherSuite: Deno.PointerValue | null;
  /** array */
  szCipher: Deno.PointerValue | null;
  /** u32 */
  dwCipherLen: number;
  /** u32 */
  dwCipherBlockLen: number;
  /** array */
  szHash: Deno.PointerValue | null;
  /** u32 */
  dwHashLen: number;
  /** array */
  szExchange: Deno.PointerValue | null;
  /** u32 */
  dwMinExchangeLen: number;
  /** u32 */
  dwMaxExchangeLen: number;
  /** array */
  szCertificate: Deno.PointerValue | null;
  /** u32 */
  dwKeyType: number;
}

export const sizeofSecPkgContext_CipherInfo = 88;

export function allocSecPkgContext_CipherInfo(data?: Partial<SecPkgContext_CipherInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_CipherInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwProtocol !== undefined) view.setUint32(4, Number(data.dwProtocol), true);
  // 0x08: u32
  if (data?.dwCipherSuite !== undefined) view.setUint32(8, Number(data.dwCipherSuite), true);
  // 0x0c: u32
  if (data?.dwBaseCipherSuite !== undefined) view.setUint32(12, Number(data.dwBaseCipherSuite), true);
  // 0x10: pointer
  if (data?.szCipherSuite !== undefined) view.setBigUint64(16, data.szCipherSuite === null ? 0n : BigInt(util.toPointer(data.szCipherSuite)), true);
  // 0x18: pointer
  if (data?.szCipher !== undefined) view.setBigUint64(24, data.szCipher === null ? 0n : BigInt(util.toPointer(data.szCipher)), true);
  // 0x20: u32
  if (data?.dwCipherLen !== undefined) view.setUint32(32, Number(data.dwCipherLen), true);
  // 0x24: u32
  if (data?.dwCipherBlockLen !== undefined) view.setUint32(36, Number(data.dwCipherBlockLen), true);
  // 0x28: pointer
  if (data?.szHash !== undefined) view.setBigUint64(40, data.szHash === null ? 0n : BigInt(util.toPointer(data.szHash)), true);
  // 0x30: u32
  if (data?.dwHashLen !== undefined) view.setUint32(48, Number(data.dwHashLen), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.szExchange !== undefined) view.setBigUint64(56, data.szExchange === null ? 0n : BigInt(util.toPointer(data.szExchange)), true);
  // 0x40: u32
  if (data?.dwMinExchangeLen !== undefined) view.setUint32(64, Number(data.dwMinExchangeLen), true);
  // 0x44: u32
  if (data?.dwMaxExchangeLen !== undefined) view.setUint32(68, Number(data.dwMaxExchangeLen), true);
  // 0x48: pointer
  if (data?.szCertificate !== undefined) view.setBigUint64(72, data.szCertificate === null ? 0n : BigInt(util.toPointer(data.szCertificate)), true);
  // 0x50: u32
  if (data?.dwKeyType !== undefined) view.setUint32(80, Number(data.dwKeyType), true);
  // 0x54: pad4
  return buf;
}

export class SecPkgContext_CipherInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwProtocol(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCipherSuite(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwBaseCipherSuite(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get szCipherSuite(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get szCipher(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwCipherLen(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwCipherBlockLen(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get szHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwHashLen(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get szExchange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get dwMinExchangeLen(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwMaxExchangeLen(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: pointer
  get szCertificate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get dwKeyType(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwProtocol(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCipherSuite(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwBaseCipherSuite(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set szCipherSuite(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set szCipher(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwCipherLen(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwCipherBlockLen(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set szHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set dwHashLen(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set szExchange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set dwMinExchangeLen(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwMaxExchangeLen(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: pointer
  set szCertificate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set dwKeyType(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_EapKeyBlock (size: 16)
 */
export interface SecPkgContext_EapKeyBlock {
  /** array */
  rgbKeys: Deno.PointerValue | null;
  /** array */
  rgbIVs: Deno.PointerValue | null;
}

export const sizeofSecPkgContext_EapKeyBlock = 16;

export function allocSecPkgContext_EapKeyBlock(data?: Partial<SecPkgContext_EapKeyBlock>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_EapKeyBlock);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgbKeys !== undefined) view.setBigUint64(0, data.rgbKeys === null ? 0n : BigInt(util.toPointer(data.rgbKeys)), true);
  // 0x08: pointer
  if (data?.rgbIVs !== undefined) view.setBigUint64(8, data.rgbIVs === null ? 0n : BigInt(util.toPointer(data.rgbIVs)), true);
  return buf;
}

export class SecPkgContext_EapKeyBlockView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rgbKeys(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get rgbIVs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set rgbKeys(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set rgbIVs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_MappedCredAttr (size: 16)
 */
export interface SecPkgContext_MappedCredAttr {
  /** u32 */
  dwAttribute: number;
  /** ptr */
  pvBuffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_MappedCredAttr = 16;

export function allocSecPkgContext_MappedCredAttr(data?: Partial<SecPkgContext_MappedCredAttr>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_MappedCredAttr);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAttribute !== undefined) view.setUint32(0, Number(data.dwAttribute), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvBuffer !== undefined) view.setBigUint64(8, data.pvBuffer === null ? 0n : BigInt(util.toPointer(data.pvBuffer)), true);
  return buf;
}

export class SecPkgContext_MappedCredAttrView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAttribute(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pvBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwAttribute(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pvBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SessionInfo (size: 16)
 */
export interface SecPkgContext_SessionInfo {
  /** u32 */
  dwFlags: number;
  /** u32 */
  cbSessionId: number;
  /** array */
  rgbSessionId: Deno.PointerValue | null;
}

export const sizeofSecPkgContext_SessionInfo = 16;

export function allocSecPkgContext_SessionInfo(data?: Partial<SecPkgContext_SessionInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SessionInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.cbSessionId !== undefined) view.setUint32(4, Number(data.cbSessionId), true);
  // 0x08: pointer
  if (data?.rgbSessionId !== undefined) view.setBigUint64(8, data.rgbSessionId === null ? 0n : BigInt(util.toPointer(data.rgbSessionId)), true);
  return buf;
}

export class SecPkgContext_SessionInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbSessionId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgbSessionId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbSessionId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgbSessionId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SessionAppData (size: 16)
 */
export interface SecPkgContext_SessionAppData {
  /** u32 */
  dwFlags: number;
  /** u32 */
  cbAppData: number;
  /** ptr */
  pbAppData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_SessionAppData = 16;

export function allocSecPkgContext_SessionAppData(data?: Partial<SecPkgContext_SessionAppData>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SessionAppData);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.cbAppData !== undefined) view.setUint32(4, Number(data.cbAppData), true);
  // 0x08: pointer
  if (data?.pbAppData !== undefined) view.setBigUint64(8, data.pbAppData === null ? 0n : BigInt(util.toPointer(data.pbAppData)), true);
  return buf;
}

export class SecPkgContext_SessionAppDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbAppData(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbAppData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbAppData(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbAppData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_EapPrfInfo (size: 16)
 */
export interface SecPkgContext_EapPrfInfo {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbPrfData: number;
  /** ptr */
  pbPrfData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_EapPrfInfo = 16;

export function allocSecPkgContext_EapPrfInfo(data?: Partial<SecPkgContext_EapPrfInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_EapPrfInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbPrfData !== undefined) view.setUint32(4, Number(data.cbPrfData), true);
  // 0x08: pointer
  if (data?.pbPrfData !== undefined) view.setBigUint64(8, data.pbPrfData === null ? 0n : BigInt(util.toPointer(data.pbPrfData)), true);
  return buf;
}

export class SecPkgContext_EapPrfInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbPrfData(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbPrfData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbPrfData(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbPrfData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SupportedSignatures (size: 16)
 */
export interface SecPkgContext_SupportedSignatures {
  /** u16 */
  cSignatureAndHashAlgorithms: number;
  /** ptr */
  pSignatureAndHashAlgorithms: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_SupportedSignatures = 16;

export function allocSecPkgContext_SupportedSignatures(data?: Partial<SecPkgContext_SupportedSignatures>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SupportedSignatures);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cSignatureAndHashAlgorithms !== undefined) view.setUint16(0, Number(data.cSignatureAndHashAlgorithms), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.pSignatureAndHashAlgorithms !== undefined) view.setBigUint64(8, data.pSignatureAndHashAlgorithms === null ? 0n : BigInt(util.toPointer(data.pSignatureAndHashAlgorithms)), true);
  return buf;
}

export class SecPkgContext_SupportedSignaturesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cSignatureAndHashAlgorithms(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get pSignatureAndHashAlgorithms(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set cSignatureAndHashAlgorithms(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set pSignatureAndHashAlgorithms(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_Certificates (size: 16)
 */
export interface SecPkgContext_Certificates {
  /** u32 */
  cCertificates: number;
  /** u32 */
  cbCertificateChain: number;
  /** ptr */
  pbCertificateChain: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_Certificates = 16;

export function allocSecPkgContext_Certificates(data?: Partial<SecPkgContext_Certificates>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_Certificates);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCertificates !== undefined) view.setUint32(0, Number(data.cCertificates), true);
  // 0x04: u32
  if (data?.cbCertificateChain !== undefined) view.setUint32(4, Number(data.cbCertificateChain), true);
  // 0x08: pointer
  if (data?.pbCertificateChain !== undefined) view.setBigUint64(8, data.pbCertificateChain === null ? 0n : BigInt(util.toPointer(data.pbCertificateChain)), true);
  return buf;
}

export class SecPkgContext_CertificatesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cCertificates(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbCertificateChain(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbCertificateChain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cCertificates(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbCertificateChain(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbCertificateChain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_CertInfo (size: 40)
 */
export interface SecPkgContext_CertInfo {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbSubjectName: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszSubjectName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbIssuerName: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIssuerName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwKeySize: number;
}

export const sizeofSecPkgContext_CertInfo = 40;

export function allocSecPkgContext_CertInfo(data?: Partial<SecPkgContext_CertInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_CertInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbSubjectName !== undefined) view.setUint32(4, Number(data.cbSubjectName), true);
  // 0x08: buffer
  if (data?.pwszSubjectName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszSubjectName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cbIssuerName !== undefined) view.setUint32(16, Number(data.cbIssuerName), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pwszIssuerName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszIssuerName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwKeySize !== undefined) view.setUint32(32, Number(data.dwKeySize), true);
  // 0x24: pad4
  return buf;
}

export class SecPkgContext_CertInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbSubjectName(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pwszSubjectName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbIssuerName(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get pwszIssuerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwKeySize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbSubjectName(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pwszSubjectName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set cbIssuerName(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set pwszIssuerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set dwKeySize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_UiInfo (size: 8)
 */
export interface SecPkgContext_UiInfo {
  /** Windows.Win32.Foundation.HWND */
  hParentWindow: Deno.PointerValue | null;
}

export const sizeofSecPkgContext_UiInfo = 8;

export function allocSecPkgContext_UiInfo(data?: Partial<SecPkgContext_UiInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_UiInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hParentWindow !== undefined) view.setBigUint64(0, data.hParentWindow === null ? 0n : BigInt(util.toPointer(data.hParentWindow)), true);
  return buf;
}

export class SecPkgContext_UiInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hParentWindow(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hParentWindow(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_EarlyStart (size: 8)
 */
export interface SecPkgContext_EarlyStart {
  /** u32 */
  dwEarlyStartFlags: number;
}

export const sizeofSecPkgContext_EarlyStart = 8;

export function allocSecPkgContext_EarlyStart(data?: Partial<SecPkgContext_EarlyStart>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_EarlyStart);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwEarlyStartFlags !== undefined) view.setUint32(0, Number(data.dwEarlyStartFlags), true);
  // 0x04: pad4
  return buf;
}

export class SecPkgContext_EarlyStartView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwEarlyStartFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwEarlyStartFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_KeyingMaterialInfo (size: 40)
 */
export interface SecPkgContext_KeyingMaterialInfo {
  /** u16 */
  cbLabel: number;
  /** Windows.Win32.Foundation.PSTR */
  pszLabel: string | null | Uint8Array;
  /** u16 */
  cbContextValue: number;
  /** ptr */
  pbContextValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbKeyingMaterial: number;
}

export const sizeofSecPkgContext_KeyingMaterialInfo = 40;

export function allocSecPkgContext_KeyingMaterialInfo(data?: Partial<SecPkgContext_KeyingMaterialInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_KeyingMaterialInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbLabel !== undefined) view.setUint16(0, Number(data.cbLabel), true);
  // 0x02: pad6
  // 0x08: buffer
  if (data?.pszLabel !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszLabel);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u16
  if (data?.cbContextValue !== undefined) view.setUint16(16, Number(data.cbContextValue), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.pbContextValue !== undefined) view.setBigUint64(24, data.pbContextValue === null ? 0n : BigInt(util.toPointer(data.pbContextValue)), true);
  // 0x20: u32
  if (data?.cbKeyingMaterial !== undefined) view.setUint32(32, Number(data.cbKeyingMaterial), true);
  // 0x24: pad4
  return buf;
}

export class SecPkgContext_KeyingMaterialInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbLabel(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  get pszLabel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get cbContextValue(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get pbContextValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cbKeyingMaterial(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u16
  set cbLabel(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  set pszLabel(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u16
  set cbContextValue(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set pbContextValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cbKeyingMaterial(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_KeyingMaterial (size: 16)
 */
export interface SecPkgContext_KeyingMaterial {
  /** u32 */
  cbKeyingMaterial: number;
  /** ptr */
  pbKeyingMaterial: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_KeyingMaterial = 16;

export function allocSecPkgContext_KeyingMaterial(data?: Partial<SecPkgContext_KeyingMaterial>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_KeyingMaterial);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbKeyingMaterial !== undefined) view.setUint32(0, Number(data.cbKeyingMaterial), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbKeyingMaterial !== undefined) view.setBigUint64(8, data.pbKeyingMaterial === null ? 0n : BigInt(util.toPointer(data.pbKeyingMaterial)), true);
  return buf;
}

export class SecPkgContext_KeyingMaterialView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbKeyingMaterial(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbKeyingMaterial(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbKeyingMaterial(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbKeyingMaterial(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_KeyingMaterial_Inproc (size: 48)
 */
export interface SecPkgContext_KeyingMaterial_Inproc {
  /** u16 */
  cbLabel: number;
  /** Windows.Win32.Foundation.PSTR */
  pszLabel: string | null | Uint8Array;
  /** u16 */
  cbContextValue: number;
  /** ptr */
  pbContextValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbKeyingMaterial: number;
  /** ptr */
  pbKeyingMaterial: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_KeyingMaterial_Inproc = 48;

export function allocSecPkgContext_KeyingMaterial_Inproc(data?: Partial<SecPkgContext_KeyingMaterial_Inproc>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_KeyingMaterial_Inproc);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbLabel !== undefined) view.setUint16(0, Number(data.cbLabel), true);
  // 0x02: pad6
  // 0x08: buffer
  if (data?.pszLabel !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszLabel);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u16
  if (data?.cbContextValue !== undefined) view.setUint16(16, Number(data.cbContextValue), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.pbContextValue !== undefined) view.setBigUint64(24, data.pbContextValue === null ? 0n : BigInt(util.toPointer(data.pbContextValue)), true);
  // 0x20: u32
  if (data?.cbKeyingMaterial !== undefined) view.setUint32(32, Number(data.cbKeyingMaterial), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pbKeyingMaterial !== undefined) view.setBigUint64(40, data.pbKeyingMaterial === null ? 0n : BigInt(util.toPointer(data.pbKeyingMaterial)), true);
  return buf;
}

export class SecPkgContext_KeyingMaterial_InprocView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbLabel(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  get pszLabel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get cbContextValue(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get pbContextValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cbKeyingMaterial(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pbKeyingMaterial(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set cbLabel(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  set pszLabel(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u16
  set cbContextValue(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set pbContextValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cbKeyingMaterial(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pbKeyingMaterial(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_SrtpParameters (size: 16)
 */
export interface SecPkgContext_SrtpParameters {
  /** u16 */
  ProtectionProfile: number;
  /** u8 */
  MasterKeyIdentifierSize: number;
  /** ptr */
  MasterKeyIdentifier: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_SrtpParameters = 16;

export function allocSecPkgContext_SrtpParameters(data?: Partial<SecPkgContext_SrtpParameters>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_SrtpParameters);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ProtectionProfile !== undefined) view.setUint16(0, Number(data.ProtectionProfile), true);
  // 0x02: u8
  if (data?.MasterKeyIdentifierSize !== undefined) view.setUint8(2, Number(data.MasterKeyIdentifierSize));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.MasterKeyIdentifier !== undefined) view.setBigUint64(8, data.MasterKeyIdentifier === null ? 0n : BigInt(util.toPointer(data.MasterKeyIdentifier)), true);
  return buf;
}

export class SecPkgContext_SrtpParametersView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ProtectionProfile(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get MasterKeyIdentifierSize(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get MasterKeyIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set ProtectionProfile(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set MasterKeyIdentifierSize(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set MasterKeyIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_TokenBinding (size: 16)
 */
export interface SecPkgContext_TokenBinding {
  /** u8 */
  MajorVersion: number;
  /** u8 */
  MinorVersion: number;
  /** u16 */
  KeyParametersSize: number;
  /** ptr */
  KeyParameters: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_TokenBinding = 16;

export function allocSecPkgContext_TokenBinding(data?: Partial<SecPkgContext_TokenBinding>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_TokenBinding);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.MajorVersion !== undefined) view.setUint8(0, Number(data.MajorVersion));
  // 0x01: u8
  if (data?.MinorVersion !== undefined) view.setUint8(1, Number(data.MinorVersion));
  // 0x02: u16
  if (data?.KeyParametersSize !== undefined) view.setUint16(2, Number(data.KeyParametersSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyParameters !== undefined) view.setBigUint64(8, data.KeyParameters === null ? 0n : BigInt(util.toPointer(data.KeyParameters)), true);
  return buf;
}

export class SecPkgContext_TokenBindingView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get MajorVersion(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get MinorVersion(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get KeyParametersSize(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set MajorVersion(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set MinorVersion(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set KeyParametersSize(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_CertificateValidationResult (size: 16)
 */
export interface SecPkgContext_CertificateValidationResult {
  /** u32 */
  dwChainErrorStatus: number;
  /** Windows.Win32.Foundation.HRESULT */
  hrVerifyChainStatus: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSecPkgContext_CertificateValidationResult = 16;

export function allocSecPkgContext_CertificateValidationResult(data?: Partial<SecPkgContext_CertificateValidationResult>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_CertificateValidationResult);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwChainErrorStatus !== undefined) view.setUint32(0, Number(data.dwChainErrorStatus), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hrVerifyChainStatus !== undefined) view.setBigUint64(8, data.hrVerifyChainStatus === null ? 0n : BigInt(util.toPointer(data.hrVerifyChainStatus)), true);
  return buf;
}

export class SecPkgContext_CertificateValidationResultView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwChainErrorStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hrVerifyChainStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwChainErrorStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hrVerifyChainStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCHANNEL_CRED (size: 80)
 */
export interface SCHANNEL_CRED {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cCreds: number;
  /** ptr */
  paCred: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hRootStore: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cMappers: number;
  /** ptr */
  aphMappers: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cSupportedAlgs: number;
  /** ptr */
  palgSupportedAlgs: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  grbitEnabledProtocols: number;
  /** u32 */
  dwMinimumCipherStrength: number;
  /** u32 */
  dwMaximumCipherStrength: number;
  /** u32 */
  dwSessionLifespan: number;
  /** Windows.Win32.Security.Authentication.Identity.SCHANNEL_CRED_FLAGS */
  dwFlags: SCHANNEL_CRED_FLAGS;
  /** u32 */
  dwCredFormat: number;
}

export const sizeofSCHANNEL_CRED = 80;

export function allocSCHANNEL_CRED(data?: Partial<SCHANNEL_CRED>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHANNEL_CRED);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cCreds !== undefined) view.setUint32(4, Number(data.cCreds), true);
  // 0x08: pointer
  if (data?.paCred !== undefined) view.setBigUint64(8, data.paCred === null ? 0n : BigInt(util.toPointer(data.paCred)), true);
  // 0x10: pointer
  if (data?.hRootStore !== undefined) view.setBigUint64(16, data.hRootStore === null ? 0n : BigInt(util.toPointer(data.hRootStore)), true);
  // 0x18: u32
  if (data?.cMappers !== undefined) view.setUint32(24, Number(data.cMappers), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.aphMappers !== undefined) view.setBigUint64(32, data.aphMappers === null ? 0n : BigInt(util.toPointer(data.aphMappers)), true);
  // 0x28: u32
  if (data?.cSupportedAlgs !== undefined) view.setUint32(40, Number(data.cSupportedAlgs), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.palgSupportedAlgs !== undefined) view.setBigUint64(48, data.palgSupportedAlgs === null ? 0n : BigInt(util.toPointer(data.palgSupportedAlgs)), true);
  // 0x38: u32
  if (data?.grbitEnabledProtocols !== undefined) view.setUint32(56, Number(data.grbitEnabledProtocols), true);
  // 0x3c: u32
  if (data?.dwMinimumCipherStrength !== undefined) view.setUint32(60, Number(data.dwMinimumCipherStrength), true);
  // 0x40: u32
  if (data?.dwMaximumCipherStrength !== undefined) view.setUint32(64, Number(data.dwMaximumCipherStrength), true);
  // 0x44: u32
  if (data?.dwSessionLifespan !== undefined) view.setUint32(68, Number(data.dwSessionLifespan), true);
  // 0x48: u32
  if (data?.dwFlags !== undefined) view.setUint32(72, Number(data.dwFlags), true);
  // 0x4c: u32
  if (data?.dwCredFormat !== undefined) view.setUint32(76, Number(data.dwCredFormat), true);
  return buf;
}

export class SCHANNEL_CREDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cCreds(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get paCred(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hRootStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get cMappers(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get aphMappers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get cSupportedAlgs(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get palgSupportedAlgs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get grbitEnabledProtocols(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwMinimumCipherStrength(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwMaximumCipherStrength(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwSessionLifespan(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwFlags(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwCredFormat(): number {
    return this.view.getUint32(76, true);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cCreds(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set paCred(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hRootStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set cMappers(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set aphMappers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set cSupportedAlgs(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set palgSupportedAlgs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set grbitEnabledProtocols(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwMinimumCipherStrength(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwMaximumCipherStrength(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwSessionLifespan(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwFlags(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwCredFormat(value: number) {
    this.view.setUint32(76, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SEND_GENERIC_TLS_EXTENSION (size: 24)
 */
export interface SEND_GENERIC_TLS_EXTENSION {
  /** u16 */
  ExtensionType: number;
  /** u16 */
  HandshakeType: number;
  /** u32 */
  Flags: number;
  /** u16 */
  BufferSize: number;
  /** array */
  Buffer: Deno.PointerValue | null;
}

export const sizeofSEND_GENERIC_TLS_EXTENSION = 24;

export function allocSEND_GENERIC_TLS_EXTENSION(data?: Partial<SEND_GENERIC_TLS_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofSEND_GENERIC_TLS_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ExtensionType !== undefined) view.setUint16(0, Number(data.ExtensionType), true);
  // 0x02: u16
  if (data?.HandshakeType !== undefined) view.setUint16(2, Number(data.HandshakeType), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u16
  if (data?.BufferSize !== undefined) view.setUint16(8, Number(data.BufferSize), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(16, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

export class SEND_GENERIC_TLS_EXTENSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ExtensionType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get HandshakeType(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get BufferSize(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set ExtensionType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set HandshakeType(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set BufferSize(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TLS_EXTENSION_SUBSCRIPTION (size: 8)
 */
export interface TLS_EXTENSION_SUBSCRIPTION {
  /** u16 */
  ExtensionType: number;
  /** u16 */
  HandshakeType: number;
}

export const sizeofTLS_EXTENSION_SUBSCRIPTION = 8;

export function allocTLS_EXTENSION_SUBSCRIPTION(data?: Partial<TLS_EXTENSION_SUBSCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofTLS_EXTENSION_SUBSCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ExtensionType !== undefined) view.setUint16(0, Number(data.ExtensionType), true);
  // 0x02: u16
  if (data?.HandshakeType !== undefined) view.setUint16(2, Number(data.HandshakeType), true);
  // 0x04: pad4
  return buf;
}

export class TLS_EXTENSION_SUBSCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ExtensionType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get HandshakeType(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set ExtensionType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set HandshakeType(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SUBSCRIBE_GENERIC_TLS_EXTENSION (size: 16)
 */
export interface SUBSCRIBE_GENERIC_TLS_EXTENSION {
  /** u32 */
  Flags: number;
  /** u32 */
  SubscriptionsCount: number;
  /** array */
  Subscriptions: Deno.PointerValue | null;
}

export const sizeofSUBSCRIBE_GENERIC_TLS_EXTENSION = 16;

export function allocSUBSCRIBE_GENERIC_TLS_EXTENSION(data?: Partial<SUBSCRIBE_GENERIC_TLS_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofSUBSCRIBE_GENERIC_TLS_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u32
  if (data?.SubscriptionsCount !== undefined) view.setUint32(4, Number(data.SubscriptionsCount), true);
  // 0x08: pointer
  if (data?.Subscriptions !== undefined) view.setBigUint64(8, data.Subscriptions === null ? 0n : BigInt(util.toPointer(data.Subscriptions)), true);
  return buf;
}

export class SUBSCRIBE_GENERIC_TLS_EXTENSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SubscriptionsCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Subscriptions(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SubscriptionsCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Subscriptions(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCHANNEL_CERT_HASH (size: 24)
 */
export interface SCHANNEL_CERT_HASH {
  /** u32 */
  dwLength: number;
  /** u32 */
  dwFlags: number;
  /** usize */
  hProv: Deno.PointerValue;
  /** array */
  ShaHash: Deno.PointerValue | null;
}

export const sizeofSCHANNEL_CERT_HASH = 24;

export function allocSCHANNEL_CERT_HASH(data?: Partial<SCHANNEL_CERT_HASH>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHANNEL_CERT_HASH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: usize
  if (data?.hProv !== undefined) view.setBigUint64(8, BigInt(data.hProv), true);
  // 0x10: pointer
  if (data?.ShaHash !== undefined) view.setBigUint64(16, data.ShaHash === null ? 0n : BigInt(util.toPointer(data.ShaHash)), true);
  return buf;
}

export class SCHANNEL_CERT_HASHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: usize
  get hProv(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get ShaHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: usize
  set hProv(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ShaHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCHANNEL_CERT_HASH_STORE (size: 32)
 */
export interface SCHANNEL_CERT_HASH_STORE {
  /** u32 */
  dwLength: number;
  /** u32 */
  dwFlags: number;
  /** usize */
  hProv: Deno.PointerValue;
  /** array */
  ShaHash: Deno.PointerValue | null;
  /** array */
  pwszStoreName: Deno.PointerValue | null;
}

export const sizeofSCHANNEL_CERT_HASH_STORE = 32;

export function allocSCHANNEL_CERT_HASH_STORE(data?: Partial<SCHANNEL_CERT_HASH_STORE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHANNEL_CERT_HASH_STORE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: usize
  if (data?.hProv !== undefined) view.setBigUint64(8, BigInt(data.hProv), true);
  // 0x10: pointer
  if (data?.ShaHash !== undefined) view.setBigUint64(16, data.ShaHash === null ? 0n : BigInt(util.toPointer(data.ShaHash)), true);
  // 0x18: pointer
  if (data?.pwszStoreName !== undefined) view.setBigUint64(24, data.pwszStoreName === null ? 0n : BigInt(util.toPointer(data.pwszStoreName)), true);
  return buf;
}

export class SCHANNEL_CERT_HASH_STOREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: usize
  get hProv(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get ShaHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pwszStoreName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: usize
  set hProv(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ShaHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pwszStoreName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCHANNEL_ALERT_TOKEN (size: 16)
 */
export interface SCHANNEL_ALERT_TOKEN {
  /** u32 */
  dwTokenType: number;
  /** Windows.Win32.Security.Authentication.Identity.SCHANNEL_ALERT_TOKEN_ALERT_TYPE */
  dwAlertType: SCHANNEL_ALERT_TOKEN_ALERT_TYPE;
  /** u32 */
  dwAlertNumber: number;
}

export const sizeofSCHANNEL_ALERT_TOKEN = 16;

export function allocSCHANNEL_ALERT_TOKEN(data?: Partial<SCHANNEL_ALERT_TOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHANNEL_ALERT_TOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTokenType !== undefined) view.setUint32(0, Number(data.dwTokenType), true);
  // 0x04: u32
  if (data?.dwAlertType !== undefined) view.setUint32(4, Number(data.dwAlertType), true);
  // 0x08: u32
  if (data?.dwAlertNumber !== undefined) view.setUint32(8, Number(data.dwAlertNumber), true);
  // 0x0c: pad4
  return buf;
}

export class SCHANNEL_ALERT_TOKENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTokenType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwAlertType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwAlertNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwTokenType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwAlertType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwAlertNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCHANNEL_SESSION_TOKEN (size: 8)
 */
export interface SCHANNEL_SESSION_TOKEN {
  /** u32 */
  dwTokenType: number;
  /** Windows.Win32.Security.Authentication.Identity.SCHANNEL_SESSION_TOKEN_FLAGS */
  dwFlags: SCHANNEL_SESSION_TOKEN_FLAGS;
}

export const sizeofSCHANNEL_SESSION_TOKEN = 8;

export function allocSCHANNEL_SESSION_TOKEN(data?: Partial<SCHANNEL_SESSION_TOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHANNEL_SESSION_TOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTokenType !== undefined) view.setUint32(0, Number(data.dwTokenType), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  return buf;
}

export class SCHANNEL_SESSION_TOKENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTokenType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwTokenType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCHANNEL_CLIENT_SIGNATURE (size: 32)
 */
export interface SCHANNEL_CLIENT_SIGNATURE {
  /** u32 */
  cbLength: number;
  /** u32 */
  aiHash: number;
  /** u32 */
  cbHash: number;
  /** array */
  HashValue: Deno.PointerValue | null;
  /** array */
  CertThumbprint: Deno.PointerValue | null;
}

export const sizeofSCHANNEL_CLIENT_SIGNATURE = 32;

export function allocSCHANNEL_CLIENT_SIGNATURE(data?: Partial<SCHANNEL_CLIENT_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHANNEL_CLIENT_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbLength !== undefined) view.setUint32(0, Number(data.cbLength), true);
  // 0x04: u32
  if (data?.aiHash !== undefined) view.setUint32(4, Number(data.aiHash), true);
  // 0x08: u32
  if (data?.cbHash !== undefined) view.setUint32(8, Number(data.cbHash), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.HashValue !== undefined) view.setBigUint64(16, data.HashValue === null ? 0n : BigInt(util.toPointer(data.HashValue)), true);
  // 0x18: pointer
  if (data?.CertThumbprint !== undefined) view.setBigUint64(24, data.CertThumbprint === null ? 0n : BigInt(util.toPointer(data.CertThumbprint)), true);
  return buf;
}

export class SCHANNEL_CLIENT_SIGNATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get aiHash(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbHash(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get HashValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get CertThumbprint(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set aiHash(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbHash(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set HashValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set CertThumbprint(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SSL_CREDENTIAL_CERTIFICATE (size: 40)
 */
export interface SSL_CREDENTIAL_CERTIFICATE {
  /** u32 */
  cbPrivateKey: number;
  /** ptr */
  pPrivateKey: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbCertificate: number;
  /** ptr */
  pCertificate: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  pszPassword: string | null | Uint8Array;
}

export const sizeofSSL_CREDENTIAL_CERTIFICATE = 40;

export function allocSSL_CREDENTIAL_CERTIFICATE(data?: Partial<SSL_CREDENTIAL_CERTIFICATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSSL_CREDENTIAL_CERTIFICATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbPrivateKey !== undefined) view.setUint32(0, Number(data.cbPrivateKey), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPrivateKey !== undefined) view.setBigUint64(8, data.pPrivateKey === null ? 0n : BigInt(util.toPointer(data.pPrivateKey)), true);
  // 0x10: u32
  if (data?.cbCertificate !== undefined) view.setUint32(16, Number(data.cbCertificate), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pCertificate !== undefined) view.setBigUint64(24, data.pCertificate === null ? 0n : BigInt(util.toPointer(data.pCertificate)), true);
  // 0x20: buffer
  if (data?.pszPassword !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszPassword);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

export class SSL_CREDENTIAL_CERTIFICATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbPrivateKey(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pPrivateKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbCertificate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pCertificate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pszPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbPrivateKey(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pPrivateKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbCertificate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pCertificate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: buffer
  set pszPassword(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCH_CRED (size: 40)
 */
export interface SCH_CRED {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cCreds: number;
  /** ptr */
  paSecret: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  paPublic: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cMappers: number;
  /** ptr */
  aphMappers: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSCH_CRED = 40;

export function allocSCH_CRED(data?: Partial<SCH_CRED>): Uint8Array {
  const buf = new Uint8Array(sizeofSCH_CRED);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cCreds !== undefined) view.setUint32(4, Number(data.cCreds), true);
  // 0x08: pointer
  if (data?.paSecret !== undefined) view.setBigUint64(8, data.paSecret === null ? 0n : BigInt(util.toPointer(data.paSecret)), true);
  // 0x10: pointer
  if (data?.paPublic !== undefined) view.setBigUint64(16, data.paPublic === null ? 0n : BigInt(util.toPointer(data.paPublic)), true);
  // 0x18: u32
  if (data?.cMappers !== undefined) view.setUint32(24, Number(data.cMappers), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.aphMappers !== undefined) view.setBigUint64(32, data.aphMappers === null ? 0n : BigInt(util.toPointer(data.aphMappers)), true);
  return buf;
}

export class SCH_CREDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cCreds(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get paSecret(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get paPublic(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get cMappers(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get aphMappers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cCreds(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set paSecret(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set paPublic(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set cMappers(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set aphMappers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCH_CRED_SECRET_CAPI (size: 16)
 */
export interface SCH_CRED_SECRET_CAPI {
  /** u32 */
  dwType: number;
  /** usize */
  hProv: Deno.PointerValue;
}

export const sizeofSCH_CRED_SECRET_CAPI = 16;

export function allocSCH_CRED_SECRET_CAPI(data?: Partial<SCH_CRED_SECRET_CAPI>): Uint8Array {
  const buf = new Uint8Array(sizeofSCH_CRED_SECRET_CAPI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.hProv !== undefined) view.setBigUint64(8, BigInt(data.hProv), true);
  return buf;
}

export class SCH_CRED_SECRET_CAPIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get hProv(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set hProv(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCH_CRED_SECRET_PRIVKEY (size: 32)
 */
export interface SCH_CRED_SECRET_PRIVKEY {
  /** u32 */
  dwType: number;
  /** ptr */
  pPrivateKey: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbPrivateKey: number;
  /** Windows.Win32.Foundation.PSTR */
  pszPassword: string | null | Uint8Array;
}

export const sizeofSCH_CRED_SECRET_PRIVKEY = 32;

export function allocSCH_CRED_SECRET_PRIVKEY(data?: Partial<SCH_CRED_SECRET_PRIVKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofSCH_CRED_SECRET_PRIVKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPrivateKey !== undefined) view.setBigUint64(8, data.pPrivateKey === null ? 0n : BigInt(util.toPointer(data.pPrivateKey)), true);
  // 0x10: u32
  if (data?.cbPrivateKey !== undefined) view.setUint32(16, Number(data.cbPrivateKey), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pszPassword !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszPassword);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export class SCH_CRED_SECRET_PRIVKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pPrivateKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbPrivateKey(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get pszPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pPrivateKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbPrivateKey(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set pszPassword(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCH_CRED_PUBLIC_CERTCHAIN (size: 16)
 */
export interface SCH_CRED_PUBLIC_CERTCHAIN {
  /** u32 */
  dwType: number;
  /** u32 */
  cbCertChain: number;
  /** ptr */
  pCertChain: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSCH_CRED_PUBLIC_CERTCHAIN = 16;

export function allocSCH_CRED_PUBLIC_CERTCHAIN(data?: Partial<SCH_CRED_PUBLIC_CERTCHAIN>): Uint8Array {
  const buf = new Uint8Array(sizeofSCH_CRED_PUBLIC_CERTCHAIN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: u32
  if (data?.cbCertChain !== undefined) view.setUint32(4, Number(data.cbCertChain), true);
  // 0x08: pointer
  if (data?.pCertChain !== undefined) view.setBigUint64(8, data.pCertChain === null ? 0n : BigInt(util.toPointer(data.pCertChain)), true);
  return buf;
}

export class SCH_CRED_PUBLIC_CERTCHAINView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbCertChain(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pCertChain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbCertChain(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pCertChain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.PctPublicKey (size: 16)
 */
export interface PctPublicKey {
  /** u32 */
  Type: number;
  /** u32 */
  cbKey: number;
  /** array */
  pKey: Deno.PointerValue | null;
}

export const sizeofPctPublicKey = 16;

export function allocPctPublicKey(data?: Partial<PctPublicKey>): Uint8Array {
  const buf = new Uint8Array(sizeofPctPublicKey);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.cbKey !== undefined) view.setUint32(4, Number(data.cbKey), true);
  // 0x08: pointer
  if (data?.pKey !== undefined) view.setBigUint64(8, data.pKey === null ? 0n : BigInt(util.toPointer(data.pKey)), true);
  return buf;
}

export class PctPublicKeyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbKey(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbKey(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.X509Certificate (size: 64)
 */
export interface X509Certificate {
  /** u32 */
  Version: number;
  /** array */
  SerialNumber: Deno.PointerValue | null;
  /** u32 */
  SignatureAlgorithm: number;
  /** Windows.Win32.Foundation.FILETIME */
  ValidFrom: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ValidUntil: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszIssuer: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszSubject: string | null | Uint8Array;
  /** ptr */
  pPublicKey: Deno.PointerValue | Uint8Array | null;
}

export const sizeofX509Certificate = 64;

export function allocX509Certificate(data?: Partial<X509Certificate>): Uint8Array {
  const buf = new Uint8Array(sizeofX509Certificate);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(8, data.SerialNumber === null ? 0n : BigInt(util.toPointer(data.SerialNumber)), true);
  // 0x10: u32
  if (data?.SignatureAlgorithm !== undefined) view.setUint32(16, Number(data.SignatureAlgorithm), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ValidFrom !== undefined) view.setBigUint64(24, data.ValidFrom === null ? 0n : BigInt(util.toPointer(data.ValidFrom)), true);
  // 0x20: pointer
  if (data?.ValidUntil !== undefined) view.setBigUint64(32, data.ValidUntil === null ? 0n : BigInt(util.toPointer(data.ValidUntil)), true);
  // 0x28: buffer
  if (data?.pszIssuer !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pszIssuer);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.pszSubject !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pszSubject);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.pPublicKey !== undefined) view.setBigUint64(56, data.pPublicKey === null ? 0n : BigInt(util.toPointer(data.pPublicKey)), true);
  return buf;
}

export class X509CertificateView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get SignatureAlgorithm(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ValidFrom(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ValidUntil(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get pszIssuer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: buffer
  get pszSubject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pPublicKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set SignatureAlgorithm(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ValidFrom(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ValidUntil(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: buffer
  set pszIssuer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: buffer
  set pszSubject(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(util.toPointer((this.buf as any)._f48)), true);
  }

  // 0x38: pointer
  set pPublicKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SCH_EXTENSION_DATA (size: 24)
 */
export interface SCH_EXTENSION_DATA {
  /** u16 */
  ExtensionType: number;
  /** ptr */
  pExtData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbExtData: number;
}

export const sizeofSCH_EXTENSION_DATA = 24;

export function allocSCH_EXTENSION_DATA(data?: Partial<SCH_EXTENSION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSCH_EXTENSION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ExtensionType !== undefined) view.setUint16(0, Number(data.ExtensionType), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.pExtData !== undefined) view.setBigUint64(8, data.pExtData === null ? 0n : BigInt(util.toPointer(data.pExtData)), true);
  // 0x10: u32
  if (data?.cbExtData !== undefined) view.setUint32(16, Number(data.cbExtData), true);
  // 0x14: pad4
  return buf;
}

export class SCH_EXTENSION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ExtensionType(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get pExtData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbExtData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u16
  set ExtensionType(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set pExtData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbExtData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.LOGON_HOURS (size: 16)
 */
export interface LOGON_HOURS {
  /** u16 */
  UnitsPerWeek: number;
  /** ptr */
  LogonHours: Deno.PointerValue | Uint8Array | null;
}

export const sizeofLOGON_HOURS = 16;

export function allocLOGON_HOURS(data?: Partial<LOGON_HOURS>): Uint8Array {
  const buf = new Uint8Array(sizeofLOGON_HOURS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UnitsPerWeek !== undefined) view.setUint16(0, Number(data.UnitsPerWeek), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.LogonHours !== undefined) view.setBigUint64(8, data.LogonHours === null ? 0n : BigInt(util.toPointer(data.LogonHours)), true);
  return buf;
}

export class LOGON_HOURSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UnitsPerWeek(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get LogonHours(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set UnitsPerWeek(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set LogonHours(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SR_SECURITY_DESCRIPTOR (size: 16)
 */
export interface SR_SECURITY_DESCRIPTOR {
  /** u32 */
  Length: number;
  /** ptr */
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSR_SECURITY_DESCRIPTOR = 16;

export function allocSR_SECURITY_DESCRIPTOR(data?: Partial<SR_SECURITY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSR_SECURITY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(8, data.SecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.SecurityDescriptor)), true);
  return buf;
}

export class SR_SECURITY_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SecurityDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SecurityDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.USER_ALL_INFORMATION (size: 224)
 */
export interface USER_ALL_INFORMATION {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastLogon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastLogoff: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordLastSet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  AccountExpires: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordCanChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordMustChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  FullName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectory: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  HomeDirectoryDrive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ScriptPath: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  ProfilePath: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  AdminComment: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  WorkStations: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserComment: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LmPassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  NtPassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  PrivateData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SR_SECURITY_DESCRIPTOR */
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UserId: number;
  /** u32 */
  PrimaryGroupId: number;
  /** u32 */
  UserAccountControl: number;
  /** u32 */
  WhichFields: number;
  /** Windows.Win32.Security.Authentication.Identity.LOGON_HOURS */
  LogonHours: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  BadPasswordCount: number;
  /** u16 */
  LogonCount: number;
  /** u16 */
  CountryCode: number;
  /** u16 */
  CodePage: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  LmPasswordPresent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  NtPasswordPresent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  PasswordExpired: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  PrivateDataSensitive: Uint8Array | Deno.PointerValue | null;
}

export const sizeofUSER_ALL_INFORMATION = 224;

export function allocUSER_ALL_INFORMATION(data?: Partial<USER_ALL_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_ALL_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LastLogon !== undefined) view.setBigUint64(0, data.LastLogon === null ? 0n : BigInt(util.toPointer(data.LastLogon)), true);
  // 0x08: pointer
  if (data?.LastLogoff !== undefined) view.setBigUint64(8, data.LastLogoff === null ? 0n : BigInt(util.toPointer(data.LastLogoff)), true);
  // 0x10: pointer
  if (data?.PasswordLastSet !== undefined) view.setBigUint64(16, data.PasswordLastSet === null ? 0n : BigInt(util.toPointer(data.PasswordLastSet)), true);
  // 0x18: pointer
  if (data?.AccountExpires !== undefined) view.setBigUint64(24, data.AccountExpires === null ? 0n : BigInt(util.toPointer(data.AccountExpires)), true);
  // 0x20: pointer
  if (data?.PasswordCanChange !== undefined) view.setBigUint64(32, data.PasswordCanChange === null ? 0n : BigInt(util.toPointer(data.PasswordCanChange)), true);
  // 0x28: pointer
  if (data?.PasswordMustChange !== undefined) view.setBigUint64(40, data.PasswordMustChange === null ? 0n : BigInt(util.toPointer(data.PasswordMustChange)), true);
  // 0x30: pointer
  if (data?.UserName !== undefined) view.setBigUint64(48, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x38: pointer
  if (data?.FullName !== undefined) view.setBigUint64(56, data.FullName === null ? 0n : BigInt(util.toPointer(data.FullName)), true);
  // 0x40: pointer
  if (data?.HomeDirectory !== undefined) view.setBigUint64(64, data.HomeDirectory === null ? 0n : BigInt(util.toPointer(data.HomeDirectory)), true);
  // 0x48: pointer
  if (data?.HomeDirectoryDrive !== undefined) view.setBigUint64(72, data.HomeDirectoryDrive === null ? 0n : BigInt(util.toPointer(data.HomeDirectoryDrive)), true);
  // 0x50: pointer
  if (data?.ScriptPath !== undefined) view.setBigUint64(80, data.ScriptPath === null ? 0n : BigInt(util.toPointer(data.ScriptPath)), true);
  // 0x58: pointer
  if (data?.ProfilePath !== undefined) view.setBigUint64(88, data.ProfilePath === null ? 0n : BigInt(util.toPointer(data.ProfilePath)), true);
  // 0x60: pointer
  if (data?.AdminComment !== undefined) view.setBigUint64(96, data.AdminComment === null ? 0n : BigInt(util.toPointer(data.AdminComment)), true);
  // 0x68: pointer
  if (data?.WorkStations !== undefined) view.setBigUint64(104, data.WorkStations === null ? 0n : BigInt(util.toPointer(data.WorkStations)), true);
  // 0x70: pointer
  if (data?.UserComment !== undefined) view.setBigUint64(112, data.UserComment === null ? 0n : BigInt(util.toPointer(data.UserComment)), true);
  // 0x78: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(120, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  // 0x80: pointer
  if (data?.LmPassword !== undefined) view.setBigUint64(128, data.LmPassword === null ? 0n : BigInt(util.toPointer(data.LmPassword)), true);
  // 0x88: pointer
  if (data?.NtPassword !== undefined) view.setBigUint64(136, data.NtPassword === null ? 0n : BigInt(util.toPointer(data.NtPassword)), true);
  // 0x90: pointer
  if (data?.PrivateData !== undefined) view.setBigUint64(144, data.PrivateData === null ? 0n : BigInt(util.toPointer(data.PrivateData)), true);
  // 0x98: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(152, data.SecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.SecurityDescriptor)), true);
  // 0xa0: u32
  if (data?.UserId !== undefined) view.setUint32(160, Number(data.UserId), true);
  // 0xa4: u32
  if (data?.PrimaryGroupId !== undefined) view.setUint32(164, Number(data.PrimaryGroupId), true);
  // 0xa8: u32
  if (data?.UserAccountControl !== undefined) view.setUint32(168, Number(data.UserAccountControl), true);
  // 0xac: u32
  if (data?.WhichFields !== undefined) view.setUint32(172, Number(data.WhichFields), true);
  // 0xb0: pointer
  if (data?.LogonHours !== undefined) view.setBigUint64(176, data.LogonHours === null ? 0n : BigInt(util.toPointer(data.LogonHours)), true);
  // 0xb8: u16
  if (data?.BadPasswordCount !== undefined) view.setUint16(184, Number(data.BadPasswordCount), true);
  // 0xba: u16
  if (data?.LogonCount !== undefined) view.setUint16(186, Number(data.LogonCount), true);
  // 0xbc: u16
  if (data?.CountryCode !== undefined) view.setUint16(188, Number(data.CountryCode), true);
  // 0xbe: u16
  if (data?.CodePage !== undefined) view.setUint16(190, Number(data.CodePage), true);
  // 0xc0: pointer
  if (data?.LmPasswordPresent !== undefined) view.setBigUint64(192, data.LmPasswordPresent === null ? 0n : BigInt(util.toPointer(data.LmPasswordPresent)), true);
  // 0xc8: pointer
  if (data?.NtPasswordPresent !== undefined) view.setBigUint64(200, data.NtPasswordPresent === null ? 0n : BigInt(util.toPointer(data.NtPasswordPresent)), true);
  // 0xd0: pointer
  if (data?.PasswordExpired !== undefined) view.setBigUint64(208, data.PasswordExpired === null ? 0n : BigInt(util.toPointer(data.PasswordExpired)), true);
  // 0xd8: pointer
  if (data?.PrivateDataSensitive !== undefined) view.setBigUint64(216, data.PrivateDataSensitive === null ? 0n : BigInt(util.toPointer(data.PrivateDataSensitive)), true);
  return buf;
}

export class USER_ALL_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LastLogon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LastLogoff(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get PasswordLastSet(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get AccountExpires(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get PasswordCanChange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get PasswordMustChange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get FullName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get HomeDirectory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get HomeDirectoryDrive(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get ScriptPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get ProfilePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get AdminComment(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get WorkStations(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get UserComment(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get LmPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: pointer
  get NtPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x90: pointer
  get PrivateData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: pointer
  get SecurityDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: u32
  get UserId(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get PrimaryGroupId(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: u32
  get UserAccountControl(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get WhichFields(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: pointer
  get LogonHours(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(176, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb8: u16
  get BadPasswordCount(): number {
    return this.view.getUint16(184, true);
  }

  // 0xba: u16
  get LogonCount(): number {
    return this.view.getUint16(186, true);
  }

  // 0xbc: u16
  get CountryCode(): number {
    return this.view.getUint16(188, true);
  }

  // 0xbe: u16
  get CodePage(): number {
    return this.view.getUint16(190, true);
  }

  // 0xc0: pointer
  get LmPasswordPresent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(192, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc8: pointer
  get NtPasswordPresent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(200, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd0: pointer
  get PasswordExpired(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(208, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd8: pointer
  get PrivateDataSensitive(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(216, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set LastLogon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LastLogoff(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set PasswordLastSet(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set AccountExpires(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set PasswordCanChange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set PasswordMustChange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set FullName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set HomeDirectory(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set HomeDirectoryDrive(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set ScriptPath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set ProfilePath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set AdminComment(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set WorkStations(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set UserComment(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set LmPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }

  // 0x88: pointer
  set NtPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, BigInt(util.toPointer(value)), true);
  }

  // 0x90: pointer
  set PrivateData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, BigInt(util.toPointer(value)), true);
  }

  // 0x98: pointer
  set SecurityDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, BigInt(util.toPointer(value)), true);
  }

  // 0xa0: u32
  set UserId(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set PrimaryGroupId(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: u32
  set UserAccountControl(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set WhichFields(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: pointer
  set LogonHours(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(176, BigInt(util.toPointer(value)), true);
  }

  // 0xb8: u16
  set BadPasswordCount(value: number) {
    this.view.setUint16(184, value, true);
  }

  // 0xba: u16
  set LogonCount(value: number) {
    this.view.setUint16(186, value, true);
  }

  // 0xbc: u16
  set CountryCode(value: number) {
    this.view.setUint16(188, value, true);
  }

  // 0xbe: u16
  set CodePage(value: number) {
    this.view.setUint16(190, value, true);
  }

  // 0xc0: pointer
  set LmPasswordPresent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(192, BigInt(util.toPointer(value)), true);
  }

  // 0xc8: pointer
  set NtPasswordPresent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(200, BigInt(util.toPointer(value)), true);
  }

  // 0xd0: pointer
  set PasswordExpired(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(208, BigInt(util.toPointer(value)), true);
  }

  // 0xd8: pointer
  set PrivateDataSensitive(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(216, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.CLEAR_BLOCK (size: 8)
 */
export interface CLEAR_BLOCK {
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofCLEAR_BLOCK = 8;

export function allocCLEAR_BLOCK(data?: Partial<CLEAR_BLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofCLEAR_BLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

export class CLEAR_BLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.USER_SESSION_KEY (size: 8)
 */
export interface USER_SESSION_KEY {
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofUSER_SESSION_KEY = 8;

export function allocUSER_SESSION_KEY(data?: Partial<USER_SESSION_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofUSER_SESSION_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

export class USER_SESSION_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NETLOGON_LOGON_IDENTITY_INFO (size: 40)
 */
export interface NETLOGON_LOGON_IDENTITY_INFO {
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ParameterControl: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  UserName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  Workstation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNETLOGON_LOGON_IDENTITY_INFO = 40;

export function allocNETLOGON_LOGON_IDENTITY_INFO(data?: Partial<NETLOGON_LOGON_IDENTITY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_LOGON_IDENTITY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(0, data.LogonDomainName === null ? 0n : BigInt(util.toPointer(data.LogonDomainName)), true);
  // 0x08: u32
  if (data?.ParameterControl !== undefined) view.setUint32(8, Number(data.ParameterControl), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(16, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x18: pointer
  if (data?.UserName !== undefined) view.setBigUint64(24, data.UserName === null ? 0n : BigInt(util.toPointer(data.UserName)), true);
  // 0x20: pointer
  if (data?.Workstation !== undefined) view.setBigUint64(32, data.Workstation === null ? 0n : BigInt(util.toPointer(data.Workstation)), true);
  return buf;
}

export class NETLOGON_LOGON_IDENTITY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ParameterControl(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Workstation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ParameterControl(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Workstation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.System.PasswordManagement.LM_OWF_PASSWORD (size: 8)
 */
export interface LM_OWF_PASSWORD {
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofLM_OWF_PASSWORD = 8;

export function allocLM_OWF_PASSWORD(data?: Partial<LM_OWF_PASSWORD>): Uint8Array {
  const buf = new Uint8Array(sizeofLM_OWF_PASSWORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

export class LM_OWF_PASSWORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NETLOGON_INTERACTIVE_INFO (size: 24)
 */
export interface NETLOGON_INTERACTIVE_INFO {
  /** Windows.Win32.Security.Authentication.Identity.NETLOGON_LOGON_IDENTITY_INFO */
  Identity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.PasswordManagement.LM_OWF_PASSWORD */
  LmOwfPassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.PasswordManagement.LM_OWF_PASSWORD */
  NtOwfPassword: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNETLOGON_INTERACTIVE_INFO = 24;

export function allocNETLOGON_INTERACTIVE_INFO(data?: Partial<NETLOGON_INTERACTIVE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_INTERACTIVE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identity !== undefined) view.setBigUint64(0, data.Identity === null ? 0n : BigInt(util.toPointer(data.Identity)), true);
  // 0x08: pointer
  if (data?.LmOwfPassword !== undefined) view.setBigUint64(8, data.LmOwfPassword === null ? 0n : BigInt(util.toPointer(data.LmOwfPassword)), true);
  // 0x10: pointer
  if (data?.NtOwfPassword !== undefined) view.setBigUint64(16, data.NtOwfPassword === null ? 0n : BigInt(util.toPointer(data.NtOwfPassword)), true);
  return buf;
}

export class NETLOGON_INTERACTIVE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Identity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LmOwfPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get NtOwfPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Identity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LmOwfPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set NtOwfPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NETLOGON_SERVICE_INFO (size: 24)
 */
export interface NETLOGON_SERVICE_INFO {
  /** Windows.Win32.Security.Authentication.Identity.NETLOGON_LOGON_IDENTITY_INFO */
  Identity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.PasswordManagement.LM_OWF_PASSWORD */
  LmOwfPassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.PasswordManagement.LM_OWF_PASSWORD */
  NtOwfPassword: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNETLOGON_SERVICE_INFO = 24;

export function allocNETLOGON_SERVICE_INFO(data?: Partial<NETLOGON_SERVICE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_SERVICE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identity !== undefined) view.setBigUint64(0, data.Identity === null ? 0n : BigInt(util.toPointer(data.Identity)), true);
  // 0x08: pointer
  if (data?.LmOwfPassword !== undefined) view.setBigUint64(8, data.LmOwfPassword === null ? 0n : BigInt(util.toPointer(data.LmOwfPassword)), true);
  // 0x10: pointer
  if (data?.NtOwfPassword !== undefined) view.setBigUint64(16, data.NtOwfPassword === null ? 0n : BigInt(util.toPointer(data.NtOwfPassword)), true);
  return buf;
}

export class NETLOGON_SERVICE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Identity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LmOwfPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get NtOwfPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Identity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LmOwfPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set NtOwfPassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NETLOGON_NETWORK_INFO (size: 32)
 */
export interface NETLOGON_NETWORK_INFO {
  /** Windows.Win32.Security.Authentication.Identity.NETLOGON_LOGON_IDENTITY_INFO */
  Identity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.CLEAR_BLOCK */
  LmChallenge: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Kernel.STRING */
  NtChallengeResponse: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Kernel.STRING */
  LmChallengeResponse: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNETLOGON_NETWORK_INFO = 32;

export function allocNETLOGON_NETWORK_INFO(data?: Partial<NETLOGON_NETWORK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_NETWORK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identity !== undefined) view.setBigUint64(0, data.Identity === null ? 0n : BigInt(util.toPointer(data.Identity)), true);
  // 0x08: pointer
  if (data?.LmChallenge !== undefined) view.setBigUint64(8, data.LmChallenge === null ? 0n : BigInt(util.toPointer(data.LmChallenge)), true);
  // 0x10: pointer
  if (data?.NtChallengeResponse !== undefined) view.setBigUint64(16, data.NtChallengeResponse === null ? 0n : BigInt(util.toPointer(data.NtChallengeResponse)), true);
  // 0x18: pointer
  if (data?.LmChallengeResponse !== undefined) view.setBigUint64(24, data.LmChallengeResponse === null ? 0n : BigInt(util.toPointer(data.LmChallengeResponse)), true);
  return buf;
}

export class NETLOGON_NETWORK_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Identity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LmChallenge(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get NtChallengeResponse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get LmChallengeResponse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Identity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set LmChallenge(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set NtChallengeResponse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set LmChallengeResponse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.NETLOGON_GENERIC_INFO (size: 32)
 */
export interface NETLOGON_GENERIC_INFO {
  /** Windows.Win32.Security.Authentication.Identity.NETLOGON_LOGON_IDENTITY_INFO */
  Identity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  PackageName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DataLength: number;
  /** ptr */
  LogonData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNETLOGON_GENERIC_INFO = 32;

export function allocNETLOGON_GENERIC_INFO(data?: Partial<NETLOGON_GENERIC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNETLOGON_GENERIC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identity !== undefined) view.setBigUint64(0, data.Identity === null ? 0n : BigInt(util.toPointer(data.Identity)), true);
  // 0x08: pointer
  if (data?.PackageName !== undefined) view.setBigUint64(8, data.PackageName === null ? 0n : BigInt(util.toPointer(data.PackageName)), true);
  // 0x10: u32
  if (data?.DataLength !== undefined) view.setUint32(16, Number(data.DataLength), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.LogonData !== undefined) view.setBigUint64(24, data.LogonData === null ? 0n : BigInt(util.toPointer(data.LogonData)), true);
  return buf;
}

export class NETLOGON_GENERIC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Identity(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PackageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get DataLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get LogonData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Identity(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PackageName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set DataLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set LogonData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.MSV1_0_VALIDATION_INFO (size: 64)
 */
export interface MSV1_0_VALIDATION_INFO {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogoffTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KickoffTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonServer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.UNICODE_STRING */
  LogonDomainName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.USER_SESSION_KEY */
  SessionKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Authoritative: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UserFlags: number;
  /** u32 */
  WhichFields: number;
  /** u32 */
  UserId: number;
}

export const sizeofMSV1_0_VALIDATION_INFO = 64;

export function allocMSV1_0_VALIDATION_INFO(data?: Partial<MSV1_0_VALIDATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofMSV1_0_VALIDATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogoffTime !== undefined) view.setBigUint64(0, data.LogoffTime === null ? 0n : BigInt(util.toPointer(data.LogoffTime)), true);
  // 0x08: pointer
  if (data?.KickoffTime !== undefined) view.setBigUint64(8, data.KickoffTime === null ? 0n : BigInt(util.toPointer(data.KickoffTime)), true);
  // 0x10: pointer
  if (data?.LogonServer !== undefined) view.setBigUint64(16, data.LogonServer === null ? 0n : BigInt(util.toPointer(data.LogonServer)), true);
  // 0x18: pointer
  if (data?.LogonDomainName !== undefined) view.setBigUint64(24, data.LogonDomainName === null ? 0n : BigInt(util.toPointer(data.LogonDomainName)), true);
  // 0x20: pointer
  if (data?.SessionKey !== undefined) view.setBigUint64(32, data.SessionKey === null ? 0n : BigInt(util.toPointer(data.SessionKey)), true);
  // 0x28: pointer
  if (data?.Authoritative !== undefined) view.setBigUint64(40, data.Authoritative === null ? 0n : BigInt(util.toPointer(data.Authoritative)), true);
  // 0x30: u32
  if (data?.UserFlags !== undefined) view.setUint32(48, Number(data.UserFlags), true);
  // 0x34: u32
  if (data?.WhichFields !== undefined) view.setUint32(52, Number(data.WhichFields), true);
  // 0x38: u32
  if (data?.UserId !== undefined) view.setUint32(56, Number(data.UserId), true);
  // 0x3c: pad4
  return buf;
}

export class MSV1_0_VALIDATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LogoffTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get KickoffTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get LogonServer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get LogonDomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get SessionKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Authoritative(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get UserFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get WhichFields(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get UserId(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: pointer
  set LogoffTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set KickoffTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set LogonServer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set LogonDomainName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set SessionKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Authoritative(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set UserFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set WhichFields(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set UserId(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Security.Authentication.Identity.TOKENBINDING_IDENTIFIER (size: 8)
 */
export interface TOKENBINDING_IDENTIFIER {
  /** u8 */
  keyType: number;
}

export const sizeofTOKENBINDING_IDENTIFIER = 8;

export function allocTOKENBINDING_IDENTIFIER(data?: Partial<TOKENBINDING_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKENBINDING_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.keyType !== undefined) view.setUint8(0, Number(data.keyType));
  // 0x01: pad7
  return buf;
}

export class TOKENBINDING_IDENTIFIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get keyType(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x00: u8
  set keyType(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7
}

/**
 * Windows.Win32.Security.Authentication.Identity.TOKENBINDING_RESULT_DATA (size: 32)
 */
export interface TOKENBINDING_RESULT_DATA {
  /** Windows.Win32.Security.Authentication.Identity.TOKENBINDING_TYPE */
  bindingType: TOKENBINDING_TYPE;
  /** u32 */
  identifierSize: number;
  /** ptr */
  identifierData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Authentication.Identity.TOKENBINDING_EXTENSION_FORMAT */
  extensionFormat: TOKENBINDING_EXTENSION_FORMAT;
  /** u32 */
  extensionSize: number;
  /** ptr */
  extensionData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofTOKENBINDING_RESULT_DATA = 32;

export function allocTOKENBINDING_RESULT_DATA(data?: Partial<TOKENBINDING_RESULT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKENBINDING_RESULT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bindingType !== undefined) view.setInt32(0, Number(data.bindingType), true);
  // 0x04: u32
  if (data?.identifierSize !== undefined) view.setUint32(4, Number(data.identifierSize), true);
  // 0x08: pointer
  if (data?.identifierData !== undefined) view.setBigUint64(8, data.identifierData === null ? 0n : BigInt(util.toPointer(data.identifierData)), true);
  // 0x10: i32
  if (data?.extensionFormat !== undefined) view.setInt32(16, Number(data.extensionFormat), true);
  // 0x14: u32
  if (data?.extensionSize !== undefined) view.setUint32(20, Number(data.extensionSize), true);
  // 0x18: pointer
  if (data?.extensionData !== undefined) view.setBigUint64(24, data.extensionData === null ? 0n : BigInt(util.toPointer(data.extensionData)), true);
  return buf;
}

export class TOKENBINDING_RESULT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get bindingType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get identifierSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get identifierData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get extensionFormat(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get extensionSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get extensionData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set bindingType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set identifierSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set identifierData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set extensionFormat(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set extensionSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set extensionData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TOKENBINDING_RESULT_LIST (size: 16)
 */
export interface TOKENBINDING_RESULT_LIST {
  /** u32 */
  resultCount: number;
  /** ptr */
  resultData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofTOKENBINDING_RESULT_LIST = 16;

export function allocTOKENBINDING_RESULT_LIST(data?: Partial<TOKENBINDING_RESULT_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKENBINDING_RESULT_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.resultCount !== undefined) view.setUint32(0, Number(data.resultCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.resultData !== undefined) view.setBigUint64(8, data.resultData === null ? 0n : BigInt(util.toPointer(data.resultData)), true);
  return buf;
}

export class TOKENBINDING_RESULT_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get resultCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get resultData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set resultCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set resultData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.TOKENBINDING_KEY_TYPES (size: 16)
 */
export interface TOKENBINDING_KEY_TYPES {
  /** u32 */
  keyCount: number;
  /** ptr */
  keyType: Deno.PointerValue | Uint8Array | null;
}

export const sizeofTOKENBINDING_KEY_TYPES = 16;

export function allocTOKENBINDING_KEY_TYPES(data?: Partial<TOKENBINDING_KEY_TYPES>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKENBINDING_KEY_TYPES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.keyCount !== undefined) view.setUint32(0, Number(data.keyCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.keyType !== undefined) view.setBigUint64(8, data.keyType === null ? 0n : BigInt(util.toPointer(data.keyType)), true);
  return buf;
}

export class TOKENBINDING_KEY_TYPESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get keyCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get keyType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set keyCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set keyType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SL_LICENSING_STATUS (size: 40)
 */
export interface SL_LICENSING_STATUS {
  /** System.Guid */
  SkuId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SLLICENSINGSTATUS */
  eStatus: SLLICENSINGSTATUS;
  /** u32 */
  dwGraceTime: number;
  /** u32 */
  dwTotalGraceDays: number;
  /** Windows.Win32.Foundation.HRESULT */
  hrReason: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  qwValidityExpiration: Deno.PointerValue;
}

export const sizeofSL_LICENSING_STATUS = 40;

export function allocSL_LICENSING_STATUS(data?: Partial<SL_LICENSING_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSL_LICENSING_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SkuId !== undefined) view.setBigUint64(0, data.SkuId === null ? 0n : BigInt(util.toPointer(data.SkuId)), true);
  // 0x08: i32
  if (data?.eStatus !== undefined) view.setInt32(8, Number(data.eStatus), true);
  // 0x0c: u32
  if (data?.dwGraceTime !== undefined) view.setUint32(12, Number(data.dwGraceTime), true);
  // 0x10: u32
  if (data?.dwTotalGraceDays !== undefined) view.setUint32(16, Number(data.dwTotalGraceDays), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.hrReason !== undefined) view.setBigUint64(24, data.hrReason === null ? 0n : BigInt(util.toPointer(data.hrReason)), true);
  // 0x20: u64
  if (data?.qwValidityExpiration !== undefined) view.setBigUint64(32, BigInt(data.qwValidityExpiration), true);
  return buf;
}

export class SL_LICENSING_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SkuId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get eStatus(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwGraceTime(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwTotalGraceDays(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get hrReason(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u64
  get qwValidityExpiration(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x00: pointer
  set SkuId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set eStatus(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwGraceTime(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwTotalGraceDays(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set hrReason(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u64
  set qwValidityExpiration(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SL_ACTIVATION_INFO_HEADER (size: 8)
 */
export interface SL_ACTIVATION_INFO_HEADER {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Authentication.Identity.SL_ACTIVATION_TYPE */
  type: SL_ACTIVATION_TYPE;
}

export const sizeofSL_ACTIVATION_INFO_HEADER = 8;

export function allocSL_ACTIVATION_INFO_HEADER(data?: Partial<SL_ACTIVATION_INFO_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSL_ACTIVATION_INFO_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.type !== undefined) view.setInt32(4, Number(data.type), true);
  return buf;
}

export class SL_ACTIVATION_INFO_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get type(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set type(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SL_AD_ACTIVATION_INFO (size: 24)
 */
export interface SL_AD_ACTIVATION_INFO {
  /** Windows.Win32.Security.Authentication.Identity.SL_ACTIVATION_INFO_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszProductKey: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszActivationObjectName: string | null | Uint8Array | Uint16Array;
}

export const sizeofSL_AD_ACTIVATION_INFO = 24;

export function allocSL_AD_ACTIVATION_INFO(data?: Partial<SL_AD_ACTIVATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSL_AD_ACTIVATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: buffer
  if (data?.pwszProductKey !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszProductKey);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszActivationObjectName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszActivationObjectName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class SL_AD_ACTIVATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pwszProductKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszActivationObjectName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set pwszProductKey(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pwszActivationObjectName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SL_NONGENUINE_UI_OPTIONS (size: 24)
 */
export interface SL_NONGENUINE_UI_OPTIONS {
  /** u32 */
  cbSize: number;
  /** ptr */
  pComponentId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HRESULT */
  hResultUI: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSL_NONGENUINE_UI_OPTIONS = 24;

export function allocSL_NONGENUINE_UI_OPTIONS(data?: Partial<SL_NONGENUINE_UI_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofSL_NONGENUINE_UI_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pComponentId !== undefined) view.setBigUint64(8, data.pComponentId === null ? 0n : BigInt(util.toPointer(data.pComponentId)), true);
  // 0x10: pointer
  if (data?.hResultUI !== undefined) view.setBigUint64(16, data.hResultUI === null ? 0n : BigInt(util.toPointer(data.hResultUI)), true);
  return buf;
}

export class SL_NONGENUINE_UI_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pComponentId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hResultUI(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pComponentId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hResultUI(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Authentication.Identity.SL_SYSTEM_POLICY_INFORMATION (size: 16)
 */
export interface SL_SYSTEM_POLICY_INFORMATION {
  /** array */
  Reserved1: Deno.PointerValue | null;
  /** array */
  Reserved2: Deno.PointerValue | null;
}

export const sizeofSL_SYSTEM_POLICY_INFORMATION = 16;

export function allocSL_SYSTEM_POLICY_INFORMATION(data?: Partial<SL_SYSTEM_POLICY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSL_SYSTEM_POLICY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved1 !== undefined) view.setBigUint64(0, data.Reserved1 === null ? 0n : BigInt(util.toPointer(data.Reserved1)), true);
  // 0x08: pointer
  if (data?.Reserved2 !== undefined) view.setBigUint64(8, data.Reserved2 === null ? 0n : BigInt(util.toPointer(data.Reserved2)), true);
  return buf;
}

export class SL_SYSTEM_POLICY_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reserved2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Reserved1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reserved2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Isolation.IsolatedAppLauncherTelemetryParameters (size: 16)
 */
export interface IsolatedAppLauncherTelemetryParameters {
  /** Windows.Win32.Foundation.BOOL */
  EnableForLaunch: boolean;
  /** System.Guid */
  CorrelationGUID: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIsolatedAppLauncherTelemetryParameters = 16;

export function allocIsolatedAppLauncherTelemetryParameters(data?: Partial<IsolatedAppLauncherTelemetryParameters>): Uint8Array {
  const buf = new Uint8Array(sizeofIsolatedAppLauncherTelemetryParameters);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.EnableForLaunch !== undefined) view.setInt32(0, Number(data.EnableForLaunch), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.CorrelationGUID !== undefined) view.setBigUint64(8, data.CorrelationGUID === null ? 0n : BigInt(util.toPointer(data.CorrelationGUID)), true);
  return buf;
}

export class IsolatedAppLauncherTelemetryParametersView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get EnableForLaunch(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get CorrelationGUID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set EnableForLaunch(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set CorrelationGUID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.CountedString (size: 16)
 */
export interface CountedString {
  /** u16 */
  length: number;
  /** Windows.Win32.Foundation.PWSTR */
  string: string | null | Uint8Array | Uint16Array;
}

export const sizeofCountedString = 16;

export function allocCountedString(data?: Partial<CountedString>): Uint8Array {
  const buf = new Uint8Array(sizeofCountedString);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.length !== undefined) view.setUint16(0, Number(data.length), true);
  // 0x02: pad6
  // 0x08: buffer
  if (data?.string !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.string);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class CountedStringView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get length(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  get string(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set length(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  set string(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.IsolationInfo (size: 24)
 */
export interface IsolationInfo {
  /** Windows.Win32.Security.NetworkAccessProtection.IsolationState */
  isolationState: IsolationState;
  /** Windows.Win32.Foundation.FILETIME */
  probEndTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.NetworkAccessProtection.CountedString */
  failureUrl: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIsolationInfo = 24;

export function allocIsolationInfo(data?: Partial<IsolationInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofIsolationInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.isolationState !== undefined) view.setInt32(0, Number(data.isolationState), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.probEndTime !== undefined) view.setBigUint64(8, data.probEndTime === null ? 0n : BigInt(util.toPointer(data.probEndTime)), true);
  // 0x10: pointer
  if (data?.failureUrl !== undefined) view.setBigUint64(16, data.failureUrl === null ? 0n : BigInt(util.toPointer(data.failureUrl)), true);
  return buf;
}

export class IsolationInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get isolationState(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get probEndTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get failureUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set isolationState(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set probEndTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set failureUrl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.IsolationInfoEx (size: 24)
 */
export interface IsolationInfoEx {
  /** Windows.Win32.Security.NetworkAccessProtection.IsolationState */
  isolationState: IsolationState;
  /** Windows.Win32.Security.NetworkAccessProtection.ExtendedIsolationState */
  extendedIsolationState: ExtendedIsolationState;
  /** Windows.Win32.Foundation.FILETIME */
  probEndTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.NetworkAccessProtection.CountedString */
  failureUrl: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIsolationInfoEx = 24;

export function allocIsolationInfoEx(data?: Partial<IsolationInfoEx>): Uint8Array {
  const buf = new Uint8Array(sizeofIsolationInfoEx);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.isolationState !== undefined) view.setInt32(0, Number(data.isolationState), true);
  // 0x04: i32
  if (data?.extendedIsolationState !== undefined) view.setInt32(4, Number(data.extendedIsolationState), true);
  // 0x08: pointer
  if (data?.probEndTime !== undefined) view.setBigUint64(8, data.probEndTime === null ? 0n : BigInt(util.toPointer(data.probEndTime)), true);
  // 0x10: pointer
  if (data?.failureUrl !== undefined) view.setBigUint64(16, data.failureUrl === null ? 0n : BigInt(util.toPointer(data.failureUrl)), true);
  return buf;
}

export class IsolationInfoExView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get isolationState(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get extendedIsolationState(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get probEndTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get failureUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set isolationState(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set extendedIsolationState(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set probEndTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set failureUrl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.FailureCategoryMapping (size: 8)
 */
export interface FailureCategoryMapping {
  /** array */
  mappingCompliance: Deno.PointerValue | null;
}

export const sizeofFailureCategoryMapping = 8;

export function allocFailureCategoryMapping(data?: Partial<FailureCategoryMapping>): Uint8Array {
  const buf = new Uint8Array(sizeofFailureCategoryMapping);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.mappingCompliance !== undefined) view.setBigUint64(0, data.mappingCompliance === null ? 0n : BigInt(util.toPointer(data.mappingCompliance)), true);
  return buf;
}

export class FailureCategoryMappingView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get mappingCompliance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set mappingCompliance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.CorrelationId (size: 16)
 */
export interface CorrelationId {
  /** System.Guid */
  connId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  timeStamp: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCorrelationId = 16;

export function allocCorrelationId(data?: Partial<CorrelationId>): Uint8Array {
  const buf = new Uint8Array(sizeofCorrelationId);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.connId !== undefined) view.setBigUint64(0, data.connId === null ? 0n : BigInt(util.toPointer(data.connId)), true);
  // 0x08: pointer
  if (data?.timeStamp !== undefined) view.setBigUint64(8, data.timeStamp === null ? 0n : BigInt(util.toPointer(data.timeStamp)), true);
  return buf;
}

export class CorrelationIdView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get connId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get timeStamp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set connId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set timeStamp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.ResultCodes (size: 16)
 */
export interface ResultCodes {
  /** u16 */
  count: number;
  /** ptr */
  results: Deno.PointerValue | Uint8Array | null;
}

export const sizeofResultCodes = 16;

export function allocResultCodes(data?: Partial<ResultCodes>): Uint8Array {
  const buf = new Uint8Array(sizeofResultCodes);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.count !== undefined) view.setUint16(0, Number(data.count), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.results !== undefined) view.setBigUint64(8, data.results === null ? 0n : BigInt(util.toPointer(data.results)), true);
  return buf;
}

export class ResultCodesView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get count(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get results(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set count(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set results(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.Ipv4Address (size: 8)
 */
export interface Ipv4Address {
  /** array */
  addr: Deno.PointerValue | null;
}

export const sizeofIpv4Address = 8;

export function allocIpv4Address(data?: Partial<Ipv4Address>): Uint8Array {
  const buf = new Uint8Array(sizeofIpv4Address);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.addr !== undefined) view.setBigUint64(0, data.addr === null ? 0n : BigInt(util.toPointer(data.addr)), true);
  return buf;
}

export class Ipv4AddressView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get addr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set addr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.Ipv6Address (size: 8)
 */
export interface Ipv6Address {
  /** array */
  addr: Deno.PointerValue | null;
}

export const sizeofIpv6Address = 8;

export function allocIpv6Address(data?: Partial<Ipv6Address>): Uint8Array {
  const buf = new Uint8Array(sizeofIpv6Address);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.addr !== undefined) view.setBigUint64(0, data.addr === null ? 0n : BigInt(util.toPointer(data.addr)), true);
  return buf;
}

export class Ipv6AddressView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get addr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set addr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.FixupInfo (size: 24)
 */
export interface FixupInfo {
  /** Windows.Win32.Security.NetworkAccessProtection.FixupState */
  state: FixupState;
  /** u8 */
  percentage: number;
  /** Windows.Win32.Security.NetworkAccessProtection.ResultCodes */
  resultCodes: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  fixupMsgId: number;
}

export const sizeofFixupInfo = 24;

export function allocFixupInfo(data?: Partial<FixupInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofFixupInfo);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.state !== undefined) view.setInt32(0, Number(data.state), true);
  // 0x04: u8
  if (data?.percentage !== undefined) view.setUint8(4, Number(data.percentage));
  // 0x05: pad3
  // 0x08: pointer
  if (data?.resultCodes !== undefined) view.setBigUint64(8, data.resultCodes === null ? 0n : BigInt(util.toPointer(data.resultCodes)), true);
  // 0x10: u32
  if (data?.fixupMsgId !== undefined) view.setUint32(16, Number(data.fixupMsgId), true);
  // 0x14: pad4
  return buf;
}

export class FixupInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get state(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u8
  get percentage(): number {
    return this.view.getUint8(4);
  }

  // 0x05: pad3

  // 0x08: pointer
  get resultCodes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get fixupMsgId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set state(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u8
  set percentage(value: number) {
    this.view.setUint8(4, value);
  }

  // 0x05: pad3

  // 0x08: pointer
  set resultCodes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set fixupMsgId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.SystemHealthAgentState (size: 32)
 */
export interface SystemHealthAgentState {
  /** u32 */
  id: number;
  /** Windows.Win32.Security.NetworkAccessProtection.ResultCodes */
  shaResultCodes: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.NetworkAccessProtection.FailureCategory */
  failureCategory: FailureCategory;
  /** Windows.Win32.Security.NetworkAccessProtection.FixupInfo */
  fixupInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSystemHealthAgentState = 32;

export function allocSystemHealthAgentState(data?: Partial<SystemHealthAgentState>): Uint8Array {
  const buf = new Uint8Array(sizeofSystemHealthAgentState);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.id !== undefined) view.setUint32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.shaResultCodes !== undefined) view.setBigUint64(8, data.shaResultCodes === null ? 0n : BigInt(util.toPointer(data.shaResultCodes)), true);
  // 0x10: i32
  if (data?.failureCategory !== undefined) view.setInt32(16, Number(data.failureCategory), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.fixupInfo !== undefined) view.setBigUint64(24, data.fixupInfo === null ? 0n : BigInt(util.toPointer(data.fixupInfo)), true);
  return buf;
}

export class SystemHealthAgentStateView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get id(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get shaResultCodes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get failureCategory(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get fixupInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set id(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set shaResultCodes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set failureCategory(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set fixupInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.SoHAttribute (size: 16)
 */
export interface SoHAttribute {
  /** u16 */
  type: number;
  /** u16 */
  size: number;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSoHAttribute = 16;

export function allocSoHAttribute(data?: Partial<SoHAttribute>): Uint8Array {
  const buf = new Uint8Array(sizeofSoHAttribute);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.type !== undefined) view.setUint16(0, Number(data.type), true);
  // 0x02: u16
  if (data?.size !== undefined) view.setUint16(2, Number(data.size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

export class SoHAttributeView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get size(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set size(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.SoH (size: 16)
 */
export interface SoH {
  /** u16 */
  count: number;
  /** ptr */
  attributes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSoH = 16;

export function allocSoH(data?: Partial<SoH>): Uint8Array {
  const buf = new Uint8Array(sizeofSoH);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.count !== undefined) view.setUint16(0, Number(data.count), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.attributes !== undefined) view.setBigUint64(8, data.attributes === null ? 0n : BigInt(util.toPointer(data.attributes)), true);
  return buf;
}

export class SoHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get count(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get attributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set count(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set attributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.NetworkSoH (size: 16)
 */
export interface NetworkSoH {
  /** u16 */
  size: number;
  /** ptr */
  data: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNetworkSoH = 16;

export function allocNetworkSoH(data?: Partial<NetworkSoH>): Uint8Array {
  const buf = new Uint8Array(sizeofNetworkSoH);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.size !== undefined) view.setUint16(0, Number(data.size), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

export class NetworkSoHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get size(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set size(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.PrivateData (size: 16)
 */
export interface PrivateData {
  /** u16 */
  size: number;
  /** ptr */
  data: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPrivateData = 16;

export function allocPrivateData(data?: Partial<PrivateData>): Uint8Array {
  const buf = new Uint8Array(sizeofPrivateData);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.size !== undefined) view.setUint16(0, Number(data.size), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

export class PrivateDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get size(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set size(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.NetworkAccessProtection.NapComponentRegistrationInfo (size: 72)
 */
export interface NapComponentRegistrationInfo {
  /** u32 */
  id: number;
  /** Windows.Win32.Security.NetworkAccessProtection.CountedString */
  friendlyName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.NetworkAccessProtection.CountedString */
  description: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.NetworkAccessProtection.CountedString */
  version: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.NetworkAccessProtection.CountedString */
  vendorName: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  infoClsid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  configClsid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  registrationDate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  componentType: number;
}

export const sizeofNapComponentRegistrationInfo = 72;

export function allocNapComponentRegistrationInfo(data?: Partial<NapComponentRegistrationInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofNapComponentRegistrationInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.id !== undefined) view.setUint32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.friendlyName !== undefined) view.setBigUint64(8, data.friendlyName === null ? 0n : BigInt(util.toPointer(data.friendlyName)), true);
  // 0x10: pointer
  if (data?.description !== undefined) view.setBigUint64(16, data.description === null ? 0n : BigInt(util.toPointer(data.description)), true);
  // 0x18: pointer
  if (data?.version !== undefined) view.setBigUint64(24, data.version === null ? 0n : BigInt(util.toPointer(data.version)), true);
  // 0x20: pointer
  if (data?.vendorName !== undefined) view.setBigUint64(32, data.vendorName === null ? 0n : BigInt(util.toPointer(data.vendorName)), true);
  // 0x28: pointer
  if (data?.infoClsid !== undefined) view.setBigUint64(40, data.infoClsid === null ? 0n : BigInt(util.toPointer(data.infoClsid)), true);
  // 0x30: pointer
  if (data?.configClsid !== undefined) view.setBigUint64(48, data.configClsid === null ? 0n : BigInt(util.toPointer(data.configClsid)), true);
  // 0x38: pointer
  if (data?.registrationDate !== undefined) view.setBigUint64(56, data.registrationDate === null ? 0n : BigInt(util.toPointer(data.registrationDate)), true);
  // 0x40: u32
  if (data?.componentType !== undefined) view.setUint32(64, Number(data.componentType), true);
  // 0x44: pad4
  return buf;
}

export class NapComponentRegistrationInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get id(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get friendlyName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get description(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get version(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get vendorName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get infoClsid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get configClsid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get registrationDate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get componentType(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set id(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set friendlyName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set description(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set version(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set vendorName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set infoClsid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set configClsid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set registrationDate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set componentType(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.Security.AppLocker.SAFER_CODE_PROPERTIES_V1 (size: 88)
 */
export interface SAFER_CODE_PROPERTIES_V1 {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwCheckFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  ImagePath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HANDLE */
  hImageFileHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UrlZoneId: number;
  /** array */
  ImageHash: Deno.PointerValue | null;
  /** u32 */
  dwImageHashSize: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ImageSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  HashAlgorithm: number;
  /** ptr */
  pByteBlock: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
  /** u32 */
  dwWVTUIChoice: number;
}

export const sizeofSAFER_CODE_PROPERTIES_V1 = 88;

export function allocSAFER_CODE_PROPERTIES_V1(data?: Partial<SAFER_CODE_PROPERTIES_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_CODE_PROPERTIES_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwCheckFlags !== undefined) view.setUint32(4, Number(data.dwCheckFlags), true);
  // 0x08: buffer
  if (data?.ImagePath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ImagePath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.hImageFileHandle !== undefined) view.setBigUint64(16, data.hImageFileHandle === null ? 0n : BigInt(util.toPointer(data.hImageFileHandle)), true);
  // 0x18: u32
  if (data?.UrlZoneId !== undefined) view.setUint32(24, Number(data.UrlZoneId), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ImageHash !== undefined) view.setBigUint64(32, data.ImageHash === null ? 0n : BigInt(util.toPointer(data.ImageHash)), true);
  // 0x28: u32
  if (data?.dwImageHashSize !== undefined) view.setUint32(40, Number(data.dwImageHashSize), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ImageSize !== undefined) view.setBigUint64(48, data.ImageSize === null ? 0n : BigInt(util.toPointer(data.ImageSize)), true);
  // 0x38: u32
  if (data?.HashAlgorithm !== undefined) view.setUint32(56, Number(data.HashAlgorithm), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.pByteBlock !== undefined) view.setBigUint64(64, data.pByteBlock === null ? 0n : BigInt(util.toPointer(data.pByteBlock)), true);
  // 0x48: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(72, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  // 0x50: u32
  if (data?.dwWVTUIChoice !== undefined) view.setUint32(80, Number(data.dwWVTUIChoice), true);
  // 0x54: pad4
  return buf;
}

export class SAFER_CODE_PROPERTIES_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCheckFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get ImagePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hImageFileHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get UrlZoneId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ImageHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwImageHashSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ImageSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get HashAlgorithm(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get pByteBlock(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get hWndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get dwWVTUIChoice(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCheckFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set ImagePath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set hImageFileHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set UrlZoneId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ImageHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set dwImageHashSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ImageSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set HashAlgorithm(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set pByteBlock(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set hWndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set dwWVTUIChoice(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.Security.AppLocker.SAFER_CODE_PROPERTIES_V2 (size: 128)
 */
export interface SAFER_CODE_PROPERTIES_V2 {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwCheckFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  ImagePath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HANDLE */
  hImageFileHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UrlZoneId: number;
  /** array */
  ImageHash: Deno.PointerValue | null;
  /** u32 */
  dwImageHashSize: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ImageSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  HashAlgorithm: number;
  /** ptr */
  pByteBlock: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
  /** u32 */
  dwWVTUIChoice: number;
  /** Windows.Win32.Foundation.PWSTR */
  PackageMoniker: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  PackagePublisher: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  PackageName: string | null | Uint8Array | Uint16Array;
  /** u64 */
  PackageVersion: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  PackageIsFramework: boolean;
}

export const sizeofSAFER_CODE_PROPERTIES_V2 = 128;

export function allocSAFER_CODE_PROPERTIES_V2(data?: Partial<SAFER_CODE_PROPERTIES_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_CODE_PROPERTIES_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwCheckFlags !== undefined) view.setUint32(4, Number(data.dwCheckFlags), true);
  // 0x08: buffer
  if (data?.ImagePath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ImagePath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.hImageFileHandle !== undefined) view.setBigUint64(16, data.hImageFileHandle === null ? 0n : BigInt(util.toPointer(data.hImageFileHandle)), true);
  // 0x18: u32
  if (data?.UrlZoneId !== undefined) view.setUint32(24, Number(data.UrlZoneId), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ImageHash !== undefined) view.setBigUint64(32, data.ImageHash === null ? 0n : BigInt(util.toPointer(data.ImageHash)), true);
  // 0x28: u32
  if (data?.dwImageHashSize !== undefined) view.setUint32(40, Number(data.dwImageHashSize), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ImageSize !== undefined) view.setBigUint64(48, data.ImageSize === null ? 0n : BigInt(util.toPointer(data.ImageSize)), true);
  // 0x38: u32
  if (data?.HashAlgorithm !== undefined) view.setUint32(56, Number(data.HashAlgorithm), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.pByteBlock !== undefined) view.setBigUint64(64, data.pByteBlock === null ? 0n : BigInt(util.toPointer(data.pByteBlock)), true);
  // 0x48: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(72, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  // 0x50: u32
  if (data?.dwWVTUIChoice !== undefined) view.setUint32(80, Number(data.dwWVTUIChoice), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.PackageMoniker !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.PackageMoniker);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: buffer
  if (data?.PackagePublisher !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.PackagePublisher);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: buffer
  if (data?.PackageName !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.PackageName);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  // 0x70: u64
  if (data?.PackageVersion !== undefined) view.setBigUint64(112, BigInt(data.PackageVersion), true);
  // 0x78: i32
  if (data?.PackageIsFramework !== undefined) view.setInt32(120, Number(data.PackageIsFramework), true);
  // 0x7c: pad4
  return buf;
}

export class SAFER_CODE_PROPERTIES_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCheckFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get ImagePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hImageFileHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get UrlZoneId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ImageHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwImageHashSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ImageSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get HashAlgorithm(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get pByteBlock(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get hWndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get dwWVTUIChoice(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  get PackageMoniker(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: buffer
  get PackagePublisher(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: buffer
  get PackageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u64
  get PackageVersion(): Deno.PointerValue {
    return Number(this.view.getBigUint64(112, true));
  }

  // 0x78: i32
  get PackageIsFramework(): number {
    return this.view.getInt32(120, true);
  }

  // 0x7c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCheckFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set ImagePath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set hImageFileHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set UrlZoneId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ImageHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set dwImageHashSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ImageSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set HashAlgorithm(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set pByteBlock(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set hWndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set dwWVTUIChoice(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  set PackageMoniker(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(util.toPointer((this.buf as any)._f88)), true);
  }

  // 0x60: buffer
  set PackagePublisher(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(util.toPointer((this.buf as any)._f96)), true);
  }

  // 0x68: buffer
  set PackageName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(util.toPointer((this.buf as any)._f104)), true);
  }

  // 0x70: u64
  set PackageVersion(value: Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(value), true);
  }

  // 0x78: i32
  set PackageIsFramework(value: number) {
    this.view.setInt32(120, value, true);
  }

  // 0x7c: pad4
}

/**
 * Windows.Win32.Security.AppLocker.SAFER_IDENTIFICATION_HEADER (size: 24)
 */
export interface SAFER_IDENTIFICATION_HEADER {
  /** Windows.Win32.Security.AppLocker.SAFER_IDENTIFICATION_TYPES */
  dwIdentificationType: SAFER_IDENTIFICATION_TYPES;
  /** u32 */
  cbStructSize: number;
  /** System.Guid */
  IdentificationGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  lastModified: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSAFER_IDENTIFICATION_HEADER = 24;

export function allocSAFER_IDENTIFICATION_HEADER(data?: Partial<SAFER_IDENTIFICATION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_IDENTIFICATION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dwIdentificationType !== undefined) view.setInt32(0, Number(data.dwIdentificationType), true);
  // 0x04: u32
  if (data?.cbStructSize !== undefined) view.setUint32(4, Number(data.cbStructSize), true);
  // 0x08: pointer
  if (data?.IdentificationGuid !== undefined) view.setBigUint64(8, data.IdentificationGuid === null ? 0n : BigInt(util.toPointer(data.IdentificationGuid)), true);
  // 0x10: pointer
  if (data?.lastModified !== undefined) view.setBigUint64(16, data.lastModified === null ? 0n : BigInt(util.toPointer(data.lastModified)), true);
  return buf;
}

export class SAFER_IDENTIFICATION_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dwIdentificationType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get cbStructSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get IdentificationGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get lastModified(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set dwIdentificationType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set cbStructSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set IdentificationGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set lastModified(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.AppLocker.SAFER_PATHNAME_IDENTIFICATION (size: 32)
 */
export interface SAFER_PATHNAME_IDENTIFICATION {
  /** Windows.Win32.Security.AppLocker.SAFER_IDENTIFICATION_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** array */
  Description: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  ImageName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwSaferFlags: number;
}

export const sizeofSAFER_PATHNAME_IDENTIFICATION = 32;

export function allocSAFER_PATHNAME_IDENTIFICATION(data?: Partial<SAFER_PATHNAME_IDENTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_PATHNAME_IDENTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.Description !== undefined) view.setBigUint64(8, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x10: buffer
  if (data?.ImageName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.ImageName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwSaferFlags !== undefined) view.setUint32(24, Number(data.dwSaferFlags), true);
  // 0x1c: pad4
  return buf;
}

export class SAFER_PATHNAME_IDENTIFICATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Description(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get ImageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwSaferFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Description(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set ImageName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u32
  set dwSaferFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.AppLocker.SAFER_HASH_IDENTIFICATION (size: 64)
 */
export interface SAFER_HASH_IDENTIFICATION {
  /** Windows.Win32.Security.AppLocker.SAFER_IDENTIFICATION_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** array */
  Description: Deno.PointerValue | null;
  /** array */
  FriendlyName: Deno.PointerValue | null;
  /** u32 */
  HashSize: number;
  /** array */
  ImageHash: Deno.PointerValue | null;
  /** u32 */
  HashAlgorithm: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ImageSize: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSaferFlags: number;
}

export const sizeofSAFER_HASH_IDENTIFICATION = 64;

export function allocSAFER_HASH_IDENTIFICATION(data?: Partial<SAFER_HASH_IDENTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_HASH_IDENTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.Description !== undefined) view.setBigUint64(8, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x10: pointer
  if (data?.FriendlyName !== undefined) view.setBigUint64(16, data.FriendlyName === null ? 0n : BigInt(util.toPointer(data.FriendlyName)), true);
  // 0x18: u32
  if (data?.HashSize !== undefined) view.setUint32(24, Number(data.HashSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ImageHash !== undefined) view.setBigUint64(32, data.ImageHash === null ? 0n : BigInt(util.toPointer(data.ImageHash)), true);
  // 0x28: u32
  if (data?.HashAlgorithm !== undefined) view.setUint32(40, Number(data.HashAlgorithm), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ImageSize !== undefined) view.setBigUint64(48, data.ImageSize === null ? 0n : BigInt(util.toPointer(data.ImageSize)), true);
  // 0x38: u32
  if (data?.dwSaferFlags !== undefined) view.setUint32(56, Number(data.dwSaferFlags), true);
  // 0x3c: pad4
  return buf;
}

export class SAFER_HASH_IDENTIFICATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Description(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get FriendlyName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get HashSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ImageHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get HashAlgorithm(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ImageSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get dwSaferFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Description(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set FriendlyName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set HashSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ImageHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set HashAlgorithm(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ImageSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set dwSaferFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Security.AppLocker.SAFER_HASH_IDENTIFICATION2 (size: 32)
 */
export interface SAFER_HASH_IDENTIFICATION2 {
  /** Windows.Win32.Security.AppLocker.SAFER_HASH_IDENTIFICATION */
  hashIdentification: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  HashSize: number;
  /** array */
  ImageHash: Deno.PointerValue | null;
  /** u32 */
  HashAlgorithm: number;
}

export const sizeofSAFER_HASH_IDENTIFICATION2 = 32;

export function allocSAFER_HASH_IDENTIFICATION2(data?: Partial<SAFER_HASH_IDENTIFICATION2>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_HASH_IDENTIFICATION2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hashIdentification !== undefined) view.setBigUint64(0, data.hashIdentification === null ? 0n : BigInt(util.toPointer(data.hashIdentification)), true);
  // 0x08: u32
  if (data?.HashSize !== undefined) view.setUint32(8, Number(data.HashSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ImageHash !== undefined) view.setBigUint64(16, data.ImageHash === null ? 0n : BigInt(util.toPointer(data.ImageHash)), true);
  // 0x18: u32
  if (data?.HashAlgorithm !== undefined) view.setUint32(24, Number(data.HashAlgorithm), true);
  // 0x1c: pad4
  return buf;
}

export class SAFER_HASH_IDENTIFICATION2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hashIdentification(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get HashSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ImageHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get HashAlgorithm(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set hashIdentification(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set HashSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ImageHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set HashAlgorithm(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.AppLocker.SAFER_URLZONE_IDENTIFICATION (size: 16)
 */
export interface SAFER_URLZONE_IDENTIFICATION {
  /** Windows.Win32.Security.AppLocker.SAFER_IDENTIFICATION_HEADER */
  header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  UrlZoneId: number;
  /** u32 */
  dwSaferFlags: number;
}

export const sizeofSAFER_URLZONE_IDENTIFICATION = 16;

export function allocSAFER_URLZONE_IDENTIFICATION(data?: Partial<SAFER_URLZONE_IDENTIFICATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSAFER_URLZONE_IDENTIFICATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: u32
  if (data?.UrlZoneId !== undefined) view.setUint32(8, Number(data.UrlZoneId), true);
  // 0x0c: u32
  if (data?.dwSaferFlags !== undefined) view.setUint32(12, Number(data.dwSaferFlags), true);
  return buf;
}

export class SAFER_URLZONE_IDENTIFICATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get UrlZoneId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwSaferFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set UrlZoneId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwSaferFlags(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.ConfigurationSnapin.SCESVC_CONFIGURATION_LINE (size: 24)
 */
export interface SCESVC_CONFIGURATION_LINE {
  /** ptr */
  Key: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ValueLen: number;
}

export const sizeofSCESVC_CONFIGURATION_LINE = 24;

export function allocSCESVC_CONFIGURATION_LINE(data?: Partial<SCESVC_CONFIGURATION_LINE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCESVC_CONFIGURATION_LINE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Key !== undefined) view.setBigUint64(0, data.Key === null ? 0n : BigInt(util.toPointer(data.Key)), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  // 0x10: u32
  if (data?.ValueLen !== undefined) view.setUint32(16, Number(data.ValueLen), true);
  // 0x14: pad4
  return buf;
}

export class SCESVC_CONFIGURATION_LINEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get ValueLen(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set ValueLen(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.ConfigurationSnapin.SCESVC_CONFIGURATION_INFO (size: 16)
 */
export interface SCESVC_CONFIGURATION_INFO {
  /** u32 */
  Count: number;
  /** ptr */
  Lines: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSCESVC_CONFIGURATION_INFO = 16;

export function allocSCESVC_CONFIGURATION_INFO(data?: Partial<SCESVC_CONFIGURATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCESVC_CONFIGURATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Lines !== undefined) view.setBigUint64(8, data.Lines === null ? 0n : BigInt(util.toPointer(data.Lines)), true);
  return buf;
}

export class SCESVC_CONFIGURATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Lines(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Lines(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ConfigurationSnapin.SCESVC_ANALYSIS_LINE (size: 24)
 */
export interface SCESVC_ANALYSIS_LINE {
  /** ptr */
  Key: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ValueLen: number;
}

export const sizeofSCESVC_ANALYSIS_LINE = 24;

export function allocSCESVC_ANALYSIS_LINE(data?: Partial<SCESVC_ANALYSIS_LINE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCESVC_ANALYSIS_LINE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Key !== undefined) view.setBigUint64(0, data.Key === null ? 0n : BigInt(util.toPointer(data.Key)), true);
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  // 0x10: u32
  if (data?.ValueLen !== undefined) view.setUint32(16, Number(data.ValueLen), true);
  // 0x14: pad4
  return buf;
}

export class SCESVC_ANALYSIS_LINEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get ValueLen(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set ValueLen(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.ConfigurationSnapin.SCESVC_ANALYSIS_INFO (size: 16)
 */
export interface SCESVC_ANALYSIS_INFO {
  /** u32 */
  Count: number;
  /** ptr */
  Lines: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSCESVC_ANALYSIS_INFO = 16;

export function allocSCESVC_ANALYSIS_INFO(data?: Partial<SCESVC_ANALYSIS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCESVC_ANALYSIS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Lines !== undefined) view.setBigUint64(8, data.Lines === null ? 0n : BigInt(util.toPointer(data.Lines)), true);
  return buf;
}

export class SCESVC_ANALYSIS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Lines(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Lines(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ConfigurationSnapin.SCESVC_CALLBACK_INFO (size: 40)
 */
export interface SCESVC_CALLBACK_INFO {
  /** ptr */
  sceHandle: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.ConfigurationSnapin.PFSCE_QUERY_INFO */
  pfQueryInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.ConfigurationSnapin.PFSCE_SET_INFO */
  pfSetInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.ConfigurationSnapin.PFSCE_FREE_INFO */
  pfFreeInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.ConfigurationSnapin.PFSCE_LOG_INFO */
  pfLogInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSCESVC_CALLBACK_INFO = 40;

export function allocSCESVC_CALLBACK_INFO(data?: Partial<SCESVC_CALLBACK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSCESVC_CALLBACK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sceHandle !== undefined) view.setBigUint64(0, data.sceHandle === null ? 0n : BigInt(util.toPointer(data.sceHandle)), true);
  // 0x08: pointer
  if (data?.pfQueryInfo !== undefined) view.setBigUint64(8, data.pfQueryInfo === null ? 0n : BigInt(util.toPointer(data.pfQueryInfo)), true);
  // 0x10: pointer
  if (data?.pfSetInfo !== undefined) view.setBigUint64(16, data.pfSetInfo === null ? 0n : BigInt(util.toPointer(data.pfSetInfo)), true);
  // 0x18: pointer
  if (data?.pfFreeInfo !== undefined) view.setBigUint64(24, data.pfFreeInfo === null ? 0n : BigInt(util.toPointer(data.pfFreeInfo)), true);
  // 0x20: pointer
  if (data?.pfLogInfo !== undefined) view.setBigUint64(32, data.pfLogInfo === null ? 0n : BigInt(util.toPointer(data.pfLogInfo)), true);
  return buf;
}

export class SCESVC_CALLBACK_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sceHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pfQueryInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pfSetInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pfFreeInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pfLogInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set sceHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pfQueryInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pfSetInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pfFreeInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pfLogInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Catalog.CRYPTCATSTORE (size: 64)
 */
export interface CRYPTCATSTORE {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwPublicVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszP7File: string | null | Uint8Array | Uint16Array;
  /** usize */
  hProv: Deno.PointerValue;
  /** u32 */
  dwEncodingType: number;
  /** Windows.Win32.Security.Cryptography.Catalog.CRYPTCAT_OPEN_FLAGS */
  fdwStoreFlags: CRYPTCAT_OPEN_FLAGS;
  /** Windows.Win32.Foundation.HANDLE */
  hReserved: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hAttrs: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  hCryptMsg: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HANDLE */
  hSorted: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPTCATSTORE = 64;

export function allocCRYPTCATSTORE(data?: Partial<CRYPTCATSTORE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTCATSTORE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwPublicVersion !== undefined) view.setUint32(4, Number(data.dwPublicVersion), true);
  // 0x08: buffer
  if (data?.pwszP7File !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszP7File);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.hProv !== undefined) view.setBigUint64(16, BigInt(data.hProv), true);
  // 0x18: u32
  if (data?.dwEncodingType !== undefined) view.setUint32(24, Number(data.dwEncodingType), true);
  // 0x1c: u32
  if (data?.fdwStoreFlags !== undefined) view.setUint32(28, Number(data.fdwStoreFlags), true);
  // 0x20: pointer
  if (data?.hReserved !== undefined) view.setBigUint64(32, data.hReserved === null ? 0n : BigInt(util.toPointer(data.hReserved)), true);
  // 0x28: pointer
  if (data?.hAttrs !== undefined) view.setBigUint64(40, data.hAttrs === null ? 0n : BigInt(util.toPointer(data.hAttrs)), true);
  // 0x30: pointer
  if (data?.hCryptMsg !== undefined) view.setBigUint64(48, data.hCryptMsg === null ? 0n : BigInt(util.toPointer(data.hCryptMsg)), true);
  // 0x38: pointer
  if (data?.hSorted !== undefined) view.setBigUint64(56, data.hSorted === null ? 0n : BigInt(util.toPointer(data.hSorted)), true);
  return buf;
}

export class CRYPTCATSTOREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPublicVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pwszP7File(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: usize
  get hProv(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u32
  get dwEncodingType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get fdwStoreFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get hReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get hAttrs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get hCryptMsg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get hSorted(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPublicVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pwszP7File(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: usize
  set hProv(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u32
  set dwEncodingType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set fdwStoreFlags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set hReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set hAttrs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set hCryptMsg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set hSorted(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB (size: 16)
 */
export interface CRYPTOAPI_BLOB {
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTOAPI_BLOB = 16;

export function allocCRYPTOAPI_BLOB(data?: Partial<CRYPTOAPI_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTOAPI_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbData !== undefined) view.setBigUint64(8, data.pbData === null ? 0n : BigInt(util.toPointer(data.pbData)), true);
  return buf;
}

export class CRYPTOAPI_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbData(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbData(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Catalog.CRYPTCATMEMBER (size: 80)
 */
export interface CRYPTCATMEMBER {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszReferenceTag: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFileName: string | null | Uint8Array | Uint16Array;
  /** System.Guid */
  gSubjectType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  fdwMemberFlags: number;
  /** ptr */
  pIndirectData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwCertVersion: number;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.Foundation.HANDLE */
  hReserved: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  sEncodedIndirectData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  sEncodedMemberInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPTCATMEMBER = 80;

export function allocCRYPTCATMEMBER(data?: Partial<CRYPTCATMEMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTCATMEMBER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszReferenceTag !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszReferenceTag);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszFileName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszFileName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.gSubjectType !== undefined) view.setBigUint64(24, data.gSubjectType === null ? 0n : BigInt(util.toPointer(data.gSubjectType)), true);
  // 0x20: u32
  if (data?.fdwMemberFlags !== undefined) view.setUint32(32, Number(data.fdwMemberFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pIndirectData !== undefined) view.setBigUint64(40, data.pIndirectData === null ? 0n : BigInt(util.toPointer(data.pIndirectData)), true);
  // 0x30: u32
  if (data?.dwCertVersion !== undefined) view.setUint32(48, Number(data.dwCertVersion), true);
  // 0x34: u32
  if (data?.dwReserved !== undefined) view.setUint32(52, Number(data.dwReserved), true);
  // 0x38: pointer
  if (data?.hReserved !== undefined) view.setBigUint64(56, data.hReserved === null ? 0n : BigInt(util.toPointer(data.hReserved)), true);
  // 0x40: pointer
  if (data?.sEncodedIndirectData !== undefined) view.setBigUint64(64, data.sEncodedIndirectData === null ? 0n : BigInt(util.toPointer(data.sEncodedIndirectData)), true);
  // 0x48: pointer
  if (data?.sEncodedMemberInfo !== undefined) view.setBigUint64(72, data.sEncodedMemberInfo === null ? 0n : BigInt(util.toPointer(data.sEncodedMemberInfo)), true);
  return buf;
}

export class CRYPTCATMEMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszReferenceTag(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszFileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get gSubjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get fdwMemberFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pIndirectData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwCertVersion(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwReserved(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get hReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get sEncodedIndirectData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get sEncodedMemberInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszReferenceTag(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pwszFileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: pointer
  set gSubjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set fdwMemberFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pIndirectData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set dwCertVersion(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwReserved(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set hReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set sEncodedIndirectData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set sEncodedMemberInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Catalog.CRYPTCATATTRIBUTE (size: 40)
 */
export interface CRYPTCATATTRIBUTE {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszReferenceTag: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwAttrTypeAndAction: number;
  /** u32 */
  cbValue: number;
  /** ptr */
  pbValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwReserved: number;
}

export const sizeofCRYPTCATATTRIBUTE = 40;

export function allocCRYPTCATATTRIBUTE(data?: Partial<CRYPTCATATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTCATATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszReferenceTag !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszReferenceTag);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwAttrTypeAndAction !== undefined) view.setUint32(16, Number(data.dwAttrTypeAndAction), true);
  // 0x14: u32
  if (data?.cbValue !== undefined) view.setUint32(20, Number(data.cbValue), true);
  // 0x18: pointer
  if (data?.pbValue !== undefined) view.setBigUint64(24, data.pbValue === null ? 0n : BigInt(util.toPointer(data.pbValue)), true);
  // 0x20: u32
  if (data?.dwReserved !== undefined) view.setUint32(32, Number(data.dwReserved), true);
  // 0x24: pad4
  return buf;
}

export class CRYPTCATATTRIBUTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszReferenceTag(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwAttrTypeAndAction(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbValue(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get pbValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwReserved(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszReferenceTag(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set dwAttrTypeAndAction(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbValue(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set pbValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwReserved(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Cryptography.Catalog.CRYPTCATCDF (size: 48)
 */
export interface CRYPTCATCDF {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCurFilePos: number;
  /** u32 */
  dwLastMemberOffset: number;
  /** Windows.Win32.Foundation.BOOL */
  fEOF: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  pwszResultDir: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HANDLE */
  hCATStore: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPTCATCDF = 48;

export function allocCRYPTCATCDF(data?: Partial<CRYPTCATCDF>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTCATCDF);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hFile !== undefined) view.setBigUint64(8, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x10: u32
  if (data?.dwCurFilePos !== undefined) view.setUint32(16, Number(data.dwCurFilePos), true);
  // 0x14: u32
  if (data?.dwLastMemberOffset !== undefined) view.setUint32(20, Number(data.dwLastMemberOffset), true);
  // 0x18: i32
  if (data?.fEOF !== undefined) view.setInt32(24, Number(data.fEOF), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pwszResultDir !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszResultDir);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.hCATStore !== undefined) view.setBigUint64(40, data.hCATStore === null ? 0n : BigInt(util.toPointer(data.hCATStore)), true);
  return buf;
}

export class CRYPTCATCDFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwCurFilePos(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwLastMemberOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get fEOF(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get pwszResultDir(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get hCATStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwCurFilePos(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwLastMemberOffset(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set fEOF(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set pwszResultDir(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: pointer
  set hCATStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Catalog.CATALOG_INFO (size: 16)
 */
export interface CATALOG_INFO {
  /** u32 */
  cbStruct: number;
  /** array */
  wszCatalogFile: Deno.PointerValue | null;
}

export const sizeofCATALOG_INFO = 16;

export function allocCATALOG_INFO(data?: Partial<CATALOG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCATALOG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszCatalogFile !== undefined) view.setBigUint64(8, data.wszCatalogFile === null ? 0n : BigInt(util.toPointer(data.wszCatalogFile)), true);
  return buf;
}

export class CATALOG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get wszCatalogFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set wszCatalogFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMS_KEY_INFO (size: 24)
 */
export interface CMS_KEY_INFO {
  /** u32 */
  dwVersion: number;
  /** u32 */
  Algid: number;
  /** ptr */
  pbOID: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbOID: number;
}

export const sizeofCMS_KEY_INFO = 24;

export function allocCMS_KEY_INFO(data?: Partial<CMS_KEY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMS_KEY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.Algid !== undefined) view.setUint32(4, Number(data.Algid), true);
  // 0x08: pointer
  if (data?.pbOID !== undefined) view.setBigUint64(8, data.pbOID === null ? 0n : BigInt(util.toPointer(data.pbOID)), true);
  // 0x10: u32
  if (data?.cbOID !== undefined) view.setUint32(16, Number(data.cbOID), true);
  // 0x14: pad4
  return buf;
}

export class CMS_KEY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Algid(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbOID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbOID(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Algid(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbOID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbOID(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.HMAC_INFO (size: 40)
 */
export interface HMAC_INFO {
  /** u32 */
  HashAlgid: number;
  /** ptr */
  pbInnerString: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbInnerString: number;
  /** ptr */
  pbOuterString: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbOuterString: number;
}

export const sizeofHMAC_INFO = 40;

export function allocHMAC_INFO(data?: Partial<HMAC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHMAC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HashAlgid !== undefined) view.setUint32(0, Number(data.HashAlgid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbInnerString !== undefined) view.setBigUint64(8, data.pbInnerString === null ? 0n : BigInt(util.toPointer(data.pbInnerString)), true);
  // 0x10: u32
  if (data?.cbInnerString !== undefined) view.setUint32(16, Number(data.cbInnerString), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbOuterString !== undefined) view.setBigUint64(24, data.pbOuterString === null ? 0n : BigInt(util.toPointer(data.pbOuterString)), true);
  // 0x20: u32
  if (data?.cbOuterString !== undefined) view.setUint32(32, Number(data.cbOuterString), true);
  // 0x24: pad4
  return buf;
}

export class HMAC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get HashAlgid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbInnerString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbInnerString(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pbOuterString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cbOuterString(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set HashAlgid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbInnerString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbInnerString(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pbOuterString(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cbOuterString(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Cryptography.SCHANNEL_ALG (size: 24)
 */
export interface SCHANNEL_ALG {
  /** u32 */
  dwUse: number;
  /** u32 */
  Algid: number;
  /** u32 */
  cBits: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofSCHANNEL_ALG = 24;

export function allocSCHANNEL_ALG(data?: Partial<SCHANNEL_ALG>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHANNEL_ALG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwUse !== undefined) view.setUint32(0, Number(data.dwUse), true);
  // 0x04: u32
  if (data?.Algid !== undefined) view.setUint32(4, Number(data.Algid), true);
  // 0x08: u32
  if (data?.cBits !== undefined) view.setUint32(8, Number(data.cBits), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: u32
  if (data?.dwReserved !== undefined) view.setUint32(16, Number(data.dwReserved), true);
  // 0x14: pad4
  return buf;
}

export class SCHANNEL_ALGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwUse(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Algid(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cBits(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwReserved(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwUse(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Algid(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cBits(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwReserved(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.PROV_ENUMALGS (size: 24)
 */
export interface PROV_ENUMALGS {
  /** u32 */
  aiAlgid: number;
  /** u32 */
  dwBitLen: number;
  /** u32 */
  dwNameLen: number;
  /** array */
  szName: Deno.PointerValue | null;
}

export const sizeofPROV_ENUMALGS = 24;

export function allocPROV_ENUMALGS(data?: Partial<PROV_ENUMALGS>): Uint8Array {
  const buf = new Uint8Array(sizeofPROV_ENUMALGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.aiAlgid !== undefined) view.setUint32(0, Number(data.aiAlgid), true);
  // 0x04: u32
  if (data?.dwBitLen !== undefined) view.setUint32(4, Number(data.dwBitLen), true);
  // 0x08: u32
  if (data?.dwNameLen !== undefined) view.setUint32(8, Number(data.dwNameLen), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.szName !== undefined) view.setBigUint64(16, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  return buf;
}

export class PROV_ENUMALGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get aiAlgid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwBitLen(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwNameLen(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get szName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set aiAlgid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwBitLen(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwNameLen(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set szName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.PROV_ENUMALGS_EX (size: 48)
 */
export interface PROV_ENUMALGS_EX {
  /** u32 */
  aiAlgid: number;
  /** u32 */
  dwDefaultLen: number;
  /** u32 */
  dwMinLen: number;
  /** u32 */
  dwMaxLen: number;
  /** u32 */
  dwProtocols: number;
  /** u32 */
  dwNameLen: number;
  /** array */
  szName: Deno.PointerValue | null;
  /** u32 */
  dwLongNameLen: number;
  /** array */
  szLongName: Deno.PointerValue | null;
}

export const sizeofPROV_ENUMALGS_EX = 48;

export function allocPROV_ENUMALGS_EX(data?: Partial<PROV_ENUMALGS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofPROV_ENUMALGS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.aiAlgid !== undefined) view.setUint32(0, Number(data.aiAlgid), true);
  // 0x04: u32
  if (data?.dwDefaultLen !== undefined) view.setUint32(4, Number(data.dwDefaultLen), true);
  // 0x08: u32
  if (data?.dwMinLen !== undefined) view.setUint32(8, Number(data.dwMinLen), true);
  // 0x0c: u32
  if (data?.dwMaxLen !== undefined) view.setUint32(12, Number(data.dwMaxLen), true);
  // 0x10: u32
  if (data?.dwProtocols !== undefined) view.setUint32(16, Number(data.dwProtocols), true);
  // 0x14: u32
  if (data?.dwNameLen !== undefined) view.setUint32(20, Number(data.dwNameLen), true);
  // 0x18: pointer
  if (data?.szName !== undefined) view.setBigUint64(24, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x20: u32
  if (data?.dwLongNameLen !== undefined) view.setUint32(32, Number(data.dwLongNameLen), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.szLongName !== undefined) view.setBigUint64(40, data.szLongName === null ? 0n : BigInt(util.toPointer(data.szLongName)), true);
  return buf;
}

export class PROV_ENUMALGS_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get aiAlgid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwDefaultLen(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwMinLen(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwMaxLen(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwProtocols(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwNameLen(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get szName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwLongNameLen(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get szLongName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set aiAlgid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwDefaultLen(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwMinLen(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwMaxLen(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwProtocols(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwNameLen(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set szName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwLongNameLen(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set szLongName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.PUBLICKEYSTRUC (size: 8)
 */
export interface PUBLICKEYSTRUC {
  /** u8 */
  bType: number;
  /** u8 */
  bVersion: number;
  /** u16 */
  reserved: number;
  /** u32 */
  aiKeyAlg: number;
}

export const sizeofPUBLICKEYSTRUC = 8;

export function allocPUBLICKEYSTRUC(data?: Partial<PUBLICKEYSTRUC>): Uint8Array {
  const buf = new Uint8Array(sizeofPUBLICKEYSTRUC);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.bType !== undefined) view.setUint8(0, Number(data.bType));
  // 0x01: u8
  if (data?.bVersion !== undefined) view.setUint8(1, Number(data.bVersion));
  // 0x02: u16
  if (data?.reserved !== undefined) view.setUint16(2, Number(data.reserved), true);
  // 0x04: u32
  if (data?.aiKeyAlg !== undefined) view.setUint32(4, Number(data.aiKeyAlg), true);
  return buf;
}

export class PUBLICKEYSTRUCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get bType(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get bVersion(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get reserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get aiKeyAlg(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u8
  set bType(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set bVersion(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set reserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set aiKeyAlg(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.RSAPUBKEY (size: 16)
 */
export interface RSAPUBKEY {
  /** u32 */
  magic: number;
  /** u32 */
  bitlen: number;
  /** u32 */
  pubexp: number;
}

export const sizeofRSAPUBKEY = 16;

export function allocRSAPUBKEY(data?: Partial<RSAPUBKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofRSAPUBKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.magic !== undefined) view.setUint32(0, Number(data.magic), true);
  // 0x04: u32
  if (data?.bitlen !== undefined) view.setUint32(4, Number(data.bitlen), true);
  // 0x08: u32
  if (data?.pubexp !== undefined) view.setUint32(8, Number(data.pubexp), true);
  // 0x0c: pad4
  return buf;
}

export class RSAPUBKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get magic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get bitlen(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get pubexp(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set magic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set bitlen(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set pubexp(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.PUBKEY (size: 8)
 */
export interface PUBKEY {
  /** u32 */
  magic: number;
  /** u32 */
  bitlen: number;
}

export const sizeofPUBKEY = 8;

export function allocPUBKEY(data?: Partial<PUBKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofPUBKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.magic !== undefined) view.setUint32(0, Number(data.magic), true);
  // 0x04: u32
  if (data?.bitlen !== undefined) view.setUint32(4, Number(data.bitlen), true);
  return buf;
}

export class PUBKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get magic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get bitlen(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set magic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set bitlen(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.DSSSEED (size: 16)
 */
export interface DSSSEED {
  /** u32 */
  counter: number;
  /** array */
  seed: Deno.PointerValue | null;
}

export const sizeofDSSSEED = 16;

export function allocDSSSEED(data?: Partial<DSSSEED>): Uint8Array {
  const buf = new Uint8Array(sizeofDSSSEED);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.counter !== undefined) view.setUint32(0, Number(data.counter), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.seed !== undefined) view.setBigUint64(8, data.seed === null ? 0n : BigInt(util.toPointer(data.seed)), true);
  return buf;
}

export class DSSSEEDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get counter(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get seed(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set counter(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set seed(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.PUBKEYVER3 (size: 24)
 */
export interface PUBKEYVER3 {
  /** u32 */
  magic: number;
  /** u32 */
  bitlenP: number;
  /** u32 */
  bitlenQ: number;
  /** u32 */
  bitlenJ: number;
  /** Windows.Win32.Security.Cryptography.DSSSEED */
  DSSSeed: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPUBKEYVER3 = 24;

export function allocPUBKEYVER3(data?: Partial<PUBKEYVER3>): Uint8Array {
  const buf = new Uint8Array(sizeofPUBKEYVER3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.magic !== undefined) view.setUint32(0, Number(data.magic), true);
  // 0x04: u32
  if (data?.bitlenP !== undefined) view.setUint32(4, Number(data.bitlenP), true);
  // 0x08: u32
  if (data?.bitlenQ !== undefined) view.setUint32(8, Number(data.bitlenQ), true);
  // 0x0c: u32
  if (data?.bitlenJ !== undefined) view.setUint32(12, Number(data.bitlenJ), true);
  // 0x10: pointer
  if (data?.DSSSeed !== undefined) view.setBigUint64(16, data.DSSSeed === null ? 0n : BigInt(util.toPointer(data.DSSSeed)), true);
  return buf;
}

export class PUBKEYVER3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get magic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get bitlenP(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get bitlenQ(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get bitlenJ(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get DSSSeed(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set magic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set bitlenP(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set bitlenQ(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set bitlenJ(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set DSSSeed(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.PRIVKEYVER3 (size: 32)
 */
export interface PRIVKEYVER3 {
  /** u32 */
  magic: number;
  /** u32 */
  bitlenP: number;
  /** u32 */
  bitlenQ: number;
  /** u32 */
  bitlenJ: number;
  /** u32 */
  bitlenX: number;
  /** Windows.Win32.Security.Cryptography.DSSSEED */
  DSSSeed: Uint8Array | Deno.PointerValue | null;
}

export const sizeofPRIVKEYVER3 = 32;

export function allocPRIVKEYVER3(data?: Partial<PRIVKEYVER3>): Uint8Array {
  const buf = new Uint8Array(sizeofPRIVKEYVER3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.magic !== undefined) view.setUint32(0, Number(data.magic), true);
  // 0x04: u32
  if (data?.bitlenP !== undefined) view.setUint32(4, Number(data.bitlenP), true);
  // 0x08: u32
  if (data?.bitlenQ !== undefined) view.setUint32(8, Number(data.bitlenQ), true);
  // 0x0c: u32
  if (data?.bitlenJ !== undefined) view.setUint32(12, Number(data.bitlenJ), true);
  // 0x10: u32
  if (data?.bitlenX !== undefined) view.setUint32(16, Number(data.bitlenX), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.DSSSeed !== undefined) view.setBigUint64(24, data.DSSSeed === null ? 0n : BigInt(util.toPointer(data.DSSSeed)), true);
  return buf;
}

export class PRIVKEYVER3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get magic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get bitlenP(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get bitlenQ(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get bitlenJ(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get bitlenX(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get DSSSeed(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set magic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set bitlenP(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set bitlenQ(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set bitlenJ(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set bitlenX(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set DSSSeed(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.KEY_TYPE_SUBTYPE (size: 24)
 */
export interface KEY_TYPE_SUBTYPE {
  /** u32 */
  dwKeySpec: number;
  /** System.Guid */
  Type: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Subtype: Uint8Array | Deno.PointerValue | null;
}

export const sizeofKEY_TYPE_SUBTYPE = 24;

export function allocKEY_TYPE_SUBTYPE(data?: Partial<KEY_TYPE_SUBTYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofKEY_TYPE_SUBTYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwKeySpec !== undefined) view.setUint32(0, Number(data.dwKeySpec), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Type !== undefined) view.setBigUint64(8, data.Type === null ? 0n : BigInt(util.toPointer(data.Type)), true);
  // 0x10: pointer
  if (data?.Subtype !== undefined) view.setBigUint64(16, data.Subtype === null ? 0n : BigInt(util.toPointer(data.Subtype)), true);
  return buf;
}

export class KEY_TYPE_SUBTYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwKeySpec(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Type(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Subtype(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwKeySpec(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Type(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Subtype(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_FORTEZZA_DATA_PROP (size: 24)
 */
export interface CERT_FORTEZZA_DATA_PROP {
  /** array */
  SerialNumber: Deno.PointerValue | null;
  /** i32 */
  CertIndex: number;
  /** array */
  CertLabel: Deno.PointerValue | null;
}

export const sizeofCERT_FORTEZZA_DATA_PROP = 24;

export function allocCERT_FORTEZZA_DATA_PROP(data?: Partial<CERT_FORTEZZA_DATA_PROP>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_FORTEZZA_DATA_PROP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(0, data.SerialNumber === null ? 0n : BigInt(util.toPointer(data.SerialNumber)), true);
  // 0x08: i32
  if (data?.CertIndex !== undefined) view.setInt32(8, Number(data.CertIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.CertLabel !== undefined) view.setBigUint64(16, data.CertLabel === null ? 0n : BigInt(util.toPointer(data.CertLabel)), true);
  return buf;
}

export class CERT_FORTEZZA_DATA_PROPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get CertIndex(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get CertLabel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set CertIndex(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set CertLabel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_RC4_KEY_STATE (size: 24)
 */
export interface CRYPT_RC4_KEY_STATE {
  /** array */
  Key: Deno.PointerValue | null;
  /** array */
  SBox: Deno.PointerValue | null;
  /** u8 */
  i: number;
  /** u8 */
  j: number;
}

export const sizeofCRYPT_RC4_KEY_STATE = 24;

export function allocCRYPT_RC4_KEY_STATE(data?: Partial<CRYPT_RC4_KEY_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_RC4_KEY_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Key !== undefined) view.setBigUint64(0, data.Key === null ? 0n : BigInt(util.toPointer(data.Key)), true);
  // 0x08: pointer
  if (data?.SBox !== undefined) view.setBigUint64(8, data.SBox === null ? 0n : BigInt(util.toPointer(data.SBox)), true);
  // 0x10: u8
  if (data?.i !== undefined) view.setUint8(16, Number(data.i));
  // 0x11: u8
  if (data?.j !== undefined) view.setUint8(17, Number(data.j));
  // 0x12: pad6
  return buf;
}

export class CRYPT_RC4_KEY_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SBox(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u8
  get i(): number {
    return this.view.getUint8(16);
  }

  // 0x11: u8
  get j(): number {
    return this.view.getUint8(17);
  }

  // 0x12: pad6

  // 0x00: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SBox(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u8
  set i(value: number) {
    this.view.setUint8(16, value);
  }

  // 0x11: u8
  set j(value: number) {
    this.view.setUint8(17, value);
  }

  // 0x12: pad6
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_DES_KEY_STATE (size: 24)
 */
export interface CRYPT_DES_KEY_STATE {
  /** array */
  Key: Deno.PointerValue | null;
  /** array */
  IV: Deno.PointerValue | null;
  /** array */
  Feedback: Deno.PointerValue | null;
}

export const sizeofCRYPT_DES_KEY_STATE = 24;

export function allocCRYPT_DES_KEY_STATE(data?: Partial<CRYPT_DES_KEY_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_DES_KEY_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Key !== undefined) view.setBigUint64(0, data.Key === null ? 0n : BigInt(util.toPointer(data.Key)), true);
  // 0x08: pointer
  if (data?.IV !== undefined) view.setBigUint64(8, data.IV === null ? 0n : BigInt(util.toPointer(data.IV)), true);
  // 0x10: pointer
  if (data?.Feedback !== undefined) view.setBigUint64(16, data.Feedback === null ? 0n : BigInt(util.toPointer(data.Feedback)), true);
  return buf;
}

export class CRYPT_DES_KEY_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get IV(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Feedback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set IV(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Feedback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_3DES_KEY_STATE (size: 24)
 */
export interface CRYPT_3DES_KEY_STATE {
  /** array */
  Key: Deno.PointerValue | null;
  /** array */
  IV: Deno.PointerValue | null;
  /** array */
  Feedback: Deno.PointerValue | null;
}

export const sizeofCRYPT_3DES_KEY_STATE = 24;

export function allocCRYPT_3DES_KEY_STATE(data?: Partial<CRYPT_3DES_KEY_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_3DES_KEY_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Key !== undefined) view.setBigUint64(0, data.Key === null ? 0n : BigInt(util.toPointer(data.Key)), true);
  // 0x08: pointer
  if (data?.IV !== undefined) view.setBigUint64(8, data.IV === null ? 0n : BigInt(util.toPointer(data.IV)), true);
  // 0x10: pointer
  if (data?.Feedback !== undefined) view.setBigUint64(16, data.Feedback === null ? 0n : BigInt(util.toPointer(data.Feedback)), true);
  return buf;
}

export class CRYPT_3DES_KEY_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get IV(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Feedback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set IV(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Feedback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_AES_128_KEY_STATE (size: 40)
 */
export interface CRYPT_AES_128_KEY_STATE {
  /** array */
  Key: Deno.PointerValue | null;
  /** array */
  IV: Deno.PointerValue | null;
  /** array */
  EncryptionState: Deno.PointerValue | null;
  /** array */
  DecryptionState: Deno.PointerValue | null;
  /** array */
  Feedback: Deno.PointerValue | null;
}

export const sizeofCRYPT_AES_128_KEY_STATE = 40;

export function allocCRYPT_AES_128_KEY_STATE(data?: Partial<CRYPT_AES_128_KEY_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_AES_128_KEY_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Key !== undefined) view.setBigUint64(0, data.Key === null ? 0n : BigInt(util.toPointer(data.Key)), true);
  // 0x08: pointer
  if (data?.IV !== undefined) view.setBigUint64(8, data.IV === null ? 0n : BigInt(util.toPointer(data.IV)), true);
  // 0x10: pointer
  if (data?.EncryptionState !== undefined) view.setBigUint64(16, data.EncryptionState === null ? 0n : BigInt(util.toPointer(data.EncryptionState)), true);
  // 0x18: pointer
  if (data?.DecryptionState !== undefined) view.setBigUint64(24, data.DecryptionState === null ? 0n : BigInt(util.toPointer(data.DecryptionState)), true);
  // 0x20: pointer
  if (data?.Feedback !== undefined) view.setBigUint64(32, data.Feedback === null ? 0n : BigInt(util.toPointer(data.Feedback)), true);
  return buf;
}

export class CRYPT_AES_128_KEY_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get IV(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get EncryptionState(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DecryptionState(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Feedback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set IV(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set EncryptionState(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DecryptionState(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Feedback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_AES_256_KEY_STATE (size: 40)
 */
export interface CRYPT_AES_256_KEY_STATE {
  /** array */
  Key: Deno.PointerValue | null;
  /** array */
  IV: Deno.PointerValue | null;
  /** array */
  EncryptionState: Deno.PointerValue | null;
  /** array */
  DecryptionState: Deno.PointerValue | null;
  /** array */
  Feedback: Deno.PointerValue | null;
}

export const sizeofCRYPT_AES_256_KEY_STATE = 40;

export function allocCRYPT_AES_256_KEY_STATE(data?: Partial<CRYPT_AES_256_KEY_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_AES_256_KEY_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Key !== undefined) view.setBigUint64(0, data.Key === null ? 0n : BigInt(util.toPointer(data.Key)), true);
  // 0x08: pointer
  if (data?.IV !== undefined) view.setBigUint64(8, data.IV === null ? 0n : BigInt(util.toPointer(data.IV)), true);
  // 0x10: pointer
  if (data?.EncryptionState !== undefined) view.setBigUint64(16, data.EncryptionState === null ? 0n : BigInt(util.toPointer(data.EncryptionState)), true);
  // 0x18: pointer
  if (data?.DecryptionState !== undefined) view.setBigUint64(24, data.DecryptionState === null ? 0n : BigInt(util.toPointer(data.DecryptionState)), true);
  // 0x20: pointer
  if (data?.Feedback !== undefined) view.setBigUint64(32, data.Feedback === null ? 0n : BigInt(util.toPointer(data.Feedback)), true);
  return buf;
}

export class CRYPT_AES_256_KEY_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Key(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get IV(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get EncryptionState(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get DecryptionState(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Feedback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Key(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set IV(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set EncryptionState(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set DecryptionState(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Feedback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMS_DH_KEY_INFO (size: 32)
 */
export interface CMS_DH_KEY_INFO {
  /** u32 */
  dwVersion: number;
  /** u32 */
  Algid: number;
  /** Windows.Win32.Foundation.PSTR */
  pszContentEncObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  PubInfo: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pReserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMS_DH_KEY_INFO = 32;

export function allocCMS_DH_KEY_INFO(data?: Partial<CMS_DH_KEY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMS_DH_KEY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.Algid !== undefined) view.setUint32(4, Number(data.Algid), true);
  // 0x08: buffer
  if (data?.pszContentEncObjId !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszContentEncObjId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.PubInfo !== undefined) view.setBigUint64(16, data.PubInfo === null ? 0n : BigInt(util.toPointer(data.PubInfo)), true);
  // 0x18: pointer
  if (data?.pReserved !== undefined) view.setBigUint64(24, data.pReserved === null ? 0n : BigInt(util.toPointer(data.pReserved)), true);
  return buf;
}

export class CMS_DH_KEY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Algid(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pszContentEncObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get PubInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Algid(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pszContentEncObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set PubInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_KEY_LENGTHS_STRUCT (size: 16)
 */
export interface BCRYPT_KEY_LENGTHS_STRUCT {
  /** u32 */
  dwMinLength: number;
  /** u32 */
  dwMaxLength: number;
  /** u32 */
  dwIncrement: number;
}

export const sizeofBCRYPT_KEY_LENGTHS_STRUCT = 16;

export function allocBCRYPT_KEY_LENGTHS_STRUCT(data?: Partial<BCRYPT_KEY_LENGTHS_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_KEY_LENGTHS_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMinLength !== undefined) view.setUint32(0, Number(data.dwMinLength), true);
  // 0x04: u32
  if (data?.dwMaxLength !== undefined) view.setUint32(4, Number(data.dwMaxLength), true);
  // 0x08: u32
  if (data?.dwIncrement !== undefined) view.setUint32(8, Number(data.dwIncrement), true);
  // 0x0c: pad4
  return buf;
}

export class BCRYPT_KEY_LENGTHS_STRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMinLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMaxLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwIncrement(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwMinLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMaxLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwIncrement(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_OID (size: 16)
 */
export interface BCRYPT_OID {
  /** u32 */
  cbOID: number;
  /** ptr */
  pbOID: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBCRYPT_OID = 16;

export function allocBCRYPT_OID(data?: Partial<BCRYPT_OID>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_OID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbOID !== undefined) view.setUint32(0, Number(data.cbOID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbOID !== undefined) view.setBigUint64(8, data.pbOID === null ? 0n : BigInt(util.toPointer(data.pbOID)), true);
  return buf;
}

export class BCRYPT_OIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbOID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbOID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbOID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbOID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_OID_LIST (size: 16)
 */
export interface BCRYPT_OID_LIST {
  /** u32 */
  dwOIDCount: number;
  /** ptr */
  pOIDs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBCRYPT_OID_LIST = 16;

export function allocBCRYPT_OID_LIST(data?: Partial<BCRYPT_OID_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_OID_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOIDCount !== undefined) view.setUint32(0, Number(data.dwOIDCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pOIDs !== undefined) view.setBigUint64(8, data.pOIDs === null ? 0n : BigInt(util.toPointer(data.pOIDs)), true);
  return buf;
}

export class BCRYPT_OID_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwOIDCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pOIDs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwOIDCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pOIDs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_PKCS1_PADDING_INFO (size: 8)
 */
export interface BCRYPT_PKCS1_PADDING_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pszAlgId: string | null | Uint8Array | Uint16Array;
}

export const sizeofBCRYPT_PKCS1_PADDING_INFO = 8;

export function allocBCRYPT_PKCS1_PADDING_INFO(data?: Partial<BCRYPT_PKCS1_PADDING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_PKCS1_PADDING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszAlgId !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszAlgId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

export class BCRYPT_PKCS1_PADDING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszAlgId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszAlgId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_PSS_PADDING_INFO (size: 16)
 */
export interface BCRYPT_PSS_PADDING_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pszAlgId: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbSalt: number;
}

export const sizeofBCRYPT_PSS_PADDING_INFO = 16;

export function allocBCRYPT_PSS_PADDING_INFO(data?: Partial<BCRYPT_PSS_PADDING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_PSS_PADDING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszAlgId !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszAlgId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.cbSalt !== undefined) view.setUint32(8, Number(data.cbSalt), true);
  // 0x0c: pad4
  return buf;
}

export class BCRYPT_PSS_PADDING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszAlgId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cbSalt(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set pszAlgId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set cbSalt(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_OAEP_PADDING_INFO (size: 24)
 */
export interface BCRYPT_OAEP_PADDING_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pszAlgId: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pbLabel: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbLabel: number;
}

export const sizeofBCRYPT_OAEP_PADDING_INFO = 24;

export function allocBCRYPT_OAEP_PADDING_INFO(data?: Partial<BCRYPT_OAEP_PADDING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_OAEP_PADDING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszAlgId !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszAlgId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pbLabel !== undefined) view.setBigUint64(8, data.pbLabel === null ? 0n : BigInt(util.toPointer(data.pbLabel)), true);
  // 0x10: u32
  if (data?.cbLabel !== undefined) view.setUint32(16, Number(data.cbLabel), true);
  // 0x14: pad4
  return buf;
}

export class BCRYPT_OAEP_PADDING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszAlgId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pbLabel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbLabel(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set pszAlgId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set pbLabel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbLabel(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO (size: 88)
 */
export interface BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwInfoVersion: number;
  /** ptr */
  pbNonce: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbNonce: number;
  /** ptr */
  pbAuthData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbAuthData: number;
  /** ptr */
  pbTag: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbTag: number;
  /** ptr */
  pbMacContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbMacContext: number;
  /** u32 */
  cbAAD: number;
  /** u64 */
  cbData: Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = 88;

export function allocBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO(data?: Partial<BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwInfoVersion !== undefined) view.setUint32(4, Number(data.dwInfoVersion), true);
  // 0x08: pointer
  if (data?.pbNonce !== undefined) view.setBigUint64(8, data.pbNonce === null ? 0n : BigInt(util.toPointer(data.pbNonce)), true);
  // 0x10: u32
  if (data?.cbNonce !== undefined) view.setUint32(16, Number(data.cbNonce), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbAuthData !== undefined) view.setBigUint64(24, data.pbAuthData === null ? 0n : BigInt(util.toPointer(data.pbAuthData)), true);
  // 0x20: u32
  if (data?.cbAuthData !== undefined) view.setUint32(32, Number(data.cbAuthData), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pbTag !== undefined) view.setBigUint64(40, data.pbTag === null ? 0n : BigInt(util.toPointer(data.pbTag)), true);
  // 0x30: u32
  if (data?.cbTag !== undefined) view.setUint32(48, Number(data.cbTag), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pbMacContext !== undefined) view.setBigUint64(56, data.pbMacContext === null ? 0n : BigInt(util.toPointer(data.pbMacContext)), true);
  // 0x40: u32
  if (data?.cbMacContext !== undefined) view.setUint32(64, Number(data.cbMacContext), true);
  // 0x44: u32
  if (data?.cbAAD !== undefined) view.setUint32(68, Number(data.cbAAD), true);
  // 0x48: u64
  if (data?.cbData !== undefined) view.setBigUint64(72, BigInt(data.cbData), true);
  // 0x50: u32
  if (data?.dwFlags !== undefined) view.setUint32(80, Number(data.dwFlags), true);
  // 0x54: pad4
  return buf;
}

export class BCRYPT_AUTHENTICATED_CIPHER_MODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwInfoVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbNonce(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbNonce(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pbAuthData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cbAuthData(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get pbTag(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cbTag(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pbMacContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get cbMacContext(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get cbAAD(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u64
  get cbData(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u32
  get dwFlags(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwInfoVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbNonce(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbNonce(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pbAuthData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cbAuthData(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set pbTag(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set cbTag(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pbMacContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set cbMacContext(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set cbAAD(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u64
  set cbData(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u32
  set dwFlags(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.Security.Cryptography.BCryptBuffer (size: 16)
 */
export interface BCryptBuffer {
  /** u32 */
  cbBuffer: number;
  /** u32 */
  BufferType: number;
  /** ptr */
  pvBuffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBCryptBuffer = 16;

export function allocBCryptBuffer(data?: Partial<BCryptBuffer>): Uint8Array {
  const buf = new Uint8Array(sizeofBCryptBuffer);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbBuffer !== undefined) view.setUint32(0, Number(data.cbBuffer), true);
  // 0x04: u32
  if (data?.BufferType !== undefined) view.setUint32(4, Number(data.BufferType), true);
  // 0x08: pointer
  if (data?.pvBuffer !== undefined) view.setBigUint64(8, data.pvBuffer === null ? 0n : BigInt(util.toPointer(data.pvBuffer)), true);
  return buf;
}

export class BCryptBufferView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbBuffer(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get BufferType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pvBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbBuffer(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set BufferType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pvBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCryptBufferDesc (size: 16)
 */
export interface BCryptBufferDesc {
  /** u32 */
  ulVersion: number;
  /** u32 */
  cBuffers: number;
  /** ptr */
  pBuffers: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBCryptBufferDesc = 16;

export function allocBCryptBufferDesc(data?: Partial<BCryptBufferDesc>): Uint8Array {
  const buf = new Uint8Array(sizeofBCryptBufferDesc);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulVersion !== undefined) view.setUint32(0, Number(data.ulVersion), true);
  // 0x04: u32
  if (data?.cBuffers !== undefined) view.setUint32(4, Number(data.cBuffers), true);
  // 0x08: pointer
  if (data?.pBuffers !== undefined) view.setBigUint64(8, data.pBuffers === null ? 0n : BigInt(util.toPointer(data.pBuffers)), true);
  return buf;
}

export class BCryptBufferDescView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cBuffers(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pBuffers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set ulVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cBuffers(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pBuffers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_KEY_BLOB (size: 8)
 */
export interface BCRYPT_KEY_BLOB {
  /** u32 */
  Magic: number;
}

export const sizeofBCRYPT_KEY_BLOB = 8;

export function allocBCRYPT_KEY_BLOB(data?: Partial<BCRYPT_KEY_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_KEY_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Magic !== undefined) view.setUint32(0, Number(data.Magic), true);
  // 0x04: pad4
  return buf;
}

export class BCRYPT_KEY_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Magic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Magic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_RSAKEY_BLOB (size: 24)
 */
export interface BCRYPT_RSAKEY_BLOB {
  /** Windows.Win32.Security.Cryptography.BCRYPT_RSAKEY_BLOB_MAGIC */
  Magic: BCRYPT_RSAKEY_BLOB_MAGIC;
  /** u32 */
  BitLength: number;
  /** u32 */
  cbPublicExp: number;
  /** u32 */
  cbModulus: number;
  /** u32 */
  cbPrime1: number;
  /** u32 */
  cbPrime2: number;
}

export const sizeofBCRYPT_RSAKEY_BLOB = 24;

export function allocBCRYPT_RSAKEY_BLOB(data?: Partial<BCRYPT_RSAKEY_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_RSAKEY_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Magic !== undefined) view.setUint32(0, Number(data.Magic), true);
  // 0x04: u32
  if (data?.BitLength !== undefined) view.setUint32(4, Number(data.BitLength), true);
  // 0x08: u32
  if (data?.cbPublicExp !== undefined) view.setUint32(8, Number(data.cbPublicExp), true);
  // 0x0c: u32
  if (data?.cbModulus !== undefined) view.setUint32(12, Number(data.cbModulus), true);
  // 0x10: u32
  if (data?.cbPrime1 !== undefined) view.setUint32(16, Number(data.cbPrime1), true);
  // 0x14: u32
  if (data?.cbPrime2 !== undefined) view.setUint32(20, Number(data.cbPrime2), true);
  return buf;
}

export class BCRYPT_RSAKEY_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Magic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get BitLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbPublicExp(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbModulus(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbPrime1(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbPrime2(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Magic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set BitLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbPublicExp(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbModulus(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbPrime1(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbPrime2(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_ECCKEY_BLOB (size: 8)
 */
export interface BCRYPT_ECCKEY_BLOB {
  /** u32 */
  dwMagic: number;
  /** u32 */
  cbKey: number;
}

export const sizeofBCRYPT_ECCKEY_BLOB = 8;

export function allocBCRYPT_ECCKEY_BLOB(data?: Partial<BCRYPT_ECCKEY_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_ECCKEY_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMagic !== undefined) view.setUint32(0, Number(data.dwMagic), true);
  // 0x04: u32
  if (data?.cbKey !== undefined) view.setUint32(4, Number(data.cbKey), true);
  return buf;
}

export class BCRYPT_ECCKEY_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMagic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbKey(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwMagic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbKey(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.SSL_ECCKEY_BLOB (size: 8)
 */
export interface SSL_ECCKEY_BLOB {
  /** u32 */
  dwCurveType: number;
  /** u32 */
  cbKey: number;
}

export const sizeofSSL_ECCKEY_BLOB = 8;

export function allocSSL_ECCKEY_BLOB(data?: Partial<SSL_ECCKEY_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofSSL_ECCKEY_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCurveType !== undefined) view.setUint32(0, Number(data.dwCurveType), true);
  // 0x04: u32
  if (data?.cbKey !== undefined) view.setUint32(4, Number(data.cbKey), true);
  return buf;
}

export class SSL_ECCKEY_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCurveType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbKey(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwCurveType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbKey(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_ECCFULLKEY_BLOB (size: 32)
 */
export interface BCRYPT_ECCFULLKEY_BLOB {
  /** u32 */
  dwMagic: number;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Cryptography.ECC_CURVE_TYPE_ENUM */
  dwCurveType: ECC_CURVE_TYPE_ENUM;
  /** Windows.Win32.Security.Cryptography.ECC_CURVE_ALG_ID_ENUM */
  dwCurveGenerationAlgId: ECC_CURVE_ALG_ID_ENUM;
  /** u32 */
  cbFieldLength: number;
  /** u32 */
  cbSubgroupOrder: number;
  /** u32 */
  cbCofactor: number;
  /** u32 */
  cbSeed: number;
}

export const sizeofBCRYPT_ECCFULLKEY_BLOB = 32;

export function allocBCRYPT_ECCFULLKEY_BLOB(data?: Partial<BCRYPT_ECCFULLKEY_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_ECCFULLKEY_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMagic !== undefined) view.setUint32(0, Number(data.dwMagic), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: i32
  if (data?.dwCurveType !== undefined) view.setInt32(8, Number(data.dwCurveType), true);
  // 0x0c: i32
  if (data?.dwCurveGenerationAlgId !== undefined) view.setInt32(12, Number(data.dwCurveGenerationAlgId), true);
  // 0x10: u32
  if (data?.cbFieldLength !== undefined) view.setUint32(16, Number(data.cbFieldLength), true);
  // 0x14: u32
  if (data?.cbSubgroupOrder !== undefined) view.setUint32(20, Number(data.cbSubgroupOrder), true);
  // 0x18: u32
  if (data?.cbCofactor !== undefined) view.setUint32(24, Number(data.cbCofactor), true);
  // 0x1c: u32
  if (data?.cbSeed !== undefined) view.setUint32(28, Number(data.cbSeed), true);
  return buf;
}

export class BCRYPT_ECCFULLKEY_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMagic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get dwCurveType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get dwCurveGenerationAlgId(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get cbFieldLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbSubgroupOrder(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cbCofactor(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cbSeed(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set dwMagic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set dwCurveType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set dwCurveGenerationAlgId(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set cbFieldLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbSubgroupOrder(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cbCofactor(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cbSeed(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_DH_KEY_BLOB (size: 8)
 */
export interface BCRYPT_DH_KEY_BLOB {
  /** Windows.Win32.Security.Cryptography.BCRYPT_DH_KEY_BLOB_MAGIC */
  dwMagic: BCRYPT_DH_KEY_BLOB_MAGIC;
  /** u32 */
  cbKey: number;
}

export const sizeofBCRYPT_DH_KEY_BLOB = 8;

export function allocBCRYPT_DH_KEY_BLOB(data?: Partial<BCRYPT_DH_KEY_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_DH_KEY_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMagic !== undefined) view.setUint32(0, Number(data.dwMagic), true);
  // 0x04: u32
  if (data?.cbKey !== undefined) view.setUint32(4, Number(data.cbKey), true);
  return buf;
}

export class BCRYPT_DH_KEY_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMagic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbKey(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwMagic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbKey(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_DH_PARAMETER_HEADER (size: 16)
 */
export interface BCRYPT_DH_PARAMETER_HEADER {
  /** u32 */
  cbLength: number;
  /** u32 */
  dwMagic: number;
  /** u32 */
  cbKeyLength: number;
}

export const sizeofBCRYPT_DH_PARAMETER_HEADER = 16;

export function allocBCRYPT_DH_PARAMETER_HEADER(data?: Partial<BCRYPT_DH_PARAMETER_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_DH_PARAMETER_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbLength !== undefined) view.setUint32(0, Number(data.cbLength), true);
  // 0x04: u32
  if (data?.dwMagic !== undefined) view.setUint32(4, Number(data.dwMagic), true);
  // 0x08: u32
  if (data?.cbKeyLength !== undefined) view.setUint32(8, Number(data.cbKeyLength), true);
  // 0x0c: pad4
  return buf;
}

export class BCRYPT_DH_PARAMETER_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMagic(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbKeyLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set cbLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMagic(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbKeyLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_DSA_KEY_BLOB (size: 32)
 */
export interface BCRYPT_DSA_KEY_BLOB {
  /** Windows.Win32.Security.Cryptography.BCRYPT_DSA_MAGIC */
  dwMagic: BCRYPT_DSA_MAGIC;
  /** u32 */
  cbKey: number;
  /** array */
  Count: Deno.PointerValue | null;
  /** array */
  Seed: Deno.PointerValue | null;
  /** array */
  q: Deno.PointerValue | null;
}

export const sizeofBCRYPT_DSA_KEY_BLOB = 32;

export function allocBCRYPT_DSA_KEY_BLOB(data?: Partial<BCRYPT_DSA_KEY_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_DSA_KEY_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMagic !== undefined) view.setUint32(0, Number(data.dwMagic), true);
  // 0x04: u32
  if (data?.cbKey !== undefined) view.setUint32(4, Number(data.cbKey), true);
  // 0x08: pointer
  if (data?.Count !== undefined) view.setBigUint64(8, data.Count === null ? 0n : BigInt(util.toPointer(data.Count)), true);
  // 0x10: pointer
  if (data?.Seed !== undefined) view.setBigUint64(16, data.Seed === null ? 0n : BigInt(util.toPointer(data.Seed)), true);
  // 0x18: pointer
  if (data?.q !== undefined) view.setBigUint64(24, data.q === null ? 0n : BigInt(util.toPointer(data.q)), true);
  return buf;
}

export class BCRYPT_DSA_KEY_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMagic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbKey(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Count(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Seed(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get q(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwMagic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbKey(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Count(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Seed(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set q(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_DSA_KEY_BLOB_V2 (size: 32)
 */
export interface BCRYPT_DSA_KEY_BLOB_V2 {
  /** Windows.Win32.Security.Cryptography.BCRYPT_DSA_MAGIC */
  dwMagic: BCRYPT_DSA_MAGIC;
  /** u32 */
  cbKey: number;
  /** Windows.Win32.Security.Cryptography.HASHALGORITHM_ENUM */
  hashAlgorithm: HASHALGORITHM_ENUM;
  /** Windows.Win32.Security.Cryptography.DSAFIPSVERSION_ENUM */
  standardVersion: DSAFIPSVERSION_ENUM;
  /** u32 */
  cbSeedLength: number;
  /** u32 */
  cbGroupSize: number;
  /** array */
  Count: Deno.PointerValue | null;
}

export const sizeofBCRYPT_DSA_KEY_BLOB_V2 = 32;

export function allocBCRYPT_DSA_KEY_BLOB_V2(data?: Partial<BCRYPT_DSA_KEY_BLOB_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_DSA_KEY_BLOB_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMagic !== undefined) view.setUint32(0, Number(data.dwMagic), true);
  // 0x04: u32
  if (data?.cbKey !== undefined) view.setUint32(4, Number(data.cbKey), true);
  // 0x08: i32
  if (data?.hashAlgorithm !== undefined) view.setInt32(8, Number(data.hashAlgorithm), true);
  // 0x0c: i32
  if (data?.standardVersion !== undefined) view.setInt32(12, Number(data.standardVersion), true);
  // 0x10: u32
  if (data?.cbSeedLength !== undefined) view.setUint32(16, Number(data.cbSeedLength), true);
  // 0x14: u32
  if (data?.cbGroupSize !== undefined) view.setUint32(20, Number(data.cbGroupSize), true);
  // 0x18: pointer
  if (data?.Count !== undefined) view.setBigUint64(24, data.Count === null ? 0n : BigInt(util.toPointer(data.Count)), true);
  return buf;
}

export class BCRYPT_DSA_KEY_BLOB_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMagic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbKey(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get hashAlgorithm(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get standardVersion(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get cbSeedLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbGroupSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get Count(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwMagic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbKey(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set hashAlgorithm(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set standardVersion(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set cbSeedLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbGroupSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set Count(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_KEY_DATA_BLOB_HEADER (size: 16)
 */
export interface BCRYPT_KEY_DATA_BLOB_HEADER {
  /** u32 */
  dwMagic: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbKeyData: number;
}

export const sizeofBCRYPT_KEY_DATA_BLOB_HEADER = 16;

export function allocBCRYPT_KEY_DATA_BLOB_HEADER(data?: Partial<BCRYPT_KEY_DATA_BLOB_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_KEY_DATA_BLOB_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMagic !== undefined) view.setUint32(0, Number(data.dwMagic), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: u32
  if (data?.cbKeyData !== undefined) view.setUint32(8, Number(data.cbKeyData), true);
  // 0x0c: pad4
  return buf;
}

export class BCRYPT_KEY_DATA_BLOB_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMagic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbKeyData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwMagic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbKeyData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_DSA_PARAMETER_HEADER (size: 40)
 */
export interface BCRYPT_DSA_PARAMETER_HEADER {
  /** u32 */
  cbLength: number;
  /** u32 */
  dwMagic: number;
  /** u32 */
  cbKeyLength: number;
  /** array */
  Count: Deno.PointerValue | null;
  /** array */
  Seed: Deno.PointerValue | null;
  /** array */
  q: Deno.PointerValue | null;
}

export const sizeofBCRYPT_DSA_PARAMETER_HEADER = 40;

export function allocBCRYPT_DSA_PARAMETER_HEADER(data?: Partial<BCRYPT_DSA_PARAMETER_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_DSA_PARAMETER_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbLength !== undefined) view.setUint32(0, Number(data.cbLength), true);
  // 0x04: u32
  if (data?.dwMagic !== undefined) view.setUint32(4, Number(data.dwMagic), true);
  // 0x08: u32
  if (data?.cbKeyLength !== undefined) view.setUint32(8, Number(data.cbKeyLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Count !== undefined) view.setBigUint64(16, data.Count === null ? 0n : BigInt(util.toPointer(data.Count)), true);
  // 0x18: pointer
  if (data?.Seed !== undefined) view.setBigUint64(24, data.Seed === null ? 0n : BigInt(util.toPointer(data.Seed)), true);
  // 0x20: pointer
  if (data?.q !== undefined) view.setBigUint64(32, data.q === null ? 0n : BigInt(util.toPointer(data.q)), true);
  return buf;
}

export class BCRYPT_DSA_PARAMETER_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMagic(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbKeyLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Count(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Seed(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get q(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMagic(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbKeyLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Count(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Seed(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set q(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_DSA_PARAMETER_HEADER_V2 (size: 40)
 */
export interface BCRYPT_DSA_PARAMETER_HEADER_V2 {
  /** u32 */
  cbLength: number;
  /** u32 */
  dwMagic: number;
  /** u32 */
  cbKeyLength: number;
  /** Windows.Win32.Security.Cryptography.HASHALGORITHM_ENUM */
  hashAlgorithm: HASHALGORITHM_ENUM;
  /** Windows.Win32.Security.Cryptography.DSAFIPSVERSION_ENUM */
  standardVersion: DSAFIPSVERSION_ENUM;
  /** u32 */
  cbSeedLength: number;
  /** u32 */
  cbGroupSize: number;
  /** array */
  Count: Deno.PointerValue | null;
}

export const sizeofBCRYPT_DSA_PARAMETER_HEADER_V2 = 40;

export function allocBCRYPT_DSA_PARAMETER_HEADER_V2(data?: Partial<BCRYPT_DSA_PARAMETER_HEADER_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_DSA_PARAMETER_HEADER_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbLength !== undefined) view.setUint32(0, Number(data.cbLength), true);
  // 0x04: u32
  if (data?.dwMagic !== undefined) view.setUint32(4, Number(data.dwMagic), true);
  // 0x08: u32
  if (data?.cbKeyLength !== undefined) view.setUint32(8, Number(data.cbKeyLength), true);
  // 0x0c: i32
  if (data?.hashAlgorithm !== undefined) view.setInt32(12, Number(data.hashAlgorithm), true);
  // 0x10: i32
  if (data?.standardVersion !== undefined) view.setInt32(16, Number(data.standardVersion), true);
  // 0x14: u32
  if (data?.cbSeedLength !== undefined) view.setUint32(20, Number(data.cbSeedLength), true);
  // 0x18: u32
  if (data?.cbGroupSize !== undefined) view.setUint32(24, Number(data.cbGroupSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Count !== undefined) view.setBigUint64(32, data.Count === null ? 0n : BigInt(util.toPointer(data.Count)), true);
  return buf;
}

export class BCRYPT_DSA_PARAMETER_HEADER_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMagic(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbKeyLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get hashAlgorithm(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get standardVersion(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get cbSeedLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cbGroupSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Count(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMagic(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbKeyLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set hashAlgorithm(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set standardVersion(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set cbSeedLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cbGroupSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Count(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_ECC_CURVE_NAMES (size: 16)
 */
export interface BCRYPT_ECC_CURVE_NAMES {
  /** u32 */
  dwEccCurveNames: number;
  /** ptr */
  pEccCurveNames: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBCRYPT_ECC_CURVE_NAMES = 16;

export function allocBCRYPT_ECC_CURVE_NAMES(data?: Partial<BCRYPT_ECC_CURVE_NAMES>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_ECC_CURVE_NAMES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwEccCurveNames !== undefined) view.setUint32(0, Number(data.dwEccCurveNames), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEccCurveNames !== undefined) view.setBigUint64(8, data.pEccCurveNames === null ? 0n : BigInt(util.toPointer(data.pEccCurveNames)), true);
  return buf;
}

export class BCRYPT_ECC_CURVE_NAMESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwEccCurveNames(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pEccCurveNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwEccCurveNames(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pEccCurveNames(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_MULTI_HASH_OPERATION (size: 24)
 */
export interface BCRYPT_MULTI_HASH_OPERATION {
  /** u32 */
  iHash: number;
  /** Windows.Win32.Security.Cryptography.BCRYPT_HASH_OPERATION_TYPE */
  hashOperation: BCRYPT_HASH_OPERATION_TYPE;
  /** ptr */
  pbBuffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbBuffer: number;
}

export const sizeofBCRYPT_MULTI_HASH_OPERATION = 24;

export function allocBCRYPT_MULTI_HASH_OPERATION(data?: Partial<BCRYPT_MULTI_HASH_OPERATION>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_MULTI_HASH_OPERATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iHash !== undefined) view.setUint32(0, Number(data.iHash), true);
  // 0x04: i32
  if (data?.hashOperation !== undefined) view.setInt32(4, Number(data.hashOperation), true);
  // 0x08: pointer
  if (data?.pbBuffer !== undefined) view.setBigUint64(8, data.pbBuffer === null ? 0n : BigInt(util.toPointer(data.pbBuffer)), true);
  // 0x10: u32
  if (data?.cbBuffer !== undefined) view.setUint32(16, Number(data.cbBuffer), true);
  // 0x14: pad4
  return buf;
}

export class BCRYPT_MULTI_HASH_OPERATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get iHash(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get hashOperation(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pbBuffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbBuffer(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set iHash(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set hashOperation(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pbBuffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbBuffer(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_MULTI_OBJECT_LENGTH_STRUCT (size: 8)
 */
export interface BCRYPT_MULTI_OBJECT_LENGTH_STRUCT {
  /** u32 */
  cbPerObject: number;
  /** u32 */
  cbPerElement: number;
}

export const sizeofBCRYPT_MULTI_OBJECT_LENGTH_STRUCT = 8;

export function allocBCRYPT_MULTI_OBJECT_LENGTH_STRUCT(data?: Partial<BCRYPT_MULTI_OBJECT_LENGTH_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_MULTI_OBJECT_LENGTH_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbPerObject !== undefined) view.setUint32(0, Number(data.cbPerObject), true);
  // 0x04: u32
  if (data?.cbPerElement !== undefined) view.setUint32(4, Number(data.cbPerElement), true);
  return buf;
}

export class BCRYPT_MULTI_OBJECT_LENGTH_STRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbPerObject(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbPerElement(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set cbPerObject(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbPerElement(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_ALGORITHM_IDENTIFIER (size: 16)
 */
export interface BCRYPT_ALGORITHM_IDENTIFIER {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwClass: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofBCRYPT_ALGORITHM_IDENTIFIER = 16;

export function allocBCRYPT_ALGORITHM_IDENTIFIER(data?: Partial<BCRYPT_ALGORITHM_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_ALGORITHM_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwClass !== undefined) view.setUint32(8, Number(data.dwClass), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  return buf;
}

export class BCRYPT_ALGORITHM_IDENTIFIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwClass(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: buffer
  set pszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set dwClass(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFlags(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_PROVIDER_NAME (size: 8)
 */
export interface BCRYPT_PROVIDER_NAME {
  /** Windows.Win32.Foundation.PWSTR */
  pszProviderName: string | null | Uint8Array | Uint16Array;
}

export const sizeofBCRYPT_PROVIDER_NAME = 8;

export function allocBCRYPT_PROVIDER_NAME(data?: Partial<BCRYPT_PROVIDER_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_PROVIDER_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszProviderName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszProviderName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

export class BCRYPT_PROVIDER_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszProviderName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszProviderName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.BCRYPT_INTERFACE_VERSION (size: 8)
 */
export interface BCRYPT_INTERFACE_VERSION {
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
}

export const sizeofBCRYPT_INTERFACE_VERSION = 8;

export function allocBCRYPT_INTERFACE_VERSION(data?: Partial<BCRYPT_INTERFACE_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofBCRYPT_INTERFACE_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MajorVersion !== undefined) view.setUint16(0, Number(data.MajorVersion), true);
  // 0x02: u16
  if (data?.MinorVersion !== undefined) view.setUint16(2, Number(data.MinorVersion), true);
  // 0x04: pad4
  return buf;
}

export class BCRYPT_INTERFACE_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MajorVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MinorVersion(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set MajorVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MinorVersion(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_INTERFACE_REG (size: 24)
 */
export interface CRYPT_INTERFACE_REG {
  /** Windows.Win32.Security.Cryptography.BCRYPT_INTERFACE */
  dwInterface: BCRYPT_INTERFACE;
  /** Windows.Win32.Security.Cryptography.BCRYPT_TABLE */
  dwFlags: BCRYPT_TABLE;
  /** u32 */
  cFunctions: number;
  /** ptr */
  rgpszFunctions: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_INTERFACE_REG = 24;

export function allocCRYPT_INTERFACE_REG(data?: Partial<CRYPT_INTERFACE_REG>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_INTERFACE_REG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwInterface !== undefined) view.setUint32(0, Number(data.dwInterface), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.cFunctions !== undefined) view.setUint32(8, Number(data.cFunctions), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgpszFunctions !== undefined) view.setBigUint64(16, data.rgpszFunctions === null ? 0n : BigInt(util.toPointer(data.rgpszFunctions)), true);
  return buf;
}

export class CRYPT_INTERFACE_REGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwInterface(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cFunctions(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgpszFunctions(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwInterface(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cFunctions(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgpszFunctions(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_IMAGE_REG (size: 24)
 */
export interface CRYPT_IMAGE_REG {
  /** Windows.Win32.Foundation.PWSTR */
  pszImage: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cInterfaces: number;
  /** ptr */
  rgpInterfaces: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_IMAGE_REG = 24;

export function allocCRYPT_IMAGE_REG(data?: Partial<CRYPT_IMAGE_REG>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_IMAGE_REG);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszImage !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszImage);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.cInterfaces !== undefined) view.setUint32(8, Number(data.cInterfaces), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgpInterfaces !== undefined) view.setBigUint64(16, data.rgpInterfaces === null ? 0n : BigInt(util.toPointer(data.rgpInterfaces)), true);
  return buf;
}

export class CRYPT_IMAGE_REGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszImage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cInterfaces(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgpInterfaces(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszImage(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set cInterfaces(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgpInterfaces(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_PROVIDER_REG (size: 32)
 */
export interface CRYPT_PROVIDER_REG {
  /** u32 */
  cAliases: number;
  /** ptr */
  rgpszAliases: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pUM: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pKM: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_REG = 32;

export function allocCRYPT_PROVIDER_REG(data?: Partial<CRYPT_PROVIDER_REG>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_REG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cAliases !== undefined) view.setUint32(0, Number(data.cAliases), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgpszAliases !== undefined) view.setBigUint64(8, data.rgpszAliases === null ? 0n : BigInt(util.toPointer(data.rgpszAliases)), true);
  // 0x10: pointer
  if (data?.pUM !== undefined) view.setBigUint64(16, data.pUM === null ? 0n : BigInt(util.toPointer(data.pUM)), true);
  // 0x18: pointer
  if (data?.pKM !== undefined) view.setBigUint64(24, data.pKM === null ? 0n : BigInt(util.toPointer(data.pKM)), true);
  return buf;
}

export class CRYPT_PROVIDER_REGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cAliases(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgpszAliases(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pUM(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pKM(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cAliases(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgpszAliases(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pUM(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pKM(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_PROVIDERS (size: 16)
 */
export interface CRYPT_PROVIDERS {
  /** u32 */
  cProviders: number;
  /** ptr */
  rgpszProviders: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDERS = 16;

export function allocCRYPT_PROVIDERS(data?: Partial<CRYPT_PROVIDERS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cProviders !== undefined) view.setUint32(0, Number(data.cProviders), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgpszProviders !== undefined) view.setBigUint64(8, data.rgpszProviders === null ? 0n : BigInt(util.toPointer(data.rgpszProviders)), true);
  return buf;
}

export class CRYPT_PROVIDERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cProviders(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgpszProviders(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cProviders(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgpszProviders(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_CONTEXT_CONFIG (size: 8)
 */
export interface CRYPT_CONTEXT_CONFIG {
  /** Windows.Win32.Security.Cryptography.CRYPT_CONTEXT_CONFIG_FLAGS */
  dwFlags: CRYPT_CONTEXT_CONFIG_FLAGS;
  /** u32 */
  dwReserved: number;
}

export const sizeofCRYPT_CONTEXT_CONFIG = 8;

export function allocCRYPT_CONTEXT_CONFIG(data?: Partial<CRYPT_CONTEXT_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_CONTEXT_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  return buf;
}

export class CRYPT_CONTEXT_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwReserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwReserved(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_CONTEXT_FUNCTION_CONFIG (size: 8)
 */
export interface CRYPT_CONTEXT_FUNCTION_CONFIG {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofCRYPT_CONTEXT_FUNCTION_CONFIG = 8;

export function allocCRYPT_CONTEXT_FUNCTION_CONFIG(data?: Partial<CRYPT_CONTEXT_FUNCTION_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_CONTEXT_FUNCTION_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  return buf;
}

export class CRYPT_CONTEXT_FUNCTION_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwReserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwReserved(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_CONTEXTS (size: 16)
 */
export interface CRYPT_CONTEXTS {
  /** u32 */
  cContexts: number;
  /** ptr */
  rgpszContexts: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_CONTEXTS = 16;

export function allocCRYPT_CONTEXTS(data?: Partial<CRYPT_CONTEXTS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_CONTEXTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cContexts !== undefined) view.setUint32(0, Number(data.cContexts), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgpszContexts !== undefined) view.setBigUint64(8, data.rgpszContexts === null ? 0n : BigInt(util.toPointer(data.rgpszContexts)), true);
  return buf;
}

export class CRYPT_CONTEXTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cContexts(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgpszContexts(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cContexts(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgpszContexts(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_CONTEXT_FUNCTIONS (size: 16)
 */
export interface CRYPT_CONTEXT_FUNCTIONS {
  /** u32 */
  cFunctions: number;
  /** ptr */
  rgpszFunctions: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_CONTEXT_FUNCTIONS = 16;

export function allocCRYPT_CONTEXT_FUNCTIONS(data?: Partial<CRYPT_CONTEXT_FUNCTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_CONTEXT_FUNCTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cFunctions !== undefined) view.setUint32(0, Number(data.cFunctions), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgpszFunctions !== undefined) view.setBigUint64(8, data.rgpszFunctions === null ? 0n : BigInt(util.toPointer(data.rgpszFunctions)), true);
  return buf;
}

export class CRYPT_CONTEXT_FUNCTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cFunctions(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgpszFunctions(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cFunctions(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgpszFunctions(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_CONTEXT_FUNCTION_PROVIDERS (size: 16)
 */
export interface CRYPT_CONTEXT_FUNCTION_PROVIDERS {
  /** u32 */
  cProviders: number;
  /** ptr */
  rgpszProviders: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_CONTEXT_FUNCTION_PROVIDERS = 16;

export function allocCRYPT_CONTEXT_FUNCTION_PROVIDERS(data?: Partial<CRYPT_CONTEXT_FUNCTION_PROVIDERS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_CONTEXT_FUNCTION_PROVIDERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cProviders !== undefined) view.setUint32(0, Number(data.cProviders), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgpszProviders !== undefined) view.setBigUint64(8, data.rgpszProviders === null ? 0n : BigInt(util.toPointer(data.rgpszProviders)), true);
  return buf;
}

export class CRYPT_CONTEXT_FUNCTION_PROVIDERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cProviders(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgpszProviders(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cProviders(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgpszProviders(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_PROPERTY_REF (size: 24)
 */
export interface CRYPT_PROPERTY_REF {
  /** Windows.Win32.Foundation.PWSTR */
  pszProperty: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbValue: number;
  /** ptr */
  pbValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROPERTY_REF = 24;

export function allocCRYPT_PROPERTY_REF(data?: Partial<CRYPT_PROPERTY_REF>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROPERTY_REF);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszProperty !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszProperty);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.cbValue !== undefined) view.setUint32(8, Number(data.cbValue), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pbValue !== undefined) view.setBigUint64(16, data.pbValue === null ? 0n : BigInt(util.toPointer(data.pbValue)), true);
  return buf;
}

export class CRYPT_PROPERTY_REFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszProperty(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cbValue(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pbValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszProperty(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set cbValue(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pbValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_IMAGE_REF (size: 16)
 */
export interface CRYPT_IMAGE_REF {
  /** Windows.Win32.Foundation.PWSTR */
  pszImage: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CRYPT_IMAGE_REF_FLAGS */
  dwFlags: CRYPT_IMAGE_REF_FLAGS;
}

export const sizeofCRYPT_IMAGE_REF = 16;

export function allocCRYPT_IMAGE_REF(data?: Partial<CRYPT_IMAGE_REF>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_IMAGE_REF);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszImage !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszImage);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  return buf;
}

export class CRYPT_IMAGE_REFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszImage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set pszImage(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_PROVIDER_REF (size: 56)
 */
export interface CRYPT_PROVIDER_REF {
  /** u32 */
  dwInterface: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszFunction: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszProvider: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cProperties: number;
  /** ptr */
  rgpProperties: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pUM: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pKM: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_REF = 56;

export function allocCRYPT_PROVIDER_REF(data?: Partial<CRYPT_PROVIDER_REF>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_REF);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwInterface !== undefined) view.setUint32(0, Number(data.dwInterface), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszFunction !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszFunction);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszProvider !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszProvider);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.cProperties !== undefined) view.setUint32(24, Number(data.cProperties), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgpProperties !== undefined) view.setBigUint64(32, data.rgpProperties === null ? 0n : BigInt(util.toPointer(data.rgpProperties)), true);
  // 0x28: pointer
  if (data?.pUM !== undefined) view.setBigUint64(40, data.pUM === null ? 0n : BigInt(util.toPointer(data.pUM)), true);
  // 0x30: pointer
  if (data?.pKM !== undefined) view.setBigUint64(48, data.pKM === null ? 0n : BigInt(util.toPointer(data.pKM)), true);
  return buf;
}

export class CRYPT_PROVIDER_REFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwInterface(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszFunction(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszProvider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get cProperties(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgpProperties(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pUM(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pKM(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwInterface(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszFunction(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pszProvider(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u32
  set cProperties(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgpProperties(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pUM(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pKM(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_PROVIDER_REFS (size: 16)
 */
export interface CRYPT_PROVIDER_REFS {
  /** u32 */
  cProviders: number;
  /** ptr */
  rgpProviders: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_REFS = 16;

export function allocCRYPT_PROVIDER_REFS(data?: Partial<CRYPT_PROVIDER_REFS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_REFS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cProviders !== undefined) view.setUint32(0, Number(data.cProviders), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgpProviders !== undefined) view.setBigUint64(8, data.rgpProviders === null ? 0n : BigInt(util.toPointer(data.rgpProviders)), true);
  return buf;
}

export class CRYPT_PROVIDER_REFSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cProviders(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgpProviders(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cProviders(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgpProviders(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_ALLOC_PARA (size: 24)
 */
export interface NCRYPT_ALLOC_PARA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.PFN_NCRYPT_ALLOC */
  pfnAlloc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.PFN_NCRYPT_FREE */
  pfnFree: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNCRYPT_ALLOC_PARA = 24;

export function allocNCRYPT_ALLOC_PARA(data?: Partial<NCRYPT_ALLOC_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_ALLOC_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfnAlloc !== undefined) view.setBigUint64(8, data.pfnAlloc === null ? 0n : BigInt(util.toPointer(data.pfnAlloc)), true);
  // 0x10: pointer
  if (data?.pfnFree !== undefined) view.setBigUint64(16, data.pfnFree === null ? 0n : BigInt(util.toPointer(data.pfnFree)), true);
  return buf;
}

export class NCRYPT_ALLOC_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pfnAlloc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pfnFree(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pfnAlloc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pfnFree(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_CIPHER_PADDING_INFO (size: 40)
 */
export interface NCRYPT_CIPHER_PADDING_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  pbIV: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbIV: number;
  /** ptr */
  pbOtherInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbOtherInfo: number;
}

export const sizeofNCRYPT_CIPHER_PADDING_INFO = 40;

export function allocNCRYPT_CIPHER_PADDING_INFO(data?: Partial<NCRYPT_CIPHER_PADDING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_CIPHER_PADDING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.pbIV !== undefined) view.setBigUint64(8, data.pbIV === null ? 0n : BigInt(util.toPointer(data.pbIV)), true);
  // 0x10: u32
  if (data?.cbIV !== undefined) view.setUint32(16, Number(data.cbIV), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbOtherInfo !== undefined) view.setBigUint64(24, data.pbOtherInfo === null ? 0n : BigInt(util.toPointer(data.pbOtherInfo)), true);
  // 0x20: u32
  if (data?.cbOtherInfo !== undefined) view.setUint32(32, Number(data.cbOtherInfo), true);
  // 0x24: pad4
  return buf;
}

export class NCRYPT_CIPHER_PADDING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbIV(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbIV(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pbOtherInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cbOtherInfo(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbIV(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbIV(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pbOtherInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cbOtherInfo(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_PLATFORM_ATTEST_PADDING_INFO (size: 8)
 */
export interface NCRYPT_PLATFORM_ATTEST_PADDING_INFO {
  /** u32 */
  magic: number;
  /** u32 */
  pcrMask: number;
}

export const sizeofNCRYPT_PLATFORM_ATTEST_PADDING_INFO = 8;

export function allocNCRYPT_PLATFORM_ATTEST_PADDING_INFO(data?: Partial<NCRYPT_PLATFORM_ATTEST_PADDING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_PLATFORM_ATTEST_PADDING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.magic !== undefined) view.setUint32(0, Number(data.magic), true);
  // 0x04: u32
  if (data?.pcrMask !== undefined) view.setUint32(4, Number(data.pcrMask), true);
  return buf;
}

export class NCRYPT_PLATFORM_ATTEST_PADDING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get magic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get pcrMask(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set magic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set pcrMask(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_KEY_ATTEST_PADDING_INFO (size: 40)
 */
export interface NCRYPT_KEY_ATTEST_PADDING_INFO {
  /** u32 */
  magic: number;
  /** ptr */
  pbKeyBlob: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbKeyBlob: number;
  /** ptr */
  pbKeyAuth: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbKeyAuth: number;
}

export const sizeofNCRYPT_KEY_ATTEST_PADDING_INFO = 40;

export function allocNCRYPT_KEY_ATTEST_PADDING_INFO(data?: Partial<NCRYPT_KEY_ATTEST_PADDING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_KEY_ATTEST_PADDING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.magic !== undefined) view.setUint32(0, Number(data.magic), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbKeyBlob !== undefined) view.setBigUint64(8, data.pbKeyBlob === null ? 0n : BigInt(util.toPointer(data.pbKeyBlob)), true);
  // 0x10: u32
  if (data?.cbKeyBlob !== undefined) view.setUint32(16, Number(data.cbKeyBlob), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbKeyAuth !== undefined) view.setBigUint64(24, data.pbKeyAuth === null ? 0n : BigInt(util.toPointer(data.pbKeyAuth)), true);
  // 0x20: u32
  if (data?.cbKeyAuth !== undefined) view.setUint32(32, Number(data.cbKeyAuth), true);
  // 0x24: pad4
  return buf;
}

export class NCRYPT_KEY_ATTEST_PADDING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get magic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbKeyBlob(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbKeyBlob(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pbKeyAuth(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cbKeyAuth(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set magic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbKeyBlob(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbKeyBlob(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pbKeyAuth(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cbKeyAuth(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES (size: 16)
 */
export interface NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  cbPublicKeyBlob: number;
}

export const sizeofNCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES = 16;

export function allocNCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES(data?: Partial<NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.cbPublicKeyBlob !== undefined) view.setUint32(8, Number(data.cbPublicKeyBlob), true);
  // 0x0c: pad4
  return buf;
}

export class NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbPublicKeyBlob(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbPublicKeyBlob(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_VSM_KEY_ATTESTATION_STATEMENT (size: 24)
 */
export interface NCRYPT_VSM_KEY_ATTESTATION_STATEMENT {
  /** u32 */
  Magic: number;
  /** u32 */
  Version: number;
  /** u32 */
  cbSignature: number;
  /** u32 */
  cbReport: number;
  /** u32 */
  cbAttributes: number;
}

export const sizeofNCRYPT_VSM_KEY_ATTESTATION_STATEMENT = 24;

export function allocNCRYPT_VSM_KEY_ATTESTATION_STATEMENT(data?: Partial<NCRYPT_VSM_KEY_ATTESTATION_STATEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_VSM_KEY_ATTESTATION_STATEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Magic !== undefined) view.setUint32(0, Number(data.Magic), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.cbSignature !== undefined) view.setUint32(8, Number(data.cbSignature), true);
  // 0x0c: u32
  if (data?.cbReport !== undefined) view.setUint32(12, Number(data.cbReport), true);
  // 0x10: u32
  if (data?.cbAttributes !== undefined) view.setUint32(16, Number(data.cbAttributes), true);
  // 0x14: pad4
  return buf;
}

export class NCRYPT_VSM_KEY_ATTESTATION_STATEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Magic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbSignature(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbReport(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbAttributes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set Magic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbSignature(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbReport(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbAttributes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS (size: 32)
 */
export interface NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS {
  /** u32 */
  Version: number;
  /** u64 */
  TrustletId: Deno.PointerValue;
  /** u32 */
  MinSvn: number;
  /** u32 */
  FlagsMask: number;
  /** u32 */
  FlagsExpected: number;
  /** u32 */
  _bitfield: number;
}

export const sizeofNCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = 32;

export function allocNCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS(data?: Partial<NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.TrustletId !== undefined) view.setBigUint64(8, BigInt(data.TrustletId), true);
  // 0x10: u32
  if (data?.MinSvn !== undefined) view.setUint32(16, Number(data.MinSvn), true);
  // 0x14: u32
  if (data?.FlagsMask !== undefined) view.setUint32(20, Number(data.FlagsMask), true);
  // 0x18: u32
  if (data?.FlagsExpected !== undefined) view.setUint32(24, Number(data.FlagsExpected), true);
  // 0x1c: u32
  if (data?._bitfield !== undefined) view.setUint32(28, Number(data._bitfield), true);
  return buf;
}

export class NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get TrustletId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get MinSvn(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get FlagsMask(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get FlagsExpected(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get _bitfield(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set TrustletId(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set MinSvn(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set FlagsMask(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set FlagsExpected(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set _bitfield(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_EXPORTED_ISOLATED_KEY_HEADER (size: 32)
 */
export interface NCRYPT_EXPORTED_ISOLATED_KEY_HEADER {
  /** u32 */
  Version: number;
  /** u32 */
  KeyUsage: number;
  /** u32 */
  _bitfield: number;
  /** u32 */
  cbAlgName: number;
  /** u32 */
  cbNonce: number;
  /** u32 */
  cbAuthTag: number;
  /** u32 */
  cbWrappingKey: number;
  /** u32 */
  cbIsolatedKey: number;
}

export const sizeofNCRYPT_EXPORTED_ISOLATED_KEY_HEADER = 32;

export function allocNCRYPT_EXPORTED_ISOLATED_KEY_HEADER(data?: Partial<NCRYPT_EXPORTED_ISOLATED_KEY_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_EXPORTED_ISOLATED_KEY_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.KeyUsage !== undefined) view.setUint32(4, Number(data.KeyUsage), true);
  // 0x08: u32
  if (data?._bitfield !== undefined) view.setUint32(8, Number(data._bitfield), true);
  // 0x0c: u32
  if (data?.cbAlgName !== undefined) view.setUint32(12, Number(data.cbAlgName), true);
  // 0x10: u32
  if (data?.cbNonce !== undefined) view.setUint32(16, Number(data.cbNonce), true);
  // 0x14: u32
  if (data?.cbAuthTag !== undefined) view.setUint32(20, Number(data.cbAuthTag), true);
  // 0x18: u32
  if (data?.cbWrappingKey !== undefined) view.setUint32(24, Number(data.cbWrappingKey), true);
  // 0x1c: u32
  if (data?.cbIsolatedKey !== undefined) view.setUint32(28, Number(data.cbIsolatedKey), true);
  return buf;
}

export class NCRYPT_EXPORTED_ISOLATED_KEY_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get KeyUsage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get _bitfield(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbAlgName(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbNonce(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbAuthTag(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cbWrappingKey(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get cbIsolatedKey(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set KeyUsage(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set _bitfield(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbAlgName(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbNonce(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbAuthTag(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cbWrappingKey(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set cbIsolatedKey(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE (size: 8)
 */
export interface NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE {
  /** Windows.Win32.Security.Cryptography.NCRYPT_EXPORTED_ISOLATED_KEY_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE = 8;

export function allocNCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE(data?: Partial<NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  return buf;
}

export class NCRYPT_EXPORTED_ISOLATED_KEY_ENVELOPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT (size: 24)
 */
export interface NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT {
  /** u32 */
  Magic: number;
  /** u32 */
  Version: number;
  /** u32 */
  HeaderSize: number;
  /** u32 */
  cbCertifyInfo: number;
  /** u32 */
  cbSignature: number;
  /** u32 */
  cbTpmPublic: number;
}

export const sizeofNCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT = 24;

export function allocNCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT(data?: Partial<NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Magic !== undefined) view.setUint32(0, Number(data.Magic), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.HeaderSize !== undefined) view.setUint32(8, Number(data.HeaderSize), true);
  // 0x0c: u32
  if (data?.cbCertifyInfo !== undefined) view.setUint32(12, Number(data.cbCertifyInfo), true);
  // 0x10: u32
  if (data?.cbSignature !== undefined) view.setUint32(16, Number(data.cbSignature), true);
  // 0x14: u32
  if (data?.cbTpmPublic !== undefined) view.setUint32(20, Number(data.cbTpmPublic), true);
  return buf;
}

export class NCRYPT_PCP_TPM_WEB_AUTHN_ATTESTATION_STATEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Magic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get HeaderSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbCertifyInfo(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbSignature(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbTpmPublic(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Magic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set HeaderSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbCertifyInfo(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbSignature(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbTpmPublic(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT (size: 24)
 */
export interface NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT {
  /** u32 */
  Magic: number;
  /** u32 */
  Version: number;
  /** u32 */
  pcrAlg: number;
  /** u32 */
  cbSignature: number;
  /** u32 */
  cbQuote: number;
  /** u32 */
  cbPcrs: number;
}

export const sizeofNCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT = 24;

export function allocNCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT(data?: Partial<NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Magic !== undefined) view.setUint32(0, Number(data.Magic), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: u32
  if (data?.pcrAlg !== undefined) view.setUint32(8, Number(data.pcrAlg), true);
  // 0x0c: u32
  if (data?.cbSignature !== undefined) view.setUint32(12, Number(data.cbSignature), true);
  // 0x10: u32
  if (data?.cbQuote !== undefined) view.setUint32(16, Number(data.cbQuote), true);
  // 0x14: u32
  if (data?.cbPcrs !== undefined) view.setUint32(20, Number(data.cbPcrs), true);
  return buf;
}

export class NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Magic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Version(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get pcrAlg(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbSignature(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbQuote(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get cbPcrs(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set Magic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Version(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set pcrAlg(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbSignature(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbQuote(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set cbPcrs(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCryptAlgorithmName (size: 24)
 */
export interface NCryptAlgorithmName {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.NCRYPT_ALGORITHM_NAME_CLASS */
  dwClass: NCRYPT_ALGORITHM_NAME_CLASS;
  /** Windows.Win32.Security.Cryptography.NCRYPT_OPERATION */
  dwAlgOperations: NCRYPT_OPERATION;
  /** u32 */
  dwFlags: number;
}

export const sizeofNCryptAlgorithmName = 24;

export function allocNCryptAlgorithmName(data?: Partial<NCryptAlgorithmName>): Uint8Array {
  const buf = new Uint8Array(sizeofNCryptAlgorithmName);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwClass !== undefined) view.setUint32(8, Number(data.dwClass), true);
  // 0x0c: u32
  if (data?.dwAlgOperations !== undefined) view.setUint32(12, Number(data.dwAlgOperations), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  return buf;
}

export class NCryptAlgorithmNameView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwClass(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwAlgOperations(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set pszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set dwClass(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwAlgOperations(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.NCryptKeyName (size: 24)
 */
export interface NCryptKeyName {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszAlgid: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CERT_KEY_SPEC */
  dwLegacyKeySpec: CERT_KEY_SPEC;
  /** u32 */
  dwFlags: number;
}

export const sizeofNCryptKeyName = 24;

export function allocNCryptKeyName(data?: Partial<NCryptKeyName>): Uint8Array {
  const buf = new Uint8Array(sizeofNCryptKeyName);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszAlgid !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszAlgid);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwLegacyKeySpec !== undefined) view.setUint32(16, Number(data.dwLegacyKeySpec), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  return buf;
}

export class NCryptKeyNameView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pszAlgid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwLegacyKeySpec(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: buffer
  set pszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pszAlgid(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set dwLegacyKeySpec(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFlags(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCryptProviderName (size: 16)
 */
export interface NCryptProviderName {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszComment: string | null | Uint8Array | Uint16Array;
}

export const sizeofNCryptProviderName = 16;

export function allocNCryptProviderName(data?: Partial<NCryptProviderName>): Uint8Array {
  const buf = new Uint8Array(sizeofNCryptProviderName);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszComment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszComment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class NCryptProviderNameView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pszComment(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pszComment(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_UI_POLICY (size: 32)
 */
export interface NCRYPT_UI_POLICY {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszCreationTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszFriendlyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszDescription: string | null | Uint8Array | Uint16Array;
}

export const sizeofNCRYPT_UI_POLICY = 32;

export function allocNCRYPT_UI_POLICY(data?: Partial<NCRYPT_UI_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_UI_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: buffer
  if (data?.pszCreationTitle !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszCreationTitle);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszFriendlyName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszFriendlyName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszDescription !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszDescription);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export class NCRYPT_UI_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pszCreationTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszFriendlyName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pszDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pszCreationTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pszFriendlyName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pszDescription(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_KEY_ACCESS_POLICY_BLOB (size: 16)
 */
export interface NCRYPT_KEY_ACCESS_POLICY_BLOB {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwPolicyFlags: number;
  /** u32 */
  cbUserSid: number;
  /** u32 */
  cbApplicationSid: number;
}

export const sizeofNCRYPT_KEY_ACCESS_POLICY_BLOB = 16;

export function allocNCRYPT_KEY_ACCESS_POLICY_BLOB(data?: Partial<NCRYPT_KEY_ACCESS_POLICY_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_KEY_ACCESS_POLICY_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwPolicyFlags !== undefined) view.setUint32(4, Number(data.dwPolicyFlags), true);
  // 0x08: u32
  if (data?.cbUserSid !== undefined) view.setUint32(8, Number(data.cbUserSid), true);
  // 0x0c: u32
  if (data?.cbApplicationSid !== undefined) view.setUint32(12, Number(data.cbApplicationSid), true);
  return buf;
}

export class NCRYPT_KEY_ACCESS_POLICY_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPolicyFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbUserSid(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbApplicationSid(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPolicyFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbUserSid(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbApplicationSid(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_SUPPORTED_LENGTHS (size: 16)
 */
export interface NCRYPT_SUPPORTED_LENGTHS {
  /** u32 */
  dwMinLength: number;
  /** u32 */
  dwMaxLength: number;
  /** u32 */
  dwIncrement: number;
  /** u32 */
  dwDefaultLength: number;
}

export const sizeofNCRYPT_SUPPORTED_LENGTHS = 16;

export function allocNCRYPT_SUPPORTED_LENGTHS(data?: Partial<NCRYPT_SUPPORTED_LENGTHS>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_SUPPORTED_LENGTHS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMinLength !== undefined) view.setUint32(0, Number(data.dwMinLength), true);
  // 0x04: u32
  if (data?.dwMaxLength !== undefined) view.setUint32(4, Number(data.dwMaxLength), true);
  // 0x08: u32
  if (data?.dwIncrement !== undefined) view.setUint32(8, Number(data.dwIncrement), true);
  // 0x0c: u32
  if (data?.dwDefaultLength !== undefined) view.setUint32(12, Number(data.dwDefaultLength), true);
  return buf;
}

export class NCRYPT_SUPPORTED_LENGTHSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMinLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMaxLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwIncrement(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwDefaultLength(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwMinLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMaxLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwIncrement(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwDefaultLength(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO (size: 32)
 */
export interface NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO {
  /** u32 */
  dwVersion: number;
  /** i32 */
  iExpiration: number;
  /** array */
  pabNonce: Deno.PointerValue | null;
  /** array */
  pabPolicyRef: Deno.PointerValue | null;
  /** array */
  pabHMAC: Deno.PointerValue | null;
}

export const sizeofNCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO = 32;

export function allocNCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO(data?: Partial<NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: i32
  if (data?.iExpiration !== undefined) view.setInt32(4, Number(data.iExpiration), true);
  // 0x08: pointer
  if (data?.pabNonce !== undefined) view.setBigUint64(8, data.pabNonce === null ? 0n : BigInt(util.toPointer(data.pabNonce)), true);
  // 0x10: pointer
  if (data?.pabPolicyRef !== undefined) view.setBigUint64(16, data.pabPolicyRef === null ? 0n : BigInt(util.toPointer(data.pabPolicyRef)), true);
  // 0x18: pointer
  if (data?.pabHMAC !== undefined) view.setBigUint64(24, data.pabHMAC === null ? 0n : BigInt(util.toPointer(data.pabHMAC)), true);
  return buf;
}

export class NCRYPT_PCP_HMAC_AUTH_SIGNATURE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get iExpiration(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pabNonce(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pabPolicyRef(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pabHMAC(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set iExpiration(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pabNonce(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pabPolicyRef(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pabHMAC(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_PCP_TPM_FW_VERSION_INFO (size: 8)
 */
export interface NCRYPT_PCP_TPM_FW_VERSION_INFO {
  /** u16 */
  major1: number;
  /** u16 */
  major2: number;
  /** u16 */
  minor1: number;
  /** u16 */
  minor2: number;
}

export const sizeofNCRYPT_PCP_TPM_FW_VERSION_INFO = 8;

export function allocNCRYPT_PCP_TPM_FW_VERSION_INFO(data?: Partial<NCRYPT_PCP_TPM_FW_VERSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_PCP_TPM_FW_VERSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.major1 !== undefined) view.setUint16(0, Number(data.major1), true);
  // 0x02: u16
  if (data?.major2 !== undefined) view.setUint16(2, Number(data.major2), true);
  // 0x04: u16
  if (data?.minor1 !== undefined) view.setUint16(4, Number(data.minor1), true);
  // 0x06: u16
  if (data?.minor2 !== undefined) view.setUint16(6, Number(data.minor2), true);
  return buf;
}

export class NCRYPT_PCP_TPM_FW_VERSION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get major1(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get major2(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get minor1(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get minor2(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u16
  set major1(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set major2(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set minor1(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set minor2(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_PCP_RAW_POLICYDIGEST_INFO (size: 8)
 */
export interface NCRYPT_PCP_RAW_POLICYDIGEST_INFO {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbDigest: number;
}

export const sizeofNCRYPT_PCP_RAW_POLICYDIGEST_INFO = 8;

export function allocNCRYPT_PCP_RAW_POLICYDIGEST_INFO(data?: Partial<NCRYPT_PCP_RAW_POLICYDIGEST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_PCP_RAW_POLICYDIGEST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbDigest !== undefined) view.setUint32(4, Number(data.cbDigest), true);
  return buf;
}

export class NCRYPT_PCP_RAW_POLICYDIGEST_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbDigest(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbDigest(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_KEY_BLOB_HEADER (size: 16)
 */
export interface NCRYPT_KEY_BLOB_HEADER {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMagic: number;
  /** u32 */
  cbAlgName: number;
  /** u32 */
  cbKeyData: number;
}

export const sizeofNCRYPT_KEY_BLOB_HEADER = 16;

export function allocNCRYPT_KEY_BLOB_HEADER(data?: Partial<NCRYPT_KEY_BLOB_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_KEY_BLOB_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMagic !== undefined) view.setUint32(4, Number(data.dwMagic), true);
  // 0x08: u32
  if (data?.cbAlgName !== undefined) view.setUint32(8, Number(data.cbAlgName), true);
  // 0x0c: u32
  if (data?.cbKeyData !== undefined) view.setUint32(12, Number(data.cbKeyData), true);
  return buf;
}

export class NCRYPT_KEY_BLOB_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMagic(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbAlgName(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbKeyData(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMagic(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbAlgName(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbKeyData(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER (size: 24)
 */
export interface NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER {
  /** u32 */
  magic: number;
  /** u32 */
  cbHeader: number;
  /** u32 */
  cbPublic: number;
  /** u32 */
  cbPrivate: number;
  /** u32 */
  cbName: number;
}

export const sizeofNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER = 24;

export function allocNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER(data?: Partial<NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_TPM_LOADABLE_KEY_BLOB_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.magic !== undefined) view.setUint32(0, Number(data.magic), true);
  // 0x04: u32
  if (data?.cbHeader !== undefined) view.setUint32(4, Number(data.cbHeader), true);
  // 0x08: u32
  if (data?.cbPublic !== undefined) view.setUint32(8, Number(data.cbPublic), true);
  // 0x0c: u32
  if (data?.cbPrivate !== undefined) view.setUint32(12, Number(data.cbPrivate), true);
  // 0x10: u32
  if (data?.cbName !== undefined) view.setUint32(16, Number(data.cbName), true);
  // 0x14: pad4
  return buf;
}

export class NCRYPT_TPM_LOADABLE_KEY_BLOB_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get magic(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbHeader(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbPublic(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cbPrivate(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbName(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set magic(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbHeader(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbPublic(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cbPrivate(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbName(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB (size: 24)
 */
export interface CRYPT_BIT_BLOB {
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cUnusedBits: number;
}

export const sizeofCRYPT_BIT_BLOB = 24;

export function allocCRYPT_BIT_BLOB(data?: Partial<CRYPT_BIT_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_BIT_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbData !== undefined) view.setBigUint64(8, data.pbData === null ? 0n : BigInt(util.toPointer(data.pbData)), true);
  // 0x10: u32
  if (data?.cUnusedBits !== undefined) view.setUint32(16, Number(data.cUnusedBits), true);
  // 0x14: pad4
  return buf;
}

export class CRYPT_BIT_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbData(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cUnusedBits(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set cbData(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cUnusedBits(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER (size: 16)
 */
export interface CRYPT_ALGORITHM_IDENTIFIER {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_ALGORITHM_IDENTIFIER = 16;

export function allocCRYPT_ALGORITHM_IDENTIFIER(data?: Partial<CRYPT_ALGORITHM_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ALGORITHM_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class CRYPT_ALGORITHM_IDENTIFIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_OBJID_TABLE (size: 16)
 */
export interface CRYPT_OBJID_TABLE {
  /** u32 */
  dwAlgId: number;
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
}

export const sizeofCRYPT_OBJID_TABLE = 16;

export function allocCRYPT_OBJID_TABLE(data?: Partial<CRYPT_OBJID_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_OBJID_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlgId !== undefined) view.setUint32(0, Number(data.dwAlgId), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class CRYPT_OBJID_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAlgId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwAlgId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_HASH_INFO (size: 16)
 */
export interface CRYPT_HASH_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Hash: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_HASH_INFO = 16;

export function allocCRYPT_HASH_INFO(data?: Partial<CRYPT_HASH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_HASH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(0, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x08: pointer
  if (data?.Hash !== undefined) view.setBigUint64(8, data.Hash === null ? 0n : BigInt(util.toPointer(data.Hash)), true);
  return buf;
}

export class CRYPT_HASH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Hash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Hash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_EXTENSION (size: 24)
 */
export interface CERT_EXTENSION {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  fCritical: boolean;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_EXTENSION = 24;

export function allocCERT_EXTENSION(data?: Partial<CERT_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.fCritical !== undefined) view.setInt32(8, Number(data.fCritical), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Value !== undefined) view.setBigUint64(16, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class CERT_EXTENSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get fCritical(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: i32
  set fCritical(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTE_TYPE_VALUE (size: 16)
 */
export interface CRYPT_ATTRIBUTE_TYPE_VALUE {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_ATTRIBUTE_TYPE_VALUE = 16;

export function allocCRYPT_ATTRIBUTE_TYPE_VALUE(data?: Partial<CRYPT_ATTRIBUTE_TYPE_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ATTRIBUTE_TYPE_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class CRYPT_ATTRIBUTE_TYPE_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTE (size: 24)
 */
export interface CRYPT_ATTRIBUTE {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** u32 */
  cValue: number;
  /** ptr */
  rgValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_ATTRIBUTE = 24;

export function allocCRYPT_ATTRIBUTE(data?: Partial<CRYPT_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.cValue !== undefined) view.setUint32(8, Number(data.cValue), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgValue !== undefined) view.setBigUint64(16, data.rgValue === null ? 0n : BigInt(util.toPointer(data.rgValue)), true);
  return buf;
}

export class CRYPT_ATTRIBUTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cValue(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set cValue(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTES (size: 16)
 */
export interface CRYPT_ATTRIBUTES {
  /** u32 */
  cAttr: number;
  /** ptr */
  rgAttr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_ATTRIBUTES = 16;

export function allocCRYPT_ATTRIBUTES(data?: Partial<CRYPT_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cAttr !== undefined) view.setUint32(0, Number(data.cAttr), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgAttr !== undefined) view.setBigUint64(8, data.rgAttr === null ? 0n : BigInt(util.toPointer(data.rgAttr)), true);
  return buf;
}

export class CRYPT_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cAttr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgAttr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cAttr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgAttr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_RDN_ATTR (size: 24)
 */
export interface CERT_RDN_ATTR {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CERT_RDN_ATTR_VALUE_TYPE */
  dwValueType: CERT_RDN_ATTR_VALUE_TYPE;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_RDN_ATTR = 24;

export function allocCERT_RDN_ATTR(data?: Partial<CERT_RDN_ATTR>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_RDN_ATTR);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwValueType !== undefined) view.setUint32(8, Number(data.dwValueType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Value !== undefined) view.setBigUint64(16, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class CERT_RDN_ATTRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwValueType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set dwValueType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_RDN (size: 16)
 */
export interface CERT_RDN {
  /** u32 */
  cRDNAttr: number;
  /** ptr */
  rgRDNAttr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_RDN = 16;

export function allocCERT_RDN(data?: Partial<CERT_RDN>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_RDN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cRDNAttr !== undefined) view.setUint32(0, Number(data.cRDNAttr), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgRDNAttr !== undefined) view.setBigUint64(8, data.rgRDNAttr === null ? 0n : BigInt(util.toPointer(data.rgRDNAttr)), true);
  return buf;
}

export class CERT_RDNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cRDNAttr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgRDNAttr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cRDNAttr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgRDNAttr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_NAME_INFO (size: 16)
 */
export interface CERT_NAME_INFO {
  /** u32 */
  cRDN: number;
  /** ptr */
  rgRDN: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_NAME_INFO = 16;

export function allocCERT_NAME_INFO(data?: Partial<CERT_NAME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_NAME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cRDN !== undefined) view.setUint32(0, Number(data.cRDN), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgRDN !== undefined) view.setBigUint64(8, data.rgRDN === null ? 0n : BigInt(util.toPointer(data.rgRDN)), true);
  return buf;
}

export class CERT_NAME_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cRDN(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgRDN(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cRDN(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgRDN(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_NAME_VALUE (size: 16)
 */
export interface CERT_NAME_VALUE {
  /** u32 */
  dwValueType: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_NAME_VALUE = 16;

export function allocCERT_NAME_VALUE(data?: Partial<CERT_NAME_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_NAME_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValueType !== undefined) view.setUint32(0, Number(data.dwValueType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class CERT_NAME_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValueType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwValueType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_PUBLIC_KEY_INFO (size: 16)
 */
export interface CERT_PUBLIC_KEY_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  Algorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  PublicKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_PUBLIC_KEY_INFO = 16;

export function allocCERT_PUBLIC_KEY_INFO(data?: Partial<CERT_PUBLIC_KEY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_PUBLIC_KEY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Algorithm !== undefined) view.setBigUint64(0, data.Algorithm === null ? 0n : BigInt(util.toPointer(data.Algorithm)), true);
  // 0x08: pointer
  if (data?.PublicKey !== undefined) view.setBigUint64(8, data.PublicKey === null ? 0n : BigInt(util.toPointer(data.PublicKey)), true);
  return buf;
}

export class CERT_PUBLIC_KEY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Algorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PublicKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Algorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PublicKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ECC_PRIVATE_KEY_INFO (size: 32)
 */
export interface CRYPT_ECC_PRIVATE_KEY_INFO {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  PrivateKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  szCurveOid: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  PublicKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_ECC_PRIVATE_KEY_INFO = 32;

export function allocCRYPT_ECC_PRIVATE_KEY_INFO(data?: Partial<CRYPT_ECC_PRIVATE_KEY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ECC_PRIVATE_KEY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PrivateKey !== undefined) view.setBigUint64(8, data.PrivateKey === null ? 0n : BigInt(util.toPointer(data.PrivateKey)), true);
  // 0x10: buffer
  if (data?.szCurveOid !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.szCurveOid);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.PublicKey !== undefined) view.setBigUint64(24, data.PublicKey === null ? 0n : BigInt(util.toPointer(data.PublicKey)), true);
  return buf;
}

export class CRYPT_ECC_PRIVATE_KEY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get PrivateKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get szCurveOid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get PublicKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set PrivateKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set szCurveOid(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: pointer
  set PublicKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_PRIVATE_KEY_INFO (size: 32)
 */
export interface CRYPT_PRIVATE_KEY_INFO {
  /** u32 */
  Version: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  Algorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  PrivateKey: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pAttributes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PRIVATE_KEY_INFO = 32;

export function allocCRYPT_PRIVATE_KEY_INFO(data?: Partial<CRYPT_PRIVATE_KEY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PRIVATE_KEY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Algorithm !== undefined) view.setBigUint64(8, data.Algorithm === null ? 0n : BigInt(util.toPointer(data.Algorithm)), true);
  // 0x10: pointer
  if (data?.PrivateKey !== undefined) view.setBigUint64(16, data.PrivateKey === null ? 0n : BigInt(util.toPointer(data.PrivateKey)), true);
  // 0x18: pointer
  if (data?.pAttributes !== undefined) view.setBigUint64(24, data.pAttributes === null ? 0n : BigInt(util.toPointer(data.pAttributes)), true);
  return buf;
}

export class CRYPT_PRIVATE_KEY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Algorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get PrivateKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Algorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set PrivateKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ENCRYPTED_PRIVATE_KEY_INFO (size: 16)
 */
export interface CRYPT_ENCRYPTED_PRIVATE_KEY_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  EncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EncryptedPrivateKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_ENCRYPTED_PRIVATE_KEY_INFO = 16;

export function allocCRYPT_ENCRYPTED_PRIVATE_KEY_INFO(data?: Partial<CRYPT_ENCRYPTED_PRIVATE_KEY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ENCRYPTED_PRIVATE_KEY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.EncryptionAlgorithm !== undefined) view.setBigUint64(0, data.EncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.EncryptionAlgorithm)), true);
  // 0x08: pointer
  if (data?.EncryptedPrivateKey !== undefined) view.setBigUint64(8, data.EncryptedPrivateKey === null ? 0n : BigInt(util.toPointer(data.EncryptedPrivateKey)), true);
  return buf;
}

export class CRYPT_ENCRYPTED_PRIVATE_KEY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get EncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get EncryptedPrivateKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set EncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set EncryptedPrivateKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_PKCS8_IMPORT_PARAMS (size: 40)
 */
export interface CRYPT_PKCS8_IMPORT_PARAMS {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  PrivateKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.PCRYPT_RESOLVE_HCRYPTPROV_FUNC */
  pResolvehCryptProvFunc: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pVoidResolveFunc: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.PCRYPT_DECRYPT_PRIVATE_KEY_FUNC */
  pDecryptPrivateKeyFunc: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pVoidDecryptFunc: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PKCS8_IMPORT_PARAMS = 40;

export function allocCRYPT_PKCS8_IMPORT_PARAMS(data?: Partial<CRYPT_PKCS8_IMPORT_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PKCS8_IMPORT_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PrivateKey !== undefined) view.setBigUint64(0, data.PrivateKey === null ? 0n : BigInt(util.toPointer(data.PrivateKey)), true);
  // 0x08: pointer
  if (data?.pResolvehCryptProvFunc !== undefined) view.setBigUint64(8, data.pResolvehCryptProvFunc === null ? 0n : BigInt(util.toPointer(data.pResolvehCryptProvFunc)), true);
  // 0x10: pointer
  if (data?.pVoidResolveFunc !== undefined) view.setBigUint64(16, data.pVoidResolveFunc === null ? 0n : BigInt(util.toPointer(data.pVoidResolveFunc)), true);
  // 0x18: pointer
  if (data?.pDecryptPrivateKeyFunc !== undefined) view.setBigUint64(24, data.pDecryptPrivateKeyFunc === null ? 0n : BigInt(util.toPointer(data.pDecryptPrivateKeyFunc)), true);
  // 0x20: pointer
  if (data?.pVoidDecryptFunc !== undefined) view.setBigUint64(32, data.pVoidDecryptFunc === null ? 0n : BigInt(util.toPointer(data.pVoidDecryptFunc)), true);
  return buf;
}

export class CRYPT_PKCS8_IMPORT_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PrivateKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pResolvehCryptProvFunc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pVoidResolveFunc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pDecryptPrivateKeyFunc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pVoidDecryptFunc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set PrivateKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pResolvehCryptProvFunc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pVoidResolveFunc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pDecryptPrivateKeyFunc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pVoidDecryptFunc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_PKCS8_EXPORT_PARAMS (size: 40)
 */
export interface CRYPT_PKCS8_EXPORT_PARAMS {
  /** usize */
  hCryptProv: Deno.PointerValue;
  /** u32 */
  dwKeySpec: number;
  /** Windows.Win32.Foundation.PSTR */
  pszPrivateKeyObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC */
  pEncryptPrivateKeyFunc: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pVoidEncryptFunc: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PKCS8_EXPORT_PARAMS = 40;

export function allocCRYPT_PKCS8_EXPORT_PARAMS(data?: Partial<CRYPT_PKCS8_EXPORT_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PKCS8_EXPORT_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.hCryptProv !== undefined) view.setBigUint64(0, BigInt(data.hCryptProv), true);
  // 0x08: u32
  if (data?.dwKeySpec !== undefined) view.setUint32(8, Number(data.dwKeySpec), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pszPrivateKeyObjId !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszPrivateKeyObjId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.pEncryptPrivateKeyFunc !== undefined) view.setBigUint64(24, data.pEncryptPrivateKeyFunc === null ? 0n : BigInt(util.toPointer(data.pEncryptPrivateKeyFunc)), true);
  // 0x20: pointer
  if (data?.pVoidEncryptFunc !== undefined) view.setBigUint64(32, data.pVoidEncryptFunc === null ? 0n : BigInt(util.toPointer(data.pVoidEncryptFunc)), true);
  return buf;
}

export class CRYPT_PKCS8_EXPORT_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get hCryptProv(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get dwKeySpec(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pszPrivateKeyObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pEncryptPrivateKeyFunc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pVoidEncryptFunc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: usize
  set hCryptProv(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set dwKeySpec(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pszPrivateKeyObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: pointer
  set pEncryptPrivateKeyFunc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pVoidEncryptFunc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_INFO (size: 96)
 */
export interface CERT_INFO {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SerialNumber: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  SignatureAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Issuer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  NotBefore: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  NotAfter: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Subject: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CERT_PUBLIC_KEY_INFO */
  SubjectPublicKeyInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  IssuerUniqueId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  SubjectUniqueId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cExtension: number;
  /** ptr */
  rgExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_INFO = 96;

export function allocCERT_INFO(data?: Partial<CERT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(8, data.SerialNumber === null ? 0n : BigInt(util.toPointer(data.SerialNumber)), true);
  // 0x10: pointer
  if (data?.SignatureAlgorithm !== undefined) view.setBigUint64(16, data.SignatureAlgorithm === null ? 0n : BigInt(util.toPointer(data.SignatureAlgorithm)), true);
  // 0x18: pointer
  if (data?.Issuer !== undefined) view.setBigUint64(24, data.Issuer === null ? 0n : BigInt(util.toPointer(data.Issuer)), true);
  // 0x20: pointer
  if (data?.NotBefore !== undefined) view.setBigUint64(32, data.NotBefore === null ? 0n : BigInt(util.toPointer(data.NotBefore)), true);
  // 0x28: pointer
  if (data?.NotAfter !== undefined) view.setBigUint64(40, data.NotAfter === null ? 0n : BigInt(util.toPointer(data.NotAfter)), true);
  // 0x30: pointer
  if (data?.Subject !== undefined) view.setBigUint64(48, data.Subject === null ? 0n : BigInt(util.toPointer(data.Subject)), true);
  // 0x38: pointer
  if (data?.SubjectPublicKeyInfo !== undefined) view.setBigUint64(56, data.SubjectPublicKeyInfo === null ? 0n : BigInt(util.toPointer(data.SubjectPublicKeyInfo)), true);
  // 0x40: pointer
  if (data?.IssuerUniqueId !== undefined) view.setBigUint64(64, data.IssuerUniqueId === null ? 0n : BigInt(util.toPointer(data.IssuerUniqueId)), true);
  // 0x48: pointer
  if (data?.SubjectUniqueId !== undefined) view.setBigUint64(72, data.SubjectUniqueId === null ? 0n : BigInt(util.toPointer(data.SubjectUniqueId)), true);
  // 0x50: u32
  if (data?.cExtension !== undefined) view.setUint32(80, Number(data.cExtension), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.rgExtension !== undefined) view.setBigUint64(88, data.rgExtension === null ? 0n : BigInt(util.toPointer(data.rgExtension)), true);
  return buf;
}

export class CERT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get SignatureAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Issuer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get NotBefore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get NotAfter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Subject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get SubjectPublicKeyInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get IssuerUniqueId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get SubjectUniqueId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get cExtension(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get rgExtension(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set SignatureAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Issuer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set NotBefore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set NotAfter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Subject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set SubjectPublicKeyInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set IssuerUniqueId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set SubjectUniqueId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set cExtension(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set rgExtension(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRL_ENTRY (size: 32)
 */
export interface CRL_ENTRY {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SerialNumber: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  RevocationDate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cExtension: number;
  /** ptr */
  rgExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRL_ENTRY = 32;

export function allocCRL_ENTRY(data?: Partial<CRL_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofCRL_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(0, data.SerialNumber === null ? 0n : BigInt(util.toPointer(data.SerialNumber)), true);
  // 0x08: pointer
  if (data?.RevocationDate !== undefined) view.setBigUint64(8, data.RevocationDate === null ? 0n : BigInt(util.toPointer(data.RevocationDate)), true);
  // 0x10: u32
  if (data?.cExtension !== undefined) view.setUint32(16, Number(data.cExtension), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgExtension !== undefined) view.setBigUint64(24, data.rgExtension === null ? 0n : BigInt(util.toPointer(data.rgExtension)), true);
  return buf;
}

export class CRL_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get RevocationDate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cExtension(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgExtension(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set RevocationDate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cExtension(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgExtension(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRL_INFO (size: 72)
 */
export interface CRL_INFO {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  SignatureAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Issuer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ThisUpdate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  NextUpdate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cCRLEntry: number;
  /** ptr */
  rgCRLEntry: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cExtension: number;
  /** ptr */
  rgExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRL_INFO = 72;

export function allocCRL_INFO(data?: Partial<CRL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SignatureAlgorithm !== undefined) view.setBigUint64(8, data.SignatureAlgorithm === null ? 0n : BigInt(util.toPointer(data.SignatureAlgorithm)), true);
  // 0x10: pointer
  if (data?.Issuer !== undefined) view.setBigUint64(16, data.Issuer === null ? 0n : BigInt(util.toPointer(data.Issuer)), true);
  // 0x18: pointer
  if (data?.ThisUpdate !== undefined) view.setBigUint64(24, data.ThisUpdate === null ? 0n : BigInt(util.toPointer(data.ThisUpdate)), true);
  // 0x20: pointer
  if (data?.NextUpdate !== undefined) view.setBigUint64(32, data.NextUpdate === null ? 0n : BigInt(util.toPointer(data.NextUpdate)), true);
  // 0x28: u32
  if (data?.cCRLEntry !== undefined) view.setUint32(40, Number(data.cCRLEntry), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rgCRLEntry !== undefined) view.setBigUint64(48, data.rgCRLEntry === null ? 0n : BigInt(util.toPointer(data.rgCRLEntry)), true);
  // 0x38: u32
  if (data?.cExtension !== undefined) view.setUint32(56, Number(data.cExtension), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.rgExtension !== undefined) view.setBigUint64(64, data.rgExtension === null ? 0n : BigInt(util.toPointer(data.rgExtension)), true);
  return buf;
}

export class CRL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SignatureAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Issuer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ThisUpdate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get NextUpdate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get cCRLEntry(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get rgCRLEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get cExtension(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get rgExtension(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SignatureAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Issuer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ThisUpdate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set NextUpdate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set cCRLEntry(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set rgCRLEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set cExtension(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set rgExtension(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_OR_CRL_BLOB (size: 16)
 */
export interface CERT_OR_CRL_BLOB {
  /** u32 */
  dwChoice: number;
  /** u32 */
  cbEncoded: number;
  /** ptr */
  pbEncoded: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_OR_CRL_BLOB = 16;

export function allocCERT_OR_CRL_BLOB(data?: Partial<CERT_OR_CRL_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_OR_CRL_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwChoice !== undefined) view.setUint32(0, Number(data.dwChoice), true);
  // 0x04: u32
  if (data?.cbEncoded !== undefined) view.setUint32(4, Number(data.cbEncoded), true);
  // 0x08: pointer
  if (data?.pbEncoded !== undefined) view.setBigUint64(8, data.pbEncoded === null ? 0n : BigInt(util.toPointer(data.pbEncoded)), true);
  return buf;
}

export class CERT_OR_CRL_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwChoice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbEncoded(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbEncoded(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwChoice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbEncoded(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbEncoded(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_OR_CRL_BUNDLE (size: 16)
 */
export interface CERT_OR_CRL_BUNDLE {
  /** u32 */
  cItem: number;
  /** ptr */
  rgItem: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_OR_CRL_BUNDLE = 16;

export function allocCERT_OR_CRL_BUNDLE(data?: Partial<CERT_OR_CRL_BUNDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_OR_CRL_BUNDLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cItem !== undefined) view.setUint32(0, Number(data.cItem), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgItem !== undefined) view.setBigUint64(8, data.rgItem === null ? 0n : BigInt(util.toPointer(data.rgItem)), true);
  return buf;
}

export class CERT_OR_CRL_BUNDLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cItem(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgItem(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cItem(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgItem(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_REQUEST_INFO (size: 40)
 */
export interface CERT_REQUEST_INFO {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Subject: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CERT_PUBLIC_KEY_INFO */
  SubjectPublicKeyInfo: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cAttribute: number;
  /** ptr */
  rgAttribute: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_REQUEST_INFO = 40;

export function allocCERT_REQUEST_INFO(data?: Partial<CERT_REQUEST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_REQUEST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Subject !== undefined) view.setBigUint64(8, data.Subject === null ? 0n : BigInt(util.toPointer(data.Subject)), true);
  // 0x10: pointer
  if (data?.SubjectPublicKeyInfo !== undefined) view.setBigUint64(16, data.SubjectPublicKeyInfo === null ? 0n : BigInt(util.toPointer(data.SubjectPublicKeyInfo)), true);
  // 0x18: u32
  if (data?.cAttribute !== undefined) view.setUint32(24, Number(data.cAttribute), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgAttribute !== undefined) view.setBigUint64(32, data.rgAttribute === null ? 0n : BigInt(util.toPointer(data.rgAttribute)), true);
  return buf;
}

export class CERT_REQUEST_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Subject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get SubjectPublicKeyInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get cAttribute(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgAttribute(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Subject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set SubjectPublicKeyInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set cAttribute(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgAttribute(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_KEYGEN_REQUEST_INFO (size: 24)
 */
export interface CERT_KEYGEN_REQUEST_INFO {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Cryptography.CERT_PUBLIC_KEY_INFO */
  SubjectPublicKeyInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszChallengeString: string | null | Uint8Array | Uint16Array;
}

export const sizeofCERT_KEYGEN_REQUEST_INFO = 24;

export function allocCERT_KEYGEN_REQUEST_INFO(data?: Partial<CERT_KEYGEN_REQUEST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_KEYGEN_REQUEST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SubjectPublicKeyInfo !== undefined) view.setBigUint64(8, data.SubjectPublicKeyInfo === null ? 0n : BigInt(util.toPointer(data.SubjectPublicKeyInfo)), true);
  // 0x10: buffer
  if (data?.pwszChallengeString !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszChallengeString);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class CERT_KEYGEN_REQUEST_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SubjectPublicKeyInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszChallengeString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SubjectPublicKeyInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set pwszChallengeString(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_SIGNED_CONTENT_INFO (size: 24)
 */
export interface CERT_SIGNED_CONTENT_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  ToBeSigned: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  SignatureAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  Signature: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_SIGNED_CONTENT_INFO = 24;

export function allocCERT_SIGNED_CONTENT_INFO(data?: Partial<CERT_SIGNED_CONTENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SIGNED_CONTENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ToBeSigned !== undefined) view.setBigUint64(0, data.ToBeSigned === null ? 0n : BigInt(util.toPointer(data.ToBeSigned)), true);
  // 0x08: pointer
  if (data?.SignatureAlgorithm !== undefined) view.setBigUint64(8, data.SignatureAlgorithm === null ? 0n : BigInt(util.toPointer(data.SignatureAlgorithm)), true);
  // 0x10: pointer
  if (data?.Signature !== undefined) view.setBigUint64(16, data.Signature === null ? 0n : BigInt(util.toPointer(data.Signature)), true);
  return buf;
}

export class CERT_SIGNED_CONTENT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ToBeSigned(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SignatureAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Signature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ToBeSigned(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SignatureAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Signature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CTL_USAGE (size: 16)
 */
export interface CTL_USAGE {
  /** u32 */
  cUsageIdentifier: number;
  /** ptr */
  rgpszUsageIdentifier: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCTL_USAGE = 16;

export function allocCTL_USAGE(data?: Partial<CTL_USAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofCTL_USAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cUsageIdentifier !== undefined) view.setUint32(0, Number(data.cUsageIdentifier), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgpszUsageIdentifier !== undefined) view.setBigUint64(8, data.rgpszUsageIdentifier === null ? 0n : BigInt(util.toPointer(data.rgpszUsageIdentifier)), true);
  return buf;
}

export class CTL_USAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cUsageIdentifier(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgpszUsageIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cUsageIdentifier(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgpszUsageIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CTL_ENTRY (size: 24)
 */
export interface CTL_ENTRY {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SubjectIdentifier: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cAttribute: number;
  /** ptr */
  rgAttribute: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCTL_ENTRY = 24;

export function allocCTL_ENTRY(data?: Partial<CTL_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofCTL_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SubjectIdentifier !== undefined) view.setBigUint64(0, data.SubjectIdentifier === null ? 0n : BigInt(util.toPointer(data.SubjectIdentifier)), true);
  // 0x08: u32
  if (data?.cAttribute !== undefined) view.setUint32(8, Number(data.cAttribute), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgAttribute !== undefined) view.setBigUint64(16, data.rgAttribute === null ? 0n : BigInt(util.toPointer(data.rgAttribute)), true);
  return buf;
}

export class CTL_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SubjectIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cAttribute(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgAttribute(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SubjectIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set cAttribute(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgAttribute(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CTL_INFO (size: 88)
 */
export interface CTL_INFO {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Cryptography.CTL_USAGE */
  SubjectUsage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  ListIdentifier: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SequenceNumber: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ThisUpdate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  NextUpdate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  SubjectAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cCTLEntry: number;
  /** ptr */
  rgCTLEntry: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cExtension: number;
  /** ptr */
  rgExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCTL_INFO = 88;

export function allocCTL_INFO(data?: Partial<CTL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCTL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SubjectUsage !== undefined) view.setBigUint64(8, data.SubjectUsage === null ? 0n : BigInt(util.toPointer(data.SubjectUsage)), true);
  // 0x10: pointer
  if (data?.ListIdentifier !== undefined) view.setBigUint64(16, data.ListIdentifier === null ? 0n : BigInt(util.toPointer(data.ListIdentifier)), true);
  // 0x18: pointer
  if (data?.SequenceNumber !== undefined) view.setBigUint64(24, data.SequenceNumber === null ? 0n : BigInt(util.toPointer(data.SequenceNumber)), true);
  // 0x20: pointer
  if (data?.ThisUpdate !== undefined) view.setBigUint64(32, data.ThisUpdate === null ? 0n : BigInt(util.toPointer(data.ThisUpdate)), true);
  // 0x28: pointer
  if (data?.NextUpdate !== undefined) view.setBigUint64(40, data.NextUpdate === null ? 0n : BigInt(util.toPointer(data.NextUpdate)), true);
  // 0x30: pointer
  if (data?.SubjectAlgorithm !== undefined) view.setBigUint64(48, data.SubjectAlgorithm === null ? 0n : BigInt(util.toPointer(data.SubjectAlgorithm)), true);
  // 0x38: u32
  if (data?.cCTLEntry !== undefined) view.setUint32(56, Number(data.cCTLEntry), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.rgCTLEntry !== undefined) view.setBigUint64(64, data.rgCTLEntry === null ? 0n : BigInt(util.toPointer(data.rgCTLEntry)), true);
  // 0x48: u32
  if (data?.cExtension !== undefined) view.setUint32(72, Number(data.cExtension), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.rgExtension !== undefined) view.setBigUint64(80, data.rgExtension === null ? 0n : BigInt(util.toPointer(data.rgExtension)), true);
  return buf;
}

export class CTL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SubjectUsage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ListIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get SequenceNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get ThisUpdate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get NextUpdate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get SubjectAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get cCTLEntry(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get rgCTLEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get cExtension(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get rgExtension(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SubjectUsage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ListIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set SequenceNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set ThisUpdate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set NextUpdate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set SubjectAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set cCTLEntry(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set rgCTLEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set cExtension(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set rgExtension(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_TIME_STAMP_REQUEST_INFO (size: 40)
 */
export interface CRYPT_TIME_STAMP_REQUEST_INFO {
  /** Windows.Win32.Foundation.PSTR */
  pszTimeStampAlgorithm: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszContentType: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Content: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cAttribute: number;
  /** ptr */
  rgAttribute: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_TIME_STAMP_REQUEST_INFO = 40;

export function allocCRYPT_TIME_STAMP_REQUEST_INFO(data?: Partial<CRYPT_TIME_STAMP_REQUEST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_TIME_STAMP_REQUEST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszTimeStampAlgorithm !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszTimeStampAlgorithm);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszContentType !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszContentType);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.Content !== undefined) view.setBigUint64(16, data.Content === null ? 0n : BigInt(util.toPointer(data.Content)), true);
  // 0x18: u32
  if (data?.cAttribute !== undefined) view.setUint32(24, Number(data.cAttribute), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgAttribute !== undefined) view.setBigUint64(32, data.rgAttribute === null ? 0n : BigInt(util.toPointer(data.rgAttribute)), true);
  return buf;
}

export class CRYPT_TIME_STAMP_REQUEST_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszTimeStampAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pszContentType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Content(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get cAttribute(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgAttribute(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszTimeStampAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pszContentType(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set Content(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set cAttribute(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgAttribute(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ENROLLMENT_NAME_VALUE_PAIR (size: 16)
 */
export interface CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszValue: string | null | Uint8Array | Uint16Array;
}

export const sizeofCRYPT_ENROLLMENT_NAME_VALUE_PAIR = 16;

export function allocCRYPT_ENROLLMENT_NAME_VALUE_PAIR(data?: Partial<CRYPT_ENROLLMENT_NAME_VALUE_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ENROLLMENT_NAME_VALUE_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwszValue !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszValue);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class CRYPT_ENROLLMENT_NAME_VALUE_PAIRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pwszValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pwszValue(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_CSP_PROVIDER (size: 24)
 */
export interface CRYPT_CSP_PROVIDER {
  /** u32 */
  dwKeySpec: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszProviderName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  Signature: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_CSP_PROVIDER = 24;

export function allocCRYPT_CSP_PROVIDER(data?: Partial<CRYPT_CSP_PROVIDER>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_CSP_PROVIDER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwKeySpec !== undefined) view.setUint32(0, Number(data.dwKeySpec), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszProviderName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszProviderName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.Signature !== undefined) view.setBigUint64(16, data.Signature === null ? 0n : BigInt(util.toPointer(data.Signature)), true);
  return buf;
}

export class CRYPT_CSP_PROVIDERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwKeySpec(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszProviderName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Signature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwKeySpec(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszProviderName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set Signature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ENCODE_PARA (size: 24)
 */
export interface CRYPT_ENCODE_PARA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_ALLOC */
  pfnAlloc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_FREE */
  pfnFree: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_ENCODE_PARA = 24;

export function allocCRYPT_ENCODE_PARA(data?: Partial<CRYPT_ENCODE_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ENCODE_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfnAlloc !== undefined) view.setBigUint64(8, data.pfnAlloc === null ? 0n : BigInt(util.toPointer(data.pfnAlloc)), true);
  // 0x10: pointer
  if (data?.pfnFree !== undefined) view.setBigUint64(16, data.pfnFree === null ? 0n : BigInt(util.toPointer(data.pfnFree)), true);
  return buf;
}

export class CRYPT_ENCODE_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pfnAlloc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pfnFree(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pfnAlloc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pfnFree(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_DECODE_PARA (size: 24)
 */
export interface CRYPT_DECODE_PARA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_ALLOC */
  pfnAlloc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_FREE */
  pfnFree: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_DECODE_PARA = 24;

export function allocCRYPT_DECODE_PARA(data?: Partial<CRYPT_DECODE_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_DECODE_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfnAlloc !== undefined) view.setBigUint64(8, data.pfnAlloc === null ? 0n : BigInt(util.toPointer(data.pfnAlloc)), true);
  // 0x10: pointer
  if (data?.pfnFree !== undefined) view.setBigUint64(16, data.pfnFree === null ? 0n : BigInt(util.toPointer(data.pfnFree)), true);
  return buf;
}

export class CRYPT_DECODE_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pfnAlloc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pfnFree(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pfnAlloc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pfnFree(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_EXTENSIONS (size: 16)
 */
export interface CERT_EXTENSIONS {
  /** u32 */
  cExtension: number;
  /** ptr */
  rgExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_EXTENSIONS = 16;

export function allocCERT_EXTENSIONS(data?: Partial<CERT_EXTENSIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_EXTENSIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cExtension !== undefined) view.setUint32(0, Number(data.cExtension), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgExtension !== undefined) view.setBigUint64(8, data.rgExtension === null ? 0n : BigInt(util.toPointer(data.rgExtension)), true);
  return buf;
}

export class CERT_EXTENSIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cExtension(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgExtension(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cExtension(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgExtension(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_AUTHORITY_KEY_ID_INFO (size: 24)
 */
export interface CERT_AUTHORITY_KEY_ID_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  KeyId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  CertIssuer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  CertSerialNumber: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_AUTHORITY_KEY_ID_INFO = 24;

export function allocCERT_AUTHORITY_KEY_ID_INFO(data?: Partial<CERT_AUTHORITY_KEY_ID_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_AUTHORITY_KEY_ID_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KeyId !== undefined) view.setBigUint64(0, data.KeyId === null ? 0n : BigInt(util.toPointer(data.KeyId)), true);
  // 0x08: pointer
  if (data?.CertIssuer !== undefined) view.setBigUint64(8, data.CertIssuer === null ? 0n : BigInt(util.toPointer(data.CertIssuer)), true);
  // 0x10: pointer
  if (data?.CertSerialNumber !== undefined) view.setBigUint64(16, data.CertSerialNumber === null ? 0n : BigInt(util.toPointer(data.CertSerialNumber)), true);
  return buf;
}

export class CERT_AUTHORITY_KEY_ID_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KeyId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get CertIssuer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CertSerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set KeyId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set CertIssuer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CertSerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_PRIVATE_KEY_VALIDITY (size: 16)
 */
export interface CERT_PRIVATE_KEY_VALIDITY {
  /** Windows.Win32.Foundation.FILETIME */
  NotBefore: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  NotAfter: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_PRIVATE_KEY_VALIDITY = 16;

export function allocCERT_PRIVATE_KEY_VALIDITY(data?: Partial<CERT_PRIVATE_KEY_VALIDITY>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_PRIVATE_KEY_VALIDITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NotBefore !== undefined) view.setBigUint64(0, data.NotBefore === null ? 0n : BigInt(util.toPointer(data.NotBefore)), true);
  // 0x08: pointer
  if (data?.NotAfter !== undefined) view.setBigUint64(8, data.NotAfter === null ? 0n : BigInt(util.toPointer(data.NotAfter)), true);
  return buf;
}

export class CERT_PRIVATE_KEY_VALIDITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get NotBefore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get NotAfter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set NotBefore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set NotAfter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_KEY_ATTRIBUTES_INFO (size: 24)
 */
export interface CERT_KEY_ATTRIBUTES_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  KeyId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  IntendedKeyUsage: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pPrivateKeyUsagePeriod: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_KEY_ATTRIBUTES_INFO = 24;

export function allocCERT_KEY_ATTRIBUTES_INFO(data?: Partial<CERT_KEY_ATTRIBUTES_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_KEY_ATTRIBUTES_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KeyId !== undefined) view.setBigUint64(0, data.KeyId === null ? 0n : BigInt(util.toPointer(data.KeyId)), true);
  // 0x08: pointer
  if (data?.IntendedKeyUsage !== undefined) view.setBigUint64(8, data.IntendedKeyUsage === null ? 0n : BigInt(util.toPointer(data.IntendedKeyUsage)), true);
  // 0x10: pointer
  if (data?.pPrivateKeyUsagePeriod !== undefined) view.setBigUint64(16, data.pPrivateKeyUsagePeriod === null ? 0n : BigInt(util.toPointer(data.pPrivateKeyUsagePeriod)), true);
  return buf;
}

export class CERT_KEY_ATTRIBUTES_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KeyId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get IntendedKeyUsage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pPrivateKeyUsagePeriod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set KeyId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set IntendedKeyUsage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pPrivateKeyUsagePeriod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_POLICY_ID (size: 16)
 */
export interface CERT_POLICY_ID {
  /** u32 */
  cCertPolicyElementId: number;
  /** ptr */
  rgpszCertPolicyElementId: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_POLICY_ID = 16;

export function allocCERT_POLICY_ID(data?: Partial<CERT_POLICY_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_POLICY_ID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCertPolicyElementId !== undefined) view.setUint32(0, Number(data.cCertPolicyElementId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgpszCertPolicyElementId !== undefined) view.setBigUint64(8, data.rgpszCertPolicyElementId === null ? 0n : BigInt(util.toPointer(data.rgpszCertPolicyElementId)), true);
  return buf;
}

export class CERT_POLICY_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cCertPolicyElementId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgpszCertPolicyElementId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cCertPolicyElementId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgpszCertPolicyElementId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_KEY_USAGE_RESTRICTION_INFO (size: 24)
 */
export interface CERT_KEY_USAGE_RESTRICTION_INFO {
  /** u32 */
  cCertPolicyId: number;
  /** ptr */
  rgCertPolicyId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  RestrictedKeyUsage: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_KEY_USAGE_RESTRICTION_INFO = 24;

export function allocCERT_KEY_USAGE_RESTRICTION_INFO(data?: Partial<CERT_KEY_USAGE_RESTRICTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_KEY_USAGE_RESTRICTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCertPolicyId !== undefined) view.setUint32(0, Number(data.cCertPolicyId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgCertPolicyId !== undefined) view.setBigUint64(8, data.rgCertPolicyId === null ? 0n : BigInt(util.toPointer(data.rgCertPolicyId)), true);
  // 0x10: pointer
  if (data?.RestrictedKeyUsage !== undefined) view.setBigUint64(16, data.RestrictedKeyUsage === null ? 0n : BigInt(util.toPointer(data.RestrictedKeyUsage)), true);
  return buf;
}

export class CERT_KEY_USAGE_RESTRICTION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cCertPolicyId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgCertPolicyId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get RestrictedKeyUsage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cCertPolicyId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgCertPolicyId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set RestrictedKeyUsage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_OTHER_NAME (size: 16)
 */
export interface CERT_OTHER_NAME {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_OTHER_NAME = 16;

export function allocCERT_OTHER_NAME(data?: Partial<CERT_OTHER_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_OTHER_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class CERT_OTHER_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_ALT_NAME_ENTRY (size: 16)
 */
export interface CERT_ALT_NAME_ENTRY {
  /** u32 */
  dwAltNameChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_ALT_NAME_ENTRY = 16;

export function allocCERT_ALT_NAME_ENTRY(data?: Partial<CERT_ALT_NAME_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_ALT_NAME_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAltNameChoice !== undefined) view.setUint32(0, Number(data.dwAltNameChoice), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CERT_ALT_NAME_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAltNameChoice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwAltNameChoice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_ALT_NAME_INFO (size: 16)
 */
export interface CERT_ALT_NAME_INFO {
  /** u32 */
  cAltEntry: number;
  /** ptr */
  rgAltEntry: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_ALT_NAME_INFO = 16;

export function allocCERT_ALT_NAME_INFO(data?: Partial<CERT_ALT_NAME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_ALT_NAME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cAltEntry !== undefined) view.setUint32(0, Number(data.cAltEntry), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgAltEntry !== undefined) view.setBigUint64(8, data.rgAltEntry === null ? 0n : BigInt(util.toPointer(data.rgAltEntry)), true);
  return buf;
}

export class CERT_ALT_NAME_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cAltEntry(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgAltEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cAltEntry(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgAltEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_BASIC_CONSTRAINTS_INFO (size: 32)
 */
export interface CERT_BASIC_CONSTRAINTS_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  SubjectType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fPathLenConstraint: boolean;
  /** u32 */
  dwPathLenConstraint: number;
  /** u32 */
  cSubtreesConstraint: number;
  /** ptr */
  rgSubtreesConstraint: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_BASIC_CONSTRAINTS_INFO = 32;

export function allocCERT_BASIC_CONSTRAINTS_INFO(data?: Partial<CERT_BASIC_CONSTRAINTS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_BASIC_CONSTRAINTS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SubjectType !== undefined) view.setBigUint64(0, data.SubjectType === null ? 0n : BigInt(util.toPointer(data.SubjectType)), true);
  // 0x08: i32
  if (data?.fPathLenConstraint !== undefined) view.setInt32(8, Number(data.fPathLenConstraint), true);
  // 0x0c: u32
  if (data?.dwPathLenConstraint !== undefined) view.setUint32(12, Number(data.dwPathLenConstraint), true);
  // 0x10: u32
  if (data?.cSubtreesConstraint !== undefined) view.setUint32(16, Number(data.cSubtreesConstraint), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgSubtreesConstraint !== undefined) view.setBigUint64(24, data.rgSubtreesConstraint === null ? 0n : BigInt(util.toPointer(data.rgSubtreesConstraint)), true);
  return buf;
}

export class CERT_BASIC_CONSTRAINTS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SubjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get fPathLenConstraint(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwPathLenConstraint(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cSubtreesConstraint(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgSubtreesConstraint(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SubjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set fPathLenConstraint(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwPathLenConstraint(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cSubtreesConstraint(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgSubtreesConstraint(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_BASIC_CONSTRAINTS2_INFO (size: 16)
 */
export interface CERT_BASIC_CONSTRAINTS2_INFO {
  /** Windows.Win32.Foundation.BOOL */
  fCA: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fPathLenConstraint: boolean;
  /** u32 */
  dwPathLenConstraint: number;
}

export const sizeofCERT_BASIC_CONSTRAINTS2_INFO = 16;

export function allocCERT_BASIC_CONSTRAINTS2_INFO(data?: Partial<CERT_BASIC_CONSTRAINTS2_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_BASIC_CONSTRAINTS2_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fCA !== undefined) view.setInt32(0, Number(data.fCA), true);
  // 0x04: i32
  if (data?.fPathLenConstraint !== undefined) view.setInt32(4, Number(data.fPathLenConstraint), true);
  // 0x08: u32
  if (data?.dwPathLenConstraint !== undefined) view.setUint32(8, Number(data.dwPathLenConstraint), true);
  // 0x0c: pad4
  return buf;
}

export class CERT_BASIC_CONSTRAINTS2_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fCA(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get fPathLenConstraint(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get dwPathLenConstraint(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set fCA(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set fPathLenConstraint(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set dwPathLenConstraint(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CERT_POLICY_QUALIFIER_INFO (size: 16)
 */
export interface CERT_POLICY_QUALIFIER_INFO {
  /** Windows.Win32.Foundation.PSTR */
  pszPolicyQualifierId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Qualifier: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_POLICY_QUALIFIER_INFO = 16;

export function allocCERT_POLICY_QUALIFIER_INFO(data?: Partial<CERT_POLICY_QUALIFIER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_POLICY_QUALIFIER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszPolicyQualifierId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszPolicyQualifierId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.Qualifier !== undefined) view.setBigUint64(8, data.Qualifier === null ? 0n : BigInt(util.toPointer(data.Qualifier)), true);
  return buf;
}

export class CERT_POLICY_QUALIFIER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszPolicyQualifierId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Qualifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszPolicyQualifierId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set Qualifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_POLICY_INFO (size: 24)
 */
export interface CERT_POLICY_INFO {
  /** Windows.Win32.Foundation.PSTR */
  pszPolicyIdentifier: string | null | Uint8Array;
  /** u32 */
  cPolicyQualifier: number;
  /** ptr */
  rgPolicyQualifier: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_POLICY_INFO = 24;

export function allocCERT_POLICY_INFO(data?: Partial<CERT_POLICY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_POLICY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszPolicyIdentifier !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszPolicyIdentifier);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.cPolicyQualifier !== undefined) view.setUint32(8, Number(data.cPolicyQualifier), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgPolicyQualifier !== undefined) view.setBigUint64(16, data.rgPolicyQualifier === null ? 0n : BigInt(util.toPointer(data.rgPolicyQualifier)), true);
  return buf;
}

export class CERT_POLICY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszPolicyIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cPolicyQualifier(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgPolicyQualifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszPolicyIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set cPolicyQualifier(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgPolicyQualifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_POLICIES_INFO (size: 16)
 */
export interface CERT_POLICIES_INFO {
  /** u32 */
  cPolicyInfo: number;
  /** ptr */
  rgPolicyInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_POLICIES_INFO = 16;

export function allocCERT_POLICIES_INFO(data?: Partial<CERT_POLICIES_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_POLICIES_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cPolicyInfo !== undefined) view.setUint32(0, Number(data.cPolicyInfo), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgPolicyInfo !== undefined) view.setBigUint64(8, data.rgPolicyInfo === null ? 0n : BigInt(util.toPointer(data.rgPolicyInfo)), true);
  return buf;
}

export class CERT_POLICIES_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cPolicyInfo(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgPolicyInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cPolicyInfo(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgPolicyInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_POLICY_QUALIFIER_NOTICE_REFERENCE (size: 24)
 */
export interface CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {
  /** Windows.Win32.Foundation.PSTR */
  pszOrganization: string | null | Uint8Array;
  /** u32 */
  cNoticeNumbers: number;
  /** ptr */
  rgNoticeNumbers: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_POLICY_QUALIFIER_NOTICE_REFERENCE = 24;

export function allocCERT_POLICY_QUALIFIER_NOTICE_REFERENCE(data?: Partial<CERT_POLICY_QUALIFIER_NOTICE_REFERENCE>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_POLICY_QUALIFIER_NOTICE_REFERENCE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszOrganization !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszOrganization);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.cNoticeNumbers !== undefined) view.setUint32(8, Number(data.cNoticeNumbers), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgNoticeNumbers !== undefined) view.setBigUint64(16, data.rgNoticeNumbers === null ? 0n : BigInt(util.toPointer(data.rgNoticeNumbers)), true);
  return buf;
}

export class CERT_POLICY_QUALIFIER_NOTICE_REFERENCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszOrganization(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cNoticeNumbers(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgNoticeNumbers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszOrganization(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set cNoticeNumbers(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgNoticeNumbers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_POLICY_QUALIFIER_USER_NOTICE (size: 16)
 */
export interface CERT_POLICY_QUALIFIER_USER_NOTICE {
  /** ptr */
  pNoticeReference: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszDisplayText: string | null | Uint8Array | Uint16Array;
}

export const sizeofCERT_POLICY_QUALIFIER_USER_NOTICE = 16;

export function allocCERT_POLICY_QUALIFIER_USER_NOTICE(data?: Partial<CERT_POLICY_QUALIFIER_USER_NOTICE>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_POLICY_QUALIFIER_USER_NOTICE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pNoticeReference !== undefined) view.setBigUint64(0, data.pNoticeReference === null ? 0n : BigInt(util.toPointer(data.pNoticeReference)), true);
  // 0x08: buffer
  if (data?.pszDisplayText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszDisplayText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class CERT_POLICY_QUALIFIER_USER_NOTICEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pNoticeReference(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pszDisplayText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pNoticeReference(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set pszDisplayText(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CPS_URLS (size: 24)
 */
export interface CPS_URLS {
  /** Windows.Win32.Foundation.PWSTR */
  pszURL: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pAlgorithm: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pDigest: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCPS_URLS = 24;

export function allocCPS_URLS(data?: Partial<CPS_URLS>): Uint8Array {
  const buf = new Uint8Array(sizeofCPS_URLS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszURL !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszURL);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pAlgorithm !== undefined) view.setBigUint64(8, data.pAlgorithm === null ? 0n : BigInt(util.toPointer(data.pAlgorithm)), true);
  // 0x10: pointer
  if (data?.pDigest !== undefined) view.setBigUint64(16, data.pDigest === null ? 0n : BigInt(util.toPointer(data.pDigest)), true);
  return buf;
}

export class CPS_URLSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszURL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pDigest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszURL(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set pAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pDigest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_POLICY95_QUALIFIER1 (size: 40)
 */
export interface CERT_POLICY95_QUALIFIER1 {
  /** Windows.Win32.Foundation.PWSTR */
  pszPracticesReference: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PSTR */
  pszNoticeIdentifier: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszNSINoticeIdentifier: string | null | Uint8Array;
  /** u32 */
  cCPSURLs: number;
  /** ptr */
  rgCPSURLs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_POLICY95_QUALIFIER1 = 40;

export function allocCERT_POLICY95_QUALIFIER1(data?: Partial<CERT_POLICY95_QUALIFIER1>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_POLICY95_QUALIFIER1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszPracticesReference !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszPracticesReference);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszNoticeIdentifier !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszNoticeIdentifier);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszNSINoticeIdentifier !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszNSINoticeIdentifier);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.cCPSURLs !== undefined) view.setUint32(24, Number(data.cCPSURLs), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgCPSURLs !== undefined) view.setBigUint64(32, data.rgCPSURLs === null ? 0n : BigInt(util.toPointer(data.rgCPSURLs)), true);
  return buf;
}

export class CERT_POLICY95_QUALIFIER1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszPracticesReference(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pszNoticeIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszNSINoticeIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get cCPSURLs(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgCPSURLs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszPracticesReference(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pszNoticeIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pszNSINoticeIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u32
  set cCPSURLs(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgCPSURLs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_POLICY_MAPPING (size: 16)
 */
export interface CERT_POLICY_MAPPING {
  /** Windows.Win32.Foundation.PSTR */
  pszIssuerDomainPolicy: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszSubjectDomainPolicy: string | null | Uint8Array;
}

export const sizeofCERT_POLICY_MAPPING = 16;

export function allocCERT_POLICY_MAPPING(data?: Partial<CERT_POLICY_MAPPING>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_POLICY_MAPPING);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszIssuerDomainPolicy !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszIssuerDomainPolicy);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszSubjectDomainPolicy !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszSubjectDomainPolicy);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class CERT_POLICY_MAPPINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszIssuerDomainPolicy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pszSubjectDomainPolicy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszIssuerDomainPolicy(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pszSubjectDomainPolicy(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_POLICY_MAPPINGS_INFO (size: 16)
 */
export interface CERT_POLICY_MAPPINGS_INFO {
  /** u32 */
  cPolicyMapping: number;
  /** ptr */
  rgPolicyMapping: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_POLICY_MAPPINGS_INFO = 16;

export function allocCERT_POLICY_MAPPINGS_INFO(data?: Partial<CERT_POLICY_MAPPINGS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_POLICY_MAPPINGS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cPolicyMapping !== undefined) view.setUint32(0, Number(data.cPolicyMapping), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgPolicyMapping !== undefined) view.setBigUint64(8, data.rgPolicyMapping === null ? 0n : BigInt(util.toPointer(data.rgPolicyMapping)), true);
  return buf;
}

export class CERT_POLICY_MAPPINGS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cPolicyMapping(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgPolicyMapping(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cPolicyMapping(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgPolicyMapping(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_POLICY_CONSTRAINTS_INFO (size: 16)
 */
export interface CERT_POLICY_CONSTRAINTS_INFO {
  /** Windows.Win32.Foundation.BOOL */
  fRequireExplicitPolicy: boolean;
  /** u32 */
  dwRequireExplicitPolicySkipCerts: number;
  /** Windows.Win32.Foundation.BOOL */
  fInhibitPolicyMapping: boolean;
  /** u32 */
  dwInhibitPolicyMappingSkipCerts: number;
}

export const sizeofCERT_POLICY_CONSTRAINTS_INFO = 16;

export function allocCERT_POLICY_CONSTRAINTS_INFO(data?: Partial<CERT_POLICY_CONSTRAINTS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_POLICY_CONSTRAINTS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fRequireExplicitPolicy !== undefined) view.setInt32(0, Number(data.fRequireExplicitPolicy), true);
  // 0x04: u32
  if (data?.dwRequireExplicitPolicySkipCerts !== undefined) view.setUint32(4, Number(data.dwRequireExplicitPolicySkipCerts), true);
  // 0x08: i32
  if (data?.fInhibitPolicyMapping !== undefined) view.setInt32(8, Number(data.fInhibitPolicyMapping), true);
  // 0x0c: u32
  if (data?.dwInhibitPolicyMappingSkipCerts !== undefined) view.setUint32(12, Number(data.dwInhibitPolicyMappingSkipCerts), true);
  return buf;
}

export class CERT_POLICY_CONSTRAINTS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fRequireExplicitPolicy(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwRequireExplicitPolicySkipCerts(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get fInhibitPolicyMapping(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwInhibitPolicyMappingSkipCerts(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: i32
  set fRequireExplicitPolicy(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwRequireExplicitPolicySkipCerts(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set fInhibitPolicyMapping(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwInhibitPolicyMappingSkipCerts(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY (size: 24)
 */
export interface CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** u32 */
  cValue: number;
  /** ptr */
  rgValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = 24;

export function allocCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY(data?: Partial<CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.cValue !== undefined) view.setUint32(8, Number(data.cValue), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgValue !== undefined) view.setBigUint64(16, data.rgValue === null ? 0n : BigInt(util.toPointer(data.rgValue)), true);
  return buf;
}

export class CRYPT_CONTENT_INFO_SEQUENCE_OF_ANYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cValue(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set cValue(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_CONTENT_INFO (size: 16)
 */
export interface CRYPT_CONTENT_INFO {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Content: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_CONTENT_INFO = 16;

export function allocCRYPT_CONTENT_INFO(data?: Partial<CRYPT_CONTENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_CONTENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.Content !== undefined) view.setBigUint64(8, data.Content === null ? 0n : BigInt(util.toPointer(data.Content)), true);
  return buf;
}

export class CRYPT_CONTENT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Content(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set Content(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_SEQUENCE_OF_ANY (size: 16)
 */
export interface CRYPT_SEQUENCE_OF_ANY {
  /** u32 */
  cValue: number;
  /** ptr */
  rgValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_SEQUENCE_OF_ANY = 16;

export function allocCRYPT_SEQUENCE_OF_ANY(data?: Partial<CRYPT_SEQUENCE_OF_ANY>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_SEQUENCE_OF_ANY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cValue !== undefined) view.setUint32(0, Number(data.cValue), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgValue !== undefined) view.setBigUint64(8, data.rgValue === null ? 0n : BigInt(util.toPointer(data.rgValue)), true);
  return buf;
}

export class CRYPT_SEQUENCE_OF_ANYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_AUTHORITY_KEY_ID2_INFO (size: 24)
 */
export interface CERT_AUTHORITY_KEY_ID2_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  KeyId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CERT_ALT_NAME_INFO */
  AuthorityCertIssuer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  AuthorityCertSerialNumber: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_AUTHORITY_KEY_ID2_INFO = 24;

export function allocCERT_AUTHORITY_KEY_ID2_INFO(data?: Partial<CERT_AUTHORITY_KEY_ID2_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_AUTHORITY_KEY_ID2_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KeyId !== undefined) view.setBigUint64(0, data.KeyId === null ? 0n : BigInt(util.toPointer(data.KeyId)), true);
  // 0x08: pointer
  if (data?.AuthorityCertIssuer !== undefined) view.setBigUint64(8, data.AuthorityCertIssuer === null ? 0n : BigInt(util.toPointer(data.AuthorityCertIssuer)), true);
  // 0x10: pointer
  if (data?.AuthorityCertSerialNumber !== undefined) view.setBigUint64(16, data.AuthorityCertSerialNumber === null ? 0n : BigInt(util.toPointer(data.AuthorityCertSerialNumber)), true);
  return buf;
}

export class CERT_AUTHORITY_KEY_ID2_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KeyId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get AuthorityCertIssuer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AuthorityCertSerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set KeyId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set AuthorityCertIssuer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AuthorityCertSerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_ACCESS_DESCRIPTION (size: 16)
 */
export interface CERT_ACCESS_DESCRIPTION {
  /** Windows.Win32.Foundation.PSTR */
  pszAccessMethod: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CERT_ALT_NAME_ENTRY */
  AccessLocation: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_ACCESS_DESCRIPTION = 16;

export function allocCERT_ACCESS_DESCRIPTION(data?: Partial<CERT_ACCESS_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_ACCESS_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszAccessMethod !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszAccessMethod);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.AccessLocation !== undefined) view.setBigUint64(8, data.AccessLocation === null ? 0n : BigInt(util.toPointer(data.AccessLocation)), true);
  return buf;
}

export class CERT_ACCESS_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszAccessMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get AccessLocation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszAccessMethod(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set AccessLocation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_AUTHORITY_INFO_ACCESS (size: 16)
 */
export interface CERT_AUTHORITY_INFO_ACCESS {
  /** u32 */
  cAccDescr: number;
  /** ptr */
  rgAccDescr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_AUTHORITY_INFO_ACCESS = 16;

export function allocCERT_AUTHORITY_INFO_ACCESS(data?: Partial<CERT_AUTHORITY_INFO_ACCESS>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_AUTHORITY_INFO_ACCESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cAccDescr !== undefined) view.setUint32(0, Number(data.cAccDescr), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgAccDescr !== undefined) view.setBigUint64(8, data.rgAccDescr === null ? 0n : BigInt(util.toPointer(data.rgAccDescr)), true);
  return buf;
}

export class CERT_AUTHORITY_INFO_ACCESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cAccDescr(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgAccDescr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cAccDescr(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgAccDescr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRL_DIST_POINT_NAME (size: 16)
 */
export interface CRL_DIST_POINT_NAME {
  /** u32 */
  dwDistPointNameChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRL_DIST_POINT_NAME = 16;

export function allocCRL_DIST_POINT_NAME(data?: Partial<CRL_DIST_POINT_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofCRL_DIST_POINT_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDistPointNameChoice !== undefined) view.setUint32(0, Number(data.dwDistPointNameChoice), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CRL_DIST_POINT_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwDistPointNameChoice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwDistPointNameChoice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRL_DIST_POINT (size: 24)
 */
export interface CRL_DIST_POINT {
  /** Windows.Win32.Security.Cryptography.CRL_DIST_POINT_NAME */
  DistPointName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  ReasonFlags: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CERT_ALT_NAME_INFO */
  CRLIssuer: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRL_DIST_POINT = 24;

export function allocCRL_DIST_POINT(data?: Partial<CRL_DIST_POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRL_DIST_POINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DistPointName !== undefined) view.setBigUint64(0, data.DistPointName === null ? 0n : BigInt(util.toPointer(data.DistPointName)), true);
  // 0x08: pointer
  if (data?.ReasonFlags !== undefined) view.setBigUint64(8, data.ReasonFlags === null ? 0n : BigInt(util.toPointer(data.ReasonFlags)), true);
  // 0x10: pointer
  if (data?.CRLIssuer !== undefined) view.setBigUint64(16, data.CRLIssuer === null ? 0n : BigInt(util.toPointer(data.CRLIssuer)), true);
  return buf;
}

export class CRL_DIST_POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DistPointName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ReasonFlags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get CRLIssuer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set DistPointName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ReasonFlags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set CRLIssuer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRL_DIST_POINTS_INFO (size: 16)
 */
export interface CRL_DIST_POINTS_INFO {
  /** u32 */
  cDistPoint: number;
  /** ptr */
  rgDistPoint: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRL_DIST_POINTS_INFO = 16;

export function allocCRL_DIST_POINTS_INFO(data?: Partial<CRL_DIST_POINTS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRL_DIST_POINTS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cDistPoint !== undefined) view.setUint32(0, Number(data.cDistPoint), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgDistPoint !== undefined) view.setBigUint64(8, data.rgDistPoint === null ? 0n : BigInt(util.toPointer(data.rgDistPoint)), true);
  return buf;
}

export class CRL_DIST_POINTS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cDistPoint(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgDistPoint(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cDistPoint(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgDistPoint(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CROSS_CERT_DIST_POINTS_INFO (size: 16)
 */
export interface CROSS_CERT_DIST_POINTS_INFO {
  /** u32 */
  dwSyncDeltaTime: number;
  /** u32 */
  cDistPoint: number;
  /** ptr */
  rgDistPoint: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCROSS_CERT_DIST_POINTS_INFO = 16;

export function allocCROSS_CERT_DIST_POINTS_INFO(data?: Partial<CROSS_CERT_DIST_POINTS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCROSS_CERT_DIST_POINTS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSyncDeltaTime !== undefined) view.setUint32(0, Number(data.dwSyncDeltaTime), true);
  // 0x04: u32
  if (data?.cDistPoint !== undefined) view.setUint32(4, Number(data.cDistPoint), true);
  // 0x08: pointer
  if (data?.rgDistPoint !== undefined) view.setBigUint64(8, data.rgDistPoint === null ? 0n : BigInt(util.toPointer(data.rgDistPoint)), true);
  return buf;
}

export class CROSS_CERT_DIST_POINTS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSyncDeltaTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cDistPoint(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgDistPoint(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSyncDeltaTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cDistPoint(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgDistPoint(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_PAIR (size: 16)
 */
export interface CERT_PAIR {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Forward: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Reverse: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_PAIR = 16;

export function allocCERT_PAIR(data?: Partial<CERT_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Forward !== undefined) view.setBigUint64(0, data.Forward === null ? 0n : BigInt(util.toPointer(data.Forward)), true);
  // 0x08: pointer
  if (data?.Reverse !== undefined) view.setBigUint64(8, data.Reverse === null ? 0n : BigInt(util.toPointer(data.Reverse)), true);
  return buf;
}

export class CERT_PAIRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Forward(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Reverse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Forward(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Reverse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRL_ISSUING_DIST_POINT (size: 32)
 */
export interface CRL_ISSUING_DIST_POINT {
  /** Windows.Win32.Security.Cryptography.CRL_DIST_POINT_NAME */
  DistPointName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fOnlyContainsUserCerts: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fOnlyContainsCACerts: boolean;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  OnlySomeReasonFlags: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fIndirectCRL: boolean;
}

export const sizeofCRL_ISSUING_DIST_POINT = 32;

export function allocCRL_ISSUING_DIST_POINT(data?: Partial<CRL_ISSUING_DIST_POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRL_ISSUING_DIST_POINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DistPointName !== undefined) view.setBigUint64(0, data.DistPointName === null ? 0n : BigInt(util.toPointer(data.DistPointName)), true);
  // 0x08: i32
  if (data?.fOnlyContainsUserCerts !== undefined) view.setInt32(8, Number(data.fOnlyContainsUserCerts), true);
  // 0x0c: i32
  if (data?.fOnlyContainsCACerts !== undefined) view.setInt32(12, Number(data.fOnlyContainsCACerts), true);
  // 0x10: pointer
  if (data?.OnlySomeReasonFlags !== undefined) view.setBigUint64(16, data.OnlySomeReasonFlags === null ? 0n : BigInt(util.toPointer(data.OnlySomeReasonFlags)), true);
  // 0x18: i32
  if (data?.fIndirectCRL !== undefined) view.setInt32(24, Number(data.fIndirectCRL), true);
  // 0x1c: pad4
  return buf;
}

export class CRL_ISSUING_DIST_POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DistPointName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get fOnlyContainsUserCerts(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get fOnlyContainsCACerts(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get OnlySomeReasonFlags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get fIndirectCRL(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set DistPointName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set fOnlyContainsUserCerts(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set fOnlyContainsCACerts(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set OnlySomeReasonFlags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set fIndirectCRL(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CERT_GENERAL_SUBTREE (size: 24)
 */
export interface CERT_GENERAL_SUBTREE {
  /** Windows.Win32.Security.Cryptography.CERT_ALT_NAME_ENTRY */
  Base: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwMinimum: number;
  /** Windows.Win32.Foundation.BOOL */
  fMaximum: boolean;
  /** u32 */
  dwMaximum: number;
}

export const sizeofCERT_GENERAL_SUBTREE = 24;

export function allocCERT_GENERAL_SUBTREE(data?: Partial<CERT_GENERAL_SUBTREE>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_GENERAL_SUBTREE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(util.toPointer(data.Base)), true);
  // 0x08: u32
  if (data?.dwMinimum !== undefined) view.setUint32(8, Number(data.dwMinimum), true);
  // 0x0c: i32
  if (data?.fMaximum !== undefined) view.setInt32(12, Number(data.fMaximum), true);
  // 0x10: u32
  if (data?.dwMaximum !== undefined) view.setUint32(16, Number(data.dwMaximum), true);
  // 0x14: pad4
  return buf;
}

export class CERT_GENERAL_SUBTREEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwMinimum(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get fMaximum(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get dwMaximum(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwMinimum(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set fMaximum(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set dwMaximum(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CERT_NAME_CONSTRAINTS_INFO (size: 32)
 */
export interface CERT_NAME_CONSTRAINTS_INFO {
  /** u32 */
  cPermittedSubtree: number;
  /** ptr */
  rgPermittedSubtree: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cExcludedSubtree: number;
  /** ptr */
  rgExcludedSubtree: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_NAME_CONSTRAINTS_INFO = 32;

export function allocCERT_NAME_CONSTRAINTS_INFO(data?: Partial<CERT_NAME_CONSTRAINTS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_NAME_CONSTRAINTS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cPermittedSubtree !== undefined) view.setUint32(0, Number(data.cPermittedSubtree), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgPermittedSubtree !== undefined) view.setBigUint64(8, data.rgPermittedSubtree === null ? 0n : BigInt(util.toPointer(data.rgPermittedSubtree)), true);
  // 0x10: u32
  if (data?.cExcludedSubtree !== undefined) view.setUint32(16, Number(data.cExcludedSubtree), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgExcludedSubtree !== undefined) view.setBigUint64(24, data.rgExcludedSubtree === null ? 0n : BigInt(util.toPointer(data.rgExcludedSubtree)), true);
  return buf;
}

export class CERT_NAME_CONSTRAINTS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cPermittedSubtree(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgPermittedSubtree(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cExcludedSubtree(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgExcludedSubtree(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cPermittedSubtree(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgPermittedSubtree(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cExcludedSubtree(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgExcludedSubtree(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_DSS_PARAMETERS (size: 24)
 */
export interface CERT_DSS_PARAMETERS {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  p: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  q: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  g: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_DSS_PARAMETERS = 24;

export function allocCERT_DSS_PARAMETERS(data?: Partial<CERT_DSS_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_DSS_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.p !== undefined) view.setBigUint64(0, data.p === null ? 0n : BigInt(util.toPointer(data.p)), true);
  // 0x08: pointer
  if (data?.q !== undefined) view.setBigUint64(8, data.q === null ? 0n : BigInt(util.toPointer(data.q)), true);
  // 0x10: pointer
  if (data?.g !== undefined) view.setBigUint64(16, data.g === null ? 0n : BigInt(util.toPointer(data.g)), true);
  return buf;
}

export class CERT_DSS_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get p(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get q(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get g(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set p(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set q(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set g(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_DH_PARAMETERS (size: 16)
 */
export interface CERT_DH_PARAMETERS {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  p: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  g: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_DH_PARAMETERS = 16;

export function allocCERT_DH_PARAMETERS(data?: Partial<CERT_DH_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_DH_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.p !== undefined) view.setBigUint64(0, data.p === null ? 0n : BigInt(util.toPointer(data.p)), true);
  // 0x08: pointer
  if (data?.g !== undefined) view.setBigUint64(8, data.g === null ? 0n : BigInt(util.toPointer(data.g)), true);
  return buf;
}

export class CERT_DH_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get p(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get g(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set p(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set g(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_ECC_SIGNATURE (size: 16)
 */
export interface CERT_ECC_SIGNATURE {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  r: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  s: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_ECC_SIGNATURE = 16;

export function allocCERT_ECC_SIGNATURE(data?: Partial<CERT_ECC_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_ECC_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.r !== undefined) view.setBigUint64(0, data.r === null ? 0n : BigInt(util.toPointer(data.r)), true);
  // 0x08: pointer
  if (data?.s !== undefined) view.setBigUint64(8, data.s === null ? 0n : BigInt(util.toPointer(data.s)), true);
  return buf;
}

export class CERT_ECC_SIGNATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get r(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get s(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set r(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set s(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_X942_DH_VALIDATION_PARAMS (size: 16)
 */
export interface CERT_X942_DH_VALIDATION_PARAMS {
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  seed: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  pgenCounter: number;
}

export const sizeofCERT_X942_DH_VALIDATION_PARAMS = 16;

export function allocCERT_X942_DH_VALIDATION_PARAMS(data?: Partial<CERT_X942_DH_VALIDATION_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_X942_DH_VALIDATION_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.seed !== undefined) view.setBigUint64(0, data.seed === null ? 0n : BigInt(util.toPointer(data.seed)), true);
  // 0x08: u32
  if (data?.pgenCounter !== undefined) view.setUint32(8, Number(data.pgenCounter), true);
  // 0x0c: pad4
  return buf;
}

export class CERT_X942_DH_VALIDATION_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get seed(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get pgenCounter(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set seed(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set pgenCounter(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CERT_X942_DH_PARAMETERS (size: 40)
 */
export interface CERT_X942_DH_PARAMETERS {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  p: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  g: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  q: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  j: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pValidationParams: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_X942_DH_PARAMETERS = 40;

export function allocCERT_X942_DH_PARAMETERS(data?: Partial<CERT_X942_DH_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_X942_DH_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.p !== undefined) view.setBigUint64(0, data.p === null ? 0n : BigInt(util.toPointer(data.p)), true);
  // 0x08: pointer
  if (data?.g !== undefined) view.setBigUint64(8, data.g === null ? 0n : BigInt(util.toPointer(data.g)), true);
  // 0x10: pointer
  if (data?.q !== undefined) view.setBigUint64(16, data.q === null ? 0n : BigInt(util.toPointer(data.q)), true);
  // 0x18: pointer
  if (data?.j !== undefined) view.setBigUint64(24, data.j === null ? 0n : BigInt(util.toPointer(data.j)), true);
  // 0x20: pointer
  if (data?.pValidationParams !== undefined) view.setBigUint64(32, data.pValidationParams === null ? 0n : BigInt(util.toPointer(data.pValidationParams)), true);
  return buf;
}

export class CERT_X942_DH_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get p(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get g(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get q(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get j(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pValidationParams(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set p(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set g(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set q(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set j(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pValidationParams(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_X942_OTHER_INFO (size: 32)
 */
export interface CRYPT_X942_OTHER_INFO {
  /** Windows.Win32.Foundation.PSTR */
  pszContentEncryptionObjId: string | null | Uint8Array;
  /** array */
  rgbCounter: Deno.PointerValue | null;
  /** array */
  rgbKeyLength: Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  PubInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_X942_OTHER_INFO = 32;

export function allocCRYPT_X942_OTHER_INFO(data?: Partial<CRYPT_X942_OTHER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_X942_OTHER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszContentEncryptionObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszContentEncryptionObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.rgbCounter !== undefined) view.setBigUint64(8, data.rgbCounter === null ? 0n : BigInt(util.toPointer(data.rgbCounter)), true);
  // 0x10: pointer
  if (data?.rgbKeyLength !== undefined) view.setBigUint64(16, data.rgbKeyLength === null ? 0n : BigInt(util.toPointer(data.rgbKeyLength)), true);
  // 0x18: pointer
  if (data?.PubInfo !== undefined) view.setBigUint64(24, data.PubInfo === null ? 0n : BigInt(util.toPointer(data.PubInfo)), true);
  return buf;
}

export class CRYPT_X942_OTHER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszContentEncryptionObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get rgbCounter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get rgbKeyLength(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get PubInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszContentEncryptionObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set rgbCounter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set rgbKeyLength(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set PubInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ECC_CMS_SHARED_INFO (size: 24)
 */
export interface CRYPT_ECC_CMS_SHARED_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  Algorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EntityUInfo: Uint8Array | Deno.PointerValue | null;
  /** array */
  rgbSuppPubInfo: Deno.PointerValue | null;
}

export const sizeofCRYPT_ECC_CMS_SHARED_INFO = 24;

export function allocCRYPT_ECC_CMS_SHARED_INFO(data?: Partial<CRYPT_ECC_CMS_SHARED_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ECC_CMS_SHARED_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Algorithm !== undefined) view.setBigUint64(0, data.Algorithm === null ? 0n : BigInt(util.toPointer(data.Algorithm)), true);
  // 0x08: pointer
  if (data?.EntityUInfo !== undefined) view.setBigUint64(8, data.EntityUInfo === null ? 0n : BigInt(util.toPointer(data.EntityUInfo)), true);
  // 0x10: pointer
  if (data?.rgbSuppPubInfo !== undefined) view.setBigUint64(16, data.rgbSuppPubInfo === null ? 0n : BigInt(util.toPointer(data.rgbSuppPubInfo)), true);
  return buf;
}

export class CRYPT_ECC_CMS_SHARED_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Algorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get EntityUInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get rgbSuppPubInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Algorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set EntityUInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set rgbSuppPubInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_RC2_CBC_PARAMETERS (size: 16)
 */
export interface CRYPT_RC2_CBC_PARAMETERS {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.BOOL */
  fIV: boolean;
  /** array */
  rgbIV: Deno.PointerValue | null;
}

export const sizeofCRYPT_RC2_CBC_PARAMETERS = 16;

export function allocCRYPT_RC2_CBC_PARAMETERS(data?: Partial<CRYPT_RC2_CBC_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_RC2_CBC_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: i32
  if (data?.fIV !== undefined) view.setInt32(4, Number(data.fIV), true);
  // 0x08: pointer
  if (data?.rgbIV !== undefined) view.setBigUint64(8, data.rgbIV === null ? 0n : BigInt(util.toPointer(data.rgbIV)), true);
  return buf;
}

export class CRYPT_RC2_CBC_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get fIV(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get rgbIV(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set fIV(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set rgbIV(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_SMIME_CAPABILITY (size: 16)
 */
export interface CRYPT_SMIME_CAPABILITY {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_SMIME_CAPABILITY = 16;

export function allocCRYPT_SMIME_CAPABILITY(data?: Partial<CRYPT_SMIME_CAPABILITY>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_SMIME_CAPABILITY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

export class CRYPT_SMIME_CAPABILITYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_SMIME_CAPABILITIES (size: 16)
 */
export interface CRYPT_SMIME_CAPABILITIES {
  /** u32 */
  cCapability: number;
  /** ptr */
  rgCapability: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_SMIME_CAPABILITIES = 16;

export function allocCRYPT_SMIME_CAPABILITIES(data?: Partial<CRYPT_SMIME_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_SMIME_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCapability !== undefined) view.setUint32(0, Number(data.cCapability), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgCapability !== undefined) view.setBigUint64(8, data.rgCapability === null ? 0n : BigInt(util.toPointer(data.rgCapability)), true);
  return buf;
}

export class CRYPT_SMIME_CAPABILITIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cCapability(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgCapability(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cCapability(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgCapability(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_QC_STATEMENT (size: 16)
 */
export interface CERT_QC_STATEMENT {
  /** Windows.Win32.Foundation.PSTR */
  pszStatementId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  StatementInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_QC_STATEMENT = 16;

export function allocCERT_QC_STATEMENT(data?: Partial<CERT_QC_STATEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_QC_STATEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszStatementId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszStatementId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.StatementInfo !== undefined) view.setBigUint64(8, data.StatementInfo === null ? 0n : BigInt(util.toPointer(data.StatementInfo)), true);
  return buf;
}

export class CERT_QC_STATEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszStatementId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get StatementInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszStatementId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set StatementInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_QC_STATEMENTS_EXT_INFO (size: 16)
 */
export interface CERT_QC_STATEMENTS_EXT_INFO {
  /** u32 */
  cStatement: number;
  /** ptr */
  rgStatement: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_QC_STATEMENTS_EXT_INFO = 16;

export function allocCERT_QC_STATEMENTS_EXT_INFO(data?: Partial<CERT_QC_STATEMENTS_EXT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_QC_STATEMENTS_EXT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cStatement !== undefined) view.setUint32(0, Number(data.cStatement), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgStatement !== undefined) view.setBigUint64(8, data.rgStatement === null ? 0n : BigInt(util.toPointer(data.rgStatement)), true);
  return buf;
}

export class CERT_QC_STATEMENTS_EXT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cStatement(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgStatement(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cStatement(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgStatement(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_MASK_GEN_ALGORITHM (size: 16)
 */
export interface CRYPT_MASK_GEN_ALGORITHM {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_MASK_GEN_ALGORITHM = 16;

export function allocCRYPT_MASK_GEN_ALGORITHM(data?: Partial<CRYPT_MASK_GEN_ALGORITHM>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_MASK_GEN_ALGORITHM);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(8, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  return buf;
}

export class CRYPT_MASK_GEN_ALGORITHMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_RSA_SSA_PSS_PARAMETERS (size: 24)
 */
export interface CRYPT_RSA_SSA_PSS_PARAMETERS {
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_MASK_GEN_ALGORITHM */
  MaskGenAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSaltLength: number;
  /** u32 */
  dwTrailerField: number;
}

export const sizeofCRYPT_RSA_SSA_PSS_PARAMETERS = 24;

export function allocCRYPT_RSA_SSA_PSS_PARAMETERS(data?: Partial<CRYPT_RSA_SSA_PSS_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_RSA_SSA_PSS_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(0, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x08: pointer
  if (data?.MaskGenAlgorithm !== undefined) view.setBigUint64(8, data.MaskGenAlgorithm === null ? 0n : BigInt(util.toPointer(data.MaskGenAlgorithm)), true);
  // 0x10: u32
  if (data?.dwSaltLength !== undefined) view.setUint32(16, Number(data.dwSaltLength), true);
  // 0x14: u32
  if (data?.dwTrailerField !== undefined) view.setUint32(20, Number(data.dwTrailerField), true);
  return buf;
}

export class CRYPT_RSA_SSA_PSS_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get MaskGenAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwSaltLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwTrailerField(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set MaskGenAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwSaltLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwTrailerField(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_PSOURCE_ALGORITHM (size: 16)
 */
export interface CRYPT_PSOURCE_ALGORITHM {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EncodingParameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_PSOURCE_ALGORITHM = 16;

export function allocCRYPT_PSOURCE_ALGORITHM(data?: Partial<CRYPT_PSOURCE_ALGORITHM>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PSOURCE_ALGORITHM);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.EncodingParameters !== undefined) view.setBigUint64(8, data.EncodingParameters === null ? 0n : BigInt(util.toPointer(data.EncodingParameters)), true);
  return buf;
}

export class CRYPT_PSOURCE_ALGORITHMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get EncodingParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set EncodingParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_RSAES_OAEP_PARAMETERS (size: 24)
 */
export interface CRYPT_RSAES_OAEP_PARAMETERS {
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_MASK_GEN_ALGORITHM */
  MaskGenAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_PSOURCE_ALGORITHM */
  PSourceAlgorithm: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_RSAES_OAEP_PARAMETERS = 24;

export function allocCRYPT_RSAES_OAEP_PARAMETERS(data?: Partial<CRYPT_RSAES_OAEP_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_RSAES_OAEP_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(0, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x08: pointer
  if (data?.MaskGenAlgorithm !== undefined) view.setBigUint64(8, data.MaskGenAlgorithm === null ? 0n : BigInt(util.toPointer(data.MaskGenAlgorithm)), true);
  // 0x10: pointer
  if (data?.PSourceAlgorithm !== undefined) view.setBigUint64(16, data.PSourceAlgorithm === null ? 0n : BigInt(util.toPointer(data.PSourceAlgorithm)), true);
  return buf;
}

export class CRYPT_RSAES_OAEP_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get MaskGenAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get PSourceAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set MaskGenAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set PSourceAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMC_TAGGED_ATTRIBUTE (size: 16)
 */
export interface CMC_TAGGED_ATTRIBUTE {
  /** u32 */
  dwBodyPartID: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTE */
  Attribute: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMC_TAGGED_ATTRIBUTE = 16;

export function allocCMC_TAGGED_ATTRIBUTE(data?: Partial<CMC_TAGGED_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofCMC_TAGGED_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBodyPartID !== undefined) view.setUint32(0, Number(data.dwBodyPartID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Attribute !== undefined) view.setBigUint64(8, data.Attribute === null ? 0n : BigInt(util.toPointer(data.Attribute)), true);
  return buf;
}

export class CMC_TAGGED_ATTRIBUTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwBodyPartID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Attribute(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwBodyPartID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Attribute(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMC_TAGGED_CERT_REQUEST (size: 16)
 */
export interface CMC_TAGGED_CERT_REQUEST {
  /** u32 */
  dwBodyPartID: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SignedCertRequest: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMC_TAGGED_CERT_REQUEST = 16;

export function allocCMC_TAGGED_CERT_REQUEST(data?: Partial<CMC_TAGGED_CERT_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofCMC_TAGGED_CERT_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBodyPartID !== undefined) view.setUint32(0, Number(data.dwBodyPartID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SignedCertRequest !== undefined) view.setBigUint64(8, data.SignedCertRequest === null ? 0n : BigInt(util.toPointer(data.SignedCertRequest)), true);
  return buf;
}

export class CMC_TAGGED_CERT_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwBodyPartID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SignedCertRequest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwBodyPartID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SignedCertRequest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMC_TAGGED_REQUEST (size: 16)
 */
export interface CMC_TAGGED_REQUEST {
  /** u32 */
  dwTaggedRequestChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMC_TAGGED_REQUEST = 16;

export function allocCMC_TAGGED_REQUEST(data?: Partial<CMC_TAGGED_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofCMC_TAGGED_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTaggedRequestChoice !== undefined) view.setUint32(0, Number(data.dwTaggedRequestChoice), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CMC_TAGGED_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTaggedRequestChoice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwTaggedRequestChoice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMC_TAGGED_CONTENT_INFO (size: 16)
 */
export interface CMC_TAGGED_CONTENT_INFO {
  /** u32 */
  dwBodyPartID: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EncodedContentInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMC_TAGGED_CONTENT_INFO = 16;

export function allocCMC_TAGGED_CONTENT_INFO(data?: Partial<CMC_TAGGED_CONTENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMC_TAGGED_CONTENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBodyPartID !== undefined) view.setUint32(0, Number(data.dwBodyPartID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EncodedContentInfo !== undefined) view.setBigUint64(8, data.EncodedContentInfo === null ? 0n : BigInt(util.toPointer(data.EncodedContentInfo)), true);
  return buf;
}

export class CMC_TAGGED_CONTENT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwBodyPartID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EncodedContentInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwBodyPartID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EncodedContentInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMC_TAGGED_OTHER_MSG (size: 24)
 */
export interface CMC_TAGGED_OTHER_MSG {
  /** u32 */
  dwBodyPartID: number;
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMC_TAGGED_OTHER_MSG = 24;

export function allocCMC_TAGGED_OTHER_MSG(data?: Partial<CMC_TAGGED_OTHER_MSG>): Uint8Array {
  const buf = new Uint8Array(sizeofCMC_TAGGED_OTHER_MSG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBodyPartID !== undefined) view.setUint32(0, Number(data.dwBodyPartID), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.Value !== undefined) view.setBigUint64(16, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class CMC_TAGGED_OTHER_MSGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwBodyPartID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwBodyPartID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMC_DATA_INFO (size: 64)
 */
export interface CMC_DATA_INFO {
  /** u32 */
  cTaggedAttribute: number;
  /** ptr */
  rgTaggedAttribute: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cTaggedRequest: number;
  /** ptr */
  rgTaggedRequest: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cTaggedContentInfo: number;
  /** ptr */
  rgTaggedContentInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cTaggedOtherMsg: number;
  /** ptr */
  rgTaggedOtherMsg: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMC_DATA_INFO = 64;

export function allocCMC_DATA_INFO(data?: Partial<CMC_DATA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMC_DATA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cTaggedAttribute !== undefined) view.setUint32(0, Number(data.cTaggedAttribute), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgTaggedAttribute !== undefined) view.setBigUint64(8, data.rgTaggedAttribute === null ? 0n : BigInt(util.toPointer(data.rgTaggedAttribute)), true);
  // 0x10: u32
  if (data?.cTaggedRequest !== undefined) view.setUint32(16, Number(data.cTaggedRequest), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgTaggedRequest !== undefined) view.setBigUint64(24, data.rgTaggedRequest === null ? 0n : BigInt(util.toPointer(data.rgTaggedRequest)), true);
  // 0x20: u32
  if (data?.cTaggedContentInfo !== undefined) view.setUint32(32, Number(data.cTaggedContentInfo), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgTaggedContentInfo !== undefined) view.setBigUint64(40, data.rgTaggedContentInfo === null ? 0n : BigInt(util.toPointer(data.rgTaggedContentInfo)), true);
  // 0x30: u32
  if (data?.cTaggedOtherMsg !== undefined) view.setUint32(48, Number(data.cTaggedOtherMsg), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rgTaggedOtherMsg !== undefined) view.setBigUint64(56, data.rgTaggedOtherMsg === null ? 0n : BigInt(util.toPointer(data.rgTaggedOtherMsg)), true);
  return buf;
}

export class CMC_DATA_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cTaggedAttribute(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgTaggedAttribute(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cTaggedRequest(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgTaggedRequest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cTaggedContentInfo(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rgTaggedContentInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cTaggedOtherMsg(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get rgTaggedOtherMsg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cTaggedAttribute(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgTaggedAttribute(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cTaggedRequest(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgTaggedRequest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cTaggedContentInfo(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rgTaggedContentInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set cTaggedOtherMsg(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set rgTaggedOtherMsg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMC_RESPONSE_INFO (size: 48)
 */
export interface CMC_RESPONSE_INFO {
  /** u32 */
  cTaggedAttribute: number;
  /** ptr */
  rgTaggedAttribute: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cTaggedContentInfo: number;
  /** ptr */
  rgTaggedContentInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cTaggedOtherMsg: number;
  /** ptr */
  rgTaggedOtherMsg: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMC_RESPONSE_INFO = 48;

export function allocCMC_RESPONSE_INFO(data?: Partial<CMC_RESPONSE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMC_RESPONSE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cTaggedAttribute !== undefined) view.setUint32(0, Number(data.cTaggedAttribute), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgTaggedAttribute !== undefined) view.setBigUint64(8, data.rgTaggedAttribute === null ? 0n : BigInt(util.toPointer(data.rgTaggedAttribute)), true);
  // 0x10: u32
  if (data?.cTaggedContentInfo !== undefined) view.setUint32(16, Number(data.cTaggedContentInfo), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgTaggedContentInfo !== undefined) view.setBigUint64(24, data.rgTaggedContentInfo === null ? 0n : BigInt(util.toPointer(data.rgTaggedContentInfo)), true);
  // 0x20: u32
  if (data?.cTaggedOtherMsg !== undefined) view.setUint32(32, Number(data.cTaggedOtherMsg), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgTaggedOtherMsg !== undefined) view.setBigUint64(40, data.rgTaggedOtherMsg === null ? 0n : BigInt(util.toPointer(data.rgTaggedOtherMsg)), true);
  return buf;
}

export class CMC_RESPONSE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cTaggedAttribute(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgTaggedAttribute(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cTaggedContentInfo(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgTaggedContentInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cTaggedOtherMsg(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rgTaggedOtherMsg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cTaggedAttribute(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgTaggedAttribute(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cTaggedContentInfo(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgTaggedContentInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cTaggedOtherMsg(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rgTaggedOtherMsg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMC_PEND_INFO (size: 16)
 */
export interface CMC_PEND_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  PendToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  PendTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMC_PEND_INFO = 16;

export function allocCMC_PEND_INFO(data?: Partial<CMC_PEND_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMC_PEND_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PendToken !== undefined) view.setBigUint64(0, data.PendToken === null ? 0n : BigInt(util.toPointer(data.PendToken)), true);
  // 0x08: pointer
  if (data?.PendTime !== undefined) view.setBigUint64(8, data.PendTime === null ? 0n : BigInt(util.toPointer(data.PendTime)), true);
  return buf;
}

export class CMC_PEND_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PendToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get PendTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set PendToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set PendTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMC_STATUS_INFO (size: 40)
 */
export interface CMC_STATUS_INFO {
  /** u32 */
  dwStatus: number;
  /** u32 */
  cBodyList: number;
  /** ptr */
  rgdwBodyList: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszStatusString: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwOtherInfoChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMC_STATUS_INFO = 40;

export function allocCMC_STATUS_INFO(data?: Partial<CMC_STATUS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMC_STATUS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStatus !== undefined) view.setUint32(0, Number(data.dwStatus), true);
  // 0x04: u32
  if (data?.cBodyList !== undefined) view.setUint32(4, Number(data.cBodyList), true);
  // 0x08: pointer
  if (data?.rgdwBodyList !== undefined) view.setBigUint64(8, data.rgdwBodyList === null ? 0n : BigInt(util.toPointer(data.rgdwBodyList)), true);
  // 0x10: buffer
  if (data?.pwszStatusString !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszStatusString);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwOtherInfoChoice !== undefined) view.setUint32(24, Number(data.dwOtherInfoChoice), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CMC_STATUS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cBodyList(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgdwBodyList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszStatusString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwOtherInfoChoice(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cBodyList(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgdwBodyList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set pwszStatusString(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u32
  set dwOtherInfoChoice(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMC_ADD_EXTENSIONS_INFO (size: 32)
 */
export interface CMC_ADD_EXTENSIONS_INFO {
  /** u32 */
  dwCmcDataReference: number;
  /** u32 */
  cCertReference: number;
  /** ptr */
  rgdwCertReference: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cExtension: number;
  /** ptr */
  rgExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMC_ADD_EXTENSIONS_INFO = 32;

export function allocCMC_ADD_EXTENSIONS_INFO(data?: Partial<CMC_ADD_EXTENSIONS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMC_ADD_EXTENSIONS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCmcDataReference !== undefined) view.setUint32(0, Number(data.dwCmcDataReference), true);
  // 0x04: u32
  if (data?.cCertReference !== undefined) view.setUint32(4, Number(data.cCertReference), true);
  // 0x08: pointer
  if (data?.rgdwCertReference !== undefined) view.setBigUint64(8, data.rgdwCertReference === null ? 0n : BigInt(util.toPointer(data.rgdwCertReference)), true);
  // 0x10: u32
  if (data?.cExtension !== undefined) view.setUint32(16, Number(data.cExtension), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgExtension !== undefined) view.setBigUint64(24, data.rgExtension === null ? 0n : BigInt(util.toPointer(data.rgExtension)), true);
  return buf;
}

export class CMC_ADD_EXTENSIONS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCmcDataReference(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cCertReference(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgdwCertReference(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cExtension(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgExtension(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwCmcDataReference(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cCertReference(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgdwCertReference(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cExtension(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgExtension(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMC_ADD_ATTRIBUTES_INFO (size: 32)
 */
export interface CMC_ADD_ATTRIBUTES_INFO {
  /** u32 */
  dwCmcDataReference: number;
  /** u32 */
  cCertReference: number;
  /** ptr */
  rgdwCertReference: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cAttribute: number;
  /** ptr */
  rgAttribute: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMC_ADD_ATTRIBUTES_INFO = 32;

export function allocCMC_ADD_ATTRIBUTES_INFO(data?: Partial<CMC_ADD_ATTRIBUTES_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMC_ADD_ATTRIBUTES_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCmcDataReference !== undefined) view.setUint32(0, Number(data.dwCmcDataReference), true);
  // 0x04: u32
  if (data?.cCertReference !== undefined) view.setUint32(4, Number(data.cCertReference), true);
  // 0x08: pointer
  if (data?.rgdwCertReference !== undefined) view.setBigUint64(8, data.rgdwCertReference === null ? 0n : BigInt(util.toPointer(data.rgdwCertReference)), true);
  // 0x10: u32
  if (data?.cAttribute !== undefined) view.setUint32(16, Number(data.cAttribute), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgAttribute !== undefined) view.setBigUint64(24, data.rgAttribute === null ? 0n : BigInt(util.toPointer(data.rgAttribute)), true);
  return buf;
}

export class CMC_ADD_ATTRIBUTES_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCmcDataReference(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cCertReference(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgdwCertReference(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cAttribute(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgAttribute(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwCmcDataReference(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cCertReference(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgdwCertReference(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cAttribute(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgAttribute(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_TEMPLATE_EXT (size: 24)
 */
export interface CERT_TEMPLATE_EXT {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** u32 */
  dwMajorVersion: number;
  /** Windows.Win32.Foundation.BOOL */
  fMinorVersion: boolean;
  /** u32 */
  dwMinorVersion: number;
}

export const sizeofCERT_TEMPLATE_EXT = 24;

export function allocCERT_TEMPLATE_EXT(data?: Partial<CERT_TEMPLATE_EXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_TEMPLATE_EXT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(8, Number(data.dwMajorVersion), true);
  // 0x0c: i32
  if (data?.fMinorVersion !== undefined) view.setInt32(12, Number(data.fMinorVersion), true);
  // 0x10: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(16, Number(data.dwMinorVersion), true);
  // 0x14: pad4
  return buf;
}

export class CERT_TEMPLATE_EXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwMajorVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get fMinorVersion(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get dwMinorVersion(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set dwMajorVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set fMinorVersion(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set dwMinorVersion(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CERT_HASHED_URL (size: 24)
 */
export interface CERT_HASHED_URL {
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Hash: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszUrl: string | null | Uint8Array | Uint16Array;
}

export const sizeofCERT_HASHED_URL = 24;

export function allocCERT_HASHED_URL(data?: Partial<CERT_HASHED_URL>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_HASHED_URL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(0, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x08: pointer
  if (data?.Hash !== undefined) view.setBigUint64(8, data.Hash === null ? 0n : BigInt(util.toPointer(data.Hash)), true);
  // 0x10: buffer
  if (data?.pwszUrl !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszUrl);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class CERT_HASHED_URLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Hash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Hash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set pwszUrl(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_DETAILS (size: 24)
 */
export interface CERT_LOGOTYPE_DETAILS {
  /** Windows.Win32.Foundation.PWSTR */
  pwszMimeType: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cHashedUrl: number;
  /** ptr */
  rgHashedUrl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_LOGOTYPE_DETAILS = 24;

export function allocCERT_LOGOTYPE_DETAILS(data?: Partial<CERT_LOGOTYPE_DETAILS>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_LOGOTYPE_DETAILS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszMimeType !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszMimeType);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.cHashedUrl !== undefined) view.setUint32(8, Number(data.cHashedUrl), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgHashedUrl !== undefined) view.setBigUint64(16, data.rgHashedUrl === null ? 0n : BigInt(util.toPointer(data.rgHashedUrl)), true);
  return buf;
}

export class CERT_LOGOTYPE_DETAILSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszMimeType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cHashedUrl(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgHashedUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pwszMimeType(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set cHashedUrl(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgHashedUrl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_REFERENCE (size: 16)
 */
export interface CERT_LOGOTYPE_REFERENCE {
  /** u32 */
  cHashedUrl: number;
  /** ptr */
  rgHashedUrl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_LOGOTYPE_REFERENCE = 16;

export function allocCERT_LOGOTYPE_REFERENCE(data?: Partial<CERT_LOGOTYPE_REFERENCE>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_LOGOTYPE_REFERENCE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cHashedUrl !== undefined) view.setUint32(0, Number(data.cHashedUrl), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgHashedUrl !== undefined) view.setBigUint64(8, data.rgHashedUrl === null ? 0n : BigInt(util.toPointer(data.rgHashedUrl)), true);
  return buf;
}

export class CERT_LOGOTYPE_REFERENCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cHashedUrl(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgHashedUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cHashedUrl(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgHashedUrl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_IMAGE_INFO (size: 40)
 */
export interface CERT_LOGOTYPE_IMAGE_INFO {
  /** Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_IMAGE_INFO_TYPE */
  dwLogotypeImageInfoChoice: CERT_LOGOTYPE_IMAGE_INFO_TYPE;
  /** u32 */
  dwFileSize: number;
  /** u32 */
  dwXSize: number;
  /** u32 */
  dwYSize: number;
  /** Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_CHOICE */
  dwLogotypeImageResolutionChoice: CERT_LOGOTYPE_CHOICE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszLanguage: string | null | Uint8Array | Uint16Array;
}

export const sizeofCERT_LOGOTYPE_IMAGE_INFO = 40;

export function allocCERT_LOGOTYPE_IMAGE_INFO(data?: Partial<CERT_LOGOTYPE_IMAGE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_LOGOTYPE_IMAGE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLogotypeImageInfoChoice !== undefined) view.setUint32(0, Number(data.dwLogotypeImageInfoChoice), true);
  // 0x04: u32
  if (data?.dwFileSize !== undefined) view.setUint32(4, Number(data.dwFileSize), true);
  // 0x08: u32
  if (data?.dwXSize !== undefined) view.setUint32(8, Number(data.dwXSize), true);
  // 0x0c: u32
  if (data?.dwYSize !== undefined) view.setUint32(12, Number(data.dwYSize), true);
  // 0x10: u32
  if (data?.dwLogotypeImageResolutionChoice !== undefined) view.setUint32(16, Number(data.dwLogotypeImageResolutionChoice), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: buffer
  if (data?.pwszLanguage !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszLanguage);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

export class CERT_LOGOTYPE_IMAGE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLogotypeImageInfoChoice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFileSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwXSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwYSize(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwLogotypeImageResolutionChoice(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pwszLanguage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwLogotypeImageInfoChoice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFileSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwXSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwYSize(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwLogotypeImageResolutionChoice(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: buffer
  set pwszLanguage(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_IMAGE (size: 16)
 */
export interface CERT_LOGOTYPE_IMAGE {
  /** Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_DETAILS */
  LogotypeDetails: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pLogotypeImageInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_LOGOTYPE_IMAGE = 16;

export function allocCERT_LOGOTYPE_IMAGE(data?: Partial<CERT_LOGOTYPE_IMAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_LOGOTYPE_IMAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogotypeDetails !== undefined) view.setBigUint64(0, data.LogotypeDetails === null ? 0n : BigInt(util.toPointer(data.LogotypeDetails)), true);
  // 0x08: pointer
  if (data?.pLogotypeImageInfo !== undefined) view.setBigUint64(8, data.pLogotypeImageInfo === null ? 0n : BigInt(util.toPointer(data.pLogotypeImageInfo)), true);
  return buf;
}

export class CERT_LOGOTYPE_IMAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LogotypeDetails(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pLogotypeImageInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set LogotypeDetails(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pLogotypeImageInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_AUDIO_INFO (size: 24)
 */
export interface CERT_LOGOTYPE_AUDIO_INFO {
  /** u32 */
  dwFileSize: number;
  /** u32 */
  dwPlayTime: number;
  /** u32 */
  dwChannels: number;
  /** u32 */
  dwSampleRate: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszLanguage: string | null | Uint8Array | Uint16Array;
}

export const sizeofCERT_LOGOTYPE_AUDIO_INFO = 24;

export function allocCERT_LOGOTYPE_AUDIO_INFO(data?: Partial<CERT_LOGOTYPE_AUDIO_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_LOGOTYPE_AUDIO_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFileSize !== undefined) view.setUint32(0, Number(data.dwFileSize), true);
  // 0x04: u32
  if (data?.dwPlayTime !== undefined) view.setUint32(4, Number(data.dwPlayTime), true);
  // 0x08: u32
  if (data?.dwChannels !== undefined) view.setUint32(8, Number(data.dwChannels), true);
  // 0x0c: u32
  if (data?.dwSampleRate !== undefined) view.setUint32(12, Number(data.dwSampleRate), true);
  // 0x10: buffer
  if (data?.pwszLanguage !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszLanguage);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class CERT_LOGOTYPE_AUDIO_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFileSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPlayTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwChannels(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwSampleRate(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: buffer
  get pwszLanguage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFileSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPlayTime(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwChannels(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwSampleRate(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: buffer
  set pwszLanguage(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_AUDIO (size: 16)
 */
export interface CERT_LOGOTYPE_AUDIO {
  /** Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_DETAILS */
  LogotypeDetails: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pLogotypeAudioInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_LOGOTYPE_AUDIO = 16;

export function allocCERT_LOGOTYPE_AUDIO(data?: Partial<CERT_LOGOTYPE_AUDIO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_LOGOTYPE_AUDIO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogotypeDetails !== undefined) view.setBigUint64(0, data.LogotypeDetails === null ? 0n : BigInt(util.toPointer(data.LogotypeDetails)), true);
  // 0x08: pointer
  if (data?.pLogotypeAudioInfo !== undefined) view.setBigUint64(8, data.pLogotypeAudioInfo === null ? 0n : BigInt(util.toPointer(data.pLogotypeAudioInfo)), true);
  return buf;
}

export class CERT_LOGOTYPE_AUDIOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LogotypeDetails(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pLogotypeAudioInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set LogotypeDetails(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pLogotypeAudioInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_DATA (size: 32)
 */
export interface CERT_LOGOTYPE_DATA {
  /** u32 */
  cLogotypeImage: number;
  /** ptr */
  rgLogotypeImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cLogotypeAudio: number;
  /** ptr */
  rgLogotypeAudio: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_LOGOTYPE_DATA = 32;

export function allocCERT_LOGOTYPE_DATA(data?: Partial<CERT_LOGOTYPE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_LOGOTYPE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cLogotypeImage !== undefined) view.setUint32(0, Number(data.cLogotypeImage), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgLogotypeImage !== undefined) view.setBigUint64(8, data.rgLogotypeImage === null ? 0n : BigInt(util.toPointer(data.rgLogotypeImage)), true);
  // 0x10: u32
  if (data?.cLogotypeAudio !== undefined) view.setUint32(16, Number(data.cLogotypeAudio), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgLogotypeAudio !== undefined) view.setBigUint64(24, data.rgLogotypeAudio === null ? 0n : BigInt(util.toPointer(data.rgLogotypeAudio)), true);
  return buf;
}

export class CERT_LOGOTYPE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cLogotypeImage(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgLogotypeImage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cLogotypeAudio(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgLogotypeAudio(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cLogotypeImage(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgLogotypeImage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cLogotypeAudio(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgLogotypeAudio(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_INFO (size: 16)
 */
export interface CERT_LOGOTYPE_INFO {
  /** Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_OPTION */
  dwLogotypeInfoChoice: CERT_LOGOTYPE_OPTION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_LOGOTYPE_INFO = 16;

export function allocCERT_LOGOTYPE_INFO(data?: Partial<CERT_LOGOTYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_LOGOTYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLogotypeInfoChoice !== undefined) view.setUint32(0, Number(data.dwLogotypeInfoChoice), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CERT_LOGOTYPE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLogotypeInfoChoice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwLogotypeInfoChoice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_OTHER_LOGOTYPE_INFO (size: 16)
 */
export interface CERT_OTHER_LOGOTYPE_INFO {
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_INFO */
  LogotypeInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_OTHER_LOGOTYPE_INFO = 16;

export function allocCERT_OTHER_LOGOTYPE_INFO(data?: Partial<CERT_OTHER_LOGOTYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_OTHER_LOGOTYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.LogotypeInfo !== undefined) view.setBigUint64(8, data.LogotypeInfo === null ? 0n : BigInt(util.toPointer(data.LogotypeInfo)), true);
  return buf;
}

export class CERT_OTHER_LOGOTYPE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get LogotypeInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set LogotypeInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_LOGOTYPE_EXT_INFO (size: 48)
 */
export interface CERT_LOGOTYPE_EXT_INFO {
  /** u32 */
  cCommunityLogo: number;
  /** ptr */
  rgCommunityLogo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIssuerLogo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pSubjectLogo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cOtherLogo: number;
  /** ptr */
  rgOtherLogo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_LOGOTYPE_EXT_INFO = 48;

export function allocCERT_LOGOTYPE_EXT_INFO(data?: Partial<CERT_LOGOTYPE_EXT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_LOGOTYPE_EXT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCommunityLogo !== undefined) view.setUint32(0, Number(data.cCommunityLogo), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgCommunityLogo !== undefined) view.setBigUint64(8, data.rgCommunityLogo === null ? 0n : BigInt(util.toPointer(data.rgCommunityLogo)), true);
  // 0x10: pointer
  if (data?.pIssuerLogo !== undefined) view.setBigUint64(16, data.pIssuerLogo === null ? 0n : BigInt(util.toPointer(data.pIssuerLogo)), true);
  // 0x18: pointer
  if (data?.pSubjectLogo !== undefined) view.setBigUint64(24, data.pSubjectLogo === null ? 0n : BigInt(util.toPointer(data.pSubjectLogo)), true);
  // 0x20: u32
  if (data?.cOtherLogo !== undefined) view.setUint32(32, Number(data.cOtherLogo), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgOtherLogo !== undefined) view.setBigUint64(40, data.rgOtherLogo === null ? 0n : BigInt(util.toPointer(data.rgOtherLogo)), true);
  return buf;
}

export class CERT_LOGOTYPE_EXT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cCommunityLogo(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgCommunityLogo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pIssuerLogo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pSubjectLogo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cOtherLogo(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rgOtherLogo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cCommunityLogo(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgCommunityLogo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pIssuerLogo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pSubjectLogo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cOtherLogo(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rgOtherLogo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_BIOMETRIC_DATA (size: 24)
 */
export interface CERT_BIOMETRIC_DATA {
  /** Windows.Win32.Security.Cryptography.CERT_BIOMETRIC_DATA_TYPE */
  dwTypeOfBiometricDataChoice: CERT_BIOMETRIC_DATA_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CERT_HASHED_URL */
  HashedUrl: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_BIOMETRIC_DATA = 24;

export function allocCERT_BIOMETRIC_DATA(data?: Partial<CERT_BIOMETRIC_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_BIOMETRIC_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTypeOfBiometricDataChoice !== undefined) view.setUint32(0, Number(data.dwTypeOfBiometricDataChoice), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: pointer
  if (data?.HashedUrl !== undefined) view.setBigUint64(16, data.HashedUrl === null ? 0n : BigInt(util.toPointer(data.HashedUrl)), true);
  return buf;
}

export class CERT_BIOMETRIC_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwTypeOfBiometricDataChoice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get HashedUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwTypeOfBiometricDataChoice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set HashedUrl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_BIOMETRIC_EXT_INFO (size: 16)
 */
export interface CERT_BIOMETRIC_EXT_INFO {
  /** u32 */
  cBiometricData: number;
  /** ptr */
  rgBiometricData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_BIOMETRIC_EXT_INFO = 16;

export function allocCERT_BIOMETRIC_EXT_INFO(data?: Partial<CERT_BIOMETRIC_EXT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_BIOMETRIC_EXT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cBiometricData !== undefined) view.setUint32(0, Number(data.cBiometricData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgBiometricData !== undefined) view.setBigUint64(8, data.rgBiometricData === null ? 0n : BigInt(util.toPointer(data.rgBiometricData)), true);
  return buf;
}

export class CERT_BIOMETRIC_EXT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cBiometricData(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgBiometricData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cBiometricData(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgBiometricData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.OCSP_SIGNATURE_INFO (size: 32)
 */
export interface OCSP_SIGNATURE_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  SignatureAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  Signature: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cCertEncoded: number;
  /** ptr */
  rgCertEncoded: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOCSP_SIGNATURE_INFO = 32;

export function allocOCSP_SIGNATURE_INFO(data?: Partial<OCSP_SIGNATURE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOCSP_SIGNATURE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SignatureAlgorithm !== undefined) view.setBigUint64(0, data.SignatureAlgorithm === null ? 0n : BigInt(util.toPointer(data.SignatureAlgorithm)), true);
  // 0x08: pointer
  if (data?.Signature !== undefined) view.setBigUint64(8, data.Signature === null ? 0n : BigInt(util.toPointer(data.Signature)), true);
  // 0x10: u32
  if (data?.cCertEncoded !== undefined) view.setUint32(16, Number(data.cCertEncoded), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgCertEncoded !== undefined) view.setBigUint64(24, data.rgCertEncoded === null ? 0n : BigInt(util.toPointer(data.rgCertEncoded)), true);
  return buf;
}

export class OCSP_SIGNATURE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SignatureAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Signature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cCertEncoded(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgCertEncoded(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SignatureAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Signature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cCertEncoded(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgCertEncoded(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.OCSP_SIGNED_REQUEST_INFO (size: 16)
 */
export interface OCSP_SIGNED_REQUEST_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  ToBeSigned: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pOptionalSignatureInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOCSP_SIGNED_REQUEST_INFO = 16;

export function allocOCSP_SIGNED_REQUEST_INFO(data?: Partial<OCSP_SIGNED_REQUEST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOCSP_SIGNED_REQUEST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ToBeSigned !== undefined) view.setBigUint64(0, data.ToBeSigned === null ? 0n : BigInt(util.toPointer(data.ToBeSigned)), true);
  // 0x08: pointer
  if (data?.pOptionalSignatureInfo !== undefined) view.setBigUint64(8, data.pOptionalSignatureInfo === null ? 0n : BigInt(util.toPointer(data.pOptionalSignatureInfo)), true);
  return buf;
}

export class OCSP_SIGNED_REQUEST_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ToBeSigned(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pOptionalSignatureInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ToBeSigned(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pOptionalSignatureInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.OCSP_CERT_ID (size: 32)
 */
export interface OCSP_CERT_ID {
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  IssuerNameHash: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  IssuerKeyHash: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SerialNumber: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOCSP_CERT_ID = 32;

export function allocOCSP_CERT_ID(data?: Partial<OCSP_CERT_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofOCSP_CERT_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(0, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x08: pointer
  if (data?.IssuerNameHash !== undefined) view.setBigUint64(8, data.IssuerNameHash === null ? 0n : BigInt(util.toPointer(data.IssuerNameHash)), true);
  // 0x10: pointer
  if (data?.IssuerKeyHash !== undefined) view.setBigUint64(16, data.IssuerKeyHash === null ? 0n : BigInt(util.toPointer(data.IssuerKeyHash)), true);
  // 0x18: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(24, data.SerialNumber === null ? 0n : BigInt(util.toPointer(data.SerialNumber)), true);
  return buf;
}

export class OCSP_CERT_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get IssuerNameHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get IssuerKeyHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set IssuerNameHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set IssuerKeyHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.OCSP_REQUEST_ENTRY (size: 24)
 */
export interface OCSP_REQUEST_ENTRY {
  /** Windows.Win32.Security.Cryptography.OCSP_CERT_ID */
  CertId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cExtension: number;
  /** ptr */
  rgExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOCSP_REQUEST_ENTRY = 24;

export function allocOCSP_REQUEST_ENTRY(data?: Partial<OCSP_REQUEST_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofOCSP_REQUEST_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CertId !== undefined) view.setBigUint64(0, data.CertId === null ? 0n : BigInt(util.toPointer(data.CertId)), true);
  // 0x08: u32
  if (data?.cExtension !== undefined) view.setUint32(8, Number(data.cExtension), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgExtension !== undefined) view.setBigUint64(16, data.rgExtension === null ? 0n : BigInt(util.toPointer(data.rgExtension)), true);
  return buf;
}

export class OCSP_REQUEST_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CertId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cExtension(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgExtension(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set CertId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set cExtension(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgExtension(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.OCSP_REQUEST_INFO (size: 48)
 */
export interface OCSP_REQUEST_INFO {
  /** u32 */
  dwVersion: number;
  /** ptr */
  pRequestorName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cRequestEntry: number;
  /** ptr */
  rgRequestEntry: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cExtension: number;
  /** ptr */
  rgExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOCSP_REQUEST_INFO = 48;

export function allocOCSP_REQUEST_INFO(data?: Partial<OCSP_REQUEST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOCSP_REQUEST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pRequestorName !== undefined) view.setBigUint64(8, data.pRequestorName === null ? 0n : BigInt(util.toPointer(data.pRequestorName)), true);
  // 0x10: u32
  if (data?.cRequestEntry !== undefined) view.setUint32(16, Number(data.cRequestEntry), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgRequestEntry !== undefined) view.setBigUint64(24, data.rgRequestEntry === null ? 0n : BigInt(util.toPointer(data.rgRequestEntry)), true);
  // 0x20: u32
  if (data?.cExtension !== undefined) view.setUint32(32, Number(data.cExtension), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgExtension !== undefined) view.setBigUint64(40, data.rgExtension === null ? 0n : BigInt(util.toPointer(data.rgExtension)), true);
  return buf;
}

export class OCSP_REQUEST_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pRequestorName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cRequestEntry(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgRequestEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cExtension(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rgExtension(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pRequestorName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cRequestEntry(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgRequestEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cExtension(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rgExtension(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.OCSP_RESPONSE_INFO (size: 24)
 */
export interface OCSP_RESPONSE_INFO {
  /** u32 */
  dwStatus: number;
  /** Windows.Win32.Foundation.PSTR */
  pszObjId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOCSP_RESPONSE_INFO = 24;

export function allocOCSP_RESPONSE_INFO(data?: Partial<OCSP_RESPONSE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOCSP_RESPONSE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStatus !== undefined) view.setUint32(0, Number(data.dwStatus), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszObjId !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszObjId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.Value !== undefined) view.setBigUint64(16, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class OCSP_RESPONSE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszObjId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszObjId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.OCSP_BASIC_SIGNED_RESPONSE_INFO (size: 16)
 */
export interface OCSP_BASIC_SIGNED_RESPONSE_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  ToBeSigned: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.OCSP_SIGNATURE_INFO */
  SignatureInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofOCSP_BASIC_SIGNED_RESPONSE_INFO = 16;

export function allocOCSP_BASIC_SIGNED_RESPONSE_INFO(data?: Partial<OCSP_BASIC_SIGNED_RESPONSE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOCSP_BASIC_SIGNED_RESPONSE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ToBeSigned !== undefined) view.setBigUint64(0, data.ToBeSigned === null ? 0n : BigInt(util.toPointer(data.ToBeSigned)), true);
  // 0x08: pointer
  if (data?.SignatureInfo !== undefined) view.setBigUint64(8, data.SignatureInfo === null ? 0n : BigInt(util.toPointer(data.SignatureInfo)), true);
  return buf;
}

export class OCSP_BASIC_SIGNED_RESPONSE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ToBeSigned(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SignatureInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ToBeSigned(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SignatureInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.OCSP_BASIC_REVOKED_INFO (size: 16)
 */
export interface OCSP_BASIC_REVOKED_INFO {
  /** Windows.Win32.Foundation.FILETIME */
  RevocationDate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CERT_REVOCATION_STATUS_REASON */
  dwCrlReasonCode: CERT_REVOCATION_STATUS_REASON;
}

export const sizeofOCSP_BASIC_REVOKED_INFO = 16;

export function allocOCSP_BASIC_REVOKED_INFO(data?: Partial<OCSP_BASIC_REVOKED_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOCSP_BASIC_REVOKED_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RevocationDate !== undefined) view.setBigUint64(0, data.RevocationDate === null ? 0n : BigInt(util.toPointer(data.RevocationDate)), true);
  // 0x08: u32
  if (data?.dwCrlReasonCode !== undefined) view.setUint32(8, Number(data.dwCrlReasonCode), true);
  // 0x0c: pad4
  return buf;
}

export class OCSP_BASIC_REVOKED_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get RevocationDate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwCrlReasonCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set RevocationDate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwCrlReasonCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.OCSP_BASIC_RESPONSE_ENTRY (size: 56)
 */
export interface OCSP_BASIC_RESPONSE_ENTRY {
  /** Windows.Win32.Security.Cryptography.OCSP_CERT_ID */
  CertId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCertStatus: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ThisUpdate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  NextUpdate: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cExtension: number;
  /** ptr */
  rgExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOCSP_BASIC_RESPONSE_ENTRY = 56;

export function allocOCSP_BASIC_RESPONSE_ENTRY(data?: Partial<OCSP_BASIC_RESPONSE_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofOCSP_BASIC_RESPONSE_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CertId !== undefined) view.setBigUint64(0, data.CertId === null ? 0n : BigInt(util.toPointer(data.CertId)), true);
  // 0x08: u32
  if (data?.dwCertStatus !== undefined) view.setUint32(8, Number(data.dwCertStatus), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: pointer
  if (data?.ThisUpdate !== undefined) view.setBigUint64(24, data.ThisUpdate === null ? 0n : BigInt(util.toPointer(data.ThisUpdate)), true);
  // 0x20: pointer
  if (data?.NextUpdate !== undefined) view.setBigUint64(32, data.NextUpdate === null ? 0n : BigInt(util.toPointer(data.NextUpdate)), true);
  // 0x28: u32
  if (data?.cExtension !== undefined) view.setUint32(40, Number(data.cExtension), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rgExtension !== undefined) view.setBigUint64(48, data.rgExtension === null ? 0n : BigInt(util.toPointer(data.rgExtension)), true);
  return buf;
}

export class OCSP_BASIC_RESPONSE_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CertId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwCertStatus(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ThisUpdate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get NextUpdate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get cExtension(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get rgExtension(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set CertId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwCertStatus(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ThisUpdate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set NextUpdate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set cExtension(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set rgExtension(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.OCSP_BASIC_RESPONSE_INFO (size: 56)
 */
export interface OCSP_BASIC_RESPONSE_INFO {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwResponderIdChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ProducedAt: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cResponseEntry: number;
  /** ptr */
  rgResponseEntry: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cExtension: number;
  /** ptr */
  rgExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOCSP_BASIC_RESPONSE_INFO = 56;

export function allocOCSP_BASIC_RESPONSE_INFO(data?: Partial<OCSP_BASIC_RESPONSE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOCSP_BASIC_RESPONSE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwResponderIdChoice !== undefined) view.setUint32(4, Number(data.dwResponderIdChoice), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: pointer
  if (data?.ProducedAt !== undefined) view.setBigUint64(16, data.ProducedAt === null ? 0n : BigInt(util.toPointer(data.ProducedAt)), true);
  // 0x18: u32
  if (data?.cResponseEntry !== undefined) view.setUint32(24, Number(data.cResponseEntry), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgResponseEntry !== undefined) view.setBigUint64(32, data.rgResponseEntry === null ? 0n : BigInt(util.toPointer(data.rgResponseEntry)), true);
  // 0x28: u32
  if (data?.cExtension !== undefined) view.setUint32(40, Number(data.cExtension), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rgExtension !== undefined) view.setBigUint64(48, data.rgExtension === null ? 0n : BigInt(util.toPointer(data.rgExtension)), true);
  return buf;
}

export class OCSP_BASIC_RESPONSE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwResponderIdChoice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ProducedAt(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get cResponseEntry(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgResponseEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get cExtension(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get rgExtension(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwResponderIdChoice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ProducedAt(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set cResponseEntry(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgResponseEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set cExtension(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set rgExtension(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_SUPPORTED_ALGORITHM_INFO (size: 24)
 */
export interface CERT_SUPPORTED_ALGORITHM_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  Algorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  IntendedKeyUsage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CERT_POLICIES_INFO */
  IntendedCertPolicies: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_SUPPORTED_ALGORITHM_INFO = 24;

export function allocCERT_SUPPORTED_ALGORITHM_INFO(data?: Partial<CERT_SUPPORTED_ALGORITHM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SUPPORTED_ALGORITHM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Algorithm !== undefined) view.setBigUint64(0, data.Algorithm === null ? 0n : BigInt(util.toPointer(data.Algorithm)), true);
  // 0x08: pointer
  if (data?.IntendedKeyUsage !== undefined) view.setBigUint64(8, data.IntendedKeyUsage === null ? 0n : BigInt(util.toPointer(data.IntendedKeyUsage)), true);
  // 0x10: pointer
  if (data?.IntendedCertPolicies !== undefined) view.setBigUint64(16, data.IntendedCertPolicies === null ? 0n : BigInt(util.toPointer(data.IntendedCertPolicies)), true);
  return buf;
}

export class CERT_SUPPORTED_ALGORITHM_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Algorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get IntendedKeyUsage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get IntendedCertPolicies(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Algorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set IntendedKeyUsage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set IntendedCertPolicies(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_TPM_SPECIFICATION_INFO (size: 16)
 */
export interface CERT_TPM_SPECIFICATION_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwszFamily: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwLevel: number;
  /** u32 */
  dwRevision: number;
}

export const sizeofCERT_TPM_SPECIFICATION_INFO = 16;

export function allocCERT_TPM_SPECIFICATION_INFO(data?: Partial<CERT_TPM_SPECIFICATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_TPM_SPECIFICATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszFamily !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszFamily);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwLevel !== undefined) view.setUint32(8, Number(data.dwLevel), true);
  // 0x0c: u32
  if (data?.dwRevision !== undefined) view.setUint32(12, Number(data.dwRevision), true);
  return buf;
}

export class CERT_TPM_SPECIFICATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszFamily(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwLevel(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwRevision(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: buffer
  set pwszFamily(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set dwLevel(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwRevision(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_OID_FUNC_ENTRY (size: 16)
 */
export interface CRYPT_OID_FUNC_ENTRY {
  /** Windows.Win32.Foundation.PSTR */
  pszOID: string | null | Uint8Array;
  /** ptr */
  pvFuncAddr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_OID_FUNC_ENTRY = 16;

export function allocCRYPT_OID_FUNC_ENTRY(data?: Partial<CRYPT_OID_FUNC_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_OID_FUNC_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszOID !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszOID);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pvFuncAddr !== undefined) view.setBigUint64(8, data.pvFuncAddr === null ? 0n : BigInt(util.toPointer(data.pvFuncAddr)), true);
  return buf;
}

export class CRYPT_OID_FUNC_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszOID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pvFuncAddr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszOID(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set pvFuncAddr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_OID_INFO (size: 48)
 */
export interface CRYPT_OID_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PSTR */
  pszOID: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwGroupId: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  ExtraInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_OID_INFO = 48;

export function allocCRYPT_OID_INFO(data?: Partial<CRYPT_OID_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_OID_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszOID !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszOID);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwGroupId !== undefined) view.setUint32(24, Number(data.dwGroupId), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x28: pointer
  if (data?.ExtraInfo !== undefined) view.setBigUint64(40, data.ExtraInfo === null ? 0n : BigInt(util.toPointer(data.ExtraInfo)), true);
  return buf;
}

export class CRYPT_OID_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszOID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwGroupId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get ExtraInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszOID(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u32
  set dwGroupId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set ExtraInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_STRONG_SIGN_SERIALIZED_INFO (size: 24)
 */
export interface CERT_STRONG_SIGN_SERIALIZED_INFO {
  /** Windows.Win32.Security.Cryptography.CERT_STRONG_SIGN_FLAGS */
  dwFlags: CERT_STRONG_SIGN_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  pwszCNGSignHashAlgids: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszCNGPubKeyMinBitLengths: string | null | Uint8Array | Uint16Array;
}

export const sizeofCERT_STRONG_SIGN_SERIALIZED_INFO = 24;

export function allocCERT_STRONG_SIGN_SERIALIZED_INFO(data?: Partial<CERT_STRONG_SIGN_SERIALIZED_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_STRONG_SIGN_SERIALIZED_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszCNGSignHashAlgids !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszCNGSignHashAlgids);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszCNGPubKeyMinBitLengths !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszCNGPubKeyMinBitLengths);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class CERT_STRONG_SIGN_SERIALIZED_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszCNGSignHashAlgids(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszCNGPubKeyMinBitLengths(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszCNGSignHashAlgids(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pwszCNGPubKeyMinBitLengths(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_STRONG_SIGN_PARA (size: 16)
 */
export interface CERT_STRONG_SIGN_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwInfoChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_STRONG_SIGN_PARA = 16;

export function allocCERT_STRONG_SIGN_PARA(data?: Partial<CERT_STRONG_SIGN_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_STRONG_SIGN_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwInfoChoice !== undefined) view.setUint32(4, Number(data.dwInfoChoice), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CERT_STRONG_SIGN_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwInfoChoice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwInfoChoice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_ISSUER_SERIAL_NUMBER (size: 16)
 */
export interface CERT_ISSUER_SERIAL_NUMBER {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Issuer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SerialNumber: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_ISSUER_SERIAL_NUMBER = 16;

export function allocCERT_ISSUER_SERIAL_NUMBER(data?: Partial<CERT_ISSUER_SERIAL_NUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_ISSUER_SERIAL_NUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Issuer !== undefined) view.setBigUint64(0, data.Issuer === null ? 0n : BigInt(util.toPointer(data.Issuer)), true);
  // 0x08: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(8, data.SerialNumber === null ? 0n : BigInt(util.toPointer(data.SerialNumber)), true);
  return buf;
}

export class CERT_ISSUER_SERIAL_NUMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Issuer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Issuer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_ID (size: 16)
 */
export interface CERT_ID {
  /** Windows.Win32.Security.Cryptography.CERT_ID_OPTION */
  dwIdChoice: CERT_ID_OPTION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_ID = 16;

export function allocCERT_ID(data?: Partial<CERT_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_ID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIdChoice !== undefined) view.setUint32(0, Number(data.dwIdChoice), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CERT_IDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwIdChoice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwIdChoice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_SIGNER_ENCODE_INFO (size: 80)
 */
export interface CMSG_SIGNER_ENCODE_INFO {
  /** u32 */
  cbSize: number;
  /** ptr */
  pCertInfo: Deno.PointerValue | Uint8Array | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwKeySpec: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvHashAuxInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cAuthAttr: number;
  /** ptr */
  rgAuthAttr: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cUnauthAttr: number;
  /** ptr */
  rgUnauthAttr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_SIGNER_ENCODE_INFO = 80;

export function allocCMSG_SIGNER_ENCODE_INFO(data?: Partial<CMSG_SIGNER_ENCODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_SIGNER_ENCODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCertInfo !== undefined) view.setBigUint64(8, data.pCertInfo === null ? 0n : BigInt(util.toPointer(data.pCertInfo)), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x18: u32
  if (data?.dwKeySpec !== undefined) view.setUint32(24, Number(data.dwKeySpec), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(32, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x28: pointer
  if (data?.pvHashAuxInfo !== undefined) view.setBigUint64(40, data.pvHashAuxInfo === null ? 0n : BigInt(util.toPointer(data.pvHashAuxInfo)), true);
  // 0x30: u32
  if (data?.cAuthAttr !== undefined) view.setUint32(48, Number(data.cAuthAttr), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rgAuthAttr !== undefined) view.setBigUint64(56, data.rgAuthAttr === null ? 0n : BigInt(util.toPointer(data.rgAuthAttr)), true);
  // 0x40: u32
  if (data?.cUnauthAttr !== undefined) view.setUint32(64, Number(data.cUnauthAttr), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.rgUnauthAttr !== undefined) view.setBigUint64(72, data.rgUnauthAttr === null ? 0n : BigInt(util.toPointer(data.rgUnauthAttr)), true);
  return buf;
}

export class CMSG_SIGNER_ENCODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pCertInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwKeySpec(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pvHashAuxInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cAuthAttr(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get rgAuthAttr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get cUnauthAttr(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get rgUnauthAttr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pCertInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwKeySpec(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pvHashAuxInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set cAuthAttr(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set rgAuthAttr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set cUnauthAttr(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set rgUnauthAttr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_SIGNED_ENCODE_INFO (size: 48)
 */
export interface CMSG_SIGNED_ENCODE_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  cSigners: number;
  /** ptr */
  rgSigners: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cCertEncoded: number;
  /** ptr */
  rgCertEncoded: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cCrlEncoded: number;
  /** ptr */
  rgCrlEncoded: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_SIGNED_ENCODE_INFO = 48;

export function allocCMSG_SIGNED_ENCODE_INFO(data?: Partial<CMSG_SIGNED_ENCODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_SIGNED_ENCODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.cSigners !== undefined) view.setUint32(4, Number(data.cSigners), true);
  // 0x08: pointer
  if (data?.rgSigners !== undefined) view.setBigUint64(8, data.rgSigners === null ? 0n : BigInt(util.toPointer(data.rgSigners)), true);
  // 0x10: u32
  if (data?.cCertEncoded !== undefined) view.setUint32(16, Number(data.cCertEncoded), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgCertEncoded !== undefined) view.setBigUint64(24, data.rgCertEncoded === null ? 0n : BigInt(util.toPointer(data.rgCertEncoded)), true);
  // 0x20: u32
  if (data?.cCrlEncoded !== undefined) view.setUint32(32, Number(data.cCrlEncoded), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgCrlEncoded !== undefined) view.setBigUint64(40, data.rgCrlEncoded === null ? 0n : BigInt(util.toPointer(data.rgCrlEncoded)), true);
  return buf;
}

export class CMSG_SIGNED_ENCODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cSigners(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgSigners(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cCertEncoded(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgCertEncoded(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cCrlEncoded(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rgCrlEncoded(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cSigners(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgSigners(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cCertEncoded(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgCertEncoded(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cCrlEncoded(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rgCrlEncoded(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_ENVELOPED_ENCODE_INFO (size: 48)
 */
export interface CMSG_ENVELOPED_ENCODE_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.HCRYPTPROV_LEGACY */
  hCryptProv: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  ContentEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvEncryptionAuxInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cRecipients: number;
  /** ptr */
  rgpRecipients: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_ENVELOPED_ENCODE_INFO = 48;

export function allocCMSG_ENVELOPED_ENCODE_INFO(data?: Partial<CMSG_ENVELOPED_ENCODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_ENVELOPED_ENCODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hCryptProv !== undefined) view.setBigUint64(8, data.hCryptProv === null ? 0n : BigInt(util.toPointer(data.hCryptProv)), true);
  // 0x10: pointer
  if (data?.ContentEncryptionAlgorithm !== undefined) view.setBigUint64(16, data.ContentEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.ContentEncryptionAlgorithm)), true);
  // 0x18: pointer
  if (data?.pvEncryptionAuxInfo !== undefined) view.setBigUint64(24, data.pvEncryptionAuxInfo === null ? 0n : BigInt(util.toPointer(data.pvEncryptionAuxInfo)), true);
  // 0x20: u32
  if (data?.cRecipients !== undefined) view.setUint32(32, Number(data.cRecipients), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgpRecipients !== undefined) view.setBigUint64(40, data.rgpRecipients === null ? 0n : BigInt(util.toPointer(data.rgpRecipients)), true);
  return buf;
}

export class CMSG_ENVELOPED_ENCODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hCryptProv(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ContentEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pvEncryptionAuxInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cRecipients(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rgpRecipients(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hCryptProv(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ContentEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pvEncryptionAuxInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cRecipients(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rgpRecipients(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO (size: 48)
 */
export interface CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  KeyEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvKeyEncryptionAuxInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.HCRYPTPROV_LEGACY */
  hCryptProv: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  RecipientPublicKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CERT_ID */
  RecipientId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = 48;

export function allocCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO(data?: Partial<CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyEncryptionAlgorithm !== undefined) view.setBigUint64(8, data.KeyEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.KeyEncryptionAlgorithm)), true);
  // 0x10: pointer
  if (data?.pvKeyEncryptionAuxInfo !== undefined) view.setBigUint64(16, data.pvKeyEncryptionAuxInfo === null ? 0n : BigInt(util.toPointer(data.pvKeyEncryptionAuxInfo)), true);
  // 0x18: pointer
  if (data?.hCryptProv !== undefined) view.setBigUint64(24, data.hCryptProv === null ? 0n : BigInt(util.toPointer(data.hCryptProv)), true);
  // 0x20: pointer
  if (data?.RecipientPublicKey !== undefined) view.setBigUint64(32, data.RecipientPublicKey === null ? 0n : BigInt(util.toPointer(data.RecipientPublicKey)), true);
  // 0x28: pointer
  if (data?.RecipientId !== undefined) view.setBigUint64(40, data.RecipientId === null ? 0n : BigInt(util.toPointer(data.RecipientId)), true);
  return buf;
}

export class CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pvKeyEncryptionAuxInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get hCryptProv(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get RecipientPublicKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get RecipientId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pvKeyEncryptionAuxInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set hCryptProv(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set RecipientPublicKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set RecipientId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO (size: 40)
 */
export interface CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  RecipientPublicKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CERT_ID */
  RecipientId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  Date: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pOtherAttr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = 40;

export function allocCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO(data?: Partial<CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.RecipientPublicKey !== undefined) view.setBigUint64(8, data.RecipientPublicKey === null ? 0n : BigInt(util.toPointer(data.RecipientPublicKey)), true);
  // 0x10: pointer
  if (data?.RecipientId !== undefined) view.setBigUint64(16, data.RecipientId === null ? 0n : BigInt(util.toPointer(data.RecipientId)), true);
  // 0x18: pointer
  if (data?.Date !== undefined) view.setBigUint64(24, data.Date === null ? 0n : BigInt(util.toPointer(data.Date)), true);
  // 0x20: pointer
  if (data?.pOtherAttr !== undefined) view.setBigUint64(32, data.pOtherAttr === null ? 0n : BigInt(util.toPointer(data.pOtherAttr)), true);
  return buf;
}

export class CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get RecipientPublicKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get RecipientId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Date(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pOtherAttr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set RecipientPublicKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set RecipientId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Date(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pOtherAttr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO (size: 88)
 */
export interface CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  KeyEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvKeyEncryptionAuxInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  KeyWrapAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvKeyWrapAuxInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.HCRYPTPROV_LEGACY */
  hCryptProv: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwKeySpec: number;
  /** Windows.Win32.Security.Cryptography.CMSG_KEY_AGREE_OPTION */
  dwKeyChoice: CMSG_KEY_AGREE_OPTION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  UserKeyingMaterial: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cRecipientEncryptedKeys: number;
  /** ptr */
  rgpRecipientEncryptedKeys: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = 88;

export function allocCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO(data?: Partial<CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyEncryptionAlgorithm !== undefined) view.setBigUint64(8, data.KeyEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.KeyEncryptionAlgorithm)), true);
  // 0x10: pointer
  if (data?.pvKeyEncryptionAuxInfo !== undefined) view.setBigUint64(16, data.pvKeyEncryptionAuxInfo === null ? 0n : BigInt(util.toPointer(data.pvKeyEncryptionAuxInfo)), true);
  // 0x18: pointer
  if (data?.KeyWrapAlgorithm !== undefined) view.setBigUint64(24, data.KeyWrapAlgorithm === null ? 0n : BigInt(util.toPointer(data.KeyWrapAlgorithm)), true);
  // 0x20: pointer
  if (data?.pvKeyWrapAuxInfo !== undefined) view.setBigUint64(32, data.pvKeyWrapAuxInfo === null ? 0n : BigInt(util.toPointer(data.pvKeyWrapAuxInfo)), true);
  // 0x28: pointer
  if (data?.hCryptProv !== undefined) view.setBigUint64(40, data.hCryptProv === null ? 0n : BigInt(util.toPointer(data.hCryptProv)), true);
  // 0x30: u32
  if (data?.dwKeySpec !== undefined) view.setUint32(48, Number(data.dwKeySpec), true);
  // 0x34: u32
  if (data?.dwKeyChoice !== undefined) view.setUint32(52, Number(data.dwKeyChoice), true);
  // 0x38: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(56, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x40: pointer
  if (data?.UserKeyingMaterial !== undefined) view.setBigUint64(64, data.UserKeyingMaterial === null ? 0n : BigInt(util.toPointer(data.UserKeyingMaterial)), true);
  // 0x48: u32
  if (data?.cRecipientEncryptedKeys !== undefined) view.setUint32(72, Number(data.cRecipientEncryptedKeys), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.rgpRecipientEncryptedKeys !== undefined) view.setBigUint64(80, data.rgpRecipientEncryptedKeys === null ? 0n : BigInt(util.toPointer(data.rgpRecipientEncryptedKeys)), true);
  return buf;
}

export class CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pvKeyEncryptionAuxInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get KeyWrapAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pvKeyWrapAuxInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get hCryptProv(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwKeySpec(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwKeyChoice(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get UserKeyingMaterial(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get cRecipientEncryptedKeys(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get rgpRecipientEncryptedKeys(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pvKeyEncryptionAuxInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set KeyWrapAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pvKeyWrapAuxInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set hCryptProv(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set dwKeySpec(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwKeyChoice(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set UserKeyingMaterial(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set cRecipientEncryptedKeys(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set rgpRecipientEncryptedKeys(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO (size: 72)
 */
export interface CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  KeyEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvKeyEncryptionAuxInfo: Deno.PointerValue | Uint8Array | null;
  /** usize */
  hCryptProv: Deno.PointerValue;
  /** u32 */
  dwKeyChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  KeyId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  Date: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pOtherAttr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = 72;

export function allocCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO(data?: Partial<CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyEncryptionAlgorithm !== undefined) view.setBigUint64(8, data.KeyEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.KeyEncryptionAlgorithm)), true);
  // 0x10: pointer
  if (data?.pvKeyEncryptionAuxInfo !== undefined) view.setBigUint64(16, data.pvKeyEncryptionAuxInfo === null ? 0n : BigInt(util.toPointer(data.pvKeyEncryptionAuxInfo)), true);
  // 0x18: usize
  if (data?.hCryptProv !== undefined) view.setBigUint64(24, BigInt(data.hCryptProv), true);
  // 0x20: u32
  if (data?.dwKeyChoice !== undefined) view.setUint32(32, Number(data.dwKeyChoice), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x30: pointer
  if (data?.KeyId !== undefined) view.setBigUint64(48, data.KeyId === null ? 0n : BigInt(util.toPointer(data.KeyId)), true);
  // 0x38: pointer
  if (data?.Date !== undefined) view.setBigUint64(56, data.Date === null ? 0n : BigInt(util.toPointer(data.Date)), true);
  // 0x40: pointer
  if (data?.pOtherAttr !== undefined) view.setBigUint64(64, data.pOtherAttr === null ? 0n : BigInt(util.toPointer(data.pOtherAttr)), true);
  return buf;
}

export class CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pvKeyEncryptionAuxInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: usize
  get hCryptProv(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u32
  get dwKeyChoice(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get KeyId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get Date(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get pOtherAttr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pvKeyEncryptionAuxInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: usize
  set hCryptProv(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u32
  set dwKeyChoice(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set KeyId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set Date(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set pOtherAttr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_RECIPIENT_ENCODE_INFO (size: 16)
 */
export interface CMSG_RECIPIENT_ENCODE_INFO {
  /** u32 */
  dwRecipientChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMSG_RECIPIENT_ENCODE_INFO = 16;

export function allocCMSG_RECIPIENT_ENCODE_INFO(data?: Partial<CMSG_RECIPIENT_ENCODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_RECIPIENT_ENCODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRecipientChoice !== undefined) view.setUint32(0, Number(data.dwRecipientChoice), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CMSG_RECIPIENT_ENCODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwRecipientChoice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwRecipientChoice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_RC2_AUX_INFO (size: 8)
 */
export interface CMSG_RC2_AUX_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwBitLen: number;
}

export const sizeofCMSG_RC2_AUX_INFO = 8;

export function allocCMSG_RC2_AUX_INFO(data?: Partial<CMSG_RC2_AUX_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_RC2_AUX_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwBitLen !== undefined) view.setUint32(4, Number(data.dwBitLen), true);
  return buf;
}

export class CMSG_RC2_AUX_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwBitLen(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwBitLen(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_SP3_COMPATIBLE_AUX_INFO (size: 8)
 */
export interface CMSG_SP3_COMPATIBLE_AUX_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofCMSG_SP3_COMPATIBLE_AUX_INFO = 8;

export function allocCMSG_SP3_COMPATIBLE_AUX_INFO(data?: Partial<CMSG_SP3_COMPATIBLE_AUX_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_SP3_COMPATIBLE_AUX_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  return buf;
}

export class CMSG_SP3_COMPATIBLE_AUX_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_RC4_AUX_INFO (size: 8)
 */
export interface CMSG_RC4_AUX_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwBitLen: number;
}

export const sizeofCMSG_RC4_AUX_INFO = 8;

export function allocCMSG_RC4_AUX_INFO(data?: Partial<CMSG_RC4_AUX_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_RC4_AUX_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwBitLen !== undefined) view.setUint32(4, Number(data.dwBitLen), true);
  return buf;
}

export class CMSG_RC4_AUX_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwBitLen(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwBitLen(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO (size: 24)
 */
export interface CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CMSG_SIGNED_ENCODE_INFO */
  SignedInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CMSG_ENVELOPED_ENCODE_INFO */
  EnvelopedInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = 24;

export function allocCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO(data?: Partial<CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SignedInfo !== undefined) view.setBigUint64(8, data.SignedInfo === null ? 0n : BigInt(util.toPointer(data.SignedInfo)), true);
  // 0x10: pointer
  if (data?.EnvelopedInfo !== undefined) view.setBigUint64(16, data.EnvelopedInfo === null ? 0n : BigInt(util.toPointer(data.EnvelopedInfo)), true);
  return buf;
}

export class CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SignedInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get EnvelopedInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SignedInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set EnvelopedInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_HASHED_ENCODE_INFO (size: 32)
 */
export interface CMSG_HASHED_ENCODE_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.HCRYPTPROV_LEGACY */
  hCryptProv: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvHashAuxInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_HASHED_ENCODE_INFO = 32;

export function allocCMSG_HASHED_ENCODE_INFO(data?: Partial<CMSG_HASHED_ENCODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_HASHED_ENCODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hCryptProv !== undefined) view.setBigUint64(8, data.hCryptProv === null ? 0n : BigInt(util.toPointer(data.hCryptProv)), true);
  // 0x10: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(16, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x18: pointer
  if (data?.pvHashAuxInfo !== undefined) view.setBigUint64(24, data.pvHashAuxInfo === null ? 0n : BigInt(util.toPointer(data.pvHashAuxInfo)), true);
  return buf;
}

export class CMSG_HASHED_ENCODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hCryptProv(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pvHashAuxInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hCryptProv(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pvHashAuxInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_ENCRYPTED_ENCODE_INFO (size: 24)
 */
export interface CMSG_ENCRYPTED_ENCODE_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  ContentEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvEncryptionAuxInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_ENCRYPTED_ENCODE_INFO = 24;

export function allocCMSG_ENCRYPTED_ENCODE_INFO(data?: Partial<CMSG_ENCRYPTED_ENCODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_ENCRYPTED_ENCODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ContentEncryptionAlgorithm !== undefined) view.setBigUint64(8, data.ContentEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.ContentEncryptionAlgorithm)), true);
  // 0x10: pointer
  if (data?.pvEncryptionAuxInfo !== undefined) view.setBigUint64(16, data.pvEncryptionAuxInfo === null ? 0n : BigInt(util.toPointer(data.pvEncryptionAuxInfo)), true);
  return buf;
}

export class CMSG_ENCRYPTED_ENCODE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ContentEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pvEncryptionAuxInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ContentEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pvEncryptionAuxInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_STREAM_INFO (size: 24)
 */
export interface CMSG_STREAM_INFO {
  /** u32 */
  cbContent: number;
  /** Windows.Win32.Security.Cryptography.PFN_CMSG_STREAM_OUTPUT */
  pfnStreamOutput: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvArg: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_STREAM_INFO = 24;

export function allocCMSG_STREAM_INFO(data?: Partial<CMSG_STREAM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_STREAM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbContent !== undefined) view.setUint32(0, Number(data.cbContent), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfnStreamOutput !== undefined) view.setBigUint64(8, data.pfnStreamOutput === null ? 0n : BigInt(util.toPointer(data.pfnStreamOutput)), true);
  // 0x10: pointer
  if (data?.pvArg !== undefined) view.setBigUint64(16, data.pvArg === null ? 0n : BigInt(util.toPointer(data.pvArg)), true);
  return buf;
}

export class CMSG_STREAM_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbContent(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pfnStreamOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pvArg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbContent(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pfnStreamOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pvArg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_SIGNER_INFO (size: 64)
 */
export interface CMSG_SIGNER_INFO {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Issuer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SerialNumber: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EncryptedHash: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTES */
  AuthAttrs: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTES */
  UnauthAttrs: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMSG_SIGNER_INFO = 64;

export function allocCMSG_SIGNER_INFO(data?: Partial<CMSG_SIGNER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_SIGNER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Issuer !== undefined) view.setBigUint64(8, data.Issuer === null ? 0n : BigInt(util.toPointer(data.Issuer)), true);
  // 0x10: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(16, data.SerialNumber === null ? 0n : BigInt(util.toPointer(data.SerialNumber)), true);
  // 0x18: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(24, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x20: pointer
  if (data?.HashEncryptionAlgorithm !== undefined) view.setBigUint64(32, data.HashEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashEncryptionAlgorithm)), true);
  // 0x28: pointer
  if (data?.EncryptedHash !== undefined) view.setBigUint64(40, data.EncryptedHash === null ? 0n : BigInt(util.toPointer(data.EncryptedHash)), true);
  // 0x30: pointer
  if (data?.AuthAttrs !== undefined) view.setBigUint64(48, data.AuthAttrs === null ? 0n : BigInt(util.toPointer(data.AuthAttrs)), true);
  // 0x38: pointer
  if (data?.UnauthAttrs !== undefined) view.setBigUint64(56, data.UnauthAttrs === null ? 0n : BigInt(util.toPointer(data.UnauthAttrs)), true);
  return buf;
}

export class CMSG_SIGNER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Issuer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get HashEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get EncryptedHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get AuthAttrs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get UnauthAttrs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Issuer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set HashEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set EncryptedHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set AuthAttrs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set UnauthAttrs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_CMS_SIGNER_INFO (size: 56)
 */
export interface CMSG_CMS_SIGNER_INFO {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Cryptography.CERT_ID */
  SignerId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EncryptedHash: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTES */
  AuthAttrs: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTES */
  UnauthAttrs: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMSG_CMS_SIGNER_INFO = 56;

export function allocCMSG_CMS_SIGNER_INFO(data?: Partial<CMSG_CMS_SIGNER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_CMS_SIGNER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SignerId !== undefined) view.setBigUint64(8, data.SignerId === null ? 0n : BigInt(util.toPointer(data.SignerId)), true);
  // 0x10: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(16, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x18: pointer
  if (data?.HashEncryptionAlgorithm !== undefined) view.setBigUint64(24, data.HashEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashEncryptionAlgorithm)), true);
  // 0x20: pointer
  if (data?.EncryptedHash !== undefined) view.setBigUint64(32, data.EncryptedHash === null ? 0n : BigInt(util.toPointer(data.EncryptedHash)), true);
  // 0x28: pointer
  if (data?.AuthAttrs !== undefined) view.setBigUint64(40, data.AuthAttrs === null ? 0n : BigInt(util.toPointer(data.AuthAttrs)), true);
  // 0x30: pointer
  if (data?.UnauthAttrs !== undefined) view.setBigUint64(48, data.UnauthAttrs === null ? 0n : BigInt(util.toPointer(data.UnauthAttrs)), true);
  return buf;
}

export class CMSG_CMS_SIGNER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SignerId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get HashEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get EncryptedHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get AuthAttrs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get UnauthAttrs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SignerId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set HashEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set EncryptedHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set AuthAttrs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set UnauthAttrs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_KEY_TRANS_RECIPIENT_INFO (size: 32)
 */
export interface CMSG_KEY_TRANS_RECIPIENT_INFO {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Cryptography.CERT_ID */
  RecipientId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  KeyEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EncryptedKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMSG_KEY_TRANS_RECIPIENT_INFO = 32;

export function allocCMSG_KEY_TRANS_RECIPIENT_INFO(data?: Partial<CMSG_KEY_TRANS_RECIPIENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_KEY_TRANS_RECIPIENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.RecipientId !== undefined) view.setBigUint64(8, data.RecipientId === null ? 0n : BigInt(util.toPointer(data.RecipientId)), true);
  // 0x10: pointer
  if (data?.KeyEncryptionAlgorithm !== undefined) view.setBigUint64(16, data.KeyEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.KeyEncryptionAlgorithm)), true);
  // 0x18: pointer
  if (data?.EncryptedKey !== undefined) view.setBigUint64(24, data.EncryptedKey === null ? 0n : BigInt(util.toPointer(data.EncryptedKey)), true);
  return buf;
}

export class CMSG_KEY_TRANS_RECIPIENT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get RecipientId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get KeyEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get EncryptedKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set RecipientId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set KeyEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set EncryptedKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_RECIPIENT_ENCRYPTED_KEY_INFO (size: 32)
 */
export interface CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {
  /** Windows.Win32.Security.Cryptography.CERT_ID */
  RecipientId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EncryptedKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  Date: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pOtherAttr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_RECIPIENT_ENCRYPTED_KEY_INFO = 32;

export function allocCMSG_RECIPIENT_ENCRYPTED_KEY_INFO(data?: Partial<CMSG_RECIPIENT_ENCRYPTED_KEY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_RECIPIENT_ENCRYPTED_KEY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RecipientId !== undefined) view.setBigUint64(0, data.RecipientId === null ? 0n : BigInt(util.toPointer(data.RecipientId)), true);
  // 0x08: pointer
  if (data?.EncryptedKey !== undefined) view.setBigUint64(8, data.EncryptedKey === null ? 0n : BigInt(util.toPointer(data.EncryptedKey)), true);
  // 0x10: pointer
  if (data?.Date !== undefined) view.setBigUint64(16, data.Date === null ? 0n : BigInt(util.toPointer(data.Date)), true);
  // 0x18: pointer
  if (data?.pOtherAttr !== undefined) view.setBigUint64(24, data.pOtherAttr === null ? 0n : BigInt(util.toPointer(data.pOtherAttr)), true);
  return buf;
}

export class CMSG_RECIPIENT_ENCRYPTED_KEY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get RecipientId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get EncryptedKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Date(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pOtherAttr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set RecipientId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set EncryptedKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Date(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pOtherAttr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_KEY_AGREE_RECIPIENT_INFO (size: 48)
 */
export interface CMSG_KEY_AGREE_RECIPIENT_INFO {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Cryptography.CMSG_KEY_AGREE_ORIGINATOR */
  dwOriginatorChoice: CMSG_KEY_AGREE_ORIGINATOR;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  UserKeyingMaterial: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  KeyEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cRecipientEncryptedKeys: number;
  /** ptr */
  rgpRecipientEncryptedKeys: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_KEY_AGREE_RECIPIENT_INFO = 48;

export function allocCMSG_KEY_AGREE_RECIPIENT_INFO(data?: Partial<CMSG_KEY_AGREE_RECIPIENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_KEY_AGREE_RECIPIENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwOriginatorChoice !== undefined) view.setUint32(4, Number(data.dwOriginatorChoice), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: pointer
  if (data?.UserKeyingMaterial !== undefined) view.setBigUint64(16, data.UserKeyingMaterial === null ? 0n : BigInt(util.toPointer(data.UserKeyingMaterial)), true);
  // 0x18: pointer
  if (data?.KeyEncryptionAlgorithm !== undefined) view.setBigUint64(24, data.KeyEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.KeyEncryptionAlgorithm)), true);
  // 0x20: u32
  if (data?.cRecipientEncryptedKeys !== undefined) view.setUint32(32, Number(data.cRecipientEncryptedKeys), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgpRecipientEncryptedKeys !== undefined) view.setBigUint64(40, data.rgpRecipientEncryptedKeys === null ? 0n : BigInt(util.toPointer(data.rgpRecipientEncryptedKeys)), true);
  return buf;
}

export class CMSG_KEY_AGREE_RECIPIENT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwOriginatorChoice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get UserKeyingMaterial(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get KeyEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cRecipientEncryptedKeys(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rgpRecipientEncryptedKeys(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwOriginatorChoice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set UserKeyingMaterial(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set KeyEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cRecipientEncryptedKeys(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rgpRecipientEncryptedKeys(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_MAIL_LIST_RECIPIENT_INFO (size: 48)
 */
export interface CMSG_MAIL_LIST_RECIPIENT_INFO {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  KeyId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  KeyEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EncryptedKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  Date: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pOtherAttr: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_MAIL_LIST_RECIPIENT_INFO = 48;

export function allocCMSG_MAIL_LIST_RECIPIENT_INFO(data?: Partial<CMSG_MAIL_LIST_RECIPIENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_MAIL_LIST_RECIPIENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyId !== undefined) view.setBigUint64(8, data.KeyId === null ? 0n : BigInt(util.toPointer(data.KeyId)), true);
  // 0x10: pointer
  if (data?.KeyEncryptionAlgorithm !== undefined) view.setBigUint64(16, data.KeyEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.KeyEncryptionAlgorithm)), true);
  // 0x18: pointer
  if (data?.EncryptedKey !== undefined) view.setBigUint64(24, data.EncryptedKey === null ? 0n : BigInt(util.toPointer(data.EncryptedKey)), true);
  // 0x20: pointer
  if (data?.Date !== undefined) view.setBigUint64(32, data.Date === null ? 0n : BigInt(util.toPointer(data.Date)), true);
  // 0x28: pointer
  if (data?.pOtherAttr !== undefined) view.setBigUint64(40, data.pOtherAttr === null ? 0n : BigInt(util.toPointer(data.pOtherAttr)), true);
  return buf;
}

export class CMSG_MAIL_LIST_RECIPIENT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get KeyEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get EncryptedKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Date(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pOtherAttr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set KeyEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set EncryptedKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Date(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pOtherAttr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_CMS_RECIPIENT_INFO (size: 16)
 */
export interface CMSG_CMS_RECIPIENT_INFO {
  /** u32 */
  dwRecipientChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMSG_CMS_RECIPIENT_INFO = 16;

export function allocCMSG_CMS_RECIPIENT_INFO(data?: Partial<CMSG_CMS_RECIPIENT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_CMS_RECIPIENT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRecipientChoice !== undefined) view.setUint32(0, Number(data.dwRecipientChoice), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CMSG_CMS_RECIPIENT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwRecipientChoice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwRecipientChoice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA (size: 32)
 */
export interface CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.HCRYPTPROV_LEGACY */
  hCryptProv: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwSignerIndex: number;
  /** u32 */
  dwSignerType: number;
  /** ptr */
  pvSigner: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = 32;

export function allocCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA(data?: Partial<CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hCryptProv !== undefined) view.setBigUint64(8, data.hCryptProv === null ? 0n : BigInt(util.toPointer(data.hCryptProv)), true);
  // 0x10: u32
  if (data?.dwSignerIndex !== undefined) view.setUint32(16, Number(data.dwSignerIndex), true);
  // 0x14: u32
  if (data?.dwSignerType !== undefined) view.setUint32(20, Number(data.dwSignerType), true);
  // 0x18: pointer
  if (data?.pvSigner !== undefined) view.setBigUint64(24, data.pvSigner === null ? 0n : BigInt(util.toPointer(data.pvSigner)), true);
  return buf;
}

export class CMSG_CTRL_VERIFY_SIGNATURE_EX_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hCryptProv(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwSignerIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwSignerType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get pvSigner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hCryptProv(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwSignerIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwSignerType(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set pvSigner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_CTRL_DECRYPT_PARA (size: 24)
 */
export interface CMSG_CTRL_DECRYPT_PARA {
  /** u32 */
  cbSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwKeySpec: number;
  /** u32 */
  dwRecipientIndex: number;
}

export const sizeofCMSG_CTRL_DECRYPT_PARA = 24;

export function allocCMSG_CTRL_DECRYPT_PARA(data?: Partial<CMSG_CTRL_DECRYPT_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_CTRL_DECRYPT_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.dwKeySpec !== undefined) view.setUint32(16, Number(data.dwKeySpec), true);
  // 0x14: u32
  if (data?.dwRecipientIndex !== undefined) view.setUint32(20, Number(data.dwRecipientIndex), true);
  return buf;
}

export class CMSG_CTRL_DECRYPT_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwKeySpec(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwRecipientIndex(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwKeySpec(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwRecipientIndex(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_CTRL_KEY_TRANS_DECRYPT_PARA (size: 40)
 */
export interface CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {
  /** u32 */
  cbSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwKeySpec: number;
  /** ptr */
  pKeyTrans: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwRecipientIndex: number;
}

export const sizeofCMSG_CTRL_KEY_TRANS_DECRYPT_PARA = 40;

export function allocCMSG_CTRL_KEY_TRANS_DECRYPT_PARA(data?: Partial<CMSG_CTRL_KEY_TRANS_DECRYPT_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_CTRL_KEY_TRANS_DECRYPT_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.dwKeySpec !== undefined) view.setUint32(16, Number(data.dwKeySpec), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pKeyTrans !== undefined) view.setBigUint64(24, data.pKeyTrans === null ? 0n : BigInt(util.toPointer(data.pKeyTrans)), true);
  // 0x20: u32
  if (data?.dwRecipientIndex !== undefined) view.setUint32(32, Number(data.dwRecipientIndex), true);
  // 0x24: pad4
  return buf;
}

export class CMSG_CTRL_KEY_TRANS_DECRYPT_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwKeySpec(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pKeyTrans(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwRecipientIndex(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwKeySpec(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pKeyTrans(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwRecipientIndex(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_CTRL_KEY_AGREE_DECRYPT_PARA (size: 48)
 */
export interface CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {
  /** u32 */
  cbSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwKeySpec: number;
  /** ptr */
  pKeyAgree: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwRecipientIndex: number;
  /** u32 */
  dwRecipientEncryptedKeyIndex: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  OriginatorPublicKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMSG_CTRL_KEY_AGREE_DECRYPT_PARA = 48;

export function allocCMSG_CTRL_KEY_AGREE_DECRYPT_PARA(data?: Partial<CMSG_CTRL_KEY_AGREE_DECRYPT_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_CTRL_KEY_AGREE_DECRYPT_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.dwKeySpec !== undefined) view.setUint32(16, Number(data.dwKeySpec), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pKeyAgree !== undefined) view.setBigUint64(24, data.pKeyAgree === null ? 0n : BigInt(util.toPointer(data.pKeyAgree)), true);
  // 0x20: u32
  if (data?.dwRecipientIndex !== undefined) view.setUint32(32, Number(data.dwRecipientIndex), true);
  // 0x24: u32
  if (data?.dwRecipientEncryptedKeyIndex !== undefined) view.setUint32(36, Number(data.dwRecipientEncryptedKeyIndex), true);
  // 0x28: pointer
  if (data?.OriginatorPublicKey !== undefined) view.setBigUint64(40, data.OriginatorPublicKey === null ? 0n : BigInt(util.toPointer(data.OriginatorPublicKey)), true);
  return buf;
}

export class CMSG_CTRL_KEY_AGREE_DECRYPT_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwKeySpec(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pKeyAgree(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwRecipientIndex(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwRecipientEncryptedKeyIndex(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get OriginatorPublicKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwKeySpec(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pKeyAgree(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwRecipientIndex(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwRecipientEncryptedKeyIndex(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set OriginatorPublicKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_CTRL_MAIL_LIST_DECRYPT_PARA (size: 40)
 */
export interface CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {
  /** u32 */
  cbSize: number;
  /** usize */
  hCryptProv: Deno.PointerValue;
  /** ptr */
  pMailList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwRecipientIndex: number;
  /** u32 */
  dwKeyChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMSG_CTRL_MAIL_LIST_DECRYPT_PARA = 40;

export function allocCMSG_CTRL_MAIL_LIST_DECRYPT_PARA(data?: Partial<CMSG_CTRL_MAIL_LIST_DECRYPT_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_CTRL_MAIL_LIST_DECRYPT_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.hCryptProv !== undefined) view.setBigUint64(8, BigInt(data.hCryptProv), true);
  // 0x10: pointer
  if (data?.pMailList !== undefined) view.setBigUint64(16, data.pMailList === null ? 0n : BigInt(util.toPointer(data.pMailList)), true);
  // 0x18: u32
  if (data?.dwRecipientIndex !== undefined) view.setUint32(24, Number(data.dwRecipientIndex), true);
  // 0x1c: u32
  if (data?.dwKeyChoice !== undefined) view.setUint32(28, Number(data.dwKeyChoice), true);
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CMSG_CTRL_MAIL_LIST_DECRYPT_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get hCryptProv(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get pMailList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwRecipientIndex(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwKeyChoice(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set hCryptProv(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set pMailList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwRecipientIndex(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwKeyChoice(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA (size: 16)
 */
export interface CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwSignerIndex: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  blob: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = 16;

export function allocCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA(data?: Partial<CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwSignerIndex !== undefined) view.setUint32(4, Number(data.dwSignerIndex), true);
  // 0x08: pointer
  if (data?.blob !== undefined) view.setBigUint64(8, data.blob === null ? 0n : BigInt(util.toPointer(data.blob)), true);
  return buf;
}

export class CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSignerIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get blob(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSignerIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set blob(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA (size: 16)
 */
export interface CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwSignerIndex: number;
  /** u32 */
  dwUnauthAttrIndex: number;
}

export const sizeofCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = 16;

export function allocCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA(data?: Partial<CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwSignerIndex !== undefined) view.setUint32(4, Number(data.dwSignerIndex), true);
  // 0x08: u32
  if (data?.dwUnauthAttrIndex !== undefined) view.setUint32(8, Number(data.dwUnauthAttrIndex), true);
  // 0x0c: pad4
  return buf;
}

export class CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSignerIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwUnauthAttrIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSignerIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwUnauthAttrIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_CONTENT_ENCRYPT_INFO (size: 112)
 */
export interface CMSG_CONTENT_ENCRYPT_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.HCRYPTPROV_LEGACY */
  hCryptProv: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  ContentEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvEncryptionAuxInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cRecipients: number;
  /** ptr */
  rgCmsRecipients: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.PFN_CMSG_ALLOC */
  pfnAlloc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.PFN_CMSG_FREE */
  pfnFree: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwEncryptFlags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fCNG: boolean;
  /** ptr */
  pbCNGContentEncryptKeyObject: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pbContentEncryptKey: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbContentEncryptKey: number;
}

export const sizeofCMSG_CONTENT_ENCRYPT_INFO = 112;

export function allocCMSG_CONTENT_ENCRYPT_INFO(data?: Partial<CMSG_CONTENT_ENCRYPT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_CONTENT_ENCRYPT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hCryptProv !== undefined) view.setBigUint64(8, data.hCryptProv === null ? 0n : BigInt(util.toPointer(data.hCryptProv)), true);
  // 0x10: pointer
  if (data?.ContentEncryptionAlgorithm !== undefined) view.setBigUint64(16, data.ContentEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.ContentEncryptionAlgorithm)), true);
  // 0x18: pointer
  if (data?.pvEncryptionAuxInfo !== undefined) view.setBigUint64(24, data.pvEncryptionAuxInfo === null ? 0n : BigInt(util.toPointer(data.pvEncryptionAuxInfo)), true);
  // 0x20: u32
  if (data?.cRecipients !== undefined) view.setUint32(32, Number(data.cRecipients), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgCmsRecipients !== undefined) view.setBigUint64(40, data.rgCmsRecipients === null ? 0n : BigInt(util.toPointer(data.rgCmsRecipients)), true);
  // 0x30: pointer
  if (data?.pfnAlloc !== undefined) view.setBigUint64(48, data.pfnAlloc === null ? 0n : BigInt(util.toPointer(data.pfnAlloc)), true);
  // 0x38: pointer
  if (data?.pfnFree !== undefined) view.setBigUint64(56, data.pfnFree === null ? 0n : BigInt(util.toPointer(data.pfnFree)), true);
  // 0x40: u32
  if (data?.dwEncryptFlags !== undefined) view.setUint32(64, Number(data.dwEncryptFlags), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(72, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x50: u32
  if (data?.dwFlags !== undefined) view.setUint32(80, Number(data.dwFlags), true);
  // 0x54: i32
  if (data?.fCNG !== undefined) view.setInt32(84, Number(data.fCNG), true);
  // 0x58: pointer
  if (data?.pbCNGContentEncryptKeyObject !== undefined) view.setBigUint64(88, data.pbCNGContentEncryptKeyObject === null ? 0n : BigInt(util.toPointer(data.pbCNGContentEncryptKeyObject)), true);
  // 0x60: pointer
  if (data?.pbContentEncryptKey !== undefined) view.setBigUint64(96, data.pbContentEncryptKey === null ? 0n : BigInt(util.toPointer(data.pbContentEncryptKey)), true);
  // 0x68: u32
  if (data?.cbContentEncryptKey !== undefined) view.setUint32(104, Number(data.cbContentEncryptKey), true);
  // 0x6c: pad4
  return buf;
}

export class CMSG_CONTENT_ENCRYPT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hCryptProv(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ContentEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pvEncryptionAuxInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cRecipients(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rgCmsRecipients(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pfnAlloc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pfnFree(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get dwEncryptFlags(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get dwFlags(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: i32
  get fCNG(): number {
    return this.view.getInt32(84, true);
  }

  // 0x58: pointer
  get pbCNGContentEncryptKeyObject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get pbContentEncryptKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: u32
  get cbContentEncryptKey(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hCryptProv(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ContentEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pvEncryptionAuxInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cRecipients(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rgCmsRecipients(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pfnAlloc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set pfnFree(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set dwEncryptFlags(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set dwFlags(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: i32
  set fCNG(value: number) {
    this.view.setInt32(84, value, true);
  }

  // 0x58: pointer
  set pbCNGContentEncryptKeyObject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set pbContentEncryptKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: u32
  set cbContentEncryptKey(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_KEY_TRANS_ENCRYPT_INFO (size: 32)
 */
export interface CMSG_KEY_TRANS_ENCRYPT_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwRecipientIndex: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  KeyEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EncryptedKey: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofCMSG_KEY_TRANS_ENCRYPT_INFO = 32;

export function allocCMSG_KEY_TRANS_ENCRYPT_INFO(data?: Partial<CMSG_KEY_TRANS_ENCRYPT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_KEY_TRANS_ENCRYPT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwRecipientIndex !== undefined) view.setUint32(4, Number(data.dwRecipientIndex), true);
  // 0x08: pointer
  if (data?.KeyEncryptionAlgorithm !== undefined) view.setBigUint64(8, data.KeyEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.KeyEncryptionAlgorithm)), true);
  // 0x10: pointer
  if (data?.EncryptedKey !== undefined) view.setBigUint64(16, data.EncryptedKey === null ? 0n : BigInt(util.toPointer(data.EncryptedKey)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

export class CMSG_KEY_TRANS_ENCRYPT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwRecipientIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get KeyEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get EncryptedKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwRecipientIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set KeyEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set EncryptedKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_KEY_AGREE_KEY_ENCRYPT_INFO (size: 16)
 */
export interface CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EncryptedKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCMSG_KEY_AGREE_KEY_ENCRYPT_INFO = 16;

export function allocCMSG_KEY_AGREE_KEY_ENCRYPT_INFO(data?: Partial<CMSG_KEY_AGREE_KEY_ENCRYPT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_KEY_AGREE_KEY_ENCRYPT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.EncryptedKey !== undefined) view.setBigUint64(8, data.EncryptedKey === null ? 0n : BigInt(util.toPointer(data.EncryptedKey)), true);
  return buf;
}

export class CMSG_KEY_AGREE_KEY_ENCRYPT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get EncryptedKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set EncryptedKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_KEY_AGREE_ENCRYPT_INFO (size: 64)
 */
export interface CMSG_KEY_AGREE_ENCRYPT_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwRecipientIndex: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  KeyEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  UserKeyingMaterial: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CMSG_KEY_AGREE_ORIGINATOR */
  dwOriginatorChoice: CMSG_KEY_AGREE_ORIGINATOR;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cKeyAgreeKeyEncryptInfo: number;
  /** ptr */
  rgpKeyAgreeKeyEncryptInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofCMSG_KEY_AGREE_ENCRYPT_INFO = 64;

export function allocCMSG_KEY_AGREE_ENCRYPT_INFO(data?: Partial<CMSG_KEY_AGREE_ENCRYPT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_KEY_AGREE_ENCRYPT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwRecipientIndex !== undefined) view.setUint32(4, Number(data.dwRecipientIndex), true);
  // 0x08: pointer
  if (data?.KeyEncryptionAlgorithm !== undefined) view.setBigUint64(8, data.KeyEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.KeyEncryptionAlgorithm)), true);
  // 0x10: pointer
  if (data?.UserKeyingMaterial !== undefined) view.setBigUint64(16, data.UserKeyingMaterial === null ? 0n : BigInt(util.toPointer(data.UserKeyingMaterial)), true);
  // 0x18: u32
  if (data?.dwOriginatorChoice !== undefined) view.setUint32(24, Number(data.dwOriginatorChoice), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x28: u32
  if (data?.cKeyAgreeKeyEncryptInfo !== undefined) view.setUint32(40, Number(data.cKeyAgreeKeyEncryptInfo), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.rgpKeyAgreeKeyEncryptInfo !== undefined) view.setBigUint64(48, data.rgpKeyAgreeKeyEncryptInfo === null ? 0n : BigInt(util.toPointer(data.rgpKeyAgreeKeyEncryptInfo)), true);
  // 0x38: u32
  if (data?.dwFlags !== undefined) view.setUint32(56, Number(data.dwFlags), true);
  // 0x3c: pad4
  return buf;
}

export class CMSG_KEY_AGREE_ENCRYPT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwRecipientIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get KeyEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get UserKeyingMaterial(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwOriginatorChoice(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get cKeyAgreeKeyEncryptInfo(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get rgpKeyAgreeKeyEncryptInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get dwFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwRecipientIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set KeyEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set UserKeyingMaterial(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwOriginatorChoice(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set cKeyAgreeKeyEncryptInfo(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set rgpKeyAgreeKeyEncryptInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set dwFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_MAIL_LIST_ENCRYPT_INFO (size: 32)
 */
export interface CMSG_MAIL_LIST_ENCRYPT_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwRecipientIndex: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  KeyEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EncryptedKey: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofCMSG_MAIL_LIST_ENCRYPT_INFO = 32;

export function allocCMSG_MAIL_LIST_ENCRYPT_INFO(data?: Partial<CMSG_MAIL_LIST_ENCRYPT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_MAIL_LIST_ENCRYPT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwRecipientIndex !== undefined) view.setUint32(4, Number(data.dwRecipientIndex), true);
  // 0x08: pointer
  if (data?.KeyEncryptionAlgorithm !== undefined) view.setBigUint64(8, data.KeyEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.KeyEncryptionAlgorithm)), true);
  // 0x10: pointer
  if (data?.EncryptedKey !== undefined) view.setBigUint64(16, data.EncryptedKey === null ? 0n : BigInt(util.toPointer(data.EncryptedKey)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

export class CMSG_MAIL_LIST_ENCRYPT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwRecipientIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get KeyEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get EncryptedKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwRecipientIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set KeyEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set EncryptedKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CMSG_CNG_CONTENT_DECRYPT_INFO (size: 72)
 */
export interface CMSG_CNG_CONTENT_DECRYPT_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  ContentEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.PFN_CMSG_ALLOC */
  pfnAlloc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.PFN_CMSG_FREE */
  pfnFree: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.NCRYPT_KEY_HANDLE */
  hNCryptKey: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pbContentEncryptKey: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbContentEncryptKey: number;
  /** Windows.Win32.Security.Cryptography.BCRYPT_KEY_HANDLE */
  hCNGContentEncryptKey: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pbCNGContentEncryptKeyObject: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCMSG_CNG_CONTENT_DECRYPT_INFO = 72;

export function allocCMSG_CNG_CONTENT_DECRYPT_INFO(data?: Partial<CMSG_CNG_CONTENT_DECRYPT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCMSG_CNG_CONTENT_DECRYPT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ContentEncryptionAlgorithm !== undefined) view.setBigUint64(8, data.ContentEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.ContentEncryptionAlgorithm)), true);
  // 0x10: pointer
  if (data?.pfnAlloc !== undefined) view.setBigUint64(16, data.pfnAlloc === null ? 0n : BigInt(util.toPointer(data.pfnAlloc)), true);
  // 0x18: pointer
  if (data?.pfnFree !== undefined) view.setBigUint64(24, data.pfnFree === null ? 0n : BigInt(util.toPointer(data.pfnFree)), true);
  // 0x20: pointer
  if (data?.hNCryptKey !== undefined) view.setBigUint64(32, data.hNCryptKey === null ? 0n : BigInt(util.toPointer(data.hNCryptKey)), true);
  // 0x28: pointer
  if (data?.pbContentEncryptKey !== undefined) view.setBigUint64(40, data.pbContentEncryptKey === null ? 0n : BigInt(util.toPointer(data.pbContentEncryptKey)), true);
  // 0x30: u32
  if (data?.cbContentEncryptKey !== undefined) view.setUint32(48, Number(data.cbContentEncryptKey), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.hCNGContentEncryptKey !== undefined) view.setBigUint64(56, data.hCNGContentEncryptKey === null ? 0n : BigInt(util.toPointer(data.hCNGContentEncryptKey)), true);
  // 0x40: pointer
  if (data?.pbCNGContentEncryptKeyObject !== undefined) view.setBigUint64(64, data.pbCNGContentEncryptKeyObject === null ? 0n : BigInt(util.toPointer(data.pbCNGContentEncryptKeyObject)), true);
  return buf;
}

export class CMSG_CNG_CONTENT_DECRYPT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ContentEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pfnAlloc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pfnFree(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get hNCryptKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pbContentEncryptKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cbContentEncryptKey(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get hCNGContentEncryptKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get pbCNGContentEncryptKeyObject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ContentEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pfnAlloc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pfnFree(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set hNCryptKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pbContentEncryptKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set cbContentEncryptKey(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set hCNGContentEncryptKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set pbCNGContentEncryptKeyObject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_CONTEXT (size: 40)
 */
export interface CERT_CONTEXT {
  /** u32 */
  dwCertEncodingType: number;
  /** ptr */
  pbCertEncoded: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbCertEncoded: number;
  /** ptr */
  pCertInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hCertStore: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_CONTEXT = 40;

export function allocCERT_CONTEXT(data?: Partial<CERT_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCertEncodingType !== undefined) view.setUint32(0, Number(data.dwCertEncodingType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbCertEncoded !== undefined) view.setBigUint64(8, data.pbCertEncoded === null ? 0n : BigInt(util.toPointer(data.pbCertEncoded)), true);
  // 0x10: u32
  if (data?.cbCertEncoded !== undefined) view.setUint32(16, Number(data.cbCertEncoded), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pCertInfo !== undefined) view.setBigUint64(24, data.pCertInfo === null ? 0n : BigInt(util.toPointer(data.pCertInfo)), true);
  // 0x20: pointer
  if (data?.hCertStore !== undefined) view.setBigUint64(32, data.hCertStore === null ? 0n : BigInt(util.toPointer(data.hCertStore)), true);
  return buf;
}

export class CERT_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCertEncodingType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbCertEncoded(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbCertEncoded(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pCertInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get hCertStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwCertEncodingType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbCertEncoded(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbCertEncoded(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pCertInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set hCertStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRL_CONTEXT (size: 40)
 */
export interface CRL_CONTEXT {
  /** u32 */
  dwCertEncodingType: number;
  /** ptr */
  pbCrlEncoded: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbCrlEncoded: number;
  /** ptr */
  pCrlInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hCertStore: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRL_CONTEXT = 40;

export function allocCRL_CONTEXT(data?: Partial<CRL_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRL_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCertEncodingType !== undefined) view.setUint32(0, Number(data.dwCertEncodingType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbCrlEncoded !== undefined) view.setBigUint64(8, data.pbCrlEncoded === null ? 0n : BigInt(util.toPointer(data.pbCrlEncoded)), true);
  // 0x10: u32
  if (data?.cbCrlEncoded !== undefined) view.setUint32(16, Number(data.cbCrlEncoded), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pCrlInfo !== undefined) view.setBigUint64(24, data.pCrlInfo === null ? 0n : BigInt(util.toPointer(data.pCrlInfo)), true);
  // 0x20: pointer
  if (data?.hCertStore !== undefined) view.setBigUint64(32, data.hCertStore === null ? 0n : BigInt(util.toPointer(data.hCertStore)), true);
  return buf;
}

export class CRL_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCertEncodingType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbCrlEncoded(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbCrlEncoded(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pCrlInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get hCertStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwCertEncodingType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbCrlEncoded(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbCrlEncoded(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pCrlInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set hCertStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CTL_CONTEXT (size: 64)
 */
export interface CTL_CONTEXT {
  /** u32 */
  dwMsgAndCertEncodingType: number;
  /** ptr */
  pbCtlEncoded: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbCtlEncoded: number;
  /** ptr */
  pCtlInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hCertStore: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  hCryptMsg: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pbCtlContent: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbCtlContent: number;
}

export const sizeofCTL_CONTEXT = 64;

export function allocCTL_CONTEXT(data?: Partial<CTL_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCTL_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMsgAndCertEncodingType !== undefined) view.setUint32(0, Number(data.dwMsgAndCertEncodingType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbCtlEncoded !== undefined) view.setBigUint64(8, data.pbCtlEncoded === null ? 0n : BigInt(util.toPointer(data.pbCtlEncoded)), true);
  // 0x10: u32
  if (data?.cbCtlEncoded !== undefined) view.setUint32(16, Number(data.cbCtlEncoded), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pCtlInfo !== undefined) view.setBigUint64(24, data.pCtlInfo === null ? 0n : BigInt(util.toPointer(data.pCtlInfo)), true);
  // 0x20: pointer
  if (data?.hCertStore !== undefined) view.setBigUint64(32, data.hCertStore === null ? 0n : BigInt(util.toPointer(data.hCertStore)), true);
  // 0x28: pointer
  if (data?.hCryptMsg !== undefined) view.setBigUint64(40, data.hCryptMsg === null ? 0n : BigInt(util.toPointer(data.hCryptMsg)), true);
  // 0x30: pointer
  if (data?.pbCtlContent !== undefined) view.setBigUint64(48, data.pbCtlContent === null ? 0n : BigInt(util.toPointer(data.pbCtlContent)), true);
  // 0x38: u32
  if (data?.cbCtlContent !== undefined) view.setUint32(56, Number(data.cbCtlContent), true);
  // 0x3c: pad4
  return buf;
}

export class CTL_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMsgAndCertEncodingType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbCtlEncoded(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbCtlEncoded(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pCtlInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get hCertStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get hCryptMsg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pbCtlContent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get cbCtlContent(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set dwMsgAndCertEncodingType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbCtlEncoded(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbCtlEncoded(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pCtlInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set hCertStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set hCryptMsg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pbCtlContent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set cbCtlContent(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_KEY_PROV_PARAM (size: 24)
 */
export interface CRYPT_KEY_PROV_PARAM {
  /** u32 */
  dwParam: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbData: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofCRYPT_KEY_PROV_PARAM = 24;

export function allocCRYPT_KEY_PROV_PARAM(data?: Partial<CRYPT_KEY_PROV_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_KEY_PROV_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwParam !== undefined) view.setUint32(0, Number(data.dwParam), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbData !== undefined) view.setBigUint64(8, data.pbData === null ? 0n : BigInt(util.toPointer(data.pbData)), true);
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  return buf;
}

export class CRYPT_KEY_PROV_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwParam(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set dwParam(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFlags(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_KEY_PROV_INFO (size: 48)
 */
export interface CRYPT_KEY_PROV_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwszContainerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszProvName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwProvType: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_KEY_FLAGS */
  dwFlags: CRYPT_KEY_FLAGS;
  /** u32 */
  cProvParam: number;
  /** ptr */
  rgProvParam: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwKeySpec: number;
}

export const sizeofCRYPT_KEY_PROV_INFO = 48;

export function allocCRYPT_KEY_PROV_INFO(data?: Partial<CRYPT_KEY_PROV_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_KEY_PROV_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszContainerName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszContainerName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwszProvName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszProvName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwProvType !== undefined) view.setUint32(16, Number(data.dwProvType), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  // 0x18: u32
  if (data?.cProvParam !== undefined) view.setUint32(24, Number(data.cProvParam), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgProvParam !== undefined) view.setBigUint64(32, data.rgProvParam === null ? 0n : BigInt(util.toPointer(data.rgProvParam)), true);
  // 0x28: u32
  if (data?.dwKeySpec !== undefined) view.setUint32(40, Number(data.dwKeySpec), true);
  // 0x2c: pad4
  return buf;
}

export class CRYPT_KEY_PROV_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszContainerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pwszProvName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwProvType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cProvParam(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgProvParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwKeySpec(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: buffer
  set pwszContainerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pwszProvName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set dwProvType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cProvParam(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgProvParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set dwKeySpec(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CERT_KEY_CONTEXT (size: 24)
 */
export interface CERT_KEY_CONTEXT {
  /** u32 */
  cbSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwKeySpec: number;
}

export const sizeofCERT_KEY_CONTEXT = 24;

export function allocCERT_KEY_CONTEXT(data?: Partial<CERT_KEY_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_KEY_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.dwKeySpec !== undefined) view.setUint32(16, Number(data.dwKeySpec), true);
  // 0x14: pad4
  return buf;
}

export class CERT_KEY_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwKeySpec(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwKeySpec(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.ROOT_INFO_LUID (size: 8)
 */
export interface ROOT_INFO_LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofROOT_INFO_LUID = 8;

export function allocROOT_INFO_LUID(data?: Partial<ROOT_INFO_LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofROOT_INFO_LUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

export class ROOT_INFO_LUIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LowPart(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get HighPart(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set LowPart(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set HighPart(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_SMART_CARD_ROOT_INFO (size: 16)
 */
export interface CRYPT_SMART_CARD_ROOT_INFO {
  /** array */
  rgbCardID: Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.ROOT_INFO_LUID */
  luid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_SMART_CARD_ROOT_INFO = 16;

export function allocCRYPT_SMART_CARD_ROOT_INFO(data?: Partial<CRYPT_SMART_CARD_ROOT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_SMART_CARD_ROOT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rgbCardID !== undefined) view.setBigUint64(0, data.rgbCardID === null ? 0n : BigInt(util.toPointer(data.rgbCardID)), true);
  // 0x08: pointer
  if (data?.luid !== undefined) view.setBigUint64(8, data.luid === null ? 0n : BigInt(util.toPointer(data.luid)), true);
  return buf;
}

export class CRYPT_SMART_CARD_ROOT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rgbCardID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get luid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set rgbCardID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set luid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_SYSTEM_STORE_RELOCATE_PARA (size: 16)
 */
export interface CERT_SYSTEM_STORE_RELOCATE_PARA {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_SYSTEM_STORE_RELOCATE_PARA = 16;

export function allocCERT_SYSTEM_STORE_RELOCATE_PARA(data?: Partial<CERT_SYSTEM_STORE_RELOCATE_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SYSTEM_STORE_RELOCATE_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

export class CERT_SYSTEM_STORE_RELOCATE_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

export type HKEY = Deno.PointerValue;

/**
 * Windows.Win32.Security.Cryptography.CERT_REGISTRY_STORE_CLIENT_GPT_PARA (size: 16)
 */
export interface CERT_REGISTRY_STORE_CLIENT_GPT_PARA {
  /** Windows.Win32.System.Registry.HKEY */
  hKeyBase: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszRegPath: string | null | Uint8Array | Uint16Array;
}

export const sizeofCERT_REGISTRY_STORE_CLIENT_GPT_PARA = 16;

export function allocCERT_REGISTRY_STORE_CLIENT_GPT_PARA(data?: Partial<CERT_REGISTRY_STORE_CLIENT_GPT_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_REGISTRY_STORE_CLIENT_GPT_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hKeyBase !== undefined) view.setBigUint64(0, data.hKeyBase === null ? 0n : BigInt(util.toPointer(data.hKeyBase)), true);
  // 0x08: buffer
  if (data?.pwszRegPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszRegPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class CERT_REGISTRY_STORE_CLIENT_GPT_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hKeyBase(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pwszRegPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hKeyBase(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set pwszRegPath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_REGISTRY_STORE_ROAMING_PARA (size: 16)
 */
export interface CERT_REGISTRY_STORE_ROAMING_PARA {
  /** Windows.Win32.System.Registry.HKEY */
  hKey: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszStoreDirectory: string | null | Uint8Array | Uint16Array;
}

export const sizeofCERT_REGISTRY_STORE_ROAMING_PARA = 16;

export function allocCERT_REGISTRY_STORE_ROAMING_PARA(data?: Partial<CERT_REGISTRY_STORE_ROAMING_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_REGISTRY_STORE_ROAMING_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hKey !== undefined) view.setBigUint64(0, data.hKey === null ? 0n : BigInt(util.toPointer(data.hKey)), true);
  // 0x08: buffer
  if (data?.pwszStoreDirectory !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszStoreDirectory);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class CERT_REGISTRY_STORE_ROAMING_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pwszStoreDirectory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set pwszStoreDirectory(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_LDAP_STORE_OPENED_PARA (size: 16)
 */
export interface CERT_LDAP_STORE_OPENED_PARA {
  /** ptr */
  pvLdapSessionHandle: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszLdapUrl: string | null | Uint8Array | Uint16Array;
}

export const sizeofCERT_LDAP_STORE_OPENED_PARA = 16;

export function allocCERT_LDAP_STORE_OPENED_PARA(data?: Partial<CERT_LDAP_STORE_OPENED_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_LDAP_STORE_OPENED_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pvLdapSessionHandle !== undefined) view.setBigUint64(0, data.pvLdapSessionHandle === null ? 0n : BigInt(util.toPointer(data.pvLdapSessionHandle)), true);
  // 0x08: buffer
  if (data?.pwszLdapUrl !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszLdapUrl);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class CERT_LDAP_STORE_OPENED_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pvLdapSessionHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pwszLdapUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pvLdapSessionHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set pwszLdapUrl(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_STORE_PROV_INFO (size: 40)
 */
export interface CERT_STORE_PROV_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  cStoreProvFunc: number;
  /** ptr */
  rgpvStoreProvFunc: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.HCERTSTOREPROV */
  hStoreProv: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CERT_STORE_PROV_FLAGS */
  dwStoreProvFlags: CERT_STORE_PROV_FLAGS;
  /** ptr */
  hStoreProvFuncAddr2: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_STORE_PROV_INFO = 40;

export function allocCERT_STORE_PROV_INFO(data?: Partial<CERT_STORE_PROV_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_STORE_PROV_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.cStoreProvFunc !== undefined) view.setUint32(4, Number(data.cStoreProvFunc), true);
  // 0x08: pointer
  if (data?.rgpvStoreProvFunc !== undefined) view.setBigUint64(8, data.rgpvStoreProvFunc === null ? 0n : BigInt(util.toPointer(data.rgpvStoreProvFunc)), true);
  // 0x10: pointer
  if (data?.hStoreProv !== undefined) view.setBigUint64(16, data.hStoreProv === null ? 0n : BigInt(util.toPointer(data.hStoreProv)), true);
  // 0x18: u32
  if (data?.dwStoreProvFlags !== undefined) view.setUint32(24, Number(data.dwStoreProvFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.hStoreProvFuncAddr2 !== undefined) view.setBigUint64(32, data.hStoreProvFuncAddr2 === null ? 0n : BigInt(util.toPointer(data.hStoreProvFuncAddr2)), true);
  return buf;
}

export class CERT_STORE_PROV_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cStoreProvFunc(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgpvStoreProvFunc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hStoreProv(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwStoreProvFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get hStoreProvFuncAddr2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cStoreProvFunc(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgpvStoreProvFunc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hStoreProv(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwStoreProvFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set hStoreProvFuncAddr2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_STORE_PROV_FIND_INFO (size: 24)
 */
export interface CERT_STORE_PROV_FIND_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMsgAndCertEncodingType: number;
  /** u32 */
  dwFindFlags: number;
  /** u32 */
  dwFindType: number;
  /** ptr */
  pvFindPara: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_STORE_PROV_FIND_INFO = 24;

export function allocCERT_STORE_PROV_FIND_INFO(data?: Partial<CERT_STORE_PROV_FIND_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_STORE_PROV_FIND_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMsgAndCertEncodingType !== undefined) view.setUint32(4, Number(data.dwMsgAndCertEncodingType), true);
  // 0x08: u32
  if (data?.dwFindFlags !== undefined) view.setUint32(8, Number(data.dwFindFlags), true);
  // 0x0c: u32
  if (data?.dwFindType !== undefined) view.setUint32(12, Number(data.dwFindType), true);
  // 0x10: pointer
  if (data?.pvFindPara !== undefined) view.setBigUint64(16, data.pvFindPara === null ? 0n : BigInt(util.toPointer(data.pvFindPara)), true);
  return buf;
}

export class CERT_STORE_PROV_FIND_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMsgAndCertEncodingType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFindFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFindType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pvFindPara(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMsgAndCertEncodingType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFindFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFindType(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pvFindPara(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRL_FIND_ISSUED_FOR_PARA (size: 16)
 */
export interface CRL_FIND_ISSUED_FOR_PARA {
  /** ptr */
  pSubjectCert: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIssuerCert: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRL_FIND_ISSUED_FOR_PARA = 16;

export function allocCRL_FIND_ISSUED_FOR_PARA(data?: Partial<CRL_FIND_ISSUED_FOR_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRL_FIND_ISSUED_FOR_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSubjectCert !== undefined) view.setBigUint64(0, data.pSubjectCert === null ? 0n : BigInt(util.toPointer(data.pSubjectCert)), true);
  // 0x08: pointer
  if (data?.pIssuerCert !== undefined) view.setBigUint64(8, data.pIssuerCert === null ? 0n : BigInt(util.toPointer(data.pIssuerCert)), true);
  return buf;
}

export class CRL_FIND_ISSUED_FOR_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pSubjectCert(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pIssuerCert(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pSubjectCert(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pIssuerCert(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CTL_ANY_SUBJECT_INFO (size: 16)
 */
export interface CTL_ANY_SUBJECT_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  SubjectAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SubjectIdentifier: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCTL_ANY_SUBJECT_INFO = 16;

export function allocCTL_ANY_SUBJECT_INFO(data?: Partial<CTL_ANY_SUBJECT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCTL_ANY_SUBJECT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SubjectAlgorithm !== undefined) view.setBigUint64(0, data.SubjectAlgorithm === null ? 0n : BigInt(util.toPointer(data.SubjectAlgorithm)), true);
  // 0x08: pointer
  if (data?.SubjectIdentifier !== undefined) view.setBigUint64(8, data.SubjectIdentifier === null ? 0n : BigInt(util.toPointer(data.SubjectIdentifier)), true);
  return buf;
}

export class CTL_ANY_SUBJECT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SubjectAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SubjectIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SubjectAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SubjectIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CTL_FIND_USAGE_PARA (size: 32)
 */
export interface CTL_FIND_USAGE_PARA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CTL_USAGE */
  SubjectUsage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  ListIdentifier: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pSigner: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCTL_FIND_USAGE_PARA = 32;

export function allocCTL_FIND_USAGE_PARA(data?: Partial<CTL_FIND_USAGE_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCTL_FIND_USAGE_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SubjectUsage !== undefined) view.setBigUint64(8, data.SubjectUsage === null ? 0n : BigInt(util.toPointer(data.SubjectUsage)), true);
  // 0x10: pointer
  if (data?.ListIdentifier !== undefined) view.setBigUint64(16, data.ListIdentifier === null ? 0n : BigInt(util.toPointer(data.ListIdentifier)), true);
  // 0x18: pointer
  if (data?.pSigner !== undefined) view.setBigUint64(24, data.pSigner === null ? 0n : BigInt(util.toPointer(data.pSigner)), true);
  return buf;
}

export class CTL_FIND_USAGE_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SubjectUsage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ListIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pSigner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SubjectUsage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ListIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pSigner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CTL_FIND_SUBJECT_PARA (size: 32)
 */
export interface CTL_FIND_SUBJECT_PARA {
  /** u32 */
  cbSize: number;
  /** ptr */
  pUsagePara: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSubjectType: number;
  /** ptr */
  pvSubject: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCTL_FIND_SUBJECT_PARA = 32;

export function allocCTL_FIND_SUBJECT_PARA(data?: Partial<CTL_FIND_SUBJECT_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCTL_FIND_SUBJECT_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pUsagePara !== undefined) view.setBigUint64(8, data.pUsagePara === null ? 0n : BigInt(util.toPointer(data.pUsagePara)), true);
  // 0x10: u32
  if (data?.dwSubjectType !== undefined) view.setUint32(16, Number(data.dwSubjectType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pvSubject !== undefined) view.setBigUint64(24, data.pvSubject === null ? 0n : BigInt(util.toPointer(data.pvSubject)), true);
  return buf;
}

export class CTL_FIND_SUBJECT_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pUsagePara(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwSubjectType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pvSubject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pUsagePara(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwSubjectType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pvSubject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_CREATE_CONTEXT_PARA (size: 40)
 */
export interface CERT_CREATE_CONTEXT_PARA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_FREE */
  pfnFree: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvFree: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.PFN_CERT_CREATE_CONTEXT_SORT_FUNC */
  pfnSort: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvSort: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_CREATE_CONTEXT_PARA = 40;

export function allocCERT_CREATE_CONTEXT_PARA(data?: Partial<CERT_CREATE_CONTEXT_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CREATE_CONTEXT_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfnFree !== undefined) view.setBigUint64(8, data.pfnFree === null ? 0n : BigInt(util.toPointer(data.pfnFree)), true);
  // 0x10: pointer
  if (data?.pvFree !== undefined) view.setBigUint64(16, data.pvFree === null ? 0n : BigInt(util.toPointer(data.pvFree)), true);
  // 0x18: pointer
  if (data?.pfnSort !== undefined) view.setBigUint64(24, data.pfnSort === null ? 0n : BigInt(util.toPointer(data.pfnSort)), true);
  // 0x20: pointer
  if (data?.pvSort !== undefined) view.setBigUint64(32, data.pvSort === null ? 0n : BigInt(util.toPointer(data.pvSort)), true);
  return buf;
}

export class CERT_CREATE_CONTEXT_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pfnFree(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pvFree(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pfnSort(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pvSort(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pfnFree(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pvFree(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pfnSort(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pvSort(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_SYSTEM_STORE_INFO (size: 8)
 */
export interface CERT_SYSTEM_STORE_INFO {
  /** u32 */
  cbSize: number;
}

export const sizeofCERT_SYSTEM_STORE_INFO = 8;

export function allocCERT_SYSTEM_STORE_INFO(data?: Partial<CERT_SYSTEM_STORE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SYSTEM_STORE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  return buf;
}

export class CERT_SYSTEM_STORE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CERT_PHYSICAL_STORE_INFO (size: 40)
 */
export interface CERT_PHYSICAL_STORE_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PSTR */
  pszOpenStoreProvider: string | null | Uint8Array;
  /** u32 */
  dwOpenEncodingType: number;
  /** u32 */
  dwOpenFlags: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  OpenParameters: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwPriority: number;
}

export const sizeofCERT_PHYSICAL_STORE_INFO = 40;

export function allocCERT_PHYSICAL_STORE_INFO(data?: Partial<CERT_PHYSICAL_STORE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_PHYSICAL_STORE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszOpenStoreProvider !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszOpenStoreProvider);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwOpenEncodingType !== undefined) view.setUint32(16, Number(data.dwOpenEncodingType), true);
  // 0x14: u32
  if (data?.dwOpenFlags !== undefined) view.setUint32(20, Number(data.dwOpenFlags), true);
  // 0x18: pointer
  if (data?.OpenParameters !== undefined) view.setBigUint64(24, data.OpenParameters === null ? 0n : BigInt(util.toPointer(data.OpenParameters)), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: u32
  if (data?.dwPriority !== undefined) view.setUint32(36, Number(data.dwPriority), true);
  return buf;
}

export class CERT_PHYSICAL_STORE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszOpenStoreProvider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwOpenEncodingType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwOpenFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get OpenParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwPriority(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszOpenStoreProvider(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set dwOpenEncodingType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwOpenFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set OpenParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwPriority(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CTL_VERIFY_USAGE_PARA (size: 48)
 */
export interface CTL_VERIFY_USAGE_PARA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  ListIdentifier: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cCtlStore: number;
  /** ptr */
  rghCtlStore: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cSignerStore: number;
  /** ptr */
  rghSignerStore: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCTL_VERIFY_USAGE_PARA = 48;

export function allocCTL_VERIFY_USAGE_PARA(data?: Partial<CTL_VERIFY_USAGE_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCTL_VERIFY_USAGE_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ListIdentifier !== undefined) view.setBigUint64(8, data.ListIdentifier === null ? 0n : BigInt(util.toPointer(data.ListIdentifier)), true);
  // 0x10: u32
  if (data?.cCtlStore !== undefined) view.setUint32(16, Number(data.cCtlStore), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rghCtlStore !== undefined) view.setBigUint64(24, data.rghCtlStore === null ? 0n : BigInt(util.toPointer(data.rghCtlStore)), true);
  // 0x20: u32
  if (data?.cSignerStore !== undefined) view.setUint32(32, Number(data.cSignerStore), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rghSignerStore !== undefined) view.setBigUint64(40, data.rghSignerStore === null ? 0n : BigInt(util.toPointer(data.rghSignerStore)), true);
  return buf;
}

export class CTL_VERIFY_USAGE_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ListIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cCtlStore(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rghCtlStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cSignerStore(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rghSignerStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ListIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cCtlStore(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rghCtlStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cSignerStore(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rghSignerStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CTL_VERIFY_USAGE_STATUS (size: 48)
 */
export interface CTL_VERIFY_USAGE_STATUS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwError: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  ppCtl: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwCtlEntryIndex: number;
  /** ptr */
  ppSigner: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSignerIndex: number;
}

export const sizeofCTL_VERIFY_USAGE_STATUS = 48;

export function allocCTL_VERIFY_USAGE_STATUS(data?: Partial<CTL_VERIFY_USAGE_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCTL_VERIFY_USAGE_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwError !== undefined) view.setUint32(4, Number(data.dwError), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ppCtl !== undefined) view.setBigUint64(16, data.ppCtl === null ? 0n : BigInt(util.toPointer(data.ppCtl)), true);
  // 0x18: u32
  if (data?.dwCtlEntryIndex !== undefined) view.setUint32(24, Number(data.dwCtlEntryIndex), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ppSigner !== undefined) view.setBigUint64(32, data.ppSigner === null ? 0n : BigInt(util.toPointer(data.ppSigner)), true);
  // 0x28: u32
  if (data?.dwSignerIndex !== undefined) view.setUint32(40, Number(data.dwSignerIndex), true);
  // 0x2c: pad4
  return buf;
}

export class CTL_VERIFY_USAGE_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwError(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ppCtl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwCtlEntryIndex(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ppSigner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwSignerIndex(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwError(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ppCtl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwCtlEntryIndex(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ppSigner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set dwSignerIndex(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CERT_REVOCATION_CRL_INFO (size: 40)
 */
export interface CERT_REVOCATION_CRL_INFO {
  /** u32 */
  cbSize: number;
  /** ptr */
  pBaseCrlContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pDeltaCrlContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCrlEntry: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fDeltaCrlEntry: boolean;
}

export const sizeofCERT_REVOCATION_CRL_INFO = 40;

export function allocCERT_REVOCATION_CRL_INFO(data?: Partial<CERT_REVOCATION_CRL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_REVOCATION_CRL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pBaseCrlContext !== undefined) view.setBigUint64(8, data.pBaseCrlContext === null ? 0n : BigInt(util.toPointer(data.pBaseCrlContext)), true);
  // 0x10: pointer
  if (data?.pDeltaCrlContext !== undefined) view.setBigUint64(16, data.pDeltaCrlContext === null ? 0n : BigInt(util.toPointer(data.pDeltaCrlContext)), true);
  // 0x18: pointer
  if (data?.pCrlEntry !== undefined) view.setBigUint64(24, data.pCrlEntry === null ? 0n : BigInt(util.toPointer(data.pCrlEntry)), true);
  // 0x20: i32
  if (data?.fDeltaCrlEntry !== undefined) view.setInt32(32, Number(data.fDeltaCrlEntry), true);
  // 0x24: pad4
  return buf;
}

export class CERT_REVOCATION_CRL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pBaseCrlContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pDeltaCrlContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pCrlEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i32
  get fDeltaCrlEntry(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pBaseCrlContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pDeltaCrlContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pCrlEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: i32
  set fDeltaCrlEntry(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CERT_REVOCATION_PARA (size: 48)
 */
export interface CERT_REVOCATION_PARA {
  /** u32 */
  cbSize: number;
  /** ptr */
  pIssuerCert: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cCertStore: number;
  /** ptr */
  rgCertStore: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hCrlStore: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pftTimeToUse: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_REVOCATION_PARA = 48;

export function allocCERT_REVOCATION_PARA(data?: Partial<CERT_REVOCATION_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_REVOCATION_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pIssuerCert !== undefined) view.setBigUint64(8, data.pIssuerCert === null ? 0n : BigInt(util.toPointer(data.pIssuerCert)), true);
  // 0x10: u32
  if (data?.cCertStore !== undefined) view.setUint32(16, Number(data.cCertStore), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgCertStore !== undefined) view.setBigUint64(24, data.rgCertStore === null ? 0n : BigInt(util.toPointer(data.rgCertStore)), true);
  // 0x20: pointer
  if (data?.hCrlStore !== undefined) view.setBigUint64(32, data.hCrlStore === null ? 0n : BigInt(util.toPointer(data.hCrlStore)), true);
  // 0x28: pointer
  if (data?.pftTimeToUse !== undefined) view.setBigUint64(40, data.pftTimeToUse === null ? 0n : BigInt(util.toPointer(data.pftTimeToUse)), true);
  return buf;
}

export class CERT_REVOCATION_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pIssuerCert(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cCertStore(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgCertStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get hCrlStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pftTimeToUse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pIssuerCert(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cCertStore(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgCertStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set hCrlStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pftTimeToUse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_REVOCATION_STATUS (size: 24)
 */
export interface CERT_REVOCATION_STATUS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwIndex: number;
  /** u32 */
  dwError: number;
  /** Windows.Win32.Security.Cryptography.CERT_REVOCATION_STATUS_REASON */
  dwReason: CERT_REVOCATION_STATUS_REASON;
  /** Windows.Win32.Foundation.BOOL */
  fHasFreshnessTime: boolean;
  /** u32 */
  dwFreshnessTime: number;
}

export const sizeofCERT_REVOCATION_STATUS = 24;

export function allocCERT_REVOCATION_STATUS(data?: Partial<CERT_REVOCATION_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_REVOCATION_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwIndex !== undefined) view.setUint32(4, Number(data.dwIndex), true);
  // 0x08: u32
  if (data?.dwError !== undefined) view.setUint32(8, Number(data.dwError), true);
  // 0x0c: u32
  if (data?.dwReason !== undefined) view.setUint32(12, Number(data.dwReason), true);
  // 0x10: i32
  if (data?.fHasFreshnessTime !== undefined) view.setInt32(16, Number(data.fHasFreshnessTime), true);
  // 0x14: u32
  if (data?.dwFreshnessTime !== undefined) view.setUint32(20, Number(data.dwFreshnessTime), true);
  return buf;
}

export class CERT_REVOCATION_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwError(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReason(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get fHasFreshnessTime(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get dwFreshnessTime(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwError(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReason(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set fHasFreshnessTime(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set dwFreshnessTime(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO (size: 16)
 */
export interface CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO {
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  CertSignHashCNGAlgPropData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  CertIssuerPubKeyBitLengthPropData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO = 16;

export function allocCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO(data?: Partial<CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CertSignHashCNGAlgPropData !== undefined) view.setBigUint64(0, data.CertSignHashCNGAlgPropData === null ? 0n : BigInt(util.toPointer(data.CertSignHashCNGAlgPropData)), true);
  // 0x08: pointer
  if (data?.CertIssuerPubKeyBitLengthPropData !== undefined) view.setBigUint64(8, data.CertIssuerPubKeyBitLengthPropData === null ? 0n : BigInt(util.toPointer(data.CertIssuerPubKeyBitLengthPropData)), true);
  return buf;
}

export class CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CertSignHashCNGAlgPropData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get CertIssuerPubKeyBitLengthPropData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set CertSignHashCNGAlgPropData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set CertIssuerPubKeyBitLengthPropData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO (size: 24)
 */
export interface CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO {
  /** u32 */
  cCNGHashAlgid: number;
  /** ptr */
  rgpwszCNGHashAlgid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwWeakIndex: number;
}

export const sizeofCRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO = 24;

export function allocCRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO(data?: Partial<CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCNGHashAlgid !== undefined) view.setUint32(0, Number(data.cCNGHashAlgid), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgpwszCNGHashAlgid !== undefined) view.setBigUint64(8, data.rgpwszCNGHashAlgid === null ? 0n : BigInt(util.toPointer(data.rgpwszCNGHashAlgid)), true);
  // 0x10: u32
  if (data?.dwWeakIndex !== undefined) view.setUint32(16, Number(data.dwWeakIndex), true);
  // 0x14: pad4
  return buf;
}

export class CRYPT_VERIFY_CERT_SIGN_WEAK_HASH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cCNGHashAlgid(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgpwszCNGHashAlgid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwWeakIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set cCNGHashAlgid(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgpwszCNGHashAlgid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwWeakIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA (size: 16)
 */
export interface CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {
  /** u32 */
  cOID: number;
  /** ptr */
  rgpszOID: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = 16;

export function allocCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA(data?: Partial<CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cOID !== undefined) view.setUint32(0, Number(data.cOID), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgpszOID !== undefined) view.setBigUint64(8, data.rgpszOID === null ? 0n : BigInt(util.toPointer(data.rgpszOID)), true);
  return buf;
}

export class CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cOID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgpszOID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cOID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgpszOID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_SIGN_MESSAGE_PARA (size: 104)
 */
export interface CRYPT_SIGN_MESSAGE_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMsgEncodingType: number;
  /** ptr */
  pSigningCert: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvHashAuxInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cMsgCert: number;
  /** ptr */
  rgpMsgCert: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cMsgCrl: number;
  /** ptr */
  rgpMsgCrl: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cAuthAttr: number;
  /** ptr */
  rgAuthAttr: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cUnauthAttr: number;
  /** ptr */
  rgUnauthAttr: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwInnerContentType: number;
}

export const sizeofCRYPT_SIGN_MESSAGE_PARA = 104;

export function allocCRYPT_SIGN_MESSAGE_PARA(data?: Partial<CRYPT_SIGN_MESSAGE_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_SIGN_MESSAGE_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMsgEncodingType !== undefined) view.setUint32(4, Number(data.dwMsgEncodingType), true);
  // 0x08: pointer
  if (data?.pSigningCert !== undefined) view.setBigUint64(8, data.pSigningCert === null ? 0n : BigInt(util.toPointer(data.pSigningCert)), true);
  // 0x10: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(16, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x18: pointer
  if (data?.pvHashAuxInfo !== undefined) view.setBigUint64(24, data.pvHashAuxInfo === null ? 0n : BigInt(util.toPointer(data.pvHashAuxInfo)), true);
  // 0x20: u32
  if (data?.cMsgCert !== undefined) view.setUint32(32, Number(data.cMsgCert), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgpMsgCert !== undefined) view.setBigUint64(40, data.rgpMsgCert === null ? 0n : BigInt(util.toPointer(data.rgpMsgCert)), true);
  // 0x30: u32
  if (data?.cMsgCrl !== undefined) view.setUint32(48, Number(data.cMsgCrl), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rgpMsgCrl !== undefined) view.setBigUint64(56, data.rgpMsgCrl === null ? 0n : BigInt(util.toPointer(data.rgpMsgCrl)), true);
  // 0x40: u32
  if (data?.cAuthAttr !== undefined) view.setUint32(64, Number(data.cAuthAttr), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.rgAuthAttr !== undefined) view.setBigUint64(72, data.rgAuthAttr === null ? 0n : BigInt(util.toPointer(data.rgAuthAttr)), true);
  // 0x50: u32
  if (data?.cUnauthAttr !== undefined) view.setUint32(80, Number(data.cUnauthAttr), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.rgUnauthAttr !== undefined) view.setBigUint64(88, data.rgUnauthAttr === null ? 0n : BigInt(util.toPointer(data.rgUnauthAttr)), true);
  // 0x60: u32
  if (data?.dwFlags !== undefined) view.setUint32(96, Number(data.dwFlags), true);
  // 0x64: u32
  if (data?.dwInnerContentType !== undefined) view.setUint32(100, Number(data.dwInnerContentType), true);
  return buf;
}

export class CRYPT_SIGN_MESSAGE_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMsgEncodingType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pSigningCert(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pvHashAuxInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cMsgCert(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rgpMsgCert(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cMsgCrl(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get rgpMsgCrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get cAuthAttr(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get rgAuthAttr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get cUnauthAttr(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get rgUnauthAttr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: u32
  get dwFlags(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get dwInnerContentType(): number {
    return this.view.getUint32(100, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMsgEncodingType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pSigningCert(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pvHashAuxInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cMsgCert(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rgpMsgCert(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set cMsgCrl(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set rgpMsgCrl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set cAuthAttr(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set rgAuthAttr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set cUnauthAttr(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set rgUnauthAttr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: u32
  set dwFlags(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set dwInnerContentType(value: number) {
    this.view.setUint32(100, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_VERIFY_MESSAGE_PARA (size: 32)
 */
export interface CRYPT_VERIFY_MESSAGE_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMsgAndCertEncodingType: number;
  /** Windows.Win32.Security.Cryptography.HCRYPTPROV_LEGACY */
  hCryptProv: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_GET_SIGNER_CERTIFICATE */
  pfnGetSignerCertificate: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvGetArg: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_VERIFY_MESSAGE_PARA = 32;

export function allocCRYPT_VERIFY_MESSAGE_PARA(data?: Partial<CRYPT_VERIFY_MESSAGE_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_VERIFY_MESSAGE_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMsgAndCertEncodingType !== undefined) view.setUint32(4, Number(data.dwMsgAndCertEncodingType), true);
  // 0x08: pointer
  if (data?.hCryptProv !== undefined) view.setBigUint64(8, data.hCryptProv === null ? 0n : BigInt(util.toPointer(data.hCryptProv)), true);
  // 0x10: pointer
  if (data?.pfnGetSignerCertificate !== undefined) view.setBigUint64(16, data.pfnGetSignerCertificate === null ? 0n : BigInt(util.toPointer(data.pfnGetSignerCertificate)), true);
  // 0x18: pointer
  if (data?.pvGetArg !== undefined) view.setBigUint64(24, data.pvGetArg === null ? 0n : BigInt(util.toPointer(data.pvGetArg)), true);
  return buf;
}

export class CRYPT_VERIFY_MESSAGE_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMsgAndCertEncodingType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hCryptProv(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pfnGetSignerCertificate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pvGetArg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMsgAndCertEncodingType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hCryptProv(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pfnGetSignerCertificate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pvGetArg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ENCRYPT_MESSAGE_PARA (size: 40)
 */
export interface CRYPT_ENCRYPT_MESSAGE_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMsgEncodingType: number;
  /** Windows.Win32.Security.Cryptography.HCRYPTPROV_LEGACY */
  hCryptProv: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  ContentEncryptionAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvEncryptionAuxInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwInnerContentType: number;
}

export const sizeofCRYPT_ENCRYPT_MESSAGE_PARA = 40;

export function allocCRYPT_ENCRYPT_MESSAGE_PARA(data?: Partial<CRYPT_ENCRYPT_MESSAGE_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ENCRYPT_MESSAGE_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMsgEncodingType !== undefined) view.setUint32(4, Number(data.dwMsgEncodingType), true);
  // 0x08: pointer
  if (data?.hCryptProv !== undefined) view.setBigUint64(8, data.hCryptProv === null ? 0n : BigInt(util.toPointer(data.hCryptProv)), true);
  // 0x10: pointer
  if (data?.ContentEncryptionAlgorithm !== undefined) view.setBigUint64(16, data.ContentEncryptionAlgorithm === null ? 0n : BigInt(util.toPointer(data.ContentEncryptionAlgorithm)), true);
  // 0x18: pointer
  if (data?.pvEncryptionAuxInfo !== undefined) view.setBigUint64(24, data.pvEncryptionAuxInfo === null ? 0n : BigInt(util.toPointer(data.pvEncryptionAuxInfo)), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: u32
  if (data?.dwInnerContentType !== undefined) view.setUint32(36, Number(data.dwInnerContentType), true);
  return buf;
}

export class CRYPT_ENCRYPT_MESSAGE_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMsgEncodingType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hCryptProv(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ContentEncryptionAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pvEncryptionAuxInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwInnerContentType(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMsgEncodingType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hCryptProv(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ContentEncryptionAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pvEncryptionAuxInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwInnerContentType(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_DECRYPT_MESSAGE_PARA (size: 24)
 */
export interface CRYPT_DECRYPT_MESSAGE_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMsgAndCertEncodingType: number;
  /** u32 */
  cCertStore: number;
  /** ptr */
  rghCertStore: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_DECRYPT_MESSAGE_PARA = 24;

export function allocCRYPT_DECRYPT_MESSAGE_PARA(data?: Partial<CRYPT_DECRYPT_MESSAGE_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_DECRYPT_MESSAGE_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMsgAndCertEncodingType !== undefined) view.setUint32(4, Number(data.dwMsgAndCertEncodingType), true);
  // 0x08: u32
  if (data?.cCertStore !== undefined) view.setUint32(8, Number(data.cCertStore), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rghCertStore !== undefined) view.setBigUint64(16, data.rghCertStore === null ? 0n : BigInt(util.toPointer(data.rghCertStore)), true);
  return buf;
}

export class CRYPT_DECRYPT_MESSAGE_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMsgAndCertEncodingType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cCertStore(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rghCertStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMsgAndCertEncodingType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cCertStore(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rghCertStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_HASH_MESSAGE_PARA (size: 32)
 */
export interface CRYPT_HASH_MESSAGE_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMsgEncodingType: number;
  /** Windows.Win32.Security.Cryptography.HCRYPTPROV_LEGACY */
  hCryptProv: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvHashAuxInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_HASH_MESSAGE_PARA = 32;

export function allocCRYPT_HASH_MESSAGE_PARA(data?: Partial<CRYPT_HASH_MESSAGE_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_HASH_MESSAGE_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMsgEncodingType !== undefined) view.setUint32(4, Number(data.dwMsgEncodingType), true);
  // 0x08: pointer
  if (data?.hCryptProv !== undefined) view.setBigUint64(8, data.hCryptProv === null ? 0n : BigInt(util.toPointer(data.hCryptProv)), true);
  // 0x10: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(16, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x18: pointer
  if (data?.pvHashAuxInfo !== undefined) view.setBigUint64(24, data.pvHashAuxInfo === null ? 0n : BigInt(util.toPointer(data.pvHashAuxInfo)), true);
  return buf;
}

export class CRYPT_HASH_MESSAGE_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMsgEncodingType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hCryptProv(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pvHashAuxInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMsgEncodingType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hCryptProv(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pvHashAuxInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_KEY_SIGN_MESSAGE_PARA (size: 48)
 */
export interface CRYPT_KEY_SIGN_MESSAGE_PARA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CERT_QUERY_ENCODING_TYPE */
  dwMsgAndCertEncodingType: CERT_QUERY_ENCODING_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CERT_KEY_SPEC */
  dwKeySpec: CERT_KEY_SPEC;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvHashAuxInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  PubKeyAlgorithm: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_KEY_SIGN_MESSAGE_PARA = 48;

export function allocCRYPT_KEY_SIGN_MESSAGE_PARA(data?: Partial<CRYPT_KEY_SIGN_MESSAGE_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_KEY_SIGN_MESSAGE_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMsgAndCertEncodingType !== undefined) view.setUint32(4, Number(data.dwMsgAndCertEncodingType), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.dwKeySpec !== undefined) view.setUint32(16, Number(data.dwKeySpec), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(24, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x20: pointer
  if (data?.pvHashAuxInfo !== undefined) view.setBigUint64(32, data.pvHashAuxInfo === null ? 0n : BigInt(util.toPointer(data.pvHashAuxInfo)), true);
  // 0x28: pointer
  if (data?.PubKeyAlgorithm !== undefined) view.setBigUint64(40, data.PubKeyAlgorithm === null ? 0n : BigInt(util.toPointer(data.PubKeyAlgorithm)), true);
  return buf;
}

export class CRYPT_KEY_SIGN_MESSAGE_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMsgAndCertEncodingType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwKeySpec(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pvHashAuxInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get PubKeyAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMsgAndCertEncodingType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwKeySpec(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pvHashAuxInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set PubKeyAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_KEY_VERIFY_MESSAGE_PARA (size: 16)
 */
export interface CRYPT_KEY_VERIFY_MESSAGE_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMsgEncodingType: number;
  /** Windows.Win32.Security.Cryptography.HCRYPTPROV_LEGACY */
  hCryptProv: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_KEY_VERIFY_MESSAGE_PARA = 16;

export function allocCRYPT_KEY_VERIFY_MESSAGE_PARA(data?: Partial<CRYPT_KEY_VERIFY_MESSAGE_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_KEY_VERIFY_MESSAGE_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMsgEncodingType !== undefined) view.setUint32(4, Number(data.dwMsgEncodingType), true);
  // 0x08: pointer
  if (data?.hCryptProv !== undefined) view.setBigUint64(8, data.hCryptProv === null ? 0n : BigInt(util.toPointer(data.hCryptProv)), true);
  return buf;
}

export class CRYPT_KEY_VERIFY_MESSAGE_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMsgEncodingType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hCryptProv(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMsgEncodingType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hCryptProv(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_CHAIN (size: 24)
 */
export interface CERT_CHAIN {
  /** u32 */
  cCerts: number;
  /** ptr */
  certs: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_KEY_PROV_INFO */
  keyLocatorInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_CHAIN = 24;

export function allocCERT_CHAIN(data?: Partial<CERT_CHAIN>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CHAIN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCerts !== undefined) view.setUint32(0, Number(data.cCerts), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.certs !== undefined) view.setBigUint64(8, data.certs === null ? 0n : BigInt(util.toPointer(data.certs)), true);
  // 0x10: pointer
  if (data?.keyLocatorInfo !== undefined) view.setBigUint64(16, data.keyLocatorInfo === null ? 0n : BigInt(util.toPointer(data.keyLocatorInfo)), true);
  return buf;
}

export class CERT_CHAINView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cCerts(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get certs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get keyLocatorInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cCerts(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set certs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set keyLocatorInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_BLOB_ARRAY (size: 16)
 */
export interface CRYPT_BLOB_ARRAY {
  /** u32 */
  cBlob: number;
  /** ptr */
  rgBlob: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_BLOB_ARRAY = 16;

export function allocCRYPT_BLOB_ARRAY(data?: Partial<CRYPT_BLOB_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_BLOB_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cBlob !== undefined) view.setUint32(0, Number(data.cBlob), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgBlob !== undefined) view.setBigUint64(8, data.rgBlob === null ? 0n : BigInt(util.toPointer(data.rgBlob)), true);
  return buf;
}

export class CRYPT_BLOB_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cBlob(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgBlob(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cBlob(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgBlob(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_CREDENTIALS (size: 24)
 */
export interface CRYPT_CREDENTIALS {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PSTR */
  pszCredentialsOid: string | null | Uint8Array;
  /** ptr */
  pvCredentials: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_CREDENTIALS = 24;

export function allocCRYPT_CREDENTIALS(data?: Partial<CRYPT_CREDENTIALS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_CREDENTIALS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszCredentialsOid !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszCredentialsOid);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pvCredentials !== undefined) view.setBigUint64(16, data.pvCredentials === null ? 0n : BigInt(util.toPointer(data.pvCredentials)), true);
  return buf;
}

export class CRYPT_CREDENTIALSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszCredentialsOid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pvCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszCredentialsOid(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set pvCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_PASSWORD_CREDENTIALSA (size: 24)
 */
export interface CRYPT_PASSWORD_CREDENTIALSA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PSTR */
  pszUsername: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszPassword: string | null | Uint8Array;
}

export const sizeofCRYPT_PASSWORD_CREDENTIALSA = 24;

export function allocCRYPT_PASSWORD_CREDENTIALSA(data?: Partial<CRYPT_PASSWORD_CREDENTIALSA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PASSWORD_CREDENTIALSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszUsername !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszUsername);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszPassword !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszPassword);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class CRYPT_PASSWORD_CREDENTIALSAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszUsername(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszUsername(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pszPassword(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_PASSWORD_CREDENTIALSW (size: 24)
 */
export interface CRYPT_PASSWORD_CREDENTIALSW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszUsername: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPassword: string | null | Uint8Array | Uint16Array;
}

export const sizeofCRYPT_PASSWORD_CREDENTIALSW = 24;

export function allocCRYPT_PASSWORD_CREDENTIALSW(data?: Partial<CRYPT_PASSWORD_CREDENTIALSW>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PASSWORD_CREDENTIALSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszUsername !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszUsername);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszPassword !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszPassword);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class CRYPT_PASSWORD_CREDENTIALSWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszUsername(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszUsername(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pszPassword(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPTNET_URL_CACHE_PRE_FETCH_INFO (size: 40)
 */
export interface CRYPTNET_URL_CACHE_PRE_FETCH_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwObjectType: number;
  /** u32 */
  dwError: number;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.Foundation.FILETIME */
  ThisUpdateTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  NextUpdateTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  PublishTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPTNET_URL_CACHE_PRE_FETCH_INFO = 40;

export function allocCRYPTNET_URL_CACHE_PRE_FETCH_INFO(data?: Partial<CRYPTNET_URL_CACHE_PRE_FETCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTNET_URL_CACHE_PRE_FETCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwObjectType !== undefined) view.setUint32(4, Number(data.dwObjectType), true);
  // 0x08: u32
  if (data?.dwError !== undefined) view.setUint32(8, Number(data.dwError), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.ThisUpdateTime !== undefined) view.setBigUint64(16, data.ThisUpdateTime === null ? 0n : BigInt(util.toPointer(data.ThisUpdateTime)), true);
  // 0x18: pointer
  if (data?.NextUpdateTime !== undefined) view.setBigUint64(24, data.NextUpdateTime === null ? 0n : BigInt(util.toPointer(data.NextUpdateTime)), true);
  // 0x20: pointer
  if (data?.PublishTime !== undefined) view.setBigUint64(32, data.PublishTime === null ? 0n : BigInt(util.toPointer(data.PublishTime)), true);
  return buf;
}

export class CRYPTNET_URL_CACHE_PRE_FETCH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwObjectType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwError(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ThisUpdateTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get NextUpdateTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get PublishTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwObjectType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwError(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ThisUpdateTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set NextUpdateTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set PublishTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPTNET_URL_CACHE_FLUSH_INFO (size: 16)
 */
export interface CRYPTNET_URL_CACHE_FLUSH_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwExemptSeconds: number;
  /** Windows.Win32.Foundation.FILETIME */
  ExpireTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPTNET_URL_CACHE_FLUSH_INFO = 16;

export function allocCRYPTNET_URL_CACHE_FLUSH_INFO(data?: Partial<CRYPTNET_URL_CACHE_FLUSH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTNET_URL_CACHE_FLUSH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwExemptSeconds !== undefined) view.setUint32(4, Number(data.dwExemptSeconds), true);
  // 0x08: pointer
  if (data?.ExpireTime !== undefined) view.setBigUint64(8, data.ExpireTime === null ? 0n : BigInt(util.toPointer(data.ExpireTime)), true);
  return buf;
}

export class CRYPTNET_URL_CACHE_FLUSH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwExemptSeconds(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ExpireTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwExemptSeconds(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ExpireTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPTNET_URL_CACHE_RESPONSE_INFO (size: 40)
 */
export interface CRYPTNET_URL_CACHE_RESPONSE_INFO {
  /** u32 */
  cbSize: number;
  /** u16 */
  wResponseType: number;
  /** u16 */
  wResponseFlags: number;
  /** Windows.Win32.Foundation.FILETIME */
  LastModifiedTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwMaxAge: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszETag: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwProxyId: number;
}

export const sizeofCRYPTNET_URL_CACHE_RESPONSE_INFO = 40;

export function allocCRYPTNET_URL_CACHE_RESPONSE_INFO(data?: Partial<CRYPTNET_URL_CACHE_RESPONSE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTNET_URL_CACHE_RESPONSE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u16
  if (data?.wResponseType !== undefined) view.setUint16(4, Number(data.wResponseType), true);
  // 0x06: u16
  if (data?.wResponseFlags !== undefined) view.setUint16(6, Number(data.wResponseFlags), true);
  // 0x08: pointer
  if (data?.LastModifiedTime !== undefined) view.setBigUint64(8, data.LastModifiedTime === null ? 0n : BigInt(util.toPointer(data.LastModifiedTime)), true);
  // 0x10: u32
  if (data?.dwMaxAge !== undefined) view.setUint32(16, Number(data.dwMaxAge), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pwszETag !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszETag);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwProxyId !== undefined) view.setUint32(32, Number(data.dwProxyId), true);
  // 0x24: pad4
  return buf;
}

export class CRYPTNET_URL_CACHE_RESPONSE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wResponseType(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wResponseFlags(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: pointer
  get LastModifiedTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwMaxAge(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get pwszETag(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwProxyId(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wResponseType(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wResponseFlags(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: pointer
  set LastModifiedTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwMaxAge(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set pwszETag(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set dwProxyId(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_RETRIEVE_AUX_INFO (size: 88)
 */
export interface CRYPT_RETRIEVE_AUX_INFO {
  /** u32 */
  cbSize: number;
  /** ptr */
  pLastSyncTime: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwMaxUrlRetrievalByteCount: number;
  /** ptr */
  pPreFetchInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFlushInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ppResponseInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszCacheFileNamePrefix: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pftCacheResync: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fProxyCacheRetrieval: boolean;
  /** u32 */
  dwHttpStatusCode: number;
  /** ptr */
  ppwszErrorResponseHeaders: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ppErrorContentBlob: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_RETRIEVE_AUX_INFO = 88;

export function allocCRYPT_RETRIEVE_AUX_INFO(data?: Partial<CRYPT_RETRIEVE_AUX_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_RETRIEVE_AUX_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pLastSyncTime !== undefined) view.setBigUint64(8, data.pLastSyncTime === null ? 0n : BigInt(util.toPointer(data.pLastSyncTime)), true);
  // 0x10: u32
  if (data?.dwMaxUrlRetrievalByteCount !== undefined) view.setUint32(16, Number(data.dwMaxUrlRetrievalByteCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pPreFetchInfo !== undefined) view.setBigUint64(24, data.pPreFetchInfo === null ? 0n : BigInt(util.toPointer(data.pPreFetchInfo)), true);
  // 0x20: pointer
  if (data?.pFlushInfo !== undefined) view.setBigUint64(32, data.pFlushInfo === null ? 0n : BigInt(util.toPointer(data.pFlushInfo)), true);
  // 0x28: pointer
  if (data?.ppResponseInfo !== undefined) view.setBigUint64(40, data.ppResponseInfo === null ? 0n : BigInt(util.toPointer(data.ppResponseInfo)), true);
  // 0x30: buffer
  if (data?.pwszCacheFileNamePrefix !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pwszCacheFileNamePrefix);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.pftCacheResync !== undefined) view.setBigUint64(56, data.pftCacheResync === null ? 0n : BigInt(util.toPointer(data.pftCacheResync)), true);
  // 0x40: i32
  if (data?.fProxyCacheRetrieval !== undefined) view.setInt32(64, Number(data.fProxyCacheRetrieval), true);
  // 0x44: u32
  if (data?.dwHttpStatusCode !== undefined) view.setUint32(68, Number(data.dwHttpStatusCode), true);
  // 0x48: pointer
  if (data?.ppwszErrorResponseHeaders !== undefined) view.setBigUint64(72, data.ppwszErrorResponseHeaders === null ? 0n : BigInt(util.toPointer(data.ppwszErrorResponseHeaders)), true);
  // 0x50: pointer
  if (data?.ppErrorContentBlob !== undefined) view.setBigUint64(80, data.ppErrorContentBlob === null ? 0n : BigInt(util.toPointer(data.ppErrorContentBlob)), true);
  return buf;
}

export class CRYPT_RETRIEVE_AUX_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pLastSyncTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwMaxUrlRetrievalByteCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pPreFetchInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pFlushInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get ppResponseInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: buffer
  get pwszCacheFileNamePrefix(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pftCacheResync(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: i32
  get fProxyCacheRetrieval(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get dwHttpStatusCode(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: pointer
  get ppwszErrorResponseHeaders(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get ppErrorContentBlob(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pLastSyncTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwMaxUrlRetrievalByteCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pPreFetchInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pFlushInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set ppResponseInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: buffer
  set pwszCacheFileNamePrefix(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(util.toPointer((this.buf as any)._f48)), true);
  }

  // 0x38: pointer
  set pftCacheResync(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: i32
  set fProxyCacheRetrieval(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set dwHttpStatusCode(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: pointer
  set ppwszErrorResponseHeaders(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set ppErrorContentBlob(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_ASYNC_RETRIEVAL_COMPLETION (size: 16)
 */
export interface CRYPT_ASYNC_RETRIEVAL_COMPLETION {
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC */
  pfnCompletion: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvCompletion: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_ASYNC_RETRIEVAL_COMPLETION = 16;

export function allocCRYPT_ASYNC_RETRIEVAL_COMPLETION(data?: Partial<CRYPT_ASYNC_RETRIEVAL_COMPLETION>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_ASYNC_RETRIEVAL_COMPLETION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pfnCompletion !== undefined) view.setBigUint64(0, data.pfnCompletion === null ? 0n : BigInt(util.toPointer(data.pfnCompletion)), true);
  // 0x08: pointer
  if (data?.pvCompletion !== undefined) view.setBigUint64(8, data.pvCompletion === null ? 0n : BigInt(util.toPointer(data.pvCompletion)), true);
  return buf;
}

export class CRYPT_ASYNC_RETRIEVAL_COMPLETIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pfnCompletion(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pvCompletion(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pfnCompletion(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pvCompletion(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_URL_ARRAY (size: 16)
 */
export interface CRYPT_URL_ARRAY {
  /** u32 */
  cUrl: number;
  /** ptr */
  rgwszUrl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_URL_ARRAY = 16;

export function allocCRYPT_URL_ARRAY(data?: Partial<CRYPT_URL_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_URL_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cUrl !== undefined) view.setUint32(0, Number(data.cUrl), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgwszUrl !== undefined) view.setBigUint64(8, data.rgwszUrl === null ? 0n : BigInt(util.toPointer(data.rgwszUrl)), true);
  return buf;
}

export class CRYPT_URL_ARRAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cUrl(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgwszUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cUrl(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgwszUrl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_URL_INFO (size: 24)
 */
export interface CRYPT_URL_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwSyncDeltaTime: number;
  /** u32 */
  cGroup: number;
  /** ptr */
  rgcGroupEntry: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_URL_INFO = 24;

export function allocCRYPT_URL_INFO(data?: Partial<CRYPT_URL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_URL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwSyncDeltaTime !== undefined) view.setUint32(4, Number(data.dwSyncDeltaTime), true);
  // 0x08: u32
  if (data?.cGroup !== undefined) view.setUint32(8, Number(data.cGroup), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgcGroupEntry !== undefined) view.setBigUint64(16, data.rgcGroupEntry === null ? 0n : BigInt(util.toPointer(data.rgcGroupEntry)), true);
  return buf;
}

export class CRYPT_URL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSyncDeltaTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cGroup(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgcGroupEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSyncDeltaTime(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cGroup(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgcGroupEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_CRL_CONTEXT_PAIR (size: 16)
 */
export interface CERT_CRL_CONTEXT_PAIR {
  /** ptr */
  pCertContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCrlContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_CRL_CONTEXT_PAIR = 16;

export function allocCERT_CRL_CONTEXT_PAIR(data?: Partial<CERT_CRL_CONTEXT_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CRL_CONTEXT_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCertContext !== undefined) view.setBigUint64(0, data.pCertContext === null ? 0n : BigInt(util.toPointer(data.pCertContext)), true);
  // 0x08: pointer
  if (data?.pCrlContext !== undefined) view.setBigUint64(8, data.pCrlContext === null ? 0n : BigInt(util.toPointer(data.pCrlContext)), true);
  return buf;
}

export class CERT_CRL_CONTEXT_PAIRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pCertContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pCrlContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pCertContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pCrlContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO (size: 48)
 */
export interface CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO {
  /** u32 */
  cbSize: number;
  /** i32 */
  iDeltaCrlIndicator: number;
  /** ptr */
  pftCacheResync: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pLastSyncTime: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pMaxAgeTime: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pChainPara: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pDeltaCrlIndicator: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = 48;

export function allocCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO(data?: Partial<CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.iDeltaCrlIndicator !== undefined) view.setInt32(4, Number(data.iDeltaCrlIndicator), true);
  // 0x08: pointer
  if (data?.pftCacheResync !== undefined) view.setBigUint64(8, data.pftCacheResync === null ? 0n : BigInt(util.toPointer(data.pftCacheResync)), true);
  // 0x10: pointer
  if (data?.pLastSyncTime !== undefined) view.setBigUint64(16, data.pLastSyncTime === null ? 0n : BigInt(util.toPointer(data.pLastSyncTime)), true);
  // 0x18: pointer
  if (data?.pMaxAgeTime !== undefined) view.setBigUint64(24, data.pMaxAgeTime === null ? 0n : BigInt(util.toPointer(data.pMaxAgeTime)), true);
  // 0x20: pointer
  if (data?.pChainPara !== undefined) view.setBigUint64(32, data.pChainPara === null ? 0n : BigInt(util.toPointer(data.pChainPara)), true);
  // 0x28: pointer
  if (data?.pDeltaCrlIndicator !== undefined) view.setBigUint64(40, data.pDeltaCrlIndicator === null ? 0n : BigInt(util.toPointer(data.pDeltaCrlIndicator)), true);
  return buf;
}

export class CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get iDeltaCrlIndicator(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pftCacheResync(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pLastSyncTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pMaxAgeTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pChainPara(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pDeltaCrlIndicator(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set iDeltaCrlIndicator(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pftCacheResync(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pLastSyncTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pMaxAgeTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pChainPara(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pDeltaCrlIndicator(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_CHAIN_ENGINE_CONFIG (size: 88)
 */
export interface CERT_CHAIN_ENGINE_CONFIG {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hRestrictedRoot: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hRestrictedTrust: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hRestrictedOther: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cAdditionalStore: number;
  /** ptr */
  rghAdditionalStore: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwUrlRetrievalTimeout: number;
  /** u32 */
  MaximumCachedCertificates: number;
  /** u32 */
  CycleDetectionModulus: number;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hExclusiveRoot: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hExclusiveTrustedPeople: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwExclusiveFlags: number;
}

export const sizeofCERT_CHAIN_ENGINE_CONFIG = 88;

export function allocCERT_CHAIN_ENGINE_CONFIG(data?: Partial<CERT_CHAIN_ENGINE_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CHAIN_ENGINE_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hRestrictedRoot !== undefined) view.setBigUint64(8, data.hRestrictedRoot === null ? 0n : BigInt(util.toPointer(data.hRestrictedRoot)), true);
  // 0x10: pointer
  if (data?.hRestrictedTrust !== undefined) view.setBigUint64(16, data.hRestrictedTrust === null ? 0n : BigInt(util.toPointer(data.hRestrictedTrust)), true);
  // 0x18: pointer
  if (data?.hRestrictedOther !== undefined) view.setBigUint64(24, data.hRestrictedOther === null ? 0n : BigInt(util.toPointer(data.hRestrictedOther)), true);
  // 0x20: u32
  if (data?.cAdditionalStore !== undefined) view.setUint32(32, Number(data.cAdditionalStore), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rghAdditionalStore !== undefined) view.setBigUint64(40, data.rghAdditionalStore === null ? 0n : BigInt(util.toPointer(data.rghAdditionalStore)), true);
  // 0x30: u32
  if (data?.dwFlags !== undefined) view.setUint32(48, Number(data.dwFlags), true);
  // 0x34: u32
  if (data?.dwUrlRetrievalTimeout !== undefined) view.setUint32(52, Number(data.dwUrlRetrievalTimeout), true);
  // 0x38: u32
  if (data?.MaximumCachedCertificates !== undefined) view.setUint32(56, Number(data.MaximumCachedCertificates), true);
  // 0x3c: u32
  if (data?.CycleDetectionModulus !== undefined) view.setUint32(60, Number(data.CycleDetectionModulus), true);
  // 0x40: pointer
  if (data?.hExclusiveRoot !== undefined) view.setBigUint64(64, data.hExclusiveRoot === null ? 0n : BigInt(util.toPointer(data.hExclusiveRoot)), true);
  // 0x48: pointer
  if (data?.hExclusiveTrustedPeople !== undefined) view.setBigUint64(72, data.hExclusiveTrustedPeople === null ? 0n : BigInt(util.toPointer(data.hExclusiveTrustedPeople)), true);
  // 0x50: u32
  if (data?.dwExclusiveFlags !== undefined) view.setUint32(80, Number(data.dwExclusiveFlags), true);
  // 0x54: pad4
  return buf;
}

export class CERT_CHAIN_ENGINE_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hRestrictedRoot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hRestrictedTrust(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get hRestrictedOther(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cAdditionalStore(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rghAdditionalStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwUrlRetrievalTimeout(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get MaximumCachedCertificates(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get CycleDetectionModulus(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get hExclusiveRoot(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get hExclusiveTrustedPeople(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get dwExclusiveFlags(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hRestrictedRoot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hRestrictedTrust(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set hRestrictedOther(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cAdditionalStore(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rghAdditionalStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set dwFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwUrlRetrievalTimeout(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set MaximumCachedCertificates(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set CycleDetectionModulus(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set hExclusiveRoot(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set hExclusiveTrustedPeople(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set dwExclusiveFlags(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CERT_TRUST_STATUS (size: 8)
 */
export interface CERT_TRUST_STATUS {
  /** u32 */
  dwErrorStatus: number;
  /** u32 */
  dwInfoStatus: number;
}

export const sizeofCERT_TRUST_STATUS = 8;

export function allocCERT_TRUST_STATUS(data?: Partial<CERT_TRUST_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_TRUST_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwErrorStatus !== undefined) view.setUint32(0, Number(data.dwErrorStatus), true);
  // 0x04: u32
  if (data?.dwInfoStatus !== undefined) view.setUint32(4, Number(data.dwInfoStatus), true);
  return buf;
}

export class CERT_TRUST_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwErrorStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwInfoStatus(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwErrorStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwInfoStatus(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_REVOCATION_INFO (size: 40)
 */
export interface CERT_REVOCATION_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwRevocationResult: number;
  /** Windows.Win32.Foundation.PSTR */
  pszRevocationOid: string | null | Uint8Array;
  /** ptr */
  pvOidSpecificInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fHasFreshnessTime: boolean;
  /** u32 */
  dwFreshnessTime: number;
  /** ptr */
  pCrlInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_REVOCATION_INFO = 40;

export function allocCERT_REVOCATION_INFO(data?: Partial<CERT_REVOCATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_REVOCATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwRevocationResult !== undefined) view.setUint32(4, Number(data.dwRevocationResult), true);
  // 0x08: buffer
  if (data?.pszRevocationOid !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszRevocationOid);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pvOidSpecificInfo !== undefined) view.setBigUint64(16, data.pvOidSpecificInfo === null ? 0n : BigInt(util.toPointer(data.pvOidSpecificInfo)), true);
  // 0x18: i32
  if (data?.fHasFreshnessTime !== undefined) view.setInt32(24, Number(data.fHasFreshnessTime), true);
  // 0x1c: u32
  if (data?.dwFreshnessTime !== undefined) view.setUint32(28, Number(data.dwFreshnessTime), true);
  // 0x20: pointer
  if (data?.pCrlInfo !== undefined) view.setBigUint64(32, data.pCrlInfo === null ? 0n : BigInt(util.toPointer(data.pCrlInfo)), true);
  return buf;
}

export class CERT_REVOCATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwRevocationResult(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pszRevocationOid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pvOidSpecificInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get fHasFreshnessTime(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get dwFreshnessTime(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get pCrlInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwRevocationResult(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pszRevocationOid(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set pvOidSpecificInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set fHasFreshnessTime(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set dwFreshnessTime(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set pCrlInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_TRUST_LIST_INFO (size: 24)
 */
export interface CERT_TRUST_LIST_INFO {
  /** u32 */
  cbSize: number;
  /** ptr */
  pCtlEntry: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCtlContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_TRUST_LIST_INFO = 24;

export function allocCERT_TRUST_LIST_INFO(data?: Partial<CERT_TRUST_LIST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_TRUST_LIST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCtlEntry !== undefined) view.setBigUint64(8, data.pCtlEntry === null ? 0n : BigInt(util.toPointer(data.pCtlEntry)), true);
  // 0x10: pointer
  if (data?.pCtlContext !== undefined) view.setBigUint64(16, data.pCtlContext === null ? 0n : BigInt(util.toPointer(data.pCtlContext)), true);
  return buf;
}

export class CERT_TRUST_LIST_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pCtlEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pCtlContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pCtlEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pCtlContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_CHAIN_ELEMENT (size: 56)
 */
export interface CERT_CHAIN_ELEMENT {
  /** u32 */
  cbSize: number;
  /** ptr */
  pCertContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CERT_TRUST_STATUS */
  TrustStatus: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pRevocationInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIssuanceUsage: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pApplicationUsage: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszExtendedErrorInfo: string | null | Uint8Array | Uint16Array;
}

export const sizeofCERT_CHAIN_ELEMENT = 56;

export function allocCERT_CHAIN_ELEMENT(data?: Partial<CERT_CHAIN_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CHAIN_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCertContext !== undefined) view.setBigUint64(8, data.pCertContext === null ? 0n : BigInt(util.toPointer(data.pCertContext)), true);
  // 0x10: pointer
  if (data?.TrustStatus !== undefined) view.setBigUint64(16, data.TrustStatus === null ? 0n : BigInt(util.toPointer(data.TrustStatus)), true);
  // 0x18: pointer
  if (data?.pRevocationInfo !== undefined) view.setBigUint64(24, data.pRevocationInfo === null ? 0n : BigInt(util.toPointer(data.pRevocationInfo)), true);
  // 0x20: pointer
  if (data?.pIssuanceUsage !== undefined) view.setBigUint64(32, data.pIssuanceUsage === null ? 0n : BigInt(util.toPointer(data.pIssuanceUsage)), true);
  // 0x28: pointer
  if (data?.pApplicationUsage !== undefined) view.setBigUint64(40, data.pApplicationUsage === null ? 0n : BigInt(util.toPointer(data.pApplicationUsage)), true);
  // 0x30: buffer
  if (data?.pwszExtendedErrorInfo !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pwszExtendedErrorInfo);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  return buf;
}

export class CERT_CHAIN_ELEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pCertContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get TrustStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pRevocationInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pIssuanceUsage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pApplicationUsage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: buffer
  get pwszExtendedErrorInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pCertContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set TrustStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pRevocationInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pIssuanceUsage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pApplicationUsage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: buffer
  set pwszExtendedErrorInfo(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(util.toPointer((this.buf as any)._f48)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_SIMPLE_CHAIN (size: 48)
 */
export interface CERT_SIMPLE_CHAIN {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CERT_TRUST_STATUS */
  TrustStatus: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cElement: number;
  /** ptr */
  rgpElement: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pTrustListInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fHasRevocationFreshnessTime: boolean;
  /** u32 */
  dwRevocationFreshnessTime: number;
}

export const sizeofCERT_SIMPLE_CHAIN = 48;

export function allocCERT_SIMPLE_CHAIN(data?: Partial<CERT_SIMPLE_CHAIN>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SIMPLE_CHAIN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TrustStatus !== undefined) view.setBigUint64(8, data.TrustStatus === null ? 0n : BigInt(util.toPointer(data.TrustStatus)), true);
  // 0x10: u32
  if (data?.cElement !== undefined) view.setUint32(16, Number(data.cElement), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgpElement !== undefined) view.setBigUint64(24, data.rgpElement === null ? 0n : BigInt(util.toPointer(data.rgpElement)), true);
  // 0x20: pointer
  if (data?.pTrustListInfo !== undefined) view.setBigUint64(32, data.pTrustListInfo === null ? 0n : BigInt(util.toPointer(data.pTrustListInfo)), true);
  // 0x28: i32
  if (data?.fHasRevocationFreshnessTime !== undefined) view.setInt32(40, Number(data.fHasRevocationFreshnessTime), true);
  // 0x2c: u32
  if (data?.dwRevocationFreshnessTime !== undefined) view.setUint32(44, Number(data.dwRevocationFreshnessTime), true);
  return buf;
}

export class CERT_SIMPLE_CHAINView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get TrustStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cElement(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgpElement(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pTrustListInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: i32
  get fHasRevocationFreshnessTime(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get dwRevocationFreshnessTime(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set TrustStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cElement(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgpElement(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pTrustListInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: i32
  set fHasRevocationFreshnessTime(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set dwRevocationFreshnessTime(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_CHAIN_CONTEXT (size: 72)
 */
export interface CERT_CHAIN_CONTEXT {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CERT_TRUST_STATUS */
  TrustStatus: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cChain: number;
  /** ptr */
  rgpChain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cLowerQualityChainContext: number;
  /** ptr */
  rgpLowerQualityChainContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fHasRevocationFreshnessTime: boolean;
  /** u32 */
  dwRevocationFreshnessTime: number;
  /** u32 */
  dwCreateFlags: number;
  /** System.Guid */
  ChainId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_CHAIN_CONTEXT = 72;

export function allocCERT_CHAIN_CONTEXT(data?: Partial<CERT_CHAIN_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CHAIN_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TrustStatus !== undefined) view.setBigUint64(8, data.TrustStatus === null ? 0n : BigInt(util.toPointer(data.TrustStatus)), true);
  // 0x10: u32
  if (data?.cChain !== undefined) view.setUint32(16, Number(data.cChain), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgpChain !== undefined) view.setBigUint64(24, data.rgpChain === null ? 0n : BigInt(util.toPointer(data.rgpChain)), true);
  // 0x20: u32
  if (data?.cLowerQualityChainContext !== undefined) view.setUint32(32, Number(data.cLowerQualityChainContext), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgpLowerQualityChainContext !== undefined) view.setBigUint64(40, data.rgpLowerQualityChainContext === null ? 0n : BigInt(util.toPointer(data.rgpLowerQualityChainContext)), true);
  // 0x30: i32
  if (data?.fHasRevocationFreshnessTime !== undefined) view.setInt32(48, Number(data.fHasRevocationFreshnessTime), true);
  // 0x34: u32
  if (data?.dwRevocationFreshnessTime !== undefined) view.setUint32(52, Number(data.dwRevocationFreshnessTime), true);
  // 0x38: u32
  if (data?.dwCreateFlags !== undefined) view.setUint32(56, Number(data.dwCreateFlags), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.ChainId !== undefined) view.setBigUint64(64, data.ChainId === null ? 0n : BigInt(util.toPointer(data.ChainId)), true);
  return buf;
}

export class CERT_CHAIN_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get TrustStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cChain(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgpChain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cLowerQualityChainContext(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rgpLowerQualityChainContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: i32
  get fHasRevocationFreshnessTime(): number {
    return this.view.getInt32(48, true);
  }

  // 0x34: u32
  get dwRevocationFreshnessTime(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwCreateFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get ChainId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set TrustStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cChain(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgpChain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cLowerQualityChainContext(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rgpLowerQualityChainContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: i32
  set fHasRevocationFreshnessTime(value: number) {
    this.view.setInt32(48, value, true);
  }

  // 0x34: u32
  set dwRevocationFreshnessTime(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwCreateFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set ChainId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_USAGE_MATCH (size: 16)
 */
export interface CERT_USAGE_MATCH {
  /** u32 */
  dwType: number;
  /** Windows.Win32.Security.Cryptography.CTL_USAGE */
  Usage: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_USAGE_MATCH = 16;

export function allocCERT_USAGE_MATCH(data?: Partial<CERT_USAGE_MATCH>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_USAGE_MATCH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Usage !== undefined) view.setBigUint64(8, data.Usage === null ? 0n : BigInt(util.toPointer(data.Usage)), true);
  return buf;
}

export class CERT_USAGE_MATCHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Usage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Usage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CTL_USAGE_MATCH (size: 16)
 */
export interface CTL_USAGE_MATCH {
  /** u32 */
  dwType: number;
  /** Windows.Win32.Security.Cryptography.CTL_USAGE */
  Usage: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCTL_USAGE_MATCH = 16;

export function allocCTL_USAGE_MATCH(data?: Partial<CTL_USAGE_MATCH>): Uint8Array {
  const buf = new Uint8Array(sizeofCTL_USAGE_MATCH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Usage !== undefined) view.setBigUint64(8, data.Usage === null ? 0n : BigInt(util.toPointer(data.Usage)), true);
  return buf;
}

export class CTL_USAGE_MATCHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Usage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Usage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_CHAIN_PARA (size: 16)
 */
export interface CERT_CHAIN_PARA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CERT_USAGE_MATCH */
  RequestedUsage: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCERT_CHAIN_PARA = 16;

export function allocCERT_CHAIN_PARA(data?: Partial<CERT_CHAIN_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CHAIN_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.RequestedUsage !== undefined) view.setBigUint64(8, data.RequestedUsage === null ? 0n : BigInt(util.toPointer(data.RequestedUsage)), true);
  return buf;
}

export class CERT_CHAIN_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get RequestedUsage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set RequestedUsage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_REVOCATION_CHAIN_PARA (size: 56)
 */
export interface CERT_REVOCATION_CHAIN_PARA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.HCERTCHAINENGINE */
  hChainEngine: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hAdditionalStore: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwChainFlags: number;
  /** u32 */
  dwUrlRetrievalTimeout: number;
  /** ptr */
  pftCurrentTime: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pftCacheResync: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbMaxUrlRetrievalByteCount: number;
}

export const sizeofCERT_REVOCATION_CHAIN_PARA = 56;

export function allocCERT_REVOCATION_CHAIN_PARA(data?: Partial<CERT_REVOCATION_CHAIN_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_REVOCATION_CHAIN_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hChainEngine !== undefined) view.setBigUint64(8, data.hChainEngine === null ? 0n : BigInt(util.toPointer(data.hChainEngine)), true);
  // 0x10: pointer
  if (data?.hAdditionalStore !== undefined) view.setBigUint64(16, data.hAdditionalStore === null ? 0n : BigInt(util.toPointer(data.hAdditionalStore)), true);
  // 0x18: u32
  if (data?.dwChainFlags !== undefined) view.setUint32(24, Number(data.dwChainFlags), true);
  // 0x1c: u32
  if (data?.dwUrlRetrievalTimeout !== undefined) view.setUint32(28, Number(data.dwUrlRetrievalTimeout), true);
  // 0x20: pointer
  if (data?.pftCurrentTime !== undefined) view.setBigUint64(32, data.pftCurrentTime === null ? 0n : BigInt(util.toPointer(data.pftCurrentTime)), true);
  // 0x28: pointer
  if (data?.pftCacheResync !== undefined) view.setBigUint64(40, data.pftCacheResync === null ? 0n : BigInt(util.toPointer(data.pftCacheResync)), true);
  // 0x30: u32
  if (data?.cbMaxUrlRetrievalByteCount !== undefined) view.setUint32(48, Number(data.cbMaxUrlRetrievalByteCount), true);
  // 0x34: pad4
  return buf;
}

export class CERT_REVOCATION_CHAIN_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hChainEngine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hAdditionalStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwChainFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwUrlRetrievalTimeout(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get pftCurrentTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pftCacheResync(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cbMaxUrlRetrievalByteCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hChainEngine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hAdditionalStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwChainFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwUrlRetrievalTimeout(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set pftCurrentTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pftCacheResync(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set cbMaxUrlRetrievalByteCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CRL_REVOCATION_INFO (size: 24)
 */
export interface CRL_REVOCATION_INFO {
  /** ptr */
  pCrlEntry: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCrlContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCrlIssuerChain: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRL_REVOCATION_INFO = 24;

export function allocCRL_REVOCATION_INFO(data?: Partial<CRL_REVOCATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRL_REVOCATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCrlEntry !== undefined) view.setBigUint64(0, data.pCrlEntry === null ? 0n : BigInt(util.toPointer(data.pCrlEntry)), true);
  // 0x08: pointer
  if (data?.pCrlContext !== undefined) view.setBigUint64(8, data.pCrlContext === null ? 0n : BigInt(util.toPointer(data.pCrlContext)), true);
  // 0x10: pointer
  if (data?.pCrlIssuerChain !== undefined) view.setBigUint64(16, data.pCrlIssuerChain === null ? 0n : BigInt(util.toPointer(data.pCrlIssuerChain)), true);
  return buf;
}

export class CRL_REVOCATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pCrlEntry(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pCrlContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pCrlIssuerChain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pCrlEntry(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pCrlContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pCrlIssuerChain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_CHAIN_FIND_BY_ISSUER_PARA (size: 56)
 */
export interface CERT_CHAIN_FIND_BY_ISSUER_PARA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PSTR */
  pszUsageIdentifier: string | null | Uint8Array;
  /** u32 */
  dwKeySpec: number;
  /** u32 */
  dwAcquirePrivateKeyFlags: number;
  /** u32 */
  cIssuer: number;
  /** ptr */
  rgIssuer: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK */
  pfnFindCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvFindArg: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_CHAIN_FIND_BY_ISSUER_PARA = 56;

export function allocCERT_CHAIN_FIND_BY_ISSUER_PARA(data?: Partial<CERT_CHAIN_FIND_BY_ISSUER_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CHAIN_FIND_BY_ISSUER_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszUsageIdentifier !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszUsageIdentifier);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwKeySpec !== undefined) view.setUint32(16, Number(data.dwKeySpec), true);
  // 0x14: u32
  if (data?.dwAcquirePrivateKeyFlags !== undefined) view.setUint32(20, Number(data.dwAcquirePrivateKeyFlags), true);
  // 0x18: u32
  if (data?.cIssuer !== undefined) view.setUint32(24, Number(data.cIssuer), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgIssuer !== undefined) view.setBigUint64(32, data.rgIssuer === null ? 0n : BigInt(util.toPointer(data.rgIssuer)), true);
  // 0x28: pointer
  if (data?.pfnFindCallback !== undefined) view.setBigUint64(40, data.pfnFindCallback === null ? 0n : BigInt(util.toPointer(data.pfnFindCallback)), true);
  // 0x30: pointer
  if (data?.pvFindArg !== undefined) view.setBigUint64(48, data.pvFindArg === null ? 0n : BigInt(util.toPointer(data.pvFindArg)), true);
  return buf;
}

export class CERT_CHAIN_FIND_BY_ISSUER_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszUsageIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwKeySpec(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwAcquirePrivateKeyFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get cIssuer(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgIssuer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pfnFindCallback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pvFindArg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszUsageIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set dwKeySpec(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwAcquirePrivateKeyFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set cIssuer(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgIssuer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pfnFindCallback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pvFindArg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_CHAIN_POLICY_PARA (size: 16)
 */
export interface CERT_CHAIN_POLICY_PARA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CERT_CHAIN_POLICY_FLAGS */
  dwFlags: CERT_CHAIN_POLICY_FLAGS;
  /** ptr */
  pvExtraPolicyPara: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_CHAIN_POLICY_PARA = 16;

export function allocCERT_CHAIN_POLICY_PARA(data?: Partial<CERT_CHAIN_POLICY_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CHAIN_POLICY_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.pvExtraPolicyPara !== undefined) view.setBigUint64(8, data.pvExtraPolicyPara === null ? 0n : BigInt(util.toPointer(data.pvExtraPolicyPara)), true);
  return buf;
}

export class CERT_CHAIN_POLICY_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pvExtraPolicyPara(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pvExtraPolicyPara(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_CHAIN_POLICY_STATUS (size: 24)
 */
export interface CERT_CHAIN_POLICY_STATUS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwError: number;
  /** i32 */
  lChainIndex: number;
  /** i32 */
  lElementIndex: number;
  /** ptr */
  pvExtraPolicyStatus: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_CHAIN_POLICY_STATUS = 24;

export function allocCERT_CHAIN_POLICY_STATUS(data?: Partial<CERT_CHAIN_POLICY_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_CHAIN_POLICY_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwError !== undefined) view.setUint32(4, Number(data.dwError), true);
  // 0x08: i32
  if (data?.lChainIndex !== undefined) view.setInt32(8, Number(data.lChainIndex), true);
  // 0x0c: i32
  if (data?.lElementIndex !== undefined) view.setInt32(12, Number(data.lElementIndex), true);
  // 0x10: pointer
  if (data?.pvExtraPolicyStatus !== undefined) view.setBigUint64(16, data.pvExtraPolicyStatus === null ? 0n : BigInt(util.toPointer(data.pvExtraPolicyStatus)), true);
  return buf;
}

export class CERT_CHAIN_POLICY_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwError(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get lChainIndex(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lElementIndex(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get pvExtraPolicyStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwError(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set lChainIndex(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lElementIndex(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set pvExtraPolicyStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA (size: 16)
 */
export interface AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwRegPolicySettings: number;
  /** ptr */
  pSignerInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = 16;

export function allocAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA(data?: Partial<AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwRegPolicySettings !== undefined) view.setUint32(4, Number(data.dwRegPolicySettings), true);
  // 0x08: pointer
  if (data?.pSignerInfo !== undefined) view.setBigUint64(8, data.pSignerInfo === null ? 0n : BigInt(util.toPointer(data.pSignerInfo)), true);
  return buf;
}

export class AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwRegPolicySettings(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pSignerInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwRegPolicySettings(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pSignerInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS (size: 8)
 */
export interface AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.BOOL */
  fCommercial: boolean;
}

export const sizeofAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = 8;

export function allocAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS(data?: Partial<AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.fCommercial !== undefined) view.setInt32(4, Number(data.fCommercial), true);
  return buf;
}

export class AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get fCommercial(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set fCommercial(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA (size: 16)
 */
export interface AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwRegPolicySettings: number;
  /** Windows.Win32.Foundation.BOOL */
  fCommercial: boolean;
}

export const sizeofAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = 16;

export function allocAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA(data?: Partial<AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwRegPolicySettings !== undefined) view.setUint32(4, Number(data.dwRegPolicySettings), true);
  // 0x08: i32
  if (data?.fCommercial !== undefined) view.setInt32(8, Number(data.fCommercial), true);
  // 0x0c: pad4
  return buf;
}

export class AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwRegPolicySettings(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get fCommercial(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwRegPolicySettings(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set fCommercial(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.HTTPSPolicyCallbackData (size: 24)
 */
export interface HTTPSPolicyCallbackData {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE */
  dwAuthType: HTTPSPOLICY_CALLBACK_DATA_AUTH_TYPE;
  /** u32 */
  fdwChecks: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszServerName: string | null | Uint8Array | Uint16Array;
}

export const sizeofHTTPSPolicyCallbackData = 24;

export function allocHTTPSPolicyCallbackData(data?: Partial<HTTPSPolicyCallbackData>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTPSPolicyCallbackData);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: u32
  if (data?.dwAuthType !== undefined) view.setUint32(8, Number(data.dwAuthType), true);
  // 0x0c: u32
  if (data?.fdwChecks !== undefined) view.setUint32(12, Number(data.fdwChecks), true);
  // 0x10: buffer
  if (data?.pwszServerName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszServerName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class HTTPSPolicyCallbackDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwAuthType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get fdwChecks(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: buffer
  get pwszServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwAuthType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set fdwChecks(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: buffer
  set pwszServerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.EV_EXTRA_CERT_CHAIN_POLICY_PARA (size: 8)
 */
export interface EV_EXTRA_CERT_CHAIN_POLICY_PARA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CERT_ROOT_PROGRAM_FLAGS */
  dwRootProgramQualifierFlags: CERT_ROOT_PROGRAM_FLAGS;
}

export const sizeofEV_EXTRA_CERT_CHAIN_POLICY_PARA = 8;

export function allocEV_EXTRA_CERT_CHAIN_POLICY_PARA(data?: Partial<EV_EXTRA_CERT_CHAIN_POLICY_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofEV_EXTRA_CERT_CHAIN_POLICY_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwRootProgramQualifierFlags !== undefined) view.setUint32(4, Number(data.dwRootProgramQualifierFlags), true);
  return buf;
}

export class EV_EXTRA_CERT_CHAIN_POLICY_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwRootProgramQualifierFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwRootProgramQualifierFlags(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.EV_EXTRA_CERT_CHAIN_POLICY_STATUS (size: 16)
 */
export interface EV_EXTRA_CERT_CHAIN_POLICY_STATUS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwQualifiers: number;
  /** u32 */
  dwIssuanceUsageIndex: number;
}

export const sizeofEV_EXTRA_CERT_CHAIN_POLICY_STATUS = 16;

export function allocEV_EXTRA_CERT_CHAIN_POLICY_STATUS(data?: Partial<EV_EXTRA_CERT_CHAIN_POLICY_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofEV_EXTRA_CERT_CHAIN_POLICY_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwQualifiers !== undefined) view.setUint32(4, Number(data.dwQualifiers), true);
  // 0x08: u32
  if (data?.dwIssuanceUsageIndex !== undefined) view.setUint32(8, Number(data.dwIssuanceUsageIndex), true);
  // 0x0c: pad4
  return buf;
}

export class EV_EXTRA_CERT_CHAIN_POLICY_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwQualifiers(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwIssuanceUsageIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwQualifiers(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwIssuanceUsageIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS (size: 24)
 */
export interface SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwErrorLevel: number;
  /** u32 */
  dwErrorCategory: number;
  /** u32 */
  dwReserved: number;
  /** array */
  wszErrorText: Deno.PointerValue | null;
}

export const sizeofSSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS = 24;

export function allocSSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS(data?: Partial<SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwErrorLevel !== undefined) view.setUint32(4, Number(data.dwErrorLevel), true);
  // 0x08: u32
  if (data?.dwErrorCategory !== undefined) view.setUint32(8, Number(data.dwErrorCategory), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.wszErrorText !== undefined) view.setBigUint64(16, data.wszErrorText === null ? 0n : BigInt(util.toPointer(data.wszErrorText)), true);
  return buf;
}

export class SSL_F12_EXTRA_CERT_CHAIN_POLICY_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwErrorLevel(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwErrorCategory(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get wszErrorText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwErrorLevel(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwErrorCategory(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set wszErrorText(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA (size: 24)
 */
export interface SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszServerName: string | null | Uint8Array | Uint16Array;
  /** array */
  rgpszHpkpValue: Deno.PointerValue | null;
}

export const sizeofSSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA = 24;

export function allocSSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA(data?: Partial<SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofSSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  // 0x08: buffer
  if (data?.pwszServerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszServerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rgpszHpkpValue !== undefined) view.setBigUint64(16, data.rgpszHpkpValue === null ? 0n : BigInt(util.toPointer(data.rgpszHpkpValue)), true);
  return buf;
}

export class SSL_HPKP_HEADER_EXTRA_CERT_CHAIN_POLICY_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwReserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pwszServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get rgpszHpkpValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwReserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pwszServerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set rgpszHpkpValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA (size: 16)
 */
export interface SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszServerName: string | null | Uint8Array | Uint16Array;
}

export const sizeofSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA = 16;

export function allocSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA(data?: Partial<SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  // 0x08: buffer
  if (data?.pwszServerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszServerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwReserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pwszServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwReserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pwszServerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS (size: 16)
 */
export interface SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS {
  /** u32 */
  cbSize: number;
  /** i32 */
  lError: number;
  /** array */
  wszErrorText: Deno.PointerValue | null;
}

export const sizeofSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS = 16;

export function allocSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS(data?: Partial<SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofSSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.lError !== undefined) view.setInt32(4, Number(data.lError), true);
  // 0x08: pointer
  if (data?.wszErrorText !== undefined) view.setBigUint64(8, data.wszErrorText === null ? 0n : BigInt(util.toPointer(data.wszErrorText)), true);
  return buf;
}

export class SSL_KEY_PIN_EXTRA_CERT_CHAIN_POLICY_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get lError(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get wszErrorText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set lError(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set wszErrorText(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_PKCS12_PBE_PARAMS (size: 8)
 */
export interface CRYPT_PKCS12_PBE_PARAMS {
  /** i32 */
  iIterations: number;
  /** u32 */
  cbSalt: number;
}

export const sizeofCRYPT_PKCS12_PBE_PARAMS = 8;

export function allocCRYPT_PKCS12_PBE_PARAMS(data?: Partial<CRYPT_PKCS12_PBE_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PKCS12_PBE_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iIterations !== undefined) view.setInt32(0, Number(data.iIterations), true);
  // 0x04: u32
  if (data?.cbSalt !== undefined) view.setUint32(4, Number(data.cbSalt), true);
  return buf;
}

export class CRYPT_PKCS12_PBE_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get iIterations(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get cbSalt(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set iIterations(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set cbSalt(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.PKCS12_PBES2_EXPORT_PARAMS (size: 24)
 */
export interface PKCS12_PBES2_EXPORT_PARAMS {
  /** u32 */
  dwSize: number;
  /** ptr */
  hNcryptDescriptor: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPbes2Alg: string | null | Uint8Array | Uint16Array;
}

export const sizeofPKCS12_PBES2_EXPORT_PARAMS = 24;

export function allocPKCS12_PBES2_EXPORT_PARAMS(data?: Partial<PKCS12_PBES2_EXPORT_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofPKCS12_PBES2_EXPORT_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hNcryptDescriptor !== undefined) view.setBigUint64(8, data.hNcryptDescriptor === null ? 0n : BigInt(util.toPointer(data.hNcryptDescriptor)), true);
  // 0x10: buffer
  if (data?.pwszPbes2Alg !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszPbes2Alg);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class PKCS12_PBES2_EXPORT_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hNcryptDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszPbes2Alg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hNcryptDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set pwszPbes2Alg(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_SERVER_OCSP_RESPONSE_CONTEXT (size: 24)
 */
export interface CERT_SERVER_OCSP_RESPONSE_CONTEXT {
  /** u32 */
  cbSize: number;
  /** ptr */
  pbEncodedOcspResponse: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbEncodedOcspResponse: number;
}

export const sizeofCERT_SERVER_OCSP_RESPONSE_CONTEXT = 24;

export function allocCERT_SERVER_OCSP_RESPONSE_CONTEXT(data?: Partial<CERT_SERVER_OCSP_RESPONSE_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SERVER_OCSP_RESPONSE_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbEncodedOcspResponse !== undefined) view.setBigUint64(8, data.pbEncodedOcspResponse === null ? 0n : BigInt(util.toPointer(data.pbEncodedOcspResponse)), true);
  // 0x10: u32
  if (data?.cbEncodedOcspResponse !== undefined) view.setUint32(16, Number(data.cbEncodedOcspResponse), true);
  // 0x14: pad4
  return buf;
}

export class CERT_SERVER_OCSP_RESPONSE_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbEncodedOcspResponse(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbEncodedOcspResponse(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbEncodedOcspResponse(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbEncodedOcspResponse(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CERT_SERVER_OCSP_RESPONSE_OPEN_PARA (size: 40)
 */
export interface CERT_SERVER_OCSP_RESPONSE_OPEN_PARA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  pcbUsedSize: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszOcspDirectory: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.PFN_CERT_SERVER_OCSP_RESPONSE_UPDATE_CALLBACK */
  pfnUpdateCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvUpdateCallbackArg: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_SERVER_OCSP_RESPONSE_OPEN_PARA = 40;

export function allocCERT_SERVER_OCSP_RESPONSE_OPEN_PARA(data?: Partial<CERT_SERVER_OCSP_RESPONSE_OPEN_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SERVER_OCSP_RESPONSE_OPEN_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.pcbUsedSize !== undefined) view.setBigUint64(8, data.pcbUsedSize === null ? 0n : BigInt(util.toPointer(data.pcbUsedSize)), true);
  // 0x10: buffer
  if (data?.pwszOcspDirectory !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszOcspDirectory);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.pfnUpdateCallback !== undefined) view.setBigUint64(24, data.pfnUpdateCallback === null ? 0n : BigInt(util.toPointer(data.pfnUpdateCallback)), true);
  // 0x20: pointer
  if (data?.pvUpdateCallbackArg !== undefined) view.setBigUint64(32, data.pvUpdateCallbackArg === null ? 0n : BigInt(util.toPointer(data.pvUpdateCallbackArg)), true);
  return buf;
}

export class CERT_SERVER_OCSP_RESPONSE_OPEN_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pcbUsedSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszOcspDirectory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pfnUpdateCallback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pvUpdateCallbackArg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pcbUsedSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set pwszOcspDirectory(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: pointer
  set pfnUpdateCallback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pvUpdateCallbackArg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERT_SELECT_CHAIN_PARA (size: 40)
 */
export interface CERT_SELECT_CHAIN_PARA {
  /** Windows.Win32.Security.Cryptography.HCERTCHAINENGINE */
  hChainEngine: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pTime: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hAdditionalStore: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pChainPara: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofCERT_SELECT_CHAIN_PARA = 40;

export function allocCERT_SELECT_CHAIN_PARA(data?: Partial<CERT_SELECT_CHAIN_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SELECT_CHAIN_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hChainEngine !== undefined) view.setBigUint64(0, data.hChainEngine === null ? 0n : BigInt(util.toPointer(data.hChainEngine)), true);
  // 0x08: pointer
  if (data?.pTime !== undefined) view.setBigUint64(8, data.pTime === null ? 0n : BigInt(util.toPointer(data.pTime)), true);
  // 0x10: pointer
  if (data?.hAdditionalStore !== undefined) view.setBigUint64(16, data.hAdditionalStore === null ? 0n : BigInt(util.toPointer(data.hAdditionalStore)), true);
  // 0x18: pointer
  if (data?.pChainPara !== undefined) view.setBigUint64(24, data.pChainPara === null ? 0n : BigInt(util.toPointer(data.pChainPara)), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  return buf;
}

export class CERT_SELECT_CHAIN_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hChainEngine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hAdditionalStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pChainPara(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set hChainEngine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hAdditionalStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pChainPara(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CERT_SELECT_CRITERIA (size: 16)
 */
export interface CERT_SELECT_CRITERIA {
  /** Windows.Win32.Security.Cryptography.CERT_SELECT_CRITERIA_TYPE */
  dwType: CERT_SELECT_CRITERIA_TYPE;
  /** u32 */
  cPara: number;
  /** ptr */
  ppPara: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_SELECT_CRITERIA = 16;

export function allocCERT_SELECT_CRITERIA(data?: Partial<CERT_SELECT_CRITERIA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SELECT_CRITERIA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: u32
  if (data?.cPara !== undefined) view.setUint32(4, Number(data.cPara), true);
  // 0x08: pointer
  if (data?.ppPara !== undefined) view.setBigUint64(8, data.ppPara === null ? 0n : BigInt(util.toPointer(data.ppPara)), true);
  return buf;
}

export class CERT_SELECT_CRITERIAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cPara(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ppPara(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cPara(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ppPara(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_TIMESTAMP_REQUEST (size: 56)
 */
export interface CRYPT_TIMESTAMP_REQUEST {
  /** Windows.Win32.Security.Cryptography.CRYPT_TIMESTAMP_VERSION */
  dwVersion: CRYPT_TIMESTAMP_VERSION;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  HashedMessage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszTSAPolicyId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Nonce: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fCertReq: boolean;
  /** u32 */
  cExtension: number;
  /** ptr */
  rgExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_TIMESTAMP_REQUEST = 56;

export function allocCRYPT_TIMESTAMP_REQUEST(data?: Partial<CRYPT_TIMESTAMP_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_TIMESTAMP_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(8, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x10: pointer
  if (data?.HashedMessage !== undefined) view.setBigUint64(16, data.HashedMessage === null ? 0n : BigInt(util.toPointer(data.HashedMessage)), true);
  // 0x18: buffer
  if (data?.pszTSAPolicyId !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszTSAPolicyId);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.Nonce !== undefined) view.setBigUint64(32, data.Nonce === null ? 0n : BigInt(util.toPointer(data.Nonce)), true);
  // 0x28: i32
  if (data?.fCertReq !== undefined) view.setInt32(40, Number(data.fCertReq), true);
  // 0x2c: u32
  if (data?.cExtension !== undefined) view.setUint32(44, Number(data.cExtension), true);
  // 0x30: pointer
  if (data?.rgExtension !== undefined) view.setBigUint64(48, data.rgExtension === null ? 0n : BigInt(util.toPointer(data.rgExtension)), true);
  return buf;
}

export class CRYPT_TIMESTAMP_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get HashedMessage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pszTSAPolicyId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Nonce(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: i32
  get fCertReq(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get cExtension(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get rgExtension(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set HashedMessage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: buffer
  set pszTSAPolicyId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: pointer
  set Nonce(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: i32
  set fCertReq(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set cExtension(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set rgExtension(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_TIMESTAMP_RESPONSE (size: 32)
 */
export interface CRYPT_TIMESTAMP_RESPONSE {
  /** Windows.Win32.Security.Cryptography.CRYPT_TIMESTAMP_RESPONSE_STATUS */
  dwStatus: CRYPT_TIMESTAMP_RESPONSE_STATUS;
  /** u32 */
  cFreeText: number;
  /** ptr */
  rgFreeText: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  FailureInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  ContentInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_TIMESTAMP_RESPONSE = 32;

export function allocCRYPT_TIMESTAMP_RESPONSE(data?: Partial<CRYPT_TIMESTAMP_RESPONSE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_TIMESTAMP_RESPONSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStatus !== undefined) view.setUint32(0, Number(data.dwStatus), true);
  // 0x04: u32
  if (data?.cFreeText !== undefined) view.setUint32(4, Number(data.cFreeText), true);
  // 0x08: pointer
  if (data?.rgFreeText !== undefined) view.setBigUint64(8, data.rgFreeText === null ? 0n : BigInt(util.toPointer(data.rgFreeText)), true);
  // 0x10: pointer
  if (data?.FailureInfo !== undefined) view.setBigUint64(16, data.FailureInfo === null ? 0n : BigInt(util.toPointer(data.FailureInfo)), true);
  // 0x18: pointer
  if (data?.ContentInfo !== undefined) view.setBigUint64(24, data.ContentInfo === null ? 0n : BigInt(util.toPointer(data.ContentInfo)), true);
  return buf;
}

export class CRYPT_TIMESTAMP_RESPONSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cFreeText(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgFreeText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get FailureInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ContentInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cFreeText(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgFreeText(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set FailureInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ContentInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_TIMESTAMP_ACCURACY (size: 16)
 */
export interface CRYPT_TIMESTAMP_ACCURACY {
  /** u32 */
  dwSeconds: number;
  /** u32 */
  dwMillis: number;
  /** u32 */
  dwMicros: number;
}

export const sizeofCRYPT_TIMESTAMP_ACCURACY = 16;

export function allocCRYPT_TIMESTAMP_ACCURACY(data?: Partial<CRYPT_TIMESTAMP_ACCURACY>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_TIMESTAMP_ACCURACY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSeconds !== undefined) view.setUint32(0, Number(data.dwSeconds), true);
  // 0x04: u32
  if (data?.dwMillis !== undefined) view.setUint32(4, Number(data.dwMillis), true);
  // 0x08: u32
  if (data?.dwMicros !== undefined) view.setUint32(8, Number(data.dwMicros), true);
  // 0x0c: pad4
  return buf;
}

export class CRYPT_TIMESTAMP_ACCURACYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSeconds(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMillis(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwMicros(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwSeconds(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMillis(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwMicros(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_TIMESTAMP_INFO (size: 96)
 */
export interface CRYPT_TIMESTAMP_INFO {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PSTR */
  pszTSAPolicyId: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  HashAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  HashedMessage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SerialNumber: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ftTime: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvAccuracy: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fOrdering: boolean;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Nonce: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Tsa: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cExtension: number;
  /** ptr */
  rgExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_TIMESTAMP_INFO = 96;

export function allocCRYPT_TIMESTAMP_INFO(data?: Partial<CRYPT_TIMESTAMP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_TIMESTAMP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszTSAPolicyId !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszTSAPolicyId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.HashAlgorithm !== undefined) view.setBigUint64(16, data.HashAlgorithm === null ? 0n : BigInt(util.toPointer(data.HashAlgorithm)), true);
  // 0x18: pointer
  if (data?.HashedMessage !== undefined) view.setBigUint64(24, data.HashedMessage === null ? 0n : BigInt(util.toPointer(data.HashedMessage)), true);
  // 0x20: pointer
  if (data?.SerialNumber !== undefined) view.setBigUint64(32, data.SerialNumber === null ? 0n : BigInt(util.toPointer(data.SerialNumber)), true);
  // 0x28: pointer
  if (data?.ftTime !== undefined) view.setBigUint64(40, data.ftTime === null ? 0n : BigInt(util.toPointer(data.ftTime)), true);
  // 0x30: pointer
  if (data?.pvAccuracy !== undefined) view.setBigUint64(48, data.pvAccuracy === null ? 0n : BigInt(util.toPointer(data.pvAccuracy)), true);
  // 0x38: i32
  if (data?.fOrdering !== undefined) view.setInt32(56, Number(data.fOrdering), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.Nonce !== undefined) view.setBigUint64(64, data.Nonce === null ? 0n : BigInt(util.toPointer(data.Nonce)), true);
  // 0x48: pointer
  if (data?.Tsa !== undefined) view.setBigUint64(72, data.Tsa === null ? 0n : BigInt(util.toPointer(data.Tsa)), true);
  // 0x50: u32
  if (data?.cExtension !== undefined) view.setUint32(80, Number(data.cExtension), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.rgExtension !== undefined) view.setBigUint64(88, data.rgExtension === null ? 0n : BigInt(util.toPointer(data.rgExtension)), true);
  return buf;
}

export class CRYPT_TIMESTAMP_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszTSAPolicyId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get HashAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get HashedMessage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get SerialNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get ftTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pvAccuracy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: i32
  get fOrdering(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get Nonce(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get Tsa(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get cExtension(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get rgExtension(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszTSAPolicyId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set HashAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set HashedMessage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set SerialNumber(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set ftTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pvAccuracy(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: i32
  set fOrdering(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set Nonce(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set Tsa(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set cExtension(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set rgExtension(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_TIMESTAMP_CONTEXT (size: 24)
 */
export interface CRYPT_TIMESTAMP_CONTEXT {
  /** u32 */
  cbEncoded: number;
  /** ptr */
  pbEncoded: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pTimeStamp: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_TIMESTAMP_CONTEXT = 24;

export function allocCRYPT_TIMESTAMP_CONTEXT(data?: Partial<CRYPT_TIMESTAMP_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_TIMESTAMP_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbEncoded !== undefined) view.setUint32(0, Number(data.cbEncoded), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbEncoded !== undefined) view.setBigUint64(8, data.pbEncoded === null ? 0n : BigInt(util.toPointer(data.pbEncoded)), true);
  // 0x10: pointer
  if (data?.pTimeStamp !== undefined) view.setBigUint64(16, data.pTimeStamp === null ? 0n : BigInt(util.toPointer(data.pTimeStamp)), true);
  return buf;
}

export class CRYPT_TIMESTAMP_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbEncoded(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbEncoded(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pTimeStamp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbEncoded(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbEncoded(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pTimeStamp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_TIMESTAMP_PARA (size: 40)
 */
export interface CRYPT_TIMESTAMP_PARA {
  /** Windows.Win32.Foundation.PSTR */
  pszTSAPolicyId: string | null | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  fRequestCerts: boolean;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Nonce: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cExtension: number;
  /** ptr */
  rgExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_TIMESTAMP_PARA = 40;

export function allocCRYPT_TIMESTAMP_PARA(data?: Partial<CRYPT_TIMESTAMP_PARA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_TIMESTAMP_PARA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszTSAPolicyId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszTSAPolicyId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.fRequestCerts !== undefined) view.setInt32(8, Number(data.fRequestCerts), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Nonce !== undefined) view.setBigUint64(16, data.Nonce === null ? 0n : BigInt(util.toPointer(data.Nonce)), true);
  // 0x18: u32
  if (data?.cExtension !== undefined) view.setUint32(24, Number(data.cExtension), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgExtension !== undefined) view.setBigUint64(32, data.rgExtension === null ? 0n : BigInt(util.toPointer(data.rgExtension)), true);
  return buf;
}

export class CRYPT_TIMESTAMP_PARAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszTSAPolicyId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get fRequestCerts(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Nonce(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get cExtension(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgExtension(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszTSAPolicyId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: i32
  set fRequestCerts(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Nonce(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set cExtension(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgExtension(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE (size: 48)
 */
export interface CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET */
  pfnGet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE */
  pfnRelease: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD */
  pfnFreePassword: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE */
  pfnFree: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER */
  pfnFreeIdentifier: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE = 48;

export function allocCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE(data?: Partial<CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfnGet !== undefined) view.setBigUint64(8, data.pfnGet === null ? 0n : BigInt(util.toPointer(data.pfnGet)), true);
  // 0x10: pointer
  if (data?.pfnRelease !== undefined) view.setBigUint64(16, data.pfnRelease === null ? 0n : BigInt(util.toPointer(data.pfnRelease)), true);
  // 0x18: pointer
  if (data?.pfnFreePassword !== undefined) view.setBigUint64(24, data.pfnFreePassword === null ? 0n : BigInt(util.toPointer(data.pfnFreePassword)), true);
  // 0x20: pointer
  if (data?.pfnFree !== undefined) view.setBigUint64(32, data.pfnFree === null ? 0n : BigInt(util.toPointer(data.pfnFree)), true);
  // 0x28: pointer
  if (data?.pfnFreeIdentifier !== undefined) view.setBigUint64(40, data.pfnFreeIdentifier === null ? 0n : BigInt(util.toPointer(data.pfnFreeIdentifier)), true);
  return buf;
}

export class CRYPT_OBJECT_LOCATOR_PROVIDER_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pfnGet(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pfnRelease(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pfnFreePassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pfnFree(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pfnFreeIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pfnGet(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pfnRelease(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pfnFreePassword(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pfnFree(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pfnFreeIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPTPROTECT_PROMPTSTRUCT (size: 24)
 */
export interface CRYPTPROTECT_PROMPTSTRUCT {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwPromptFlags: number;
  /** Windows.Win32.Foundation.HWND */
  hwndApp: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  szPrompt: string | null | Uint8Array | Uint16Array;
}

export const sizeofCRYPTPROTECT_PROMPTSTRUCT = 24;

export function allocCRYPTPROTECT_PROMPTSTRUCT(data?: Partial<CRYPTPROTECT_PROMPTSTRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTPROTECT_PROMPTSTRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwPromptFlags !== undefined) view.setUint32(4, Number(data.dwPromptFlags), true);
  // 0x08: pointer
  if (data?.hwndApp !== undefined) view.setBigUint64(8, data.hwndApp === null ? 0n : BigInt(util.toPointer(data.hwndApp)), true);
  // 0x10: buffer
  if (data?.szPrompt !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.szPrompt);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class CRYPTPROTECT_PROMPTSTRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPromptFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hwndApp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get szPrompt(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPromptFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hwndApp(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set szPrompt(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_PROTECT_STREAM_INFO (size: 16)
 */
export interface NCRYPT_PROTECT_STREAM_INFO {
  /** Windows.Win32.Security.Cryptography.PFNCryptStreamOutputCallback */
  pfnStreamOutput: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvCallbackCtxt: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNCRYPT_PROTECT_STREAM_INFO = 16;

export function allocNCRYPT_PROTECT_STREAM_INFO(data?: Partial<NCRYPT_PROTECT_STREAM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_PROTECT_STREAM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pfnStreamOutput !== undefined) view.setBigUint64(0, data.pfnStreamOutput === null ? 0n : BigInt(util.toPointer(data.pfnStreamOutput)), true);
  // 0x08: pointer
  if (data?.pvCallbackCtxt !== undefined) view.setBigUint64(8, data.pvCallbackCtxt === null ? 0n : BigInt(util.toPointer(data.pvCallbackCtxt)), true);
  return buf;
}

export class NCRYPT_PROTECT_STREAM_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pfnStreamOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pvCallbackCtxt(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pfnStreamOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pvCallbackCtxt(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.NCRYPT_PROTECT_STREAM_INFO_EX (size: 16)
 */
export interface NCRYPT_PROTECT_STREAM_INFO_EX {
  /** Windows.Win32.Security.Cryptography.PFNCryptStreamOutputCallbackEx */
  pfnStreamOutput: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvCallbackCtxt: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNCRYPT_PROTECT_STREAM_INFO_EX = 16;

export function allocNCRYPT_PROTECT_STREAM_INFO_EX(data?: Partial<NCRYPT_PROTECT_STREAM_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofNCRYPT_PROTECT_STREAM_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pfnStreamOutput !== undefined) view.setBigUint64(0, data.pfnStreamOutput === null ? 0n : BigInt(util.toPointer(data.pfnStreamOutput)), true);
  // 0x08: pointer
  if (data?.pvCallbackCtxt !== undefined) view.setBigUint64(8, data.pvCallbackCtxt === null ? 0n : BigInt(util.toPointer(data.pvCallbackCtxt)), true);
  return buf;
}

export class NCRYPT_PROTECT_STREAM_INFO_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pfnStreamOutput(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pvCallbackCtxt(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pfnStreamOutput(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pvCallbackCtxt(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_BLOB (size: 16)
 */
export interface CRYPT_XML_BLOB {
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_CHARSET */
  dwCharset: CRYPT_XML_CHARSET;
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_XML_BLOB = 16;

export function allocCRYPT_XML_BLOB(data?: Partial<CRYPT_XML_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dwCharset !== undefined) view.setInt32(0, Number(data.dwCharset), true);
  // 0x04: u32
  if (data?.cbData !== undefined) view.setUint32(4, Number(data.cbData), true);
  // 0x08: pointer
  if (data?.pbData !== undefined) view.setBigUint64(8, data.pbData === null ? 0n : BigInt(util.toPointer(data.pbData)), true);
  return buf;
}

export class CRYPT_XML_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dwCharset(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get cbData(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set dwCharset(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set cbData(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_DATA_BLOB (size: 16)
 */
export interface CRYPT_XML_DATA_BLOB {
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_XML_DATA_BLOB = 16;

export function allocCRYPT_XML_DATA_BLOB(data?: Partial<CRYPT_XML_DATA_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_DATA_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbData !== undefined) view.setBigUint64(8, data.pbData === null ? 0n : BigInt(util.toPointer(data.pbData)), true);
  return buf;
}

export class CRYPT_XML_DATA_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbData(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbData(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_PROPERTY (size: 24)
 */
export interface CRYPT_XML_PROPERTY {
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_PROPERTY_ID */
  dwPropId: CRYPT_XML_PROPERTY_ID;
  /** ptr */
  pvValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbValue: number;
}

export const sizeofCRYPT_XML_PROPERTY = 24;

export function allocCRYPT_XML_PROPERTY(data?: Partial<CRYPT_XML_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dwPropId !== undefined) view.setInt32(0, Number(data.dwPropId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvValue !== undefined) view.setBigUint64(8, data.pvValue === null ? 0n : BigInt(util.toPointer(data.pvValue)), true);
  // 0x10: u32
  if (data?.cbValue !== undefined) view.setUint32(16, Number(data.cbValue), true);
  // 0x14: pad4
  return buf;
}

export class CRYPT_XML_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dwPropId(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pvValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbValue(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set dwPropId(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pvValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbValue(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_DATA_PROVIDER (size: 32)
 */
export interface CRYPT_XML_DATA_PROVIDER {
  /** ptr */
  pvCallbackState: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbBufferSize: number;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_XML_DATA_PROVIDER_READ */
  pfnRead: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_XML_DATA_PROVIDER_CLOSE */
  pfnClose: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_XML_DATA_PROVIDER = 32;

export function allocCRYPT_XML_DATA_PROVIDER(data?: Partial<CRYPT_XML_DATA_PROVIDER>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_DATA_PROVIDER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pvCallbackState !== undefined) view.setBigUint64(0, data.pvCallbackState === null ? 0n : BigInt(util.toPointer(data.pvCallbackState)), true);
  // 0x08: u32
  if (data?.cbBufferSize !== undefined) view.setUint32(8, Number(data.cbBufferSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pfnRead !== undefined) view.setBigUint64(16, data.pfnRead === null ? 0n : BigInt(util.toPointer(data.pfnRead)), true);
  // 0x18: pointer
  if (data?.pfnClose !== undefined) view.setBigUint64(24, data.pfnClose === null ? 0n : BigInt(util.toPointer(data.pfnClose)), true);
  return buf;
}

export class CRYPT_XML_DATA_PROVIDERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pvCallbackState(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get cbBufferSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pfnRead(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pfnClose(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pvCallbackState(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set cbBufferSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pfnRead(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pfnClose(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_STATUS (size: 16)
 */
export interface CRYPT_XML_STATUS {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_STATUS_ERROR_STATUS */
  dwErrorStatus: CRYPT_XML_STATUS_ERROR_STATUS;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_STATUS_INFO_STATUS */
  dwInfoStatus: CRYPT_XML_STATUS_INFO_STATUS;
}

export const sizeofCRYPT_XML_STATUS = 16;

export function allocCRYPT_XML_STATUS(data?: Partial<CRYPT_XML_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwErrorStatus !== undefined) view.setUint32(4, Number(data.dwErrorStatus), true);
  // 0x08: u32
  if (data?.dwInfoStatus !== undefined) view.setUint32(8, Number(data.dwInfoStatus), true);
  // 0x0c: pad4
  return buf;
}

export class CRYPT_XML_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwErrorStatus(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwInfoStatus(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwErrorStatus(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwInfoStatus(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_ALGORITHM (size: 24)
 */
export interface CRYPT_XML_ALGORITHM {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszAlgorithm: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_BLOB */
  Encoded: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_XML_ALGORITHM = 24;

export function allocCRYPT_XML_ALGORITHM(data?: Partial<CRYPT_XML_ALGORITHM>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_ALGORITHM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.wszAlgorithm !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wszAlgorithm);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.Encoded !== undefined) view.setBigUint64(16, data.Encoded === null ? 0n : BigInt(util.toPointer(data.Encoded)), true);
  return buf;
}

export class CRYPT_XML_ALGORITHMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get wszAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Encoded(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set wszAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set Encoded(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_TRANSFORM_INFO (size: 32)
 */
export interface CRYPT_XML_TRANSFORM_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszAlgorithm: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbBufferSize: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_TRANSFORM_FLAGS */
  dwFlags: CRYPT_XML_TRANSFORM_FLAGS;
  /** Windows.Win32.Security.Cryptography.PFN_CRYPT_XML_CREATE_TRANSFORM */
  pfnCreateTransform: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_XML_TRANSFORM_INFO = 32;

export function allocCRYPT_XML_TRANSFORM_INFO(data?: Partial<CRYPT_XML_TRANSFORM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_TRANSFORM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.wszAlgorithm !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wszAlgorithm);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cbBufferSize !== undefined) view.setUint32(16, Number(data.cbBufferSize), true);
  // 0x14: u32
  if (data?.dwFlags !== undefined) view.setUint32(20, Number(data.dwFlags), true);
  // 0x18: pointer
  if (data?.pfnCreateTransform !== undefined) view.setBigUint64(24, data.pfnCreateTransform === null ? 0n : BigInt(util.toPointer(data.pfnCreateTransform)), true);
  return buf;
}

export class CRYPT_XML_TRANSFORM_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get wszAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbBufferSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get pfnCreateTransform(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set wszAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set cbBufferSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set pfnCreateTransform(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_TRANSFORM_CHAIN_CONFIG (size: 16)
 */
export interface CRYPT_XML_TRANSFORM_CHAIN_CONFIG {
  /** u32 */
  cbSize: number;
  /** u32 */
  cTransformInfo: number;
  /** ptr */
  rgpTransformInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_XML_TRANSFORM_CHAIN_CONFIG = 16;

export function allocCRYPT_XML_TRANSFORM_CHAIN_CONFIG(data?: Partial<CRYPT_XML_TRANSFORM_CHAIN_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_TRANSFORM_CHAIN_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.cTransformInfo !== undefined) view.setUint32(4, Number(data.cTransformInfo), true);
  // 0x08: pointer
  if (data?.rgpTransformInfo !== undefined) view.setBigUint64(8, data.rgpTransformInfo === null ? 0n : BigInt(util.toPointer(data.rgpTransformInfo)), true);
  return buf;
}

export class CRYPT_XML_TRANSFORM_CHAIN_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cTransformInfo(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgpTransformInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cTransformInfo(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgpTransformInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_KEY_DSA_KEY_VALUE (size: 56)
 */
export interface CRYPT_XML_KEY_DSA_KEY_VALUE {
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_DATA_BLOB */
  P: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_DATA_BLOB */
  Q: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_DATA_BLOB */
  G: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_DATA_BLOB */
  Y: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_DATA_BLOB */
  J: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_DATA_BLOB */
  Seed: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_DATA_BLOB */
  Counter: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_XML_KEY_DSA_KEY_VALUE = 56;

export function allocCRYPT_XML_KEY_DSA_KEY_VALUE(data?: Partial<CRYPT_XML_KEY_DSA_KEY_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_KEY_DSA_KEY_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.P !== undefined) view.setBigUint64(0, data.P === null ? 0n : BigInt(util.toPointer(data.P)), true);
  // 0x08: pointer
  if (data?.Q !== undefined) view.setBigUint64(8, data.Q === null ? 0n : BigInt(util.toPointer(data.Q)), true);
  // 0x10: pointer
  if (data?.G !== undefined) view.setBigUint64(16, data.G === null ? 0n : BigInt(util.toPointer(data.G)), true);
  // 0x18: pointer
  if (data?.Y !== undefined) view.setBigUint64(24, data.Y === null ? 0n : BigInt(util.toPointer(data.Y)), true);
  // 0x20: pointer
  if (data?.J !== undefined) view.setBigUint64(32, data.J === null ? 0n : BigInt(util.toPointer(data.J)), true);
  // 0x28: pointer
  if (data?.Seed !== undefined) view.setBigUint64(40, data.Seed === null ? 0n : BigInt(util.toPointer(data.Seed)), true);
  // 0x30: pointer
  if (data?.Counter !== undefined) view.setBigUint64(48, data.Counter === null ? 0n : BigInt(util.toPointer(data.Counter)), true);
  return buf;
}

export class CRYPT_XML_KEY_DSA_KEY_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get P(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Q(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get G(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Y(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get J(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Seed(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Counter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set P(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Q(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set G(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Y(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set J(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set Seed(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Counter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_KEY_ECDSA_KEY_VALUE (size: 32)
 */
export interface CRYPT_XML_KEY_ECDSA_KEY_VALUE {
  /** Windows.Win32.Foundation.PWSTR */
  wszNamedCurve: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_DATA_BLOB */
  X: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_DATA_BLOB */
  Y: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_BLOB */
  ExplicitPara: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_XML_KEY_ECDSA_KEY_VALUE = 32;

export function allocCRYPT_XML_KEY_ECDSA_KEY_VALUE(data?: Partial<CRYPT_XML_KEY_ECDSA_KEY_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_KEY_ECDSA_KEY_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.wszNamedCurve !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.wszNamedCurve);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  // 0x10: pointer
  if (data?.Y !== undefined) view.setBigUint64(16, data.Y === null ? 0n : BigInt(util.toPointer(data.Y)), true);
  // 0x18: pointer
  if (data?.ExplicitPara !== undefined) view.setBigUint64(24, data.ExplicitPara === null ? 0n : BigInt(util.toPointer(data.ExplicitPara)), true);
  return buf;
}

export class CRYPT_XML_KEY_ECDSA_KEY_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get wszNamedCurve(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Y(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ExplicitPara(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set wszNamedCurve(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Y(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ExplicitPara(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_KEY_RSA_KEY_VALUE (size: 16)
 */
export interface CRYPT_XML_KEY_RSA_KEY_VALUE {
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_DATA_BLOB */
  Modulus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_DATA_BLOB */
  Exponent: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_XML_KEY_RSA_KEY_VALUE = 16;

export function allocCRYPT_XML_KEY_RSA_KEY_VALUE(data?: Partial<CRYPT_XML_KEY_RSA_KEY_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_KEY_RSA_KEY_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Modulus !== undefined) view.setBigUint64(0, data.Modulus === null ? 0n : BigInt(util.toPointer(data.Modulus)), true);
  // 0x08: pointer
  if (data?.Exponent !== undefined) view.setBigUint64(8, data.Exponent === null ? 0n : BigInt(util.toPointer(data.Exponent)), true);
  return buf;
}

export class CRYPT_XML_KEY_RSA_KEY_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Modulus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Exponent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Modulus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Exponent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_KEY_VALUE (size: 16)
 */
export interface CRYPT_XML_KEY_VALUE {
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_KEY_VALUE_TYPE */
  dwType: CRYPT_XML_KEY_VALUE_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_XML_KEY_VALUE = 16;

export function allocCRYPT_XML_KEY_VALUE(data?: Partial<CRYPT_XML_KEY_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_KEY_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CRYPT_XML_KEY_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_ISSUER_SERIAL (size: 16)
 */
export interface CRYPT_XML_ISSUER_SERIAL {
  /** Windows.Win32.Foundation.PWSTR */
  wszIssuer: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  wszSerial: string | null | Uint8Array | Uint16Array;
}

export const sizeofCRYPT_XML_ISSUER_SERIAL = 16;

export function allocCRYPT_XML_ISSUER_SERIAL(data?: Partial<CRYPT_XML_ISSUER_SERIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_ISSUER_SERIAL);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.wszIssuer !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.wszIssuer);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.wszSerial !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wszSerial);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class CRYPT_XML_ISSUER_SERIALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get wszIssuer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get wszSerial(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set wszIssuer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set wszSerial(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_X509DATA_ITEM (size: 16)
 */
export interface CRYPT_XML_X509DATA_ITEM {
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_X509DATA_TYPE */
  dwType: CRYPT_XML_X509DATA_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_XML_X509DATA_ITEM = 16;

export function allocCRYPT_XML_X509DATA_ITEM(data?: Partial<CRYPT_XML_X509DATA_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_X509DATA_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CRYPT_XML_X509DATA_ITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_X509DATA (size: 16)
 */
export interface CRYPT_XML_X509DATA {
  /** u32 */
  cX509Data: number;
  /** ptr */
  rgX509Data: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_XML_X509DATA = 16;

export function allocCRYPT_XML_X509DATA(data?: Partial<CRYPT_XML_X509DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_X509DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cX509Data !== undefined) view.setUint32(0, Number(data.cX509Data), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgX509Data !== undefined) view.setBigUint64(8, data.rgX509Data === null ? 0n : BigInt(util.toPointer(data.rgX509Data)), true);
  return buf;
}

export class CRYPT_XML_X509DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cX509Data(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgX509Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cX509Data(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgX509Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_KEY_INFO_ITEM (size: 16)
 */
export interface CRYPT_XML_KEY_INFO_ITEM {
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_KEYINFO_TYPE */
  dwType: CRYPT_XML_KEYINFO_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_XML_KEY_INFO_ITEM = 16;

export function allocCRYPT_XML_KEY_INFO_ITEM(data?: Partial<CRYPT_XML_KEY_INFO_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_KEY_INFO_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CRYPT_XML_KEY_INFO_ITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_KEY_INFO (size: 40)
 */
export interface CRYPT_XML_KEY_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszId: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cKeyInfo: number;
  /** ptr */
  rgKeyInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.BCRYPT_KEY_HANDLE */
  hVerifyKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_XML_KEY_INFO = 40;

export function allocCRYPT_XML_KEY_INFO(data?: Partial<CRYPT_XML_KEY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_KEY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.wszId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wszId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cKeyInfo !== undefined) view.setUint32(16, Number(data.cKeyInfo), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rgKeyInfo !== undefined) view.setBigUint64(24, data.rgKeyInfo === null ? 0n : BigInt(util.toPointer(data.rgKeyInfo)), true);
  // 0x20: pointer
  if (data?.hVerifyKey !== undefined) view.setBigUint64(32, data.hVerifyKey === null ? 0n : BigInt(util.toPointer(data.hVerifyKey)), true);
  return buf;
}

export class CRYPT_XML_KEY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get wszId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cKeyInfo(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rgKeyInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get hVerifyKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set wszId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set cKeyInfo(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rgKeyInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set hVerifyKey(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_REFERENCE (size: 72)
 */
export interface CRYPT_XML_REFERENCE {
  /** u32 */
  cbSize: number;
  /** ptr */
  hReference: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  wszId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  wszUri: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  wszType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_ALGORITHM */
  DigestMethod: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  DigestValue: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cTransform: number;
  /** ptr */
  rgTransform: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_XML_REFERENCE = 72;

export function allocCRYPT_XML_REFERENCE(data?: Partial<CRYPT_XML_REFERENCE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_REFERENCE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hReference !== undefined) view.setBigUint64(8, data.hReference === null ? 0n : BigInt(util.toPointer(data.hReference)), true);
  // 0x10: buffer
  if (data?.wszId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wszId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.wszUri !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.wszUri);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.wszType !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.wszType);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.DigestMethod !== undefined) view.setBigUint64(40, data.DigestMethod === null ? 0n : BigInt(util.toPointer(data.DigestMethod)), true);
  // 0x30: pointer
  if (data?.DigestValue !== undefined) view.setBigUint64(48, data.DigestValue === null ? 0n : BigInt(util.toPointer(data.DigestValue)), true);
  // 0x38: u32
  if (data?.cTransform !== undefined) view.setUint32(56, Number(data.cTransform), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.rgTransform !== undefined) view.setBigUint64(64, data.rgTransform === null ? 0n : BigInt(util.toPointer(data.rgTransform)), true);
  return buf;
}

export class CRYPT_XML_REFERENCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hReference(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get wszId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get wszUri(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get wszType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get DigestMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get DigestValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get cTransform(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get rgTransform(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hReference(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set wszId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set wszUri(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set wszType(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: pointer
  set DigestMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set DigestValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set cTransform(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set rgTransform(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_REFERENCES (size: 16)
 */
export interface CRYPT_XML_REFERENCES {
  /** u32 */
  cReference: number;
  /** ptr */
  rgpReference: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_XML_REFERENCES = 16;

export function allocCRYPT_XML_REFERENCES(data?: Partial<CRYPT_XML_REFERENCES>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_REFERENCES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cReference !== undefined) view.setUint32(0, Number(data.cReference), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgpReference !== undefined) view.setBigUint64(8, data.rgpReference === null ? 0n : BigInt(util.toPointer(data.rgpReference)), true);
  return buf;
}

export class CRYPT_XML_REFERENCESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cReference(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgpReference(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cReference(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgpReference(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_SIGNED_INFO (size: 56)
 */
export interface CRYPT_XML_SIGNED_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_ALGORITHM */
  Canonicalization: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_ALGORITHM */
  SignatureMethod: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cReference: number;
  /** ptr */
  rgpReference: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_BLOB */
  Encoded: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_XML_SIGNED_INFO = 56;

export function allocCRYPT_XML_SIGNED_INFO(data?: Partial<CRYPT_XML_SIGNED_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_SIGNED_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.wszId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wszId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.Canonicalization !== undefined) view.setBigUint64(16, data.Canonicalization === null ? 0n : BigInt(util.toPointer(data.Canonicalization)), true);
  // 0x18: pointer
  if (data?.SignatureMethod !== undefined) view.setBigUint64(24, data.SignatureMethod === null ? 0n : BigInt(util.toPointer(data.SignatureMethod)), true);
  // 0x20: u32
  if (data?.cReference !== undefined) view.setUint32(32, Number(data.cReference), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgpReference !== undefined) view.setBigUint64(40, data.rgpReference === null ? 0n : BigInt(util.toPointer(data.rgpReference)), true);
  // 0x30: pointer
  if (data?.Encoded !== undefined) view.setBigUint64(48, data.Encoded === null ? 0n : BigInt(util.toPointer(data.Encoded)), true);
  return buf;
}

export class CRYPT_XML_SIGNED_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get wszId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Canonicalization(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get SignatureMethod(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cReference(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rgpReference(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Encoded(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set wszId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set Canonicalization(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set SignatureMethod(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cReference(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rgpReference(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Encoded(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_OBJECT (size: 56)
 */
export interface CRYPT_XML_OBJECT {
  /** u32 */
  cbSize: number;
  /** ptr */
  hObject: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  wszId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  wszMimeType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  wszEncoding: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_REFERENCES */
  Manifest: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_BLOB */
  Encoded: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_XML_OBJECT = 56;

export function allocCRYPT_XML_OBJECT(data?: Partial<CRYPT_XML_OBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_OBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hObject !== undefined) view.setBigUint64(8, data.hObject === null ? 0n : BigInt(util.toPointer(data.hObject)), true);
  // 0x10: buffer
  if (data?.wszId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wszId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.wszMimeType !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.wszMimeType);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.wszEncoding !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.wszEncoding);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.Manifest !== undefined) view.setBigUint64(40, data.Manifest === null ? 0n : BigInt(util.toPointer(data.Manifest)), true);
  // 0x30: pointer
  if (data?.Encoded !== undefined) view.setBigUint64(48, data.Encoded === null ? 0n : BigInt(util.toPointer(data.Encoded)), true);
  return buf;
}

export class CRYPT_XML_OBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hObject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get wszId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get wszMimeType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get wszEncoding(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get Manifest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get Encoded(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hObject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set wszId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set wszMimeType(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set wszEncoding(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: pointer
  set Manifest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set Encoded(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_SIGNATURE (size: 64)
 */
export interface CRYPT_XML_SIGNATURE {
  /** u32 */
  cbSize: number;
  /** ptr */
  hSignature: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  wszId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_SIGNED_INFO */
  SignedInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SignatureValue: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pKeyInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cObject: number;
  /** ptr */
  rgpObject: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_XML_SIGNATURE = 64;

export function allocCRYPT_XML_SIGNATURE(data?: Partial<CRYPT_XML_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hSignature !== undefined) view.setBigUint64(8, data.hSignature === null ? 0n : BigInt(util.toPointer(data.hSignature)), true);
  // 0x10: buffer
  if (data?.wszId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wszId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.SignedInfo !== undefined) view.setBigUint64(24, data.SignedInfo === null ? 0n : BigInt(util.toPointer(data.SignedInfo)), true);
  // 0x20: pointer
  if (data?.SignatureValue !== undefined) view.setBigUint64(32, data.SignatureValue === null ? 0n : BigInt(util.toPointer(data.SignatureValue)), true);
  // 0x28: pointer
  if (data?.pKeyInfo !== undefined) view.setBigUint64(40, data.pKeyInfo === null ? 0n : BigInt(util.toPointer(data.pKeyInfo)), true);
  // 0x30: u32
  if (data?.cObject !== undefined) view.setUint32(48, Number(data.cObject), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rgpObject !== undefined) view.setBigUint64(56, data.rgpObject === null ? 0n : BigInt(util.toPointer(data.rgpObject)), true);
  return buf;
}

export class CRYPT_XML_SIGNATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get wszId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get SignedInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get SignatureValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pKeyInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cObject(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get rgpObject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set wszId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: pointer
  set SignedInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set SignatureValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pKeyInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set cObject(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set rgpObject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_DOC_CTXT (size: 40)
 */
export interface CRYPT_XML_DOC_CTXT {
  /** u32 */
  cbSize: number;
  /** ptr */
  hDocCtxt: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pTransformsConfig: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cSignature: number;
  /** ptr */
  rgpSignature: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_XML_DOC_CTXT = 40;

export function allocCRYPT_XML_DOC_CTXT(data?: Partial<CRYPT_XML_DOC_CTXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_DOC_CTXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hDocCtxt !== undefined) view.setBigUint64(8, data.hDocCtxt === null ? 0n : BigInt(util.toPointer(data.hDocCtxt)), true);
  // 0x10: pointer
  if (data?.pTransformsConfig !== undefined) view.setBigUint64(16, data.pTransformsConfig === null ? 0n : BigInt(util.toPointer(data.pTransformsConfig)), true);
  // 0x18: u32
  if (data?.cSignature !== undefined) view.setUint32(24, Number(data.cSignature), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.rgpSignature !== undefined) view.setBigUint64(32, data.rgpSignature === null ? 0n : BigInt(util.toPointer(data.rgpSignature)), true);
  return buf;
}

export class CRYPT_XML_DOC_CTXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hDocCtxt(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pTransformsConfig(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get cSignature(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get rgpSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hDocCtxt(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pTransformsConfig(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set cSignature(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set rgpSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_KEYINFO_PARAM (size: 64)
 */
export interface CRYPT_XML_KEYINFO_PARAM {
  /** Windows.Win32.Foundation.PWSTR */
  wszId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  wszKeyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SKI: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  wszSubjectName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cCertificate: number;
  /** ptr */
  rgCertificate: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cCRL: number;
  /** ptr */
  rgCRL: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_XML_KEYINFO_PARAM = 64;

export function allocCRYPT_XML_KEYINFO_PARAM(data?: Partial<CRYPT_XML_KEYINFO_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_KEYINFO_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.wszId !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.wszId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.wszKeyName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wszKeyName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.SKI !== undefined) view.setBigUint64(16, data.SKI === null ? 0n : BigInt(util.toPointer(data.SKI)), true);
  // 0x18: buffer
  if (data?.wszSubjectName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.wszSubjectName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.cCertificate !== undefined) view.setUint32(32, Number(data.cCertificate), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rgCertificate !== undefined) view.setBigUint64(40, data.rgCertificate === null ? 0n : BigInt(util.toPointer(data.rgCertificate)), true);
  // 0x30: u32
  if (data?.cCRL !== undefined) view.setUint32(48, Number(data.cCRL), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rgCRL !== undefined) view.setBigUint64(56, data.rgCRL === null ? 0n : BigInt(util.toPointer(data.rgCRL)), true);
  return buf;
}

export class CRYPT_XML_KEYINFO_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get wszId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get wszKeyName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get SKI(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get wszSubjectName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cCertificate(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rgCertificate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cCRL(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get rgCRL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set wszId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set wszKeyName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set SKI(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: buffer
  set wszSubjectName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set cCertificate(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rgCertificate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set cCRL(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set rgCRL(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_ALGORITHM_INFO (size: 72)
 */
export interface CRYPT_XML_ALGORITHM_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  wszAlgorithmURI: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  wszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CRYPT_XML_GROUP_ID */
  dwGroupId: CRYPT_XML_GROUP_ID;
  /** Windows.Win32.Foundation.PWSTR */
  wszCNGAlgid: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  wszCNGExtraAlgid: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwSignFlags: number;
  /** u32 */
  dwVerifyFlags: number;
  /** ptr */
  pvPaddingInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pvExtraInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_XML_ALGORITHM_INFO = 72;

export function allocCRYPT_XML_ALGORITHM_INFO(data?: Partial<CRYPT_XML_ALGORITHM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_ALGORITHM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.wszAlgorithmURI !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wszAlgorithmURI);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.wszName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wszName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwGroupId !== undefined) view.setUint32(24, Number(data.dwGroupId), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.wszCNGAlgid !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.wszCNGAlgid);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.wszCNGExtraAlgid !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.wszCNGExtraAlgid);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.dwSignFlags !== undefined) view.setUint32(48, Number(data.dwSignFlags), true);
  // 0x34: u32
  if (data?.dwVerifyFlags !== undefined) view.setUint32(52, Number(data.dwVerifyFlags), true);
  // 0x38: pointer
  if (data?.pvPaddingInfo !== undefined) view.setBigUint64(56, data.pvPaddingInfo === null ? 0n : BigInt(util.toPointer(data.pvPaddingInfo)), true);
  // 0x40: pointer
  if (data?.pvExtraInfo !== undefined) view.setBigUint64(64, data.pvExtraInfo === null ? 0n : BigInt(util.toPointer(data.pvExtraInfo)), true);
  return buf;
}

export class CRYPT_XML_ALGORITHM_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get wszAlgorithmURI(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get wszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwGroupId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get wszCNGAlgid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get wszCNGExtraAlgid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwSignFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwVerifyFlags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get pvPaddingInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get pvExtraInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set wszAlgorithmURI(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set wszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u32
  set dwGroupId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set wszCNGAlgid(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: buffer
  set wszCNGExtraAlgid(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: u32
  set dwSignFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwVerifyFlags(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set pvPaddingInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set pvExtraInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CRYPT_XML_CRYPTOGRAPHIC_INTERFACE (size: 72)
 */
export interface CRYPT_XML_CRYPTOGRAPHIC_INTERFACE {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Security.Cryptography.CryptXmlDllEncodeAlgorithm */
  fpCryptXmlEncodeAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CryptXmlDllCreateDigest */
  fpCryptXmlCreateDigest: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CryptXmlDllDigestData */
  fpCryptXmlDigestData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CryptXmlDllFinalizeDigest */
  fpCryptXmlFinalizeDigest: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CryptXmlDllCloseDigest */
  fpCryptXmlCloseDigest: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CryptXmlDllSignData */
  fpCryptXmlSignData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CryptXmlDllVerifySignature */
  fpCryptXmlVerifySignature: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CryptXmlDllGetAlgorithmInfo */
  fpCryptXmlGetAlgorithmInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_XML_CRYPTOGRAPHIC_INTERFACE = 72;

export function allocCRYPT_XML_CRYPTOGRAPHIC_INTERFACE(data?: Partial<CRYPT_XML_CRYPTOGRAPHIC_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_XML_CRYPTOGRAPHIC_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.fpCryptXmlEncodeAlgorithm !== undefined) view.setBigUint64(8, data.fpCryptXmlEncodeAlgorithm === null ? 0n : BigInt(util.toPointer(data.fpCryptXmlEncodeAlgorithm)), true);
  // 0x10: pointer
  if (data?.fpCryptXmlCreateDigest !== undefined) view.setBigUint64(16, data.fpCryptXmlCreateDigest === null ? 0n : BigInt(util.toPointer(data.fpCryptXmlCreateDigest)), true);
  // 0x18: pointer
  if (data?.fpCryptXmlDigestData !== undefined) view.setBigUint64(24, data.fpCryptXmlDigestData === null ? 0n : BigInt(util.toPointer(data.fpCryptXmlDigestData)), true);
  // 0x20: pointer
  if (data?.fpCryptXmlFinalizeDigest !== undefined) view.setBigUint64(32, data.fpCryptXmlFinalizeDigest === null ? 0n : BigInt(util.toPointer(data.fpCryptXmlFinalizeDigest)), true);
  // 0x28: pointer
  if (data?.fpCryptXmlCloseDigest !== undefined) view.setBigUint64(40, data.fpCryptXmlCloseDigest === null ? 0n : BigInt(util.toPointer(data.fpCryptXmlCloseDigest)), true);
  // 0x30: pointer
  if (data?.fpCryptXmlSignData !== undefined) view.setBigUint64(48, data.fpCryptXmlSignData === null ? 0n : BigInt(util.toPointer(data.fpCryptXmlSignData)), true);
  // 0x38: pointer
  if (data?.fpCryptXmlVerifySignature !== undefined) view.setBigUint64(56, data.fpCryptXmlVerifySignature === null ? 0n : BigInt(util.toPointer(data.fpCryptXmlVerifySignature)), true);
  // 0x40: pointer
  if (data?.fpCryptXmlGetAlgorithmInfo !== undefined) view.setBigUint64(64, data.fpCryptXmlGetAlgorithmInfo === null ? 0n : BigInt(util.toPointer(data.fpCryptXmlGetAlgorithmInfo)), true);
  return buf;
}

export class CRYPT_XML_CRYPTOGRAPHIC_INTERFACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get fpCryptXmlEncodeAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get fpCryptXmlCreateDigest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get fpCryptXmlDigestData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get fpCryptXmlFinalizeDigest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get fpCryptXmlCloseDigest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get fpCryptXmlSignData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get fpCryptXmlVerifySignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get fpCryptXmlGetAlgorithmInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set fpCryptXmlEncodeAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set fpCryptXmlCreateDigest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set fpCryptXmlDigestData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set fpCryptXmlFinalizeDigest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set fpCryptXmlCloseDigest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set fpCryptXmlSignData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set fpCryptXmlVerifySignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set fpCryptXmlGetAlgorithmInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS (size: 24)
 */
export interface INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS {
  /** i32 */
  keySize: number;
  /** Windows.Win32.Foundation.PWSTR */
  keyExchangeAlgorithm: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  signatureAlgorithm: string | null | Uint8Array | Uint16Array;
}

export const sizeofINFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS = 24;

export function allocINFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS(data?: Partial<INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofINFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.keySize !== undefined) view.setInt32(0, Number(data.keySize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.keyExchangeAlgorithm !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.keyExchangeAlgorithm);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.signatureAlgorithm !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.signatureAlgorithm);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class INFORMATIONCARD_ASYMMETRIC_CRYPTO_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get keySize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get keyExchangeAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get signatureAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set keySize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set keyExchangeAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set signatureAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS (size: 16)
 */
export interface INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS {
  /** i32 */
  keySize: number;
  /** i32 */
  blockSize: number;
  /** i32 */
  feedbackSize: number;
}

export const sizeofINFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS = 16;

export function allocINFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS(data?: Partial<INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofINFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.keySize !== undefined) view.setInt32(0, Number(data.keySize), true);
  // 0x04: i32
  if (data?.blockSize !== undefined) view.setInt32(4, Number(data.blockSize), true);
  // 0x08: i32
  if (data?.feedbackSize !== undefined) view.setInt32(8, Number(data.feedbackSize), true);
  // 0x0c: pad4
  return buf;
}

export class INFORMATIONCARD_SYMMETRIC_CRYPTO_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get keySize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get blockSize(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get feedbackSize(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set keySize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set blockSize(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set feedbackSize(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS (size: 16)
 */
export interface INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS {
  /** i32 */
  inputBlockSize: number;
  /** i32 */
  outputBlockSize: number;
  /** Windows.Win32.Foundation.BOOL */
  canTransformMultipleBlocks: boolean;
  /** Windows.Win32.Foundation.BOOL */
  canReuseTransform: boolean;
}

export const sizeofINFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS = 16;

export function allocINFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS(data?: Partial<INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofINFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.inputBlockSize !== undefined) view.setInt32(0, Number(data.inputBlockSize), true);
  // 0x04: i32
  if (data?.outputBlockSize !== undefined) view.setInt32(4, Number(data.outputBlockSize), true);
  // 0x08: i32
  if (data?.canTransformMultipleBlocks !== undefined) view.setInt32(8, Number(data.canTransformMultipleBlocks), true);
  // 0x0c: i32
  if (data?.canReuseTransform !== undefined) view.setInt32(12, Number(data.canReuseTransform), true);
  return buf;
}

export class INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get inputBlockSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get outputBlockSize(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get canTransformMultipleBlocks(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get canReuseTransform(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set inputBlockSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set outputBlockSize(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set canTransformMultipleBlocks(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set canReuseTransform(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.INFORMATIONCARD_HASH_CRYPTO_PARAMETERS (size: 16)
 */
export interface INFORMATIONCARD_HASH_CRYPTO_PARAMETERS {
  /** i32 */
  hashSize: number;
  /** Windows.Win32.Security.Cryptography.INFORMATIONCARD_TRANSFORM_CRYPTO_PARAMETERS */
  transform: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINFORMATIONCARD_HASH_CRYPTO_PARAMETERS = 16;

export function allocINFORMATIONCARD_HASH_CRYPTO_PARAMETERS(data?: Partial<INFORMATIONCARD_HASH_CRYPTO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofINFORMATIONCARD_HASH_CRYPTO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.hashSize !== undefined) view.setInt32(0, Number(data.hashSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.transform !== undefined) view.setBigUint64(8, data.transform === null ? 0n : BigInt(util.toPointer(data.transform)), true);
  return buf;
}

export class INFORMATIONCARD_HASH_CRYPTO_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get hashSize(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get transform(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set hashSize(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set transform(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.INFORMATIONCARD_CRYPTO_HANDLE (size: 24)
 */
export interface INFORMATIONCARD_CRYPTO_HANDLE {
  /** Windows.Win32.Security.Cryptography.HandleType */
  type: HandleType;
  /** i64 */
  expiration: Deno.PointerValue;
  /** ptr */
  cryptoParameters: Deno.PointerValue | Uint8Array | null;
}

export const sizeofINFORMATIONCARD_CRYPTO_HANDLE = 24;

export function allocINFORMATIONCARD_CRYPTO_HANDLE(data?: Partial<INFORMATIONCARD_CRYPTO_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofINFORMATIONCARD_CRYPTO_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: i64
  if (data?.expiration !== undefined) view.setBigInt64(8, BigInt(data.expiration), true);
  // 0x10: pointer
  if (data?.cryptoParameters !== undefined) view.setBigUint64(16, data.cryptoParameters === null ? 0n : BigInt(util.toPointer(data.cryptoParameters)), true);
  return buf;
}

export class INFORMATIONCARD_CRYPTO_HANDLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: i64
  get expiration(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get cryptoParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: i64
  set expiration(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set cryptoParameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.GENERIC_XML_TOKEN (size: 40)
 */
export interface GENERIC_XML_TOKEN {
  /** Windows.Win32.Foundation.FILETIME */
  createDate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  expiryDate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  xmlToken: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  internalTokenReference: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  externalTokenReference: string | null | Uint8Array | Uint16Array;
}

export const sizeofGENERIC_XML_TOKEN = 40;

export function allocGENERIC_XML_TOKEN(data?: Partial<GENERIC_XML_TOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofGENERIC_XML_TOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.createDate !== undefined) view.setBigUint64(0, data.createDate === null ? 0n : BigInt(util.toPointer(data.createDate)), true);
  // 0x08: pointer
  if (data?.expiryDate !== undefined) view.setBigUint64(8, data.expiryDate === null ? 0n : BigInt(util.toPointer(data.expiryDate)), true);
  // 0x10: buffer
  if (data?.xmlToken !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.xmlToken);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.internalTokenReference !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.internalTokenReference);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.externalTokenReference !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.externalTokenReference);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

export class GENERIC_XML_TOKENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get createDate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get expiryDate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get xmlToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get internalTokenReference(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get externalTokenReference(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set createDate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set expiryDate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set xmlToken(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set internalTokenReference(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set externalTokenReference(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.POLICY_ELEMENT (size: 40)
 */
export interface POLICY_ELEMENT {
  /** Windows.Win32.Foundation.PWSTR */
  targetEndpointAddress: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  issuerEndpointAddress: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  issuedTokenParameters: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  privacyNoticeLink: string | null | Uint8Array | Uint16Array;
  /** u32 */
  privacyNoticeVersion: number;
  /** Windows.Win32.Foundation.BOOL */
  useManagedPresentation: boolean;
}

export const sizeofPOLICY_ELEMENT = 40;

export function allocPOLICY_ELEMENT(data?: Partial<POLICY_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofPOLICY_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.targetEndpointAddress !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.targetEndpointAddress);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.issuerEndpointAddress !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.issuerEndpointAddress);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.issuedTokenParameters !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.issuedTokenParameters);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.privacyNoticeLink !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.privacyNoticeLink);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.privacyNoticeVersion !== undefined) view.setUint32(32, Number(data.privacyNoticeVersion), true);
  // 0x24: i32
  if (data?.useManagedPresentation !== undefined) view.setInt32(36, Number(data.useManagedPresentation), true);
  return buf;
}

export class POLICY_ELEMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get targetEndpointAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get issuerEndpointAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get issuedTokenParameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get privacyNoticeLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get privacyNoticeVersion(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: i32
  get useManagedPresentation(): number {
    return this.view.getInt32(36, true);
  }

  // 0x00: buffer
  set targetEndpointAddress(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set issuerEndpointAddress(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set issuedTokenParameters(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set privacyNoticeLink(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set privacyNoticeVersion(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: i32
  set useManagedPresentation(value: number) {
    this.view.setInt32(36, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.ENDPOINTADDRESS (size: 24)
 */
export interface ENDPOINTADDRESS {
  /** Windows.Win32.Foundation.PWSTR */
  serviceUrl: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  policyUrl: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  rawCertificate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofENDPOINTADDRESS = 24;

export function allocENDPOINTADDRESS(data?: Partial<ENDPOINTADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofENDPOINTADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.serviceUrl !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.serviceUrl);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.policyUrl !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.policyUrl);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.rawCertificate !== undefined) view.setBigUint64(16, data.rawCertificate === null ? 0n : BigInt(util.toPointer(data.rawCertificate)), true);
  return buf;
}

export class ENDPOINTADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get serviceUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get policyUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get rawCertificate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set serviceUrl(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set policyUrl(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set rawCertificate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.ENDPOINTADDRESS2 (size: 32)
 */
export interface ENDPOINTADDRESS2 {
  /** Windows.Win32.Foundation.PWSTR */
  serviceUrl: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  policyUrl: string | null | Uint8Array | Uint16Array;
  /** u32 */
  identityType: number;
  /** ptr */
  identityBytes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofENDPOINTADDRESS2 = 32;

export function allocENDPOINTADDRESS2(data?: Partial<ENDPOINTADDRESS2>): Uint8Array {
  const buf = new Uint8Array(sizeofENDPOINTADDRESS2);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.serviceUrl !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.serviceUrl);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.policyUrl !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.policyUrl);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.identityType !== undefined) view.setUint32(16, Number(data.identityType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.identityBytes !== undefined) view.setBigUint64(24, data.identityBytes === null ? 0n : BigInt(util.toPointer(data.identityBytes)), true);
  return buf;
}

export class ENDPOINTADDRESS2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get serviceUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get policyUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get identityType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get identityBytes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set serviceUrl(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set policyUrl(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set identityType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set identityBytes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CERTIFICATE_CHAIN_BLOB (size: 16)
 */
export interface CERTIFICATE_CHAIN_BLOB {
  /** u32 */
  certCount: number;
  /** ptr */
  rawCertificates: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERTIFICATE_CHAIN_BLOB = 16;

export function allocCERTIFICATE_CHAIN_BLOB(data?: Partial<CERTIFICATE_CHAIN_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofCERTIFICATE_CHAIN_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.certCount !== undefined) view.setUint32(0, Number(data.certCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rawCertificates !== undefined) view.setBigUint64(8, data.rawCertificates === null ? 0n : BigInt(util.toPointer(data.rawCertificates)), true);
  return buf;
}

export class CERTIFICATE_CHAIN_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get certCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rawCertificates(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set certCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rawCertificates(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.CLAIMLIST (size: 16)
 */
export interface CLAIMLIST {
  /** u32 */
  count: number;
  /** ptr */
  claims: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCLAIMLIST = 16;

export function allocCLAIMLIST(data?: Partial<CLAIMLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofCLAIMLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.count !== undefined) view.setUint32(0, Number(data.count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.claims !== undefined) view.setBigUint64(8, data.claims === null ? 0n : BigInt(util.toPointer(data.claims)), true);
  return buf;
}

export class CLAIMLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get claims(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set claims(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.RECIPIENTPOLICY (size: 56)
 */
export interface RECIPIENTPOLICY {
  /** Windows.Win32.Security.Cryptography.ENDPOINTADDRESS */
  recipient: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.ENDPOINTADDRESS */
  issuer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  tokenType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CLAIMLIST */
  requiredClaims: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CLAIMLIST */
  optionalClaims: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  privacyUrl: string | null | Uint8Array | Uint16Array;
  /** u32 */
  privacyVersion: number;
}

export const sizeofRECIPIENTPOLICY = 56;

export function allocRECIPIENTPOLICY(data?: Partial<RECIPIENTPOLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofRECIPIENTPOLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.recipient !== undefined) view.setBigUint64(0, data.recipient === null ? 0n : BigInt(util.toPointer(data.recipient)), true);
  // 0x08: pointer
  if (data?.issuer !== undefined) view.setBigUint64(8, data.issuer === null ? 0n : BigInt(util.toPointer(data.issuer)), true);
  // 0x10: buffer
  if (data?.tokenType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.tokenType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.requiredClaims !== undefined) view.setBigUint64(24, data.requiredClaims === null ? 0n : BigInt(util.toPointer(data.requiredClaims)), true);
  // 0x20: pointer
  if (data?.optionalClaims !== undefined) view.setBigUint64(32, data.optionalClaims === null ? 0n : BigInt(util.toPointer(data.optionalClaims)), true);
  // 0x28: buffer
  if (data?.privacyUrl !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.privacyUrl);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.privacyVersion !== undefined) view.setUint32(48, Number(data.privacyVersion), true);
  // 0x34: pad4
  return buf;
}

export class RECIPIENTPOLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get recipient(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get issuer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get tokenType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get requiredClaims(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get optionalClaims(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get privacyUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get privacyVersion(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set recipient(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set issuer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set tokenType(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: pointer
  set requiredClaims(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set optionalClaims(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: buffer
  set privacyUrl(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: u32
  set privacyVersion(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Security.Cryptography.RECIPIENTPOLICY2 (size: 56)
 */
export interface RECIPIENTPOLICY2 {
  /** Windows.Win32.Security.Cryptography.ENDPOINTADDRESS2 */
  recipient: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.ENDPOINTADDRESS2 */
  issuer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  tokenType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.CLAIMLIST */
  requiredClaims: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CLAIMLIST */
  optionalClaims: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  privacyUrl: string | null | Uint8Array | Uint16Array;
  /** u32 */
  privacyVersion: number;
}

export const sizeofRECIPIENTPOLICY2 = 56;

export function allocRECIPIENTPOLICY2(data?: Partial<RECIPIENTPOLICY2>): Uint8Array {
  const buf = new Uint8Array(sizeofRECIPIENTPOLICY2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.recipient !== undefined) view.setBigUint64(0, data.recipient === null ? 0n : BigInt(util.toPointer(data.recipient)), true);
  // 0x08: pointer
  if (data?.issuer !== undefined) view.setBigUint64(8, data.issuer === null ? 0n : BigInt(util.toPointer(data.issuer)), true);
  // 0x10: buffer
  if (data?.tokenType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.tokenType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.requiredClaims !== undefined) view.setBigUint64(24, data.requiredClaims === null ? 0n : BigInt(util.toPointer(data.requiredClaims)), true);
  // 0x20: pointer
  if (data?.optionalClaims !== undefined) view.setBigUint64(32, data.optionalClaims === null ? 0n : BigInt(util.toPointer(data.optionalClaims)), true);
  // 0x28: buffer
  if (data?.privacyUrl !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.privacyUrl);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.privacyVersion !== undefined) view.setUint32(48, Number(data.privacyVersion), true);
  // 0x34: pad4
  return buf;
}

export class RECIPIENTPOLICY2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get recipient(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get issuer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get tokenType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get requiredClaims(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get optionalClaims(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get privacyUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get privacyVersion(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set recipient(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set issuer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set tokenType(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: pointer
  set requiredClaims(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set optionalClaims(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: buffer
  set privacyUrl(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: u32
  set privacyVersion(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Security.Cryptography.Sip.SIP_SUBJECTINFO (size: 112)
 */
export interface SIP_SUBJECTINFO {
  /** u32 */
  cbSize: number;
  /** ptr */
  pgSubjectType: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwsFileName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwsDisplayName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwIntVersion: number;
  /** usize */
  hProv: Deno.PointerValue;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  DigestAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwEncodingType: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  fdwCAPISettings: number;
  /** u32 */
  fdwSecuritySettings: number;
  /** u32 */
  dwIndex: number;
  /** u32 */
  dwUnionChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pClientData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSIP_SUBJECTINFO = 112;

export function allocSIP_SUBJECTINFO(data?: Partial<SIP_SUBJECTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSIP_SUBJECTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pgSubjectType !== undefined) view.setBigUint64(8, data.pgSubjectType === null ? 0n : BigInt(util.toPointer(data.pgSubjectType)), true);
  // 0x10: pointer
  if (data?.hFile !== undefined) view.setBigUint64(16, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x18: buffer
  if (data?.pwsFileName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwsFileName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pwsDisplayName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwsDisplayName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(40, Number(data.dwReserved1), true);
  // 0x2c: u32
  if (data?.dwIntVersion !== undefined) view.setUint32(44, Number(data.dwIntVersion), true);
  // 0x30: usize
  if (data?.hProv !== undefined) view.setBigUint64(48, BigInt(data.hProv), true);
  // 0x38: pointer
  if (data?.DigestAlgorithm !== undefined) view.setBigUint64(56, data.DigestAlgorithm === null ? 0n : BigInt(util.toPointer(data.DigestAlgorithm)), true);
  // 0x40: u32
  if (data?.dwFlags !== undefined) view.setUint32(64, Number(data.dwFlags), true);
  // 0x44: u32
  if (data?.dwEncodingType !== undefined) view.setUint32(68, Number(data.dwEncodingType), true);
  // 0x48: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(72, Number(data.dwReserved2), true);
  // 0x4c: u32
  if (data?.fdwCAPISettings !== undefined) view.setUint32(76, Number(data.fdwCAPISettings), true);
  // 0x50: u32
  if (data?.fdwSecuritySettings !== undefined) view.setUint32(80, Number(data.fdwSecuritySettings), true);
  // 0x54: u32
  if (data?.dwIndex !== undefined) view.setUint32(84, Number(data.dwIndex), true);
  // 0x58: u32
  if (data?.dwUnionChoice !== undefined) view.setUint32(88, Number(data.dwUnionChoice), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(96, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x68: pointer
  if (data?.pClientData !== undefined) view.setBigUint64(104, data.pClientData === null ? 0n : BigInt(util.toPointer(data.pClientData)), true);
  return buf;
}

export class SIP_SUBJECTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pgSubjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pwsFileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pwsDisplayName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwReserved1(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwIntVersion(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: usize
  get hProv(): Deno.PointerValue {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: pointer
  get DigestAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get dwFlags(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwEncodingType(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwReserved2(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get fdwCAPISettings(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get fdwSecuritySettings(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwIndex(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwUnionChoice(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get pClientData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pgSubjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: buffer
  set pwsFileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set pwsDisplayName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: u32
  set dwReserved1(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwIntVersion(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: usize
  set hProv(value: Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: pointer
  set DigestAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set dwFlags(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwEncodingType(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwReserved2(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set fdwCAPISettings(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set fdwSecuritySettings(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwIndex(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwUnionChoice(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set pClientData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Sip.MS_ADDINFO_FLAT (size: 16)
 */
export interface MS_ADDINFO_FLAT {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pIndirectData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMS_ADDINFO_FLAT = 16;

export function allocMS_ADDINFO_FLAT(data?: Partial<MS_ADDINFO_FLAT>): Uint8Array {
  const buf = new Uint8Array(sizeofMS_ADDINFO_FLAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pIndirectData !== undefined) view.setBigUint64(8, data.pIndirectData === null ? 0n : BigInt(util.toPointer(data.pIndirectData)), true);
  return buf;
}

export class MS_ADDINFO_FLATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pIndirectData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pIndirectData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Sip.MS_ADDINFO_BLOB (size: 32)
 */
export interface MS_ADDINFO_BLOB {
  /** u32 */
  cbStruct: number;
  /** u32 */
  cbMemObject: number;
  /** ptr */
  pbMemObject: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbMemSignedMsg: number;
  /** ptr */
  pbMemSignedMsg: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMS_ADDINFO_BLOB = 32;

export function allocMS_ADDINFO_BLOB(data?: Partial<MS_ADDINFO_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofMS_ADDINFO_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.cbMemObject !== undefined) view.setUint32(4, Number(data.cbMemObject), true);
  // 0x08: pointer
  if (data?.pbMemObject !== undefined) view.setBigUint64(8, data.pbMemObject === null ? 0n : BigInt(util.toPointer(data.pbMemObject)), true);
  // 0x10: u32
  if (data?.cbMemSignedMsg !== undefined) view.setUint32(16, Number(data.cbMemSignedMsg), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbMemSignedMsg !== undefined) view.setBigUint64(24, data.pbMemSignedMsg === null ? 0n : BigInt(util.toPointer(data.pbMemSignedMsg)), true);
  return buf;
}

export class MS_ADDINFO_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbMemObject(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbMemObject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbMemSignedMsg(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pbMemSignedMsg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbMemObject(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbMemObject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbMemSignedMsg(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pbMemSignedMsg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Sip.SIP_CAP_SET_V2 (size: 16)
 */
export interface SIP_CAP_SET_V2 {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.BOOL */
  isMultiSign: boolean;
  /** u32 */
  dwReserved: number;
}

export const sizeofSIP_CAP_SET_V2 = 16;

export function allocSIP_CAP_SET_V2(data?: Partial<SIP_CAP_SET_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofSIP_CAP_SET_V2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: i32
  if (data?.isMultiSign !== undefined) view.setInt32(8, Number(data.isMultiSign), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  return buf;
}

export class SIP_CAP_SET_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get isMultiSign(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set isMultiSign(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Sip.SIP_CAP_SET_V3 (size: 24)
 */
export interface SIP_CAP_SET_V3 {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.BOOL */
  isMultiSign: boolean;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSIP_CAP_SET_V3 = 24;

export function allocSIP_CAP_SET_V3(data?: Partial<SIP_CAP_SET_V3>): Uint8Array {
  const buf = new Uint8Array(sizeofSIP_CAP_SET_V3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: i32
  if (data?.isMultiSign !== undefined) view.setInt32(8, Number(data.isMultiSign), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class SIP_CAP_SET_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get isMultiSign(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set isMultiSign(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Sip.SIP_INDIRECT_DATA (size: 24)
 */
export interface SIP_INDIRECT_DATA {
  /** Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTE_TYPE_VALUE */
  Data: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  DigestAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Digest: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSIP_INDIRECT_DATA = 24;

export function allocSIP_INDIRECT_DATA(data?: Partial<SIP_INDIRECT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSIP_INDIRECT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Data !== undefined) view.setBigUint64(0, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  // 0x08: pointer
  if (data?.DigestAlgorithm !== undefined) view.setBigUint64(8, data.DigestAlgorithm === null ? 0n : BigInt(util.toPointer(data.DigestAlgorithm)), true);
  // 0x10: pointer
  if (data?.Digest !== undefined) view.setBigUint64(16, data.Digest === null ? 0n : BigInt(util.toPointer(data.Digest)), true);
  return buf;
}

export class SIP_INDIRECT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DigestAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Digest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DigestAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Digest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Sip.SIP_DISPATCH_INFO (size: 56)
 */
export interface SIP_DISPATCH_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HANDLE */
  hSIP: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.Sip.pCryptSIPGetSignedDataMsg */
  pfGet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.Sip.pCryptSIPPutSignedDataMsg */
  pfPut: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.Sip.pCryptSIPCreateIndirectData */
  pfCreate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.Sip.pCryptSIPVerifyIndirectData */
  pfVerify: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.Sip.pCryptSIPRemoveSignedDataMsg */
  pfRemove: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSIP_DISPATCH_INFO = 56;

export function allocSIP_DISPATCH_INFO(data?: Partial<SIP_DISPATCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSIP_DISPATCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hSIP !== undefined) view.setBigUint64(8, data.hSIP === null ? 0n : BigInt(util.toPointer(data.hSIP)), true);
  // 0x10: pointer
  if (data?.pfGet !== undefined) view.setBigUint64(16, data.pfGet === null ? 0n : BigInt(util.toPointer(data.pfGet)), true);
  // 0x18: pointer
  if (data?.pfPut !== undefined) view.setBigUint64(24, data.pfPut === null ? 0n : BigInt(util.toPointer(data.pfPut)), true);
  // 0x20: pointer
  if (data?.pfCreate !== undefined) view.setBigUint64(32, data.pfCreate === null ? 0n : BigInt(util.toPointer(data.pfCreate)), true);
  // 0x28: pointer
  if (data?.pfVerify !== undefined) view.setBigUint64(40, data.pfVerify === null ? 0n : BigInt(util.toPointer(data.pfVerify)), true);
  // 0x30: pointer
  if (data?.pfRemove !== undefined) view.setBigUint64(48, data.pfRemove === null ? 0n : BigInt(util.toPointer(data.pfRemove)), true);
  return buf;
}

export class SIP_DISPATCH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hSIP(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pfGet(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pfPut(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pfCreate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pfVerify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pfRemove(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hSIP(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pfGet(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pfPut(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pfCreate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pfVerify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pfRemove(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Sip.SIP_ADD_NEWPROVIDER (size: 96)
 */
export interface SIP_ADD_NEWPROVIDER {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pgSubject: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDLLFileName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszMagicNumber: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIsFunctionName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszGetFuncName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPutFuncName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszCreateFuncName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszVerifyFuncName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszRemoveFuncName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIsFunctionNameFmt2: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszGetCapFuncName: string | null | Uint8Array | Uint16Array;
}

export const sizeofSIP_ADD_NEWPROVIDER = 96;

export function allocSIP_ADD_NEWPROVIDER(data?: Partial<SIP_ADD_NEWPROVIDER>): Uint8Array {
  const buf = new Uint8Array(sizeofSIP_ADD_NEWPROVIDER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pgSubject !== undefined) view.setBigUint64(8, data.pgSubject === null ? 0n : BigInt(util.toPointer(data.pgSubject)), true);
  // 0x10: buffer
  if (data?.pwszDLLFileName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszDLLFileName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszMagicNumber !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszMagicNumber);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pwszIsFunctionName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszIsFunctionName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pwszGetFuncName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwszGetFuncName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.pwszPutFuncName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pwszPutFuncName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pwszCreateFuncName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pwszCreateFuncName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.pwszVerifyFuncName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pwszVerifyFuncName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.pwszRemoveFuncName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pwszRemoveFuncName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.pwszIsFunctionNameFmt2 !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pwszIsFunctionNameFmt2);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.pwszGetCapFuncName !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pwszGetCapFuncName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  return buf;
}

export class SIP_ADD_NEWPROVIDERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pgSubject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszDLLFileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pwszMagicNumber(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pwszIsFunctionName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get pwszGetFuncName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: buffer
  get pwszPutFuncName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: buffer
  get pwszCreateFuncName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: buffer
  get pwszVerifyFuncName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: buffer
  get pwszRemoveFuncName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: buffer
  get pwszIsFunctionNameFmt2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: buffer
  get pwszGetCapFuncName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pgSubject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set pwszDLLFileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pwszMagicNumber(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set pwszIsFunctionName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: buffer
  set pwszGetFuncName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: buffer
  set pwszPutFuncName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(util.toPointer((this.buf as any)._f48)), true);
  }

  // 0x38: buffer
  set pwszCreateFuncName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(util.toPointer((this.buf as any)._f56)), true);
  }

  // 0x40: buffer
  set pwszVerifyFuncName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(util.toPointer((this.buf as any)._f64)), true);
  }

  // 0x48: buffer
  set pwszRemoveFuncName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(util.toPointer((this.buf as any)._f72)), true);
  }

  // 0x50: buffer
  set pwszIsFunctionNameFmt2(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(util.toPointer((this.buf as any)._f80)), true);
  }

  // 0x58: buffer
  set pwszGetCapFuncName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(util.toPointer((this.buf as any)._f88)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.Catalog.MS_ADDINFO_CATALOGMEMBER (size: 24)
 */
export interface MS_ADDINFO_CATALOGMEMBER {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pStore: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pMember: Deno.PointerValue | Uint8Array | null;
}

export const sizeofMS_ADDINFO_CATALOGMEMBER = 24;

export function allocMS_ADDINFO_CATALOGMEMBER(data?: Partial<MS_ADDINFO_CATALOGMEMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofMS_ADDINFO_CATALOGMEMBER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pStore !== undefined) view.setBigUint64(8, data.pStore === null ? 0n : BigInt(util.toPointer(data.pStore)), true);
  // 0x10: pointer
  if (data?.pMember !== undefined) view.setBigUint64(16, data.pMember === null ? 0n : BigInt(util.toPointer(data.pMember)), true);
  return buf;
}

export class MS_ADDINFO_CATALOGMEMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pMember(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pMember(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

export type LPARAM = Deno.PointerValue;

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_SELECT_STRUCT_A (size: 136)
 */
export interface CERT_SELECT_STRUCT_A {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pTemplateName: string | null | Uint8Array;
  /** Windows.Win32.Security.Cryptography.UI.CERT_SELECT_STRUCT_FLAGS */
  dwFlags: CERT_SELECT_STRUCT_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  szTitle: string | null | Uint8Array;
  /** u32 */
  cCertStore: number;
  /** ptr */
  arrayCertStore: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  szPurposeOid: string | null | Uint8Array;
  /** u32 */
  cCertContext: number;
  /** ptr */
  arrayCertContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.PFNCMHOOKPROC */
  pfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.PFNCMFILTERPROC */
  pfnFilter: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  szHelpFileName: string | null | Uint8Array;
  /** u32 */
  dwHelpId: number;
  /** usize */
  hprov: Deno.PointerValue;
}

export const sizeofCERT_SELECT_STRUCT_A = 136;

export function allocCERT_SELECT_STRUCT_A(data?: Partial<CERT_SELECT_STRUCT_A>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SELECT_STRUCT_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x18: buffer
  if (data?.pTemplateName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pTemplateName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.szTitle);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.cCertStore !== undefined) view.setUint32(48, Number(data.cCertStore), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.arrayCertStore !== undefined) view.setBigUint64(56, data.arrayCertStore === null ? 0n : BigInt(util.toPointer(data.arrayCertStore)), true);
  // 0x40: buffer
  if (data?.szPurposeOid !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.szPurposeOid);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u32
  if (data?.cCertContext !== undefined) view.setUint32(72, Number(data.cCertContext), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.arrayCertContext !== undefined) view.setBigUint64(80, data.arrayCertContext === null ? 0n : BigInt(util.toPointer(data.arrayCertContext)), true);
  // 0x58: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(88, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x60: pointer
  if (data?.pfnHook !== undefined) view.setBigUint64(96, data.pfnHook === null ? 0n : BigInt(util.toPointer(data.pfnHook)), true);
  // 0x68: pointer
  if (data?.pfnFilter !== undefined) view.setBigUint64(104, data.pfnFilter === null ? 0n : BigInt(util.toPointer(data.pfnFilter)), true);
  // 0x70: buffer
  if (data?.szHelpFileName !== undefined) {
    (buf as any)._f112 = util.pstrToFfi(data.szHelpFileName);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: u32
  if (data?.dwHelpId !== undefined) view.setUint32(120, Number(data.dwHelpId), true);
  // 0x7c: pad4
  // 0x80: usize
  if (data?.hprov !== undefined) view.setBigUint64(128, BigInt(data.hprov), true);
  return buf;
}

export class CERT_SELECT_STRUCT_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pTemplateName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get szTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cCertStore(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get arrayCertStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: buffer
  get szPurposeOid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get cCertContext(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get arrayCertContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get lCustData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get pfnHook(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get pfnFilter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: buffer
  get szHelpFileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: u32
  get dwHelpId(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: pad4

  // 0x80: usize
  get hprov(): Deno.PointerValue {
    return Number(this.view.getBigUint64(128, true));
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: buffer
  set pTemplateName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set szTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: u32
  set cCertStore(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set arrayCertStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: buffer
  set szPurposeOid(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(util.toPointer((this.buf as any)._f64)), true);
  }

  // 0x48: u32
  set cCertContext(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set arrayCertContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set pfnHook(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set pfnFilter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: buffer
  set szHelpFileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f112 = value;
    this.view.setBigUint64(112, BigInt(util.toPointer((this.buf as any)._f112)), true);
  }

  // 0x78: u32
  set dwHelpId(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: pad4

  // 0x80: usize
  set hprov(value: Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_SELECT_STRUCT_W (size: 136)
 */
export interface CERT_SELECT_STRUCT_W {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pTemplateName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.UI.CERT_SELECT_STRUCT_FLAGS */
  dwFlags: CERT_SELECT_STRUCT_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  szTitle: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cCertStore: number;
  /** ptr */
  arrayCertStore: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  szPurposeOid: string | null | Uint8Array;
  /** u32 */
  cCertContext: number;
  /** ptr */
  arrayCertContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.PFNCMHOOKPROC */
  pfnHook: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.PFNCMFILTERPROC */
  pfnFilter: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  szHelpFileName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwHelpId: number;
  /** usize */
  hprov: Deno.PointerValue;
}

export const sizeofCERT_SELECT_STRUCT_W = 136;

export function allocCERT_SELECT_STRUCT_W(data?: Partial<CERT_SELECT_STRUCT_W>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SELECT_STRUCT_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x18: buffer
  if (data?.pTemplateName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pTemplateName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.szTitle);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.cCertStore !== undefined) view.setUint32(48, Number(data.cCertStore), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.arrayCertStore !== undefined) view.setBigUint64(56, data.arrayCertStore === null ? 0n : BigInt(util.toPointer(data.arrayCertStore)), true);
  // 0x40: buffer
  if (data?.szPurposeOid !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.szPurposeOid);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u32
  if (data?.cCertContext !== undefined) view.setUint32(72, Number(data.cCertContext), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.arrayCertContext !== undefined) view.setBigUint64(80, data.arrayCertContext === null ? 0n : BigInt(util.toPointer(data.arrayCertContext)), true);
  // 0x58: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(88, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x60: pointer
  if (data?.pfnHook !== undefined) view.setBigUint64(96, data.pfnHook === null ? 0n : BigInt(util.toPointer(data.pfnHook)), true);
  // 0x68: pointer
  if (data?.pfnFilter !== undefined) view.setBigUint64(104, data.pfnFilter === null ? 0n : BigInt(util.toPointer(data.pfnFilter)), true);
  // 0x70: buffer
  if (data?.szHelpFileName !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data.szHelpFileName);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: u32
  if (data?.dwHelpId !== undefined) view.setUint32(120, Number(data.dwHelpId), true);
  // 0x7c: pad4
  // 0x80: usize
  if (data?.hprov !== undefined) view.setBigUint64(128, BigInt(data.hprov), true);
  return buf;
}

export class CERT_SELECT_STRUCT_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pTemplateName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get szTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cCertStore(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get arrayCertStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: buffer
  get szPurposeOid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get cCertContext(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get arrayCertContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get lCustData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get pfnHook(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get pfnFilter(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: buffer
  get szHelpFileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: u32
  get dwHelpId(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: pad4

  // 0x80: usize
  get hprov(): Deno.PointerValue {
    return Number(this.view.getBigUint64(128, true));
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: buffer
  set pTemplateName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set szTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: u32
  set cCertStore(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set arrayCertStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: buffer
  set szPurposeOid(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(util.toPointer((this.buf as any)._f64)), true);
  }

  // 0x48: u32
  set cCertContext(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set arrayCertContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set pfnHook(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set pfnFilter(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: buffer
  set szHelpFileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f112 = value;
    this.view.setBigUint64(112, BigInt(util.toPointer((this.buf as any)._f112)), true);
  }

  // 0x78: u32
  set dwHelpId(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: pad4

  // 0x80: usize
  set hprov(value: Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_VIEWPROPERTIES_STRUCT_A (size: 160)
 */
export interface CERT_VIEWPROPERTIES_STRUCT_A {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.CERT_VIEWPROPERTIES_STRUCT_FLAGS */
  dwFlags: CERT_VIEWPROPERTIES_STRUCT_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  szTitle: string | null | Uint8Array;
  /** ptr */
  pCertContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  arrayPurposes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cArrayPurposes: number;
  /** u32 */
  cRootStores: number;
  /** ptr */
  rghstoreRoots: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cStores: number;
  /** ptr */
  rghstoreCAs: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cTrustStores: number;
  /** ptr */
  rghstoreTrust: Deno.PointerValue | Uint8Array | null;
  /** usize */
  hprov: Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwPad: number;
  /** Windows.Win32.Foundation.PSTR */
  szHelpFileName: string | null | Uint8Array;
  /** u32 */
  dwHelpId: number;
  /** u32 */
  nStartPage: number;
  /** u32 */
  cArrayPropSheetPages: number;
  /** ptr */
  arrayPropSheetPages: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_VIEWPROPERTIES_STRUCT_A = 160;

export function allocCERT_VIEWPROPERTIES_STRUCT_A(data?: Partial<CERT_VIEWPROPERTIES_STRUCT_A>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_VIEWPROPERTIES_STRUCT_A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.szTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.pCertContext !== undefined) view.setBigUint64(40, data.pCertContext === null ? 0n : BigInt(util.toPointer(data.pCertContext)), true);
  // 0x30: pointer
  if (data?.arrayPurposes !== undefined) view.setBigUint64(48, data.arrayPurposes === null ? 0n : BigInt(util.toPointer(data.arrayPurposes)), true);
  // 0x38: u32
  if (data?.cArrayPurposes !== undefined) view.setUint32(56, Number(data.cArrayPurposes), true);
  // 0x3c: u32
  if (data?.cRootStores !== undefined) view.setUint32(60, Number(data.cRootStores), true);
  // 0x40: pointer
  if (data?.rghstoreRoots !== undefined) view.setBigUint64(64, data.rghstoreRoots === null ? 0n : BigInt(util.toPointer(data.rghstoreRoots)), true);
  // 0x48: u32
  if (data?.cStores !== undefined) view.setUint32(72, Number(data.cStores), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.rghstoreCAs !== undefined) view.setBigUint64(80, data.rghstoreCAs === null ? 0n : BigInt(util.toPointer(data.rghstoreCAs)), true);
  // 0x58: u32
  if (data?.cTrustStores !== undefined) view.setUint32(88, Number(data.cTrustStores), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.rghstoreTrust !== undefined) view.setBigUint64(96, data.rghstoreTrust === null ? 0n : BigInt(util.toPointer(data.rghstoreTrust)), true);
  // 0x68: usize
  if (data?.hprov !== undefined) view.setBigUint64(104, BigInt(data.hprov), true);
  // 0x70: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(112, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x78: u32
  if (data?.dwPad !== undefined) view.setUint32(120, Number(data.dwPad), true);
  // 0x7c: pad4
  // 0x80: buffer
  if (data?.szHelpFileName !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.szHelpFileName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  // 0x88: u32
  if (data?.dwHelpId !== undefined) view.setUint32(136, Number(data.dwHelpId), true);
  // 0x8c: u32
  if (data?.nStartPage !== undefined) view.setUint32(140, Number(data.nStartPage), true);
  // 0x90: u32
  if (data?.cArrayPropSheetPages !== undefined) view.setUint32(144, Number(data.cArrayPropSheetPages), true);
  // 0x94: pad4
  // 0x98: pointer
  if (data?.arrayPropSheetPages !== undefined) view.setBigUint64(152, data.arrayPropSheetPages === null ? 0n : BigInt(util.toPointer(data.arrayPropSheetPages)), true);
  return buf;
}

export class CERT_VIEWPROPERTIES_STRUCT_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get szTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pCertContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get arrayPurposes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get cArrayPurposes(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get cRootStores(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get rghstoreRoots(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get cStores(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get rghstoreCAs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get cTrustStores(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get rghstoreTrust(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: usize
  get hprov(): Deno.PointerValue {
    return Number(this.view.getBigUint64(104, true));
  }

  // 0x70: pointer
  get lCustData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: u32
  get dwPad(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: pad4

  // 0x80: buffer
  get szHelpFileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: u32
  get dwHelpId(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get nStartPage(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get cArrayPropSheetPages(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: pad4

  // 0x98: pointer
  get arrayPropSheetPages(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set szTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: pointer
  set pCertContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set arrayPurposes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set cArrayPurposes(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set cRootStores(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set rghstoreRoots(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set cStores(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set rghstoreCAs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set cTrustStores(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set rghstoreTrust(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: usize
  set hprov(value: Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(value), true);
  }

  // 0x70: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: u32
  set dwPad(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: pad4

  // 0x80: buffer
  set szHelpFileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(util.toPointer((this.buf as any)._f128)), true);
  }

  // 0x88: u32
  set dwHelpId(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set nStartPage(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set cArrayPropSheetPages(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: pad4

  // 0x98: pointer
  set arrayPropSheetPages(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_VIEWPROPERTIES_STRUCT_W (size: 160)
 */
export interface CERT_VIEWPROPERTIES_STRUCT_W {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.CERT_VIEWPROPERTIES_STRUCT_FLAGS */
  dwFlags: CERT_VIEWPROPERTIES_STRUCT_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  szTitle: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pCertContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  arrayPurposes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cArrayPurposes: number;
  /** u32 */
  cRootStores: number;
  /** ptr */
  rghstoreRoots: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cStores: number;
  /** ptr */
  rghstoreCAs: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cTrustStores: number;
  /** ptr */
  rghstoreTrust: Deno.PointerValue | Uint8Array | null;
  /** usize */
  hprov: Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwPad: number;
  /** Windows.Win32.Foundation.PWSTR */
  szHelpFileName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwHelpId: number;
  /** u32 */
  nStartPage: number;
  /** u32 */
  cArrayPropSheetPages: number;
  /** ptr */
  arrayPropSheetPages: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_VIEWPROPERTIES_STRUCT_W = 160;

export function allocCERT_VIEWPROPERTIES_STRUCT_W(data?: Partial<CERT_VIEWPROPERTIES_STRUCT_W>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_VIEWPROPERTIES_STRUCT_W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(util.toPointer(data.hInstance)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.szTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.pCertContext !== undefined) view.setBigUint64(40, data.pCertContext === null ? 0n : BigInt(util.toPointer(data.pCertContext)), true);
  // 0x30: pointer
  if (data?.arrayPurposes !== undefined) view.setBigUint64(48, data.arrayPurposes === null ? 0n : BigInt(util.toPointer(data.arrayPurposes)), true);
  // 0x38: u32
  if (data?.cArrayPurposes !== undefined) view.setUint32(56, Number(data.cArrayPurposes), true);
  // 0x3c: u32
  if (data?.cRootStores !== undefined) view.setUint32(60, Number(data.cRootStores), true);
  // 0x40: pointer
  if (data?.rghstoreRoots !== undefined) view.setBigUint64(64, data.rghstoreRoots === null ? 0n : BigInt(util.toPointer(data.rghstoreRoots)), true);
  // 0x48: u32
  if (data?.cStores !== undefined) view.setUint32(72, Number(data.cStores), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.rghstoreCAs !== undefined) view.setBigUint64(80, data.rghstoreCAs === null ? 0n : BigInt(util.toPointer(data.rghstoreCAs)), true);
  // 0x58: u32
  if (data?.cTrustStores !== undefined) view.setUint32(88, Number(data.cTrustStores), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.rghstoreTrust !== undefined) view.setBigUint64(96, data.rghstoreTrust === null ? 0n : BigInt(util.toPointer(data.rghstoreTrust)), true);
  // 0x68: usize
  if (data?.hprov !== undefined) view.setBigUint64(104, BigInt(data.hprov), true);
  // 0x70: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(112, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x78: u32
  if (data?.dwPad !== undefined) view.setUint32(120, Number(data.dwPad), true);
  // 0x7c: pad4
  // 0x80: buffer
  if (data?.szHelpFileName !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.szHelpFileName);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  // 0x88: u32
  if (data?.dwHelpId !== undefined) view.setUint32(136, Number(data.dwHelpId), true);
  // 0x8c: u32
  if (data?.nStartPage !== undefined) view.setUint32(140, Number(data.nStartPage), true);
  // 0x90: u32
  if (data?.cArrayPropSheetPages !== undefined) view.setUint32(144, Number(data.cArrayPropSheetPages), true);
  // 0x94: pad4
  // 0x98: pointer
  if (data?.arrayPropSheetPages !== undefined) view.setBigUint64(152, data.arrayPropSheetPages === null ? 0n : BigInt(util.toPointer(data.arrayPropSheetPages)), true);
  return buf;
}

export class CERT_VIEWPROPERTIES_STRUCT_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get szTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pCertContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get arrayPurposes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get cArrayPurposes(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get cRootStores(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: pointer
  get rghstoreRoots(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get cStores(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get rghstoreCAs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get cTrustStores(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get rghstoreTrust(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: usize
  get hprov(): Deno.PointerValue {
    return Number(this.view.getBigUint64(104, true));
  }

  // 0x70: pointer
  get lCustData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: u32
  get dwPad(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: pad4

  // 0x80: buffer
  get szHelpFileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: u32
  get dwHelpId(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get nStartPage(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get cArrayPropSheetPages(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: pad4

  // 0x98: pointer
  get arrayPropSheetPages(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set szTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: pointer
  set pCertContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set arrayPurposes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set cArrayPurposes(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set cRootStores(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: pointer
  set rghstoreRoots(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set cStores(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set rghstoreCAs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set cTrustStores(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set rghstoreTrust(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: usize
  set hprov(value: Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(value), true);
  }

  // 0x70: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: u32
  set dwPad(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: pad4

  // 0x80: buffer
  set szHelpFileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(util.toPointer((this.buf as any)._f128)), true);
  }

  // 0x88: u32
  set dwHelpId(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set nStartPage(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set cArrayPropSheetPages(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: pad4

  // 0x98: pointer
  set arrayPropSheetPages(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_FILTER_EXTENSION_MATCH (size: 32)
 */
export interface CERT_FILTER_EXTENSION_MATCH {
  /** Windows.Win32.Foundation.PSTR */
  szExtensionOID: string | null | Uint8Array;
  /** u32 */
  dwTestOperation: number;
  /** ptr */
  pbTestData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbTestData: number;
}

export const sizeofCERT_FILTER_EXTENSION_MATCH = 32;

export function allocCERT_FILTER_EXTENSION_MATCH(data?: Partial<CERT_FILTER_EXTENSION_MATCH>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_FILTER_EXTENSION_MATCH);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.szExtensionOID !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.szExtensionOID);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwTestOperation !== undefined) view.setUint32(8, Number(data.dwTestOperation), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pbTestData !== undefined) view.setBigUint64(16, data.pbTestData === null ? 0n : BigInt(util.toPointer(data.pbTestData)), true);
  // 0x18: u32
  if (data?.cbTestData !== undefined) view.setUint32(24, Number(data.cbTestData), true);
  // 0x1c: pad4
  return buf;
}

export class CERT_FILTER_EXTENSION_MATCHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get szExtensionOID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwTestOperation(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pbTestData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get cbTestData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: buffer
  set szExtensionOID(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set dwTestOperation(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pbTestData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set cbTestData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_FILTER_DATA (size: 24)
 */
export interface CERT_FILTER_DATA {
  /** u32 */
  dwSize: number;
  /** u32 */
  cExtensionChecks: number;
  /** ptr */
  arrayExtensionChecks: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwCheckingFlags: number;
}

export const sizeofCERT_FILTER_DATA = 24;

export function allocCERT_FILTER_DATA(data?: Partial<CERT_FILTER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_FILTER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.cExtensionChecks !== undefined) view.setUint32(4, Number(data.cExtensionChecks), true);
  // 0x08: pointer
  if (data?.arrayExtensionChecks !== undefined) view.setBigUint64(8, data.arrayExtensionChecks === null ? 0n : BigInt(util.toPointer(data.arrayExtensionChecks)), true);
  // 0x10: u32
  if (data?.dwCheckingFlags !== undefined) view.setUint32(16, Number(data.dwCheckingFlags), true);
  // 0x14: pad4
  return buf;
}

export class CERT_FILTER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cExtensionChecks(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get arrayExtensionChecks(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwCheckingFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cExtensionChecks(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set arrayExtensionChecks(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwCheckingFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_VERIFY_CERTIFICATE_TRUST (size: 144)
 */
export interface CERT_VERIFY_CERTIFICATE_TRUST {
  /** u32 */
  cbSize: number;
  /** ptr */
  pccert: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwIgnoreErr: number;
  /** ptr */
  pdwErrors: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  pszUsageOid: string | null | Uint8Array;
  /** usize */
  hprov: Deno.PointerValue;
  /** u32 */
  cRootStores: number;
  /** ptr */
  rghstoreRoots: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cStores: number;
  /** ptr */
  rghstoreCAs: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cTrustStores: number;
  /** ptr */
  rghstoreTrust: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.LPARAM */
  lCustData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.PFNTRUSTHELPER */
  pfnTrustHelper: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pcChain: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  prgChain: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  prgdwErrors: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  prgpbTrustInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCERT_VERIFY_CERTIFICATE_TRUST = 144;

export function allocCERT_VERIFY_CERTIFICATE_TRUST(data?: Partial<CERT_VERIFY_CERTIFICATE_TRUST>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_VERIFY_CERTIFICATE_TRUST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pccert !== undefined) view.setBigUint64(8, data.pccert === null ? 0n : BigInt(util.toPointer(data.pccert)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: u32
  if (data?.dwIgnoreErr !== undefined) view.setUint32(20, Number(data.dwIgnoreErr), true);
  // 0x18: pointer
  if (data?.pdwErrors !== undefined) view.setBigUint64(24, data.pdwErrors === null ? 0n : BigInt(util.toPointer(data.pdwErrors)), true);
  // 0x20: buffer
  if (data?.pszUsageOid !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszUsageOid);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: usize
  if (data?.hprov !== undefined) view.setBigUint64(40, BigInt(data.hprov), true);
  // 0x30: u32
  if (data?.cRootStores !== undefined) view.setUint32(48, Number(data.cRootStores), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.rghstoreRoots !== undefined) view.setBigUint64(56, data.rghstoreRoots === null ? 0n : BigInt(util.toPointer(data.rghstoreRoots)), true);
  // 0x40: u32
  if (data?.cStores !== undefined) view.setUint32(64, Number(data.cStores), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.rghstoreCAs !== undefined) view.setBigUint64(72, data.rghstoreCAs === null ? 0n : BigInt(util.toPointer(data.rghstoreCAs)), true);
  // 0x50: u32
  if (data?.cTrustStores !== undefined) view.setUint32(80, Number(data.cTrustStores), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.rghstoreTrust !== undefined) view.setBigUint64(88, data.rghstoreTrust === null ? 0n : BigInt(util.toPointer(data.rghstoreTrust)), true);
  // 0x60: pointer
  if (data?.lCustData !== undefined) view.setBigUint64(96, data.lCustData === null ? 0n : BigInt(util.toPointer(data.lCustData)), true);
  // 0x68: pointer
  if (data?.pfnTrustHelper !== undefined) view.setBigUint64(104, data.pfnTrustHelper === null ? 0n : BigInt(util.toPointer(data.pfnTrustHelper)), true);
  // 0x70: pointer
  if (data?.pcChain !== undefined) view.setBigUint64(112, data.pcChain === null ? 0n : BigInt(util.toPointer(data.pcChain)), true);
  // 0x78: pointer
  if (data?.prgChain !== undefined) view.setBigUint64(120, data.prgChain === null ? 0n : BigInt(util.toPointer(data.prgChain)), true);
  // 0x80: pointer
  if (data?.prgdwErrors !== undefined) view.setBigUint64(128, data.prgdwErrors === null ? 0n : BigInt(util.toPointer(data.prgdwErrors)), true);
  // 0x88: pointer
  if (data?.prgpbTrustInfo !== undefined) view.setBigUint64(136, data.prgpbTrustInfo === null ? 0n : BigInt(util.toPointer(data.prgpbTrustInfo)), true);
  return buf;
}

export class CERT_VERIFY_CERTIFICATE_TRUSTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pccert(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwIgnoreErr(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get pdwErrors(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pszUsageOid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: usize
  get hprov(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u32
  get cRootStores(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get rghstoreRoots(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get cStores(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get rghstoreCAs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: u32
  get cTrustStores(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get rghstoreTrust(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get lCustData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get pfnTrustHelper(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get pcChain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get prgChain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get prgdwErrors(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: pointer
  get prgpbTrustInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pccert(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwIgnoreErr(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set pdwErrors(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: buffer
  set pszUsageOid(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: usize
  set hprov(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u32
  set cRootStores(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set rghstoreRoots(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: u32
  set cStores(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set rghstoreCAs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: u32
  set cTrustStores(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set rghstoreTrust(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set lCustData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set pfnTrustHelper(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set pcChain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set prgChain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set prgdwErrors(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }

  // 0x88: pointer
  set prgpbTrustInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CTL_MODIFY_REQUEST (size: 16)
 */
export interface CTL_MODIFY_REQUEST {
  /** ptr */
  pccert: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.UI.CTL_MODIFY_REQUEST_OPERATION */
  dwOperation: CTL_MODIFY_REQUEST_OPERATION;
  /** u32 */
  dwError: number;
}

export const sizeofCTL_MODIFY_REQUEST = 16;

export function allocCTL_MODIFY_REQUEST(data?: Partial<CTL_MODIFY_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofCTL_MODIFY_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pccert !== undefined) view.setBigUint64(0, data.pccert === null ? 0n : BigInt(util.toPointer(data.pccert)), true);
  // 0x08: u32
  if (data?.dwOperation !== undefined) view.setUint32(8, Number(data.dwOperation), true);
  // 0x0c: u32
  if (data?.dwError !== undefined) view.setUint32(12, Number(data.dwError), true);
  return buf;
}

export class CTL_MODIFY_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pccert(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwOperation(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwError(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set pccert(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwOperation(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwError(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CERT_SELECTUI_INPUT (size: 24)
 */
export interface CERT_SELECTUI_INPUT {
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hStore: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  prgpChain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cChain: number;
}

export const sizeofCERT_SELECTUI_INPUT = 24;

export function allocCERT_SELECTUI_INPUT(data?: Partial<CERT_SELECTUI_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofCERT_SELECTUI_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hStore !== undefined) view.setBigUint64(0, data.hStore === null ? 0n : BigInt(util.toPointer(data.hStore)), true);
  // 0x08: pointer
  if (data?.prgpChain !== undefined) view.setBigUint64(8, data.prgpChain === null ? 0n : BigInt(util.toPointer(data.prgpChain)), true);
  // 0x10: u32
  if (data?.cChain !== undefined) view.setUint32(16, Number(data.cChain), true);
  // 0x14: pad4
  return buf;
}

export class CERT_SELECTUI_INPUTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get prgpChain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cChain(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set hStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set prgpChain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cChain(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_CERT_MGR_STRUCT (size: 40)
 */
export interface CRYPTUI_CERT_MGR_STRUCT {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PSTR */
  pszInitUsageOID: string | null | Uint8Array;
}

export const sizeofCRYPTUI_CERT_MGR_STRUCT = 40;

export function allocCRYPTUI_CERT_MGR_STRUCT(data?: Partial<CRYPTUI_CERT_MGR_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_CERT_MGR_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pwszTitle !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszInitUsageOID !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszInitUsageOID);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

export class CRYPTUI_CERT_MGR_STRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get pwszTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pszInitUsageOID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set pwszTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set pszInitUsageOID(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO (size: 40)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO {
  /** u32 */
  dwSize: number;
  /** ptr */
  pGuidSubject: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbBlob: number;
  /** ptr */
  pbBlob: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDisplayName: string | null | Uint8Array | Uint16Array;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO = 40;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pGuidSubject !== undefined) view.setBigUint64(8, data.pGuidSubject === null ? 0n : BigInt(util.toPointer(data.pGuidSubject)), true);
  // 0x10: u32
  if (data?.cbBlob !== undefined) view.setUint32(16, Number(data.cbBlob), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbBlob !== undefined) view.setBigUint64(24, data.pbBlob === null ? 0n : BigInt(util.toPointer(data.pbBlob)), true);
  // 0x20: buffer
  if (data?.pwszDisplayName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszDisplayName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

export class CRYPTUI_WIZ_DIGITAL_SIGN_BLOB_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pGuidSubject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbBlob(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pbBlob(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pwszDisplayName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pGuidSubject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbBlob(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pbBlob(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: buffer
  set pwszDisplayName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO (size: 32)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  cCertStore: number;
  /** ptr */
  rghCertStore: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.UI.PFNCFILTERPROC */
  pFilterCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvCallbackData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO = 32;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.cCertStore !== undefined) view.setUint32(4, Number(data.cCertStore), true);
  // 0x08: pointer
  if (data?.rghCertStore !== undefined) view.setBigUint64(8, data.rghCertStore === null ? 0n : BigInt(util.toPointer(data.rghCertStore)), true);
  // 0x10: pointer
  if (data?.pFilterCallback !== undefined) view.setBigUint64(16, data.pFilterCallback === null ? 0n : BigInt(util.toPointer(data.pFilterCallback)), true);
  // 0x18: pointer
  if (data?.pvCallbackData !== undefined) view.setBigUint64(24, data.pvCallbackData === null ? 0n : BigInt(util.toPointer(data.pvCallbackData)), true);
  return buf;
}

export class CRYPTUI_WIZ_DIGITAL_SIGN_STORE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cCertStore(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rghCertStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pFilterCallback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pvCallbackData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cCertStore(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rghCertStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pFilterCallback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pvCallbackData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO (size: 32)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPvkFileName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszProvName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwProvType: number;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO = 32;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszPvkFileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszPvkFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszProvName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszProvName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwProvType !== undefined) view.setUint32(24, Number(data.dwProvType), true);
  // 0x1c: pad4
  return buf;
}

export class CRYPTUI_WIZ_DIGITAL_SIGN_PVK_FILE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszPvkFileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszProvName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwProvType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszPvkFileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pwszProvName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u32
  set dwProvType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO (size: 32)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszSigningCertFileName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_PVK_OPTION */
  dwPvkChoice: CRYPTUI_WIZ_DIGITAL_SIGN_PVK_OPTION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO = 32;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszSigningCertFileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszSigningCertFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwPvkChoice !== undefined) view.setUint32(16, Number(data.dwPvkChoice), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class CRYPTUI_WIZ_DIGITAL_SIGN_CERT_PVK_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszSigningCertFileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwPvkChoice(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszSigningCertFileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set dwPvkChoice(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO (size: 64)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_SIG_TYPE */
  dwAttrFlags: CRYPTUI_WIZ_DIGITAL_SIGN_SIG_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDescription: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszMoreInfoLocation: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PSTR */
  pszHashAlg: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszSigningCertDisplayString: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.HCERTSTORE */
  hAdditionalCertStore: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  psAuthenticated: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  psUnauthenticated: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO = 64;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwAttrFlags !== undefined) view.setUint32(4, Number(data.dwAttrFlags), true);
  // 0x08: buffer
  if (data?.pwszDescription !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszDescription);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszMoreInfoLocation !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszMoreInfoLocation);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszHashAlg !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszHashAlg);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pwszSigningCertDisplayString !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszSigningCertDisplayString);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.hAdditionalCertStore !== undefined) view.setBigUint64(40, data.hAdditionalCertStore === null ? 0n : BigInt(util.toPointer(data.hAdditionalCertStore)), true);
  // 0x30: pointer
  if (data?.psAuthenticated !== undefined) view.setBigUint64(48, data.psAuthenticated === null ? 0n : BigInt(util.toPointer(data.psAuthenticated)), true);
  // 0x38: pointer
  if (data?.psUnauthenticated !== undefined) view.setBigUint64(56, data.psUnauthenticated === null ? 0n : BigInt(util.toPointer(data.psUnauthenticated)), true);
  return buf;
}

export class CRYPTUI_WIZ_DIGITAL_SIGN_EXTENDED_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwAttrFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pwszDescription(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszMoreInfoLocation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pszHashAlg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pwszSigningCertDisplayString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get hAdditionalCertStore(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get psAuthenticated(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get psUnauthenticated(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwAttrFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pwszDescription(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pwszMoreInfoLocation(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pszHashAlg(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set pwszSigningCertDisplayString(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: pointer
  set hAdditionalCertStore(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set psAuthenticated(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set psUnauthenticated(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_INFO (size: 56)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT */
  dwSubjectChoice: CRYPTUI_WIZ_DIGITAL_SIGN_SUBJECT;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN */
  dwSigningCertChoice: CRYPTUI_WIZ_DIGITAL_SIGN;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszTimestampURL: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_ADDITIONAL_CERT_CHOICE */
  dwAdditionalCertChoice: CRYPTUI_WIZ_DIGITAL_ADDITIONAL_CERT_CHOICE;
  /** ptr */
  pSignExtInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_INFO = 56;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_INFO(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwSubjectChoice !== undefined) view.setUint32(4, Number(data.dwSubjectChoice), true);
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: u32
  if (data?.dwSigningCertChoice !== undefined) view.setUint32(16, Number(data.dwSigningCertChoice), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  // 0x20: buffer
  if (data?.pwszTimestampURL !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszTimestampURL);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwAdditionalCertChoice !== undefined) view.setUint32(40, Number(data.dwAdditionalCertChoice), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pSignExtInfo !== undefined) view.setBigUint64(48, data.pSignExtInfo === null ? 0n : BigInt(util.toPointer(data.pSignExtInfo)), true);
  return buf;
}

export class CRYPTUI_WIZ_DIGITAL_SIGN_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSubjectChoice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwSigningCertChoice(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pwszTimestampURL(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwAdditionalCertChoice(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pSignExtInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSubjectChoice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwSigningCertChoice(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: buffer
  set pwszTimestampURL(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: u32
  set dwAdditionalCertChoice(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pSignExtInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT (size: 16)
 */
export interface CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT {
  /** u32 */
  dwSize: number;
  /** u32 */
  cbBlob: number;
  /** ptr */
  pbBlob: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT = 16;

export function allocCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT(data?: Partial<CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.cbBlob !== undefined) view.setUint32(4, Number(data.cbBlob), true);
  // 0x08: pointer
  if (data?.pbBlob !== undefined) view.setBigUint64(8, data.pbBlob === null ? 0n : BigInt(util.toPointer(data.pbBlob)), true);
  return buf;
}

export class CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbBlob(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pbBlob(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbBlob(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pbBlob(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_INITDIALOG_STRUCT (size: 16)
 */
export interface CRYPTUI_INITDIALOG_STRUCT {
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pCertContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTUI_INITDIALOG_STRUCT = 16;

export function allocCRYPTUI_INITDIALOG_STRUCT(data?: Partial<CRYPTUI_INITDIALOG_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_INITDIALOG_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lParam !== undefined) view.setBigUint64(0, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  // 0x08: pointer
  if (data?.pCertContext !== undefined) view.setBigUint64(8, data.pCertContext === null ? 0n : BigInt(util.toPointer(data.pCertContext)), true);
  return buf;
}

export class CRYPTUI_INITDIALOG_STRUCTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pCertContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set lParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pCertContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_VIEWCERTIFICATE_STRUCTW (size: 120)
 */
export interface CRYPTUI_VIEWCERTIFICATE_STRUCTW {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_VIEWCERTIFICATE_FLAGS */
  dwFlags: CRYPTUI_VIEWCERTIFICATE_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  szTitle: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pCertContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  rgszPurposes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cPurposes: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fpCryptProviderDataTrustedUsage: boolean;
  /** u32 */
  idxSigner: number;
  /** u32 */
  idxCert: number;
  /** Windows.Win32.Foundation.BOOL */
  fCounterSigner: boolean;
  /** u32 */
  idxCounterSigner: number;
  /** u32 */
  cStores: number;
  /** ptr */
  rghStores: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cPropSheetPages: number;
  /** ptr */
  rgPropSheetPages: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  nStartPage: number;
}

export const sizeofCRYPTUI_VIEWCERTIFICATE_STRUCTW = 120;

export function allocCRYPTUI_VIEWCERTIFICATE_STRUCTW(data?: Partial<CRYPTUI_VIEWCERTIFICATE_STRUCTW>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_VIEWCERTIFICATE_STRUCTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.szTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.pCertContext !== undefined) view.setBigUint64(32, data.pCertContext === null ? 0n : BigInt(util.toPointer(data.pCertContext)), true);
  // 0x28: pointer
  if (data?.rgszPurposes !== undefined) view.setBigUint64(40, data.rgszPurposes === null ? 0n : BigInt(util.toPointer(data.rgszPurposes)), true);
  // 0x30: u32
  if (data?.cPurposes !== undefined) view.setUint32(48, Number(data.cPurposes), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(56, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x40: i32
  if (data?.fpCryptProviderDataTrustedUsage !== undefined) view.setInt32(64, Number(data.fpCryptProviderDataTrustedUsage), true);
  // 0x44: u32
  if (data?.idxSigner !== undefined) view.setUint32(68, Number(data.idxSigner), true);
  // 0x48: u32
  if (data?.idxCert !== undefined) view.setUint32(72, Number(data.idxCert), true);
  // 0x4c: i32
  if (data?.fCounterSigner !== undefined) view.setInt32(76, Number(data.fCounterSigner), true);
  // 0x50: u32
  if (data?.idxCounterSigner !== undefined) view.setUint32(80, Number(data.idxCounterSigner), true);
  // 0x54: u32
  if (data?.cStores !== undefined) view.setUint32(84, Number(data.cStores), true);
  // 0x58: pointer
  if (data?.rghStores !== undefined) view.setBigUint64(88, data.rghStores === null ? 0n : BigInt(util.toPointer(data.rghStores)), true);
  // 0x60: u32
  if (data?.cPropSheetPages !== undefined) view.setUint32(96, Number(data.cPropSheetPages), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.rgPropSheetPages !== undefined) view.setBigUint64(104, data.rgPropSheetPages === null ? 0n : BigInt(util.toPointer(data.rgPropSheetPages)), true);
  // 0x70: u32
  if (data?.nStartPage !== undefined) view.setUint32(112, Number(data.nStartPage), true);
  // 0x74: pad4
  return buf;
}

export class CRYPTUI_VIEWCERTIFICATE_STRUCTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get szTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pCertContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get rgszPurposes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cPurposes(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: i32
  get fpCryptProviderDataTrustedUsage(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get idxSigner(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get idxCert(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: i32
  get fCounterSigner(): number {
    return this.view.getInt32(76, true);
  }

  // 0x50: u32
  get idxCounterSigner(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get cStores(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: pointer
  get rghStores(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: u32
  get cPropSheetPages(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get rgPropSheetPages(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u32
  get nStartPage(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set szTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: pointer
  set pCertContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set rgszPurposes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set cPurposes(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: i32
  set fpCryptProviderDataTrustedUsage(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set idxSigner(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set idxCert(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: i32
  set fCounterSigner(value: number) {
    this.view.setInt32(76, value, true);
  }

  // 0x50: u32
  set idxCounterSigner(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set cStores(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: pointer
  set rghStores(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: u32
  set cPropSheetPages(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set rgPropSheetPages(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: u32
  set nStartPage(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_VIEWCERTIFICATE_STRUCTA (size: 120)
 */
export interface CRYPTUI_VIEWCERTIFICATE_STRUCTA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.HWND */
  hwndParent: Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_VIEWCERTIFICATE_FLAGS */
  dwFlags: CRYPTUI_VIEWCERTIFICATE_FLAGS;
  /** Windows.Win32.Foundation.PSTR */
  szTitle: string | null | Uint8Array;
  /** ptr */
  pCertContext: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  rgszPurposes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cPurposes: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fpCryptProviderDataTrustedUsage: boolean;
  /** u32 */
  idxSigner: number;
  /** u32 */
  idxCert: number;
  /** Windows.Win32.Foundation.BOOL */
  fCounterSigner: boolean;
  /** u32 */
  idxCounterSigner: number;
  /** u32 */
  cStores: number;
  /** ptr */
  rghStores: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cPropSheetPages: number;
  /** ptr */
  rgPropSheetPages: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  nStartPage: number;
}

export const sizeofCRYPTUI_VIEWCERTIFICATE_STRUCTA = 120;

export function allocCRYPTUI_VIEWCERTIFICATE_STRUCTA(data?: Partial<CRYPTUI_VIEWCERTIFICATE_STRUCTA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_VIEWCERTIFICATE_STRUCTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndParent !== undefined) view.setBigUint64(8, data.hwndParent === null ? 0n : BigInt(util.toPointer(data.hwndParent)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.szTitle !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.szTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.pCertContext !== undefined) view.setBigUint64(32, data.pCertContext === null ? 0n : BigInt(util.toPointer(data.pCertContext)), true);
  // 0x28: pointer
  if (data?.rgszPurposes !== undefined) view.setBigUint64(40, data.rgszPurposes === null ? 0n : BigInt(util.toPointer(data.rgszPurposes)), true);
  // 0x30: u32
  if (data?.cPurposes !== undefined) view.setUint32(48, Number(data.cPurposes), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(56, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x40: i32
  if (data?.fpCryptProviderDataTrustedUsage !== undefined) view.setInt32(64, Number(data.fpCryptProviderDataTrustedUsage), true);
  // 0x44: u32
  if (data?.idxSigner !== undefined) view.setUint32(68, Number(data.idxSigner), true);
  // 0x48: u32
  if (data?.idxCert !== undefined) view.setUint32(72, Number(data.idxCert), true);
  // 0x4c: i32
  if (data?.fCounterSigner !== undefined) view.setInt32(76, Number(data.fCounterSigner), true);
  // 0x50: u32
  if (data?.idxCounterSigner !== undefined) view.setUint32(80, Number(data.idxCounterSigner), true);
  // 0x54: u32
  if (data?.cStores !== undefined) view.setUint32(84, Number(data.cStores), true);
  // 0x58: pointer
  if (data?.rghStores !== undefined) view.setBigUint64(88, data.rghStores === null ? 0n : BigInt(util.toPointer(data.rghStores)), true);
  // 0x60: u32
  if (data?.cPropSheetPages !== undefined) view.setUint32(96, Number(data.cPropSheetPages), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.rgPropSheetPages !== undefined) view.setBigUint64(104, data.rgPropSheetPages === null ? 0n : BigInt(util.toPointer(data.rgPropSheetPages)), true);
  // 0x70: u32
  if (data?.nStartPage !== undefined) view.setUint32(112, Number(data.nStartPage), true);
  // 0x74: pad4
  return buf;
}

export class CRYPTUI_VIEWCERTIFICATE_STRUCTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get szTitle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pCertContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get rgszPurposes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cPurposes(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: i32
  get fpCryptProviderDataTrustedUsage(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: u32
  get idxSigner(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get idxCert(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: i32
  get fCounterSigner(): number {
    return this.view.getInt32(76, true);
  }

  // 0x50: u32
  get idxCounterSigner(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get cStores(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: pointer
  get rghStores(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: u32
  get cPropSheetPages(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get rgPropSheetPages(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u32
  get nStartPage(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set szTitle(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: pointer
  set pCertContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set rgszPurposes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set cPurposes(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: i32
  set fpCryptProviderDataTrustedUsage(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: u32
  set idxSigner(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set idxCert(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: i32
  set fCounterSigner(value: number) {
    this.view.setInt32(76, value, true);
  }

  // 0x50: u32
  set idxCounterSigner(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set cStores(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: pointer
  set rghStores(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: u32
  set cPropSheetPages(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set rgPropSheetPages(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: u32
  set nStartPage(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_EXPORT_INFO (size: 48)
 */
export interface CRYPTUI_WIZ_EXPORT_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszExportFileName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_EXPORT_SUBJECT */
  dwSubjectChoice: CRYPTUI_WIZ_EXPORT_SUBJECT;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cStores: number;
  /** ptr */
  rghStores: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPTUI_WIZ_EXPORT_INFO = 48;

export function allocCRYPTUI_WIZ_EXPORT_INFO(data?: Partial<CRYPTUI_WIZ_EXPORT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_EXPORT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszExportFileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszExportFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwSubjectChoice !== undefined) view.setUint32(16, Number(data.dwSubjectChoice), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: u32
  if (data?.cStores !== undefined) view.setUint32(32, Number(data.cStores), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.rghStores !== undefined) view.setBigUint64(40, data.rghStores === null ? 0n : BigInt(util.toPointer(data.rghStores)), true);
  return buf;
}

export class CRYPTUI_WIZ_EXPORT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszExportFileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwSubjectChoice(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get cStores(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get rghStores(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszExportFileName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set dwSubjectChoice(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set cStores(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set rghStores(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO (size: 32)
 */
export interface CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_EXPORT_FORMAT */
  dwExportFormat: CRYPTUI_WIZ_EXPORT_FORMAT;
  /** Windows.Win32.Foundation.BOOL */
  fExportChain: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fExportPrivateKeys: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPassword: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  fStrongEncryption: boolean;
}

export const sizeofCRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO = 32;

export function allocCRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO(data?: Partial<CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwExportFormat !== undefined) view.setUint32(4, Number(data.dwExportFormat), true);
  // 0x08: i32
  if (data?.fExportChain !== undefined) view.setInt32(8, Number(data.fExportChain), true);
  // 0x0c: i32
  if (data?.fExportPrivateKeys !== undefined) view.setInt32(12, Number(data.fExportPrivateKeys), true);
  // 0x10: buffer
  if (data?.pwszPassword !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszPassword);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i32
  if (data?.fStrongEncryption !== undefined) view.setInt32(24, Number(data.fStrongEncryption), true);
  // 0x1c: pad4
  return buf;
}

export class CRYPTUI_WIZ_EXPORT_CERTCONTEXT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwExportFormat(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get fExportChain(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get fExportPrivateKeys(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: buffer
  get pwszPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get fStrongEncryption(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwExportFormat(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set fExportChain(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set fExportPrivateKeys(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: buffer
  set pwszPassword(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: i32
  set fStrongEncryption(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_IMPORT_SRC_INFO (size: 32)
 */
export interface CRYPTUI_WIZ_IMPORT_SRC_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Security.Cryptography.UI.CRYPTUI_WIZ_IMPORT_SUBJECT_OPTION */
  dwSubjectChoice: CRYPTUI_WIZ_IMPORT_SUBJECT_OPTION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_KEY_FLAGS */
  dwFlags: CRYPT_KEY_FLAGS;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPassword: string | null | Uint8Array | Uint16Array;
}

export const sizeofCRYPTUI_WIZ_IMPORT_SRC_INFO = 32;

export function allocCRYPTUI_WIZ_IMPORT_SRC_INFO(data?: Partial<CRYPTUI_WIZ_IMPORT_SRC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPTUI_WIZ_IMPORT_SRC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwSubjectChoice !== undefined) view.setUint32(4, Number(data.dwSubjectChoice), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pwszPassword !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszPassword);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export class CRYPTUI_WIZ_IMPORT_SRC_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSubjectChoice(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get pwszPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSubjectChoice(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set pwszPassword(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }
}

/**
 * Windows.Win32.Security.LLFILETIME (size: 8)
 */
export interface LLFILETIME {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofLLFILETIME = 8;

export function allocLLFILETIME(data?: Partial<LLFILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofLLFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class LLFILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_RECORD (size: 104)
 */
export interface DIAGNOSTIC_DATA_RECORD {
  /** i64 */
  rowId: Deno.PointerValue;
  /** u64 */
  timestamp: Deno.PointerValue;
  /** u64 */
  eventKeywords: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  fullEventName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  providerGroupGuid: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  producerName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  privacyTags: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  privacyTagCount: number;
  /** ptr */
  categoryIds: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  categoryIdCount: number;
  /** Windows.Win32.Foundation.BOOL */
  isCoreData: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  extra1: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  extra2: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  extra3: string | null | Uint8Array | Uint16Array;
}

export const sizeofDIAGNOSTIC_DATA_RECORD = 104;

export function allocDIAGNOSTIC_DATA_RECORD(data?: Partial<DIAGNOSTIC_DATA_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.rowId !== undefined) view.setBigInt64(0, BigInt(data.rowId), true);
  // 0x08: u64
  if (data?.timestamp !== undefined) view.setBigUint64(8, BigInt(data.timestamp), true);
  // 0x10: u64
  if (data?.eventKeywords !== undefined) view.setBigUint64(16, BigInt(data.eventKeywords), true);
  // 0x18: buffer
  if (data?.fullEventName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.fullEventName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.providerGroupGuid !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.providerGroupGuid);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.producerName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.producerName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: pointer
  if (data?.privacyTags !== undefined) view.setBigUint64(48, data.privacyTags === null ? 0n : BigInt(util.toPointer(data.privacyTags)), true);
  // 0x38: u32
  if (data?.privacyTagCount !== undefined) view.setUint32(56, Number(data.privacyTagCount), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.categoryIds !== undefined) view.setBigUint64(64, data.categoryIds === null ? 0n : BigInt(util.toPointer(data.categoryIds)), true);
  // 0x48: u32
  if (data?.categoryIdCount !== undefined) view.setUint32(72, Number(data.categoryIdCount), true);
  // 0x4c: i32
  if (data?.isCoreData !== undefined) view.setInt32(76, Number(data.isCoreData), true);
  // 0x50: buffer
  if (data?.extra1 !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.extra1);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.extra2 !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.extra2);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: buffer
  if (data?.extra3 !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.extra3);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  return buf;
}

export class DIAGNOSTIC_DATA_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get rowId(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: u64
  get timestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get eventKeywords(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: buffer
  get fullEventName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get providerGroupGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get producerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get privacyTags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get privacyTagCount(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get categoryIds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get categoryIdCount(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: i32
  get isCoreData(): number {
    return this.view.getInt32(76, true);
  }

  // 0x50: buffer
  get extra1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: buffer
  get extra2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: buffer
  get extra3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i64
  set rowId(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: u64
  set timestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set eventKeywords(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: buffer
  set fullEventName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set providerGroupGuid(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: buffer
  set producerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: pointer
  set privacyTags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set privacyTagCount(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set categoryIds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set categoryIdCount(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: i32
  set isCoreData(value: number) {
    this.view.setInt32(76, value, true);
  }

  // 0x50: buffer
  set extra1(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(util.toPointer((this.buf as any)._f80)), true);
  }

  // 0x58: buffer
  set extra2(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(util.toPointer((this.buf as any)._f88)), true);
  }

  // 0x60: buffer
  set extra3(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(util.toPointer((this.buf as any)._f96)), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_SEARCH_CRITERIA (size: 56)
 */
export interface DIAGNOSTIC_DATA_SEARCH_CRITERIA {
  /** ptr */
  producerNames: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  producerNameCount: number;
  /** Windows.Win32.Foundation.PWSTR */
  textToMatch: string | null | Uint8Array | Uint16Array;
  /** ptr */
  categoryIds: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  categoryIdCount: number;
  /** ptr */
  privacyTags: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  privacyTagCount: number;
  /** Windows.Win32.Foundation.BOOL */
  coreDataOnly: boolean;
}

export const sizeofDIAGNOSTIC_DATA_SEARCH_CRITERIA = 56;

export function allocDIAGNOSTIC_DATA_SEARCH_CRITERIA(data?: Partial<DIAGNOSTIC_DATA_SEARCH_CRITERIA>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_SEARCH_CRITERIA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.producerNames !== undefined) view.setBigUint64(0, data.producerNames === null ? 0n : BigInt(util.toPointer(data.producerNames)), true);
  // 0x08: u32
  if (data?.producerNameCount !== undefined) view.setUint32(8, Number(data.producerNameCount), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.textToMatch !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.textToMatch);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.categoryIds !== undefined) view.setBigUint64(24, data.categoryIds === null ? 0n : BigInt(util.toPointer(data.categoryIds)), true);
  // 0x20: u32
  if (data?.categoryIdCount !== undefined) view.setUint32(32, Number(data.categoryIdCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.privacyTags !== undefined) view.setBigUint64(40, data.privacyTags === null ? 0n : BigInt(util.toPointer(data.privacyTags)), true);
  // 0x30: u32
  if (data?.privacyTagCount !== undefined) view.setUint32(48, Number(data.privacyTagCount), true);
  // 0x34: i32
  if (data?.coreDataOnly !== undefined) view.setInt32(52, Number(data.coreDataOnly), true);
  return buf;
}

export class DIAGNOSTIC_DATA_SEARCH_CRITERIAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get producerNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get producerNameCount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get textToMatch(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get categoryIds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get categoryIdCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get privacyTags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get privacyTagCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: i32
  get coreDataOnly(): number {
    return this.view.getInt32(52, true);
  }

  // 0x00: pointer
  set producerNames(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set producerNameCount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set textToMatch(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: pointer
  set categoryIds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set categoryIdCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set privacyTags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set privacyTagCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: i32
  set coreDataOnly(value: number) {
    this.view.setInt32(52, value, true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION (size: 24)
 */
export interface DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION {
  /** i32 */
  privacyTag: number;
  /** Windows.Win32.Foundation.PWSTR */
  name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  description: string | null | Uint8Array | Uint16Array;
}

export const sizeofDIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION = 24;

export function allocDIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION(data?: Partial<DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.privacyTag !== undefined) view.setInt32(0, Number(data.privacyTag), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.description !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.description);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get privacyTag(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get description(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set privacyTag(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set description(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION (size: 8)
 */
export interface DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION {
  /** Windows.Win32.Foundation.PWSTR */
  name: string | null | Uint8Array | Uint16Array;
}

export const sizeofDIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION = 8;

export function allocDIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION(data?: Partial<DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

export class DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION (size: 16)
 */
export interface DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION {
  /** i32 */
  id: number;
  /** Windows.Win32.Foundation.PWSTR */
  name: string | null | Uint8Array | Uint16Array;
}

export const sizeofDIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION = 16;

export function allocDIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION(data?: Partial<DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get id(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set id(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_EVENT_TAG_STATS (size: 8)
 */
export interface DIAGNOSTIC_DATA_EVENT_TAG_STATS {
  /** i32 */
  privacyTag: number;
  /** u32 */
  eventCount: number;
}

export const sizeofDIAGNOSTIC_DATA_EVENT_TAG_STATS = 8;

export function allocDIAGNOSTIC_DATA_EVENT_TAG_STATS(data?: Partial<DIAGNOSTIC_DATA_EVENT_TAG_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_EVENT_TAG_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.privacyTag !== undefined) view.setInt32(0, Number(data.privacyTag), true);
  // 0x04: u32
  if (data?.eventCount !== undefined) view.setUint32(4, Number(data.eventCount), true);
  return buf;
}

export class DIAGNOSTIC_DATA_EVENT_TAG_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get privacyTag(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get eventCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set privacyTag(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set eventCount(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_EVENT_BINARY_STATS (size: 32)
 */
export interface DIAGNOSTIC_DATA_EVENT_BINARY_STATS {
  /** Windows.Win32.Foundation.PWSTR */
  moduleName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  friendlyModuleName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  eventCount: number;
  /** u64 */
  uploadSizeBytes: Deno.PointerValue;
}

export const sizeofDIAGNOSTIC_DATA_EVENT_BINARY_STATS = 32;

export function allocDIAGNOSTIC_DATA_EVENT_BINARY_STATS(data?: Partial<DIAGNOSTIC_DATA_EVENT_BINARY_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_EVENT_BINARY_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.moduleName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.moduleName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.friendlyModuleName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.friendlyModuleName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.eventCount !== undefined) view.setUint32(16, Number(data.eventCount), true);
  // 0x14: pad4
  // 0x18: u64
  if (data?.uploadSizeBytes !== undefined) view.setBigUint64(24, BigInt(data.uploadSizeBytes), true);
  return buf;
}

export class DIAGNOSTIC_DATA_EVENT_BINARY_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get moduleName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get friendlyModuleName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get eventCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: u64
  get uploadSizeBytes(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: buffer
  set moduleName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set friendlyModuleName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set eventCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: u64
  set uploadSizeBytes(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_GENERAL_STATS (size: 32)
 */
export interface DIAGNOSTIC_DATA_GENERAL_STATS {
  /** u32 */
  optInLevel: number;
  /** u64 */
  transcriptSizeBytes: Deno.PointerValue;
  /** u64 */
  oldestEventTimestamp: Deno.PointerValue;
  /** u32 */
  totalEventCountLast24Hours: number;
  /** f32 */
  averageDailyEvents: number;
}

export const sizeofDIAGNOSTIC_DATA_GENERAL_STATS = 32;

export function allocDIAGNOSTIC_DATA_GENERAL_STATS(data?: Partial<DIAGNOSTIC_DATA_GENERAL_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_GENERAL_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.optInLevel !== undefined) view.setUint32(0, Number(data.optInLevel), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.transcriptSizeBytes !== undefined) view.setBigUint64(8, BigInt(data.transcriptSizeBytes), true);
  // 0x10: u64
  if (data?.oldestEventTimestamp !== undefined) view.setBigUint64(16, BigInt(data.oldestEventTimestamp), true);
  // 0x18: u32
  if (data?.totalEventCountLast24Hours !== undefined) view.setUint32(24, Number(data.totalEventCountLast24Hours), true);
  // 0x1c: f32
  if (data?.averageDailyEvents !== undefined) view.setFloat32(28, Number(data.averageDailyEvents), true);
  return buf;
}

export class DIAGNOSTIC_DATA_GENERAL_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get optInLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get transcriptSizeBytes(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get oldestEventTimestamp(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u32
  get totalEventCountLast24Hours(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: f32
  get averageDailyEvents(): number {
    return this.view.getFloat32(28, true);
  }

  // 0x00: u32
  set optInLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set transcriptSizeBytes(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set oldestEventTimestamp(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u32
  set totalEventCountLast24Hours(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: f32
  set averageDailyEvents(value: number) {
    this.view.setFloat32(28, value, true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION (size: 16)
 */
export interface DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION {
  /** u32 */
  hoursOfHistoryToKeep: number;
  /** u32 */
  maxStoreMegabytes: number;
  /** u32 */
  requestedMaxStoreMegabytes: number;
}

export const sizeofDIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION = 16;

export function allocDIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION(data?: Partial<DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.hoursOfHistoryToKeep !== undefined) view.setUint32(0, Number(data.hoursOfHistoryToKeep), true);
  // 0x04: u32
  if (data?.maxStoreMegabytes !== undefined) view.setUint32(4, Number(data.maxStoreMegabytes), true);
  // 0x08: u32
  if (data?.requestedMaxStoreMegabytes !== undefined) view.setUint32(8, Number(data.requestedMaxStoreMegabytes), true);
  // 0x0c: pad4
  return buf;
}

export class DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get hoursOfHistoryToKeep(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get maxStoreMegabytes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get requestedMaxStoreMegabytes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set hoursOfHistoryToKeep(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set maxStoreMegabytes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set requestedMaxStoreMegabytes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_REPORT_PARAMETER (size: 16)
 */
export interface DIAGNOSTIC_REPORT_PARAMETER {
  /** array */
  name: Deno.PointerValue | null;
  /** array */
  value: Deno.PointerValue | null;
}

export const sizeofDIAGNOSTIC_REPORT_PARAMETER = 16;

export function allocDIAGNOSTIC_REPORT_PARAMETER(data?: Partial<DIAGNOSTIC_REPORT_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_REPORT_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.name !== undefined) view.setBigUint64(0, data.name === null ? 0n : BigInt(util.toPointer(data.name)), true);
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

export class DIAGNOSTIC_REPORT_PARAMETERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set name(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_REPORT_SIGNATURE (size: 16)
 */
export interface DIAGNOSTIC_REPORT_SIGNATURE {
  /** array */
  eventName: Deno.PointerValue | null;
  /** array */
  parameters: Deno.PointerValue | null;
}

export const sizeofDIAGNOSTIC_REPORT_SIGNATURE = 16;

export function allocDIAGNOSTIC_REPORT_SIGNATURE(data?: Partial<DIAGNOSTIC_REPORT_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_REPORT_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.eventName !== undefined) view.setBigUint64(0, data.eventName === null ? 0n : BigInt(util.toPointer(data.eventName)), true);
  // 0x08: pointer
  if (data?.parameters !== undefined) view.setBigUint64(8, data.parameters === null ? 0n : BigInt(util.toPointer(data.parameters)), true);
  return buf;
}

export class DIAGNOSTIC_REPORT_SIGNATUREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get eventName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get parameters(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set eventName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set parameters(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_REPORT_DATA (size: 136)
 */
export interface DIAGNOSTIC_REPORT_DATA {
  /** Windows.Win32.Security.DiagnosticDataQuery.DIAGNOSTIC_REPORT_SIGNATURE */
  signature: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  bucketId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  reportId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  creationTime: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  sizeInBytes: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  cabId: string | null | Uint8Array | Uint16Array;
  /** u32 */
  reportStatus: number;
  /** System.Guid */
  reportIntegratorId: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  fileNames: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fileCount: number;
  /** Windows.Win32.Foundation.PWSTR */
  friendlyEventName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  applicationName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  applicationPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  description: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  bucketIdString: string | null | Uint8Array | Uint16Array;
  /** u64 */
  legacyBucketId: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  reportKey: string | null | Uint8Array | Uint16Array;
}

export const sizeofDIAGNOSTIC_REPORT_DATA = 136;

export function allocDIAGNOSTIC_REPORT_DATA(data?: Partial<DIAGNOSTIC_REPORT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDIAGNOSTIC_REPORT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.signature !== undefined) view.setBigUint64(0, data.signature === null ? 0n : BigInt(util.toPointer(data.signature)), true);
  // 0x08: pointer
  if (data?.bucketId !== undefined) view.setBigUint64(8, data.bucketId === null ? 0n : BigInt(util.toPointer(data.bucketId)), true);
  // 0x10: pointer
  if (data?.reportId !== undefined) view.setBigUint64(16, data.reportId === null ? 0n : BigInt(util.toPointer(data.reportId)), true);
  // 0x18: pointer
  if (data?.creationTime !== undefined) view.setBigUint64(24, data.creationTime === null ? 0n : BigInt(util.toPointer(data.creationTime)), true);
  // 0x20: u64
  if (data?.sizeInBytes !== undefined) view.setBigUint64(32, BigInt(data.sizeInBytes), true);
  // 0x28: buffer
  if (data?.cabId !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.cabId);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.reportStatus !== undefined) view.setUint32(48, Number(data.reportStatus), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.reportIntegratorId !== undefined) view.setBigUint64(56, data.reportIntegratorId === null ? 0n : BigInt(util.toPointer(data.reportIntegratorId)), true);
  // 0x40: pointer
  if (data?.fileNames !== undefined) view.setBigUint64(64, data.fileNames === null ? 0n : BigInt(util.toPointer(data.fileNames)), true);
  // 0x48: u32
  if (data?.fileCount !== undefined) view.setUint32(72, Number(data.fileCount), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.friendlyEventName !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.friendlyEventName);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.applicationName !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.applicationName);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: buffer
  if (data?.applicationPath !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.applicationPath);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: buffer
  if (data?.description !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.description);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  // 0x70: buffer
  if (data?.bucketIdString !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data.bucketIdString);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: u64
  if (data?.legacyBucketId !== undefined) view.setBigUint64(120, BigInt(data.legacyBucketId), true);
  // 0x80: buffer
  if (data?.reportKey !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.reportKey);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  return buf;
}

export class DIAGNOSTIC_REPORT_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get signature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get bucketId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get reportId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get creationTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u64
  get sizeInBytes(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: buffer
  get cabId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get reportStatus(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get reportIntegratorId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get fileNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get fileCount(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  get friendlyEventName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: buffer
  get applicationName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: buffer
  get applicationPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: buffer
  get description(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: buffer
  get bucketIdString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: u64
  get legacyBucketId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(120, true));
  }

  // 0x80: buffer
  get reportKey(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set signature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set bucketId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set reportId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set creationTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u64
  set sizeInBytes(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: buffer
  set cabId(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: u32
  set reportStatus(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set reportIntegratorId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set fileNames(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set fileCount(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  set friendlyEventName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(util.toPointer((this.buf as any)._f80)), true);
  }

  // 0x58: buffer
  set applicationName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(util.toPointer((this.buf as any)._f88)), true);
  }

  // 0x60: buffer
  set applicationPath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(util.toPointer((this.buf as any)._f96)), true);
  }

  // 0x68: buffer
  set description(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(util.toPointer((this.buf as any)._f104)), true);
  }

  // 0x70: buffer
  set bucketIdString(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f112 = value;
    this.view.setBigUint64(112, BigInt(util.toPointer((this.buf as any)._f112)), true);
  }

  // 0x78: u64
  set legacyBucketId(value: Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(value), true);
  }

  // 0x80: buffer
  set reportKey(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(util.toPointer((this.buf as any)._f128)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_DATA (size: 88)
 */
export interface WINTRUST_DATA {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pPolicyCallbackData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pSIPClientData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.WinTrust.WINTRUST_DATA_UICHOICE */
  dwUIChoice: WINTRUST_DATA_UICHOICE;
  /** Windows.Win32.Security.WinTrust.WINTRUST_DATA_REVOCATION_CHECKS */
  fdwRevocationChecks: WINTRUST_DATA_REVOCATION_CHECKS;
  /** Windows.Win32.Security.WinTrust.WINTRUST_DATA_UNION_CHOICE */
  dwUnionChoice: WINTRUST_DATA_UNION_CHOICE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.WINTRUST_DATA_STATE_ACTION */
  dwStateAction: WINTRUST_DATA_STATE_ACTION;
  /** Windows.Win32.Foundation.HANDLE */
  hWVTStateData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszURLReference: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.WinTrust.WINTRUST_DATA_PROVIDER_FLAGS */
  dwProvFlags: WINTRUST_DATA_PROVIDER_FLAGS;
  /** Windows.Win32.Security.WinTrust.WINTRUST_DATA_UICONTEXT */
  dwUIContext: WINTRUST_DATA_UICONTEXT;
  /** ptr */
  pSignatureSettings: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWINTRUST_DATA = 88;

export function allocWINTRUST_DATA(data?: Partial<WINTRUST_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pPolicyCallbackData !== undefined) view.setBigUint64(8, data.pPolicyCallbackData === null ? 0n : BigInt(util.toPointer(data.pPolicyCallbackData)), true);
  // 0x10: pointer
  if (data?.pSIPClientData !== undefined) view.setBigUint64(16, data.pSIPClientData === null ? 0n : BigInt(util.toPointer(data.pSIPClientData)), true);
  // 0x18: u32
  if (data?.dwUIChoice !== undefined) view.setUint32(24, Number(data.dwUIChoice), true);
  // 0x1c: u32
  if (data?.fdwRevocationChecks !== undefined) view.setUint32(28, Number(data.fdwRevocationChecks), true);
  // 0x20: u32
  if (data?.dwUnionChoice !== undefined) view.setUint32(32, Number(data.dwUnionChoice), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x30: u32
  if (data?.dwStateAction !== undefined) view.setUint32(48, Number(data.dwStateAction), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.hWVTStateData !== undefined) view.setBigUint64(56, data.hWVTStateData === null ? 0n : BigInt(util.toPointer(data.hWVTStateData)), true);
  // 0x40: buffer
  if (data?.pwszURLReference !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pwszURLReference);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u32
  if (data?.dwProvFlags !== undefined) view.setUint32(72, Number(data.dwProvFlags), true);
  // 0x4c: u32
  if (data?.dwUIContext !== undefined) view.setUint32(76, Number(data.dwUIContext), true);
  // 0x50: pointer
  if (data?.pSignatureSettings !== undefined) view.setBigUint64(80, data.pSignatureSettings === null ? 0n : BigInt(util.toPointer(data.pSignatureSettings)), true);
  return buf;
}

export class WINTRUST_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pPolicyCallbackData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pSIPClientData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwUIChoice(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get fdwRevocationChecks(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwUnionChoice(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwStateAction(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get hWVTStateData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: buffer
  get pwszURLReference(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get dwProvFlags(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwUIContext(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: pointer
  get pSignatureSettings(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pPolicyCallbackData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pSIPClientData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwUIChoice(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set fdwRevocationChecks(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwUnionChoice(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set dwStateAction(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set hWVTStateData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: buffer
  set pwszURLReference(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(util.toPointer((this.buf as any)._f64)), true);
  }

  // 0x48: u32
  set dwProvFlags(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwUIContext(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: pointer
  set pSignatureSettings(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_SIGNATURE_SETTINGS (size: 32)
 */
export interface WINTRUST_SIGNATURE_SETTINGS {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwIndex: number;
  /** Windows.Win32.Security.WinTrust.WINTRUST_SIGNATURE_SETTINGS_FLAGS */
  dwFlags: WINTRUST_SIGNATURE_SETTINGS_FLAGS;
  /** u32 */
  cSecondarySigs: number;
  /** u32 */
  dwVerifiedSigIndex: number;
  /** ptr */
  pCryptoPolicy: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWINTRUST_SIGNATURE_SETTINGS = 32;

export function allocWINTRUST_SIGNATURE_SETTINGS(data?: Partial<WINTRUST_SIGNATURE_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_SIGNATURE_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwIndex !== undefined) view.setUint32(4, Number(data.dwIndex), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.cSecondarySigs !== undefined) view.setUint32(12, Number(data.cSecondarySigs), true);
  // 0x10: u32
  if (data?.dwVerifiedSigIndex !== undefined) view.setUint32(16, Number(data.dwVerifiedSigIndex), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pCryptoPolicy !== undefined) view.setBigUint64(24, data.pCryptoPolicy === null ? 0n : BigInt(util.toPointer(data.pCryptoPolicy)), true);
  return buf;
}

export class WINTRUST_SIGNATURE_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cSecondarySigs(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwVerifiedSigIndex(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pCryptoPolicy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cSecondarySigs(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwVerifiedSigIndex(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pCryptoPolicy(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_FILE_INFO (size: 32)
 */
export interface WINTRUST_FILE_INFO {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszFilePath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pgKnownSubject: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWINTRUST_FILE_INFO = 32;

export function allocWINTRUST_FILE_INFO(data?: Partial<WINTRUST_FILE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_FILE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pcwszFilePath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcwszFilePath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.hFile !== undefined) view.setBigUint64(16, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x18: pointer
  if (data?.pgKnownSubject !== undefined) view.setBigUint64(24, data.pgKnownSubject === null ? 0n : BigInt(util.toPointer(data.pgKnownSubject)), true);
  return buf;
}

export class WINTRUST_FILE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pcwszFilePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pgKnownSubject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pcwszFilePath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pgKnownSubject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_CATALOG_INFO (size: 72)
 */
export interface WINTRUST_CATALOG_INFO {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwCatalogVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszCatalogFilePath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszMemberTag: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszMemberFilePath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HANDLE */
  hMemberFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pbCalculatedFileHash: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbCalculatedFileHash: number;
  /** ptr */
  pcCatalogContext: Deno.PointerValue | Uint8Array | null;
  /** isize */
  hCatAdmin: Deno.PointerValue;
}

export const sizeofWINTRUST_CATALOG_INFO = 72;

export function allocWINTRUST_CATALOG_INFO(data?: Partial<WINTRUST_CATALOG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_CATALOG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwCatalogVersion !== undefined) view.setUint32(4, Number(data.dwCatalogVersion), true);
  // 0x08: buffer
  if (data?.pcwszCatalogFilePath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcwszCatalogFilePath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pcwszMemberTag !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pcwszMemberTag);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pcwszMemberFilePath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pcwszMemberFilePath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.hMemberFile !== undefined) view.setBigUint64(32, data.hMemberFile === null ? 0n : BigInt(util.toPointer(data.hMemberFile)), true);
  // 0x28: pointer
  if (data?.pbCalculatedFileHash !== undefined) view.setBigUint64(40, data.pbCalculatedFileHash === null ? 0n : BigInt(util.toPointer(data.pbCalculatedFileHash)), true);
  // 0x30: u32
  if (data?.cbCalculatedFileHash !== undefined) view.setUint32(48, Number(data.cbCalculatedFileHash), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pcCatalogContext !== undefined) view.setBigUint64(56, data.pcCatalogContext === null ? 0n : BigInt(util.toPointer(data.pcCatalogContext)), true);
  // 0x40: isize
  if (data?.hCatAdmin !== undefined) view.setBigInt64(64, BigInt(data.hCatAdmin), true);
  return buf;
}

export class WINTRUST_CATALOG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCatalogVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pcwszCatalogFilePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pcwszMemberTag(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pcwszMemberFilePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get hMemberFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pbCalculatedFileHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get cbCalculatedFileHash(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pcCatalogContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: isize
  get hCatAdmin(): Deno.PointerValue {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCatalogVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pcwszCatalogFilePath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pcwszMemberTag(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pcwszMemberFilePath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: pointer
  set hMemberFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pbCalculatedFileHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set cbCalculatedFileHash(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pcCatalogContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: isize
  set hCatAdmin(value: Deno.PointerValue) {
    this.view.setBigInt64(64, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_BLOB_INFO (size: 56)
 */
export interface WINTRUST_BLOB_INFO {
  /** u32 */
  cbStruct: number;
  /** System.Guid */
  gSubject: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszDisplayName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbMemObject: number;
  /** ptr */
  pbMemObject: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbMemSignedMsg: number;
  /** ptr */
  pbMemSignedMsg: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWINTRUST_BLOB_INFO = 56;

export function allocWINTRUST_BLOB_INFO(data?: Partial<WINTRUST_BLOB_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_BLOB_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.gSubject !== undefined) view.setBigUint64(8, data.gSubject === null ? 0n : BigInt(util.toPointer(data.gSubject)), true);
  // 0x10: buffer
  if (data?.pcwszDisplayName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pcwszDisplayName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.cbMemObject !== undefined) view.setUint32(24, Number(data.cbMemObject), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pbMemObject !== undefined) view.setBigUint64(32, data.pbMemObject === null ? 0n : BigInt(util.toPointer(data.pbMemObject)), true);
  // 0x28: u32
  if (data?.cbMemSignedMsg !== undefined) view.setUint32(40, Number(data.cbMemSignedMsg), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pbMemSignedMsg !== undefined) view.setBigUint64(48, data.pbMemSignedMsg === null ? 0n : BigInt(util.toPointer(data.pbMemSignedMsg)), true);
  return buf;
}

export class WINTRUST_BLOB_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get gSubject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pcwszDisplayName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get cbMemObject(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pbMemObject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get cbMemSignedMsg(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pbMemSignedMsg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set gSubject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set pcwszDisplayName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u32
  set cbMemObject(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pbMemObject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set cbMemSignedMsg(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pbMemSignedMsg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_SGNR_INFO (size: 40)
 */
export interface WINTRUST_SGNR_INFO {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszDisplayName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  psSignerInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  chStores: number;
  /** ptr */
  pahStores: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWINTRUST_SGNR_INFO = 40;

export function allocWINTRUST_SGNR_INFO(data?: Partial<WINTRUST_SGNR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_SGNR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pcwszDisplayName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcwszDisplayName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.psSignerInfo !== undefined) view.setBigUint64(16, data.psSignerInfo === null ? 0n : BigInt(util.toPointer(data.psSignerInfo)), true);
  // 0x18: u32
  if (data?.chStores !== undefined) view.setUint32(24, Number(data.chStores), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pahStores !== undefined) view.setBigUint64(32, data.pahStores === null ? 0n : BigInt(util.toPointer(data.pahStores)), true);
  return buf;
}

export class WINTRUST_SGNR_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pcwszDisplayName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get psSignerInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get chStores(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pahStores(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pcwszDisplayName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set psSignerInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set chStores(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pahStores(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WINTRUST_CERT_INFO (size: 56)
 */
export interface WINTRUST_CERT_INFO {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszDisplayName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  psCertContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  chStores: number;
  /** ptr */
  pahStores: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
  /** ptr */
  psftVerifyAsOf: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWINTRUST_CERT_INFO = 56;

export function allocWINTRUST_CERT_INFO(data?: Partial<WINTRUST_CERT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINTRUST_CERT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pcwszDisplayName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcwszDisplayName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.psCertContext !== undefined) view.setBigUint64(16, data.psCertContext === null ? 0n : BigInt(util.toPointer(data.psCertContext)), true);
  // 0x18: u32
  if (data?.chStores !== undefined) view.setUint32(24, Number(data.chStores), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pahStores !== undefined) view.setBigUint64(32, data.pahStores === null ? 0n : BigInt(util.toPointer(data.pahStores)), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.psftVerifyAsOf !== undefined) view.setBigUint64(48, data.psftVerifyAsOf === null ? 0n : BigInt(util.toPointer(data.psftVerifyAsOf)), true);
  return buf;
}

export class WINTRUST_CERT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pcwszDisplayName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get psCertContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get chStores(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pahStores(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get dwFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get psftVerifyAsOf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pcwszDisplayName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set psCertContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set chStores(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pahStores(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set dwFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set psftVerifyAsOf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_DATA (size: 240)
 */
export interface CRYPT_PROVIDER_DATA {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pWintrustData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fOpenedFile: boolean;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue | null;
  /** ptr */
  pgActionID: Deno.PointerValue | Uint8Array | null;
  /** usize */
  hProv: Deno.PointerValue;
  /** u32 */
  dwError: number;
  /** u32 */
  dwRegSecuritySettings: number;
  /** u32 */
  dwRegPolicySettings: number;
  /** ptr */
  psPfns: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cdwTrustStepErrors: number;
  /** ptr */
  padwTrustStepErrors: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  chStores: number;
  /** ptr */
  pahStores: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwEncoding: number;
  /** ptr */
  hMsg: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  csSigners: number;
  /** ptr */
  pasSigners: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  csProvPrivData: number;
  /** ptr */
  pasProvPrivData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSubjectChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszUsageOID: string | null | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  fRecallWithState: boolean;
  /** Windows.Win32.Foundation.FILETIME */
  sftSystemTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  pszCTLSignerUsageOID: string | null | Uint8Array;
  /** u32 */
  dwProvFlags: number;
  /** u32 */
  dwFinalError: number;
  /** ptr */
  pRequestUsage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwTrustPubSettings: number;
  /** u32 */
  dwUIStateFlags: number;
  /** ptr */
  pSigState: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pSigSettings: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_DATA = 240;

export function allocCRYPT_PROVIDER_DATA(data?: Partial<CRYPT_PROVIDER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pWintrustData !== undefined) view.setBigUint64(8, data.pWintrustData === null ? 0n : BigInt(util.toPointer(data.pWintrustData)), true);
  // 0x10: i32
  if (data?.fOpenedFile !== undefined) view.setInt32(16, Number(data.fOpenedFile), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(24, data.hWndParent === null ? 0n : BigInt(util.toPointer(data.hWndParent)), true);
  // 0x20: pointer
  if (data?.pgActionID !== undefined) view.setBigUint64(32, data.pgActionID === null ? 0n : BigInt(util.toPointer(data.pgActionID)), true);
  // 0x28: usize
  if (data?.hProv !== undefined) view.setBigUint64(40, BigInt(data.hProv), true);
  // 0x30: u32
  if (data?.dwError !== undefined) view.setUint32(48, Number(data.dwError), true);
  // 0x34: u32
  if (data?.dwRegSecuritySettings !== undefined) view.setUint32(52, Number(data.dwRegSecuritySettings), true);
  // 0x38: u32
  if (data?.dwRegPolicySettings !== undefined) view.setUint32(56, Number(data.dwRegPolicySettings), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.psPfns !== undefined) view.setBigUint64(64, data.psPfns === null ? 0n : BigInt(util.toPointer(data.psPfns)), true);
  // 0x48: u32
  if (data?.cdwTrustStepErrors !== undefined) view.setUint32(72, Number(data.cdwTrustStepErrors), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.padwTrustStepErrors !== undefined) view.setBigUint64(80, data.padwTrustStepErrors === null ? 0n : BigInt(util.toPointer(data.padwTrustStepErrors)), true);
  // 0x58: u32
  if (data?.chStores !== undefined) view.setUint32(88, Number(data.chStores), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.pahStores !== undefined) view.setBigUint64(96, data.pahStores === null ? 0n : BigInt(util.toPointer(data.pahStores)), true);
  // 0x68: u32
  if (data?.dwEncoding !== undefined) view.setUint32(104, Number(data.dwEncoding), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.hMsg !== undefined) view.setBigUint64(112, data.hMsg === null ? 0n : BigInt(util.toPointer(data.hMsg)), true);
  // 0x78: u32
  if (data?.csSigners !== undefined) view.setUint32(120, Number(data.csSigners), true);
  // 0x7c: pad4
  // 0x80: pointer
  if (data?.pasSigners !== undefined) view.setBigUint64(128, data.pasSigners === null ? 0n : BigInt(util.toPointer(data.pasSigners)), true);
  // 0x88: u32
  if (data?.csProvPrivData !== undefined) view.setUint32(136, Number(data.csProvPrivData), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.pasProvPrivData !== undefined) view.setBigUint64(144, data.pasProvPrivData === null ? 0n : BigInt(util.toPointer(data.pasProvPrivData)), true);
  // 0x98: u32
  if (data?.dwSubjectChoice !== undefined) view.setUint32(152, Number(data.dwSubjectChoice), true);
  // 0x9c: pad4
  // 0xa0: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(160, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0xa8: buffer
  if (data?.pszUsageOID !== undefined) {
    (buf as any)._f168 = util.pstrToFfi(data.pszUsageOID);
    view.setBigUint64(168, (buf as any)._f168 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f168)), true);
  }
  // 0xb0: i32
  if (data?.fRecallWithState !== undefined) view.setInt32(176, Number(data.fRecallWithState), true);
  // 0xb4: pad4
  // 0xb8: pointer
  if (data?.sftSystemTime !== undefined) view.setBigUint64(184, data.sftSystemTime === null ? 0n : BigInt(util.toPointer(data.sftSystemTime)), true);
  // 0xc0: buffer
  if (data?.pszCTLSignerUsageOID !== undefined) {
    (buf as any)._f192 = util.pstrToFfi(data.pszCTLSignerUsageOID);
    view.setBigUint64(192, (buf as any)._f192 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f192)), true);
  }
  // 0xc8: u32
  if (data?.dwProvFlags !== undefined) view.setUint32(200, Number(data.dwProvFlags), true);
  // 0xcc: u32
  if (data?.dwFinalError !== undefined) view.setUint32(204, Number(data.dwFinalError), true);
  // 0xd0: pointer
  if (data?.pRequestUsage !== undefined) view.setBigUint64(208, data.pRequestUsage === null ? 0n : BigInt(util.toPointer(data.pRequestUsage)), true);
  // 0xd8: u32
  if (data?.dwTrustPubSettings !== undefined) view.setUint32(216, Number(data.dwTrustPubSettings), true);
  // 0xdc: u32
  if (data?.dwUIStateFlags !== undefined) view.setUint32(220, Number(data.dwUIStateFlags), true);
  // 0xe0: pointer
  if (data?.pSigState !== undefined) view.setBigUint64(224, data.pSigState === null ? 0n : BigInt(util.toPointer(data.pSigState)), true);
  // 0xe8: pointer
  if (data?.pSigSettings !== undefined) view.setBigUint64(232, data.pSigSettings === null ? 0n : BigInt(util.toPointer(data.pSigSettings)), true);
  return buf;
}

export class CRYPT_PROVIDER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pWintrustData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get fOpenedFile(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get hWndParent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pgActionID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: usize
  get hProv(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u32
  get dwError(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwRegSecuritySettings(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwRegPolicySettings(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get psPfns(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get cdwTrustStepErrors(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get padwTrustStepErrors(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u32
  get chStores(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get pahStores(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: u32
  get dwEncoding(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get hMsg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: u32
  get csSigners(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: pad4

  // 0x80: pointer
  get pasSigners(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: u32
  get csProvPrivData(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get pasProvPrivData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: u32
  get dwSubjectChoice(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: pad4

  // 0xa0: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(160, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa8: buffer
  get pszUsageOID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(168, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb0: i32
  get fRecallWithState(): number {
    return this.view.getInt32(176, true);
  }

  // 0xb4: pad4

  // 0xb8: pointer
  get sftSystemTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(184, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc0: buffer
  get pszCTLSignerUsageOID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(192, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc8: u32
  get dwProvFlags(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get dwFinalError(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: pointer
  get pRequestUsage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(208, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd8: u32
  get dwTrustPubSettings(): number {
    return this.view.getUint32(216, true);
  }

  // 0xdc: u32
  get dwUIStateFlags(): number {
    return this.view.getUint32(220, true);
  }

  // 0xe0: pointer
  get pSigState(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(224, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xe8: pointer
  get pSigSettings(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(232, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pWintrustData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set fOpenedFile(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set hWndParent(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pgActionID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: usize
  set hProv(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u32
  set dwError(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwRegSecuritySettings(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwRegPolicySettings(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set psPfns(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set cdwTrustStepErrors(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set padwTrustStepErrors(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: u32
  set chStores(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set pahStores(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: u32
  set dwEncoding(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set hMsg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: u32
  set csSigners(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: pad4

  // 0x80: pointer
  set pasSigners(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }

  // 0x88: u32
  set csProvPrivData(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set pasProvPrivData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, BigInt(util.toPointer(value)), true);
  }

  // 0x98: u32
  set dwSubjectChoice(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: pad4

  // 0xa0: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(160, BigInt(util.toPointer(value)), true);
  }

  // 0xa8: buffer
  set pszUsageOID(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f168 = value;
    this.view.setBigUint64(168, BigInt(util.toPointer((this.buf as any)._f168)), true);
  }

  // 0xb0: i32
  set fRecallWithState(value: number) {
    this.view.setInt32(176, value, true);
  }

  // 0xb4: pad4

  // 0xb8: pointer
  set sftSystemTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(184, BigInt(util.toPointer(value)), true);
  }

  // 0xc0: buffer
  set pszCTLSignerUsageOID(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f192 = value;
    this.view.setBigUint64(192, BigInt(util.toPointer((this.buf as any)._f192)), true);
  }

  // 0xc8: u32
  set dwProvFlags(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set dwFinalError(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: pointer
  set pRequestUsage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(208, BigInt(util.toPointer(value)), true);
  }

  // 0xd8: u32
  set dwTrustPubSettings(value: number) {
    this.view.setUint32(216, value, true);
  }

  // 0xdc: u32
  set dwUIStateFlags(value: number) {
    this.view.setUint32(220, value, true);
  }

  // 0xe0: pointer
  set pSigState(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(224, BigInt(util.toPointer(value)), true);
  }

  // 0xe8: pointer
  set pSigSettings(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(232, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_SIGSTATE (size: 64)
 */
export interface CRYPT_PROVIDER_SIGSTATE {
  /** u32 */
  cbStruct: number;
  /** ptr */
  rhSecondarySigs: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  hPrimarySig: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fFirstAttemptMade: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fNoMoreSigs: boolean;
  /** u32 */
  cSecondarySigs: number;
  /** u32 */
  dwCurrentIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  fSupportMultiSig: boolean;
  /** u32 */
  dwCryptoPolicySupport: number;
  /** u32 */
  iAttemptCount: number;
  /** Windows.Win32.Foundation.BOOL */
  fCheckedSealing: boolean;
  /** ptr */
  pSealingSignature: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_SIGSTATE = 64;

export function allocCRYPT_PROVIDER_SIGSTATE(data?: Partial<CRYPT_PROVIDER_SIGSTATE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_SIGSTATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rhSecondarySigs !== undefined) view.setBigUint64(8, data.rhSecondarySigs === null ? 0n : BigInt(util.toPointer(data.rhSecondarySigs)), true);
  // 0x10: pointer
  if (data?.hPrimarySig !== undefined) view.setBigUint64(16, data.hPrimarySig === null ? 0n : BigInt(util.toPointer(data.hPrimarySig)), true);
  // 0x18: i32
  if (data?.fFirstAttemptMade !== undefined) view.setInt32(24, Number(data.fFirstAttemptMade), true);
  // 0x1c: i32
  if (data?.fNoMoreSigs !== undefined) view.setInt32(28, Number(data.fNoMoreSigs), true);
  // 0x20: u32
  if (data?.cSecondarySigs !== undefined) view.setUint32(32, Number(data.cSecondarySigs), true);
  // 0x24: u32
  if (data?.dwCurrentIndex !== undefined) view.setUint32(36, Number(data.dwCurrentIndex), true);
  // 0x28: i32
  if (data?.fSupportMultiSig !== undefined) view.setInt32(40, Number(data.fSupportMultiSig), true);
  // 0x2c: u32
  if (data?.dwCryptoPolicySupport !== undefined) view.setUint32(44, Number(data.dwCryptoPolicySupport), true);
  // 0x30: u32
  if (data?.iAttemptCount !== undefined) view.setUint32(48, Number(data.iAttemptCount), true);
  // 0x34: i32
  if (data?.fCheckedSealing !== undefined) view.setInt32(52, Number(data.fCheckedSealing), true);
  // 0x38: pointer
  if (data?.pSealingSignature !== undefined) view.setBigUint64(56, data.pSealingSignature === null ? 0n : BigInt(util.toPointer(data.pSealingSignature)), true);
  return buf;
}

export class CRYPT_PROVIDER_SIGSTATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rhSecondarySigs(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get hPrimarySig(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get fFirstAttemptMade(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get fNoMoreSigs(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get cSecondarySigs(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwCurrentIndex(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: i32
  get fSupportMultiSig(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get dwCryptoPolicySupport(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get iAttemptCount(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: i32
  get fCheckedSealing(): number {
    return this.view.getInt32(52, true);
  }

  // 0x38: pointer
  get pSealingSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rhSecondarySigs(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set hPrimarySig(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set fFirstAttemptMade(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set fNoMoreSigs(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set cSecondarySigs(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwCurrentIndex(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: i32
  set fSupportMultiSig(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set dwCryptoPolicySupport(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set iAttemptCount(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: i32
  set fCheckedSealing(value: number) {
    this.view.setInt32(52, value, true);
  }

  // 0x38: pointer
  set pSealingSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_FUNCTIONS (size: 128)
 */
export interface CRYPT_PROVIDER_FUNCTIONS {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Security.WinTrust.PFN_CPD_MEM_ALLOC */
  pfnAlloc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_CPD_MEM_FREE */
  pfnFree: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_CPD_ADD_STORE */
  pfnAddStore2Chain: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_CPD_ADD_SGNR */
  pfnAddSgnr2Chain: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_CPD_ADD_CERT */
  pfnAddCert2Chain: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_CPD_ADD_PRIVDATA */
  pfnAddPrivData2Chain: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_INIT_CALL */
  pfnInitialize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_OBJTRUST_CALL */
  pfnObjectTrust: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_SIGTRUST_CALL */
  pfnSignatureTrust: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_CERTTRUST_CALL */
  pfnCertificateTrust: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_FINALPOLICY_CALL */
  pfnFinalPolicy: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_CERTCHKPOLICY_CALL */
  pfnCertCheckPolicy: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_TESTFINALPOLICY_CALL */
  pfnTestFinalPolicy: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  psUIpfns: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVIDER_CLEANUP_CALL */
  pfnCleanupPolicy: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_PROVIDER_FUNCTIONS = 128;

export function allocCRYPT_PROVIDER_FUNCTIONS(data?: Partial<CRYPT_PROVIDER_FUNCTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_FUNCTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pfnAlloc !== undefined) view.setBigUint64(8, data.pfnAlloc === null ? 0n : BigInt(util.toPointer(data.pfnAlloc)), true);
  // 0x10: pointer
  if (data?.pfnFree !== undefined) view.setBigUint64(16, data.pfnFree === null ? 0n : BigInt(util.toPointer(data.pfnFree)), true);
  // 0x18: pointer
  if (data?.pfnAddStore2Chain !== undefined) view.setBigUint64(24, data.pfnAddStore2Chain === null ? 0n : BigInt(util.toPointer(data.pfnAddStore2Chain)), true);
  // 0x20: pointer
  if (data?.pfnAddSgnr2Chain !== undefined) view.setBigUint64(32, data.pfnAddSgnr2Chain === null ? 0n : BigInt(util.toPointer(data.pfnAddSgnr2Chain)), true);
  // 0x28: pointer
  if (data?.pfnAddCert2Chain !== undefined) view.setBigUint64(40, data.pfnAddCert2Chain === null ? 0n : BigInt(util.toPointer(data.pfnAddCert2Chain)), true);
  // 0x30: pointer
  if (data?.pfnAddPrivData2Chain !== undefined) view.setBigUint64(48, data.pfnAddPrivData2Chain === null ? 0n : BigInt(util.toPointer(data.pfnAddPrivData2Chain)), true);
  // 0x38: pointer
  if (data?.pfnInitialize !== undefined) view.setBigUint64(56, data.pfnInitialize === null ? 0n : BigInt(util.toPointer(data.pfnInitialize)), true);
  // 0x40: pointer
  if (data?.pfnObjectTrust !== undefined) view.setBigUint64(64, data.pfnObjectTrust === null ? 0n : BigInt(util.toPointer(data.pfnObjectTrust)), true);
  // 0x48: pointer
  if (data?.pfnSignatureTrust !== undefined) view.setBigUint64(72, data.pfnSignatureTrust === null ? 0n : BigInt(util.toPointer(data.pfnSignatureTrust)), true);
  // 0x50: pointer
  if (data?.pfnCertificateTrust !== undefined) view.setBigUint64(80, data.pfnCertificateTrust === null ? 0n : BigInt(util.toPointer(data.pfnCertificateTrust)), true);
  // 0x58: pointer
  if (data?.pfnFinalPolicy !== undefined) view.setBigUint64(88, data.pfnFinalPolicy === null ? 0n : BigInt(util.toPointer(data.pfnFinalPolicy)), true);
  // 0x60: pointer
  if (data?.pfnCertCheckPolicy !== undefined) view.setBigUint64(96, data.pfnCertCheckPolicy === null ? 0n : BigInt(util.toPointer(data.pfnCertCheckPolicy)), true);
  // 0x68: pointer
  if (data?.pfnTestFinalPolicy !== undefined) view.setBigUint64(104, data.pfnTestFinalPolicy === null ? 0n : BigInt(util.toPointer(data.pfnTestFinalPolicy)), true);
  // 0x70: pointer
  if (data?.psUIpfns !== undefined) view.setBigUint64(112, data.psUIpfns === null ? 0n : BigInt(util.toPointer(data.psUIpfns)), true);
  // 0x78: pointer
  if (data?.pfnCleanupPolicy !== undefined) view.setBigUint64(120, data.pfnCleanupPolicy === null ? 0n : BigInt(util.toPointer(data.pfnCleanupPolicy)), true);
  return buf;
}

export class CRYPT_PROVIDER_FUNCTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pfnAlloc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pfnFree(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pfnAddStore2Chain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pfnAddSgnr2Chain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pfnAddCert2Chain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pfnAddPrivData2Chain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get pfnInitialize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get pfnObjectTrust(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get pfnSignatureTrust(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get pfnCertificateTrust(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get pfnFinalPolicy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get pfnCertCheckPolicy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get pfnTestFinalPolicy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get psUIpfns(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get pfnCleanupPolicy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pfnAlloc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pfnFree(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pfnAddStore2Chain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pfnAddSgnr2Chain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pfnAddCert2Chain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pfnAddPrivData2Chain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set pfnInitialize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set pfnObjectTrust(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set pfnSignatureTrust(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set pfnCertificateTrust(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set pfnFinalPolicy(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set pfnCertCheckPolicy(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set pfnTestFinalPolicy(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set psUIpfns(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set pfnCleanupPolicy(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVUI_FUNCS (size: 48)
 */
export interface CRYPT_PROVUI_FUNCS {
  /** u32 */
  cbStruct: number;
  /** ptr */
  psUIData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVUI_CALL */
  pfnOnMoreInfoClick: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVUI_CALL */
  pfnOnMoreInfoClickDefault: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVUI_CALL */
  pfnOnAdvancedClick: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.PFN_PROVUI_CALL */
  pfnOnAdvancedClickDefault: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_PROVUI_FUNCS = 48;

export function allocCRYPT_PROVUI_FUNCS(data?: Partial<CRYPT_PROVUI_FUNCS>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVUI_FUNCS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.psUIData !== undefined) view.setBigUint64(8, data.psUIData === null ? 0n : BigInt(util.toPointer(data.psUIData)), true);
  // 0x10: pointer
  if (data?.pfnOnMoreInfoClick !== undefined) view.setBigUint64(16, data.pfnOnMoreInfoClick === null ? 0n : BigInt(util.toPointer(data.pfnOnMoreInfoClick)), true);
  // 0x18: pointer
  if (data?.pfnOnMoreInfoClickDefault !== undefined) view.setBigUint64(24, data.pfnOnMoreInfoClickDefault === null ? 0n : BigInt(util.toPointer(data.pfnOnMoreInfoClickDefault)), true);
  // 0x20: pointer
  if (data?.pfnOnAdvancedClick !== undefined) view.setBigUint64(32, data.pfnOnAdvancedClick === null ? 0n : BigInt(util.toPointer(data.pfnOnAdvancedClick)), true);
  // 0x28: pointer
  if (data?.pfnOnAdvancedClickDefault !== undefined) view.setBigUint64(40, data.pfnOnAdvancedClickDefault === null ? 0n : BigInt(util.toPointer(data.pfnOnAdvancedClickDefault)), true);
  return buf;
}

export class CRYPT_PROVUI_FUNCSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get psUIData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pfnOnMoreInfoClick(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pfnOnMoreInfoClickDefault(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pfnOnAdvancedClick(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get pfnOnAdvancedClickDefault(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set psUIData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pfnOnMoreInfoClick(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pfnOnMoreInfoClickDefault(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pfnOnAdvancedClick(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set pfnOnAdvancedClickDefault(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVUI_DATA (size: 64)
 */
export interface CRYPT_PROVUI_DATA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFinalError: number;
  /** Windows.Win32.Foundation.PWSTR */
  pYesButtonText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pNoButtonText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pMoreInfoButtonText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pAdvancedLinkText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pCopyActionText: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pCopyActionTextNoTS: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pCopyActionTextNotSigned: string | null | Uint8Array | Uint16Array;
}

export const sizeofCRYPT_PROVUI_DATA = 64;

export function allocCRYPT_PROVUI_DATA(data?: Partial<CRYPT_PROVUI_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVUI_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFinalError !== undefined) view.setUint32(4, Number(data.dwFinalError), true);
  // 0x08: buffer
  if (data?.pYesButtonText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pYesButtonText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pNoButtonText !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pNoButtonText);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pMoreInfoButtonText !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pMoreInfoButtonText);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pAdvancedLinkText !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pAdvancedLinkText);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pCopyActionText !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pCopyActionText);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.pCopyActionTextNoTS !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pCopyActionTextNoTS);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pCopyActionTextNotSigned !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pCopyActionTextNotSigned);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  return buf;
}

export class CRYPT_PROVUI_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFinalError(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pYesButtonText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pNoButtonText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pMoreInfoButtonText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pAdvancedLinkText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get pCopyActionText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: buffer
  get pCopyActionTextNoTS(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: buffer
  get pCopyActionTextNotSigned(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFinalError(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pYesButtonText(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pNoButtonText(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pMoreInfoButtonText(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set pAdvancedLinkText(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: buffer
  set pCopyActionText(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: buffer
  set pCopyActionTextNoTS(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(util.toPointer((this.buf as any)._f48)), true);
  }

  // 0x38: buffer
  set pCopyActionTextNotSigned(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(util.toPointer((this.buf as any)._f56)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_SGNR (size: 72)
 */
export interface CRYPT_PROVIDER_SGNR {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.FILETIME */
  sftVerifyAsOf: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  csCertChain: number;
  /** ptr */
  pasCertChain: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSignerType: number;
  /** ptr */
  psSigner: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwError: number;
  /** u32 */
  csCounterSigners: number;
  /** ptr */
  pasCounterSigners: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pChainContext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_SGNR = 72;

export function allocCRYPT_PROVIDER_SGNR(data?: Partial<CRYPT_PROVIDER_SGNR>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_SGNR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sftVerifyAsOf !== undefined) view.setBigUint64(8, data.sftVerifyAsOf === null ? 0n : BigInt(util.toPointer(data.sftVerifyAsOf)), true);
  // 0x10: u32
  if (data?.csCertChain !== undefined) view.setUint32(16, Number(data.csCertChain), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pasCertChain !== undefined) view.setBigUint64(24, data.pasCertChain === null ? 0n : BigInt(util.toPointer(data.pasCertChain)), true);
  // 0x20: u32
  if (data?.dwSignerType !== undefined) view.setUint32(32, Number(data.dwSignerType), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.psSigner !== undefined) view.setBigUint64(40, data.psSigner === null ? 0n : BigInt(util.toPointer(data.psSigner)), true);
  // 0x30: u32
  if (data?.dwError !== undefined) view.setUint32(48, Number(data.dwError), true);
  // 0x34: u32
  if (data?.csCounterSigners !== undefined) view.setUint32(52, Number(data.csCounterSigners), true);
  // 0x38: pointer
  if (data?.pasCounterSigners !== undefined) view.setBigUint64(56, data.pasCounterSigners === null ? 0n : BigInt(util.toPointer(data.pasCounterSigners)), true);
  // 0x40: pointer
  if (data?.pChainContext !== undefined) view.setBigUint64(64, data.pChainContext === null ? 0n : BigInt(util.toPointer(data.pChainContext)), true);
  return buf;
}

export class CRYPT_PROVIDER_SGNRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get sftVerifyAsOf(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get csCertChain(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pasCertChain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwSignerType(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get psSigner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get dwError(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get csCounterSigners(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get pasCounterSigners(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get pChainContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set sftVerifyAsOf(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set csCertChain(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pasCertChain(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwSignerType(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set psSigner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set dwError(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set csCounterSigners(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set pasCounterSigners(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set pChainContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_CERT (size: 88)
 */
export interface CRYPT_PROVIDER_CERT {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pCert: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fCommercial: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fTrustedRoot: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fSelfSigned: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fTestCert: boolean;
  /** u32 */
  dwRevokedReason: number;
  /** u32 */
  dwConfidence: number;
  /** u32 */
  dwError: number;
  /** ptr */
  pTrustListContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  fTrustListSignerCert: boolean;
  /** ptr */
  pCtlContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwCtlError: number;
  /** Windows.Win32.Foundation.BOOL */
  fIsCyclic: boolean;
  /** ptr */
  pChainElement: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_CERT = 88;

export function allocCRYPT_PROVIDER_CERT(data?: Partial<CRYPT_PROVIDER_CERT>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_CERT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCert !== undefined) view.setBigUint64(8, data.pCert === null ? 0n : BigInt(util.toPointer(data.pCert)), true);
  // 0x10: i32
  if (data?.fCommercial !== undefined) view.setInt32(16, Number(data.fCommercial), true);
  // 0x14: i32
  if (data?.fTrustedRoot !== undefined) view.setInt32(20, Number(data.fTrustedRoot), true);
  // 0x18: i32
  if (data?.fSelfSigned !== undefined) view.setInt32(24, Number(data.fSelfSigned), true);
  // 0x1c: i32
  if (data?.fTestCert !== undefined) view.setInt32(28, Number(data.fTestCert), true);
  // 0x20: u32
  if (data?.dwRevokedReason !== undefined) view.setUint32(32, Number(data.dwRevokedReason), true);
  // 0x24: u32
  if (data?.dwConfidence !== undefined) view.setUint32(36, Number(data.dwConfidence), true);
  // 0x28: u32
  if (data?.dwError !== undefined) view.setUint32(40, Number(data.dwError), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pTrustListContext !== undefined) view.setBigUint64(48, data.pTrustListContext === null ? 0n : BigInt(util.toPointer(data.pTrustListContext)), true);
  // 0x38: i32
  if (data?.fTrustListSignerCert !== undefined) view.setInt32(56, Number(data.fTrustListSignerCert), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.pCtlContext !== undefined) view.setBigUint64(64, data.pCtlContext === null ? 0n : BigInt(util.toPointer(data.pCtlContext)), true);
  // 0x48: u32
  if (data?.dwCtlError !== undefined) view.setUint32(72, Number(data.dwCtlError), true);
  // 0x4c: i32
  if (data?.fIsCyclic !== undefined) view.setInt32(76, Number(data.fIsCyclic), true);
  // 0x50: pointer
  if (data?.pChainElement !== undefined) view.setBigUint64(80, data.pChainElement === null ? 0n : BigInt(util.toPointer(data.pChainElement)), true);
  return buf;
}

export class CRYPT_PROVIDER_CERTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pCert(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i32
  get fCommercial(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get fTrustedRoot(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get fSelfSigned(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get fTestCert(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get dwRevokedReason(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwConfidence(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwError(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pTrustListContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: i32
  get fTrustListSignerCert(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get pCtlContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get dwCtlError(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: i32
  get fIsCyclic(): number {
    return this.view.getInt32(76, true);
  }

  // 0x50: pointer
  get pChainElement(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pCert(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i32
  set fCommercial(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set fTrustedRoot(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set fSelfSigned(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set fTestCert(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set dwRevokedReason(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwConfidence(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwError(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pTrustListContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: i32
  set fTrustListSignerCert(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set pCtlContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set dwCtlError(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: i32
  set fIsCyclic(value: number) {
    this.view.setInt32(76, value, true);
  }

  // 0x50: pointer
  set pChainElement(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_PRIVDATA (size: 32)
 */
export interface CRYPT_PROVIDER_PRIVDATA {
  /** u32 */
  cbStruct: number;
  /** System.Guid */
  gProviderID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbProvData: number;
  /** ptr */
  pvProvData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_PRIVDATA = 32;

export function allocCRYPT_PROVIDER_PRIVDATA(data?: Partial<CRYPT_PROVIDER_PRIVDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_PRIVDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.gProviderID !== undefined) view.setBigUint64(8, data.gProviderID === null ? 0n : BigInt(util.toPointer(data.gProviderID)), true);
  // 0x10: u32
  if (data?.cbProvData !== undefined) view.setUint32(16, Number(data.cbProvData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pvProvData !== undefined) view.setBigUint64(24, data.pvProvData === null ? 0n : BigInt(util.toPointer(data.pvProvData)), true);
  return buf;
}

export class CRYPT_PROVIDER_PRIVDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get gProviderID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get cbProvData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pvProvData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set gProviderID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set cbProvData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pvProvData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.PROVDATA_SIP (size: 56)
 */
export interface PROVDATA_SIP {
  /** u32 */
  cbStruct: number;
  /** System.Guid */
  gSubject: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pSip: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCATSip: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  psSipSubjectInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  psSipCATSubjectInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  psIndirectData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofPROVDATA_SIP = 56;

export function allocPROVDATA_SIP(data?: Partial<PROVDATA_SIP>): Uint8Array {
  const buf = new Uint8Array(sizeofPROVDATA_SIP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.gSubject !== undefined) view.setBigUint64(8, data.gSubject === null ? 0n : BigInt(util.toPointer(data.gSubject)), true);
  // 0x10: pointer
  if (data?.pSip !== undefined) view.setBigUint64(16, data.pSip === null ? 0n : BigInt(util.toPointer(data.pSip)), true);
  // 0x18: pointer
  if (data?.pCATSip !== undefined) view.setBigUint64(24, data.pCATSip === null ? 0n : BigInt(util.toPointer(data.pCATSip)), true);
  // 0x20: pointer
  if (data?.psSipSubjectInfo !== undefined) view.setBigUint64(32, data.psSipSubjectInfo === null ? 0n : BigInt(util.toPointer(data.psSipSubjectInfo)), true);
  // 0x28: pointer
  if (data?.psSipCATSubjectInfo !== undefined) view.setBigUint64(40, data.psSipCATSubjectInfo === null ? 0n : BigInt(util.toPointer(data.psSipCATSubjectInfo)), true);
  // 0x30: pointer
  if (data?.psIndirectData !== undefined) view.setBigUint64(48, data.psIndirectData === null ? 0n : BigInt(util.toPointer(data.psIndirectData)), true);
  return buf;
}

export class PROVDATA_SIPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get gSubject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pSip(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pCATSip(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get psSipSubjectInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get psSipCATSubjectInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get psIndirectData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set gSubject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pSip(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pCATSip(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set psSipSubjectInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set psSipCATSubjectInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set psIndirectData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY (size: 24)
 */
export interface CRYPT_TRUST_REG_ENTRY {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDLLName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFunctionName: string | null | Uint8Array | Uint16Array;
}

export const sizeofCRYPT_TRUST_REG_ENTRY = 24;

export function allocCRYPT_TRUST_REG_ENTRY(data?: Partial<CRYPT_TRUST_REG_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_TRUST_REG_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszDLLName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszDLLName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszFunctionName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszFunctionName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class CRYPT_TRUST_REG_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszDLLName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszFunctionName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszDLLName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pwszFunctionName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_REGISTER_ACTIONID (size: 72)
 */
export interface CRYPT_REGISTER_ACTIONID {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sInitProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sObjectProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sSignatureProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sCertificateProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sCertificatePolicyProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sFinalPolicyProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sTestPolicyProvider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.CRYPT_TRUST_REG_ENTRY */
  sCleanupProvider: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCRYPT_REGISTER_ACTIONID = 72;

export function allocCRYPT_REGISTER_ACTIONID(data?: Partial<CRYPT_REGISTER_ACTIONID>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_REGISTER_ACTIONID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sInitProvider !== undefined) view.setBigUint64(8, data.sInitProvider === null ? 0n : BigInt(util.toPointer(data.sInitProvider)), true);
  // 0x10: pointer
  if (data?.sObjectProvider !== undefined) view.setBigUint64(16, data.sObjectProvider === null ? 0n : BigInt(util.toPointer(data.sObjectProvider)), true);
  // 0x18: pointer
  if (data?.sSignatureProvider !== undefined) view.setBigUint64(24, data.sSignatureProvider === null ? 0n : BigInt(util.toPointer(data.sSignatureProvider)), true);
  // 0x20: pointer
  if (data?.sCertificateProvider !== undefined) view.setBigUint64(32, data.sCertificateProvider === null ? 0n : BigInt(util.toPointer(data.sCertificateProvider)), true);
  // 0x28: pointer
  if (data?.sCertificatePolicyProvider !== undefined) view.setBigUint64(40, data.sCertificatePolicyProvider === null ? 0n : BigInt(util.toPointer(data.sCertificatePolicyProvider)), true);
  // 0x30: pointer
  if (data?.sFinalPolicyProvider !== undefined) view.setBigUint64(48, data.sFinalPolicyProvider === null ? 0n : BigInt(util.toPointer(data.sFinalPolicyProvider)), true);
  // 0x38: pointer
  if (data?.sTestPolicyProvider !== undefined) view.setBigUint64(56, data.sTestPolicyProvider === null ? 0n : BigInt(util.toPointer(data.sTestPolicyProvider)), true);
  // 0x40: pointer
  if (data?.sCleanupProvider !== undefined) view.setBigUint64(64, data.sCleanupProvider === null ? 0n : BigInt(util.toPointer(data.sCleanupProvider)), true);
  return buf;
}

export class CRYPT_REGISTER_ACTIONIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get sInitProvider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get sObjectProvider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get sSignatureProvider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get sCertificateProvider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get sCertificatePolicyProvider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get sFinalPolicyProvider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get sTestPolicyProvider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get sCleanupProvider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set sInitProvider(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set sObjectProvider(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set sSignatureProvider(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set sCertificateProvider(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set sCertificatePolicyProvider(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set sFinalPolicyProvider(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set sTestPolicyProvider(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set sCleanupProvider(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_REGDEFUSAGE (size: 40)
 */
export interface CRYPT_PROVIDER_REGDEFUSAGE {
  /** u32 */
  cbStruct: number;
  /** ptr */
  pgActionID: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDllName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PSTR */
  pwszLoadCallbackDataFunctionName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pwszFreeCallbackDataFunctionName: string | null | Uint8Array;
}

export const sizeofCRYPT_PROVIDER_REGDEFUSAGE = 40;

export function allocCRYPT_PROVIDER_REGDEFUSAGE(data?: Partial<CRYPT_PROVIDER_REGDEFUSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_REGDEFUSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pgActionID !== undefined) view.setBigUint64(8, data.pgActionID === null ? 0n : BigInt(util.toPointer(data.pgActionID)), true);
  // 0x10: buffer
  if (data?.pwszDllName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszDllName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszLoadCallbackDataFunctionName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pwszLoadCallbackDataFunctionName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pwszFreeCallbackDataFunctionName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pwszFreeCallbackDataFunctionName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

export class CRYPT_PROVIDER_REGDEFUSAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pgActionID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pwszDllName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pwszLoadCallbackDataFunctionName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pwszFreeCallbackDataFunctionName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pgActionID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set pwszDllName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pwszLoadCallbackDataFunctionName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set pwszFreeCallbackDataFunctionName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CRYPT_PROVIDER_DEFUSAGE (size: 32)
 */
export interface CRYPT_PROVIDER_DEFUSAGE {
  /** u32 */
  cbStruct: number;
  /** System.Guid */
  gActionID: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pDefPolicyCallbackData: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pDefSIPClientData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCRYPT_PROVIDER_DEFUSAGE = 32;

export function allocCRYPT_PROVIDER_DEFUSAGE(data?: Partial<CRYPT_PROVIDER_DEFUSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofCRYPT_PROVIDER_DEFUSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.gActionID !== undefined) view.setBigUint64(8, data.gActionID === null ? 0n : BigInt(util.toPointer(data.gActionID)), true);
  // 0x10: pointer
  if (data?.pDefPolicyCallbackData !== undefined) view.setBigUint64(16, data.pDefPolicyCallbackData === null ? 0n : BigInt(util.toPointer(data.pDefPolicyCallbackData)), true);
  // 0x18: pointer
  if (data?.pDefSIPClientData !== undefined) view.setBigUint64(24, data.pDefSIPClientData === null ? 0n : BigInt(util.toPointer(data.pDefSIPClientData)), true);
  return buf;
}

export class CRYPT_PROVIDER_DEFUSAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get gActionID(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pDefPolicyCallbackData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pDefSIPClientData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set gActionID(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pDefPolicyCallbackData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pDefSIPClientData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.SPC_SERIALIZED_OBJECT (size: 16)
 */
export interface SPC_SERIALIZED_OBJECT {
  /** array */
  ClassId: Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  SerializedData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPC_SERIALIZED_OBJECT = 16;

export function allocSPC_SERIALIZED_OBJECT(data?: Partial<SPC_SERIALIZED_OBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_SERIALIZED_OBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClassId !== undefined) view.setBigUint64(0, data.ClassId === null ? 0n : BigInt(util.toPointer(data.ClassId)), true);
  // 0x08: pointer
  if (data?.SerializedData !== undefined) view.setBigUint64(8, data.SerializedData === null ? 0n : BigInt(util.toPointer(data.SerializedData)), true);
  return buf;
}

export class SPC_SERIALIZED_OBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ClassId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SerializedData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ClassId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SerializedData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.SPC_SIGINFO (size: 40)
 */
export interface SPC_SIGINFO {
  /** u32 */
  dwSipVersion: number;
  /** System.Guid */
  gSIPGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwReserved3: number;
  /** u32 */
  dwReserved4: number;
  /** u32 */
  dwReserved5: number;
}

export const sizeofSPC_SIGINFO = 40;

export function allocSPC_SIGINFO(data?: Partial<SPC_SIGINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_SIGINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSipVersion !== undefined) view.setUint32(0, Number(data.dwSipVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.gSIPGuid !== undefined) view.setBigUint64(8, data.gSIPGuid === null ? 0n : BigInt(util.toPointer(data.gSIPGuid)), true);
  // 0x10: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(16, Number(data.dwReserved1), true);
  // 0x14: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(20, Number(data.dwReserved2), true);
  // 0x18: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(24, Number(data.dwReserved3), true);
  // 0x1c: u32
  if (data?.dwReserved4 !== undefined) view.setUint32(28, Number(data.dwReserved4), true);
  // 0x20: u32
  if (data?.dwReserved5 !== undefined) view.setUint32(32, Number(data.dwReserved5), true);
  // 0x24: pad4
  return buf;
}

export class SPC_SIGINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSipVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get gSIPGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwReserved1(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwReserved2(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwReserved3(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwReserved4(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwReserved5(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwSipVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set gSIPGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwReserved1(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwReserved2(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwReserved3(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwReserved4(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwReserved5(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.WinTrust.SPC_LINK (size: 16)
 */
export interface SPC_LINK {
  /** u32 */
  dwLinkChoice: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPC_LINK = 16;

export function allocSPC_LINK(data?: Partial<SPC_LINK>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_LINK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLinkChoice !== undefined) view.setUint32(0, Number(data.dwLinkChoice), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class SPC_LINKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLinkChoice(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwLinkChoice(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.SPC_PE_IMAGE_DATA (size: 16)
 */
export interface SPC_PE_IMAGE_DATA {
  /** Windows.Win32.Security.Cryptography.CRYPT_BIT_BLOB */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pFile: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPC_PE_IMAGE_DATA = 16;

export function allocSPC_PE_IMAGE_DATA(data?: Partial<SPC_PE_IMAGE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_PE_IMAGE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: pointer
  if (data?.pFile !== undefined) view.setBigUint64(8, data.pFile === null ? 0n : BigInt(util.toPointer(data.pFile)), true);
  return buf;
}

export class SPC_PE_IMAGE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.SPC_INDIRECT_DATA_CONTENT (size: 24)
 */
export interface SPC_INDIRECT_DATA_CONTENT {
  /** Windows.Win32.Security.Cryptography.CRYPT_ATTRIBUTE_TYPE_VALUE */
  Data: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  DigestAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Digest: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPC_INDIRECT_DATA_CONTENT = 24;

export function allocSPC_INDIRECT_DATA_CONTENT(data?: Partial<SPC_INDIRECT_DATA_CONTENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_INDIRECT_DATA_CONTENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Data !== undefined) view.setBigUint64(0, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  // 0x08: pointer
  if (data?.DigestAlgorithm !== undefined) view.setBigUint64(8, data.DigestAlgorithm === null ? 0n : BigInt(util.toPointer(data.DigestAlgorithm)), true);
  // 0x10: pointer
  if (data?.Digest !== undefined) view.setBigUint64(16, data.Digest === null ? 0n : BigInt(util.toPointer(data.Digest)), true);
  return buf;
}

export class SPC_INDIRECT_DATA_CONTENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get DigestAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Digest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set DigestAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Digest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.SPC_FINANCIAL_CRITERIA (size: 8)
 */
export interface SPC_FINANCIAL_CRITERIA {
  /** Windows.Win32.Foundation.BOOL */
  fFinancialInfoAvailable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fMeetsCriteria: boolean;
}

export const sizeofSPC_FINANCIAL_CRITERIA = 8;

export function allocSPC_FINANCIAL_CRITERIA(data?: Partial<SPC_FINANCIAL_CRITERIA>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_FINANCIAL_CRITERIA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fFinancialInfoAvailable !== undefined) view.setInt32(0, Number(data.fFinancialInfoAvailable), true);
  // 0x04: i32
  if (data?.fMeetsCriteria !== undefined) view.setInt32(4, Number(data.fMeetsCriteria), true);
  return buf;
}

export class SPC_FINANCIAL_CRITERIAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fFinancialInfoAvailable(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get fMeetsCriteria(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set fFinancialInfoAvailable(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set fMeetsCriteria(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.SPC_IMAGE (size: 40)
 */
export interface SPC_IMAGE {
  /** ptr */
  pImageLink: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Bitmap: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Metafile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  EnhancedMetafile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  GifFile: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSPC_IMAGE = 40;

export function allocSPC_IMAGE(data?: Partial<SPC_IMAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_IMAGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pImageLink !== undefined) view.setBigUint64(0, data.pImageLink === null ? 0n : BigInt(util.toPointer(data.pImageLink)), true);
  // 0x08: pointer
  if (data?.Bitmap !== undefined) view.setBigUint64(8, data.Bitmap === null ? 0n : BigInt(util.toPointer(data.Bitmap)), true);
  // 0x10: pointer
  if (data?.Metafile !== undefined) view.setBigUint64(16, data.Metafile === null ? 0n : BigInt(util.toPointer(data.Metafile)), true);
  // 0x18: pointer
  if (data?.EnhancedMetafile !== undefined) view.setBigUint64(24, data.EnhancedMetafile === null ? 0n : BigInt(util.toPointer(data.EnhancedMetafile)), true);
  // 0x20: pointer
  if (data?.GifFile !== undefined) view.setBigUint64(32, data.GifFile === null ? 0n : BigInt(util.toPointer(data.GifFile)), true);
  return buf;
}

export class SPC_IMAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pImageLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Bitmap(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Metafile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get EnhancedMetafile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get GifFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pImageLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Bitmap(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Metafile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set EnhancedMetafile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set GifFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.SPC_SP_AGENCY_INFO (size: 32)
 */
export interface SPC_SP_AGENCY_INFO {
  /** ptr */
  pPolicyInformation: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPolicyDisplayText: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pLogoImage: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pLogoLink: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPC_SP_AGENCY_INFO = 32;

export function allocSPC_SP_AGENCY_INFO(data?: Partial<SPC_SP_AGENCY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_SP_AGENCY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pPolicyInformation !== undefined) view.setBigUint64(0, data.pPolicyInformation === null ? 0n : BigInt(util.toPointer(data.pPolicyInformation)), true);
  // 0x08: buffer
  if (data?.pwszPolicyDisplayText !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszPolicyDisplayText);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pLogoImage !== undefined) view.setBigUint64(16, data.pLogoImage === null ? 0n : BigInt(util.toPointer(data.pLogoImage)), true);
  // 0x18: pointer
  if (data?.pLogoLink !== undefined) view.setBigUint64(24, data.pLogoLink === null ? 0n : BigInt(util.toPointer(data.pLogoLink)), true);
  return buf;
}

export class SPC_SP_AGENCY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pPolicyInformation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pwszPolicyDisplayText(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pLogoImage(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pLogoLink(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pPolicyInformation(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set pwszPolicyDisplayText(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: pointer
  set pLogoImage(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pLogoLink(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.SPC_STATEMENT_TYPE (size: 16)
 */
export interface SPC_STATEMENT_TYPE {
  /** u32 */
  cKeyPurposeId: number;
  /** ptr */
  rgpszKeyPurposeId: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPC_STATEMENT_TYPE = 16;

export function allocSPC_STATEMENT_TYPE(data?: Partial<SPC_STATEMENT_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_STATEMENT_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cKeyPurposeId !== undefined) view.setUint32(0, Number(data.cKeyPurposeId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgpszKeyPurposeId !== undefined) view.setBigUint64(8, data.rgpszKeyPurposeId === null ? 0n : BigInt(util.toPointer(data.rgpszKeyPurposeId)), true);
  return buf;
}

export class SPC_STATEMENT_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cKeyPurposeId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgpszKeyPurposeId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set cKeyPurposeId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgpszKeyPurposeId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.SPC_SP_OPUS_INFO (size: 24)
 */
export interface SPC_SP_OPUS_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwszProgramName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pMoreInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pPublisherInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSPC_SP_OPUS_INFO = 24;

export function allocSPC_SP_OPUS_INFO(data?: Partial<SPC_SP_OPUS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSPC_SP_OPUS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszProgramName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszProgramName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pMoreInfo !== undefined) view.setBigUint64(8, data.pMoreInfo === null ? 0n : BigInt(util.toPointer(data.pMoreInfo)), true);
  // 0x10: pointer
  if (data?.pPublisherInfo !== undefined) view.setBigUint64(16, data.pPublisherInfo === null ? 0n : BigInt(util.toPointer(data.pPublisherInfo)), true);
  return buf;
}

export class SPC_SP_OPUS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszProgramName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pMoreInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pPublisherInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pwszProgramName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set pMoreInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pPublisherInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CAT_NAMEVALUE (size: 24)
 */
export interface CAT_NAMEVALUE {
  /** Windows.Win32.Foundation.PWSTR */
  pwszTag: string | null | Uint8Array | Uint16Array;
  /** u32 */
  fdwFlags: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCAT_NAMEVALUE = 24;

export function allocCAT_NAMEVALUE(data?: Partial<CAT_NAMEVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofCAT_NAMEVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszTag !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszTag);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.fdwFlags !== undefined) view.setUint32(8, Number(data.fdwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Value !== undefined) view.setBigUint64(16, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

export class CAT_NAMEVALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszTag(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get fdwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pwszTag(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set fdwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CAT_MEMBERINFO (size: 16)
 */
export interface CAT_MEMBERINFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwszSubjGuid: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwCertVersion: number;
}

export const sizeofCAT_MEMBERINFO = 16;

export function allocCAT_MEMBERINFO(data?: Partial<CAT_MEMBERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCAT_MEMBERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszSubjGuid !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszSubjGuid);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwCertVersion !== undefined) view.setUint32(8, Number(data.dwCertVersion), true);
  // 0x0c: pad4
  return buf;
}

export class CAT_MEMBERINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszSubjGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwCertVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set pwszSubjGuid(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set dwCertVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.WinTrust.CAT_MEMBERINFO2 (size: 16)
 */
export interface CAT_MEMBERINFO2 {
  /** System.Guid */
  SubjectGuid: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCertVersion: number;
}

export const sizeofCAT_MEMBERINFO2 = 16;

export function allocCAT_MEMBERINFO2(data?: Partial<CAT_MEMBERINFO2>): Uint8Array {
  const buf = new Uint8Array(sizeofCAT_MEMBERINFO2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SubjectGuid !== undefined) view.setBigUint64(0, data.SubjectGuid === null ? 0n : BigInt(util.toPointer(data.SubjectGuid)), true);
  // 0x08: u32
  if (data?.dwCertVersion !== undefined) view.setUint32(8, Number(data.dwCertVersion), true);
  // 0x0c: pad4
  return buf;
}

export class CAT_MEMBERINFO2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SubjectGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwCertVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set SubjectGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwCertVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.WinTrust.INTENT_TO_SEAL_ATTRIBUTE (size: 16)
 */
export interface INTENT_TO_SEAL_ATTRIBUTE {
  /** u32 */
  version: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  seal: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTENT_TO_SEAL_ATTRIBUTE = 16;

export function allocINTENT_TO_SEAL_ATTRIBUTE(data?: Partial<INTENT_TO_SEAL_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofINTENT_TO_SEAL_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.version !== undefined) view.setUint32(0, Number(data.version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.seal !== undefined) view.setBigUint64(8, data.seal === null ? 0n : BigInt(util.toPointer(data.seal)), true);
  return buf;
}

export class INTENT_TO_SEAL_ATTRIBUTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get seal(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set seal(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.SEALING_SIGNATURE_ATTRIBUTE (size: 24)
 */
export interface SEALING_SIGNATURE_ATTRIBUTE {
  /** u32 */
  version: number;
  /** u32 */
  signerIndex: number;
  /** Windows.Win32.Security.Cryptography.CRYPT_ALGORITHM_IDENTIFIER */
  signatureAlgorithm: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  encryptedDigest: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSEALING_SIGNATURE_ATTRIBUTE = 24;

export function allocSEALING_SIGNATURE_ATTRIBUTE(data?: Partial<SEALING_SIGNATURE_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofSEALING_SIGNATURE_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.version !== undefined) view.setUint32(0, Number(data.version), true);
  // 0x04: u32
  if (data?.signerIndex !== undefined) view.setUint32(4, Number(data.signerIndex), true);
  // 0x08: pointer
  if (data?.signatureAlgorithm !== undefined) view.setBigUint64(8, data.signatureAlgorithm === null ? 0n : BigInt(util.toPointer(data.signatureAlgorithm)), true);
  // 0x10: pointer
  if (data?.encryptedDigest !== undefined) view.setBigUint64(16, data.encryptedDigest === null ? 0n : BigInt(util.toPointer(data.encryptedDigest)), true);
  return buf;
}

export class SEALING_SIGNATURE_ATTRIBUTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get signerIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get signatureAlgorithm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get encryptedDigest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set signerIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set signatureAlgorithm(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set encryptedDigest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.SEALING_TIMESTAMP_ATTRIBUTE (size: 16)
 */
export interface SEALING_TIMESTAMP_ATTRIBUTE {
  /** u32 */
  version: number;
  /** u32 */
  signerIndex: number;
  /** Windows.Win32.Security.Cryptography.CRYPTOAPI_BLOB */
  sealTimeStampToken: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSEALING_TIMESTAMP_ATTRIBUTE = 16;

export function allocSEALING_TIMESTAMP_ATTRIBUTE(data?: Partial<SEALING_TIMESTAMP_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofSEALING_TIMESTAMP_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.version !== undefined) view.setUint32(0, Number(data.version), true);
  // 0x04: u32
  if (data?.signerIndex !== undefined) view.setUint32(4, Number(data.signerIndex), true);
  // 0x08: pointer
  if (data?.sealTimeStampToken !== undefined) view.setBigUint64(8, data.sealTimeStampToken === null ? 0n : BigInt(util.toPointer(data.sealTimeStampToken)), true);
  return buf;
}

export class SEALING_TIMESTAMP_ATTRIBUTEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get signerIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get sealTimeStampToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set signerIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set sealTimeStampToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WIN_CERTIFICATE (size: 16)
 */
export interface WIN_CERTIFICATE {
  /** u32 */
  dwLength: number;
  /** u16 */
  wRevision: number;
  /** u16 */
  wCertificateType: number;
  /** array */
  bCertificate: Deno.PointerValue | null;
}

export const sizeofWIN_CERTIFICATE = 16;

export function allocWIN_CERTIFICATE(data?: Partial<WIN_CERTIFICATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN_CERTIFICATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: u16
  if (data?.wRevision !== undefined) view.setUint16(4, Number(data.wRevision), true);
  // 0x06: u16
  if (data?.wCertificateType !== undefined) view.setUint16(6, Number(data.wCertificateType), true);
  // 0x08: pointer
  if (data?.bCertificate !== undefined) view.setBigUint64(8, data.bCertificate === null ? 0n : BigInt(util.toPointer(data.bCertificate)), true);
  return buf;
}

export class WIN_CERTIFICATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wRevision(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wCertificateType(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: pointer
  get bCertificate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wRevision(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wCertificateType(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: pointer
  set bCertificate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT (size: 24)
 */
export interface WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT {
  /** Windows.Win32.Foundation.HANDLE */
  hClientToken: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  SubjectType: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Subject: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT = 24;

export function allocWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT(data?: Partial<WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hClientToken !== undefined) view.setBigUint64(0, data.hClientToken === null ? 0n : BigInt(util.toPointer(data.hClientToken)), true);
  // 0x08: pointer
  if (data?.SubjectType !== undefined) view.setBigUint64(8, data.SubjectType === null ? 0n : BigInt(util.toPointer(data.SubjectType)), true);
  // 0x10: pointer
  if (data?.Subject !== undefined) view.setBigUint64(16, data.Subject === null ? 0n : BigInt(util.toPointer(data.Subject)), true);
  return buf;
}

export class WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hClientToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SubjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Subject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hClientToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SubjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Subject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WIN_TRUST_ACTDATA_SUBJECT_ONLY (size: 16)
 */
export interface WIN_TRUST_ACTDATA_SUBJECT_ONLY {
  /** ptr */
  SubjectType: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Subject: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWIN_TRUST_ACTDATA_SUBJECT_ONLY = 16;

export function allocWIN_TRUST_ACTDATA_SUBJECT_ONLY(data?: Partial<WIN_TRUST_ACTDATA_SUBJECT_ONLY>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN_TRUST_ACTDATA_SUBJECT_ONLY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SubjectType !== undefined) view.setBigUint64(0, data.SubjectType === null ? 0n : BigInt(util.toPointer(data.SubjectType)), true);
  // 0x08: pointer
  if (data?.Subject !== undefined) view.setBigUint64(8, data.Subject === null ? 0n : BigInt(util.toPointer(data.Subject)), true);
  return buf;
}

export class WIN_TRUST_ACTDATA_SUBJECT_ONLYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SubjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Subject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SubjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Subject(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WIN_TRUST_SUBJECT_FILE (size: 16)
 */
export interface WIN_TRUST_SUBJECT_FILE {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpPath: string | null | Uint8Array | Uint16Array;
}

export const sizeofWIN_TRUST_SUBJECT_FILE = 16;

export function allocWIN_TRUST_SUBJECT_FILE(data?: Partial<WIN_TRUST_SUBJECT_FILE>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN_TRUST_SUBJECT_FILE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: buffer
  if (data?.lpPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class WIN_TRUST_SUBJECT_FILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get lpPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set lpPath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WIN_TRUST_SUBJECT_FILE_AND_DISPLAY (size: 24)
 */
export interface WIN_TRUST_SUBJECT_FILE_AND_DISPLAY {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpDisplayName: string | null | Uint8Array | Uint16Array;
}

export const sizeofWIN_TRUST_SUBJECT_FILE_AND_DISPLAY = 24;

export function allocWIN_TRUST_SUBJECT_FILE_AND_DISPLAY(data?: Partial<WIN_TRUST_SUBJECT_FILE_AND_DISPLAY>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN_TRUST_SUBJECT_FILE_AND_DISPLAY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: buffer
  if (data?.lpPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpDisplayName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpDisplayName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class WIN_TRUST_SUBJECT_FILE_AND_DISPLAYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get lpPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get lpDisplayName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set lpPath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set lpDisplayName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WIN_SPUB_TRUSTED_PUBLISHER_DATA (size: 16)
 */
export interface WIN_SPUB_TRUSTED_PUBLISHER_DATA {
  /** Windows.Win32.Foundation.HANDLE */
  hClientToken: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpCertificate: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWIN_SPUB_TRUSTED_PUBLISHER_DATA = 16;

export function allocWIN_SPUB_TRUSTED_PUBLISHER_DATA(data?: Partial<WIN_SPUB_TRUSTED_PUBLISHER_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWIN_SPUB_TRUSTED_PUBLISHER_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hClientToken !== undefined) view.setBigUint64(0, data.hClientToken === null ? 0n : BigInt(util.toPointer(data.hClientToken)), true);
  // 0x08: pointer
  if (data?.lpCertificate !== undefined) view.setBigUint64(8, data.lpCertificate === null ? 0n : BigInt(util.toPointer(data.lpCertificate)), true);
  return buf;
}

export class WIN_SPUB_TRUSTED_PUBLISHER_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hClientToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get lpCertificate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hClientToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set lpCertificate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WTD_GENERIC_CHAIN_POLICY_SIGNER_INFO (size: 48)
 */
export interface WTD_GENERIC_CHAIN_POLICY_SIGNER_INFO {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pChainContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwSignerType: number;
  /** ptr */
  pMsgSignerInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwError: number;
  /** u32 */
  cCounterSigner: number;
  /** ptr */
  rgpCounterSigner: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWTD_GENERIC_CHAIN_POLICY_SIGNER_INFO = 48;

export function allocWTD_GENERIC_CHAIN_POLICY_SIGNER_INFO(data?: Partial<WTD_GENERIC_CHAIN_POLICY_SIGNER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWTD_GENERIC_CHAIN_POLICY_SIGNER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.pChainContext !== undefined) view.setBigUint64(8, data.pChainContext === null ? 0n : BigInt(util.toPointer(data.pChainContext)), true);
  // 0x10: u32
  if (data?.dwSignerType !== undefined) view.setUint32(16, Number(data.dwSignerType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pMsgSignerInfo !== undefined) view.setBigUint64(24, data.pMsgSignerInfo === null ? 0n : BigInt(util.toPointer(data.pMsgSignerInfo)), true);
  // 0x20: u32
  if (data?.dwError !== undefined) view.setUint32(32, Number(data.dwError), true);
  // 0x24: u32
  if (data?.cCounterSigner !== undefined) view.setUint32(36, Number(data.cCounterSigner), true);
  // 0x28: pointer
  if (data?.rgpCounterSigner !== undefined) view.setBigUint64(40, data.rgpCounterSigner === null ? 0n : BigInt(util.toPointer(data.rgpCounterSigner)), true);
  return buf;
}

export class WTD_GENERIC_CHAIN_POLICY_SIGNER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pChainContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwSignerType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pMsgSignerInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get dwError(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get cCounterSigner(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get rgpCounterSigner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pChainContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwSignerType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pMsgSignerInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set dwError(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set cCounterSigner(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set rgpCounterSigner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WTD_GENERIC_CHAIN_POLICY_CREATE_INFO (size: 40)
 */
export interface WTD_GENERIC_CHAIN_POLICY_CREATE_INFO {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.HCERTCHAINENGINE */
  hChainEngine: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pChainPara: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
  /** ptr */
  pvReserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWTD_GENERIC_CHAIN_POLICY_CREATE_INFO = 40;

export function allocWTD_GENERIC_CHAIN_POLICY_CREATE_INFO(data?: Partial<WTD_GENERIC_CHAIN_POLICY_CREATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWTD_GENERIC_CHAIN_POLICY_CREATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.hChainEngine !== undefined) view.setBigUint64(8, data.hChainEngine === null ? 0n : BigInt(util.toPointer(data.hChainEngine)), true);
  // 0x10: pointer
  if (data?.pChainPara !== undefined) view.setBigUint64(16, data.pChainPara === null ? 0n : BigInt(util.toPointer(data.pChainPara)), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pvReserved !== undefined) view.setBigUint64(32, data.pvReserved === null ? 0n : BigInt(util.toPointer(data.pvReserved)), true);
  return buf;
}

export class WTD_GENERIC_CHAIN_POLICY_CREATE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get hChainEngine(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pChainPara(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pvReserved(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set hChainEngine(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pChainPara(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pvReserved(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.WTD_GENERIC_CHAIN_POLICY_DATA (size: 40)
 */
export interface WTD_GENERIC_CHAIN_POLICY_DATA {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pSignerChainInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCounterSignerChainInfo: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.WinTrust.PFN_WTD_GENERIC_CHAIN_POLICY_CALLBACK */
  pfnPolicyCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pvPolicyArg: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWTD_GENERIC_CHAIN_POLICY_DATA = 40;

export function allocWTD_GENERIC_CHAIN_POLICY_DATA(data?: Partial<WTD_GENERIC_CHAIN_POLICY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWTD_GENERIC_CHAIN_POLICY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.pSignerChainInfo !== undefined) view.setBigUint64(8, data.pSignerChainInfo === null ? 0n : BigInt(util.toPointer(data.pSignerChainInfo)), true);
  // 0x10: pointer
  if (data?.pCounterSignerChainInfo !== undefined) view.setBigUint64(16, data.pCounterSignerChainInfo === null ? 0n : BigInt(util.toPointer(data.pCounterSignerChainInfo)), true);
  // 0x18: pointer
  if (data?.pfnPolicyCallback !== undefined) view.setBigUint64(24, data.pfnPolicyCallback === null ? 0n : BigInt(util.toPointer(data.pfnPolicyCallback)), true);
  // 0x20: pointer
  if (data?.pvPolicyArg !== undefined) view.setBigUint64(32, data.pvPolicyArg === null ? 0n : BigInt(util.toPointer(data.pvPolicyArg)), true);
  return buf;
}

export class WTD_GENERIC_CHAIN_POLICY_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pSignerChainInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get pCounterSignerChainInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get pfnPolicyCallback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pvPolicyArg(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pSignerChainInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set pCounterSignerChainInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set pfnPolicyCallback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set pvPolicyArg(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.DRIVER_VER_MAJORMINOR (size: 8)
 */
export interface DRIVER_VER_MAJORMINOR {
  /** u32 */
  dwMajor: number;
  /** u32 */
  dwMinor: number;
}

export const sizeofDRIVER_VER_MAJORMINOR = 8;

export function allocDRIVER_VER_MAJORMINOR(data?: Partial<DRIVER_VER_MAJORMINOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_VER_MAJORMINOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMajor !== undefined) view.setUint32(0, Number(data.dwMajor), true);
  // 0x04: u32
  if (data?.dwMinor !== undefined) view.setUint32(4, Number(data.dwMinor), true);
  return buf;
}

export class DRIVER_VER_MAJORMINORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMajor(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMinor(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwMajor(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMinor(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.DRIVER_VER_INFO (size: 80)
 */
export interface DRIVER_VER_INFO {
  /** u32 */
  cbStruct: number;
  /** usize */
  dwReserved1: Deno.PointerValue;
  /** usize */
  dwReserved2: Deno.PointerValue;
  /** u32 */
  dwPlatform: number;
  /** u32 */
  dwVersion: number;
  /** array */
  wszVersion: Deno.PointerValue | null;
  /** array */
  wszSignedBy: Deno.PointerValue | null;
  /** ptr */
  pcSignerCertContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.WinTrust.DRIVER_VER_MAJORMINOR */
  sOSVersionLow: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinTrust.DRIVER_VER_MAJORMINOR */
  sOSVersionHigh: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwBuildNumberLow: number;
  /** u32 */
  dwBuildNumberHigh: number;
}

export const sizeofDRIVER_VER_INFO = 80;

export function allocDRIVER_VER_INFO(data?: Partial<DRIVER_VER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_VER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(8, BigInt(data.dwReserved1), true);
  // 0x10: usize
  if (data?.dwReserved2 !== undefined) view.setBigUint64(16, BigInt(data.dwReserved2), true);
  // 0x18: u32
  if (data?.dwPlatform !== undefined) view.setUint32(24, Number(data.dwPlatform), true);
  // 0x1c: u32
  if (data?.dwVersion !== undefined) view.setUint32(28, Number(data.dwVersion), true);
  // 0x20: pointer
  if (data?.wszVersion !== undefined) view.setBigUint64(32, data.wszVersion === null ? 0n : BigInt(util.toPointer(data.wszVersion)), true);
  // 0x28: pointer
  if (data?.wszSignedBy !== undefined) view.setBigUint64(40, data.wszSignedBy === null ? 0n : BigInt(util.toPointer(data.wszSignedBy)), true);
  // 0x30: pointer
  if (data?.pcSignerCertContext !== undefined) view.setBigUint64(48, data.pcSignerCertContext === null ? 0n : BigInt(util.toPointer(data.pcSignerCertContext)), true);
  // 0x38: pointer
  if (data?.sOSVersionLow !== undefined) view.setBigUint64(56, data.sOSVersionLow === null ? 0n : BigInt(util.toPointer(data.sOSVersionLow)), true);
  // 0x40: pointer
  if (data?.sOSVersionHigh !== undefined) view.setBigUint64(64, data.sOSVersionHigh === null ? 0n : BigInt(util.toPointer(data.sOSVersionHigh)), true);
  // 0x48: u32
  if (data?.dwBuildNumberLow !== undefined) view.setUint32(72, Number(data.dwBuildNumberLow), true);
  // 0x4c: u32
  if (data?.dwBuildNumberHigh !== undefined) view.setUint32(76, Number(data.dwBuildNumberHigh), true);
  return buf;
}

export class DRIVER_VER_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get dwReserved1(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: usize
  get dwReserved2(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u32
  get dwPlatform(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwVersion(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get wszVersion(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get wszSignedBy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pcSignerCertContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get sOSVersionLow(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get sOSVersionHigh(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u32
  get dwBuildNumberLow(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwBuildNumberHigh(): number {
    return this.view.getUint32(76, true);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set dwReserved1(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: usize
  set dwReserved2(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u32
  set dwPlatform(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwVersion(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set wszVersion(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set wszSignedBy(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pcSignerCertContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set sOSVersionLow(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set sOSVersionHigh(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: u32
  set dwBuildNumberLow(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwBuildNumberHigh(value: number) {
    this.view.setUint32(76, value, true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CONFIG_CI_PROV_INFO_RESULT (size: 24)
 */
export interface CONFIG_CI_PROV_INFO_RESULT {
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwResult: number;
  /** u32 */
  dwPolicyIndex: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  fIsExplicitDeny: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCONFIG_CI_PROV_INFO_RESULT = 24;

export function allocCONFIG_CI_PROV_INFO_RESULT(data?: Partial<CONFIG_CI_PROV_INFO_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofCONFIG_CI_PROV_INFO_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hr !== undefined) view.setBigUint64(0, data.hr === null ? 0n : BigInt(util.toPointer(data.hr)), true);
  // 0x08: u32
  if (data?.dwResult !== undefined) view.setUint32(8, Number(data.dwResult), true);
  // 0x0c: u32
  if (data?.dwPolicyIndex !== undefined) view.setUint32(12, Number(data.dwPolicyIndex), true);
  // 0x10: pointer
  if (data?.fIsExplicitDeny !== undefined) view.setBigUint64(16, data.fIsExplicitDeny === null ? 0n : BigInt(util.toPointer(data.fIsExplicitDeny)), true);
  return buf;
}

export class CONFIG_CI_PROV_INFO_RESULTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dwResult(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwPolicyIndex(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get fIsExplicitDeny(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set hr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dwResult(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwPolicyIndex(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set fIsExplicitDeny(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinTrust.CONFIG_CI_PROV_INFO (size: 32)
 */
export interface CONFIG_CI_PROV_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwPolicies: number;
  /** ptr */
  pPolicies: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.WinTrust.CONFIG_CI_PROV_INFO_RESULT */
  result: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwScenario: number;
}

export const sizeofCONFIG_CI_PROV_INFO = 32;

export function allocCONFIG_CI_PROV_INFO(data?: Partial<CONFIG_CI_PROV_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCONFIG_CI_PROV_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwPolicies !== undefined) view.setUint32(4, Number(data.dwPolicies), true);
  // 0x08: pointer
  if (data?.pPolicies !== undefined) view.setBigUint64(8, data.pPolicies === null ? 0n : BigInt(util.toPointer(data.pPolicies)), true);
  // 0x10: pointer
  if (data?.result !== undefined) view.setBigUint64(16, data.result === null ? 0n : BigInt(util.toPointer(data.result)), true);
  // 0x18: u32
  if (data?.dwScenario !== undefined) view.setUint32(24, Number(data.dwScenario), true);
  // 0x1c: pad4
  return buf;
}

export class CONFIG_CI_PROV_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPolicies(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pPolicies(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get result(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get dwScenario(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPolicies(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pPolicies(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set result(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set dwScenario(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.WinWlx.WLX_SC_NOTIFICATION_INFO (size: 32)
 */
export interface WLX_SC_NOTIFICATION_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pszCard: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszReader: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszContainer: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszCryptoProvider: string | null | Uint8Array | Uint16Array;
}

export const sizeofWLX_SC_NOTIFICATION_INFO = 32;

export function allocWLX_SC_NOTIFICATION_INFO(data?: Partial<WLX_SC_NOTIFICATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_SC_NOTIFICATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszCard !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszCard);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszReader !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszReader);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszContainer !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszContainer);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszCryptoProvider !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszCryptoProvider);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export class WLX_SC_NOTIFICATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszCard(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pszReader(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszContainer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pszCryptoProvider(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszCard(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pszReader(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pszContainer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pszCryptoProvider(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }
}

/**
 * Windows.Win32.Security.WinWlx.WLX_PROFILE_V1_0 (size: 16)
 */
export interface WLX_PROFILE_V1_0 {
  /** u32 */
  dwType: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszProfile: string | null | Uint8Array | Uint16Array;
}

export const sizeofWLX_PROFILE_V1_0 = 16;

export function allocWLX_PROFILE_V1_0(data?: Partial<WLX_PROFILE_V1_0>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_PROFILE_V1_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszProfile !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszProfile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class WLX_PROFILE_V1_0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszProfile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszProfile(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.WinWlx.WLX_PROFILE_V2_0 (size: 48)
 */
export interface WLX_PROFILE_V2_0 {
  /** u32 */
  dwType: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszProfile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPolicy: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszNetworkDefaultUserProfile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszServerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszEnvironment: string | null | Uint8Array | Uint16Array;
}

export const sizeofWLX_PROFILE_V2_0 = 48;

export function allocWLX_PROFILE_V2_0(data?: Partial<WLX_PROFILE_V2_0>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_PROFILE_V2_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszProfile !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszProfile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszPolicy !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszPolicy);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszNetworkDefaultUserProfile !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszNetworkDefaultUserProfile);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszServerName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszServerName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pszEnvironment !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszEnvironment);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  return buf;
}

export class WLX_PROFILE_V2_0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszProfile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszPolicy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pszNetworkDefaultUserProfile(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pszServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get pszEnvironment(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszProfile(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pszPolicy(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pszNetworkDefaultUserProfile(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set pszServerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: buffer
  set pszEnvironment(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }
}

/**
 * Windows.Win32.Security.WinWlx.WLX_MPR_NOTIFY_INFO (size: 32)
 */
export interface WLX_MPR_NOTIFY_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pszUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszDomain: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPassword: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszOldPassword: string | null | Uint8Array | Uint16Array;
}

export const sizeofWLX_MPR_NOTIFY_INFO = 32;

export function allocWLX_MPR_NOTIFY_INFO(data?: Partial<WLX_MPR_NOTIFY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_MPR_NOTIFY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszUserName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszUserName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pszDomain !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszDomain);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszPassword !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszPassword);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszOldPassword !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszOldPassword);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export class WLX_MPR_NOTIFY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszUserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pszDomain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pszOldPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pszUserName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pszDomain(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pszPassword(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pszOldPassword(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }
}

/**
 * Windows.Win32.Security.WinWlx.WLX_TERMINAL_SERVICES_DATA (size: 24)
 */
export interface WLX_TERMINAL_SERVICES_DATA {
  /** array */
  ProfilePath: Deno.PointerValue | null;
  /** array */
  HomeDir: Deno.PointerValue | null;
  /** array */
  HomeDirDrive: Deno.PointerValue | null;
}

export const sizeofWLX_TERMINAL_SERVICES_DATA = 24;

export function allocWLX_TERMINAL_SERVICES_DATA(data?: Partial<WLX_TERMINAL_SERVICES_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_TERMINAL_SERVICES_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProfilePath !== undefined) view.setBigUint64(0, data.ProfilePath === null ? 0n : BigInt(util.toPointer(data.ProfilePath)), true);
  // 0x08: pointer
  if (data?.HomeDir !== undefined) view.setBigUint64(8, data.HomeDir === null ? 0n : BigInt(util.toPointer(data.HomeDir)), true);
  // 0x10: pointer
  if (data?.HomeDirDrive !== undefined) view.setBigUint64(16, data.HomeDirDrive === null ? 0n : BigInt(util.toPointer(data.HomeDirDrive)), true);
  return buf;
}

export class WLX_TERMINAL_SERVICES_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ProfilePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get HomeDir(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get HomeDirDrive(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ProfilePath(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set HomeDir(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set HomeDirDrive(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinWlx.WLX_CLIENT_CREDENTIALS_INFO_V1_0 (size: 40)
 */
export interface WLX_CLIENT_CREDENTIALS_INFO_V1_0 {
  /** u32 */
  dwType: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszDomain: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPassword: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  fPromptForPassword: boolean;
}

export const sizeofWLX_CLIENT_CREDENTIALS_INFO_V1_0 = 40;

export function allocWLX_CLIENT_CREDENTIALS_INFO_V1_0(data?: Partial<WLX_CLIENT_CREDENTIALS_INFO_V1_0>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_CLIENT_CREDENTIALS_INFO_V1_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszUserName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszUserName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszDomain !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszDomain);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszPassword !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszPassword);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: i32
  if (data?.fPromptForPassword !== undefined) view.setInt32(32, Number(data.fPromptForPassword), true);
  // 0x24: pad4
  return buf;
}

export class WLX_CLIENT_CREDENTIALS_INFO_V1_0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszUserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszDomain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pszPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i32
  get fPromptForPassword(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszUserName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pszDomain(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pszPassword(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: i32
  set fPromptForPassword(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.WinWlx.WLX_CLIENT_CREDENTIALS_INFO_V2_0 (size: 40)
 */
export interface WLX_CLIENT_CREDENTIALS_INFO_V2_0 {
  /** u32 */
  dwType: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszDomain: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPassword: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  fPromptForPassword: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDisconnectOnLogonFailure: boolean;
}

export const sizeofWLX_CLIENT_CREDENTIALS_INFO_V2_0 = 40;

export function allocWLX_CLIENT_CREDENTIALS_INFO_V2_0(data?: Partial<WLX_CLIENT_CREDENTIALS_INFO_V2_0>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_CLIENT_CREDENTIALS_INFO_V2_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszUserName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszUserName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszDomain !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszDomain);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszPassword !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszPassword);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: i32
  if (data?.fPromptForPassword !== undefined) view.setInt32(32, Number(data.fPromptForPassword), true);
  // 0x24: i32
  if (data?.fDisconnectOnLogonFailure !== undefined) view.setInt32(36, Number(data.fDisconnectOnLogonFailure), true);
  return buf;
}

export class WLX_CLIENT_CREDENTIALS_INFO_V2_0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszUserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszDomain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pszPassword(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i32
  get fPromptForPassword(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get fDisconnectOnLogonFailure(): number {
    return this.view.getInt32(36, true);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszUserName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pszDomain(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pszPassword(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: i32
  set fPromptForPassword(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set fDisconnectOnLogonFailure(value: number) {
    this.view.setInt32(36, value, true);
  }
}

/**
 * Windows.Win32.Security.WinWlx.WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0 (size: 184)
 */
export interface WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0 {
  /** u32 */
  dwType: number;
  /** Windows.Win32.Foundation.HANDLE */
  UserToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  LogonId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.QUOTA_LIMITS */
  Quotas: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  UserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Domain: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogonTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  SmartCardLogon: boolean;
  /** u32 */
  ProfileLength: number;
  /** u32 */
  MessageType: number;
  /** u16 */
  LogonCount: number;
  /** u16 */
  BadPasswordCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ProfileLogonTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LogoffTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  KickOffTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordLastSet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordCanChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  PasswordMustChange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  LogonScript: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  HomeDirectory: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  FullName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ProfilePath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  HomeDirectoryDrive: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  LogonServer: string | null | Uint8Array | Uint16Array;
  /** u32 */
  UserFlags: number;
  /** u32 */
  PrivateDataLen: number;
  /** ptr */
  PrivateData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0 = 184;

export function allocWLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0(data?: Partial<WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwType !== undefined) view.setUint32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.UserToken !== undefined) view.setBigUint64(8, data.UserToken === null ? 0n : BigInt(util.toPointer(data.UserToken)), true);
  // 0x10: pointer
  if (data?.LogonId !== undefined) view.setBigUint64(16, data.LogonId === null ? 0n : BigInt(util.toPointer(data.LogonId)), true);
  // 0x18: pointer
  if (data?.Quotas !== undefined) view.setBigUint64(24, data.Quotas === null ? 0n : BigInt(util.toPointer(data.Quotas)), true);
  // 0x20: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.UserName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.Domain !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.Domain);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: pointer
  if (data?.LogonTime !== undefined) view.setBigUint64(48, data.LogonTime === null ? 0n : BigInt(util.toPointer(data.LogonTime)), true);
  // 0x38: i32
  if (data?.SmartCardLogon !== undefined) view.setInt32(56, Number(data.SmartCardLogon), true);
  // 0x3c: u32
  if (data?.ProfileLength !== undefined) view.setUint32(60, Number(data.ProfileLength), true);
  // 0x40: u32
  if (data?.MessageType !== undefined) view.setUint32(64, Number(data.MessageType), true);
  // 0x44: u16
  if (data?.LogonCount !== undefined) view.setUint16(68, Number(data.LogonCount), true);
  // 0x46: u16
  if (data?.BadPasswordCount !== undefined) view.setUint16(70, Number(data.BadPasswordCount), true);
  // 0x48: pointer
  if (data?.ProfileLogonTime !== undefined) view.setBigUint64(72, data.ProfileLogonTime === null ? 0n : BigInt(util.toPointer(data.ProfileLogonTime)), true);
  // 0x50: pointer
  if (data?.LogoffTime !== undefined) view.setBigUint64(80, data.LogoffTime === null ? 0n : BigInt(util.toPointer(data.LogoffTime)), true);
  // 0x58: pointer
  if (data?.KickOffTime !== undefined) view.setBigUint64(88, data.KickOffTime === null ? 0n : BigInt(util.toPointer(data.KickOffTime)), true);
  // 0x60: pointer
  if (data?.PasswordLastSet !== undefined) view.setBigUint64(96, data.PasswordLastSet === null ? 0n : BigInt(util.toPointer(data.PasswordLastSet)), true);
  // 0x68: pointer
  if (data?.PasswordCanChange !== undefined) view.setBigUint64(104, data.PasswordCanChange === null ? 0n : BigInt(util.toPointer(data.PasswordCanChange)), true);
  // 0x70: pointer
  if (data?.PasswordMustChange !== undefined) view.setBigUint64(112, data.PasswordMustChange === null ? 0n : BigInt(util.toPointer(data.PasswordMustChange)), true);
  // 0x78: buffer
  if (data?.LogonScript !== undefined) {
    (buf as any)._f120 = util.pwstrToFfi(data.LogonScript);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f120)), true);
  }
  // 0x80: buffer
  if (data?.HomeDirectory !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.HomeDirectory);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  // 0x88: buffer
  if (data?.FullName !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.FullName);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f136)), true);
  }
  // 0x90: buffer
  if (data?.ProfilePath !== undefined) {
    (buf as any)._f144 = util.pwstrToFfi(data.ProfilePath);
    view.setBigUint64(144, (buf as any)._f144 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f144)), true);
  }
  // 0x98: buffer
  if (data?.HomeDirectoryDrive !== undefined) {
    (buf as any)._f152 = util.pwstrToFfi(data.HomeDirectoryDrive);
    view.setBigUint64(152, (buf as any)._f152 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f152)), true);
  }
  // 0xa0: buffer
  if (data?.LogonServer !== undefined) {
    (buf as any)._f160 = util.pwstrToFfi(data.LogonServer);
    view.setBigUint64(160, (buf as any)._f160 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f160)), true);
  }
  // 0xa8: u32
  if (data?.UserFlags !== undefined) view.setUint32(168, Number(data.UserFlags), true);
  // 0xac: u32
  if (data?.PrivateDataLen !== undefined) view.setUint32(172, Number(data.PrivateDataLen), true);
  // 0xb0: pointer
  if (data?.PrivateData !== undefined) view.setBigUint64(176, data.PrivateData === null ? 0n : BigInt(util.toPointer(data.PrivateData)), true);
  return buf;
}

export class WLX_CONSOLESWITCH_CREDENTIALS_INFO_V1_0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get UserToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get LogonId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Quotas(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get Domain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get LogonTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: i32
  get SmartCardLogon(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: u32
  get ProfileLength(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get MessageType(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u16
  get LogonCount(): number {
    return this.view.getUint16(68, true);
  }

  // 0x46: u16
  get BadPasswordCount(): number {
    return this.view.getUint16(70, true);
  }

  // 0x48: pointer
  get ProfileLogonTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get LogoffTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get KickOffTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get PasswordLastSet(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get PasswordCanChange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get PasswordMustChange(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: buffer
  get LogonScript(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: buffer
  get HomeDirectory(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: buffer
  get FullName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x90: buffer
  get ProfilePath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: buffer
  get HomeDirectoryDrive(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: buffer
  get LogonServer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(160, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa8: u32
  get UserFlags(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get PrivateDataLen(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: pointer
  get PrivateData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(176, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set UserToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set LogonId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Quotas(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: buffer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: buffer
  set Domain(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: pointer
  set LogonTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: i32
  set SmartCardLogon(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: u32
  set ProfileLength(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set MessageType(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u16
  set LogonCount(value: number) {
    this.view.setUint16(68, value, true);
  }

  // 0x46: u16
  set BadPasswordCount(value: number) {
    this.view.setUint16(70, value, true);
  }

  // 0x48: pointer
  set ProfileLogonTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set LogoffTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set KickOffTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set PasswordLastSet(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set PasswordCanChange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set PasswordMustChange(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: buffer
  set LogonScript(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f120 = value;
    this.view.setBigUint64(120, BigInt(util.toPointer((this.buf as any)._f120)), true);
  }

  // 0x80: buffer
  set HomeDirectory(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(util.toPointer((this.buf as any)._f128)), true);
  }

  // 0x88: buffer
  set FullName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f136 = value;
    this.view.setBigUint64(136, BigInt(util.toPointer((this.buf as any)._f136)), true);
  }

  // 0x90: buffer
  set ProfilePath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f144 = value;
    this.view.setBigUint64(144, BigInt(util.toPointer((this.buf as any)._f144)), true);
  }

  // 0x98: buffer
  set HomeDirectoryDrive(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f152 = value;
    this.view.setBigUint64(152, BigInt(util.toPointer((this.buf as any)._f152)), true);
  }

  // 0xa0: buffer
  set LogonServer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f160 = value;
    this.view.setBigUint64(160, BigInt(util.toPointer((this.buf as any)._f160)), true);
  }

  // 0xa8: u32
  set UserFlags(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set PrivateDataLen(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: pointer
  set PrivateData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(176, BigInt(util.toPointer(value)), true);
  }
}

export type HDESK = Deno.PointerValue;

/**
 * Windows.Win32.Security.WinWlx.WLX_DESKTOP (size: 24)
 */
export interface WLX_DESKTOP {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.System.StationsAndDesktops.HDESK */
  hDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszDesktopName: string | null | Uint8Array | Uint16Array;
}

export const sizeofWLX_DESKTOP = 24;

export function allocWLX_DESKTOP(data?: Partial<WLX_DESKTOP>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_DESKTOP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.hDesktop !== undefined) view.setBigUint64(8, data.hDesktop === null ? 0n : BigInt(util.toPointer(data.hDesktop)), true);
  // 0x10: buffer
  if (data?.pszDesktopName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszDesktopName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class WLX_DESKTOPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pszDesktopName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: buffer
  set pszDesktopName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Security.WinWlx.WLX_DISPATCH_VERSION_1_0 (size: 104)
 */
export interface WLX_DISPATCH_VERSION_1_0 {
  /** Windows.Win32.Security.WinWlx.PWLX_USE_CTRL_ALT_DEL */
  WlxUseCtrlAltDel: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_CONTEXT_POINTER */
  WlxSetContextPointer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SAS_NOTIFY */
  WlxSasNotify: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_TIMEOUT */
  WlxSetTimeout: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_ASSIGN_SHELL_PROTECTION */
  WlxAssignShellProtection: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_MESSAGE_BOX */
  WlxMessageBox: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX */
  WlxDialogBox: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_PARAM */
  WlxDialogBoxParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_INDIRECT */
  WlxDialogBoxIndirect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_INDIRECT_PARAM */
  WlxDialogBoxIndirectParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SWITCH_DESKTOP_TO_USER */
  WlxSwitchDesktopToUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SWITCH_DESKTOP_TO_WINLOGON */
  WlxSwitchDesktopToWinlogon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CHANGE_PASSWORD_NOTIFY */
  WlxChangePasswordNotify: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWLX_DISPATCH_VERSION_1_0 = 104;

export function allocWLX_DISPATCH_VERSION_1_0(data?: Partial<WLX_DISPATCH_VERSION_1_0>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_DISPATCH_VERSION_1_0);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WlxUseCtrlAltDel !== undefined) view.setBigUint64(0, data.WlxUseCtrlAltDel === null ? 0n : BigInt(util.toPointer(data.WlxUseCtrlAltDel)), true);
  // 0x08: pointer
  if (data?.WlxSetContextPointer !== undefined) view.setBigUint64(8, data.WlxSetContextPointer === null ? 0n : BigInt(util.toPointer(data.WlxSetContextPointer)), true);
  // 0x10: pointer
  if (data?.WlxSasNotify !== undefined) view.setBigUint64(16, data.WlxSasNotify === null ? 0n : BigInt(util.toPointer(data.WlxSasNotify)), true);
  // 0x18: pointer
  if (data?.WlxSetTimeout !== undefined) view.setBigUint64(24, data.WlxSetTimeout === null ? 0n : BigInt(util.toPointer(data.WlxSetTimeout)), true);
  // 0x20: pointer
  if (data?.WlxAssignShellProtection !== undefined) view.setBigUint64(32, data.WlxAssignShellProtection === null ? 0n : BigInt(util.toPointer(data.WlxAssignShellProtection)), true);
  // 0x28: pointer
  if (data?.WlxMessageBox !== undefined) view.setBigUint64(40, data.WlxMessageBox === null ? 0n : BigInt(util.toPointer(data.WlxMessageBox)), true);
  // 0x30: pointer
  if (data?.WlxDialogBox !== undefined) view.setBigUint64(48, data.WlxDialogBox === null ? 0n : BigInt(util.toPointer(data.WlxDialogBox)), true);
  // 0x38: pointer
  if (data?.WlxDialogBoxParam !== undefined) view.setBigUint64(56, data.WlxDialogBoxParam === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxParam)), true);
  // 0x40: pointer
  if (data?.WlxDialogBoxIndirect !== undefined) view.setBigUint64(64, data.WlxDialogBoxIndirect === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxIndirect)), true);
  // 0x48: pointer
  if (data?.WlxDialogBoxIndirectParam !== undefined) view.setBigUint64(72, data.WlxDialogBoxIndirectParam === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxIndirectParam)), true);
  // 0x50: pointer
  if (data?.WlxSwitchDesktopToUser !== undefined) view.setBigUint64(80, data.WlxSwitchDesktopToUser === null ? 0n : BigInt(util.toPointer(data.WlxSwitchDesktopToUser)), true);
  // 0x58: pointer
  if (data?.WlxSwitchDesktopToWinlogon !== undefined) view.setBigUint64(88, data.WlxSwitchDesktopToWinlogon === null ? 0n : BigInt(util.toPointer(data.WlxSwitchDesktopToWinlogon)), true);
  // 0x60: pointer
  if (data?.WlxChangePasswordNotify !== undefined) view.setBigUint64(96, data.WlxChangePasswordNotify === null ? 0n : BigInt(util.toPointer(data.WlxChangePasswordNotify)), true);
  return buf;
}

export class WLX_DISPATCH_VERSION_1_0View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get WlxUseCtrlAltDel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get WlxSetContextPointer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get WlxSasNotify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get WlxSetTimeout(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get WlxAssignShellProtection(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get WlxMessageBox(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get WlxDialogBox(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get WlxDialogBoxParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get WlxDialogBoxIndirect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get WlxDialogBoxIndirectParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get WlxSwitchDesktopToUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get WlxSwitchDesktopToWinlogon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get WlxChangePasswordNotify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set WlxUseCtrlAltDel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set WlxSetContextPointer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set WlxSasNotify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set WlxSetTimeout(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set WlxAssignShellProtection(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set WlxMessageBox(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set WlxDialogBox(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set WlxDialogBoxParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set WlxDialogBoxIndirect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set WlxDialogBoxIndirectParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set WlxSwitchDesktopToUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set WlxSwitchDesktopToWinlogon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set WlxChangePasswordNotify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinWlx.WLX_DISPATCH_VERSION_1_1 (size: 136)
 */
export interface WLX_DISPATCH_VERSION_1_1 {
  /** Windows.Win32.Security.WinWlx.PWLX_USE_CTRL_ALT_DEL */
  WlxUseCtrlAltDel: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_CONTEXT_POINTER */
  WlxSetContextPointer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SAS_NOTIFY */
  WlxSasNotify: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_TIMEOUT */
  WlxSetTimeout: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_ASSIGN_SHELL_PROTECTION */
  WlxAssignShellProtection: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_MESSAGE_BOX */
  WlxMessageBox: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX */
  WlxDialogBox: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_PARAM */
  WlxDialogBoxParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_INDIRECT */
  WlxDialogBoxIndirect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_INDIRECT_PARAM */
  WlxDialogBoxIndirectParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SWITCH_DESKTOP_TO_USER */
  WlxSwitchDesktopToUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SWITCH_DESKTOP_TO_WINLOGON */
  WlxSwitchDesktopToWinlogon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CHANGE_PASSWORD_NOTIFY */
  WlxChangePasswordNotify: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_GET_SOURCE_DESKTOP */
  WlxGetSourceDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_RETURN_DESKTOP */
  WlxSetReturnDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CREATE_USER_DESKTOP */
  WlxCreateUserDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CHANGE_PASSWORD_NOTIFY_EX */
  WlxChangePasswordNotifyEx: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWLX_DISPATCH_VERSION_1_1 = 136;

export function allocWLX_DISPATCH_VERSION_1_1(data?: Partial<WLX_DISPATCH_VERSION_1_1>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_DISPATCH_VERSION_1_1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WlxUseCtrlAltDel !== undefined) view.setBigUint64(0, data.WlxUseCtrlAltDel === null ? 0n : BigInt(util.toPointer(data.WlxUseCtrlAltDel)), true);
  // 0x08: pointer
  if (data?.WlxSetContextPointer !== undefined) view.setBigUint64(8, data.WlxSetContextPointer === null ? 0n : BigInt(util.toPointer(data.WlxSetContextPointer)), true);
  // 0x10: pointer
  if (data?.WlxSasNotify !== undefined) view.setBigUint64(16, data.WlxSasNotify === null ? 0n : BigInt(util.toPointer(data.WlxSasNotify)), true);
  // 0x18: pointer
  if (data?.WlxSetTimeout !== undefined) view.setBigUint64(24, data.WlxSetTimeout === null ? 0n : BigInt(util.toPointer(data.WlxSetTimeout)), true);
  // 0x20: pointer
  if (data?.WlxAssignShellProtection !== undefined) view.setBigUint64(32, data.WlxAssignShellProtection === null ? 0n : BigInt(util.toPointer(data.WlxAssignShellProtection)), true);
  // 0x28: pointer
  if (data?.WlxMessageBox !== undefined) view.setBigUint64(40, data.WlxMessageBox === null ? 0n : BigInt(util.toPointer(data.WlxMessageBox)), true);
  // 0x30: pointer
  if (data?.WlxDialogBox !== undefined) view.setBigUint64(48, data.WlxDialogBox === null ? 0n : BigInt(util.toPointer(data.WlxDialogBox)), true);
  // 0x38: pointer
  if (data?.WlxDialogBoxParam !== undefined) view.setBigUint64(56, data.WlxDialogBoxParam === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxParam)), true);
  // 0x40: pointer
  if (data?.WlxDialogBoxIndirect !== undefined) view.setBigUint64(64, data.WlxDialogBoxIndirect === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxIndirect)), true);
  // 0x48: pointer
  if (data?.WlxDialogBoxIndirectParam !== undefined) view.setBigUint64(72, data.WlxDialogBoxIndirectParam === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxIndirectParam)), true);
  // 0x50: pointer
  if (data?.WlxSwitchDesktopToUser !== undefined) view.setBigUint64(80, data.WlxSwitchDesktopToUser === null ? 0n : BigInt(util.toPointer(data.WlxSwitchDesktopToUser)), true);
  // 0x58: pointer
  if (data?.WlxSwitchDesktopToWinlogon !== undefined) view.setBigUint64(88, data.WlxSwitchDesktopToWinlogon === null ? 0n : BigInt(util.toPointer(data.WlxSwitchDesktopToWinlogon)), true);
  // 0x60: pointer
  if (data?.WlxChangePasswordNotify !== undefined) view.setBigUint64(96, data.WlxChangePasswordNotify === null ? 0n : BigInt(util.toPointer(data.WlxChangePasswordNotify)), true);
  // 0x68: pointer
  if (data?.WlxGetSourceDesktop !== undefined) view.setBigUint64(104, data.WlxGetSourceDesktop === null ? 0n : BigInt(util.toPointer(data.WlxGetSourceDesktop)), true);
  // 0x70: pointer
  if (data?.WlxSetReturnDesktop !== undefined) view.setBigUint64(112, data.WlxSetReturnDesktop === null ? 0n : BigInt(util.toPointer(data.WlxSetReturnDesktop)), true);
  // 0x78: pointer
  if (data?.WlxCreateUserDesktop !== undefined) view.setBigUint64(120, data.WlxCreateUserDesktop === null ? 0n : BigInt(util.toPointer(data.WlxCreateUserDesktop)), true);
  // 0x80: pointer
  if (data?.WlxChangePasswordNotifyEx !== undefined) view.setBigUint64(128, data.WlxChangePasswordNotifyEx === null ? 0n : BigInt(util.toPointer(data.WlxChangePasswordNotifyEx)), true);
  return buf;
}

export class WLX_DISPATCH_VERSION_1_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get WlxUseCtrlAltDel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get WlxSetContextPointer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get WlxSasNotify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get WlxSetTimeout(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get WlxAssignShellProtection(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get WlxMessageBox(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get WlxDialogBox(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get WlxDialogBoxParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get WlxDialogBoxIndirect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get WlxDialogBoxIndirectParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get WlxSwitchDesktopToUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get WlxSwitchDesktopToWinlogon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get WlxChangePasswordNotify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get WlxGetSourceDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get WlxSetReturnDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get WlxCreateUserDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get WlxChangePasswordNotifyEx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set WlxUseCtrlAltDel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set WlxSetContextPointer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set WlxSasNotify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set WlxSetTimeout(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set WlxAssignShellProtection(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set WlxMessageBox(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set WlxDialogBox(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set WlxDialogBoxParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set WlxDialogBoxIndirect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set WlxDialogBoxIndirectParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set WlxSwitchDesktopToUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set WlxSwitchDesktopToWinlogon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set WlxChangePasswordNotify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set WlxGetSourceDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set WlxSetReturnDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set WlxCreateUserDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set WlxChangePasswordNotifyEx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinWlx.WLX_DISPATCH_VERSION_1_2 (size: 144)
 */
export interface WLX_DISPATCH_VERSION_1_2 {
  /** Windows.Win32.Security.WinWlx.PWLX_USE_CTRL_ALT_DEL */
  WlxUseCtrlAltDel: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_CONTEXT_POINTER */
  WlxSetContextPointer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SAS_NOTIFY */
  WlxSasNotify: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_TIMEOUT */
  WlxSetTimeout: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_ASSIGN_SHELL_PROTECTION */
  WlxAssignShellProtection: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_MESSAGE_BOX */
  WlxMessageBox: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX */
  WlxDialogBox: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_PARAM */
  WlxDialogBoxParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_INDIRECT */
  WlxDialogBoxIndirect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_INDIRECT_PARAM */
  WlxDialogBoxIndirectParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SWITCH_DESKTOP_TO_USER */
  WlxSwitchDesktopToUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SWITCH_DESKTOP_TO_WINLOGON */
  WlxSwitchDesktopToWinlogon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CHANGE_PASSWORD_NOTIFY */
  WlxChangePasswordNotify: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_GET_SOURCE_DESKTOP */
  WlxGetSourceDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_RETURN_DESKTOP */
  WlxSetReturnDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CREATE_USER_DESKTOP */
  WlxCreateUserDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CHANGE_PASSWORD_NOTIFY_EX */
  WlxChangePasswordNotifyEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CLOSE_USER_DESKTOP */
  WlxCloseUserDesktop: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWLX_DISPATCH_VERSION_1_2 = 144;

export function allocWLX_DISPATCH_VERSION_1_2(data?: Partial<WLX_DISPATCH_VERSION_1_2>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_DISPATCH_VERSION_1_2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WlxUseCtrlAltDel !== undefined) view.setBigUint64(0, data.WlxUseCtrlAltDel === null ? 0n : BigInt(util.toPointer(data.WlxUseCtrlAltDel)), true);
  // 0x08: pointer
  if (data?.WlxSetContextPointer !== undefined) view.setBigUint64(8, data.WlxSetContextPointer === null ? 0n : BigInt(util.toPointer(data.WlxSetContextPointer)), true);
  // 0x10: pointer
  if (data?.WlxSasNotify !== undefined) view.setBigUint64(16, data.WlxSasNotify === null ? 0n : BigInt(util.toPointer(data.WlxSasNotify)), true);
  // 0x18: pointer
  if (data?.WlxSetTimeout !== undefined) view.setBigUint64(24, data.WlxSetTimeout === null ? 0n : BigInt(util.toPointer(data.WlxSetTimeout)), true);
  // 0x20: pointer
  if (data?.WlxAssignShellProtection !== undefined) view.setBigUint64(32, data.WlxAssignShellProtection === null ? 0n : BigInt(util.toPointer(data.WlxAssignShellProtection)), true);
  // 0x28: pointer
  if (data?.WlxMessageBox !== undefined) view.setBigUint64(40, data.WlxMessageBox === null ? 0n : BigInt(util.toPointer(data.WlxMessageBox)), true);
  // 0x30: pointer
  if (data?.WlxDialogBox !== undefined) view.setBigUint64(48, data.WlxDialogBox === null ? 0n : BigInt(util.toPointer(data.WlxDialogBox)), true);
  // 0x38: pointer
  if (data?.WlxDialogBoxParam !== undefined) view.setBigUint64(56, data.WlxDialogBoxParam === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxParam)), true);
  // 0x40: pointer
  if (data?.WlxDialogBoxIndirect !== undefined) view.setBigUint64(64, data.WlxDialogBoxIndirect === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxIndirect)), true);
  // 0x48: pointer
  if (data?.WlxDialogBoxIndirectParam !== undefined) view.setBigUint64(72, data.WlxDialogBoxIndirectParam === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxIndirectParam)), true);
  // 0x50: pointer
  if (data?.WlxSwitchDesktopToUser !== undefined) view.setBigUint64(80, data.WlxSwitchDesktopToUser === null ? 0n : BigInt(util.toPointer(data.WlxSwitchDesktopToUser)), true);
  // 0x58: pointer
  if (data?.WlxSwitchDesktopToWinlogon !== undefined) view.setBigUint64(88, data.WlxSwitchDesktopToWinlogon === null ? 0n : BigInt(util.toPointer(data.WlxSwitchDesktopToWinlogon)), true);
  // 0x60: pointer
  if (data?.WlxChangePasswordNotify !== undefined) view.setBigUint64(96, data.WlxChangePasswordNotify === null ? 0n : BigInt(util.toPointer(data.WlxChangePasswordNotify)), true);
  // 0x68: pointer
  if (data?.WlxGetSourceDesktop !== undefined) view.setBigUint64(104, data.WlxGetSourceDesktop === null ? 0n : BigInt(util.toPointer(data.WlxGetSourceDesktop)), true);
  // 0x70: pointer
  if (data?.WlxSetReturnDesktop !== undefined) view.setBigUint64(112, data.WlxSetReturnDesktop === null ? 0n : BigInt(util.toPointer(data.WlxSetReturnDesktop)), true);
  // 0x78: pointer
  if (data?.WlxCreateUserDesktop !== undefined) view.setBigUint64(120, data.WlxCreateUserDesktop === null ? 0n : BigInt(util.toPointer(data.WlxCreateUserDesktop)), true);
  // 0x80: pointer
  if (data?.WlxChangePasswordNotifyEx !== undefined) view.setBigUint64(128, data.WlxChangePasswordNotifyEx === null ? 0n : BigInt(util.toPointer(data.WlxChangePasswordNotifyEx)), true);
  // 0x88: pointer
  if (data?.WlxCloseUserDesktop !== undefined) view.setBigUint64(136, data.WlxCloseUserDesktop === null ? 0n : BigInt(util.toPointer(data.WlxCloseUserDesktop)), true);
  return buf;
}

export class WLX_DISPATCH_VERSION_1_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get WlxUseCtrlAltDel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get WlxSetContextPointer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get WlxSasNotify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get WlxSetTimeout(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get WlxAssignShellProtection(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get WlxMessageBox(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get WlxDialogBox(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get WlxDialogBoxParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get WlxDialogBoxIndirect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get WlxDialogBoxIndirectParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get WlxSwitchDesktopToUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get WlxSwitchDesktopToWinlogon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get WlxChangePasswordNotify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get WlxGetSourceDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get WlxSetReturnDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get WlxCreateUserDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get WlxChangePasswordNotifyEx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: pointer
  get WlxCloseUserDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set WlxUseCtrlAltDel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set WlxSetContextPointer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set WlxSasNotify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set WlxSetTimeout(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set WlxAssignShellProtection(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set WlxMessageBox(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set WlxDialogBox(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set WlxDialogBoxParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set WlxDialogBoxIndirect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set WlxDialogBoxIndirectParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set WlxSwitchDesktopToUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set WlxSwitchDesktopToWinlogon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set WlxChangePasswordNotify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set WlxGetSourceDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set WlxSetReturnDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set WlxCreateUserDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set WlxChangePasswordNotifyEx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }

  // 0x88: pointer
  set WlxCloseUserDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinWlx.WLX_DISPATCH_VERSION_1_3 (size: 200)
 */
export interface WLX_DISPATCH_VERSION_1_3 {
  /** Windows.Win32.Security.WinWlx.PWLX_USE_CTRL_ALT_DEL */
  WlxUseCtrlAltDel: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_CONTEXT_POINTER */
  WlxSetContextPointer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SAS_NOTIFY */
  WlxSasNotify: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_TIMEOUT */
  WlxSetTimeout: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_ASSIGN_SHELL_PROTECTION */
  WlxAssignShellProtection: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_MESSAGE_BOX */
  WlxMessageBox: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX */
  WlxDialogBox: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_PARAM */
  WlxDialogBoxParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_INDIRECT */
  WlxDialogBoxIndirect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_INDIRECT_PARAM */
  WlxDialogBoxIndirectParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SWITCH_DESKTOP_TO_USER */
  WlxSwitchDesktopToUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SWITCH_DESKTOP_TO_WINLOGON */
  WlxSwitchDesktopToWinlogon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CHANGE_PASSWORD_NOTIFY */
  WlxChangePasswordNotify: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_GET_SOURCE_DESKTOP */
  WlxGetSourceDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_RETURN_DESKTOP */
  WlxSetReturnDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CREATE_USER_DESKTOP */
  WlxCreateUserDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CHANGE_PASSWORD_NOTIFY_EX */
  WlxChangePasswordNotifyEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CLOSE_USER_DESKTOP */
  WlxCloseUserDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_OPTION */
  WlxSetOption: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_GET_OPTION */
  WlxGetOption: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_WIN31_MIGRATE */
  WlxWin31Migrate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_QUERY_CLIENT_CREDENTIALS */
  WlxQueryClientCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_QUERY_IC_CREDENTIALS */
  WlxQueryInetConnectorCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DISCONNECT */
  WlxDisconnect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_QUERY_TERMINAL_SERVICES_DATA */
  WlxQueryTerminalServicesData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWLX_DISPATCH_VERSION_1_3 = 200;

export function allocWLX_DISPATCH_VERSION_1_3(data?: Partial<WLX_DISPATCH_VERSION_1_3>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_DISPATCH_VERSION_1_3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WlxUseCtrlAltDel !== undefined) view.setBigUint64(0, data.WlxUseCtrlAltDel === null ? 0n : BigInt(util.toPointer(data.WlxUseCtrlAltDel)), true);
  // 0x08: pointer
  if (data?.WlxSetContextPointer !== undefined) view.setBigUint64(8, data.WlxSetContextPointer === null ? 0n : BigInt(util.toPointer(data.WlxSetContextPointer)), true);
  // 0x10: pointer
  if (data?.WlxSasNotify !== undefined) view.setBigUint64(16, data.WlxSasNotify === null ? 0n : BigInt(util.toPointer(data.WlxSasNotify)), true);
  // 0x18: pointer
  if (data?.WlxSetTimeout !== undefined) view.setBigUint64(24, data.WlxSetTimeout === null ? 0n : BigInt(util.toPointer(data.WlxSetTimeout)), true);
  // 0x20: pointer
  if (data?.WlxAssignShellProtection !== undefined) view.setBigUint64(32, data.WlxAssignShellProtection === null ? 0n : BigInt(util.toPointer(data.WlxAssignShellProtection)), true);
  // 0x28: pointer
  if (data?.WlxMessageBox !== undefined) view.setBigUint64(40, data.WlxMessageBox === null ? 0n : BigInt(util.toPointer(data.WlxMessageBox)), true);
  // 0x30: pointer
  if (data?.WlxDialogBox !== undefined) view.setBigUint64(48, data.WlxDialogBox === null ? 0n : BigInt(util.toPointer(data.WlxDialogBox)), true);
  // 0x38: pointer
  if (data?.WlxDialogBoxParam !== undefined) view.setBigUint64(56, data.WlxDialogBoxParam === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxParam)), true);
  // 0x40: pointer
  if (data?.WlxDialogBoxIndirect !== undefined) view.setBigUint64(64, data.WlxDialogBoxIndirect === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxIndirect)), true);
  // 0x48: pointer
  if (data?.WlxDialogBoxIndirectParam !== undefined) view.setBigUint64(72, data.WlxDialogBoxIndirectParam === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxIndirectParam)), true);
  // 0x50: pointer
  if (data?.WlxSwitchDesktopToUser !== undefined) view.setBigUint64(80, data.WlxSwitchDesktopToUser === null ? 0n : BigInt(util.toPointer(data.WlxSwitchDesktopToUser)), true);
  // 0x58: pointer
  if (data?.WlxSwitchDesktopToWinlogon !== undefined) view.setBigUint64(88, data.WlxSwitchDesktopToWinlogon === null ? 0n : BigInt(util.toPointer(data.WlxSwitchDesktopToWinlogon)), true);
  // 0x60: pointer
  if (data?.WlxChangePasswordNotify !== undefined) view.setBigUint64(96, data.WlxChangePasswordNotify === null ? 0n : BigInt(util.toPointer(data.WlxChangePasswordNotify)), true);
  // 0x68: pointer
  if (data?.WlxGetSourceDesktop !== undefined) view.setBigUint64(104, data.WlxGetSourceDesktop === null ? 0n : BigInt(util.toPointer(data.WlxGetSourceDesktop)), true);
  // 0x70: pointer
  if (data?.WlxSetReturnDesktop !== undefined) view.setBigUint64(112, data.WlxSetReturnDesktop === null ? 0n : BigInt(util.toPointer(data.WlxSetReturnDesktop)), true);
  // 0x78: pointer
  if (data?.WlxCreateUserDesktop !== undefined) view.setBigUint64(120, data.WlxCreateUserDesktop === null ? 0n : BigInt(util.toPointer(data.WlxCreateUserDesktop)), true);
  // 0x80: pointer
  if (data?.WlxChangePasswordNotifyEx !== undefined) view.setBigUint64(128, data.WlxChangePasswordNotifyEx === null ? 0n : BigInt(util.toPointer(data.WlxChangePasswordNotifyEx)), true);
  // 0x88: pointer
  if (data?.WlxCloseUserDesktop !== undefined) view.setBigUint64(136, data.WlxCloseUserDesktop === null ? 0n : BigInt(util.toPointer(data.WlxCloseUserDesktop)), true);
  // 0x90: pointer
  if (data?.WlxSetOption !== undefined) view.setBigUint64(144, data.WlxSetOption === null ? 0n : BigInt(util.toPointer(data.WlxSetOption)), true);
  // 0x98: pointer
  if (data?.WlxGetOption !== undefined) view.setBigUint64(152, data.WlxGetOption === null ? 0n : BigInt(util.toPointer(data.WlxGetOption)), true);
  // 0xa0: pointer
  if (data?.WlxWin31Migrate !== undefined) view.setBigUint64(160, data.WlxWin31Migrate === null ? 0n : BigInt(util.toPointer(data.WlxWin31Migrate)), true);
  // 0xa8: pointer
  if (data?.WlxQueryClientCredentials !== undefined) view.setBigUint64(168, data.WlxQueryClientCredentials === null ? 0n : BigInt(util.toPointer(data.WlxQueryClientCredentials)), true);
  // 0xb0: pointer
  if (data?.WlxQueryInetConnectorCredentials !== undefined) view.setBigUint64(176, data.WlxQueryInetConnectorCredentials === null ? 0n : BigInt(util.toPointer(data.WlxQueryInetConnectorCredentials)), true);
  // 0xb8: pointer
  if (data?.WlxDisconnect !== undefined) view.setBigUint64(184, data.WlxDisconnect === null ? 0n : BigInt(util.toPointer(data.WlxDisconnect)), true);
  // 0xc0: pointer
  if (data?.WlxQueryTerminalServicesData !== undefined) view.setBigUint64(192, data.WlxQueryTerminalServicesData === null ? 0n : BigInt(util.toPointer(data.WlxQueryTerminalServicesData)), true);
  return buf;
}

export class WLX_DISPATCH_VERSION_1_3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get WlxUseCtrlAltDel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get WlxSetContextPointer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get WlxSasNotify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get WlxSetTimeout(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get WlxAssignShellProtection(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get WlxMessageBox(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get WlxDialogBox(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get WlxDialogBoxParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get WlxDialogBoxIndirect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get WlxDialogBoxIndirectParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get WlxSwitchDesktopToUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get WlxSwitchDesktopToWinlogon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get WlxChangePasswordNotify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get WlxGetSourceDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get WlxSetReturnDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get WlxCreateUserDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get WlxChangePasswordNotifyEx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: pointer
  get WlxCloseUserDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x90: pointer
  get WlxSetOption(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: pointer
  get WlxGetOption(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: pointer
  get WlxWin31Migrate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(160, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa8: pointer
  get WlxQueryClientCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(168, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb0: pointer
  get WlxQueryInetConnectorCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(176, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb8: pointer
  get WlxDisconnect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(184, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc0: pointer
  get WlxQueryTerminalServicesData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(192, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set WlxUseCtrlAltDel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set WlxSetContextPointer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set WlxSasNotify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set WlxSetTimeout(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set WlxAssignShellProtection(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set WlxMessageBox(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set WlxDialogBox(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set WlxDialogBoxParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set WlxDialogBoxIndirect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set WlxDialogBoxIndirectParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set WlxSwitchDesktopToUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set WlxSwitchDesktopToWinlogon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set WlxChangePasswordNotify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set WlxGetSourceDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set WlxSetReturnDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set WlxCreateUserDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set WlxChangePasswordNotifyEx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }

  // 0x88: pointer
  set WlxCloseUserDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, BigInt(util.toPointer(value)), true);
  }

  // 0x90: pointer
  set WlxSetOption(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, BigInt(util.toPointer(value)), true);
  }

  // 0x98: pointer
  set WlxGetOption(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, BigInt(util.toPointer(value)), true);
  }

  // 0xa0: pointer
  set WlxWin31Migrate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(160, BigInt(util.toPointer(value)), true);
  }

  // 0xa8: pointer
  set WlxQueryClientCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(168, BigInt(util.toPointer(value)), true);
  }

  // 0xb0: pointer
  set WlxQueryInetConnectorCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(176, BigInt(util.toPointer(value)), true);
  }

  // 0xb8: pointer
  set WlxDisconnect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(184, BigInt(util.toPointer(value)), true);
  }

  // 0xc0: pointer
  set WlxQueryTerminalServicesData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(192, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinWlx.WLX_DISPATCH_VERSION_1_4 (size: 216)
 */
export interface WLX_DISPATCH_VERSION_1_4 {
  /** Windows.Win32.Security.WinWlx.PWLX_USE_CTRL_ALT_DEL */
  WlxUseCtrlAltDel: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_CONTEXT_POINTER */
  WlxSetContextPointer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SAS_NOTIFY */
  WlxSasNotify: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_TIMEOUT */
  WlxSetTimeout: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_ASSIGN_SHELL_PROTECTION */
  WlxAssignShellProtection: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_MESSAGE_BOX */
  WlxMessageBox: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX */
  WlxDialogBox: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_PARAM */
  WlxDialogBoxParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_INDIRECT */
  WlxDialogBoxIndirect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DIALOG_BOX_INDIRECT_PARAM */
  WlxDialogBoxIndirectParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SWITCH_DESKTOP_TO_USER */
  WlxSwitchDesktopToUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SWITCH_DESKTOP_TO_WINLOGON */
  WlxSwitchDesktopToWinlogon: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CHANGE_PASSWORD_NOTIFY */
  WlxChangePasswordNotify: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_GET_SOURCE_DESKTOP */
  WlxGetSourceDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_RETURN_DESKTOP */
  WlxSetReturnDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CREATE_USER_DESKTOP */
  WlxCreateUserDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CHANGE_PASSWORD_NOTIFY_EX */
  WlxChangePasswordNotifyEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_CLOSE_USER_DESKTOP */
  WlxCloseUserDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_SET_OPTION */
  WlxSetOption: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_GET_OPTION */
  WlxGetOption: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_WIN31_MIGRATE */
  WlxWin31Migrate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_QUERY_CLIENT_CREDENTIALS */
  WlxQueryClientCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_QUERY_IC_CREDENTIALS */
  WlxQueryInetConnectorCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_DISCONNECT */
  WlxDisconnect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_QUERY_TERMINAL_SERVICES_DATA */
  WlxQueryTerminalServicesData: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_QUERY_CONSOLESWITCH_CREDENTIALS */
  WlxQueryConsoleSwitchCredentials: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PWLX_QUERY_TS_LOGON_CREDENTIALS */
  WlxQueryTsLogonCredentials: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWLX_DISPATCH_VERSION_1_4 = 216;

export function allocWLX_DISPATCH_VERSION_1_4(data?: Partial<WLX_DISPATCH_VERSION_1_4>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_DISPATCH_VERSION_1_4);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.WlxUseCtrlAltDel !== undefined) view.setBigUint64(0, data.WlxUseCtrlAltDel === null ? 0n : BigInt(util.toPointer(data.WlxUseCtrlAltDel)), true);
  // 0x08: pointer
  if (data?.WlxSetContextPointer !== undefined) view.setBigUint64(8, data.WlxSetContextPointer === null ? 0n : BigInt(util.toPointer(data.WlxSetContextPointer)), true);
  // 0x10: pointer
  if (data?.WlxSasNotify !== undefined) view.setBigUint64(16, data.WlxSasNotify === null ? 0n : BigInt(util.toPointer(data.WlxSasNotify)), true);
  // 0x18: pointer
  if (data?.WlxSetTimeout !== undefined) view.setBigUint64(24, data.WlxSetTimeout === null ? 0n : BigInt(util.toPointer(data.WlxSetTimeout)), true);
  // 0x20: pointer
  if (data?.WlxAssignShellProtection !== undefined) view.setBigUint64(32, data.WlxAssignShellProtection === null ? 0n : BigInt(util.toPointer(data.WlxAssignShellProtection)), true);
  // 0x28: pointer
  if (data?.WlxMessageBox !== undefined) view.setBigUint64(40, data.WlxMessageBox === null ? 0n : BigInt(util.toPointer(data.WlxMessageBox)), true);
  // 0x30: pointer
  if (data?.WlxDialogBox !== undefined) view.setBigUint64(48, data.WlxDialogBox === null ? 0n : BigInt(util.toPointer(data.WlxDialogBox)), true);
  // 0x38: pointer
  if (data?.WlxDialogBoxParam !== undefined) view.setBigUint64(56, data.WlxDialogBoxParam === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxParam)), true);
  // 0x40: pointer
  if (data?.WlxDialogBoxIndirect !== undefined) view.setBigUint64(64, data.WlxDialogBoxIndirect === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxIndirect)), true);
  // 0x48: pointer
  if (data?.WlxDialogBoxIndirectParam !== undefined) view.setBigUint64(72, data.WlxDialogBoxIndirectParam === null ? 0n : BigInt(util.toPointer(data.WlxDialogBoxIndirectParam)), true);
  // 0x50: pointer
  if (data?.WlxSwitchDesktopToUser !== undefined) view.setBigUint64(80, data.WlxSwitchDesktopToUser === null ? 0n : BigInt(util.toPointer(data.WlxSwitchDesktopToUser)), true);
  // 0x58: pointer
  if (data?.WlxSwitchDesktopToWinlogon !== undefined) view.setBigUint64(88, data.WlxSwitchDesktopToWinlogon === null ? 0n : BigInt(util.toPointer(data.WlxSwitchDesktopToWinlogon)), true);
  // 0x60: pointer
  if (data?.WlxChangePasswordNotify !== undefined) view.setBigUint64(96, data.WlxChangePasswordNotify === null ? 0n : BigInt(util.toPointer(data.WlxChangePasswordNotify)), true);
  // 0x68: pointer
  if (data?.WlxGetSourceDesktop !== undefined) view.setBigUint64(104, data.WlxGetSourceDesktop === null ? 0n : BigInt(util.toPointer(data.WlxGetSourceDesktop)), true);
  // 0x70: pointer
  if (data?.WlxSetReturnDesktop !== undefined) view.setBigUint64(112, data.WlxSetReturnDesktop === null ? 0n : BigInt(util.toPointer(data.WlxSetReturnDesktop)), true);
  // 0x78: pointer
  if (data?.WlxCreateUserDesktop !== undefined) view.setBigUint64(120, data.WlxCreateUserDesktop === null ? 0n : BigInt(util.toPointer(data.WlxCreateUserDesktop)), true);
  // 0x80: pointer
  if (data?.WlxChangePasswordNotifyEx !== undefined) view.setBigUint64(128, data.WlxChangePasswordNotifyEx === null ? 0n : BigInt(util.toPointer(data.WlxChangePasswordNotifyEx)), true);
  // 0x88: pointer
  if (data?.WlxCloseUserDesktop !== undefined) view.setBigUint64(136, data.WlxCloseUserDesktop === null ? 0n : BigInt(util.toPointer(data.WlxCloseUserDesktop)), true);
  // 0x90: pointer
  if (data?.WlxSetOption !== undefined) view.setBigUint64(144, data.WlxSetOption === null ? 0n : BigInt(util.toPointer(data.WlxSetOption)), true);
  // 0x98: pointer
  if (data?.WlxGetOption !== undefined) view.setBigUint64(152, data.WlxGetOption === null ? 0n : BigInt(util.toPointer(data.WlxGetOption)), true);
  // 0xa0: pointer
  if (data?.WlxWin31Migrate !== undefined) view.setBigUint64(160, data.WlxWin31Migrate === null ? 0n : BigInt(util.toPointer(data.WlxWin31Migrate)), true);
  // 0xa8: pointer
  if (data?.WlxQueryClientCredentials !== undefined) view.setBigUint64(168, data.WlxQueryClientCredentials === null ? 0n : BigInt(util.toPointer(data.WlxQueryClientCredentials)), true);
  // 0xb0: pointer
  if (data?.WlxQueryInetConnectorCredentials !== undefined) view.setBigUint64(176, data.WlxQueryInetConnectorCredentials === null ? 0n : BigInt(util.toPointer(data.WlxQueryInetConnectorCredentials)), true);
  // 0xb8: pointer
  if (data?.WlxDisconnect !== undefined) view.setBigUint64(184, data.WlxDisconnect === null ? 0n : BigInt(util.toPointer(data.WlxDisconnect)), true);
  // 0xc0: pointer
  if (data?.WlxQueryTerminalServicesData !== undefined) view.setBigUint64(192, data.WlxQueryTerminalServicesData === null ? 0n : BigInt(util.toPointer(data.WlxQueryTerminalServicesData)), true);
  // 0xc8: pointer
  if (data?.WlxQueryConsoleSwitchCredentials !== undefined) view.setBigUint64(200, data.WlxQueryConsoleSwitchCredentials === null ? 0n : BigInt(util.toPointer(data.WlxQueryConsoleSwitchCredentials)), true);
  // 0xd0: pointer
  if (data?.WlxQueryTsLogonCredentials !== undefined) view.setBigUint64(208, data.WlxQueryTsLogonCredentials === null ? 0n : BigInt(util.toPointer(data.WlxQueryTsLogonCredentials)), true);
  return buf;
}

export class WLX_DISPATCH_VERSION_1_4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get WlxUseCtrlAltDel(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get WlxSetContextPointer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get WlxSasNotify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get WlxSetTimeout(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get WlxAssignShellProtection(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get WlxMessageBox(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get WlxDialogBox(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get WlxDialogBoxParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get WlxDialogBoxIndirect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get WlxDialogBoxIndirectParam(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get WlxSwitchDesktopToUser(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get WlxSwitchDesktopToWinlogon(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get WlxChangePasswordNotify(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get WlxGetSourceDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get WlxSetReturnDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get WlxCreateUserDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get WlxChangePasswordNotifyEx(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: pointer
  get WlxCloseUserDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x90: pointer
  get WlxSetOption(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: pointer
  get WlxGetOption(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: pointer
  get WlxWin31Migrate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(160, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa8: pointer
  get WlxQueryClientCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(168, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb0: pointer
  get WlxQueryInetConnectorCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(176, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xb8: pointer
  get WlxDisconnect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(184, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc0: pointer
  get WlxQueryTerminalServicesData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(192, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xc8: pointer
  get WlxQueryConsoleSwitchCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(200, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xd0: pointer
  get WlxQueryTsLogonCredentials(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(208, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set WlxUseCtrlAltDel(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set WlxSetContextPointer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set WlxSasNotify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set WlxSetTimeout(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set WlxAssignShellProtection(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set WlxMessageBox(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set WlxDialogBox(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set WlxDialogBoxParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set WlxDialogBoxIndirect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set WlxDialogBoxIndirectParam(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set WlxSwitchDesktopToUser(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set WlxSwitchDesktopToWinlogon(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, BigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set WlxChangePasswordNotify(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set WlxGetSourceDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set WlxSetReturnDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, BigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set WlxCreateUserDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set WlxChangePasswordNotifyEx(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, BigInt(util.toPointer(value)), true);
  }

  // 0x88: pointer
  set WlxCloseUserDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, BigInt(util.toPointer(value)), true);
  }

  // 0x90: pointer
  set WlxSetOption(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, BigInt(util.toPointer(value)), true);
  }

  // 0x98: pointer
  set WlxGetOption(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, BigInt(util.toPointer(value)), true);
  }

  // 0xa0: pointer
  set WlxWin31Migrate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(160, BigInt(util.toPointer(value)), true);
  }

  // 0xa8: pointer
  set WlxQueryClientCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(168, BigInt(util.toPointer(value)), true);
  }

  // 0xb0: pointer
  set WlxQueryInetConnectorCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(176, BigInt(util.toPointer(value)), true);
  }

  // 0xb8: pointer
  set WlxDisconnect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(184, BigInt(util.toPointer(value)), true);
  }

  // 0xc0: pointer
  set WlxQueryTerminalServicesData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(192, BigInt(util.toPointer(value)), true);
  }

  // 0xc8: pointer
  set WlxQueryConsoleSwitchCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(200, BigInt(util.toPointer(value)), true);
  }

  // 0xd0: pointer
  set WlxQueryTsLogonCredentials(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(208, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.WinWlx.WLX_NOTIFICATION_INFO (size: 56)
 */
export interface WLX_NOTIFICATION_INFO {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  UserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Domain: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  WindowStation: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HANDLE */
  hToken: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.StationsAndDesktops.HDESK */
  hDesktop: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.WinWlx.PFNMSGECALLBACK */
  pStatusCallback: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWLX_NOTIFICATION_INFO = 56;

export function allocWLX_NOTIFICATION_INFO(data?: Partial<WLX_NOTIFICATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWLX_NOTIFICATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.UserName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.Domain !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Domain);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.WindowStation !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.WindowStation);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.hToken !== undefined) view.setBigUint64(32, data.hToken === null ? 0n : BigInt(util.toPointer(data.hToken)), true);
  // 0x28: pointer
  if (data?.hDesktop !== undefined) view.setBigUint64(40, data.hDesktop === null ? 0n : BigInt(util.toPointer(data.hDesktop)), true);
  // 0x30: pointer
  if (data?.pStatusCallback !== undefined) view.setBigUint64(48, data.pStatusCallback === null ? 0n : BigInt(util.toPointer(data.pStatusCallback)), true);
  return buf;
}

export class WLX_NOTIFICATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get Domain(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get WindowStation(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get hToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get hDesktop(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get pStatusCallback(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set Domain(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set WindowStation(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: pointer
  set hToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set hDesktop(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set pStatusCallback(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.GENERIC_MAPPING (size: 16)
 */
export interface GENERIC_MAPPING {
  /** u32 */
  GenericRead: number;
  /** u32 */
  GenericWrite: number;
  /** u32 */
  GenericExecute: number;
  /** u32 */
  GenericAll: number;
}

export const sizeofGENERIC_MAPPING = 16;

export function allocGENERIC_MAPPING(data?: Partial<GENERIC_MAPPING>): Uint8Array {
  const buf = new Uint8Array(sizeofGENERIC_MAPPING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.GenericRead !== undefined) view.setUint32(0, Number(data.GenericRead), true);
  // 0x04: u32
  if (data?.GenericWrite !== undefined) view.setUint32(4, Number(data.GenericWrite), true);
  // 0x08: u32
  if (data?.GenericExecute !== undefined) view.setUint32(8, Number(data.GenericExecute), true);
  // 0x0c: u32
  if (data?.GenericAll !== undefined) view.setUint32(12, Number(data.GenericAll), true);
  return buf;
}

export class GENERIC_MAPPINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get GenericRead(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get GenericWrite(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get GenericExecute(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get GenericAll(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set GenericRead(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set GenericWrite(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set GenericExecute(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set GenericAll(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.LUID_AND_ATTRIBUTES (size: 16)
 */
export interface LUID_AND_ATTRIBUTES {
  /** Windows.Win32.Foundation.LUID */
  Luid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.TOKEN_PRIVILEGES_ATTRIBUTES */
  Attributes: TOKEN_PRIVILEGES_ATTRIBUTES;
}

export const sizeofLUID_AND_ATTRIBUTES = 16;

export function allocLUID_AND_ATTRIBUTES(data?: Partial<LUID_AND_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID_AND_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Luid !== undefined) view.setBigUint64(0, data.Luid === null ? 0n : BigInt(util.toPointer(data.Luid)), true);
  // 0x08: u32
  if (data?.Attributes !== undefined) view.setUint32(8, Number(data.Attributes), true);
  // 0x0c: pad4
  return buf;
}

export class LUID_AND_ATTRIBUTESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Luid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Attributes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Luid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Attributes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type SID_IDENTIFIER_AUTHORITY = Deno.PointerValue | null;

/**
 * Windows.Win32.Security.SID (size: 24)
 */
export interface SID {
  /** u8 */
  Revision: number;
  /** u8 */
  SubAuthorityCount: number;
  /** Windows.Win32.Security.SID_IDENTIFIER_AUTHORITY */
  IdentifierAuthority: Uint8Array | Deno.PointerValue | null;
  /** array */
  SubAuthority: Deno.PointerValue | null;
}

export const sizeofSID = 24;

export function allocSID(data?: Partial<SID>): Uint8Array {
  const buf = new Uint8Array(sizeofSID);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Revision !== undefined) view.setUint8(0, Number(data.Revision));
  // 0x01: u8
  if (data?.SubAuthorityCount !== undefined) view.setUint8(1, Number(data.SubAuthorityCount));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.IdentifierAuthority !== undefined) view.setBigUint64(8, data.IdentifierAuthority === null ? 0n : BigInt(util.toPointer(data.IdentifierAuthority)), true);
  // 0x10: pointer
  if (data?.SubAuthority !== undefined) view.setBigUint64(16, data.SubAuthority === null ? 0n : BigInt(util.toPointer(data.SubAuthority)), true);
  return buf;
}

export class SIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Revision(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get SubAuthorityCount(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get IdentifierAuthority(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get SubAuthority(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set Revision(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set SubAuthorityCount(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set IdentifierAuthority(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set SubAuthority(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.SE_SID (size: 16)
 */
export interface SE_SID {
  /** Windows.Win32.Security.SID */
  Sid: Uint8Array | Deno.PointerValue | null;
  /** array */
  Buffer: Deno.PointerValue | null;
}

export const sizeofSE_SID = 16;

export function allocSE_SID(data?: Partial<SE_SID>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_SID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Sid !== undefined) view.setBigUint64(0, data.Sid === null ? 0n : BigInt(util.toPointer(data.Sid)), true);
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

export class SE_SIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Sid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Sid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.SID_AND_ATTRIBUTES_HASH (size: 24)
 */
export interface SID_AND_ATTRIBUTES_HASH {
  /** u32 */
  SidCount: number;
  /** ptr */
  SidAttr: Deno.PointerValue | Uint8Array | null;
  /** array */
  Hash: Deno.PointerValue | null;
}

export const sizeofSID_AND_ATTRIBUTES_HASH = 24;

export function allocSID_AND_ATTRIBUTES_HASH(data?: Partial<SID_AND_ATTRIBUTES_HASH>): Uint8Array {
  const buf = new Uint8Array(sizeofSID_AND_ATTRIBUTES_HASH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SidCount !== undefined) view.setUint32(0, Number(data.SidCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SidAttr !== undefined) view.setBigUint64(8, data.SidAttr === null ? 0n : BigInt(util.toPointer(data.SidAttr)), true);
  // 0x10: pointer
  if (data?.Hash !== undefined) view.setBigUint64(16, data.Hash === null ? 0n : BigInt(util.toPointer(data.Hash)), true);
  return buf;
}

export class SID_AND_ATTRIBUTES_HASHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SidCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SidAttr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Hash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SidCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SidAttr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Hash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ACL (size: 8)
 */
export interface ACL {
  /** u8 */
  AclRevision: number;
  /** u8 */
  Sbz1: number;
  /** u16 */
  AclSize: number;
  /** u16 */
  AceCount: number;
  /** u16 */
  Sbz2: number;
}

export const sizeofACL = 8;

export function allocACL(data?: Partial<ACL>): Uint8Array {
  const buf = new Uint8Array(sizeofACL);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.AclRevision !== undefined) view.setUint8(0, Number(data.AclRevision));
  // 0x01: u8
  if (data?.Sbz1 !== undefined) view.setUint8(1, Number(data.Sbz1));
  // 0x02: u16
  if (data?.AclSize !== undefined) view.setUint16(2, Number(data.AclSize), true);
  // 0x04: u16
  if (data?.AceCount !== undefined) view.setUint16(4, Number(data.AceCount), true);
  // 0x06: u16
  if (data?.Sbz2 !== undefined) view.setUint16(6, Number(data.Sbz2), true);
  return buf;
}

export class ACLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get AclRevision(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Sbz1(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get AclSize(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get AceCount(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Sbz2(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u8
  set AclRevision(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Sbz1(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set AclSize(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set AceCount(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Sbz2(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.Security.ACE_HEADER (size: 8)
 */
export interface ACE_HEADER {
  /** u8 */
  AceType: number;
  /** u8 */
  AceFlags: number;
  /** u16 */
  AceSize: number;
}

export const sizeofACE_HEADER = 8;

export function allocACE_HEADER(data?: Partial<ACE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofACE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.AceType !== undefined) view.setUint8(0, Number(data.AceType));
  // 0x01: u8
  if (data?.AceFlags !== undefined) view.setUint8(1, Number(data.AceFlags));
  // 0x02: u16
  if (data?.AceSize !== undefined) view.setUint16(2, Number(data.AceSize), true);
  // 0x04: pad4
  return buf;
}

export class ACE_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get AceType(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get AceFlags(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get AceSize(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u8
  set AceType(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set AceFlags(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set AceSize(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.ACCESS_ALLOWED_ACE (size: 16)
 */
export interface ACCESS_ALLOWED_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  SidStart: number;
}

export const sizeofACCESS_ALLOWED_ACE = 16;

export function allocACCESS_ALLOWED_ACE(data?: Partial<ACCESS_ALLOWED_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESS_ALLOWED_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.SidStart !== undefined) view.setUint32(12, Number(data.SidStart), true);
  return buf;
}

export class ACCESS_ALLOWED_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SidStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SidStart(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.ACCESS_DENIED_ACE (size: 16)
 */
export interface ACCESS_DENIED_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  SidStart: number;
}

export const sizeofACCESS_DENIED_ACE = 16;

export function allocACCESS_DENIED_ACE(data?: Partial<ACCESS_DENIED_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESS_DENIED_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.SidStart !== undefined) view.setUint32(12, Number(data.SidStart), true);
  return buf;
}

export class ACCESS_DENIED_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SidStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SidStart(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.SYSTEM_AUDIT_ACE (size: 16)
 */
export interface SYSTEM_AUDIT_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  SidStart: number;
}

export const sizeofSYSTEM_AUDIT_ACE = 16;

export function allocSYSTEM_AUDIT_ACE(data?: Partial<SYSTEM_AUDIT_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_AUDIT_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.SidStart !== undefined) view.setUint32(12, Number(data.SidStart), true);
  return buf;
}

export class SYSTEM_AUDIT_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SidStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SidStart(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.SYSTEM_ALARM_ACE (size: 16)
 */
export interface SYSTEM_ALARM_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  SidStart: number;
}

export const sizeofSYSTEM_ALARM_ACE = 16;

export function allocSYSTEM_ALARM_ACE(data?: Partial<SYSTEM_ALARM_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_ALARM_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.SidStart !== undefined) view.setUint32(12, Number(data.SidStart), true);
  return buf;
}

export class SYSTEM_ALARM_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SidStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SidStart(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.SYSTEM_RESOURCE_ATTRIBUTE_ACE (size: 16)
 */
export interface SYSTEM_RESOURCE_ATTRIBUTE_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  SidStart: number;
}

export const sizeofSYSTEM_RESOURCE_ATTRIBUTE_ACE = 16;

export function allocSYSTEM_RESOURCE_ATTRIBUTE_ACE(data?: Partial<SYSTEM_RESOURCE_ATTRIBUTE_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_RESOURCE_ATTRIBUTE_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.SidStart !== undefined) view.setUint32(12, Number(data.SidStart), true);
  return buf;
}

export class SYSTEM_RESOURCE_ATTRIBUTE_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SidStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SidStart(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.SYSTEM_SCOPED_POLICY_ID_ACE (size: 16)
 */
export interface SYSTEM_SCOPED_POLICY_ID_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  SidStart: number;
}

export const sizeofSYSTEM_SCOPED_POLICY_ID_ACE = 16;

export function allocSYSTEM_SCOPED_POLICY_ID_ACE(data?: Partial<SYSTEM_SCOPED_POLICY_ID_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_SCOPED_POLICY_ID_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.SidStart !== undefined) view.setUint32(12, Number(data.SidStart), true);
  return buf;
}

export class SYSTEM_SCOPED_POLICY_ID_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SidStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SidStart(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.SYSTEM_MANDATORY_LABEL_ACE (size: 16)
 */
export interface SYSTEM_MANDATORY_LABEL_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  SidStart: number;
}

export const sizeofSYSTEM_MANDATORY_LABEL_ACE = 16;

export function allocSYSTEM_MANDATORY_LABEL_ACE(data?: Partial<SYSTEM_MANDATORY_LABEL_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_MANDATORY_LABEL_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.SidStart !== undefined) view.setUint32(12, Number(data.SidStart), true);
  return buf;
}

export class SYSTEM_MANDATORY_LABEL_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SidStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SidStart(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.SYSTEM_PROCESS_TRUST_LABEL_ACE (size: 16)
 */
export interface SYSTEM_PROCESS_TRUST_LABEL_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  SidStart: number;
}

export const sizeofSYSTEM_PROCESS_TRUST_LABEL_ACE = 16;

export function allocSYSTEM_PROCESS_TRUST_LABEL_ACE(data?: Partial<SYSTEM_PROCESS_TRUST_LABEL_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_PROCESS_TRUST_LABEL_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.SidStart !== undefined) view.setUint32(12, Number(data.SidStart), true);
  return buf;
}

export class SYSTEM_PROCESS_TRUST_LABEL_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SidStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SidStart(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.SYSTEM_ACCESS_FILTER_ACE (size: 16)
 */
export interface SYSTEM_ACCESS_FILTER_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  SidStart: number;
}

export const sizeofSYSTEM_ACCESS_FILTER_ACE = 16;

export function allocSYSTEM_ACCESS_FILTER_ACE(data?: Partial<SYSTEM_ACCESS_FILTER_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_ACCESS_FILTER_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.SidStart !== undefined) view.setUint32(12, Number(data.SidStart), true);
  return buf;
}

export class SYSTEM_ACCESS_FILTER_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SidStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SidStart(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.ACCESS_ALLOWED_OBJECT_ACE (size: 40)
 */
export interface ACCESS_ALLOWED_OBJECT_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE_FLAGS */
  Flags: SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
  /** System.Guid */
  ObjectType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  InheritedObjectType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SidStart: number;
}

export const sizeofACCESS_ALLOWED_OBJECT_ACE = 40;

export function allocACCESS_ALLOWED_OBJECT_ACE(data?: Partial<ACCESS_ALLOWED_OBJECT_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESS_ALLOWED_OBJECT_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: pointer
  if (data?.ObjectType !== undefined) view.setBigUint64(16, data.ObjectType === null ? 0n : BigInt(util.toPointer(data.ObjectType)), true);
  // 0x18: pointer
  if (data?.InheritedObjectType !== undefined) view.setBigUint64(24, data.InheritedObjectType === null ? 0n : BigInt(util.toPointer(data.InheritedObjectType)), true);
  // 0x20: u32
  if (data?.SidStart !== undefined) view.setUint32(32, Number(data.SidStart), true);
  // 0x24: pad4
  return buf;
}

export class ACCESS_ALLOWED_OBJECT_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get InheritedObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get SidStart(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set InheritedObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set SidStart(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.ACCESS_DENIED_OBJECT_ACE (size: 40)
 */
export interface ACCESS_DENIED_OBJECT_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE_FLAGS */
  Flags: SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
  /** System.Guid */
  ObjectType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  InheritedObjectType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SidStart: number;
}

export const sizeofACCESS_DENIED_OBJECT_ACE = 40;

export function allocACCESS_DENIED_OBJECT_ACE(data?: Partial<ACCESS_DENIED_OBJECT_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESS_DENIED_OBJECT_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: pointer
  if (data?.ObjectType !== undefined) view.setBigUint64(16, data.ObjectType === null ? 0n : BigInt(util.toPointer(data.ObjectType)), true);
  // 0x18: pointer
  if (data?.InheritedObjectType !== undefined) view.setBigUint64(24, data.InheritedObjectType === null ? 0n : BigInt(util.toPointer(data.InheritedObjectType)), true);
  // 0x20: u32
  if (data?.SidStart !== undefined) view.setUint32(32, Number(data.SidStart), true);
  // 0x24: pad4
  return buf;
}

export class ACCESS_DENIED_OBJECT_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get InheritedObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get SidStart(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set InheritedObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set SidStart(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE (size: 40)
 */
export interface SYSTEM_AUDIT_OBJECT_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE_FLAGS */
  Flags: SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
  /** System.Guid */
  ObjectType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  InheritedObjectType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SidStart: number;
}

export const sizeofSYSTEM_AUDIT_OBJECT_ACE = 40;

export function allocSYSTEM_AUDIT_OBJECT_ACE(data?: Partial<SYSTEM_AUDIT_OBJECT_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_AUDIT_OBJECT_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: pointer
  if (data?.ObjectType !== undefined) view.setBigUint64(16, data.ObjectType === null ? 0n : BigInt(util.toPointer(data.ObjectType)), true);
  // 0x18: pointer
  if (data?.InheritedObjectType !== undefined) view.setBigUint64(24, data.InheritedObjectType === null ? 0n : BigInt(util.toPointer(data.InheritedObjectType)), true);
  // 0x20: u32
  if (data?.SidStart !== undefined) view.setUint32(32, Number(data.SidStart), true);
  // 0x24: pad4
  return buf;
}

export class SYSTEM_AUDIT_OBJECT_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get InheritedObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get SidStart(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set InheritedObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set SidStart(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.SYSTEM_ALARM_OBJECT_ACE (size: 40)
 */
export interface SYSTEM_ALARM_OBJECT_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  Flags: number;
  /** System.Guid */
  ObjectType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  InheritedObjectType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SidStart: number;
}

export const sizeofSYSTEM_ALARM_OBJECT_ACE = 40;

export function allocSYSTEM_ALARM_OBJECT_ACE(data?: Partial<SYSTEM_ALARM_OBJECT_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_ALARM_OBJECT_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: pointer
  if (data?.ObjectType !== undefined) view.setBigUint64(16, data.ObjectType === null ? 0n : BigInt(util.toPointer(data.ObjectType)), true);
  // 0x18: pointer
  if (data?.InheritedObjectType !== undefined) view.setBigUint64(24, data.InheritedObjectType === null ? 0n : BigInt(util.toPointer(data.InheritedObjectType)), true);
  // 0x20: u32
  if (data?.SidStart !== undefined) view.setUint32(32, Number(data.SidStart), true);
  // 0x24: pad4
  return buf;
}

export class SYSTEM_ALARM_OBJECT_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get InheritedObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get SidStart(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set InheritedObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set SidStart(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.ACCESS_ALLOWED_CALLBACK_ACE (size: 16)
 */
export interface ACCESS_ALLOWED_CALLBACK_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  SidStart: number;
}

export const sizeofACCESS_ALLOWED_CALLBACK_ACE = 16;

export function allocACCESS_ALLOWED_CALLBACK_ACE(data?: Partial<ACCESS_ALLOWED_CALLBACK_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESS_ALLOWED_CALLBACK_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.SidStart !== undefined) view.setUint32(12, Number(data.SidStart), true);
  return buf;
}

export class ACCESS_ALLOWED_CALLBACK_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SidStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SidStart(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.ACCESS_DENIED_CALLBACK_ACE (size: 16)
 */
export interface ACCESS_DENIED_CALLBACK_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  SidStart: number;
}

export const sizeofACCESS_DENIED_CALLBACK_ACE = 16;

export function allocACCESS_DENIED_CALLBACK_ACE(data?: Partial<ACCESS_DENIED_CALLBACK_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESS_DENIED_CALLBACK_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.SidStart !== undefined) view.setUint32(12, Number(data.SidStart), true);
  return buf;
}

export class ACCESS_DENIED_CALLBACK_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SidStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SidStart(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.SYSTEM_AUDIT_CALLBACK_ACE (size: 16)
 */
export interface SYSTEM_AUDIT_CALLBACK_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  SidStart: number;
}

export const sizeofSYSTEM_AUDIT_CALLBACK_ACE = 16;

export function allocSYSTEM_AUDIT_CALLBACK_ACE(data?: Partial<SYSTEM_AUDIT_CALLBACK_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_AUDIT_CALLBACK_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.SidStart !== undefined) view.setUint32(12, Number(data.SidStart), true);
  return buf;
}

export class SYSTEM_AUDIT_CALLBACK_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SidStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SidStart(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.SYSTEM_ALARM_CALLBACK_ACE (size: 16)
 */
export interface SYSTEM_ALARM_CALLBACK_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** u32 */
  SidStart: number;
}

export const sizeofSYSTEM_ALARM_CALLBACK_ACE = 16;

export function allocSYSTEM_ALARM_CALLBACK_ACE(data?: Partial<SYSTEM_ALARM_CALLBACK_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_ALARM_CALLBACK_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.SidStart !== undefined) view.setUint32(12, Number(data.SidStart), true);
  return buf;
}

export class SYSTEM_ALARM_CALLBACK_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get SidStart(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set SidStart(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Security.ACCESS_ALLOWED_CALLBACK_OBJECT_ACE (size: 40)
 */
export interface ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE_FLAGS */
  Flags: SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
  /** System.Guid */
  ObjectType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  InheritedObjectType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SidStart: number;
}

export const sizeofACCESS_ALLOWED_CALLBACK_OBJECT_ACE = 40;

export function allocACCESS_ALLOWED_CALLBACK_OBJECT_ACE(data?: Partial<ACCESS_ALLOWED_CALLBACK_OBJECT_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESS_ALLOWED_CALLBACK_OBJECT_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: pointer
  if (data?.ObjectType !== undefined) view.setBigUint64(16, data.ObjectType === null ? 0n : BigInt(util.toPointer(data.ObjectType)), true);
  // 0x18: pointer
  if (data?.InheritedObjectType !== undefined) view.setBigUint64(24, data.InheritedObjectType === null ? 0n : BigInt(util.toPointer(data.InheritedObjectType)), true);
  // 0x20: u32
  if (data?.SidStart !== undefined) view.setUint32(32, Number(data.SidStart), true);
  // 0x24: pad4
  return buf;
}

export class ACCESS_ALLOWED_CALLBACK_OBJECT_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get InheritedObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get SidStart(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set InheritedObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set SidStart(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.ACCESS_DENIED_CALLBACK_OBJECT_ACE (size: 40)
 */
export interface ACCESS_DENIED_CALLBACK_OBJECT_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE_FLAGS */
  Flags: SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
  /** System.Guid */
  ObjectType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  InheritedObjectType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SidStart: number;
}

export const sizeofACCESS_DENIED_CALLBACK_OBJECT_ACE = 40;

export function allocACCESS_DENIED_CALLBACK_OBJECT_ACE(data?: Partial<ACCESS_DENIED_CALLBACK_OBJECT_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESS_DENIED_CALLBACK_OBJECT_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: pointer
  if (data?.ObjectType !== undefined) view.setBigUint64(16, data.ObjectType === null ? 0n : BigInt(util.toPointer(data.ObjectType)), true);
  // 0x18: pointer
  if (data?.InheritedObjectType !== undefined) view.setBigUint64(24, data.InheritedObjectType === null ? 0n : BigInt(util.toPointer(data.InheritedObjectType)), true);
  // 0x20: u32
  if (data?.SidStart !== undefined) view.setUint32(32, Number(data.SidStart), true);
  // 0x24: pad4
  return buf;
}

export class ACCESS_DENIED_CALLBACK_OBJECT_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get InheritedObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get SidStart(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set InheritedObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set SidStart(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.SYSTEM_AUDIT_CALLBACK_OBJECT_ACE (size: 40)
 */
export interface SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE_FLAGS */
  Flags: SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
  /** System.Guid */
  ObjectType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  InheritedObjectType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SidStart: number;
}

export const sizeofSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = 40;

export function allocSYSTEM_AUDIT_CALLBACK_OBJECT_ACE(data?: Partial<SYSTEM_AUDIT_CALLBACK_OBJECT_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_AUDIT_CALLBACK_OBJECT_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: pointer
  if (data?.ObjectType !== undefined) view.setBigUint64(16, data.ObjectType === null ? 0n : BigInt(util.toPointer(data.ObjectType)), true);
  // 0x18: pointer
  if (data?.InheritedObjectType !== undefined) view.setBigUint64(24, data.InheritedObjectType === null ? 0n : BigInt(util.toPointer(data.InheritedObjectType)), true);
  // 0x20: u32
  if (data?.SidStart !== undefined) view.setUint32(32, Number(data.SidStart), true);
  // 0x24: pad4
  return buf;
}

export class SYSTEM_AUDIT_CALLBACK_OBJECT_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get InheritedObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get SidStart(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set InheritedObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set SidStart(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.SYSTEM_ALARM_CALLBACK_OBJECT_ACE (size: 40)
 */
export interface SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
  /** Windows.Win32.Security.ACE_HEADER */
  Header: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Mask: number;
  /** Windows.Win32.Security.SYSTEM_AUDIT_OBJECT_ACE_FLAGS */
  Flags: SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
  /** System.Guid */
  ObjectType: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  InheritedObjectType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SidStart: number;
}

export const sizeofSYSTEM_ALARM_CALLBACK_OBJECT_ACE = 40;

export function allocSYSTEM_ALARM_CALLBACK_OBJECT_ACE(data?: Partial<SYSTEM_ALARM_CALLBACK_OBJECT_ACE>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEM_ALARM_CALLBACK_OBJECT_ACE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Header !== undefined) view.setBigUint64(0, data.Header === null ? 0n : BigInt(util.toPointer(data.Header)), true);
  // 0x08: u32
  if (data?.Mask !== undefined) view.setUint32(8, Number(data.Mask), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: pointer
  if (data?.ObjectType !== undefined) view.setBigUint64(16, data.ObjectType === null ? 0n : BigInt(util.toPointer(data.ObjectType)), true);
  // 0x18: pointer
  if (data?.InheritedObjectType !== undefined) view.setBigUint64(24, data.InheritedObjectType === null ? 0n : BigInt(util.toPointer(data.InheritedObjectType)), true);
  // 0x20: u32
  if (data?.SidStart !== undefined) view.setUint32(32, Number(data.SidStart), true);
  // 0x24: pad4
  return buf;
}

export class SYSTEM_ALARM_CALLBACK_OBJECT_ACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Header(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Mask(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get InheritedObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get SidStart(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set Header(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Mask(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set InheritedObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set SidStart(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Security.ACL_REVISION_INFORMATION (size: 8)
 */
export interface ACL_REVISION_INFORMATION {
  /** u32 */
  AclRevision: number;
}

export const sizeofACL_REVISION_INFORMATION = 8;

export function allocACL_REVISION_INFORMATION(data?: Partial<ACL_REVISION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofACL_REVISION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AclRevision !== undefined) view.setUint32(0, Number(data.AclRevision), true);
  // 0x04: pad4
  return buf;
}

export class ACL_REVISION_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AclRevision(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set AclRevision(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.ACL_SIZE_INFORMATION (size: 16)
 */
export interface ACL_SIZE_INFORMATION {
  /** u32 */
  AceCount: number;
  /** u32 */
  AclBytesInUse: number;
  /** u32 */
  AclBytesFree: number;
}

export const sizeofACL_SIZE_INFORMATION = 16;

export function allocACL_SIZE_INFORMATION(data?: Partial<ACL_SIZE_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofACL_SIZE_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AceCount !== undefined) view.setUint32(0, Number(data.AceCount), true);
  // 0x04: u32
  if (data?.AclBytesInUse !== undefined) view.setUint32(4, Number(data.AclBytesInUse), true);
  // 0x08: u32
  if (data?.AclBytesFree !== undefined) view.setUint32(8, Number(data.AclBytesFree), true);
  // 0x0c: pad4
  return buf;
}

export class ACL_SIZE_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AceCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AclBytesInUse(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get AclBytesFree(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set AceCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AclBytesInUse(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set AclBytesFree(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.SECURITY_DESCRIPTOR (size: 40)
 */
export interface SECURITY_DESCRIPTOR {
  /** u8 */
  Revision: number;
  /** u8 */
  Sbz1: number;
  /** u16 */
  Control: number;
  /** Windows.Win32.Foundation.PSID */
  Owner: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSID */
  Group: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Sacl: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Dacl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSECURITY_DESCRIPTOR = 40;

export function allocSECURITY_DESCRIPTOR(data?: Partial<SECURITY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Revision !== undefined) view.setUint8(0, Number(data.Revision));
  // 0x01: u8
  if (data?.Sbz1 !== undefined) view.setUint8(1, Number(data.Sbz1));
  // 0x02: u16
  if (data?.Control !== undefined) view.setUint16(2, Number(data.Control), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Owner !== undefined) view.setBigUint64(8, data.Owner === null ? 0n : BigInt(util.toPointer(data.Owner)), true);
  // 0x10: pointer
  if (data?.Group !== undefined) view.setBigUint64(16, data.Group === null ? 0n : BigInt(util.toPointer(data.Group)), true);
  // 0x18: pointer
  if (data?.Sacl !== undefined) view.setBigUint64(24, data.Sacl === null ? 0n : BigInt(util.toPointer(data.Sacl)), true);
  // 0x20: pointer
  if (data?.Dacl !== undefined) view.setBigUint64(32, data.Dacl === null ? 0n : BigInt(util.toPointer(data.Dacl)), true);
  return buf;
}

export class SECURITY_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get Revision(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get Sbz1(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u16
  get Control(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Owner(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Group(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get Sacl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Dacl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u8
  set Revision(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set Sbz1(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u16
  set Control(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Owner(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Group(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set Sacl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Dacl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.OBJECT_TYPE_LIST (size: 16)
 */
export interface OBJECT_TYPE_LIST {
  /** u16 */
  Level: number;
  /** u16 */
  Sbz: number;
  /** ptr */
  ObjectType: Deno.PointerValue | Uint8Array | null;
}

export const sizeofOBJECT_TYPE_LIST = 16;

export function allocOBJECT_TYPE_LIST(data?: Partial<OBJECT_TYPE_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofOBJECT_TYPE_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Level !== undefined) view.setUint16(0, Number(data.Level), true);
  // 0x02: u16
  if (data?.Sbz !== undefined) view.setUint16(2, Number(data.Sbz), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ObjectType !== undefined) view.setBigUint64(8, data.ObjectType === null ? 0n : BigInt(util.toPointer(data.ObjectType)), true);
  return buf;
}

export class OBJECT_TYPE_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Level(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Sbz(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ObjectType(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Level(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Sbz(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ObjectType(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.PRIVILEGE_SET (size: 16)
 */
export interface PRIVILEGE_SET {
  /** u32 */
  PrivilegeCount: number;
  /** u32 */
  Control: number;
  /** array */
  Privilege: Deno.PointerValue | null;
}

export const sizeofPRIVILEGE_SET = 16;

export function allocPRIVILEGE_SET(data?: Partial<PRIVILEGE_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofPRIVILEGE_SET);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PrivilegeCount !== undefined) view.setUint32(0, Number(data.PrivilegeCount), true);
  // 0x04: u32
  if (data?.Control !== undefined) view.setUint32(4, Number(data.Control), true);
  // 0x08: pointer
  if (data?.Privilege !== undefined) view.setBigUint64(8, data.Privilege === null ? 0n : BigInt(util.toPointer(data.Privilege)), true);
  return buf;
}

export class PRIVILEGE_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PrivilegeCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Control(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Privilege(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set PrivilegeCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Control(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Privilege(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.ACCESS_REASONS (size: 8)
 */
export interface ACCESS_REASONS {
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeofACCESS_REASONS = 8;

export function allocACCESS_REASONS(data?: Partial<ACCESS_REASONS>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESS_REASONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Data !== undefined) view.setBigUint64(0, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

export class ACCESS_REASONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.SE_SECURITY_DESCRIPTOR (size: 16)
 */
export interface SE_SECURITY_DESCRIPTOR {
  /** u32 */
  Size: number;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSE_SECURITY_DESCRIPTOR = 16;

export function allocSE_SECURITY_DESCRIPTOR(data?: Partial<SE_SECURITY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_SECURITY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.SecurityDescriptor !== undefined) view.setBigUint64(8, data.SecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.SecurityDescriptor)), true);
  return buf;
}

export class SE_SECURITY_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get SecurityDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set SecurityDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.SE_ACCESS_REQUEST (size: 56)
 */
export interface SE_ACCESS_REQUEST {
  /** u32 */
  Size: number;
  /** ptr */
  SeSecurityDescriptor: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  DesiredAccess: number;
  /** u32 */
  PreviouslyGrantedAccess: number;
  /** Windows.Win32.Foundation.PSID */
  PrincipalSelfSid: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  GenericMapping: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ObjectTypeListCount: number;
  /** ptr */
  ObjectTypeList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSE_ACCESS_REQUEST = 56;

export function allocSE_ACCESS_REQUEST(data?: Partial<SE_ACCESS_REQUEST>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ACCESS_REQUEST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SeSecurityDescriptor !== undefined) view.setBigUint64(8, data.SeSecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.SeSecurityDescriptor)), true);
  // 0x10: u32
  if (data?.DesiredAccess !== undefined) view.setUint32(16, Number(data.DesiredAccess), true);
  // 0x14: u32
  if (data?.PreviouslyGrantedAccess !== undefined) view.setUint32(20, Number(data.PreviouslyGrantedAccess), true);
  // 0x18: pointer
  if (data?.PrincipalSelfSid !== undefined) view.setBigUint64(24, data.PrincipalSelfSid === null ? 0n : BigInt(util.toPointer(data.PrincipalSelfSid)), true);
  // 0x20: pointer
  if (data?.GenericMapping !== undefined) view.setBigUint64(32, data.GenericMapping === null ? 0n : BigInt(util.toPointer(data.GenericMapping)), true);
  // 0x28: u32
  if (data?.ObjectTypeListCount !== undefined) view.setUint32(40, Number(data.ObjectTypeListCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ObjectTypeList !== undefined) view.setBigUint64(48, data.ObjectTypeList === null ? 0n : BigInt(util.toPointer(data.ObjectTypeList)), true);
  return buf;
}

export class SE_ACCESS_REQUESTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SeSecurityDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get DesiredAccess(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get PreviouslyGrantedAccess(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get PrincipalSelfSid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get GenericMapping(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get ObjectTypeListCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ObjectTypeList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SeSecurityDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set DesiredAccess(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set PreviouslyGrantedAccess(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set PrincipalSelfSid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set GenericMapping(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set ObjectTypeListCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ObjectTypeList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.SE_ACCESS_REPLY (size: 40)
 */
export interface SE_ACCESS_REPLY {
  /** u32 */
  Size: number;
  /** u32 */
  ResultListCount: number;
  /** ptr */
  GrantedAccess: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  AccessStatus: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  AccessReason: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Privileges: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSE_ACCESS_REPLY = 40;

export function allocSE_ACCESS_REPLY(data?: Partial<SE_ACCESS_REPLY>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_ACCESS_REPLY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.ResultListCount !== undefined) view.setUint32(4, Number(data.ResultListCount), true);
  // 0x08: pointer
  if (data?.GrantedAccess !== undefined) view.setBigUint64(8, data.GrantedAccess === null ? 0n : BigInt(util.toPointer(data.GrantedAccess)), true);
  // 0x10: pointer
  if (data?.AccessStatus !== undefined) view.setBigUint64(16, data.AccessStatus === null ? 0n : BigInt(util.toPointer(data.AccessStatus)), true);
  // 0x18: pointer
  if (data?.AccessReason !== undefined) view.setBigUint64(24, data.AccessReason === null ? 0n : BigInt(util.toPointer(data.AccessReason)), true);
  // 0x20: pointer
  if (data?.Privileges !== undefined) view.setBigUint64(32, data.Privileges === null ? 0n : BigInt(util.toPointer(data.Privileges)), true);
  return buf;
}

export class SE_ACCESS_REPLYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ResultListCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get GrantedAccess(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AccessStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get AccessReason(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Privileges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ResultListCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set GrantedAccess(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AccessStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set AccessReason(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set Privileges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_GROUPS (size: 16)
 */
export interface TOKEN_GROUPS {
  /** u32 */
  GroupCount: number;
  /** array */
  Groups: Deno.PointerValue | null;
}

export const sizeofTOKEN_GROUPS = 16;

export function allocTOKEN_GROUPS(data?: Partial<TOKEN_GROUPS>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_GROUPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.GroupCount !== undefined) view.setUint32(0, Number(data.GroupCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Groups !== undefined) view.setBigUint64(8, data.Groups === null ? 0n : BigInt(util.toPointer(data.Groups)), true);
  return buf;
}

export class TOKEN_GROUPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get GroupCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Groups(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set GroupCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Groups(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_PRIVILEGES (size: 16)
 */
export interface TOKEN_PRIVILEGES {
  /** u32 */
  PrivilegeCount: number;
  /** array */
  Privileges: Deno.PointerValue | null;
}

export const sizeofTOKEN_PRIVILEGES = 16;

export function allocTOKEN_PRIVILEGES(data?: Partial<TOKEN_PRIVILEGES>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_PRIVILEGES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PrivilegeCount !== undefined) view.setUint32(0, Number(data.PrivilegeCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Privileges !== undefined) view.setBigUint64(8, data.Privileges === null ? 0n : BigInt(util.toPointer(data.Privileges)), true);
  return buf;
}

export class TOKEN_PRIVILEGESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get PrivilegeCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Privileges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set PrivilegeCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Privileges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_GROUPS_AND_PRIVILEGES (size: 56)
 */
export interface TOKEN_GROUPS_AND_PRIVILEGES {
  /** u32 */
  SidCount: number;
  /** u32 */
  SidLength: number;
  /** ptr */
  Sids: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  RestrictedSidCount: number;
  /** u32 */
  RestrictedSidLength: number;
  /** ptr */
  RestrictedSids: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  PrivilegeCount: number;
  /** u32 */
  PrivilegeLength: number;
  /** ptr */
  Privileges: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.LUID */
  AuthenticationId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOKEN_GROUPS_AND_PRIVILEGES = 56;

export function allocTOKEN_GROUPS_AND_PRIVILEGES(data?: Partial<TOKEN_GROUPS_AND_PRIVILEGES>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_GROUPS_AND_PRIVILEGES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SidCount !== undefined) view.setUint32(0, Number(data.SidCount), true);
  // 0x04: u32
  if (data?.SidLength !== undefined) view.setUint32(4, Number(data.SidLength), true);
  // 0x08: pointer
  if (data?.Sids !== undefined) view.setBigUint64(8, data.Sids === null ? 0n : BigInt(util.toPointer(data.Sids)), true);
  // 0x10: u32
  if (data?.RestrictedSidCount !== undefined) view.setUint32(16, Number(data.RestrictedSidCount), true);
  // 0x14: u32
  if (data?.RestrictedSidLength !== undefined) view.setUint32(20, Number(data.RestrictedSidLength), true);
  // 0x18: pointer
  if (data?.RestrictedSids !== undefined) view.setBigUint64(24, data.RestrictedSids === null ? 0n : BigInt(util.toPointer(data.RestrictedSids)), true);
  // 0x20: u32
  if (data?.PrivilegeCount !== undefined) view.setUint32(32, Number(data.PrivilegeCount), true);
  // 0x24: u32
  if (data?.PrivilegeLength !== undefined) view.setUint32(36, Number(data.PrivilegeLength), true);
  // 0x28: pointer
  if (data?.Privileges !== undefined) view.setBigUint64(40, data.Privileges === null ? 0n : BigInt(util.toPointer(data.Privileges)), true);
  // 0x30: pointer
  if (data?.AuthenticationId !== undefined) view.setBigUint64(48, data.AuthenticationId === null ? 0n : BigInt(util.toPointer(data.AuthenticationId)), true);
  return buf;
}

export class TOKEN_GROUPS_AND_PRIVILEGESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SidCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get SidLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Sids(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get RestrictedSidCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get RestrictedSidLength(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get RestrictedSids(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get PrivilegeCount(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get PrivilegeLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get Privileges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get AuthenticationId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SidCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set SidLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Sids(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set RestrictedSidCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set RestrictedSidLength(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set RestrictedSids(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set PrivilegeCount(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set PrivilegeLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set Privileges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set AuthenticationId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_LINKED_TOKEN (size: 8)
 */
export interface TOKEN_LINKED_TOKEN {
  /** Windows.Win32.Foundation.HANDLE */
  LinkedToken: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOKEN_LINKED_TOKEN = 8;

export function allocTOKEN_LINKED_TOKEN(data?: Partial<TOKEN_LINKED_TOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_LINKED_TOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LinkedToken !== undefined) view.setBigUint64(0, data.LinkedToken === null ? 0n : BigInt(util.toPointer(data.LinkedToken)), true);
  return buf;
}

export class TOKEN_LINKED_TOKENView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LinkedToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set LinkedToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_ELEVATION (size: 8)
 */
export interface TOKEN_ELEVATION {
  /** u32 */
  TokenIsElevated: number;
}

export const sizeofTOKEN_ELEVATION = 8;

export function allocTOKEN_ELEVATION(data?: Partial<TOKEN_ELEVATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_ELEVATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TokenIsElevated !== undefined) view.setUint32(0, Number(data.TokenIsElevated), true);
  // 0x04: pad4
  return buf;
}

export class TOKEN_ELEVATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get TokenIsElevated(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set TokenIsElevated(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.TOKEN_MANDATORY_LABEL (size: 8)
 */
export interface TOKEN_MANDATORY_LABEL {
  /** Windows.Win32.Security.SID_AND_ATTRIBUTES */
  Label: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOKEN_MANDATORY_LABEL = 8;

export function allocTOKEN_MANDATORY_LABEL(data?: Partial<TOKEN_MANDATORY_LABEL>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_MANDATORY_LABEL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Label !== undefined) view.setBigUint64(0, data.Label === null ? 0n : BigInt(util.toPointer(data.Label)), true);
  return buf;
}

export class TOKEN_MANDATORY_LABELView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Label(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Label(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_MANDATORY_POLICY (size: 8)
 */
export interface TOKEN_MANDATORY_POLICY {
  /** Windows.Win32.Security.TOKEN_MANDATORY_POLICY_ID */
  Policy: TOKEN_MANDATORY_POLICY_ID;
}

export const sizeofTOKEN_MANDATORY_POLICY = 8;

export function allocTOKEN_MANDATORY_POLICY(data?: Partial<TOKEN_MANDATORY_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_MANDATORY_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Policy !== undefined) view.setUint32(0, Number(data.Policy), true);
  // 0x04: pad4
  return buf;
}

export class TOKEN_MANDATORY_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Policy(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Policy(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Security.TOKEN_ACCESS_INFORMATION (size: 88)
 */
export interface TOKEN_ACCESS_INFORMATION {
  /** ptr */
  SidHash: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  RestrictedSidHash: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Privileges: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.LUID */
  AuthenticationId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.TOKEN_TYPE */
  TokenType: TOKEN_TYPE;
  /** Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL */
  ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL;
  /** Windows.Win32.Security.TOKEN_MANDATORY_POLICY */
  MandatoryPolicy: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** u32 */
  AppContainerNumber: number;
  /** Windows.Win32.Foundation.PSID */
  PackageSid: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  CapabilitiesHash: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSID */
  TrustLevelSid: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  SecurityAttributes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofTOKEN_ACCESS_INFORMATION = 88;

export function allocTOKEN_ACCESS_INFORMATION(data?: Partial<TOKEN_ACCESS_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_ACCESS_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SidHash !== undefined) view.setBigUint64(0, data.SidHash === null ? 0n : BigInt(util.toPointer(data.SidHash)), true);
  // 0x08: pointer
  if (data?.RestrictedSidHash !== undefined) view.setBigUint64(8, data.RestrictedSidHash === null ? 0n : BigInt(util.toPointer(data.RestrictedSidHash)), true);
  // 0x10: pointer
  if (data?.Privileges !== undefined) view.setBigUint64(16, data.Privileges === null ? 0n : BigInt(util.toPointer(data.Privileges)), true);
  // 0x18: pointer
  if (data?.AuthenticationId !== undefined) view.setBigUint64(24, data.AuthenticationId === null ? 0n : BigInt(util.toPointer(data.AuthenticationId)), true);
  // 0x20: i32
  if (data?.TokenType !== undefined) view.setInt32(32, Number(data.TokenType), true);
  // 0x24: i32
  if (data?.ImpersonationLevel !== undefined) view.setInt32(36, Number(data.ImpersonationLevel), true);
  // 0x28: pointer
  if (data?.MandatoryPolicy !== undefined) view.setBigUint64(40, data.MandatoryPolicy === null ? 0n : BigInt(util.toPointer(data.MandatoryPolicy)), true);
  // 0x30: u32
  if (data?.Flags !== undefined) view.setUint32(48, Number(data.Flags), true);
  // 0x34: u32
  if (data?.AppContainerNumber !== undefined) view.setUint32(52, Number(data.AppContainerNumber), true);
  // 0x38: pointer
  if (data?.PackageSid !== undefined) view.setBigUint64(56, data.PackageSid === null ? 0n : BigInt(util.toPointer(data.PackageSid)), true);
  // 0x40: pointer
  if (data?.CapabilitiesHash !== undefined) view.setBigUint64(64, data.CapabilitiesHash === null ? 0n : BigInt(util.toPointer(data.CapabilitiesHash)), true);
  // 0x48: pointer
  if (data?.TrustLevelSid !== undefined) view.setBigUint64(72, data.TrustLevelSid === null ? 0n : BigInt(util.toPointer(data.TrustLevelSid)), true);
  // 0x50: pointer
  if (data?.SecurityAttributes !== undefined) view.setBigUint64(80, data.SecurityAttributes === null ? 0n : BigInt(util.toPointer(data.SecurityAttributes)), true);
  return buf;
}

export class TOKEN_ACCESS_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SidHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get RestrictedSidHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Privileges(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get AuthenticationId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: i32
  get TokenType(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get ImpersonationLevel(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: pointer
  get MandatoryPolicy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get Flags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get AppContainerNumber(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get PackageSid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get CapabilitiesHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get TrustLevelSid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get SecurityAttributes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SidHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set RestrictedSidHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Privileges(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set AuthenticationId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: i32
  set TokenType(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set ImpersonationLevel(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: pointer
  set MandatoryPolicy(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, BigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set Flags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set AppContainerNumber(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set PackageSid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set CapabilitiesHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set TrustLevelSid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set SecurityAttributes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_AUDIT_POLICY (size: 8)
 */
export interface TOKEN_AUDIT_POLICY {
  /** array */
  PerUserPolicy: Deno.PointerValue | null;
}

export const sizeofTOKEN_AUDIT_POLICY = 8;

export function allocTOKEN_AUDIT_POLICY(data?: Partial<TOKEN_AUDIT_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_AUDIT_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PerUserPolicy !== undefined) view.setBigUint64(0, data.PerUserPolicy === null ? 0n : BigInt(util.toPointer(data.PerUserPolicy)), true);
  return buf;
}

export class TOKEN_AUDIT_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PerUserPolicy(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set PerUserPolicy(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_SOURCE (size: 16)
 */
export interface TOKEN_SOURCE {
  /** array */
  SourceName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  SourceIdentifier: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOKEN_SOURCE = 16;

export function allocTOKEN_SOURCE(data?: Partial<TOKEN_SOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_SOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SourceName !== undefined) view.setBigUint64(0, data.SourceName === null ? 0n : BigInt(util.toPointer(data.SourceName)), true);
  // 0x08: pointer
  if (data?.SourceIdentifier !== undefined) view.setBigUint64(8, data.SourceIdentifier === null ? 0n : BigInt(util.toPointer(data.SourceIdentifier)), true);
  return buf;
}

export class TOKEN_SOURCEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get SourceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get SourceIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set SourceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set SourceIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_STATISTICS (size: 56)
 */
export interface TOKEN_STATISTICS {
  /** Windows.Win32.Foundation.LUID */
  TokenId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  AuthenticationId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ExpirationTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.TOKEN_TYPE */
  TokenType: TOKEN_TYPE;
  /** Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL */
  ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL;
  /** u32 */
  DynamicCharged: number;
  /** u32 */
  DynamicAvailable: number;
  /** u32 */
  GroupCount: number;
  /** u32 */
  PrivilegeCount: number;
  /** Windows.Win32.Foundation.LUID */
  ModifiedId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOKEN_STATISTICS = 56;

export function allocTOKEN_STATISTICS(data?: Partial<TOKEN_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TokenId !== undefined) view.setBigUint64(0, data.TokenId === null ? 0n : BigInt(util.toPointer(data.TokenId)), true);
  // 0x08: pointer
  if (data?.AuthenticationId !== undefined) view.setBigUint64(8, data.AuthenticationId === null ? 0n : BigInt(util.toPointer(data.AuthenticationId)), true);
  // 0x10: pointer
  if (data?.ExpirationTime !== undefined) view.setBigUint64(16, data.ExpirationTime === null ? 0n : BigInt(util.toPointer(data.ExpirationTime)), true);
  // 0x18: i32
  if (data?.TokenType !== undefined) view.setInt32(24, Number(data.TokenType), true);
  // 0x1c: i32
  if (data?.ImpersonationLevel !== undefined) view.setInt32(28, Number(data.ImpersonationLevel), true);
  // 0x20: u32
  if (data?.DynamicCharged !== undefined) view.setUint32(32, Number(data.DynamicCharged), true);
  // 0x24: u32
  if (data?.DynamicAvailable !== undefined) view.setUint32(36, Number(data.DynamicAvailable), true);
  // 0x28: u32
  if (data?.GroupCount !== undefined) view.setUint32(40, Number(data.GroupCount), true);
  // 0x2c: u32
  if (data?.PrivilegeCount !== undefined) view.setUint32(44, Number(data.PrivilegeCount), true);
  // 0x30: pointer
  if (data?.ModifiedId !== undefined) view.setBigUint64(48, data.ModifiedId === null ? 0n : BigInt(util.toPointer(data.ModifiedId)), true);
  return buf;
}

export class TOKEN_STATISTICSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TokenId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get AuthenticationId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ExpirationTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get TokenType(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get ImpersonationLevel(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: u32
  get DynamicCharged(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DynamicAvailable(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get GroupCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get PrivilegeCount(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get ModifiedId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set TokenId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set AuthenticationId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ExpirationTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set TokenType(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set ImpersonationLevel(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: u32
  set DynamicCharged(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DynamicAvailable(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set GroupCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set PrivilegeCount(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set ModifiedId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_CONTROL (size: 32)
 */
export interface TOKEN_CONTROL {
  /** Windows.Win32.Foundation.LUID */
  TokenId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  AuthenticationId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LUID */
  ModifiedId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.TOKEN_SOURCE */
  TokenSource: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOKEN_CONTROL = 32;

export function allocTOKEN_CONTROL(data?: Partial<TOKEN_CONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_CONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TokenId !== undefined) view.setBigUint64(0, data.TokenId === null ? 0n : BigInt(util.toPointer(data.TokenId)), true);
  // 0x08: pointer
  if (data?.AuthenticationId !== undefined) view.setBigUint64(8, data.AuthenticationId === null ? 0n : BigInt(util.toPointer(data.AuthenticationId)), true);
  // 0x10: pointer
  if (data?.ModifiedId !== undefined) view.setBigUint64(16, data.ModifiedId === null ? 0n : BigInt(util.toPointer(data.ModifiedId)), true);
  // 0x18: pointer
  if (data?.TokenSource !== undefined) view.setBigUint64(24, data.TokenSource === null ? 0n : BigInt(util.toPointer(data.TokenSource)), true);
  return buf;
}

export class TOKEN_CONTROLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TokenId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get AuthenticationId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get ModifiedId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get TokenSource(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set TokenId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set AuthenticationId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set ModifiedId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set TokenSource(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_ORIGIN (size: 8)
 */
export interface TOKEN_ORIGIN {
  /** Windows.Win32.Foundation.LUID */
  OriginatingLogonSession: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOKEN_ORIGIN = 8;

export function allocTOKEN_ORIGIN(data?: Partial<TOKEN_ORIGIN>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_ORIGIN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.OriginatingLogonSession !== undefined) view.setBigUint64(0, data.OriginatingLogonSession === null ? 0n : BigInt(util.toPointer(data.OriginatingLogonSession)), true);
  return buf;
}

export class TOKEN_ORIGINView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get OriginatingLogonSession(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set OriginatingLogonSession(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.TOKEN_APPCONTAINER_INFORMATION (size: 8)
 */
export interface TOKEN_APPCONTAINER_INFORMATION {
  /** Windows.Win32.Foundation.PSID */
  TokenAppContainer: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTOKEN_APPCONTAINER_INFORMATION = 8;

export function allocTOKEN_APPCONTAINER_INFORMATION(data?: Partial<TOKEN_APPCONTAINER_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofTOKEN_APPCONTAINER_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TokenAppContainer !== undefined) view.setBigUint64(0, data.TokenAppContainer === null ? 0n : BigInt(util.toPointer(data.TokenAppContainer)), true);
  return buf;
}

export class TOKEN_APPCONTAINER_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TokenAppContainer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set TokenAppContainer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE (size: 16)
 */
export interface CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
  /** u64 */
  Version: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
}

export const sizeofCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = 16;

export function allocCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE(data?: Partial<CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Version !== undefined) view.setBigUint64(0, BigInt(data.Version), true);
  // 0x08: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Version(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Version(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Security.CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE (size: 16)
 */
export interface CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
  /** ptr */
  pValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ValueLength: number;
}

export const sizeofCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = 16;

export function allocCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE(data?: Partial<CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pValue !== undefined) view.setBigUint64(0, data.pValue === null ? 0n : BigInt(util.toPointer(data.pValue)), true);
  // 0x08: u32
  if (data?.ValueLength !== undefined) view.setUint32(8, Number(data.ValueLength), true);
  // 0x0c: pad4
  return buf;
}

export class CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get ValueLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pValue(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set ValueLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Security.CLAIM_SECURITY_ATTRIBUTE_V1 (size: 32)
 */
export interface CLAIM_SECURITY_ATTRIBUTE_V1 {
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.CLAIM_SECURITY_ATTRIBUTE_VALUE_TYPE */
  ValueType: CLAIM_SECURITY_ATTRIBUTE_VALUE_TYPE;
  /** u16 */
  Reserved: number;
  /** u32 */
  Flags: number;
  /** u32 */
  ValueCount: number;
  /** _Values_e__Union */
  Values: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLAIM_SECURITY_ATTRIBUTE_V1 = 32;

export function allocCLAIM_SECURITY_ATTRIBUTE_V1(data?: Partial<CLAIM_SECURITY_ATTRIBUTE_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofCLAIM_SECURITY_ATTRIBUTE_V1);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.ValueType !== undefined) view.setUint16(8, Number(data.ValueType), true);
  // 0x0a: u16
  if (data?.Reserved !== undefined) view.setUint16(10, Number(data.Reserved), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.ValueCount !== undefined) view.setUint32(16, Number(data.ValueCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Values !== undefined) view.setBigUint64(24, data.Values === null ? 0n : BigInt(util.toPointer(data.Values)), true);
  return buf;
}

export class CLAIM_SECURITY_ATTRIBUTE_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get ValueType(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get Reserved(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get Flags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get ValueCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Values(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u16
  set ValueType(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set Reserved(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set Flags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set ValueCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Values(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 (size: 24)
 */
export interface CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {
  /** u32 */
  Name: number;
  /** Windows.Win32.Security.CLAIM_SECURITY_ATTRIBUTE_VALUE_TYPE */
  ValueType: CLAIM_SECURITY_ATTRIBUTE_VALUE_TYPE;
  /** u16 */
  Reserved: number;
  /** Windows.Win32.Security.CLAIM_SECURITY_ATTRIBUTE_FLAGS */
  Flags: CLAIM_SECURITY_ATTRIBUTE_FLAGS;
  /** u32 */
  ValueCount: number;
  /** _Values_e__Union */
  Values: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = 24;

export function allocCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1(data?: Partial<CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Name !== undefined) view.setUint32(0, Number(data.Name), true);
  // 0x04: u16
  if (data?.ValueType !== undefined) view.setUint16(4, Number(data.ValueType), true);
  // 0x06: u16
  if (data?.Reserved !== undefined) view.setUint16(6, Number(data.Reserved), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.ValueCount !== undefined) view.setUint32(12, Number(data.ValueCount), true);
  // 0x10: pointer
  if (data?.Values !== undefined) view.setBigUint64(16, data.Values === null ? 0n : BigInt(util.toPointer(data.Values)), true);
  return buf;
}

export class CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Name(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get ValueType(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Reserved(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ValueCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Values(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Name(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set ValueType(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Reserved(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ValueCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Values(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.CLAIM_SECURITY_ATTRIBUTES_INFORMATION (size: 16)
 */
export interface CLAIM_SECURITY_ATTRIBUTES_INFORMATION {
  /** u16 */
  Version: number;
  /** u16 */
  Reserved: number;
  /** u32 */
  AttributeCount: number;
  /** _Attribute_e__Union */
  Attribute: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLAIM_SECURITY_ATTRIBUTES_INFORMATION = 16;

export function allocCLAIM_SECURITY_ATTRIBUTES_INFORMATION(data?: Partial<CLAIM_SECURITY_ATTRIBUTES_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofCLAIM_SECURITY_ATTRIBUTES_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Version !== undefined) view.setUint16(0, Number(data.Version), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: u32
  if (data?.AttributeCount !== undefined) view.setUint32(4, Number(data.AttributeCount), true);
  // 0x08: pointer
  if (data?.Attribute !== undefined) view.setBigUint64(8, data.Attribute === null ? 0n : BigInt(util.toPointer(data.Attribute)), true);
  return buf;
}

export class CLAIM_SECURITY_ATTRIBUTES_INFORMATIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Version(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Reserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get AttributeCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Attribute(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set Version(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Reserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set AttributeCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Attribute(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.SECURITY_QUALITY_OF_SERVICE (size: 24)
 */
export interface SECURITY_QUALITY_OF_SERVICE {
  /** u32 */
  Length: number;
  /** Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL */
  ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL;
  /** u8 */
  ContextTrackingMode: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  EffectiveOnly: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSECURITY_QUALITY_OF_SERVICE = 24;

export function allocSECURITY_QUALITY_OF_SERVICE(data?: Partial<SECURITY_QUALITY_OF_SERVICE>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_QUALITY_OF_SERVICE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Length !== undefined) view.setUint32(0, Number(data.Length), true);
  // 0x04: i32
  if (data?.ImpersonationLevel !== undefined) view.setInt32(4, Number(data.ImpersonationLevel), true);
  // 0x08: u8
  if (data?.ContextTrackingMode !== undefined) view.setUint8(8, Number(data.ContextTrackingMode));
  // 0x09: pad7
  // 0x10: pointer
  if (data?.EffectiveOnly !== undefined) view.setBigUint64(16, data.EffectiveOnly === null ? 0n : BigInt(util.toPointer(data.EffectiveOnly)), true);
  return buf;
}

export class SECURITY_QUALITY_OF_SERVICEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Length(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get ImpersonationLevel(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u8
  get ContextTrackingMode(): number {
    return this.view.getUint8(8);
  }

  // 0x09: pad7

  // 0x10: pointer
  get EffectiveOnly(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Length(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set ImpersonationLevel(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u8
  set ContextTrackingMode(value: number) {
    this.view.setUint8(8, value);
  }

  // 0x09: pad7

  // 0x10: pointer
  set EffectiveOnly(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Security.SE_IMPERSONATION_STATE (size: 32)
 */
export interface SE_IMPERSONATION_STATE {
  /** ptr */
  Token: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  CopyOnOpen: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  EffectiveOnly: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL */
  Level: SECURITY_IMPERSONATION_LEVEL;
}

export const sizeofSE_IMPERSONATION_STATE = 32;

export function allocSE_IMPERSONATION_STATE(data?: Partial<SE_IMPERSONATION_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSE_IMPERSONATION_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Token !== undefined) view.setBigUint64(0, data.Token === null ? 0n : BigInt(util.toPointer(data.Token)), true);
  // 0x08: pointer
  if (data?.CopyOnOpen !== undefined) view.setBigUint64(8, data.CopyOnOpen === null ? 0n : BigInt(util.toPointer(data.CopyOnOpen)), true);
  // 0x10: pointer
  if (data?.EffectiveOnly !== undefined) view.setBigUint64(16, data.EffectiveOnly === null ? 0n : BigInt(util.toPointer(data.EffectiveOnly)), true);
  // 0x18: i32
  if (data?.Level !== undefined) view.setInt32(24, Number(data.Level), true);
  // 0x1c: pad4
  return buf;
}

export class SE_IMPERSONATION_STATEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Token(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get CopyOnOpen(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get EffectiveOnly(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: i32
  get Level(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set Token(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set CopyOnOpen(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set EffectiveOnly(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: i32
  set Level(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Security.SECURITY_CAPABILITIES (size: 24)
 */
export interface SECURITY_CAPABILITIES {
  /** Windows.Win32.Foundation.PSID */
  AppContainerSid: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  Capabilities: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  CapabilityCount: number;
  /** u32 */
  Reserved: number;
}

export const sizeofSECURITY_CAPABILITIES = 24;

export function allocSECURITY_CAPABILITIES(data?: Partial<SECURITY_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofSECURITY_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AppContainerSid !== undefined) view.setBigUint64(0, data.AppContainerSid === null ? 0n : BigInt(util.toPointer(data.AppContainerSid)), true);
  // 0x08: pointer
  if (data?.Capabilities !== undefined) view.setBigUint64(8, data.Capabilities === null ? 0n : BigInt(util.toPointer(data.Capabilities)), true);
  // 0x10: u32
  if (data?.CapabilityCount !== undefined) view.setUint32(16, Number(data.CapabilityCount), true);
  // 0x14: u32
  if (data?.Reserved !== undefined) view.setUint32(20, Number(data.Reserved), true);
  return buf;
}

export class SECURITY_CAPABILITIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AppContainerSid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Capabilities(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get CapabilityCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Reserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set AppContainerSid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Capabilities(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set CapabilityCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Reserved(value: number) {
    this.view.setUint32(20, value, true);
  }
}

// Native Libraries

try {
  var libADVAPI32_dll = Deno.dlopen("ADVAPI32.dll", {
    AccessCheck: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AccessCheckAndAuditAlarmW: {
      parameters: ["buffer", "pointer", "buffer", "buffer", "pointer", "u32", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AccessCheckByType: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AccessCheckByTypeResultList: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AccessCheckByTypeAndAuditAlarmW: {
      parameters: ["buffer", "pointer", "buffer", "buffer", "pointer", "pointer", "u32", "i32", "u32", "pointer", "u32", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AccessCheckByTypeResultListAndAuditAlarmW: {
      parameters: ["buffer", "pointer", "buffer", "buffer", "pointer", "pointer", "u32", "i32", "u32", "pointer", "u32", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AccessCheckByTypeResultListAndAuditAlarmByHandleW: {
      parameters: ["buffer", "pointer", "pointer", "buffer", "buffer", "pointer", "pointer", "u32", "i32", "u32", "pointer", "u32", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AddAccessAllowedAce: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    AddAccessAllowedAceEx: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    AddAccessAllowedObjectAce: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AddAccessDeniedAce: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    AddAccessDeniedAceEx: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    AddAccessDeniedObjectAce: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AddAce: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32"],
      result: "i32",
    },
    AddAuditAccessAce: {
      parameters: ["pointer", "u32", "u32", "pointer", "i32", "i32"],
      result: "i32",
    },
    AddAuditAccessAceEx: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "i32", "i32"],
      result: "i32",
    },
    AddAuditAccessObjectAce: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "pointer", "pointer", "i32", "i32"],
      result: "i32",
    },
    AddMandatoryAce: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    AdjustTokenGroups: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    AdjustTokenPrivileges: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    AllocateAndInitializeSid: {
      parameters: ["pointer", "u8", "u32", "u32", "u32", "u32", "u32", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    AllocateLocallyUniqueId: {
      parameters: ["pointer"],
      result: "i32",
    },
    AreAllAccessesGranted: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    AreAnyAccessesGranted: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    CheckTokenMembership: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    ConvertToAutoInheritPrivateObjectSecurity: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    CopySid: {
      parameters: ["u32", "pointer", "pointer"],
      result: "i32",
    },
    CreatePrivateObjectSecurity: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    CreatePrivateObjectSecurityEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "i32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    CreatePrivateObjectSecurityWithMultipleInheritance: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "i32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    CreateRestrictedToken: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    CreateWellKnownSid: {
      parameters: ["i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    EqualDomainSid: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    DeleteAce: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    DestroyPrivateObjectSecurity: {
      parameters: ["pointer"],
      result: "i32",
    },
    DuplicateToken: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    DuplicateTokenEx: {
      parameters: ["pointer", "u32", "pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    EqualPrefixSid: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    EqualSid: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FindFirstFreeAce: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    FreeSid: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetAce: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    GetAclInformation: {
      parameters: ["pointer", "pointer", "u32", "i32"],
      result: "i32",
    },
    GetFileSecurityW: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetKernelObjectSecurity: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetLengthSid: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetPrivateObjectSecurity: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetSecurityDescriptorControl: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetSecurityDescriptorDacl: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetSecurityDescriptorGroup: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetSecurityDescriptorLength: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetSecurityDescriptorOwner: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetSecurityDescriptorRMControl: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    GetSecurityDescriptorSacl: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetSidIdentifierAuthority: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetSidLengthRequired: {
      parameters: ["u8"],
      result: "u32",
    },
    GetSidSubAuthority: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    GetSidSubAuthorityCount: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetTokenInformation: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetWindowsAccountDomainSid: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    ImpersonateAnonymousToken: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImpersonateLoggedOnUser: {
      parameters: ["pointer"],
      result: "i32",
    },
    ImpersonateSelf: {
      parameters: ["i32"],
      result: "i32",
    },
    InitializeAcl: {
      parameters: ["pointer", "u32", "u32"],
      result: "i32",
    },
    InitializeSecurityDescriptor: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    InitializeSid: {
      parameters: ["pointer", "pointer", "u8"],
      result: "i32",
    },
    IsTokenRestricted: {
      parameters: ["pointer"],
      result: "i32",
    },
    IsValidAcl: {
      parameters: ["pointer"],
      result: "i32",
    },
    IsValidSecurityDescriptor: {
      parameters: ["pointer"],
      result: "i32",
    },
    IsValidSid: {
      parameters: ["pointer"],
      result: "i32",
    },
    IsWellKnownSid: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    MakeAbsoluteSD: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    MakeSelfRelativeSD: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    MapGenericMask: {
      parameters: ["pointer", "pointer"],
      result: "void",
    },
    ObjectCloseAuditAlarmW: {
      parameters: ["buffer", "pointer", "i32"],
      result: "i32",
    },
    ObjectDeleteAuditAlarmW: {
      parameters: ["buffer", "pointer", "i32"],
      result: "i32",
    },
    ObjectOpenAuditAlarmW: {
      parameters: ["buffer", "pointer", "buffer", "buffer", "pointer", "pointer", "u32", "u32", "pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    ObjectPrivilegeAuditAlarmW: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer", "i32"],
      result: "i32",
    },
    PrivilegeCheck: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    PrivilegedServiceAuditAlarmW: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "i32"],
      result: "i32",
    },
    QuerySecurityAccessMask: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    RevertToSelf: {
      parameters: [],
      result: "i32",
    },
    SetAclInformation: {
      parameters: ["pointer", "pointer", "u32", "i32"],
      result: "i32",
    },
    SetFileSecurityW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    SetKernelObjectSecurity: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    SetPrivateObjectSecurity: {
      parameters: ["u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetPrivateObjectSecurityEx: {
      parameters: ["u32", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetSecurityAccessMask: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    SetSecurityDescriptorControl: {
      parameters: ["pointer", "u16", "u16"],
      result: "i32",
    },
    SetSecurityDescriptorDacl: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "i32",
    },
    SetSecurityDescriptorGroup: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    SetSecurityDescriptorOwner: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    SetSecurityDescriptorRMControl: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    SetSecurityDescriptorSacl: {
      parameters: ["pointer", "i32", "pointer", "i32"],
      result: "i32",
    },
    SetTokenInformation: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    AccessCheckAndAuditAlarmA: {
      parameters: ["buffer", "pointer", "buffer", "buffer", "pointer", "u32", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AccessCheckByTypeAndAuditAlarmA: {
      parameters: ["buffer", "pointer", "buffer", "buffer", "pointer", "pointer", "u32", "i32", "u32", "pointer", "u32", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AccessCheckByTypeResultListAndAuditAlarmA: {
      parameters: ["buffer", "pointer", "buffer", "buffer", "pointer", "pointer", "u32", "i32", "u32", "pointer", "u32", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AccessCheckByTypeResultListAndAuditAlarmByHandleA: {
      parameters: ["buffer", "pointer", "pointer", "buffer", "buffer", "pointer", "pointer", "u32", "i32", "u32", "pointer", "u32", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ObjectOpenAuditAlarmA: {
      parameters: ["buffer", "pointer", "buffer", "buffer", "pointer", "pointer", "u32", "u32", "pointer", "i32", "i32", "pointer"],
      result: "i32",
    },
    ObjectPrivilegeAuditAlarmA: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer", "i32"],
      result: "i32",
    },
    ObjectCloseAuditAlarmA: {
      parameters: ["buffer", "pointer", "i32"],
      result: "i32",
    },
    ObjectDeleteAuditAlarmA: {
      parameters: ["buffer", "pointer", "i32"],
      result: "i32",
    },
    PrivilegedServiceAuditAlarmA: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "i32"],
      result: "i32",
    },
    AddConditionalAce: {
      parameters: ["pointer", "u32", "u32", "u8", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetFileSecurityA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    GetFileSecurityA: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    LookupAccountSidA: {
      parameters: ["buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    LookupAccountSidW: {
      parameters: ["buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    LookupAccountNameA: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    LookupAccountNameW: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    LookupPrivilegeValueA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
    },
    LookupPrivilegeValueW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "i32",
    },
    LookupPrivilegeNameA: {
      parameters: ["buffer", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    LookupPrivilegeNameW: {
      parameters: ["buffer", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    LookupPrivilegeDisplayNameA: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    LookupPrivilegeDisplayNameW: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    LogonUserA: {
      parameters: ["buffer", "buffer", "buffer", "u32", "u32", "pointer"],
      result: "i32",
    },
    LogonUserW: {
      parameters: ["buffer", "buffer", "buffer", "u32", "u32", "pointer"],
      result: "i32",
    },
    LogonUserExA: {
      parameters: ["buffer", "buffer", "buffer", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    LogonUserExW: {
      parameters: ["buffer", "buffer", "buffer", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libKERNEL32_dll = Deno.dlopen("KERNEL32.dll", {
    AddResourceAttributeAce: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AddScopedPolicyIDAce: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer"],
      result: "i32",
    },
    CheckTokenCapability: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetAppContainerAce: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    CheckTokenMembershipEx: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetCachedSigningLevel: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    GetCachedSigningLevel: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libapi_ms_win_security_base_l1_2_2_dll = Deno.dlopen("api-ms-win-security-base-l1-2-2.dll", {
    DeriveCapabilitySidsFromName: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libntdll_dll = Deno.dlopen("ntdll.dll", {
    RtlNormalizeSecurityDescriptor: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    RtlConvertSidToUnicodeString: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libUSER32_dll = Deno.dlopen("USER32.dll", {
    SetUserObjectSecurity: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetUserObjectSecurity: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function AccessCheck(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  ClientToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DesiredAccess: number /* u32 */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  PrivilegeSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  PrivilegeSetLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  GrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AccessCheck(util.toPointer(pSecurityDescriptor), util.toPointer(ClientToken), DesiredAccess, util.toPointer(GenericMapping), util.toPointer(PrivilegeSet), util.toPointer(PrivilegeSetLength), util.toPointer(GrantedAccess), util.toPointer(AccessStatus)));
}

export function AccessCheckAndAuditAlarmW(
  SubsystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ObjectName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  DesiredAccess: number /* u32 */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectCreation: boolean /* Windows.Win32.Foundation.BOOL */,
  GrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfGenerateOnClose: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AccessCheckAndAuditAlarmW(util.pwstrToFfi(SubsystemName), util.toPointer(HandleId), util.pwstrToFfi(ObjectTypeName), util.pwstrToFfi(ObjectName), util.toPointer(SecurityDescriptor), DesiredAccess, util.toPointer(GenericMapping), util.boolToFfi(ObjectCreation), util.toPointer(GrantedAccess), util.toPointer(AccessStatus), util.toPointer(pfGenerateOnClose)));
}

export function AccessCheckByType(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  PrincipalSelfSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  ClientToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DesiredAccess: number /* u32 */,
  ObjectTypeList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeListLength: number /* u32 */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  PrivilegeSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  PrivilegeSetLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  GrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AccessCheckByType(util.toPointer(pSecurityDescriptor), util.toPointer(PrincipalSelfSid), util.toPointer(ClientToken), DesiredAccess, util.toPointer(ObjectTypeList), ObjectTypeListLength, util.toPointer(GenericMapping), util.toPointer(PrivilegeSet), util.toPointer(PrivilegeSetLength), util.toPointer(GrantedAccess), util.toPointer(AccessStatus)));
}

export function AccessCheckByTypeResultList(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  PrincipalSelfSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  ClientToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DesiredAccess: number /* u32 */,
  ObjectTypeList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeListLength: number /* u32 */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  PrivilegeSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  PrivilegeSetLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  GrantedAccessList: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessStatusList: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AccessCheckByTypeResultList(util.toPointer(pSecurityDescriptor), util.toPointer(PrincipalSelfSid), util.toPointer(ClientToken), DesiredAccess, util.toPointer(ObjectTypeList), ObjectTypeListLength, util.toPointer(GenericMapping), util.toPointer(PrivilegeSet), util.toPointer(PrivilegeSetLength), util.toPointer(GrantedAccessList), util.toPointer(AccessStatusList)));
}

export function AccessCheckByTypeAndAuditAlarmW(
  SubsystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ObjectName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  PrincipalSelfSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  DesiredAccess: number /* u32 */,
  AuditType: AUDIT_EVENT_TYPE /* Windows.Win32.Security.AUDIT_EVENT_TYPE */,
  Flags: number /* u32 */,
  ObjectTypeList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeListLength: number /* u32 */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectCreation: boolean /* Windows.Win32.Foundation.BOOL */,
  GrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfGenerateOnClose: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AccessCheckByTypeAndAuditAlarmW(util.pwstrToFfi(SubsystemName), util.toPointer(HandleId), util.pwstrToFfi(ObjectTypeName), util.pwstrToFfi(ObjectName), util.toPointer(SecurityDescriptor), util.toPointer(PrincipalSelfSid), DesiredAccess, AuditType, Flags, util.toPointer(ObjectTypeList), ObjectTypeListLength, util.toPointer(GenericMapping), util.boolToFfi(ObjectCreation), util.toPointer(GrantedAccess), util.toPointer(AccessStatus), util.toPointer(pfGenerateOnClose)));
}

export function AccessCheckByTypeResultListAndAuditAlarmW(
  SubsystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ObjectName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  PrincipalSelfSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  DesiredAccess: number /* u32 */,
  AuditType: AUDIT_EVENT_TYPE /* Windows.Win32.Security.AUDIT_EVENT_TYPE */,
  Flags: number /* u32 */,
  ObjectTypeList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeListLength: number /* u32 */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectCreation: boolean /* Windows.Win32.Foundation.BOOL */,
  GrantedAccessList: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessStatusList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfGenerateOnClose: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AccessCheckByTypeResultListAndAuditAlarmW(util.pwstrToFfi(SubsystemName), util.toPointer(HandleId), util.pwstrToFfi(ObjectTypeName), util.pwstrToFfi(ObjectName), util.toPointer(SecurityDescriptor), util.toPointer(PrincipalSelfSid), DesiredAccess, AuditType, Flags, util.toPointer(ObjectTypeList), ObjectTypeListLength, util.toPointer(GenericMapping), util.boolToFfi(ObjectCreation), util.toPointer(GrantedAccessList), util.toPointer(AccessStatusList), util.toPointer(pfGenerateOnClose)));
}

export function AccessCheckByTypeResultListAndAuditAlarmByHandleW(
  SubsystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClientToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ObjectTypeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ObjectName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  PrincipalSelfSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  DesiredAccess: number /* u32 */,
  AuditType: AUDIT_EVENT_TYPE /* Windows.Win32.Security.AUDIT_EVENT_TYPE */,
  Flags: number /* u32 */,
  ObjectTypeList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeListLength: number /* u32 */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectCreation: boolean /* Windows.Win32.Foundation.BOOL */,
  GrantedAccessList: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessStatusList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfGenerateOnClose: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AccessCheckByTypeResultListAndAuditAlarmByHandleW(util.pwstrToFfi(SubsystemName), util.toPointer(HandleId), util.toPointer(ClientToken), util.pwstrToFfi(ObjectTypeName), util.pwstrToFfi(ObjectName), util.toPointer(SecurityDescriptor), util.toPointer(PrincipalSelfSid), DesiredAccess, AuditType, Flags, util.toPointer(ObjectTypeList), ObjectTypeListLength, util.toPointer(GenericMapping), util.boolToFfi(ObjectCreation), util.toPointer(GrantedAccessList), util.toPointer(AccessStatusList), util.toPointer(pfGenerateOnClose)));
}

export function AddAccessAllowedAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: number /* u32 */,
  AccessMask: number /* u32 */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AddAccessAllowedAce(util.toPointer(pAcl), dwAceRevision, AccessMask, util.toPointer(pSid)));
}

export function AddAccessAllowedAceEx(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: number /* u32 */,
  AceFlags: ACE_FLAGS /* Windows.Win32.Security.ACE_FLAGS */,
  AccessMask: number /* u32 */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AddAccessAllowedAceEx(util.toPointer(pAcl), dwAceRevision, AceFlags, AccessMask, util.toPointer(pSid)));
}

export function AddAccessAllowedObjectAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: number /* u32 */,
  AceFlags: ACE_FLAGS /* Windows.Win32.Security.ACE_FLAGS */,
  AccessMask: number /* u32 */,
  ObjectTypeGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  InheritedObjectTypeGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AddAccessAllowedObjectAce(util.toPointer(pAcl), dwAceRevision, AceFlags, AccessMask, util.toPointer(ObjectTypeGuid), util.toPointer(InheritedObjectTypeGuid), util.toPointer(pSid)));
}

export function AddAccessDeniedAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: number /* u32 */,
  AccessMask: number /* u32 */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AddAccessDeniedAce(util.toPointer(pAcl), dwAceRevision, AccessMask, util.toPointer(pSid)));
}

export function AddAccessDeniedAceEx(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: number /* u32 */,
  AceFlags: ACE_FLAGS /* Windows.Win32.Security.ACE_FLAGS */,
  AccessMask: number /* u32 */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AddAccessDeniedAceEx(util.toPointer(pAcl), dwAceRevision, AceFlags, AccessMask, util.toPointer(pSid)));
}

export function AddAccessDeniedObjectAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: number /* u32 */,
  AceFlags: ACE_FLAGS /* Windows.Win32.Security.ACE_FLAGS */,
  AccessMask: number /* u32 */,
  ObjectTypeGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  InheritedObjectTypeGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AddAccessDeniedObjectAce(util.toPointer(pAcl), dwAceRevision, AceFlags, AccessMask, util.toPointer(ObjectTypeGuid), util.toPointer(InheritedObjectTypeGuid), util.toPointer(pSid)));
}

export function AddAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: number /* u32 */,
  dwStartingAceIndex: number /* u32 */,
  pAceList: Deno.PointerValue | Uint8Array | null /* ptr */,
  nAceListLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AddAce(util.toPointer(pAcl), dwAceRevision, dwStartingAceIndex, util.toPointer(pAceList), nAceListLength));
}

export function AddAuditAccessAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: number /* u32 */,
  dwAccessMask: number /* u32 */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  bAuditSuccess: boolean /* Windows.Win32.Foundation.BOOL */,
  bAuditFailure: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AddAuditAccessAce(util.toPointer(pAcl), dwAceRevision, dwAccessMask, util.toPointer(pSid), util.boolToFfi(bAuditSuccess), util.boolToFfi(bAuditFailure)));
}

export function AddAuditAccessAceEx(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: number /* u32 */,
  AceFlags: ACE_FLAGS /* Windows.Win32.Security.ACE_FLAGS */,
  dwAccessMask: number /* u32 */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  bAuditSuccess: boolean /* Windows.Win32.Foundation.BOOL */,
  bAuditFailure: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AddAuditAccessAceEx(util.toPointer(pAcl), dwAceRevision, AceFlags, dwAccessMask, util.toPointer(pSid), util.boolToFfi(bAuditSuccess), util.boolToFfi(bAuditFailure)));
}

export function AddAuditAccessObjectAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: number /* u32 */,
  AceFlags: ACE_FLAGS /* Windows.Win32.Security.ACE_FLAGS */,
  AccessMask: number /* u32 */,
  ObjectTypeGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  InheritedObjectTypeGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  bAuditSuccess: boolean /* Windows.Win32.Foundation.BOOL */,
  bAuditFailure: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AddAuditAccessObjectAce(util.toPointer(pAcl), dwAceRevision, AceFlags, AccessMask, util.toPointer(ObjectTypeGuid), util.toPointer(InheritedObjectTypeGuid), util.toPointer(pSid), util.boolToFfi(bAuditSuccess), util.boolToFfi(bAuditFailure)));
}

export function AddMandatoryAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: ACE_REVISION /* Windows.Win32.Security.ACE_REVISION */,
  AceFlags: ACE_FLAGS /* Windows.Win32.Security.ACE_FLAGS */,
  MandatoryPolicy: number /* u32 */,
  pLabelSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AddMandatoryAce(util.toPointer(pAcl), dwAceRevision, AceFlags, MandatoryPolicy, util.toPointer(pLabelSid)));
}

export function AddResourceAttributeAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: number /* u32 */,
  AceFlags: ACE_FLAGS /* Windows.Win32.Security.ACE_FLAGS */,
  AccessMask: number /* u32 */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pAttributeInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.AddResourceAttributeAce(util.toPointer(pAcl), dwAceRevision, AceFlags, AccessMask, util.toPointer(pSid), util.toPointer(pAttributeInfo), util.toPointer(pReturnLength)));
}

export function AddScopedPolicyIDAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: number /* u32 */,
  AceFlags: ACE_FLAGS /* Windows.Win32.Security.ACE_FLAGS */,
  AccessMask: number /* u32 */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.AddScopedPolicyIDAce(util.toPointer(pAcl), dwAceRevision, AceFlags, AccessMask, util.toPointer(pSid)));
}

export function AdjustTokenGroups(
  TokenHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ResetToDefault: boolean /* Windows.Win32.Foundation.BOOL */,
  NewState: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
  PreviousState: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AdjustTokenGroups(util.toPointer(TokenHandle), util.boolToFfi(ResetToDefault), util.toPointer(NewState), BufferLength, util.toPointer(PreviousState), util.toPointer(ReturnLength)));
}

export function AdjustTokenPrivileges(
  TokenHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DisableAllPrivileges: boolean /* Windows.Win32.Foundation.BOOL */,
  NewState: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
  PreviousState: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AdjustTokenPrivileges(util.toPointer(TokenHandle), util.boolToFfi(DisableAllPrivileges), util.toPointer(NewState), BufferLength, util.toPointer(PreviousState), util.toPointer(ReturnLength)));
}

export function AllocateAndInitializeSid(
  pIdentifierAuthority: Deno.PointerValue | Uint8Array | null /* ptr */,
  nSubAuthorityCount: number /* u8 */,
  nSubAuthority0: number /* u32 */,
  nSubAuthority1: number /* u32 */,
  nSubAuthority2: number /* u32 */,
  nSubAuthority3: number /* u32 */,
  nSubAuthority4: number /* u32 */,
  nSubAuthority5: number /* u32 */,
  nSubAuthority6: number /* u32 */,
  nSubAuthority7: number /* u32 */,
  pSid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AllocateAndInitializeSid(util.toPointer(pIdentifierAuthority), nSubAuthorityCount, nSubAuthority0, nSubAuthority1, nSubAuthority2, nSubAuthority3, nSubAuthority4, nSubAuthority5, nSubAuthority6, nSubAuthority7, util.toPointer(pSid)));
}

export function AllocateLocallyUniqueId(
  Luid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AllocateLocallyUniqueId(util.toPointer(Luid)));
}

export function AreAllAccessesGranted(
  GrantedAccess: number /* u32 */,
  DesiredAccess: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AreAllAccessesGranted(GrantedAccess, DesiredAccess));
}

export function AreAnyAccessesGranted(
  GrantedAccess: number /* u32 */,
  DesiredAccess: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AreAnyAccessesGranted(GrantedAccess, DesiredAccess));
}

export function CheckTokenMembership(
  TokenHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SidToCheck: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  IsMember: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CheckTokenMembership(util.toPointer(TokenHandle), util.toPointer(SidToCheck), util.toPointer(IsMember)));
}

export function CheckTokenCapability(
  TokenHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  CapabilitySidToCheck: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  HasCapability: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CheckTokenCapability(util.toPointer(TokenHandle), util.toPointer(CapabilitySidToCheck), util.toPointer(HasCapability)));
}

export function GetAppContainerAce(
  Acl: Deno.PointerValue | Uint8Array | null /* ptr */,
  StartingAceIndex: number /* u32 */,
  AppContainerAce: Deno.PointerValue | Uint8Array | null /* ptr */,
  AppContainerAceIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetAppContainerAce(util.toPointer(Acl), StartingAceIndex, util.toPointer(AppContainerAce), util.toPointer(AppContainerAceIndex)));
}

export function CheckTokenMembershipEx(
  TokenHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SidToCheck: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  Flags: number /* u32 */,
  IsMember: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.CheckTokenMembershipEx(util.toPointer(TokenHandle), util.toPointer(SidToCheck), Flags, util.toPointer(IsMember)));
}

export function ConvertToAutoInheritPrivateObjectSecurity(
  ParentDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  CurrentSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  NewSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectType: Deno.PointerValue | Uint8Array | null /* ptr */,
  IsDirectoryObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ConvertToAutoInheritPrivateObjectSecurity(util.toPointer(ParentDescriptor), util.toPointer(CurrentSecurityDescriptor), util.toPointer(NewSecurityDescriptor), util.toPointer(ObjectType), util.toPointer(IsDirectoryObject), util.toPointer(GenericMapping)));
}

export function CopySid(
  nDestinationSidLength: number /* u32 */,
  pDestinationSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pSourceSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CopySid(nDestinationSidLength, util.toPointer(pDestinationSid), util.toPointer(pSourceSid)));
}

export function CreatePrivateObjectSecurity(
  ParentDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  CreatorDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  NewDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  IsDirectoryObject: boolean /* Windows.Win32.Foundation.BOOL */,
  Token: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CreatePrivateObjectSecurity(util.toPointer(ParentDescriptor), util.toPointer(CreatorDescriptor), util.toPointer(NewDescriptor), util.boolToFfi(IsDirectoryObject), util.toPointer(Token), util.toPointer(GenericMapping)));
}

export function CreatePrivateObjectSecurityEx(
  ParentDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  CreatorDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  NewDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectType: Deno.PointerValue | Uint8Array | null /* ptr */,
  IsContainerObject: boolean /* Windows.Win32.Foundation.BOOL */,
  AutoInheritFlags: SECURITY_AUTO_INHERIT_FLAGS /* Windows.Win32.Security.SECURITY_AUTO_INHERIT_FLAGS */,
  Token: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CreatePrivateObjectSecurityEx(util.toPointer(ParentDescriptor), util.toPointer(CreatorDescriptor), util.toPointer(NewDescriptor), util.toPointer(ObjectType), util.boolToFfi(IsContainerObject), AutoInheritFlags, util.toPointer(Token), util.toPointer(GenericMapping)));
}

export function CreatePrivateObjectSecurityWithMultipleInheritance(
  ParentDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  CreatorDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  NewDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypes: Deno.PointerValue | Uint8Array | null /* ptr */,
  GuidCount: number /* u32 */,
  IsContainerObject: boolean /* Windows.Win32.Foundation.BOOL */,
  AutoInheritFlags: SECURITY_AUTO_INHERIT_FLAGS /* Windows.Win32.Security.SECURITY_AUTO_INHERIT_FLAGS */,
  Token: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CreatePrivateObjectSecurityWithMultipleInheritance(util.toPointer(ParentDescriptor), util.toPointer(CreatorDescriptor), util.toPointer(NewDescriptor), util.toPointer(ObjectTypes), GuidCount, util.boolToFfi(IsContainerObject), AutoInheritFlags, util.toPointer(Token), util.toPointer(GenericMapping)));
}

export function CreateRestrictedToken(
  ExistingTokenHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: CREATE_RESTRICTED_TOKEN_FLAGS /* Windows.Win32.Security.CREATE_RESTRICTED_TOKEN_FLAGS */,
  DisableSidCount: number /* u32 */,
  SidsToDisable: Deno.PointerValue | Uint8Array | null /* ptr */,
  DeletePrivilegeCount: number /* u32 */,
  PrivilegesToDelete: Deno.PointerValue | Uint8Array | null /* ptr */,
  RestrictedSidCount: number /* u32 */,
  SidsToRestrict: Deno.PointerValue | Uint8Array | null /* ptr */,
  NewTokenHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CreateRestrictedToken(util.toPointer(ExistingTokenHandle), Flags, DisableSidCount, util.toPointer(SidsToDisable), DeletePrivilegeCount, util.toPointer(PrivilegesToDelete), RestrictedSidCount, util.toPointer(SidsToRestrict), util.toPointer(NewTokenHandle)));
}

export function CreateWellKnownSid(
  WellKnownSidType: WELL_KNOWN_SID_TYPE /* Windows.Win32.Security.WELL_KNOWN_SID_TYPE */,
  DomainSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  cbSid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.CreateWellKnownSid(WellKnownSidType, util.toPointer(DomainSid), util.toPointer(pSid), util.toPointer(cbSid)));
}

export function EqualDomainSid(
  pSid1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pSid2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pfEqual: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.EqualDomainSid(util.toPointer(pSid1), util.toPointer(pSid2), util.toPointer(pfEqual)));
}

export function DeleteAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceIndex: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.DeleteAce(util.toPointer(pAcl), dwAceIndex));
}

export function DestroyPrivateObjectSecurity(
  ObjectDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.DestroyPrivateObjectSecurity(util.toPointer(ObjectDescriptor)));
}

export function DuplicateToken(
  ExistingTokenHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL /* Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL */,
  DuplicateTokenHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.DuplicateToken(util.toPointer(ExistingTokenHandle), ImpersonationLevel, util.toPointer(DuplicateTokenHandle)));
}

export function DuplicateTokenEx(
  hExistingToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwDesiredAccess: TOKEN_ACCESS_MASK /* Windows.Win32.Security.TOKEN_ACCESS_MASK */,
  lpTokenAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL /* Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL */,
  TokenType: TOKEN_TYPE /* Windows.Win32.Security.TOKEN_TYPE */,
  phNewToken: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.DuplicateTokenEx(util.toPointer(hExistingToken), dwDesiredAccess, util.toPointer(lpTokenAttributes), ImpersonationLevel, TokenType, util.toPointer(phNewToken)));
}

export function EqualPrefixSid(
  pSid1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pSid2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.EqualPrefixSid(util.toPointer(pSid1), util.toPointer(pSid2)));
}

export function EqualSid(
  pSid1: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pSid2: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.EqualSid(util.toPointer(pSid1), util.toPointer(pSid2)));
}

export function FindFirstFreeAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAce: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.FindFirstFreeAce(util.toPointer(pAcl), util.toPointer(pAce)));
}

export function FreeSid(
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libADVAPI32_dll.FreeSid(util.toPointer(pSid)));
}

export function GetAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceIndex: number /* u32 */,
  pAce: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetAce(util.toPointer(pAcl), dwAceIndex, util.toPointer(pAce)));
}

export function GetAclInformation(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAclInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  nAclInformationLength: number /* u32 */,
  dwAclInformationClass: ACL_INFORMATION_CLASS /* Windows.Win32.Security.ACL_INFORMATION_CLASS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetAclInformation(util.toPointer(pAcl), util.toPointer(pAclInformation), nAclInformationLength, dwAclInformationClass));
}

export function GetFileSecurityW(
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  RequestedInformation: number /* u32 */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  nLength: number /* u32 */,
  lpnLengthNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetFileSecurityW(util.pwstrToFfi(lpFileName), RequestedInformation, util.toPointer(pSecurityDescriptor), nLength, util.toPointer(lpnLengthNeeded)));
}

export function GetKernelObjectSecurity(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RequestedInformation: number /* u32 */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  nLength: number /* u32 */,
  lpnLengthNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetKernelObjectSecurity(util.toPointer(Handle), RequestedInformation, util.toPointer(pSecurityDescriptor), nLength, util.toPointer(lpnLengthNeeded)));
}

export function GetLengthSid(
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): number /* u32 */ {
  return libADVAPI32_dll.GetLengthSid(util.toPointer(pSid));
}

export function GetPrivateObjectSecurity(
  ObjectDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  SecurityInformation: number /* u32 */,
  ResultantDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  DescriptorLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetPrivateObjectSecurity(util.toPointer(ObjectDescriptor), SecurityInformation, util.toPointer(ResultantDescriptor), DescriptorLength, util.toPointer(ReturnLength)));
}

export function GetSecurityDescriptorControl(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  pControl: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwRevision: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetSecurityDescriptorControl(util.toPointer(pSecurityDescriptor), util.toPointer(pControl), util.toPointer(lpdwRevision)));
}

export function GetSecurityDescriptorDacl(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  lpbDaclPresent: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpbDaclDefaulted: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetSecurityDescriptorDacl(util.toPointer(pSecurityDescriptor), util.toPointer(lpbDaclPresent), util.toPointer(pDacl), util.toPointer(lpbDaclDefaulted)));
}

export function GetSecurityDescriptorGroup(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  pGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpbGroupDefaulted: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetSecurityDescriptorGroup(util.toPointer(pSecurityDescriptor), util.toPointer(pGroup), util.toPointer(lpbGroupDefaulted)));
}

export function GetSecurityDescriptorLength(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
): number /* u32 */ {
  return libADVAPI32_dll.GetSecurityDescriptorLength(util.toPointer(pSecurityDescriptor));
}

export function GetSecurityDescriptorOwner(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  pOwner: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpbOwnerDefaulted: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetSecurityDescriptorOwner(util.toPointer(pSecurityDescriptor), util.toPointer(pOwner), util.toPointer(lpbOwnerDefaulted)));
}

export function GetSecurityDescriptorRMControl(
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  RMControl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.GetSecurityDescriptorRMControl(util.toPointer(SecurityDescriptor), util.toPointer(RMControl));
}

export function GetSecurityDescriptorSacl(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  lpbSaclPresent: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpbSaclDefaulted: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetSecurityDescriptorSacl(util.toPointer(pSecurityDescriptor), util.toPointer(lpbSaclPresent), util.toPointer(pSacl), util.toPointer(lpbSaclDefaulted)));
}

export function GetSidIdentifierAuthority(
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libADVAPI32_dll.GetSidIdentifierAuthority(util.toPointer(pSid)));
}

export function GetSidLengthRequired(
  nSubAuthorityCount: number /* u8 */,
): number /* u32 */ {
  return libADVAPI32_dll.GetSidLengthRequired(nSubAuthorityCount);
}

export function GetSidSubAuthority(
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  nSubAuthority: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libADVAPI32_dll.GetSidSubAuthority(util.toPointer(pSid), nSubAuthority));
}

export function GetSidSubAuthorityCount(
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libADVAPI32_dll.GetSidSubAuthorityCount(util.toPointer(pSid)));
}

export function GetTokenInformation(
  TokenHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  TokenInformationClass: TOKEN_INFORMATION_CLASS /* Windows.Win32.Security.TOKEN_INFORMATION_CLASS */,
  TokenInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  TokenInformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetTokenInformation(util.toPointer(TokenHandle), TokenInformationClass, util.toPointer(TokenInformation), TokenInformationLength, util.toPointer(ReturnLength)));
}

export function GetWindowsAccountDomainSid(
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pDomainSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  cbDomainSid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetWindowsAccountDomainSid(util.toPointer(pSid), util.toPointer(pDomainSid), util.toPointer(cbDomainSid)));
}

export function ImpersonateAnonymousToken(
  ThreadHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ImpersonateAnonymousToken(util.toPointer(ThreadHandle)));
}

export function ImpersonateLoggedOnUser(
  hToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ImpersonateLoggedOnUser(util.toPointer(hToken)));
}

export function ImpersonateSelf(
  ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL /* Windows.Win32.Security.SECURITY_IMPERSONATION_LEVEL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ImpersonateSelf(ImpersonationLevel));
}

export function InitializeAcl(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  nAclLength: number /* u32 */,
  dwAclRevision: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.InitializeAcl(util.toPointer(pAcl), nAclLength, dwAclRevision));
}

export function InitializeSecurityDescriptor(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  dwRevision: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.InitializeSecurityDescriptor(util.toPointer(pSecurityDescriptor), dwRevision));
}

export function InitializeSid(
  Sid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  pIdentifierAuthority: Deno.PointerValue | Uint8Array | null /* ptr */,
  nSubAuthorityCount: number /* u8 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.InitializeSid(util.toPointer(Sid), util.toPointer(pIdentifierAuthority), nSubAuthorityCount));
}

export function IsTokenRestricted(
  TokenHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.IsTokenRestricted(util.toPointer(TokenHandle)));
}

export function IsValidAcl(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.IsValidAcl(util.toPointer(pAcl)));
}

export function IsValidSecurityDescriptor(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.IsValidSecurityDescriptor(util.toPointer(pSecurityDescriptor)));
}

export function IsValidSid(
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.IsValidSid(util.toPointer(pSid)));
}

export function IsWellKnownSid(
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  WellKnownSidType: WELL_KNOWN_SID_TYPE /* Windows.Win32.Security.WELL_KNOWN_SID_TYPE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.IsWellKnownSid(util.toPointer(pSid), WellKnownSidType));
}

export function MakeAbsoluteSD(
  pSelfRelativeSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  pAbsoluteSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  lpdwAbsoluteSecurityDescriptorSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwDaclSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwSaclSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pOwner: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  lpdwOwnerSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPrimaryGroup: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  lpdwPrimaryGroupSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.MakeAbsoluteSD(util.toPointer(pSelfRelativeSecurityDescriptor), util.toPointer(pAbsoluteSecurityDescriptor), util.toPointer(lpdwAbsoluteSecurityDescriptorSize), util.toPointer(pDacl), util.toPointer(lpdwDaclSize), util.toPointer(pSacl), util.toPointer(lpdwSaclSize), util.toPointer(pOwner), util.toPointer(lpdwOwnerSize), util.toPointer(pPrimaryGroup), util.toPointer(lpdwPrimaryGroupSize)));
}

export function MakeSelfRelativeSD(
  pAbsoluteSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  pSelfRelativeSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.MakeSelfRelativeSD(util.toPointer(pAbsoluteSecurityDescriptor), util.toPointer(pSelfRelativeSecurityDescriptor), util.toPointer(lpdwBufferLength)));
}

export function MapGenericMask(
  AccessMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libADVAPI32_dll.MapGenericMask(util.toPointer(AccessMask), util.toPointer(GenericMapping));
}

export function ObjectCloseAuditAlarmW(
  SubsystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  GenerateOnClose: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ObjectCloseAuditAlarmW(util.pwstrToFfi(SubsystemName), util.toPointer(HandleId), util.boolToFfi(GenerateOnClose)));
}

export function ObjectDeleteAuditAlarmW(
  SubsystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  GenerateOnClose: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ObjectDeleteAuditAlarmW(util.pwstrToFfi(SubsystemName), util.toPointer(HandleId), util.boolToFfi(GenerateOnClose)));
}

export function ObjectOpenAuditAlarmW(
  SubsystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ObjectName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  ClientToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DesiredAccess: number /* u32 */,
  GrantedAccess: number /* u32 */,
  Privileges: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectCreation: boolean /* Windows.Win32.Foundation.BOOL */,
  AccessGranted: boolean /* Windows.Win32.Foundation.BOOL */,
  GenerateOnClose: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ObjectOpenAuditAlarmW(util.pwstrToFfi(SubsystemName), util.toPointer(HandleId), util.pwstrToFfi(ObjectTypeName), util.pwstrToFfi(ObjectName), util.toPointer(pSecurityDescriptor), util.toPointer(ClientToken), DesiredAccess, GrantedAccess, util.toPointer(Privileges), util.boolToFfi(ObjectCreation), util.boolToFfi(AccessGranted), util.toPointer(GenerateOnClose)));
}

export function ObjectPrivilegeAuditAlarmW(
  SubsystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClientToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DesiredAccess: number /* u32 */,
  Privileges: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessGranted: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ObjectPrivilegeAuditAlarmW(util.pwstrToFfi(SubsystemName), util.toPointer(HandleId), util.toPointer(ClientToken), DesiredAccess, util.toPointer(Privileges), util.boolToFfi(AccessGranted)));
}

export function PrivilegeCheck(
  ClientToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RequiredPrivileges: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.PrivilegeCheck(util.toPointer(ClientToken), util.toPointer(RequiredPrivileges), util.toPointer(pfResult)));
}

export function PrivilegedServiceAuditAlarmW(
  SubsystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ServiceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ClientToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Privileges: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessGranted: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.PrivilegedServiceAuditAlarmW(util.pwstrToFfi(SubsystemName), util.pwstrToFfi(ServiceName), util.toPointer(ClientToken), util.toPointer(Privileges), util.boolToFfi(AccessGranted)));
}

export function QuerySecurityAccessMask(
  SecurityInformation: number /* u32 */,
  DesiredAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libADVAPI32_dll.QuerySecurityAccessMask(SecurityInformation, util.toPointer(DesiredAccess));
}

export function RevertToSelf(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.RevertToSelf());
}

export function SetAclInformation(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAclInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  nAclInformationLength: number /* u32 */,
  dwAclInformationClass: ACL_INFORMATION_CLASS /* Windows.Win32.Security.ACL_INFORMATION_CLASS */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetAclInformation(util.toPointer(pAcl), util.toPointer(pAclInformation), nAclInformationLength, dwAclInformationClass));
}

export function SetFileSecurityW(
  lpFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SecurityInformation: number /* u32 */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetFileSecurityW(util.pwstrToFfi(lpFileName), SecurityInformation, util.toPointer(pSecurityDescriptor)));
}

export function SetKernelObjectSecurity(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  SecurityInformation: number /* u32 */,
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetKernelObjectSecurity(util.toPointer(Handle), SecurityInformation, util.toPointer(SecurityDescriptor)));
}

export function SetPrivateObjectSecurity(
  SecurityInformation: number /* u32 */,
  ModificationDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  ObjectsSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  Token: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetPrivateObjectSecurity(SecurityInformation, util.toPointer(ModificationDescriptor), util.toPointer(ObjectsSecurityDescriptor), util.toPointer(GenericMapping), util.toPointer(Token)));
}

export function SetPrivateObjectSecurityEx(
  SecurityInformation: number /* u32 */,
  ModificationDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  ObjectsSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  AutoInheritFlags: SECURITY_AUTO_INHERIT_FLAGS /* Windows.Win32.Security.SECURITY_AUTO_INHERIT_FLAGS */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  Token: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetPrivateObjectSecurityEx(SecurityInformation, util.toPointer(ModificationDescriptor), util.toPointer(ObjectsSecurityDescriptor), AutoInheritFlags, util.toPointer(GenericMapping), util.toPointer(Token)));
}

export function SetSecurityAccessMask(
  SecurityInformation: number /* u32 */,
  DesiredAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libADVAPI32_dll.SetSecurityAccessMask(SecurityInformation, util.toPointer(DesiredAccess));
}

export function SetSecurityDescriptorControl(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  ControlBitsOfInterest: number /* u16 */,
  ControlBitsToSet: number /* u16 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetSecurityDescriptorControl(util.toPointer(pSecurityDescriptor), ControlBitsOfInterest, ControlBitsToSet));
}

export function SetSecurityDescriptorDacl(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  bDaclPresent: boolean /* Windows.Win32.Foundation.BOOL */,
  pDacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  bDaclDefaulted: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetSecurityDescriptorDacl(util.toPointer(pSecurityDescriptor), util.boolToFfi(bDaclPresent), util.toPointer(pDacl), util.boolToFfi(bDaclDefaulted)));
}

export function SetSecurityDescriptorGroup(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  pGroup: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  bGroupDefaulted: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetSecurityDescriptorGroup(util.toPointer(pSecurityDescriptor), util.toPointer(pGroup), util.boolToFfi(bGroupDefaulted)));
}

export function SetSecurityDescriptorOwner(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  pOwner: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  bOwnerDefaulted: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetSecurityDescriptorOwner(util.toPointer(pSecurityDescriptor), util.toPointer(pOwner), util.boolToFfi(bOwnerDefaulted)));
}

export function SetSecurityDescriptorRMControl(
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  RMControl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libADVAPI32_dll.SetSecurityDescriptorRMControl(util.toPointer(SecurityDescriptor), util.toPointer(RMControl));
}

export function SetSecurityDescriptorSacl(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  bSaclPresent: boolean /* Windows.Win32.Foundation.BOOL */,
  pSacl: Deno.PointerValue | Uint8Array | null /* ptr */,
  bSaclDefaulted: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetSecurityDescriptorSacl(util.toPointer(pSecurityDescriptor), util.boolToFfi(bSaclPresent), util.toPointer(pSacl), util.boolToFfi(bSaclDefaulted)));
}

export function SetTokenInformation(
  TokenHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  TokenInformationClass: TOKEN_INFORMATION_CLASS /* Windows.Win32.Security.TOKEN_INFORMATION_CLASS */,
  TokenInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  TokenInformationLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetTokenInformation(util.toPointer(TokenHandle), TokenInformationClass, util.toPointer(TokenInformation), TokenInformationLength));
}

export function SetCachedSigningLevel(
  SourceFiles: Deno.PointerValue | Uint8Array | null /* ptr */,
  SourceFileCount: number /* u32 */,
  Flags: number /* u32 */,
  TargetFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.SetCachedSigningLevel(util.toPointer(SourceFiles), SourceFileCount, Flags, util.toPointer(TargetFile)));
}

export function GetCachedSigningLevel(
  File: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Flags: Deno.PointerValue | Uint8Array | null /* ptr */,
  SigningLevel: Deno.PointerValue | Uint8Array | null /* ptr */,
  Thumbprint: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThumbprintSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  ThumbprintAlgorithm: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libKERNEL32_dll.GetCachedSigningLevel(util.toPointer(File), util.toPointer(Flags), util.toPointer(SigningLevel), util.toPointer(Thumbprint), util.toPointer(ThumbprintSize), util.toPointer(ThumbprintAlgorithm)));
}

export function DeriveCapabilitySidsFromName(
  CapName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  CapabilityGroupSids: Deno.PointerValue | Uint8Array | null /* ptr */,
  CapabilityGroupSidCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  CapabilitySids: Deno.PointerValue | Uint8Array | null /* ptr */,
  CapabilitySidCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libapi_ms_win_security_base_l1_2_2_dll.DeriveCapabilitySidsFromName(util.pwstrToFfi(CapName), util.toPointer(CapabilityGroupSids), util.toPointer(CapabilityGroupSidCount), util.toPointer(CapabilitySids), util.toPointer(CapabilitySidCount)));
}

export function RtlNormalizeSecurityDescriptor(
  SecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityDescriptorLength: number /* u32 */,
  NewSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  NewSecurityDescriptorLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  CheckOnly: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */ {
  return util.pointerFromFfi(libntdll_dll.RtlNormalizeSecurityDescriptor(util.toPointer(SecurityDescriptor), SecurityDescriptorLength, util.toPointer(NewSecurityDescriptor), util.toPointer(NewSecurityDescriptorLength), util.toPointer(CheckOnly)));
}

export function SetUserObjectSecurity(
  hObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pSIRequested: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSID: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.SetUserObjectSecurity(util.toPointer(hObj), util.toPointer(pSIRequested), util.toPointer(pSID)));
}

export function GetUserObjectSecurity(
  hObj: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pSIRequested: Deno.PointerValue | Uint8Array | null /* ptr */,
  pSID: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  nLength: number /* u32 */,
  lpnLengthNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libUSER32_dll.GetUserObjectSecurity(util.toPointer(hObj), util.toPointer(pSIRequested), util.toPointer(pSID), nLength, util.toPointer(lpnLengthNeeded)));
}

export function AccessCheckAndAuditAlarmA(
  SubsystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ObjectName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  DesiredAccess: number /* u32 */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectCreation: boolean /* Windows.Win32.Foundation.BOOL */,
  GrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfGenerateOnClose: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AccessCheckAndAuditAlarmA(util.pstrToFfi(SubsystemName), util.toPointer(HandleId), util.pstrToFfi(ObjectTypeName), util.pstrToFfi(ObjectName), util.toPointer(SecurityDescriptor), DesiredAccess, util.toPointer(GenericMapping), util.boolToFfi(ObjectCreation), util.toPointer(GrantedAccess), util.toPointer(AccessStatus), util.toPointer(pfGenerateOnClose)));
}

export function AccessCheckByTypeAndAuditAlarmA(
  SubsystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ObjectName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  PrincipalSelfSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  DesiredAccess: number /* u32 */,
  AuditType: AUDIT_EVENT_TYPE /* Windows.Win32.Security.AUDIT_EVENT_TYPE */,
  Flags: number /* u32 */,
  ObjectTypeList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeListLength: number /* u32 */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectCreation: boolean /* Windows.Win32.Foundation.BOOL */,
  GrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfGenerateOnClose: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AccessCheckByTypeAndAuditAlarmA(util.pstrToFfi(SubsystemName), util.toPointer(HandleId), util.pstrToFfi(ObjectTypeName), util.pstrToFfi(ObjectName), util.toPointer(SecurityDescriptor), util.toPointer(PrincipalSelfSid), DesiredAccess, AuditType, Flags, util.toPointer(ObjectTypeList), ObjectTypeListLength, util.toPointer(GenericMapping), util.boolToFfi(ObjectCreation), util.toPointer(GrantedAccess), util.toPointer(AccessStatus), util.toPointer(pfGenerateOnClose)));
}

export function AccessCheckByTypeResultListAndAuditAlarmA(
  SubsystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ObjectName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  PrincipalSelfSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  DesiredAccess: number /* u32 */,
  AuditType: AUDIT_EVENT_TYPE /* Windows.Win32.Security.AUDIT_EVENT_TYPE */,
  Flags: number /* u32 */,
  ObjectTypeList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeListLength: number /* u32 */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectCreation: boolean /* Windows.Win32.Foundation.BOOL */,
  GrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessStatusList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfGenerateOnClose: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AccessCheckByTypeResultListAndAuditAlarmA(util.pstrToFfi(SubsystemName), util.toPointer(HandleId), util.pstrToFfi(ObjectTypeName), util.pstrToFfi(ObjectName), util.toPointer(SecurityDescriptor), util.toPointer(PrincipalSelfSid), DesiredAccess, AuditType, Flags, util.toPointer(ObjectTypeList), ObjectTypeListLength, util.toPointer(GenericMapping), util.boolToFfi(ObjectCreation), util.toPointer(GrantedAccess), util.toPointer(AccessStatusList), util.toPointer(pfGenerateOnClose)));
}

export function AccessCheckByTypeResultListAndAuditAlarmByHandleA(
  SubsystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClientToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ObjectTypeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ObjectName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  PrincipalSelfSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  DesiredAccess: number /* u32 */,
  AuditType: AUDIT_EVENT_TYPE /* Windows.Win32.Security.AUDIT_EVENT_TYPE */,
  Flags: number /* u32 */,
  ObjectTypeList: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeListLength: number /* u32 */,
  GenericMapping: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectCreation: boolean /* Windows.Win32.Foundation.BOOL */,
  GrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessStatusList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfGenerateOnClose: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AccessCheckByTypeResultListAndAuditAlarmByHandleA(util.pstrToFfi(SubsystemName), util.toPointer(HandleId), util.toPointer(ClientToken), util.pstrToFfi(ObjectTypeName), util.pstrToFfi(ObjectName), util.toPointer(SecurityDescriptor), util.toPointer(PrincipalSelfSid), DesiredAccess, AuditType, Flags, util.toPointer(ObjectTypeList), ObjectTypeListLength, util.toPointer(GenericMapping), util.boolToFfi(ObjectCreation), util.toPointer(GrantedAccess), util.toPointer(AccessStatusList), util.toPointer(pfGenerateOnClose)));
}

export function ObjectOpenAuditAlarmA(
  SubsystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectTypeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ObjectName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  ClientToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DesiredAccess: number /* u32 */,
  GrantedAccess: number /* u32 */,
  Privileges: Deno.PointerValue | Uint8Array | null /* ptr */,
  ObjectCreation: boolean /* Windows.Win32.Foundation.BOOL */,
  AccessGranted: boolean /* Windows.Win32.Foundation.BOOL */,
  GenerateOnClose: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ObjectOpenAuditAlarmA(util.pstrToFfi(SubsystemName), util.toPointer(HandleId), util.pstrToFfi(ObjectTypeName), util.pstrToFfi(ObjectName), util.toPointer(pSecurityDescriptor), util.toPointer(ClientToken), DesiredAccess, GrantedAccess, util.toPointer(Privileges), util.boolToFfi(ObjectCreation), util.boolToFfi(AccessGranted), util.toPointer(GenerateOnClose)));
}

export function ObjectPrivilegeAuditAlarmA(
  SubsystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClientToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DesiredAccess: number /* u32 */,
  Privileges: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessGranted: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ObjectPrivilegeAuditAlarmA(util.pstrToFfi(SubsystemName), util.toPointer(HandleId), util.toPointer(ClientToken), DesiredAccess, util.toPointer(Privileges), util.boolToFfi(AccessGranted)));
}

export function ObjectCloseAuditAlarmA(
  SubsystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  GenerateOnClose: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ObjectCloseAuditAlarmA(util.pstrToFfi(SubsystemName), util.toPointer(HandleId), util.boolToFfi(GenerateOnClose)));
}

export function ObjectDeleteAuditAlarmA(
  SubsystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  HandleId: Deno.PointerValue | Uint8Array | null /* ptr */,
  GenerateOnClose: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.ObjectDeleteAuditAlarmA(util.pstrToFfi(SubsystemName), util.toPointer(HandleId), util.boolToFfi(GenerateOnClose)));
}

export function PrivilegedServiceAuditAlarmA(
  SubsystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ServiceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ClientToken: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Privileges: Deno.PointerValue | Uint8Array | null /* ptr */,
  AccessGranted: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.PrivilegedServiceAuditAlarmA(util.pstrToFfi(SubsystemName), util.pstrToFfi(ServiceName), util.toPointer(ClientToken), util.toPointer(Privileges), util.boolToFfi(AccessGranted)));
}

export function AddConditionalAce(
  pAcl: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAceRevision: number /* u32 */,
  AceFlags: ACE_FLAGS /* Windows.Win32.Security.ACE_FLAGS */,
  AceType: number /* u8 */,
  AccessMask: number /* u32 */,
  pSid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  ConditionStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.AddConditionalAce(util.toPointer(pAcl), dwAceRevision, AceFlags, AceType, AccessMask, util.toPointer(pSid), util.pwstrToFfi(ConditionStr), util.toPointer(ReturnLength)));
}

export function SetFileSecurityA(
  lpFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SecurityInformation: number /* u32 */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.SetFileSecurityA(util.pstrToFfi(lpFileName), SecurityInformation, util.toPointer(pSecurityDescriptor)));
}

export function GetFileSecurityA(
  lpFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  RequestedInformation: number /* u32 */,
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  nLength: number /* u32 */,
  lpnLengthNeeded: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.GetFileSecurityA(util.pstrToFfi(lpFileName), RequestedInformation, util.toPointer(pSecurityDescriptor), nLength, util.toPointer(lpnLengthNeeded)));
}

export function LookupAccountSidA(
  lpSystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Sid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  Name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReferencedDomainName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchReferencedDomainName: Deno.PointerValue | Uint8Array | null /* ptr */,
  peUse: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LookupAccountSidA(util.pstrToFfi(lpSystemName), util.toPointer(Sid), util.pstrToFfi(Name), util.toPointer(cchName), util.pstrToFfi(ReferencedDomainName), util.toPointer(cchReferencedDomainName), util.toPointer(peUse)));
}

export function LookupAccountSidW(
  lpSystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Sid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReferencedDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchReferencedDomainName: Deno.PointerValue | Uint8Array | null /* ptr */,
  peUse: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LookupAccountSidW(util.pwstrToFfi(lpSystemName), util.toPointer(Sid), util.pwstrToFfi(Name), util.toPointer(cchName), util.pwstrToFfi(ReferencedDomainName), util.toPointer(cchReferencedDomainName), util.toPointer(peUse)));
}

export function LookupAccountNameA(
  lpSystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpAccountName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Sid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  cbSid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReferencedDomainName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchReferencedDomainName: Deno.PointerValue | Uint8Array | null /* ptr */,
  peUse: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LookupAccountNameA(util.pstrToFfi(lpSystemName), util.pstrToFfi(lpAccountName), util.toPointer(Sid), util.toPointer(cbSid), util.pstrToFfi(ReferencedDomainName), util.toPointer(cchReferencedDomainName), util.toPointer(peUse)));
}

export function LookupAccountNameW(
  lpSystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpAccountName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Sid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  cbSid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ReferencedDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchReferencedDomainName: Deno.PointerValue | Uint8Array | null /* ptr */,
  peUse: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LookupAccountNameW(util.pwstrToFfi(lpSystemName), util.pwstrToFfi(lpAccountName), util.toPointer(Sid), util.toPointer(cbSid), util.pwstrToFfi(ReferencedDomainName), util.toPointer(cchReferencedDomainName), util.toPointer(peUse)));
}

export function LookupPrivilegeValueA(
  lpSystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpLuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LookupPrivilegeValueA(util.pstrToFfi(lpSystemName), util.pstrToFfi(lpName), util.toPointer(lpLuid)));
}

export function LookupPrivilegeValueW(
  lpSystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpLuid: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LookupPrivilegeValueW(util.pwstrToFfi(lpSystemName), util.pwstrToFfi(lpName), util.toPointer(lpLuid)));
}

export function LookupPrivilegeNameA(
  lpSystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpLuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LookupPrivilegeNameA(util.pstrToFfi(lpSystemName), util.toPointer(lpLuid), util.pstrToFfi(lpName), util.toPointer(cchName)));
}

export function LookupPrivilegeNameW(
  lpSystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpLuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LookupPrivilegeNameW(util.pwstrToFfi(lpSystemName), util.toPointer(lpLuid), util.pwstrToFfi(lpName), util.toPointer(cchName)));
}

export function LookupPrivilegeDisplayNameA(
  lpSystemName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpDisplayName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchDisplayName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpLanguageId: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LookupPrivilegeDisplayNameA(util.pstrToFfi(lpSystemName), util.pstrToFfi(lpName), util.pstrToFfi(lpDisplayName), util.toPointer(cchDisplayName), util.toPointer(lpLanguageId)));
}

export function LookupPrivilegeDisplayNameW(
  lpSystemName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpDisplayName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchDisplayName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpLanguageId: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LookupPrivilegeDisplayNameW(util.pwstrToFfi(lpSystemName), util.pwstrToFfi(lpName), util.pwstrToFfi(lpDisplayName), util.toPointer(cchDisplayName), util.toPointer(lpLanguageId)));
}

export function LogonUserA(
  lpszUsername: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszDomain: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszPassword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwLogonType: LOGON32_LOGON /* Windows.Win32.Security.LOGON32_LOGON */,
  dwLogonProvider: LOGON32_PROVIDER /* Windows.Win32.Security.LOGON32_PROVIDER */,
  phToken: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LogonUserA(util.pstrToFfi(lpszUsername), util.pstrToFfi(lpszDomain), util.pstrToFfi(lpszPassword), dwLogonType, dwLogonProvider, util.toPointer(phToken)));
}

export function LogonUserW(
  lpszUsername: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszDomain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwLogonType: LOGON32_LOGON /* Windows.Win32.Security.LOGON32_LOGON */,
  dwLogonProvider: LOGON32_PROVIDER /* Windows.Win32.Security.LOGON32_PROVIDER */,
  phToken: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LogonUserW(util.pwstrToFfi(lpszUsername), util.pwstrToFfi(lpszDomain), util.pwstrToFfi(lpszPassword), dwLogonType, dwLogonProvider, util.toPointer(phToken)));
}

export function LogonUserExA(
  lpszUsername: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszDomain: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszPassword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwLogonType: LOGON32_LOGON /* Windows.Win32.Security.LOGON32_LOGON */,
  dwLogonProvider: LOGON32_PROVIDER /* Windows.Win32.Security.LOGON32_PROVIDER */,
  phToken: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppLogonSid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppProfileBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwProfileLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  pQuotaLimits: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LogonUserExA(util.pstrToFfi(lpszUsername), util.pstrToFfi(lpszDomain), util.pstrToFfi(lpszPassword), dwLogonType, dwLogonProvider, util.toPointer(phToken), util.toPointer(ppLogonSid), util.toPointer(ppProfileBuffer), util.toPointer(pdwProfileLength), util.toPointer(pQuotaLimits)));
}

export function LogonUserExW(
  lpszUsername: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszDomain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwLogonType: LOGON32_LOGON /* Windows.Win32.Security.LOGON32_LOGON */,
  dwLogonProvider: LOGON32_PROVIDER /* Windows.Win32.Security.LOGON32_PROVIDER */,
  phToken: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppLogonSid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppProfileBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwProfileLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  pQuotaLimits: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libADVAPI32_dll.LogonUserExW(util.pwstrToFfi(lpszUsername), util.pwstrToFfi(lpszDomain), util.pwstrToFfi(lpszPassword), dwLogonType, dwLogonProvider, util.toPointer(phToken), util.toPointer(ppLogonSid), util.toPointer(ppProfileBuffer), util.toPointer(pdwProfileLength), util.toPointer(pQuotaLimits)));
}

export function RtlConvertSidToUnicodeString(
  UnicodeString: Deno.PointerValue | Uint8Array | null /* ptr */,
  Sid: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.PSID */,
  AllocateDestinationString: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.NTSTATUS */ {
  return util.pointerFromFfi(libntdll_dll.RtlConvertSidToUnicodeString(util.toPointer(UnicodeString), util.toPointer(Sid), util.toPointer(AllocateDestinationString)));
}

