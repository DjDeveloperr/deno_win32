/// Auto-generated by Deno Win32: Windows.Win32.Networking.Clustering.Apis

import * as util from "../../util.ts";

// Enums
export type CLUSTER_QUORUM_TYPE = number;
export type NODE_CLUSTER_STATE = number;
export type CLUSTER_RESOURCE_STATE_CHANGE_REASON = number;
export type CLUSTER_REG_COMMAND = number;
export type CLUSGROUP_TYPE = number;
export type CLUSTER_MGMT_POINT_TYPE = number;
export type CLUSTER_MGMT_POINT_RESTYPE = number;
export type CLUSTER_CLOUD_TYPE = number;
export type CLUS_GROUP_START_SETTING = number;
export type CLUS_AFFINITY_RULE_TYPE = number;
export type CLUSTER_QUORUM_VALUE = number;
export type CLUSTER_UPGRADE_PHASE = number;
export type CLUSTER_CHANGE = number;
export type CLUSTER_NOTIFICATIONS_VERSION = number;
export type CLUSTER_CHANGE_CLUSTER_V2 = number;
export type CLUSTER_CHANGE_GROUP_V2 = number;
export type CLUSTER_CHANGE_GROUPSET_V2 = number;
export type CLUSTER_CHANGE_RESOURCE_V2 = number;
export type CLUSTER_CHANGE_RESOURCE_TYPE_V2 = number;
export type CLUSTER_CHANGE_NETINTERFACE_V2 = number;
export type CLUSTER_CHANGE_NETWORK_V2 = number;
export type CLUSTER_CHANGE_NODE_V2 = number;
export type CLUSTER_CHANGE_REGISTRY_V2 = number;
export type CLUSTER_CHANGE_QUORUM_V2 = number;
export type CLUSTER_CHANGE_SHARED_VOLUME_V2 = number;
export type CLUSTER_CHANGE_SPACEPORT_V2 = number;
export type CLUSTER_CHANGE_NODE_UPGRADE_PHASE_V2 = number;
export type CLUSTER_OBJECT_TYPE = number;
export type CLUSTERSET_OBJECT_TYPE = number;
export type CLUSTER_ENUM = number;
export type CLUSTER_NODE_ENUM = number;
export type CLUSTER_NODE_STATE = number;
export type CLUSTER_STORAGENODE_STATE = number;
export type CLUSTER_NODE_DRAIN_STATUS = number;
export type CLUSTER_NODE_STATUS = number;
export type CLUSTER_GROUP_ENUM = number;
export type CLUSTER_GROUP_STATE = number;
export type CLUSTER_GROUP_PRIORITY = number;
export type CLUSTER_GROUP_AUTOFAILBACK_TYPE = number;
export type CLUSTER_NODE_RESUME_FAILBACK_TYPE = number;
export type CLUSTER_RESOURCE_STATE = number;
export type CLUSTER_RESOURCE_RESTART_ACTION = number;
export type CLUSTER_RESOURCE_EMBEDDED_FAILURE_ACTION = number;
export type CLUSTER_RESOURCE_CREATE_FLAGS = number;
export type CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE = number;
export type CLUSTER_PROPERTY_TYPE = number;
export type CLUSTER_PROPERTY_FORMAT = number;
export type CLUSTER_PROPERTY_SYNTAX = number;
export type CLUSTER_CONTROL_OBJECT = number;
export type CLCTL_CODES = number;
export type CLUSCTL_RESOURCE_CODES = number;
export type CLUSCTL_RESOURCE_TYPE_CODES = number;
export type CLUSCTL_GROUP_CODES = number;
export type CLUSCTL_NODE_CODES = number;
export type CLUSCTL_NETWORK_CODES = number;
export type CLUSCTL_NETINTERFACE_CODES = number;
export type CLUSCTL_CLUSTER_CODES = number;
export type CLUSCTL_GROUPSET_CODES = number;
export type CLUSCTL_AFFINITYRULE_CODES = number;
export type CLUSTER_RESOURCE_CLASS = number;
export type CLUS_RESSUBCLASS = number;
export type CLUS_RESSUBCLASS_STORAGE = number;
export type CLUS_RESSUBCLASS_NETWORK = number;
export type CLUS_CHARACTERISTICS = number;
export type CLUS_FLAGS = number;
export type CLUSPROP_PIFLAGS = number;
export type CLUSTER_CSV_VOLUME_FAULT_STATE = number;
export type CLUSTER_SHARED_VOLUME_BACKUP_STATE = number;
export type CLUSTER_SHARED_VOLUME_STATE = number;
export type CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE = number;
export type MAINTENANCE_MODE_TYPE_ENUM = number;
export type CLUSPROP_IPADDR_ENABLENETBIOS = number;
export type FILESHARE_CHANGE_ENUM = number;
export type CLUSTER_RESOURCE_ENUM = number;
export type CLUSTER_RESOURCE_TYPE_ENUM = number;
export type CLUSTER_NETWORK_ENUM = number;
export type CLUSTER_NETWORK_STATE = number;
export type CLUSTER_NETWORK_ROLE = number;
export type CLUSTER_NETINTERFACE_STATE = number;
export type CLUSTER_SETUP_PHASE = number;
export type CLUSTER_SETUP_PHASE_TYPE = number;
export type CLUSTER_SETUP_PHASE_SEVERITY = number;
export type PLACEMENT_OPTIONS = number;
export type GRP_PLACEMENT_OPTIONS = number;
export type SR_REPLICATED_DISK_TYPE = number;
export type SR_DISK_REPLICATION_ELIGIBLE = number;
export type VM_RESDLL_CONTEXT = number;
export type RESDLL_CONTEXT_OPERATION_TYPE = number;
export type LOG_LEVEL = number;
export type RESOURCE_EXIT_STATE = number;
export type FAILURE_TYPE = number;
export type CLUSTER_RESOURCE_APPLICATION_STATE = number;
export type RESOURCE_MONITOR_STATE = number;
export type CLUSTER_ROLE = number;
export type CLUSTER_ROLE_STATE = number;
export type CLUADMEX_OBJECT_TYPE = number;

// Constants
export const CLUSTER_VERSION_FLAG_MIXED_MODE = 1;
export const CLUSTER_VERSION_UNKNOWN = 4294967295;
export const NT4_MAJOR_VERSION = 1;
export const NT4SP4_MAJOR_VERSION = 2;
export const NT5_MAJOR_VERSION = 3;
export const NT51_MAJOR_VERSION = 4;
export const NT6_MAJOR_VERSION = 5;
export const NT7_MAJOR_VERSION = 6;
export const NT8_MAJOR_VERSION = 7;
export const NT9_MAJOR_VERSION = 8;
export const NT10_MAJOR_VERSION = 9;
export const NT11_MAJOR_VERSION = 10;
export const NT12_MAJOR_VERSION = 11;
export const NT13_MAJOR_VERSION = 12;
export const WS2016_TP4_UPGRADE_VERSION = 6;
export const WS2016_TP5_UPGRADE_VERSION = 7;
export const WS2016_RTM_UPGRADE_VERSION = 8;
export const RS3_UPGRADE_VERSION = 1;
export const RS4_UPGRADE_VERSION = 2;
export const RS5_UPGRADE_VERSION = 3;
export const NINETEEN_H1_UPGRADE_VERSION = 1;
export const NINETEEN_H2_UPGRADE_VERSION = 2;
export const MN_UPGRADE_VERSION = 3;
export const FE_UPGRADE_VERSION = 4;
export const CA_UPGRADE_VERSION = 1;
export const HCI_UPGRADE_BIT = 32768;
export const CLUSAPI_VERSION_SERVER2008 = 1536;
export const CLUSAPI_VERSION_SERVER2008R2 = 1792;
export const CLUSAPI_VERSION_WINDOWS8 = 1793;
export const CLUSAPI_VERSION_WINDOWSBLUE = 1794;
export const CLUSAPI_VERSION_WINTHRESHOLD = 1795;
export const CLUSAPI_VERSION_RS3 = 2560;
export const CLUSAPI_VERSION = 2560;
export const CREATE_CLUSTER_VERSION = 1536;
export const CREATE_CLUSTER_MAJOR_VERSION_MASK = 4294967040;
export const MAX_CLUSTERNAME_LENGTH = 63;
export const CLUSTER_INSTALLED = 1;
export const CLUSTER_CONFIGURED = 2;
export const CLUSTER_RUNNING = 16;
export const CLUS_HYBRID_QUORUM = 1024;
export const CLUS_NODE_MAJORITY_QUORUM = 0;
export const CLUSCTL_RESOURCE_STATE_CHANGE_REASON_VERSION_1 = 1;
export const CLUSREG_DATABASE_SYNC_WRITE_TO_ALL_NODES = 1;
export const CLUSREG_DATABASE_ISOLATE_READ = 2;
export const CLUSTER_ENUM_ITEM_VERSION_1 = 1;
export const CLUSTER_ENUM_ITEM_VERSION = 1;
export const CLUSTER_CREATE_GROUP_INFO_VERSION_1 = 1;
export const CLUSTER_CREATE_GROUP_INFO_VERSION = 1;
export const GROUPSET_READY_SETTING_DELAY = 1;
export const GROUPSET_READY_SETTING_ONLINE = 2;
export const GROUPSET_READY_SETTING_OS_HEARTBEAT = 3;
export const GROUPSET_READY_SETTING_APPLICATION_READY = 4;
export const CLUS_GRP_MOVE_ALLOWED = 0;
export const CLUS_GRP_MOVE_LOCKED = 1;
export const CLUSAPI_READ_ACCESS = 1;
export const CLUSAPI_CHANGE_ACCESS = 2;
export const CLUSAPI_NO_ACCESS = 4;
export const CLUSTER_SET_ACCESS_TYPE_ALLOWED = 0;
export const CLUSTER_SET_ACCESS_TYPE_DENIED = 1;
export const CLUSTER_DELETE_ACCESS_CONTROL_ENTRY = 2;
export const CLUSGROUPSET_STATUS_GROUPS_PENDING = 1;
export const CLUSGROUPSET_STATUS_GROUPS_ONLINE = 2;
export const CLUSGROUPSET_STATUS_OS_HEARTBEAT = 4;
export const CLUSGROUPSET_STATUS_APPLICATION_READY = 8;
export const CLUSTER_AVAILABILITY_SET_CONFIG_V1 = 1;
export const CLUSTER_GROUP_ENUM_ITEM_VERSION_1 = 1;
export const CLUSTER_GROUP_ENUM_ITEM_VERSION = 1;
export const CLUSTER_RESOURCE_ENUM_ITEM_VERSION_1 = 1;
export const CLUSTER_RESOURCE_ENUM_ITEM_VERSION = 1;
export const CLUSAPI_NODE_PAUSE_REMAIN_ON_PAUSED_NODE_ON_MOVE_ERROR = 1;
export const CLUSAPI_NODE_AVOID_PLACEMENT = 2;
export const CLUSAPI_NODE_PAUSE_RETRY_DRAIN_ON_FAILURE = 4;
export const CLUSGRP_STATUS_LOCKED_MODE = 1;
export const CLUSGRP_STATUS_PREEMPTED = 2;
export const CLUSGRP_STATUS_WAITING_IN_QUEUE_FOR_MOVE = 4;
export const CLUSGRP_STATUS_PHYSICAL_RESOURCES_LACKING = 8;
export const CLUSGRP_STATUS_WAITING_TO_START = 16;
export const CLUSGRP_STATUS_EMBEDDED_FAILURE = 32;
export const CLUSGRP_STATUS_OFFLINE_DUE_TO_ANTIAFFINITY_CONFLICT = 64;
export const CLUSGRP_STATUS_NETWORK_FAILURE = 128;
export const CLUSGRP_STATUS_UNMONITORED = 256;
export const CLUSGRP_STATUS_OS_HEARTBEAT = 512;
export const CLUSGRP_STATUS_APPLICATION_READY = 1024;
export const CLUSGRP_STATUS_OFFLINE_NOT_LOCAL_DISK_OWNER = 2048;
export const CLUSGRP_STATUS_WAITING_FOR_DEPENDENCIES = 4096;
export const CLUSRES_STATUS_LOCKED_MODE = 1;
export const CLUSRES_STATUS_EMBEDDED_FAILURE = 2;
export const CLUSRES_STATUS_FAILED_DUE_TO_INSUFFICIENT_CPU = 4;
export const CLUSRES_STATUS_FAILED_DUE_TO_INSUFFICIENT_MEMORY = 8;
export const CLUSRES_STATUS_FAILED_DUE_TO_INSUFFICIENT_GENERIC_RESOURCES = 16;
export const CLUSRES_STATUS_NETWORK_FAILURE = 32;
export const CLUSRES_STATUS_UNMONITORED = 64;
export const CLUSRES_STATUS_OS_HEARTBEAT = 128;
export const CLUSRES_STATUS_APPLICATION_READY = 256;
export const CLUSRES_STATUS_OFFLINE_NOT_LOCAL_DISK_OWNER = 512;
export const CLUSAPI_GROUP_ONLINE_IGNORE_RESOURCE_STATUS = 1;
export const CLUSAPI_GROUP_ONLINE_SYNCHRONOUS = 2;
export const CLUSAPI_GROUP_ONLINE_BEST_POSSIBLE_NODE = 4;
export const CLUSAPI_GROUP_ONLINE_IGNORE_AFFINITY_RULE = 8;
export const CLUSAPI_GROUP_OFFLINE_IGNORE_RESOURCE_STATUS = 1;
export const CLUSAPI_RESOURCE_ONLINE_IGNORE_RESOURCE_STATUS = 1;
export const CLUSAPI_RESOURCE_ONLINE_DO_NOT_UPDATE_PERSISTENT_STATE = 2;
export const CLUSAPI_RESOURCE_ONLINE_NECESSARY_FOR_QUORUM = 4;
export const CLUSAPI_RESOURCE_ONLINE_BEST_POSSIBLE_NODE = 8;
export const CLUSAPI_RESOURCE_ONLINE_IGNORE_AFFINITY_RULE = 32;
export const CLUSAPI_RESOURCE_OFFLINE_IGNORE_RESOURCE_STATUS = 1;
export const CLUSAPI_RESOURCE_OFFLINE_FORCE_WITH_TERMINATION = 2;
export const CLUSAPI_RESOURCE_OFFLINE_DO_NOT_UPDATE_PERSISTENT_STATE = 4;
export const CLUSAPI_RESOURCE_OFFLINE_REASON_NONE = 0;
export const CLUSAPI_RESOURCE_OFFLINE_REASON_UNKNOWN = 1;
export const CLUSAPI_RESOURCE_OFFLINE_REASON_MOVING = 2;
export const CLUSAPI_RESOURCE_OFFLINE_REASON_USER_REQUESTED = 4;
export const CLUSAPI_RESOURCE_OFFLINE_REASON_BEING_DELETED = 8;
export const CLUSAPI_RESOURCE_OFFLINE_REASON_BEING_RESTARTED = 16;
export const CLUSAPI_RESOURCE_OFFLINE_REASON_PREEMPTED = 32;
export const CLUSAPI_RESOURCE_OFFLINE_REASON_SHUTTING_DOWN = 64;
export const CLUSAPI_GROUP_MOVE_IGNORE_RESOURCE_STATUS = 1;
export const CLUSAPI_GROUP_MOVE_RETURN_TO_SOURCE_NODE_ON_ERROR = 2;
export const CLUSAPI_GROUP_MOVE_QUEUE_ENABLED = 4;
export const CLUSAPI_GROUP_MOVE_HIGH_PRIORITY_START = 8;
export const CLUSAPI_GROUP_MOVE_FAILBACK = 16;
export const CLUSAPI_GROUP_MOVE_IGNORE_AFFINITY_RULE = 32;
export const CLUSAPI_CHANGE_RESOURCE_GROUP_FORCE_MOVE_TO_CSV = 1;
export const CLUSAPI_VALID_CHANGE_RESOURCE_GROUP_FLAGS = 1;
export const GROUP_FAILURE_INFO_VERSION_1 = 1;
export const RESOURCE_FAILURE_INFO_VERSION_1 = 1;
export const CLUS_ACCESS_ANY = 0;
export const CLUS_ACCESS_READ = 1;
export const CLUS_ACCESS_WRITE = 2;
export const CLUS_NO_MODIFY = 0;
export const CLUS_MODIFY = 1;
export const CLUS_NOT_GLOBAL = 0;
export const CLUS_GLOBAL = 1;
export const CLUSCTL_ACCESS_SHIFT = 0;
export const CLUSCTL_FUNCTION_SHIFT = 2;
export const CLCTL_INTERNAL_SHIFT = 20;
export const CLCTL_USER_SHIFT = 21;
export const CLCTL_MODIFY_SHIFT = 22;
export const CLCTL_GLOBAL_SHIFT = 23;
export const CLUSCTL_OBJECT_SHIFT = 24;
export const CLUSCTL_CONTROL_CODE_MASK = 4194303;
export const CLUSCTL_OBJECT_MASK = 255;
export const CLUSCTL_ACCESS_MODE_MASK = 3;
export const CLCTL_CLUSTER_BASE = 0;
export const BitLockerEnabled = 1;
export const BitLockerDecrypted = 4;
export const BitlockerEncrypted = 8;
export const BitLockerDecrypting = 16;
export const BitlockerEncrypting = 32;
export const BitLockerPaused = 64;
export const BitLockerStopped = 128;
export const RedirectedIOReasonUserRequest = 1;
export const RedirectedIOReasonUnsafeFileSystemFilter = 2;
export const RedirectedIOReasonUnsafeVolumeFilter = 4;
export const RedirectedIOReasonFileSystemTiering = 8;
export const RedirectedIOReasonBitLockerInitializing = 16;
export const RedirectedIOReasonReFs = 32;
export const RedirectedIOReasonMax = 9223372036854775808n;
export const VolumeRedirectedIOReasonNoDiskConnectivity = 1;
export const VolumeRedirectedIOReasonStorageSpaceNotAttached = 2;
export const VolumeRedirectedIOReasonVolumeReplicationEnabled = 4;
export const VolumeRedirectedIOReasonMax = 9223372036854775808n;
export const MAX_OBJECTID = 64;
export const MAX_CO_PASSWORD_LENGTH = 16;
export const GUID_PRESENT = 1;
export const CREATEDC_PRESENT = 2;
export const MAX_CO_PASSWORD_LENGTHEX = 127;
export const MAX_CO_PASSWORD_STORAGEEX = 128;
export const MAX_CREATINGDC_LENGTH = 256;
export const DNS_LENGTH = 64;
export const MAINTENANCE_MODE_V2_SIG = 2881155087;
export const NNLEN = 80;
export const SR_REPLICATED_PARTITION_DISALLOW_MULTINODE_IO = 1;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_FLAG_ADD_VOLUME_INFO = 1;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_FLAG_FILTER_BY_POOL = 2;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_FLAG_INCLUDE_NON_SHARED_DISKS = 4;
export const CLRES_VERSION_V1_00 = 256;
export const CLRES_VERSION_V2_00 = 512;
export const CLRES_VERSION_V3_00 = 768;
export const CLRES_VERSION_V4_00 = 1024;
export const CLUSCTL_GET_OPERATION_CONTEXT_PARAMS_VERSION_1 = 1;
export const CLUSRESDLL_STATUS_OFFLINE_BUSY = 1;
export const CLUSRESDLL_STATUS_OFFLINE_SOURCE_THROTTLED = 2;
export const CLUSRESDLL_STATUS_OFFLINE_DESTINATION_THROTTLED = 4;
export const CLUSRESDLL_STATUS_OFFLINE_DESTINATION_REJECTED = 8;
export const CLUSRESDLL_STATUS_INSUFFICIENT_MEMORY = 16;
export const CLUSRESDLL_STATUS_INSUFFICIENT_PROCESSOR = 32;
export const CLUSRESDLL_STATUS_INSUFFICIENT_OTHER_RESOURCES = 64;
export const CLUSRESDLL_STATUS_INVALID_PARAMETERS = 128;
export const CLUSRESDLL_STATUS_NETWORK_NOT_AVAILABLE = 256;
export const CLUSRESDLL_STATUS_DO_NOT_COLLECT_WER_REPORT = 1073741824;
export const CLUSRESDLL_STATUS_DUMP_NOW = 2147483648;
export const CLUS_RESDLL_OPEN_RECOVER_MONITOR_STATE = 1;
export const CLUS_RESDLL_ONLINE_RECOVER_MONITOR_STATE = 1;
export const CLUS_RESDLL_ONLINE_IGNORE_RESOURCE_STATUS = 2;
export const CLUS_RESDLL_ONLINE_RETURN_TO_SOURCE_NODE_ON_ERROR = 4;
export const CLUS_RESDLL_ONLINE_RESTORE_ONLINE_STATE = 8;
export const CLUS_RESDLL_ONLINE_IGNORE_NETWORK_CONNECTIVITY = 16;
export const CLUS_RESDLL_OFFLINE_IGNORE_RESOURCE_STATUS = 1;
export const CLUS_RESDLL_OFFLINE_RETURN_TO_SOURCE_NODE_ON_ERROR = 2;
export const CLUS_RESDLL_OFFLINE_QUEUE_ENABLED = 4;
export const CLUS_RESDLL_OFFLINE_RETURNING_TO_SOURCE_NODE_BECAUSE_OF_ERROR = 8;
export const CLUS_RESDLL_OFFLINE_DUE_TO_EMBEDDED_FAILURE = 16;
export const CLUS_RESDLL_OFFLINE_IGNORE_NETWORK_CONNECTIVITY = 32;
export const CLUS_RESDLL_OFFLINE_DO_NOT_UPDATE_PERSISTENT_STATE = 64;
export const CLUS_RESDLL_OPEN_DONT_DELETE_TEMP_DISK = 2;
export const RESTYPE_MONITOR_SHUTTING_DOWN_NODE_STOP = 1;
export const RESTYPE_MONITOR_SHUTTING_DOWN_CLUSSVC_CRASH = 2;
export const RESUTIL_PROPITEM_READ_ONLY = 1;
export const RESUTIL_PROPITEM_REQUIRED = 2;
export const RESUTIL_PROPITEM_SIGNED = 4;
export const RESUTIL_PROPITEM_IN_MEMORY = 8;
export const LOCKED_MODE_FLAGS_DONT_REMOVE_FROM_MOVE_QUEUE = 1;
export const CLUSTER_HEALTH_FAULT_ARGS = 7;
export const CLUSTER_HEALTH_FAULT_ID = 0;
export const CLUSTER_HEALTH_FAULT_ERRORTYPE = 1;
export const CLUSTER_HEALTH_FAULT_ERRORCODE = 2;
export const CLUSTER_HEALTH_FAULT_DESCRIPTION = 3;
export const CLUSTER_HEALTH_FAULT_PROVIDER = 4;
export const CLUSTER_HEALTH_FAULT_FLAGS = 5;
export const CLUSTER_HEALTH_FAULT_RESERVED = 6;
export const CLUS_CREATE_CRYPT_CONTAINER_NOT_FOUND = 1;
export const SET_APPINSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR = 1;
export const OperationalQuorum = 0;
export const ModifyQuorum = 1;
export const ClusterStateNotInstalled = 0;
export const ClusterStateNotConfigured = 1;
export const ClusterStateNotRunning = 3;
export const ClusterStateRunning = 19;
export const eResourceStateChangeReasonUnknown = 0;
export const eResourceStateChangeReasonMove = 1;
export const eResourceStateChangeReasonFailover = 2;
export const eResourceStateChangeReasonFailedMove = 3;
export const eResourceStateChangeReasonShutdown = 4;
export const eResourceStateChangeReasonRundown = 5;
export const CLUSREG_COMMAND_NONE = 0;
export const CLUSREG_SET_VALUE = 1;
export const CLUSREG_CREATE_KEY = 2;
export const CLUSREG_DELETE_KEY = 3;
export const CLUSREG_DELETE_VALUE = 4;
export const CLUSREG_SET_KEY_SECURITY = 5;
export const CLUSREG_VALUE_DELETED = 6;
export const CLUSREG_READ_KEY = 7;
export const CLUSREG_READ_VALUE = 8;
export const CLUSREG_READ_ERROR = 9;
export const CLUSREG_CONTROL_COMMAND = 10;
export const CLUSREG_CONDITION_EXISTS = 11;
export const CLUSREG_CONDITION_NOT_EXISTS = 12;
export const CLUSREG_CONDITION_IS_EQUAL = 13;
export const CLUSREG_CONDITION_IS_NOT_EQUAL = 14;
export const CLUSREG_CONDITION_IS_GREATER_THAN = 15;
export const CLUSREG_CONDITION_IS_LESS_THAN = 16;
export const CLUSREG_CONDITION_KEY_EXISTS = 17;
export const CLUSREG_CONDITION_KEY_NOT_EXISTS = 18;
export const CLUSREG_LAST_COMMAND = 19;
export const ClusGroupTypeCoreCluster = 1;
export const ClusGroupTypeAvailableStorage = 2;
export const ClusGroupTypeTemporary = 3;
export const ClusGroupTypeSharedVolume = 4;
export const ClusGroupTypeStoragePool = 5;
export const ClusGroupTypeFileServer = 100;
export const ClusGroupTypePrintServer = 101;
export const ClusGroupTypeDhcpServer = 102;
export const ClusGroupTypeDtc = 103;
export const ClusGroupTypeMsmq = 104;
export const ClusGroupTypeWins = 105;
export const ClusGroupTypeStandAloneDfs = 106;
export const ClusGroupTypeGenericApplication = 107;
export const ClusGroupTypeGenericService = 108;
export const ClusGroupTypeGenericScript = 109;
export const ClusGroupTypeIScsiNameService = 110;
export const ClusGroupTypeVirtualMachine = 111;
export const ClusGroupTypeTsSessionBroker = 112;
export const ClusGroupTypeIScsiTarget = 113;
export const ClusGroupTypeScaleoutFileServer = 114;
export const ClusGroupTypeVMReplicaBroker = 115;
export const ClusGroupTypeTaskScheduler = 116;
export const ClusGroupTypeClusterUpdateAgent = 117;
export const ClusGroupTypeScaleoutCluster = 118;
export const ClusGroupTypeStorageReplica = 119;
export const ClusGroupTypeVMReplicaCoordinator = 120;
export const ClusGroupTypeCrossClusterOrchestrator = 121;
export const ClusGroupTypeInfrastructureFileServer = 122;
export const ClusGroupTypeCoreSddc = 123;
export const ClusGroupTypeUnknown = 9999;
export const CLUSTER_MGMT_POINT_TYPE_NONE = 0;
export const CLUSTER_MGMT_POINT_TYPE_CNO = 1;
export const CLUSTER_MGMT_POINT_TYPE_DNS_ONLY = 2;
export const CLUSTER_MGMT_POINT_TYPE_CNO_ONLY = 3;
export const CLUSTER_MGMT_POINT_RESTYPE_AUTO = 0;
export const CLUSTER_MGMT_POINT_RESTYPE_SNN = 1;
export const CLUSTER_MGMT_POINT_RESTYPE_DNN = 2;
export const CLUSTER_CLOUD_TYPE_NONE = 0;
export const CLUSTER_CLOUD_TYPE_AZURE = 1;
export const CLUSTER_CLOUD_TYPE_MIXED = 128;
export const CLUSTER_CLOUD_TYPE_UNKNOWN = "-1";
export const CLUS_GROUP_START_ALWAYS = 0;
export const CLUS_GROUP_DO_NOT_START = 1;
export const CLUS_GROUP_START_ALLOWED = 2;
export const CLUS_AFFINITY_RULE_NONE = 0;
export const CLUS_AFFINITY_RULE_SAME_FAULT_DOMAIN = 1;
export const CLUS_AFFINITY_RULE_SAME_NODE = 2;
export const CLUS_AFFINITY_RULE_DIFFERENT_FAULT_DOMAIN = 3;
export const CLUS_AFFINITY_RULE_DIFFERENT_NODE = 4;
export const CLUS_AFFINITY_RULE_MIN = 0;
export const CLUS_AFFINITY_RULE_MAX = 4;
export const CLUSTER_QUORUM_MAINTAINED = 0;
export const CLUSTER_QUORUM_LOST = 1;
export const ClusterUpgradePhaseInitialize = 1;
export const ClusterUpgradePhaseValidatingUpgrade = 2;
export const ClusterUpgradePhaseUpgradingComponents = 3;
export const ClusterUpgradePhaseInstallingNewComponents = 4;
export const ClusterUpgradePhaseUpgradeComplete = 5;
export const CLUSTER_CHANGE_NODE_STATE = 1;
export const CLUSTER_CHANGE_NODE_DELETED = 2;
export const CLUSTER_CHANGE_NODE_ADDED = 4;
export const CLUSTER_CHANGE_NODE_PROPERTY = 8;
export const CLUSTER_CHANGE_REGISTRY_NAME = 16;
export const CLUSTER_CHANGE_REGISTRY_ATTRIBUTES = 32;
export const CLUSTER_CHANGE_REGISTRY_VALUE = 64;
export const CLUSTER_CHANGE_REGISTRY_SUBTREE = 128;
export const CLUSTER_CHANGE_RESOURCE_STATE = 256;
export const CLUSTER_CHANGE_RESOURCE_DELETED = 512;
export const CLUSTER_CHANGE_RESOURCE_ADDED = 1024;
export const CLUSTER_CHANGE_RESOURCE_PROPERTY = 2048;
export const CLUSTER_CHANGE_GROUP_STATE = 4096;
export const CLUSTER_CHANGE_GROUP_DELETED = 8192;
export const CLUSTER_CHANGE_GROUP_ADDED = 16384;
export const CLUSTER_CHANGE_GROUP_PROPERTY = 32768;
export const CLUSTER_CHANGE_RESOURCE_TYPE_DELETED = 65536;
export const CLUSTER_CHANGE_RESOURCE_TYPE_ADDED = 131072;
export const CLUSTER_CHANGE_RESOURCE_TYPE_PROPERTY = 262144;
export const CLUSTER_CHANGE_CLUSTER_RECONNECT = 524288;
export const CLUSTER_CHANGE_NETWORK_STATE = 1048576;
export const CLUSTER_CHANGE_NETWORK_DELETED = 2097152;
export const CLUSTER_CHANGE_NETWORK_ADDED = 4194304;
export const CLUSTER_CHANGE_NETWORK_PROPERTY = 8388608;
export const CLUSTER_CHANGE_NETINTERFACE_STATE = 16777216;
export const CLUSTER_CHANGE_NETINTERFACE_DELETED = 33554432;
export const CLUSTER_CHANGE_NETINTERFACE_ADDED = 67108864;
export const CLUSTER_CHANGE_NETINTERFACE_PROPERTY = 134217728;
export const CLUSTER_CHANGE_QUORUM_STATE = 268435456;
export const CLUSTER_CHANGE_CLUSTER_STATE = 536870912;
export const CLUSTER_CHANGE_CLUSTER_PROPERTY = 1073741824;
export const CLUSTER_CHANGE_HANDLE_CLOSE = "-2147483648";
export const CLUSTER_CHANGE_ALL = "-1";
export const CLUSTER_NOTIFICATIONS_V1 = 1;
export const CLUSTER_NOTIFICATIONS_V2 = 2;
export const CLUSTER_CHANGE_CLUSTER_RECONNECT_V2 = 1;
export const CLUSTER_CHANGE_CLUSTER_STATE_V2 = 2;
export const CLUSTER_CHANGE_CLUSTER_GROUP_ADDED_V2 = 4;
export const CLUSTER_CHANGE_CLUSTER_HANDLE_CLOSE_V2 = 8;
export const CLUSTER_CHANGE_CLUSTER_NETWORK_ADDED_V2 = 16;
export const CLUSTER_CHANGE_CLUSTER_NODE_ADDED_V2 = 32;
export const CLUSTER_CHANGE_CLUSTER_RESOURCE_TYPE_ADDED_V2 = 64;
export const CLUSTER_CHANGE_CLUSTER_COMMON_PROPERTY_V2 = 128;
export const CLUSTER_CHANGE_CLUSTER_PRIVATE_PROPERTY_V2 = 256;
export const CLUSTER_CHANGE_CLUSTER_LOST_NOTIFICATIONS_V2 = 512;
export const CLUSTER_CHANGE_CLUSTER_RENAME_V2 = 1024;
export const CLUSTER_CHANGE_CLUSTER_MEMBERSHIP_V2 = 2048;
export const CLUSTER_CHANGE_CLUSTER_UPGRADED_V2 = 4096;
export const CLUSTER_CHANGE_CLUSTER_ALL_V2 = 8191;
export const CLUSTER_CHANGE_GROUP_DELETED_V2 = 1;
export const CLUSTER_CHANGE_GROUP_COMMON_PROPERTY_V2 = 2;
export const CLUSTER_CHANGE_GROUP_PRIVATE_PROPERTY_V2 = 4;
export const CLUSTER_CHANGE_GROUP_STATE_V2 = 8;
export const CLUSTER_CHANGE_GROUP_OWNER_NODE_V2 = 16;
export const CLUSTER_CHANGE_GROUP_PREFERRED_OWNERS_V2 = 32;
export const CLUSTER_CHANGE_GROUP_RESOURCE_ADDED_V2 = 64;
export const CLUSTER_CHANGE_GROUP_RESOURCE_GAINED_V2 = 128;
export const CLUSTER_CHANGE_GROUP_RESOURCE_LOST_V2 = 256;
export const CLUSTER_CHANGE_GROUP_HANDLE_CLOSE_V2 = 512;
export const CLUSTER_CHANGE_GROUP_ALL_V2 = 1023;
export const CLUSTER_CHANGE_GROUPSET_DELETED_v2 = 1;
export const CLUSTER_CHANGE_GROUPSET_COMMON_PROPERTY_V2 = 2;
export const CLUSTER_CHANGE_GROUPSET_PRIVATE_PROPERTY_V2 = 4;
export const CLUSTER_CHANGE_GROUPSET_STATE_V2 = 8;
export const CLUSTER_CHANGE_GROUPSET_GROUP_ADDED = 16;
export const CLUSTER_CHANGE_GROUPSET_GROUP_REMOVED = 32;
export const CLUSTER_CHANGE_GROUPSET_DEPENDENCIES_V2 = 64;
export const CLUSTER_CHANGE_GROUPSET_DEPENDENTS_V2 = 128;
export const CLUSTER_CHANGE_GROUPSET_HANDLE_CLOSE_v2 = 256;
export const CLUSTER_CHANGE_GROUPSET_ALL_V2 = 511;
export const CLUSTER_CHANGE_RESOURCE_COMMON_PROPERTY_V2 = 1;
export const CLUSTER_CHANGE_RESOURCE_PRIVATE_PROPERTY_V2 = 2;
export const CLUSTER_CHANGE_RESOURCE_STATE_V2 = 4;
export const CLUSTER_CHANGE_RESOURCE_OWNER_GROUP_V2 = 8;
export const CLUSTER_CHANGE_RESOURCE_DEPENDENCIES_V2 = 16;
export const CLUSTER_CHANGE_RESOURCE_DEPENDENTS_V2 = 32;
export const CLUSTER_CHANGE_RESOURCE_POSSIBLE_OWNERS_V2 = 64;
export const CLUSTER_CHANGE_RESOURCE_DELETED_V2 = 128;
export const CLUSTER_CHANGE_RESOURCE_DLL_UPGRADED_V2 = 256;
export const CLUSTER_CHANGE_RESOURCE_HANDLE_CLOSE_V2 = 512;
export const CLUSTER_CHANGE_RESOURCE_TERMINAL_STATE_V2 = 1024;
export const CLUSTER_CHANGE_RESOURCE_ALL_V2 = 2047;
export const CLUSTER_CHANGE_RESOURCE_TYPE_DELETED_V2 = 1;
export const CLUSTER_CHANGE_RESOURCE_TYPE_COMMON_PROPERTY_V2 = 2;
export const CLUSTER_CHANGE_RESOURCE_TYPE_PRIVATE_PROPERTY_V2 = 4;
export const CLUSTER_CHANGE_RESOURCE_TYPE_POSSIBLE_OWNERS_V2 = 8;
export const CLUSTER_CHANGE_RESOURCE_TYPE_DLL_UPGRADED_V2 = 16;
export const CLUSTER_RESOURCE_TYPE_SPECIFIC_V2 = 32;
export const CLUSTER_CHANGE_RESOURCE_TYPE_ALL_V2 = 63;
export const CLUSTER_CHANGE_NETINTERFACE_DELETED_V2 = 1;
export const CLUSTER_CHANGE_NETINTERFACE_COMMON_PROPERTY_V2 = 2;
export const CLUSTER_CHANGE_NETINTERFACE_PRIVATE_PROPERTY_V2 = 4;
export const CLUSTER_CHANGE_NETINTERFACE_STATE_V2 = 8;
export const CLUSTER_CHANGE_NETINTERFACE_HANDLE_CLOSE_V2 = 16;
export const CLUSTER_CHANGE_NETINTERFACE_ALL_V2 = 31;
export const CLUSTER_CHANGE_NETWORK_DELETED_V2 = 1;
export const CLUSTER_CHANGE_NETWORK_COMMON_PROPERTY_V2 = 2;
export const CLUSTER_CHANGE_NETWORK_PRIVATE_PROPERTY_V2 = 4;
export const CLUSTER_CHANGE_NETWORK_STATE_V2 = 8;
export const CLUSTER_CHANGE_NETWORK_HANDLE_CLOSE_V2 = 16;
export const CLUSTER_CHANGE_NETWORK_ALL_V2 = 31;
export const CLUSTER_CHANGE_NODE_NETINTERFACE_ADDED_V2 = 1;
export const CLUSTER_CHANGE_NODE_DELETED_V2 = 2;
export const CLUSTER_CHANGE_NODE_COMMON_PROPERTY_V2 = 4;
export const CLUSTER_CHANGE_NODE_PRIVATE_PROPERTY_V2 = 8;
export const CLUSTER_CHANGE_NODE_STATE_V2 = 16;
export const CLUSTER_CHANGE_NODE_GROUP_GAINED_V2 = 32;
export const CLUSTER_CHANGE_NODE_GROUP_LOST_V2 = 64;
export const CLUSTER_CHANGE_NODE_HANDLE_CLOSE_V2 = 128;
export const CLUSTER_CHANGE_NODE_ALL_V2 = 255;
export const CLUSTER_CHANGE_REGISTRY_ATTRIBUTES_V2 = 1;
export const CLUSTER_CHANGE_REGISTRY_NAME_V2 = 2;
export const CLUSTER_CHANGE_REGISTRY_SUBTREE_V2 = 4;
export const CLUSTER_CHANGE_REGISTRY_VALUE_V2 = 8;
export const CLUSTER_CHANGE_REGISTRY_HANDLE_CLOSE_V2 = 16;
export const CLUSTER_CHANGE_REGISTRY_ALL_V2 = 31;
export const CLUSTER_CHANGE_QUORUM_STATE_V2 = 1;
export const CLUSTER_CHANGE_QUORUM_ALL_V2 = 1;
export const CLUSTER_CHANGE_SHARED_VOLUME_STATE_V2 = 1;
export const CLUSTER_CHANGE_SHARED_VOLUME_ADDED_V2 = 2;
export const CLUSTER_CHANGE_SHARED_VOLUME_REMOVED_V2 = 4;
export const CLUSTER_CHANGE_SHARED_VOLUME_ALL_V2 = 7;
export const CLUSTER_CHANGE_SPACEPORT_CUSTOM_PNP_V2 = 1;
export const CLUSTER_CHANGE_UPGRADE_NODE_PREPARE = 1;
export const CLUSTER_CHANGE_UPGRADE_NODE_COMMIT = 2;
export const CLUSTER_CHANGE_UPGRADE_NODE_POSTCOMMIT = 4;
export const CLUSTER_CHANGE_UPGRADE_ALL = 7;
export const CLUSTER_OBJECT_TYPE_NONE = 0;
export const CLUSTER_OBJECT_TYPE_CLUSTER = 1;
export const CLUSTER_OBJECT_TYPE_GROUP = 2;
export const CLUSTER_OBJECT_TYPE_RESOURCE = 3;
export const CLUSTER_OBJECT_TYPE_RESOURCE_TYPE = 4;
export const CLUSTER_OBJECT_TYPE_NETWORK_INTERFACE = 5;
export const CLUSTER_OBJECT_TYPE_NETWORK = 6;
export const CLUSTER_OBJECT_TYPE_NODE = 7;
export const CLUSTER_OBJECT_TYPE_REGISTRY = 8;
export const CLUSTER_OBJECT_TYPE_QUORUM = 9;
export const CLUSTER_OBJECT_TYPE_SHARED_VOLUME = 10;
export const CLUSTER_OBJECT_TYPE_GROUPSET = 13;
export const CLUSTER_OBJECT_TYPE_AFFINITYRULE = 16;
export const CLUSTERSET_OBJECT_TYPE_NONE = 0;
export const CLUSTERSET_OBJECT_TYPE_MEMBER = 1;
export const CLUSTERSET_OBJECT_TYPE_WORKLOAD = 2;
export const CLUSTERSET_OBJECT_TYPE_DATABASE = 3;
export const CLUSTER_ENUM_NODE = 1;
export const CLUSTER_ENUM_RESTYPE = 2;
export const CLUSTER_ENUM_RESOURCE = 4;
export const CLUSTER_ENUM_GROUP = 8;
export const CLUSTER_ENUM_NETWORK = 16;
export const CLUSTER_ENUM_NETINTERFACE = 32;
export const CLUSTER_ENUM_SHARED_VOLUME_GROUP = 536870912;
export const CLUSTER_ENUM_SHARED_VOLUME_RESOURCE = 1073741824;
export const CLUSTER_ENUM_INTERNAL_NETWORK = "-2147483648";
export const CLUSTER_ENUM_ALL = 63;
export const CLUSTER_NODE_ENUM_NETINTERFACES = 1;
export const CLUSTER_NODE_ENUM_GROUPS = 2;
export const CLUSTER_NODE_ENUM_PREFERRED_GROUPS = 4;
export const CLUSTER_NODE_ENUM_ALL = 3;
export const ClusterNodeStateUnknown = "-1";
export const ClusterNodeUp = 0;
export const ClusterNodeDown = 1;
export const ClusterNodePaused = 2;
export const ClusterNodeJoining = 3;
export const ClusterStorageNodeStateUnknown = 0;
export const ClusterStorageNodeUp = 1;
export const ClusterStorageNodeDown = 2;
export const ClusterStorageNodePaused = 3;
export const ClusterStorageNodeStarting = 4;
export const ClusterStorageNodeStopping = 5;
export const NodeDrainStatusNotInitiated = 0;
export const NodeDrainStatusInProgress = 1;
export const NodeDrainStatusCompleted = 2;
export const NodeDrainStatusFailed = 3;
export const ClusterNodeDrainStatusCount = 4;
export const NodeStatusNormal = 0;
export const NodeStatusIsolated = 1;
export const NodeStatusQuarantined = 2;
export const NodeStatusDrainInProgress = 4;
export const NodeStatusDrainCompleted = 8;
export const NodeStatusDrainFailed = 16;
export const NodeStatusAvoidPlacement = 32;
export const NodeStatusMax = 51;
export const CLUSTER_GROUP_ENUM_CONTAINS = 1;
export const CLUSTER_GROUP_ENUM_NODES = 2;
export const CLUSTER_GROUP_ENUM_ALL = 3;
export const ClusterGroupStateUnknown = "-1";
export const ClusterGroupOnline = 0;
export const ClusterGroupOffline = 1;
export const ClusterGroupFailed = 2;
export const ClusterGroupPartialOnline = 3;
export const ClusterGroupPending = 4;
export const PriorityDisabled = 0;
export const PriorityLow = 1000;
export const PriorityMedium = 2000;
export const PriorityHigh = 3000;
export const ClusterGroupPreventFailback = 0;
export const ClusterGroupAllowFailback = 1;
export const ClusterGroupFailbackTypeCount = 2;
export const DoNotFailbackGroups = 0;
export const FailbackGroupsImmediately = 1;
export const FailbackGroupsPerPolicy = 2;
export const ClusterNodeResumeFailbackTypeCount = 3;
export const ClusterResourceStateUnknown = "-1";
export const ClusterResourceInherited = 0;
export const ClusterResourceInitializing = 1;
export const ClusterResourceOnline = 2;
export const ClusterResourceOffline = 3;
export const ClusterResourceFailed = 4;
export const ClusterResourcePending = 128;
export const ClusterResourceOnlinePending = 129;
export const ClusterResourceOfflinePending = 130;
export const ClusterResourceDontRestart = 0;
export const ClusterResourceRestartNoNotify = 1;
export const ClusterResourceRestartNotify = 2;
export const ClusterResourceRestartActionCount = 3;
export const ClusterResourceEmbeddedFailureActionNone = 0;
export const ClusterResourceEmbeddedFailureActionLogOnly = 1;
export const ClusterResourceEmbeddedFailureActionRecover = 2;
export const CLUSTER_RESOURCE_DEFAULT_MONITOR = 0;
export const CLUSTER_RESOURCE_SEPARATE_MONITOR = 1;
export const CLUSTER_RESOURCE_VALID_FLAGS = 1;
export const ClusterSharedVolumeSnapshotStateUnknown = 0;
export const ClusterSharedVolumePrepareForHWSnapshot = 1;
export const ClusterSharedVolumeHWSnapshotCompleted = 2;
export const ClusterSharedVolumePrepareForFreeze = 3;
export const CLUSPROP_TYPE_UNKNOWN = "-1";
export const CLUSPROP_TYPE_ENDMARK = 0;
export const CLUSPROP_TYPE_LIST_VALUE = 1;
export const CLUSPROP_TYPE_RESCLASS = 2;
export const CLUSPROP_TYPE_RESERVED1 = 3;
export const CLUSPROP_TYPE_NAME = 4;
export const CLUSPROP_TYPE_SIGNATURE = 5;
export const CLUSPROP_TYPE_SCSI_ADDRESS = 6;
export const CLUSPROP_TYPE_DISK_NUMBER = 7;
export const CLUSPROP_TYPE_PARTITION_INFO = 8;
export const CLUSPROP_TYPE_FTSET_INFO = 9;
export const CLUSPROP_TYPE_DISK_SERIALNUMBER = 10;
export const CLUSPROP_TYPE_DISK_GUID = 11;
export const CLUSPROP_TYPE_DISK_SIZE = 12;
export const CLUSPROP_TYPE_PARTITION_INFO_EX = 13;
export const CLUSPROP_TYPE_PARTITION_INFO_EX2 = 14;
export const CLUSPROP_TYPE_STORAGE_DEVICE_ID_DESCRIPTOR = 15;
export const CLUSPROP_TYPE_USER = 32768;
export const CLUSPROP_FORMAT_UNKNOWN = 0;
export const CLUSPROP_FORMAT_BINARY = 1;
export const CLUSPROP_FORMAT_DWORD = 2;
export const CLUSPROP_FORMAT_SZ = 3;
export const CLUSPROP_FORMAT_EXPAND_SZ = 4;
export const CLUSPROP_FORMAT_MULTI_SZ = 5;
export const CLUSPROP_FORMAT_ULARGE_INTEGER = 6;
export const CLUSPROP_FORMAT_LONG = 7;
export const CLUSPROP_FORMAT_EXPANDED_SZ = 8;
export const CLUSPROP_FORMAT_SECURITY_DESCRIPTOR = 9;
export const CLUSPROP_FORMAT_LARGE_INTEGER = 10;
export const CLUSPROP_FORMAT_WORD = 11;
export const CLUSPROP_FORMAT_FILETIME = 12;
export const CLUSPROP_FORMAT_VALUE_LIST = 13;
export const CLUSPROP_FORMAT_PROPERTY_LIST = 14;
export const CLUSPROP_FORMAT_USER = 32768;
export const CLUSPROP_SYNTAX_ENDMARK = 0;
export const CLUSPROP_SYNTAX_NAME = 262147;
export const CLUSPROP_SYNTAX_RESCLASS = 131074;
export const CLUSPROP_SYNTAX_LIST_VALUE_SZ = 65539;
export const CLUSPROP_SYNTAX_LIST_VALUE_EXPAND_SZ = 65540;
export const CLUSPROP_SYNTAX_LIST_VALUE_DWORD = 65538;
export const CLUSPROP_SYNTAX_LIST_VALUE_BINARY = 65537;
export const CLUSPROP_SYNTAX_LIST_VALUE_MULTI_SZ = 65541;
export const CLUSPROP_SYNTAX_LIST_VALUE_LONG = 65543;
export const CLUSPROP_SYNTAX_LIST_VALUE_EXPANDED_SZ = 65544;
export const CLUSPROP_SYNTAX_LIST_VALUE_SECURITY_DESCRIPTOR = 65545;
export const CLUSPROP_SYNTAX_LIST_VALUE_LARGE_INTEGER = 65546;
export const CLUSPROP_SYNTAX_LIST_VALUE_ULARGE_INTEGER = 65542;
export const CLUSPROP_SYNTAX_LIST_VALUE_WORD = 65547;
export const CLUSPROP_SYNTAX_LIST_VALUE_PROPERTY_LIST = 65550;
export const CLUSPROP_SYNTAX_LIST_VALUE_FILETIME = 65548;
export const CLUSPROP_SYNTAX_DISK_SIGNATURE = 327682;
export const CLUSPROP_SYNTAX_SCSI_ADDRESS = 393218;
export const CLUSPROP_SYNTAX_DISK_NUMBER = 458754;
export const CLUSPROP_SYNTAX_PARTITION_INFO = 524289;
export const CLUSPROP_SYNTAX_FTSET_INFO = 589825;
export const CLUSPROP_SYNTAX_DISK_SERIALNUMBER = 655363;
export const CLUSPROP_SYNTAX_DISK_GUID = 720899;
export const CLUSPROP_SYNTAX_DISK_SIZE = 786438;
export const CLUSPROP_SYNTAX_PARTITION_INFO_EX = 851969;
export const CLUSPROP_SYNTAX_PARTITION_INFO_EX2 = 917505;
export const CLUSPROP_SYNTAX_STORAGE_DEVICE_ID_DESCRIPTOR = 983041;
export const CLUS_OBJECT_INVALID = 0;
export const CLUS_OBJECT_RESOURCE = 1;
export const CLUS_OBJECT_RESOURCE_TYPE = 2;
export const CLUS_OBJECT_GROUP = 3;
export const CLUS_OBJECT_NODE = 4;
export const CLUS_OBJECT_NETWORK = 5;
export const CLUS_OBJECT_NETINTERFACE = 6;
export const CLUS_OBJECT_CLUSTER = 7;
export const CLUS_OBJECT_GROUPSET = 8;
export const CLUS_OBJECT_AFFINITYRULE = 9;
export const CLUS_OBJECT_USER = 128;
export const CLCTL_UNKNOWN = 0;
export const CLCTL_GET_CHARACTERISTICS = 5;
export const CLCTL_GET_FLAGS = 9;
export const CLCTL_GET_CLASS_INFO = 13;
export const CLCTL_GET_REQUIRED_DEPENDENCIES = 17;
export const CLCTL_GET_ARB_TIMEOUT = 21;
export const CLCTL_GET_FAILURE_INFO = 25;
export const CLCTL_GET_NAME = 41;
export const CLCTL_GET_RESOURCE_TYPE = 45;
export const CLCTL_GET_NODE = 49;
export const CLCTL_GET_NETWORK = 53;
export const CLCTL_GET_ID = 57;
export const CLCTL_GET_FQDN = 61;
export const CLCTL_GET_CLUSTER_SERVICE_ACCOUNT_NAME = 65;
export const CLCTL_CHECK_VOTER_EVICT = 69;
export const CLCTL_CHECK_VOTER_DOWN = 73;
export const CLCTL_SHUTDOWN = 77;
export const CLCTL_ENUM_COMMON_PROPERTIES = 81;
export const CLCTL_GET_RO_COMMON_PROPERTIES = 85;
export const CLCTL_GET_COMMON_PROPERTIES = 89;
export const CLCTL_SET_COMMON_PROPERTIES = 4194398;
export const CLCTL_VALIDATE_COMMON_PROPERTIES = 97;
export const CLCTL_GET_COMMON_PROPERTY_FMTS = 101;
export const CLCTL_GET_COMMON_RESOURCE_PROPERTY_FMTS = 105;
export const CLCTL_ENUM_PRIVATE_PROPERTIES = 121;
export const CLCTL_GET_RO_PRIVATE_PROPERTIES = 125;
export const CLCTL_GET_PRIVATE_PROPERTIES = 129;
export const CLCTL_SET_PRIVATE_PROPERTIES = 4194438;
export const CLCTL_VALIDATE_PRIVATE_PROPERTIES = 137;
export const CLCTL_GET_PRIVATE_PROPERTY_FMTS = 141;
export const CLCTL_GET_PRIVATE_RESOURCE_PROPERTY_FMTS = 145;
export const CLCTL_ADD_REGISTRY_CHECKPOINT = 4194466;
export const CLCTL_DELETE_REGISTRY_CHECKPOINT = 4194470;
export const CLCTL_GET_REGISTRY_CHECKPOINTS = 169;
export const CLCTL_ADD_CRYPTO_CHECKPOINT = 4194478;
export const CLCTL_DELETE_CRYPTO_CHECKPOINT = 4194482;
export const CLCTL_GET_CRYPTO_CHECKPOINTS = 181;
export const CLCTL_RESOURCE_UPGRADE_DLL = 4194490;
export const CLCTL_ADD_REGISTRY_CHECKPOINT_64BIT = 4194494;
export const CLCTL_ADD_REGISTRY_CHECKPOINT_32BIT = 4194498;
export const CLCTL_GET_LOADBAL_PROCESS_LIST = 201;
export const CLCTL_SET_ACCOUNT_ACCESS = 4194546;
export const CLCTL_GET_NETWORK_NAME = 361;
export const CLCTL_NETNAME_GET_VIRTUAL_SERVER_TOKEN = 365;
export const CLCTL_NETNAME_REGISTER_DNS_RECORDS = 370;
export const CLCTL_GET_DNS_NAME = 373;
export const CLCTL_NETNAME_SET_PWD_INFO = 378;
export const CLCTL_NETNAME_DELETE_CO = 382;
export const CLCTL_NETNAME_VALIDATE_VCO = 385;
export const CLCTL_NETNAME_RESET_VCO = 389;
export const CLCTL_NETNAME_REPAIR_VCO = 397;
export const CLCTL_STORAGE_GET_DISK_INFO = 401;
export const CLCTL_STORAGE_GET_AVAILABLE_DISKS = 405;
export const CLCTL_STORAGE_IS_PATH_VALID = 409;
export const CLCTL_STORAGE_SYNC_CLUSDISK_DB = 4194718;
export const CLCTL_STORAGE_GET_DISK_NUMBER_INFO = 417;
export const CLCTL_QUERY_DELETE = 441;
export const CLCTL_IPADDRESS_RENEW_LEASE = 4194750;
export const CLCTL_IPADDRESS_RELEASE_LEASE = 4194754;
export const CLCTL_QUERY_MAINTENANCE_MODE = 481;
export const CLCTL_SET_MAINTENANCE_MODE = 4194790;
export const CLCTL_STORAGE_SET_DRIVELETTER = 4194794;
export const CLCTL_STORAGE_GET_DRIVELETTERS = 493;
export const CLCTL_STORAGE_GET_DISK_INFO_EX = 497;
export const CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX = 501;
export const CLCTL_STORAGE_GET_DISK_INFO_EX2 = 505;
export const CLCTL_STORAGE_GET_CLUSPORT_DISK_COUNT = 509;
export const CLCTL_STORAGE_REMAP_DRIVELETTER = 513;
export const CLCTL_STORAGE_GET_DISKID = 517;
export const CLCTL_STORAGE_IS_CLUSTERABLE = 521;
export const CLCTL_STORAGE_REMOVE_VM_OWNERSHIP = 4194830;
export const CLCTL_STORAGE_GET_MOUNTPOINTS = 529;
export const CLCTL_STORAGE_GET_DIRTY = 537;
export const CLCTL_STORAGE_GET_SHARED_VOLUME_INFO = 549;
export const CLCTL_STORAGE_IS_CSV_FILE = 553;
export const CLCTL_STORAGE_GET_RESOURCEID = 557;
export const CLCTL_VALIDATE_PATH = 561;
export const CLCTL_VALIDATE_NETNAME = 565;
export const CLCTL_VALIDATE_DIRECTORY = 569;
export const CLCTL_BATCH_BLOCK_KEY = 574;
export const CLCTL_BATCH_UNBLOCK_KEY = 577;
export const CLCTL_FILESERVER_SHARE_ADD = 4194886;
export const CLCTL_FILESERVER_SHARE_DEL = 4194890;
export const CLCTL_FILESERVER_SHARE_MODIFY = 4194894;
export const CLCTL_FILESERVER_SHARE_REPORT = 593;
export const CLCTL_NETNAME_GET_OU_FOR_VCO = 4194926;
export const CLCTL_ENABLE_SHARED_VOLUME_DIRECTIO = 4194954;
export const CLCTL_DISABLE_SHARED_VOLUME_DIRECTIO = 4194958;
export const CLCTL_GET_SHARED_VOLUME_ID = 657;
export const CLCTL_SET_CSV_MAINTENANCE_MODE = 4194966;
export const CLCTL_SET_SHARED_VOLUME_BACKUP_MODE = 4194970;
export const CLCTL_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES = 669;
export const CLCTL_STORAGE_GET_SHARED_VOLUME_STATES = 4194978;
export const CLCTL_STORAGE_IS_SHARED_VOLUME = 677;
export const CLCTL_GET_CLUSDB_TIMESTAMP = 681;
export const CLCTL_RW_MODIFY_NOOP = 4194990;
export const CLCTL_IS_QUORUM_BLOCKED = 689;
export const CLCTL_POOL_GET_DRIVE_INFO = 693;
export const CLCTL_GET_GUM_LOCK_OWNER = 697;
export const CLCTL_GET_STUCK_NODES = 701;
export const CLCTL_INJECT_GEM_FAULT = 705;
export const CLCTL_INTRODUCE_GEM_REPAIR_DELAY = 709;
export const CLCTL_SEND_DUMMY_GEM_MESSAGES = 713;
export const CLCTL_BLOCK_GEM_SEND_RECV = 717;
export const CLCTL_GET_GEMID_VECTOR = 721;
export const CLCTL_ADD_CRYPTO_CHECKPOINT_EX = 4195030;
export const CLCTL_GROUP_GET_LAST_MOVE_TIME = 729;
export const CLCTL_SET_STORAGE_CONFIGURATION = 4195042;
export const CLCTL_GET_STORAGE_CONFIGURATION = 741;
export const CLCTL_GET_STORAGE_CONFIG_ATTRIBUTES = 745;
export const CLCTL_REMOVE_NODE = 4195054;
export const CLCTL_IS_FEATURE_INSTALLED = 753;
export const CLCTL_IS_S2D_FEATURE_SUPPORTED = 757;
export const CLCTL_STORAGE_GET_PHYSICAL_DISK_INFO = 761;
export const CLCTL_STORAGE_GET_CLUSBFLT_PATHS = 765;
export const CLCTL_STORAGE_GET_CLUSBFLT_PATHINFO = 769;
export const CLCTL_CLEAR_NODE_CONNECTION_INFO = 4195078;
export const CLCTL_SET_DNS_DOMAIN = 4195082;
export const CTCTL_GET_ROUTESTATUS_BASIC = 781;
export const CTCTL_GET_ROUTESTATUS_EXTENDED = 785;
export const CTCTL_GET_FAULT_DOMAIN_STATE = 789;
export const CLCTL_NETNAME_SET_PWD_INFOEX = 794;
export const CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX2_INT = 8161;
export const CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS = 8417;
export const CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN = 4202726;
export const CLCTL_RESOURCE_PREPARE_UPGRADE = 4202730;
export const CLCTL_RESOURCE_UPGRADE_COMPLETED = 4202734;
export const CLCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY = 8433;
export const CLCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY = 4202742;
export const CLCTL_REPLICATION_ADD_REPLICATION_GROUP = 8514;
export const CLCTL_REPLICATION_GET_LOG_INFO = 8517;
export const CLCTL_REPLICATION_GET_ELIGIBLE_LOGDISKS = 8521;
export const CLCTL_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS = 8525;
export const CLCTL_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS = 8529;
export const CLCTL_REPLICATION_GET_REPLICATED_DISKS = 8533;
export const CLCTL_REPLICATION_GET_REPLICA_VOLUMES = 8537;
export const CLCTL_REPLICATION_GET_LOG_VOLUME = 8541;
export const CLCTL_REPLICATION_GET_RESOURCE_GROUP = 8545;
export const CLCTL_REPLICATION_GET_REPLICATED_PARTITION_INFO = 8549;
export const CLCTL_GET_STATE_CHANGE_TIME = 11613;
export const CLCTL_SET_CLUSTER_S2D_ENABLED = 4205922;
export const CLCTL_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES = 4205934;
export const CLCTL_GROUPSET_GET_GROUPS = 11633;
export const CLCTL_GROUPSET_GET_PROVIDER_GROUPS = 11637;
export const CLCTL_GROUPSET_GET_PROVIDER_GROUPSETS = 11641;
export const CLCTL_GROUP_GET_PROVIDER_GROUPS = 11645;
export const CLCTL_GROUP_GET_PROVIDER_GROUPSETS = 11649;
export const CLCTL_GROUP_SET_CCF_FROM_MASTER = 4205958;
export const CLCTL_GET_INFRASTRUCTURE_SOFS_BUFFER = 11657;
export const CLCTL_SET_INFRASTRUCTURE_SOFS_BUFFER = 4205966;
export const CLCTL_NOTIFY_INFRASTRUCTURE_SOFS_CHANGED = 4205970;
export const CLCTL_SCALEOUT_COMMAND = 4205974;
export const CLCTL_SCALEOUT_CONTROL = 4205978;
export const CLCTL_SCALEOUT_GET_CLUSTERS = 4205981;
export const CLCTL_RELOAD_AUTOLOGGER_CONFIG = 11730;
export const CLCTL_STORAGE_RENAME_SHARED_VOLUME = 11734;
export const CLCTL_STORAGE_RENAME_SHARED_VOLUME_GUID = 11738;
export const CLCTL_ENUM_AFFINITY_RULE_NAMES = 11741;
export const CLCTL_GET_NODES_IN_FD = 11745;
export const CLCTL_FORCE_DB_FLUSH = 4206054;
export const CLCTL_DELETE = 5242886;
export const CLCTL_INSTALL_NODE = 5242890;
export const CLCTL_EVICT_NODE = 5242894;
export const CLCTL_ADD_DEPENDENCY = 5242898;
export const CLCTL_REMOVE_DEPENDENCY = 5242902;
export const CLCTL_ADD_OWNER = 5242906;
export const CLCTL_REMOVE_OWNER = 5242910;
export const CLCTL_SET_NAME = 5242918;
export const CLCTL_CLUSTER_NAME_CHANGED = 5242922;
export const CLCTL_CLUSTER_VERSION_CHANGED = 5242926;
export const CLCTL_FIXUP_ON_UPGRADE = 5242930;
export const CLCTL_STARTING_PHASE1 = 5242934;
export const CLCTL_STARTING_PHASE2 = 5242938;
export const CLCTL_HOLD_IO = 5242942;
export const CLCTL_RESUME_IO = 5242946;
export const CLCTL_FORCE_QUORUM = 5242950;
export const CLCTL_INITIALIZE = 5242954;
export const CLCTL_STATE_CHANGE_REASON = 5242958;
export const CLCTL_PROVIDER_STATE_CHANGE = 5242962;
export const CLCTL_LEAVING_GROUP = 5242966;
export const CLCTL_JOINING_GROUP = 5242970;
export const CLCTL_FSWITNESS_GET_EPOCH_INFO = 1048669;
export const CLCTL_FSWITNESS_SET_EPOCH_INFO = 5242978;
export const CLCTL_FSWITNESS_RELEASE_LOCK = 5242982;
export const CLCTL_NETNAME_CREDS_NOTIFYCAM = 5242986;
export const CLCTL_NOTIFY_QUORUM_STATUS = 5243006;
export const CLCTL_NOTIFY_MONITOR_SHUTTING_DOWN = 1048705;
export const CLCTL_UNDELETE = 5243014;
export const CLCTL_GET_OPERATION_CONTEXT = 1057001;
export const CLCTL_NOTIFY_OWNER_CHANGE = 5251362;
export const CLCTL_VALIDATE_CHANGE_GROUP = 1057061;
export const CLCTL_CHECK_DRAIN_VETO = 1057069;
export const CLCTL_NOTIFY_DRAIN_COMPLETE = 1057073;
export const CLUSCTL_RESOURCE_UNKNOWN = 16777216;
export const CLUSCTL_RESOURCE_GET_CHARACTERISTICS = 16777221;
export const CLUSCTL_RESOURCE_GET_FLAGS = 16777225;
export const CLUSCTL_RESOURCE_GET_CLASS_INFO = 16777229;
export const CLUSCTL_RESOURCE_GET_REQUIRED_DEPENDENCIES = 16777233;
export const CLUSCTL_RESOURCE_GET_NAME = 16777257;
export const CLUSCTL_RESOURCE_GET_ID = 16777273;
export const CLUSCTL_RESOURCE_GET_RESOURCE_TYPE = 16777261;
export const CLUSCTL_RESOURCE_ENUM_COMMON_PROPERTIES = 16777297;
export const CLUSCTL_RESOURCE_GET_RO_COMMON_PROPERTIES = 16777301;
export const CLUSCTL_RESOURCE_GET_COMMON_PROPERTIES = 16777305;
export const CLUSCTL_RESOURCE_SET_COMMON_PROPERTIES = 20971614;
export const CLUSCTL_RESOURCE_VALIDATE_COMMON_PROPERTIES = 16777313;
export const CLUSCTL_RESOURCE_GET_COMMON_PROPERTY_FMTS = 16777317;
export const CLUSCTL_RESOURCE_ENUM_PRIVATE_PROPERTIES = 16777337;
export const CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES = 16777341;
export const CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES = 16777345;
export const CLUSCTL_RESOURCE_SET_PRIVATE_PROPERTIES = 20971654;
export const CLUSCTL_RESOURCE_VALIDATE_PRIVATE_PROPERTIES = 16777353;
export const CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTY_FMTS = 16777357;
export const CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT = 20971682;
export const CLUSCTL_RESOURCE_DELETE_REGISTRY_CHECKPOINT = 20971686;
export const CLUSCTL_RESOURCE_GET_REGISTRY_CHECKPOINTS = 16777385;
export const CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT = 20971694;
export const CLUSCTL_RESOURCE_DELETE_CRYPTO_CHECKPOINT = 20971698;
export const CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT_EX = 20972246;
export const CLUSCTL_RESOURCE_GET_CRYPTO_CHECKPOINTS = 16777397;
export const CLUSCTL_RESOURCE_GET_LOADBAL_PROCESS_LIST = 16777417;
export const CLUSCTL_RESOURCE_GET_NETWORK_NAME = 16777577;
export const CLUSCTL_RESOURCE_NETNAME_GET_VIRTUAL_SERVER_TOKEN = 16777581;
export const CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFO = 16777594;
export const CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFOEX = 16778010;
export const CLUSCTL_RESOURCE_NETNAME_DELETE_CO = 16777598;
export const CLUSCTL_RESOURCE_NETNAME_VALIDATE_VCO = 16777601;
export const CLUSCTL_RESOURCE_NETNAME_RESET_VCO = 16777605;
export const CLUSCTL_RESOURCE_NETNAME_REPAIR_VCO = 16777613;
export const CLUSCTL_RESOURCE_NETNAME_REGISTER_DNS_RECORDS = 16777586;
export const CLUSCTL_RESOURCE_GET_DNS_NAME = 16777589;
export const CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO = 16777617;
export const CLUSCTL_RESOURCE_STORAGE_GET_DISK_NUMBER_INFO = 16777633;
export const CLUSCTL_RESOURCE_STORAGE_IS_PATH_VALID = 16777625;
export const CLUSCTL_RESOURCE_QUERY_DELETE = 16777657;
export const CLUSCTL_RESOURCE_UPGRADE_DLL = 20971706;
export const CLUSCTL_RESOURCE_IPADDRESS_RENEW_LEASE = 20971966;
export const CLUSCTL_RESOURCE_IPADDRESS_RELEASE_LEASE = 20971970;
export const CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_64BIT = 20971710;
export const CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_32BIT = 20971714;
export const CLUSCTL_RESOURCE_QUERY_MAINTENANCE_MODE = 16777697;
export const CLUSCTL_RESOURCE_SET_MAINTENANCE_MODE = 20972006;
export const CLUSCTL_RESOURCE_STORAGE_SET_DRIVELETTER = 20972010;
export const CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX = 16777713;
export const CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX2 = 16777721;
export const CLUSCTL_RESOURCE_STORAGE_GET_MOUNTPOINTS = 16777745;
export const CLUSCTL_RESOURCE_STORAGE_GET_DIRTY = 16777753;
export const CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_INFO = 16777765;
export const CLUSCTL_RESOURCE_SET_CSV_MAINTENANCE_MODE = 20972182;
export const CLUSCTL_RESOURCE_ENABLE_SHARED_VOLUME_DIRECTIO = 20972170;
export const CLUSCTL_RESOURCE_DISABLE_SHARED_VOLUME_DIRECTIO = 20972174;
export const CLUSCTL_RESOURCE_SET_SHARED_VOLUME_BACKUP_MODE = 20972186;
export const CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES = 16777885;
export const CLUSCTL_RESOURCE_GET_FAILURE_INFO = 16777241;
export const CLUSCTL_RESOURCE_STORAGE_GET_DISKID = 16777733;
export const CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_STATES = 20972194;
export const CLUSCTL_RESOURCE_STORAGE_IS_SHARED_VOLUME = 16777893;
export const CLUSCTL_RESOURCE_IS_QUORUM_BLOCKED = 16777905;
export const CLUSCTL_RESOURCE_POOL_GET_DRIVE_INFO = 16777909;
export const CLUSCTL_RESOURCE_RLUA_GET_VIRTUAL_SERVER_TOKEN = 16777581;
export const CLUSCTL_RESOURCE_RLUA_SET_PWD_INFO = 16777594;
export const CLUSCTL_RESOURCE_RLUA_SET_PWD_INFOEX = 16778010;
export const CLUSCTL_RESOURCE_DELETE = 22020102;
export const CLUSCTL_RESOURCE_UNDELETE = 22020230;
export const CLUSCTL_RESOURCE_INSTALL_NODE = 22020106;
export const CLUSCTL_RESOURCE_EVICT_NODE = 22020110;
export const CLUSCTL_RESOURCE_ADD_DEPENDENCY = 22020114;
export const CLUSCTL_RESOURCE_REMOVE_DEPENDENCY = 22020118;
export const CLUSCTL_RESOURCE_ADD_OWNER = 22020122;
export const CLUSCTL_RESOURCE_REMOVE_OWNER = 22020126;
export const CLUSCTL_RESOURCE_SET_NAME = 22020134;
export const CLUSCTL_RESOURCE_CLUSTER_NAME_CHANGED = 22020138;
export const CLUSCTL_RESOURCE_CLUSTER_VERSION_CHANGED = 22020142;
export const CLUSCTL_RESOURCE_FORCE_QUORUM = 22020166;
export const CLUSCTL_RESOURCE_INITIALIZE = 22020170;
export const CLUSCTL_RESOURCE_STATE_CHANGE_REASON = 22020174;
export const CLUSCTL_RESOURCE_PROVIDER_STATE_CHANGE = 22020178;
export const CLUSCTL_RESOURCE_LEAVING_GROUP = 22020182;
export const CLUSCTL_RESOURCE_JOINING_GROUP = 22020186;
export const CLUSCTL_RESOURCE_FSWITNESS_GET_EPOCH_INFO = 17825885;
export const CLUSCTL_RESOURCE_FSWITNESS_SET_EPOCH_INFO = 22020194;
export const CLUSCTL_RESOURCE_FSWITNESS_RELEASE_LOCK = 22020198;
export const CLUSCTL_RESOURCE_NETNAME_CREDS_NOTIFYCAM = 22020202;
export const CLUSCTL_RESOURCE_GET_OPERATION_CONTEXT = 17834217;
export const CLUSCTL_RESOURCE_RW_MODIFY_NOOP = 20972206;
export const CLUSCTL_RESOURCE_NOTIFY_QUORUM_STATUS = 22020222;
export const CLUSCTL_RESOURCE_NOTIFY_OWNER_CHANGE = 22028578;
export const CLUSCTL_RESOURCE_VALIDATE_CHANGE_GROUP = 17834277;
export const CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME = 16788950;
export const CLUSCTL_RESOURCE_STORAGE_RENAME_SHARED_VOLUME_GUID = 16788954;
export const CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_TOKEN = 20979942;
export const CLUSCTL_CLOUD_WITNESS_RESOURCE_UPDATE_KEY = 20979958;
export const CLUSCTL_RESOURCE_PREPARE_UPGRADE = 20979946;
export const CLUSCTL_RESOURCE_UPGRADE_COMPLETED = 20979950;
export const CLUSCTL_RESOURCE_GET_STATE_CHANGE_TIME = 16788829;
export const CLUSCTL_RESOURCE_GET_INFRASTRUCTURE_SOFS_BUFFER = 16788873;
export const CLUSCTL_RESOURCE_SET_INFRASTRUCTURE_SOFS_BUFFER = 20983182;
export const CLUSCTL_RESOURCE_SCALEOUT_COMMAND = 20983190;
export const CLUSCTL_RESOURCE_SCALEOUT_CONTROL = 20983194;
export const CLUSCTL_RESOURCE_SCALEOUT_GET_CLUSTERS = 20983197;
export const CLUSCTL_RESOURCE_CHECK_DRAIN_VETO = 17834285;
export const CLUSCTL_RESOURCE_NOTIFY_DRAIN_COMPLETE = 17834289;
export const CLUSCTL_RESOURCE_GET_NODES_IN_FD = 16788961;
export const CLUSCTL_RESOURCE_TYPE_UNKNOWN = 33554432;
export const CLUSCTL_RESOURCE_TYPE_GET_CHARACTERISTICS = 33554437;
export const CLUSCTL_RESOURCE_TYPE_GET_FLAGS = 33554441;
export const CLUSCTL_RESOURCE_TYPE_GET_CLASS_INFO = 33554445;
export const CLUSCTL_RESOURCE_TYPE_GET_REQUIRED_DEPENDENCIES = 33554449;
export const CLUSCTL_RESOURCE_TYPE_GET_ARB_TIMEOUT = 33554453;
export const CLUSCTL_RESOURCE_TYPE_ENUM_COMMON_PROPERTIES = 33554513;
export const CLUSCTL_RESOURCE_TYPE_GET_RO_COMMON_PROPERTIES = 33554517;
export const CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTIES = 33554521;
export const CLUSCTL_RESOURCE_TYPE_VALIDATE_COMMON_PROPERTIES = 33554529;
export const CLUSCTL_RESOURCE_TYPE_SET_COMMON_PROPERTIES = 37748830;
export const CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTY_FMTS = 33554533;
export const CLUSCTL_RESOURCE_TYPE_GET_COMMON_RESOURCE_PROPERTY_FMTS = 33554537;
export const CLUSCTL_RESOURCE_TYPE_ENUM_PRIVATE_PROPERTIES = 33554553;
export const CLUSCTL_RESOURCE_TYPE_GET_RO_PRIVATE_PROPERTIES = 33554557;
export const CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTIES = 33554561;
export const CLUSCTL_RESOURCE_TYPE_SET_PRIVATE_PROPERTIES = 37748870;
export const CLUSCTL_RESOURCE_TYPE_VALIDATE_PRIVATE_PROPERTIES = 33554569;
export const CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTY_FMTS = 33554573;
export const CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_RESOURCE_PROPERTY_FMTS = 33554577;
export const CLUSCTL_RESOURCE_TYPE_GET_REGISTRY_CHECKPOINTS = 33554601;
export const CLUSCTL_RESOURCE_TYPE_GET_CRYPTO_CHECKPOINTS = 33554613;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS = 33554837;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_SYNC_CLUSDISK_DB = 37749150;
export const CLUSCTL_RESOURCE_TYPE_NETNAME_VALIDATE_NETNAME = 33554997;
export const CLUSCTL_RESOURCE_TYPE_NETNAME_GET_OU_FOR_VCO = 37749358;
export const CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_PATH = 33554993;
export const CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_DIRECTORY = 33555001;
export const CLUSCTL_RESOURCE_TYPE_GEN_SCRIPT_VALIDATE_PATH = 33554993;
export const CLUSCTL_RESOURCE_TYPE_QUERY_DELETE = 33554873;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DRIVELETTERS = 33554925;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX = 33554933;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_REMAP_DRIVELETTER = 33554945;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DISKID = 33554949;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_RESOURCEID = 33554989;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CLUSTERABLE = 33554953;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_REMOVE_VM_OWNERSHIP = 37749262;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CSV_FILE = 16777769;
export const CLUSCTL_RESOURCE_TYPE_WITNESS_VALIDATE_PATH = 33554993;
export const CLUSCTL_RESOURCE_TYPE_INSTALL_NODE = 38797322;
export const CLUSCTL_RESOURCE_TYPE_EVICT_NODE = 38797326;
export const CLUSCTL_RESOURCE_TYPE_CLUSTER_VERSION_CHANGED = 38797358;
export const CLUSCTL_RESOURCE_TYPE_FIXUP_ON_UPGRADE = 38797362;
export const CLUSCTL_RESOURCE_TYPE_STARTING_PHASE1 = 38797366;
export const CLUSCTL_RESOURCE_TYPE_STARTING_PHASE2 = 38797370;
export const CLUSCTL_RESOURCE_TYPE_HOLD_IO = 38797374;
export const CLUSCTL_RESOURCE_TYPE_RESUME_IO = 38797378;
export const CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INT = 33562593;
export const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_LOGDISKS = 33562953;
export const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_TARGET_DATADISKS = 33562957;
export const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_ELIGIBLE_SOURCE_DATADISKS = 33562961;
export const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_DISKS = 33562965;
export const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICA_VOLUMES = 33562969;
export const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_VOLUME = 33562973;
export const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_RESOURCE_GROUP = 33562977;
export const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_REPLICATED_PARTITION_INFO = 33562981;
export const CLUSCTL_RESOURCE_TYPE_REPLICATION_GET_LOG_INFO = 33562949;
export const CLUSCTL_RESOURCE_TYPE_REPLICATION_ADD_REPLICATION_GROUP = 33562946;
export const CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS = 33562849;
export const CLUSCTL_CLOUD_WITNESS_RESOURCE_TYPE_VALIDATE_CREDENTIALS_WITH_KEY = 33562865;
export const CLUSCTL_RESOURCE_TYPE_PREPARE_UPGRADE = 37757162;
export const CLUSCTL_RESOURCE_TYPE_UPGRADE_COMPLETED = 37757166;
export const CLUSCTL_RESOURCE_TYPE_NOTIFY_MONITOR_SHUTTING_DOWN = 34603137;
export const CLUSCTL_RESOURCE_TYPE_CHECK_DRAIN_VETO = 34611501;
export const CLUSCTL_RESOURCE_TYPE_NOTIFY_DRAIN_COMPLETE = 34611505;
export const CLUSCTL_GROUP_UNKNOWN = 50331648;
export const CLUSCTL_GROUP_GET_CHARACTERISTICS = 50331653;
export const CLUSCTL_GROUP_GET_FLAGS = 50331657;
export const CLUSCTL_GROUP_GET_NAME = 50331689;
export const CLUSCTL_GROUP_GET_ID = 50331705;
export const CLUSCTL_GROUP_ENUM_COMMON_PROPERTIES = 50331729;
export const CLUSCTL_GROUP_GET_RO_COMMON_PROPERTIES = 50331733;
export const CLUSCTL_GROUP_GET_COMMON_PROPERTIES = 50331737;
export const CLUSCTL_GROUP_SET_COMMON_PROPERTIES = 54526046;
export const CLUSCTL_GROUP_VALIDATE_COMMON_PROPERTIES = 50331745;
export const CLUSCTL_GROUP_ENUM_PRIVATE_PROPERTIES = 50331769;
export const CLUSCTL_GROUP_GET_RO_PRIVATE_PROPERTIES = 50331773;
export const CLUSCTL_GROUP_GET_PRIVATE_PROPERTIES = 50331777;
export const CLUSCTL_GROUP_SET_PRIVATE_PROPERTIES = 54526086;
export const CLUSCTL_GROUP_VALIDATE_PRIVATE_PROPERTIES = 50331785;
export const CLUSCTL_GROUP_QUERY_DELETE = 50332089;
export const CLUSCTL_GROUP_GET_COMMON_PROPERTY_FMTS = 50331749;
export const CLUSCTL_GROUP_GET_PRIVATE_PROPERTY_FMTS = 50331789;
export const CLUSCTL_GROUP_GET_FAILURE_INFO = 50331673;
export const CLUSCTL_GROUP_GET_LAST_MOVE_TIME = 50332377;
export const CLUSCTL_GROUP_SET_CCF_FROM_MASTER = 54537606;
export const CLUSCTL_NODE_UNKNOWN = 67108864;
export const CLUSCTL_NODE_GET_CHARACTERISTICS = 67108869;
export const CLUSCTL_NODE_GET_FLAGS = 67108873;
export const CLUSCTL_NODE_GET_NAME = 67108905;
export const CLUSCTL_NODE_GET_ID = 67108921;
export const CLUSCTL_NODE_ENUM_COMMON_PROPERTIES = 67108945;
export const CLUSCTL_NODE_GET_RO_COMMON_PROPERTIES = 67108949;
export const CLUSCTL_NODE_GET_COMMON_PROPERTIES = 67108953;
export const CLUSCTL_NODE_SET_COMMON_PROPERTIES = 71303262;
export const CLUSCTL_NODE_VALIDATE_COMMON_PROPERTIES = 67108961;
export const CLUSCTL_NODE_ENUM_PRIVATE_PROPERTIES = 67108985;
export const CLUSCTL_NODE_GET_RO_PRIVATE_PROPERTIES = 67108989;
export const CLUSCTL_NODE_GET_PRIVATE_PROPERTIES = 67108993;
export const CLUSCTL_NODE_SET_PRIVATE_PROPERTIES = 71303302;
export const CLUSCTL_NODE_VALIDATE_PRIVATE_PROPERTIES = 67109001;
export const CLUSCTL_NODE_GET_COMMON_PROPERTY_FMTS = 67108965;
export const CLUSCTL_NODE_GET_PRIVATE_PROPERTY_FMTS = 67109005;
export const CLUSCTL_NODE_GET_CLUSTER_SERVICE_ACCOUNT_NAME = 67108929;
export const CLUSCTL_NODE_GET_STUCK_NODES = 67109565;
export const CLUSCTL_NODE_INJECT_GEM_FAULT = 67109569;
export const CLUSCTL_NODE_INTRODUCE_GEM_REPAIR_DELAY = 67109573;
export const CLUSCTL_NODE_SEND_DUMMY_GEM_MESSAGES = 67109577;
export const CLUSCTL_NODE_BLOCK_GEM_SEND_RECV = 67109581;
export const CLUSCTL_NODE_GET_GEMID_VECTOR = 67109585;
export const CLUSCTL_NETWORK_UNKNOWN = 83886080;
export const CLUSCTL_NETWORK_GET_CHARACTERISTICS = 83886085;
export const CLUSCTL_NETWORK_GET_FLAGS = 83886089;
export const CLUSCTL_NETWORK_GET_NAME = 83886121;
export const CLUSCTL_NETWORK_GET_ID = 83886137;
export const CLUSCTL_NETWORK_ENUM_COMMON_PROPERTIES = 83886161;
export const CLUSCTL_NETWORK_GET_RO_COMMON_PROPERTIES = 83886165;
export const CLUSCTL_NETWORK_GET_COMMON_PROPERTIES = 83886169;
export const CLUSCTL_NETWORK_SET_COMMON_PROPERTIES = 88080478;
export const CLUSCTL_NETWORK_VALIDATE_COMMON_PROPERTIES = 83886177;
export const CLUSCTL_NETWORK_ENUM_PRIVATE_PROPERTIES = 83886201;
export const CLUSCTL_NETWORK_GET_RO_PRIVATE_PROPERTIES = 83886205;
export const CLUSCTL_NETWORK_GET_PRIVATE_PROPERTIES = 83886209;
export const CLUSCTL_NETWORK_SET_PRIVATE_PROPERTIES = 88080518;
export const CLUSCTL_NETWORK_VALIDATE_PRIVATE_PROPERTIES = 83886217;
export const CLUSCTL_NETWORK_GET_COMMON_PROPERTY_FMTS = 83886181;
export const CLUSCTL_NETWORK_GET_PRIVATE_PROPERTY_FMTS = 83886221;
export const CLUSCTL_NETINTERFACE_UNKNOWN = 100663296;
export const CLUSCTL_NETINTERFACE_GET_CHARACTERISTICS = 100663301;
export const CLUSCTL_NETINTERFACE_GET_FLAGS = 100663305;
export const CLUSCTL_NETINTERFACE_GET_NAME = 100663337;
export const CLUSCTL_NETINTERFACE_GET_ID = 100663353;
export const CLUSCTL_NETINTERFACE_GET_NODE = 100663345;
export const CLUSCTL_NETINTERFACE_GET_NETWORK = 100663349;
export const CLUSCTL_NETINTERFACE_ENUM_COMMON_PROPERTIES = 100663377;
export const CLUSCTL_NETINTERFACE_GET_RO_COMMON_PROPERTIES = 100663381;
export const CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTIES = 100663385;
export const CLUSCTL_NETINTERFACE_SET_COMMON_PROPERTIES = 104857694;
export const CLUSCTL_NETINTERFACE_VALIDATE_COMMON_PROPERTIES = 100663393;
export const CLUSCTL_NETINTERFACE_ENUM_PRIVATE_PROPERTIES = 100663417;
export const CLUSCTL_NETINTERFACE_GET_RO_PRIVATE_PROPERTIES = 100663421;
export const CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTIES = 100663425;
export const CLUSCTL_NETINTERFACE_SET_PRIVATE_PROPERTIES = 104857734;
export const CLUSCTL_NETINTERFACE_VALIDATE_PRIVATE_PROPERTIES = 100663433;
export const CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTY_FMTS = 100663397;
export const CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTY_FMTS = 100663437;
export const CLUSCTL_CLUSTER_UNKNOWN = 117440512;
export const CLUSCTL_CLUSTER_GET_FQDN = 117440573;
export const CLUSCTL_CLUSTER_SET_STORAGE_CONFIGURATION = 121635554;
export const CLUSCTL_CLUSTER_GET_STORAGE_CONFIGURATION = 117441253;
export const CLUSCTL_CLUSTER_GET_STORAGE_CONFIG_ATTRIBUTES = 117441257;
export const CLUSCTL_CLUSTER_ENUM_COMMON_PROPERTIES = 117440593;
export const CLUSCTL_CLUSTER_GET_RO_COMMON_PROPERTIES = 117440597;
export const CLUSCTL_CLUSTER_GET_COMMON_PROPERTIES = 117440601;
export const CLUSCTL_CLUSTER_SET_COMMON_PROPERTIES = 121634910;
export const CLUSCTL_CLUSTER_VALIDATE_COMMON_PROPERTIES = 117440609;
export const CLUSCTL_CLUSTER_ENUM_PRIVATE_PROPERTIES = 117440633;
export const CLUSCTL_CLUSTER_GET_RO_PRIVATE_PROPERTIES = 117440637;
export const CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTIES = 117440641;
export const CLUSCTL_CLUSTER_SET_PRIVATE_PROPERTIES = 121634950;
export const CLUSCTL_CLUSTER_VALIDATE_PRIVATE_PROPERTIES = 117440649;
export const CLUSCTL_CLUSTER_GET_COMMON_PROPERTY_FMTS = 117440613;
export const CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTY_FMTS = 117440653;
export const CLUSCTL_CLUSTER_CHECK_VOTER_EVICT = 117440581;
export const CLUSCTL_CLUSTER_CHECK_VOTER_DOWN = 117440585;
export const CLUSCTL_CLUSTER_SHUTDOWN = 117440589;
export const CLUSCTL_CLUSTER_BATCH_BLOCK_KEY = 117441086;
export const CLUSCTL_CLUSTER_BATCH_UNBLOCK_KEY = 117441089;
export const CLUSCTL_CLUSTER_GET_SHARED_VOLUME_ID = 117441169;
export const CLUSCTL_CLUSTER_GET_CLUSDB_TIMESTAMP = 117441193;
export const CLUSCTL_CLUSTER_GET_GUM_LOCK_OWNER = 117441209;
export const CLUSCTL_CLUSTER_REMOVE_NODE = 121635566;
export const CLUSCTL_CLUSTER_SET_ACCOUNT_ACCESS = 121635058;
export const CLUSCTL_CLUSTER_CLEAR_NODE_CONNECTION_INFO = 121635590;
export const CLUSCTL_CLUSTER_SET_DNS_DOMAIN = 121635594;
export const CLUSCTL_CLUSTER_SET_CLUSTER_S2D_ENABLED = 121646434;
export const CLUSCTL_CLUSTER_SET_CLUSTER_S2D_CACHE_METADATA_RESERVE_BYTES = 121646446;
export const CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME = 117452246;
export const CLUSCTL_CLUSTER_STORAGE_RENAME_SHARED_VOLUME_GUID = 117452250;
export const CLUSCTL_CLUSTER_RELOAD_AUTOLOGGER_CONFIG = 117452242;
export const CLUSCTL_CLUSTER_ENUM_AFFINITY_RULE_NAMES = 117452253;
export const CLUSCTL_CLUSTER_GET_NODES_IN_FD = 117452257;
export const CLUSCTL_CLUSTER_FORCE_FLUSH_DB = 121646566;
export const CLUSCTL_CLUSTER_GET_CLMUSR_TOKEN = 117440877;
export const CLUSCTL_GROUPSET_GET_COMMON_PROPERTIES = 134217817;
export const CLUSCTL_GROUPSET_GET_RO_COMMON_PROPERTIES = 134217813;
export const CLUSCTL_GROUPSET_SET_COMMON_PROPERTIES = 138412126;
export const CLUSCTL_GROUPSET_GET_GROUPS = 134229361;
export const CLUSCTL_GROUPSET_GET_PROVIDER_GROUPS = 134229365;
export const CLUSCTL_GROUPSET_GET_PROVIDER_GROUPSETS = 134229369;
export const CLUSCTL_GROUP_GET_PROVIDER_GROUPS = 134229373;
export const CLUSCTL_GROUP_GET_PROVIDER_GROUPSETS = 134229377;
export const CLUSCTL_GROUPSET_GET_ID = 134217785;
export const CLUSCTL_AFFINITYRULE_GET_COMMON_PROPERTIES = 150995033;
export const CLUSCTL_AFFINITYRULE_GET_RO_COMMON_PROPERTIES = 150995029;
export const CLUSCTL_AFFINITYRULE_SET_COMMON_PROPERTIES = 155189342;
export const CLUSCTL_AFFINITYRULE_GET_ID = 150995001;
export const CLUSCTL_AFFINITYRULE_GET_GROUPNAMES = 151006577;
export const CLUS_RESCLASS_UNKNOWN = 0;
export const CLUS_RESCLASS_STORAGE = 1;
export const CLUS_RESCLASS_NETWORK = 2;
export const CLUS_RESCLASS_USER = 32768;
export const CLUS_RESSUBCLASS_SHARED = "-2147483648";
export const CLUS_RESSUBCLASS_STORAGE_SHARED_BUS = "-2147483648";
export const CLUS_RESSUBCLASS_STORAGE_DISK = 1073741824;
export const CLUS_RESSUBCLASS_STORAGE_REPLICATION = 268435456;
export const CLUS_RESSUBCLASS_NETWORK_INTERNET_PROTOCOL = "-2147483648";
export const CLUS_CHAR_UNKNOWN = 0;
export const CLUS_CHAR_QUORUM = 1;
export const CLUS_CHAR_DELETE_REQUIRES_ALL_NODES = 2;
export const CLUS_CHAR_LOCAL_QUORUM = 4;
export const CLUS_CHAR_LOCAL_QUORUM_DEBUG = 8;
export const CLUS_CHAR_REQUIRES_STATE_CHANGE_REASON = 16;
export const CLUS_CHAR_BROADCAST_DELETE = 32;
export const CLUS_CHAR_SINGLE_CLUSTER_INSTANCE = 64;
export const CLUS_CHAR_SINGLE_GROUP_INSTANCE = 128;
export const CLUS_CHAR_COEXIST_IN_SHARED_VOLUME_GROUP = 256;
export const CLUS_CHAR_PLACEMENT_DATA = 512;
export const CLUS_CHAR_MONITOR_DETACH = 1024;
export const CLUS_CHAR_MONITOR_REATTACH = 2048;
export const CLUS_CHAR_OPERATION_CONTEXT = 4096;
export const CLUS_CHAR_CLONES = 8192;
export const CLUS_CHAR_NOT_PREEMPTABLE = 16384;
export const CLUS_CHAR_NOTIFY_NEW_OWNER = 32768;
export const CLUS_CHAR_SUPPORTS_UNMONITORED_STATE = 65536;
export const CLUS_CHAR_INFRASTRUCTURE = 131072;
export const CLUS_CHAR_VETO_DRAIN = 262144;
export const CLUS_CHAR_DRAIN_LOCAL_OFFLINE = 524288;
export const CLUS_FLAG_CORE = 1;
export const CLUSPROP_PIFLAG_STICKY = 1;
export const CLUSPROP_PIFLAG_REMOVABLE = 2;
export const CLUSPROP_PIFLAG_USABLE = 4;
export const CLUSPROP_PIFLAG_DEFAULT_QUORUM = 8;
export const CLUSPROP_PIFLAG_USABLE_FOR_CSV = 16;
export const CLUSPROP_PIFLAG_ENCRYPTION_ENABLED = 32;
export const CLUSPROP_PIFLAG_RAW = 64;
export const CLUSPROP_PIFLAG_UNKNOWN = "-2147483648";
export const VolumeStateNoFaults = 0;
export const VolumeStateNoDirectIO = 1;
export const VolumeStateNoAccess = 2;
export const VolumeStateInMaintenance = 4;
export const VolumeStateDismounted = 8;
export const VolumeBackupNone = 0;
export const VolumeBackupInProgress = 1;
export const SharedVolumeStateUnavailable = 0;
export const SharedVolumeStatePaused = 1;
export const SharedVolumeStateActive = 2;
export const SharedVolumeStateActiveRedirected = 3;
export const SharedVolumeStateActiveVolumeRedirected = 4;
export const ClusterSharedVolumeRenameInputTypeNone = 0;
export const ClusterSharedVolumeRenameInputTypeVolumeOffset = 1;
export const ClusterSharedVolumeRenameInputTypeVolumeId = 2;
export const ClusterSharedVolumeRenameInputTypeVolumeName = 3;
export const ClusterSharedVolumeRenameInputTypeVolumeGuid = 4;
export const MaintenanceModeTypeDisableIsAliveCheck = 1;
export const MaintenanceModeTypeOfflineResource = 2;
export const MaintenanceModeTypeUnclusterResource = 3;
export const CLUSPROP_IPADDR_ENABLENETBIOS_DISABLED = 0;
export const CLUSPROP_IPADDR_ENABLENETBIOS_ENABLED = 1;
export const CLUSPROP_IPADDR_ENABLENETBIOS_TRACK_NIC = 2;
export const FILESHARE_CHANGE_NONE = 0;
export const FILESHARE_CHANGE_ADD = 1;
export const FILESHARE_CHANGE_DEL = 2;
export const FILESHARE_CHANGE_MODIFY = 3;
export const CLUSTER_RESOURCE_ENUM_DEPENDS = 1;
export const CLUSTER_RESOURCE_ENUM_PROVIDES = 2;
export const CLUSTER_RESOURCE_ENUM_NODES = 4;
export const CLUSTER_RESOURCE_ENUM_ALL = 7;
export const CLUSTER_RESOURCE_TYPE_ENUM_NODES = 1;
export const CLUSTER_RESOURCE_TYPE_ENUM_RESOURCES = 2;
export const CLUSTER_RESOURCE_TYPE_ENUM_ALL = 3;
export const CLUSTER_NETWORK_ENUM_NETINTERFACES = 1;
export const CLUSTER_NETWORK_ENUM_ALL = 1;
export const ClusterNetworkStateUnknown = "-1";
export const ClusterNetworkUnavailable = 0;
export const ClusterNetworkDown = 1;
export const ClusterNetworkPartitioned = 2;
export const ClusterNetworkUp = 3;
export const ClusterNetworkRoleNone = 0;
export const ClusterNetworkRoleInternalUse = 1;
export const ClusterNetworkRoleClientAccess = 2;
export const ClusterNetworkRoleInternalAndClient = 3;
export const ClusterNetInterfaceStateUnknown = "-1";
export const ClusterNetInterfaceUnavailable = 0;
export const ClusterNetInterfaceFailed = 1;
export const ClusterNetInterfaceUnreachable = 2;
export const ClusterNetInterfaceUp = 3;
export const ClusterSetupPhaseInitialize = 1;
export const ClusterSetupPhaseValidateNodeState = 100;
export const ClusterSetupPhaseValidateNetft = 102;
export const ClusterSetupPhaseValidateClusDisk = 103;
export const ClusterSetupPhaseConfigureClusSvc = 104;
export const ClusterSetupPhaseStartingClusSvc = 105;
export const ClusterSetupPhaseQueryClusterNameAccount = 106;
export const ClusterSetupPhaseValidateClusterNameAccount = 107;
export const ClusterSetupPhaseCreateClusterAccount = 108;
export const ClusterSetupPhaseConfigureClusterAccount = 109;
export const ClusterSetupPhaseFormingCluster = 200;
export const ClusterSetupPhaseAddClusterProperties = 201;
export const ClusterSetupPhaseCreateResourceTypes = 202;
export const ClusterSetupPhaseCreateGroups = 203;
export const ClusterSetupPhaseCreateIPAddressResources = 204;
export const ClusterSetupPhaseCreateNetworkName = 205;
export const ClusterSetupPhaseClusterGroupOnline = 206;
export const ClusterSetupPhaseGettingCurrentMembership = 300;
export const ClusterSetupPhaseAddNodeToCluster = 301;
export const ClusterSetupPhaseNodeUp = 302;
export const ClusterSetupPhaseMoveGroup = 400;
export const ClusterSetupPhaseDeleteGroup = 401;
export const ClusterSetupPhaseCleanupCOs = 402;
export const ClusterSetupPhaseOfflineGroup = 403;
export const ClusterSetupPhaseEvictNode = 404;
export const ClusterSetupPhaseCleanupNode = 405;
export const ClusterSetupPhaseCoreGroupCleanup = 406;
export const ClusterSetupPhaseFailureCleanup = 999;
export const ClusterSetupPhaseStart = 1;
export const ClusterSetupPhaseContinue = 2;
export const ClusterSetupPhaseEnd = 3;
export const ClusterSetupPhaseReport = 4;
export const ClusterSetupPhaseInformational = 1;
export const ClusterSetupPhaseWarning = 2;
export const ClusterSetupPhaseFatal = 3;
export const PLACEMENT_OPTIONS_MIN_VALUE = 0;
export const PLACEMENT_OPTIONS_DEFAULT_PLACEMENT_OPTIONS = 0;
export const PLACEMENT_OPTIONS_DISABLE_CSV_VM_DEPENDENCY = 1;
export const PLACEMENT_OPTIONS_CONSIDER_OFFLINE_VMS = 2;
export const PLACEMENT_OPTIONS_DONT_USE_MEMORY = 4;
export const PLACEMENT_OPTIONS_DONT_USE_CPU = 8;
export const PLACEMENT_OPTIONS_DONT_USE_LOCAL_TEMP_DISK = 16;
export const PLACEMENT_OPTIONS_DONT_RESUME_VMS_WITH_EXISTING_TEMP_DISK = 32;
export const PLACEMENT_OPTIONS_SAVE_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE = 64;
export const PLACEMENT_OPTIONS_DONT_RESUME_AVAILABILTY_SET_VMS_WITH_EXISTING_TEMP_DISK = 128;
export const PLACEMENT_OPTIONS_SAVE_AVAILABILTY_SET_VMS_WITH_LOCAL_DISK_ON_DRAIN_OVERWRITE = 256;
export const PLACEMENT_OPTIONS_AVAILABILITY_SET_DOMAIN_AFFINITY = 512;
export const PLACEMENT_OPTIONS_ALL = 1023;
export const GRP_PLACEMENT_OPTIONS_MIN_VALUE = 0;
export const GRP_PLACEMENT_OPTIONS_DEFAULT = 0;
export const GRP_PLACEMENT_OPTIONS_DISABLE_AUTOBALANCING = 1;
export const GRP_PLACEMENT_OPTIONS_ALL = 1;
export const SrReplicatedDiskTypeNone = 0;
export const SrReplicatedDiskTypeSource = 1;
export const SrReplicatedDiskTypeLogSource = 2;
export const SrReplicatedDiskTypeDestination = 3;
export const SrReplicatedDiskTypeLogDestination = 4;
export const SrReplicatedDiskTypeNotInParthership = 5;
export const SrReplicatedDiskTypeLogNotInParthership = 6;
export const SrReplicatedDiskTypeOther = 7;
export const SrDiskReplicationEligibleNone = 0;
export const SrDiskReplicationEligibleYes = 1;
export const SrDiskReplicationEligibleOffline = 2;
export const SrDiskReplicationEligibleNotGpt = 3;
export const SrDiskReplicationEligiblePartitionLayoutMismatch = 4;
export const SrDiskReplicationEligibleInsufficientFreeSpace = 5;
export const SrDiskReplicationEligibleNotInSameSite = 6;
export const SrDiskReplicationEligibleInSameSite = 7;
export const SrDiskReplicationEligibleFileSystemNotSupported = 8;
export const SrDiskReplicationEligibleAlreadyInReplication = 9;
export const SrDiskReplicationEligibleSameAsSpecifiedDisk = 10;
export const SrDiskReplicationEligibleOther = 9999;
export const VmResdllContextTurnOff = 0;
export const VmResdllContextSave = 1;
export const VmResdllContextShutdown = 2;
export const VmResdllContextShutdownForce = 3;
export const VmResdllContextLiveMigration = 4;
export const ResdllContextOperationTypeFailback = 0;
export const ResdllContextOperationTypeDrain = 1;
export const ResdllContextOperationTypeDrainFailure = 2;
export const ResdllContextOperationTypeEmbeddedFailure = 3;
export const ResdllContextOperationTypePreemption = 4;
export const ResdllContextOperationTypeNetworkDisconnect = 5;
export const ResdllContextOperationTypeNetworkDisconnectMoveRetry = 6;
export const LOG_INFORMATION = 0;
export const LOG_WARNING = 1;
export const LOG_ERROR = 2;
export const LOG_SEVERE = 3;
export const ResourceExitStateContinue = 0;
export const ResourceExitStateTerminate = 1;
export const ResourceExitStateMax = 2;
export const FAILURE_TYPE_GENERAL = 0;
export const FAILURE_TYPE_EMBEDDED = 1;
export const FAILURE_TYPE_NETWORK_LOSS = 2;
export const ClusterResourceApplicationStateUnknown = 1;
export const ClusterResourceApplicationOSHeartBeat = 2;
export const ClusterResourceApplicationReady = 3;
export const RmonInitializing = 0;
export const RmonIdle = 1;
export const RmonStartingResource = 2;
export const RmonInitializingResource = 3;
export const RmonOnlineResource = 4;
export const RmonOfflineResource = 5;
export const RmonShutdownResource = 6;
export const RmonDeletingResource = 7;
export const RmonIsAlivePoll = 8;
export const RmonLooksAlivePoll = 9;
export const RmonArbitrateResource = 10;
export const RmonReleaseResource = 11;
export const RmonResourceControl = 12;
export const RmonResourceTypeControl = 13;
export const RmonTerminateResource = 14;
export const RmonDeadlocked = 15;
export const ClusterRoleDHCP = 0;
export const ClusterRoleDTC = 1;
export const ClusterRoleFileServer = 2;
export const ClusterRoleGenericApplication = 3;
export const ClusterRoleGenericScript = 4;
export const ClusterRoleGenericService = 5;
export const ClusterRoleISCSINameServer = 6;
export const ClusterRoleMSMQ = 7;
export const ClusterRoleNFS = 8;
export const ClusterRolePrintServer = 9;
export const ClusterRoleStandAloneNamespaceServer = 10;
export const ClusterRoleVolumeShadowCopyServiceTask = 11;
export const ClusterRoleWINS = 12;
export const ClusterRoleTaskScheduler = 13;
export const ClusterRoleNetworkFileSystem = 14;
export const ClusterRoleDFSReplicatedFolder = 15;
export const ClusterRoleDistributedFileSystem = 16;
export const ClusterRoleDistributedNetworkName = 17;
export const ClusterRoleFileShare = 18;
export const ClusterRoleFileShareWitness = 19;
export const ClusterRoleHardDisk = 20;
export const ClusterRoleIPAddress = 21;
export const ClusterRoleIPV6Address = 22;
export const ClusterRoleIPV6TunnelAddress = 23;
export const ClusterRoleISCSITargetServer = 24;
export const ClusterRoleNetworkName = 25;
export const ClusterRolePhysicalDisk = 26;
export const ClusterRoleSODAFileServer = 27;
export const ClusterRoleStoragePool = 28;
export const ClusterRoleVirtualMachine = 29;
export const ClusterRoleVirtualMachineConfiguration = 30;
export const ClusterRoleVirtualMachineReplicaBroker = 31;
export const ClusterRoleUnknown = "-1";
export const ClusterRoleClustered = 0;
export const ClusterRoleUnclustered = 1;
export const CLUADMEX_OT_NONE = 0;
export const CLUADMEX_OT_CLUSTER = 1;
export const CLUADMEX_OT_NODE = 2;
export const CLUADMEX_OT_GROUP = 3;
export const CLUADMEX_OT_RESOURCE = 4;
export const CLUADMEX_OT_RESOURCETYPE = 5;
export const CLUADMEX_OT_NETWORK = 6;
export const CLUADMEX_OT_NETINTERFACE = 7;

// Structs

/**
 * Windows.Win32.Networking.Clustering.CLUSTERVERSIONINFO_NT4 (size: 32)
 */
export interface CLUSTERVERSIONINFO_NT4 {
  /** u32 */
  dwVersionInfoSize: number;
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** u16 */
  BuildNumber: number;
  /** array */
  szVendorId: Deno.PointerValue | null;
  /** array */
  szCSDVersion: Deno.PointerValue | null;
}

export const sizeofCLUSTERVERSIONINFO_NT4 = 32;

export function allocCLUSTERVERSIONINFO_NT4(data?: Partial<CLUSTERVERSIONINFO_NT4>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTERVERSIONINFO_NT4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersionInfoSize !== undefined) view.setUint32(0, Number(data.dwVersionInfoSize), true);
  // 0x04: u16
  if (data?.MajorVersion !== undefined) view.setUint16(4, Number(data.MajorVersion), true);
  // 0x06: u16
  if (data?.MinorVersion !== undefined) view.setUint16(6, Number(data.MinorVersion), true);
  // 0x08: u16
  if (data?.BuildNumber !== undefined) view.setUint16(8, Number(data.BuildNumber), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.szVendorId !== undefined) view.setBigUint64(16, data.szVendorId === null ? 0n : BigInt(util.toPointer(data.szVendorId)), true);
  // 0x18: pointer
  if (data?.szCSDVersion !== undefined) view.setBigUint64(24, data.szCSDVersion === null ? 0n : BigInt(util.toPointer(data.szCSDVersion)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTERVERSIONINFO (size: 48)
 */
export interface CLUSTERVERSIONINFO {
  /** u32 */
  dwVersionInfoSize: number;
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
  /** u16 */
  BuildNumber: number;
  /** array */
  szVendorId: Deno.PointerValue | null;
  /** array */
  szCSDVersion: Deno.PointerValue | null;
  /** u32 */
  dwClusterHighestVersion: number;
  /** u32 */
  dwClusterLowestVersion: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofCLUSTERVERSIONINFO = 48;

export function allocCLUSTERVERSIONINFO(data?: Partial<CLUSTERVERSIONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTERVERSIONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersionInfoSize !== undefined) view.setUint32(0, Number(data.dwVersionInfoSize), true);
  // 0x04: u16
  if (data?.MajorVersion !== undefined) view.setUint16(4, Number(data.MajorVersion), true);
  // 0x06: u16
  if (data?.MinorVersion !== undefined) view.setUint16(6, Number(data.MinorVersion), true);
  // 0x08: u16
  if (data?.BuildNumber !== undefined) view.setUint16(8, Number(data.BuildNumber), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.szVendorId !== undefined) view.setBigUint64(16, data.szVendorId === null ? 0n : BigInt(util.toPointer(data.szVendorId)), true);
  // 0x18: pointer
  if (data?.szCSDVersion !== undefined) view.setBigUint64(24, data.szCSDVersion === null ? 0n : BigInt(util.toPointer(data.szCSDVersion)), true);
  // 0x20: u32
  if (data?.dwClusterHighestVersion !== undefined) view.setUint32(32, Number(data.dwClusterHighestVersion), true);
  // 0x24: u32
  if (data?.dwClusterLowestVersion !== undefined) view.setUint32(36, Number(data.dwClusterLowestVersion), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: u32
  if (data?.dwReserved !== undefined) view.setUint32(44, Number(data.dwReserved), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Networking.Clustering.CLUS_STARTING_PARAMS (size: 16)
 */
export interface CLUS_STARTING_PARAMS {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.BOOL */
  bForm: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bFirst: boolean;
}

export const sizeofCLUS_STARTING_PARAMS = 16;

export function allocCLUS_STARTING_PARAMS(data?: Partial<CLUS_STARTING_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_STARTING_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.bForm !== undefined) view.setInt32(4, Number(data.bForm), true);
  // 0x08: i32
  if (data?.bFirst !== undefined) view.setInt32(8, Number(data.bFirst), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT (size: 16)
 */
export interface CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Networking.Clustering.CLUSTER_RESOURCE_STATE_CHANGE_REASON */
  eReason: CLUSTER_RESOURCE_STATE_CHANGE_REASON;
}

export const sizeofCLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT = 16;

export function allocCLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT(data?: Partial<CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: i32
  if (data?.eReason !== undefined) view.setInt32(8, Number(data.eReason), true);
  // 0x0c: pad4
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_BATCH_COMMAND (size: 32)
 */
export interface CLUSTER_BATCH_COMMAND {
  /** Windows.Win32.Networking.Clustering.CLUSTER_REG_COMMAND */
  Command: CLUSTER_REG_COMMAND;
  /** u32 */
  dwOptions: number;
  /** Windows.Win32.Foundation.PWSTR */
  wzName: string | null;
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbData: number;
}

export const sizeofCLUSTER_BATCH_COMMAND = 32;

export function allocCLUSTER_BATCH_COMMAND(data?: Partial<CLUSTER_BATCH_COMMAND>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_BATCH_COMMAND);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Command !== undefined) view.setInt32(0, Number(data.Command), true);
  // 0x04: u32
  if (data?.dwOptions !== undefined) view.setUint32(4, Number(data.dwOptions), true);
  // 0x08: buffer
  if (data?.wzName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wzName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.lpData !== undefined) view.setBigUint64(16, data.lpData === null ? 0n : BigInt(util.toPointer(data.lpData)), true);
  // 0x18: u32
  if (data?.cbData !== undefined) view.setUint32(24, Number(data.cbData), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_READ_BATCH_COMMAND (size: 40)
 */
export interface CLUSTER_READ_BATCH_COMMAND {
  /** Windows.Win32.Networking.Clustering.CLUSTER_REG_COMMAND */
  Command: CLUSTER_REG_COMMAND;
  /** u32 */
  dwOptions: number;
  /** Windows.Win32.Foundation.PWSTR */
  wzSubkeyName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  wzValueName: string | null;
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbData: number;
}

export const sizeofCLUSTER_READ_BATCH_COMMAND = 40;

export function allocCLUSTER_READ_BATCH_COMMAND(data?: Partial<CLUSTER_READ_BATCH_COMMAND>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_READ_BATCH_COMMAND);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Command !== undefined) view.setInt32(0, Number(data.Command), true);
  // 0x04: u32
  if (data?.dwOptions !== undefined) view.setUint32(4, Number(data.dwOptions), true);
  // 0x08: buffer
  if (data?.wzSubkeyName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.wzSubkeyName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.wzValueName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.wzValueName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpData !== undefined) view.setBigUint64(24, data.lpData === null ? 0n : BigInt(util.toPointer(data.lpData)), true);
  // 0x20: u32
  if (data?.cbData !== undefined) view.setUint32(32, Number(data.cbData), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_ENUM_ITEM (size: 40)
 */
export interface CLUSTER_ENUM_ITEM {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwType: number;
  /** u32 */
  cbId: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszId: string | null;
  /** u32 */
  cbName: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszName: string | null;
}

export const sizeofCLUSTER_ENUM_ITEM = 40;

export function allocCLUSTER_ENUM_ITEM(data?: Partial<CLUSTER_ENUM_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_ENUM_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  // 0x08: u32
  if (data?.cbId !== undefined) view.setUint32(8, Number(data.cbId), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpszId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.cbName !== undefined) view.setUint32(24, Number(data.cbName), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpszName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpszName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_CREATE_GROUP_INFO (size: 8)
 */
export interface CLUSTER_CREATE_GROUP_INFO {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Networking.Clustering.CLUSGROUP_TYPE */
  groupType: CLUSGROUP_TYPE;
}

export const sizeofCLUSTER_CREATE_GROUP_INFO = 8;

export function allocCLUSTER_CREATE_GROUP_INFO(data?: Partial<CLUSTER_CREATE_GROUP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_CREATE_GROUP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: i32
  if (data?.groupType !== undefined) view.setInt32(4, Number(data.groupType), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_VALIDATE_PATH (size: 8)
 */
export interface CLUSTER_VALIDATE_PATH {
  /** array */
  szPath: Deno.PointerValue | null;
}

export const sizeofCLUSTER_VALIDATE_PATH = 8;

export function allocCLUSTER_VALIDATE_PATH(data?: Partial<CLUSTER_VALIDATE_PATH>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_VALIDATE_PATH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szPath !== undefined) view.setBigUint64(0, data.szPath === null ? 0n : BigInt(util.toPointer(data.szPath)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_VALIDATE_DIRECTORY (size: 8)
 */
export interface CLUSTER_VALIDATE_DIRECTORY {
  /** array */
  szPath: Deno.PointerValue | null;
}

export const sizeofCLUSTER_VALIDATE_DIRECTORY = 8;

export function allocCLUSTER_VALIDATE_DIRECTORY(data?: Partial<CLUSTER_VALIDATE_DIRECTORY>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_VALIDATE_DIRECTORY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szPath !== undefined) view.setBigUint64(0, data.szPath === null ? 0n : BigInt(util.toPointer(data.szPath)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_VALIDATE_NETNAME (size: 8)
 */
export interface CLUSTER_VALIDATE_NETNAME {
  /** array */
  szNetworkName: Deno.PointerValue | null;
}

export const sizeofCLUSTER_VALIDATE_NETNAME = 8;

export function allocCLUSTER_VALIDATE_NETNAME(data?: Partial<CLUSTER_VALIDATE_NETNAME>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_VALIDATE_NETNAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szNetworkName !== undefined) view.setBigUint64(0, data.szNetworkName === null ? 0n : BigInt(util.toPointer(data.szNetworkName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_VALIDATE_CSV_FILENAME (size: 8)
 */
export interface CLUSTER_VALIDATE_CSV_FILENAME {
  /** array */
  szFileName: Deno.PointerValue | null;
}

export const sizeofCLUSTER_VALIDATE_CSV_FILENAME = 8;

export function allocCLUSTER_VALIDATE_CSV_FILENAME(data?: Partial<CLUSTER_VALIDATE_CSV_FILENAME>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_VALIDATE_CSV_FILENAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szFileName !== undefined) view.setBigUint64(0, data.szFileName === null ? 0n : BigInt(util.toPointer(data.szFileName)), true);
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_SET_PASSWORD_STATUS (size: 24)
 */
export interface CLUSTER_SET_PASSWORD_STATUS {
  /** u32 */
  NodeId: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  SetAttempted: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ReturnStatus: number;
}

export const sizeofCLUSTER_SET_PASSWORD_STATUS = 24;

export function allocCLUSTER_SET_PASSWORD_STATUS(data?: Partial<CLUSTER_SET_PASSWORD_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_SET_PASSWORD_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeId !== undefined) view.setUint32(0, Number(data.NodeId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SetAttempted !== undefined) view.setBigUint64(8, data.SetAttempted === null ? 0n : BigInt(util.toPointer(data.SetAttempted)), true);
  // 0x10: u32
  if (data?.ReturnStatus !== undefined) view.setUint32(16, Number(data.ReturnStatus), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_IP_ENTRY (size: 16)
 */
export interface CLUSTER_IP_ENTRY {
  /** Windows.Win32.Foundation.PWSTR */
  lpszIpAddress: string | null;
  /** u32 */
  dwPrefixLength: number;
}

export const sizeofCLUSTER_IP_ENTRY = 16;

export function allocCLUSTER_IP_ENTRY(data?: Partial<CLUSTER_IP_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_IP_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpszIpAddress !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpszIpAddress);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwPrefixLength !== undefined) view.setUint32(8, Number(data.dwPrefixLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CREATE_CLUSTER_CONFIG (size: 64)
 */
export interface CREATE_CLUSTER_CONFIG {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszClusterName: string | null;
  /** u32 */
  cNodes: number;
  /** ptr */
  ppszNodeNames: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cIpEntries: number;
  /** ptr */
  pIpEntries: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  fEmptyCluster: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUSTER_MGMT_POINT_TYPE */
  managementPointType: CLUSTER_MGMT_POINT_TYPE;
  /** Windows.Win32.Networking.Clustering.CLUSTER_MGMT_POINT_RESTYPE */
  managementPointResType: CLUSTER_MGMT_POINT_RESTYPE;
}

export const sizeofCREATE_CLUSTER_CONFIG = 64;

export function allocCREATE_CLUSTER_CONFIG(data?: Partial<CREATE_CLUSTER_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_CLUSTER_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszClusterName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszClusterName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cNodes !== undefined) view.setUint32(16, Number(data.cNodes), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ppszNodeNames !== undefined) view.setBigUint64(24, data.ppszNodeNames === null ? 0n : BigInt(util.toPointer(data.ppszNodeNames)), true);
  // 0x20: u32
  if (data?.cIpEntries !== undefined) view.setUint32(32, Number(data.cIpEntries), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pIpEntries !== undefined) view.setBigUint64(40, data.pIpEntries === null ? 0n : BigInt(util.toPointer(data.pIpEntries)), true);
  // 0x30: pointer
  if (data?.fEmptyCluster !== undefined) view.setBigUint64(48, data.fEmptyCluster === null ? 0n : BigInt(util.toPointer(data.fEmptyCluster)), true);
  // 0x38: i32
  if (data?.managementPointType !== undefined) view.setInt32(56, Number(data.managementPointType), true);
  // 0x3c: i32
  if (data?.managementPointResType !== undefined) view.setInt32(60, Number(data.managementPointResType), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CREATE_CLUSTER_NAME_ACCOUNT (size: 64)
 */
export interface CREATE_CLUSTER_NAME_ACCOUNT {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszClusterName: string | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszUserName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszPassword: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pszDomain: string | null;
  /** Windows.Win32.Networking.Clustering.CLUSTER_MGMT_POINT_TYPE */
  managementPointType: CLUSTER_MGMT_POINT_TYPE;
  /** Windows.Win32.Networking.Clustering.CLUSTER_MGMT_POINT_RESTYPE */
  managementPointResType: CLUSTER_MGMT_POINT_RESTYPE;
  /** Windows.Win32.Foundation.BOOLEAN */
  bUpgradeVCOs: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_CLUSTER_NAME_ACCOUNT = 64;

export function allocCREATE_CLUSTER_NAME_ACCOUNT(data?: Partial<CREATE_CLUSTER_NAME_ACCOUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_CLUSTER_NAME_ACCOUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszClusterName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszClusterName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pszUserName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszUserName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszPassword !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszPassword);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.pszDomain !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszDomain);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: i32
  if (data?.managementPointType !== undefined) view.setInt32(48, Number(data.managementPointType), true);
  // 0x34: i32
  if (data?.managementPointResType !== undefined) view.setInt32(52, Number(data.managementPointResType), true);
  // 0x38: pointer
  if (data?.bUpgradeVCOs !== undefined) view.setBigUint64(56, data.bUpgradeVCOs === null ? 0n : BigInt(util.toPointer(data.bUpgradeVCOs)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.NOTIFY_FILTER_AND_TYPE (size: 16)
 */
export interface NOTIFY_FILTER_AND_TYPE {
  /** u32 */
  dwObjectType: number;
  /** i64 */
  FilterFlags: Deno.PointerValue;
}

export const sizeofNOTIFY_FILTER_AND_TYPE = 16;

export function allocNOTIFY_FILTER_AND_TYPE(data?: Partial<NOTIFY_FILTER_AND_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofNOTIFY_FILTER_AND_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwObjectType !== undefined) view.setUint32(0, Number(data.dwObjectType), true);
  // 0x04: pad4
  // 0x08: i64
  if (data?.FilterFlags !== undefined) view.setBigInt64(8, BigInt(data.FilterFlags), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_MEMBERSHIP_INFO (size: 16)
 */
export interface CLUSTER_MEMBERSHIP_INFO {
  /** Windows.Win32.Foundation.BOOL */
  HasQuorum: boolean;
  /** u32 */
  UpnodesSize: number;
  /** array */
  Upnodes: Deno.PointerValue | null;
}

export const sizeofCLUSTER_MEMBERSHIP_INFO = 16;

export function allocCLUSTER_MEMBERSHIP_INFO(data?: Partial<CLUSTER_MEMBERSHIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_MEMBERSHIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.HasQuorum !== undefined) view.setInt32(0, Number(data.HasQuorum), true);
  // 0x04: u32
  if (data?.UpnodesSize !== undefined) view.setUint32(4, Number(data.UpnodesSize), true);
  // 0x08: pointer
  if (data?.Upnodes !== undefined) view.setBigUint64(8, data.Upnodes === null ? 0n : BigInt(util.toPointer(data.Upnodes)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_AVAILABILITY_SET_CONFIG (size: 16)
 */
export interface CLUSTER_AVAILABILITY_SET_CONFIG {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwUpdateDomains: number;
  /** u32 */
  dwFaultDomains: number;
  /** Windows.Win32.Foundation.BOOL */
  bReserveSpareNode: boolean;
}

export const sizeofCLUSTER_AVAILABILITY_SET_CONFIG = 16;

export function allocCLUSTER_AVAILABILITY_SET_CONFIG(data?: Partial<CLUSTER_AVAILABILITY_SET_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_AVAILABILITY_SET_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwUpdateDomains !== undefined) view.setUint32(4, Number(data.dwUpdateDomains), true);
  // 0x08: u32
  if (data?.dwFaultDomains !== undefined) view.setUint32(8, Number(data.dwFaultDomains), true);
  // 0x0c: i32
  if (data?.bReserveSpareNode !== undefined) view.setInt32(12, Number(data.bReserveSpareNode), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_GROUP_ENUM_ITEM (size: 80)
 */
export interface CLUSTER_GROUP_ENUM_ITEM {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbId: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszId: string | null;
  /** u32 */
  cbName: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszName: string | null;
  /** Windows.Win32.Networking.Clustering.CLUSTER_GROUP_STATE */
  state: CLUSTER_GROUP_STATE;
  /** u32 */
  cbOwnerNode: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszOwnerNode: string | null;
  /** u32 */
  dwFlags: number;
  /** u32 */
  cbProperties: number;
  /** ptr */
  pProperties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbRoProperties: number;
  /** ptr */
  pRoProperties: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCLUSTER_GROUP_ENUM_ITEM = 80;

export function allocCLUSTER_GROUP_ENUM_ITEM(data?: Partial<CLUSTER_GROUP_ENUM_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_GROUP_ENUM_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbId !== undefined) view.setUint32(4, Number(data.cbId), true);
  // 0x08: buffer
  if (data?.lpszId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cbName !== undefined) view.setUint32(16, Number(data.cbName), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpszName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: i32
  if (data?.state !== undefined) view.setInt32(32, Number(data.state), true);
  // 0x24: u32
  if (data?.cbOwnerNode !== undefined) view.setUint32(36, Number(data.cbOwnerNode), true);
  // 0x28: buffer
  if (data?.lpszOwnerNode !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpszOwnerNode);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.dwFlags !== undefined) view.setUint32(48, Number(data.dwFlags), true);
  // 0x34: u32
  if (data?.cbProperties !== undefined) view.setUint32(52, Number(data.cbProperties), true);
  // 0x38: pointer
  if (data?.pProperties !== undefined) view.setBigUint64(56, data.pProperties === null ? 0n : BigInt(util.toPointer(data.pProperties)), true);
  // 0x40: u32
  if (data?.cbRoProperties !== undefined) view.setUint32(64, Number(data.cbRoProperties), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.pRoProperties !== undefined) view.setBigUint64(72, data.pRoProperties === null ? 0n : BigInt(util.toPointer(data.pRoProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_RESOURCE_ENUM_ITEM (size: 96)
 */
export interface CLUSTER_RESOURCE_ENUM_ITEM {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbId: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszId: string | null;
  /** u32 */
  cbName: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszName: string | null;
  /** u32 */
  cbOwnerGroupName: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszOwnerGroupName: string | null;
  /** u32 */
  cbOwnerGroupId: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszOwnerGroupId: string | null;
  /** u32 */
  cbProperties: number;
  /** ptr */
  pProperties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbRoProperties: number;
  /** ptr */
  pRoProperties: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCLUSTER_RESOURCE_ENUM_ITEM = 96;

export function allocCLUSTER_RESOURCE_ENUM_ITEM(data?: Partial<CLUSTER_RESOURCE_ENUM_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_RESOURCE_ENUM_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbId !== undefined) view.setUint32(4, Number(data.cbId), true);
  // 0x08: buffer
  if (data?.lpszId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cbName !== undefined) view.setUint32(16, Number(data.cbName), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpszName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.cbOwnerGroupName !== undefined) view.setUint32(32, Number(data.cbOwnerGroupName), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.lpszOwnerGroupName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpszOwnerGroupName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.cbOwnerGroupId !== undefined) view.setUint32(48, Number(data.cbOwnerGroupId), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.lpszOwnerGroupId !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.lpszOwnerGroupId);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.cbProperties !== undefined) view.setUint32(64, Number(data.cbProperties), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.pProperties !== undefined) view.setBigUint64(72, data.pProperties === null ? 0n : BigInt(util.toPointer(data.pProperties)), true);
  // 0x50: u32
  if (data?.cbRoProperties !== undefined) view.setUint32(80, Number(data.cbRoProperties), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pRoProperties !== undefined) view.setBigUint64(88, data.pRoProperties === null ? 0n : BigInt(util.toPointer(data.pRoProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.GROUP_FAILURE_INFO (size: 8)
 */
export interface GROUP_FAILURE_INFO {
  /** u32 */
  dwFailoverAttemptsRemaining: number;
  /** u32 */
  dwFailoverPeriodRemaining: number;
}

export const sizeofGROUP_FAILURE_INFO = 8;

export function allocGROUP_FAILURE_INFO(data?: Partial<GROUP_FAILURE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_FAILURE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFailoverAttemptsRemaining !== undefined) view.setUint32(0, Number(data.dwFailoverAttemptsRemaining), true);
  // 0x04: u32
  if (data?.dwFailoverPeriodRemaining !== undefined) view.setUint32(4, Number(data.dwFailoverPeriodRemaining), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.GROUP_FAILURE_INFO_BUFFER (size: 16)
 */
export interface GROUP_FAILURE_INFO_BUFFER {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Networking.Clustering.GROUP_FAILURE_INFO */
  Info: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGROUP_FAILURE_INFO_BUFFER = 16;

export function allocGROUP_FAILURE_INFO_BUFFER(data?: Partial<GROUP_FAILURE_INFO_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_FAILURE_INFO_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Info !== undefined) view.setBigUint64(8, data.Info === null ? 0n : BigInt(util.toPointer(data.Info)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.RESOURCE_FAILURE_INFO (size: 8)
 */
export interface RESOURCE_FAILURE_INFO {
  /** u32 */
  dwRestartAttemptsRemaining: number;
  /** u32 */
  dwRestartPeriodRemaining: number;
}

export const sizeofRESOURCE_FAILURE_INFO = 8;

export function allocRESOURCE_FAILURE_INFO(data?: Partial<RESOURCE_FAILURE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRESOURCE_FAILURE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRestartAttemptsRemaining !== undefined) view.setUint32(0, Number(data.dwRestartAttemptsRemaining), true);
  // 0x04: u32
  if (data?.dwRestartPeriodRemaining !== undefined) view.setUint32(4, Number(data.dwRestartPeriodRemaining), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.RESOURCE_FAILURE_INFO_BUFFER (size: 16)
 */
export interface RESOURCE_FAILURE_INFO_BUFFER {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Networking.Clustering.RESOURCE_FAILURE_INFO */
  Info: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRESOURCE_FAILURE_INFO_BUFFER = 16;

export function allocRESOURCE_FAILURE_INFO_BUFFER(data?: Partial<RESOURCE_FAILURE_INFO_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofRESOURCE_FAILURE_INFO_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Info !== undefined) view.setBigUint64(8, data.Info === null ? 0n : BigInt(util.toPointer(data.Info)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.RESOURCE_TERMINAL_FAILURE_INFO_BUFFER (size: 8)
 */
export interface RESOURCE_TERMINAL_FAILURE_INFO_BUFFER {
  /** Windows.Win32.Foundation.BOOL */
  isTerminalFailure: boolean;
  /** u32 */
  restartPeriodRemaining: number;
}

export const sizeofRESOURCE_TERMINAL_FAILURE_INFO_BUFFER = 8;

export function allocRESOURCE_TERMINAL_FAILURE_INFO_BUFFER(data?: Partial<RESOURCE_TERMINAL_FAILURE_INFO_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofRESOURCE_TERMINAL_FAILURE_INFO_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.isTerminalFailure !== undefined) view.setInt32(0, Number(data.isTerminalFailure), true);
  // 0x04: u32
  if (data?.restartPeriodRemaining !== undefined) view.setUint32(4, Number(data.restartPeriodRemaining), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_SYNTAX (size: 16)
 */
export interface CLUSPROP_SYNTAX {
  /** u32 */
  dw: number;
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSPROP_SYNTAX = 16;

export function allocCLUSPROP_SYNTAX(data?: Partial<CLUSPROP_SYNTAX>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_SYNTAX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dw !== undefined) view.setUint32(0, Number(data.dw), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_VALUE (size: 16)
 */
export interface CLUSPROP_VALUE {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_SYNTAX */
  Syntax: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbLength: number;
}

export const sizeofCLUSPROP_VALUE = 16;

export function allocCLUSPROP_VALUE(data?: Partial<CLUSPROP_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Syntax !== undefined) view.setBigUint64(0, data.Syntax === null ? 0n : BigInt(util.toPointer(data.Syntax)), true);
  // 0x08: u32
  if (data?.cbLength !== undefined) view.setUint32(8, Number(data.cbLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_BINARY (size: 16)
 */
export interface CLUSPROP_BINARY {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5129_C41: Uint8Array | Deno.PointerValue | null;
  /** array */
  rgb: Deno.PointerValue | null;
}

export const sizeofCLUSPROP_BINARY = 16;

export function allocCLUSPROP_BINARY(data?: Partial<CLUSPROP_BINARY>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_BINARY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5129_C41 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5129_C41 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5129_C41)), true);
  // 0x08: pointer
  if (data?.rgb !== undefined) view.setBigUint64(8, data.rgb === null ? 0n : BigInt(util.toPointer(data.rgb)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_WORD (size: 16)
 */
export interface CLUSPROP_WORD {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5139_C39: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  w: number;
}

export const sizeofCLUSPROP_WORD = 16;

export function allocCLUSPROP_WORD(data?: Partial<CLUSPROP_WORD>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_WORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5139_C39 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5139_C39 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5139_C39)), true);
  // 0x08: u16
  if (data?.w !== undefined) view.setUint16(8, Number(data.w), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_DWORD (size: 16)
 */
export interface CLUSPROP_DWORD {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5149_C40: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dw: number;
}

export const sizeofCLUSPROP_DWORD = 16;

export function allocCLUSPROP_DWORD(data?: Partial<CLUSPROP_DWORD>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_DWORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5149_C40 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5149_C40 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5149_C40)), true);
  // 0x08: u32
  if (data?.dw !== undefined) view.setUint32(8, Number(data.dw), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_LONG (size: 16)
 */
export interface CLUSPROP_LONG {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5159_C39: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  l: number;
}

export const sizeofCLUSPROP_LONG = 16;

export function allocCLUSPROP_LONG(data?: Partial<CLUSPROP_LONG>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_LONG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5159_C39 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5159_C39 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5159_C39)), true);
  // 0x08: i32
  if (data?.l !== undefined) view.setInt32(8, Number(data.l), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_SZ (size: 16)
 */
export interface CLUSPROP_SZ {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5169_C37: Uint8Array | Deno.PointerValue | null;
  /** array */
  sz: Deno.PointerValue | null;
}

export const sizeofCLUSPROP_SZ = 16;

export function allocCLUSPROP_SZ(data?: Partial<CLUSPROP_SZ>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_SZ);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5169_C37 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5169_C37 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5169_C37)), true);
  // 0x08: pointer
  if (data?.sz !== undefined) view.setBigUint64(8, data.sz === null ? 0n : BigInt(util.toPointer(data.sz)), true);
  return buf;
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.ULARGE_INTEGER (size: 24)
 */
export interface ULARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofULARGE_INTEGER = 24;

export function allocULARGE_INTEGER(data?: Partial<ULARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofULARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: u64
  if (data?.QuadPart !== undefined) view.setBigUint64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_ULARGE_INTEGER (size: 16)
 */
export interface CLUSPROP_ULARGE_INTEGER {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5186_C14: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.ULARGE_INTEGER */
  li: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSPROP_ULARGE_INTEGER = 16;

export function allocCLUSPROP_ULARGE_INTEGER(data?: Partial<CLUSPROP_ULARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_ULARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5186_C14 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5186_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5186_C14)), true);
  // 0x08: pointer
  if (data?.li !== undefined) view.setBigUint64(8, data.li === null ? 0n : BigInt(util.toPointer(data.li)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_LARGE_INTEGER (size: 16)
 */
export interface CLUSPROP_LARGE_INTEGER {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5199_C14: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  li: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSPROP_LARGE_INTEGER = 16;

export function allocCLUSPROP_LARGE_INTEGER(data?: Partial<CLUSPROP_LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_LARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5199_C14 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5199_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5199_C14)), true);
  // 0x08: pointer
  if (data?.li !== undefined) view.setBigUint64(8, data.li === null ? 0n : BigInt(util.toPointer(data.li)), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_SECURITY_DESCRIPTOR (size: 16)
 */
export interface CLUSPROP_SECURITY_DESCRIPTOR {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5211_C54: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSPROP_SECURITY_DESCRIPTOR = 16;

export function allocCLUSPROP_SECURITY_DESCRIPTOR(data?: Partial<CLUSPROP_SECURITY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_SECURITY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5211_C54 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5211_C54 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5211_C54)), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_FILETIME (size: 16)
 */
export interface CLUSPROP_FILETIME {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5225_C14: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ft: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSPROP_FILETIME = 16;

export function allocCLUSPROP_FILETIME(data?: Partial<CLUSPROP_FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_FILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5225_C14 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5225_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5225_C14)), true);
  // 0x08: pointer
  if (data?.ft !== undefined) view.setBigUint64(8, data.ft === null ? 0n : BigInt(util.toPointer(data.ft)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_RESOURCE_CLASS_INFO (size: 8)
 */
export interface CLUS_RESOURCE_CLASS_INFO {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUS_RESOURCE_CLASS_INFO = 8;

export function allocCLUS_RESOURCE_CLASS_INFO(data?: Partial<CLUS_RESOURCE_CLASS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_RESOURCE_CLASS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_RESOURCE_CLASS (size: 16)
 */
export interface CLUSPROP_RESOURCE_CLASS {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5250_C14: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUSTER_RESOURCE_CLASS */
  rc: CLUSTER_RESOURCE_CLASS;
}

export const sizeofCLUSPROP_RESOURCE_CLASS = 16;

export function allocCLUSPROP_RESOURCE_CLASS(data?: Partial<CLUSPROP_RESOURCE_CLASS>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_RESOURCE_CLASS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5250_C14 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5250_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5250_C14)), true);
  // 0x08: i32
  if (data?.rc !== undefined) view.setInt32(8, Number(data.rc), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_RESOURCE_CLASS_INFO (size: 16)
 */
export interface CLUSPROP_RESOURCE_CLASS_INFO {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5261_C14: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUS_RESOURCE_CLASS_INFO */
  __AnonymousBase_clusapi_L5262_C14: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSPROP_RESOURCE_CLASS_INFO = 16;

export function allocCLUSPROP_RESOURCE_CLASS_INFO(data?: Partial<CLUSPROP_RESOURCE_CLASS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_RESOURCE_CLASS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5261_C14 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5261_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5261_C14)), true);
  // 0x08: pointer
  if (data?.__AnonymousBase_clusapi_L5262_C14 !== undefined) view.setBigUint64(8, data.__AnonymousBase_clusapi_L5262_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5262_C14)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_REQUIRED_DEPENDENCY (size: 24)
 */
export interface CLUSPROP_REQUIRED_DEPENDENCY {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  Value: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUSPROP_RESOURCE_CLASS */
  ResClass: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUSPROP_SZ */
  ResTypeName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSPROP_REQUIRED_DEPENDENCY = 24;

export function allocCLUSPROP_REQUIRED_DEPENDENCY(data?: Partial<CLUSPROP_REQUIRED_DEPENDENCY>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_REQUIRED_DEPENDENCY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Value !== undefined) view.setBigUint64(0, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  // 0x08: pointer
  if (data?.ResClass !== undefined) view.setBigUint64(8, data.ResClass === null ? 0n : BigInt(util.toPointer(data.ResClass)), true);
  // 0x10: pointer
  if (data?.ResTypeName !== undefined) view.setBigUint64(16, data.ResTypeName === null ? 0n : BigInt(util.toPointer(data.ResTypeName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_FORCE_QUORUM_INFO (size: 24)
 */
export interface CLUS_FORCE_QUORUM_INFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwNodeBitMask: number;
  /** u32 */
  dwMaxNumberofNodes: number;
  /** array */
  multiszNodeList: Deno.PointerValue | null;
}

export const sizeofCLUS_FORCE_QUORUM_INFO = 24;

export function allocCLUS_FORCE_QUORUM_INFO(data?: Partial<CLUS_FORCE_QUORUM_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_FORCE_QUORUM_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwNodeBitMask !== undefined) view.setUint32(4, Number(data.dwNodeBitMask), true);
  // 0x08: u32
  if (data?.dwMaxNumberofNodes !== undefined) view.setUint32(8, Number(data.dwMaxNumberofNodes), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.multiszNodeList !== undefined) view.setBigUint64(16, data.multiszNodeList === null ? 0n : BigInt(util.toPointer(data.multiszNodeList)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_PARTITION_INFO (size: 48)
 */
export interface CLUS_PARTITION_INFO {
  /** u32 */
  dwFlags: number;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szVolumeLabel: Deno.PointerValue | null;
  /** u32 */
  dwSerialNumber: number;
  /** u32 */
  rgdwMaximumComponentLength: number;
  /** u32 */
  dwFileSystemFlags: number;
  /** array */
  szFileSystem: Deno.PointerValue | null;
}

export const sizeofCLUS_PARTITION_INFO = 48;

export function allocCLUS_PARTITION_INFO(data?: Partial<CLUS_PARTITION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_PARTITION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(8, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x10: pointer
  if (data?.szVolumeLabel !== undefined) view.setBigUint64(16, data.szVolumeLabel === null ? 0n : BigInt(util.toPointer(data.szVolumeLabel)), true);
  // 0x18: u32
  if (data?.dwSerialNumber !== undefined) view.setUint32(24, Number(data.dwSerialNumber), true);
  // 0x1c: u32
  if (data?.rgdwMaximumComponentLength !== undefined) view.setUint32(28, Number(data.rgdwMaximumComponentLength), true);
  // 0x20: u32
  if (data?.dwFileSystemFlags !== undefined) view.setUint32(32, Number(data.dwFileSystemFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.szFileSystem !== undefined) view.setBigUint64(40, data.szFileSystem === null ? 0n : BigInt(util.toPointer(data.szFileSystem)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_PARTITION_INFO_EX (size: 80)
 */
export interface CLUS_PARTITION_INFO_EX {
  /** u32 */
  dwFlags: number;
  /** array */
  szDeviceName: Deno.PointerValue | null;
  /** array */
  szVolumeLabel: Deno.PointerValue | null;
  /** u32 */
  dwSerialNumber: number;
  /** u32 */
  rgdwMaximumComponentLength: number;
  /** u32 */
  dwFileSystemFlags: number;
  /** array */
  szFileSystem: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.ULARGE_INTEGER */
  TotalSizeInBytes: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.ULARGE_INTEGER */
  FreeSizeInBytes: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DeviceNumber: number;
  /** u32 */
  PartitionNumber: number;
  /** System.Guid */
  VolumeGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUS_PARTITION_INFO_EX = 80;

export function allocCLUS_PARTITION_INFO_EX(data?: Partial<CLUS_PARTITION_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_PARTITION_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szDeviceName !== undefined) view.setBigUint64(8, data.szDeviceName === null ? 0n : BigInt(util.toPointer(data.szDeviceName)), true);
  // 0x10: pointer
  if (data?.szVolumeLabel !== undefined) view.setBigUint64(16, data.szVolumeLabel === null ? 0n : BigInt(util.toPointer(data.szVolumeLabel)), true);
  // 0x18: u32
  if (data?.dwSerialNumber !== undefined) view.setUint32(24, Number(data.dwSerialNumber), true);
  // 0x1c: u32
  if (data?.rgdwMaximumComponentLength !== undefined) view.setUint32(28, Number(data.rgdwMaximumComponentLength), true);
  // 0x20: u32
  if (data?.dwFileSystemFlags !== undefined) view.setUint32(32, Number(data.dwFileSystemFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.szFileSystem !== undefined) view.setBigUint64(40, data.szFileSystem === null ? 0n : BigInt(util.toPointer(data.szFileSystem)), true);
  // 0x30: pointer
  if (data?.TotalSizeInBytes !== undefined) view.setBigUint64(48, data.TotalSizeInBytes === null ? 0n : BigInt(util.toPointer(data.TotalSizeInBytes)), true);
  // 0x38: pointer
  if (data?.FreeSizeInBytes !== undefined) view.setBigUint64(56, data.FreeSizeInBytes === null ? 0n : BigInt(util.toPointer(data.FreeSizeInBytes)), true);
  // 0x40: u32
  if (data?.DeviceNumber !== undefined) view.setUint32(64, Number(data.DeviceNumber), true);
  // 0x44: u32
  if (data?.PartitionNumber !== undefined) view.setUint32(68, Number(data.PartitionNumber), true);
  // 0x48: pointer
  if (data?.VolumeGuid !== undefined) view.setBigUint64(72, data.VolumeGuid === null ? 0n : BigInt(util.toPointer(data.VolumeGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_PARTITION_INFO_EX2 (size: 24)
 */
export interface CLUS_PARTITION_INFO_EX2 {
  /** System.Guid */
  GptPartitionId: Uint8Array | Deno.PointerValue | null;
  /** array */
  szPartitionName: Deno.PointerValue | null;
  /** u32 */
  EncryptionFlags: number;
}

export const sizeofCLUS_PARTITION_INFO_EX2 = 24;

export function allocCLUS_PARTITION_INFO_EX2(data?: Partial<CLUS_PARTITION_INFO_EX2>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_PARTITION_INFO_EX2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.GptPartitionId !== undefined) view.setBigUint64(0, data.GptPartitionId === null ? 0n : BigInt(util.toPointer(data.GptPartitionId)), true);
  // 0x08: pointer
  if (data?.szPartitionName !== undefined) view.setBigUint64(8, data.szPartitionName === null ? 0n : BigInt(util.toPointer(data.szPartitionName)), true);
  // 0x10: u32
  if (data?.EncryptionFlags !== undefined) view.setUint32(16, Number(data.EncryptionFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_CSV_VOLUME_INFO (size: 40)
 */
export interface CLUS_CSV_VOLUME_INFO {
  /** Windows.Win32.Foundation.ULARGE_INTEGER */
  VolumeOffset: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PartitionNumber: number;
  /** Windows.Win32.Networking.Clustering.CLUSTER_CSV_VOLUME_FAULT_STATE */
  FaultState: CLUSTER_CSV_VOLUME_FAULT_STATE;
  /** Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_BACKUP_STATE */
  BackupState: CLUSTER_SHARED_VOLUME_BACKUP_STATE;
  /** array */
  szVolumeFriendlyName: Deno.PointerValue | null;
  /** array */
  szVolumeName: Deno.PointerValue | null;
}

export const sizeofCLUS_CSV_VOLUME_INFO = 40;

export function allocCLUS_CSV_VOLUME_INFO(data?: Partial<CLUS_CSV_VOLUME_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_CSV_VOLUME_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VolumeOffset !== undefined) view.setBigUint64(0, data.VolumeOffset === null ? 0n : BigInt(util.toPointer(data.VolumeOffset)), true);
  // 0x08: u32
  if (data?.PartitionNumber !== undefined) view.setUint32(8, Number(data.PartitionNumber), true);
  // 0x0c: i32
  if (data?.FaultState !== undefined) view.setInt32(12, Number(data.FaultState), true);
  // 0x10: i32
  if (data?.BackupState !== undefined) view.setInt32(16, Number(data.BackupState), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szVolumeFriendlyName !== undefined) view.setBigUint64(24, data.szVolumeFriendlyName === null ? 0n : BigInt(util.toPointer(data.szVolumeFriendlyName)), true);
  // 0x20: pointer
  if (data?.szVolumeName !== undefined) view.setBigUint64(32, data.szVolumeName === null ? 0n : BigInt(util.toPointer(data.szVolumeName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_CSV_VOLUME_NAME (size: 24)
 */
export interface CLUS_CSV_VOLUME_NAME {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  VolumeOffset: Uint8Array | Deno.PointerValue | null;
  /** array */
  szVolumeName: Deno.PointerValue | null;
  /** array */
  szRootPath: Deno.PointerValue | null;
}

export const sizeofCLUS_CSV_VOLUME_NAME = 24;

export function allocCLUS_CSV_VOLUME_NAME(data?: Partial<CLUS_CSV_VOLUME_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_CSV_VOLUME_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.VolumeOffset !== undefined) view.setBigUint64(0, data.VolumeOffset === null ? 0n : BigInt(util.toPointer(data.VolumeOffset)), true);
  // 0x08: pointer
  if (data?.szVolumeName !== undefined) view.setBigUint64(8, data.szVolumeName === null ? 0n : BigInt(util.toPointer(data.szVolumeName)), true);
  // 0x10: pointer
  if (data?.szRootPath !== undefined) view.setBigUint64(16, data.szRootPath === null ? 0n : BigInt(util.toPointer(data.szRootPath)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_STATE_INFO (size: 24)
 */
export interface CLUSTER_SHARED_VOLUME_STATE_INFO {
  /** array */
  szVolumeName: Deno.PointerValue | null;
  /** array */
  szNodeName: Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_STATE */
  VolumeState: CLUSTER_SHARED_VOLUME_STATE;
}

export const sizeofCLUSTER_SHARED_VOLUME_STATE_INFO = 24;

export function allocCLUSTER_SHARED_VOLUME_STATE_INFO(data?: Partial<CLUSTER_SHARED_VOLUME_STATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_SHARED_VOLUME_STATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szVolumeName !== undefined) view.setBigUint64(0, data.szVolumeName === null ? 0n : BigInt(util.toPointer(data.szVolumeName)), true);
  // 0x08: pointer
  if (data?.szNodeName !== undefined) view.setBigUint64(8, data.szNodeName === null ? 0n : BigInt(util.toPointer(data.szNodeName)), true);
  // 0x10: i32
  if (data?.VolumeState !== undefined) view.setInt32(16, Number(data.VolumeState), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_STATE_INFO_EX (size: 48)
 */
export interface CLUSTER_SHARED_VOLUME_STATE_INFO_EX {
  /** array */
  szVolumeName: Deno.PointerValue | null;
  /** array */
  szNodeName: Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_STATE */
  VolumeState: CLUSTER_SHARED_VOLUME_STATE;
  /** array */
  szVolumeFriendlyName: Deno.PointerValue | null;
  /** u64 */
  RedirectedIOReason: Deno.PointerValue;
  /** u64 */
  VolumeRedirectedIOReason: Deno.PointerValue;
}

export const sizeofCLUSTER_SHARED_VOLUME_STATE_INFO_EX = 48;

export function allocCLUSTER_SHARED_VOLUME_STATE_INFO_EX(data?: Partial<CLUSTER_SHARED_VOLUME_STATE_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_SHARED_VOLUME_STATE_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szVolumeName !== undefined) view.setBigUint64(0, data.szVolumeName === null ? 0n : BigInt(util.toPointer(data.szVolumeName)), true);
  // 0x08: pointer
  if (data?.szNodeName !== undefined) view.setBigUint64(8, data.szNodeName === null ? 0n : BigInt(util.toPointer(data.szNodeName)), true);
  // 0x10: i32
  if (data?.VolumeState !== undefined) view.setInt32(16, Number(data.VolumeState), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.szVolumeFriendlyName !== undefined) view.setBigUint64(24, data.szVolumeFriendlyName === null ? 0n : BigInt(util.toPointer(data.szVolumeFriendlyName)), true);
  // 0x20: u64
  if (data?.RedirectedIOReason !== undefined) view.setBigUint64(32, BigInt(data.RedirectedIOReason), true);
  // 0x28: u64
  if (data?.VolumeRedirectedIOReason !== undefined) view.setBigUint64(40, BigInt(data.VolumeRedirectedIOReason), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME (size: 16)
 */
export interface CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME {
  /** Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE */
  InputType: CLUSTER_SHARED_VOLUME_RENAME_INPUT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME = 16;

export function allocCLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME(data?: Partial<CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.InputType !== undefined) view.setInt32(0, Number(data.InputType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME (size: 8)
 */
export interface CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME {
  /** array */
  NewVolumeName: Deno.PointerValue | null;
}

export const sizeofCLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME = 8;

export function allocCLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME(data?: Partial<CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NewVolumeName !== undefined) view.setBigUint64(0, data.NewVolumeName === null ? 0n : BigInt(util.toPointer(data.NewVolumeName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME (size: 16)
 */
export interface CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME {
  /** array */
  NewVolumeName: Deno.PointerValue | null;
  /** array */
  NewVolumeGuid: Deno.PointerValue | null;
}

export const sizeofCLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME = 16;

export function allocCLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME(data?: Partial<CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NewVolumeName !== undefined) view.setBigUint64(0, data.NewVolumeName === null ? 0n : BigInt(util.toPointer(data.NewVolumeName)), true);
  // 0x08: pointer
  if (data?.NewVolumeGuid !== undefined) view.setBigUint64(8, data.NewVolumeGuid === null ? 0n : BigInt(util.toPointer(data.NewVolumeGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_RENAME_INPUT (size: 16)
 */
export interface CLUSTER_SHARED_VOLUME_RENAME_INPUT {
  /** Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME */
  __AnonymousBase_clusapi_L5464_C14: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_RENAME_INPUT_NAME */
  __AnonymousBase_clusapi_L5465_C14: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSTER_SHARED_VOLUME_RENAME_INPUT = 16;

export function allocCLUSTER_SHARED_VOLUME_RENAME_INPUT(data?: Partial<CLUSTER_SHARED_VOLUME_RENAME_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_SHARED_VOLUME_RENAME_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5464_C14 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5464_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5464_C14)), true);
  // 0x08: pointer
  if (data?.__AnonymousBase_clusapi_L5465_C14 !== undefined) view.setBigUint64(8, data.__AnonymousBase_clusapi_L5465_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5465_C14)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT (size: 16)
 */
export interface CLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT {
  /** Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_RENAME_INPUT_VOLUME */
  __AnonymousBase_clusapi_L5475_C14: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_RENAME_INPUT_GUID_NAME */
  __AnonymousBase_clusapi_L5476_C14: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT = 16;

export function allocCLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT(data?: Partial<CLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_SHARED_VOLUME_RENAME_GUID_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5475_C14 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5475_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5475_C14)), true);
  // 0x08: pointer
  if (data?.__AnonymousBase_clusapi_L5476_C14 !== undefined) view.setBigUint64(8, data.__AnonymousBase_clusapi_L5476_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5476_C14)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_CHKDSK_INFO (size: 24)
 */
export interface CLUS_CHKDSK_INFO {
  /** u32 */
  PartitionNumber: number;
  /** u32 */
  ChkdskState: number;
  /** u32 */
  FileIdCount: number;
  /** array */
  FileIdList: Deno.PointerValue | null;
}

export const sizeofCLUS_CHKDSK_INFO = 24;

export function allocCLUS_CHKDSK_INFO(data?: Partial<CLUS_CHKDSK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_CHKDSK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PartitionNumber !== undefined) view.setUint32(0, Number(data.PartitionNumber), true);
  // 0x04: u32
  if (data?.ChkdskState !== undefined) view.setUint32(4, Number(data.ChkdskState), true);
  // 0x08: u32
  if (data?.FileIdCount !== undefined) view.setUint32(8, Number(data.FileIdCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.FileIdList !== undefined) view.setBigUint64(16, data.FileIdList === null ? 0n : BigInt(util.toPointer(data.FileIdList)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_DISK_NUMBER_INFO (size: 8)
 */
export interface CLUS_DISK_NUMBER_INFO {
  /** u32 */
  DiskNumber: number;
  /** u32 */
  BytesPerSector: number;
}

export const sizeofCLUS_DISK_NUMBER_INFO = 8;

export function allocCLUS_DISK_NUMBER_INFO(data?: Partial<CLUS_DISK_NUMBER_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_DISK_NUMBER_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DiskNumber !== undefined) view.setUint32(0, Number(data.DiskNumber), true);
  // 0x04: u32
  if (data?.BytesPerSector !== undefined) view.setUint32(4, Number(data.BytesPerSector), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_SHARED_VOLUME_BACKUP_MODE (size: 16)
 */
export interface CLUS_SHARED_VOLUME_BACKUP_MODE {
  /** Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_BACKUP_STATE */
  BackupState: CLUSTER_SHARED_VOLUME_BACKUP_STATE;
  /** u32 */
  DelayTimerInSecs: number;
  /** array */
  VolumeName: Deno.PointerValue | null;
}

export const sizeofCLUS_SHARED_VOLUME_BACKUP_MODE = 16;

export function allocCLUS_SHARED_VOLUME_BACKUP_MODE(data?: Partial<CLUS_SHARED_VOLUME_BACKUP_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_SHARED_VOLUME_BACKUP_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BackupState !== undefined) view.setInt32(0, Number(data.BackupState), true);
  // 0x04: u32
  if (data?.DelayTimerInSecs !== undefined) view.setUint32(4, Number(data.DelayTimerInSecs), true);
  // 0x08: pointer
  if (data?.VolumeName !== undefined) view.setBigUint64(8, data.VolumeName === null ? 0n : BigInt(util.toPointer(data.VolumeName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_PARTITION_INFO (size: 16)
 */
export interface CLUSPROP_PARTITION_INFO {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5507_C14: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUS_PARTITION_INFO */
  __AnonymousBase_clusapi_L5508_C14: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSPROP_PARTITION_INFO = 16;

export function allocCLUSPROP_PARTITION_INFO(data?: Partial<CLUSPROP_PARTITION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_PARTITION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5507_C14 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5507_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5507_C14)), true);
  // 0x08: pointer
  if (data?.__AnonymousBase_clusapi_L5508_C14 !== undefined) view.setBigUint64(8, data.__AnonymousBase_clusapi_L5508_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5508_C14)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_PARTITION_INFO_EX (size: 16)
 */
export interface CLUSPROP_PARTITION_INFO_EX {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5519_C14: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUS_PARTITION_INFO_EX */
  __AnonymousBase_clusapi_L5520_C14: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSPROP_PARTITION_INFO_EX = 16;

export function allocCLUSPROP_PARTITION_INFO_EX(data?: Partial<CLUSPROP_PARTITION_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_PARTITION_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5519_C14 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5519_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5519_C14)), true);
  // 0x08: pointer
  if (data?.__AnonymousBase_clusapi_L5520_C14 !== undefined) view.setBigUint64(8, data.__AnonymousBase_clusapi_L5520_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5520_C14)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_PARTITION_INFO_EX2 (size: 16)
 */
export interface CLUSPROP_PARTITION_INFO_EX2 {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_PARTITION_INFO_EX */
  __AnonymousBase_clusapi_L5533_C14: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUS_PARTITION_INFO_EX2 */
  __AnonymousBase_clusapi_L5534_C14: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSPROP_PARTITION_INFO_EX2 = 16;

export function allocCLUSPROP_PARTITION_INFO_EX2(data?: Partial<CLUSPROP_PARTITION_INFO_EX2>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_PARTITION_INFO_EX2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5533_C14 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5533_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5533_C14)), true);
  // 0x08: pointer
  if (data?.__AnonymousBase_clusapi_L5534_C14 !== undefined) view.setBigUint64(8, data.__AnonymousBase_clusapi_L5534_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5534_C14)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_FTSET_INFO (size: 8)
 */
export interface CLUS_FTSET_INFO {
  /** u32 */
  dwRootSignature: number;
  /** u32 */
  dwFtType: number;
}

export const sizeofCLUS_FTSET_INFO = 8;

export function allocCLUS_FTSET_INFO(data?: Partial<CLUS_FTSET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_FTSET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRootSignature !== undefined) view.setUint32(0, Number(data.dwRootSignature), true);
  // 0x04: u32
  if (data?.dwFtType !== undefined) view.setUint32(4, Number(data.dwFtType), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_FTSET_INFO (size: 16)
 */
export interface CLUSPROP_FTSET_INFO {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5555_C14: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUS_FTSET_INFO */
  __AnonymousBase_clusapi_L5556_C14: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSPROP_FTSET_INFO = 16;

export function allocCLUSPROP_FTSET_INFO(data?: Partial<CLUSPROP_FTSET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_FTSET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5555_C14 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5555_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5555_C14)), true);
  // 0x08: pointer
  if (data?.__AnonymousBase_clusapi_L5556_C14 !== undefined) view.setBigUint64(8, data.__AnonymousBase_clusapi_L5556_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5556_C14)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_SCSI_ADDRESS (size: 8)
 */
export interface CLUS_SCSI_ADDRESS {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUS_SCSI_ADDRESS = 8;

export function allocCLUS_SCSI_ADDRESS(data?: Partial<CLUS_SCSI_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_SCSI_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_SCSI_ADDRESS (size: 16)
 */
export interface CLUSPROP_SCSI_ADDRESS {
  /** Windows.Win32.Networking.Clustering.CLUSPROP_VALUE */
  __AnonymousBase_clusapi_L5583_C14: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.CLUS_SCSI_ADDRESS */
  __AnonymousBase_clusapi_L5584_C14: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSPROP_SCSI_ADDRESS = 16;

export function allocCLUSPROP_SCSI_ADDRESS(data?: Partial<CLUSPROP_SCSI_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_SCSI_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.__AnonymousBase_clusapi_L5583_C14 !== undefined) view.setBigUint64(0, data.__AnonymousBase_clusapi_L5583_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5583_C14)), true);
  // 0x08: pointer
  if (data?.__AnonymousBase_clusapi_L5584_C14 !== undefined) view.setBigUint64(8, data.__AnonymousBase_clusapi_L5584_C14 === null ? 0n : BigInt(util.toPointer(data.__AnonymousBase_clusapi_L5584_C14)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_NETNAME_VS_TOKEN_INFO (size: 16)
 */
export interface CLUS_NETNAME_VS_TOKEN_INFO {
  /** u32 */
  ProcessID: number;
  /** u32 */
  DesiredAccess: number;
  /** Windows.Win32.Foundation.BOOL */
  InheritHandle: boolean;
}

export const sizeofCLUS_NETNAME_VS_TOKEN_INFO = 16;

export function allocCLUS_NETNAME_VS_TOKEN_INFO(data?: Partial<CLUS_NETNAME_VS_TOKEN_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_NETNAME_VS_TOKEN_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ProcessID !== undefined) view.setUint32(0, Number(data.ProcessID), true);
  // 0x04: u32
  if (data?.DesiredAccess !== undefined) view.setUint32(4, Number(data.DesiredAccess), true);
  // 0x08: i32
  if (data?.InheritHandle !== undefined) view.setInt32(8, Number(data.InheritHandle), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_NETNAME_PWD_INFO (size: 32)
 */
export interface CLUS_NETNAME_PWD_INFO {
  /** u32 */
  Flags: number;
  /** array */
  Password: Deno.PointerValue | null;
  /** array */
  CreatingDC: Deno.PointerValue | null;
  /** array */
  ObjectGuid: Deno.PointerValue | null;
}

export const sizeofCLUS_NETNAME_PWD_INFO = 32;

export function allocCLUS_NETNAME_PWD_INFO(data?: Partial<CLUS_NETNAME_PWD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_NETNAME_PWD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Password !== undefined) view.setBigUint64(8, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x10: pointer
  if (data?.CreatingDC !== undefined) view.setBigUint64(16, data.CreatingDC === null ? 0n : BigInt(util.toPointer(data.CreatingDC)), true);
  // 0x18: pointer
  if (data?.ObjectGuid !== undefined) view.setBigUint64(24, data.ObjectGuid === null ? 0n : BigInt(util.toPointer(data.ObjectGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_NETNAME_PWD_INFOEX (size: 32)
 */
export interface CLUS_NETNAME_PWD_INFOEX {
  /** u32 */
  Flags: number;
  /** array */
  Password: Deno.PointerValue | null;
  /** array */
  CreatingDC: Deno.PointerValue | null;
  /** array */
  ObjectGuid: Deno.PointerValue | null;
}

export const sizeofCLUS_NETNAME_PWD_INFOEX = 32;

export function allocCLUS_NETNAME_PWD_INFOEX(data?: Partial<CLUS_NETNAME_PWD_INFOEX>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_NETNAME_PWD_INFOEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Password !== undefined) view.setBigUint64(8, data.Password === null ? 0n : BigInt(util.toPointer(data.Password)), true);
  // 0x10: pointer
  if (data?.CreatingDC !== undefined) view.setBigUint64(16, data.CreatingDC === null ? 0n : BigInt(util.toPointer(data.CreatingDC)), true);
  // 0x18: pointer
  if (data?.ObjectGuid !== undefined) view.setBigUint64(24, data.ObjectGuid === null ? 0n : BigInt(util.toPointer(data.ObjectGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_DNN_LEADER_STATUS (size: 8)
 */
export interface CLUS_DNN_LEADER_STATUS {
  /** Windows.Win32.Foundation.BOOL */
  IsOnline: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IsFileServerPresent: boolean;
}

export const sizeofCLUS_DNN_LEADER_STATUS = 8;

export function allocCLUS_DNN_LEADER_STATUS(data?: Partial<CLUS_DNN_LEADER_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_DNN_LEADER_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.IsOnline !== undefined) view.setInt32(0, Number(data.IsOnline), true);
  // 0x04: i32
  if (data?.IsFileServerPresent !== undefined) view.setInt32(4, Number(data.IsFileServerPresent), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_DNN_SODAFS_CLONE_STATUS (size: 8)
 */
export interface CLUS_DNN_SODAFS_CLONE_STATUS {
  /** u32 */
  NodeId: number;
  /** Windows.Win32.Networking.Clustering.CLUSTER_RESOURCE_STATE */
  Status: CLUSTER_RESOURCE_STATE;
}

export const sizeofCLUS_DNN_SODAFS_CLONE_STATUS = 8;

export function allocCLUS_DNN_SODAFS_CLONE_STATUS(data?: Partial<CLUS_DNN_SODAFS_CLONE_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_DNN_SODAFS_CLONE_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeId !== undefined) view.setUint32(0, Number(data.NodeId), true);
  // 0x04: i32
  if (data?.Status !== undefined) view.setInt32(4, Number(data.Status), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_NETNAME_IP_INFO_ENTRY (size: 16)
 */
export interface CLUS_NETNAME_IP_INFO_ENTRY {
  /** u32 */
  NodeId: number;
  /** u32 */
  AddressSize: number;
  /** array */
  Address: Deno.PointerValue | null;
}

export const sizeofCLUS_NETNAME_IP_INFO_ENTRY = 16;

export function allocCLUS_NETNAME_IP_INFO_ENTRY(data?: Partial<CLUS_NETNAME_IP_INFO_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_NETNAME_IP_INFO_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeId !== undefined) view.setUint32(0, Number(data.NodeId), true);
  // 0x04: u32
  if (data?.AddressSize !== undefined) view.setUint32(4, Number(data.AddressSize), true);
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL (size: 24)
 */
export interface CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL {
  /** array */
  szName: Deno.PointerValue | null;
  /** u32 */
  NumEntries: number;
  /** array */
  IpInfo: Deno.PointerValue | null;
}

export const sizeofCLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL = 24;

export function allocCLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL(data?: Partial<CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szName !== undefined) view.setBigUint64(0, data.szName === null ? 0n : BigInt(util.toPointer(data.szName)), true);
  // 0x08: u32
  if (data?.NumEntries !== undefined) view.setUint32(8, Number(data.NumEntries), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.IpInfo !== undefined) view.setBigUint64(16, data.IpInfo === null ? 0n : BigInt(util.toPointer(data.IpInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_MAINTENANCE_MODE_INFO (size: 8)
 */
export interface CLUS_MAINTENANCE_MODE_INFO {
  /** Windows.Win32.Foundation.BOOL */
  InMaintenance: boolean;
}

export const sizeofCLUS_MAINTENANCE_MODE_INFO = 8;

export function allocCLUS_MAINTENANCE_MODE_INFO(data?: Partial<CLUS_MAINTENANCE_MODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_MAINTENANCE_MODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.InMaintenance !== undefined) view.setInt32(0, Number(data.InMaintenance), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_CSV_MAINTENANCE_MODE_INFO (size: 16)
 */
export interface CLUS_CSV_MAINTENANCE_MODE_INFO {
  /** Windows.Win32.Foundation.BOOL */
  InMaintenance: boolean;
  /** array */
  VolumeName: Deno.PointerValue | null;
}

export const sizeofCLUS_CSV_MAINTENANCE_MODE_INFO = 16;

export function allocCLUS_CSV_MAINTENANCE_MODE_INFO(data?: Partial<CLUS_CSV_MAINTENANCE_MODE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_CSV_MAINTENANCE_MODE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.InMaintenance !== undefined) view.setInt32(0, Number(data.InMaintenance), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.VolumeName !== undefined) view.setBigUint64(8, data.VolumeName === null ? 0n : BigInt(util.toPointer(data.VolumeName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_MAINTENANCE_MODE_INFOEX (size: 16)
 */
export interface CLUS_MAINTENANCE_MODE_INFOEX {
  /** Windows.Win32.Foundation.BOOL */
  InMaintenance: boolean;
  /** Windows.Win32.Networking.Clustering.MAINTENANCE_MODE_TYPE_ENUM */
  MaintainenceModeType: MAINTENANCE_MODE_TYPE_ENUM;
  /** Windows.Win32.Networking.Clustering.CLUSTER_RESOURCE_STATE */
  InternalState: CLUSTER_RESOURCE_STATE;
  /** u32 */
  Signature: number;
}

export const sizeofCLUS_MAINTENANCE_MODE_INFOEX = 16;

export function allocCLUS_MAINTENANCE_MODE_INFOEX(data?: Partial<CLUS_MAINTENANCE_MODE_INFOEX>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_MAINTENANCE_MODE_INFOEX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.InMaintenance !== undefined) view.setInt32(0, Number(data.InMaintenance), true);
  // 0x04: i32
  if (data?.MaintainenceModeType !== undefined) view.setInt32(4, Number(data.MaintainenceModeType), true);
  // 0x08: i32
  if (data?.InternalState !== undefined) view.setInt32(8, Number(data.InternalState), true);
  // 0x0c: u32
  if (data?.Signature !== undefined) view.setUint32(12, Number(data.Signature), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_SET_MAINTENANCE_MODE_INPUT (size: 16)
 */
export interface CLUS_SET_MAINTENANCE_MODE_INPUT {
  /** Windows.Win32.Foundation.BOOL */
  InMaintenance: boolean;
  /** u32 */
  ExtraParameterSize: number;
  /** array */
  ExtraParameter: Deno.PointerValue | null;
}

export const sizeofCLUS_SET_MAINTENANCE_MODE_INPUT = 16;

export function allocCLUS_SET_MAINTENANCE_MODE_INPUT(data?: Partial<CLUS_SET_MAINTENANCE_MODE_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_SET_MAINTENANCE_MODE_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.InMaintenance !== undefined) view.setInt32(0, Number(data.InMaintenance), true);
  // 0x04: u32
  if (data?.ExtraParameterSize !== undefined) view.setUint32(4, Number(data.ExtraParameterSize), true);
  // 0x08: pointer
  if (data?.ExtraParameter !== undefined) view.setBigUint64(8, data.ExtraParameter === null ? 0n : BigInt(util.toPointer(data.ExtraParameter)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_STORAGE_SET_DRIVELETTER (size: 8)
 */
export interface CLUS_STORAGE_SET_DRIVELETTER {
  /** u32 */
  PartitionNumber: number;
  /** u32 */
  DriveLetterMask: number;
}

export const sizeofCLUS_STORAGE_SET_DRIVELETTER = 8;

export function allocCLUS_STORAGE_SET_DRIVELETTER(data?: Partial<CLUS_STORAGE_SET_DRIVELETTER>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_STORAGE_SET_DRIVELETTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PartitionNumber !== undefined) view.setUint32(0, Number(data.PartitionNumber), true);
  // 0x04: u32
  if (data?.DriveLetterMask !== undefined) view.setUint32(4, Number(data.DriveLetterMask), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS (size: 8)
 */
export interface CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS {
  /** u32 */
  AvailDrivelettersMask: number;
}

export const sizeofCLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS = 8;

export function allocCLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS(data?: Partial<CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AvailDrivelettersMask !== undefined) view.setUint32(0, Number(data.AvailDrivelettersMask), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_STORAGE_REMAP_DRIVELETTER (size: 8)
 */
export interface CLUS_STORAGE_REMAP_DRIVELETTER {
  /** u32 */
  CurrentDriveLetterMask: number;
  /** u32 */
  TargetDriveLetterMask: number;
}

export const sizeofCLUS_STORAGE_REMAP_DRIVELETTER = 8;

export function allocCLUS_STORAGE_REMAP_DRIVELETTER(data?: Partial<CLUS_STORAGE_REMAP_DRIVELETTER>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_STORAGE_REMAP_DRIVELETTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CurrentDriveLetterMask !== undefined) view.setUint32(0, Number(data.CurrentDriveLetterMask), true);
  // 0x04: u32
  if (data?.TargetDriveLetterMask !== undefined) view.setUint32(4, Number(data.TargetDriveLetterMask), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_PROVIDER_STATE_CHANGE_INFO (size: 16)
 */
export interface CLUS_PROVIDER_STATE_CHANGE_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Networking.Clustering.CLUSTER_RESOURCE_STATE */
  resourceState: CLUSTER_RESOURCE_STATE;
  /** array */
  szProviderId: Deno.PointerValue | null;
}

export const sizeofCLUS_PROVIDER_STATE_CHANGE_INFO = 16;

export function allocCLUS_PROVIDER_STATE_CHANGE_INFO(data?: Partial<CLUS_PROVIDER_STATE_CHANGE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_PROVIDER_STATE_CHANGE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.resourceState !== undefined) view.setInt32(4, Number(data.resourceState), true);
  // 0x08: pointer
  if (data?.szProviderId !== undefined) view.setBigUint64(8, data.szProviderId === null ? 0n : BigInt(util.toPointer(data.szProviderId)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT (size: 8)
 */
export interface CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT {
  /** array */
  FileServerName: Deno.PointerValue | null;
}

export const sizeofCLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT = 8;

export function allocCLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT(data?: Partial<CLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_CREATE_INFRASTRUCTURE_FILESERVER_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileServerName !== undefined) view.setBigUint64(0, data.FileServerName === null ? 0n : BigInt(util.toPointer(data.FileServerName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT (size: 8)
 */
export interface CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT {
  /** array */
  FileServerName: Deno.PointerValue | null;
}

export const sizeofCLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT = 8;

export function allocCLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT(data?: Partial<CLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_CREATE_INFRASTRUCTURE_FILESERVER_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.FileServerName !== undefined) view.setBigUint64(0, data.FileServerName === null ? 0n : BigInt(util.toPointer(data.FileServerName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_LIST (size: 16)
 */
export interface CLUSPROP_LIST {
  /** u32 */
  nPropertyCount: number;
  /** Windows.Win32.Networking.Clustering.CLUSPROP_SZ */
  PropertyName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSPROP_LIST = 16;

export function allocCLUSPROP_LIST(data?: Partial<CLUSPROP_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nPropertyCount !== undefined) view.setUint32(0, Number(data.nPropertyCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PropertyName !== undefined) view.setBigUint64(8, data.PropertyName === null ? 0n : BigInt(util.toPointer(data.PropertyName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.FILESHARE_CHANGE (size: 16)
 */
export interface FILESHARE_CHANGE {
  /** Windows.Win32.Networking.Clustering.FILESHARE_CHANGE_ENUM */
  Change: FILESHARE_CHANGE_ENUM;
  /** array */
  ShareName: Deno.PointerValue | null;
}

export const sizeofFILESHARE_CHANGE = 16;

export function allocFILESHARE_CHANGE(data?: Partial<FILESHARE_CHANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofFILESHARE_CHANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Change !== undefined) view.setInt32(0, Number(data.Change), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ShareName !== undefined) view.setBigUint64(8, data.ShareName === null ? 0n : BigInt(util.toPointer(data.ShareName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.FILESHARE_CHANGE_LIST (size: 16)
 */
export interface FILESHARE_CHANGE_LIST {
  /** u32 */
  NumEntries: number;
  /** array */
  ChangeEntry: Deno.PointerValue | null;
}

export const sizeofFILESHARE_CHANGE_LIST = 16;

export function allocFILESHARE_CHANGE_LIST(data?: Partial<FILESHARE_CHANGE_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofFILESHARE_CHANGE_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEntries !== undefined) view.setUint32(0, Number(data.NumEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ChangeEntry !== undefined) view.setBigUint64(8, data.ChangeEntry === null ? 0n : BigInt(util.toPointer(data.ChangeEntry)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT (size: 24)
 */
export interface CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT {
  /** u64 */
  GetTickCount64: Deno.PointerValue;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  GetSystemTime: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeId: number;
}

export const sizeofCLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT = 24;

export function allocCLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT(data?: Partial<CLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSCTL_GROUP_GET_LAST_MOVE_TIME_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.GetTickCount64 !== undefined) view.setBigUint64(0, BigInt(data.GetTickCount64), true);
  // 0x08: pointer
  if (data?.GetSystemTime !== undefined) view.setBigUint64(8, data.GetSystemTime === null ? 0n : BigInt(util.toPointer(data.GetSystemTime)), true);
  // 0x10: u32
  if (data?.NodeId !== undefined) view.setUint32(16, Number(data.NodeId), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSPROP_BUFFER_HELPER (size: 224)
 */
export interface CLUSPROP_BUFFER_HELPER {
  /** ptr */
  pb: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pw: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pdw: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pl: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  psz: string | null;
  /** ptr */
  pList: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pSyntax: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pBinaryValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pWordValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pDwordValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pLongValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pULargeIntegerValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pLargeIntegerValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pStringValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pMultiSzValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pSecurityDescriptor: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pResourceClassValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pResourceClassInfoValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pDiskSignatureValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pScsiAddressValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pDiskNumberValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pPartitionInfoValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pRequiredDependencyValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pPartitionInfoValueEx: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pPartitionInfoValueEx2: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pFileTimeValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCLUSPROP_BUFFER_HELPER = 224;

export function allocCLUSPROP_BUFFER_HELPER(data?: Partial<CLUSPROP_BUFFER_HELPER>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSPROP_BUFFER_HELPER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pb !== undefined) view.setBigUint64(0, data.pb === null ? 0n : BigInt(util.toPointer(data.pb)), true);
  // 0x08: pointer
  if (data?.pw !== undefined) view.setBigUint64(8, data.pw === null ? 0n : BigInt(util.toPointer(data.pw)), true);
  // 0x10: pointer
  if (data?.pdw !== undefined) view.setBigUint64(16, data.pdw === null ? 0n : BigInt(util.toPointer(data.pdw)), true);
  // 0x18: pointer
  if (data?.pl !== undefined) view.setBigUint64(24, data.pl === null ? 0n : BigInt(util.toPointer(data.pl)), true);
  // 0x20: buffer
  if (data?.psz !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.psz);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.pList !== undefined) view.setBigUint64(40, data.pList === null ? 0n : BigInt(util.toPointer(data.pList)), true);
  // 0x30: pointer
  if (data?.pSyntax !== undefined) view.setBigUint64(48, data.pSyntax === null ? 0n : BigInt(util.toPointer(data.pSyntax)), true);
  // 0x38: pointer
  if (data?.pName !== undefined) view.setBigUint64(56, data.pName === null ? 0n : BigInt(util.toPointer(data.pName)), true);
  // 0x40: pointer
  if (data?.pValue !== undefined) view.setBigUint64(64, data.pValue === null ? 0n : BigInt(util.toPointer(data.pValue)), true);
  // 0x48: pointer
  if (data?.pBinaryValue !== undefined) view.setBigUint64(72, data.pBinaryValue === null ? 0n : BigInt(util.toPointer(data.pBinaryValue)), true);
  // 0x50: pointer
  if (data?.pWordValue !== undefined) view.setBigUint64(80, data.pWordValue === null ? 0n : BigInt(util.toPointer(data.pWordValue)), true);
  // 0x58: pointer
  if (data?.pDwordValue !== undefined) view.setBigUint64(88, data.pDwordValue === null ? 0n : BigInt(util.toPointer(data.pDwordValue)), true);
  // 0x60: pointer
  if (data?.pLongValue !== undefined) view.setBigUint64(96, data.pLongValue === null ? 0n : BigInt(util.toPointer(data.pLongValue)), true);
  // 0x68: pointer
  if (data?.pULargeIntegerValue !== undefined) view.setBigUint64(104, data.pULargeIntegerValue === null ? 0n : BigInt(util.toPointer(data.pULargeIntegerValue)), true);
  // 0x70: pointer
  if (data?.pLargeIntegerValue !== undefined) view.setBigUint64(112, data.pLargeIntegerValue === null ? 0n : BigInt(util.toPointer(data.pLargeIntegerValue)), true);
  // 0x78: pointer
  if (data?.pStringValue !== undefined) view.setBigUint64(120, data.pStringValue === null ? 0n : BigInt(util.toPointer(data.pStringValue)), true);
  // 0x80: pointer
  if (data?.pMultiSzValue !== undefined) view.setBigUint64(128, data.pMultiSzValue === null ? 0n : BigInt(util.toPointer(data.pMultiSzValue)), true);
  // 0x88: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(136, data.pSecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.pSecurityDescriptor)), true);
  // 0x90: pointer
  if (data?.pResourceClassValue !== undefined) view.setBigUint64(144, data.pResourceClassValue === null ? 0n : BigInt(util.toPointer(data.pResourceClassValue)), true);
  // 0x98: pointer
  if (data?.pResourceClassInfoValue !== undefined) view.setBigUint64(152, data.pResourceClassInfoValue === null ? 0n : BigInt(util.toPointer(data.pResourceClassInfoValue)), true);
  // 0xa0: pointer
  if (data?.pDiskSignatureValue !== undefined) view.setBigUint64(160, data.pDiskSignatureValue === null ? 0n : BigInt(util.toPointer(data.pDiskSignatureValue)), true);
  // 0xa8: pointer
  if (data?.pScsiAddressValue !== undefined) view.setBigUint64(168, data.pScsiAddressValue === null ? 0n : BigInt(util.toPointer(data.pScsiAddressValue)), true);
  // 0xb0: pointer
  if (data?.pDiskNumberValue !== undefined) view.setBigUint64(176, data.pDiskNumberValue === null ? 0n : BigInt(util.toPointer(data.pDiskNumberValue)), true);
  // 0xb8: pointer
  if (data?.pPartitionInfoValue !== undefined) view.setBigUint64(184, data.pPartitionInfoValue === null ? 0n : BigInt(util.toPointer(data.pPartitionInfoValue)), true);
  // 0xc0: pointer
  if (data?.pRequiredDependencyValue !== undefined) view.setBigUint64(192, data.pRequiredDependencyValue === null ? 0n : BigInt(util.toPointer(data.pRequiredDependencyValue)), true);
  // 0xc8: pointer
  if (data?.pPartitionInfoValueEx !== undefined) view.setBigUint64(200, data.pPartitionInfoValueEx === null ? 0n : BigInt(util.toPointer(data.pPartitionInfoValueEx)), true);
  // 0xd0: pointer
  if (data?.pPartitionInfoValueEx2 !== undefined) view.setBigUint64(208, data.pPartitionInfoValueEx2 === null ? 0n : BigInt(util.toPointer(data.pPartitionInfoValueEx2)), true);
  // 0xd8: pointer
  if (data?.pFileTimeValue !== undefined) view.setBigUint64(216, data.pFileTimeValue === null ? 0n : BigInt(util.toPointer(data.pFileTimeValue)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO (size: 16)
 */
export interface SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO {
  /** u64 */
  PartitionOffset: Deno.PointerValue;
  /** u32 */
  Capabilities: number;
}

export const sizeofSR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO = 16;

export function allocSR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO(data?: Partial<SR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSR_RESOURCE_TYPE_REPLICATED_PARTITION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PartitionOffset !== undefined) view.setBigUint64(0, BigInt(data.PartitionOffset), true);
  // 0x08: u32
  if (data?.Capabilities !== undefined) view.setUint32(8, Number(data.Capabilities), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY (size: 16)
 */
export interface SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY {
  /** u32 */
  Count: number;
  /** array */
  PartitionArray: Deno.PointerValue | null;
}

export const sizeofSR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY = 16;

export function allocSR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY(data?: Partial<SR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofSR_RESOURCE_TYPE_REPLICATED_PARTITION_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PartitionArray !== undefined) view.setBigUint64(8, data.PartitionArray === null ? 0n : BigInt(util.toPointer(data.PartitionArray)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS (size: 16)
 */
export interface SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS {
  /** System.Guid */
  DataDiskGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IncludeOfflineDisks: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS = 16;

export function allocSR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS(data?: Partial<SR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS>): Uint8Array {
  const buf = new Uint8Array(sizeofSR_RESOURCE_TYPE_QUERY_ELIGIBLE_LOGDISKS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataDiskGuid !== undefined) view.setBigUint64(0, data.DataDiskGuid === null ? 0n : BigInt(util.toPointer(data.DataDiskGuid)), true);
  // 0x08: pointer
  if (data?.IncludeOfflineDisks !== undefined) view.setBigUint64(8, data.IncludeOfflineDisks === null ? 0n : BigInt(util.toPointer(data.IncludeOfflineDisks)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS (size: 32)
 */
export interface SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS {
  /** System.Guid */
  SourceDataDiskGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  TargetReplicationGroupGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  SkipConnectivityCheck: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IncludeOfflineDisks: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS = 32;

export function allocSR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS(data?: Partial<SR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS>): Uint8Array {
  const buf = new Uint8Array(sizeofSR_RESOURCE_TYPE_QUERY_ELIGIBLE_TARGET_DATADISKS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SourceDataDiskGuid !== undefined) view.setBigUint64(0, data.SourceDataDiskGuid === null ? 0n : BigInt(util.toPointer(data.SourceDataDiskGuid)), true);
  // 0x08: pointer
  if (data?.TargetReplicationGroupGuid !== undefined) view.setBigUint64(8, data.TargetReplicationGroupGuid === null ? 0n : BigInt(util.toPointer(data.TargetReplicationGroupGuid)), true);
  // 0x10: pointer
  if (data?.SkipConnectivityCheck !== undefined) view.setBigUint64(16, data.SkipConnectivityCheck === null ? 0n : BigInt(util.toPointer(data.SkipConnectivityCheck)), true);
  // 0x18: pointer
  if (data?.IncludeOfflineDisks !== undefined) view.setBigUint64(24, data.IncludeOfflineDisks === null ? 0n : BigInt(util.toPointer(data.IncludeOfflineDisks)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS (size: 16)
 */
export interface SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS {
  /** System.Guid */
  DataDiskGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  IncludeAvailableStoargeDisks: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS = 16;

export function allocSR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS(data?: Partial<SR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS>): Uint8Array {
  const buf = new Uint8Array(sizeofSR_RESOURCE_TYPE_QUERY_ELIGIBLE_SOURCE_DATADISKS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DataDiskGuid !== undefined) view.setBigUint64(0, data.DataDiskGuid === null ? 0n : BigInt(util.toPointer(data.DataDiskGuid)), true);
  // 0x08: pointer
  if (data?.IncludeAvailableStoargeDisks !== undefined) view.setBigUint64(8, data.IncludeAvailableStoargeDisks === null ? 0n : BigInt(util.toPointer(data.IncludeAvailableStoargeDisks)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.SR_RESOURCE_TYPE_DISK_INFO (size: 16)
 */
export interface SR_RESOURCE_TYPE_DISK_INFO {
  /** Windows.Win32.Networking.Clustering.SR_DISK_REPLICATION_ELIGIBLE */
  Reason: SR_DISK_REPLICATION_ELIGIBLE;
  /** System.Guid */
  DiskGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSR_RESOURCE_TYPE_DISK_INFO = 16;

export function allocSR_RESOURCE_TYPE_DISK_INFO(data?: Partial<SR_RESOURCE_TYPE_DISK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSR_RESOURCE_TYPE_DISK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Reason !== undefined) view.setInt32(0, Number(data.Reason), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DiskGuid !== undefined) view.setBigUint64(8, data.DiskGuid === null ? 0n : BigInt(util.toPointer(data.DiskGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT (size: 16)
 */
export interface SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT {
  /** u16 */
  Count: number;
  /** array */
  DiskInfo: Deno.PointerValue | null;
}

export const sizeofSR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT = 16;

export function allocSR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT(data?: Partial<SR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofSR_RESOURCE_TYPE_ELIGIBLE_DISKS_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Count !== undefined) view.setUint16(0, Number(data.Count), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.DiskInfo !== undefined) view.setBigUint64(8, data.DiskInfo === null ? 0n : BigInt(util.toPointer(data.DiskInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.SR_RESOURCE_TYPE_REPLICATED_DISK (size: 32)
 */
export interface SR_RESOURCE_TYPE_REPLICATED_DISK {
  /** Windows.Win32.Networking.Clustering.SR_REPLICATED_DISK_TYPE */
  Type: SR_REPLICATED_DISK_TYPE;
  /** System.Guid */
  ClusterDiskResourceGuid: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ReplicationGroupId: Uint8Array | Deno.PointerValue | null;
  /** array */
  ReplicationGroupName: Deno.PointerValue | null;
}

export const sizeofSR_RESOURCE_TYPE_REPLICATED_DISK = 32;

export function allocSR_RESOURCE_TYPE_REPLICATED_DISK(data?: Partial<SR_RESOURCE_TYPE_REPLICATED_DISK>): Uint8Array {
  const buf = new Uint8Array(sizeofSR_RESOURCE_TYPE_REPLICATED_DISK);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ClusterDiskResourceGuid !== undefined) view.setBigUint64(8, data.ClusterDiskResourceGuid === null ? 0n : BigInt(util.toPointer(data.ClusterDiskResourceGuid)), true);
  // 0x10: pointer
  if (data?.ReplicationGroupId !== undefined) view.setBigUint64(16, data.ReplicationGroupId === null ? 0n : BigInt(util.toPointer(data.ReplicationGroupId)), true);
  // 0x18: pointer
  if (data?.ReplicationGroupName !== undefined) view.setBigUint64(24, data.ReplicationGroupName === null ? 0n : BigInt(util.toPointer(data.ReplicationGroupName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT (size: 16)
 */
export interface SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT {
  /** u16 */
  Count: number;
  /** array */
  ReplicatedDisks: Deno.PointerValue | null;
}

export const sizeofSR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT = 16;

export function allocSR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT(data?: Partial<SR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofSR_RESOURCE_TYPE_REPLICATED_DISKS_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Count !== undefined) view.setUint16(0, Number(data.Count), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.ReplicatedDisks !== undefined) view.setBigUint64(8, data.ReplicatedDisks === null ? 0n : BigInt(util.toPointer(data.ReplicatedDisks)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP (size: 88)
 */
export interface SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP {
  /** array */
  ReplicationGroupName: Deno.PointerValue | null;
  /** array */
  Description: Deno.PointerValue | null;
  /** array */
  LogPath: Deno.PointerValue | null;
  /** u64 */
  MaxLogSizeInBytes: Deno.PointerValue;
  /** u16 */
  LogType: number;
  /** u32 */
  ReplicationMode: number;
  /** u32 */
  MinimumPartnersInSync: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  EnableWriteConsistency: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  EnableEncryption: Uint8Array | Deno.PointerValue | null;
  /** array */
  CertificateThumbprint: Deno.PointerValue | null;
  /** u32 */
  VolumeNameCount: number;
  /** array */
  VolumeNames: Deno.PointerValue | null;
}

export const sizeofSR_RESOURCE_TYPE_ADD_REPLICATION_GROUP = 88;

export function allocSR_RESOURCE_TYPE_ADD_REPLICATION_GROUP(data?: Partial<SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP>): Uint8Array {
  const buf = new Uint8Array(sizeofSR_RESOURCE_TYPE_ADD_REPLICATION_GROUP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ReplicationGroupName !== undefined) view.setBigUint64(0, data.ReplicationGroupName === null ? 0n : BigInt(util.toPointer(data.ReplicationGroupName)), true);
  // 0x08: pointer
  if (data?.Description !== undefined) view.setBigUint64(8, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x10: pointer
  if (data?.LogPath !== undefined) view.setBigUint64(16, data.LogPath === null ? 0n : BigInt(util.toPointer(data.LogPath)), true);
  // 0x18: u64
  if (data?.MaxLogSizeInBytes !== undefined) view.setBigUint64(24, BigInt(data.MaxLogSizeInBytes), true);
  // 0x20: u16
  if (data?.LogType !== undefined) view.setUint16(32, Number(data.LogType), true);
  // 0x22: u32
  if (data?.ReplicationMode !== undefined) view.setUint32(34, Number(data.ReplicationMode), true);
  // 0x26: u32
  if (data?.MinimumPartnersInSync !== undefined) view.setUint32(38, Number(data.MinimumPartnersInSync), true);
  // 0x2a: pad6
  // 0x30: pointer
  if (data?.EnableWriteConsistency !== undefined) view.setBigUint64(48, data.EnableWriteConsistency === null ? 0n : BigInt(util.toPointer(data.EnableWriteConsistency)), true);
  // 0x38: pointer
  if (data?.EnableEncryption !== undefined) view.setBigUint64(56, data.EnableEncryption === null ? 0n : BigInt(util.toPointer(data.EnableEncryption)), true);
  // 0x40: pointer
  if (data?.CertificateThumbprint !== undefined) view.setBigUint64(64, data.CertificateThumbprint === null ? 0n : BigInt(util.toPointer(data.CertificateThumbprint)), true);
  // 0x48: u32
  if (data?.VolumeNameCount !== undefined) view.setUint32(72, Number(data.VolumeNameCount), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.VolumeNames !== undefined) view.setBigUint64(80, data.VolumeNames === null ? 0n : BigInt(util.toPointer(data.VolumeNames)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT (size: 16)
 */
export interface SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT {
  /** u32 */
  Result: number;
  /** array */
  ErrorString: Deno.PointerValue | null;
}

export const sizeofSR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT = 16;

export function allocSR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT(data?: Partial<SR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofSR_RESOURCE_TYPE_ADD_REPLICATION_GROUP_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Result !== undefined) view.setUint32(0, Number(data.Result), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ErrorString !== undefined) view.setBigUint64(8, data.ErrorString === null ? 0n : BigInt(util.toPointer(data.ErrorString)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT (size: 16)
 */
export interface CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT {
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidPoolFilter: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT = 16;

export function allocCLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT(data?: Partial<CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX2_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidPoolFilter !== undefined) view.setBigUint64(8, data.guidPoolFilter === null ? 0n : BigInt(util.toPointer(data.guidPoolFilter)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Networking.Clustering.RESOURCE_STATUS (size: 24)
 */
export interface RESOURCE_STATUS {
  /** Windows.Win32.Networking.Clustering.CLUSTER_RESOURCE_STATE */
  ResourceState: CLUSTER_RESOURCE_STATE;
  /** u32 */
  CheckPoint: number;
  /** u32 */
  WaitHint: number;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRESOURCE_STATUS = 24;

export function allocRESOURCE_STATUS(data?: Partial<RESOURCE_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofRESOURCE_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ResourceState !== undefined) view.setInt32(0, Number(data.ResourceState), true);
  // 0x04: u32
  if (data?.CheckPoint !== undefined) view.setUint32(4, Number(data.CheckPoint), true);
  // 0x08: u32
  if (data?.WaitHint !== undefined) view.setUint32(8, Number(data.WaitHint), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(16, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.NodeUtilizationInfoElement (size: 24)
 */
export interface NodeUtilizationInfoElement {
  /** u64 */
  Id: Deno.PointerValue;
  /** u64 */
  AvailableMemory: Deno.PointerValue;
  /** u64 */
  AvailableMemoryAfterReclamation: Deno.PointerValue;
}

export const sizeofNodeUtilizationInfoElement = 24;

export function allocNodeUtilizationInfoElement(data?: Partial<NodeUtilizationInfoElement>): Uint8Array {
  const buf = new Uint8Array(sizeofNodeUtilizationInfoElement);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Id !== undefined) view.setBigUint64(0, BigInt(data.Id), true);
  // 0x08: u64
  if (data?.AvailableMemory !== undefined) view.setBigUint64(8, BigInt(data.AvailableMemory), true);
  // 0x10: u64
  if (data?.AvailableMemoryAfterReclamation !== undefined) view.setBigUint64(16, BigInt(data.AvailableMemoryAfterReclamation), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.ResourceUtilizationInfoElement (size: 16)
 */
export interface ResourceUtilizationInfoElement {
  /** u64 */
  PhysicalNumaId: Deno.PointerValue;
  /** u64 */
  CurrentMemory: Deno.PointerValue;
}

export const sizeofResourceUtilizationInfoElement = 16;

export function allocResourceUtilizationInfoElement(data?: Partial<ResourceUtilizationInfoElement>): Uint8Array {
  const buf = new Uint8Array(sizeofResourceUtilizationInfoElement);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PhysicalNumaId !== undefined) view.setBigUint64(0, BigInt(data.PhysicalNumaId), true);
  // 0x08: u64
  if (data?.CurrentMemory !== undefined) view.setBigUint64(8, BigInt(data.CurrentMemory), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.GET_OPERATION_CONTEXT_PARAMS (size: 16)
 */
export interface GET_OPERATION_CONTEXT_PARAMS {
  /** u32 */
  Size: number;
  /** u32 */
  Version: number;
  /** Windows.Win32.Networking.Clustering.RESDLL_CONTEXT_OPERATION_TYPE */
  Type: RESDLL_CONTEXT_OPERATION_TYPE;
  /** u32 */
  Priority: number;
}

export const sizeofGET_OPERATION_CONTEXT_PARAMS = 16;

export function allocGET_OPERATION_CONTEXT_PARAMS(data?: Partial<GET_OPERATION_CONTEXT_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofGET_OPERATION_CONTEXT_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.Priority !== undefined) view.setUint32(12, Number(data.Priority), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.RESOURCE_STATUS_EX (size: 32)
 */
export interface RESOURCE_STATUS_EX {
  /** Windows.Win32.Networking.Clustering.CLUSTER_RESOURCE_STATE */
  ResourceState: CLUSTER_RESOURCE_STATE;
  /** u32 */
  CheckPoint: number;
  /** Windows.Win32.Foundation.HANDLE */
  EventHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ApplicationSpecificErrorCode: number;
  /** u32 */
  Flags: number;
  /** u32 */
  WaitHint: number;
}

export const sizeofRESOURCE_STATUS_EX = 32;

export function allocRESOURCE_STATUS_EX(data?: Partial<RESOURCE_STATUS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofRESOURCE_STATUS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ResourceState !== undefined) view.setInt32(0, Number(data.ResourceState), true);
  // 0x04: u32
  if (data?.CheckPoint !== undefined) view.setUint32(4, Number(data.CheckPoint), true);
  // 0x08: pointer
  if (data?.EventHandle !== undefined) view.setBigUint64(8, data.EventHandle === null ? 0n : BigInt(util.toPointer(data.EventHandle)), true);
  // 0x10: u32
  if (data?.ApplicationSpecificErrorCode !== undefined) view.setUint32(16, Number(data.ApplicationSpecificErrorCode), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  // 0x18: u32
  if (data?.WaitHint !== undefined) view.setUint32(24, Number(data.WaitHint), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLRES_V1_FUNCTIONS (size: 88)
 */
export interface CLRES_V1_FUNCTIONS {
  /** Windows.Win32.Networking.Clustering.POPEN_ROUTINE */
  Open: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PCLOSE_ROUTINE */
  Close: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PONLINE_ROUTINE */
  Online: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.POFFLINE_ROUTINE */
  Offline: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PTERMINATE_ROUTINE */
  Terminate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PLOOKS_ALIVE_ROUTINE */
  LooksAlive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PIS_ALIVE_ROUTINE */
  IsAlive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PARBITRATE_ROUTINE */
  Arbitrate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PRELEASE_ROUTINE */
  Release: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PRESOURCE_CONTROL_ROUTINE */
  ResourceControl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PRESOURCE_TYPE_CONTROL_ROUTINE */
  ResourceTypeControl: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLRES_V1_FUNCTIONS = 88;

export function allocCLRES_V1_FUNCTIONS(data?: Partial<CLRES_V1_FUNCTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofCLRES_V1_FUNCTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Open !== undefined) view.setBigUint64(0, data.Open === null ? 0n : BigInt(util.toPointer(data.Open)), true);
  // 0x08: pointer
  if (data?.Close !== undefined) view.setBigUint64(8, data.Close === null ? 0n : BigInt(util.toPointer(data.Close)), true);
  // 0x10: pointer
  if (data?.Online !== undefined) view.setBigUint64(16, data.Online === null ? 0n : BigInt(util.toPointer(data.Online)), true);
  // 0x18: pointer
  if (data?.Offline !== undefined) view.setBigUint64(24, data.Offline === null ? 0n : BigInt(util.toPointer(data.Offline)), true);
  // 0x20: pointer
  if (data?.Terminate !== undefined) view.setBigUint64(32, data.Terminate === null ? 0n : BigInt(util.toPointer(data.Terminate)), true);
  // 0x28: pointer
  if (data?.LooksAlive !== undefined) view.setBigUint64(40, data.LooksAlive === null ? 0n : BigInt(util.toPointer(data.LooksAlive)), true);
  // 0x30: pointer
  if (data?.IsAlive !== undefined) view.setBigUint64(48, data.IsAlive === null ? 0n : BigInt(util.toPointer(data.IsAlive)), true);
  // 0x38: pointer
  if (data?.Arbitrate !== undefined) view.setBigUint64(56, data.Arbitrate === null ? 0n : BigInt(util.toPointer(data.Arbitrate)), true);
  // 0x40: pointer
  if (data?.Release !== undefined) view.setBigUint64(64, data.Release === null ? 0n : BigInt(util.toPointer(data.Release)), true);
  // 0x48: pointer
  if (data?.ResourceControl !== undefined) view.setBigUint64(72, data.ResourceControl === null ? 0n : BigInt(util.toPointer(data.ResourceControl)), true);
  // 0x50: pointer
  if (data?.ResourceTypeControl !== undefined) view.setBigUint64(80, data.ResourceTypeControl === null ? 0n : BigInt(util.toPointer(data.ResourceTypeControl)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLRES_V2_FUNCTIONS (size: 96)
 */
export interface CLRES_V2_FUNCTIONS {
  /** Windows.Win32.Networking.Clustering.POPEN_V2_ROUTINE */
  Open: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PCLOSE_ROUTINE */
  Close: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PONLINE_V2_ROUTINE */
  Online: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.POFFLINE_V2_ROUTINE */
  Offline: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PTERMINATE_ROUTINE */
  Terminate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PLOOKS_ALIVE_ROUTINE */
  LooksAlive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PIS_ALIVE_ROUTINE */
  IsAlive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PARBITRATE_ROUTINE */
  Arbitrate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PRELEASE_ROUTINE */
  Release: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PRESOURCE_CONTROL_ROUTINE */
  ResourceControl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PRESOURCE_TYPE_CONTROL_ROUTINE */
  ResourceTypeControl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PCANCEL_ROUTINE */
  Cancel: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLRES_V2_FUNCTIONS = 96;

export function allocCLRES_V2_FUNCTIONS(data?: Partial<CLRES_V2_FUNCTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofCLRES_V2_FUNCTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Open !== undefined) view.setBigUint64(0, data.Open === null ? 0n : BigInt(util.toPointer(data.Open)), true);
  // 0x08: pointer
  if (data?.Close !== undefined) view.setBigUint64(8, data.Close === null ? 0n : BigInt(util.toPointer(data.Close)), true);
  // 0x10: pointer
  if (data?.Online !== undefined) view.setBigUint64(16, data.Online === null ? 0n : BigInt(util.toPointer(data.Online)), true);
  // 0x18: pointer
  if (data?.Offline !== undefined) view.setBigUint64(24, data.Offline === null ? 0n : BigInt(util.toPointer(data.Offline)), true);
  // 0x20: pointer
  if (data?.Terminate !== undefined) view.setBigUint64(32, data.Terminate === null ? 0n : BigInt(util.toPointer(data.Terminate)), true);
  // 0x28: pointer
  if (data?.LooksAlive !== undefined) view.setBigUint64(40, data.LooksAlive === null ? 0n : BigInt(util.toPointer(data.LooksAlive)), true);
  // 0x30: pointer
  if (data?.IsAlive !== undefined) view.setBigUint64(48, data.IsAlive === null ? 0n : BigInt(util.toPointer(data.IsAlive)), true);
  // 0x38: pointer
  if (data?.Arbitrate !== undefined) view.setBigUint64(56, data.Arbitrate === null ? 0n : BigInt(util.toPointer(data.Arbitrate)), true);
  // 0x40: pointer
  if (data?.Release !== undefined) view.setBigUint64(64, data.Release === null ? 0n : BigInt(util.toPointer(data.Release)), true);
  // 0x48: pointer
  if (data?.ResourceControl !== undefined) view.setBigUint64(72, data.ResourceControl === null ? 0n : BigInt(util.toPointer(data.ResourceControl)), true);
  // 0x50: pointer
  if (data?.ResourceTypeControl !== undefined) view.setBigUint64(80, data.ResourceTypeControl === null ? 0n : BigInt(util.toPointer(data.ResourceTypeControl)), true);
  // 0x58: pointer
  if (data?.Cancel !== undefined) view.setBigUint64(88, data.Cancel === null ? 0n : BigInt(util.toPointer(data.Cancel)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLRES_V3_FUNCTIONS (size: 96)
 */
export interface CLRES_V3_FUNCTIONS {
  /** Windows.Win32.Networking.Clustering.POPEN_V2_ROUTINE */
  Open: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PCLOSE_ROUTINE */
  Close: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PONLINE_V2_ROUTINE */
  Online: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.POFFLINE_V2_ROUTINE */
  Offline: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PTERMINATE_ROUTINE */
  Terminate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PLOOKS_ALIVE_ROUTINE */
  LooksAlive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PIS_ALIVE_ROUTINE */
  IsAlive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PARBITRATE_ROUTINE */
  Arbitrate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PRELEASE_ROUTINE */
  Release: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PBEGIN_RESCALL_ROUTINE */
  BeginResourceControl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PBEGIN_RESTYPECALL_ROUTINE */
  BeginResourceTypeControl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PCANCEL_ROUTINE */
  Cancel: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLRES_V3_FUNCTIONS = 96;

export function allocCLRES_V3_FUNCTIONS(data?: Partial<CLRES_V3_FUNCTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofCLRES_V3_FUNCTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Open !== undefined) view.setBigUint64(0, data.Open === null ? 0n : BigInt(util.toPointer(data.Open)), true);
  // 0x08: pointer
  if (data?.Close !== undefined) view.setBigUint64(8, data.Close === null ? 0n : BigInt(util.toPointer(data.Close)), true);
  // 0x10: pointer
  if (data?.Online !== undefined) view.setBigUint64(16, data.Online === null ? 0n : BigInt(util.toPointer(data.Online)), true);
  // 0x18: pointer
  if (data?.Offline !== undefined) view.setBigUint64(24, data.Offline === null ? 0n : BigInt(util.toPointer(data.Offline)), true);
  // 0x20: pointer
  if (data?.Terminate !== undefined) view.setBigUint64(32, data.Terminate === null ? 0n : BigInt(util.toPointer(data.Terminate)), true);
  // 0x28: pointer
  if (data?.LooksAlive !== undefined) view.setBigUint64(40, data.LooksAlive === null ? 0n : BigInt(util.toPointer(data.LooksAlive)), true);
  // 0x30: pointer
  if (data?.IsAlive !== undefined) view.setBigUint64(48, data.IsAlive === null ? 0n : BigInt(util.toPointer(data.IsAlive)), true);
  // 0x38: pointer
  if (data?.Arbitrate !== undefined) view.setBigUint64(56, data.Arbitrate === null ? 0n : BigInt(util.toPointer(data.Arbitrate)), true);
  // 0x40: pointer
  if (data?.Release !== undefined) view.setBigUint64(64, data.Release === null ? 0n : BigInt(util.toPointer(data.Release)), true);
  // 0x48: pointer
  if (data?.BeginResourceControl !== undefined) view.setBigUint64(72, data.BeginResourceControl === null ? 0n : BigInt(util.toPointer(data.BeginResourceControl)), true);
  // 0x50: pointer
  if (data?.BeginResourceTypeControl !== undefined) view.setBigUint64(80, data.BeginResourceTypeControl === null ? 0n : BigInt(util.toPointer(data.BeginResourceTypeControl)), true);
  // 0x58: pointer
  if (data?.Cancel !== undefined) view.setBigUint64(88, data.Cancel === null ? 0n : BigInt(util.toPointer(data.Cancel)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLRES_V4_FUNCTIONS (size: 112)
 */
export interface CLRES_V4_FUNCTIONS {
  /** Windows.Win32.Networking.Clustering.POPEN_V2_ROUTINE */
  Open: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PCLOSE_ROUTINE */
  Close: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PONLINE_V2_ROUTINE */
  Online: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.POFFLINE_V2_ROUTINE */
  Offline: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PTERMINATE_ROUTINE */
  Terminate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PLOOKS_ALIVE_ROUTINE */
  LooksAlive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PIS_ALIVE_ROUTINE */
  IsAlive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PARBITRATE_ROUTINE */
  Arbitrate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PRELEASE_ROUTINE */
  Release: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PBEGIN_RESCALL_ROUTINE */
  BeginResourceControl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PBEGIN_RESTYPECALL_ROUTINE */
  BeginResourceTypeControl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PCANCEL_ROUTINE */
  Cancel: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PBEGIN_RESCALL_AS_USER_ROUTINE */
  BeginResourceControlAsUser: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PBEGIN_RESTYPECALL_AS_USER_ROUTINE */
  BeginResourceTypeControlAsUser: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLRES_V4_FUNCTIONS = 112;

export function allocCLRES_V4_FUNCTIONS(data?: Partial<CLRES_V4_FUNCTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofCLRES_V4_FUNCTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Open !== undefined) view.setBigUint64(0, data.Open === null ? 0n : BigInt(util.toPointer(data.Open)), true);
  // 0x08: pointer
  if (data?.Close !== undefined) view.setBigUint64(8, data.Close === null ? 0n : BigInt(util.toPointer(data.Close)), true);
  // 0x10: pointer
  if (data?.Online !== undefined) view.setBigUint64(16, data.Online === null ? 0n : BigInt(util.toPointer(data.Online)), true);
  // 0x18: pointer
  if (data?.Offline !== undefined) view.setBigUint64(24, data.Offline === null ? 0n : BigInt(util.toPointer(data.Offline)), true);
  // 0x20: pointer
  if (data?.Terminate !== undefined) view.setBigUint64(32, data.Terminate === null ? 0n : BigInt(util.toPointer(data.Terminate)), true);
  // 0x28: pointer
  if (data?.LooksAlive !== undefined) view.setBigUint64(40, data.LooksAlive === null ? 0n : BigInt(util.toPointer(data.LooksAlive)), true);
  // 0x30: pointer
  if (data?.IsAlive !== undefined) view.setBigUint64(48, data.IsAlive === null ? 0n : BigInt(util.toPointer(data.IsAlive)), true);
  // 0x38: pointer
  if (data?.Arbitrate !== undefined) view.setBigUint64(56, data.Arbitrate === null ? 0n : BigInt(util.toPointer(data.Arbitrate)), true);
  // 0x40: pointer
  if (data?.Release !== undefined) view.setBigUint64(64, data.Release === null ? 0n : BigInt(util.toPointer(data.Release)), true);
  // 0x48: pointer
  if (data?.BeginResourceControl !== undefined) view.setBigUint64(72, data.BeginResourceControl === null ? 0n : BigInt(util.toPointer(data.BeginResourceControl)), true);
  // 0x50: pointer
  if (data?.BeginResourceTypeControl !== undefined) view.setBigUint64(80, data.BeginResourceTypeControl === null ? 0n : BigInt(util.toPointer(data.BeginResourceTypeControl)), true);
  // 0x58: pointer
  if (data?.Cancel !== undefined) view.setBigUint64(88, data.Cancel === null ? 0n : BigInt(util.toPointer(data.Cancel)), true);
  // 0x60: pointer
  if (data?.BeginResourceControlAsUser !== undefined) view.setBigUint64(96, data.BeginResourceControlAsUser === null ? 0n : BigInt(util.toPointer(data.BeginResourceControlAsUser)), true);
  // 0x68: pointer
  if (data?.BeginResourceTypeControlAsUser !== undefined) view.setBigUint64(104, data.BeginResourceTypeControlAsUser === null ? 0n : BigInt(util.toPointer(data.BeginResourceTypeControlAsUser)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLRES_FUNCTION_TABLE (size: 16)
 */
export interface CLRES_FUNCTION_TABLE {
  /** u32 */
  TableSize: number;
  /** u32 */
  Version: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLRES_FUNCTION_TABLE = 16;

export function allocCLRES_FUNCTION_TABLE(data?: Partial<CLRES_FUNCTION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofCLRES_FUNCTION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TableSize !== undefined) view.setUint32(0, Number(data.TableSize), true);
  // 0x04: u32
  if (data?.Version !== undefined) view.setUint32(4, Number(data.Version), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.RESUTIL_LARGEINT_DATA (size: 24)
 */
export interface RESUTIL_LARGEINT_DATA {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Default: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Minimum: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  Maximum: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRESUTIL_LARGEINT_DATA = 24;

export function allocRESUTIL_LARGEINT_DATA(data?: Partial<RESUTIL_LARGEINT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRESUTIL_LARGEINT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Default !== undefined) view.setBigUint64(0, data.Default === null ? 0n : BigInt(util.toPointer(data.Default)), true);
  // 0x08: pointer
  if (data?.Minimum !== undefined) view.setBigUint64(8, data.Minimum === null ? 0n : BigInt(util.toPointer(data.Minimum)), true);
  // 0x10: pointer
  if (data?.Maximum !== undefined) view.setBigUint64(16, data.Maximum === null ? 0n : BigInt(util.toPointer(data.Maximum)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.RESUTIL_ULARGEINT_DATA (size: 24)
 */
export interface RESUTIL_ULARGEINT_DATA {
  /** Windows.Win32.Foundation.ULARGE_INTEGER */
  Default: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.ULARGE_INTEGER */
  Minimum: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.ULARGE_INTEGER */
  Maximum: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRESUTIL_ULARGEINT_DATA = 24;

export function allocRESUTIL_ULARGEINT_DATA(data?: Partial<RESUTIL_ULARGEINT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRESUTIL_ULARGEINT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Default !== undefined) view.setBigUint64(0, data.Default === null ? 0n : BigInt(util.toPointer(data.Default)), true);
  // 0x08: pointer
  if (data?.Minimum !== undefined) view.setBigUint64(8, data.Minimum === null ? 0n : BigInt(util.toPointer(data.Minimum)), true);
  // 0x10: pointer
  if (data?.Maximum !== undefined) view.setBigUint64(16, data.Maximum === null ? 0n : BigInt(util.toPointer(data.Maximum)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.RESUTIL_FILETIME_DATA (size: 24)
 */
export interface RESUTIL_FILETIME_DATA {
  /** Windows.Win32.Foundation.FILETIME */
  Default: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  Minimum: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  Maximum: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRESUTIL_FILETIME_DATA = 24;

export function allocRESUTIL_FILETIME_DATA(data?: Partial<RESUTIL_FILETIME_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofRESUTIL_FILETIME_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Default !== undefined) view.setBigUint64(0, data.Default === null ? 0n : BigInt(util.toPointer(data.Default)), true);
  // 0x08: pointer
  if (data?.Minimum !== undefined) view.setBigUint64(8, data.Minimum === null ? 0n : BigInt(util.toPointer(data.Minimum)), true);
  // 0x10: pointer
  if (data?.Maximum !== undefined) view.setBigUint64(16, data.Maximum === null ? 0n : BigInt(util.toPointer(data.Maximum)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.RESUTIL_PROPERTY_ITEM (size: 48)
 */
export interface RESUTIL_PROPERTY_ITEM {
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  KeyName: string | null;
  /** u32 */
  Format: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Minimum: number;
  /** u32 */
  Maximum: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Offset: number;
}

export const sizeofRESUTIL_PROPERTY_ITEM = 48;

export function allocRESUTIL_PROPERTY_ITEM(data?: Partial<RESUTIL_PROPERTY_ITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofRESUTIL_PROPERTY_ITEM);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.KeyName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.KeyName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(24, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x20: u32
  if (data?.Minimum !== undefined) view.setUint32(32, Number(data.Minimum), true);
  // 0x24: u32
  if (data?.Maximum !== undefined) view.setUint32(36, Number(data.Maximum), true);
  // 0x28: u32
  if (data?.Flags !== undefined) view.setUint32(40, Number(data.Flags), true);
  // 0x2c: u32
  if (data?.Offset !== undefined) view.setUint32(44, Number(data.Offset), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLRES_CALLBACK_FUNCTION_TABLE (size: 120)
 */
export interface CLRES_CALLBACK_FUNCTION_TABLE {
  /** Windows.Win32.Networking.Clustering.PLOG_EVENT_ROUTINE */
  LogEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PSET_RESOURCE_STATUS_ROUTINE_EX */
  SetResourceStatusEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PSET_RESOURCE_LOCKED_MODE_ROUTINE */
  SetResourceLockedMode: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PSIGNAL_FAILURE_ROUTINE */
  SignalFailure: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PSET_RESOURCE_INMEMORY_NODELOCAL_PROPERTIES_ROUTINE */
  SetResourceInMemoryNodeLocalProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PEND_CONTROL_CALL */
  EndControlCall: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PEND_TYPE_CONTROL_CALL */
  EndTypeControlCall: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PEXTEND_RES_CONTROL_CALL */
  ExtendControlCall: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PEXTEND_RES_TYPE_CONTROL_CALL */
  ExtendTypeControlCall: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PRAISE_RES_TYPE_NOTIFICATION */
  RaiseResTypeNotification: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PCHANGE_RESOURCE_PROCESS_FOR_DUMPS */
  ChangeResourceProcessForDumps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PCHANGE_RES_TYPE_PROCESS_FOR_DUMPS */
  ChangeResTypeProcessForDumps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PSET_INTERNAL_STATE */
  SetInternalState: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PSET_RESOURCE_LOCKED_MODE_EX_ROUTINE */
  SetResourceLockedModeEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PREQUEST_DUMP_ROUTINE */
  RequestDump: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCLRES_CALLBACK_FUNCTION_TABLE = 120;

export function allocCLRES_CALLBACK_FUNCTION_TABLE(data?: Partial<CLRES_CALLBACK_FUNCTION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofCLRES_CALLBACK_FUNCTION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogEvent !== undefined) view.setBigUint64(0, data.LogEvent === null ? 0n : BigInt(util.toPointer(data.LogEvent)), true);
  // 0x08: pointer
  if (data?.SetResourceStatusEx !== undefined) view.setBigUint64(8, data.SetResourceStatusEx === null ? 0n : BigInt(util.toPointer(data.SetResourceStatusEx)), true);
  // 0x10: pointer
  if (data?.SetResourceLockedMode !== undefined) view.setBigUint64(16, data.SetResourceLockedMode === null ? 0n : BigInt(util.toPointer(data.SetResourceLockedMode)), true);
  // 0x18: pointer
  if (data?.SignalFailure !== undefined) view.setBigUint64(24, data.SignalFailure === null ? 0n : BigInt(util.toPointer(data.SignalFailure)), true);
  // 0x20: pointer
  if (data?.SetResourceInMemoryNodeLocalProperties !== undefined) view.setBigUint64(32, data.SetResourceInMemoryNodeLocalProperties === null ? 0n : BigInt(util.toPointer(data.SetResourceInMemoryNodeLocalProperties)), true);
  // 0x28: pointer
  if (data?.EndControlCall !== undefined) view.setBigUint64(40, data.EndControlCall === null ? 0n : BigInt(util.toPointer(data.EndControlCall)), true);
  // 0x30: pointer
  if (data?.EndTypeControlCall !== undefined) view.setBigUint64(48, data.EndTypeControlCall === null ? 0n : BigInt(util.toPointer(data.EndTypeControlCall)), true);
  // 0x38: pointer
  if (data?.ExtendControlCall !== undefined) view.setBigUint64(56, data.ExtendControlCall === null ? 0n : BigInt(util.toPointer(data.ExtendControlCall)), true);
  // 0x40: pointer
  if (data?.ExtendTypeControlCall !== undefined) view.setBigUint64(64, data.ExtendTypeControlCall === null ? 0n : BigInt(util.toPointer(data.ExtendTypeControlCall)), true);
  // 0x48: pointer
  if (data?.RaiseResTypeNotification !== undefined) view.setBigUint64(72, data.RaiseResTypeNotification === null ? 0n : BigInt(util.toPointer(data.RaiseResTypeNotification)), true);
  // 0x50: pointer
  if (data?.ChangeResourceProcessForDumps !== undefined) view.setBigUint64(80, data.ChangeResourceProcessForDumps === null ? 0n : BigInt(util.toPointer(data.ChangeResourceProcessForDumps)), true);
  // 0x58: pointer
  if (data?.ChangeResTypeProcessForDumps !== undefined) view.setBigUint64(88, data.ChangeResTypeProcessForDumps === null ? 0n : BigInt(util.toPointer(data.ChangeResTypeProcessForDumps)), true);
  // 0x60: pointer
  if (data?.SetInternalState !== undefined) view.setBigUint64(96, data.SetInternalState === null ? 0n : BigInt(util.toPointer(data.SetInternalState)), true);
  // 0x68: pointer
  if (data?.SetResourceLockedModeEx !== undefined) view.setBigUint64(104, data.SetResourceLockedModeEx === null ? 0n : BigInt(util.toPointer(data.SetResourceLockedModeEx)), true);
  // 0x70: pointer
  if (data?.RequestDump !== undefined) view.setBigUint64(112, data.RequestDump === null ? 0n : BigInt(util.toPointer(data.RequestDump)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.MONITOR_STATE (size: 32)
 */
export interface MONITOR_STATE {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  LastUpdate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.RESOURCE_MONITOR_STATE */
  State: RESOURCE_MONITOR_STATE;
  /** Windows.Win32.Foundation.HANDLE */
  ActiveResource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  ResmonStop: boolean;
}

export const sizeofMONITOR_STATE = 32;

export function allocMONITOR_STATE(data?: Partial<MONITOR_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITOR_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LastUpdate !== undefined) view.setBigUint64(0, data.LastUpdate === null ? 0n : BigInt(util.toPointer(data.LastUpdate)), true);
  // 0x08: i32
  if (data?.State !== undefined) view.setInt32(8, Number(data.State), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ActiveResource !== undefined) view.setBigUint64(16, data.ActiveResource === null ? 0n : BigInt(util.toPointer(data.ActiveResource)), true);
  // 0x18: i32
  if (data?.ResmonStop !== undefined) view.setInt32(24, Number(data.ResmonStop), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.POST_UPGRADE_VERSION_INFO (size: 24)
 */
export interface POST_UPGRADE_VERSION_INFO {
  /** u32 */
  newMajorVersion: number;
  /** u32 */
  newUpgradeVersion: number;
  /** u32 */
  oldMajorVersion: number;
  /** u32 */
  oldUpgradeVersion: number;
  /** u32 */
  reserved: number;
}

export const sizeofPOST_UPGRADE_VERSION_INFO = 24;

export function allocPOST_UPGRADE_VERSION_INFO(data?: Partial<POST_UPGRADE_VERSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPOST_UPGRADE_VERSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.newMajorVersion !== undefined) view.setUint32(0, Number(data.newMajorVersion), true);
  // 0x04: u32
  if (data?.newUpgradeVersion !== undefined) view.setUint32(4, Number(data.newUpgradeVersion), true);
  // 0x08: u32
  if (data?.oldMajorVersion !== undefined) view.setUint32(8, Number(data.oldMajorVersion), true);
  // 0x0c: u32
  if (data?.oldUpgradeVersion !== undefined) view.setUint32(12, Number(data.oldUpgradeVersion), true);
  // 0x10: u32
  if (data?.reserved !== undefined) view.setUint32(16, Number(data.reserved), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_HEALTH_FAULT (size: 40)
 */
export interface CLUSTER_HEALTH_FAULT {
  /** Windows.Win32.Foundation.PWSTR */
  Id: string | null;
  /** u32 */
  ErrorType: number;
  /** u32 */
  ErrorCode: number;
  /** Windows.Win32.Foundation.PWSTR */
  Description: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  Provider: string | null;
  /** u32 */
  Flags: number;
  /** u32 */
  Reserved: number;
}

export const sizeofCLUSTER_HEALTH_FAULT = 40;

export function allocCLUSTER_HEALTH_FAULT(data?: Partial<CLUSTER_HEALTH_FAULT>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_HEALTH_FAULT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Id !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Id);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.ErrorType !== undefined) view.setUint32(8, Number(data.ErrorType), true);
  // 0x0c: u32
  if (data?.ErrorCode !== undefined) view.setUint32(12, Number(data.ErrorCode), true);
  // 0x10: buffer
  if (data?.Description !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Description);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.Provider !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Provider);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: u32
  if (data?.Reserved !== undefined) view.setUint32(36, Number(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUSTER_HEALTH_FAULT_ARRAY (size: 16)
 */
export interface CLUSTER_HEALTH_FAULT_ARRAY {
  /** u32 */
  numFaults: number;
  /** ptr */
  faults: Deno.PointerValue | Uint8Array | null;
}

export const sizeofCLUSTER_HEALTH_FAULT_ARRAY = 16;

export function allocCLUSTER_HEALTH_FAULT_ARRAY(data?: Partial<CLUSTER_HEALTH_FAULT_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUSTER_HEALTH_FAULT_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numFaults !== undefined) view.setUint32(0, Number(data.numFaults), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.faults !== undefined) view.setBigUint64(8, data.faults === null ? 0n : BigInt(util.toPointer(data.faults)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.CLUS_WORKER (size: 16)
 */
export interface CLUS_WORKER {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Terminate: boolean;
}

export const sizeofCLUS_WORKER = 16;

export function allocCLUS_WORKER(data?: Partial<CLUS_WORKER>): Uint8Array {
  const buf = new Uint8Array(sizeofCLUS_WORKER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: i32
  if (data?.Terminate !== undefined) view.setInt32(8, Number(data.Terminate), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.PaxosTagCStruct (size: 80)
 */
export interface PaxosTagCStruct {
  /** u64 */
  __padding__PaxosTagVtable: Deno.PointerValue;
  /** u64 */
  __padding__NextEpochVtable: Deno.PointerValue;
  /** u64 */
  __padding__NextEpoch_DateTimeVtable: Deno.PointerValue;
  /** u64 */
  NextEpoch_DateTime_ticks: Deno.PointerValue;
  /** i32 */
  NextEpoch_Value: number;
  /** u32 */
  __padding__BoundryNextEpoch: number;
  /** u64 */
  __padding__EpochVtable: Deno.PointerValue;
  /** u64 */
  __padding__Epoch_DateTimeVtable: Deno.PointerValue;
  /** u64 */
  Epoch_DateTime_ticks: Deno.PointerValue;
  /** i32 */
  Epoch_Value: number;
  /** u32 */
  __padding__BoundryEpoch: number;
  /** i32 */
  Sequence: number;
  /** u32 */
  __padding__BoundrySequence: number;
}

export const sizeofPaxosTagCStruct = 80;

export function allocPaxosTagCStruct(data?: Partial<PaxosTagCStruct>): Uint8Array {
  const buf = new Uint8Array(sizeofPaxosTagCStruct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.__padding__PaxosTagVtable !== undefined) view.setBigUint64(0, BigInt(data.__padding__PaxosTagVtable), true);
  // 0x08: u64
  if (data?.__padding__NextEpochVtable !== undefined) view.setBigUint64(8, BigInt(data.__padding__NextEpochVtable), true);
  // 0x10: u64
  if (data?.__padding__NextEpoch_DateTimeVtable !== undefined) view.setBigUint64(16, BigInt(data.__padding__NextEpoch_DateTimeVtable), true);
  // 0x18: u64
  if (data?.NextEpoch_DateTime_ticks !== undefined) view.setBigUint64(24, BigInt(data.NextEpoch_DateTime_ticks), true);
  // 0x20: i32
  if (data?.NextEpoch_Value !== undefined) view.setInt32(32, Number(data.NextEpoch_Value), true);
  // 0x24: u32
  if (data?.__padding__BoundryNextEpoch !== undefined) view.setUint32(36, Number(data.__padding__BoundryNextEpoch), true);
  // 0x28: u64
  if (data?.__padding__EpochVtable !== undefined) view.setBigUint64(40, BigInt(data.__padding__EpochVtable), true);
  // 0x30: u64
  if (data?.__padding__Epoch_DateTimeVtable !== undefined) view.setBigUint64(48, BigInt(data.__padding__Epoch_DateTimeVtable), true);
  // 0x38: u64
  if (data?.Epoch_DateTime_ticks !== undefined) view.setBigUint64(56, BigInt(data.Epoch_DateTime_ticks), true);
  // 0x40: i32
  if (data?.Epoch_Value !== undefined) view.setInt32(64, Number(data.Epoch_Value), true);
  // 0x44: u32
  if (data?.__padding__BoundryEpoch !== undefined) view.setUint32(68, Number(data.__padding__BoundryEpoch), true);
  // 0x48: i32
  if (data?.Sequence !== undefined) view.setInt32(72, Number(data.Sequence), true);
  // 0x4c: u32
  if (data?.__padding__BoundrySequence !== undefined) view.setUint32(76, Number(data.__padding__BoundrySequence), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.WitnessTagUpdateHelper (size: 24)
 */
export interface WitnessTagUpdateHelper {
  /** i32 */
  Version: number;
  /** Windows.Win32.Networking.Clustering.PaxosTagCStruct */
  paxosToSet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.Clustering.PaxosTagCStruct */
  paxosToValidate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWitnessTagUpdateHelper = 24;

export function allocWitnessTagUpdateHelper(data?: Partial<WitnessTagUpdateHelper>): Uint8Array {
  const buf = new Uint8Array(sizeofWitnessTagUpdateHelper);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.paxosToSet !== undefined) view.setBigUint64(8, data.paxosToSet === null ? 0n : BigInt(util.toPointer(data.paxosToSet)), true);
  // 0x10: pointer
  if (data?.paxosToValidate !== undefined) view.setBigUint64(16, data.paxosToValidate === null ? 0n : BigInt(util.toPointer(data.paxosToValidate)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.Clustering.WitnessTagHelper (size: 16)
 */
export interface WitnessTagHelper {
  /** i32 */
  Version: number;
  /** Windows.Win32.Networking.Clustering.PaxosTagCStruct */
  paxosToValidate: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWitnessTagHelper = 16;

export function allocWitnessTagHelper(data?: Partial<WitnessTagHelper>): Uint8Array {
  const buf = new Uint8Array(sizeofWitnessTagHelper);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.paxosToValidate !== undefined) view.setBigUint64(8, data.paxosToValidate === null ? 0n : BigInt(util.toPointer(data.paxosToValidate)), true);
  return buf;
}

export type HKEY = Deno.PointerValue;

export type SC_HANDLE = Deno.PointerValue;

// Native Libraries

try {
  var libCLUSAPI = Deno.dlopen("CLUSAPI", {
    GetNodeClusterState: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    OpenCluster: {
      parameters: ["buffer"],
      result: "pointer",
    },
    OpenClusterEx: {
      parameters: ["buffer", "u32", "pointer"],
      result: "pointer",
    },
    CloseCluster: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetClusterName: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    GetClusterInformation: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    GetClusterQuorumResource: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    SetClusterQuorumResource: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    BackupClusterDatabase: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    RestoreClusterDatabase: {
      parameters: ["buffer", "i32", "buffer"],
      result: "u32",
    },
    SetClusterNetworkPriorityOrder: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    SetClusterServiceAccountPassword: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ClusterControl: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    ClusterUpgradeFunctionalLevel: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    CreateClusterNotifyPortV2: {
      parameters: ["pointer", "pointer", "pointer", "u32", "usize"],
      result: "pointer",
    },
    RegisterClusterNotifyV2: {
      parameters: ["pointer", "pointer", "pointer", "usize"],
      result: "u32",
    },
    GetNotifyEventHandle: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    GetClusterNotifyV2: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    CreateClusterNotifyPort: {
      parameters: ["pointer", "pointer", "u32", "usize"],
      result: "pointer",
    },
    RegisterClusterNotify: {
      parameters: ["pointer", "u32", "pointer", "usize"],
      result: "u32",
    },
    GetClusterNotify: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    CloseClusterNotifyPort: {
      parameters: ["pointer"],
      result: "i32",
    },
    ClusterOpenEnum: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    ClusterGetEnumCount: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterEnum: {
      parameters: ["pointer", "u32", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    ClusterCloseEnum: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterOpenEnumEx: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ClusterGetEnumCountEx: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterEnumEx: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ClusterCloseEnumEx: {
      parameters: ["pointer"],
      result: "u32",
    },
    CreateClusterGroupSet: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    OpenClusterGroupSet: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    CloseClusterGroupSet: {
      parameters: ["pointer"],
      result: "i32",
    },
    DeleteClusterGroupSet: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterAddGroupToGroupSet: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ClusterAddGroupToGroupSetWithDomains: {
      parameters: ["pointer", "pointer", "u32", "u32"],
      result: "u32",
    },
    ClusterRemoveGroupFromGroupSet: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterGroupSetControl: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    AddClusterGroupDependency: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    SetGroupDependencyExpression: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    RemoveClusterGroupDependency: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    AddClusterGroupSetDependency: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    SetClusterGroupSetDependencyExpression: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    RemoveClusterGroupSetDependency: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    AddClusterGroupToGroupSetDependency: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    RemoveClusterGroupToGroupSetDependency: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ClusterGroupSetOpenEnum: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ClusterGroupSetGetEnumCount: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterGroupSetEnum: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    ClusterGroupSetCloseEnum: {
      parameters: ["pointer"],
      result: "u32",
    },
    AddCrossClusterGroupSetDependency: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "u32",
    },
    RemoveCrossClusterGroupSetDependency: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "u32",
    },
    CreateClusterAvailabilitySet: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    ClusterNodeReplacement: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "u32",
    },
    ClusterCreateAffinityRule: {
      parameters: ["pointer", "buffer", "i32"],
      result: "u32",
    },
    ClusterRemoveAffinityRule: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    ClusterAddGroupToAffinityRule: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    ClusterRemoveGroupFromAffinityRule: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    ClusterAffinityRuleControl: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    OpenClusterNode: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    OpenClusterNodeEx: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    OpenClusterNodeById: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    CloseClusterNode: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetClusterNodeState: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetClusterNodeId: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    GetClusterFromNode: {
      parameters: ["pointer"],
      result: "pointer",
    },
    PauseClusterNode: {
      parameters: ["pointer"],
      result: "u32",
    },
    ResumeClusterNode: {
      parameters: ["pointer"],
      result: "u32",
    },
    EvictClusterNode: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterNetInterfaceOpenEnum: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "pointer",
    },
    ClusterNetInterfaceEnum: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    ClusterNetInterfaceCloseEnum: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterNodeOpenEnum: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    ClusterNodeOpenEnumEx: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ClusterNodeGetEnumCountEx: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterNodeEnumEx: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ClusterNodeCloseEnumEx: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterNodeGetEnumCount: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterNodeCloseEnum: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterNodeEnum: {
      parameters: ["pointer", "u32", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    EvictClusterNodeEx: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    GetClusterResourceTypeKey: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    CreateClusterGroup: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    OpenClusterGroup: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    OpenClusterGroupEx: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    PauseClusterNodeEx: {
      parameters: ["pointer", "i32", "u32", "pointer"],
      result: "u32",
    },
    ResumeClusterNodeEx: {
      parameters: ["pointer", "i32", "u32"],
      result: "u32",
    },
    CreateClusterGroupEx: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    ClusterGroupOpenEnumEx: {
      parameters: ["pointer", "buffer", "u32", "buffer", "u32", "u32"],
      result: "pointer",
    },
    ClusterGroupGetEnumCountEx: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterGroupEnumEx: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ClusterGroupCloseEnumEx: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterResourceOpenEnumEx: {
      parameters: ["pointer", "buffer", "u32", "buffer", "u32", "u32"],
      result: "pointer",
    },
    ClusterResourceGetEnumCountEx: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterResourceEnumEx: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ClusterResourceCloseEnumEx: {
      parameters: ["pointer"],
      result: "u32",
    },
    OnlineClusterGroupEx: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    OfflineClusterGroupEx: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    OnlineClusterResourceEx: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    OfflineClusterResourceEx: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    MoveClusterGroupEx: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
    CancelClusterGroupOperation: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    RestartClusterResource: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    CloseClusterGroup: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetClusterFromGroup: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetClusterGroupState: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetClusterGroupName: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    SetClusterGroupNodeList: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    OnlineClusterGroup: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    MoveClusterGroup: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    OfflineClusterGroup: {
      parameters: ["pointer"],
      result: "u32",
    },
    DeleteClusterGroup: {
      parameters: ["pointer"],
      result: "u32",
    },
    DestroyClusterGroup: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterGroupOpenEnum: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    ClusterGroupGetEnumCount: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterGroupEnum: {
      parameters: ["pointer", "u32", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    ClusterGroupCloseEnum: {
      parameters: ["pointer"],
      result: "u32",
    },
    CreateClusterResource: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    OpenClusterResource: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    OpenClusterResourceEx: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    CloseClusterResource: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetClusterFromResource: {
      parameters: ["pointer"],
      result: "pointer",
    },
    DeleteClusterResource: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetClusterResourceState: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    SetClusterResourceName: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    FailClusterResource: {
      parameters: ["pointer"],
      result: "u32",
    },
    OnlineClusterResource: {
      parameters: ["pointer"],
      result: "u32",
    },
    OfflineClusterResource: {
      parameters: ["pointer"],
      result: "u32",
    },
    ChangeClusterResourceGroup: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ChangeClusterResourceGroupEx: {
      parameters: ["pointer", "pointer", "u64"],
      result: "u32",
    },
    AddClusterResourceNode: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    RemoveClusterResourceNode: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    AddClusterResourceDependency: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    RemoveClusterResourceDependency: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    SetClusterResourceDependencyExpression: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    GetClusterResourceDependencyExpression: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    AddResourceToClusterSharedVolumes: {
      parameters: ["pointer"],
      result: "u32",
    },
    RemoveResourceFromClusterSharedVolumes: {
      parameters: ["pointer"],
      result: "u32",
    },
    IsFileOnClusterSharedVolume: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    ClusterSharedVolumeSetSnapshotState: {
      parameters: ["pointer", "buffer", "i32"],
      result: "u32",
    },
    CanResourceBeDependent: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ClusterResourceControl: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    ClusterResourceControlAsUser: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    ClusterResourceTypeControl: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    ClusterResourceTypeControlAsUser: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    ClusterGroupControl: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    ClusterNodeControl: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    GetClusterResourceNetworkName: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    ClusterResourceOpenEnum: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    ClusterResourceGetEnumCount: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterResourceEnum: {
      parameters: ["pointer", "u32", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    ClusterResourceCloseEnum: {
      parameters: ["pointer"],
      result: "u32",
    },
    CreateClusterResourceType: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32", "u32"],
      result: "u32",
    },
    DeleteClusterResourceType: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    ClusterResourceTypeOpenEnum: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    ClusterResourceTypeGetEnumCount: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterResourceTypeEnum: {
      parameters: ["pointer", "u32", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    ClusterResourceTypeCloseEnum: {
      parameters: ["pointer"],
      result: "u32",
    },
    OpenClusterNetwork: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    OpenClusterNetworkEx: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    CloseClusterNetwork: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetClusterFromNetwork: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ClusterNetworkOpenEnum: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    ClusterNetworkGetEnumCount: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterNetworkEnum: {
      parameters: ["pointer", "u32", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    ClusterNetworkCloseEnum: {
      parameters: ["pointer"],
      result: "u32",
    },
    GetClusterNetworkState: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetClusterNetworkName: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    GetClusterNetworkId: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    ClusterNetworkControl: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    OpenClusterNetInterface: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    OpenClusterNetInterfaceEx: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    GetClusterNetInterface: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "pointer"],
      result: "u32",
    },
    CloseClusterNetInterface: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetClusterFromNetInterface: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GetClusterNetInterfaceState: {
      parameters: ["pointer"],
      result: "i32",
    },
    ClusterNetInterfaceControl: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    GetClusterKey: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    GetClusterGroupKey: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    GetClusterResourceKey: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    GetClusterNodeKey: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    GetClusterNetworkKey: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    GetClusterNetInterfaceKey: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    ClusterRegCreateKey: {
      parameters: ["pointer", "buffer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ClusterRegOpenKey: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    ClusterRegDeleteKey: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    ClusterRegCloseKey: {
      parameters: ["pointer"],
      result: "i32",
    },
    ClusterRegEnumKey: {
      parameters: ["pointer", "u32", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    ClusterRegSetValue: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    ClusterRegDeleteValue: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    ClusterRegQueryValue: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ClusterRegEnumValue: {
      parameters: ["pointer", "u32", "buffer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    ClusterRegQueryInfoKey: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ClusterRegGetKeySecurity: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ClusterRegSetKeySecurity: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    ClusterRegSyncDatabase: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    ClusterRegCreateBatch: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ClusterRegBatchAddCommand: {
      parameters: ["pointer", "i32", "buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    ClusterRegCloseBatch: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    ClusterRegCloseBatchEx: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    ClusterRegBatchReadCommand: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ClusterRegBatchCloseNotification: {
      parameters: ["pointer"],
      result: "i32",
    },
    ClusterRegCreateBatchNotifyPort: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ClusterRegCloseBatchNotifyPort: {
      parameters: ["pointer"],
      result: "i32",
    },
    ClusterRegGetBatchNotification: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ClusterRegCreateReadBatch: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ClusterRegReadBatchAddCommand: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "i32",
    },
    ClusterRegCloseReadBatch: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ClusterRegCloseReadBatchEx: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    ClusterRegReadBatchReplyNextCommand: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ClusterRegCloseReadBatchReply: {
      parameters: ["pointer"],
      result: "i32",
    },
    ClusterSetAccountAccess: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "u32",
    },
    CreateCluster: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    CreateClusterNameAccount: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    RemoveClusterNameAccount: {
      parameters: ["pointer", "i32"],
      result: "u32",
    },
    DetermineCNOResTypeFromNodelist: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
    },
    DetermineCNOResTypeFromCluster: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    DetermineClusterCloudTypeFromNodelist: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
    },
    DetermineClusterCloudTypeFromCluster: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    GetNodeCloudTypeDW: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    RegisterClusterResourceTypeNotifyV2: {
      parameters: ["pointer", "pointer", "i64", "buffer", "usize"],
      result: "u32",
    },
    AddClusterNode: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    AddClusterStorageNode: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "buffer", "buffer"],
      result: "u32",
    },
    AddClusterNodeEx: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    RemoveClusterStorageNode: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "u32",
    },
    DestroyCluster: {
      parameters: ["pointer", "pointer", "pointer", "i32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libRESUTILS = Deno.dlopen("RESUTILS", {
    InitializeClusterHealthFault: {
      parameters: ["pointer"],
      result: "u32",
    },
    InitializeClusterHealthFaultArray: {
      parameters: ["pointer"],
      result: "u32",
    },
    FreeClusterHealthFault: {
      parameters: ["pointer"],
      result: "u32",
    },
    FreeClusterHealthFaultArray: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusGetClusterHealthFaults: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    ClusRemoveClusterHealthFault: {
      parameters: ["pointer", "buffer", "u32"],
      result: "u32",
    },
    ClusAddClusterHealthFault: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    ResUtilStartResourceService: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    ResUtilVerifyResourceService: {
      parameters: ["buffer"],
      result: "u32",
    },
    ResUtilStopResourceService: {
      parameters: ["buffer"],
      result: "u32",
    },
    ResUtilVerifyService: {
      parameters: ["pointer"],
      result: "u32",
    },
    ResUtilStopService: {
      parameters: ["pointer"],
      result: "u32",
    },
    ResUtilCreateDirectoryTree: {
      parameters: ["buffer"],
      result: "u32",
    },
    ResUtilIsPathValid: {
      parameters: ["buffer"],
      result: "i32",
    },
    ResUtilEnumProperties: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilEnumPrivateProperties: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetProperties: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetAllProperties: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetPrivateProperties: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetPropertySize: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetProperty: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilVerifyPropertyTable: {
      parameters: ["pointer", "pointer", "i32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    ResUtilSetPropertyTable: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    ResUtilSetPropertyTableEx: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "u32", "i32", "pointer"],
      result: "u32",
    },
    ResUtilSetPropertyParameterBlock: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    ResUtilSetPropertyParameterBlockEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "i32", "pointer"],
      result: "u32",
    },
    ResUtilSetUnknownProperties: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    ResUtilGetPropertiesToParameterBlock: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer"],
      result: "u32",
    },
    ResUtilPropertyListFromParameterBlock: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilDupParameterBlock: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilFreeParameterBlock: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "void",
    },
    ResUtilAddUnknownProperties: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilSetPrivatePropertyList: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    ResUtilVerifyPrivatePropertyList: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    ResUtilDupString: {
      parameters: ["buffer"],
      result: "buffer",
    },
    ResUtilGetBinaryValue: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetSzValue: {
      parameters: ["pointer", "buffer"],
      result: "buffer",
    },
    ResUtilGetDwordValue: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    ResUtilGetQwordValue: {
      parameters: ["pointer", "buffer", "pointer", "u64"],
      result: "u32",
    },
    ResUtilSetBinaryValue: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilSetSzValue: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "u32",
    },
    ResUtilSetExpandSzValue: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "u32",
    },
    ResUtilSetMultiSzValue: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilSetDwordValue: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    ResUtilSetQwordValue: {
      parameters: ["pointer", "buffer", "u64", "pointer"],
      result: "u32",
    },
    ResUtilSetValueEx: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32", "u32"],
      result: "u32",
    },
    ResUtilGetBinaryProperty: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetSzProperty: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetMultiSzProperty: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetDwordProperty: {
      parameters: ["pointer", "pointer", "u32", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetLongProperty: {
      parameters: ["pointer", "pointer", "i32", "i32", "i32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetFileTimeProperty: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetEnvironmentWithNetName: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ResUtilFreeEnvironment: {
      parameters: ["pointer"],
      result: "u32",
    },
    ResUtilExpandEnvironmentStrings: {
      parameters: ["buffer"],
      result: "buffer",
    },
    ResUtilSetResourceServiceEnvironment: {
      parameters: ["buffer", "pointer", "pointer", "isize"],
      result: "u32",
    },
    ResUtilRemoveResourceServiceEnvironment: {
      parameters: ["buffer", "pointer", "isize"],
      result: "u32",
    },
    ResUtilSetResourceServiceStartParameters: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "isize"],
      result: "u32",
    },
    ResUtilFindSzProperty: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    ResUtilFindExpandSzProperty: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    ResUtilFindExpandedSzProperty: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    ResUtilFindDwordProperty: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    ResUtilFindBinaryProperty: {
      parameters: ["pointer", "u32", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilFindMultiSzProperty: {
      parameters: ["pointer", "u32", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilFindLongProperty: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    ResUtilFindULargeIntegerProperty: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    ResUtilFindFileTimeProperty: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    ClusWorkerCreate: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    ClusWorkerCheckTerminate: {
      parameters: ["pointer"],
      result: "i32",
    },
    ClusWorkerTerminate: {
      parameters: ["pointer"],
      result: "void",
    },
    ClusWorkerTerminateEx: {
      parameters: ["pointer", "u32", "i32"],
      result: "u32",
    },
    ClusWorkersTerminate: {
      parameters: ["pointer", "usize", "u32", "i32"],
      result: "u32",
    },
    ResUtilResourcesEqual: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ResUtilResourceTypesEqual: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    ResUtilIsResourceClassEqual: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ResUtilEnumResources: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilEnumResourcesEx: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetResourceDependency: {
      parameters: ["pointer", "buffer"],
      result: "pointer",
    },
    ResUtilGetResourceDependencyByName: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "pointer",
    },
    ResUtilGetResourceDependencyByClass: {
      parameters: ["pointer", "pointer", "pointer", "i32"],
      result: "pointer",
    },
    ResUtilGetResourceNameDependency: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    ResUtilGetResourceDependentIPAddressProps: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    ResUtilFindDependentDiskResourceDriveLetter: {
      parameters: ["pointer", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    ResUtilTerminateServiceProcessFromResDll: {
      parameters: ["u32", "i32", "pointer", "pointer", "isize"],
      result: "u32",
    },
    ResUtilGetPropertyFormats: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetCoreClusterResources: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetResourceName: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    ResUtilGetClusterRoleState: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ClusterIsPathOnSharedVolume: {
      parameters: ["buffer"],
      result: "i32",
    },
    ClusterGetVolumePathName: {
      parameters: ["buffer", "buffer", "u32"],
      result: "i32",
    },
    ClusterGetVolumeNameForVolumeMountPoint: {
      parameters: ["buffer", "buffer", "u32"],
      result: "i32",
    },
    ClusterPrepareSharedVolumeForBackup: {
      parameters: ["buffer", "buffer", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    ClusterClearBackupStateForSharedVolume: {
      parameters: ["buffer"],
      result: "u32",
    },
    ResUtilSetResourceServiceStartParametersEx: {
      parameters: ["buffer", "pointer", "pointer", "u32", "pointer", "isize"],
      result: "u32",
    },
    ResUtilEnumResourcesEx2: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    ResUtilGetResourceDependencyEx: {
      parameters: ["pointer", "buffer", "u32"],
      result: "pointer",
    },
    ResUtilGetResourceDependencyByNameEx: {
      parameters: ["pointer", "pointer", "buffer", "i32", "u32"],
      result: "pointer",
    },
    ResUtilGetResourceDependencyByClassEx: {
      parameters: ["pointer", "pointer", "pointer", "i32", "u32"],
      result: "pointer",
    },
    ResUtilGetResourceNameDependencyEx: {
      parameters: ["buffer", "buffer", "u32"],
      result: "pointer",
    },
    ResUtilGetCoreClusterResourcesEx: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    OpenClusterCryptProvider: {
      parameters: ["buffer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    OpenClusterCryptProviderEx: {
      parameters: ["buffer", "buffer", "pointer", "u32", "u32"],
      result: "pointer",
    },
    CloseClusterCryptProvider: {
      parameters: ["pointer"],
      result: "u32",
    },
    ClusterEncrypt: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ClusterDecrypt: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    FreeClusterCrypt: {
      parameters: ["pointer"],
      result: "u32",
    },
    ResUtilVerifyShutdownSafe: {
      parameters: ["u32", "u32", "pointer"],
      result: "u32",
    },
    ResUtilPaxosComparer: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ResUtilLeftPaxosIsLessThanRight: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ResUtilsDeleteKeyTree: {
      parameters: ["pointer", "buffer", "i32"],
      result: "u32",
    },
    ResUtilGroupsEqual: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilEnumGroups: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilEnumGroupsEx: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilDupGroup: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetClusterGroupType: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetCoreGroup: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ResUtilResourceDepEnum: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ResUtilDupResource: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ResUtilGetClusterId: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ResUtilNodeEnum: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libNTLANMAN = Deno.dlopen("NTLANMAN", {
    RegisterAppInstance: {
      parameters: ["pointer", "pointer", "i32"],
      result: "u32",
    },
    RegisterAppInstanceVersion: {
      parameters: ["pointer", "u64", "u64"],
      result: "u32",
    },
    QueryAppInstanceVersion: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    ResetAllAppInstanceVersions: {
      parameters: [],
      result: "u32",
    },
    SetAppInstanceCsvFlags: {
      parameters: ["pointer", "u32", "u32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function GetNodeClusterState(
  lpszNodeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pdwClusterState: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.GetNodeClusterState(util.pwstrToFfi(lpszNodeName), util.toPointer(pdwClusterState));
}

export function OpenCluster(
  lpszClusterName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenCluster(util.pwstrToFfi(lpszClusterName)));
}

export function OpenClusterEx(
  lpszClusterName: string | null /* Windows.Win32.Foundation.PWSTR */,
  DesiredAccess: number /* u32 */,
  GrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenClusterEx(util.pwstrToFfi(lpszClusterName), DesiredAccess, util.toPointer(GrantedAccess)));
}

export function CloseCluster(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCLUSAPI.CloseCluster(util.toPointer(hCluster)));
}

export function SetClusterName(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNewClusterName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.SetClusterName(util.toPointer(hCluster), util.pwstrToFfi(lpszNewClusterName));
}

export function GetClusterInformation(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszClusterName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchClusterName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpClusterInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.GetClusterInformation(util.toPointer(hCluster), util.pwstrToFfi(lpszClusterName), util.toPointer(lpcchClusterName), util.toPointer(lpClusterInfo));
}

export function GetClusterQuorumResource(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResourceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchResourceName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDeviceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchDeviceName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwMaxQuorumLogSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.GetClusterQuorumResource(util.toPointer(hCluster), util.pwstrToFfi(lpszResourceName), util.toPointer(lpcchResourceName), util.pwstrToFfi(lpszDeviceName), util.toPointer(lpcchDeviceName), util.toPointer(lpdwMaxQuorumLogSize));
}

export function SetClusterQuorumResource(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDeviceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwMaxQuoLogSize: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.SetClusterQuorumResource(util.toPointer(hResource), util.pwstrToFfi(lpszDeviceName), dwMaxQuoLogSize);
}

export function BackupClusterDatabase(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszPathName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.BackupClusterDatabase(util.toPointer(hCluster), util.pwstrToFfi(lpszPathName));
}

export function RestoreClusterDatabase(
  lpszPathName: string | null /* Windows.Win32.Foundation.PWSTR */,
  bForce: boolean /* Windows.Win32.Foundation.BOOL */,
  lpszQuorumDriveLetter: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.RestoreClusterDatabase(util.pwstrToFfi(lpszPathName), util.boolToFfi(bForce), util.pwstrToFfi(lpszQuorumDriveLetter));
}

export function SetClusterNetworkPriorityOrder(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  NetworkCount: number /* u32 */,
  NetworkList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.SetClusterNetworkPriorityOrder(util.toPointer(hCluster), NetworkCount, util.toPointer(NetworkList));
}

export function SetClusterServiceAccountPassword(
  lpszClusterName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszNewPassword: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  lpReturnStatusBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbReturnStatusBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.SetClusterServiceAccountPassword(util.pwstrToFfi(lpszClusterName), util.pwstrToFfi(lpszNewPassword), dwFlags, util.toPointer(lpReturnStatusBuffer), util.toPointer(lpcbReturnStatusBufferSize));
}

export function ClusterControl(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  hHostNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwControlCode: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nInBufferSize: number /* u32 */,
  lpOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nOutBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterControl(util.toPointer(hCluster), util.toPointer(hHostNode), dwControlCode, util.toPointer(lpInBuffer), nInBufferSize, util.toPointer(lpOutBuffer), nOutBufferSize, util.toPointer(lpBytesReturned));
}

export function ClusterUpgradeFunctionalLevel(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  perform: boolean /* Windows.Win32.Foundation.BOOL */,
  pfnProgressCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.PCLUSTER_UPGRADE_PROGRESS_CALLBACK */,
  pvCallbackArg: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterUpgradeFunctionalLevel(util.toPointer(hCluster), util.boolToFfi(perform), util.toPointer(pfnProgressCallback), util.toPointer(pvCallbackArg));
}

export function CreateClusterNotifyPortV2(
  hChange: Deno.PointerValue | Uint8Array | null /* ptr */,
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  Filters: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFilterCount: number /* u32 */,
  dwNotifyKey: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.CreateClusterNotifyPortV2(util.toPointer(hChange), util.toPointer(hCluster), util.toPointer(Filters), dwFilterCount, dwNotifyKey));
}

export function RegisterClusterNotifyV2(
  hChange: Deno.PointerValue | Uint8Array | null /* ptr */,
  Filter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.NOTIFY_FILTER_AND_TYPE */,
  hObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwNotifyKey: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libCLUSAPI.RegisterClusterNotifyV2(util.toPointer(hChange), util.toPointer(Filter), util.toPointer(hObject), dwNotifyKey);
}

export function GetNotifyEventHandle(
  hChange: Deno.PointerValue | Uint8Array | null /* ptr */,
  lphTargetEvent: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.GetNotifyEventHandle(util.toPointer(hChange), util.toPointer(lphTargetEvent));
}

export function GetClusterNotifyV2(
  hChange: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwNotifyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFilterAndType: Deno.PointerValue | Uint8Array | null /* ptr */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpbBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszObjectId: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchObjectId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszParentId: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchParentId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszType: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchType: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMilliseconds: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.GetClusterNotifyV2(util.toPointer(hChange), util.toPointer(lpdwNotifyKey), util.toPointer(pFilterAndType), util.toPointer(buffer), util.toPointer(lpbBufferSize), util.pwstrToFfi(lpszObjectId), util.toPointer(lpcchObjectId), util.pwstrToFfi(lpszParentId), util.toPointer(lpcchParentId), util.pwstrToFfi(lpszName), util.toPointer(lpcchName), util.pwstrToFfi(lpszType), util.toPointer(lpcchType), dwMilliseconds);
}

export function CreateClusterNotifyPort(
  hChange: Deno.PointerValue | Uint8Array | null /* ptr */,
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFilter: number /* u32 */,
  dwNotifyKey: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.CreateClusterNotifyPort(util.toPointer(hChange), util.toPointer(hCluster), dwFilter, dwNotifyKey));
}

export function RegisterClusterNotify(
  hChange: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFilterType: number /* u32 */,
  hObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwNotifyKey: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libCLUSAPI.RegisterClusterNotify(util.toPointer(hChange), dwFilterType, util.toPointer(hObject), dwNotifyKey);
}

export function GetClusterNotify(
  hChange: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwNotifyKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwFilterType: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMilliseconds: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.GetClusterNotify(util.toPointer(hChange), util.toPointer(lpdwNotifyKey), util.toPointer(lpdwFilterType), util.pwstrToFfi(lpszName), util.toPointer(lpcchName), dwMilliseconds);
}

export function CloseClusterNotifyPort(
  hChange: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCLUSAPI.CloseClusterNotifyPort(util.toPointer(hChange)));
}

export function ClusterOpenEnum(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwType: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.ClusterOpenEnum(util.toPointer(hCluster), dwType));
}

export function ClusterGetEnumCount(
  hEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterGetEnumCount(util.toPointer(hEnum));
}

export function ClusterEnum(
  hEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
  lpdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterEnum(util.toPointer(hEnum), dwIndex, util.toPointer(lpdwType), util.pwstrToFfi(lpszName), util.toPointer(lpcchName));
}

export function ClusterCloseEnum(
  hEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterCloseEnum(util.toPointer(hEnum));
}

export function ClusterOpenEnumEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwType: number /* u32 */,
  pOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.ClusterOpenEnumEx(util.toPointer(hCluster), dwType, util.toPointer(pOptions)));
}

export function ClusterGetEnumCountEx(
  hClusterEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterGetEnumCountEx(util.toPointer(hClusterEnum));
}

export function ClusterEnumEx(
  hClusterEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
  pItem: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbItem: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterEnumEx(util.toPointer(hClusterEnum), dwIndex, util.toPointer(pItem), util.toPointer(cbItem));
}

export function ClusterCloseEnumEx(
  hClusterEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterCloseEnumEx(util.toPointer(hClusterEnum));
}

export function CreateClusterGroupSet(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  groupSetName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.CreateClusterGroupSet(util.toPointer(hCluster), util.pwstrToFfi(groupSetName)));
}

export function OpenClusterGroupSet(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszGroupSetName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenClusterGroupSet(util.toPointer(hCluster), util.pwstrToFfi(lpszGroupSetName)));
}

export function CloseClusterGroupSet(
  hGroupSet: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCLUSAPI.CloseClusterGroupSet(util.toPointer(hGroupSet)));
}

export function DeleteClusterGroupSet(
  hGroupSet: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.DeleteClusterGroupSet(util.toPointer(hGroupSet));
}

export function ClusterAddGroupToGroupSet(
  hGroupSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterAddGroupToGroupSet(util.toPointer(hGroupSet), util.toPointer(hGroup));
}

export function ClusterAddGroupToGroupSetWithDomains(
  hGroupSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  faultDomain: number /* u32 */,
  updateDomain: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.ClusterAddGroupToGroupSetWithDomains(util.toPointer(hGroupSet), util.toPointer(hGroup), faultDomain, updateDomain);
}

export function ClusterRemoveGroupFromGroupSet(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterRemoveGroupFromGroupSet(util.toPointer(hGroup));
}

export function ClusterGroupSetControl(
  hGroupSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  hHostNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwControlCode: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInBufferSize: number /* u32 */,
  lpOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbOutBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterGroupSetControl(util.toPointer(hGroupSet), util.toPointer(hHostNode), dwControlCode, util.toPointer(lpInBuffer), cbInBufferSize, util.toPointer(lpOutBuffer), cbOutBufferSize, util.toPointer(lpBytesReturned));
}

export function AddClusterGroupDependency(
  hDependentGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  hProviderGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.AddClusterGroupDependency(util.toPointer(hDependentGroup), util.toPointer(hProviderGroup));
}

export function SetGroupDependencyExpression(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDependencyExpression: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.SetGroupDependencyExpression(util.toPointer(hGroup), util.pwstrToFfi(lpszDependencyExpression));
}

export function RemoveClusterGroupDependency(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  hDependsOn: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.RemoveClusterGroupDependency(util.toPointer(hGroup), util.toPointer(hDependsOn));
}

export function AddClusterGroupSetDependency(
  hDependentGroupSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  hProviderGroupSet: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.AddClusterGroupSetDependency(util.toPointer(hDependentGroupSet), util.toPointer(hProviderGroupSet));
}

export function SetClusterGroupSetDependencyExpression(
  hGroupSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDependencyExprssion: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.SetClusterGroupSetDependencyExpression(util.toPointer(hGroupSet), util.pwstrToFfi(lpszDependencyExprssion));
}

export function RemoveClusterGroupSetDependency(
  hGroupSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  hDependsOn: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.RemoveClusterGroupSetDependency(util.toPointer(hGroupSet), util.toPointer(hDependsOn));
}

export function AddClusterGroupToGroupSetDependency(
  hDependentGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  hProviderGroupSet: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.AddClusterGroupToGroupSetDependency(util.toPointer(hDependentGroup), util.toPointer(hProviderGroupSet));
}

export function RemoveClusterGroupToGroupSetDependency(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  hDependsOn: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.RemoveClusterGroupToGroupSetDependency(util.toPointer(hGroup), util.toPointer(hDependsOn));
}

export function ClusterGroupSetOpenEnum(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.ClusterGroupSetOpenEnum(util.toPointer(hCluster)));
}

export function ClusterGroupSetGetEnumCount(
  hGroupSetEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterGroupSetGetEnumCount(util.toPointer(hGroupSetEnum));
}

export function ClusterGroupSetEnum(
  hGroupSetEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterGroupSetEnum(util.toPointer(hGroupSetEnum), dwIndex, util.pwstrToFfi(lpszName), util.toPointer(lpcchName));
}

export function ClusterGroupSetCloseEnum(
  hGroupSetEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterGroupSetCloseEnum(util.toPointer(hGroupSetEnum));
}

export function AddCrossClusterGroupSetDependency(
  hDependentGroupSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpRemoteClusterName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpRemoteGroupSetName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.AddCrossClusterGroupSetDependency(util.toPointer(hDependentGroupSet), util.pwstrToFfi(lpRemoteClusterName), util.pwstrToFfi(lpRemoteGroupSetName));
}

export function RemoveCrossClusterGroupSetDependency(
  hDependentGroupSet: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpRemoteClusterName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpRemoteGroupSetName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.RemoveCrossClusterGroupSetDependency(util.toPointer(hDependentGroupSet), util.pwstrToFfi(lpRemoteClusterName), util.pwstrToFfi(lpRemoteGroupSetName));
}

export function CreateClusterAvailabilitySet(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAvailabilitySetName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pAvailabilitySetConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.CreateClusterAvailabilitySet(util.toPointer(hCluster), util.pwstrToFfi(lpAvailabilitySetName), util.toPointer(pAvailabilitySetConfig)));
}

export function ClusterNodeReplacement(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNodeNameCurrent: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszNodeNameNew: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNodeReplacement(util.toPointer(hCluster), util.pwstrToFfi(lpszNodeNameCurrent), util.pwstrToFfi(lpszNodeNameNew));
}

export function ClusterCreateAffinityRule(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  ruleName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ruleType: CLUS_AFFINITY_RULE_TYPE /* Windows.Win32.Networking.Clustering.CLUS_AFFINITY_RULE_TYPE */,
): number /* u32 */ {
  return libCLUSAPI.ClusterCreateAffinityRule(util.toPointer(hCluster), util.pwstrToFfi(ruleName), ruleType);
}

export function ClusterRemoveAffinityRule(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  ruleName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.ClusterRemoveAffinityRule(util.toPointer(hCluster), util.pwstrToFfi(ruleName));
}

export function ClusterAddGroupToAffinityRule(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  ruleName: string | null /* Windows.Win32.Foundation.PWSTR */,
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterAddGroupToAffinityRule(util.toPointer(hCluster), util.pwstrToFfi(ruleName), util.toPointer(hGroup));
}

export function ClusterRemoveGroupFromAffinityRule(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  ruleName: string | null /* Windows.Win32.Foundation.PWSTR */,
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterRemoveGroupFromAffinityRule(util.toPointer(hCluster), util.pwstrToFfi(ruleName), util.toPointer(hGroup));
}

export function ClusterAffinityRuleControl(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  affinityRuleName: string | null /* Windows.Win32.Foundation.PWSTR */,
  hHostNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwControlCode: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInBufferSize: number /* u32 */,
  lpOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbOutBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterAffinityRuleControl(util.toPointer(hCluster), util.pwstrToFfi(affinityRuleName), util.toPointer(hHostNode), dwControlCode, util.toPointer(lpInBuffer), cbInBufferSize, util.toPointer(lpOutBuffer), cbOutBufferSize, util.toPointer(lpBytesReturned));
}

export function OpenClusterNode(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNodeName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenClusterNode(util.toPointer(hCluster), util.pwstrToFfi(lpszNodeName)));
}

export function OpenClusterNodeEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNodeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwDesiredAccess: number /* u32 */,
  lpdwGrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenClusterNodeEx(util.toPointer(hCluster), util.pwstrToFfi(lpszNodeName), dwDesiredAccess, util.toPointer(lpdwGrantedAccess)));
}

export function OpenClusterNodeById(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  nodeId: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenClusterNodeById(util.toPointer(hCluster), nodeId));
}

export function CloseClusterNode(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCLUSAPI.CloseClusterNode(util.toPointer(hNode)));
}

export function GetClusterNodeState(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
): CLUSTER_NODE_STATE /* Windows.Win32.Networking.Clustering.CLUSTER_NODE_STATE */ {
  return libCLUSAPI.GetClusterNodeState(util.toPointer(hNode));
}

export function GetClusterNodeId(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNodeId: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.GetClusterNodeId(util.toPointer(hNode), util.pwstrToFfi(lpszNodeId), util.toPointer(lpcchName));
}

export function GetClusterFromNode(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.GetClusterFromNode(util.toPointer(hNode)));
}

export function PauseClusterNode(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.PauseClusterNode(util.toPointer(hNode));
}

export function ResumeClusterNode(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ResumeClusterNode(util.toPointer(hNode));
}

export function EvictClusterNode(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.EvictClusterNode(util.toPointer(hNode));
}

export function ClusterNetInterfaceOpenEnum(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNodeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszNetworkName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.ClusterNetInterfaceOpenEnum(util.toPointer(hCluster), util.pwstrToFfi(lpszNodeName), util.pwstrToFfi(lpszNetworkName)));
}

export function ClusterNetInterfaceEnum(
  hNetInterfaceEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNetInterfaceEnum(util.toPointer(hNetInterfaceEnum), dwIndex, util.pwstrToFfi(lpszName), util.toPointer(lpcchName));
}

export function ClusterNetInterfaceCloseEnum(
  hNetInterfaceEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNetInterfaceCloseEnum(util.toPointer(hNetInterfaceEnum));
}

export function ClusterNodeOpenEnum(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwType: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.ClusterNodeOpenEnum(util.toPointer(hNode), dwType));
}

export function ClusterNodeOpenEnumEx(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwType: number /* u32 */,
  pOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.ClusterNodeOpenEnumEx(util.toPointer(hNode), dwType, util.toPointer(pOptions)));
}

export function ClusterNodeGetEnumCountEx(
  hNodeEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNodeGetEnumCountEx(util.toPointer(hNodeEnum));
}

export function ClusterNodeEnumEx(
  hNodeEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
  pItem: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbItem: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNodeEnumEx(util.toPointer(hNodeEnum), dwIndex, util.toPointer(pItem), util.toPointer(cbItem));
}

export function ClusterNodeCloseEnumEx(
  hNodeEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNodeCloseEnumEx(util.toPointer(hNodeEnum));
}

export function ClusterNodeGetEnumCount(
  hNodeEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNodeGetEnumCount(util.toPointer(hNodeEnum));
}

export function ClusterNodeCloseEnum(
  hNodeEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNodeCloseEnum(util.toPointer(hNodeEnum));
}

export function ClusterNodeEnum(
  hNodeEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
  lpdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNodeEnum(util.toPointer(hNodeEnum), dwIndex, util.toPointer(lpdwType), util.pwstrToFfi(lpszName), util.toPointer(lpcchName));
}

export function EvictClusterNodeEx(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwTimeOut: number /* u32 */,
  phrCleanupStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.EvictClusterNodeEx(util.toPointer(hNode), dwTimeOut, util.toPointer(phrCleanupStatus));
}

export function GetClusterResourceTypeKey(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszTypeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  samDesired: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libCLUSAPI.GetClusterResourceTypeKey(util.toPointer(hCluster), util.pwstrToFfi(lpszTypeName), samDesired));
}

export function CreateClusterGroup(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszGroupName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.CreateClusterGroup(util.toPointer(hCluster), util.pwstrToFfi(lpszGroupName)));
}

export function OpenClusterGroup(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszGroupName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenClusterGroup(util.toPointer(hCluster), util.pwstrToFfi(lpszGroupName)));
}

export function OpenClusterGroupEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszGroupName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwDesiredAccess: number /* u32 */,
  lpdwGrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenClusterGroupEx(util.toPointer(hCluster), util.pwstrToFfi(lpszGroupName), dwDesiredAccess, util.toPointer(lpdwGrantedAccess)));
}

export function PauseClusterNodeEx(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  bDrainNode: boolean /* Windows.Win32.Foundation.BOOL */,
  dwPauseFlags: number /* u32 */,
  hNodeDrainTarget: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.PauseClusterNodeEx(util.toPointer(hNode), util.boolToFfi(bDrainNode), dwPauseFlags, util.toPointer(hNodeDrainTarget));
}

export function ResumeClusterNodeEx(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  eResumeFailbackType: CLUSTER_NODE_RESUME_FAILBACK_TYPE /* Windows.Win32.Networking.Clustering.CLUSTER_NODE_RESUME_FAILBACK_TYPE */,
  dwResumeFlagsReserved: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.ResumeClusterNodeEx(util.toPointer(hNode), eResumeFailbackType, dwResumeFlagsReserved);
}

export function CreateClusterGroupEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszGroupName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pGroupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.CreateClusterGroupEx(util.toPointer(hCluster), util.pwstrToFfi(lpszGroupName), util.toPointer(pGroupInfo)));
}

export function ClusterGroupOpenEnumEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszProperties: string | null /* Windows.Win32.Foundation.PWSTR */,
  cbProperties: number /* u32 */,
  lpszRoProperties: string | null /* Windows.Win32.Foundation.PWSTR */,
  cbRoProperties: number /* u32 */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.ClusterGroupOpenEnumEx(util.toPointer(hCluster), util.pwstrToFfi(lpszProperties), cbProperties, util.pwstrToFfi(lpszRoProperties), cbRoProperties, dwFlags));
}

export function ClusterGroupGetEnumCountEx(
  hGroupEnumEx: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterGroupGetEnumCountEx(util.toPointer(hGroupEnumEx));
}

export function ClusterGroupEnumEx(
  hGroupEnumEx: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
  pItem: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbItem: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterGroupEnumEx(util.toPointer(hGroupEnumEx), dwIndex, util.toPointer(pItem), util.toPointer(cbItem));
}

export function ClusterGroupCloseEnumEx(
  hGroupEnumEx: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterGroupCloseEnumEx(util.toPointer(hGroupEnumEx));
}

export function ClusterResourceOpenEnumEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszProperties: string | null /* Windows.Win32.Foundation.PWSTR */,
  cbProperties: number /* u32 */,
  lpszRoProperties: string | null /* Windows.Win32.Foundation.PWSTR */,
  cbRoProperties: number /* u32 */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.ClusterResourceOpenEnumEx(util.toPointer(hCluster), util.pwstrToFfi(lpszProperties), cbProperties, util.pwstrToFfi(lpszRoProperties), cbRoProperties, dwFlags));
}

export function ClusterResourceGetEnumCountEx(
  hResourceEnumEx: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterResourceGetEnumCountEx(util.toPointer(hResourceEnumEx));
}

export function ClusterResourceEnumEx(
  hResourceEnumEx: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
  pItem: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbItem: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterResourceEnumEx(util.toPointer(hResourceEnumEx), dwIndex, util.toPointer(pItem), util.toPointer(cbItem));
}

export function ClusterResourceCloseEnumEx(
  hResourceEnumEx: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterResourceCloseEnumEx(util.toPointer(hResourceEnumEx));
}

export function OnlineClusterGroupEx(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  hDestinationNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOnlineFlags: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInBufferSize: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.OnlineClusterGroupEx(util.toPointer(hGroup), util.toPointer(hDestinationNode), dwOnlineFlags, util.toPointer(lpInBuffer), cbInBufferSize);
}

export function OfflineClusterGroupEx(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOfflineFlags: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInBufferSize: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.OfflineClusterGroupEx(util.toPointer(hGroup), dwOfflineFlags, util.toPointer(lpInBuffer), cbInBufferSize);
}

export function OnlineClusterResourceEx(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOnlineFlags: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInBufferSize: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.OnlineClusterResourceEx(util.toPointer(hResource), dwOnlineFlags, util.toPointer(lpInBuffer), cbInBufferSize);
}

export function OfflineClusterResourceEx(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOfflineFlags: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInBufferSize: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.OfflineClusterResourceEx(util.toPointer(hResource), dwOfflineFlags, util.toPointer(lpInBuffer), cbInBufferSize);
}

export function MoveClusterGroupEx(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  hDestinationNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMoveFlags: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInBufferSize: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.MoveClusterGroupEx(util.toPointer(hGroup), util.toPointer(hDestinationNode), dwMoveFlags, util.toPointer(lpInBuffer), cbInBufferSize);
}

export function CancelClusterGroupOperation(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCancelFlags_RESERVED: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.CancelClusterGroupOperation(util.toPointer(hGroup), dwCancelFlags_RESERVED);
}

export function RestartClusterResource(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.RestartClusterResource(util.toPointer(hResource), dwFlags);
}

export function CloseClusterGroup(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCLUSAPI.CloseClusterGroup(util.toPointer(hGroup)));
}

export function GetClusterFromGroup(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.GetClusterFromGroup(util.toPointer(hGroup)));
}

export function GetClusterGroupState(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNodeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchNodeName: Deno.PointerValue | Uint8Array | null /* ptr */,
): CLUSTER_GROUP_STATE /* Windows.Win32.Networking.Clustering.CLUSTER_GROUP_STATE */ {
  return libCLUSAPI.GetClusterGroupState(util.toPointer(hGroup), util.pwstrToFfi(lpszNodeName), util.toPointer(lpcchNodeName));
}

export function SetClusterGroupName(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszGroupName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.SetClusterGroupName(util.toPointer(hGroup), util.pwstrToFfi(lpszGroupName));
}

export function SetClusterGroupNodeList(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  NodeCount: number /* u32 */,
  NodeList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.SetClusterGroupNodeList(util.toPointer(hGroup), NodeCount, util.toPointer(NodeList));
}

export function OnlineClusterGroup(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  hDestinationNode: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.OnlineClusterGroup(util.toPointer(hGroup), util.toPointer(hDestinationNode));
}

export function MoveClusterGroup(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  hDestinationNode: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.MoveClusterGroup(util.toPointer(hGroup), util.toPointer(hDestinationNode));
}

export function OfflineClusterGroup(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.OfflineClusterGroup(util.toPointer(hGroup));
}

export function DeleteClusterGroup(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.DeleteClusterGroup(util.toPointer(hGroup));
}

export function DestroyClusterGroup(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.DestroyClusterGroup(util.toPointer(hGroup));
}

export function ClusterGroupOpenEnum(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwType: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.ClusterGroupOpenEnum(util.toPointer(hGroup), dwType));
}

export function ClusterGroupGetEnumCount(
  hGroupEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterGroupGetEnumCount(util.toPointer(hGroupEnum));
}

export function ClusterGroupEnum(
  hGroupEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
  lpdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResourceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterGroupEnum(util.toPointer(hGroupEnum), dwIndex, util.toPointer(lpdwType), util.pwstrToFfi(lpszResourceName), util.toPointer(lpcchName));
}

export function ClusterGroupCloseEnum(
  hGroupEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterGroupCloseEnum(util.toPointer(hGroupEnum));
}

export function CreateClusterResource(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResourceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszResourceType: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.CreateClusterResource(util.toPointer(hGroup), util.pwstrToFfi(lpszResourceName), util.pwstrToFfi(lpszResourceType), dwFlags));
}

export function OpenClusterResource(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResourceName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenClusterResource(util.toPointer(hCluster), util.pwstrToFfi(lpszResourceName)));
}

export function OpenClusterResourceEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResourceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwDesiredAccess: number /* u32 */,
  lpdwGrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenClusterResourceEx(util.toPointer(hCluster), util.pwstrToFfi(lpszResourceName), dwDesiredAccess, util.toPointer(lpdwGrantedAccess)));
}

export function CloseClusterResource(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCLUSAPI.CloseClusterResource(util.toPointer(hResource)));
}

export function GetClusterFromResource(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.GetClusterFromResource(util.toPointer(hResource)));
}

export function DeleteClusterResource(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.DeleteClusterResource(util.toPointer(hResource));
}

export function GetClusterResourceState(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNodeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchNodeName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszGroupName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchGroupName: Deno.PointerValue | Uint8Array | null /* ptr */,
): CLUSTER_RESOURCE_STATE /* Windows.Win32.Networking.Clustering.CLUSTER_RESOURCE_STATE */ {
  return libCLUSAPI.GetClusterResourceState(util.toPointer(hResource), util.pwstrToFfi(lpszNodeName), util.toPointer(lpcchNodeName), util.pwstrToFfi(lpszGroupName), util.toPointer(lpcchGroupName));
}

export function SetClusterResourceName(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResourceName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.SetClusterResourceName(util.toPointer(hResource), util.pwstrToFfi(lpszResourceName));
}

export function FailClusterResource(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.FailClusterResource(util.toPointer(hResource));
}

export function OnlineClusterResource(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.OnlineClusterResource(util.toPointer(hResource));
}

export function OfflineClusterResource(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.OfflineClusterResource(util.toPointer(hResource));
}

export function ChangeClusterResourceGroup(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ChangeClusterResourceGroup(util.toPointer(hResource), util.toPointer(hGroup));
}

export function ChangeClusterResourceGroupEx(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libCLUSAPI.ChangeClusterResourceGroupEx(util.toPointer(hResource), util.toPointer(hGroup), Flags);
}

export function AddClusterResourceNode(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.AddClusterResourceNode(util.toPointer(hResource), util.toPointer(hNode));
}

export function RemoveClusterResourceNode(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.RemoveClusterResourceNode(util.toPointer(hResource), util.toPointer(hNode));
}

export function AddClusterResourceDependency(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  hDependsOn: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.AddClusterResourceDependency(util.toPointer(hResource), util.toPointer(hDependsOn));
}

export function RemoveClusterResourceDependency(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  hDependsOn: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.RemoveClusterResourceDependency(util.toPointer(hResource), util.toPointer(hDependsOn));
}

export function SetClusterResourceDependencyExpression(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDependencyExpression: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.SetClusterResourceDependencyExpression(util.toPointer(hResource), util.pwstrToFfi(lpszDependencyExpression));
}

export function GetClusterResourceDependencyExpression(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDependencyExpression: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchDependencyExpression: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.GetClusterResourceDependencyExpression(util.toPointer(hResource), util.pwstrToFfi(lpszDependencyExpression), util.toPointer(lpcchDependencyExpression));
}

export function AddResourceToClusterSharedVolumes(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.AddResourceToClusterSharedVolumes(util.toPointer(hResource));
}

export function RemoveResourceFromClusterSharedVolumes(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.RemoveResourceFromClusterSharedVolumes(util.toPointer(hResource));
}

export function IsFileOnClusterSharedVolume(
  lpszPathName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pbFileIsOnSharedVolume: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.IsFileOnClusterSharedVolume(util.pwstrToFfi(lpszPathName), util.toPointer(pbFileIsOnSharedVolume));
}

export function ClusterSharedVolumeSetSnapshotState(
  guidSnapshotSet: Uint8Array | Deno.PointerValue | null /* System.Guid */,
  lpszVolumeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  state: CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE /* Windows.Win32.Networking.Clustering.CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE */,
): number /* u32 */ {
  return libCLUSAPI.ClusterSharedVolumeSetSnapshotState(util.toPointer(guidSnapshotSet), util.pwstrToFfi(lpszVolumeName), state);
}

export function CanResourceBeDependent(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  hResourceDependent: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCLUSAPI.CanResourceBeDependent(util.toPointer(hResource), util.toPointer(hResourceDependent)));
}

export function ClusterResourceControl(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  hHostNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwControlCode: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInBufferSize: number /* u32 */,
  lpOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbOutBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterResourceControl(util.toPointer(hResource), util.toPointer(hHostNode), dwControlCode, util.toPointer(lpInBuffer), cbInBufferSize, util.toPointer(lpOutBuffer), cbOutBufferSize, util.toPointer(lpBytesReturned));
}

export function ClusterResourceControlAsUser(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  hHostNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwControlCode: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInBufferSize: number /* u32 */,
  lpOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbOutBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterResourceControlAsUser(util.toPointer(hResource), util.toPointer(hHostNode), dwControlCode, util.toPointer(lpInBuffer), cbInBufferSize, util.toPointer(lpOutBuffer), cbOutBufferSize, util.toPointer(lpBytesReturned));
}

export function ClusterResourceTypeControl(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResourceTypeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  hHostNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwControlCode: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nInBufferSize: number /* u32 */,
  lpOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nOutBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterResourceTypeControl(util.toPointer(hCluster), util.pwstrToFfi(lpszResourceTypeName), util.toPointer(hHostNode), dwControlCode, util.toPointer(lpInBuffer), nInBufferSize, util.toPointer(lpOutBuffer), nOutBufferSize, util.toPointer(lpBytesReturned));
}

export function ClusterResourceTypeControlAsUser(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResourceTypeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  hHostNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwControlCode: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nInBufferSize: number /* u32 */,
  lpOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nOutBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterResourceTypeControlAsUser(util.toPointer(hCluster), util.pwstrToFfi(lpszResourceTypeName), util.toPointer(hHostNode), dwControlCode, util.toPointer(lpInBuffer), nInBufferSize, util.toPointer(lpOutBuffer), nOutBufferSize, util.toPointer(lpBytesReturned));
}

export function ClusterGroupControl(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  hHostNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwControlCode: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nInBufferSize: number /* u32 */,
  lpOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nOutBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterGroupControl(util.toPointer(hGroup), util.toPointer(hHostNode), dwControlCode, util.toPointer(lpInBuffer), nInBufferSize, util.toPointer(lpOutBuffer), nOutBufferSize, util.toPointer(lpBytesReturned));
}

export function ClusterNodeControl(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  hHostNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwControlCode: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nInBufferSize: number /* u32 */,
  lpOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nOutBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNodeControl(util.toPointer(hNode), util.toPointer(hHostNode), dwControlCode, util.toPointer(lpInBuffer), nInBufferSize, util.toPointer(lpOutBuffer), nOutBufferSize, util.toPointer(lpBytesReturned));
}

export function GetClusterResourceNetworkName(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  nSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCLUSAPI.GetClusterResourceNetworkName(util.toPointer(hResource), util.pwstrToFfi(lpBuffer), util.toPointer(nSize)));
}

export function ClusterResourceOpenEnum(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwType: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.ClusterResourceOpenEnum(util.toPointer(hResource), dwType));
}

export function ClusterResourceGetEnumCount(
  hResEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterResourceGetEnumCount(util.toPointer(hResEnum));
}

export function ClusterResourceEnum(
  hResEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
  lpdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterResourceEnum(util.toPointer(hResEnum), dwIndex, util.toPointer(lpdwType), util.pwstrToFfi(lpszName), util.toPointer(lpcchName));
}

export function ClusterResourceCloseEnum(
  hResEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterResourceCloseEnum(util.toPointer(hResEnum));
}

export function CreateClusterResourceType(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResourceTypeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszDisplayName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszResourceTypeDll: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwLooksAlivePollInterval: number /* u32 */,
  dwIsAlivePollInterval: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.CreateClusterResourceType(util.toPointer(hCluster), util.pwstrToFfi(lpszResourceTypeName), util.pwstrToFfi(lpszDisplayName), util.pwstrToFfi(lpszResourceTypeDll), dwLooksAlivePollInterval, dwIsAlivePollInterval);
}

export function DeleteClusterResourceType(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResourceTypeName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.DeleteClusterResourceType(util.toPointer(hCluster), util.pwstrToFfi(lpszResourceTypeName));
}

export function ClusterResourceTypeOpenEnum(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResourceTypeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwType: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.ClusterResourceTypeOpenEnum(util.toPointer(hCluster), util.pwstrToFfi(lpszResourceTypeName), dwType));
}

export function ClusterResourceTypeGetEnumCount(
  hResTypeEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterResourceTypeGetEnumCount(util.toPointer(hResTypeEnum));
}

export function ClusterResourceTypeEnum(
  hResTypeEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
  lpdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterResourceTypeEnum(util.toPointer(hResTypeEnum), dwIndex, util.toPointer(lpdwType), util.pwstrToFfi(lpszName), util.toPointer(lpcchName));
}

export function ClusterResourceTypeCloseEnum(
  hResTypeEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterResourceTypeCloseEnum(util.toPointer(hResTypeEnum));
}

export function OpenClusterNetwork(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNetworkName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenClusterNetwork(util.toPointer(hCluster), util.pwstrToFfi(lpszNetworkName)));
}

export function OpenClusterNetworkEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNetworkName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwDesiredAccess: number /* u32 */,
  lpdwGrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenClusterNetworkEx(util.toPointer(hCluster), util.pwstrToFfi(lpszNetworkName), dwDesiredAccess, util.toPointer(lpdwGrantedAccess)));
}

export function CloseClusterNetwork(
  hNetwork: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCLUSAPI.CloseClusterNetwork(util.toPointer(hNetwork)));
}

export function GetClusterFromNetwork(
  hNetwork: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.GetClusterFromNetwork(util.toPointer(hNetwork)));
}

export function ClusterNetworkOpenEnum(
  hNetwork: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwType: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.ClusterNetworkOpenEnum(util.toPointer(hNetwork), dwType));
}

export function ClusterNetworkGetEnumCount(
  hNetworkEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNetworkGetEnumCount(util.toPointer(hNetworkEnum));
}

export function ClusterNetworkEnum(
  hNetworkEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
  lpdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNetworkEnum(util.toPointer(hNetworkEnum), dwIndex, util.toPointer(lpdwType), util.pwstrToFfi(lpszName), util.toPointer(lpcchName));
}

export function ClusterNetworkCloseEnum(
  hNetworkEnum: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNetworkCloseEnum(util.toPointer(hNetworkEnum));
}

export function GetClusterNetworkState(
  hNetwork: Deno.PointerValue | Uint8Array | null /* ptr */,
): CLUSTER_NETWORK_STATE /* Windows.Win32.Networking.Clustering.CLUSTER_NETWORK_STATE */ {
  return libCLUSAPI.GetClusterNetworkState(util.toPointer(hNetwork));
}

export function SetClusterNetworkName(
  hNetwork: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.SetClusterNetworkName(util.toPointer(hNetwork), util.pwstrToFfi(lpszName));
}

export function GetClusterNetworkId(
  hNetwork: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNetworkId: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.GetClusterNetworkId(util.toPointer(hNetwork), util.pwstrToFfi(lpszNetworkId), util.toPointer(lpcchName));
}

export function ClusterNetworkControl(
  hNetwork: Deno.PointerValue | Uint8Array | null /* ptr */,
  hHostNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwControlCode: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nInBufferSize: number /* u32 */,
  lpOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nOutBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNetworkControl(util.toPointer(hNetwork), util.toPointer(hHostNode), dwControlCode, util.toPointer(lpInBuffer), nInBufferSize, util.toPointer(lpOutBuffer), nOutBufferSize, util.toPointer(lpBytesReturned));
}

export function OpenClusterNetInterface(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszInterfaceName: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenClusterNetInterface(util.toPointer(hCluster), util.pwstrToFfi(lpszInterfaceName)));
}

export function OpenClusterNetInterfaceEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszInterfaceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwDesiredAccess: number /* u32 */,
  lpdwGrantedAccess: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.OpenClusterNetInterfaceEx(util.toPointer(hCluster), util.pwstrToFfi(lpszInterfaceName), dwDesiredAccess, util.toPointer(lpdwGrantedAccess)));
}

export function GetClusterNetInterface(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNodeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszNetworkName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszInterfaceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchInterfaceName: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.GetClusterNetInterface(util.toPointer(hCluster), util.pwstrToFfi(lpszNodeName), util.pwstrToFfi(lpszNetworkName), util.pwstrToFfi(lpszInterfaceName), util.toPointer(lpcchInterfaceName));
}

export function CloseClusterNetInterface(
  hNetInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCLUSAPI.CloseClusterNetInterface(util.toPointer(hNetInterface)));
}

export function GetClusterFromNetInterface(
  hNetInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.GetClusterFromNetInterface(util.toPointer(hNetInterface)));
}

export function GetClusterNetInterfaceState(
  hNetInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
): CLUSTER_NETINTERFACE_STATE /* Windows.Win32.Networking.Clustering.CLUSTER_NETINTERFACE_STATE */ {
  return libCLUSAPI.GetClusterNetInterfaceState(util.toPointer(hNetInterface));
}

export function ClusterNetInterfaceControl(
  hNetInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  hHostNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwControlCode: number /* u32 */,
  lpInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nInBufferSize: number /* u32 */,
  lpOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nOutBufferSize: number /* u32 */,
  lpBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterNetInterfaceControl(util.toPointer(hNetInterface), util.toPointer(hHostNode), dwControlCode, util.toPointer(lpInBuffer), nInBufferSize, util.toPointer(lpOutBuffer), nOutBufferSize, util.toPointer(lpBytesReturned));
}

export function GetClusterKey(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  samDesired: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libCLUSAPI.GetClusterKey(util.toPointer(hCluster), samDesired));
}

export function GetClusterGroupKey(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  samDesired: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libCLUSAPI.GetClusterGroupKey(util.toPointer(hGroup), samDesired));
}

export function GetClusterResourceKey(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  samDesired: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libCLUSAPI.GetClusterResourceKey(util.toPointer(hResource), samDesired));
}

export function GetClusterNodeKey(
  hNode: Deno.PointerValue | Uint8Array | null /* ptr */,
  samDesired: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libCLUSAPI.GetClusterNodeKey(util.toPointer(hNode), samDesired));
}

export function GetClusterNetworkKey(
  hNetwork: Deno.PointerValue | Uint8Array | null /* ptr */,
  samDesired: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libCLUSAPI.GetClusterNetworkKey(util.toPointer(hNetwork), samDesired));
}

export function GetClusterNetInterfaceKey(
  hNetInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  samDesired: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */ {
  return util.pointerFromFfi(libCLUSAPI.GetClusterNetInterfaceKey(util.toPointer(hNetInterface), samDesired));
}

export function ClusterRegCreateKey(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  lpszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwOptions: number /* u32 */,
  samDesired: number /* u32 */,
  lpSecurityAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  phkResult: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwDisposition: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegCreateKey(util.toPointer(hKey), util.pwstrToFfi(lpszSubKey), dwOptions, samDesired, util.toPointer(lpSecurityAttributes), util.toPointer(phkResult), util.toPointer(lpdwDisposition));
}

export function ClusterRegOpenKey(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  lpszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
  samDesired: number /* u32 */,
  phkResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegOpenKey(util.toPointer(hKey), util.pwstrToFfi(lpszSubKey), samDesired, util.toPointer(phkResult));
}

export function ClusterRegDeleteKey(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  lpszSubKey: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegDeleteKey(util.toPointer(hKey), util.pwstrToFfi(lpszSubKey));
}

export function ClusterRegCloseKey(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegCloseKey(util.toPointer(hKey));
}

export function ClusterRegEnumKey(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  dwIndex: number /* u32 */,
  lpszName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpftLastWriteTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegEnumKey(util.toPointer(hKey), dwIndex, util.pwstrToFfi(lpszName), util.toPointer(lpcchName), util.toPointer(lpftLastWriteTime));
}

export function ClusterRegSetValue(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  lpszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwType: number /* u32 */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.ClusterRegSetValue(util.toPointer(hKey), util.pwstrToFfi(lpszValueName), dwType, util.toPointer(lpData), cbData);
}

export function ClusterRegDeleteValue(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  lpszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.ClusterRegDeleteValue(util.toPointer(hKey), util.pwstrToFfi(lpszValueName));
}

export function ClusterRegQueryValue(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  lpszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpdwValueType: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegQueryValue(util.toPointer(hKey), util.pwstrToFfi(lpszValueName), util.toPointer(lpdwValueType), util.toPointer(lpData), util.toPointer(lpcbData));
}

export function ClusterRegEnumValue(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  dwIndex: number /* u32 */,
  lpszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchValueName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.ClusterRegEnumValue(util.toPointer(hKey), dwIndex, util.pwstrToFfi(lpszValueName), util.toPointer(lpcchValueName), util.toPointer(lpdwType), util.toPointer(lpData), util.toPointer(lpcbData));
}

export function ClusterRegQueryInfoKey(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  lpcSubKeys: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcchMaxSubKeyLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcValues: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcchMaxValueNameLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbMaxValueLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpftLastWriteTime: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegQueryInfoKey(util.toPointer(hKey), util.toPointer(lpcSubKeys), util.toPointer(lpcchMaxSubKeyLen), util.toPointer(lpcValues), util.toPointer(lpcchMaxValueNameLen), util.toPointer(lpcbMaxValueLen), util.toPointer(lpcbSecurityDescriptor), util.toPointer(lpftLastWriteTime));
}

export function ClusterRegGetKeySecurity(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  RequestedInformation: number /* u32 */,
  pSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegGetKeySecurity(util.toPointer(hKey), RequestedInformation, util.toPointer(pSecurityDescriptor), util.toPointer(lpcbSecurityDescriptor));
}

export function ClusterRegSetKeySecurity(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  SecurityInformation: number /* u32 */,
  pSecurityDescriptor: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegSetKeySecurity(util.toPointer(hKey), SecurityInformation, util.toPointer(pSecurityDescriptor));
}

export function ClusterRegSyncDatabase(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: number /* u32 */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegSyncDatabase(util.toPointer(hCluster), flags);
}

export function ClusterRegCreateBatch(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pHREGBATCH: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegCreateBatch(util.toPointer(hKey), util.toPointer(pHREGBATCH));
}

export function ClusterRegBatchAddCommand(
  hRegBatch: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCommand: CLUSTER_REG_COMMAND /* Windows.Win32.Networking.Clustering.CLUSTER_REG_COMMAND */,
  wzName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwOptions: number /* u32 */,
  lpData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegBatchAddCommand(util.toPointer(hRegBatch), dwCommand, util.pwstrToFfi(wzName), dwOptions, util.toPointer(lpData), cbData);
}

export function ClusterRegCloseBatch(
  hRegBatch: Deno.PointerValue | Uint8Array | null /* ptr */,
  bCommit: boolean /* Windows.Win32.Foundation.BOOL */,
  failedCommandNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegCloseBatch(util.toPointer(hRegBatch), util.boolToFfi(bCommit), util.toPointer(failedCommandNumber));
}

export function ClusterRegCloseBatchEx(
  hRegBatch: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: number /* u32 */,
  failedCommandNumber: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegCloseBatchEx(util.toPointer(hRegBatch), flags, util.toPointer(failedCommandNumber));
}

export function ClusterRegBatchReadCommand(
  hBatchNotification: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBatchCommand: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegBatchReadCommand(util.toPointer(hBatchNotification), util.toPointer(pBatchCommand));
}

export function ClusterRegBatchCloseNotification(
  hBatchNotification: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegBatchCloseNotification(util.toPointer(hBatchNotification));
}

export function ClusterRegCreateBatchNotifyPort(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  phBatchNotifyPort: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegCreateBatchNotifyPort(util.toPointer(hKey), util.toPointer(phBatchNotifyPort));
}

export function ClusterRegCloseBatchNotifyPort(
  hBatchNotifyPort: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegCloseBatchNotifyPort(util.toPointer(hBatchNotifyPort));
}

export function ClusterRegGetBatchNotification(
  hBatchNotify: Deno.PointerValue | Uint8Array | null /* ptr */,
  phBatchNotification: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegGetBatchNotification(util.toPointer(hBatchNotify), util.toPointer(phBatchNotification));
}

export function ClusterRegCreateReadBatch(
  hKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  phRegReadBatch: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegCreateReadBatch(util.toPointer(hKey), util.toPointer(phRegReadBatch));
}

export function ClusterRegReadBatchAddCommand(
  hRegReadBatch: Deno.PointerValue | Uint8Array | null /* ptr */,
  wzSubkeyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  wzValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegReadBatchAddCommand(util.toPointer(hRegReadBatch), util.pwstrToFfi(wzSubkeyName), util.pwstrToFfi(wzValueName));
}

export function ClusterRegCloseReadBatch(
  hRegReadBatch: Deno.PointerValue | Uint8Array | null /* ptr */,
  phRegReadBatchReply: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegCloseReadBatch(util.toPointer(hRegReadBatch), util.toPointer(phRegReadBatchReply));
}

export function ClusterRegCloseReadBatchEx(
  hRegReadBatch: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: number /* u32 */,
  phRegReadBatchReply: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegCloseReadBatchEx(util.toPointer(hRegReadBatch), flags, util.toPointer(phRegReadBatchReply));
}

export function ClusterRegReadBatchReplyNextCommand(
  hRegReadBatchReply: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBatchCommand: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegReadBatchReplyNextCommand(util.toPointer(hRegReadBatchReply), util.toPointer(pBatchCommand));
}

export function ClusterRegCloseReadBatchReply(
  hRegReadBatchReply: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libCLUSAPI.ClusterRegCloseReadBatchReply(util.toPointer(hRegReadBatchReply));
}

export function ClusterSetAccountAccess(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  szAccountSID: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwAccess: number /* u32 */,
  dwControlType: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.ClusterSetAccountAccess(util.toPointer(hCluster), util.pwstrToFfi(szAccountSID), dwAccess, dwControlType);
}

export function CreateCluster(
  pConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnProgressCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.PCLUSTER_SETUP_PROGRESS_CALLBACK */,
  pvCallbackArg: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.CreateCluster(util.toPointer(pConfig), util.toPointer(pfnProgressCallback), util.toPointer(pvCallbackArg)));
}

export function CreateClusterNameAccount(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  pConfig: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnProgressCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.PCLUSTER_SETUP_PROGRESS_CALLBACK */,
  pvCallbackArg: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.CreateClusterNameAccount(util.toPointer(hCluster), util.toPointer(pConfig), util.toPointer(pfnProgressCallback), util.toPointer(pvCallbackArg));
}

export function RemoveClusterNameAccount(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  bDeleteComputerObjects: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libCLUSAPI.RemoveClusterNameAccount(util.toPointer(hCluster), util.boolToFfi(bDeleteComputerObjects));
}

export function DetermineCNOResTypeFromNodelist(
  cNodes: number /* u32 */,
  ppszNodeNames: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCNOResType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.DetermineCNOResTypeFromNodelist(cNodes, util.toPointer(ppszNodeNames), util.toPointer(pCNOResType));
}

export function DetermineCNOResTypeFromCluster(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCNOResType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.DetermineCNOResTypeFromCluster(util.toPointer(hCluster), util.toPointer(pCNOResType));
}

export function DetermineClusterCloudTypeFromNodelist(
  cNodes: number /* u32 */,
  ppszNodeNames: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCloudType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.DetermineClusterCloudTypeFromNodelist(cNodes, util.toPointer(ppszNodeNames), util.toPointer(pCloudType));
}

export function DetermineClusterCloudTypeFromCluster(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCloudType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.DetermineClusterCloudTypeFromCluster(util.toPointer(hCluster), util.toPointer(pCloudType));
}

export function GetNodeCloudTypeDW(
  ppszNodeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  NodeCloudType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libCLUSAPI.GetNodeCloudTypeDW(util.pwstrToFfi(ppszNodeName), util.toPointer(NodeCloudType));
}

export function RegisterClusterResourceTypeNotifyV2(
  hChange: Deno.PointerValue | Uint8Array | null /* ptr */,
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: Deno.PointerValue /* i64 */,
  resTypeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwNotifyKey: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libCLUSAPI.RegisterClusterResourceTypeNotifyV2(util.toPointer(hChange), util.toPointer(hCluster), Flags, util.pwstrToFfi(resTypeName), dwNotifyKey);
}

export function AddClusterNode(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNodeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pfnProgressCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.PCLUSTER_SETUP_PROGRESS_CALLBACK */,
  pvCallbackArg: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.AddClusterNode(util.toPointer(hCluster), util.pwstrToFfi(lpszNodeName), util.toPointer(pfnProgressCallback), util.toPointer(pvCallbackArg)));
}

export function AddClusterStorageNode(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNodeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pfnProgressCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.PCLUSTER_SETUP_PROGRESS_CALLBACK */,
  pvCallbackArg: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszClusterStorageNodeDescription: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszClusterStorageNodeLocation: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libCLUSAPI.AddClusterStorageNode(util.toPointer(hCluster), util.pwstrToFfi(lpszNodeName), util.toPointer(pfnProgressCallback), util.toPointer(pvCallbackArg), util.pwstrToFfi(lpszClusterStorageNodeDescription), util.pwstrToFfi(lpszClusterStorageNodeLocation));
}

export function AddClusterNodeEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszNodeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  pfnProgressCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.PCLUSTER_SETUP_PROGRESS_CALLBACK */,
  pvCallbackArg: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libCLUSAPI.AddClusterNodeEx(util.toPointer(hCluster), util.pwstrToFfi(lpszNodeName), dwFlags, util.toPointer(pfnProgressCallback), util.toPointer(pvCallbackArg)));
}

export function RemoveClusterStorageNode(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszClusterStorageEnclosureName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwTimeout: number /* u32 */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return libCLUSAPI.RemoveClusterStorageNode(util.toPointer(hCluster), util.pwstrToFfi(lpszClusterStorageEnclosureName), dwTimeout, dwFlags);
}

export function DestroyCluster(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnProgressCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.PCLUSTER_SETUP_PROGRESS_CALLBACK */,
  pvCallbackArg: Deno.PointerValue | Uint8Array | null /* ptr */,
  fdeleteVirtualComputerObjects: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libCLUSAPI.DestroyCluster(util.toPointer(hCluster), util.toPointer(pfnProgressCallback), util.toPointer(pvCallbackArg), util.boolToFfi(fdeleteVirtualComputerObjects));
}

export function InitializeClusterHealthFault(
  clusterHealthFault: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.InitializeClusterHealthFault(util.toPointer(clusterHealthFault));
}

export function InitializeClusterHealthFaultArray(
  clusterHealthFaultArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.InitializeClusterHealthFaultArray(util.toPointer(clusterHealthFaultArray));
}

export function FreeClusterHealthFault(
  clusterHealthFault: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.FreeClusterHealthFault(util.toPointer(clusterHealthFault));
}

export function FreeClusterHealthFaultArray(
  clusterHealthFaultArray: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.FreeClusterHealthFaultArray(util.toPointer(clusterHealthFaultArray));
}

export function ClusGetClusterHealthFaults(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  objects: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: number /* u32 */,
): number /* u32 */ {
  return libRESUTILS.ClusGetClusterHealthFaults(util.toPointer(hCluster), util.toPointer(objects), flags);
}

export function ClusRemoveClusterHealthFault(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: string | null /* Windows.Win32.Foundation.PWSTR */,
  flags: number /* u32 */,
): number /* u32 */ {
  return libRESUTILS.ClusRemoveClusterHealthFault(util.toPointer(hCluster), util.pwstrToFfi(id), flags);
}

export function ClusAddClusterHealthFault(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  failure: Deno.PointerValue | Uint8Array | null /* ptr */,
  param2: number /* u32 */,
): number /* u32 */ {
  return libRESUTILS.ClusAddClusterHealthFault(util.toPointer(hCluster), util.toPointer(failure), param2);
}

export function ResUtilStartResourceService(
  pszServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  phServiceHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilStartResourceService(util.pwstrToFfi(pszServiceName), util.toPointer(phServiceHandle));
}

export function ResUtilVerifyResourceService(
  pszServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libRESUTILS.ResUtilVerifyResourceService(util.pwstrToFfi(pszServiceName));
}

export function ResUtilStopResourceService(
  pszServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libRESUTILS.ResUtilStopResourceService(util.pwstrToFfi(pszServiceName));
}

export function ResUtilVerifyService(
  hServiceHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
): number /* u32 */ {
  return libRESUTILS.ResUtilVerifyService(util.toPointer(hServiceHandle));
}

export function ResUtilStopService(
  hServiceHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
): number /* u32 */ {
  return libRESUTILS.ResUtilStopService(util.toPointer(hServiceHandle));
}

export function ResUtilCreateDirectoryTree(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libRESUTILS.ResUtilCreateDirectoryTree(util.pwstrToFfi(pszPath));
}

export function ResUtilIsPathValid(
  pszPath: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRESUTILS.ResUtilIsPathValid(util.pwstrToFfi(pszPath)));
}

export function ResUtilEnumProperties(
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszOutProperties: string | null /* Windows.Win32.Foundation.PWSTR */,
  cbOutPropertiesSize: number /* u32 */,
  pcbBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilEnumProperties(util.toPointer(pPropertyTable), util.pwstrToFfi(pszOutProperties), cbOutPropertiesSize, util.toPointer(pcbBytesReturned), util.toPointer(pcbRequired));
}

export function ResUtilEnumPrivateProperties(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszOutProperties: string | null /* Windows.Win32.Foundation.PWSTR */,
  cbOutPropertiesSize: number /* u32 */,
  pcbBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilEnumPrivateProperties(util.toPointer(hkeyClusterKey), util.pwstrToFfi(pszOutProperties), cbOutPropertiesSize, util.toPointer(pcbBytesReturned), util.toPointer(pcbRequired));
}

export function ResUtilGetProperties(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  pOutPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbOutPropertyListSize: number /* u32 */,
  pcbBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetProperties(util.toPointer(hkeyClusterKey), util.toPointer(pPropertyTable), util.toPointer(pOutPropertyList), cbOutPropertyListSize, util.toPointer(pcbBytesReturned), util.toPointer(pcbRequired));
}

export function ResUtilGetAllProperties(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  pOutPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbOutPropertyListSize: number /* u32 */,
  pcbBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetAllProperties(util.toPointer(hkeyClusterKey), util.toPointer(pPropertyTable), util.toPointer(pOutPropertyList), cbOutPropertyListSize, util.toPointer(pcbBytesReturned), util.toPointer(pcbRequired));
}

export function ResUtilGetPrivateProperties(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pOutPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbOutPropertyListSize: number /* u32 */,
  pcbBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetPrivateProperties(util.toPointer(hkeyClusterKey), util.toPointer(pOutPropertyList), cbOutPropertyListSize, util.toPointer(pcbBytesReturned), util.toPointer(pcbRequired));
}

export function ResUtilGetPropertySize(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pPropertyTableItem: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbOutPropertyListSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pnPropertyCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetPropertySize(util.toPointer(hkeyClusterKey), util.toPointer(pPropertyTableItem), util.toPointer(pcbOutPropertyListSize), util.toPointer(pnPropertyCount));
}

export function ResUtilGetProperty(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pPropertyTableItem: Deno.PointerValue | Uint8Array | null /* ptr */,
  pOutPropertyItem: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbOutPropertyItemSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetProperty(util.toPointer(hkeyClusterKey), util.toPointer(pPropertyTableItem), util.toPointer(pOutPropertyItem), util.toPointer(pcbOutPropertyItemSize));
}

export function ResUtilVerifyPropertyTable(
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  bAllowUnknownProperties: boolean /* Windows.Win32.Foundation.BOOL */,
  pInPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInPropertyListSize: number /* u32 */,
  pOutParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilVerifyPropertyTable(util.toPointer(pPropertyTable), util.toPointer(Reserved), util.boolToFfi(bAllowUnknownProperties), util.toPointer(pInPropertyList), cbInPropertyListSize, util.toPointer(pOutParams));
}

export function ResUtilSetPropertyTable(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  bAllowUnknownProperties: boolean /* Windows.Win32.Foundation.BOOL */,
  pInPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInPropertyListSize: number /* u32 */,
  pOutParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetPropertyTable(util.toPointer(hkeyClusterKey), util.toPointer(pPropertyTable), util.toPointer(Reserved), util.boolToFfi(bAllowUnknownProperties), util.toPointer(pInPropertyList), cbInPropertyListSize, util.toPointer(pOutParams));
}

export function ResUtilSetPropertyTableEx(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  bAllowUnknownProperties: boolean /* Windows.Win32.Foundation.BOOL */,
  pInPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInPropertyListSize: number /* u32 */,
  bForceWrite: boolean /* Windows.Win32.Foundation.BOOL */,
  pOutParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetPropertyTableEx(util.toPointer(hkeyClusterKey), util.toPointer(pPropertyTable), util.toPointer(Reserved), util.boolToFfi(bAllowUnknownProperties), util.toPointer(pInPropertyList), cbInPropertyListSize, util.boolToFfi(bForceWrite), util.toPointer(pOutParams));
}

export function ResUtilSetPropertyParameterBlock(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInPropertyListSize: number /* u32 */,
  pOutParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetPropertyParameterBlock(util.toPointer(hkeyClusterKey), util.toPointer(pPropertyTable), util.toPointer(Reserved), util.toPointer(pInParams), util.toPointer(pInPropertyList), cbInPropertyListSize, util.toPointer(pOutParams));
}

export function ResUtilSetPropertyParameterBlockEx(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInPropertyListSize: number /* u32 */,
  bForceWrite: boolean /* Windows.Win32.Foundation.BOOL */,
  pOutParams: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetPropertyParameterBlockEx(util.toPointer(hkeyClusterKey), util.toPointer(pPropertyTable), util.toPointer(Reserved), util.toPointer(pInParams), util.toPointer(pInPropertyList), cbInPropertyListSize, util.boolToFfi(bForceWrite), util.toPointer(pOutParams));
}

export function ResUtilSetUnknownProperties(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInPropertyListSize: number /* u32 */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetUnknownProperties(util.toPointer(hkeyClusterKey), util.toPointer(pPropertyTable), util.toPointer(pInPropertyList), cbInPropertyListSize);
}

export function ResUtilGetPropertiesToParameterBlock(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  pOutParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  bCheckForRequiredProperties: boolean /* Windows.Win32.Foundation.BOOL */,
  pszNameOfPropInError: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetPropertiesToParameterBlock(util.toPointer(hkeyClusterKey), util.toPointer(pPropertyTable), util.toPointer(pOutParams), util.boolToFfi(bCheckForRequiredProperties), util.toPointer(pszNameOfPropInError));
}

export function ResUtilPropertyListFromParameterBlock(
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  pOutPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbOutPropertyListSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilPropertyListFromParameterBlock(util.toPointer(pPropertyTable), util.toPointer(pOutPropertyList), util.toPointer(pcbOutPropertyListSize), util.toPointer(pInParams), util.toPointer(pcbBytesReturned), util.toPointer(pcbRequired));
}

export function ResUtilDupParameterBlock(
  pOutParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilDupParameterBlock(util.toPointer(pOutParams), util.toPointer(pInParams), util.toPointer(pPropertyTable));
}

export function ResUtilFreeParameterBlock(
  pOutParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  pInParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRESUTILS.ResUtilFreeParameterBlock(util.toPointer(pOutParams), util.toPointer(pInParams), util.toPointer(pPropertyTable));
}

export function ResUtilAddUnknownProperties(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  pOutPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbOutPropertyListSize: number /* u32 */,
  pcbBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilAddUnknownProperties(util.toPointer(hkeyClusterKey), util.toPointer(pPropertyTable), util.toPointer(pOutPropertyList), pcbOutPropertyListSize, util.toPointer(pcbBytesReturned), util.toPointer(pcbRequired));
}

export function ResUtilSetPrivatePropertyList(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pInPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInPropertyListSize: number /* u32 */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetPrivatePropertyList(util.toPointer(hkeyClusterKey), util.toPointer(pInPropertyList), cbInPropertyListSize);
}

export function ResUtilVerifyPrivatePropertyList(
  pInPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInPropertyListSize: number /* u32 */,
): number /* u32 */ {
  return libRESUTILS.ResUtilVerifyPrivatePropertyList(util.toPointer(pInPropertyList), cbInPropertyListSize);
}

export function ResUtilDupString(
  pszInString: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libRESUTILS.ResUtilDupString(util.pwstrToFfi(pszInString)));
}

export function ResUtilGetBinaryValue(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppbOutValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbOutValueSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetBinaryValue(util.toPointer(hkeyClusterKey), util.pwstrToFfi(pszValueName), util.toPointer(ppbOutValue), util.toPointer(pcbOutValueSize));
}

export function ResUtilGetSzValue(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libRESUTILS.ResUtilGetSzValue(util.toPointer(hkeyClusterKey), util.pwstrToFfi(pszValueName)));
}

export function ResUtilGetDwordValue(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pdwOutValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDefaultValue: number /* u32 */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetDwordValue(util.toPointer(hkeyClusterKey), util.pwstrToFfi(pszValueName), util.toPointer(pdwOutValue), dwDefaultValue);
}

export function ResUtilGetQwordValue(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pqwOutValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  qwDefaultValue: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetQwordValue(util.toPointer(hkeyClusterKey), util.pwstrToFfi(pszValueName), util.toPointer(pqwOutValue), qwDefaultValue);
}

export function ResUtilSetBinaryValue(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pbNewValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbNewValueSize: number /* u32 */,
  ppbOutValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbOutValueSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetBinaryValue(util.toPointer(hkeyClusterKey), util.pwstrToFfi(pszValueName), util.toPointer(pbNewValue), cbNewValueSize, util.toPointer(ppbOutValue), util.toPointer(pcbOutValueSize));
}

export function ResUtilSetSzValue(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszNewValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppszOutString: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetSzValue(util.toPointer(hkeyClusterKey), util.pwstrToFfi(pszValueName), util.pwstrToFfi(pszNewValue), util.toPointer(ppszOutString));
}

export function ResUtilSetExpandSzValue(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszNewValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppszOutString: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetExpandSzValue(util.toPointer(hkeyClusterKey), util.pwstrToFfi(pszValueName), util.pwstrToFfi(pszNewValue), util.toPointer(ppszOutString));
}

export function ResUtilSetMultiSzValue(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszNewValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  cbNewValueSize: number /* u32 */,
  ppszOutValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbOutValueSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetMultiSzValue(util.toPointer(hkeyClusterKey), util.pwstrToFfi(pszValueName), util.pwstrToFfi(pszNewValue), cbNewValueSize, util.toPointer(ppszOutValue), util.toPointer(pcbOutValueSize));
}

export function ResUtilSetDwordValue(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwNewValue: number /* u32 */,
  pdwOutValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetDwordValue(util.toPointer(hkeyClusterKey), util.pwstrToFfi(pszValueName), dwNewValue, util.toPointer(pdwOutValue));
}

export function ResUtilSetQwordValue(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  pszValueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  qwNewValue: Deno.PointerValue /* u64 */,
  pqwOutValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetQwordValue(util.toPointer(hkeyClusterKey), util.pwstrToFfi(pszValueName), qwNewValue, util.toPointer(pqwOutValue));
}

export function ResUtilSetValueEx(
  hkeyClusterKey: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  valueName: string | null /* Windows.Win32.Foundation.PWSTR */,
  valueType: number /* u32 */,
  valueData: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  flags: number /* u32 */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetValueEx(util.toPointer(hkeyClusterKey), util.pwstrToFfi(valueName), valueType, util.toPointer(valueData), valueSize, flags);
}

export function ResUtilGetBinaryProperty(
  ppbOutValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbOutValueSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pValueStruct: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbOldValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbOldValueSize: number /* u32 */,
  ppPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbPropertyListSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetBinaryProperty(util.toPointer(ppbOutValue), util.toPointer(pcbOutValueSize), util.toPointer(pValueStruct), util.toPointer(pbOldValue), cbOldValueSize, util.toPointer(ppPropertyList), util.toPointer(pcbPropertyListSize));
}

export function ResUtilGetSzProperty(
  ppszOutValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  pValueStruct: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszOldValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  ppPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbPropertyListSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetSzProperty(util.toPointer(ppszOutValue), util.toPointer(pValueStruct), util.pwstrToFfi(pszOldValue), util.toPointer(ppPropertyList), util.toPointer(pcbPropertyListSize));
}

export function ResUtilGetMultiSzProperty(
  ppszOutValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbOutValueSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pValueStruct: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszOldValue: string | null /* Windows.Win32.Foundation.PWSTR */,
  cbOldValueSize: number /* u32 */,
  ppPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbPropertyListSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetMultiSzProperty(util.toPointer(ppszOutValue), util.toPointer(pcbOutValueSize), util.toPointer(pValueStruct), util.pwstrToFfi(pszOldValue), cbOldValueSize, util.toPointer(ppPropertyList), util.toPointer(pcbPropertyListSize));
}

export function ResUtilGetDwordProperty(
  pdwOutValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  pValueStruct: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOldValue: number /* u32 */,
  dwMinimum: number /* u32 */,
  dwMaximum: number /* u32 */,
  ppPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbPropertyListSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetDwordProperty(util.toPointer(pdwOutValue), util.toPointer(pValueStruct), dwOldValue, dwMinimum, dwMaximum, util.toPointer(ppPropertyList), util.toPointer(pcbPropertyListSize));
}

export function ResUtilGetLongProperty(
  plOutValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  pValueStruct: Deno.PointerValue | Uint8Array | null /* ptr */,
  lOldValue: number /* i32 */,
  lMinimum: number /* i32 */,
  lMaximum: number /* i32 */,
  ppPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbPropertyListSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetLongProperty(util.toPointer(plOutValue), util.toPointer(pValueStruct), lOldValue, lMinimum, lMaximum, util.toPointer(ppPropertyList), util.toPointer(pcbPropertyListSize));
}

export function ResUtilGetFileTimeProperty(
  pftOutValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  pValueStruct: Deno.PointerValue | Uint8Array | null /* ptr */,
  ftOldValue: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
  ftMinimum: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
  ftMaximum: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
  ppPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbPropertyListSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetFileTimeProperty(util.toPointer(pftOutValue), util.toPointer(pValueStruct), util.toPointer(ftOldValue), util.toPointer(ftMinimum), util.toPointer(ftMaximum), util.toPointer(ppPropertyList), util.toPointer(pcbPropertyListSize));
}

export function ResUtilGetEnvironmentWithNetName(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRESUTILS.ResUtilGetEnvironmentWithNetName(util.toPointer(hResource)));
}

export function ResUtilFreeEnvironment(
  lpEnvironment: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilFreeEnvironment(util.toPointer(lpEnvironment));
}

export function ResUtilExpandEnvironmentStrings(
  pszSrc: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libRESUTILS.ResUtilExpandEnvironmentStrings(util.pwstrToFfi(pszSrc)));
}

export function ResUtilSetResourceServiceEnvironment(
  pszServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnLogEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.PLOG_EVENT_ROUTINE */,
  hResourceHandle: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetResourceServiceEnvironment(util.pwstrToFfi(pszServiceName), util.toPointer(hResource), util.toPointer(pfnLogEvent), hResourceHandle);
}

export function ResUtilRemoveResourceServiceEnvironment(
  pszServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pfnLogEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.PLOG_EVENT_ROUTINE */,
  hResourceHandle: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return libRESUTILS.ResUtilRemoveResourceServiceEnvironment(util.pwstrToFfi(pszServiceName), util.toPointer(pfnLogEvent), hResourceHandle);
}

export function ResUtilSetResourceServiceStartParameters(
  pszServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  schSCMHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  phService: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnLogEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.PLOG_EVENT_ROUTINE */,
  hResourceHandle: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetResourceServiceStartParameters(util.pwstrToFfi(pszServiceName), util.toPointer(schSCMHandle), util.toPointer(phService), util.toPointer(pfnLogEvent), hResourceHandle);
}

export function ResUtilFindSzProperty(
  pPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbPropertyListSize: number /* u32 */,
  pszPropertyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszPropertyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilFindSzProperty(util.toPointer(pPropertyList), cbPropertyListSize, util.pwstrToFfi(pszPropertyName), util.toPointer(pszPropertyValue));
}

export function ResUtilFindExpandSzProperty(
  pPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbPropertyListSize: number /* u32 */,
  pszPropertyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszPropertyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilFindExpandSzProperty(util.toPointer(pPropertyList), cbPropertyListSize, util.pwstrToFfi(pszPropertyName), util.toPointer(pszPropertyValue));
}

export function ResUtilFindExpandedSzProperty(
  pPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbPropertyListSize: number /* u32 */,
  pszPropertyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszPropertyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilFindExpandedSzProperty(util.toPointer(pPropertyList), cbPropertyListSize, util.pwstrToFfi(pszPropertyName), util.toPointer(pszPropertyValue));
}

export function ResUtilFindDwordProperty(
  pPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbPropertyListSize: number /* u32 */,
  pszPropertyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pdwPropertyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilFindDwordProperty(util.toPointer(pPropertyList), cbPropertyListSize, util.pwstrToFfi(pszPropertyName), util.toPointer(pdwPropertyValue));
}

export function ResUtilFindBinaryProperty(
  pPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbPropertyListSize: number /* u32 */,
  pszPropertyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pbPropertyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbPropertyValueSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilFindBinaryProperty(util.toPointer(pPropertyList), cbPropertyListSize, util.pwstrToFfi(pszPropertyName), util.toPointer(pbPropertyValue), util.toPointer(pcbPropertyValueSize));
}

export function ResUtilFindMultiSzProperty(
  pPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbPropertyListSize: number /* u32 */,
  pszPropertyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pszPropertyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbPropertyValueSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilFindMultiSzProperty(util.toPointer(pPropertyList), cbPropertyListSize, util.pwstrToFfi(pszPropertyName), util.toPointer(pszPropertyValue), util.toPointer(pcbPropertyValueSize));
}

export function ResUtilFindLongProperty(
  pPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbPropertyListSize: number /* u32 */,
  pszPropertyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  plPropertyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilFindLongProperty(util.toPointer(pPropertyList), cbPropertyListSize, util.pwstrToFfi(pszPropertyName), util.toPointer(plPropertyValue));
}

export function ResUtilFindULargeIntegerProperty(
  pPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbPropertyListSize: number /* u32 */,
  pszPropertyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  plPropertyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilFindULargeIntegerProperty(util.toPointer(pPropertyList), cbPropertyListSize, util.pwstrToFfi(pszPropertyName), util.toPointer(plPropertyValue));
}

export function ResUtilFindFileTimeProperty(
  pPropertyList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbPropertyListSize: number /* u32 */,
  pszPropertyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pftPropertyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilFindFileTimeProperty(util.toPointer(pPropertyList), cbPropertyListSize, util.pwstrToFfi(pszPropertyName), util.toPointer(pftPropertyValue));
}

export function ClusWorkerCreate(
  lpWorker: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpStartAddress: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.PWORKER_START_ROUTINE */,
  lpParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ClusWorkerCreate(util.toPointer(lpWorker), util.toPointer(lpStartAddress), util.toPointer(lpParameter));
}

export function ClusWorkerCheckTerminate(
  lpWorker: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRESUTILS.ClusWorkerCheckTerminate(util.toPointer(lpWorker)));
}

export function ClusWorkerTerminate(
  lpWorker: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libRESUTILS.ClusWorkerTerminate(util.toPointer(lpWorker));
}

export function ClusWorkerTerminateEx(
  ClusWorker: Deno.PointerValue | Uint8Array | null /* ptr */,
  TimeoutInMilliseconds: number /* u32 */,
  WaitOnly: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libRESUTILS.ClusWorkerTerminateEx(util.toPointer(ClusWorker), TimeoutInMilliseconds, util.boolToFfi(WaitOnly));
}

export function ClusWorkersTerminate(
  ClusWorkers: Deno.PointerValue | Uint8Array | null /* ptr */,
  ClusWorkersCount: Deno.PointerValue /* usize */,
  TimeoutInMilliseconds: number /* u32 */,
  WaitOnly: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libRESUTILS.ClusWorkersTerminate(util.toPointer(ClusWorkers), ClusWorkersCount, TimeoutInMilliseconds, util.boolToFfi(WaitOnly));
}

export function ResUtilResourcesEqual(
  hSelf: Deno.PointerValue | Uint8Array | null /* ptr */,
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRESUTILS.ResUtilResourcesEqual(util.toPointer(hSelf), util.toPointer(hResource)));
}

export function ResUtilResourceTypesEqual(
  lpszResourceTypeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRESUTILS.ResUtilResourceTypesEqual(util.pwstrToFfi(lpszResourceTypeName), util.toPointer(hResource)));
}

export function ResUtilIsResourceClassEqual(
  prci: Deno.PointerValue | Uint8Array | null /* ptr */,
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRESUTILS.ResUtilIsResourceClassEqual(util.toPointer(prci), util.toPointer(hResource)));
}

export function ResUtilEnumResources(
  hSelf: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResTypeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pResCallBack: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.LPRESOURCE_CALLBACK */,
  pParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilEnumResources(util.toPointer(hSelf), util.pwstrToFfi(lpszResTypeName), util.toPointer(pResCallBack), util.toPointer(pParameter));
}

export function ResUtilEnumResourcesEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  hSelf: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResTypeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pResCallBack: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.LPRESOURCE_CALLBACK_EX */,
  pParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilEnumResourcesEx(util.toPointer(hCluster), util.toPointer(hSelf), util.pwstrToFfi(lpszResTypeName), util.toPointer(pResCallBack), util.toPointer(pParameter));
}

export function ResUtilGetResourceDependency(
  hSelf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpszResourceType: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRESUTILS.ResUtilGetResourceDependency(util.toPointer(hSelf), util.pwstrToFfi(lpszResourceType)));
}

export function ResUtilGetResourceDependencyByName(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  hSelf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpszResourceType: string | null /* Windows.Win32.Foundation.PWSTR */,
  bRecurse: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRESUTILS.ResUtilGetResourceDependencyByName(util.toPointer(hCluster), util.toPointer(hSelf), util.pwstrToFfi(lpszResourceType), util.boolToFfi(bRecurse)));
}

export function ResUtilGetResourceDependencyByClass(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  hSelf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  prci: Deno.PointerValue | Uint8Array | null /* ptr */,
  bRecurse: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRESUTILS.ResUtilGetResourceDependencyByClass(util.toPointer(hCluster), util.toPointer(hSelf), util.toPointer(prci), util.boolToFfi(bRecurse)));
}

export function ResUtilGetResourceNameDependency(
  lpszResourceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszResourceType: string | null /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRESUTILS.ResUtilGetResourceNameDependency(util.pwstrToFfi(lpszResourceName), util.pwstrToFfi(lpszResourceType)));
}

export function ResUtilGetResourceDependentIPAddressProps(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszAddress: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszSubnetMask: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchSubnetMask: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszNetwork: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchNetwork: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetResourceDependentIPAddressProps(util.toPointer(hResource), util.pwstrToFfi(pszAddress), util.toPointer(pcchAddress), util.pwstrToFfi(pszSubnetMask), util.toPointer(pcchSubnetMask), util.pwstrToFfi(pszNetwork), util.toPointer(pcchNetwork));
}

export function ResUtilFindDependentDiskResourceDriveLetter(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszDriveLetter: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchDriveLetter: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilFindDependentDiskResourceDriveLetter(util.toPointer(hCluster), util.toPointer(hResource), util.pwstrToFfi(pszDriveLetter), util.toPointer(pcchDriveLetter));
}

export function ResUtilTerminateServiceProcessFromResDll(
  dwServicePid: number /* u32 */,
  bOffline: boolean /* Windows.Win32.Foundation.BOOL */,
  pdwResourceState: Deno.PointerValue | Uint8Array | null /* ptr */,
  pfnLogEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.PLOG_EVENT_ROUTINE */,
  hResourceHandle: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return libRESUTILS.ResUtilTerminateServiceProcessFromResDll(dwServicePid, util.boolToFfi(bOffline), util.toPointer(pdwResourceState), util.toPointer(pfnLogEvent), hResourceHandle);
}

export function ResUtilGetPropertyFormats(
  pPropertyTable: Deno.PointerValue | Uint8Array | null /* ptr */,
  pOutPropertyFormatList: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbPropertyFormatListSize: number /* u32 */,
  pcbBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbRequired: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetPropertyFormats(util.toPointer(pPropertyTable), util.toPointer(pOutPropertyFormatList), cbPropertyFormatListSize, util.toPointer(pcbBytesReturned), util.toPointer(pcbRequired));
}

export function ResUtilGetCoreClusterResources(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  phClusterNameResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  phClusterIPAddressResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  phClusterQuorumResource: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetCoreClusterResources(util.toPointer(hCluster), util.toPointer(phClusterNameResource), util.toPointer(phClusterIPAddressResource), util.toPointer(phClusterQuorumResource));
}

export function ResUtilGetResourceName(
  hResource: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszResourceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pcchResourceNameInOut: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetResourceName(util.toPointer(hResource), util.pwstrToFfi(pszResourceName), util.toPointer(pcchResourceNameInOut));
}

export function ResUtilGetClusterRoleState(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  eClusterRole: CLUSTER_ROLE /* Windows.Win32.Networking.Clustering.CLUSTER_ROLE */,
): CLUSTER_ROLE_STATE /* Windows.Win32.Networking.Clustering.CLUSTER_ROLE_STATE */ {
  return libRESUTILS.ResUtilGetClusterRoleState(util.toPointer(hCluster), eClusterRole);
}

export function ClusterIsPathOnSharedVolume(
  lpszPathName: string | null /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRESUTILS.ClusterIsPathOnSharedVolume(util.pwstrToFfi(lpszPathName)));
}

export function ClusterGetVolumePathName(
  lpszFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszVolumePathName: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchBufferLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRESUTILS.ClusterGetVolumePathName(util.pwstrToFfi(lpszFileName), util.pwstrToFfi(lpszVolumePathName), cchBufferLength));
}

export function ClusterGetVolumeNameForVolumeMountPoint(
  lpszVolumeMountPoint: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszVolumeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  cchBufferLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRESUTILS.ClusterGetVolumeNameForVolumeMountPoint(util.pwstrToFfi(lpszVolumeMountPoint), util.pwstrToFfi(lpszVolumeName), cchBufferLength));
}

export function ClusterPrepareSharedVolumeForBackup(
  lpszFileName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszVolumePathName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchVolumePathName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszVolumeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpcchVolumeName: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ClusterPrepareSharedVolumeForBackup(util.pwstrToFfi(lpszFileName), util.pwstrToFfi(lpszVolumePathName), util.toPointer(lpcchVolumePathName), util.pwstrToFfi(lpszVolumeName), util.toPointer(lpcchVolumeName));
}

export function ClusterClearBackupStateForSharedVolume(
  lpszVolumePathName: string | null /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libRESUTILS.ClusterClearBackupStateForSharedVolume(util.pwstrToFfi(lpszVolumePathName));
}

export function ResUtilSetResourceServiceStartParametersEx(
  pszServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  schSCMHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Security.SC_HANDLE */,
  phService: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDesiredAccess: number /* u32 */,
  pfnLogEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.PLOG_EVENT_ROUTINE */,
  hResourceHandle: Deno.PointerValue /* isize */,
): number /* u32 */ {
  return libRESUTILS.ResUtilSetResourceServiceStartParametersEx(util.pwstrToFfi(pszServiceName), util.toPointer(schSCMHandle), util.toPointer(phService), dwDesiredAccess, util.toPointer(pfnLogEvent), hResourceHandle);
}

export function ResUtilEnumResourcesEx2(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  hSelf: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszResTypeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pResCallBack: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.LPRESOURCE_CALLBACK_EX */,
  pParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDesiredAccess: number /* u32 */,
): number /* u32 */ {
  return libRESUTILS.ResUtilEnumResourcesEx2(util.toPointer(hCluster), util.toPointer(hSelf), util.pwstrToFfi(lpszResTypeName), util.toPointer(pResCallBack), util.toPointer(pParameter), dwDesiredAccess);
}

export function ResUtilGetResourceDependencyEx(
  hSelf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpszResourceType: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRESUTILS.ResUtilGetResourceDependencyEx(util.toPointer(hSelf), util.pwstrToFfi(lpszResourceType), dwDesiredAccess));
}

export function ResUtilGetResourceDependencyByNameEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  hSelf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpszResourceType: string | null /* Windows.Win32.Foundation.PWSTR */,
  bRecurse: boolean /* Windows.Win32.Foundation.BOOL */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRESUTILS.ResUtilGetResourceDependencyByNameEx(util.toPointer(hCluster), util.toPointer(hSelf), util.pwstrToFfi(lpszResourceType), util.boolToFfi(bRecurse), dwDesiredAccess));
}

export function ResUtilGetResourceDependencyByClassEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  hSelf: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  prci: Deno.PointerValue | Uint8Array | null /* ptr */,
  bRecurse: boolean /* Windows.Win32.Foundation.BOOL */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRESUTILS.ResUtilGetResourceDependencyByClassEx(util.toPointer(hCluster), util.toPointer(hSelf), util.toPointer(prci), util.boolToFfi(bRecurse), dwDesiredAccess));
}

export function ResUtilGetResourceNameDependencyEx(
  lpszResourceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszResourceType: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwDesiredAccess: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRESUTILS.ResUtilGetResourceNameDependencyEx(util.pwstrToFfi(lpszResourceName), util.pwstrToFfi(lpszResourceType), dwDesiredAccess));
}

export function ResUtilGetCoreClusterResourcesEx(
  hClusterIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  phClusterNameResourceOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  phClusterQuorumResourceOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwDesiredAccess: number /* u32 */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetCoreClusterResourcesEx(util.toPointer(hClusterIn), util.toPointer(phClusterNameResourceOut), util.toPointer(phClusterQuorumResourceOut), dwDesiredAccess);
}

export function OpenClusterCryptProvider(
  lpszResource: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszProvider: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwType: number /* u32 */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRESUTILS.OpenClusterCryptProvider(util.pwstrToFfi(lpszResource), util.toPointer(lpszProvider), dwType, dwFlags));
}

export function OpenClusterCryptProviderEx(
  lpszResource: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszKeyname: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszProvider: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwType: number /* u32 */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRESUTILS.OpenClusterCryptProviderEx(util.pwstrToFfi(lpszResource), util.pwstrToFfi(lpszKeyname), util.toPointer(lpszProvider), dwType, dwFlags));
}

export function CloseClusterCryptProvider(
  hClusCryptProvider: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.CloseClusterCryptProvider(util.toPointer(hClusCryptProvider));
}

export function ClusterEncrypt(
  hClusCryptProvider: Deno.PointerValue | Uint8Array | null /* ptr */,
  pData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbData: number /* u32 */,
  ppData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ClusterEncrypt(util.toPointer(hClusCryptProvider), util.toPointer(pData), cbData, util.toPointer(ppData), util.toPointer(pcbData));
}

export function ClusterDecrypt(
  hClusCryptProvider: Deno.PointerValue | Uint8Array | null /* ptr */,
  pCryptInput: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbCryptInput: number /* u32 */,
  ppCryptOutput: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbCryptOutput: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ClusterDecrypt(util.toPointer(hClusCryptProvider), util.toPointer(pCryptInput), cbCryptInput, util.toPointer(ppCryptOutput), util.toPointer(pcbCryptOutput));
}

export function FreeClusterCrypt(
  pCryptInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.FreeClusterCrypt(util.toPointer(pCryptInfo));
}

export function ResUtilVerifyShutdownSafe(
  flags: number /* u32 */,
  reason: number /* u32 */,
  pResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilVerifyShutdownSafe(flags, reason, util.toPointer(pResult));
}

export function ResUtilPaxosComparer(
  left: Deno.PointerValue | Uint8Array | null /* ptr */,
  right: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRESUTILS.ResUtilPaxosComparer(util.toPointer(left), util.toPointer(right)));
}

export function ResUtilLeftPaxosIsLessThanRight(
  left: Deno.PointerValue | Uint8Array | null /* ptr */,
  right: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libRESUTILS.ResUtilLeftPaxosIsLessThanRight(util.toPointer(left), util.toPointer(right)));
}

export function ResUtilsDeleteKeyTree(
  key: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Registry.HKEY */,
  keyName: string | null /* Windows.Win32.Foundation.PWSTR */,
  treatNoKeyAsError: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libRESUTILS.ResUtilsDeleteKeyTree(util.toPointer(key), util.pwstrToFfi(keyName), util.boolToFfi(treatNoKeyAsError));
}

export function ResUtilGroupsEqual(
  hSelf: Deno.PointerValue | Uint8Array | null /* ptr */,
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  pEqual: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGroupsEqual(util.toPointer(hSelf), util.toPointer(hGroup), util.toPointer(pEqual));
}

export function ResUtilEnumGroups(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  hSelf: Deno.PointerValue | Uint8Array | null /* ptr */,
  pResCallBack: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.LPGROUP_CALLBACK_EX */,
  pParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilEnumGroups(util.toPointer(hCluster), util.toPointer(hSelf), util.toPointer(pResCallBack), util.toPointer(pParameter));
}

export function ResUtilEnumGroupsEx(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  hSelf: Deno.PointerValue | Uint8Array | null /* ptr */,
  groupType: CLUSGROUP_TYPE /* Windows.Win32.Networking.Clustering.CLUSGROUP_TYPE */,
  pResCallBack: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.LPGROUP_CALLBACK_EX */,
  pParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilEnumGroupsEx(util.toPointer(hCluster), util.toPointer(hSelf), groupType, util.toPointer(pResCallBack), util.toPointer(pParameter));
}

export function ResUtilDupGroup(
  group: Deno.PointerValue | Uint8Array | null /* ptr */,
  copy: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilDupGroup(util.toPointer(group), util.toPointer(copy));
}

export function ResUtilGetClusterGroupType(
  hGroup: Deno.PointerValue | Uint8Array | null /* ptr */,
  groupType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetClusterGroupType(util.toPointer(hGroup), util.toPointer(groupType));
}

export function ResUtilGetCoreGroup(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libRESUTILS.ResUtilGetCoreGroup(util.toPointer(hCluster)));
}

export function ResUtilResourceDepEnum(
  hSelf: Deno.PointerValue | Uint8Array | null /* ptr */,
  enumType: number /* u32 */,
  pResCallBack: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.LPRESOURCE_CALLBACK_EX */,
  pParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilResourceDepEnum(util.toPointer(hSelf), enumType, util.toPointer(pResCallBack), util.toPointer(pParameter));
}

export function ResUtilDupResource(
  group: Deno.PointerValue | Uint8Array | null /* ptr */,
  copy: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilDupResource(util.toPointer(group), util.toPointer(copy));
}

export function ResUtilGetClusterId(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  guid: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilGetClusterId(util.toPointer(hCluster), util.toPointer(guid));
}

export function ResUtilNodeEnum(
  hCluster: Deno.PointerValue | Uint8Array | null /* ptr */,
  pNodeCallBack: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.Clustering.LPNODE_CALLBACK */,
  pParameter: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libRESUTILS.ResUtilNodeEnum(util.toPointer(hCluster), util.toPointer(pNodeCallBack), util.toPointer(pParameter));
}

export function RegisterAppInstance(
  ProcessHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  AppInstanceId: Deno.PointerValue | Uint8Array | null /* ptr */,
  ChildrenInheritAppInstance: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libNTLANMAN.RegisterAppInstance(util.toPointer(ProcessHandle), util.toPointer(AppInstanceId), util.boolToFfi(ChildrenInheritAppInstance));
}

export function RegisterAppInstanceVersion(
  AppInstanceId: Deno.PointerValue | Uint8Array | null /* ptr */,
  InstanceVersionHigh: Deno.PointerValue /* u64 */,
  InstanceVersionLow: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libNTLANMAN.RegisterAppInstanceVersion(util.toPointer(AppInstanceId), InstanceVersionHigh, InstanceVersionLow);
}

export function QueryAppInstanceVersion(
  AppInstanceId: Deno.PointerValue | Uint8Array | null /* ptr */,
  InstanceVersionHigh: Deno.PointerValue | Uint8Array | null /* ptr */,
  InstanceVersionLow: Deno.PointerValue | Uint8Array | null /* ptr */,
  VersionStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libNTLANMAN.QueryAppInstanceVersion(util.toPointer(AppInstanceId), util.toPointer(InstanceVersionHigh), util.toPointer(InstanceVersionLow), util.toPointer(VersionStatus));
}

export function ResetAllAppInstanceVersions(): number /* u32 */ {
  return libNTLANMAN.ResetAllAppInstanceVersions();
}

export function SetAppInstanceCsvFlags(
  ProcessHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Mask: number /* u32 */,
  Flags: number /* u32 */,
): number /* u32 */ {
  return libNTLANMAN.SetAppInstanceCsvFlags(util.toPointer(ProcessHandle), Mask, Flags);
}

