/// Auto-generated by Deno Win32: Windows.Win32.Networking.WebSocket.Apis

import * as util from "../../util.ts";

// Enums
export type WEB_SOCKET_CLOSE_STATUS = number;
export type WEB_SOCKET_PROPERTY_TYPE = number;
export type WEB_SOCKET_ACTION_QUEUE = number;
export type WEB_SOCKET_BUFFER_TYPE = number;
export type WEB_SOCKET_ACTION = number;

// Constants
export const WEB_SOCKET_MAX_CLOSE_REASON_LENGTH = 123;
export const WEB_SOCKET_SUCCESS_CLOSE_STATUS = 1000;
export const WEB_SOCKET_ENDPOINT_UNAVAILABLE_CLOSE_STATUS = 1001;
export const WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS = 1002;
export const WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS = 1003;
export const WEB_SOCKET_EMPTY_CLOSE_STATUS = 1005;
export const WEB_SOCKET_ABORTED_CLOSE_STATUS = 1006;
export const WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS = 1007;
export const WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS = 1008;
export const WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS = 1009;
export const WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = 1010;
export const WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS = 1011;
export const WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = 1015;
export const WEB_SOCKET_RECEIVE_BUFFER_SIZE_PROPERTY_TYPE = 0;
export const WEB_SOCKET_SEND_BUFFER_SIZE_PROPERTY_TYPE = 1;
export const WEB_SOCKET_DISABLE_MASKING_PROPERTY_TYPE = 2;
export const WEB_SOCKET_ALLOCATED_BUFFER_PROPERTY_TYPE = 3;
export const WEB_SOCKET_DISABLE_UTF8_VERIFICATION_PROPERTY_TYPE = 4;
export const WEB_SOCKET_KEEPALIVE_INTERVAL_PROPERTY_TYPE = 5;
export const WEB_SOCKET_SUPPORTED_VERSIONS_PROPERTY_TYPE = 6;
export const WEB_SOCKET_SEND_ACTION_QUEUE = 1;
export const WEB_SOCKET_RECEIVE_ACTION_QUEUE = 2;
export const WEB_SOCKET_ALL_ACTION_QUEUE = 3;
export const WEB_SOCKET_UTF8_MESSAGE_BUFFER_TYPE = `-2147483648`;
export const WEB_SOCKET_UTF8_FRAGMENT_BUFFER_TYPE = `-2147483647`;
export const WEB_SOCKET_BINARY_MESSAGE_BUFFER_TYPE = `-2147483646`;
export const WEB_SOCKET_BINARY_FRAGMENT_BUFFER_TYPE = `-2147483645`;
export const WEB_SOCKET_CLOSE_BUFFER_TYPE = `-2147483644`;
export const WEB_SOCKET_PING_PONG_BUFFER_TYPE = `-2147483643`;
export const WEB_SOCKET_UNSOLICITED_PONG_BUFFER_TYPE = `-2147483642`;
export const WEB_SOCKET_NO_ACTION = 0;
export const WEB_SOCKET_SEND_TO_NETWORK_ACTION = 1;
export const WEB_SOCKET_INDICATE_SEND_COMPLETE_ACTION = 2;
export const WEB_SOCKET_RECEIVE_FROM_NETWORK_ACTION = 3;
export const WEB_SOCKET_INDICATE_RECEIVE_COMPLETE_ACTION = 4;

// Structs

export type WEB_SOCKET_HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Networking.WebSocket.WEB_SOCKET_PROPERTY (size: 24)
 */
export interface WEB_SOCKET_PROPERTY {
  /** Windows.Win32.Networking.WebSocket.WEB_SOCKET_PROPERTY_TYPE */
  Type: WEB_SOCKET_PROPERTY_TYPE;
  /** ptr */
  pvValue: Deno.PointerValue | Uint8Array;
  /** u32 */
  ulValueSize: number;
}

export const sizeofWEB_SOCKET_PROPERTY = 24;

export function allocWEB_SOCKET_PROPERTY(data?: Partial<WEB_SOCKET_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWEB_SOCKET_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pvValue !== undefined) view.setBigUint64(8, data.pvValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvValue))), true);
  // 0x10: u32
  if (data?.ulValueSize !== undefined) view.setUint32(16, Number(data.ulValueSize), true);
  // 0x14: pad4
  return buf;
}

export class WEB_SOCKET_PROPERTYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pvValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get ulValueSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pvValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set ulValueSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Networking.WebSocket.WEB_SOCKET_HTTP_HEADER (size: 32)
 */
export interface WEB_SOCKET_HTTP_HEADER {
  /** Windows.Win32.Foundation.PSTR */
  pcName: string | null | Uint8Array;
  /** u32 */
  ulNameLength: number;
  /** Windows.Win32.Foundation.PSTR */
  pcValue: string | null | Uint8Array;
  /** u32 */
  ulValueLength: number;
}

export const sizeofWEB_SOCKET_HTTP_HEADER = 32;

export function allocWEB_SOCKET_HTTP_HEADER(data?: Partial<WEB_SOCKET_HTTP_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofWEB_SOCKET_HTTP_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pcName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pcName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.ulNameLength !== undefined) view.setUint32(8, Number(data.ulNameLength), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pcValue !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pcValue);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.ulValueLength !== undefined) view.setUint32(24, Number(data.ulValueLength), true);
  // 0x1c: pad4
  return buf;
}

export class WEB_SOCKET_HTTP_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pcName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulNameLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pcValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get ulValueLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: buffer
  set pcName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set ulNameLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pcValue(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set ulValueLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * _Data_e__Struct (size: 16)
 */
export interface _Data_e__Struct {
  /** ptr */
  pbBuffer: Deno.PointerValue | Uint8Array;
  /** u32 */
  ulBufferLength: number;
}

export const sizeof_Data_e__Struct = 16;

export function alloc_Data_e__Struct(data?: Partial<_Data_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Data_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pbBuffer !== undefined) view.setBigUint64(0, data.pbBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbBuffer))), true);
  // 0x08: u32
  if (data?.ulBufferLength !== undefined) view.setUint32(8, Number(data.ulBufferLength), true);
  // 0x0c: pad4
  return buf;
}

export class _Data_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pbBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulBufferLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pbBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulBufferLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _CloseStatus_e__Struct (size: 16)
 */
export interface _CloseStatus_e__Struct {
  /** ptr */
  pbReason: Deno.PointerValue | Uint8Array;
  /** u32 */
  ulReasonLength: number;
  /** u16 */
  usStatus: number;
}

export const sizeof_CloseStatus_e__Struct = 16;

export function alloc_CloseStatus_e__Struct(data?: Partial<_CloseStatus_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_CloseStatus_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pbReason !== undefined) view.setBigUint64(0, data.pbReason === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbReason))), true);
  // 0x08: u32
  if (data?.ulReasonLength !== undefined) view.setUint32(8, Number(data.ulReasonLength), true);
  // 0x0c: u16
  if (data?.usStatus !== undefined) view.setUint16(12, Number(data.usStatus), true);
  // 0x0e: pad2
  return buf;
}

export class _CloseStatus_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pbReason(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulReasonLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u16
  get usStatus(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: pad2

  // 0x00: pointer
  set pbReason(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulReasonLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u16
  set usStatus(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: pad2
}

/**
 * Windows.Win32.Networking.WebSocket.WEB_SOCKET_BUFFER (size: 16)
 */
export interface WEB_SOCKET_BUFFER {
  /** _Data_e__Struct */
  Data: Uint8Array | Deno.PointerValue;
  /** _CloseStatus_e__Struct */
  CloseStatus: Uint8Array | Deno.PointerValue;
}

export const sizeofWEB_SOCKET_BUFFER = 16;

export function allocWEB_SOCKET_BUFFER(data?: Partial<WEB_SOCKET_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofWEB_SOCKET_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Data !== undefined) view.setBigUint64(0, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  // 0x08: pointer
  if (data?.CloseStatus !== undefined) view.setBigUint64(8, data.CloseStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CloseStatus))), true);
  return buf;
}

export class WEB_SOCKET_BUFFERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get CloseStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set CloseStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HRESULT = number;

// Native Libraries

try {
  var libwebsocket_dll = Deno.dlopen("websocket.dll", {
    WebSocketCreateClientHandle: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    WebSocketBeginClientHandshake: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WebSocketEndClientHandshake: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WebSocketCreateServerHandle: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    WebSocketBeginServerHandshake: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WebSocketEndServerHandshake: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WebSocketSend: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    WebSocketReceive: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WebSocketGetAction: {
      parameters: ["pointer", "i32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WebSocketCompleteAction: {
      parameters: ["pointer", "pointer", "u32"],
      result: "void",
    },
    WebSocketAbortHandle: {
      parameters: ["pointer"],
      result: "void",
    },
    WebSocketDeleteHandle: {
      parameters: ["pointer"],
      result: "void",
    },
    WebSocketGetGlobalProperty: {
      parameters: ["i32", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WebSocketCreateClientHandle(
  pProperties: Deno.PointerValue | Uint8Array /* ptr */,
  ulPropertyCount: number /* u32 */,
  phWebSocket: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwebsocket_dll.WebSocketCreateClientHandle(util.toPointer(pProperties), ulPropertyCount, util.toPointer(phWebSocket));
}

export function WebSocketBeginClientHandshake(
  hWebSocket: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.WebSocket.WEB_SOCKET_HANDLE */,
  pszSubprotocols: Deno.PointerValue | Uint8Array /* ptr */,
  ulSubprotocolCount: number /* u32 */,
  pszExtensions: Deno.PointerValue | Uint8Array /* ptr */,
  ulExtensionCount: number /* u32 */,
  pInitialHeaders: Deno.PointerValue | Uint8Array /* ptr */,
  ulInitialHeaderCount: number /* u32 */,
  pAdditionalHeaders: Deno.PointerValue | Uint8Array /* ptr */,
  pulAdditionalHeaderCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwebsocket_dll.WebSocketBeginClientHandshake(util.toPointer(hWebSocket), util.toPointer(pszSubprotocols), ulSubprotocolCount, util.toPointer(pszExtensions), ulExtensionCount, util.toPointer(pInitialHeaders), ulInitialHeaderCount, util.toPointer(pAdditionalHeaders), util.toPointer(pulAdditionalHeaderCount));
}

export function WebSocketEndClientHandshake(
  hWebSocket: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.WebSocket.WEB_SOCKET_HANDLE */,
  pResponseHeaders: Deno.PointerValue | Uint8Array /* ptr */,
  ulReponseHeaderCount: number /* u32 */,
  pulSelectedExtensions: Deno.PointerValue | Uint8Array /* ptr */,
  pulSelectedExtensionCount: Deno.PointerValue | Uint8Array /* ptr */,
  pulSelectedSubprotocol: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwebsocket_dll.WebSocketEndClientHandshake(util.toPointer(hWebSocket), util.toPointer(pResponseHeaders), ulReponseHeaderCount, util.toPointer(pulSelectedExtensions), util.toPointer(pulSelectedExtensionCount), util.toPointer(pulSelectedSubprotocol));
}

export function WebSocketCreateServerHandle(
  pProperties: Deno.PointerValue | Uint8Array /* ptr */,
  ulPropertyCount: number /* u32 */,
  phWebSocket: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwebsocket_dll.WebSocketCreateServerHandle(util.toPointer(pProperties), ulPropertyCount, util.toPointer(phWebSocket));
}

export function WebSocketBeginServerHandshake(
  hWebSocket: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.WebSocket.WEB_SOCKET_HANDLE */,
  pszSubprotocolSelected: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszExtensionSelected: Deno.PointerValue | Uint8Array /* ptr */,
  ulExtensionSelectedCount: number /* u32 */,
  pRequestHeaders: Deno.PointerValue | Uint8Array /* ptr */,
  ulRequestHeaderCount: number /* u32 */,
  pResponseHeaders: Deno.PointerValue | Uint8Array /* ptr */,
  pulResponseHeaderCount: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwebsocket_dll.WebSocketBeginServerHandshake(util.toPointer(hWebSocket), util.pstrToFfi(pszSubprotocolSelected), util.toPointer(pszExtensionSelected), ulExtensionSelectedCount, util.toPointer(pRequestHeaders), ulRequestHeaderCount, util.toPointer(pResponseHeaders), util.toPointer(pulResponseHeaderCount));
}

export function WebSocketEndServerHandshake(
  hWebSocket: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.WebSocket.WEB_SOCKET_HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwebsocket_dll.WebSocketEndServerHandshake(util.toPointer(hWebSocket));
}

export function WebSocketSend(
  hWebSocket: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.WebSocket.WEB_SOCKET_HANDLE */,
  BufferType: WEB_SOCKET_BUFFER_TYPE /* Windows.Win32.Networking.WebSocket.WEB_SOCKET_BUFFER_TYPE */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  Context: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwebsocket_dll.WebSocketSend(util.toPointer(hWebSocket), BufferType, util.toPointer(pBuffer), util.toPointer(Context));
}

export function WebSocketReceive(
  hWebSocket: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.WebSocket.WEB_SOCKET_HANDLE */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pvContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwebsocket_dll.WebSocketReceive(util.toPointer(hWebSocket), util.toPointer(pBuffer), util.toPointer(pvContext));
}

export function WebSocketGetAction(
  hWebSocket: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.WebSocket.WEB_SOCKET_HANDLE */,
  eActionQueue: WEB_SOCKET_ACTION_QUEUE /* Windows.Win32.Networking.WebSocket.WEB_SOCKET_ACTION_QUEUE */,
  pDataBuffers: Deno.PointerValue | Uint8Array /* ptr */,
  pulDataBufferCount: Deno.PointerValue | Uint8Array /* ptr */,
  pAction: Deno.PointerValue | Uint8Array /* ptr */,
  pBufferType: Deno.PointerValue | Uint8Array /* ptr */,
  pvApplicationContext: Deno.PointerValue | Uint8Array /* ptr */,
  pvActionContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwebsocket_dll.WebSocketGetAction(util.toPointer(hWebSocket), eActionQueue, util.toPointer(pDataBuffers), util.toPointer(pulDataBufferCount), util.toPointer(pAction), util.toPointer(pBufferType), util.toPointer(pvApplicationContext), util.toPointer(pvActionContext));
}

export function WebSocketCompleteAction(
  hWebSocket: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.WebSocket.WEB_SOCKET_HANDLE */,
  pvActionContext: Deno.PointerValue | Uint8Array /* ptr */,
  ulBytesTransferred: number /* u32 */,
): void /* void */ {
  return libwebsocket_dll.WebSocketCompleteAction(util.toPointer(hWebSocket), util.toPointer(pvActionContext), ulBytesTransferred);
}

export function WebSocketAbortHandle(
  hWebSocket: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.WebSocket.WEB_SOCKET_HANDLE */,
): void /* void */ {
  return libwebsocket_dll.WebSocketAbortHandle(util.toPointer(hWebSocket));
}

export function WebSocketDeleteHandle(
  hWebSocket: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.WebSocket.WEB_SOCKET_HANDLE */,
): void /* void */ {
  return libwebsocket_dll.WebSocketDeleteHandle(util.toPointer(hWebSocket));
}

export function WebSocketGetGlobalProperty(
  eType: WEB_SOCKET_PROPERTY_TYPE /* Windows.Win32.Networking.WebSocket.WEB_SOCKET_PROPERTY_TYPE */,
  pvValue: Deno.PointerValue | Uint8Array /* ptr */,
  ulSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwebsocket_dll.WebSocketGetGlobalProperty(eType, util.toPointer(pvValue), util.toPointer(ulSize));
}

