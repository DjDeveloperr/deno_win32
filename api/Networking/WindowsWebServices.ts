/// Auto-generated by Deno Win32: Windows.Win32.Networking.WindowsWebServices.Apis

import * as util from "../../util.ts";

// Enums
export type WS_XML_READER_PROPERTY_ID = number;
export type WS_XML_CANONICALIZATION_ALGORITHM = number;
export type WS_XML_CANONICALIZATION_PROPERTY_ID = number;
export type WS_XML_WRITER_PROPERTY_ID = number;
export type WS_XML_BUFFER_PROPERTY_ID = number;
export type WS_XML_TEXT_TYPE = number;
export type WS_XML_NODE_TYPE = number;
export type WS_MOVE_TO = number;
export type WS_VALUE_TYPE = number;
export type WS_XML_READER_INPUT_TYPE = number;
export type WS_XML_READER_ENCODING_TYPE = number;
export type WS_CHARSET = number;
export type WS_XML_WRITER_ENCODING_TYPE = number;
export type WS_XML_WRITER_OUTPUT_TYPE = number;
export type WS_CALLBACK_MODEL = number;
export type WS_ENCODING = number;
export type WS_CHANNEL_STATE = number;
export type WS_RECEIVE_OPTION = number;
export type WS_CHANNEL_BINDING = number;
export type WS_CHANNEL_TYPE = number;
export type WS_TRANSFER_MODE = number;
export type WS_HTTP_PROXY_SETTING_MODE = number;
export type WS_CHANNEL_PROPERTY_ID = number;
export type WS_COOKIE_MODE = number;
export type WS_OPERATION_CONTEXT_PROPERTY_ID = number;
export type WS_ENDPOINT_IDENTITY_TYPE = number;
export type WS_ENDPOINT_ADDRESS_EXTENSION_TYPE = number;
export type WS_ERROR_PROPERTY_ID = number;
export type WS_EXCEPTION_CODE = number;
export type WS_FAULT_ERROR_PROPERTY_ID = number;
export type WS_FAULT_DISCLOSURE = number;
export type WS_HEAP_PROPERTY_ID = number;
export type WS_LISTENER_STATE = number;
export type WS_LISTENER_PROPERTY_ID = number;
export type WS_IP_VERSION = number;
export type WS_MESSAGE_STATE = number;
export type WS_MESSAGE_INITIALIZATION = number;
export type WS_REPEATING_HEADER_OPTION = number;
export type WS_HEADER_TYPE = number;
export type WS_ADDRESSING_VERSION = number;
export type WS_ENVELOPE_VERSION = number;
export type WS_MESSAGE_PROPERTY_ID = number;
export type WS_SECURITY_BINDING_TYPE = number;
export type WS_HTTP_HEADER_AUTH_TARGET = number;
export type WS_WINDOWS_INTEGRATED_AUTH_PACKAGE = number;
export type WS_SECURITY_HEADER_VERSION = number;
export type WS_TRUST_VERSION = number;
export type WS_REQUEST_SECURITY_TOKEN_ACTION = number;
export type WS_SECURE_CONVERSATION_VERSION = number;
export type WS_SECURE_PROTOCOL = number;
export type WS_SECURITY_TIMESTAMP_USAGE = number;
export type WS_SECURITY_HEADER_LAYOUT = number;
export type WS_SECURITY_ALGORITHM_PROPERTY_ID = number;
export type WS_SECURITY_ALGORITHM_ID = number;
export type WS_PROTECTION_LEVEL = number;
export type WS_SECURITY_PROPERTY_ID = number;
export type WS_SECURITY_KEY_TYPE = number;
export type WS_SECURITY_ALGORITHM_SUITE_NAME = number;
export type WS_SECURITY_TOKEN_REFERENCE_MODE = number;
export type WS_SECURITY_KEY_ENTROPY_MODE = number;
export type WS_EXTENDED_PROTECTION_POLICY = number;
export type WS_EXTENDED_PROTECTION_SCENARIO = number;
export type WS_SECURITY_BINDING_PROPERTY_ID = number;
export type WS_CERT_CREDENTIAL_TYPE = number;
export type WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = number;
export type WS_USERNAME_CREDENTIAL_TYPE = number;
export type WS_SECURITY_TOKEN_PROPERTY_ID = number;
export type WS_SECURITY_KEY_HANDLE_TYPE = number;
export type WS_MESSAGE_SECURITY_USAGE = number;
export type WS_SECURITY_CONTEXT_PROPERTY_ID = number;
export type WS_XML_SECURITY_TOKEN_PROPERTY_ID = number;
export type WS_SAML_AUTHENTICATOR_TYPE = number;
export type WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID = number;
export type WS_SECURITY_BEARER_KEY_TYPE_VERSION = number;
export type WS_TYPE = number;
export type WS_FIELD_MAPPING = number;
export type WS_TYPE_MAPPING = number;
export type WS_READ_OPTION = number;
export type WS_WRITE_OPTION = number;
export type WS_SERVICE_CANCEL_REASON = number;
export type WS_OPERATION_STYLE = number;
export type WS_PARAMETER_TYPE = number;
export type WS_SERVICE_ENDPOINT_PROPERTY_ID = number;
export type WS_METADATA_EXCHANGE_TYPE = number;
export type WS_SERVICE_PROPERTY_ID = number;
export type WS_SERVICE_HOST_STATE = number;
export type WS_SERVICE_PROXY_STATE = number;
export type WS_PROXY_PROPERTY_ID = number;
export type WS_CALL_PROPERTY_ID = number;
export type WS_TRACE_API = number;
export type WS_URL_SCHEME_TYPE = number;
export type WS_DATETIME_FORMAT = number;
export type WS_METADATA_STATE = number;
export type WS_METADATA_PROPERTY_ID = number;
export type WS_POLICY_STATE = number;
export type WS_POLICY_PROPERTY_ID = number;
export type WS_SECURITY_BINDING_CONSTRAINT_TYPE = number;
export type WS_POLICY_EXTENSION_TYPE = number;
export type WS_BINDING_TEMPLATE_TYPE = number;

// Constants
export const WEBAUTHN_API_VERSION_1 = 1;
export const WEBAUTHN_API_VERSION_2 = 2;
export const WEBAUTHN_API_VERSION_3 = 3;
export const WEBAUTHN_API_CURRENT_VERSION = 3;
export const WEBAUTHN_RP_ENTITY_INFORMATION_CURRENT_VERSION = 1;
export const WEBAUTHN_MAX_USER_ID_LENGTH = 64;
export const WEBAUTHN_USER_ENTITY_INFORMATION_CURRENT_VERSION = 1;
export const WEBAUTHN_HASH_ALGORITHM_SHA_256 = `SHA-256`;
export const WEBAUTHN_HASH_ALGORITHM_SHA_384 = `SHA-384`;
export const WEBAUTHN_HASH_ALGORITHM_SHA_512 = `SHA-512`;
export const WEBAUTHN_CLIENT_DATA_CURRENT_VERSION = 1;
export const WEBAUTHN_CREDENTIAL_TYPE_PUBLIC_KEY = `public-key`;
export const WEBAUTHN_COSE_ALGORITHM_ECDSA_P256_WITH_SHA256 = `-7`;
export const WEBAUTHN_COSE_ALGORITHM_ECDSA_P384_WITH_SHA384 = `-35`;
export const WEBAUTHN_COSE_ALGORITHM_ECDSA_P521_WITH_SHA512 = `-36`;
export const WEBAUTHN_COSE_ALGORITHM_RSASSA_PKCS1_V1_5_WITH_SHA256 = `-257`;
export const WEBAUTHN_COSE_ALGORITHM_RSASSA_PKCS1_V1_5_WITH_SHA384 = `-258`;
export const WEBAUTHN_COSE_ALGORITHM_RSASSA_PKCS1_V1_5_WITH_SHA512 = `-259`;
export const WEBAUTHN_COSE_ALGORITHM_RSA_PSS_WITH_SHA256 = `-37`;
export const WEBAUTHN_COSE_ALGORITHM_RSA_PSS_WITH_SHA384 = `-38`;
export const WEBAUTHN_COSE_ALGORITHM_RSA_PSS_WITH_SHA512 = `-39`;
export const WEBAUTHN_COSE_CREDENTIAL_PARAMETER_CURRENT_VERSION = 1;
export const WEBAUTHN_CREDENTIAL_CURRENT_VERSION = 1;
export const WEBAUTHN_CTAP_TRANSPORT_USB = 1;
export const WEBAUTHN_CTAP_TRANSPORT_NFC = 2;
export const WEBAUTHN_CTAP_TRANSPORT_BLE = 4;
export const WEBAUTHN_CTAP_TRANSPORT_TEST = 8;
export const WEBAUTHN_CTAP_TRANSPORT_INTERNAL = 16;
export const WEBAUTHN_CTAP_TRANSPORT_FLAGS_MASK = 31;
export const WEBAUTHN_CREDENTIAL_EX_CURRENT_VERSION = 1;
export const WEBAUTHN_EXTENSIONS_IDENTIFIER_HMAC_SECRET = `hmac-secret`;
export const WEBAUTHN_USER_VERIFICATION_ANY = 0;
export const WEBAUTHN_USER_VERIFICATION_OPTIONAL = 1;
export const WEBAUTHN_USER_VERIFICATION_OPTIONAL_WITH_CREDENTIAL_ID_LIST = 2;
export const WEBAUTHN_USER_VERIFICATION_REQUIRED = 3;
export const WEBAUTHN_EXTENSIONS_IDENTIFIER_CRED_PROTECT = `credProtect`;
export const WEBAUTHN_EXTENSIONS_IDENTIFIER_CRED_BLOB = `credBlob`;
export const WEBAUTHN_EXTENSIONS_IDENTIFIER_MIN_PIN_LENGTH = `minPinLength`;
export const WEBAUTHN_AUTHENTICATOR_ATTACHMENT_ANY = 0;
export const WEBAUTHN_AUTHENTICATOR_ATTACHMENT_PLATFORM = 1;
export const WEBAUTHN_AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM = 2;
export const WEBAUTHN_AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM_U2F_V2 = 3;
export const WEBAUTHN_USER_VERIFICATION_REQUIREMENT_ANY = 0;
export const WEBAUTHN_USER_VERIFICATION_REQUIREMENT_REQUIRED = 1;
export const WEBAUTHN_USER_VERIFICATION_REQUIREMENT_PREFERRED = 2;
export const WEBAUTHN_USER_VERIFICATION_REQUIREMENT_DISCOURAGED = 3;
export const WEBAUTHN_ATTESTATION_CONVEYANCE_PREFERENCE_ANY = 0;
export const WEBAUTHN_ATTESTATION_CONVEYANCE_PREFERENCE_NONE = 1;
export const WEBAUTHN_ATTESTATION_CONVEYANCE_PREFERENCE_INDIRECT = 2;
export const WEBAUTHN_ATTESTATION_CONVEYANCE_PREFERENCE_DIRECT = 3;
export const WEBAUTHN_ENTERPRISE_ATTESTATION_NONE = 0;
export const WEBAUTHN_ENTERPRISE_ATTESTATION_VENDOR_FACILITATED = 1;
export const WEBAUTHN_ENTERPRISE_ATTESTATION_PLATFORM_MANAGED = 2;
export const WEBAUTHN_LARGE_BLOB_SUPPORT_NONE = 0;
export const WEBAUTHN_LARGE_BLOB_SUPPORT_REQUIRED = 1;
export const WEBAUTHN_LARGE_BLOB_SUPPORT_PREFERRED = 2;
export const WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_VERSION_1 = 1;
export const WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_VERSION_2 = 2;
export const WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_VERSION_3 = 3;
export const WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_VERSION_4 = 4;
export const WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS_CURRENT_VERSION = 4;
export const WEBAUTHN_CRED_LARGE_BLOB_OPERATION_NONE = 0;
export const WEBAUTHN_CRED_LARGE_BLOB_OPERATION_GET = 1;
export const WEBAUTHN_CRED_LARGE_BLOB_OPERATION_SET = 2;
export const WEBAUTHN_CRED_LARGE_BLOB_OPERATION_DELETE = 3;
export const WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_1 = 1;
export const WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_2 = 2;
export const WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_3 = 3;
export const WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_4 = 4;
export const WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_5 = 5;
export const WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_CURRENT_VERSION = 5;
export const WEBAUTHN_ATTESTATION_DECODE_NONE = 0;
export const WEBAUTHN_ATTESTATION_DECODE_COMMON = 1;
export const WEBAUTHN_ATTESTATION_VER_TPM_2_0 = `2.0`;
export const WEBAUTHN_COMMON_ATTESTATION_CURRENT_VERSION = 1;
export const WEBAUTHN_ATTESTATION_TYPE_PACKED = `packed`;
export const WEBAUTHN_ATTESTATION_TYPE_U2F = `fido-u2f`;
export const WEBAUTHN_ATTESTATION_TYPE_TPM = `tpm`;
export const WEBAUTHN_ATTESTATION_TYPE_NONE = `none`;
export const WEBAUTHN_CREDENTIAL_ATTESTATION_VERSION_1 = 1;
export const WEBAUTHN_CREDENTIAL_ATTESTATION_VERSION_2 = 2;
export const WEBAUTHN_CREDENTIAL_ATTESTATION_VERSION_3 = 3;
export const WEBAUTHN_CREDENTIAL_ATTESTATION_VERSION_4 = 4;
export const WEBAUTHN_CREDENTIAL_ATTESTATION_CURRENT_VERSION = 4;
export const WEBAUTHN_CRED_LARGE_BLOB_STATUS_NONE = 0;
export const WEBAUTHN_CRED_LARGE_BLOB_STATUS_SUCCESS = 1;
export const WEBAUTHN_CRED_LARGE_BLOB_STATUS_NOT_SUPPORTED = 2;
export const WEBAUTHN_CRED_LARGE_BLOB_STATUS_INVALID_DATA = 3;
export const WEBAUTHN_CRED_LARGE_BLOB_STATUS_INVALID_PARAMETER = 4;
export const WEBAUTHN_CRED_LARGE_BLOB_STATUS_NOT_FOUND = 5;
export const WEBAUTHN_CRED_LARGE_BLOB_STATUS_MULTIPLE_CREDENTIALS = 6;
export const WEBAUTHN_CRED_LARGE_BLOB_STATUS_LACK_OF_SPACE = 7;
export const WEBAUTHN_CRED_LARGE_BLOB_STATUS_PLATFORM_ERROR = 8;
export const WEBAUTHN_CRED_LARGE_BLOB_STATUS_AUTHENTICATOR_ERROR = 9;
export const WEBAUTHN_ASSERTION_VERSION_1 = 1;
export const WEBAUTHN_ASSERTION_VERSION_2 = 2;
export const WEBAUTHN_ASSERTION_CURRENT_VERSION = 2;
export const WS_HTTP_HEADER_MAPPING_COMMA_SEPARATOR = 1;
export const WS_HTTP_HEADER_MAPPING_SEMICOLON_SEPARATOR = 2;
export const WS_HTTP_HEADER_MAPPING_QUOTED_VALUE = 4;
export const WS_HTTP_RESPONSE_MAPPING_STATUS_CODE = 1;
export const WS_HTTP_RESPONSE_MAPPING_STATUS_TEXT = 2;
export const WS_HTTP_REQUEST_MAPPING_VERB = 2;
export const WS_MATCH_URL_DNS_HOST = 1;
export const WS_MATCH_URL_DNS_FULLY_QUALIFIED_HOST = 2;
export const WS_MATCH_URL_NETBIOS_HOST = 4;
export const WS_MATCH_URL_LOCAL_HOST = 8;
export const WS_MATCH_URL_HOST_ADDRESSES = 16;
export const WS_MATCH_URL_THIS_HOST = 31;
export const WS_MATCH_URL_PORT = 32;
export const WS_MATCH_URL_EXACT_PATH = 64;
export const WS_MATCH_URL_PREFIX_PATH = 128;
export const WS_MATCH_URL_NO_QUERY = 256;
export const WS_MUST_UNDERSTAND_HEADER_ATTRIBUTE = 1;
export const WS_RELAY_HEADER_ATTRIBUTE = 2;
export const WS_HTTP_HEADER_AUTH_SCHEME_NONE = 1;
export const WS_HTTP_HEADER_AUTH_SCHEME_BASIC = 2;
export const WS_HTTP_HEADER_AUTH_SCHEME_DIGEST = 4;
export const WS_HTTP_HEADER_AUTH_SCHEME_NTLM = 8;
export const WS_HTTP_HEADER_AUTH_SCHEME_NEGOTIATE = 16;
export const WS_HTTP_HEADER_AUTH_SCHEME_PASSPORT = 32;
export const WS_CERT_FAILURE_CN_MISMATCH = 1;
export const WS_CERT_FAILURE_INVALID_DATE = 2;
export const WS_CERT_FAILURE_UNTRUSTED_ROOT = 4;
export const WS_CERT_FAILURE_WRONG_USAGE = 8;
export const WS_CERT_FAILURE_REVOCATION_OFFLINE = 16;
export const WS_STRUCT_ABSTRACT = 1;
export const WS_STRUCT_IGNORE_TRAILING_ELEMENT_CONTENT = 2;
export const WS_STRUCT_IGNORE_UNHANDLED_ATTRIBUTES = 4;
export const WS_FIELD_POINTER = 1;
export const WS_FIELD_OPTIONAL = 2;
export const WS_FIELD_NILLABLE = 4;
export const WS_FIELD_NILLABLE_ITEM = 8;
export const WS_FIELD_OTHER_NAMESPACE = 16;
export const WS_SERVICE_OPERATION_MESSAGE_NILLABLE_ELEMENT = 1;
export const WS_URL_FLAGS_ALLOW_HOST_WILDCARDS = 1;
export const WS_URL_FLAGS_NO_PATH_COLLAPSE = 2;
export const WS_URL_FLAGS_ZERO_TERMINATE = 4;
export const WS_XML_READER_PROPERTY_MAX_DEPTH = 0;
export const WS_XML_READER_PROPERTY_ALLOW_FRAGMENT = 1;
export const WS_XML_READER_PROPERTY_MAX_ATTRIBUTES = 2;
export const WS_XML_READER_PROPERTY_READ_DECLARATION = 3;
export const WS_XML_READER_PROPERTY_CHARSET = 4;
export const WS_XML_READER_PROPERTY_ROW = 5;
export const WS_XML_READER_PROPERTY_COLUMN = 6;
export const WS_XML_READER_PROPERTY_UTF8_TRIM_SIZE = 7;
export const WS_XML_READER_PROPERTY_STREAM_BUFFER_SIZE = 8;
export const WS_XML_READER_PROPERTY_IN_ATTRIBUTE = 9;
export const WS_XML_READER_PROPERTY_STREAM_MAX_ROOT_MIME_PART_SIZE = 10;
export const WS_XML_READER_PROPERTY_STREAM_MAX_MIME_HEADERS_SIZE = 11;
export const WS_XML_READER_PROPERTY_MAX_MIME_PARTS = 12;
export const WS_XML_READER_PROPERTY_ALLOW_INVALID_CHARACTER_REFERENCES = 13;
export const WS_XML_READER_PROPERTY_MAX_NAMESPACES = 14;
export const WS_EXCLUSIVE_XML_CANONICALIZATION_ALGORITHM = 0;
export const WS_EXCLUSIVE_WITH_COMMENTS_XML_CANONICALIZATION_ALGORITHM = 1;
export const WS_INCLUSIVE_XML_CANONICALIZATION_ALGORITHM = 2;
export const WS_INCLUSIVE_WITH_COMMENTS_XML_CANONICALIZATION_ALGORITHM = 3;
export const WS_XML_CANONICALIZATION_PROPERTY_ALGORITHM = 0;
export const WS_XML_CANONICALIZATION_PROPERTY_INCLUSIVE_PREFIXES = 1;
export const WS_XML_CANONICALIZATION_PROPERTY_OMITTED_ELEMENT = 2;
export const WS_XML_CANONICALIZATION_PROPERTY_OUTPUT_BUFFER_SIZE = 3;
export const WS_XML_WRITER_PROPERTY_MAX_DEPTH = 0;
export const WS_XML_WRITER_PROPERTY_ALLOW_FRAGMENT = 1;
export const WS_XML_WRITER_PROPERTY_MAX_ATTRIBUTES = 2;
export const WS_XML_WRITER_PROPERTY_WRITE_DECLARATION = 3;
export const WS_XML_WRITER_PROPERTY_INDENT = 4;
export const WS_XML_WRITER_PROPERTY_BUFFER_TRIM_SIZE = 5;
export const WS_XML_WRITER_PROPERTY_CHARSET = 6;
export const WS_XML_WRITER_PROPERTY_BUFFERS = 7;
export const WS_XML_WRITER_PROPERTY_BUFFER_MAX_SIZE = 8;
export const WS_XML_WRITER_PROPERTY_BYTES = 9;
export const WS_XML_WRITER_PROPERTY_IN_ATTRIBUTE = 10;
export const WS_XML_WRITER_PROPERTY_MAX_MIME_PARTS_BUFFER_SIZE = 11;
export const WS_XML_WRITER_PROPERTY_INITIAL_BUFFER = 12;
export const WS_XML_WRITER_PROPERTY_ALLOW_INVALID_CHARACTER_REFERENCES = 13;
export const WS_XML_WRITER_PROPERTY_MAX_NAMESPACES = 14;
export const WS_XML_WRITER_PROPERTY_BYTES_WRITTEN = 15;
export const WS_XML_WRITER_PROPERTY_BYTES_TO_CLOSE = 16;
export const WS_XML_WRITER_PROPERTY_COMPRESS_EMPTY_ELEMENTS = 17;
export const WS_XML_WRITER_PROPERTY_EMIT_UNCOMPRESSED_EMPTY_ELEMENTS = 18;
export const WS_XML_TEXT_TYPE_UTF8 = 1;
export const WS_XML_TEXT_TYPE_UTF16 = 2;
export const WS_XML_TEXT_TYPE_BASE64 = 3;
export const WS_XML_TEXT_TYPE_BOOL = 4;
export const WS_XML_TEXT_TYPE_INT32 = 5;
export const WS_XML_TEXT_TYPE_INT64 = 6;
export const WS_XML_TEXT_TYPE_UINT64 = 7;
export const WS_XML_TEXT_TYPE_FLOAT = 8;
export const WS_XML_TEXT_TYPE_DOUBLE = 9;
export const WS_XML_TEXT_TYPE_DECIMAL = 10;
export const WS_XML_TEXT_TYPE_GUID = 11;
export const WS_XML_TEXT_TYPE_UNIQUE_ID = 12;
export const WS_XML_TEXT_TYPE_DATETIME = 13;
export const WS_XML_TEXT_TYPE_TIMESPAN = 14;
export const WS_XML_TEXT_TYPE_QNAME = 15;
export const WS_XML_TEXT_TYPE_LIST = 16;
export const WS_XML_NODE_TYPE_ELEMENT = 1;
export const WS_XML_NODE_TYPE_TEXT = 2;
export const WS_XML_NODE_TYPE_END_ELEMENT = 3;
export const WS_XML_NODE_TYPE_COMMENT = 4;
export const WS_XML_NODE_TYPE_CDATA = 6;
export const WS_XML_NODE_TYPE_END_CDATA = 7;
export const WS_XML_NODE_TYPE_EOF = 8;
export const WS_XML_NODE_TYPE_BOF = 9;
export const WS_MOVE_TO_ROOT_ELEMENT = 0;
export const WS_MOVE_TO_NEXT_ELEMENT = 1;
export const WS_MOVE_TO_PREVIOUS_ELEMENT = 2;
export const WS_MOVE_TO_CHILD_ELEMENT = 3;
export const WS_MOVE_TO_END_ELEMENT = 4;
export const WS_MOVE_TO_PARENT_ELEMENT = 5;
export const WS_MOVE_TO_NEXT_NODE = 6;
export const WS_MOVE_TO_PREVIOUS_NODE = 7;
export const WS_MOVE_TO_FIRST_NODE = 8;
export const WS_MOVE_TO_BOF = 9;
export const WS_MOVE_TO_EOF = 10;
export const WS_MOVE_TO_CHILD_NODE = 11;
export const WS_BOOL_VALUE_TYPE = 0;
export const WS_INT8_VALUE_TYPE = 1;
export const WS_INT16_VALUE_TYPE = 2;
export const WS_INT32_VALUE_TYPE = 3;
export const WS_INT64_VALUE_TYPE = 4;
export const WS_UINT8_VALUE_TYPE = 5;
export const WS_UINT16_VALUE_TYPE = 6;
export const WS_UINT32_VALUE_TYPE = 7;
export const WS_UINT64_VALUE_TYPE = 8;
export const WS_FLOAT_VALUE_TYPE = 9;
export const WS_DOUBLE_VALUE_TYPE = 10;
export const WS_DECIMAL_VALUE_TYPE = 11;
export const WS_DATETIME_VALUE_TYPE = 12;
export const WS_TIMESPAN_VALUE_TYPE = 13;
export const WS_GUID_VALUE_TYPE = 14;
export const WS_DURATION_VALUE_TYPE = 15;
export const WS_XML_READER_INPUT_TYPE_BUFFER = 1;
export const WS_XML_READER_INPUT_TYPE_STREAM = 2;
export const WS_XML_READER_ENCODING_TYPE_TEXT = 1;
export const WS_XML_READER_ENCODING_TYPE_BINARY = 2;
export const WS_XML_READER_ENCODING_TYPE_MTOM = 3;
export const WS_XML_READER_ENCODING_TYPE_RAW = 4;
export const WS_CHARSET_AUTO = 0;
export const WS_CHARSET_UTF8 = 1;
export const WS_CHARSET_UTF16LE = 2;
export const WS_CHARSET_UTF16BE = 3;
export const WS_XML_WRITER_ENCODING_TYPE_TEXT = 1;
export const WS_XML_WRITER_ENCODING_TYPE_BINARY = 2;
export const WS_XML_WRITER_ENCODING_TYPE_MTOM = 3;
export const WS_XML_WRITER_ENCODING_TYPE_RAW = 4;
export const WS_XML_WRITER_OUTPUT_TYPE_BUFFER = 1;
export const WS_XML_WRITER_OUTPUT_TYPE_STREAM = 2;
export const WS_SHORT_CALLBACK = 0;
export const WS_LONG_CALLBACK = 1;
export const WS_ENCODING_XML_BINARY_1 = 0;
export const WS_ENCODING_XML_BINARY_SESSION_1 = 1;
export const WS_ENCODING_XML_MTOM_UTF8 = 2;
export const WS_ENCODING_XML_MTOM_UTF16BE = 3;
export const WS_ENCODING_XML_MTOM_UTF16LE = 4;
export const WS_ENCODING_XML_UTF8 = 5;
export const WS_ENCODING_XML_UTF16BE = 6;
export const WS_ENCODING_XML_UTF16LE = 7;
export const WS_ENCODING_RAW = 8;
export const WS_CHANNEL_STATE_CREATED = 0;
export const WS_CHANNEL_STATE_OPENING = 1;
export const WS_CHANNEL_STATE_ACCEPTING = 2;
export const WS_CHANNEL_STATE_OPEN = 3;
export const WS_CHANNEL_STATE_FAULTED = 4;
export const WS_CHANNEL_STATE_CLOSING = 5;
export const WS_CHANNEL_STATE_CLOSED = 6;
export const WS_RECEIVE_REQUIRED_MESSAGE = 1;
export const WS_RECEIVE_OPTIONAL_MESSAGE = 2;
export const WS_HTTP_CHANNEL_BINDING = 0;
export const WS_TCP_CHANNEL_BINDING = 1;
export const WS_UDP_CHANNEL_BINDING = 2;
export const WS_CUSTOM_CHANNEL_BINDING = 3;
export const WS_NAMEDPIPE_CHANNEL_BINDING = 4;
export const WS_CHANNEL_TYPE_INPUT = 1;
export const WS_CHANNEL_TYPE_OUTPUT = 2;
export const WS_CHANNEL_TYPE_SESSION = 4;
export const WS_CHANNEL_TYPE_INPUT_SESSION = 5;
export const WS_CHANNEL_TYPE_OUTPUT_SESSION = 6;
export const WS_CHANNEL_TYPE_DUPLEX = 3;
export const WS_CHANNEL_TYPE_DUPLEX_SESSION = 7;
export const WS_CHANNEL_TYPE_REQUEST = 8;
export const WS_CHANNEL_TYPE_REPLY = 16;
export const WS_STREAMED_INPUT_TRANSFER_MODE = 1;
export const WS_STREAMED_OUTPUT_TRANSFER_MODE = 2;
export const WS_BUFFERED_TRANSFER_MODE = 0;
export const WS_STREAMED_TRANSFER_MODE = 3;
export const WS_HTTP_PROXY_SETTING_MODE_AUTO = 1;
export const WS_HTTP_PROXY_SETTING_MODE_NONE = 2;
export const WS_HTTP_PROXY_SETTING_MODE_CUSTOM = 3;
export const WS_CHANNEL_PROPERTY_MAX_BUFFERED_MESSAGE_SIZE = 0;
export const WS_CHANNEL_PROPERTY_MAX_STREAMED_MESSAGE_SIZE = 1;
export const WS_CHANNEL_PROPERTY_MAX_STREAMED_START_SIZE = 2;
export const WS_CHANNEL_PROPERTY_MAX_STREAMED_FLUSH_SIZE = 3;
export const WS_CHANNEL_PROPERTY_ENCODING = 4;
export const WS_CHANNEL_PROPERTY_ENVELOPE_VERSION = 5;
export const WS_CHANNEL_PROPERTY_ADDRESSING_VERSION = 6;
export const WS_CHANNEL_PROPERTY_MAX_SESSION_DICTIONARY_SIZE = 7;
export const WS_CHANNEL_PROPERTY_STATE = 8;
export const WS_CHANNEL_PROPERTY_ASYNC_CALLBACK_MODEL = 9;
export const WS_CHANNEL_PROPERTY_IP_VERSION = 10;
export const WS_CHANNEL_PROPERTY_RESOLVE_TIMEOUT = 11;
export const WS_CHANNEL_PROPERTY_CONNECT_TIMEOUT = 12;
export const WS_CHANNEL_PROPERTY_SEND_TIMEOUT = 13;
export const WS_CHANNEL_PROPERTY_RECEIVE_RESPONSE_TIMEOUT = 14;
export const WS_CHANNEL_PROPERTY_RECEIVE_TIMEOUT = 15;
export const WS_CHANNEL_PROPERTY_CLOSE_TIMEOUT = 16;
export const WS_CHANNEL_PROPERTY_ENABLE_TIMEOUTS = 17;
export const WS_CHANNEL_PROPERTY_TRANSFER_MODE = 18;
export const WS_CHANNEL_PROPERTY_MULTICAST_INTERFACE = 19;
export const WS_CHANNEL_PROPERTY_MULTICAST_HOPS = 20;
export const WS_CHANNEL_PROPERTY_REMOTE_ADDRESS = 21;
export const WS_CHANNEL_PROPERTY_REMOTE_IP_ADDRESS = 22;
export const WS_CHANNEL_PROPERTY_HTTP_CONNECTION_ID = 23;
export const WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_CALLBACKS = 24;
export const WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_PARAMETERS = 25;
export const WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_INSTANCE = 26;
export const WS_CHANNEL_PROPERTY_TRANSPORT_URL = 27;
export const WS_CHANNEL_PROPERTY_NO_DELAY = 28;
export const WS_CHANNEL_PROPERTY_SEND_KEEP_ALIVES = 29;
export const WS_CHANNEL_PROPERTY_KEEP_ALIVE_TIME = 30;
export const WS_CHANNEL_PROPERTY_KEEP_ALIVE_INTERVAL = 31;
export const WS_CHANNEL_PROPERTY_MAX_HTTP_SERVER_CONNECTIONS = 32;
export const WS_CHANNEL_PROPERTY_IS_SESSION_SHUT_DOWN = 33;
export const WS_CHANNEL_PROPERTY_CHANNEL_TYPE = 34;
export const WS_CHANNEL_PROPERTY_TRIM_BUFFERED_MESSAGE_SIZE = 35;
export const WS_CHANNEL_PROPERTY_ENCODER = 36;
export const WS_CHANNEL_PROPERTY_DECODER = 37;
export const WS_CHANNEL_PROPERTY_PROTECTION_LEVEL = 38;
export const WS_CHANNEL_PROPERTY_COOKIE_MODE = 39;
export const WS_CHANNEL_PROPERTY_HTTP_PROXY_SETTING_MODE = 40;
export const WS_CHANNEL_PROPERTY_CUSTOM_HTTP_PROXY = 41;
export const WS_CHANNEL_PROPERTY_HTTP_MESSAGE_MAPPING = 42;
export const WS_CHANNEL_PROPERTY_ENABLE_HTTP_REDIRECT = 43;
export const WS_CHANNEL_PROPERTY_HTTP_REDIRECT_CALLBACK_CONTEXT = 44;
export const WS_CHANNEL_PROPERTY_FAULTS_AS_ERRORS = 45;
export const WS_CHANNEL_PROPERTY_ALLOW_UNSECURED_FAULTS = 46;
export const WS_CHANNEL_PROPERTY_HTTP_SERVER_SPN = 47;
export const WS_CHANNEL_PROPERTY_HTTP_PROXY_SPN = 48;
export const WS_CHANNEL_PROPERTY_MAX_HTTP_REQUEST_HEADERS_BUFFER_SIZE = 49;
export const WS_MANUAL_COOKIE_MODE = 1;
export const WS_AUTO_COOKIE_MODE = 2;
export const WS_OPERATION_CONTEXT_PROPERTY_CHANNEL = 0;
export const WS_OPERATION_CONTEXT_PROPERTY_CONTRACT_DESCRIPTION = 1;
export const WS_OPERATION_CONTEXT_PROPERTY_HOST_USER_STATE = 2;
export const WS_OPERATION_CONTEXT_PROPERTY_CHANNEL_USER_STATE = 3;
export const WS_OPERATION_CONTEXT_PROPERTY_INPUT_MESSAGE = 4;
export const WS_OPERATION_CONTEXT_PROPERTY_OUTPUT_MESSAGE = 5;
export const WS_OPERATION_CONTEXT_PROPERTY_HEAP = 6;
export const WS_OPERATION_CONTEXT_PROPERTY_LISTENER = 7;
export const WS_OPERATION_CONTEXT_PROPERTY_ENDPOINT_ADDRESS = 8;
export const WS_DNS_ENDPOINT_IDENTITY_TYPE = 1;
export const WS_UPN_ENDPOINT_IDENTITY_TYPE = 2;
export const WS_SPN_ENDPOINT_IDENTITY_TYPE = 3;
export const WS_RSA_ENDPOINT_IDENTITY_TYPE = 4;
export const WS_CERT_ENDPOINT_IDENTITY_TYPE = 5;
export const WS_UNKNOWN_ENDPOINT_IDENTITY_TYPE = 6;
export const WS_ENDPOINT_ADDRESS_EXTENSION_METADATA_ADDRESS = 1;
export const WS_ERROR_PROPERTY_STRING_COUNT = 0;
export const WS_ERROR_PROPERTY_ORIGINAL_ERROR_CODE = 1;
export const WS_ERROR_PROPERTY_LANGID = 2;
export const WS_EXCEPTION_CODE_USAGE_FAILURE = `-1069744128`;
export const WS_EXCEPTION_CODE_INTERNAL_FAILURE = `-1069744127`;
export const WS_FAULT_ERROR_PROPERTY_FAULT = 0;
export const WS_FAULT_ERROR_PROPERTY_ACTION = 1;
export const WS_FAULT_ERROR_PROPERTY_HEADER = 2;
export const WS_MINIMAL_FAULT_DISCLOSURE = 0;
export const WS_FULL_FAULT_DISCLOSURE = 1;
export const WS_HEAP_PROPERTY_MAX_SIZE = 0;
export const WS_HEAP_PROPERTY_TRIM_SIZE = 1;
export const WS_HEAP_PROPERTY_REQUESTED_SIZE = 2;
export const WS_HEAP_PROPERTY_ACTUAL_SIZE = 3;
export const WS_LISTENER_STATE_CREATED = 0;
export const WS_LISTENER_STATE_OPENING = 1;
export const WS_LISTENER_STATE_OPEN = 2;
export const WS_LISTENER_STATE_FAULTED = 3;
export const WS_LISTENER_STATE_CLOSING = 4;
export const WS_LISTENER_STATE_CLOSED = 5;
export const WS_LISTENER_PROPERTY_LISTEN_BACKLOG = 0;
export const WS_LISTENER_PROPERTY_IP_VERSION = 1;
export const WS_LISTENER_PROPERTY_STATE = 2;
export const WS_LISTENER_PROPERTY_ASYNC_CALLBACK_MODEL = 3;
export const WS_LISTENER_PROPERTY_CHANNEL_TYPE = 4;
export const WS_LISTENER_PROPERTY_CHANNEL_BINDING = 5;
export const WS_LISTENER_PROPERTY_CONNECT_TIMEOUT = 6;
export const WS_LISTENER_PROPERTY_IS_MULTICAST = 7;
export const WS_LISTENER_PROPERTY_MULTICAST_INTERFACES = 8;
export const WS_LISTENER_PROPERTY_MULTICAST_LOOPBACK = 9;
export const WS_LISTENER_PROPERTY_CLOSE_TIMEOUT = 10;
export const WS_LISTENER_PROPERTY_TO_HEADER_MATCHING_OPTIONS = 11;
export const WS_LISTENER_PROPERTY_TRANSPORT_URL_MATCHING_OPTIONS = 12;
export const WS_LISTENER_PROPERTY_CUSTOM_LISTENER_CALLBACKS = 13;
export const WS_LISTENER_PROPERTY_CUSTOM_LISTENER_PARAMETERS = 14;
export const WS_LISTENER_PROPERTY_CUSTOM_LISTENER_INSTANCE = 15;
export const WS_LISTENER_PROPERTY_DISALLOWED_USER_AGENT = 16;
export const WS_IP_VERSION_4 = 1;
export const WS_IP_VERSION_6 = 2;
export const WS_IP_VERSION_AUTO = 3;
export const WS_MESSAGE_STATE_EMPTY = 1;
export const WS_MESSAGE_STATE_INITIALIZED = 2;
export const WS_MESSAGE_STATE_READING = 3;
export const WS_MESSAGE_STATE_WRITING = 4;
export const WS_MESSAGE_STATE_DONE = 5;
export const WS_BLANK_MESSAGE = 0;
export const WS_DUPLICATE_MESSAGE = 1;
export const WS_REQUEST_MESSAGE = 2;
export const WS_REPLY_MESSAGE = 3;
export const WS_FAULT_MESSAGE = 4;
export const WS_REPEATING_HEADER = 1;
export const WS_SINGLETON_HEADER = 2;
export const WS_ACTION_HEADER = 1;
export const WS_TO_HEADER = 2;
export const WS_MESSAGE_ID_HEADER = 3;
export const WS_RELATES_TO_HEADER = 4;
export const WS_FROM_HEADER = 5;
export const WS_REPLY_TO_HEADER = 6;
export const WS_FAULT_TO_HEADER = 7;
export const WS_ADDRESSING_VERSION_0_9 = 1;
export const WS_ADDRESSING_VERSION_1_0 = 2;
export const WS_ADDRESSING_VERSION_TRANSPORT = 3;
export const WS_ENVELOPE_VERSION_SOAP_1_1 = 1;
export const WS_ENVELOPE_VERSION_SOAP_1_2 = 2;
export const WS_ENVELOPE_VERSION_NONE = 3;
export const WS_MESSAGE_PROPERTY_STATE = 0;
export const WS_MESSAGE_PROPERTY_HEAP = 1;
export const WS_MESSAGE_PROPERTY_ENVELOPE_VERSION = 2;
export const WS_MESSAGE_PROPERTY_ADDRESSING_VERSION = 3;
export const WS_MESSAGE_PROPERTY_HEADER_BUFFER = 4;
export const WS_MESSAGE_PROPERTY_HEADER_POSITION = 5;
export const WS_MESSAGE_PROPERTY_BODY_READER = 6;
export const WS_MESSAGE_PROPERTY_BODY_WRITER = 7;
export const WS_MESSAGE_PROPERTY_IS_ADDRESSED = 8;
export const WS_MESSAGE_PROPERTY_HEAP_PROPERTIES = 9;
export const WS_MESSAGE_PROPERTY_XML_READER_PROPERTIES = 10;
export const WS_MESSAGE_PROPERTY_XML_WRITER_PROPERTIES = 11;
export const WS_MESSAGE_PROPERTY_IS_FAULT = 12;
export const WS_MESSAGE_PROPERTY_MAX_PROCESSED_HEADERS = 13;
export const WS_MESSAGE_PROPERTY_USERNAME = 14;
export const WS_MESSAGE_PROPERTY_ENCODED_CERT = 15;
export const WS_MESSAGE_PROPERTY_TRANSPORT_SECURITY_WINDOWS_TOKEN = 16;
export const WS_MESSAGE_PROPERTY_HTTP_HEADER_AUTH_WINDOWS_TOKEN = 17;
export const WS_MESSAGE_PROPERTY_MESSAGE_SECURITY_WINDOWS_TOKEN = 18;
export const WS_MESSAGE_PROPERTY_SAML_ASSERTION = 19;
export const WS_MESSAGE_PROPERTY_SECURITY_CONTEXT = 20;
export const WS_MESSAGE_PROPERTY_PROTECTION_LEVEL = 21;
export const WS_SSL_TRANSPORT_SECURITY_BINDING_TYPE = 1;
export const WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TYPE = 2;
export const WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TYPE = 3;
export const WS_USERNAME_MESSAGE_SECURITY_BINDING_TYPE = 4;
export const WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TYPE = 5;
export const WS_XML_TOKEN_MESSAGE_SECURITY_BINDING_TYPE = 6;
export const WS_SAML_MESSAGE_SECURITY_BINDING_TYPE = 7;
export const WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TYPE = 8;
export const WS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING_TYPE = 9;
export const WS_HTTP_HEADER_AUTH_TARGET_SERVICE = 1;
export const WS_HTTP_HEADER_AUTH_TARGET_PROXY = 2;
export const WS_WINDOWS_INTEGRATED_AUTH_PACKAGE_KERBEROS = 1;
export const WS_WINDOWS_INTEGRATED_AUTH_PACKAGE_NTLM = 2;
export const WS_WINDOWS_INTEGRATED_AUTH_PACKAGE_SPNEGO = 3;
export const WS_SECURITY_HEADER_VERSION_1_0 = 1;
export const WS_SECURITY_HEADER_VERSION_1_1 = 2;
export const WS_TRUST_VERSION_FEBRUARY_2005 = 1;
export const WS_TRUST_VERSION_1_3 = 2;
export const WS_REQUEST_SECURITY_TOKEN_ACTION_ISSUE = 1;
export const WS_REQUEST_SECURITY_TOKEN_ACTION_NEW_CONTEXT = 2;
export const WS_REQUEST_SECURITY_TOKEN_ACTION_RENEW_CONTEXT = 3;
export const WS_SECURE_CONVERSATION_VERSION_FEBRUARY_2005 = 1;
export const WS_SECURE_CONVERSATION_VERSION_1_3 = 2;
export const WS_SECURE_PROTOCOL_SSL2 = 1;
export const WS_SECURE_PROTOCOL_SSL3 = 2;
export const WS_SECURE_PROTOCOL_TLS1_0 = 4;
export const WS_SECURE_PROTOCOL_TLS1_1 = 8;
export const WS_SECURE_PROTOCOL_TLS1_2 = 16;
export const WS_SECURITY_TIMESTAMP_USAGE_ALWAYS = 1;
export const WS_SECURITY_TIMESTAMP_USAGE_NEVER = 2;
export const WS_SECURITY_TIMESTAMP_USAGE_REQUESTS_ONLY = 3;
export const WS_SECURITY_HEADER_LAYOUT_STRICT = 1;
export const WS_SECURITY_HEADER_LAYOUT_LAX = 2;
export const WS_SECURITY_HEADER_LAYOUT_LAX_WITH_TIMESTAMP_FIRST = 3;
export const WS_SECURITY_HEADER_LAYOUT_LAX_WITH_TIMESTAMP_LAST = 4;
export const WS_SECURITY_ALGORITHM_DEFAULT = 0;
export const WS_SECURITY_ALGORITHM_CANONICALIZATION_EXCLUSIVE = 1;
export const WS_SECURITY_ALGORITHM_CANONICALIZATION_EXCLUSIVE_WITH_COMMENTS = 2;
export const WS_SECURITY_ALGORITHM_DIGEST_SHA1 = 3;
export const WS_SECURITY_ALGORITHM_DIGEST_SHA_256 = 4;
export const WS_SECURITY_ALGORITHM_DIGEST_SHA_384 = 5;
export const WS_SECURITY_ALGORITHM_DIGEST_SHA_512 = 6;
export const WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA1 = 7;
export const WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA_256 = 8;
export const WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA_384 = 9;
export const WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA_512 = 10;
export const WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA1 = 11;
export const WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_DSA_SHA1 = 12;
export const WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA_256 = 13;
export const WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA_384 = 14;
export const WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA_512 = 15;
export const WS_SECURITY_ALGORITHM_ASYMMETRIC_KEYWRAP_RSA_1_5 = 16;
export const WS_SECURITY_ALGORITHM_ASYMMETRIC_KEYWRAP_RSA_OAEP = 17;
export const WS_SECURITY_ALGORITHM_KEY_DERIVATION_P_SHA1 = 18;
export const WS_PROTECTION_LEVEL_NONE = 1;
export const WS_PROTECTION_LEVEL_SIGN = 2;
export const WS_PROTECTION_LEVEL_SIGN_AND_ENCRYPT = 3;
export const WS_SECURITY_PROPERTY_TRANSPORT_PROTECTION_LEVEL = 1;
export const WS_SECURITY_PROPERTY_ALGORITHM_SUITE = 2;
export const WS_SECURITY_PROPERTY_ALGORITHM_SUITE_NAME = 3;
export const WS_SECURITY_PROPERTY_MAX_ALLOWED_LATENCY = 4;
export const WS_SECURITY_PROPERTY_TIMESTAMP_VALIDITY_DURATION = 5;
export const WS_SECURITY_PROPERTY_MAX_ALLOWED_CLOCK_SKEW = 6;
export const WS_SECURITY_PROPERTY_TIMESTAMP_USAGE = 7;
export const WS_SECURITY_PROPERTY_SECURITY_HEADER_LAYOUT = 8;
export const WS_SECURITY_PROPERTY_SECURITY_HEADER_VERSION = 9;
export const WS_SECURITY_PROPERTY_EXTENDED_PROTECTION_POLICY = 10;
export const WS_SECURITY_PROPERTY_EXTENDED_PROTECTION_SCENARIO = 11;
export const WS_SECURITY_PROPERTY_SERVICE_IDENTITIES = 12;
export const WS_SECURITY_KEY_TYPE_NONE = 1;
export const WS_SECURITY_KEY_TYPE_SYMMETRIC = 2;
export const WS_SECURITY_KEY_TYPE_ASYMMETRIC = 3;
export const WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256 = 1;
export const WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192 = 2;
export const WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128 = 3;
export const WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256_RSA15 = 4;
export const WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192_RSA15 = 5;
export const WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128_RSA15 = 6;
export const WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256_SHA256 = 7;
export const WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192_SHA256 = 8;
export const WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128_SHA256 = 9;
export const WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256_SHA256_RSA15 = 10;
export const WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192_SHA256_RSA15 = 11;
export const WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128_SHA256_RSA15 = 12;
export const WS_SECURITY_TOKEN_REFERENCE_MODE_LOCAL_ID = 1;
export const WS_SECURITY_TOKEN_REFERENCE_MODE_XML_BUFFER = 2;
export const WS_SECURITY_TOKEN_REFERENCE_MODE_CERT_THUMBPRINT = 3;
export const WS_SECURITY_TOKEN_REFERENCE_MODE_SECURITY_CONTEXT_ID = 4;
export const WS_SECURITY_TOKEN_REFERENCE_MODE_SAML_ASSERTION_ID = 5;
export const WS_SECURITY_KEY_ENTROPY_MODE_CLIENT_ONLY = 1;
export const WS_SECURITY_KEY_ENTROPY_MODE_SERVER_ONLY = 2;
export const WS_SECURITY_KEY_ENTROPY_MODE_COMBINED = 3;
export const WS_EXTENDED_PROTECTION_POLICY_NEVER = 1;
export const WS_EXTENDED_PROTECTION_POLICY_WHEN_SUPPORTED = 2;
export const WS_EXTENDED_PROTECTION_POLICY_ALWAYS = 3;
export const WS_EXTENDED_PROTECTION_SCENARIO_BOUND_SERVER = 1;
export const WS_EXTENDED_PROTECTION_SCENARIO_TERMINATED_SSL = 2;
export const WS_SECURITY_BINDING_PROPERTY_REQUIRE_SSL_CLIENT_CERT = 1;
export const WS_SECURITY_BINDING_PROPERTY_WINDOWS_INTEGRATED_AUTH_PACKAGE = 2;
export const WS_SECURITY_BINDING_PROPERTY_REQUIRE_SERVER_AUTH = 3;
export const WS_SECURITY_BINDING_PROPERTY_ALLOW_ANONYMOUS_CLIENTS = 4;
export const WS_SECURITY_BINDING_PROPERTY_ALLOWED_IMPERSONATION_LEVEL = 5;
export const WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_SCHEME = 6;
export const WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_TARGET = 7;
export const WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_BASIC_REALM = 8;
export const WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_DIGEST_REALM = 9;
export const WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_DIGEST_DOMAIN = 10;
export const WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_KEY_SIZE = 11;
export const WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_KEY_ENTROPY_MODE = 12;
export const WS_SECURITY_BINDING_PROPERTY_MESSAGE_PROPERTIES = 13;
export const WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_MAX_PENDING_CONTEXTS = 14;
export const WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_MAX_ACTIVE_CONTEXTS = 15;
export const WS_SECURITY_BINDING_PROPERTY_SECURE_CONVERSATION_VERSION = 16;
export const WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_SUPPORT_RENEW = 17;
export const WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_RENEWAL_INTERVAL = 18;
export const WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_ROLLOVER_INTERVAL = 19;
export const WS_SECURITY_BINDING_PROPERTY_CERT_FAILURES_TO_IGNORE = 20;
export const WS_SECURITY_BINDING_PROPERTY_DISABLE_CERT_REVOCATION_CHECK = 21;
export const WS_SECURITY_BINDING_PROPERTY_DISALLOWED_SECURE_PROTOCOLS = 22;
export const WS_SECURITY_BINDING_PROPERTY_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT = 23;
export const WS_SUBJECT_NAME_CERT_CREDENTIAL_TYPE = 1;
export const WS_THUMBPRINT_CERT_CREDENTIAL_TYPE = 2;
export const WS_CUSTOM_CERT_CREDENTIAL_TYPE = 3;
export const WS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = 1;
export const WS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = 2;
export const WS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = 3;
export const WS_STRING_USERNAME_CREDENTIAL_TYPE = 1;
export const WS_SECURITY_TOKEN_PROPERTY_KEY_TYPE = 1;
export const WS_SECURITY_TOKEN_PROPERTY_VALID_FROM_TIME = 2;
export const WS_SECURITY_TOKEN_PROPERTY_VALID_TILL_TIME = 3;
export const WS_SECURITY_TOKEN_PROPERTY_SERIALIZED_XML = 4;
export const WS_SECURITY_TOKEN_PROPERTY_ATTACHED_REFERENCE_XML = 5;
export const WS_SECURITY_TOKEN_PROPERTY_UNATTACHED_REFERENCE_XML = 6;
export const WS_SECURITY_TOKEN_PROPERTY_SYMMETRIC_KEY = 7;
export const WS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE_TYPE = 1;
export const WS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE_TYPE = 2;
export const WS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE_TYPE = 3;
export const WS_SUPPORTING_MESSAGE_SECURITY_USAGE = 1;
export const WS_SECURITY_CONTEXT_PROPERTY_IDENTIFIER = 1;
export const WS_SECURITY_CONTEXT_PROPERTY_USERNAME = 2;
export const WS_SECURITY_CONTEXT_PROPERTY_MESSAGE_SECURITY_WINDOWS_TOKEN = 3;
export const WS_SECURITY_CONTEXT_PROPERTY_SAML_ASSERTION = 4;
export const WS_XML_SECURITY_TOKEN_PROPERTY_ATTACHED_REFERENCE = 1;
export const WS_XML_SECURITY_TOKEN_PROPERTY_UNATTACHED_REFERENCE = 2;
export const WS_XML_SECURITY_TOKEN_PROPERTY_VALID_FROM_TIME = 3;
export const WS_XML_SECURITY_TOKEN_PROPERTY_VALID_TILL_TIME = 4;
export const WS_CERT_SIGNED_SAML_AUTHENTICATOR_TYPE = 1;
export const WS_REQUEST_SECURITY_TOKEN_PROPERTY_APPLIES_TO = 1;
export const WS_REQUEST_SECURITY_TOKEN_PROPERTY_TRUST_VERSION = 2;
export const WS_REQUEST_SECURITY_TOKEN_PROPERTY_SECURE_CONVERSATION_VERSION = 3;
export const WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_TYPE = 4;
export const WS_REQUEST_SECURITY_TOKEN_PROPERTY_REQUEST_ACTION = 5;
export const WS_REQUEST_SECURITY_TOKEN_PROPERTY_EXISTING_TOKEN = 6;
export const WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_KEY_TYPE = 7;
export const WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_KEY_SIZE = 8;
export const WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_KEY_ENTROPY = 9;
export const WS_REQUEST_SECURITY_TOKEN_PROPERTY_LOCAL_REQUEST_PARAMETERS = 10;
export const WS_REQUEST_SECURITY_TOKEN_PROPERTY_SERVICE_REQUEST_PARAMETERS = 11;
export const WS_REQUEST_SECURITY_TOKEN_PROPERTY_MESSAGE_PROPERTIES = 12;
export const WS_REQUEST_SECURITY_TOKEN_PROPERTY_BEARER_KEY_TYPE_VERSION = 13;
export const WS_SECURITY_BEARER_KEY_TYPE_VERSION_1_3_ORIGINAL_SPECIFICATION = 1;
export const WS_SECURITY_BEARER_KEY_TYPE_VERSION_1_3_ORIGINAL_SCHEMA = 2;
export const WS_SECURITY_BEARER_KEY_TYPE_VERSION_1_3_ERRATA_01 = 3;
export const WS_BOOL_TYPE = 0;
export const WS_INT8_TYPE = 1;
export const WS_INT16_TYPE = 2;
export const WS_INT32_TYPE = 3;
export const WS_INT64_TYPE = 4;
export const WS_UINT8_TYPE = 5;
export const WS_UINT16_TYPE = 6;
export const WS_UINT32_TYPE = 7;
export const WS_UINT64_TYPE = 8;
export const WS_FLOAT_TYPE = 9;
export const WS_DOUBLE_TYPE = 10;
export const WS_DECIMAL_TYPE = 11;
export const WS_DATETIME_TYPE = 12;
export const WS_TIMESPAN_TYPE = 13;
export const WS_GUID_TYPE = 14;
export const WS_UNIQUE_ID_TYPE = 15;
export const WS_STRING_TYPE = 16;
export const WS_WSZ_TYPE = 17;
export const WS_BYTES_TYPE = 18;
export const WS_XML_STRING_TYPE = 19;
export const WS_XML_QNAME_TYPE = 20;
export const WS_XML_BUFFER_TYPE = 21;
export const WS_CHAR_ARRAY_TYPE = 22;
export const WS_UTF8_ARRAY_TYPE = 23;
export const WS_BYTE_ARRAY_TYPE = 24;
export const WS_DESCRIPTION_TYPE = 25;
export const WS_STRUCT_TYPE = 26;
export const WS_CUSTOM_TYPE = 27;
export const WS_ENDPOINT_ADDRESS_TYPE = 28;
export const WS_FAULT_TYPE = 29;
export const WS_VOID_TYPE = 30;
export const WS_ENUM_TYPE = 31;
export const WS_DURATION_TYPE = 32;
export const WS_UNION_TYPE = 33;
export const WS_ANY_ATTRIBUTES_TYPE = 34;
export const WS_TYPE_ATTRIBUTE_FIELD_MAPPING = 0;
export const WS_ATTRIBUTE_FIELD_MAPPING = 1;
export const WS_ELEMENT_FIELD_MAPPING = 2;
export const WS_REPEATING_ELEMENT_FIELD_MAPPING = 3;
export const WS_TEXT_FIELD_MAPPING = 4;
export const WS_NO_FIELD_MAPPING = 5;
export const WS_XML_ATTRIBUTE_FIELD_MAPPING = 6;
export const WS_ELEMENT_CHOICE_FIELD_MAPPING = 7;
export const WS_REPEATING_ELEMENT_CHOICE_FIELD_MAPPING = 8;
export const WS_ANY_ELEMENT_FIELD_MAPPING = 9;
export const WS_REPEATING_ANY_ELEMENT_FIELD_MAPPING = 10;
export const WS_ANY_CONTENT_FIELD_MAPPING = 11;
export const WS_ANY_ATTRIBUTES_FIELD_MAPPING = 12;
export const WS_ELEMENT_TYPE_MAPPING = 1;
export const WS_ATTRIBUTE_TYPE_MAPPING = 2;
export const WS_ELEMENT_CONTENT_TYPE_MAPPING = 3;
export const WS_ANY_ELEMENT_TYPE_MAPPING = 4;
export const WS_READ_REQUIRED_VALUE = 1;
export const WS_READ_REQUIRED_POINTER = 2;
export const WS_READ_OPTIONAL_POINTER = 3;
export const WS_READ_NILLABLE_POINTER = 4;
export const WS_READ_NILLABLE_VALUE = 5;
export const WS_WRITE_REQUIRED_VALUE = 1;
export const WS_WRITE_REQUIRED_POINTER = 2;
export const WS_WRITE_NILLABLE_VALUE = 3;
export const WS_WRITE_NILLABLE_POINTER = 4;
export const WS_SERVICE_HOST_ABORT = 0;
export const WS_SERVICE_CHANNEL_FAULTED = 1;
export const WS_NON_RPC_LITERAL_OPERATION = 0;
export const WS_RPC_LITERAL_OPERATION = 1;
export const WS_PARAMETER_TYPE_NORMAL = 0;
export const WS_PARAMETER_TYPE_ARRAY = 1;
export const WS_PARAMETER_TYPE_ARRAY_COUNT = 2;
export const WS_PARAMETER_TYPE_MESSAGES = 3;
export const WS_SERVICE_ENDPOINT_PROPERTY_ACCEPT_CHANNEL_CALLBACK = 0;
export const WS_SERVICE_ENDPOINT_PROPERTY_CLOSE_CHANNEL_CALLBACK = 1;
export const WS_SERVICE_ENDPOINT_PROPERTY_MAX_ACCEPTING_CHANNELS = 2;
export const WS_SERVICE_ENDPOINT_PROPERTY_MAX_CONCURRENCY = 3;
export const WS_SERVICE_ENDPOINT_PROPERTY_BODY_HEAP_MAX_SIZE = 4;
export const WS_SERVICE_ENDPOINT_PROPERTY_BODY_HEAP_TRIM_SIZE = 5;
export const WS_SERVICE_ENDPOINT_PROPERTY_MESSAGE_PROPERTIES = 6;
export const WS_SERVICE_ENDPOINT_PROPERTY_MAX_CALL_POOL_SIZE = 7;
export const WS_SERVICE_ENDPOINT_PROPERTY_MAX_CHANNEL_POOL_SIZE = 8;
export const WS_SERVICE_ENDPOINT_PROPERTY_LISTENER_PROPERTIES = 9;
export const WS_SERVICE_ENDPOINT_PROPERTY_CHECK_MUST_UNDERSTAND = 10;
export const WS_SERVICE_ENDPOINT_PROPERTY_METADATA_EXCHANGE_TYPE = 11;
export const WS_SERVICE_ENDPOINT_PROPERTY_METADATA = 12;
export const WS_SERVICE_ENDPOINT_PROPERTY_METADATA_EXCHANGE_URL_SUFFIX = 13;
export const WS_SERVICE_ENDPOINT_PROPERTY_MAX_CHANNELS = 14;
export const WS_METADATA_EXCHANGE_TYPE_NONE = 0;
export const WS_METADATA_EXCHANGE_TYPE_MEX = 1;
export const WS_METADATA_EXCHANGE_TYPE_HTTP_GET = 2;
export const WS_SERVICE_PROPERTY_HOST_USER_STATE = 0;
export const WS_SERVICE_PROPERTY_FAULT_DISCLOSURE = 1;
export const WS_SERVICE_PROPERTY_FAULT_LANGID = 2;
export const WS_SERVICE_PROPERTY_HOST_STATE = 3;
export const WS_SERVICE_PROPERTY_METADATA = 4;
export const WS_SERVICE_PROPERTY_CLOSE_TIMEOUT = 5;
export const WS_SERVICE_HOST_STATE_CREATED = 0;
export const WS_SERVICE_HOST_STATE_OPENING = 1;
export const WS_SERVICE_HOST_STATE_OPEN = 2;
export const WS_SERVICE_HOST_STATE_CLOSING = 3;
export const WS_SERVICE_HOST_STATE_CLOSED = 4;
export const WS_SERVICE_HOST_STATE_FAULTED = 5;
export const WS_SERVICE_PROXY_STATE_CREATED = 0;
export const WS_SERVICE_PROXY_STATE_OPENING = 1;
export const WS_SERVICE_PROXY_STATE_OPEN = 2;
export const WS_SERVICE_PROXY_STATE_CLOSING = 3;
export const WS_SERVICE_PROXY_STATE_CLOSED = 4;
export const WS_SERVICE_PROXY_STATE_FAULTED = 5;
export const WS_PROXY_PROPERTY_CALL_TIMEOUT = 0;
export const WS_PROXY_PROPERTY_MESSAGE_PROPERTIES = 1;
export const WS_PROXY_PROPERTY_MAX_CALL_POOL_SIZE = 2;
export const WS_PROXY_PROPERTY_STATE = 3;
export const WS_PROXY_PROPERTY_MAX_PENDING_CALLS = 4;
export const WS_PROXY_PROPERTY_MAX_CLOSE_TIMEOUT = 5;
export const WS_PROXY_FAULT_LANG_ID = 6;
export const WS_CALL_PROPERTY_CHECK_MUST_UNDERSTAND = 0;
export const WS_CALL_PROPERTY_SEND_MESSAGE_CONTEXT = 1;
export const WS_CALL_PROPERTY_RECEIVE_MESSAGE_CONTEXT = 2;
export const WS_CALL_PROPERTY_CALL_ID = 3;
export const WS_TRACE_API_NONE = `-1`;
export const WS_TRACE_API_START_READER_CANONICALIZATION = 0;
export const WS_TRACE_API_END_READER_CANONICALIZATION = 1;
export const WS_TRACE_API_START_WRITER_CANONICALIZATION = 2;
export const WS_TRACE_API_END_WRITER_CANONICALIZATION = 3;
export const WS_TRACE_API_CREATE_XML_BUFFER = 4;
export const WS_TRACE_API_REMOVE_NODE = 5;
export const WS_TRACE_API_CREATE_READER = 6;
export const WS_TRACE_API_SET_INPUT = 7;
export const WS_TRACE_API_SET_INPUT_TO_BUFFER = 8;
export const WS_TRACE_API_FREE_XML_READER = 9;
export const WS_TRACE_API_GET_READER_PROPERTY = 10;
export const WS_TRACE_API_GET_READER_NODE = 11;
export const WS_TRACE_API_FILL_READER = 12;
export const WS_TRACE_API_READ_START_ELEMENT = 13;
export const WS_TRACE_API_READ_TO_START_ELEMENT = 14;
export const WS_TRACE_API_READ_START_ATTRIBUTE = 15;
export const WS_TRACE_API_READ_END_ATTRIBUTE = 16;
export const WS_TRACE_API_READ_NODE = 17;
export const WS_TRACE_API_SKIP_NODE = 18;
export const WS_TRACE_API_READ_END_ELEMENT = 19;
export const WS_TRACE_API_FIND_ATTRIBUTE = 20;
export const WS_TRACE_API_READ_ELEMENT_VALUE = 21;
export const WS_TRACE_API_READ_CHARS = 22;
export const WS_TRACE_API_READ_CHARS_UTF8 = 23;
export const WS_TRACE_API_READ_BYTES = 24;
export const WS_TRACE_API_READ_ARRAY = 25;
export const WS_TRACE_API_GET_READER_POSITION = 26;
export const WS_TRACE_API_SET_READER_POSITION = 27;
export const WS_TRACE_API_MOVE_READER = 28;
export const WS_TRACE_API_CREATE_WRITER = 29;
export const WS_TRACE_API_FREE_XML_WRITER = 30;
export const WS_TRACE_API_SET_OUTPUT = 31;
export const WS_TRACE_API_SET_OUTPUT_TO_BUFFER = 32;
export const WS_TRACE_API_GET_WRITER_PROPERTY = 33;
export const WS_TRACE_API_FLUSH_WRITER = 34;
export const WS_TRACE_API_WRITE_START_ELEMENT = 35;
export const WS_TRACE_API_WRITE_END_START_ELEMENT = 36;
export const WS_TRACE_API_WRITE_XMLNS_ATTRIBUTE = 37;
export const WS_TRACE_API_WRITE_START_ATTRIBUTE = 38;
export const WS_TRACE_API_WRITE_END_ATTRIBUTE = 39;
export const WS_TRACE_API_WRITE_VALUE = 40;
export const WS_TRACE_API_WRITE_XML_BUFFER = 41;
export const WS_TRACE_API_READ_XML_BUFFER = 42;
export const WS_TRACE_API_WRITE_XML_BUFFER_TO_BYTES = 43;
export const WS_TRACE_API_READ_XML_BUFFER_FROM_BYTES = 44;
export const WS_TRACE_API_WRITE_ARRAY = 45;
export const WS_TRACE_API_WRITE_QUALIFIED_NAME = 46;
export const WS_TRACE_API_WRITE_CHARS = 47;
export const WS_TRACE_API_WRITE_CHARS_UTF8 = 48;
export const WS_TRACE_API_WRITE_BYTES = 49;
export const WS_TRACE_API_PUSH_BYTES = 50;
export const WS_TRACE_API_PULL_BYTES = 51;
export const WS_TRACE_API_WRITE_END_ELEMENT = 52;
export const WS_TRACE_API_WRITE_TEXT = 53;
export const WS_TRACE_API_WRITE_START_CDATA = 54;
export const WS_TRACE_API_WRITE_END_CDATA = 55;
export const WS_TRACE_API_WRITE_NODE = 56;
export const WS_TRACE_API_PREFIX_FROM_NAMESPACE = 57;
export const WS_TRACE_API_GET_WRITER_POSITION = 58;
export const WS_TRACE_API_SET_WRITER_POSITION = 59;
export const WS_TRACE_API_MOVE_WRITER = 60;
export const WS_TRACE_API_TRIM_XML_WHITESPACE = 61;
export const WS_TRACE_API_VERIFY_XML_NCNAME = 62;
export const WS_TRACE_API_XML_STRING_EQUALS = 63;
export const WS_TRACE_API_NAMESPACE_FROM_PREFIX = 64;
export const WS_TRACE_API_READ_QUALIFIED_NAME = 65;
export const WS_TRACE_API_GET_XML_ATTRIBUTE = 66;
export const WS_TRACE_API_COPY_NODE = 67;
export const WS_TRACE_API_ASYNC_EXECUTE = 68;
export const WS_TRACE_API_CREATE_CHANNEL = 69;
export const WS_TRACE_API_OPEN_CHANNEL = 70;
export const WS_TRACE_API_SEND_MESSAGE = 71;
export const WS_TRACE_API_RECEIVE_MESSAGE = 72;
export const WS_TRACE_API_REQUEST_REPLY = 73;
export const WS_TRACE_API_SEND_REPLY_MESSAGE = 74;
export const WS_TRACE_API_SEND_FAULT_MESSAGE_FOR_ERROR = 75;
export const WS_TRACE_API_GET_CHANNEL_PROPERTY = 76;
export const WS_TRACE_API_SET_CHANNEL_PROPERTY = 77;
export const WS_TRACE_API_WRITE_MESSAGE_START = 78;
export const WS_TRACE_API_WRITE_MESSAGE_END = 79;
export const WS_TRACE_API_READ_MESSAGE_START = 80;
export const WS_TRACE_API_READ_MESSAGE_END = 81;
export const WS_TRACE_API_CLOSE_CHANNEL = 82;
export const WS_TRACE_API_ABORT_CHANNEL = 83;
export const WS_TRACE_API_FREE_CHANNEL = 84;
export const WS_TRACE_API_RESET_CHANNEL = 85;
export const WS_TRACE_API_ABANDON_MESSAGE = 86;
export const WS_TRACE_API_SHUTDOWN_SESSION_CHANNEL = 87;
export const WS_TRACE_API_GET_CONTEXT_PROPERTY = 88;
export const WS_TRACE_API_GET_DICTIONARY = 89;
export const WS_TRACE_API_READ_ENDPOINT_ADDRESS_EXTENSION = 90;
export const WS_TRACE_API_CREATE_ERROR = 91;
export const WS_TRACE_API_ADD_ERROR_STRING = 92;
export const WS_TRACE_API_GET_ERROR_STRING = 93;
export const WS_TRACE_API_COPY_ERROR = 94;
export const WS_TRACE_API_GET_ERROR_PROPERTY = 95;
export const WS_TRACE_API_SET_ERROR_PROPERTY = 96;
export const WS_TRACE_API_RESET_ERROR = 97;
export const WS_TRACE_API_FREE_ERROR = 98;
export const WS_TRACE_API_GET_FAULT_ERROR_PROPERTY = 99;
export const WS_TRACE_API_SET_FAULT_ERROR_PROPERTY = 100;
export const WS_TRACE_API_CREATE_FAULT_FROM_ERROR = 101;
export const WS_TRACE_API_SET_FAULT_ERROR_DETAIL = 102;
export const WS_TRACE_API_GET_FAULT_ERROR_DETAIL = 103;
export const WS_TRACE_API_CREATE_HEAP = 104;
export const WS_TRACE_API_ALLOC = 105;
export const WS_TRACE_API_GET_HEAP_PROPERTY = 106;
export const WS_TRACE_API_RESET_HEAP = 107;
export const WS_TRACE_API_FREE_HEAP = 108;
export const WS_TRACE_API_CREATE_LISTENER = 109;
export const WS_TRACE_API_OPEN_LISTENER = 110;
export const WS_TRACE_API_ACCEPT_CHANNEL = 111;
export const WS_TRACE_API_CLOSE_LISTENER = 112;
export const WS_TRACE_API_ABORT_LISTENER = 113;
export const WS_TRACE_API_RESET_LISTENER = 114;
export const WS_TRACE_API_FREE_LISTENER = 115;
export const WS_TRACE_API_GET_LISTENER_PROPERTY = 116;
export const WS_TRACE_API_SET_LISTENER_PROPERTY = 117;
export const WS_TRACE_API_CREATE_CHANNEL_FOR_LISTENER = 118;
export const WS_TRACE_API_CREATE_MESSAGE = 119;
export const WS_TRACE_API_CREATE_MESSAGE_FOR_CHANNEL = 120;
export const WS_TRACE_API_INITIALIZE_MESSAGE = 121;
export const WS_TRACE_API_RESET_MESSAGE = 122;
export const WS_TRACE_API_FREE_MESSAGE = 123;
export const WS_TRACE_API_GET_HEADER_ATTRIBUTES = 124;
export const WS_TRACE_API_GET_HEADER = 125;
export const WS_TRACE_API_GET_CUSTOM_HEADER = 126;
export const WS_TRACE_API_REMOVE_HEADER = 127;
export const WS_TRACE_API_SET_HEADER = 128;
export const WS_TRACE_API_REMOVE_CUSTOM_HEADER = 129;
export const WS_TRACE_API_ADD_CUSTOM_HEADER = 130;
export const WS_TRACE_API_ADD_MAPPED_HEADER = 131;
export const WS_TRACE_API_REMOVE_MAPPED_HEADER = 132;
export const WS_TRACE_API_GET_MAPPED_HEADER = 133;
export const WS_TRACE_API_WRITE_BODY = 134;
export const WS_TRACE_API_READ_BODY = 135;
export const WS_TRACE_API_WRITE_ENVELOPE_START = 136;
export const WS_TRACE_API_WRITE_ENVELOPE_END = 137;
export const WS_TRACE_API_READ_ENVELOPE_START = 138;
export const WS_TRACE_API_READ_ENVELOPE_END = 139;
export const WS_TRACE_API_GET_MESSAGE_PROPERTY = 140;
export const WS_TRACE_API_SET_MESSAGE_PROPERTY = 141;
export const WS_TRACE_API_ADDRESS_MESSAGE = 142;
export const WS_TRACE_API_CHECK_MUST_UNDERSTAND_HEADERS = 143;
export const WS_TRACE_API_MARK_HEADER_AS_UNDERSTOOD = 144;
export const WS_TRACE_API_FILL_BODY = 145;
export const WS_TRACE_API_FLUSH_BODY = 146;
export const WS_TRACE_API_REQUEST_SECURITY_TOKEN = 147;
export const WS_TRACE_API_GET_SECURITY_TOKEN_PROPERTY = 148;
export const WS_TRACE_API_CREATE_XML_SECURITY_TOKEN = 149;
export const WS_TRACE_API_FREE_SECURITY_TOKEN = 150;
export const WS_TRACE_API_REVOKE_SECURITY_CONTEXT = 151;
export const WS_TRACE_API_GET_SECURITY_CONTEXT_PROPERTY = 152;
export const WS_TRACE_API_READ_ELEMENT_TYPE = 153;
export const WS_TRACE_API_READ_ATTRIBUTE_TYPE = 154;
export const WS_TRACE_API_READ_TYPE = 155;
export const WS_TRACE_API_WRITE_ELEMENT_TYPE = 156;
export const WS_TRACE_API_WRITE_ATTRIBUTE_TYPE = 157;
export const WS_TRACE_API_WRITE_TYPE = 158;
export const WS_TRACE_API_SERVICE_REGISTER_FOR_CANCEL = 159;
export const WS_TRACE_API_GET_SERVICE_HOST_PROPERTY = 160;
export const WS_TRACE_API_CREATE_SERVICE_HOST = 161;
export const WS_TRACE_API_OPEN_SERVICE_HOST = 162;
export const WS_TRACE_API_CLOSE_SERVICE_HOST = 163;
export const WS_TRACE_API_ABORT_SERVICE_HOST = 164;
export const WS_TRACE_API_FREE_SERVICE_HOST = 165;
export const WS_TRACE_API_RESET_SERVICE_HOST = 166;
export const WS_TRACE_API_GET_SERVICE_PROXY_PROPERTY = 167;
export const WS_TRACE_API_CREATE_SERVICE_PROXY = 168;
export const WS_TRACE_API_OPEN_SERVICE_PROXY = 169;
export const WS_TRACE_API_CLOSE_SERVICE_PROXY = 170;
export const WS_TRACE_API_ABORT_SERVICE_PROXY = 171;
export const WS_TRACE_API_FREE_SERVICE_PROXY = 172;
export const WS_TRACE_API_RESET_SERVICE_PROXY = 173;
export const WS_TRACE_API_ABORT_CALL = 174;
export const WS_TRACE_API_CALL = 175;
export const WS_TRACE_API_DECODE_URL = 176;
export const WS_TRACE_API_ENCODE_URL = 177;
export const WS_TRACE_API_COMBINE_URL = 178;
export const WS_TRACE_API_DATETIME_TO_FILETIME = 179;
export const WS_TRACE_API_FILETIME_TO_DATETIME = 180;
export const WS_TRACE_API_DUMP_MEMORY = 181;
export const WS_TRACE_API_SET_AUTOFAIL = 182;
export const WS_TRACE_API_CREATE_METADATA = 183;
export const WS_TRACE_API_READ_METADATA = 184;
export const WS_TRACE_API_FREE_METADATA = 185;
export const WS_TRACE_API_RESET_METADATA = 186;
export const WS_TRACE_API_GET_METADATA_PROPERTY = 187;
export const WS_TRACE_API_GET_MISSING_METADATA_DOCUMENT_ADDRESS = 188;
export const WS_TRACE_API_GET_METADATA_ENDPOINTS = 189;
export const WS_TRACE_API_MATCH_POLICY_ALTERNATIVE = 190;
export const WS_TRACE_API_GET_POLICY_PROPERTY = 191;
export const WS_TRACE_API_GET_POLICY_ALTERNATIVE_COUNT = 192;
export const WS_TRACE_API_WS_CREATE_SERVICE_PROXY_FROM_TEMPLATE = 193;
export const WS_TRACE_API_WS_CREATE_SERVICE_HOST_FROM_TEMPLATE = 194;
export const WS_URL_HTTP_SCHEME_TYPE = 0;
export const WS_URL_HTTPS_SCHEME_TYPE = 1;
export const WS_URL_NETTCP_SCHEME_TYPE = 2;
export const WS_URL_SOAPUDP_SCHEME_TYPE = 3;
export const WS_URL_NETPIPE_SCHEME_TYPE = 4;
export const WS_DATETIME_FORMAT_UTC = 0;
export const WS_DATETIME_FORMAT_LOCAL = 1;
export const WS_DATETIME_FORMAT_NONE = 2;
export const WS_METADATA_STATE_CREATED = 1;
export const WS_METADATA_STATE_RESOLVED = 2;
export const WS_METADATA_STATE_FAULTED = 3;
export const WS_METADATA_PROPERTY_STATE = 1;
export const WS_METADATA_PROPERTY_HEAP_PROPERTIES = 2;
export const WS_METADATA_PROPERTY_POLICY_PROPERTIES = 3;
export const WS_METADATA_PROPERTY_HEAP_REQUESTED_SIZE = 4;
export const WS_METADATA_PROPERTY_MAX_DOCUMENTS = 5;
export const WS_METADATA_PROPERTY_HOST_NAMES = 6;
export const WS_METADATA_PROPERTY_VERIFY_HOST_NAMES = 7;
export const WS_POLICY_STATE_CREATED = 1;
export const WS_POLICY_STATE_FAULTED = 2;
export const WS_POLICY_PROPERTY_STATE = 1;
export const WS_POLICY_PROPERTY_MAX_ALTERNATIVES = 2;
export const WS_POLICY_PROPERTY_MAX_DEPTH = 3;
export const WS_POLICY_PROPERTY_MAX_EXTENSIONS = 4;
export const WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT_TYPE = 1;
export const WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT_TYPE = 2;
export const WS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT_TYPE = 3;
export const WS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 4;
export const WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 5;
export const WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 6;
export const WS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 7;
export const WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 8;
export const WS_ENDPOINT_POLICY_EXTENSION_TYPE = 1;
export const WS_HTTP_BINDING_TEMPLATE_TYPE = 0;
export const WS_HTTP_SSL_BINDING_TEMPLATE_TYPE = 1;
export const WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE_TYPE = 2;
export const WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE_TYPE = 3;
export const WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE_TYPE = 4;
export const WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE_TYPE = 5;
export const WS_TCP_BINDING_TEMPLATE_TYPE = 6;
export const WS_TCP_SSPI_BINDING_TEMPLATE_TYPE = 7;
export const WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE_TYPE = 8;
export const WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE_TYPE = 9;
export const WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 10;
export const WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 11;
export const WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 12;
export const WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 13;

// Structs

export type BOOL = number;

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_DICTIONARY (size: 24)
 */
export interface WS_XML_DICTIONARY {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  strings: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  stringCount: number;
  /** Windows.Win32.Foundation.BOOL */
  isConst: boolean;
}

export const sizeofWS_XML_DICTIONARY = 24;

export function allocWS_XML_DICTIONARY(data?: Partial<WS_XML_DICTIONARY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_DICTIONARY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  // 0x08: pointer
  if (data?.strings !== undefined) view.setBigUint64(8, data.strings === null ? 0n : BigInt(util.toPointer(data.strings)), true);
  // 0x10: u32
  if (data?.stringCount !== undefined) view.setUint32(16, Number(data.stringCount), true);
  // 0x14: i32
  if (data?.isConst !== undefined) view.setInt32(20, Number(data.isConst), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_STRING (size: 32)
 */
export interface WS_XML_STRING {
  /** u32 */
  length: number;
  /** ptr */
  bytes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  dictionary: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  id: number;
}

export const sizeofWS_XML_STRING = 32;

export function allocWS_XML_STRING(data?: Partial<WS_XML_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.length !== undefined) view.setUint32(0, Number(data.length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bytes !== undefined) view.setBigUint64(8, data.bytes === null ? 0n : BigInt(util.toPointer(data.bytes)), true);
  // 0x10: pointer
  if (data?.dictionary !== undefined) view.setBigUint64(16, data.dictionary === null ? 0n : BigInt(util.toPointer(data.dictionary)), true);
  // 0x18: u32
  if (data?.id !== undefined) view.setUint32(24, Number(data.id), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_QNAME (size: 16)
 */
export interface WS_XML_QNAME {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_STRING */
  localName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_STRING */
  ns: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_XML_QNAME = 16;

export function allocWS_XML_QNAME(data?: Partial<WS_XML_QNAME>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_QNAME);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.localName !== undefined) view.setBigUint64(0, data.localName === null ? 0n : BigInt(util.toPointer(data.localName)), true);
  // 0x08: pointer
  if (data?.ns !== undefined) view.setBigUint64(8, data.ns === null ? 0n : BigInt(util.toPointer(data.ns)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_NODE_POSITION (size: 16)
 */
export interface WS_XML_NODE_POSITION {
  /** ptr */
  buffer: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  node: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_XML_NODE_POSITION = 16;

export function allocWS_XML_NODE_POSITION(data?: Partial<WS_XML_NODE_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_NODE_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.buffer !== undefined) view.setBigUint64(0, data.buffer === null ? 0n : BigInt(util.toPointer(data.buffer)), true);
  // 0x08: pointer
  if (data?.node !== undefined) view.setBigUint64(8, data.node === null ? 0n : BigInt(util.toPointer(data.node)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_PROPERTY (size: 24)
 */
export interface WS_XML_READER_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_PROPERTY_ID */
  id: WS_XML_READER_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_XML_READER_PROPERTY = 24;

export function allocWS_XML_READER_PROPERTY(data?: Partial<WS_XML_READER_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_READER_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_CANONICALIZATION_INCLUSIVE_PREFIXES (size: 16)
 */
export interface WS_XML_CANONICALIZATION_INCLUSIVE_PREFIXES {
  /** u32 */
  prefixCount: number;
  /** ptr */
  prefixes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_XML_CANONICALIZATION_INCLUSIVE_PREFIXES = 16;

export function allocWS_XML_CANONICALIZATION_INCLUSIVE_PREFIXES(data?: Partial<WS_XML_CANONICALIZATION_INCLUSIVE_PREFIXES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_CANONICALIZATION_INCLUSIVE_PREFIXES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.prefixCount !== undefined) view.setUint32(0, Number(data.prefixCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.prefixes !== undefined) view.setBigUint64(8, data.prefixes === null ? 0n : BigInt(util.toPointer(data.prefixes)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_CANONICALIZATION_PROPERTY (size: 24)
 */
export interface WS_XML_CANONICALIZATION_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_CANONICALIZATION_PROPERTY_ID */
  id: WS_XML_CANONICALIZATION_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_XML_CANONICALIZATION_PROPERTY = 24;

export function allocWS_XML_CANONICALIZATION_PROPERTY(data?: Partial<WS_XML_CANONICALIZATION_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_CANONICALIZATION_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_PROPERTY (size: 24)
 */
export interface WS_XML_WRITER_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_PROPERTY_ID */
  id: WS_XML_WRITER_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_XML_WRITER_PROPERTY = 24;

export function allocWS_XML_WRITER_PROPERTY(data?: Partial<WS_XML_WRITER_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_WRITER_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_BUFFER_PROPERTY (size: 24)
 */
export interface WS_XML_BUFFER_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_BUFFER_PROPERTY_ID */
  id: WS_XML_BUFFER_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_XML_BUFFER_PROPERTY = 24;

export function allocWS_XML_BUFFER_PROPERTY(data?: Partial<WS_XML_BUFFER_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_BUFFER_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT (size: 8)
 */
export interface WS_XML_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT_TYPE */
  textType: WS_XML_TEXT_TYPE;
}

export const sizeofWS_XML_TEXT = 8;

export function allocWS_XML_TEXT(data?: Partial<WS_XML_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.textType !== undefined) view.setInt32(0, Number(data.textType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_UTF8_TEXT (size: 16)
 */
export interface WS_XML_UTF8_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_STRING */
  value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_XML_UTF8_TEXT = 16;

export function allocWS_XML_UTF8_TEXT(data?: Partial<WS_XML_UTF8_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_UTF8_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_UTF16_TEXT (size: 24)
 */
export interface WS_XML_UTF16_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  bytes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  byteCount: number;
}

export const sizeofWS_XML_UTF16_TEXT = 24;

export function allocWS_XML_UTF16_TEXT(data?: Partial<WS_XML_UTF16_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_UTF16_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: pointer
  if (data?.bytes !== undefined) view.setBigUint64(8, data.bytes === null ? 0n : BigInt(util.toPointer(data.bytes)), true);
  // 0x10: u32
  if (data?.byteCount !== undefined) view.setUint32(16, Number(data.byteCount), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_BASE64_TEXT (size: 24)
 */
export interface WS_XML_BASE64_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  bytes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  length: number;
}

export const sizeofWS_XML_BASE64_TEXT = 24;

export function allocWS_XML_BASE64_TEXT(data?: Partial<WS_XML_BASE64_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_BASE64_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: pointer
  if (data?.bytes !== undefined) view.setBigUint64(8, data.bytes === null ? 0n : BigInt(util.toPointer(data.bytes)), true);
  // 0x10: u32
  if (data?.length !== undefined) view.setUint32(16, Number(data.length), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_BOOL_TEXT (size: 16)
 */
export interface WS_XML_BOOL_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  value: boolean;
}

export const sizeofWS_XML_BOOL_TEXT = 16;

export function allocWS_XML_BOOL_TEXT(data?: Partial<WS_XML_BOOL_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_BOOL_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: i32
  if (data?.value !== undefined) view.setInt32(8, Number(data.value), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_INT32_TEXT (size: 16)
 */
export interface WS_XML_INT32_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  value: number;
}

export const sizeofWS_XML_INT32_TEXT = 16;

export function allocWS_XML_INT32_TEXT(data?: Partial<WS_XML_INT32_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_INT32_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: i32
  if (data?.value !== undefined) view.setInt32(8, Number(data.value), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_INT64_TEXT (size: 16)
 */
export interface WS_XML_INT64_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  value: Deno.PointerValue;
}

export const sizeofWS_XML_INT64_TEXT = 16;

export function allocWS_XML_INT64_TEXT(data?: Partial<WS_XML_INT64_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_INT64_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: i64
  if (data?.value !== undefined) view.setBigInt64(8, BigInt(data.value), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_UINT64_TEXT (size: 16)
 */
export interface WS_XML_UINT64_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  value: Deno.PointerValue;
}

export const sizeofWS_XML_UINT64_TEXT = 16;

export function allocWS_XML_UINT64_TEXT(data?: Partial<WS_XML_UINT64_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_UINT64_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: u64
  if (data?.value !== undefined) view.setBigUint64(8, BigInt(data.value), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_FLOAT_TEXT (size: 16)
 */
export interface WS_XML_FLOAT_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  value: number;
}

export const sizeofWS_XML_FLOAT_TEXT = 16;

export function allocWS_XML_FLOAT_TEXT(data?: Partial<WS_XML_FLOAT_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_FLOAT_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: f32
  if (data?.value !== undefined) view.setFloat32(8, Number(data.value), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_DOUBLE_TEXT (size: 16)
 */
export interface WS_XML_DOUBLE_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** f64 */
  value: number;
}

export const sizeofWS_XML_DOUBLE_TEXT = 16;

export function allocWS_XML_DOUBLE_TEXT(data?: Partial<WS_XML_DOUBLE_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_DOUBLE_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: f64
  if (data?.value !== undefined) view.setFloat64(8, Number(data.value), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(util.toPointer(data.psid)), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(util.toPointer(data.pguid)), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(util.toPointer(data.pObjectTypes)), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(util.toPointer(data.pIpAddress)), true);
  return buf;
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Foundation.DECIMAL (size: 32)
 */
export interface DECIMAL {
  /** u16 */
  wReserved: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Hi32: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofDECIMAL = 32;

export function allocDECIMAL(data?: Partial<DECIMAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDECIMAL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wReserved !== undefined) view.setUint16(0, Number(data.wReserved), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(util.toPointer(data.Anonymous1)), true);
  // 0x10: u32
  if (data?.Hi32 !== undefined) view.setUint32(16, Number(data.Hi32), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(util.toPointer(data.Anonymous2)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_DECIMAL_TEXT (size: 16)
 */
export interface WS_XML_DECIMAL_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.DECIMAL */
  value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_XML_DECIMAL_TEXT = 16;

export function allocWS_XML_DECIMAL_TEXT(data?: Partial<WS_XML_DECIMAL_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_DECIMAL_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_GUID_TEXT (size: 16)
 */
export interface WS_XML_GUID_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_XML_GUID_TEXT = 16;

export function allocWS_XML_GUID_TEXT(data?: Partial<WS_XML_GUID_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_GUID_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_UNIQUE_ID_TEXT (size: 16)
 */
export interface WS_XML_UNIQUE_ID_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_XML_UNIQUE_ID_TEXT = 16;

export function allocWS_XML_UNIQUE_ID_TEXT(data?: Partial<WS_XML_UNIQUE_ID_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_UNIQUE_ID_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_DATETIME (size: 16)
 */
export interface WS_DATETIME {
  /** u64 */
  ticks: Deno.PointerValue;
  /** Windows.Win32.Networking.WindowsWebServices.WS_DATETIME_FORMAT */
  format: WS_DATETIME_FORMAT;
}

export const sizeofWS_DATETIME = 16;

export function allocWS_DATETIME(data?: Partial<WS_DATETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_DATETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ticks !== undefined) view.setBigUint64(0, BigInt(data.ticks), true);
  // 0x08: i32
  if (data?.format !== undefined) view.setInt32(8, Number(data.format), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_DATETIME_TEXT (size: 16)
 */
export interface WS_XML_DATETIME_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_DATETIME */
  value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_XML_DATETIME_TEXT = 16;

export function allocWS_XML_DATETIME_TEXT(data?: Partial<WS_XML_DATETIME_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_DATETIME_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TIMESPAN (size: 8)
 */
export interface WS_TIMESPAN {
  /** i64 */
  ticks: Deno.PointerValue;
}

export const sizeofWS_TIMESPAN = 8;

export function allocWS_TIMESPAN(data?: Partial<WS_TIMESPAN>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TIMESPAN);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.ticks !== undefined) view.setBigInt64(0, BigInt(data.ticks), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_TIMESPAN_TEXT (size: 16)
 */
export interface WS_XML_TIMESPAN_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_TIMESPAN */
  value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_XML_TIMESPAN_TEXT = 16;

export function allocWS_XML_TIMESPAN_TEXT(data?: Partial<WS_XML_TIMESPAN_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_TIMESPAN_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_QNAME_TEXT (size: 32)
 */
export interface WS_XML_QNAME_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  prefix: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  localName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ns: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_XML_QNAME_TEXT = 32;

export function allocWS_XML_QNAME_TEXT(data?: Partial<WS_XML_QNAME_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_QNAME_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: pointer
  if (data?.prefix !== undefined) view.setBigUint64(8, data.prefix === null ? 0n : BigInt(util.toPointer(data.prefix)), true);
  // 0x10: pointer
  if (data?.localName !== undefined) view.setBigUint64(16, data.localName === null ? 0n : BigInt(util.toPointer(data.localName)), true);
  // 0x18: pointer
  if (data?.ns !== undefined) view.setBigUint64(24, data.ns === null ? 0n : BigInt(util.toPointer(data.ns)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_LIST_TEXT (size: 24)
 */
export interface WS_XML_LIST_TEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT */
  text: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  itemCount: number;
  /** ptr */
  items: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_XML_LIST_TEXT = 24;

export function allocWS_XML_LIST_TEXT(data?: Partial<WS_XML_LIST_TEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_LIST_TEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: u32
  if (data?.itemCount !== undefined) view.setUint32(8, Number(data.itemCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.items !== undefined) view.setBigUint64(16, data.items === null ? 0n : BigInt(util.toPointer(data.items)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_NODE (size: 8)
 */
export interface WS_XML_NODE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_NODE_TYPE */
  nodeType: WS_XML_NODE_TYPE;
}

export const sizeofWS_XML_NODE = 8;

export function allocWS_XML_NODE(data?: Partial<WS_XML_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.nodeType !== undefined) view.setInt32(0, Number(data.nodeType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_ATTRIBUTE (size: 40)
 */
export interface WS_XML_ATTRIBUTE {
  /** u8 */
  singleQuote: number;
  /** u8 */
  isXmlNs: number;
  /** ptr */
  prefix: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  localName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ns: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_XML_ATTRIBUTE = 40;

export function allocWS_XML_ATTRIBUTE(data?: Partial<WS_XML_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.singleQuote !== undefined) view.setUint8(0, Number(data.singleQuote));
  // 0x01: u8
  if (data?.isXmlNs !== undefined) view.setUint8(1, Number(data.isXmlNs));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.prefix !== undefined) view.setBigUint64(8, data.prefix === null ? 0n : BigInt(util.toPointer(data.prefix)), true);
  // 0x10: pointer
  if (data?.localName !== undefined) view.setBigUint64(16, data.localName === null ? 0n : BigInt(util.toPointer(data.localName)), true);
  // 0x18: pointer
  if (data?.ns !== undefined) view.setBigUint64(24, data.ns === null ? 0n : BigInt(util.toPointer(data.ns)), true);
  // 0x20: pointer
  if (data?.value !== undefined) view.setBigUint64(32, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_ELEMENT_NODE (size: 56)
 */
export interface WS_XML_ELEMENT_NODE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_NODE */
  node: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  prefix: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  localName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ns: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  attributeCount: number;
  /** ptr */
  attributes: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  isEmpty: boolean;
}

export const sizeofWS_XML_ELEMENT_NODE = 56;

export function allocWS_XML_ELEMENT_NODE(data?: Partial<WS_XML_ELEMENT_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_ELEMENT_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.node !== undefined) view.setBigUint64(0, data.node === null ? 0n : BigInt(util.toPointer(data.node)), true);
  // 0x08: pointer
  if (data?.prefix !== undefined) view.setBigUint64(8, data.prefix === null ? 0n : BigInt(util.toPointer(data.prefix)), true);
  // 0x10: pointer
  if (data?.localName !== undefined) view.setBigUint64(16, data.localName === null ? 0n : BigInt(util.toPointer(data.localName)), true);
  // 0x18: pointer
  if (data?.ns !== undefined) view.setBigUint64(24, data.ns === null ? 0n : BigInt(util.toPointer(data.ns)), true);
  // 0x20: u32
  if (data?.attributeCount !== undefined) view.setUint32(32, Number(data.attributeCount), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.attributes !== undefined) view.setBigUint64(40, data.attributes === null ? 0n : BigInt(util.toPointer(data.attributes)), true);
  // 0x30: i32
  if (data?.isEmpty !== undefined) view.setInt32(48, Number(data.isEmpty), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_TEXT_NODE (size: 16)
 */
export interface WS_XML_TEXT_NODE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_NODE */
  node: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  text: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_XML_TEXT_NODE = 16;

export function allocWS_XML_TEXT_NODE(data?: Partial<WS_XML_TEXT_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_TEXT_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.node !== undefined) view.setBigUint64(0, data.node === null ? 0n : BigInt(util.toPointer(data.node)), true);
  // 0x08: pointer
  if (data?.text !== undefined) view.setBigUint64(8, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_COMMENT_NODE (size: 16)
 */
export interface WS_XML_COMMENT_NODE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_NODE */
  node: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_STRING */
  value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_XML_COMMENT_NODE = 16;

export function allocWS_XML_COMMENT_NODE(data?: Partial<WS_XML_COMMENT_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_COMMENT_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.node !== undefined) view.setBigUint64(0, data.node === null ? 0n : BigInt(util.toPointer(data.node)), true);
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_INPUT (size: 8)
 */
export interface WS_XML_READER_INPUT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_INPUT_TYPE */
  inputType: WS_XML_READER_INPUT_TYPE;
}

export const sizeofWS_XML_READER_INPUT = 8;

export function allocWS_XML_READER_INPUT(data?: Partial<WS_XML_READER_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_READER_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.inputType !== undefined) view.setInt32(0, Number(data.inputType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_BUFFER_INPUT (size: 24)
 */
export interface WS_XML_READER_BUFFER_INPUT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_INPUT */
  input: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  encodedData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  encodedDataSize: number;
}

export const sizeofWS_XML_READER_BUFFER_INPUT = 24;

export function allocWS_XML_READER_BUFFER_INPUT(data?: Partial<WS_XML_READER_BUFFER_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_READER_BUFFER_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.input !== undefined) view.setBigUint64(0, data.input === null ? 0n : BigInt(util.toPointer(data.input)), true);
  // 0x08: pointer
  if (data?.encodedData !== undefined) view.setBigUint64(8, data.encodedData === null ? 0n : BigInt(util.toPointer(data.encodedData)), true);
  // 0x10: u32
  if (data?.encodedDataSize !== undefined) view.setUint32(16, Number(data.encodedDataSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_STREAM_INPUT (size: 24)
 */
export interface WS_XML_READER_STREAM_INPUT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_INPUT */
  input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_READ_CALLBACK */
  readCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  readCallbackState: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_XML_READER_STREAM_INPUT = 24;

export function allocWS_XML_READER_STREAM_INPUT(data?: Partial<WS_XML_READER_STREAM_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_READER_STREAM_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.input !== undefined) view.setBigUint64(0, data.input === null ? 0n : BigInt(util.toPointer(data.input)), true);
  // 0x08: pointer
  if (data?.readCallback !== undefined) view.setBigUint64(8, data.readCallback === null ? 0n : BigInt(util.toPointer(data.readCallback)), true);
  // 0x10: pointer
  if (data?.readCallbackState !== undefined) view.setBigUint64(16, data.readCallbackState === null ? 0n : BigInt(util.toPointer(data.readCallbackState)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_ENCODING (size: 8)
 */
export interface WS_XML_READER_ENCODING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_ENCODING_TYPE */
  encodingType: WS_XML_READER_ENCODING_TYPE;
}

export const sizeofWS_XML_READER_ENCODING = 8;

export function allocWS_XML_READER_ENCODING(data?: Partial<WS_XML_READER_ENCODING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_READER_ENCODING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.encodingType !== undefined) view.setInt32(0, Number(data.encodingType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_TEXT_ENCODING (size: 16)
 */
export interface WS_XML_READER_TEXT_ENCODING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_ENCODING */
  encoding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHARSET */
  charSet: WS_CHARSET;
}

export const sizeofWS_XML_READER_TEXT_ENCODING = 16;

export function allocWS_XML_READER_TEXT_ENCODING(data?: Partial<WS_XML_READER_TEXT_ENCODING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_READER_TEXT_ENCODING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.encoding !== undefined) view.setBigUint64(0, data.encoding === null ? 0n : BigInt(util.toPointer(data.encoding)), true);
  // 0x08: i32
  if (data?.charSet !== undefined) view.setInt32(8, Number(data.charSet), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_BINARY_ENCODING (size: 24)
 */
export interface WS_XML_READER_BINARY_ENCODING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_ENCODING */
  encoding: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  staticDictionary: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  dynamicDictionary: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_XML_READER_BINARY_ENCODING = 24;

export function allocWS_XML_READER_BINARY_ENCODING(data?: Partial<WS_XML_READER_BINARY_ENCODING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_READER_BINARY_ENCODING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.encoding !== undefined) view.setBigUint64(0, data.encoding === null ? 0n : BigInt(util.toPointer(data.encoding)), true);
  // 0x08: pointer
  if (data?.staticDictionary !== undefined) view.setBigUint64(8, data.staticDictionary === null ? 0n : BigInt(util.toPointer(data.staticDictionary)), true);
  // 0x10: pointer
  if (data?.dynamicDictionary !== undefined) view.setBigUint64(16, data.dynamicDictionary === null ? 0n : BigInt(util.toPointer(data.dynamicDictionary)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_STRING (size: 16)
 */
export interface WS_STRING {
  /** u32 */
  length: number;
  /** Windows.Win32.Foundation.PWSTR */
  chars: string | null;
}

export const sizeofWS_STRING = 16;

export function allocWS_STRING(data?: Partial<WS_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.length !== undefined) view.setUint32(0, Number(data.length), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.chars !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.chars);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_MTOM_ENCODING (size: 48)
 */
export interface WS_XML_READER_MTOM_ENCODING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_ENCODING */
  encoding: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  textEncoding: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  readMimeHeader: boolean;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  startInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  boundary: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  startUri: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_XML_READER_MTOM_ENCODING = 48;

export function allocWS_XML_READER_MTOM_ENCODING(data?: Partial<WS_XML_READER_MTOM_ENCODING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_READER_MTOM_ENCODING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.encoding !== undefined) view.setBigUint64(0, data.encoding === null ? 0n : BigInt(util.toPointer(data.encoding)), true);
  // 0x08: pointer
  if (data?.textEncoding !== undefined) view.setBigUint64(8, data.textEncoding === null ? 0n : BigInt(util.toPointer(data.textEncoding)), true);
  // 0x10: i32
  if (data?.readMimeHeader !== undefined) view.setInt32(16, Number(data.readMimeHeader), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.startInfo !== undefined) view.setBigUint64(24, data.startInfo === null ? 0n : BigInt(util.toPointer(data.startInfo)), true);
  // 0x20: pointer
  if (data?.boundary !== undefined) view.setBigUint64(32, data.boundary === null ? 0n : BigInt(util.toPointer(data.boundary)), true);
  // 0x28: pointer
  if (data?.startUri !== undefined) view.setBigUint64(40, data.startUri === null ? 0n : BigInt(util.toPointer(data.startUri)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_RAW_ENCODING (size: 8)
 */
export interface WS_XML_READER_RAW_ENCODING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_ENCODING */
  encoding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_XML_READER_RAW_ENCODING = 8;

export function allocWS_XML_READER_RAW_ENCODING(data?: Partial<WS_XML_READER_RAW_ENCODING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_READER_RAW_ENCODING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.encoding !== undefined) view.setBigUint64(0, data.encoding === null ? 0n : BigInt(util.toPointer(data.encoding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_ENCODING (size: 8)
 */
export interface WS_XML_WRITER_ENCODING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_ENCODING_TYPE */
  encodingType: WS_XML_WRITER_ENCODING_TYPE;
}

export const sizeofWS_XML_WRITER_ENCODING = 8;

export function allocWS_XML_WRITER_ENCODING(data?: Partial<WS_XML_WRITER_ENCODING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_WRITER_ENCODING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.encodingType !== undefined) view.setInt32(0, Number(data.encodingType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_TEXT_ENCODING (size: 16)
 */
export interface WS_XML_WRITER_TEXT_ENCODING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_ENCODING */
  encoding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHARSET */
  charSet: WS_CHARSET;
}

export const sizeofWS_XML_WRITER_TEXT_ENCODING = 16;

export function allocWS_XML_WRITER_TEXT_ENCODING(data?: Partial<WS_XML_WRITER_TEXT_ENCODING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_WRITER_TEXT_ENCODING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.encoding !== undefined) view.setBigUint64(0, data.encoding === null ? 0n : BigInt(util.toPointer(data.encoding)), true);
  // 0x08: i32
  if (data?.charSet !== undefined) view.setInt32(8, Number(data.charSet), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_BINARY_ENCODING (size: 32)
 */
export interface WS_XML_WRITER_BINARY_ENCODING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_ENCODING */
  encoding: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  staticDictionary: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_DYNAMIC_STRING_CALLBACK */
  dynamicStringCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  dynamicStringCallbackState: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_XML_WRITER_BINARY_ENCODING = 32;

export function allocWS_XML_WRITER_BINARY_ENCODING(data?: Partial<WS_XML_WRITER_BINARY_ENCODING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_WRITER_BINARY_ENCODING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.encoding !== undefined) view.setBigUint64(0, data.encoding === null ? 0n : BigInt(util.toPointer(data.encoding)), true);
  // 0x08: pointer
  if (data?.staticDictionary !== undefined) view.setBigUint64(8, data.staticDictionary === null ? 0n : BigInt(util.toPointer(data.staticDictionary)), true);
  // 0x10: pointer
  if (data?.dynamicStringCallback !== undefined) view.setBigUint64(16, data.dynamicStringCallback === null ? 0n : BigInt(util.toPointer(data.dynamicStringCallback)), true);
  // 0x18: pointer
  if (data?.dynamicStringCallbackState !== undefined) view.setBigUint64(24, data.dynamicStringCallbackState === null ? 0n : BigInt(util.toPointer(data.dynamicStringCallbackState)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_MTOM_ENCODING (size: 56)
 */
export interface WS_XML_WRITER_MTOM_ENCODING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_ENCODING */
  encoding: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  textEncoding: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.BOOL */
  writeMimeHeader: boolean;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  boundary: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  startInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  startUri: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  maxInlineByteCount: number;
}

export const sizeofWS_XML_WRITER_MTOM_ENCODING = 56;

export function allocWS_XML_WRITER_MTOM_ENCODING(data?: Partial<WS_XML_WRITER_MTOM_ENCODING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_WRITER_MTOM_ENCODING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.encoding !== undefined) view.setBigUint64(0, data.encoding === null ? 0n : BigInt(util.toPointer(data.encoding)), true);
  // 0x08: pointer
  if (data?.textEncoding !== undefined) view.setBigUint64(8, data.textEncoding === null ? 0n : BigInt(util.toPointer(data.textEncoding)), true);
  // 0x10: i32
  if (data?.writeMimeHeader !== undefined) view.setInt32(16, Number(data.writeMimeHeader), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.boundary !== undefined) view.setBigUint64(24, data.boundary === null ? 0n : BigInt(util.toPointer(data.boundary)), true);
  // 0x20: pointer
  if (data?.startInfo !== undefined) view.setBigUint64(32, data.startInfo === null ? 0n : BigInt(util.toPointer(data.startInfo)), true);
  // 0x28: pointer
  if (data?.startUri !== undefined) view.setBigUint64(40, data.startUri === null ? 0n : BigInt(util.toPointer(data.startUri)), true);
  // 0x30: u32
  if (data?.maxInlineByteCount !== undefined) view.setUint32(48, Number(data.maxInlineByteCount), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_RAW_ENCODING (size: 8)
 */
export interface WS_XML_WRITER_RAW_ENCODING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_ENCODING */
  encoding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_XML_WRITER_RAW_ENCODING = 8;

export function allocWS_XML_WRITER_RAW_ENCODING(data?: Partial<WS_XML_WRITER_RAW_ENCODING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_WRITER_RAW_ENCODING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.encoding !== undefined) view.setBigUint64(0, data.encoding === null ? 0n : BigInt(util.toPointer(data.encoding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_OUTPUT (size: 8)
 */
export interface WS_XML_WRITER_OUTPUT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_OUTPUT_TYPE */
  outputType: WS_XML_WRITER_OUTPUT_TYPE;
}

export const sizeofWS_XML_WRITER_OUTPUT = 8;

export function allocWS_XML_WRITER_OUTPUT(data?: Partial<WS_XML_WRITER_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_WRITER_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.outputType !== undefined) view.setInt32(0, Number(data.outputType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_BUFFER_OUTPUT (size: 8)
 */
export interface WS_XML_WRITER_BUFFER_OUTPUT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_OUTPUT */
  output: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_XML_WRITER_BUFFER_OUTPUT = 8;

export function allocWS_XML_WRITER_BUFFER_OUTPUT(data?: Partial<WS_XML_WRITER_BUFFER_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_WRITER_BUFFER_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.output !== undefined) view.setBigUint64(0, data.output === null ? 0n : BigInt(util.toPointer(data.output)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_STREAM_OUTPUT (size: 24)
 */
export interface WS_XML_WRITER_STREAM_OUTPUT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_OUTPUT */
  output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_WRITE_CALLBACK */
  writeCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  writeCallbackState: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_XML_WRITER_STREAM_OUTPUT = 24;

export function allocWS_XML_WRITER_STREAM_OUTPUT(data?: Partial<WS_XML_WRITER_STREAM_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_WRITER_STREAM_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.output !== undefined) view.setBigUint64(0, data.output === null ? 0n : BigInt(util.toPointer(data.output)), true);
  // 0x08: pointer
  if (data?.writeCallback !== undefined) view.setBigUint64(8, data.writeCallback === null ? 0n : BigInt(util.toPointer(data.writeCallback)), true);
  // 0x10: pointer
  if (data?.writeCallbackState !== undefined) view.setBigUint64(16, data.writeCallbackState === null ? 0n : BigInt(util.toPointer(data.writeCallbackState)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_PROPERTIES (size: 16)
 */
export interface WS_XML_WRITER_PROPERTIES {
  /** ptr */
  properties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyCount: number;
}

export const sizeofWS_XML_WRITER_PROPERTIES = 16;

export function allocWS_XML_WRITER_PROPERTIES(data?: Partial<WS_XML_WRITER_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_WRITER_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.properties !== undefined) view.setBigUint64(0, data.properties === null ? 0n : BigInt(util.toPointer(data.properties)), true);
  // 0x08: u32
  if (data?.propertyCount !== undefined) view.setUint32(8, Number(data.propertyCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_PROPERTIES (size: 16)
 */
export interface WS_XML_READER_PROPERTIES {
  /** ptr */
  properties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyCount: number;
}

export const sizeofWS_XML_READER_PROPERTIES = 16;

export function allocWS_XML_READER_PROPERTIES(data?: Partial<WS_XML_READER_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_READER_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.properties !== undefined) view.setBigUint64(0, data.properties === null ? 0n : BigInt(util.toPointer(data.properties)), true);
  // 0x08: u32
  if (data?.propertyCount !== undefined) view.setUint32(8, Number(data.propertyCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ASYNC_CONTEXT (size: 16)
 */
export interface WS_ASYNC_CONTEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ASYNC_CALLBACK */
  callback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  callbackState: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_ASYNC_CONTEXT = 16;

export function allocWS_ASYNC_CONTEXT(data?: Partial<WS_ASYNC_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ASYNC_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.callback !== undefined) view.setBigUint64(0, data.callback === null ? 0n : BigInt(util.toPointer(data.callback)), true);
  // 0x08: pointer
  if (data?.callbackState !== undefined) view.setBigUint64(8, data.callbackState === null ? 0n : BigInt(util.toPointer(data.callbackState)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ASYNC_STATE (size: 40)
 */
export interface WS_ASYNC_STATE {
  /** ptr */
  internal0: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  internal1: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  internal2: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  internal3: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  internal4: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_ASYNC_STATE = 40;

export function allocWS_ASYNC_STATE(data?: Partial<WS_ASYNC_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ASYNC_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.internal0 !== undefined) view.setBigUint64(0, data.internal0 === null ? 0n : BigInt(util.toPointer(data.internal0)), true);
  // 0x08: pointer
  if (data?.internal1 !== undefined) view.setBigUint64(8, data.internal1 === null ? 0n : BigInt(util.toPointer(data.internal1)), true);
  // 0x10: pointer
  if (data?.internal2 !== undefined) view.setBigUint64(16, data.internal2 === null ? 0n : BigInt(util.toPointer(data.internal2)), true);
  // 0x18: pointer
  if (data?.internal3 !== undefined) view.setBigUint64(24, data.internal3 === null ? 0n : BigInt(util.toPointer(data.internal3)), true);
  // 0x20: pointer
  if (data?.internal4 !== undefined) view.setBigUint64(32, data.internal4 === null ? 0n : BigInt(util.toPointer(data.internal4)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ASYNC_OPERATION (size: 8)
 */
export interface WS_ASYNC_OPERATION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ASYNC_FUNCTION */
  function__: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_ASYNC_OPERATION = 8;

export function allocWS_ASYNC_OPERATION(data?: Partial<WS_ASYNC_OPERATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ASYNC_OPERATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.function__ !== undefined) view.setBigUint64(0, data.function__ === null ? 0n : BigInt(util.toPointer(data.function__)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTY (size: 24)
 */
export interface WS_CHANNEL_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTY_ID */
  id: WS_CHANNEL_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_CHANNEL_PROPERTY = 24;

export function allocWS_CHANNEL_PROPERTY(data?: Partial<WS_CHANNEL_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CHANNEL_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CUSTOM_HTTP_PROXY (size: 16)
 */
export interface WS_CUSTOM_HTTP_PROXY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  servers: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  bypass: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_CUSTOM_HTTP_PROXY = 16;

export function allocWS_CUSTOM_HTTP_PROXY(data?: Partial<WS_CUSTOM_HTTP_PROXY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CUSTOM_HTTP_PROXY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.servers !== undefined) view.setBigUint64(0, data.servers === null ? 0n : BigInt(util.toPointer(data.servers)), true);
  // 0x08: pointer
  if (data?.bypass !== undefined) view.setBigUint64(8, data.bypass === null ? 0n : BigInt(util.toPointer(data.bypass)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES (size: 16)
 */
export interface WS_CHANNEL_PROPERTIES {
  /** ptr */
  properties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyCount: number;
}

export const sizeofWS_CHANNEL_PROPERTIES = 16;

export function allocWS_CHANNEL_PROPERTIES(data?: Partial<WS_CHANNEL_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CHANNEL_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.properties !== undefined) view.setBigUint64(0, data.properties === null ? 0n : BigInt(util.toPointer(data.properties)), true);
  // 0x08: u32
  if (data?.propertyCount !== undefined) view.setUint32(8, Number(data.propertyCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CUSTOM_CHANNEL_CALLBACKS (size: 112)
 */
export interface WS_CUSTOM_CHANNEL_CALLBACKS {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CREATE_CHANNEL_CALLBACK */
  createChannelCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_FREE_CHANNEL_CALLBACK */
  freeChannelCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_RESET_CHANNEL_CALLBACK */
  resetChannelCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_OPEN_CHANNEL_CALLBACK */
  openChannelCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_CLOSE_CHANNEL_CALLBACK */
  closeChannelCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_ABORT_CHANNEL_CALLBACK */
  abortChannelCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_GET_CHANNEL_PROPERTY_CALLBACK */
  getChannelPropertyCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SET_CHANNEL_PROPERTY_CALLBACK */
  setChannelPropertyCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_WRITE_MESSAGE_START_CALLBACK */
  writeMessageStartCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_WRITE_MESSAGE_END_CALLBACK */
  writeMessageEndCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_READ_MESSAGE_START_CALLBACK */
  readMessageStartCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_READ_MESSAGE_END_CALLBACK */
  readMessageEndCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_ABANDON_MESSAGE_CALLBACK */
  abandonMessageCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SHUTDOWN_SESSION_CHANNEL_CALLBACK */
  shutdownSessionChannelCallback: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_CUSTOM_CHANNEL_CALLBACKS = 112;

export function allocWS_CUSTOM_CHANNEL_CALLBACKS(data?: Partial<WS_CUSTOM_CHANNEL_CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CUSTOM_CHANNEL_CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.createChannelCallback !== undefined) view.setBigUint64(0, data.createChannelCallback === null ? 0n : BigInt(util.toPointer(data.createChannelCallback)), true);
  // 0x08: pointer
  if (data?.freeChannelCallback !== undefined) view.setBigUint64(8, data.freeChannelCallback === null ? 0n : BigInt(util.toPointer(data.freeChannelCallback)), true);
  // 0x10: pointer
  if (data?.resetChannelCallback !== undefined) view.setBigUint64(16, data.resetChannelCallback === null ? 0n : BigInt(util.toPointer(data.resetChannelCallback)), true);
  // 0x18: pointer
  if (data?.openChannelCallback !== undefined) view.setBigUint64(24, data.openChannelCallback === null ? 0n : BigInt(util.toPointer(data.openChannelCallback)), true);
  // 0x20: pointer
  if (data?.closeChannelCallback !== undefined) view.setBigUint64(32, data.closeChannelCallback === null ? 0n : BigInt(util.toPointer(data.closeChannelCallback)), true);
  // 0x28: pointer
  if (data?.abortChannelCallback !== undefined) view.setBigUint64(40, data.abortChannelCallback === null ? 0n : BigInt(util.toPointer(data.abortChannelCallback)), true);
  // 0x30: pointer
  if (data?.getChannelPropertyCallback !== undefined) view.setBigUint64(48, data.getChannelPropertyCallback === null ? 0n : BigInt(util.toPointer(data.getChannelPropertyCallback)), true);
  // 0x38: pointer
  if (data?.setChannelPropertyCallback !== undefined) view.setBigUint64(56, data.setChannelPropertyCallback === null ? 0n : BigInt(util.toPointer(data.setChannelPropertyCallback)), true);
  // 0x40: pointer
  if (data?.writeMessageStartCallback !== undefined) view.setBigUint64(64, data.writeMessageStartCallback === null ? 0n : BigInt(util.toPointer(data.writeMessageStartCallback)), true);
  // 0x48: pointer
  if (data?.writeMessageEndCallback !== undefined) view.setBigUint64(72, data.writeMessageEndCallback === null ? 0n : BigInt(util.toPointer(data.writeMessageEndCallback)), true);
  // 0x50: pointer
  if (data?.readMessageStartCallback !== undefined) view.setBigUint64(80, data.readMessageStartCallback === null ? 0n : BigInt(util.toPointer(data.readMessageStartCallback)), true);
  // 0x58: pointer
  if (data?.readMessageEndCallback !== undefined) view.setBigUint64(88, data.readMessageEndCallback === null ? 0n : BigInt(util.toPointer(data.readMessageEndCallback)), true);
  // 0x60: pointer
  if (data?.abandonMessageCallback !== undefined) view.setBigUint64(96, data.abandonMessageCallback === null ? 0n : BigInt(util.toPointer(data.abandonMessageCallback)), true);
  // 0x68: pointer
  if (data?.shutdownSessionChannelCallback !== undefined) view.setBigUint64(104, data.shutdownSessionChannelCallback === null ? 0n : BigInt(util.toPointer(data.shutdownSessionChannelCallback)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_HEADER_MAPPING (size: 16)
 */
export interface WS_HTTP_HEADER_MAPPING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_STRING */
  headerName: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  headerMappingOptions: number;
}

export const sizeofWS_HTTP_HEADER_MAPPING = 16;

export function allocWS_HTTP_HEADER_MAPPING(data?: Partial<WS_HTTP_HEADER_MAPPING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_HEADER_MAPPING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.headerName !== undefined) view.setBigUint64(0, data.headerName === null ? 0n : BigInt(util.toPointer(data.headerName)), true);
  // 0x08: u32
  if (data?.headerMappingOptions !== undefined) view.setUint32(8, Number(data.headerMappingOptions), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_MESSAGE_MAPPING (size: 40)
 */
export interface WS_HTTP_MESSAGE_MAPPING {
  /** u32 */
  requestMappingOptions: number;
  /** u32 */
  responseMappingOptions: number;
  /** ptr */
  requestHeaderMappings: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  requestHeaderMappingCount: number;
  /** ptr */
  responseHeaderMappings: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  responseHeaderMappingCount: number;
}

export const sizeofWS_HTTP_MESSAGE_MAPPING = 40;

export function allocWS_HTTP_MESSAGE_MAPPING(data?: Partial<WS_HTTP_MESSAGE_MAPPING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_MESSAGE_MAPPING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.requestMappingOptions !== undefined) view.setUint32(0, Number(data.requestMappingOptions), true);
  // 0x04: u32
  if (data?.responseMappingOptions !== undefined) view.setUint32(4, Number(data.responseMappingOptions), true);
  // 0x08: pointer
  if (data?.requestHeaderMappings !== undefined) view.setBigUint64(8, data.requestHeaderMappings === null ? 0n : BigInt(util.toPointer(data.requestHeaderMappings)), true);
  // 0x10: u32
  if (data?.requestHeaderMappingCount !== undefined) view.setUint32(16, Number(data.requestHeaderMappingCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.responseHeaderMappings !== undefined) view.setBigUint64(24, data.responseHeaderMappings === null ? 0n : BigInt(util.toPointer(data.responseHeaderMappings)), true);
  // 0x20: u32
  if (data?.responseHeaderMappingCount !== undefined) view.setUint32(32, Number(data.responseHeaderMappingCount), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ELEMENT_DESCRIPTION (size: 32)
 */
export interface WS_ELEMENT_DESCRIPTION {
  /** ptr */
  elementLocalName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  elementNs: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_TYPE */
  type: WS_TYPE;
  /** ptr */
  typeDescription: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_ELEMENT_DESCRIPTION = 32;

export function allocWS_ELEMENT_DESCRIPTION(data?: Partial<WS_ELEMENT_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ELEMENT_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.elementLocalName !== undefined) view.setBigUint64(0, data.elementLocalName === null ? 0n : BigInt(util.toPointer(data.elementLocalName)), true);
  // 0x08: pointer
  if (data?.elementNs !== undefined) view.setBigUint64(8, data.elementNs === null ? 0n : BigInt(util.toPointer(data.elementNs)), true);
  // 0x10: i32
  if (data?.type !== undefined) view.setInt32(16, Number(data.type), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.typeDescription !== undefined) view.setBigUint64(24, data.typeDescription === null ? 0n : BigInt(util.toPointer(data.typeDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_DESCRIPTION (size: 16)
 */
export interface WS_MESSAGE_DESCRIPTION {
  /** ptr */
  action: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  bodyElementDescription: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_MESSAGE_DESCRIPTION = 16;

export function allocWS_MESSAGE_DESCRIPTION(data?: Partial<WS_MESSAGE_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_MESSAGE_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.action !== undefined) view.setBigUint64(0, data.action === null ? 0n : BigInt(util.toPointer(data.action)), true);
  // 0x08: pointer
  if (data?.bodyElementDescription !== undefined) view.setBigUint64(8, data.bodyElementDescription === null ? 0n : BigInt(util.toPointer(data.bodyElementDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_ENCODER (size: 56)
 */
export interface WS_CHANNEL_ENCODER {
  /** ptr */
  createContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_CREATE_ENCODER_CALLBACK */
  createEncoderCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENCODER_GET_CONTENT_TYPE_CALLBACK */
  encoderGetContentTypeCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENCODER_START_CALLBACK */
  encoderStartCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENCODER_ENCODE_CALLBACK */
  encoderEncodeCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENCODER_END_CALLBACK */
  encoderEndCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_FREE_ENCODER_CALLBACK */
  freeEncoderCallback: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_CHANNEL_ENCODER = 56;

export function allocWS_CHANNEL_ENCODER(data?: Partial<WS_CHANNEL_ENCODER>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CHANNEL_ENCODER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.createContext !== undefined) view.setBigUint64(0, data.createContext === null ? 0n : BigInt(util.toPointer(data.createContext)), true);
  // 0x08: pointer
  if (data?.createEncoderCallback !== undefined) view.setBigUint64(8, data.createEncoderCallback === null ? 0n : BigInt(util.toPointer(data.createEncoderCallback)), true);
  // 0x10: pointer
  if (data?.encoderGetContentTypeCallback !== undefined) view.setBigUint64(16, data.encoderGetContentTypeCallback === null ? 0n : BigInt(util.toPointer(data.encoderGetContentTypeCallback)), true);
  // 0x18: pointer
  if (data?.encoderStartCallback !== undefined) view.setBigUint64(24, data.encoderStartCallback === null ? 0n : BigInt(util.toPointer(data.encoderStartCallback)), true);
  // 0x20: pointer
  if (data?.encoderEncodeCallback !== undefined) view.setBigUint64(32, data.encoderEncodeCallback === null ? 0n : BigInt(util.toPointer(data.encoderEncodeCallback)), true);
  // 0x28: pointer
  if (data?.encoderEndCallback !== undefined) view.setBigUint64(40, data.encoderEndCallback === null ? 0n : BigInt(util.toPointer(data.encoderEndCallback)), true);
  // 0x30: pointer
  if (data?.freeEncoderCallback !== undefined) view.setBigUint64(48, data.freeEncoderCallback === null ? 0n : BigInt(util.toPointer(data.freeEncoderCallback)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_DECODER (size: 56)
 */
export interface WS_CHANNEL_DECODER {
  /** ptr */
  createContext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_CREATE_DECODER_CALLBACK */
  createDecoderCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_DECODER_GET_CONTENT_TYPE_CALLBACK */
  decoderGetContentTypeCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_DECODER_START_CALLBACK */
  decoderStartCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_DECODER_DECODE_CALLBACK */
  decoderDecodeCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_DECODER_END_CALLBACK */
  decoderEndCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_FREE_DECODER_CALLBACK */
  freeDecoderCallback: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_CHANNEL_DECODER = 56;

export function allocWS_CHANNEL_DECODER(data?: Partial<WS_CHANNEL_DECODER>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CHANNEL_DECODER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.createContext !== undefined) view.setBigUint64(0, data.createContext === null ? 0n : BigInt(util.toPointer(data.createContext)), true);
  // 0x08: pointer
  if (data?.createDecoderCallback !== undefined) view.setBigUint64(8, data.createDecoderCallback === null ? 0n : BigInt(util.toPointer(data.createDecoderCallback)), true);
  // 0x10: pointer
  if (data?.decoderGetContentTypeCallback !== undefined) view.setBigUint64(16, data.decoderGetContentTypeCallback === null ? 0n : BigInt(util.toPointer(data.decoderGetContentTypeCallback)), true);
  // 0x18: pointer
  if (data?.decoderStartCallback !== undefined) view.setBigUint64(24, data.decoderStartCallback === null ? 0n : BigInt(util.toPointer(data.decoderStartCallback)), true);
  // 0x20: pointer
  if (data?.decoderDecodeCallback !== undefined) view.setBigUint64(32, data.decoderDecodeCallback === null ? 0n : BigInt(util.toPointer(data.decoderDecodeCallback)), true);
  // 0x28: pointer
  if (data?.decoderEndCallback !== undefined) view.setBigUint64(40, data.decoderEndCallback === null ? 0n : BigInt(util.toPointer(data.decoderEndCallback)), true);
  // 0x30: pointer
  if (data?.freeDecoderCallback !== undefined) view.setBigUint64(48, data.freeDecoderCallback === null ? 0n : BigInt(util.toPointer(data.freeDecoderCallback)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_REDIRECT_CALLBACK_CONTEXT (size: 16)
 */
export interface WS_HTTP_REDIRECT_CALLBACK_CONTEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_HTTP_REDIRECT_CALLBACK */
  callback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  state: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_HTTP_REDIRECT_CALLBACK_CONTEXT = 16;

export function allocWS_HTTP_REDIRECT_CALLBACK_CONTEXT(data?: Partial<WS_HTTP_REDIRECT_CALLBACK_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_REDIRECT_CALLBACK_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.callback !== undefined) view.setBigUint64(0, data.callback === null ? 0n : BigInt(util.toPointer(data.callback)), true);
  // 0x08: pointer
  if (data?.state !== undefined) view.setBigUint64(8, data.state === null ? 0n : BigInt(util.toPointer(data.state)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_IDENTITY (size: 8)
 */
export interface WS_ENDPOINT_IDENTITY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_IDENTITY_TYPE */
  identityType: WS_ENDPOINT_IDENTITY_TYPE;
}

export const sizeofWS_ENDPOINT_IDENTITY = 8;

export function allocWS_ENDPOINT_IDENTITY(data?: Partial<WS_ENDPOINT_IDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ENDPOINT_IDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.identityType !== undefined) view.setInt32(0, Number(data.identityType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_ADDRESS (size: 32)
 */
export interface WS_ENDPOINT_ADDRESS {
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  url: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  headers: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  extensions: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  identity: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_ENDPOINT_ADDRESS = 32;

export function allocWS_ENDPOINT_ADDRESS(data?: Partial<WS_ENDPOINT_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ENDPOINT_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.url !== undefined) view.setBigUint64(0, data.url === null ? 0n : BigInt(util.toPointer(data.url)), true);
  // 0x08: pointer
  if (data?.headers !== undefined) view.setBigUint64(8, data.headers === null ? 0n : BigInt(util.toPointer(data.headers)), true);
  // 0x10: pointer
  if (data?.extensions !== undefined) view.setBigUint64(16, data.extensions === null ? 0n : BigInt(util.toPointer(data.extensions)), true);
  // 0x18: pointer
  if (data?.identity !== undefined) view.setBigUint64(24, data.identity === null ? 0n : BigInt(util.toPointer(data.identity)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_DNS_ENDPOINT_IDENTITY (size: 16)
 */
export interface WS_DNS_ENDPOINT_IDENTITY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_IDENTITY */
  identity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  dns: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_DNS_ENDPOINT_IDENTITY = 16;

export function allocWS_DNS_ENDPOINT_IDENTITY(data?: Partial<WS_DNS_ENDPOINT_IDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_DNS_ENDPOINT_IDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.identity !== undefined) view.setBigUint64(0, data.identity === null ? 0n : BigInt(util.toPointer(data.identity)), true);
  // 0x08: pointer
  if (data?.dns !== undefined) view.setBigUint64(8, data.dns === null ? 0n : BigInt(util.toPointer(data.dns)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_UPN_ENDPOINT_IDENTITY (size: 16)
 */
export interface WS_UPN_ENDPOINT_IDENTITY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_IDENTITY */
  identity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  upn: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_UPN_ENDPOINT_IDENTITY = 16;

export function allocWS_UPN_ENDPOINT_IDENTITY(data?: Partial<WS_UPN_ENDPOINT_IDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_UPN_ENDPOINT_IDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.identity !== undefined) view.setBigUint64(0, data.identity === null ? 0n : BigInt(util.toPointer(data.identity)), true);
  // 0x08: pointer
  if (data?.upn !== undefined) view.setBigUint64(8, data.upn === null ? 0n : BigInt(util.toPointer(data.upn)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SPN_ENDPOINT_IDENTITY (size: 16)
 */
export interface WS_SPN_ENDPOINT_IDENTITY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_IDENTITY */
  identity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  spn: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SPN_ENDPOINT_IDENTITY = 16;

export function allocWS_SPN_ENDPOINT_IDENTITY(data?: Partial<WS_SPN_ENDPOINT_IDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SPN_ENDPOINT_IDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.identity !== undefined) view.setBigUint64(0, data.identity === null ? 0n : BigInt(util.toPointer(data.identity)), true);
  // 0x08: pointer
  if (data?.spn !== undefined) view.setBigUint64(8, data.spn === null ? 0n : BigInt(util.toPointer(data.spn)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_BYTES (size: 16)
 */
export interface WS_BYTES {
  /** u32 */
  length: number;
  /** ptr */
  bytes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_BYTES = 16;

export function allocWS_BYTES(data?: Partial<WS_BYTES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_BYTES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.length !== undefined) view.setUint32(0, Number(data.length), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bytes !== undefined) view.setBigUint64(8, data.bytes === null ? 0n : BigInt(util.toPointer(data.bytes)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_RSA_ENDPOINT_IDENTITY (size: 24)
 */
export interface WS_RSA_ENDPOINT_IDENTITY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_IDENTITY */
  identity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_BYTES */
  modulus: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_BYTES */
  exponent: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_RSA_ENDPOINT_IDENTITY = 24;

export function allocWS_RSA_ENDPOINT_IDENTITY(data?: Partial<WS_RSA_ENDPOINT_IDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_RSA_ENDPOINT_IDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.identity !== undefined) view.setBigUint64(0, data.identity === null ? 0n : BigInt(util.toPointer(data.identity)), true);
  // 0x08: pointer
  if (data?.modulus !== undefined) view.setBigUint64(8, data.modulus === null ? 0n : BigInt(util.toPointer(data.modulus)), true);
  // 0x10: pointer
  if (data?.exponent !== undefined) view.setBigUint64(16, data.exponent === null ? 0n : BigInt(util.toPointer(data.exponent)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CERT_ENDPOINT_IDENTITY (size: 16)
 */
export interface WS_CERT_ENDPOINT_IDENTITY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_IDENTITY */
  identity: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_BYTES */
  rawCertificateData: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_CERT_ENDPOINT_IDENTITY = 16;

export function allocWS_CERT_ENDPOINT_IDENTITY(data?: Partial<WS_CERT_ENDPOINT_IDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CERT_ENDPOINT_IDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.identity !== undefined) view.setBigUint64(0, data.identity === null ? 0n : BigInt(util.toPointer(data.identity)), true);
  // 0x08: pointer
  if (data?.rawCertificateData !== undefined) view.setBigUint64(8, data.rawCertificateData === null ? 0n : BigInt(util.toPointer(data.rawCertificateData)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_UNKNOWN_ENDPOINT_IDENTITY (size: 16)
 */
export interface WS_UNKNOWN_ENDPOINT_IDENTITY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_IDENTITY */
  identity: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  element: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_UNKNOWN_ENDPOINT_IDENTITY = 16;

export function allocWS_UNKNOWN_ENDPOINT_IDENTITY(data?: Partial<WS_UNKNOWN_ENDPOINT_IDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_UNKNOWN_ENDPOINT_IDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.identity !== undefined) view.setBigUint64(0, data.identity === null ? 0n : BigInt(util.toPointer(data.identity)), true);
  // 0x08: pointer
  if (data?.element !== undefined) view.setBigUint64(8, data.element === null ? 0n : BigInt(util.toPointer(data.element)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ERROR_PROPERTY (size: 24)
 */
export interface WS_ERROR_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ERROR_PROPERTY_ID */
  id: WS_ERROR_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_ERROR_PROPERTY = 24;

export function allocWS_ERROR_PROPERTY(data?: Partial<WS_ERROR_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ERROR_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_FAULT_REASON (size: 16)
 */
export interface WS_FAULT_REASON {
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  text: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  lang: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_FAULT_REASON = 16;

export function allocWS_FAULT_REASON(data?: Partial<WS_FAULT_REASON>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_FAULT_REASON);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.text !== undefined) view.setBigUint64(0, data.text === null ? 0n : BigInt(util.toPointer(data.text)), true);
  // 0x08: pointer
  if (data?.lang !== undefined) view.setBigUint64(8, data.lang === null ? 0n : BigInt(util.toPointer(data.lang)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_FAULT_CODE (size: 16)
 */
export interface WS_FAULT_CODE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_QNAME */
  value: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  subCode: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_FAULT_CODE = 16;

export function allocWS_FAULT_CODE(data?: Partial<WS_FAULT_CODE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_FAULT_CODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x08: pointer
  if (data?.subCode !== undefined) view.setBigUint64(8, data.subCode === null ? 0n : BigInt(util.toPointer(data.subCode)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_FAULT (size: 48)
 */
export interface WS_FAULT {
  /** ptr */
  code: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  reasons: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  reasonCount: number;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  actor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  node: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  detail: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_FAULT = 48;

export function allocWS_FAULT(data?: Partial<WS_FAULT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_FAULT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.code !== undefined) view.setBigUint64(0, data.code === null ? 0n : BigInt(util.toPointer(data.code)), true);
  // 0x08: pointer
  if (data?.reasons !== undefined) view.setBigUint64(8, data.reasons === null ? 0n : BigInt(util.toPointer(data.reasons)), true);
  // 0x10: u32
  if (data?.reasonCount !== undefined) view.setUint32(16, Number(data.reasonCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.actor !== undefined) view.setBigUint64(24, data.actor === null ? 0n : BigInt(util.toPointer(data.actor)), true);
  // 0x20: pointer
  if (data?.node !== undefined) view.setBigUint64(32, data.node === null ? 0n : BigInt(util.toPointer(data.node)), true);
  // 0x28: pointer
  if (data?.detail !== undefined) view.setBigUint64(40, data.detail === null ? 0n : BigInt(util.toPointer(data.detail)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_FAULT_DETAIL_DESCRIPTION (size: 16)
 */
export interface WS_FAULT_DETAIL_DESCRIPTION {
  /** ptr */
  action: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  detailElementDescription: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_FAULT_DETAIL_DESCRIPTION = 16;

export function allocWS_FAULT_DETAIL_DESCRIPTION(data?: Partial<WS_FAULT_DETAIL_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_FAULT_DETAIL_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.action !== undefined) view.setBigUint64(0, data.action === null ? 0n : BigInt(util.toPointer(data.action)), true);
  // 0x08: pointer
  if (data?.detailElementDescription !== undefined) view.setBigUint64(8, data.detailElementDescription === null ? 0n : BigInt(util.toPointer(data.detailElementDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HEAP_PROPERTY (size: 24)
 */
export interface WS_HEAP_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_HEAP_PROPERTY_ID */
  id: WS_HEAP_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_HEAP_PROPERTY = 24;

export function allocWS_HEAP_PROPERTY(data?: Partial<WS_HEAP_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HEAP_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HEAP_PROPERTIES (size: 16)
 */
export interface WS_HEAP_PROPERTIES {
  /** ptr */
  properties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyCount: number;
}

export const sizeofWS_HEAP_PROPERTIES = 16;

export function allocWS_HEAP_PROPERTIES(data?: Partial<WS_HEAP_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HEAP_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.properties !== undefined) view.setBigUint64(0, data.properties === null ? 0n : BigInt(util.toPointer(data.properties)), true);
  // 0x08: u32
  if (data?.propertyCount !== undefined) view.setUint32(8, Number(data.propertyCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_LISTENER_PROPERTY (size: 24)
 */
export interface WS_LISTENER_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_LISTENER_PROPERTY_ID */
  id: WS_LISTENER_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_LISTENER_PROPERTY = 24;

export function allocWS_LISTENER_PROPERTY(data?: Partial<WS_LISTENER_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_LISTENER_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_DISALLOWED_USER_AGENT_SUBSTRINGS (size: 16)
 */
export interface WS_DISALLOWED_USER_AGENT_SUBSTRINGS {
  /** u32 */
  subStringCount: number;
  /** ptr */
  subStrings: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_DISALLOWED_USER_AGENT_SUBSTRINGS = 16;

export function allocWS_DISALLOWED_USER_AGENT_SUBSTRINGS(data?: Partial<WS_DISALLOWED_USER_AGENT_SUBSTRINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_DISALLOWED_USER_AGENT_SUBSTRINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.subStringCount !== undefined) view.setUint32(0, Number(data.subStringCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.subStrings !== undefined) view.setBigUint64(8, data.subStrings === null ? 0n : BigInt(util.toPointer(data.subStrings)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_LISTENER_PROPERTIES (size: 16)
 */
export interface WS_LISTENER_PROPERTIES {
  /** ptr */
  properties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyCount: number;
}

export const sizeofWS_LISTENER_PROPERTIES = 16;

export function allocWS_LISTENER_PROPERTIES(data?: Partial<WS_LISTENER_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_LISTENER_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.properties !== undefined) view.setBigUint64(0, data.properties === null ? 0n : BigInt(util.toPointer(data.properties)), true);
  // 0x08: u32
  if (data?.propertyCount !== undefined) view.setUint32(8, Number(data.propertyCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HOST_NAMES (size: 16)
 */
export interface WS_HOST_NAMES {
  /** ptr */
  hostNames: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  hostNameCount: number;
}

export const sizeofWS_HOST_NAMES = 16;

export function allocWS_HOST_NAMES(data?: Partial<WS_HOST_NAMES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HOST_NAMES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hostNames !== undefined) view.setBigUint64(0, data.hostNames === null ? 0n : BigInt(util.toPointer(data.hostNames)), true);
  // 0x08: u32
  if (data?.hostNameCount !== undefined) view.setUint32(8, Number(data.hostNameCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CUSTOM_LISTENER_CALLBACKS (size: 80)
 */
export interface WS_CUSTOM_LISTENER_CALLBACKS {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CREATE_LISTENER_CALLBACK */
  createListenerCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_FREE_LISTENER_CALLBACK */
  freeListenerCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_RESET_LISTENER_CALLBACK */
  resetListenerCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_OPEN_LISTENER_CALLBACK */
  openListenerCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_CLOSE_LISTENER_CALLBACK */
  closeListenerCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_ABORT_LISTENER_CALLBACK */
  abortListenerCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_GET_LISTENER_PROPERTY_CALLBACK */
  getListenerPropertyCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SET_LISTENER_PROPERTY_CALLBACK */
  setListenerPropertyCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_CREATE_CHANNEL_FOR_LISTENER_CALLBACK */
  createChannelForListenerCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_ACCEPT_CHANNEL_CALLBACK */
  acceptChannelCallback: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_CUSTOM_LISTENER_CALLBACKS = 80;

export function allocWS_CUSTOM_LISTENER_CALLBACKS(data?: Partial<WS_CUSTOM_LISTENER_CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CUSTOM_LISTENER_CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.createListenerCallback !== undefined) view.setBigUint64(0, data.createListenerCallback === null ? 0n : BigInt(util.toPointer(data.createListenerCallback)), true);
  // 0x08: pointer
  if (data?.freeListenerCallback !== undefined) view.setBigUint64(8, data.freeListenerCallback === null ? 0n : BigInt(util.toPointer(data.freeListenerCallback)), true);
  // 0x10: pointer
  if (data?.resetListenerCallback !== undefined) view.setBigUint64(16, data.resetListenerCallback === null ? 0n : BigInt(util.toPointer(data.resetListenerCallback)), true);
  // 0x18: pointer
  if (data?.openListenerCallback !== undefined) view.setBigUint64(24, data.openListenerCallback === null ? 0n : BigInt(util.toPointer(data.openListenerCallback)), true);
  // 0x20: pointer
  if (data?.closeListenerCallback !== undefined) view.setBigUint64(32, data.closeListenerCallback === null ? 0n : BigInt(util.toPointer(data.closeListenerCallback)), true);
  // 0x28: pointer
  if (data?.abortListenerCallback !== undefined) view.setBigUint64(40, data.abortListenerCallback === null ? 0n : BigInt(util.toPointer(data.abortListenerCallback)), true);
  // 0x30: pointer
  if (data?.getListenerPropertyCallback !== undefined) view.setBigUint64(48, data.getListenerPropertyCallback === null ? 0n : BigInt(util.toPointer(data.getListenerPropertyCallback)), true);
  // 0x38: pointer
  if (data?.setListenerPropertyCallback !== undefined) view.setBigUint64(56, data.setListenerPropertyCallback === null ? 0n : BigInt(util.toPointer(data.setListenerPropertyCallback)), true);
  // 0x40: pointer
  if (data?.createChannelForListenerCallback !== undefined) view.setBigUint64(64, data.createChannelForListenerCallback === null ? 0n : BigInt(util.toPointer(data.createChannelForListenerCallback)), true);
  // 0x48: pointer
  if (data?.acceptChannelCallback !== undefined) view.setBigUint64(72, data.acceptChannelCallback === null ? 0n : BigInt(util.toPointer(data.acceptChannelCallback)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_PROPERTY (size: 24)
 */
export interface WS_MESSAGE_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_PROPERTY_ID */
  id: WS_MESSAGE_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_MESSAGE_PROPERTY = 24;

export function allocWS_MESSAGE_PROPERTY(data?: Partial<WS_MESSAGE_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_MESSAGE_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_PROPERTIES (size: 16)
 */
export interface WS_MESSAGE_PROPERTIES {
  /** ptr */
  properties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyCount: number;
}

export const sizeofWS_MESSAGE_PROPERTIES = 16;

export function allocWS_MESSAGE_PROPERTIES(data?: Partial<WS_MESSAGE_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_MESSAGE_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.properties !== undefined) view.setBigUint64(0, data.properties === null ? 0n : BigInt(util.toPointer(data.properties)), true);
  // 0x08: u32
  if (data?.propertyCount !== undefined) view.setUint32(8, Number(data.propertyCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_ALGORITHM_PROPERTY (size: 24)
 */
export interface WS_SECURITY_ALGORITHM_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_ALGORITHM_PROPERTY_ID */
  id: WS_SECURITY_ALGORITHM_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_SECURITY_ALGORITHM_PROPERTY = 24;

export function allocWS_SECURITY_ALGORITHM_PROPERTY(data?: Partial<WS_SECURITY_ALGORITHM_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_ALGORITHM_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_ALGORITHM_SUITE (size: 64)
 */
export interface WS_SECURITY_ALGORITHM_SUITE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_ALGORITHM_ID */
  canonicalizationAlgorithm: WS_SECURITY_ALGORITHM_ID;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_ALGORITHM_ID */
  digestAlgorithm: WS_SECURITY_ALGORITHM_ID;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_ALGORITHM_ID */
  symmetricSignatureAlgorithm: WS_SECURITY_ALGORITHM_ID;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_ALGORITHM_ID */
  asymmetricSignatureAlgorithm: WS_SECURITY_ALGORITHM_ID;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_ALGORITHM_ID */
  encryptionAlgorithm: WS_SECURITY_ALGORITHM_ID;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_ALGORITHM_ID */
  keyDerivationAlgorithm: WS_SECURITY_ALGORITHM_ID;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_ALGORITHM_ID */
  symmetricKeyWrapAlgorithm: WS_SECURITY_ALGORITHM_ID;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_ALGORITHM_ID */
  asymmetricKeyWrapAlgorithm: WS_SECURITY_ALGORITHM_ID;
  /** u32 */
  minSymmetricKeyLength: number;
  /** u32 */
  maxSymmetricKeyLength: number;
  /** u32 */
  minAsymmetricKeyLength: number;
  /** u32 */
  maxAsymmetricKeyLength: number;
  /** ptr */
  properties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyCount: number;
}

export const sizeofWS_SECURITY_ALGORITHM_SUITE = 64;

export function allocWS_SECURITY_ALGORITHM_SUITE(data?: Partial<WS_SECURITY_ALGORITHM_SUITE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_ALGORITHM_SUITE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.canonicalizationAlgorithm !== undefined) view.setInt32(0, Number(data.canonicalizationAlgorithm), true);
  // 0x04: i32
  if (data?.digestAlgorithm !== undefined) view.setInt32(4, Number(data.digestAlgorithm), true);
  // 0x08: i32
  if (data?.symmetricSignatureAlgorithm !== undefined) view.setInt32(8, Number(data.symmetricSignatureAlgorithm), true);
  // 0x0c: i32
  if (data?.asymmetricSignatureAlgorithm !== undefined) view.setInt32(12, Number(data.asymmetricSignatureAlgorithm), true);
  // 0x10: i32
  if (data?.encryptionAlgorithm !== undefined) view.setInt32(16, Number(data.encryptionAlgorithm), true);
  // 0x14: i32
  if (data?.keyDerivationAlgorithm !== undefined) view.setInt32(20, Number(data.keyDerivationAlgorithm), true);
  // 0x18: i32
  if (data?.symmetricKeyWrapAlgorithm !== undefined) view.setInt32(24, Number(data.symmetricKeyWrapAlgorithm), true);
  // 0x1c: i32
  if (data?.asymmetricKeyWrapAlgorithm !== undefined) view.setInt32(28, Number(data.asymmetricKeyWrapAlgorithm), true);
  // 0x20: u32
  if (data?.minSymmetricKeyLength !== undefined) view.setUint32(32, Number(data.minSymmetricKeyLength), true);
  // 0x24: u32
  if (data?.maxSymmetricKeyLength !== undefined) view.setUint32(36, Number(data.maxSymmetricKeyLength), true);
  // 0x28: u32
  if (data?.minAsymmetricKeyLength !== undefined) view.setUint32(40, Number(data.minAsymmetricKeyLength), true);
  // 0x2c: u32
  if (data?.maxAsymmetricKeyLength !== undefined) view.setUint32(44, Number(data.maxAsymmetricKeyLength), true);
  // 0x30: pointer
  if (data?.properties !== undefined) view.setBigUint64(48, data.properties === null ? 0n : BigInt(util.toPointer(data.properties)), true);
  // 0x38: u32
  if (data?.propertyCount !== undefined) view.setUint32(56, Number(data.propertyCount), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTY (size: 24)
 */
export interface WS_SECURITY_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTY_ID */
  id: WS_SECURITY_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_SECURITY_PROPERTY = 24;

export function allocWS_SECURITY_PROPERTY(data?: Partial<WS_SECURITY_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES (size: 16)
 */
export interface WS_SECURITY_PROPERTIES {
  /** ptr */
  properties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyCount: number;
}

export const sizeofWS_SECURITY_PROPERTIES = 16;

export function allocWS_SECURITY_PROPERTIES(data?: Partial<WS_SECURITY_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.properties !== undefined) view.setBigUint64(0, data.properties === null ? 0n : BigInt(util.toPointer(data.properties)), true);
  // 0x08: u32
  if (data?.propertyCount !== undefined) view.setUint32(8, Number(data.propertyCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTY (size: 24)
 */
export interface WS_SECURITY_BINDING_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTY_ID */
  id: WS_SECURITY_BINDING_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_SECURITY_BINDING_PROPERTY = 24;

export function allocWS_SECURITY_BINDING_PROPERTY(data?: Partial<WS_SECURITY_BINDING_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_BINDING_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTIES (size: 16)
 */
export interface WS_SECURITY_BINDING_PROPERTIES {
  /** ptr */
  properties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyCount: number;
}

export const sizeofWS_SECURITY_BINDING_PROPERTIES = 16;

export function allocWS_SECURITY_BINDING_PROPERTIES(data?: Partial<WS_SECURITY_BINDING_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_BINDING_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.properties !== undefined) view.setBigUint64(0, data.properties === null ? 0n : BigInt(util.toPointer(data.properties)), true);
  // 0x08: u32
  if (data?.propertyCount !== undefined) view.setUint32(8, Number(data.propertyCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_SECURITY_IDENTITIES (size: 16)
 */
export interface WS_SERVICE_SECURITY_IDENTITIES {
  /** ptr */
  serviceIdentities: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  serviceIdentityCount: number;
}

export const sizeofWS_SERVICE_SECURITY_IDENTITIES = 16;

export function allocWS_SERVICE_SECURITY_IDENTITIES(data?: Partial<WS_SERVICE_SECURITY_IDENTITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SERVICE_SECURITY_IDENTITIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.serviceIdentities !== undefined) view.setBigUint64(0, data.serviceIdentities === null ? 0n : BigInt(util.toPointer(data.serviceIdentities)), true);
  // 0x08: u32
  if (data?.serviceIdentityCount !== undefined) view.setUint32(8, Number(data.serviceIdentityCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT (size: 16)
 */
export interface WS_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CERTIFICATE_VALIDATION_CALLBACK */
  callback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  state: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT = 16;

export function allocWS_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT(data?: Partial<WS_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.callback !== undefined) view.setBigUint64(0, data.callback === null ? 0n : BigInt(util.toPointer(data.callback)), true);
  // 0x08: pointer
  if (data?.state !== undefined) view.setBigUint64(8, data.state === null ? 0n : BigInt(util.toPointer(data.state)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CERT_CREDENTIAL (size: 8)
 */
export interface WS_CERT_CREDENTIAL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CERT_CREDENTIAL_TYPE */
  credentialType: WS_CERT_CREDENTIAL_TYPE;
}

export const sizeofWS_CERT_CREDENTIAL = 8;

export function allocWS_CERT_CREDENTIAL(data?: Partial<WS_CERT_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CERT_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.credentialType !== undefined) view.setInt32(0, Number(data.credentialType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SUBJECT_NAME_CERT_CREDENTIAL (size: 32)
 */
export interface WS_SUBJECT_NAME_CERT_CREDENTIAL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CERT_CREDENTIAL */
  credential: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  storeLocation: number;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  storeName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  subjectName: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SUBJECT_NAME_CERT_CREDENTIAL = 32;

export function allocWS_SUBJECT_NAME_CERT_CREDENTIAL(data?: Partial<WS_SUBJECT_NAME_CERT_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SUBJECT_NAME_CERT_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.credential !== undefined) view.setBigUint64(0, data.credential === null ? 0n : BigInt(util.toPointer(data.credential)), true);
  // 0x08: u32
  if (data?.storeLocation !== undefined) view.setUint32(8, Number(data.storeLocation), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.storeName !== undefined) view.setBigUint64(16, data.storeName === null ? 0n : BigInt(util.toPointer(data.storeName)), true);
  // 0x18: pointer
  if (data?.subjectName !== undefined) view.setBigUint64(24, data.subjectName === null ? 0n : BigInt(util.toPointer(data.subjectName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_THUMBPRINT_CERT_CREDENTIAL (size: 32)
 */
export interface WS_THUMBPRINT_CERT_CREDENTIAL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CERT_CREDENTIAL */
  credential: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  storeLocation: number;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  storeName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  thumbprint: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_THUMBPRINT_CERT_CREDENTIAL = 32;

export function allocWS_THUMBPRINT_CERT_CREDENTIAL(data?: Partial<WS_THUMBPRINT_CERT_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_THUMBPRINT_CERT_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.credential !== undefined) view.setBigUint64(0, data.credential === null ? 0n : BigInt(util.toPointer(data.credential)), true);
  // 0x08: u32
  if (data?.storeLocation !== undefined) view.setUint32(8, Number(data.storeLocation), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.storeName !== undefined) view.setBigUint64(16, data.storeName === null ? 0n : BigInt(util.toPointer(data.storeName)), true);
  // 0x18: pointer
  if (data?.thumbprint !== undefined) view.setBigUint64(24, data.thumbprint === null ? 0n : BigInt(util.toPointer(data.thumbprint)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CUSTOM_CERT_CREDENTIAL (size: 40)
 */
export interface WS_CUSTOM_CERT_CREDENTIAL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CERT_CREDENTIAL */
  credential: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_GET_CERT_CALLBACK */
  getCertCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  getCertCallbackState: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_CERT_ISSUER_LIST_NOTIFICATION_CALLBACK */
  certIssuerListNotificationCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  certIssuerListNotificationCallbackState: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_CUSTOM_CERT_CREDENTIAL = 40;

export function allocWS_CUSTOM_CERT_CREDENTIAL(data?: Partial<WS_CUSTOM_CERT_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CUSTOM_CERT_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.credential !== undefined) view.setBigUint64(0, data.credential === null ? 0n : BigInt(util.toPointer(data.credential)), true);
  // 0x08: pointer
  if (data?.getCertCallback !== undefined) view.setBigUint64(8, data.getCertCallback === null ? 0n : BigInt(util.toPointer(data.getCertCallback)), true);
  // 0x10: pointer
  if (data?.getCertCallbackState !== undefined) view.setBigUint64(16, data.getCertCallbackState === null ? 0n : BigInt(util.toPointer(data.getCertCallbackState)), true);
  // 0x18: pointer
  if (data?.certIssuerListNotificationCallback !== undefined) view.setBigUint64(24, data.certIssuerListNotificationCallback === null ? 0n : BigInt(util.toPointer(data.certIssuerListNotificationCallback)), true);
  // 0x20: pointer
  if (data?.certIssuerListNotificationCallbackState !== undefined) view.setBigUint64(32, data.certIssuerListNotificationCallbackState === null ? 0n : BigInt(util.toPointer(data.certIssuerListNotificationCallbackState)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL (size: 8)
 */
export interface WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE */
  credentialType: WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE;
}

export const sizeofWS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL = 8;

export function allocWS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL(data?: Partial<WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.credentialType !== undefined) view.setInt32(0, Number(data.credentialType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL (size: 32)
 */
export interface WS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL */
  credential: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  username: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  password: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  domain: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL = 32;

export function allocWS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL(data?: Partial<WS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.credential !== undefined) view.setBigUint64(0, data.credential === null ? 0n : BigInt(util.toPointer(data.credential)), true);
  // 0x08: pointer
  if (data?.username !== undefined) view.setBigUint64(8, data.username === null ? 0n : BigInt(util.toPointer(data.username)), true);
  // 0x10: pointer
  if (data?.password !== undefined) view.setBigUint64(16, data.password === null ? 0n : BigInt(util.toPointer(data.password)), true);
  // 0x18: pointer
  if (data?.domain !== undefined) view.setBigUint64(24, data.domain === null ? 0n : BigInt(util.toPointer(data.domain)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL (size: 8)
 */
export interface WS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL */
  credential: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL = 8;

export function allocWS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL(data?: Partial<WS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.credential !== undefined) view.setBigUint64(0, data.credential === null ? 0n : BigInt(util.toPointer(data.credential)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL (size: 16)
 */
export interface WS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL */
  credential: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  opaqueAuthIdentity: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL = 16;

export function allocWS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL(data?: Partial<WS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.credential !== undefined) view.setBigUint64(0, data.credential === null ? 0n : BigInt(util.toPointer(data.credential)), true);
  // 0x08: pointer
  if (data?.opaqueAuthIdentity !== undefined) view.setBigUint64(8, data.opaqueAuthIdentity === null ? 0n : BigInt(util.toPointer(data.opaqueAuthIdentity)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_CREDENTIAL (size: 8)
 */
export interface WS_USERNAME_CREDENTIAL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_CREDENTIAL_TYPE */
  credentialType: WS_USERNAME_CREDENTIAL_TYPE;
}

export const sizeofWS_USERNAME_CREDENTIAL = 8;

export function allocWS_USERNAME_CREDENTIAL(data?: Partial<WS_USERNAME_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_USERNAME_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.credentialType !== undefined) view.setInt32(0, Number(data.credentialType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_STRING_USERNAME_CREDENTIAL (size: 24)
 */
export interface WS_STRING_USERNAME_CREDENTIAL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_CREDENTIAL */
  credential: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  username: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  password: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_STRING_USERNAME_CREDENTIAL = 24;

export function allocWS_STRING_USERNAME_CREDENTIAL(data?: Partial<WS_STRING_USERNAME_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_STRING_USERNAME_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.credential !== undefined) view.setBigUint64(0, data.credential === null ? 0n : BigInt(util.toPointer(data.credential)), true);
  // 0x08: pointer
  if (data?.username !== undefined) view.setBigUint64(8, data.username === null ? 0n : BigInt(util.toPointer(data.username)), true);
  // 0x10: pointer
  if (data?.password !== undefined) view.setBigUint64(16, data.password === null ? 0n : BigInt(util.toPointer(data.password)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_KEY_HANDLE (size: 8)
 */
export interface WS_SECURITY_KEY_HANDLE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_KEY_HANDLE_TYPE */
  keyHandleType: WS_SECURITY_KEY_HANDLE_TYPE;
}

export const sizeofWS_SECURITY_KEY_HANDLE = 8;

export function allocWS_SECURITY_KEY_HANDLE(data?: Partial<WS_SECURITY_KEY_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_KEY_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.keyHandleType !== undefined) view.setInt32(0, Number(data.keyHandleType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE (size: 16)
 */
export interface WS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_KEY_HANDLE */
  keyHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_BYTES */
  rawKeyBytes: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE = 16;

export function allocWS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE(data?: Partial<WS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.keyHandle !== undefined) view.setBigUint64(0, data.keyHandle === null ? 0n : BigInt(util.toPointer(data.keyHandle)), true);
  // 0x08: pointer
  if (data?.rawKeyBytes !== undefined) view.setBigUint64(8, data.rawKeyBytes === null ? 0n : BigInt(util.toPointer(data.rawKeyBytes)), true);
  return buf;
}

export type NCRYPT_KEY_HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE (size: 16)
 */
export interface WS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_KEY_HANDLE */
  keyHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Cryptography.NCRYPT_KEY_HANDLE */
  asymmetricKey: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE = 16;

export function allocWS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE(data?: Partial<WS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.keyHandle !== undefined) view.setBigUint64(0, data.keyHandle === null ? 0n : BigInt(util.toPointer(data.keyHandle)), true);
  // 0x08: pointer
  if (data?.asymmetricKey !== undefined) view.setBigUint64(8, data.asymmetricKey === null ? 0n : BigInt(util.toPointer(data.asymmetricKey)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE (size: 24)
 */
export interface WS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_KEY_HANDLE */
  keyHandle: Uint8Array | Deno.PointerValue | null;
  /** usize */
  provider: Deno.PointerValue;
  /** u32 */
  keySpec: number;
}

export const sizeofWS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE = 24;

export function allocWS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE(data?: Partial<WS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.keyHandle !== undefined) view.setBigUint64(0, data.keyHandle === null ? 0n : BigInt(util.toPointer(data.keyHandle)), true);
  // 0x08: usize
  if (data?.provider !== undefined) view.setBigUint64(8, BigInt(data.provider), true);
  // 0x10: u32
  if (data?.keySpec !== undefined) view.setUint32(16, Number(data.keySpec), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING (size: 24)
 */
export interface WS_SECURITY_BINDING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_TYPE */
  bindingType: WS_SECURITY_BINDING_TYPE;
  /** ptr */
  properties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyCount: number;
}

export const sizeofWS_SECURITY_BINDING = 24;

export function allocWS_SECURITY_BINDING(data?: Partial<WS_SECURITY_BINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_BINDING);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bindingType !== undefined) view.setInt32(0, Number(data.bindingType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.properties !== undefined) view.setBigUint64(8, data.properties === null ? 0n : BigInt(util.toPointer(data.properties)), true);
  // 0x10: u32
  if (data?.propertyCount !== undefined) view.setUint32(16, Number(data.propertyCount), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING (size: 16)
 */
export interface WS_SSL_TRANSPORT_SECURITY_BINDING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING */
  binding: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  localCertCredential: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_SSL_TRANSPORT_SECURITY_BINDING = 16;

export function allocWS_SSL_TRANSPORT_SECURITY_BINDING(data?: Partial<WS_SSL_TRANSPORT_SECURITY_BINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SSL_TRANSPORT_SECURITY_BINDING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.binding !== undefined) view.setBigUint64(0, data.binding === null ? 0n : BigInt(util.toPointer(data.binding)), true);
  // 0x08: pointer
  if (data?.localCertCredential !== undefined) view.setBigUint64(8, data.localCertCredential === null ? 0n : BigInt(util.toPointer(data.localCertCredential)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING (size: 16)
 */
export interface WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING */
  binding: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  clientCredential: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_TCP_SSPI_TRANSPORT_SECURITY_BINDING = 16;

export function allocWS_TCP_SSPI_TRANSPORT_SECURITY_BINDING(data?: Partial<WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_SSPI_TRANSPORT_SECURITY_BINDING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.binding !== undefined) view.setBigUint64(0, data.binding === null ? 0n : BigInt(util.toPointer(data.binding)), true);
  // 0x08: pointer
  if (data?.clientCredential !== undefined) view.setBigUint64(8, data.clientCredential === null ? 0n : BigInt(util.toPointer(data.clientCredential)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING (size: 16)
 */
export interface WS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING */
  binding: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  clientCredential: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING = 16;

export function allocWS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING(data?: Partial<WS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.binding !== undefined) view.setBigUint64(0, data.binding === null ? 0n : BigInt(util.toPointer(data.binding)), true);
  // 0x08: pointer
  if (data?.clientCredential !== undefined) view.setBigUint64(8, data.clientCredential === null ? 0n : BigInt(util.toPointer(data.clientCredential)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_HEADER_AUTH_SECURITY_BINDING (size: 16)
 */
export interface WS_HTTP_HEADER_AUTH_SECURITY_BINDING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING */
  binding: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  clientCredential: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_HTTP_HEADER_AUTH_SECURITY_BINDING = 16;

export function allocWS_HTTP_HEADER_AUTH_SECURITY_BINDING(data?: Partial<WS_HTTP_HEADER_AUTH_SECURITY_BINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_HEADER_AUTH_SECURITY_BINDING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.binding !== undefined) view.setBigUint64(0, data.binding === null ? 0n : BigInt(util.toPointer(data.binding)), true);
  // 0x08: pointer
  if (data?.clientCredential !== undefined) view.setBigUint64(8, data.clientCredential === null ? 0n : BigInt(util.toPointer(data.clientCredential)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING (size: 24)
 */
export interface WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING */
  binding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_SECURITY_USAGE */
  bindingUsage: WS_MESSAGE_SECURITY_USAGE;
  /** ptr */
  clientCredential: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING = 24;

export function allocWS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING(data?: Partial<WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.binding !== undefined) view.setBigUint64(0, data.binding === null ? 0n : BigInt(util.toPointer(data.binding)), true);
  // 0x08: i32
  if (data?.bindingUsage !== undefined) view.setInt32(8, Number(data.bindingUsage), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.clientCredential !== undefined) view.setBigUint64(16, data.clientCredential === null ? 0n : BigInt(util.toPointer(data.clientCredential)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_MESSAGE_SECURITY_BINDING (size: 40)
 */
export interface WS_USERNAME_MESSAGE_SECURITY_BINDING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING */
  binding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_SECURITY_USAGE */
  bindingUsage: WS_MESSAGE_SECURITY_USAGE;
  /** ptr */
  clientCredential: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_VALIDATE_PASSWORD_CALLBACK */
  passwordValidator: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  passwordValidatorCallbackState: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_USERNAME_MESSAGE_SECURITY_BINDING = 40;

export function allocWS_USERNAME_MESSAGE_SECURITY_BINDING(data?: Partial<WS_USERNAME_MESSAGE_SECURITY_BINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_USERNAME_MESSAGE_SECURITY_BINDING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.binding !== undefined) view.setBigUint64(0, data.binding === null ? 0n : BigInt(util.toPointer(data.binding)), true);
  // 0x08: i32
  if (data?.bindingUsage !== undefined) view.setInt32(8, Number(data.bindingUsage), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.clientCredential !== undefined) view.setBigUint64(16, data.clientCredential === null ? 0n : BigInt(util.toPointer(data.clientCredential)), true);
  // 0x18: pointer
  if (data?.passwordValidator !== undefined) view.setBigUint64(24, data.passwordValidator === null ? 0n : BigInt(util.toPointer(data.passwordValidator)), true);
  // 0x20: pointer
  if (data?.passwordValidatorCallbackState !== undefined) view.setBigUint64(32, data.passwordValidatorCallbackState === null ? 0n : BigInt(util.toPointer(data.passwordValidatorCallbackState)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_DESCRIPTION (size: 32)
 */
export interface WS_SECURITY_DESCRIPTION {
  /** ptr */
  securityBindings: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  securityBindingCount: number;
  /** ptr */
  properties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyCount: number;
}

export const sizeofWS_SECURITY_DESCRIPTION = 32;

export function allocWS_SECURITY_DESCRIPTION(data?: Partial<WS_SECURITY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindings !== undefined) view.setBigUint64(0, data.securityBindings === null ? 0n : BigInt(util.toPointer(data.securityBindings)), true);
  // 0x08: u32
  if (data?.securityBindingCount !== undefined) view.setUint32(8, Number(data.securityBindingCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.properties !== undefined) view.setBigUint64(16, data.properties === null ? 0n : BigInt(util.toPointer(data.properties)), true);
  // 0x18: u32
  if (data?.propertyCount !== undefined) view.setUint32(24, Number(data.propertyCount), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING (size: 24)
 */
export interface WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING */
  binding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_SECURITY_USAGE */
  bindingUsage: WS_MESSAGE_SECURITY_USAGE;
  /** ptr */
  bootstrapSecurityDescription: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING = 24;

export function allocWS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING(data?: Partial<WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.binding !== undefined) view.setBigUint64(0, data.binding === null ? 0n : BigInt(util.toPointer(data.binding)), true);
  // 0x08: i32
  if (data?.bindingUsage !== undefined) view.setInt32(8, Number(data.bindingUsage), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.bootstrapSecurityDescription !== undefined) view.setBigUint64(16, data.bootstrapSecurityDescription === null ? 0n : BigInt(util.toPointer(data.bootstrapSecurityDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_PROPERTY (size: 24)
 */
export interface WS_SECURITY_CONTEXT_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_PROPERTY_ID */
  id: WS_SECURITY_CONTEXT_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_SECURITY_CONTEXT_PROPERTY = 24;

export function allocWS_SECURITY_CONTEXT_PROPERTY(data?: Partial<WS_SECURITY_CONTEXT_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_CONTEXT_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_SECURITY_TOKEN_PROPERTY (size: 24)
 */
export interface WS_XML_SECURITY_TOKEN_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_SECURITY_TOKEN_PROPERTY_ID */
  id: WS_XML_SECURITY_TOKEN_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_XML_SECURITY_TOKEN_PROPERTY = 24;

export function allocWS_XML_SECURITY_TOKEN_PROPERTY(data?: Partial<WS_XML_SECURITY_TOKEN_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_SECURITY_TOKEN_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_TOKEN_MESSAGE_SECURITY_BINDING (size: 24)
 */
export interface WS_XML_TOKEN_MESSAGE_SECURITY_BINDING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING */
  binding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_SECURITY_USAGE */
  bindingUsage: WS_MESSAGE_SECURITY_USAGE;
  /** ptr */
  xmlToken: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_XML_TOKEN_MESSAGE_SECURITY_BINDING = 24;

export function allocWS_XML_TOKEN_MESSAGE_SECURITY_BINDING(data?: Partial<WS_XML_TOKEN_MESSAGE_SECURITY_BINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_TOKEN_MESSAGE_SECURITY_BINDING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.binding !== undefined) view.setBigUint64(0, data.binding === null ? 0n : BigInt(util.toPointer(data.binding)), true);
  // 0x08: i32
  if (data?.bindingUsage !== undefined) view.setInt32(8, Number(data.bindingUsage), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.xmlToken !== undefined) view.setBigUint64(16, data.xmlToken === null ? 0n : BigInt(util.toPointer(data.xmlToken)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SAML_AUTHENTICATOR (size: 8)
 */
export interface WS_SAML_AUTHENTICATOR {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SAML_AUTHENTICATOR_TYPE */
  authenticatorType: WS_SAML_AUTHENTICATOR_TYPE;
}

export const sizeofWS_SAML_AUTHENTICATOR = 8;

export function allocWS_SAML_AUTHENTICATOR(data?: Partial<WS_SAML_AUTHENTICATOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SAML_AUTHENTICATOR);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.authenticatorType !== undefined) view.setInt32(0, Number(data.authenticatorType), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CERT_SIGNED_SAML_AUTHENTICATOR (size: 48)
 */
export interface WS_CERT_SIGNED_SAML_AUTHENTICATOR {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SAML_AUTHENTICATOR */
  authenticator: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  trustedIssuerCerts: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  trustedIssuerCertCount: number;
  /** ptr */
  decryptionCert: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_VALIDATE_SAML_CALLBACK */
  samlValidator: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  samlValidatorCallbackState: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_CERT_SIGNED_SAML_AUTHENTICATOR = 48;

export function allocWS_CERT_SIGNED_SAML_AUTHENTICATOR(data?: Partial<WS_CERT_SIGNED_SAML_AUTHENTICATOR>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CERT_SIGNED_SAML_AUTHENTICATOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.authenticator !== undefined) view.setBigUint64(0, data.authenticator === null ? 0n : BigInt(util.toPointer(data.authenticator)), true);
  // 0x08: pointer
  if (data?.trustedIssuerCerts !== undefined) view.setBigUint64(8, data.trustedIssuerCerts === null ? 0n : BigInt(util.toPointer(data.trustedIssuerCerts)), true);
  // 0x10: u32
  if (data?.trustedIssuerCertCount !== undefined) view.setUint32(16, Number(data.trustedIssuerCertCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.decryptionCert !== undefined) view.setBigUint64(24, data.decryptionCert === null ? 0n : BigInt(util.toPointer(data.decryptionCert)), true);
  // 0x20: pointer
  if (data?.samlValidator !== undefined) view.setBigUint64(32, data.samlValidator === null ? 0n : BigInt(util.toPointer(data.samlValidator)), true);
  // 0x28: pointer
  if (data?.samlValidatorCallbackState !== undefined) view.setBigUint64(40, data.samlValidatorCallbackState === null ? 0n : BigInt(util.toPointer(data.samlValidatorCallbackState)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SAML_MESSAGE_SECURITY_BINDING (size: 24)
 */
export interface WS_SAML_MESSAGE_SECURITY_BINDING {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING */
  binding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_SECURITY_USAGE */
  bindingUsage: WS_MESSAGE_SECURITY_USAGE;
  /** ptr */
  authenticator: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_SAML_MESSAGE_SECURITY_BINDING = 24;

export function allocWS_SAML_MESSAGE_SECURITY_BINDING(data?: Partial<WS_SAML_MESSAGE_SECURITY_BINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SAML_MESSAGE_SECURITY_BINDING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.binding !== undefined) view.setBigUint64(0, data.binding === null ? 0n : BigInt(util.toPointer(data.binding)), true);
  // 0x08: i32
  if (data?.bindingUsage !== undefined) view.setInt32(8, Number(data.bindingUsage), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.authenticator !== undefined) view.setBigUint64(16, data.authenticator === null ? 0n : BigInt(util.toPointer(data.authenticator)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_REQUEST_SECURITY_TOKEN_PROPERTY (size: 24)
 */
export interface WS_REQUEST_SECURITY_TOKEN_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID */
  id: WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_REQUEST_SECURITY_TOKEN_PROPERTY = 24;

export function allocWS_REQUEST_SECURITY_TOKEN_PROPERTY(data?: Partial<WS_REQUEST_SECURITY_TOKEN_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_REQUEST_SECURITY_TOKEN_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ANY_ATTRIBUTE (size: 24)
 */
export interface WS_ANY_ATTRIBUTE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_STRING */
  localName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_XML_STRING */
  ns: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_ANY_ATTRIBUTE = 24;

export function allocWS_ANY_ATTRIBUTE(data?: Partial<WS_ANY_ATTRIBUTE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ANY_ATTRIBUTE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.localName !== undefined) view.setBigUint64(0, data.localName === null ? 0n : BigInt(util.toPointer(data.localName)), true);
  // 0x08: pointer
  if (data?.ns !== undefined) view.setBigUint64(8, data.ns === null ? 0n : BigInt(util.toPointer(data.ns)), true);
  // 0x10: pointer
  if (data?.value !== undefined) view.setBigUint64(16, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ANY_ATTRIBUTES (size: 16)
 */
export interface WS_ANY_ATTRIBUTES {
  /** ptr */
  attributes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  attributeCount: number;
}

export const sizeofWS_ANY_ATTRIBUTES = 16;

export function allocWS_ANY_ATTRIBUTES(data?: Partial<WS_ANY_ATTRIBUTES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ANY_ATTRIBUTES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.attributes !== undefined) view.setBigUint64(0, data.attributes === null ? 0n : BigInt(util.toPointer(data.attributes)), true);
  // 0x08: u32
  if (data?.attributeCount !== undefined) view.setUint32(8, Number(data.attributeCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_BOOL_DESCRIPTION (size: 8)
 */
export interface WS_BOOL_DESCRIPTION {
  /** Windows.Win32.Foundation.BOOL */
  value: boolean;
}

export const sizeofWS_BOOL_DESCRIPTION = 8;

export function allocWS_BOOL_DESCRIPTION(data?: Partial<WS_BOOL_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_BOOL_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.value !== undefined) view.setInt32(0, Number(data.value), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_GUID_DESCRIPTION (size: 8)
 */
export interface WS_GUID_DESCRIPTION {
  /** System.Guid */
  value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_GUID_DESCRIPTION = 8;

export function allocWS_GUID_DESCRIPTION(data?: Partial<WS_GUID_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_GUID_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_DATETIME_DESCRIPTION (size: 16)
 */
export interface WS_DATETIME_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_DATETIME */
  minValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_DATETIME */
  maxValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_DATETIME_DESCRIPTION = 16;

export function allocWS_DATETIME_DESCRIPTION(data?: Partial<WS_DATETIME_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_DATETIME_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.minValue !== undefined) view.setBigUint64(0, data.minValue === null ? 0n : BigInt(util.toPointer(data.minValue)), true);
  // 0x08: pointer
  if (data?.maxValue !== undefined) view.setBigUint64(8, data.maxValue === null ? 0n : BigInt(util.toPointer(data.maxValue)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_DURATION (size: 40)
 */
export interface WS_DURATION {
  /** Windows.Win32.Foundation.BOOL */
  negative: boolean;
  /** u32 */
  years: number;
  /** u32 */
  months: number;
  /** u32 */
  days: number;
  /** u32 */
  hours: number;
  /** u32 */
  minutes: number;
  /** u32 */
  seconds: number;
  /** u32 */
  milliseconds: number;
  /** u32 */
  ticks: number;
}

export const sizeofWS_DURATION = 40;

export function allocWS_DURATION(data?: Partial<WS_DURATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_DURATION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.negative !== undefined) view.setInt32(0, Number(data.negative), true);
  // 0x04: u32
  if (data?.years !== undefined) view.setUint32(4, Number(data.years), true);
  // 0x08: u32
  if (data?.months !== undefined) view.setUint32(8, Number(data.months), true);
  // 0x0c: u32
  if (data?.days !== undefined) view.setUint32(12, Number(data.days), true);
  // 0x10: u32
  if (data?.hours !== undefined) view.setUint32(16, Number(data.hours), true);
  // 0x14: u32
  if (data?.minutes !== undefined) view.setUint32(20, Number(data.minutes), true);
  // 0x18: u32
  if (data?.seconds !== undefined) view.setUint32(24, Number(data.seconds), true);
  // 0x1c: u32
  if (data?.milliseconds !== undefined) view.setUint32(28, Number(data.milliseconds), true);
  // 0x20: u32
  if (data?.ticks !== undefined) view.setUint32(32, Number(data.ticks), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_DURATION_DESCRIPTION (size: 24)
 */
export interface WS_DURATION_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_DURATION */
  minValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_DURATION */
  maxValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_DURATION_COMPARISON_CALLBACK */
  comparer: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_DURATION_DESCRIPTION = 24;

export function allocWS_DURATION_DESCRIPTION(data?: Partial<WS_DURATION_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_DURATION_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.minValue !== undefined) view.setBigUint64(0, data.minValue === null ? 0n : BigInt(util.toPointer(data.minValue)), true);
  // 0x08: pointer
  if (data?.maxValue !== undefined) view.setBigUint64(8, data.maxValue === null ? 0n : BigInt(util.toPointer(data.maxValue)), true);
  // 0x10: pointer
  if (data?.comparer !== undefined) view.setBigUint64(16, data.comparer === null ? 0n : BigInt(util.toPointer(data.comparer)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TIMESPAN_DESCRIPTION (size: 16)
 */
export interface WS_TIMESPAN_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_TIMESPAN */
  minValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_TIMESPAN */
  maxValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TIMESPAN_DESCRIPTION = 16;

export function allocWS_TIMESPAN_DESCRIPTION(data?: Partial<WS_TIMESPAN_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TIMESPAN_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.minValue !== undefined) view.setBigUint64(0, data.minValue === null ? 0n : BigInt(util.toPointer(data.minValue)), true);
  // 0x08: pointer
  if (data?.maxValue !== undefined) view.setBigUint64(8, data.maxValue === null ? 0n : BigInt(util.toPointer(data.maxValue)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_UNIQUE_ID_DESCRIPTION (size: 8)
 */
export interface WS_UNIQUE_ID_DESCRIPTION {
  /** u32 */
  minCharCount: number;
  /** u32 */
  maxCharCount: number;
}

export const sizeofWS_UNIQUE_ID_DESCRIPTION = 8;

export function allocWS_UNIQUE_ID_DESCRIPTION(data?: Partial<WS_UNIQUE_ID_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_UNIQUE_ID_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.minCharCount !== undefined) view.setUint32(0, Number(data.minCharCount), true);
  // 0x04: u32
  if (data?.maxCharCount !== undefined) view.setUint32(4, Number(data.maxCharCount), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_STRING_DESCRIPTION (size: 8)
 */
export interface WS_STRING_DESCRIPTION {
  /** u32 */
  minCharCount: number;
  /** u32 */
  maxCharCount: number;
}

export const sizeofWS_STRING_DESCRIPTION = 8;

export function allocWS_STRING_DESCRIPTION(data?: Partial<WS_STRING_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_STRING_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.minCharCount !== undefined) view.setUint32(0, Number(data.minCharCount), true);
  // 0x04: u32
  if (data?.maxCharCount !== undefined) view.setUint32(4, Number(data.maxCharCount), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_STRING_DESCRIPTION (size: 8)
 */
export interface WS_XML_STRING_DESCRIPTION {
  /** u32 */
  minByteCount: number;
  /** u32 */
  maxByteCount: number;
}

export const sizeofWS_XML_STRING_DESCRIPTION = 8;

export function allocWS_XML_STRING_DESCRIPTION(data?: Partial<WS_XML_STRING_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_STRING_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.minByteCount !== undefined) view.setUint32(0, Number(data.minByteCount), true);
  // 0x04: u32
  if (data?.maxByteCount !== undefined) view.setUint32(4, Number(data.maxByteCount), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_XML_QNAME_DESCRIPTION (size: 16)
 */
export interface WS_XML_QNAME_DESCRIPTION {
  /** u32 */
  minLocalNameByteCount: number;
  /** u32 */
  maxLocalNameByteCount: number;
  /** u32 */
  minNsByteCount: number;
  /** u32 */
  maxNsByteCount: number;
}

export const sizeofWS_XML_QNAME_DESCRIPTION = 16;

export function allocWS_XML_QNAME_DESCRIPTION(data?: Partial<WS_XML_QNAME_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_XML_QNAME_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.minLocalNameByteCount !== undefined) view.setUint32(0, Number(data.minLocalNameByteCount), true);
  // 0x04: u32
  if (data?.maxLocalNameByteCount !== undefined) view.setUint32(4, Number(data.maxLocalNameByteCount), true);
  // 0x08: u32
  if (data?.minNsByteCount !== undefined) view.setUint32(8, Number(data.minNsByteCount), true);
  // 0x0c: u32
  if (data?.maxNsByteCount !== undefined) view.setUint32(12, Number(data.maxNsByteCount), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CHAR_ARRAY_DESCRIPTION (size: 8)
 */
export interface WS_CHAR_ARRAY_DESCRIPTION {
  /** u32 */
  minCharCount: number;
  /** u32 */
  maxCharCount: number;
}

export const sizeofWS_CHAR_ARRAY_DESCRIPTION = 8;

export function allocWS_CHAR_ARRAY_DESCRIPTION(data?: Partial<WS_CHAR_ARRAY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CHAR_ARRAY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.minCharCount !== undefined) view.setUint32(0, Number(data.minCharCount), true);
  // 0x04: u32
  if (data?.maxCharCount !== undefined) view.setUint32(4, Number(data.maxCharCount), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_BYTE_ARRAY_DESCRIPTION (size: 8)
 */
export interface WS_BYTE_ARRAY_DESCRIPTION {
  /** u32 */
  minByteCount: number;
  /** u32 */
  maxByteCount: number;
}

export const sizeofWS_BYTE_ARRAY_DESCRIPTION = 8;

export function allocWS_BYTE_ARRAY_DESCRIPTION(data?: Partial<WS_BYTE_ARRAY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_BYTE_ARRAY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.minByteCount !== undefined) view.setUint32(0, Number(data.minByteCount), true);
  // 0x04: u32
  if (data?.maxByteCount !== undefined) view.setUint32(4, Number(data.maxByteCount), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_UTF8_ARRAY_DESCRIPTION (size: 8)
 */
export interface WS_UTF8_ARRAY_DESCRIPTION {
  /** u32 */
  minByteCount: number;
  /** u32 */
  maxByteCount: number;
}

export const sizeofWS_UTF8_ARRAY_DESCRIPTION = 8;

export function allocWS_UTF8_ARRAY_DESCRIPTION(data?: Partial<WS_UTF8_ARRAY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_UTF8_ARRAY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.minByteCount !== undefined) view.setUint32(0, Number(data.minByteCount), true);
  // 0x04: u32
  if (data?.maxByteCount !== undefined) view.setUint32(4, Number(data.maxByteCount), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_WSZ_DESCRIPTION (size: 8)
 */
export interface WS_WSZ_DESCRIPTION {
  /** u32 */
  minCharCount: number;
  /** u32 */
  maxCharCount: number;
}

export const sizeofWS_WSZ_DESCRIPTION = 8;

export function allocWS_WSZ_DESCRIPTION(data?: Partial<WS_WSZ_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_WSZ_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.minCharCount !== undefined) view.setUint32(0, Number(data.minCharCount), true);
  // 0x04: u32
  if (data?.maxCharCount !== undefined) view.setUint32(4, Number(data.maxCharCount), true);
  return buf;
}

export type CHAR = number;

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_INT8_DESCRIPTION (size: 16)
 */
export interface WS_INT8_DESCRIPTION {
  /** Windows.Win32.Foundation.CHAR */
  minValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.CHAR */
  maxValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_INT8_DESCRIPTION = 16;

export function allocWS_INT8_DESCRIPTION(data?: Partial<WS_INT8_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_INT8_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.minValue !== undefined) view.setBigUint64(0, data.minValue === null ? 0n : BigInt(util.toPointer(data.minValue)), true);
  // 0x08: pointer
  if (data?.maxValue !== undefined) view.setBigUint64(8, data.maxValue === null ? 0n : BigInt(util.toPointer(data.maxValue)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_UINT8_DESCRIPTION (size: 8)
 */
export interface WS_UINT8_DESCRIPTION {
  /** u8 */
  minValue: number;
  /** u8 */
  maxValue: number;
}

export const sizeofWS_UINT8_DESCRIPTION = 8;

export function allocWS_UINT8_DESCRIPTION(data?: Partial<WS_UINT8_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_UINT8_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.minValue !== undefined) view.setUint8(0, Number(data.minValue));
  // 0x01: u8
  if (data?.maxValue !== undefined) view.setUint8(1, Number(data.maxValue));
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_INT16_DESCRIPTION (size: 8)
 */
export interface WS_INT16_DESCRIPTION {
  /** i16 */
  minValue: number;
  /** i16 */
  maxValue: number;
}

export const sizeofWS_INT16_DESCRIPTION = 8;

export function allocWS_INT16_DESCRIPTION(data?: Partial<WS_INT16_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_INT16_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.minValue !== undefined) view.setInt16(0, Number(data.minValue), true);
  // 0x02: i16
  if (data?.maxValue !== undefined) view.setInt16(2, Number(data.maxValue), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_UINT16_DESCRIPTION (size: 8)
 */
export interface WS_UINT16_DESCRIPTION {
  /** u16 */
  minValue: number;
  /** u16 */
  maxValue: number;
}

export const sizeofWS_UINT16_DESCRIPTION = 8;

export function allocWS_UINT16_DESCRIPTION(data?: Partial<WS_UINT16_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_UINT16_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.minValue !== undefined) view.setUint16(0, Number(data.minValue), true);
  // 0x02: u16
  if (data?.maxValue !== undefined) view.setUint16(2, Number(data.maxValue), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_INT32_DESCRIPTION (size: 8)
 */
export interface WS_INT32_DESCRIPTION {
  /** i32 */
  minValue: number;
  /** i32 */
  maxValue: number;
}

export const sizeofWS_INT32_DESCRIPTION = 8;

export function allocWS_INT32_DESCRIPTION(data?: Partial<WS_INT32_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_INT32_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.minValue !== undefined) view.setInt32(0, Number(data.minValue), true);
  // 0x04: i32
  if (data?.maxValue !== undefined) view.setInt32(4, Number(data.maxValue), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_UINT32_DESCRIPTION (size: 8)
 */
export interface WS_UINT32_DESCRIPTION {
  /** u32 */
  minValue: number;
  /** u32 */
  maxValue: number;
}

export const sizeofWS_UINT32_DESCRIPTION = 8;

export function allocWS_UINT32_DESCRIPTION(data?: Partial<WS_UINT32_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_UINT32_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.minValue !== undefined) view.setUint32(0, Number(data.minValue), true);
  // 0x04: u32
  if (data?.maxValue !== undefined) view.setUint32(4, Number(data.maxValue), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_INT64_DESCRIPTION (size: 16)
 */
export interface WS_INT64_DESCRIPTION {
  /** i64 */
  minValue: Deno.PointerValue;
  /** i64 */
  maxValue: Deno.PointerValue;
}

export const sizeofWS_INT64_DESCRIPTION = 16;

export function allocWS_INT64_DESCRIPTION(data?: Partial<WS_INT64_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_INT64_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.minValue !== undefined) view.setBigInt64(0, BigInt(data.minValue), true);
  // 0x08: i64
  if (data?.maxValue !== undefined) view.setBigInt64(8, BigInt(data.maxValue), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_UINT64_DESCRIPTION (size: 16)
 */
export interface WS_UINT64_DESCRIPTION {
  /** u64 */
  minValue: Deno.PointerValue;
  /** u64 */
  maxValue: Deno.PointerValue;
}

export const sizeofWS_UINT64_DESCRIPTION = 16;

export function allocWS_UINT64_DESCRIPTION(data?: Partial<WS_UINT64_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_UINT64_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.minValue !== undefined) view.setBigUint64(0, BigInt(data.minValue), true);
  // 0x08: u64
  if (data?.maxValue !== undefined) view.setBigUint64(8, BigInt(data.maxValue), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_FLOAT_DESCRIPTION (size: 8)
 */
export interface WS_FLOAT_DESCRIPTION {
  /** f32 */
  minValue: number;
  /** f32 */
  maxValue: number;
}

export const sizeofWS_FLOAT_DESCRIPTION = 8;

export function allocWS_FLOAT_DESCRIPTION(data?: Partial<WS_FLOAT_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_FLOAT_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.minValue !== undefined) view.setFloat32(0, Number(data.minValue), true);
  // 0x04: f32
  if (data?.maxValue !== undefined) view.setFloat32(4, Number(data.maxValue), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_DOUBLE_DESCRIPTION (size: 16)
 */
export interface WS_DOUBLE_DESCRIPTION {
  /** f64 */
  minValue: number;
  /** f64 */
  maxValue: number;
}

export const sizeofWS_DOUBLE_DESCRIPTION = 16;

export function allocWS_DOUBLE_DESCRIPTION(data?: Partial<WS_DOUBLE_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_DOUBLE_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: f64
  if (data?.minValue !== undefined) view.setFloat64(0, Number(data.minValue), true);
  // 0x08: f64
  if (data?.maxValue !== undefined) view.setFloat64(8, Number(data.maxValue), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_DECIMAL_DESCRIPTION (size: 16)
 */
export interface WS_DECIMAL_DESCRIPTION {
  /** Windows.Win32.Foundation.DECIMAL */
  minValue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.DECIMAL */
  maxValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_DECIMAL_DESCRIPTION = 16;

export function allocWS_DECIMAL_DESCRIPTION(data?: Partial<WS_DECIMAL_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_DECIMAL_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.minValue !== undefined) view.setBigUint64(0, data.minValue === null ? 0n : BigInt(util.toPointer(data.minValue)), true);
  // 0x08: pointer
  if (data?.maxValue !== undefined) view.setBigUint64(8, data.maxValue === null ? 0n : BigInt(util.toPointer(data.maxValue)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_BYTES_DESCRIPTION (size: 8)
 */
export interface WS_BYTES_DESCRIPTION {
  /** u32 */
  minByteCount: number;
  /** u32 */
  maxByteCount: number;
}

export const sizeofWS_BYTES_DESCRIPTION = 8;

export function allocWS_BYTES_DESCRIPTION(data?: Partial<WS_BYTES_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_BYTES_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.minByteCount !== undefined) view.setUint32(0, Number(data.minByteCount), true);
  // 0x04: u32
  if (data?.maxByteCount !== undefined) view.setUint32(4, Number(data.maxByteCount), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ENUM_VALUE (size: 16)
 */
export interface WS_ENUM_VALUE {
  /** i32 */
  value: number;
  /** ptr */
  name: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_ENUM_VALUE = 16;

export function allocWS_ENUM_VALUE(data?: Partial<WS_ENUM_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ENUM_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.value !== undefined) view.setInt32(0, Number(data.value), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : BigInt(util.toPointer(data.name)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ENUM_DESCRIPTION (size: 24)
 */
export interface WS_ENUM_DESCRIPTION {
  /** ptr */
  values: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueCount: number;
  /** u32 */
  maxByteCount: number;
  /** ptr */
  nameIndices: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_ENUM_DESCRIPTION = 24;

export function allocWS_ENUM_DESCRIPTION(data?: Partial<WS_ENUM_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ENUM_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.values !== undefined) view.setBigUint64(0, data.values === null ? 0n : BigInt(util.toPointer(data.values)), true);
  // 0x08: u32
  if (data?.valueCount !== undefined) view.setUint32(8, Number(data.valueCount), true);
  // 0x0c: u32
  if (data?.maxByteCount !== undefined) view.setUint32(12, Number(data.maxByteCount), true);
  // 0x10: pointer
  if (data?.nameIndices !== undefined) view.setBigUint64(16, data.nameIndices === null ? 0n : BigInt(util.toPointer(data.nameIndices)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ITEM_RANGE (size: 8)
 */
export interface WS_ITEM_RANGE {
  /** u32 */
  minItemCount: number;
  /** u32 */
  maxItemCount: number;
}

export const sizeofWS_ITEM_RANGE = 8;

export function allocWS_ITEM_RANGE(data?: Partial<WS_ITEM_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ITEM_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.minItemCount !== undefined) view.setUint32(0, Number(data.minItemCount), true);
  // 0x04: u32
  if (data?.maxItemCount !== undefined) view.setUint32(4, Number(data.maxItemCount), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_DEFAULT_VALUE (size: 16)
 */
export interface WS_DEFAULT_VALUE {
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_DEFAULT_VALUE = 16;

export function allocWS_DEFAULT_VALUE(data?: Partial<WS_DEFAULT_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_DEFAULT_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x08: u32
  if (data?.valueSize !== undefined) view.setUint32(8, Number(data.valueSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_FIELD_DESCRIPTION (size: 88)
 */
export interface WS_FIELD_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_FIELD_MAPPING */
  mapping: WS_FIELD_MAPPING;
  /** ptr */
  localName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ns: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_TYPE */
  type: WS_TYPE;
  /** ptr */
  typeDescription: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  offset: number;
  /** u32 */
  options: number;
  /** ptr */
  defaultValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  countOffset: number;
  /** ptr */
  itemLocalName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  itemNs: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  itemRange: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_FIELD_DESCRIPTION = 88;

export function allocWS_FIELD_DESCRIPTION(data?: Partial<WS_FIELD_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_FIELD_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.mapping !== undefined) view.setInt32(0, Number(data.mapping), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.localName !== undefined) view.setBigUint64(8, data.localName === null ? 0n : BigInt(util.toPointer(data.localName)), true);
  // 0x10: pointer
  if (data?.ns !== undefined) view.setBigUint64(16, data.ns === null ? 0n : BigInt(util.toPointer(data.ns)), true);
  // 0x18: i32
  if (data?.type !== undefined) view.setInt32(24, Number(data.type), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.typeDescription !== undefined) view.setBigUint64(32, data.typeDescription === null ? 0n : BigInt(util.toPointer(data.typeDescription)), true);
  // 0x28: u32
  if (data?.offset !== undefined) view.setUint32(40, Number(data.offset), true);
  // 0x2c: u32
  if (data?.options !== undefined) view.setUint32(44, Number(data.options), true);
  // 0x30: pointer
  if (data?.defaultValue !== undefined) view.setBigUint64(48, data.defaultValue === null ? 0n : BigInt(util.toPointer(data.defaultValue)), true);
  // 0x38: u32
  if (data?.countOffset !== undefined) view.setUint32(56, Number(data.countOffset), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.itemLocalName !== undefined) view.setBigUint64(64, data.itemLocalName === null ? 0n : BigInt(util.toPointer(data.itemLocalName)), true);
  // 0x48: pointer
  if (data?.itemNs !== undefined) view.setBigUint64(72, data.itemNs === null ? 0n : BigInt(util.toPointer(data.itemNs)), true);
  // 0x50: pointer
  if (data?.itemRange !== undefined) view.setBigUint64(80, data.itemRange === null ? 0n : BigInt(util.toPointer(data.itemRange)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_UNION_FIELD_DESCRIPTION (size: 16)
 */
export interface WS_UNION_FIELD_DESCRIPTION {
  /** i32 */
  value: number;
  /** Windows.Win32.Networking.WindowsWebServices.WS_FIELD_DESCRIPTION */
  field: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_UNION_FIELD_DESCRIPTION = 16;

export function allocWS_UNION_FIELD_DESCRIPTION(data?: Partial<WS_UNION_FIELD_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_UNION_FIELD_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.value !== undefined) view.setInt32(0, Number(data.value), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.field !== undefined) view.setBigUint64(8, data.field === null ? 0n : BigInt(util.toPointer(data.field)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_STRUCT_DESCRIPTION (size: 64)
 */
export interface WS_STRUCT_DESCRIPTION {
  /** u32 */
  size: number;
  /** u32 */
  alignment: number;
  /** ptr */
  fields: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fieldCount: number;
  /** ptr */
  typeLocalName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  typeNs: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  parentType: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  subTypes: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  subTypeCount: number;
  /** u32 */
  structOptions: number;
}

export const sizeofWS_STRUCT_DESCRIPTION = 64;

export function allocWS_STRUCT_DESCRIPTION(data?: Partial<WS_STRUCT_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_STRUCT_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.size !== undefined) view.setUint32(0, Number(data.size), true);
  // 0x04: u32
  if (data?.alignment !== undefined) view.setUint32(4, Number(data.alignment), true);
  // 0x08: pointer
  if (data?.fields !== undefined) view.setBigUint64(8, data.fields === null ? 0n : BigInt(util.toPointer(data.fields)), true);
  // 0x10: u32
  if (data?.fieldCount !== undefined) view.setUint32(16, Number(data.fieldCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.typeLocalName !== undefined) view.setBigUint64(24, data.typeLocalName === null ? 0n : BigInt(util.toPointer(data.typeLocalName)), true);
  // 0x20: pointer
  if (data?.typeNs !== undefined) view.setBigUint64(32, data.typeNs === null ? 0n : BigInt(util.toPointer(data.typeNs)), true);
  // 0x28: pointer
  if (data?.parentType !== undefined) view.setBigUint64(40, data.parentType === null ? 0n : BigInt(util.toPointer(data.parentType)), true);
  // 0x30: pointer
  if (data?.subTypes !== undefined) view.setBigUint64(48, data.subTypes === null ? 0n : BigInt(util.toPointer(data.subTypes)), true);
  // 0x38: u32
  if (data?.subTypeCount !== undefined) view.setUint32(56, Number(data.subTypeCount), true);
  // 0x3c: u32
  if (data?.structOptions !== undefined) view.setUint32(60, Number(data.structOptions), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_UNION_DESCRIPTION (size: 40)
 */
export interface WS_UNION_DESCRIPTION {
  /** u32 */
  size: number;
  /** u32 */
  alignment: number;
  /** ptr */
  fields: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  fieldCount: number;
  /** u32 */
  enumOffset: number;
  /** i32 */
  noneEnumValue: number;
  /** ptr */
  valueIndices: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_UNION_DESCRIPTION = 40;

export function allocWS_UNION_DESCRIPTION(data?: Partial<WS_UNION_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_UNION_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.size !== undefined) view.setUint32(0, Number(data.size), true);
  // 0x04: u32
  if (data?.alignment !== undefined) view.setUint32(4, Number(data.alignment), true);
  // 0x08: pointer
  if (data?.fields !== undefined) view.setBigUint64(8, data.fields === null ? 0n : BigInt(util.toPointer(data.fields)), true);
  // 0x10: u32
  if (data?.fieldCount !== undefined) view.setUint32(16, Number(data.fieldCount), true);
  // 0x14: u32
  if (data?.enumOffset !== undefined) view.setUint32(20, Number(data.enumOffset), true);
  // 0x18: i32
  if (data?.noneEnumValue !== undefined) view.setInt32(24, Number(data.noneEnumValue), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.valueIndices !== undefined) view.setBigUint64(32, data.valueIndices === null ? 0n : BigInt(util.toPointer(data.valueIndices)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_ADDRESS_DESCRIPTION (size: 8)
 */
export interface WS_ENDPOINT_ADDRESS_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ADDRESSING_VERSION */
  addressingVersion: WS_ADDRESSING_VERSION;
}

export const sizeofWS_ENDPOINT_ADDRESS_DESCRIPTION = 8;

export function allocWS_ENDPOINT_ADDRESS_DESCRIPTION(data?: Partial<WS_ENDPOINT_ADDRESS_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ENDPOINT_ADDRESS_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.addressingVersion !== undefined) view.setInt32(0, Number(data.addressingVersion), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_FAULT_DESCRIPTION (size: 8)
 */
export interface WS_FAULT_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENVELOPE_VERSION */
  envelopeVersion: WS_ENVELOPE_VERSION;
}

export const sizeofWS_FAULT_DESCRIPTION = 8;

export function allocWS_FAULT_DESCRIPTION(data?: Partial<WS_FAULT_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_FAULT_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.envelopeVersion !== undefined) view.setInt32(0, Number(data.envelopeVersion), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_VOID_DESCRIPTION (size: 8)
 */
export interface WS_VOID_DESCRIPTION {
  /** u32 */
  size: number;
}

export const sizeofWS_VOID_DESCRIPTION = 8;

export function allocWS_VOID_DESCRIPTION(data?: Partial<WS_VOID_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_VOID_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.size !== undefined) view.setUint32(0, Number(data.size), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CUSTOM_TYPE_DESCRIPTION (size: 40)
 */
export interface WS_CUSTOM_TYPE_DESCRIPTION {
  /** u32 */
  size: number;
  /** u32 */
  alignment: number;
  /** Windows.Win32.Networking.WindowsWebServices.WS_READ_TYPE_CALLBACK */
  readCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_WRITE_TYPE_CALLBACK */
  writeCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  descriptionData: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_IS_DEFAULT_VALUE_CALLBACK */
  isDefaultValueCallback: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_CUSTOM_TYPE_DESCRIPTION = 40;

export function allocWS_CUSTOM_TYPE_DESCRIPTION(data?: Partial<WS_CUSTOM_TYPE_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CUSTOM_TYPE_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.size !== undefined) view.setUint32(0, Number(data.size), true);
  // 0x04: u32
  if (data?.alignment !== undefined) view.setUint32(4, Number(data.alignment), true);
  // 0x08: pointer
  if (data?.readCallback !== undefined) view.setBigUint64(8, data.readCallback === null ? 0n : BigInt(util.toPointer(data.readCallback)), true);
  // 0x10: pointer
  if (data?.writeCallback !== undefined) view.setBigUint64(16, data.writeCallback === null ? 0n : BigInt(util.toPointer(data.writeCallback)), true);
  // 0x18: pointer
  if (data?.descriptionData !== undefined) view.setBigUint64(24, data.descriptionData === null ? 0n : BigInt(util.toPointer(data.descriptionData)), true);
  // 0x20: pointer
  if (data?.isDefaultValueCallback !== undefined) view.setBigUint64(32, data.isDefaultValueCallback === null ? 0n : BigInt(util.toPointer(data.isDefaultValueCallback)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ATTRIBUTE_DESCRIPTION (size: 32)
 */
export interface WS_ATTRIBUTE_DESCRIPTION {
  /** ptr */
  attributeLocalName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  attributeNs: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_TYPE */
  type: WS_TYPE;
  /** ptr */
  typeDescription: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_ATTRIBUTE_DESCRIPTION = 32;

export function allocWS_ATTRIBUTE_DESCRIPTION(data?: Partial<WS_ATTRIBUTE_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ATTRIBUTE_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.attributeLocalName !== undefined) view.setBigUint64(0, data.attributeLocalName === null ? 0n : BigInt(util.toPointer(data.attributeLocalName)), true);
  // 0x08: pointer
  if (data?.attributeNs !== undefined) view.setBigUint64(8, data.attributeNs === null ? 0n : BigInt(util.toPointer(data.attributeNs)), true);
  // 0x10: i32
  if (data?.type !== undefined) view.setInt32(16, Number(data.type), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.typeDescription !== undefined) view.setBigUint64(24, data.typeDescription === null ? 0n : BigInt(util.toPointer(data.typeDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_PARAMETER_DESCRIPTION (size: 8)
 */
export interface WS_PARAMETER_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_PARAMETER_TYPE */
  parameterType: WS_PARAMETER_TYPE;
  /** u16 */
  inputMessageIndex: number;
  /** u16 */
  outputMessageIndex: number;
}

export const sizeofWS_PARAMETER_DESCRIPTION = 8;

export function allocWS_PARAMETER_DESCRIPTION(data?: Partial<WS_PARAMETER_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_PARAMETER_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.parameterType !== undefined) view.setInt32(0, Number(data.parameterType), true);
  // 0x04: u16
  if (data?.inputMessageIndex !== undefined) view.setUint16(4, Number(data.inputMessageIndex), true);
  // 0x06: u16
  if (data?.outputMessageIndex !== undefined) view.setUint16(6, Number(data.outputMessageIndex), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_OPERATION_DESCRIPTION (size: 64)
 */
export interface WS_OPERATION_DESCRIPTION {
  /** u32 */
  versionInfo: number;
  /** ptr */
  inputMessageDescription: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  outputMessageDescription: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  inputMessageOptions: number;
  /** u32 */
  outputMessageOptions: number;
  /** u16 */
  parameterCount: number;
  /** ptr */
  parameterDescription: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_STUB_CALLBACK */
  stubCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_OPERATION_STYLE */
  style: WS_OPERATION_STYLE;
}

export const sizeofWS_OPERATION_DESCRIPTION = 64;

export function allocWS_OPERATION_DESCRIPTION(data?: Partial<WS_OPERATION_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_OPERATION_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.versionInfo !== undefined) view.setUint32(0, Number(data.versionInfo), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.inputMessageDescription !== undefined) view.setBigUint64(8, data.inputMessageDescription === null ? 0n : BigInt(util.toPointer(data.inputMessageDescription)), true);
  // 0x10: pointer
  if (data?.outputMessageDescription !== undefined) view.setBigUint64(16, data.outputMessageDescription === null ? 0n : BigInt(util.toPointer(data.outputMessageDescription)), true);
  // 0x18: u32
  if (data?.inputMessageOptions !== undefined) view.setUint32(24, Number(data.inputMessageOptions), true);
  // 0x1c: u32
  if (data?.outputMessageOptions !== undefined) view.setUint32(28, Number(data.outputMessageOptions), true);
  // 0x20: u16
  if (data?.parameterCount !== undefined) view.setUint16(32, Number(data.parameterCount), true);
  // 0x22: pad6
  // 0x28: pointer
  if (data?.parameterDescription !== undefined) view.setBigUint64(40, data.parameterDescription === null ? 0n : BigInt(util.toPointer(data.parameterDescription)), true);
  // 0x30: pointer
  if (data?.stubCallback !== undefined) view.setBigUint64(48, data.stubCallback === null ? 0n : BigInt(util.toPointer(data.stubCallback)), true);
  // 0x38: i32
  if (data?.style !== undefined) view.setInt32(56, Number(data.style), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CONTRACT_DESCRIPTION (size: 16)
 */
export interface WS_CONTRACT_DESCRIPTION {
  /** u32 */
  operationCount: number;
  /** ptr */
  operations: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_CONTRACT_DESCRIPTION = 16;

export function allocWS_CONTRACT_DESCRIPTION(data?: Partial<WS_CONTRACT_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CONTRACT_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.operationCount !== undefined) view.setUint32(0, Number(data.operationCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.operations !== undefined) view.setBigUint64(8, data.operations === null ? 0n : BigInt(util.toPointer(data.operations)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_CONTRACT (size: 24)
 */
export interface WS_SERVICE_CONTRACT {
  /** ptr */
  contractDescription: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_MESSAGE_RECEIVE_CALLBACK */
  defaultMessageHandlerCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  methodTable: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_SERVICE_CONTRACT = 24;

export function allocWS_SERVICE_CONTRACT(data?: Partial<WS_SERVICE_CONTRACT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SERVICE_CONTRACT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.contractDescription !== undefined) view.setBigUint64(0, data.contractDescription === null ? 0n : BigInt(util.toPointer(data.contractDescription)), true);
  // 0x08: pointer
  if (data?.defaultMessageHandlerCallback !== undefined) view.setBigUint64(8, data.defaultMessageHandlerCallback === null ? 0n : BigInt(util.toPointer(data.defaultMessageHandlerCallback)), true);
  // 0x10: pointer
  if (data?.methodTable !== undefined) view.setBigUint64(16, data.methodTable === null ? 0n : BigInt(util.toPointer(data.methodTable)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_PROPERTY (size: 24)
 */
export interface WS_SERVICE_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_PROPERTY_ID */
  id: WS_SERVICE_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_SERVICE_PROPERTY = 24;

export function allocWS_SERVICE_PROPERTY(data?: Partial<WS_SERVICE_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SERVICE_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_ENDPOINT_PROPERTY (size: 24)
 */
export interface WS_SERVICE_ENDPOINT_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_ENDPOINT_PROPERTY_ID */
  id: WS_SERVICE_ENDPOINT_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_SERVICE_ENDPOINT_PROPERTY = 24;

export function allocWS_SERVICE_ENDPOINT_PROPERTY(data?: Partial<WS_SERVICE_ENDPOINT_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SERVICE_ENDPOINT_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_PROPERTY_ACCEPT_CALLBACK (size: 8)
 */
export interface WS_SERVICE_PROPERTY_ACCEPT_CALLBACK {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_ACCEPT_CHANNEL_CALLBACK */
  callback: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SERVICE_PROPERTY_ACCEPT_CALLBACK = 8;

export function allocWS_SERVICE_PROPERTY_ACCEPT_CALLBACK(data?: Partial<WS_SERVICE_PROPERTY_ACCEPT_CALLBACK>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SERVICE_PROPERTY_ACCEPT_CALLBACK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.callback !== undefined) view.setBigUint64(0, data.callback === null ? 0n : BigInt(util.toPointer(data.callback)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_METADATA_DOCUMENT (size: 16)
 */
export interface WS_SERVICE_METADATA_DOCUMENT {
  /** ptr */
  content: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  name: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_SERVICE_METADATA_DOCUMENT = 16;

export function allocWS_SERVICE_METADATA_DOCUMENT(data?: Partial<WS_SERVICE_METADATA_DOCUMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SERVICE_METADATA_DOCUMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.content !== undefined) view.setBigUint64(0, data.content === null ? 0n : BigInt(util.toPointer(data.content)), true);
  // 0x08: pointer
  if (data?.name !== undefined) view.setBigUint64(8, data.name === null ? 0n : BigInt(util.toPointer(data.name)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_METADATA (size: 32)
 */
export interface WS_SERVICE_METADATA {
  /** u32 */
  documentCount: number;
  /** ptr */
  documents: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  serviceName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  serviceNs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_SERVICE_METADATA = 32;

export function allocWS_SERVICE_METADATA(data?: Partial<WS_SERVICE_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SERVICE_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.documentCount !== undefined) view.setUint32(0, Number(data.documentCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.documents !== undefined) view.setBigUint64(8, data.documents === null ? 0n : BigInt(util.toPointer(data.documents)), true);
  // 0x10: pointer
  if (data?.serviceName !== undefined) view.setBigUint64(16, data.serviceName === null ? 0n : BigInt(util.toPointer(data.serviceName)), true);
  // 0x18: pointer
  if (data?.serviceNs !== undefined) view.setBigUint64(24, data.serviceNs === null ? 0n : BigInt(util.toPointer(data.serviceNs)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_PROPERTY_CLOSE_CALLBACK (size: 8)
 */
export interface WS_SERVICE_PROPERTY_CLOSE_CALLBACK {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_CLOSE_CHANNEL_CALLBACK */
  callback: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SERVICE_PROPERTY_CLOSE_CALLBACK = 8;

export function allocWS_SERVICE_PROPERTY_CLOSE_CALLBACK(data?: Partial<WS_SERVICE_PROPERTY_CLOSE_CALLBACK>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SERVICE_PROPERTY_CLOSE_CALLBACK);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.callback !== undefined) view.setBigUint64(0, data.callback === null ? 0n : BigInt(util.toPointer(data.callback)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_ENDPOINT_METADATA (size: 24)
 */
export interface WS_SERVICE_ENDPOINT_METADATA {
  /** ptr */
  portName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  bindingName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  bindingNs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_SERVICE_ENDPOINT_METADATA = 24;

export function allocWS_SERVICE_ENDPOINT_METADATA(data?: Partial<WS_SERVICE_ENDPOINT_METADATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SERVICE_ENDPOINT_METADATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.portName !== undefined) view.setBigUint64(0, data.portName === null ? 0n : BigInt(util.toPointer(data.portName)), true);
  // 0x08: pointer
  if (data?.bindingName !== undefined) view.setBigUint64(8, data.bindingName === null ? 0n : BigInt(util.toPointer(data.bindingName)), true);
  // 0x10: pointer
  if (data?.bindingNs !== undefined) view.setBigUint64(16, data.bindingNs === null ? 0n : BigInt(util.toPointer(data.bindingNs)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_ENDPOINT (size: 64)
 */
export interface WS_SERVICE_ENDPOINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_ADDRESS */
  address: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_BINDING */
  channelBinding: WS_CHANNEL_BINDING;
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_TYPE */
  channelType: WS_CHANNEL_TYPE;
  /** ptr */
  securityDescription: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  contract: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_SECURITY_CALLBACK */
  authorizationCallback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  properties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyCount: number;
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SERVICE_ENDPOINT = 64;

export function allocWS_SERVICE_ENDPOINT(data?: Partial<WS_SERVICE_ENDPOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SERVICE_ENDPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.address !== undefined) view.setBigUint64(0, data.address === null ? 0n : BigInt(util.toPointer(data.address)), true);
  // 0x08: i32
  if (data?.channelBinding !== undefined) view.setInt32(8, Number(data.channelBinding), true);
  // 0x0c: i32
  if (data?.channelType !== undefined) view.setInt32(12, Number(data.channelType), true);
  // 0x10: pointer
  if (data?.securityDescription !== undefined) view.setBigUint64(16, data.securityDescription === null ? 0n : BigInt(util.toPointer(data.securityDescription)), true);
  // 0x18: pointer
  if (data?.contract !== undefined) view.setBigUint64(24, data.contract === null ? 0n : BigInt(util.toPointer(data.contract)), true);
  // 0x20: pointer
  if (data?.authorizationCallback !== undefined) view.setBigUint64(32, data.authorizationCallback === null ? 0n : BigInt(util.toPointer(data.authorizationCallback)), true);
  // 0x28: pointer
  if (data?.properties !== undefined) view.setBigUint64(40, data.properties === null ? 0n : BigInt(util.toPointer(data.properties)), true);
  // 0x30: u32
  if (data?.propertyCount !== undefined) view.setUint32(48, Number(data.propertyCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(56, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_PROXY_PROPERTY (size: 24)
 */
export interface WS_PROXY_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_PROXY_PROPERTY_ID */
  id: WS_PROXY_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_PROXY_PROPERTY = 24;

export function allocWS_PROXY_PROPERTY(data?: Partial<WS_PROXY_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_PROXY_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_PROXY_MESSAGE_CALLBACK_CONTEXT (size: 16)
 */
export interface WS_PROXY_MESSAGE_CALLBACK_CONTEXT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_PROXY_MESSAGE_CALLBACK */
  callback: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  state: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_PROXY_MESSAGE_CALLBACK_CONTEXT = 16;

export function allocWS_PROXY_MESSAGE_CALLBACK_CONTEXT(data?: Partial<WS_PROXY_MESSAGE_CALLBACK_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_PROXY_MESSAGE_CALLBACK_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.callback !== undefined) view.setBigUint64(0, data.callback === null ? 0n : BigInt(util.toPointer(data.callback)), true);
  // 0x08: pointer
  if (data?.state !== undefined) view.setBigUint64(8, data.state === null ? 0n : BigInt(util.toPointer(data.state)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CALL_PROPERTY (size: 24)
 */
export interface WS_CALL_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CALL_PROPERTY_ID */
  id: WS_CALL_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_CALL_PROPERTY = 24;

export function allocWS_CALL_PROPERTY(data?: Partial<WS_CALL_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CALL_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_URL (size: 8)
 */
export interface WS_URL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_URL_SCHEME_TYPE */
  scheme: WS_URL_SCHEME_TYPE;
}

export const sizeofWS_URL = 8;

export function allocWS_URL(data?: Partial<WS_URL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_URL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.scheme !== undefined) view.setInt32(0, Number(data.scheme), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_URL (size: 56)
 */
export interface WS_HTTP_URL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_URL */
  url: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  host: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  port: number;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  portAsString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  path: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  query: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  fragment: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_URL = 56;

export function allocWS_HTTP_URL(data?: Partial<WS_HTTP_URL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_URL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.url !== undefined) view.setBigUint64(0, data.url === null ? 0n : BigInt(util.toPointer(data.url)), true);
  // 0x08: pointer
  if (data?.host !== undefined) view.setBigUint64(8, data.host === null ? 0n : BigInt(util.toPointer(data.host)), true);
  // 0x10: u16
  if (data?.port !== undefined) view.setUint16(16, Number(data.port), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.portAsString !== undefined) view.setBigUint64(24, data.portAsString === null ? 0n : BigInt(util.toPointer(data.portAsString)), true);
  // 0x20: pointer
  if (data?.path !== undefined) view.setBigUint64(32, data.path === null ? 0n : BigInt(util.toPointer(data.path)), true);
  // 0x28: pointer
  if (data?.query !== undefined) view.setBigUint64(40, data.query === null ? 0n : BigInt(util.toPointer(data.query)), true);
  // 0x30: pointer
  if (data?.fragment !== undefined) view.setBigUint64(48, data.fragment === null ? 0n : BigInt(util.toPointer(data.fragment)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTPS_URL (size: 56)
 */
export interface WS_HTTPS_URL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_URL */
  url: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  host: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  port: number;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  portAsString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  path: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  query: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  fragment: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTPS_URL = 56;

export function allocWS_HTTPS_URL(data?: Partial<WS_HTTPS_URL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTPS_URL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.url !== undefined) view.setBigUint64(0, data.url === null ? 0n : BigInt(util.toPointer(data.url)), true);
  // 0x08: pointer
  if (data?.host !== undefined) view.setBigUint64(8, data.host === null ? 0n : BigInt(util.toPointer(data.host)), true);
  // 0x10: u16
  if (data?.port !== undefined) view.setUint16(16, Number(data.port), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.portAsString !== undefined) view.setBigUint64(24, data.portAsString === null ? 0n : BigInt(util.toPointer(data.portAsString)), true);
  // 0x20: pointer
  if (data?.path !== undefined) view.setBigUint64(32, data.path === null ? 0n : BigInt(util.toPointer(data.path)), true);
  // 0x28: pointer
  if (data?.query !== undefined) view.setBigUint64(40, data.query === null ? 0n : BigInt(util.toPointer(data.query)), true);
  // 0x30: pointer
  if (data?.fragment !== undefined) view.setBigUint64(48, data.fragment === null ? 0n : BigInt(util.toPointer(data.fragment)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_NETTCP_URL (size: 56)
 */
export interface WS_NETTCP_URL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_URL */
  url: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  host: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  port: number;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  portAsString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  path: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  query: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  fragment: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_NETTCP_URL = 56;

export function allocWS_NETTCP_URL(data?: Partial<WS_NETTCP_URL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_NETTCP_URL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.url !== undefined) view.setBigUint64(0, data.url === null ? 0n : BigInt(util.toPointer(data.url)), true);
  // 0x08: pointer
  if (data?.host !== undefined) view.setBigUint64(8, data.host === null ? 0n : BigInt(util.toPointer(data.host)), true);
  // 0x10: u16
  if (data?.port !== undefined) view.setUint16(16, Number(data.port), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.portAsString !== undefined) view.setBigUint64(24, data.portAsString === null ? 0n : BigInt(util.toPointer(data.portAsString)), true);
  // 0x20: pointer
  if (data?.path !== undefined) view.setBigUint64(32, data.path === null ? 0n : BigInt(util.toPointer(data.path)), true);
  // 0x28: pointer
  if (data?.query !== undefined) view.setBigUint64(40, data.query === null ? 0n : BigInt(util.toPointer(data.query)), true);
  // 0x30: pointer
  if (data?.fragment !== undefined) view.setBigUint64(48, data.fragment === null ? 0n : BigInt(util.toPointer(data.fragment)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SOAPUDP_URL (size: 56)
 */
export interface WS_SOAPUDP_URL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_URL */
  url: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  host: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  port: number;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  portAsString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  path: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  query: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  fragment: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SOAPUDP_URL = 56;

export function allocWS_SOAPUDP_URL(data?: Partial<WS_SOAPUDP_URL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SOAPUDP_URL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.url !== undefined) view.setBigUint64(0, data.url === null ? 0n : BigInt(util.toPointer(data.url)), true);
  // 0x08: pointer
  if (data?.host !== undefined) view.setBigUint64(8, data.host === null ? 0n : BigInt(util.toPointer(data.host)), true);
  // 0x10: u16
  if (data?.port !== undefined) view.setUint16(16, Number(data.port), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.portAsString !== undefined) view.setBigUint64(24, data.portAsString === null ? 0n : BigInt(util.toPointer(data.portAsString)), true);
  // 0x20: pointer
  if (data?.path !== undefined) view.setBigUint64(32, data.path === null ? 0n : BigInt(util.toPointer(data.path)), true);
  // 0x28: pointer
  if (data?.query !== undefined) view.setBigUint64(40, data.query === null ? 0n : BigInt(util.toPointer(data.query)), true);
  // 0x30: pointer
  if (data?.fragment !== undefined) view.setBigUint64(48, data.fragment === null ? 0n : BigInt(util.toPointer(data.fragment)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_NETPIPE_URL (size: 56)
 */
export interface WS_NETPIPE_URL {
  /** Windows.Win32.Networking.WindowsWebServices.WS_URL */
  url: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  host: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  port: number;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  portAsString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  path: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  query: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  fragment: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_NETPIPE_URL = 56;

export function allocWS_NETPIPE_URL(data?: Partial<WS_NETPIPE_URL>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_NETPIPE_URL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.url !== undefined) view.setBigUint64(0, data.url === null ? 0n : BigInt(util.toPointer(data.url)), true);
  // 0x08: pointer
  if (data?.host !== undefined) view.setBigUint64(8, data.host === null ? 0n : BigInt(util.toPointer(data.host)), true);
  // 0x10: u16
  if (data?.port !== undefined) view.setUint16(16, Number(data.port), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.portAsString !== undefined) view.setBigUint64(24, data.portAsString === null ? 0n : BigInt(util.toPointer(data.portAsString)), true);
  // 0x20: pointer
  if (data?.path !== undefined) view.setBigUint64(32, data.path === null ? 0n : BigInt(util.toPointer(data.path)), true);
  // 0x28: pointer
  if (data?.query !== undefined) view.setBigUint64(40, data.query === null ? 0n : BigInt(util.toPointer(data.query)), true);
  // 0x30: pointer
  if (data?.fragment !== undefined) view.setBigUint64(48, data.fragment === null ? 0n : BigInt(util.toPointer(data.fragment)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_UNIQUE_ID (size: 16)
 */
export interface WS_UNIQUE_ID {
  /** Windows.Win32.Networking.WindowsWebServices.WS_STRING */
  uri: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_UNIQUE_ID = 16;

export function allocWS_UNIQUE_ID(data?: Partial<WS_UNIQUE_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_UNIQUE_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.uri !== undefined) view.setBigUint64(0, data.uri === null ? 0n : BigInt(util.toPointer(data.uri)), true);
  // 0x08: pointer
  if (data?.guid !== undefined) view.setBigUint64(8, data.guid === null ? 0n : BigInt(util.toPointer(data.guid)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_BUFFERS (size: 16)
 */
export interface WS_BUFFERS {
  /** u32 */
  bufferCount: number;
  /** ptr */
  buffers: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_BUFFERS = 16;

export function allocWS_BUFFERS(data?: Partial<WS_BUFFERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_BUFFERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.bufferCount !== undefined) view.setUint32(0, Number(data.bufferCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.buffers !== undefined) view.setBigUint64(8, data.buffers === null ? 0n : BigInt(util.toPointer(data.buffers)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_METADATA_ENDPOINT (size: 72)
 */
export interface WS_METADATA_ENDPOINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_ADDRESS */
  endpointAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  endpointPolicy: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  portName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  serviceName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  serviceNs: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  bindingName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  bindingNs: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  portTypeName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  portTypeNs: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_METADATA_ENDPOINT = 72;

export function allocWS_METADATA_ENDPOINT(data?: Partial<WS_METADATA_ENDPOINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_METADATA_ENDPOINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.endpointAddress !== undefined) view.setBigUint64(0, data.endpointAddress === null ? 0n : BigInt(util.toPointer(data.endpointAddress)), true);
  // 0x08: pointer
  if (data?.endpointPolicy !== undefined) view.setBigUint64(8, data.endpointPolicy === null ? 0n : BigInt(util.toPointer(data.endpointPolicy)), true);
  // 0x10: pointer
  if (data?.portName !== undefined) view.setBigUint64(16, data.portName === null ? 0n : BigInt(util.toPointer(data.portName)), true);
  // 0x18: pointer
  if (data?.serviceName !== undefined) view.setBigUint64(24, data.serviceName === null ? 0n : BigInt(util.toPointer(data.serviceName)), true);
  // 0x20: pointer
  if (data?.serviceNs !== undefined) view.setBigUint64(32, data.serviceNs === null ? 0n : BigInt(util.toPointer(data.serviceNs)), true);
  // 0x28: pointer
  if (data?.bindingName !== undefined) view.setBigUint64(40, data.bindingName === null ? 0n : BigInt(util.toPointer(data.bindingName)), true);
  // 0x30: pointer
  if (data?.bindingNs !== undefined) view.setBigUint64(48, data.bindingNs === null ? 0n : BigInt(util.toPointer(data.bindingNs)), true);
  // 0x38: pointer
  if (data?.portTypeName !== undefined) view.setBigUint64(56, data.portTypeName === null ? 0n : BigInt(util.toPointer(data.portTypeName)), true);
  // 0x40: pointer
  if (data?.portTypeNs !== undefined) view.setBigUint64(64, data.portTypeNs === null ? 0n : BigInt(util.toPointer(data.portTypeNs)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_METADATA_ENDPOINTS (size: 16)
 */
export interface WS_METADATA_ENDPOINTS {
  /** ptr */
  endpoints: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  endpointCount: number;
}

export const sizeofWS_METADATA_ENDPOINTS = 16;

export function allocWS_METADATA_ENDPOINTS(data?: Partial<WS_METADATA_ENDPOINTS>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_METADATA_ENDPOINTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.endpoints !== undefined) view.setBigUint64(0, data.endpoints === null ? 0n : BigInt(util.toPointer(data.endpoints)), true);
  // 0x08: u32
  if (data?.endpointCount !== undefined) view.setUint32(8, Number(data.endpointCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_METADATA_PROPERTY (size: 24)
 */
export interface WS_METADATA_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_METADATA_PROPERTY_ID */
  id: WS_METADATA_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_METADATA_PROPERTY = 24;

export function allocWS_METADATA_PROPERTY(data?: Partial<WS_METADATA_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_METADATA_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_POLICY_PROPERTY (size: 24)
 */
export interface WS_POLICY_PROPERTY {
  /** Windows.Win32.Networking.WindowsWebServices.WS_POLICY_PROPERTY_ID */
  id: WS_POLICY_PROPERTY_ID;
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  valueSize: number;
}

export const sizeofWS_POLICY_PROPERTY = 24;

export function allocWS_POLICY_PROPERTY(data?: Partial<WS_POLICY_PROPERTY>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_POLICY_PROPERTY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x10: u32
  if (data?.valueSize !== undefined) view.setUint32(16, Number(data.valueSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_POLICY_PROPERTIES (size: 16)
 */
export interface WS_POLICY_PROPERTIES {
  /** ptr */
  properties: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyCount: number;
}

export const sizeofWS_POLICY_PROPERTIES = 16;

export function allocWS_POLICY_PROPERTIES(data?: Partial<WS_POLICY_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_POLICY_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.properties !== undefined) view.setBigUint64(0, data.properties === null ? 0n : BigInt(util.toPointer(data.properties)), true);
  // 0x08: u32
  if (data?.propertyCount !== undefined) view.setUint32(8, Number(data.propertyCount), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _out_e__Struct (size: 8)
 */
export interface _out_e__Struct {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTY */
  securityBindingProperty: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_out_e__Struct = 8;

export function alloc_out_e__Struct(data?: Partial<_out_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_out_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindingProperty !== undefined) view.setBigUint64(0, data.securityBindingProperty === null ? 0n : BigInt(util.toPointer(data.securityBindingProperty)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTY_CONSTRAINT (size: 32)
 */
export interface WS_SECURITY_BINDING_PROPERTY_CONSTRAINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTY_ID */
  id: WS_SECURITY_BINDING_PROPERTY_ID;
  /** ptr */
  allowedValues: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  allowedValuesSize: number;
  /** _out_e__Struct */
  out: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SECURITY_BINDING_PROPERTY_CONSTRAINT = 32;

export function allocWS_SECURITY_BINDING_PROPERTY_CONSTRAINT(data?: Partial<WS_SECURITY_BINDING_PROPERTY_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_BINDING_PROPERTY_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.allowedValues !== undefined) view.setBigUint64(8, data.allowedValues === null ? 0n : BigInt(util.toPointer(data.allowedValues)), true);
  // 0x10: u32
  if (data?.allowedValuesSize !== undefined) view.setUint32(16, Number(data.allowedValuesSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.out !== undefined) view.setBigUint64(24, data.out === null ? 0n : BigInt(util.toPointer(data.out)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_CONSTRAINT (size: 24)
 */
export interface WS_SECURITY_BINDING_CONSTRAINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_CONSTRAINT_TYPE */
  type: WS_SECURITY_BINDING_CONSTRAINT_TYPE;
  /** ptr */
  propertyConstraints: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  propertyConstraintCount: number;
}

export const sizeofWS_SECURITY_BINDING_CONSTRAINT = 24;

export function allocWS_SECURITY_BINDING_CONSTRAINT(data?: Partial<WS_SECURITY_BINDING_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_BINDING_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.propertyConstraints !== undefined) view.setBigUint64(8, data.propertyConstraints === null ? 0n : BigInt(util.toPointer(data.propertyConstraints)), true);
  // 0x10: u32
  if (data?.propertyConstraintCount !== undefined) view.setUint32(16, Number(data.propertyConstraintCount), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT (size: 16)
 */
export interface WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_CONSTRAINT */
  bindingConstraint: Uint8Array | Deno.PointerValue | null;
  /** _out_e__Struct */
  out: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT = 16;

export function allocWS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT(data?: Partial<WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bindingConstraint !== undefined) view.setBigUint64(0, data.bindingConstraint === null ? 0n : BigInt(util.toPointer(data.bindingConstraint)), true);
  // 0x08: pointer
  if (data?.out !== undefined) view.setBigUint64(8, data.out === null ? 0n : BigInt(util.toPointer(data.out)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT (size: 16)
 */
export interface WS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_CONSTRAINT */
  bindingConstraint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_SECURITY_USAGE */
  bindingUsage: WS_MESSAGE_SECURITY_USAGE;
}

export const sizeofWS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT = 16;

export function allocWS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT(data?: Partial<WS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bindingConstraint !== undefined) view.setBigUint64(0, data.bindingConstraint === null ? 0n : BigInt(util.toPointer(data.bindingConstraint)), true);
  // 0x08: i32
  if (data?.bindingUsage !== undefined) view.setInt32(8, Number(data.bindingUsage), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT (size: 8)
 */
export interface WS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_CONSTRAINT */
  bindingConstraint: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT = 8;

export function allocWS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT(data?: Partial<WS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bindingConstraint !== undefined) view.setBigUint64(0, data.bindingConstraint === null ? 0n : BigInt(util.toPointer(data.bindingConstraint)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT (size: 8)
 */
export interface WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_CONSTRAINT */
  bindingConstraint: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT = 8;

export function allocWS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT(data?: Partial<WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bindingConstraint !== undefined) view.setBigUint64(0, data.bindingConstraint === null ? 0n : BigInt(util.toPointer(data.bindingConstraint)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT (size: 16)
 */
export interface WS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_CONSTRAINT */
  bindingConstraint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_SECURITY_USAGE */
  bindingUsage: WS_MESSAGE_SECURITY_USAGE;
}

export const sizeofWS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT = 16;

export function allocWS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT(data?: Partial<WS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bindingConstraint !== undefined) view.setBigUint64(0, data.bindingConstraint === null ? 0n : BigInt(util.toPointer(data.bindingConstraint)), true);
  // 0x08: i32
  if (data?.bindingUsage !== undefined) view.setInt32(8, Number(data.bindingUsage), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT (size: 16)
 */
export interface WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_CONSTRAINT */
  bindingConstraint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_SECURITY_USAGE */
  bindingUsage: WS_MESSAGE_SECURITY_USAGE;
}

export const sizeofWS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT = 16;

export function allocWS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT(data?: Partial<WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bindingConstraint !== undefined) view.setBigUint64(0, data.bindingConstraint === null ? 0n : BigInt(util.toPointer(data.bindingConstraint)), true);
  // 0x08: i32
  if (data?.bindingUsage !== undefined) view.setInt32(8, Number(data.bindingUsage), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT (size: 32)
 */
export interface WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID */
  id: WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID;
  /** ptr */
  allowedValues: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  allowedValuesSize: number;
  /** _out_e__Struct */
  out: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT = 32;

export function allocWS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT(data?: Partial<WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.allowedValues !== undefined) view.setBigUint64(8, data.allowedValues === null ? 0n : BigInt(util.toPointer(data.allowedValues)), true);
  // 0x10: u32
  if (data?.allowedValuesSize !== undefined) view.setUint32(16, Number(data.allowedValuesSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.out !== undefined) view.setBigUint64(24, data.out === null ? 0n : BigInt(util.toPointer(data.out)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT (size: 56)
 */
export interface WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_CONSTRAINT */
  bindingConstraint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_SECURITY_USAGE */
  bindingUsage: WS_MESSAGE_SECURITY_USAGE;
  /** ptr */
  claimConstraints: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  claimConstraintCount: number;
  /** ptr */
  requestSecurityTokenPropertyConstraints: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  requestSecurityTokenPropertyConstraintCount: number;
  /** _out_e__Struct */
  out: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT = 56;

export function allocWS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT(data?: Partial<WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bindingConstraint !== undefined) view.setBigUint64(0, data.bindingConstraint === null ? 0n : BigInt(util.toPointer(data.bindingConstraint)), true);
  // 0x08: i32
  if (data?.bindingUsage !== undefined) view.setInt32(8, Number(data.bindingUsage), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.claimConstraints !== undefined) view.setBigUint64(16, data.claimConstraints === null ? 0n : BigInt(util.toPointer(data.claimConstraints)), true);
  // 0x18: u32
  if (data?.claimConstraintCount !== undefined) view.setUint32(24, Number(data.claimConstraintCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.requestSecurityTokenPropertyConstraints !== undefined) view.setBigUint64(32, data.requestSecurityTokenPropertyConstraints === null ? 0n : BigInt(util.toPointer(data.requestSecurityTokenPropertyConstraints)), true);
  // 0x28: u32
  if (data?.requestSecurityTokenPropertyConstraintCount !== undefined) view.setUint32(40, Number(data.requestSecurityTokenPropertyConstraintCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.out !== undefined) view.setBigUint64(48, data.out === null ? 0n : BigInt(util.toPointer(data.out)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTY_CONSTRAINT (size: 32)
 */
export interface WS_SECURITY_PROPERTY_CONSTRAINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTY_ID */
  id: WS_SECURITY_PROPERTY_ID;
  /** ptr */
  allowedValues: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  allowedValuesSize: number;
  /** _out_e__Struct */
  out: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SECURITY_PROPERTY_CONSTRAINT = 32;

export function allocWS_SECURITY_PROPERTY_CONSTRAINT(data?: Partial<WS_SECURITY_PROPERTY_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_PROPERTY_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.allowedValues !== undefined) view.setBigUint64(8, data.allowedValues === null ? 0n : BigInt(util.toPointer(data.allowedValues)), true);
  // 0x10: u32
  if (data?.allowedValuesSize !== undefined) view.setUint32(16, Number(data.allowedValuesSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.out !== undefined) view.setBigUint64(24, data.out === null ? 0n : BigInt(util.toPointer(data.out)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONSTRAINTS (size: 32)
 */
export interface WS_SECURITY_CONSTRAINTS {
  /** ptr */
  securityPropertyConstraints: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  securityPropertyConstraintCount: number;
  /** ptr */
  securityBindingConstraints: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  securityBindingConstraintCount: number;
}

export const sizeofWS_SECURITY_CONSTRAINTS = 32;

export function allocWS_SECURITY_CONSTRAINTS(data?: Partial<WS_SECURITY_CONSTRAINTS>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_CONSTRAINTS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityPropertyConstraints !== undefined) view.setBigUint64(0, data.securityPropertyConstraints === null ? 0n : BigInt(util.toPointer(data.securityPropertyConstraints)), true);
  // 0x08: u32
  if (data?.securityPropertyConstraintCount !== undefined) view.setUint32(8, Number(data.securityPropertyConstraintCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.securityBindingConstraints !== undefined) view.setBigUint64(16, data.securityBindingConstraints === null ? 0n : BigInt(util.toPointer(data.securityBindingConstraints)), true);
  // 0x18: u32
  if (data?.securityBindingConstraintCount !== undefined) view.setUint32(24, Number(data.securityBindingConstraintCount), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT (size: 24)
 */
export interface WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_CONSTRAINT */
  bindingConstraint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_SECURITY_USAGE */
  bindingUsage: WS_MESSAGE_SECURITY_USAGE;
  /** ptr */
  bootstrapSecurityConstraint: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT = 24;

export function allocWS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT(data?: Partial<WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.bindingConstraint !== undefined) view.setBigUint64(0, data.bindingConstraint === null ? 0n : BigInt(util.toPointer(data.bindingConstraint)), true);
  // 0x08: i32
  if (data?.bindingUsage !== undefined) view.setInt32(8, Number(data.bindingUsage), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.bootstrapSecurityConstraint !== undefined) view.setBigUint64(16, data.bootstrapSecurityConstraint === null ? 0n : BigInt(util.toPointer(data.bootstrapSecurityConstraint)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTY_CONSTRAINT (size: 32)
 */
export interface WS_CHANNEL_PROPERTY_CONSTRAINT {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTY_ID */
  id: WS_CHANNEL_PROPERTY_ID;
  /** ptr */
  allowedValues: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  allowedValuesSize: number;
  /** _out_e__Struct */
  out: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_CHANNEL_PROPERTY_CONSTRAINT = 32;

export function allocWS_CHANNEL_PROPERTY_CONSTRAINT(data?: Partial<WS_CHANNEL_PROPERTY_CONSTRAINT>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_CHANNEL_PROPERTY_CONSTRAINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.id !== undefined) view.setInt32(0, Number(data.id), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.allowedValues !== undefined) view.setBigUint64(8, data.allowedValues === null ? 0n : BigInt(util.toPointer(data.allowedValues)), true);
  // 0x10: u32
  if (data?.allowedValuesSize !== undefined) view.setUint32(16, Number(data.allowedValuesSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.out !== undefined) view.setBigUint64(24, data.out === null ? 0n : BigInt(util.toPointer(data.out)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_POLICY_EXTENSION (size: 8)
 */
export interface WS_POLICY_EXTENSION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_POLICY_EXTENSION_TYPE */
  type: WS_POLICY_EXTENSION_TYPE;
}

export const sizeofWS_POLICY_EXTENSION = 8;

export function allocWS_POLICY_EXTENSION(data?: Partial<WS_POLICY_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_POLICY_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_POLICY_EXTENSION (size: 32)
 */
export interface WS_ENDPOINT_POLICY_EXTENSION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_POLICY_EXTENSION */
  policyExtension: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  assertionName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  assertionNs: Deno.PointerValue | Uint8Array | null;
  /** _out_e__Struct */
  out: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_ENDPOINT_POLICY_EXTENSION = 32;

export function allocWS_ENDPOINT_POLICY_EXTENSION(data?: Partial<WS_ENDPOINT_POLICY_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_ENDPOINT_POLICY_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.policyExtension !== undefined) view.setBigUint64(0, data.policyExtension === null ? 0n : BigInt(util.toPointer(data.policyExtension)), true);
  // 0x08: pointer
  if (data?.assertionName !== undefined) view.setBigUint64(8, data.assertionName === null ? 0n : BigInt(util.toPointer(data.assertionName)), true);
  // 0x10: pointer
  if (data?.assertionNs !== undefined) view.setBigUint64(16, data.assertionNs === null ? 0n : BigInt(util.toPointer(data.assertionNs)), true);
  // 0x18: pointer
  if (data?.out !== undefined) view.setBigUint64(24, data.out === null ? 0n : BigInt(util.toPointer(data.out)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_POLICY_CONSTRAINTS (size: 48)
 */
export interface WS_POLICY_CONSTRAINTS {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_BINDING */
  channelBinding: WS_CHANNEL_BINDING;
  /** ptr */
  channelPropertyConstraints: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  channelPropertyConstraintCount: number;
  /** ptr */
  securityConstraints: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  policyExtensions: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  policyExtensionCount: number;
}

export const sizeofWS_POLICY_CONSTRAINTS = 48;

export function allocWS_POLICY_CONSTRAINTS(data?: Partial<WS_POLICY_CONSTRAINTS>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_POLICY_CONSTRAINTS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.channelBinding !== undefined) view.setInt32(0, Number(data.channelBinding), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.channelPropertyConstraints !== undefined) view.setBigUint64(8, data.channelPropertyConstraints === null ? 0n : BigInt(util.toPointer(data.channelPropertyConstraints)), true);
  // 0x10: u32
  if (data?.channelPropertyConstraintCount !== undefined) view.setUint32(16, Number(data.channelPropertyConstraintCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.securityConstraints !== undefined) view.setBigUint64(24, data.securityConstraints === null ? 0n : BigInt(util.toPointer(data.securityConstraints)), true);
  // 0x20: pointer
  if (data?.policyExtensions !== undefined) view.setBigUint64(32, data.policyExtensions === null ? 0n : BigInt(util.toPointer(data.policyExtensions)), true);
  // 0x28: u32
  if (data?.policyExtensionCount !== undefined) view.setUint32(40, Number(data.policyExtensionCount), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_POLICY_DESCRIPTION (size: 8)
 */
export interface WS_HTTP_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_POLICY_DESCRIPTION = 8;

export function allocWS_HTTP_POLICY_DESCRIPTION(data?: Partial<WS_HTTP_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION (size: 8)
 */
export interface WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTIES */
  securityBindingProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION = 8;

export function allocWS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION(data?: Partial<WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindingProperties !== undefined) view.setBigUint64(0, data.securityBindingProperties === null ? 0n : BigInt(util.toPointer(data.securityBindingProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_SSL_POLICY_DESCRIPTION (size: 24)
 */
export interface WS_HTTP_SSL_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION */
  sslTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_SSL_POLICY_DESCRIPTION = 24;

export function allocWS_HTTP_SSL_POLICY_DESCRIPTION(data?: Partial<WS_HTTP_SSL_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_SSL_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sslTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sslTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sslTransportSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION (size: 8)
 */
export interface WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTIES */
  securityBindingProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION = 8;

export function allocWS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION(data?: Partial<WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindingProperties !== undefined) view.setBigUint64(0, data.securityBindingProperties === null ? 0n : BigInt(util.toPointer(data.securityBindingProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_HEADER_AUTH_POLICY_DESCRIPTION (size: 24)
 */
export interface WS_HTTP_HEADER_AUTH_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION */
  httpHeaderAuthSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_HEADER_AUTH_POLICY_DESCRIPTION = 24;

export function allocWS_HTTP_HEADER_AUTH_POLICY_DESCRIPTION(data?: Partial<WS_HTTP_HEADER_AUTH_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_HEADER_AUTH_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.httpHeaderAuthSecurityBinding !== undefined) view.setBigUint64(16, data.httpHeaderAuthSecurityBinding === null ? 0n : BigInt(util.toPointer(data.httpHeaderAuthSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_SSL_HEADER_AUTH_POLICY_DESCRIPTION (size: 32)
 */
export interface WS_HTTP_SSL_HEADER_AUTH_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION */
  sslTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION */
  httpHeaderAuthSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_SSL_HEADER_AUTH_POLICY_DESCRIPTION = 32;

export function allocWS_HTTP_SSL_HEADER_AUTH_POLICY_DESCRIPTION(data?: Partial<WS_HTTP_SSL_HEADER_AUTH_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_SSL_HEADER_AUTH_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sslTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sslTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sslTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.httpHeaderAuthSecurityBinding !== undefined) view.setBigUint64(24, data.httpHeaderAuthSecurityBinding === null ? 0n : BigInt(util.toPointer(data.httpHeaderAuthSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION (size: 16)
 */
export interface WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTIES */
  securityBindingProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_SECURITY_USAGE */
  bindingUsage: WS_MESSAGE_SECURITY_USAGE;
}

export const sizeofWS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION = 16;

export function allocWS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION(data?: Partial<WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindingProperties !== undefined) view.setBigUint64(0, data.securityBindingProperties === null ? 0n : BigInt(util.toPointer(data.securityBindingProperties)), true);
  // 0x08: i32
  if (data?.bindingUsage !== undefined) view.setInt32(8, Number(data.bindingUsage), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_SSL_USERNAME_POLICY_DESCRIPTION (size: 32)
 */
export interface WS_HTTP_SSL_USERNAME_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION */
  sslTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION */
  usernameMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_SSL_USERNAME_POLICY_DESCRIPTION = 32;

export function allocWS_HTTP_SSL_USERNAME_POLICY_DESCRIPTION(data?: Partial<WS_HTTP_SSL_USERNAME_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_SSL_USERNAME_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sslTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sslTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sslTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.usernameMessageSecurityBinding !== undefined) view.setBigUint64(24, data.usernameMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.usernameMessageSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION (size: 16)
 */
export interface WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTIES */
  securityBindingProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_SECURITY_USAGE */
  bindingUsage: WS_MESSAGE_SECURITY_USAGE;
}

export const sizeofWS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION = 16;

export function allocWS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION(data?: Partial<WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindingProperties !== undefined) view.setBigUint64(0, data.securityBindingProperties === null ? 0n : BigInt(util.toPointer(data.securityBindingProperties)), true);
  // 0x08: i32
  if (data?.bindingUsage !== undefined) view.setInt32(8, Number(data.bindingUsage), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_SSL_KERBEROS_APREQ_POLICY_DESCRIPTION (size: 32)
 */
export interface WS_HTTP_SSL_KERBEROS_APREQ_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION */
  sslTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION */
  kerberosApreqMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_SSL_KERBEROS_APREQ_POLICY_DESCRIPTION = 32;

export function allocWS_HTTP_SSL_KERBEROS_APREQ_POLICY_DESCRIPTION(data?: Partial<WS_HTTP_SSL_KERBEROS_APREQ_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_SSL_KERBEROS_APREQ_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sslTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sslTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sslTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.kerberosApreqMessageSecurityBinding !== undefined) view.setBigUint64(24, data.kerberosApreqMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.kerberosApreqMessageSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_POLICY_DESCRIPTION (size: 8)
 */
export interface WS_TCP_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TCP_POLICY_DESCRIPTION = 8;

export function allocWS_TCP_POLICY_DESCRIPTION(data?: Partial<WS_TCP_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION (size: 8)
 */
export interface WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTIES */
  securityBindingProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION = 8;

export function allocWS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION(data?: Partial<WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindingProperties !== undefined) view.setBigUint64(0, data.securityBindingProperties === null ? 0n : BigInt(util.toPointer(data.securityBindingProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_POLICY_DESCRIPTION (size: 24)
 */
export interface WS_TCP_SSPI_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION */
  sspiTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TCP_SSPI_POLICY_DESCRIPTION = 24;

export function allocWS_TCP_SSPI_POLICY_DESCRIPTION(data?: Partial<WS_TCP_SSPI_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_SSPI_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sspiTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sspiTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sspiTransportSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_USERNAME_POLICY_DESCRIPTION (size: 32)
 */
export interface WS_TCP_SSPI_USERNAME_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION */
  sspiTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION */
  usernameMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TCP_SSPI_USERNAME_POLICY_DESCRIPTION = 32;

export function allocWS_TCP_SSPI_USERNAME_POLICY_DESCRIPTION(data?: Partial<WS_TCP_SSPI_USERNAME_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_SSPI_USERNAME_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sspiTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sspiTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sspiTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.usernameMessageSecurityBinding !== undefined) view.setBigUint64(24, data.usernameMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.usernameMessageSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_KERBEROS_APREQ_POLICY_DESCRIPTION (size: 32)
 */
export interface WS_TCP_SSPI_KERBEROS_APREQ_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION */
  sspiTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION */
  kerberosApreqMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TCP_SSPI_KERBEROS_APREQ_POLICY_DESCRIPTION = 32;

export function allocWS_TCP_SSPI_KERBEROS_APREQ_POLICY_DESCRIPTION(data?: Partial<WS_TCP_SSPI_KERBEROS_APREQ_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_SSPI_KERBEROS_APREQ_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sspiTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sspiTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sspiTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.kerberosApreqMessageSecurityBinding !== undefined) view.setBigUint64(24, data.kerberosApreqMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.kerberosApreqMessageSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION (size: 16)
 */
export interface WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTIES */
  securityBindingProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_SECURITY_USAGE */
  bindingUsage: WS_MESSAGE_SECURITY_USAGE;
}

export const sizeofWS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION = 16;

export function allocWS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION(data?: Partial<WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindingProperties !== undefined) view.setBigUint64(0, data.securityBindingProperties === null ? 0n : BigInt(util.toPointer(data.securityBindingProperties)), true);
  // 0x08: i32
  if (data?.bindingUsage !== undefined) view.setInt32(8, Number(data.bindingUsage), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION (size: 16)
 */
export interface WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION */
  securityContextMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION = 16;

export function allocWS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION(data?: Partial<WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityContextMessageSecurityBinding !== undefined) view.setBigUint64(0, data.securityContextMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.securityContextMessageSecurityBinding)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION (size: 40)
 */
export interface WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION */
  sspiTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION */
  kerberosApreqMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION */
  securityContextSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION = 40;

export function allocWS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION(data?: Partial<WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sspiTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sspiTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sspiTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.kerberosApreqMessageSecurityBinding !== undefined) view.setBigUint64(24, data.kerberosApreqMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.kerberosApreqMessageSecurityBinding)), true);
  // 0x20: pointer
  if (data?.securityContextSecurityBinding !== undefined) view.setBigUint64(32, data.securityContextSecurityBinding === null ? 0n : BigInt(util.toPointer(data.securityContextSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION (size: 40)
 */
export interface WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION */
  sspiTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION */
  usernameMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION */
  securityContextSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION = 40;

export function allocWS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION(data?: Partial<WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sspiTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sspiTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sspiTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.usernameMessageSecurityBinding !== undefined) view.setBigUint64(24, data.usernameMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.usernameMessageSecurityBinding)), true);
  // 0x20: pointer
  if (data?.securityContextSecurityBinding !== undefined) view.setBigUint64(32, data.securityContextSecurityBinding === null ? 0n : BigInt(util.toPointer(data.securityContextSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION (size: 40)
 */
export interface WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION */
  sslTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION */
  usernameMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION */
  securityContextSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION = 40;

export function allocWS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION(data?: Partial<WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sslTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sslTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sslTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.usernameMessageSecurityBinding !== undefined) view.setBigUint64(24, data.usernameMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.usernameMessageSecurityBinding)), true);
  // 0x20: pointer
  if (data?.securityContextSecurityBinding !== undefined) view.setBigUint64(32, data.securityContextSecurityBinding === null ? 0n : BigInt(util.toPointer(data.securityContextSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION (size: 40)
 */
export interface WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION */
  sslTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION */
  kerberosApreqMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION */
  securityContextSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION = 40;

export function allocWS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION(data?: Partial<WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sslTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sslTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sslTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.kerberosApreqMessageSecurityBinding !== undefined) view.setBigUint64(24, data.kerberosApreqMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.kerberosApreqMessageSecurityBinding)), true);
  // 0x20: pointer
  if (data?.securityContextSecurityBinding !== undefined) view.setBigUint64(32, data.securityContextSecurityBinding === null ? 0n : BigInt(util.toPointer(data.securityContextSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_BINDING_TEMPLATE (size: 8)
 */
export interface WS_HTTP_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_BINDING_TEMPLATE = 8;

export function allocWS_HTTP_BINDING_TEMPLATE(data?: Partial<WS_HTTP_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_BINDING_TEMPLATE (size: 8)
 */
export interface WS_TCP_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TCP_BINDING_TEMPLATE = 8;

export function allocWS_TCP_BINDING_TEMPLATE(data?: Partial<WS_TCP_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE (size: 16)
 */
export interface WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTIES */
  securityBindingProperties: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  localCertCredential: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE = 16;

export function allocWS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE(data?: Partial<WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindingProperties !== undefined) view.setBigUint64(0, data.securityBindingProperties === null ? 0n : BigInt(util.toPointer(data.securityBindingProperties)), true);
  // 0x08: pointer
  if (data?.localCertCredential !== undefined) view.setBigUint64(8, data.localCertCredential === null ? 0n : BigInt(util.toPointer(data.localCertCredential)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_SSL_BINDING_TEMPLATE (size: 24)
 */
export interface WS_HTTP_SSL_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE */
  sslTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_SSL_BINDING_TEMPLATE = 24;

export function allocWS_HTTP_SSL_BINDING_TEMPLATE(data?: Partial<WS_HTTP_SSL_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_SSL_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sslTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sslTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sslTransportSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE (size: 16)
 */
export interface WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTIES */
  securityBindingProperties: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  clientCredential: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE = 16;

export function allocWS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE(data?: Partial<WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindingProperties !== undefined) view.setBigUint64(0, data.securityBindingProperties === null ? 0n : BigInt(util.toPointer(data.securityBindingProperties)), true);
  // 0x08: pointer
  if (data?.clientCredential !== undefined) view.setBigUint64(8, data.clientCredential === null ? 0n : BigInt(util.toPointer(data.clientCredential)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE (size: 24)
 */
export interface WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE */
  httpHeaderAuthSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_HEADER_AUTH_BINDING_TEMPLATE = 24;

export function allocWS_HTTP_HEADER_AUTH_BINDING_TEMPLATE(data?: Partial<WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_HEADER_AUTH_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.httpHeaderAuthSecurityBinding !== undefined) view.setBigUint64(16, data.httpHeaderAuthSecurityBinding === null ? 0n : BigInt(util.toPointer(data.httpHeaderAuthSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE (size: 16)
 */
export interface WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTIES */
  securityBindingProperties: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  clientCredential: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE = 16;

export function allocWS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE(data?: Partial<WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindingProperties !== undefined) view.setBigUint64(0, data.securityBindingProperties === null ? 0n : BigInt(util.toPointer(data.securityBindingProperties)), true);
  // 0x08: pointer
  if (data?.clientCredential !== undefined) view.setBigUint64(8, data.clientCredential === null ? 0n : BigInt(util.toPointer(data.clientCredential)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_BINDING_TEMPLATE (size: 24)
 */
export interface WS_TCP_SSPI_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE */
  sspiTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TCP_SSPI_BINDING_TEMPLATE = 24;

export function allocWS_TCP_SSPI_BINDING_TEMPLATE(data?: Partial<WS_TCP_SSPI_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_SSPI_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sspiTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sspiTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sspiTransportSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE (size: 32)
 */
export interface WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE */
  sslTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE */
  httpHeaderAuthSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE = 32;

export function allocWS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE(data?: Partial<WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sslTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sslTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sslTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.httpHeaderAuthSecurityBinding !== undefined) view.setBigUint64(24, data.httpHeaderAuthSecurityBinding === null ? 0n : BigInt(util.toPointer(data.httpHeaderAuthSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE (size: 32)
 */
export interface WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTIES */
  securityBindingProperties: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  clientCredential: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_VALIDATE_PASSWORD_CALLBACK */
  passwordValidator: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  passwordValidatorCallbackState: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE = 32;

export function allocWS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE(data?: Partial<WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindingProperties !== undefined) view.setBigUint64(0, data.securityBindingProperties === null ? 0n : BigInt(util.toPointer(data.securityBindingProperties)), true);
  // 0x08: pointer
  if (data?.clientCredential !== undefined) view.setBigUint64(8, data.clientCredential === null ? 0n : BigInt(util.toPointer(data.clientCredential)), true);
  // 0x10: pointer
  if (data?.passwordValidator !== undefined) view.setBigUint64(16, data.passwordValidator === null ? 0n : BigInt(util.toPointer(data.passwordValidator)), true);
  // 0x18: pointer
  if (data?.passwordValidatorCallbackState !== undefined) view.setBigUint64(24, data.passwordValidatorCallbackState === null ? 0n : BigInt(util.toPointer(data.passwordValidatorCallbackState)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE (size: 32)
 */
export interface WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE */
  sslTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE */
  usernameMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_SSL_USERNAME_BINDING_TEMPLATE = 32;

export function allocWS_HTTP_SSL_USERNAME_BINDING_TEMPLATE(data?: Partial<WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_SSL_USERNAME_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sslTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sslTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sslTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.usernameMessageSecurityBinding !== undefined) view.setBigUint64(24, data.usernameMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.usernameMessageSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE (size: 16)
 */
export interface WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTIES */
  securityBindingProperties: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  clientCredential: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE = 16;

export function allocWS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE(data?: Partial<WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindingProperties !== undefined) view.setBigUint64(0, data.securityBindingProperties === null ? 0n : BigInt(util.toPointer(data.securityBindingProperties)), true);
  // 0x08: pointer
  if (data?.clientCredential !== undefined) view.setBigUint64(8, data.clientCredential === null ? 0n : BigInt(util.toPointer(data.clientCredential)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE (size: 32)
 */
export interface WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE */
  sslTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE */
  kerberosApreqMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE = 32;

export function allocWS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE(data?: Partial<WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sslTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sslTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sslTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.kerberosApreqMessageSecurityBinding !== undefined) view.setBigUint64(24, data.kerberosApreqMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.kerberosApreqMessageSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE (size: 32)
 */
export interface WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE */
  sspiTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE */
  usernameMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TCP_SSPI_USERNAME_BINDING_TEMPLATE = 32;

export function allocWS_TCP_SSPI_USERNAME_BINDING_TEMPLATE(data?: Partial<WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_SSPI_USERNAME_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sspiTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sspiTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sspiTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.usernameMessageSecurityBinding !== undefined) view.setBigUint64(24, data.usernameMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.usernameMessageSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE (size: 32)
 */
export interface WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE */
  sspiTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE */
  kerberosApreqMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE = 32;

export function allocWS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE(data?: Partial<WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sspiTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sspiTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sspiTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.kerberosApreqMessageSecurityBinding !== undefined) view.setBigUint64(24, data.kerberosApreqMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.kerberosApreqMessageSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE (size: 8)
 */
export interface WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_BINDING_PROPERTIES */
  securityBindingProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE = 8;

export function allocWS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE(data?: Partial<WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityBindingProperties !== undefined) view.setBigUint64(0, data.securityBindingProperties === null ? 0n : BigInt(util.toPointer(data.securityBindingProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE (size: 16)
 */
export interface WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE */
  securityContextMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE = 16;

export function allocWS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE(data?: Partial<WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.securityContextMessageSecurityBinding !== undefined) view.setBigUint64(0, data.securityContextMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.securityContextMessageSecurityBinding)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE (size: 40)
 */
export interface WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE */
  sslTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE */
  usernameMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE */
  securityContextSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE = 40;

export function allocWS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE(data?: Partial<WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sslTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sslTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sslTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.usernameMessageSecurityBinding !== undefined) view.setBigUint64(24, data.usernameMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.usernameMessageSecurityBinding)), true);
  // 0x20: pointer
  if (data?.securityContextSecurityBinding !== undefined) view.setBigUint64(32, data.securityContextSecurityBinding === null ? 0n : BigInt(util.toPointer(data.securityContextSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE (size: 40)
 */
export interface WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE */
  sslTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE */
  kerberosApreqMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE */
  securityContextSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE = 40;

export function allocWS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE(data?: Partial<WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sslTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sslTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sslTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.kerberosApreqMessageSecurityBinding !== undefined) view.setBigUint64(24, data.kerberosApreqMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.kerberosApreqMessageSecurityBinding)), true);
  // 0x20: pointer
  if (data?.securityContextSecurityBinding !== undefined) view.setBigUint64(32, data.securityContextSecurityBinding === null ? 0n : BigInt(util.toPointer(data.securityContextSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE (size: 40)
 */
export interface WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE */
  sspiTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE */
  usernameMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE */
  securityContextSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE = 40;

export function allocWS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE(data?: Partial<WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sspiTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sspiTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sspiTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.usernameMessageSecurityBinding !== undefined) view.setBigUint64(24, data.usernameMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.usernameMessageSecurityBinding)), true);
  // 0x20: pointer
  if (data?.securityContextSecurityBinding !== undefined) view.setBigUint64(32, data.securityContextSecurityBinding === null ? 0n : BigInt(util.toPointer(data.securityContextSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE (size: 40)
 */
export interface WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE {
  /** Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTIES */
  channelProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_PROPERTIES */
  securityProperties: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE */
  sspiTransportSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE */
  kerberosApreqMessageSecurityBinding: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE */
  securityContextSecurityBinding: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE = 40;

export function allocWS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE(data?: Partial<WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofWS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.channelProperties !== undefined) view.setBigUint64(0, data.channelProperties === null ? 0n : BigInt(util.toPointer(data.channelProperties)), true);
  // 0x08: pointer
  if (data?.securityProperties !== undefined) view.setBigUint64(8, data.securityProperties === null ? 0n : BigInt(util.toPointer(data.securityProperties)), true);
  // 0x10: pointer
  if (data?.sspiTransportSecurityBinding !== undefined) view.setBigUint64(16, data.sspiTransportSecurityBinding === null ? 0n : BigInt(util.toPointer(data.sspiTransportSecurityBinding)), true);
  // 0x18: pointer
  if (data?.kerberosApreqMessageSecurityBinding !== undefined) view.setBigUint64(24, data.kerberosApreqMessageSecurityBinding === null ? 0n : BigInt(util.toPointer(data.kerberosApreqMessageSecurityBinding)), true);
  // 0x20: pointer
  if (data?.securityContextSecurityBinding !== undefined) view.setBigUint64(32, data.securityContextSecurityBinding === null ? 0n : BigInt(util.toPointer(data.securityContextSecurityBinding)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_RP_ENTITY_INFORMATION (size: 32)
 */
export interface WEBAUTHN_RP_ENTITY_INFORMATION {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszId: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIcon: string | null;
}

export const sizeofWEBAUTHN_RP_ENTITY_INFORMATION = 32;

export function allocWEBAUTHN_RP_ENTITY_INFORMATION(data?: Partial<WEBAUTHN_RP_ENTITY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_RP_ENTITY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszIcon !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszIcon);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_USER_ENTITY_INFORMATION (size: 40)
 */
export interface WEBAUTHN_USER_ENTITY_INFORMATION {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbId: number;
  /** ptr */
  pbId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszIcon: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDisplayName: string | null;
}

export const sizeofWEBAUTHN_USER_ENTITY_INFORMATION = 40;

export function allocWEBAUTHN_USER_ENTITY_INFORMATION(data?: Partial<WEBAUTHN_USER_ENTITY_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_USER_ENTITY_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbId !== undefined) view.setUint32(4, Number(data.cbId), true);
  // 0x08: pointer
  if (data?.pbId !== undefined) view.setBigUint64(8, data.pbId === null ? 0n : BigInt(util.toPointer(data.pbId)), true);
  // 0x10: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszIcon !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszIcon);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pwszDisplayName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszDisplayName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_CLIENT_DATA (size: 24)
 */
export interface WEBAUTHN_CLIENT_DATA {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbClientDataJSON: number;
  /** ptr */
  pbClientDataJSON: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszHashAlgId: string | null;
}

export const sizeofWEBAUTHN_CLIENT_DATA = 24;

export function allocWEBAUTHN_CLIENT_DATA(data?: Partial<WEBAUTHN_CLIENT_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_CLIENT_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbClientDataJSON !== undefined) view.setUint32(4, Number(data.cbClientDataJSON), true);
  // 0x08: pointer
  if (data?.pbClientDataJSON !== undefined) view.setBigUint64(8, data.pbClientDataJSON === null ? 0n : BigInt(util.toPointer(data.pbClientDataJSON)), true);
  // 0x10: buffer
  if (data?.pwszHashAlgId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszHashAlgId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_COSE_CREDENTIAL_PARAMETER (size: 24)
 */
export interface WEBAUTHN_COSE_CREDENTIAL_PARAMETER {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszCredentialType: string | null;
  /** i32 */
  lAlg: number;
}

export const sizeofWEBAUTHN_COSE_CREDENTIAL_PARAMETER = 24;

export function allocWEBAUTHN_COSE_CREDENTIAL_PARAMETER(data?: Partial<WEBAUTHN_COSE_CREDENTIAL_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_COSE_CREDENTIAL_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszCredentialType !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszCredentialType);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.lAlg !== undefined) view.setInt32(16, Number(data.lAlg), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_COSE_CREDENTIAL_PARAMETERS (size: 16)
 */
export interface WEBAUTHN_COSE_CREDENTIAL_PARAMETERS {
  /** u32 */
  cCredentialParameters: number;
  /** ptr */
  pCredentialParameters: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWEBAUTHN_COSE_CREDENTIAL_PARAMETERS = 16;

export function allocWEBAUTHN_COSE_CREDENTIAL_PARAMETERS(data?: Partial<WEBAUTHN_COSE_CREDENTIAL_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_COSE_CREDENTIAL_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCredentialParameters !== undefined) view.setUint32(0, Number(data.cCredentialParameters), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCredentialParameters !== undefined) view.setBigUint64(8, data.pCredentialParameters === null ? 0n : BigInt(util.toPointer(data.pCredentialParameters)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_CREDENTIAL (size: 24)
 */
export interface WEBAUTHN_CREDENTIAL {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbId: number;
  /** ptr */
  pbId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszCredentialType: string | null;
}

export const sizeofWEBAUTHN_CREDENTIAL = 24;

export function allocWEBAUTHN_CREDENTIAL(data?: Partial<WEBAUTHN_CREDENTIAL>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_CREDENTIAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbId !== undefined) view.setUint32(4, Number(data.cbId), true);
  // 0x08: pointer
  if (data?.pbId !== undefined) view.setBigUint64(8, data.pbId === null ? 0n : BigInt(util.toPointer(data.pbId)), true);
  // 0x10: buffer
  if (data?.pwszCredentialType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszCredentialType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_CREDENTIALS (size: 16)
 */
export interface WEBAUTHN_CREDENTIALS {
  /** u32 */
  cCredentials: number;
  /** ptr */
  pCredentials: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWEBAUTHN_CREDENTIALS = 16;

export function allocWEBAUTHN_CREDENTIALS(data?: Partial<WEBAUTHN_CREDENTIALS>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_CREDENTIALS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCredentials !== undefined) view.setUint32(0, Number(data.cCredentials), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCredentials !== undefined) view.setBigUint64(8, data.pCredentials === null ? 0n : BigInt(util.toPointer(data.pCredentials)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_CREDENTIAL_EX (size: 32)
 */
export interface WEBAUTHN_CREDENTIAL_EX {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbId: number;
  /** ptr */
  pbId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszCredentialType: string | null;
  /** u32 */
  dwTransports: number;
}

export const sizeofWEBAUTHN_CREDENTIAL_EX = 32;

export function allocWEBAUTHN_CREDENTIAL_EX(data?: Partial<WEBAUTHN_CREDENTIAL_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_CREDENTIAL_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbId !== undefined) view.setUint32(4, Number(data.cbId), true);
  // 0x08: pointer
  if (data?.pbId !== undefined) view.setBigUint64(8, data.pbId === null ? 0n : BigInt(util.toPointer(data.pbId)), true);
  // 0x10: buffer
  if (data?.pwszCredentialType !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszCredentialType);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwTransports !== undefined) view.setUint32(24, Number(data.dwTransports), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_CREDENTIAL_LIST (size: 16)
 */
export interface WEBAUTHN_CREDENTIAL_LIST {
  /** u32 */
  cCredentials: number;
  /** ptr */
  ppCredentials: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWEBAUTHN_CREDENTIAL_LIST = 16;

export function allocWEBAUTHN_CREDENTIAL_LIST(data?: Partial<WEBAUTHN_CREDENTIAL_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_CREDENTIAL_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cCredentials !== undefined) view.setUint32(0, Number(data.cCredentials), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ppCredentials !== undefined) view.setBigUint64(8, data.ppCredentials === null ? 0n : BigInt(util.toPointer(data.ppCredentials)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_CRED_PROTECT_EXTENSION_IN (size: 8)
 */
export interface WEBAUTHN_CRED_PROTECT_EXTENSION_IN {
  /** u32 */
  dwCredProtect: number;
  /** Windows.Win32.Foundation.BOOL */
  bRequireCredProtect: boolean;
}

export const sizeofWEBAUTHN_CRED_PROTECT_EXTENSION_IN = 8;

export function allocWEBAUTHN_CRED_PROTECT_EXTENSION_IN(data?: Partial<WEBAUTHN_CRED_PROTECT_EXTENSION_IN>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_CRED_PROTECT_EXTENSION_IN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCredProtect !== undefined) view.setUint32(0, Number(data.dwCredProtect), true);
  // 0x04: i32
  if (data?.bRequireCredProtect !== undefined) view.setInt32(4, Number(data.bRequireCredProtect), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_CRED_BLOB_EXTENSION (size: 16)
 */
export interface WEBAUTHN_CRED_BLOB_EXTENSION {
  /** u32 */
  cbCredBlob: number;
  /** ptr */
  pbCredBlob: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWEBAUTHN_CRED_BLOB_EXTENSION = 16;

export function allocWEBAUTHN_CRED_BLOB_EXTENSION(data?: Partial<WEBAUTHN_CRED_BLOB_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_CRED_BLOB_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbCredBlob !== undefined) view.setUint32(0, Number(data.cbCredBlob), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbCredBlob !== undefined) view.setBigUint64(8, data.pbCredBlob === null ? 0n : BigInt(util.toPointer(data.pbCredBlob)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_EXTENSION (size: 24)
 */
export interface WEBAUTHN_EXTENSION {
  /** Windows.Win32.Foundation.PWSTR */
  pwszExtensionIdentifier: string | null;
  /** u32 */
  cbExtension: number;
  /** ptr */
  pvExtension: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWEBAUTHN_EXTENSION = 24;

export function allocWEBAUTHN_EXTENSION(data?: Partial<WEBAUTHN_EXTENSION>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_EXTENSION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszExtensionIdentifier !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszExtensionIdentifier);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.cbExtension !== undefined) view.setUint32(8, Number(data.cbExtension), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pvExtension !== undefined) view.setBigUint64(16, data.pvExtension === null ? 0n : BigInt(util.toPointer(data.pvExtension)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_EXTENSIONS (size: 16)
 */
export interface WEBAUTHN_EXTENSIONS {
  /** u32 */
  cExtensions: number;
  /** ptr */
  pExtensions: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWEBAUTHN_EXTENSIONS = 16;

export function allocWEBAUTHN_EXTENSIONS(data?: Partial<WEBAUTHN_EXTENSIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_EXTENSIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cExtensions !== undefined) view.setUint32(0, Number(data.cExtensions), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pExtensions !== undefined) view.setBigUint64(8, data.pExtensions === null ? 0n : BigInt(util.toPointer(data.pExtensions)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS (size: 80)
 */
export interface WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwTimeoutMilliseconds: number;
  /** Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_CREDENTIALS */
  CredentialList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_EXTENSIONS */
  Extensions: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAuthenticatorAttachment: number;
  /** Windows.Win32.Foundation.BOOL */
  bRequireResidentKey: boolean;
  /** u32 */
  dwUserVerificationRequirement: number;
  /** u32 */
  dwAttestationConveyancePreference: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  pCancellationId: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pExcludeCredentialList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwEnterpriseAttestation: number;
  /** u32 */
  dwLargeBlobSupport: number;
  /** Windows.Win32.Foundation.BOOL */
  bPreferResidentKey: boolean;
}

export const sizeofWEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS = 80;

export function allocWEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS(data?: Partial<WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwTimeoutMilliseconds !== undefined) view.setUint32(4, Number(data.dwTimeoutMilliseconds), true);
  // 0x08: pointer
  if (data?.CredentialList !== undefined) view.setBigUint64(8, data.CredentialList === null ? 0n : BigInt(util.toPointer(data.CredentialList)), true);
  // 0x10: pointer
  if (data?.Extensions !== undefined) view.setBigUint64(16, data.Extensions === null ? 0n : BigInt(util.toPointer(data.Extensions)), true);
  // 0x18: u32
  if (data?.dwAuthenticatorAttachment !== undefined) view.setUint32(24, Number(data.dwAuthenticatorAttachment), true);
  // 0x1c: i32
  if (data?.bRequireResidentKey !== undefined) view.setInt32(28, Number(data.bRequireResidentKey), true);
  // 0x20: u32
  if (data?.dwUserVerificationRequirement !== undefined) view.setUint32(32, Number(data.dwUserVerificationRequirement), true);
  // 0x24: u32
  if (data?.dwAttestationConveyancePreference !== undefined) view.setUint32(36, Number(data.dwAttestationConveyancePreference), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pCancellationId !== undefined) view.setBigUint64(48, data.pCancellationId === null ? 0n : BigInt(util.toPointer(data.pCancellationId)), true);
  // 0x38: pointer
  if (data?.pExcludeCredentialList !== undefined) view.setBigUint64(56, data.pExcludeCredentialList === null ? 0n : BigInt(util.toPointer(data.pExcludeCredentialList)), true);
  // 0x40: u32
  if (data?.dwEnterpriseAttestation !== undefined) view.setUint32(64, Number(data.dwEnterpriseAttestation), true);
  // 0x44: u32
  if (data?.dwLargeBlobSupport !== undefined) view.setUint32(68, Number(data.dwLargeBlobSupport), true);
  // 0x48: i32
  if (data?.bPreferResidentKey !== undefined) view.setInt32(72, Number(data.bPreferResidentKey), true);
  // 0x4c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS (size: 88)
 */
export interface WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwTimeoutMilliseconds: number;
  /** Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_CREDENTIALS */
  CredentialList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_EXTENSIONS */
  Extensions: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwAuthenticatorAttachment: number;
  /** u32 */
  dwUserVerificationRequirement: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszU2fAppId: string | null;
  /** ptr */
  pbU2fAppId: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCancellationId: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pAllowCredentialList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwCredLargeBlobOperation: number;
  /** u32 */
  cbCredLargeBlob: number;
  /** ptr */
  pbCredLargeBlob: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS = 88;

export function allocWEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS(data?: Partial<WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwTimeoutMilliseconds !== undefined) view.setUint32(4, Number(data.dwTimeoutMilliseconds), true);
  // 0x08: pointer
  if (data?.CredentialList !== undefined) view.setBigUint64(8, data.CredentialList === null ? 0n : BigInt(util.toPointer(data.CredentialList)), true);
  // 0x10: pointer
  if (data?.Extensions !== undefined) view.setBigUint64(16, data.Extensions === null ? 0n : BigInt(util.toPointer(data.Extensions)), true);
  // 0x18: u32
  if (data?.dwAuthenticatorAttachment !== undefined) view.setUint32(24, Number(data.dwAuthenticatorAttachment), true);
  // 0x1c: u32
  if (data?.dwUserVerificationRequirement !== undefined) view.setUint32(28, Number(data.dwUserVerificationRequirement), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.pwszU2fAppId !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwszU2fAppId);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: pointer
  if (data?.pbU2fAppId !== undefined) view.setBigUint64(48, data.pbU2fAppId === null ? 0n : BigInt(util.toPointer(data.pbU2fAppId)), true);
  // 0x38: pointer
  if (data?.pCancellationId !== undefined) view.setBigUint64(56, data.pCancellationId === null ? 0n : BigInt(util.toPointer(data.pCancellationId)), true);
  // 0x40: pointer
  if (data?.pAllowCredentialList !== undefined) view.setBigUint64(64, data.pAllowCredentialList === null ? 0n : BigInt(util.toPointer(data.pAllowCredentialList)), true);
  // 0x48: u32
  if (data?.dwCredLargeBlobOperation !== undefined) view.setUint32(72, Number(data.dwCredLargeBlobOperation), true);
  // 0x4c: u32
  if (data?.cbCredLargeBlob !== undefined) view.setUint32(76, Number(data.cbCredLargeBlob), true);
  // 0x50: pointer
  if (data?.pbCredLargeBlob !== undefined) view.setBigUint64(80, data.pbCredLargeBlob === null ? 0n : BigInt(util.toPointer(data.pbCredLargeBlob)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_X5C (size: 16)
 */
export interface WEBAUTHN_X5C {
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWEBAUTHN_X5C = 16;

export function allocWEBAUTHN_X5C(data?: Partial<WEBAUTHN_X5C>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_X5C);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbData !== undefined) view.setBigUint64(8, data.pbData === null ? 0n : BigInt(util.toPointer(data.pbData)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_COMMON_ATTESTATION (size: 88)
 */
export interface WEBAUTHN_COMMON_ATTESTATION {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszAlg: string | null;
  /** i32 */
  lAlg: number;
  /** u32 */
  cbSignature: number;
  /** ptr */
  pbSignature: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cX5c: number;
  /** ptr */
  pX5c: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pwszVer: string | null;
  /** u32 */
  cbCertInfo: number;
  /** ptr */
  pbCertInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbPubArea: number;
  /** ptr */
  pbPubArea: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWEBAUTHN_COMMON_ATTESTATION = 88;

export function allocWEBAUTHN_COMMON_ATTESTATION(data?: Partial<WEBAUTHN_COMMON_ATTESTATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_COMMON_ATTESTATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszAlg !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszAlg);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.lAlg !== undefined) view.setInt32(16, Number(data.lAlg), true);
  // 0x14: u32
  if (data?.cbSignature !== undefined) view.setUint32(20, Number(data.cbSignature), true);
  // 0x18: pointer
  if (data?.pbSignature !== undefined) view.setBigUint64(24, data.pbSignature === null ? 0n : BigInt(util.toPointer(data.pbSignature)), true);
  // 0x20: u32
  if (data?.cX5c !== undefined) view.setUint32(32, Number(data.cX5c), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pX5c !== undefined) view.setBigUint64(40, data.pX5c === null ? 0n : BigInt(util.toPointer(data.pX5c)), true);
  // 0x30: buffer
  if (data?.pwszVer !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pwszVer);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.cbCertInfo !== undefined) view.setUint32(56, Number(data.cbCertInfo), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.pbCertInfo !== undefined) view.setBigUint64(64, data.pbCertInfo === null ? 0n : BigInt(util.toPointer(data.pbCertInfo)), true);
  // 0x48: u32
  if (data?.cbPubArea !== undefined) view.setUint32(72, Number(data.cbPubArea), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pbPubArea !== undefined) view.setBigUint64(80, data.pbPubArea === null ? 0n : BigInt(util.toPointer(data.pbPubArea)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_CREDENTIAL_ATTESTATION (size: 120)
 */
export interface WEBAUTHN_CREDENTIAL_ATTESTATION {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszFormatType: string | null;
  /** u32 */
  cbAuthenticatorData: number;
  /** ptr */
  pbAuthenticatorData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbAttestation: number;
  /** ptr */
  pbAttestation: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwAttestationDecodeType: number;
  /** ptr */
  pvAttestationDecode: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbAttestationObject: number;
  /** ptr */
  pbAttestationObject: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbCredentialId: number;
  /** ptr */
  pbCredentialId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_EXTENSIONS */
  Extensions: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwUsedTransport: number;
  /** Windows.Win32.Foundation.BOOL */
  bEpAtt: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bLargeBlobSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bResidentKey: boolean;
}

export const sizeofWEBAUTHN_CREDENTIAL_ATTESTATION = 120;

export function allocWEBAUTHN_CREDENTIAL_ATTESTATION(data?: Partial<WEBAUTHN_CREDENTIAL_ATTESTATION>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_CREDENTIAL_ATTESTATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszFormatType !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszFormatType);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.cbAuthenticatorData !== undefined) view.setUint32(16, Number(data.cbAuthenticatorData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbAuthenticatorData !== undefined) view.setBigUint64(24, data.pbAuthenticatorData === null ? 0n : BigInt(util.toPointer(data.pbAuthenticatorData)), true);
  // 0x20: u32
  if (data?.cbAttestation !== undefined) view.setUint32(32, Number(data.cbAttestation), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pbAttestation !== undefined) view.setBigUint64(40, data.pbAttestation === null ? 0n : BigInt(util.toPointer(data.pbAttestation)), true);
  // 0x30: u32
  if (data?.dwAttestationDecodeType !== undefined) view.setUint32(48, Number(data.dwAttestationDecodeType), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pvAttestationDecode !== undefined) view.setBigUint64(56, data.pvAttestationDecode === null ? 0n : BigInt(util.toPointer(data.pvAttestationDecode)), true);
  // 0x40: u32
  if (data?.cbAttestationObject !== undefined) view.setUint32(64, Number(data.cbAttestationObject), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.pbAttestationObject !== undefined) view.setBigUint64(72, data.pbAttestationObject === null ? 0n : BigInt(util.toPointer(data.pbAttestationObject)), true);
  // 0x50: u32
  if (data?.cbCredentialId !== undefined) view.setUint32(80, Number(data.cbCredentialId), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pbCredentialId !== undefined) view.setBigUint64(88, data.pbCredentialId === null ? 0n : BigInt(util.toPointer(data.pbCredentialId)), true);
  // 0x60: pointer
  if (data?.Extensions !== undefined) view.setBigUint64(96, data.Extensions === null ? 0n : BigInt(util.toPointer(data.Extensions)), true);
  // 0x68: u32
  if (data?.dwUsedTransport !== undefined) view.setUint32(104, Number(data.dwUsedTransport), true);
  // 0x6c: i32
  if (data?.bEpAtt !== undefined) view.setInt32(108, Number(data.bEpAtt), true);
  // 0x70: i32
  if (data?.bLargeBlobSupported !== undefined) view.setInt32(112, Number(data.bLargeBlobSupported), true);
  // 0x74: i32
  if (data?.bResidentKey !== undefined) view.setInt32(116, Number(data.bResidentKey), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_ASSERTION (size: 88)
 */
export interface WEBAUTHN_ASSERTION {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cbAuthenticatorData: number;
  /** ptr */
  pbAuthenticatorData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbSignature: number;
  /** ptr */
  pbSignature: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_CREDENTIAL */
  Credential: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbUserId: number;
  /** ptr */
  pbUserId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WindowsWebServices.WEBAUTHN_EXTENSIONS */
  Extensions: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  cbCredLargeBlob: number;
  /** ptr */
  pbCredLargeBlob: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwCredLargeBlobStatus: number;
}

export const sizeofWEBAUTHN_ASSERTION = 88;

export function allocWEBAUTHN_ASSERTION(data?: Partial<WEBAUTHN_ASSERTION>): Uint8Array {
  const buf = new Uint8Array(sizeofWEBAUTHN_ASSERTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cbAuthenticatorData !== undefined) view.setUint32(4, Number(data.cbAuthenticatorData), true);
  // 0x08: pointer
  if (data?.pbAuthenticatorData !== undefined) view.setBigUint64(8, data.pbAuthenticatorData === null ? 0n : BigInt(util.toPointer(data.pbAuthenticatorData)), true);
  // 0x10: u32
  if (data?.cbSignature !== undefined) view.setUint32(16, Number(data.cbSignature), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbSignature !== undefined) view.setBigUint64(24, data.pbSignature === null ? 0n : BigInt(util.toPointer(data.pbSignature)), true);
  // 0x20: pointer
  if (data?.Credential !== undefined) view.setBigUint64(32, data.Credential === null ? 0n : BigInt(util.toPointer(data.Credential)), true);
  // 0x28: u32
  if (data?.cbUserId !== undefined) view.setUint32(40, Number(data.cbUserId), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pbUserId !== undefined) view.setBigUint64(48, data.pbUserId === null ? 0n : BigInt(util.toPointer(data.pbUserId)), true);
  // 0x38: pointer
  if (data?.Extensions !== undefined) view.setBigUint64(56, data.Extensions === null ? 0n : BigInt(util.toPointer(data.Extensions)), true);
  // 0x40: u32
  if (data?.cbCredLargeBlob !== undefined) view.setUint32(64, Number(data.cbCredLargeBlob), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.pbCredLargeBlob !== undefined) view.setBigUint64(72, data.pbCredLargeBlob === null ? 0n : BigInt(util.toPointer(data.pbCredLargeBlob)), true);
  // 0x50: u32
  if (data?.dwCredLargeBlobStatus !== undefined) view.setUint32(80, Number(data.dwCredLargeBlobStatus), true);
  // 0x54: pad4
  return buf;
}

export type HRESULT = number;

export type HWND = Deno.PointerValue;

// Native Libraries

try {
  var libwebservices_dll = Deno.dlopen("webservices.dll", {
    WsStartReaderCanonicalization: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsEndReaderCanonicalization: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsStartWriterCanonicalization: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsEndWriterCanonicalization: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsCreateXmlBuffer: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsRemoveNode: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsCreateReader: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsSetInput: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsSetInputToBuffer: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsFreeReader: {
      parameters: ["pointer"],
      result: "void",
    },
    WsGetReaderProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsGetReaderNode: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsFillReader: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadStartElement: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsReadToStartElement: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadStartAttribute: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsReadEndAttribute: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsReadNode: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsSkipNode: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsReadEndElement: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsFindAttribute: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadValue: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsReadChars: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadCharsUtf8: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadBytes: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadArray: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "u32", "u32", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetReaderPosition: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsSetReaderPosition: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsMoveReader: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    WsCreateWriter: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsFreeWriter: {
      parameters: ["pointer"],
      result: "void",
    },
    WsSetOutput: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsSetOutputToBuffer: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsGetWriterProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsFlushWriter: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsWriteStartElement: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsWriteEndStartElement: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsWriteXmlnsAttribute: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    WsWriteStartAttribute: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "i32", "pointer"],
      result: "pointer",
    },
    WsWriteEndAttribute: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsWriteValue: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsWriteXmlBuffer: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadXmlBuffer: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsWriteXmlBufferToBytes: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadXmlBufferFromBytes: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsWriteArray: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "u32", "u32", "u32", "pointer"],
      result: "pointer",
    },
    WsWriteQualifiedName: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsWriteChars: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    WsWriteCharsUtf8: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsWriteBytes: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsPushBytes: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsPullBytes: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsWriteEndElement: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsWriteText: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsWriteStartCData: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsWriteEndCData: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsWriteNode: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetPrefixFromNamespace: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetWriterPosition: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsSetWriterPosition: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsMoveWriter: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    WsTrimXmlWhitespace: {
      parameters: ["buffer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsVerifyXmlNCName: {
      parameters: ["buffer", "u32", "pointer"],
      result: "pointer",
    },
    WsXmlStringEquals: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetNamespaceFromPrefix: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadQualifiedName: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetXmlAttribute: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsCopyNode: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsAsyncExecute: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsCreateChannel: {
      parameters: ["i32", "i32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsOpenChannel: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsSendMessage: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsReceiveMessage: {
      parameters: ["pointer", "pointer", "pointer", "u32", "i32", "i32", "pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsRequestReply: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "u32", "pointer", "pointer", "i32", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsSendReplyMessage: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsSendFaultMessageForError: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "i32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetChannelProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsSetChannelProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsWriteMessageStart: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsWriteMessageEnd: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadMessageStart: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadMessageEnd: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsCloseChannel: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsAbortChannel: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsFreeChannel: {
      parameters: ["pointer"],
      result: "void",
    },
    WsResetChannel: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsAbandonMessage: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsShutdownSessionChannel: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetOperationContextProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsGetDictionary: {
      parameters: ["i32", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadEndpointAddressExtension: {
      parameters: ["pointer", "pointer", "i32", "i32", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsCreateError: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsAddErrorString: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsGetErrorString: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsCopyError: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsGetErrorProperty: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "pointer",
    },
    WsSetErrorProperty: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "pointer",
    },
    WsResetError: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WsFreeError: {
      parameters: ["pointer"],
      result: "void",
    },
    WsGetFaultErrorProperty: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "pointer",
    },
    WsSetFaultErrorProperty: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "pointer",
    },
    WsCreateFaultFromError: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    WsSetFaultErrorDetail: {
      parameters: ["pointer", "pointer", "i32", "pointer", "u32"],
      result: "pointer",
    },
    WsGetFaultErrorDetail: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    WsCreateHeap: {
      parameters: ["usize", "usize", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsAlloc: {
      parameters: ["pointer", "usize", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetHeapProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsResetHeap: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsFreeHeap: {
      parameters: ["pointer"],
      result: "void",
    },
    WsCreateListener: {
      parameters: ["i32", "i32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsOpenListener: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsAcceptChannel: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsCloseListener: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsAbortListener: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsResetListener: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsFreeListener: {
      parameters: ["pointer"],
      result: "void",
    },
    WsGetListenerProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsSetListenerProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsCreateChannelForListener: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsCreateMessage: {
      parameters: ["i32", "i32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsCreateMessageForChannel: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsInitializeMessage: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    WsResetMessage: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsFreeMessage: {
      parameters: ["pointer"],
      result: "void",
    },
    WsGetHeaderAttributes: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetHeader: {
      parameters: ["pointer", "i32", "i32", "i32", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsGetCustomHeader: {
      parameters: ["pointer", "pointer", "i32", "u32", "i32", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsRemoveHeader: {
      parameters: ["pointer", "i32", "pointer"],
      result: "pointer",
    },
    WsSetHeader: {
      parameters: ["pointer", "i32", "i32", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsRemoveCustomHeader: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsAddCustomHeader: {
      parameters: ["pointer", "pointer", "i32", "pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    WsAddMappedHeader: {
      parameters: ["pointer", "pointer", "i32", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsRemoveMappedHeader: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetMappedHeader: {
      parameters: ["pointer", "pointer", "i32", "u32", "i32", "i32", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsWriteBody: {
      parameters: ["pointer", "pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsReadBody: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsWriteEnvelopeStart: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsWriteEnvelopeEnd: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsReadEnvelopeStart: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadEnvelopeEnd: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsGetMessageProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsSetMessageProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsAddressMessage: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsCheckMustUnderstandHeaders: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsMarkHeaderAsUnderstood: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsFillBody: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsFlushBody: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsRequestSecurityToken: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetSecurityTokenProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsCreateXmlSecurityToken: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsFreeSecurityToken: {
      parameters: ["pointer"],
      result: "void",
    },
    WsRevokeSecurityContext: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsGetSecurityContextProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsReadElement: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsReadAttribute: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsReadType: {
      parameters: ["pointer", "i32", "i32", "pointer", "i32", "pointer", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsWriteElement: {
      parameters: ["pointer", "pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsWriteAttribute: {
      parameters: ["pointer", "pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsWriteType: {
      parameters: ["pointer", "i32", "i32", "pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsRegisterOperationForCancel: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetServiceHostProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsCreateServiceHost: {
      parameters: ["pointer", "u16", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsOpenServiceHost: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsCloseServiceHost: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsAbortServiceHost: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsFreeServiceHost: {
      parameters: ["pointer"],
      result: "void",
    },
    WsResetServiceHost: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsGetServiceProxyProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsCreateServiceProxy: {
      parameters: ["i32", "i32", "pointer", "pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsOpenServiceProxy: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsCloseServiceProxy: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsAbortServiceProxy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsFreeServiceProxy: {
      parameters: ["pointer"],
      result: "void",
    },
    WsResetServiceProxy: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsAbandonCall: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsCall: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsDecodeUrl: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsEncodeUrl: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsCombineUrl: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsDateTimeToFileTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsFileTimeToDateTime: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsCreateMetadata: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsReadMetadata: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsFreeMetadata: {
      parameters: ["pointer"],
      result: "void",
    },
    WsResetMetadata: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    WsGetMetadataProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsGetMissingMetadataDocumentAddress: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetMetadataEndpoints: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsMatchPolicyAlternative: {
      parameters: ["pointer", "u32", "pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    WsGetPolicyProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "pointer",
    },
    WsGetPolicyAlternativeCount: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WsCreateServiceProxyFromTemplate: {
      parameters: ["i32", "pointer", "u32", "i32", "pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    WsCreateServiceEndpointFromTemplate: {
      parameters: ["i32", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "i32", "pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libwebauthn_dll = Deno.dlopen("webauthn.dll", {
    WebAuthNGetApiVersionNumber: {
      parameters: [],
      result: "u32",
    },
    WebAuthNIsUserVerifyingPlatformAuthenticatorAvailable: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WebAuthNAuthenticatorMakeCredential: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WebAuthNAuthenticatorGetAssertion: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    WebAuthNFreeCredentialAttestation: {
      parameters: ["pointer"],
      result: "void",
    },
    WebAuthNFreeAssertion: {
      parameters: ["pointer"],
      result: "void",
    },
    WebAuthNGetCancellationId: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WebAuthNCancelCurrentOperation: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WebAuthNGetErrorName: {
      parameters: ["pointer"],
      result: "buffer",
    },
    WebAuthNGetW3CExceptionDOMError: {
      parameters: ["pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WsStartReaderCanonicalization(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  writeCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WindowsWebServices.WS_WRITE_CALLBACK */,
  writeCallbackState: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsStartReaderCanonicalization(util.toPointer(reader), util.toPointer(writeCallback), util.toPointer(writeCallbackState), util.toPointer(properties), propertyCount, util.toPointer(error)));
}

export function WsEndReaderCanonicalization(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsEndReaderCanonicalization(util.toPointer(reader), util.toPointer(error)));
}

export function WsStartWriterCanonicalization(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  writeCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WindowsWebServices.WS_WRITE_CALLBACK */,
  writeCallbackState: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsStartWriterCanonicalization(util.toPointer(writer), util.toPointer(writeCallback), util.toPointer(writeCallbackState), util.toPointer(properties), propertyCount, util.toPointer(error)));
}

export function WsEndWriterCanonicalization(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsEndWriterCanonicalization(util.toPointer(writer), util.toPointer(error)));
}

export function WsCreateXmlBuffer(
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateXmlBuffer(util.toPointer(heap), util.toPointer(properties), propertyCount, util.toPointer(buffer), util.toPointer(error)));
}

export function WsRemoveNode(
  nodePosition: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsRemoveNode(util.toPointer(nodePosition), util.toPointer(error)));
}

export function WsCreateReader(
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateReader(util.toPointer(properties), propertyCount, util.toPointer(reader), util.toPointer(error)));
}

export function WsSetInput(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  encoding: Deno.PointerValue | Uint8Array | null /* ptr */,
  input: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSetInput(util.toPointer(reader), util.toPointer(encoding), util.toPointer(input), util.toPointer(properties), propertyCount, util.toPointer(error)));
}

export function WsSetInputToBuffer(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSetInputToBuffer(util.toPointer(reader), util.toPointer(buffer), util.toPointer(properties), propertyCount, util.toPointer(error)));
}

export function WsFreeReader(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwebservices_dll.WsFreeReader(util.toPointer(reader));
}

export function WsGetReaderProperty(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_XML_READER_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_XML_READER_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetReaderProperty(util.toPointer(reader), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsGetReaderNode(
  xmlReader: Deno.PointerValue | Uint8Array | null /* ptr */,
  node: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetReaderNode(util.toPointer(xmlReader), util.toPointer(node), util.toPointer(error)));
}

export function WsFillReader(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  minSize: number /* u32 */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsFillReader(util.toPointer(reader), minSize, util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsReadStartElement(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadStartElement(util.toPointer(reader), util.toPointer(error)));
}

export function WsReadToStartElement(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  localName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ns: Deno.PointerValue | Uint8Array | null /* ptr */,
  found: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadToStartElement(util.toPointer(reader), util.toPointer(localName), util.toPointer(ns), util.toPointer(found), util.toPointer(error)));
}

export function WsReadStartAttribute(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  attributeIndex: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadStartAttribute(util.toPointer(reader), attributeIndex, util.toPointer(error)));
}

export function WsReadEndAttribute(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadEndAttribute(util.toPointer(reader), util.toPointer(error)));
}

export function WsReadNode(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadNode(util.toPointer(reader), util.toPointer(error)));
}

export function WsSkipNode(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSkipNode(util.toPointer(reader), util.toPointer(error)));
}

export function WsReadEndElement(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadEndElement(util.toPointer(reader), util.toPointer(error)));
}

export function WsFindAttribute(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  localName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ns: Deno.PointerValue | Uint8Array | null /* ptr */,
  required: boolean /* Windows.Win32.Foundation.BOOL */,
  attributeIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsFindAttribute(util.toPointer(reader), util.toPointer(localName), util.toPointer(ns), util.boolToFfi(required), util.toPointer(attributeIndex), util.toPointer(error)));
}

export function WsReadValue(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueType: WS_VALUE_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_VALUE_TYPE */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadValue(util.toPointer(reader), valueType, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsReadChars(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  chars: string | null /* Windows.Win32.Foundation.PWSTR */,
  maxCharCount: number /* u32 */,
  actualCharCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadChars(util.toPointer(reader), util.pwstrToFfi(chars), maxCharCount, util.toPointer(actualCharCount), util.toPointer(error)));
}

export function WsReadCharsUtf8(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  bytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  maxByteCount: number /* u32 */,
  actualByteCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadCharsUtf8(util.toPointer(reader), util.toPointer(bytes), maxByteCount, util.toPointer(actualByteCount), util.toPointer(error)));
}

export function WsReadBytes(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  bytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  maxByteCount: number /* u32 */,
  actualByteCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadBytes(util.toPointer(reader), util.toPointer(bytes), maxByteCount, util.toPointer(actualByteCount), util.toPointer(error)));
}

export function WsReadArray(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  localName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ns: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueType: WS_VALUE_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_VALUE_TYPE */,
  array: Deno.PointerValue | Uint8Array | null /* ptr */,
  arraySize: number /* u32 */,
  itemOffset: number /* u32 */,
  itemCount: number /* u32 */,
  actualItemCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadArray(util.toPointer(reader), util.toPointer(localName), util.toPointer(ns), valueType, util.toPointer(array), arraySize, itemOffset, itemCount, util.toPointer(actualItemCount), util.toPointer(error)));
}

export function WsGetReaderPosition(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  nodePosition: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetReaderPosition(util.toPointer(reader), util.toPointer(nodePosition), util.toPointer(error)));
}

export function WsSetReaderPosition(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  nodePosition: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSetReaderPosition(util.toPointer(reader), util.toPointer(nodePosition), util.toPointer(error)));
}

export function WsMoveReader(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  moveTo: WS_MOVE_TO /* Windows.Win32.Networking.WindowsWebServices.WS_MOVE_TO */,
  found: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsMoveReader(util.toPointer(reader), moveTo, util.toPointer(found), util.toPointer(error)));
}

export function WsCreateWriter(
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateWriter(util.toPointer(properties), propertyCount, util.toPointer(writer), util.toPointer(error)));
}

export function WsFreeWriter(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwebservices_dll.WsFreeWriter(util.toPointer(writer));
}

export function WsSetOutput(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  encoding: Deno.PointerValue | Uint8Array | null /* ptr */,
  output: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSetOutput(util.toPointer(writer), util.toPointer(encoding), util.toPointer(output), util.toPointer(properties), propertyCount, util.toPointer(error)));
}

export function WsSetOutputToBuffer(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSetOutputToBuffer(util.toPointer(writer), util.toPointer(buffer), util.toPointer(properties), propertyCount, util.toPointer(error)));
}

export function WsGetWriterProperty(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_XML_WRITER_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_XML_WRITER_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetWriterProperty(util.toPointer(writer), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsFlushWriter(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  minSize: number /* u32 */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsFlushWriter(util.toPointer(writer), minSize, util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsWriteStartElement(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefix: Deno.PointerValue | Uint8Array | null /* ptr */,
  localName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ns: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteStartElement(util.toPointer(writer), util.toPointer(prefix), util.toPointer(localName), util.toPointer(ns), util.toPointer(error)));
}

export function WsWriteEndStartElement(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteEndStartElement(util.toPointer(writer), util.toPointer(error)));
}

export function WsWriteXmlnsAttribute(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefix: Deno.PointerValue | Uint8Array | null /* ptr */,
  ns: Deno.PointerValue | Uint8Array | null /* ptr */,
  singleQuote: boolean /* Windows.Win32.Foundation.BOOL */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteXmlnsAttribute(util.toPointer(writer), util.toPointer(prefix), util.toPointer(ns), util.boolToFfi(singleQuote), util.toPointer(error)));
}

export function WsWriteStartAttribute(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefix: Deno.PointerValue | Uint8Array | null /* ptr */,
  localName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ns: Deno.PointerValue | Uint8Array | null /* ptr */,
  singleQuote: boolean /* Windows.Win32.Foundation.BOOL */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteStartAttribute(util.toPointer(writer), util.toPointer(prefix), util.toPointer(localName), util.toPointer(ns), util.boolToFfi(singleQuote), util.toPointer(error)));
}

export function WsWriteEndAttribute(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteEndAttribute(util.toPointer(writer), util.toPointer(error)));
}

export function WsWriteValue(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueType: WS_VALUE_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_VALUE_TYPE */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteValue(util.toPointer(writer), valueType, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsWriteXmlBuffer(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  xmlBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteXmlBuffer(util.toPointer(writer), util.toPointer(xmlBuffer), util.toPointer(error)));
}

export function WsReadXmlBuffer(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  xmlBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadXmlBuffer(util.toPointer(reader), util.toPointer(heap), util.toPointer(xmlBuffer), util.toPointer(error)));
}

export function WsWriteXmlBufferToBytes(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  xmlBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  encoding: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  bytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  byteCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteXmlBufferToBytes(util.toPointer(writer), util.toPointer(xmlBuffer), util.toPointer(encoding), util.toPointer(properties), propertyCount, util.toPointer(heap), util.toPointer(bytes), util.toPointer(byteCount), util.toPointer(error)));
}

export function WsReadXmlBufferFromBytes(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  encoding: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  bytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  byteCount: number /* u32 */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  xmlBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadXmlBufferFromBytes(util.toPointer(reader), util.toPointer(encoding), util.toPointer(properties), propertyCount, util.toPointer(bytes), byteCount, util.toPointer(heap), util.toPointer(xmlBuffer), util.toPointer(error)));
}

export function WsWriteArray(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  localName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ns: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueType: WS_VALUE_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_VALUE_TYPE */,
  array: Deno.PointerValue | Uint8Array | null /* ptr */,
  arraySize: number /* u32 */,
  itemOffset: number /* u32 */,
  itemCount: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteArray(util.toPointer(writer), util.toPointer(localName), util.toPointer(ns), valueType, util.toPointer(array), arraySize, itemOffset, itemCount, util.toPointer(error)));
}

export function WsWriteQualifiedName(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefix: Deno.PointerValue | Uint8Array | null /* ptr */,
  localName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ns: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteQualifiedName(util.toPointer(writer), util.toPointer(prefix), util.toPointer(localName), util.toPointer(ns), util.toPointer(error)));
}

export function WsWriteChars(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  chars: string | null /* Windows.Win32.Foundation.PWSTR */,
  charCount: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteChars(util.toPointer(writer), util.pwstrToFfi(chars), charCount, util.toPointer(error)));
}

export function WsWriteCharsUtf8(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  bytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  byteCount: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteCharsUtf8(util.toPointer(writer), util.toPointer(bytes), byteCount, util.toPointer(error)));
}

export function WsWriteBytes(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  bytes: Deno.PointerValue | Uint8Array | null /* ptr */,
  byteCount: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteBytes(util.toPointer(writer), util.toPointer(bytes), byteCount, util.toPointer(error)));
}

export function WsPushBytes(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WindowsWebServices.WS_PUSH_BYTES_CALLBACK */,
  callbackState: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsPushBytes(util.toPointer(writer), util.toPointer(callback), util.toPointer(callbackState), util.toPointer(error)));
}

export function WsPullBytes(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  callback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WindowsWebServices.WS_PULL_BYTES_CALLBACK */,
  callbackState: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsPullBytes(util.toPointer(writer), util.toPointer(callback), util.toPointer(callbackState), util.toPointer(error)));
}

export function WsWriteEndElement(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteEndElement(util.toPointer(writer), util.toPointer(error)));
}

export function WsWriteText(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  text: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteText(util.toPointer(writer), util.toPointer(text), util.toPointer(error)));
}

export function WsWriteStartCData(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteStartCData(util.toPointer(writer), util.toPointer(error)));
}

export function WsWriteEndCData(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteEndCData(util.toPointer(writer), util.toPointer(error)));
}

export function WsWriteNode(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  node: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteNode(util.toPointer(writer), util.toPointer(node), util.toPointer(error)));
}

export function WsGetPrefixFromNamespace(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  ns: Deno.PointerValue | Uint8Array | null /* ptr */,
  required: boolean /* Windows.Win32.Foundation.BOOL */,
  prefix: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetPrefixFromNamespace(util.toPointer(writer), util.toPointer(ns), util.boolToFfi(required), util.toPointer(prefix), util.toPointer(error)));
}

export function WsGetWriterPosition(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nodePosition: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetWriterPosition(util.toPointer(writer), util.toPointer(nodePosition), util.toPointer(error)));
}

export function WsSetWriterPosition(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  nodePosition: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSetWriterPosition(util.toPointer(writer), util.toPointer(nodePosition), util.toPointer(error)));
}

export function WsMoveWriter(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  moveTo: WS_MOVE_TO /* Windows.Win32.Networking.WindowsWebServices.WS_MOVE_TO */,
  found: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsMoveWriter(util.toPointer(writer), moveTo, util.toPointer(found), util.toPointer(error)));
}

export function WsTrimXmlWhitespace(
  chars: string | null /* Windows.Win32.Foundation.PWSTR */,
  charCount: number /* u32 */,
  trimmedChars: Deno.PointerValue | Uint8Array | null /* ptr */,
  trimmedCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsTrimXmlWhitespace(util.pwstrToFfi(chars), charCount, util.toPointer(trimmedChars), util.toPointer(trimmedCount), util.toPointer(error)));
}

export function WsVerifyXmlNCName(
  ncNameChars: string | null /* Windows.Win32.Foundation.PWSTR */,
  ncNameCharCount: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsVerifyXmlNCName(util.pwstrToFfi(ncNameChars), ncNameCharCount, util.toPointer(error)));
}

export function WsXmlStringEquals(
  string1: Deno.PointerValue | Uint8Array | null /* ptr */,
  string2: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsXmlStringEquals(util.toPointer(string1), util.toPointer(string2), util.toPointer(error)));
}

export function WsGetNamespaceFromPrefix(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefix: Deno.PointerValue | Uint8Array | null /* ptr */,
  required: boolean /* Windows.Win32.Foundation.BOOL */,
  ns: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetNamespaceFromPrefix(util.toPointer(reader), util.toPointer(prefix), util.boolToFfi(required), util.toPointer(ns), util.toPointer(error)));
}

export function WsReadQualifiedName(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  prefix: Deno.PointerValue | Uint8Array | null /* ptr */,
  localName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ns: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadQualifiedName(util.toPointer(reader), util.toPointer(heap), util.toPointer(prefix), util.toPointer(localName), util.toPointer(ns), util.toPointer(error)));
}

export function WsGetXmlAttribute(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  localName: Deno.PointerValue | Uint8Array | null /* ptr */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueChars: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueCharCount: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetXmlAttribute(util.toPointer(reader), util.toPointer(localName), util.toPointer(heap), util.toPointer(valueChars), util.toPointer(valueCharCount), util.toPointer(error)));
}

export function WsCopyNode(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCopyNode(util.toPointer(writer), util.toPointer(reader), util.toPointer(error)));
}

export function WsAsyncExecute(
  asyncState: Deno.PointerValue | Uint8Array | null /* ptr */,
  operation: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WindowsWebServices.WS_ASYNC_FUNCTION */,
  callbackModel: WS_CALLBACK_MODEL /* Windows.Win32.Networking.WindowsWebServices.WS_CALLBACK_MODEL */,
  callbackState: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsAsyncExecute(util.toPointer(asyncState), util.toPointer(operation), callbackModel, util.toPointer(callbackState), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsCreateChannel(
  channelType: WS_CHANNEL_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_TYPE */,
  channelBinding: WS_CHANNEL_BINDING /* Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_BINDING */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  securityDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateChannel(channelType, channelBinding, util.toPointer(properties), propertyCount, util.toPointer(securityDescription), util.toPointer(channel), util.toPointer(error)));
}

export function WsOpenChannel(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  endpointAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsOpenChannel(util.toPointer(channel), util.toPointer(endpointAddress), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsSendMessage(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  messageDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  writeOption: WS_WRITE_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_WRITE_OPTION */,
  bodyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  bodyValueSize: number /* u32 */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSendMessage(util.toPointer(channel), util.toPointer(message), util.toPointer(messageDescription), writeOption, util.toPointer(bodyValue), bodyValueSize, util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsReceiveMessage(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  messageDescriptions: Deno.PointerValue | Uint8Array | null /* ptr */,
  messageDescriptionCount: number /* u32 */,
  receiveOption: WS_RECEIVE_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_RECEIVE_OPTION */,
  readBodyOption: WS_READ_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_READ_OPTION */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  index: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReceiveMessage(util.toPointer(channel), util.toPointer(message), util.toPointer(messageDescriptions), messageDescriptionCount, receiveOption, readBodyOption, util.toPointer(heap), util.toPointer(value), valueSize, util.toPointer(index), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsRequestReply(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  requestMessage: Deno.PointerValue | Uint8Array | null /* ptr */,
  requestMessageDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  writeOption: WS_WRITE_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_WRITE_OPTION */,
  requestBodyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  requestBodyValueSize: number /* u32 */,
  replyMessage: Deno.PointerValue | Uint8Array | null /* ptr */,
  replyMessageDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  readOption: WS_READ_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_READ_OPTION */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsRequestReply(util.toPointer(channel), util.toPointer(requestMessage), util.toPointer(requestMessageDescription), writeOption, util.toPointer(requestBodyValue), requestBodyValueSize, util.toPointer(replyMessage), util.toPointer(replyMessageDescription), readOption, util.toPointer(heap), util.toPointer(value), valueSize, util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsSendReplyMessage(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  replyMessage: Deno.PointerValue | Uint8Array | null /* ptr */,
  replyMessageDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  writeOption: WS_WRITE_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_WRITE_OPTION */,
  replyBodyValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  replyBodyValueSize: number /* u32 */,
  requestMessage: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSendReplyMessage(util.toPointer(channel), util.toPointer(replyMessage), util.toPointer(replyMessageDescription), writeOption, util.toPointer(replyBodyValue), replyBodyValueSize, util.toPointer(requestMessage), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsSendFaultMessageForError(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  replyMessage: Deno.PointerValue | Uint8Array | null /* ptr */,
  faultError: Deno.PointerValue | Uint8Array | null /* ptr */,
  faultErrorCode: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */,
  faultDisclosure: WS_FAULT_DISCLOSURE /* Windows.Win32.Networking.WindowsWebServices.WS_FAULT_DISCLOSURE */,
  requestMessage: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSendFaultMessageForError(util.toPointer(channel), util.toPointer(replyMessage), util.toPointer(faultError), util.toPointer(faultErrorCode), faultDisclosure, util.toPointer(requestMessage), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsGetChannelProperty(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_CHANNEL_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetChannelProperty(util.toPointer(channel), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsSetChannelProperty(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_CHANNEL_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSetChannelProperty(util.toPointer(channel), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsWriteMessageStart(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteMessageStart(util.toPointer(channel), util.toPointer(message), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsWriteMessageEnd(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteMessageEnd(util.toPointer(channel), util.toPointer(message), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsReadMessageStart(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadMessageStart(util.toPointer(channel), util.toPointer(message), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsReadMessageEnd(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadMessageEnd(util.toPointer(channel), util.toPointer(message), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsCloseChannel(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCloseChannel(util.toPointer(channel), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsAbortChannel(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsAbortChannel(util.toPointer(channel), util.toPointer(error)));
}

export function WsFreeChannel(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwebservices_dll.WsFreeChannel(util.toPointer(channel));
}

export function WsResetChannel(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsResetChannel(util.toPointer(channel), util.toPointer(error)));
}

export function WsAbandonMessage(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsAbandonMessage(util.toPointer(channel), util.toPointer(message), util.toPointer(error)));
}

export function WsShutdownSessionChannel(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsShutdownSessionChannel(util.toPointer(channel), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsGetOperationContextProperty(
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_OPERATION_CONTEXT_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_OPERATION_CONTEXT_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetOperationContextProperty(util.toPointer(context), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsGetDictionary(
  encoding: WS_ENCODING /* Windows.Win32.Networking.WindowsWebServices.WS_ENCODING */,
  dictionary: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetDictionary(encoding, util.toPointer(dictionary), util.toPointer(error)));
}

export function WsReadEndpointAddressExtension(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  endpointAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  extensionType: WS_ENDPOINT_ADDRESS_EXTENSION_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_ENDPOINT_ADDRESS_EXTENSION_TYPE */,
  readOption: WS_READ_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_READ_OPTION */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadEndpointAddressExtension(util.toPointer(reader), util.toPointer(endpointAddress), extensionType, readOption, util.toPointer(heap), util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsCreateError(
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateError(util.toPointer(properties), propertyCount, util.toPointer(error)));
}

export function WsAddErrorString(
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
  string: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsAddErrorString(util.toPointer(error), util.toPointer(string)));
}

export function WsGetErrorString(
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
  index: number /* u32 */,
  string: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetErrorString(util.toPointer(error), index, util.toPointer(string)));
}

export function WsCopyError(
  source: Deno.PointerValue | Uint8Array | null /* ptr */,
  destination: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCopyError(util.toPointer(source), util.toPointer(destination)));
}

export function WsGetErrorProperty(
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_ERROR_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_ERROR_PROPERTY_ID */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  bufferSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetErrorProperty(util.toPointer(error), id, util.toPointer(buffer), bufferSize));
}

export function WsSetErrorProperty(
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_ERROR_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_ERROR_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSetErrorProperty(util.toPointer(error), id, util.toPointer(value), valueSize));
}

export function WsResetError(
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsResetError(util.toPointer(error)));
}

export function WsFreeError(
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwebservices_dll.WsFreeError(util.toPointer(error));
}

export function WsGetFaultErrorProperty(
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_FAULT_ERROR_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_FAULT_ERROR_PROPERTY_ID */,
  buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  bufferSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetFaultErrorProperty(util.toPointer(error), id, util.toPointer(buffer), bufferSize));
}

export function WsSetFaultErrorProperty(
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_FAULT_ERROR_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_FAULT_ERROR_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSetFaultErrorProperty(util.toPointer(error), id, util.toPointer(value), valueSize));
}

export function WsCreateFaultFromError(
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
  faultErrorCode: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */,
  faultDisclosure: WS_FAULT_DISCLOSURE /* Windows.Win32.Networking.WindowsWebServices.WS_FAULT_DISCLOSURE */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  fault: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateFaultFromError(util.toPointer(error), util.toPointer(faultErrorCode), faultDisclosure, util.toPointer(heap), util.toPointer(fault)));
}

export function WsSetFaultErrorDetail(
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
  faultDetailDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  writeOption: WS_WRITE_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_WRITE_OPTION */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSetFaultErrorDetail(util.toPointer(error), util.toPointer(faultDetailDescription), writeOption, util.toPointer(value), valueSize));
}

export function WsGetFaultErrorDetail(
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
  faultDetailDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  readOption: WS_READ_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_READ_OPTION */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetFaultErrorDetail(util.toPointer(error), util.toPointer(faultDetailDescription), readOption, util.toPointer(heap), util.toPointer(value), valueSize));
}

export function WsCreateHeap(
  maxSize: Deno.PointerValue /* usize */,
  trimSize: Deno.PointerValue /* usize */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateHeap(maxSize, trimSize, util.toPointer(properties), propertyCount, util.toPointer(heap), util.toPointer(error)));
}

export function WsAlloc(
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  size: Deno.PointerValue /* usize */,
  ptr: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsAlloc(util.toPointer(heap), size, util.toPointer(ptr), util.toPointer(error)));
}

export function WsGetHeapProperty(
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_HEAP_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_HEAP_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetHeapProperty(util.toPointer(heap), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsResetHeap(
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsResetHeap(util.toPointer(heap), util.toPointer(error)));
}

export function WsFreeHeap(
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwebservices_dll.WsFreeHeap(util.toPointer(heap));
}

export function WsCreateListener(
  channelType: WS_CHANNEL_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_TYPE */,
  channelBinding: WS_CHANNEL_BINDING /* Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_BINDING */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  securityDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  listener: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateListener(channelType, channelBinding, util.toPointer(properties), propertyCount, util.toPointer(securityDescription), util.toPointer(listener), util.toPointer(error)));
}

export function WsOpenListener(
  listener: Deno.PointerValue | Uint8Array | null /* ptr */,
  url: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsOpenListener(util.toPointer(listener), util.toPointer(url), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsAcceptChannel(
  listener: Deno.PointerValue | Uint8Array | null /* ptr */,
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsAcceptChannel(util.toPointer(listener), util.toPointer(channel), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsCloseListener(
  listener: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCloseListener(util.toPointer(listener), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsAbortListener(
  listener: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsAbortListener(util.toPointer(listener), util.toPointer(error)));
}

export function WsResetListener(
  listener: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsResetListener(util.toPointer(listener), util.toPointer(error)));
}

export function WsFreeListener(
  listener: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwebservices_dll.WsFreeListener(util.toPointer(listener));
}

export function WsGetListenerProperty(
  listener: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_LISTENER_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_LISTENER_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetListenerProperty(util.toPointer(listener), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsSetListenerProperty(
  listener: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_LISTENER_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_LISTENER_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSetListenerProperty(util.toPointer(listener), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsCreateChannelForListener(
  listener: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateChannelForListener(util.toPointer(listener), util.toPointer(properties), propertyCount, util.toPointer(channel), util.toPointer(error)));
}

export function WsCreateMessage(
  envelopeVersion: WS_ENVELOPE_VERSION /* Windows.Win32.Networking.WindowsWebServices.WS_ENVELOPE_VERSION */,
  addressingVersion: WS_ADDRESSING_VERSION /* Windows.Win32.Networking.WindowsWebServices.WS_ADDRESSING_VERSION */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateMessage(envelopeVersion, addressingVersion, util.toPointer(properties), propertyCount, util.toPointer(message), util.toPointer(error)));
}

export function WsCreateMessageForChannel(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateMessageForChannel(util.toPointer(channel), util.toPointer(properties), propertyCount, util.toPointer(message), util.toPointer(error)));
}

export function WsInitializeMessage(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  initialization: WS_MESSAGE_INITIALIZATION /* Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_INITIALIZATION */,
  sourceMessage: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsInitializeMessage(util.toPointer(message), initialization, util.toPointer(sourceMessage), util.toPointer(error)));
}

export function WsResetMessage(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsResetMessage(util.toPointer(message), util.toPointer(error)));
}

export function WsFreeMessage(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwebservices_dll.WsFreeMessage(util.toPointer(message));
}

export function WsGetHeaderAttributes(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  headerAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetHeaderAttributes(util.toPointer(message), util.toPointer(reader), util.toPointer(headerAttributes), util.toPointer(error)));
}

export function WsGetHeader(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  headerType: WS_HEADER_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_HEADER_TYPE */,
  valueType: WS_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_TYPE */,
  readOption: WS_READ_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_READ_OPTION */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetHeader(util.toPointer(message), headerType, valueType, readOption, util.toPointer(heap), util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsGetCustomHeader(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  customHeaderDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  repeatingOption: WS_REPEATING_HEADER_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_REPEATING_HEADER_OPTION */,
  headerIndex: number /* u32 */,
  readOption: WS_READ_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_READ_OPTION */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  headerAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetCustomHeader(util.toPointer(message), util.toPointer(customHeaderDescription), repeatingOption, headerIndex, readOption, util.toPointer(heap), util.toPointer(value), valueSize, util.toPointer(headerAttributes), util.toPointer(error)));
}

export function WsRemoveHeader(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  headerType: WS_HEADER_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_HEADER_TYPE */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsRemoveHeader(util.toPointer(message), headerType, util.toPointer(error)));
}

export function WsSetHeader(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  headerType: WS_HEADER_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_HEADER_TYPE */,
  valueType: WS_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_TYPE */,
  writeOption: WS_WRITE_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_WRITE_OPTION */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSetHeader(util.toPointer(message), headerType, valueType, writeOption, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsRemoveCustomHeader(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  headerName: Deno.PointerValue | Uint8Array | null /* ptr */,
  headerNs: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsRemoveCustomHeader(util.toPointer(message), util.toPointer(headerName), util.toPointer(headerNs), util.toPointer(error)));
}

export function WsAddCustomHeader(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  headerDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  writeOption: WS_WRITE_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_WRITE_OPTION */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  headerAttributes: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsAddCustomHeader(util.toPointer(message), util.toPointer(headerDescription), writeOption, util.toPointer(value), valueSize, headerAttributes, util.toPointer(error)));
}

export function WsAddMappedHeader(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  headerName: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueType: WS_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_TYPE */,
  writeOption: WS_WRITE_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_WRITE_OPTION */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsAddMappedHeader(util.toPointer(message), util.toPointer(headerName), valueType, writeOption, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsRemoveMappedHeader(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  headerName: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsRemoveMappedHeader(util.toPointer(message), util.toPointer(headerName), util.toPointer(error)));
}

export function WsGetMappedHeader(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  headerName: Deno.PointerValue | Uint8Array | null /* ptr */,
  repeatingOption: WS_REPEATING_HEADER_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_REPEATING_HEADER_OPTION */,
  headerIndex: number /* u32 */,
  valueType: WS_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_TYPE */,
  readOption: WS_READ_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_READ_OPTION */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetMappedHeader(util.toPointer(message), util.toPointer(headerName), repeatingOption, headerIndex, valueType, readOption, util.toPointer(heap), util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsWriteBody(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  bodyDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  writeOption: WS_WRITE_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_WRITE_OPTION */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteBody(util.toPointer(message), util.toPointer(bodyDescription), writeOption, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsReadBody(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  bodyDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  readOption: WS_READ_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_READ_OPTION */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadBody(util.toPointer(message), util.toPointer(bodyDescription), readOption, util.toPointer(heap), util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsWriteEnvelopeStart(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  doneCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_DONE_CALLBACK */,
  doneCallbackState: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteEnvelopeStart(util.toPointer(message), util.toPointer(writer), util.toPointer(doneCallback), util.toPointer(doneCallbackState), util.toPointer(error)));
}

export function WsWriteEnvelopeEnd(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteEnvelopeEnd(util.toPointer(message), util.toPointer(error)));
}

export function WsReadEnvelopeStart(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  doneCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_DONE_CALLBACK */,
  doneCallbackState: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadEnvelopeStart(util.toPointer(message), util.toPointer(reader), util.toPointer(doneCallback), util.toPointer(doneCallbackState), util.toPointer(error)));
}

export function WsReadEnvelopeEnd(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadEnvelopeEnd(util.toPointer(message), util.toPointer(error)));
}

export function WsGetMessageProperty(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_MESSAGE_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetMessageProperty(util.toPointer(message), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsSetMessageProperty(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_MESSAGE_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_MESSAGE_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsSetMessageProperty(util.toPointer(message), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsAddressMessage(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  address: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsAddressMessage(util.toPointer(message), util.toPointer(address), util.toPointer(error)));
}

export function WsCheckMustUnderstandHeaders(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCheckMustUnderstandHeaders(util.toPointer(message), util.toPointer(error)));
}

export function WsMarkHeaderAsUnderstood(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  headerPosition: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsMarkHeaderAsUnderstood(util.toPointer(message), util.toPointer(headerPosition), util.toPointer(error)));
}

export function WsFillBody(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  minSize: number /* u32 */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsFillBody(util.toPointer(message), minSize, util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsFlushBody(
  message: Deno.PointerValue | Uint8Array | null /* ptr */,
  minSize: number /* u32 */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsFlushBody(util.toPointer(message), minSize, util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsRequestSecurityToken(
  channel: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  token: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsRequestSecurityToken(util.toPointer(channel), util.toPointer(properties), propertyCount, util.toPointer(token), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsGetSecurityTokenProperty(
  securityToken: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_SECURITY_TOKEN_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_TOKEN_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetSecurityTokenProperty(util.toPointer(securityToken), id, util.toPointer(value), valueSize, util.toPointer(heap), util.toPointer(error)));
}

export function WsCreateXmlSecurityToken(
  tokenXml: Deno.PointerValue | Uint8Array | null /* ptr */,
  tokenKey: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  token: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateXmlSecurityToken(util.toPointer(tokenXml), util.toPointer(tokenKey), util.toPointer(properties), propertyCount, util.toPointer(token), util.toPointer(error)));
}

export function WsFreeSecurityToken(
  token: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwebservices_dll.WsFreeSecurityToken(util.toPointer(token));
}

export function WsRevokeSecurityContext(
  securityContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsRevokeSecurityContext(util.toPointer(securityContext), util.toPointer(error)));
}

export function WsGetSecurityContextProperty(
  securityContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_SECURITY_CONTEXT_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_SECURITY_CONTEXT_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetSecurityContextProperty(util.toPointer(securityContext), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsReadElement(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  elementDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  readOption: WS_READ_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_READ_OPTION */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadElement(util.toPointer(reader), util.toPointer(elementDescription), readOption, util.toPointer(heap), util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsReadAttribute(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  attributeDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  readOption: WS_READ_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_READ_OPTION */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadAttribute(util.toPointer(reader), util.toPointer(attributeDescription), readOption, util.toPointer(heap), util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsReadType(
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  typeMapping: WS_TYPE_MAPPING /* Windows.Win32.Networking.WindowsWebServices.WS_TYPE_MAPPING */,
  type: WS_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_TYPE */,
  typeDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  readOption: WS_READ_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_READ_OPTION */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadType(util.toPointer(reader), typeMapping, type, util.toPointer(typeDescription), readOption, util.toPointer(heap), util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsWriteElement(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  elementDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  writeOption: WS_WRITE_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_WRITE_OPTION */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteElement(util.toPointer(writer), util.toPointer(elementDescription), writeOption, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsWriteAttribute(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  attributeDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  writeOption: WS_WRITE_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_WRITE_OPTION */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteAttribute(util.toPointer(writer), util.toPointer(attributeDescription), writeOption, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsWriteType(
  writer: Deno.PointerValue | Uint8Array | null /* ptr */,
  typeMapping: WS_TYPE_MAPPING /* Windows.Win32.Networking.WindowsWebServices.WS_TYPE_MAPPING */,
  type: WS_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_TYPE */,
  typeDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  writeOption: WS_WRITE_OPTION /* Windows.Win32.Networking.WindowsWebServices.WS_WRITE_OPTION */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsWriteType(util.toPointer(writer), typeMapping, type, util.toPointer(typeDescription), writeOption, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsRegisterOperationForCancel(
  context: Deno.PointerValue | Uint8Array | null /* ptr */,
  cancelCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WindowsWebServices.WS_OPERATION_CANCEL_CALLBACK */,
  freestateCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WindowsWebServices.WS_OPERATION_FREE_STATE_CALLBACK */,
  userState: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsRegisterOperationForCancel(util.toPointer(context), util.toPointer(cancelCallback), util.toPointer(freestateCallback), util.toPointer(userState), util.toPointer(error)));
}

export function WsGetServiceHostProperty(
  serviceHost: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_SERVICE_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetServiceHostProperty(util.toPointer(serviceHost), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsCreateServiceHost(
  endpoints: Deno.PointerValue | Uint8Array | null /* ptr */,
  endpointCount: number /* u16 */,
  serviceProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
  servicePropertyCount: number /* u32 */,
  serviceHost: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateServiceHost(util.toPointer(endpoints), endpointCount, util.toPointer(serviceProperties), servicePropertyCount, util.toPointer(serviceHost), util.toPointer(error)));
}

export function WsOpenServiceHost(
  serviceHost: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsOpenServiceHost(util.toPointer(serviceHost), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsCloseServiceHost(
  serviceHost: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCloseServiceHost(util.toPointer(serviceHost), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsAbortServiceHost(
  serviceHost: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsAbortServiceHost(util.toPointer(serviceHost), util.toPointer(error)));
}

export function WsFreeServiceHost(
  serviceHost: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwebservices_dll.WsFreeServiceHost(util.toPointer(serviceHost));
}

export function WsResetServiceHost(
  serviceHost: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsResetServiceHost(util.toPointer(serviceHost), util.toPointer(error)));
}

export function WsGetServiceProxyProperty(
  serviceProxy: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_PROXY_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_PROXY_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetServiceProxyProperty(util.toPointer(serviceProxy), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsCreateServiceProxy(
  channelType: WS_CHANNEL_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_TYPE */,
  channelBinding: WS_CHANNEL_BINDING /* Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_BINDING */,
  securityDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  channelProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
  channelPropertyCount: number /* u32 */,
  serviceProxy: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateServiceProxy(channelType, channelBinding, util.toPointer(securityDescription), util.toPointer(properties), propertyCount, util.toPointer(channelProperties), channelPropertyCount, util.toPointer(serviceProxy), util.toPointer(error)));
}

export function WsOpenServiceProxy(
  serviceProxy: Deno.PointerValue | Uint8Array | null /* ptr */,
  address: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsOpenServiceProxy(util.toPointer(serviceProxy), util.toPointer(address), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsCloseServiceProxy(
  serviceProxy: Deno.PointerValue | Uint8Array | null /* ptr */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCloseServiceProxy(util.toPointer(serviceProxy), util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsAbortServiceProxy(
  serviceProxy: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsAbortServiceProxy(util.toPointer(serviceProxy), util.toPointer(error)));
}

export function WsFreeServiceProxy(
  serviceProxy: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwebservices_dll.WsFreeServiceProxy(util.toPointer(serviceProxy));
}

export function WsResetServiceProxy(
  serviceProxy: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsResetServiceProxy(util.toPointer(serviceProxy), util.toPointer(error)));
}

export function WsAbandonCall(
  serviceProxy: Deno.PointerValue | Uint8Array | null /* ptr */,
  callId: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsAbandonCall(util.toPointer(serviceProxy), callId, util.toPointer(error)));
}

export function WsCall(
  serviceProxy: Deno.PointerValue | Uint8Array | null /* ptr */,
  operation: Deno.PointerValue | Uint8Array | null /* ptr */,
  arguments__: Deno.PointerValue | Uint8Array | null /* ptr */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  callProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
  callPropertyCount: number /* u32 */,
  asyncContext: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCall(util.toPointer(serviceProxy), util.toPointer(operation), util.toPointer(arguments__), util.toPointer(heap), util.toPointer(callProperties), callPropertyCount, util.toPointer(asyncContext), util.toPointer(error)));
}

export function WsDecodeUrl(
  url: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: number /* u32 */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  outUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsDecodeUrl(util.toPointer(url), flags, util.toPointer(heap), util.toPointer(outUrl), util.toPointer(error)));
}

export function WsEncodeUrl(
  url: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: number /* u32 */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  outUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsEncodeUrl(util.toPointer(url), flags, util.toPointer(heap), util.toPointer(outUrl), util.toPointer(error)));
}

export function WsCombineUrl(
  baseUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
  referenceUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
  flags: number /* u32 */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  resultUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCombineUrl(util.toPointer(baseUrl), util.toPointer(referenceUrl), flags, util.toPointer(heap), util.toPointer(resultUrl), util.toPointer(error)));
}

export function WsDateTimeToFileTime(
  dateTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  fileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsDateTimeToFileTime(util.toPointer(dateTime), util.toPointer(fileTime), util.toPointer(error)));
}

export function WsFileTimeToDateTime(
  fileTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  dateTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsFileTimeToDateTime(util.toPointer(fileTime), util.toPointer(dateTime), util.toPointer(error)));
}

export function WsCreateMetadata(
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  metadata: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateMetadata(util.toPointer(properties), propertyCount, util.toPointer(metadata), util.toPointer(error)));
}

export function WsReadMetadata(
  metadata: Deno.PointerValue | Uint8Array | null /* ptr */,
  reader: Deno.PointerValue | Uint8Array | null /* ptr */,
  url: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsReadMetadata(util.toPointer(metadata), util.toPointer(reader), util.toPointer(url), util.toPointer(error)));
}

export function WsFreeMetadata(
  metadata: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwebservices_dll.WsFreeMetadata(util.toPointer(metadata));
}

export function WsResetMetadata(
  metadata: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsResetMetadata(util.toPointer(metadata), util.toPointer(error)));
}

export function WsGetMetadataProperty(
  metadata: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_METADATA_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_METADATA_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetMetadataProperty(util.toPointer(metadata), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsGetMissingMetadataDocumentAddress(
  metadata: Deno.PointerValue | Uint8Array | null /* ptr */,
  address: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetMissingMetadataDocumentAddress(util.toPointer(metadata), util.toPointer(address), util.toPointer(error)));
}

export function WsGetMetadataEndpoints(
  metadata: Deno.PointerValue | Uint8Array | null /* ptr */,
  endpoints: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetMetadataEndpoints(util.toPointer(metadata), util.toPointer(endpoints), util.toPointer(error)));
}

export function WsMatchPolicyAlternative(
  policy: Deno.PointerValue | Uint8Array | null /* ptr */,
  alternativeIndex: number /* u32 */,
  policyConstraints: Deno.PointerValue | Uint8Array | null /* ptr */,
  matchRequired: boolean /* Windows.Win32.Foundation.BOOL */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsMatchPolicyAlternative(util.toPointer(policy), alternativeIndex, util.toPointer(policyConstraints), util.boolToFfi(matchRequired), util.toPointer(heap), util.toPointer(error)));
}

export function WsGetPolicyProperty(
  policy: Deno.PointerValue | Uint8Array | null /* ptr */,
  id: WS_POLICY_PROPERTY_ID /* Windows.Win32.Networking.WindowsWebServices.WS_POLICY_PROPERTY_ID */,
  value: Deno.PointerValue | Uint8Array | null /* ptr */,
  valueSize: number /* u32 */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetPolicyProperty(util.toPointer(policy), id, util.toPointer(value), valueSize, util.toPointer(error)));
}

export function WsGetPolicyAlternativeCount(
  policy: Deno.PointerValue | Uint8Array | null /* ptr */,
  count: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsGetPolicyAlternativeCount(util.toPointer(policy), util.toPointer(count), util.toPointer(error)));
}

export function WsCreateServiceProxyFromTemplate(
  channelType: WS_CHANNEL_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_TYPE */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  templateType: WS_BINDING_TEMPLATE_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_BINDING_TEMPLATE_TYPE */,
  templateValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  templateSize: number /* u32 */,
  templateDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  templateDescriptionSize: number /* u32 */,
  serviceProxy: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateServiceProxyFromTemplate(channelType, util.toPointer(properties), propertyCount, templateType, util.toPointer(templateValue), templateSize, util.toPointer(templateDescription), templateDescriptionSize, util.toPointer(serviceProxy), util.toPointer(error)));
}

export function WsCreateServiceEndpointFromTemplate(
  channelType: WS_CHANNEL_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_CHANNEL_TYPE */,
  properties: Deno.PointerValue | Uint8Array | null /* ptr */,
  propertyCount: number /* u32 */,
  addressUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
  contract: Deno.PointerValue | Uint8Array | null /* ptr */,
  authorizationCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WindowsWebServices.WS_SERVICE_SECURITY_CALLBACK */,
  heap: Deno.PointerValue | Uint8Array | null /* ptr */,
  templateType: WS_BINDING_TEMPLATE_TYPE /* Windows.Win32.Networking.WindowsWebServices.WS_BINDING_TEMPLATE_TYPE */,
  templateValue: Deno.PointerValue | Uint8Array | null /* ptr */,
  templateSize: number /* u32 */,
  templateDescription: Deno.PointerValue | Uint8Array | null /* ptr */,
  templateDescriptionSize: number /* u32 */,
  serviceEndpoint: Deno.PointerValue | Uint8Array | null /* ptr */,
  error: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebservices_dll.WsCreateServiceEndpointFromTemplate(channelType, util.toPointer(properties), propertyCount, util.toPointer(addressUrl), util.toPointer(contract), util.toPointer(authorizationCallback), util.toPointer(heap), templateType, util.toPointer(templateValue), templateSize, util.toPointer(templateDescription), templateDescriptionSize, util.toPointer(serviceEndpoint), util.toPointer(error)));
}

export function WebAuthNGetApiVersionNumber(): number /* u32 */ {
  return libwebauthn_dll.WebAuthNGetApiVersionNumber();
}

export function WebAuthNIsUserVerifyingPlatformAuthenticatorAvailable(
  pbIsUserVerifyingPlatformAuthenticatorAvailable: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebauthn_dll.WebAuthNIsUserVerifyingPlatformAuthenticatorAvailable(util.toPointer(pbIsUserVerifyingPlatformAuthenticatorAvailable)));
}

export function WebAuthNAuthenticatorMakeCredential(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pRpInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  pUserInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPubKeyCredParams: Deno.PointerValue | Uint8Array | null /* ptr */,
  pWebAuthNClientData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pWebAuthNMakeCredentialOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppWebAuthNCredentialAttestation: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebauthn_dll.WebAuthNAuthenticatorMakeCredential(util.hwndToFfi(hWnd), util.toPointer(pRpInformation), util.toPointer(pUserInformation), util.toPointer(pPubKeyCredParams), util.toPointer(pWebAuthNClientData), util.toPointer(pWebAuthNMakeCredentialOptions), util.toPointer(ppWebAuthNCredentialAttestation)));
}

export function WebAuthNAuthenticatorGetAssertion(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pwszRpId: string | null /* Windows.Win32.Foundation.PWSTR */,
  pWebAuthNClientData: Deno.PointerValue | Uint8Array | null /* ptr */,
  pWebAuthNGetAssertionOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppWebAuthNAssertion: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebauthn_dll.WebAuthNAuthenticatorGetAssertion(util.hwndToFfi(hWnd), util.pwstrToFfi(pwszRpId), util.toPointer(pWebAuthNClientData), util.toPointer(pWebAuthNGetAssertionOptions), util.toPointer(ppWebAuthNAssertion)));
}

export function WebAuthNFreeCredentialAttestation(
  pWebAuthNCredentialAttestation: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwebauthn_dll.WebAuthNFreeCredentialAttestation(util.toPointer(pWebAuthNCredentialAttestation));
}

export function WebAuthNFreeAssertion(
  pWebAuthNAssertion: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libwebauthn_dll.WebAuthNFreeAssertion(util.toPointer(pWebAuthNAssertion));
}

export function WebAuthNGetCancellationId(
  pCancellationId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebauthn_dll.WebAuthNGetCancellationId(util.toPointer(pCancellationId)));
}

export function WebAuthNCancelCurrentOperation(
  pCancellationId: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebauthn_dll.WebAuthNCancelCurrentOperation(util.toPointer(pCancellationId)));
}

export function WebAuthNGetErrorName(
  hr: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libwebauthn_dll.WebAuthNGetErrorName(util.toPointer(hr)));
}

export function WebAuthNGetW3CExceptionDOMError(
  hr: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libwebauthn_dll.WebAuthNGetW3CExceptionDOMError(util.toPointer(hr)));
}

