/// Auto-generated by Deno Win32: Windows.Win32.Networking.WinHttp.Apis

import * as util from "../../util.ts";

// Enums
export type INTERNET_PORT = number;
export type WINHTTP_OPEN_REQUEST_FLAGS = number;
export type WIN_HTTP_CREATE_URL_FLAGS = number;
export type WINHTTP_ACCESS_TYPE = number;
export type WINHTTP_CREDS_AUTHSCHEME = number;
export type WINHTTP_INTERNET_SCHEME = number;
export type WINHTTP_SECURE_DNS_SETTING = number;
export type WINHTTP_REQUEST_TIME_ENTRY = number;
export type WINHTTP_REQUEST_STAT_ENTRY = number;
export type WINHTTP_WEB_SOCKET_OPERATION = number;
export type WINHTTP_WEB_SOCKET_BUFFER_TYPE = number;
export type WINHTTP_WEB_SOCKET_CLOSE_STATUS = number;

// Constants
export const INTERNET_DEFAULT_HTTP_PORT = 80;
export const INTERNET_DEFAULT_HTTPS_PORT = 443;
export const INTERNET_DEFAULT_PORT = 0;
export const WINHTTP_FLAG_BYPASS_PROXY_CACHE = 256;
export const WINHTTP_FLAG_ESCAPE_DISABLE = 64;
export const WINHTTP_FLAG_ESCAPE_DISABLE_QUERY = 128;
export const WINHTTP_FLAG_ESCAPE_PERCENT = 4;
export const WINHTTP_FLAG_NULL_CODEPAGE = 8;
export const WINHTTP_FLAG_REFRESH = 256;
export const WINHTTP_FLAG_SECURE = 8388608;
export const ICU_ESCAPE = 2147483648;
export const ICU_REJECT_USERPWD = 16384;
export const ICU_DECODE = 268435456;
export const WINHTTP_ACCESS_TYPE_NO_PROXY = 1;
export const WINHTTP_ACCESS_TYPE_DEFAULT_PROXY = 0;
export const WINHTTP_ACCESS_TYPE_NAMED_PROXY = 3;
export const WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY = 4;
export const WINHTTP_AUTH_SCHEME_BASIC = 1;
export const WINHTTP_AUTH_SCHEME_NTLM = 2;
export const WINHTTP_AUTH_SCHEME_NEGOTIATE = 16;
export const WINHTTP_INTERNET_SCHEME_HTTP = 1;
export const WINHTTP_INTERNET_SCHEME_HTTPS = 2;
export const WINHTTP_INTERNET_SCHEME_FTP = 3;
export const WINHTTP_INTERNET_SCHEME_SOCKS = 4;
export const WINHTTP_FLAG_ASYNC = 268435456;
export const WINHTTP_FLAG_SECURE_DEFAULTS = 805306368;
export const SECURITY_FLAG_IGNORE_UNKNOWN_CA = 256;
export const SECURITY_FLAG_IGNORE_CERT_DATE_INVALID = 8192;
export const SECURITY_FLAG_IGNORE_CERT_CN_INVALID = 4096;
export const SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE = 512;
export const WINHTTP_AUTOPROXY_AUTO_DETECT = 1;
export const WINHTTP_AUTOPROXY_CONFIG_URL = 2;
export const WINHTTP_AUTOPROXY_HOST_KEEPCASE = 4;
export const WINHTTP_AUTOPROXY_HOST_LOWERCASE = 8;
export const WINHTTP_AUTOPROXY_ALLOW_AUTOCONFIG = 256;
export const WINHTTP_AUTOPROXY_ALLOW_STATIC = 512;
export const WINHTTP_AUTOPROXY_ALLOW_CM = 1024;
export const WINHTTP_AUTOPROXY_RUN_INPROCESS = 65536;
export const WINHTTP_AUTOPROXY_RUN_OUTPROCESS_ONLY = 131072;
export const WINHTTP_AUTOPROXY_NO_DIRECTACCESS = 262144;
export const WINHTTP_AUTOPROXY_NO_CACHE_CLIENT = 524288;
export const WINHTTP_AUTOPROXY_NO_CACHE_SVC = 1048576;
export const WINHTTP_AUTOPROXY_SORT_RESULTS = 4194304;
export const WINHTTP_AUTO_DETECT_TYPE_DHCP = 1;
export const WINHTTP_AUTO_DETECT_TYPE_DNS_A = 2;
export const NETWORKING_KEY_BUFSIZE = 128;
export const WINHTTP_PROXY_TYPE_DIRECT = 1;
export const WINHTTP_PROXY_TYPE_PROXY = 2;
export const WINHTTP_PROXY_TYPE_AUTO_PROXY_URL = 4;
export const WINHTTP_PROXY_TYPE_AUTO_DETECT = 8;
export const WINHTTP_REQUEST_STAT_FLAG_TCP_FAST_OPEN = 1;
export const WINHTTP_REQUEST_STAT_FLAG_TLS_SESSION_RESUMPTION = 2;
export const WINHTTP_REQUEST_STAT_FLAG_TLS_FALSE_START = 4;
export const WINHTTP_REQUEST_STAT_FLAG_PROXY_TLS_SESSION_RESUMPTION = 8;
export const WINHTTP_REQUEST_STAT_FLAG_PROXY_TLS_FALSE_START = 16;
export const WINHTTP_REQUEST_STAT_FLAG_FIRST_REQUEST = 32;
export const WINHTTP_MATCH_CONNECTION_GUID_FLAG_REQUIRE_MARKED_CONNECTION = 1;
export const WINHTTP_MATCH_CONNECTION_GUID_FLAGS_MASK = 1;
export const WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_SOFT_LIMIT = 1;
export const WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_BYPASS_CACHE = 2;
export const WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_USE_DNS_TTL = 4;
export const WINHTTP_RESOLVER_CACHE_CONFIG_FLAG_CONN_USE_TTL = 8;
export const WINHTTP_TIME_FORMAT_BUFSIZE = 62;
export const WINHTTP_OPTION_CALLBACK = 1;
export const WINHTTP_OPTION_RESOLVE_TIMEOUT = 2;
export const WINHTTP_OPTION_CONNECT_TIMEOUT = 3;
export const WINHTTP_OPTION_CONNECT_RETRIES = 4;
export const WINHTTP_OPTION_SEND_TIMEOUT = 5;
export const WINHTTP_OPTION_RECEIVE_TIMEOUT = 6;
export const WINHTTP_OPTION_RECEIVE_RESPONSE_TIMEOUT = 7;
export const WINHTTP_OPTION_HANDLE_TYPE = 9;
export const WINHTTP_OPTION_READ_BUFFER_SIZE = 12;
export const WINHTTP_OPTION_WRITE_BUFFER_SIZE = 13;
export const WINHTTP_OPTION_PARENT_HANDLE = 21;
export const WINHTTP_OPTION_EXTENDED_ERROR = 24;
export const WINHTTP_OPTION_SECURITY_FLAGS = 31;
export const WINHTTP_OPTION_SECURITY_CERTIFICATE_STRUCT = 32;
export const WINHTTP_OPTION_URL = 34;
export const WINHTTP_OPTION_SECURITY_KEY_BITNESS = 36;
export const WINHTTP_OPTION_PROXY = 38;
export const WINHTTP_OPTION_PROXY_RESULT_ENTRY = 39;
export const WINHTTP_OPTION_USER_AGENT = 41;
export const WINHTTP_OPTION_CONTEXT_VALUE = 45;
export const WINHTTP_OPTION_CLIENT_CERT_CONTEXT = 47;
export const WINHTTP_OPTION_REQUEST_PRIORITY = 58;
export const WINHTTP_OPTION_HTTP_VERSION = 59;
export const WINHTTP_OPTION_DISABLE_FEATURE = 63;
export const WINHTTP_OPTION_CODEPAGE = 68;
export const WINHTTP_OPTION_MAX_CONNS_PER_SERVER = 73;
export const WINHTTP_OPTION_MAX_CONNS_PER_1_0_SERVER = 74;
export const WINHTTP_OPTION_AUTOLOGON_POLICY = 77;
export const WINHTTP_OPTION_SERVER_CERT_CONTEXT = 78;
export const WINHTTP_OPTION_ENABLE_FEATURE = 79;
export const WINHTTP_OPTION_WORKER_THREAD_COUNT = 80;
export const WINHTTP_OPTION_PASSPORT_COBRANDING_TEXT = 81;
export const WINHTTP_OPTION_PASSPORT_COBRANDING_URL = 82;
export const WINHTTP_OPTION_CONFIGURE_PASSPORT_AUTH = 83;
export const WINHTTP_OPTION_SECURE_PROTOCOLS = 84;
export const WINHTTP_OPTION_ENABLETRACING = 85;
export const WINHTTP_OPTION_PASSPORT_SIGN_OUT = 86;
export const WINHTTP_OPTION_PASSPORT_RETURN_URL = 87;
export const WINHTTP_OPTION_REDIRECT_POLICY = 88;
export const WINHTTP_OPTION_MAX_HTTP_AUTOMATIC_REDIRECTS = 89;
export const WINHTTP_OPTION_MAX_HTTP_STATUS_CONTINUE = 90;
export const WINHTTP_OPTION_MAX_RESPONSE_HEADER_SIZE = 91;
export const WINHTTP_OPTION_MAX_RESPONSE_DRAIN_SIZE = 92;
export const WINHTTP_OPTION_CONNECTION_INFO = 93;
export const WINHTTP_OPTION_CLIENT_CERT_ISSUER_LIST = 94;
export const WINHTTP_OPTION_SPN = 96;
export const WINHTTP_OPTION_GLOBAL_PROXY_CREDS = 97;
export const WINHTTP_OPTION_GLOBAL_SERVER_CREDS = 98;
export const WINHTTP_OPTION_UNLOAD_NOTIFY_EVENT = 99;
export const WINHTTP_OPTION_REJECT_USERPWD_IN_URL = 100;
export const WINHTTP_OPTION_USE_GLOBAL_SERVER_CREDENTIALS = 101;
export const WINHTTP_OPTION_RECEIVE_PROXY_CONNECT_RESPONSE = 103;
export const WINHTTP_OPTION_IS_PROXY_CONNECT_RESPONSE = 104;
export const WINHTTP_OPTION_SERVER_SPN_USED = 106;
export const WINHTTP_OPTION_PROXY_SPN_USED = 107;
export const WINHTTP_OPTION_SERVER_CBT = 108;
export const WINHTTP_OPTION_UNSAFE_HEADER_PARSING = 110;
export const WINHTTP_OPTION_ASSURED_NON_BLOCKING_CALLBACKS = 111;
export const WINHTTP_OPTION_UPGRADE_TO_WEB_SOCKET = 114;
export const WINHTTP_OPTION_WEB_SOCKET_CLOSE_TIMEOUT = 115;
export const WINHTTP_OPTION_WEB_SOCKET_KEEPALIVE_INTERVAL = 116;
export const WINHTTP_OPTION_DECOMPRESSION = 118;
export const WINHTTP_OPTION_WEB_SOCKET_RECEIVE_BUFFER_SIZE = 122;
export const WINHTTP_OPTION_WEB_SOCKET_SEND_BUFFER_SIZE = 123;
export const WINHTTP_OPTION_TCP_PRIORITY_HINT = 128;
export const WINHTTP_OPTION_CONNECTION_FILTER = 131;
export const WINHTTP_OPTION_ENABLE_HTTP_PROTOCOL = 133;
export const WINHTTP_OPTION_HTTP_PROTOCOL_USED = 134;
export const WINHTTP_OPTION_KDC_PROXY_SETTINGS = 136;
export const WINHTTP_OPTION_PROXY_DISABLE_SERVICE_CALLS = 137;
export const WINHTTP_OPTION_ENCODE_EXTRA = 138;
export const WINHTTP_OPTION_DISABLE_STREAM_QUEUE = 139;
export const WINHTTP_OPTION_IPV6_FAST_FALLBACK = 140;
export const WINHTTP_OPTION_CONNECTION_STATS_V0 = 141;
export const WINHTTP_OPTION_REQUEST_TIMES = 142;
export const WINHTTP_OPTION_EXPIRE_CONNECTION = 143;
export const WINHTTP_OPTION_DISABLE_SECURE_PROTOCOL_FALLBACK = 144;
export const WINHTTP_OPTION_HTTP_PROTOCOL_REQUIRED = 145;
export const WINHTTP_OPTION_REQUEST_STATS = 146;
export const WINHTTP_OPTION_SERVER_CERT_CHAIN_CONTEXT = 147;
export const WINHTTP_OPTION_CONNECTION_STATS_V1 = 150;
export const WINHTTP_OPTION_SECURITY_INFO = 151;
export const WINHTTP_OPTION_TCP_KEEPALIVE = 152;
export const WINHTTP_OPTION_TCP_FAST_OPEN = 153;
export const WINHTTP_OPTION_TLS_FALSE_START = 154;
export const WINHTTP_OPTION_IGNORE_CERT_REVOCATION_OFFLINE = 155;
export const WINHTTP_OPTION_SOURCE_ADDRESS = 156;
export const WINHTTP_OPTION_HEAP_EXTENSION = 157;
export const WINHTTP_OPTION_TLS_PROTOCOL_INSECURE_FALLBACK = 158;
export const WINHTTP_OPTION_STREAM_ERROR_CODE = 159;
export const WINHTTP_OPTION_REQUIRE_STREAM_END = 160;
export const WINHTTP_OPTION_ENABLE_HTTP2_PLUS_CLIENT_CERT = 161;
export const WINHTTP_OPTION_FAILED_CONNECTION_RETRIES = 162;
export const WINHTTP_OPTION_SET_GLOBAL_CALLBACK = 163;
export const WINHTTP_OPTION_HTTP2_KEEPALIVE = 164;
export const WINHTTP_OPTION_RESOLUTION_HOSTNAME = 165;
export const WINHTTP_OPTION_SET_TOKEN_BINDING = 166;
export const WINHTTP_OPTION_TOKEN_BINDING_PUBLIC_KEY = 167;
export const WINHTTP_OPTION_REFERER_TOKEN_BINDING_HOSTNAME = 168;
export const WINHTTP_OPTION_HTTP2_PLUS_TRANSFER_ENCODING = 169;
export const WINHTTP_OPTION_RESOLVER_CACHE_CONFIG = 170;
export const WINHTTP_OPTION_DISABLE_CERT_CHAIN_BUILDING = 171;
export const WINHTTP_OPTION_BACKGROUND_CONNECTIONS = 172;
export const WINHTTP_OPTION_FIRST_AVAILABLE_CONNECTION = 173;
export const WINHTTP_OPTION_ENABLE_TEST_SIGNING = 174;
export const WINHTTP_OPTION_NTSERVICE_FLAG_TEST = 175;
export const WINHTTP_OPTION_DISABLE_PROXY_LINK_LOCAL_NAME_RESOLUTION = 176;
export const WINHTTP_OPTION_TCP_PRIORITY_STATUS = 177;
export const WINHTTP_OPTION_CONNECTION_GUID = 178;
export const WINHTTP_OPTION_MATCH_CONNECTION_GUID = 179;
export const WINHTTP_OPTION_PROXY_CONFIG_INFO = 180;
export const WINHTTP_OPTION_AGGREGATE_PROXY_CONFIG = 181;
export const WINHTTP_OPTION_SELECTED_PROXY_CONFIG_INFO = 182;
export const WINHTTP_OPTION_HTTP2_RECEIVE_WINDOW = 183;
export const WINHTTP_LAST_OPTION = 183;
export const WINHTTP_OPTION_USERNAME = 4096;
export const WINHTTP_OPTION_PASSWORD = 4097;
export const WINHTTP_OPTION_PROXY_USERNAME = 4098;
export const WINHTTP_OPTION_PROXY_PASSWORD = 4099;
export const WINHTTP_CONNS_PER_SERVER_UNLIMITED = 4294967295;
export const WINHTTP_CONNECTION_RETRY_CONDITION_408 = 1;
export const WINHTTP_CONNECTION_RETRY_CONDITION_SSL_HANDSHAKE = 2;
export const WINHTTP_CONNECTION_RETRY_CONDITION_STALE_CONNECTION = 4;
export const WINHTTP_DECOMPRESSION_FLAG_GZIP = 1;
export const WINHTTP_DECOMPRESSION_FLAG_DEFLATE = 2;
export const WINHTTP_PROTOCOL_FLAG_HTTP2 = 1;
export const WINHTTP_PROTOCOL_FLAG_HTTP3 = 2;
export const WINHTTP_AUTOLOGON_SECURITY_LEVEL_MEDIUM = 0;
export const WINHTTP_AUTOLOGON_SECURITY_LEVEL_LOW = 1;
export const WINHTTP_AUTOLOGON_SECURITY_LEVEL_HIGH = 2;
export const WINHTTP_AUTOLOGON_SECURITY_LEVEL_DEFAULT = 0;
export const WINHTTP_OPTION_REDIRECT_POLICY_NEVER = 0;
export const WINHTTP_OPTION_REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP = 1;
export const WINHTTP_OPTION_REDIRECT_POLICY_ALWAYS = 2;
export const WINHTTP_OPTION_REDIRECT_POLICY_LAST = 2;
export const WINHTTP_OPTION_REDIRECT_POLICY_DEFAULT = 1;
export const WINHTTP_DISABLE_PASSPORT_AUTH = 0;
export const WINHTTP_ENABLE_PASSPORT_AUTH = 268435456;
export const WINHTTP_DISABLE_PASSPORT_KEYRING = 536870912;
export const WINHTTP_ENABLE_PASSPORT_KEYRING = 1073741824;
export const WINHTTP_DISABLE_COOKIES = 1;
export const WINHTTP_DISABLE_REDIRECTS = 2;
export const WINHTTP_DISABLE_AUTHENTICATION = 4;
export const WINHTTP_DISABLE_KEEP_ALIVE = 8;
export const WINHTTP_ENABLE_SSL_REVOCATION = 1;
export const WINHTTP_ENABLE_SSL_REVERT_IMPERSONATION = 2;
export const WINHTTP_DISABLE_SPN_SERVER_PORT = 0;
export const WINHTTP_ENABLE_SPN_SERVER_PORT = 1;
export const WINHTTP_OPTION_SPN_MASK = 1;
export const WINHTTP_HANDLE_TYPE_SESSION = 1;
export const WINHTTP_HANDLE_TYPE_CONNECT = 2;
export const WINHTTP_HANDLE_TYPE_REQUEST = 3;
export const WINHTTP_AUTH_SCHEME_PASSPORT = 4;
export const WINHTTP_AUTH_SCHEME_DIGEST = 8;
export const WINHTTP_AUTH_TARGET_SERVER = 0;
export const WINHTTP_AUTH_TARGET_PROXY = 1;
export const SECURITY_FLAG_SECURE = 1;
export const SECURITY_FLAG_STRENGTH_WEAK = 268435456;
export const SECURITY_FLAG_STRENGTH_MEDIUM = 1073741824;
export const SECURITY_FLAG_STRENGTH_STRONG = 536870912;
export const WINHTTP_CALLBACK_STATUS_FLAG_CERT_REV_FAILED = 1;
export const WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CERT = 2;
export const WINHTTP_CALLBACK_STATUS_FLAG_CERT_REVOKED = 4;
export const WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CA = 8;
export const WINHTTP_CALLBACK_STATUS_FLAG_CERT_CN_INVALID = 16;
export const WINHTTP_CALLBACK_STATUS_FLAG_CERT_DATE_INVALID = 32;
export const WINHTTP_CALLBACK_STATUS_FLAG_CERT_WRONG_USAGE = 64;
export const WINHTTP_CALLBACK_STATUS_FLAG_SECURITY_CHANNEL_ERROR = 2147483648;
export const WINHTTP_FLAG_SECURE_PROTOCOL_SSL2 = 8;
export const WINHTTP_FLAG_SECURE_PROTOCOL_SSL3 = 32;
export const WINHTTP_FLAG_SECURE_PROTOCOL_TLS1 = 128;
export const WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1 = 512;
export const WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2 = 2048;
export const WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_3 = 8192;
export const WINHTTP_CALLBACK_STATUS_RESOLVING_NAME = 1;
export const WINHTTP_CALLBACK_STATUS_NAME_RESOLVED = 2;
export const WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER = 4;
export const WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER = 8;
export const WINHTTP_CALLBACK_STATUS_SENDING_REQUEST = 16;
export const WINHTTP_CALLBACK_STATUS_REQUEST_SENT = 32;
export const WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE = 64;
export const WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED = 128;
export const WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION = 256;
export const WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED = 512;
export const WINHTTP_CALLBACK_STATUS_HANDLE_CREATED = 1024;
export const WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING = 2048;
export const WINHTTP_CALLBACK_STATUS_DETECTING_PROXY = 4096;
export const WINHTTP_CALLBACK_STATUS_REDIRECT = 16384;
export const WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE = 32768;
export const WINHTTP_CALLBACK_STATUS_SECURE_FAILURE = 65536;
export const WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE = 131072;
export const WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE = 262144;
export const WINHTTP_CALLBACK_STATUS_READ_COMPLETE = 524288;
export const WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE = 1048576;
export const WINHTTP_CALLBACK_STATUS_REQUEST_ERROR = 2097152;
export const WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE = 4194304;
export const WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE = 16777216;
export const WINHTTP_CALLBACK_STATUS_CLOSE_COMPLETE = 33554432;
export const WINHTTP_CALLBACK_STATUS_SHUTDOWN_COMPLETE = 67108864;
export const WINHTTP_CALLBACK_STATUS_SETTINGS_WRITE_COMPLETE = 268435456;
export const WINHTTP_CALLBACK_STATUS_SETTINGS_READ_COMPLETE = 536870912;
export const API_RECEIVE_RESPONSE = 1;
export const API_QUERY_DATA_AVAILABLE = 2;
export const API_READ_DATA = 3;
export const API_WRITE_DATA = 4;
export const API_SEND_REQUEST = 5;
export const API_GET_PROXY_FOR_URL = 6;
export const WINHTTP_CALLBACK_FLAG_DETECTING_PROXY = 4096;
export const WINHTTP_CALLBACK_FLAG_REDIRECT = 16384;
export const WINHTTP_CALLBACK_FLAG_INTERMEDIATE_RESPONSE = 32768;
export const WINHTTP_CALLBACK_FLAG_SECURE_FAILURE = 65536;
export const WINHTTP_CALLBACK_FLAG_SENDREQUEST_COMPLETE = 4194304;
export const WINHTTP_CALLBACK_FLAG_HEADERS_AVAILABLE = 131072;
export const WINHTTP_CALLBACK_FLAG_DATA_AVAILABLE = 262144;
export const WINHTTP_CALLBACK_FLAG_READ_COMPLETE = 524288;
export const WINHTTP_CALLBACK_FLAG_WRITE_COMPLETE = 1048576;
export const WINHTTP_CALLBACK_FLAG_REQUEST_ERROR = 2097152;
export const WINHTTP_CALLBACK_FLAG_GETPROXYFORURL_COMPLETE = 16777216;
export const WINHTTP_CALLBACK_FLAG_ALL_NOTIFICATIONS = 4294967295;
export const WINHTTP_QUERY_MIME_VERSION = 0;
export const WINHTTP_QUERY_CONTENT_TYPE = 1;
export const WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING = 2;
export const WINHTTP_QUERY_CONTENT_ID = 3;
export const WINHTTP_QUERY_CONTENT_DESCRIPTION = 4;
export const WINHTTP_QUERY_CONTENT_LENGTH = 5;
export const WINHTTP_QUERY_CONTENT_LANGUAGE = 6;
export const WINHTTP_QUERY_ALLOW = 7;
export const WINHTTP_QUERY_PUBLIC = 8;
export const WINHTTP_QUERY_DATE = 9;
export const WINHTTP_QUERY_EXPIRES = 10;
export const WINHTTP_QUERY_LAST_MODIFIED = 11;
export const WINHTTP_QUERY_MESSAGE_ID = 12;
export const WINHTTP_QUERY_URI = 13;
export const WINHTTP_QUERY_DERIVED_FROM = 14;
export const WINHTTP_QUERY_COST = 15;
export const WINHTTP_QUERY_LINK = 16;
export const WINHTTP_QUERY_PRAGMA = 17;
export const WINHTTP_QUERY_VERSION = 18;
export const WINHTTP_QUERY_STATUS_CODE = 19;
export const WINHTTP_QUERY_STATUS_TEXT = 20;
export const WINHTTP_QUERY_RAW_HEADERS = 21;
export const WINHTTP_QUERY_RAW_HEADERS_CRLF = 22;
export const WINHTTP_QUERY_CONNECTION = 23;
export const WINHTTP_QUERY_ACCEPT = 24;
export const WINHTTP_QUERY_ACCEPT_CHARSET = 25;
export const WINHTTP_QUERY_ACCEPT_ENCODING = 26;
export const WINHTTP_QUERY_ACCEPT_LANGUAGE = 27;
export const WINHTTP_QUERY_AUTHORIZATION = 28;
export const WINHTTP_QUERY_CONTENT_ENCODING = 29;
export const WINHTTP_QUERY_FORWARDED = 30;
export const WINHTTP_QUERY_FROM = 31;
export const WINHTTP_QUERY_IF_MODIFIED_SINCE = 32;
export const WINHTTP_QUERY_LOCATION = 33;
export const WINHTTP_QUERY_ORIG_URI = 34;
export const WINHTTP_QUERY_REFERER = 35;
export const WINHTTP_QUERY_RETRY_AFTER = 36;
export const WINHTTP_QUERY_SERVER = 37;
export const WINHTTP_QUERY_TITLE = 38;
export const WINHTTP_QUERY_USER_AGENT = 39;
export const WINHTTP_QUERY_WWW_AUTHENTICATE = 40;
export const WINHTTP_QUERY_PROXY_AUTHENTICATE = 41;
export const WINHTTP_QUERY_ACCEPT_RANGES = 42;
export const WINHTTP_QUERY_SET_COOKIE = 43;
export const WINHTTP_QUERY_COOKIE = 44;
export const WINHTTP_QUERY_REQUEST_METHOD = 45;
export const WINHTTP_QUERY_REFRESH = 46;
export const WINHTTP_QUERY_CONTENT_DISPOSITION = 47;
export const WINHTTP_QUERY_AGE = 48;
export const WINHTTP_QUERY_CACHE_CONTROL = 49;
export const WINHTTP_QUERY_CONTENT_BASE = 50;
export const WINHTTP_QUERY_CONTENT_LOCATION = 51;
export const WINHTTP_QUERY_CONTENT_MD5 = 52;
export const WINHTTP_QUERY_CONTENT_RANGE = 53;
export const WINHTTP_QUERY_ETAG = 54;
export const WINHTTP_QUERY_HOST = 55;
export const WINHTTP_QUERY_IF_MATCH = 56;
export const WINHTTP_QUERY_IF_NONE_MATCH = 57;
export const WINHTTP_QUERY_IF_RANGE = 58;
export const WINHTTP_QUERY_IF_UNMODIFIED_SINCE = 59;
export const WINHTTP_QUERY_MAX_FORWARDS = 60;
export const WINHTTP_QUERY_PROXY_AUTHORIZATION = 61;
export const WINHTTP_QUERY_RANGE = 62;
export const WINHTTP_QUERY_TRANSFER_ENCODING = 63;
export const WINHTTP_QUERY_UPGRADE = 64;
export const WINHTTP_QUERY_VARY = 65;
export const WINHTTP_QUERY_VIA = 66;
export const WINHTTP_QUERY_WARNING = 67;
export const WINHTTP_QUERY_EXPECT = 68;
export const WINHTTP_QUERY_PROXY_CONNECTION = 69;
export const WINHTTP_QUERY_UNLESS_MODIFIED_SINCE = 70;
export const WINHTTP_QUERY_PROXY_SUPPORT = 75;
export const WINHTTP_QUERY_AUTHENTICATION_INFO = 76;
export const WINHTTP_QUERY_PASSPORT_URLS = 77;
export const WINHTTP_QUERY_PASSPORT_CONFIG = 78;
export const WINHTTP_QUERY_MAX = 78;
export const WINHTTP_QUERY_EX_ALL_HEADERS = 21;
export const WINHTTP_QUERY_CUSTOM = 65535;
export const WINHTTP_QUERY_FLAG_REQUEST_HEADERS = 2147483648;
export const WINHTTP_QUERY_FLAG_SYSTEMTIME = 1073741824;
export const WINHTTP_QUERY_FLAG_NUMBER = 536870912;
export const WINHTTP_QUERY_FLAG_NUMBER64 = 134217728;
export const WINHTTP_QUERY_FLAG_TRAILERS = 33554432;
export const WINHTTP_QUERY_FLAG_WIRE_ENCODING = 16777216;
export const HTTP_STATUS_CONTINUE = 100;
export const HTTP_STATUS_SWITCH_PROTOCOLS = 101;
export const HTTP_STATUS_OK = 200;
export const HTTP_STATUS_CREATED = 201;
export const HTTP_STATUS_ACCEPTED = 202;
export const HTTP_STATUS_PARTIAL = 203;
export const HTTP_STATUS_NO_CONTENT = 204;
export const HTTP_STATUS_RESET_CONTENT = 205;
export const HTTP_STATUS_PARTIAL_CONTENT = 206;
export const HTTP_STATUS_WEBDAV_MULTI_STATUS = 207;
export const HTTP_STATUS_AMBIGUOUS = 300;
export const HTTP_STATUS_MOVED = 301;
export const HTTP_STATUS_REDIRECT = 302;
export const HTTP_STATUS_REDIRECT_METHOD = 303;
export const HTTP_STATUS_NOT_MODIFIED = 304;
export const HTTP_STATUS_USE_PROXY = 305;
export const HTTP_STATUS_REDIRECT_KEEP_VERB = 307;
export const HTTP_STATUS_PERMANENT_REDIRECT = 308;
export const HTTP_STATUS_BAD_REQUEST = 400;
export const HTTP_STATUS_DENIED = 401;
export const HTTP_STATUS_PAYMENT_REQ = 402;
export const HTTP_STATUS_FORBIDDEN = 403;
export const HTTP_STATUS_NOT_FOUND = 404;
export const HTTP_STATUS_BAD_METHOD = 405;
export const HTTP_STATUS_NONE_ACCEPTABLE = 406;
export const HTTP_STATUS_PROXY_AUTH_REQ = 407;
export const HTTP_STATUS_REQUEST_TIMEOUT = 408;
export const HTTP_STATUS_CONFLICT = 409;
export const HTTP_STATUS_GONE = 410;
export const HTTP_STATUS_LENGTH_REQUIRED = 411;
export const HTTP_STATUS_PRECOND_FAILED = 412;
export const HTTP_STATUS_REQUEST_TOO_LARGE = 413;
export const HTTP_STATUS_URI_TOO_LONG = 414;
export const HTTP_STATUS_UNSUPPORTED_MEDIA = 415;
export const HTTP_STATUS_RETRY_WITH = 449;
export const HTTP_STATUS_SERVER_ERROR = 500;
export const HTTP_STATUS_NOT_SUPPORTED = 501;
export const HTTP_STATUS_BAD_GATEWAY = 502;
export const HTTP_STATUS_SERVICE_UNAVAIL = 503;
export const HTTP_STATUS_GATEWAY_TIMEOUT = 504;
export const HTTP_STATUS_VERSION_NOT_SUP = 505;
export const HTTP_STATUS_FIRST = 100;
export const HTTP_STATUS_LAST = 505;
export const ICU_NO_ENCODE = 536870912;
export const ICU_NO_META = 134217728;
export const ICU_ENCODE_SPACES_ONLY = 67108864;
export const ICU_BROWSER_MODE = 33554432;
export const ICU_ENCODE_PERCENT = 4096;
export const ICU_ESCAPE_AUTHORITY = 8192;
export const WINHTTP_ADDREQ_INDEX_MASK = 65535;
export const WINHTTP_ADDREQ_FLAGS_MASK = 4294901760;
export const WINHTTP_ADDREQ_FLAG_ADD_IF_NEW = 268435456;
export const WINHTTP_ADDREQ_FLAG_ADD = 536870912;
export const WINHTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA = 1073741824;
export const WINHTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON = 16777216;
export const WINHTTP_ADDREQ_FLAG_COALESCE = 1073741824;
export const WINHTTP_ADDREQ_FLAG_REPLACE = 2147483648;
export const WINHTTP_EXTENDED_HEADER_FLAG_UNICODE = 1;
export const WINHTTP_IGNORE_REQUEST_TOTAL_LENGTH = 0;
export const WINHTTP_ERROR_BASE = 12000;
export const ERROR_WINHTTP_OUT_OF_HANDLES = 12001;
export const ERROR_WINHTTP_TIMEOUT = 12002;
export const ERROR_WINHTTP_INTERNAL_ERROR = 12004;
export const ERROR_WINHTTP_INVALID_URL = 12005;
export const ERROR_WINHTTP_UNRECOGNIZED_SCHEME = 12006;
export const ERROR_WINHTTP_NAME_NOT_RESOLVED = 12007;
export const ERROR_WINHTTP_INVALID_OPTION = 12009;
export const ERROR_WINHTTP_OPTION_NOT_SETTABLE = 12011;
export const ERROR_WINHTTP_SHUTDOWN = 12012;
export const ERROR_WINHTTP_LOGIN_FAILURE = 12015;
export const ERROR_WINHTTP_OPERATION_CANCELLED = 12017;
export const ERROR_WINHTTP_INCORRECT_HANDLE_TYPE = 12018;
export const ERROR_WINHTTP_INCORRECT_HANDLE_STATE = 12019;
export const ERROR_WINHTTP_CANNOT_CONNECT = 12029;
export const ERROR_WINHTTP_CONNECTION_ERROR = 12030;
export const ERROR_WINHTTP_RESEND_REQUEST = 12032;
export const ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED = 12044;
export const ERROR_WINHTTP_CANNOT_CALL_BEFORE_OPEN = 12100;
export const ERROR_WINHTTP_CANNOT_CALL_BEFORE_SEND = 12101;
export const ERROR_WINHTTP_CANNOT_CALL_AFTER_SEND = 12102;
export const ERROR_WINHTTP_CANNOT_CALL_AFTER_OPEN = 12103;
export const ERROR_WINHTTP_HEADER_NOT_FOUND = 12150;
export const ERROR_WINHTTP_INVALID_SERVER_RESPONSE = 12152;
export const ERROR_WINHTTP_INVALID_HEADER = 12153;
export const ERROR_WINHTTP_INVALID_QUERY_REQUEST = 12154;
export const ERROR_WINHTTP_HEADER_ALREADY_EXISTS = 12155;
export const ERROR_WINHTTP_REDIRECT_FAILED = 12156;
export const ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR = 12178;
export const ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT = 12166;
export const ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT = 12167;
export const ERROR_WINHTTP_UNHANDLED_SCRIPT_TYPE = 12176;
export const ERROR_WINHTTP_SCRIPT_EXECUTION_ERROR = 12177;
export const ERROR_WINHTTP_NOT_INITIALIZED = 12172;
export const ERROR_WINHTTP_SECURE_FAILURE = 12175;
export const ERROR_WINHTTP_SECURE_CERT_DATE_INVALID = 12037;
export const ERROR_WINHTTP_SECURE_CERT_CN_INVALID = 12038;
export const ERROR_WINHTTP_SECURE_INVALID_CA = 12045;
export const ERROR_WINHTTP_SECURE_CERT_REV_FAILED = 12057;
export const ERROR_WINHTTP_SECURE_CHANNEL_ERROR = 12157;
export const ERROR_WINHTTP_SECURE_INVALID_CERT = 12169;
export const ERROR_WINHTTP_SECURE_CERT_REVOKED = 12170;
export const ERROR_WINHTTP_SECURE_CERT_WRONG_USAGE = 12179;
export const ERROR_WINHTTP_AUTODETECTION_FAILED = 12180;
export const ERROR_WINHTTP_HEADER_COUNT_EXCEEDED = 12181;
export const ERROR_WINHTTP_HEADER_SIZE_OVERFLOW = 12182;
export const ERROR_WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW = 12183;
export const ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW = 12184;
export const ERROR_WINHTTP_CLIENT_CERT_NO_PRIVATE_KEY = 12185;
export const ERROR_WINHTTP_CLIENT_CERT_NO_ACCESS_PRIVATE_KEY = 12186;
export const ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED_PROXY = 12187;
export const ERROR_WINHTTP_SECURE_FAILURE_PROXY = 12188;
export const ERROR_WINHTTP_RESERVED_189 = 12189;
export const ERROR_WINHTTP_HTTP_PROTOCOL_MISMATCH = 12190;
export const ERROR_WINHTTP_GLOBAL_CALLBACK_FAILED = 12191;
export const ERROR_WINHTTP_FEATURE_DISABLED = 12192;
export const WINHTTP_ERROR_LAST = 12192;
export const WINHTTP_RESET_STATE = 1;
export const WINHTTP_RESET_SWPAD_CURRENT_NETWORK = 2;
export const WINHTTP_RESET_SWPAD_ALL = 4;
export const WINHTTP_RESET_SCRIPT_CACHE = 8;
export const WINHTTP_RESET_ALL = 65535;
export const WINHTTP_RESET_NOTIFY_NETWORK_CHANGED = 65536;
export const WINHTTP_RESET_OUT_OF_PROC = 131072;
export const WINHTTP_RESET_DISCARD_RESOLVERS = 262144;
export const WINHTTP_WEB_SOCKET_MAX_CLOSE_REASON_LENGTH = 123;
export const WINHTTP_WEB_SOCKET_MIN_KEEPALIVE_VALUE = 15000;
export const WinHttpSecureDnsSettingDefault = 0;
export const WinHttpSecureDnsSettingForcePlaintext = 1;
export const WinHttpSecureDnsSettingRequireEncryption = 2;
export const WinHttpSecureDnsSettingTryEncryptionWithFallback = 3;
export const WinHttpSecureDnsSettingMax = 4;
export const WinHttpProxyDetectionStart = 0;
export const WinHttpProxyDetectionEnd = 1;
export const WinHttpConnectionAcquireStart = 2;
export const WinHttpConnectionAcquireWaitEnd = 3;
export const WinHttpConnectionAcquireEnd = 4;
export const WinHttpNameResolutionStart = 5;
export const WinHttpNameResolutionEnd = 6;
export const WinHttpConnectionEstablishmentStart = 7;
export const WinHttpConnectionEstablishmentEnd = 8;
export const WinHttpTlsHandshakeClientLeg1Start = 9;
export const WinHttpTlsHandshakeClientLeg1End = 10;
export const WinHttpTlsHandshakeClientLeg2Start = 11;
export const WinHttpTlsHandshakeClientLeg2End = 12;
export const WinHttpTlsHandshakeClientLeg3Start = 13;
export const WinHttpTlsHandshakeClientLeg3End = 14;
export const WinHttpStreamWaitStart = 15;
export const WinHttpStreamWaitEnd = 16;
export const WinHttpSendRequestStart = 17;
export const WinHttpSendRequestHeadersCompressionStart = 18;
export const WinHttpSendRequestHeadersCompressionEnd = 19;
export const WinHttpSendRequestHeadersEnd = 20;
export const WinHttpSendRequestEnd = 21;
export const WinHttpReceiveResponseStart = 22;
export const WinHttpReceiveResponseHeadersDecompressionStart = 23;
export const WinHttpReceiveResponseHeadersDecompressionEnd = 24;
export const WinHttpReceiveResponseHeadersEnd = 25;
export const WinHttpReceiveResponseBodyDecompressionDelta = 26;
export const WinHttpReceiveResponseEnd = 27;
export const WinHttpProxyTunnelStart = 28;
export const WinHttpProxyTunnelEnd = 29;
export const WinHttpProxyTlsHandshakeClientLeg1Start = 30;
export const WinHttpProxyTlsHandshakeClientLeg1End = 31;
export const WinHttpProxyTlsHandshakeClientLeg2Start = 32;
export const WinHttpProxyTlsHandshakeClientLeg2End = 33;
export const WinHttpProxyTlsHandshakeClientLeg3Start = 34;
export const WinHttpProxyTlsHandshakeClientLeg3End = 35;
export const WinHttpRequestTimeLast = 36;
export const WinHttpRequestTimeMax = 64;
export const WinHttpConnectFailureCount = 0;
export const WinHttpProxyFailureCount = 1;
export const WinHttpTlsHandshakeClientLeg1Size = 2;
export const WinHttpTlsHandshakeServerLeg1Size = 3;
export const WinHttpTlsHandshakeClientLeg2Size = 4;
export const WinHttpTlsHandshakeServerLeg2Size = 5;
export const WinHttpRequestHeadersSize = 6;
export const WinHttpRequestHeadersCompressedSize = 7;
export const WinHttpResponseHeadersSize = 8;
export const WinHttpResponseHeadersCompressedSize = 9;
export const WinHttpResponseBodySize = 10;
export const WinHttpResponseBodyCompressedSize = 11;
export const WinHttpProxyTlsHandshakeClientLeg1Size = 12;
export const WinHttpProxyTlsHandshakeServerLeg1Size = 13;
export const WinHttpProxyTlsHandshakeClientLeg2Size = 14;
export const WinHttpProxyTlsHandshakeServerLeg2Size = 15;
export const WinHttpRequestStatLast = 16;
export const WinHttpRequestStatMax = 32;
export const WINHTTP_WEB_SOCKET_SEND_OPERATION = 0;
export const WINHTTP_WEB_SOCKET_RECEIVE_OPERATION = 1;
export const WINHTTP_WEB_SOCKET_CLOSE_OPERATION = 2;
export const WINHTTP_WEB_SOCKET_SHUTDOWN_OPERATION = 3;
export const WINHTTP_WEB_SOCKET_BINARY_MESSAGE_BUFFER_TYPE = 0;
export const WINHTTP_WEB_SOCKET_BINARY_FRAGMENT_BUFFER_TYPE = 1;
export const WINHTTP_WEB_SOCKET_UTF8_MESSAGE_BUFFER_TYPE = 2;
export const WINHTTP_WEB_SOCKET_UTF8_FRAGMENT_BUFFER_TYPE = 3;
export const WINHTTP_WEB_SOCKET_CLOSE_BUFFER_TYPE = 4;
export const WINHTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS = 1000;
export const WINHTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS = 1001;
export const WINHTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS = 1002;
export const WINHTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS = 1003;
export const WINHTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS = 1005;
export const WINHTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS = 1006;
export const WINHTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS = 1007;
export const WINHTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS = 1008;
export const WINHTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS = 1009;
export const WINHTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = 1010;
export const WINHTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS = 1011;
export const WINHTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = 1015;

// Structs

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE (size: 32)
 */
export interface SOCKADDR_STORAGE {
  /** u16 */
  ss_family: number;
  /** array */
  __ss_pad1: Deno.PointerValue;
  /** i64 */
  __ss_align: bigint | number;
  /** array */
  __ss_pad2: Deno.PointerValue;
}

export const sizeofSOCKADDR_STORAGE = 32;

export function allocSOCKADDR_STORAGE(data?: Partial<SOCKADDR_STORAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_STORAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ss_family !== undefined) view.setUint16(0, Number(data.ss_family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.__ss_pad1 !== undefined) view.setBigUint64(8, data.__ss_pad1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.__ss_pad1))), true);
  // 0x10: i64
  if (data?.__ss_align !== undefined) view.setBigInt64(16, BigInt(data.__ss_align), true);
  // 0x18: pointer
  if (data?.__ss_pad2 !== undefined) view.setBigUint64(24, data.__ss_pad2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.__ss_pad2))), true);
  return buf;
}

export class SOCKADDR_STORAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ss_family(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get __ss_pad1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get __ss_align(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: pointer
  get __ss_pad2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set ss_family(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set __ss_pad1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set __ss_align(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set __ss_pad2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_CONNECTION_INFO (size: 24)
 */
export interface WINHTTP_CONNECTION_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  LocalAddress: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  RemoteAddress: Uint8Array | Deno.PointerValue;
}

export const sizeofWINHTTP_CONNECTION_INFO = 24;

export function allocWINHTTP_CONNECTION_INFO(data?: Partial<WINHTTP_CONNECTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_CONNECTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LocalAddress !== undefined) view.setBigUint64(8, data.LocalAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LocalAddress))), true);
  // 0x10: pointer
  if (data?.RemoteAddress !== undefined) view.setBigUint64(16, data.RemoteAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RemoteAddress))), true);
  return buf;
}

export class WINHTTP_CONNECTION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LocalAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get RemoteAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LocalAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set RemoteAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_REQUEST_TIMES (size: 16)
 */
export interface WINHTTP_REQUEST_TIMES {
  /** u32 */
  cTimes: number;
  /** array */
  rgullTimes: Deno.PointerValue;
}

export const sizeofWINHTTP_REQUEST_TIMES = 16;

export function allocWINHTTP_REQUEST_TIMES(data?: Partial<WINHTTP_REQUEST_TIMES>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_REQUEST_TIMES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cTimes !== undefined) view.setUint32(0, Number(data.cTimes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgullTimes !== undefined) view.setBigUint64(8, data.rgullTimes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgullTimes))), true);
  return buf;
}

export class WINHTTP_REQUEST_TIMESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cTimes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rgullTimes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cTimes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rgullTimes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_REQUEST_STATS (size: 24)
 */
export interface WINHTTP_REQUEST_STATS {
  /** u64 */
  ullFlags: bigint | number;
  /** u32 */
  ulIndex: number;
  /** u32 */
  cStats: number;
  /** array */
  rgullStats: Deno.PointerValue;
}

export const sizeofWINHTTP_REQUEST_STATS = 24;

export function allocWINHTTP_REQUEST_STATS(data?: Partial<WINHTTP_REQUEST_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_REQUEST_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ullFlags !== undefined) view.setBigUint64(0, BigInt(data.ullFlags), true);
  // 0x08: u32
  if (data?.ulIndex !== undefined) view.setUint32(8, Number(data.ulIndex), true);
  // 0x0c: u32
  if (data?.cStats !== undefined) view.setUint32(12, Number(data.cStats), true);
  // 0x10: pointer
  if (data?.rgullStats !== undefined) view.setBigUint64(16, data.rgullStats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgullStats))), true);
  return buf;
}

export class WINHTTP_REQUEST_STATSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ullFlags(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get ulIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cStats(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get rgullStats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u64
  set ullFlags(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set ulIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cStats(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set rgullStats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_MATCH_CONNECTION_GUID (size: 16)
 */
export interface WINHTTP_MATCH_CONNECTION_GUID {
  /** System.Guid */
  ConnectionGuid: Uint8Array | Deno.PointerValue;
  /** u64 */
  ullFlags: bigint | number;
}

export const sizeofWINHTTP_MATCH_CONNECTION_GUID = 16;

export function allocWINHTTP_MATCH_CONNECTION_GUID(data?: Partial<WINHTTP_MATCH_CONNECTION_GUID>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_MATCH_CONNECTION_GUID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ConnectionGuid !== undefined) view.setBigUint64(0, data.ConnectionGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ConnectionGuid))), true);
  // 0x08: u64
  if (data?.ullFlags !== undefined) view.setBigUint64(8, BigInt(data.ullFlags), true);
  return buf;
}

export class WINHTTP_MATCH_CONNECTION_GUIDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ConnectionGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u64
  get ullFlags(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: pointer
  set ConnectionGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u64
  set ullFlags(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_RESOLVER_CACHE_CONFIG (size: 32)
 */
export interface WINHTTP_RESOLVER_CACHE_CONFIG {
  /** u32 */
  ulMaxResolverCacheEntries: number;
  /** u32 */
  ulMaxCacheEntryAge: number;
  /** u32 */
  ulMinCacheEntryTtl: number;
  /** Windows.Win32.Networking.WinHttp.WINHTTP_SECURE_DNS_SETTING */
  SecureDnsSetting: WINHTTP_SECURE_DNS_SETTING;
  /** u64 */
  ullConnResolutionWaitTime: bigint | number;
  /** u64 */
  ullFlags: bigint | number;
}

export const sizeofWINHTTP_RESOLVER_CACHE_CONFIG = 32;

export function allocWINHTTP_RESOLVER_CACHE_CONFIG(data?: Partial<WINHTTP_RESOLVER_CACHE_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_RESOLVER_CACHE_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulMaxResolverCacheEntries !== undefined) view.setUint32(0, Number(data.ulMaxResolverCacheEntries), true);
  // 0x04: u32
  if (data?.ulMaxCacheEntryAge !== undefined) view.setUint32(4, Number(data.ulMaxCacheEntryAge), true);
  // 0x08: u32
  if (data?.ulMinCacheEntryTtl !== undefined) view.setUint32(8, Number(data.ulMinCacheEntryTtl), true);
  // 0x0c: i32
  if (data?.SecureDnsSetting !== undefined) view.setInt32(12, Number(data.SecureDnsSetting), true);
  // 0x10: u64
  if (data?.ullConnResolutionWaitTime !== undefined) view.setBigUint64(16, BigInt(data.ullConnResolutionWaitTime), true);
  // 0x18: u64
  if (data?.ullFlags !== undefined) view.setBigUint64(24, BigInt(data.ullFlags), true);
  return buf;
}

export class WINHTTP_RESOLVER_CACHE_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulMaxResolverCacheEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulMaxCacheEntryAge(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulMinCacheEntryTtl(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get SecureDnsSetting(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u64
  get ullConnResolutionWaitTime(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get ullFlags(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: u32
  set ulMaxResolverCacheEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulMaxCacheEntryAge(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulMinCacheEntryTtl(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set SecureDnsSetting(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u64
  set ullConnResolutionWaitTime(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set ullFlags(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_ASYNC_RESULT (size: 16)
 */
export interface WINHTTP_ASYNC_RESULT {
  /** usize */
  dwResult: bigint | number;
  /** u32 */
  dwError: number;
}

export const sizeofWINHTTP_ASYNC_RESULT = 16;

export function allocWINHTTP_ASYNC_RESULT(data?: Partial<WINHTTP_ASYNC_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_ASYNC_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwResult !== undefined) view.setBigUint64(0, BigInt(data.dwResult), true);
  // 0x08: u32
  if (data?.dwError !== undefined) view.setUint32(8, Number(data.dwError), true);
  // 0x0c: pad4
  return buf;
}

export class WINHTTP_ASYNC_RESULTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get dwResult(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get dwError(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set dwResult(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set dwError(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Networking.WinHttp.HTTP_VERSION_INFO (size: 8)
 */
export interface HTTP_VERSION_INFO {
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
}

export const sizeofHTTP_VERSION_INFO = 8;

export function allocHTTP_VERSION_INFO(data?: Partial<HTTP_VERSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_VERSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(0, Number(data.dwMajorVersion), true);
  // 0x04: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(4, Number(data.dwMinorVersion), true);
  return buf;
}

export class HTTP_VERSION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMajorVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwMinorVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwMajorVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwMinorVersion(value: number) {
    this.view.setUint32(4, value, true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Networking.WinHttp.URL_COMPONENTS (size: 104)
 */
export interface URL_COMPONENTS {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszScheme: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwSchemeLength: number;
  /** Windows.Win32.Networking.WinHttp.WINHTTP_INTERNET_SCHEME */
  nScheme: WINHTTP_INTERNET_SCHEME;
  /** Windows.Win32.Foundation.PWSTR */
  lpszHostName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwHostNameLength: number;
  /** u16 */
  nPort: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszUserName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwUserNameLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszPassword: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwPasswordLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszUrlPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwUrlPathLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszExtraInfo: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwExtraInfoLength: number;
}

export const sizeofURL_COMPONENTS = 104;

export function allocURL_COMPONENTS(data?: Partial<URL_COMPONENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofURL_COMPONENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszScheme !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszScheme);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.dwSchemeLength !== undefined) view.setUint32(16, Number(data.dwSchemeLength), true);
  // 0x14: u32
  if (data?.nScheme !== undefined) view.setUint32(20, Number(data.nScheme), true);
  // 0x18: buffer
  if (data?.lpszHostName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszHostName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.dwHostNameLength !== undefined) view.setUint32(32, Number(data.dwHostNameLength), true);
  // 0x24: u16
  if (data?.nPort !== undefined) view.setUint16(36, Number(data.nPort), true);
  // 0x26: pad2
  // 0x28: buffer
  if (data?.lpszUserName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpszUserName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.dwUserNameLength !== undefined) view.setUint32(48, Number(data.dwUserNameLength), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.lpszPassword !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.lpszPassword);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: u32
  if (data?.dwPasswordLength !== undefined) view.setUint32(64, Number(data.dwPasswordLength), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.lpszUrlPath !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.lpszUrlPath);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: u32
  if (data?.dwUrlPathLength !== undefined) view.setUint32(80, Number(data.dwUrlPathLength), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.lpszExtraInfo !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpszExtraInfo);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.dwExtraInfoLength !== undefined) view.setUint32(96, Number(data.dwExtraInfoLength), true);
  // 0x64: pad4
  return buf;
}

export class URL_COMPONENTSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpszScheme(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwSchemeLength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get nScheme(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: buffer
  get lpszHostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwHostNameLength(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u16
  get nPort(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: pad2

  // 0x28: buffer
  get lpszUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwUserNameLength(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: buffer
  get lpszPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get dwPasswordLength(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  get lpszUrlPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get dwUrlPathLength(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  get lpszExtraInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get dwExtraInfoLength(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpszScheme(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set dwSchemeLength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set nScheme(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: buffer
  set lpszHostName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set dwHostNameLength(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u16
  set nPort(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: pad2

  // 0x28: buffer
  set lpszUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set dwUserNameLength(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: buffer
  set lpszPassword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: u32
  set dwPasswordLength(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: buffer
  set lpszUrlPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: u32
  set dwUrlPathLength(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: buffer
  set lpszExtraInfo(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set dwExtraInfoLength(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_PROXY_INFO (size: 24)
 */
export interface WINHTTP_PROXY_INFO {
  /** Windows.Win32.Networking.WinHttp.WINHTTP_ACCESS_TYPE */
  dwAccessType: WINHTTP_ACCESS_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  lpszProxy: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszProxyBypass: string | null | Uint8Array | Uint16Array;
}

export const sizeofWINHTTP_PROXY_INFO = 24;

export function allocWINHTTP_PROXY_INFO(data?: Partial<WINHTTP_PROXY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_PROXY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAccessType !== undefined) view.setUint32(0, Number(data.dwAccessType), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszProxy !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszProxy);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.lpszProxyBypass !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszProxyBypass);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class WINHTTP_PROXY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAccessType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpszProxy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get lpszProxyBypass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwAccessType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpszProxy(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set lpszProxyBypass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_AUTOPROXY_OPTIONS (size: 32)
 */
export interface WINHTTP_AUTOPROXY_OPTIONS {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwAutoDetectFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszAutoConfigUrl: string | null | Uint8Array | Uint16Array;
  /** ptr */
  lpvReserved: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.Foundation.BOOL */
  fAutoLogonIfChallenged: boolean;
}

export const sizeofWINHTTP_AUTOPROXY_OPTIONS = 32;

export function allocWINHTTP_AUTOPROXY_OPTIONS(data?: Partial<WINHTTP_AUTOPROXY_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_AUTOPROXY_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwAutoDetectFlags !== undefined) view.setUint32(4, Number(data.dwAutoDetectFlags), true);
  // 0x08: buffer
  if (data?.lpszAutoConfigUrl !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszAutoConfigUrl);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.lpvReserved !== undefined) view.setBigUint64(16, data.lpvReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpvReserved))), true);
  // 0x18: u32
  if (data?.dwReserved !== undefined) view.setUint32(24, Number(data.dwReserved), true);
  // 0x1c: i32
  if (data?.fAutoLogonIfChallenged !== undefined) view.setInt32(28, Number(data.fAutoLogonIfChallenged), true);
  return buf;
}

export class WINHTTP_AUTOPROXY_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwAutoDetectFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get lpszAutoConfigUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpvReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwReserved(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: i32
  get fAutoLogonIfChallenged(): number {
    return this.view.getInt32(28, true);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwAutoDetectFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set lpszAutoConfigUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set lpvReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwReserved(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: i32
  set fAutoLogonIfChallenged(value: number) {
    this.view.setInt32(28, value, true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_PROXY_RESULT_ENTRY (size: 32)
 */
export interface WINHTTP_PROXY_RESULT_ENTRY {
  /** Windows.Win32.Foundation.BOOL */
  fProxy: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fBypass: boolean;
  /** Windows.Win32.Networking.WinHttp.WINHTTP_INTERNET_SCHEME */
  ProxyScheme: WINHTTP_INTERNET_SCHEME;
  /** Windows.Win32.Foundation.PWSTR */
  pwszProxy: string | null | Uint8Array | Uint16Array;
  /** u16 */
  ProxyPort: number;
}

export const sizeofWINHTTP_PROXY_RESULT_ENTRY = 32;

export function allocWINHTTP_PROXY_RESULT_ENTRY(data?: Partial<WINHTTP_PROXY_RESULT_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_PROXY_RESULT_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fProxy !== undefined) view.setInt32(0, Number(data.fProxy), true);
  // 0x04: i32
  if (data?.fBypass !== undefined) view.setInt32(4, Number(data.fBypass), true);
  // 0x08: u32
  if (data?.ProxyScheme !== undefined) view.setUint32(8, Number(data.ProxyScheme), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pwszProxy !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszProxy);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u16
  if (data?.ProxyPort !== undefined) view.setUint16(24, Number(data.ProxyPort), true);
  // 0x1a: pad6
  return buf;
}

export class WINHTTP_PROXY_RESULT_ENTRYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fProxy(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get fBypass(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get ProxyScheme(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pwszProxy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u16
  get ProxyPort(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: pad6

  // 0x00: i32
  set fProxy(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set fBypass(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set ProxyScheme(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pwszProxy(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u16
  set ProxyPort(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: pad6
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_PROXY_RESULT (size: 16)
 */
export interface WINHTTP_PROXY_RESULT {
  /** u32 */
  cEntries: number;
  /** ptr */
  pEntries: Deno.PointerValue | Uint8Array;
}

export const sizeofWINHTTP_PROXY_RESULT = 16;

export function allocWINHTTP_PROXY_RESULT(data?: Partial<WINHTTP_PROXY_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_PROXY_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEntries !== undefined) view.setBigUint64(8, data.pEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEntries))), true);
  return buf;
}

export class WINHTTP_PROXY_RESULTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HANDLE = bigint | number;

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_PROXY_RESULT_EX (size: 32)
 */
export interface WINHTTP_PROXY_RESULT_EX {
  /** u32 */
  cEntries: number;
  /** ptr */
  pEntries: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HANDLE */
  hProxyDetectionHandle: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwProxyInterfaceAffinity: number;
}

export const sizeofWINHTTP_PROXY_RESULT_EX = 32;

export function allocWINHTTP_PROXY_RESULT_EX(data?: Partial<WINHTTP_PROXY_RESULT_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_PROXY_RESULT_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cEntries !== undefined) view.setUint32(0, Number(data.cEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEntries !== undefined) view.setBigUint64(8, data.pEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEntries))), true);
  // 0x10: pointer
  if (data?.hProxyDetectionHandle !== undefined) view.setBigUint64(16, data.hProxyDetectionHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hProxyDetectionHandle))), true);
  // 0x18: u32
  if (data?.dwProxyInterfaceAffinity !== undefined) view.setUint32(24, Number(data.dwProxyInterfaceAffinity), true);
  // 0x1c: pad4
  return buf;
}

export class WINHTTP_PROXY_RESULT_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hProxyDetectionHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwProxyInterfaceAffinity(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set cEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hProxyDetectionHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwProxyInterfaceAffinity(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_PROXY_NETWORKING_KEY (size: 8)
 */
export interface WINHTTP_PROXY_NETWORKING_KEY {
  /** array */
  pbBuffer: Deno.PointerValue;
}

export const sizeofWINHTTP_PROXY_NETWORKING_KEY = 8;

export function allocWINHTTP_PROXY_NETWORKING_KEY(data?: Partial<WINHTTP_PROXY_NETWORKING_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_PROXY_NETWORKING_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pbBuffer !== undefined) view.setBigUint64(0, data.pbBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbBuffer))), true);
  return buf;
}

export class WINHTTP_PROXY_NETWORKING_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pbBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pbBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_PROXY_SETTINGS (size: 120)
 */
export interface WINHTTP_PROXY_SETTINGS {
  /** u32 */
  dwStructSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwCurrentSettingsVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszConnectionName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszProxy: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszProxyBypass: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszAutoconfigUrl: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszAutoconfigSecondaryUrl: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwAutoDiscoveryFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszLastKnownGoodAutoConfigUrl: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwAutoconfigReloadDelayMins: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastKnownDetectTime: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwDetectedInterfaceIpCount: number;
  /** ptr */
  pdwDetectedInterfaceIp: Deno.PointerValue | Uint8Array;
  /** u32 */
  cNetworkKeys: number;
  /** ptr */
  pNetworkKeys: Deno.PointerValue | Uint8Array;
}

export const sizeofWINHTTP_PROXY_SETTINGS = 120;

export function allocWINHTTP_PROXY_SETTINGS(data?: Partial<WINHTTP_PROXY_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_PROXY_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwCurrentSettingsVersion !== undefined) view.setUint32(8, Number(data.dwCurrentSettingsVersion), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pwszConnectionName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszConnectionName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pwszProxy !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszProxy);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pwszProxyBypass !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwszProxyBypass);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pwszAutoconfigUrl !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pwszAutoconfigUrl);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pwszAutoconfigSecondaryUrl !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pwszAutoconfigSecondaryUrl);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.dwAutoDiscoveryFlags !== undefined) view.setUint32(56, Number(data.dwAutoDiscoveryFlags), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.pwszLastKnownGoodAutoConfigUrl !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pwszLastKnownGoodAutoConfigUrl);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u32
  if (data?.dwAutoconfigReloadDelayMins !== undefined) view.setUint32(72, Number(data.dwAutoconfigReloadDelayMins), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.ftLastKnownDetectTime !== undefined) view.setBigUint64(80, data.ftLastKnownDetectTime === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftLastKnownDetectTime))), true);
  // 0x58: u32
  if (data?.dwDetectedInterfaceIpCount !== undefined) view.setUint32(88, Number(data.dwDetectedInterfaceIpCount), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.pdwDetectedInterfaceIp !== undefined) view.setBigUint64(96, data.pdwDetectedInterfaceIp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pdwDetectedInterfaceIp))), true);
  // 0x68: u32
  if (data?.cNetworkKeys !== undefined) view.setUint32(104, Number(data.cNetworkKeys), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.pNetworkKeys !== undefined) view.setBigUint64(112, data.pNetworkKeys === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pNetworkKeys))), true);
  return buf;
}

export class WINHTTP_PROXY_SETTINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStructSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCurrentSettingsVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pwszConnectionName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pwszProxy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pwszProxyBypass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pwszAutoconfigUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pwszAutoconfigSecondaryUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwAutoDiscoveryFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get pwszLastKnownGoodAutoConfigUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get dwAutoconfigReloadDelayMins(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get ftLastKnownDetectTime(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get dwDetectedInterfaceIpCount(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get pdwDetectedInterfaceIp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get cNetworkKeys(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get pNetworkKeys(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwStructSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCurrentSettingsVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pwszConnectionName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pwszProxy(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pwszProxyBypass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pwszAutoconfigUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pwszAutoconfigSecondaryUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set dwAutoDiscoveryFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set pwszLastKnownGoodAutoConfigUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u32
  set dwAutoconfigReloadDelayMins(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set ftLastKnownDetectTime(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set dwDetectedInterfaceIpCount(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set pdwDetectedInterfaceIp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set cNetworkKeys(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set pNetworkKeys(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_CERTIFICATE_INFO (size: 64)
 */
export interface WINHTTP_CERTIFICATE_INFO {
  /** Windows.Win32.Foundation.FILETIME */
  ftExpiry: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftStart: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpszSubjectInfo: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszIssuerInfo: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszProtocolName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszSignatureAlgName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszEncryptionAlgName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwKeySize: number;
}

export const sizeofWINHTTP_CERTIFICATE_INFO = 64;

export function allocWINHTTP_CERTIFICATE_INFO(data?: Partial<WINHTTP_CERTIFICATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_CERTIFICATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ftExpiry !== undefined) view.setBigUint64(0, data.ftExpiry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftExpiry))), true);
  // 0x08: pointer
  if (data?.ftStart !== undefined) view.setBigUint64(8, data.ftStart === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftStart))), true);
  // 0x10: buffer
  if (data?.lpszSubjectInfo !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszSubjectInfo);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.lpszIssuerInfo !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszIssuerInfo);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.lpszProtocolName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpszProtocolName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.lpszSignatureAlgName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpszSignatureAlgName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.lpszEncryptionAlgName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpszEncryptionAlgName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.dwKeySize !== undefined) view.setUint32(56, Number(data.dwKeySize), true);
  // 0x3c: pad4
  return buf;
}

export class WINHTTP_CERTIFICATE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ftExpiry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ftStart(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get lpszSubjectInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpszIssuerInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get lpszProtocolName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get lpszSignatureAlgName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get lpszEncryptionAlgName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwKeySize(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: pointer
  set ftExpiry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ftStart(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set lpszSubjectInfo(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set lpszIssuerInfo(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set lpszProtocolName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set lpszSignatureAlgName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set lpszEncryptionAlgName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set dwKeySize(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: bigint | number;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psid))), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguid))), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pObjectTypes))), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pIpAddress))), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get u(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set Data0(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: usize
  set u(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: bigint | number;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_EXTENDED_HEADER (size: 16)
 */
export interface WINHTTP_EXTENDED_HEADER {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
}

export const sizeofWINHTTP_EXTENDED_HEADER = 16;

export function allocWINHTTP_EXTENDED_HEADER(data?: Partial<WINHTTP_EXTENDED_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_EXTENDED_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  return buf;
}

export class WINHTTP_EXTENDED_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_HEADER_NAME (size: 16)
 */
export interface WINHTTP_HEADER_NAME {
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PSTR */
  pszName: string | null | Uint8Array;
}

export const sizeofWINHTTP_HEADER_NAME = 16;

export function allocWINHTTP_HEADER_NAME(data?: Partial<WINHTTP_HEADER_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_HEADER_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class WINHTTP_HEADER_NAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_CONNECTION_GROUP (size: 16)
 */
export interface WINHTTP_CONNECTION_GROUP {
  /** u32 */
  cConnections: number;
  /** System.Guid */
  guidGroup: Uint8Array | Deno.PointerValue;
}

export const sizeofWINHTTP_CONNECTION_GROUP = 16;

export function allocWINHTTP_CONNECTION_GROUP(data?: Partial<WINHTTP_CONNECTION_GROUP>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_CONNECTION_GROUP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cConnections !== undefined) view.setUint32(0, Number(data.cConnections), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.guidGroup !== undefined) view.setBigUint64(8, data.guidGroup === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidGroup))), true);
  return buf;
}

export class WINHTTP_CONNECTION_GROUPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cConnections(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get guidGroup(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cConnections(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set guidGroup(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_HOST_CONNECTION_GROUP (size: 24)
 */
export interface WINHTTP_HOST_CONNECTION_GROUP {
  /** Windows.Win32.Foundation.PWSTR */
  pwszHost: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cConnectionGroups: number;
  /** ptr */
  pConnectionGroups: Deno.PointerValue | Uint8Array;
}

export const sizeofWINHTTP_HOST_CONNECTION_GROUP = 24;

export function allocWINHTTP_HOST_CONNECTION_GROUP(data?: Partial<WINHTTP_HOST_CONNECTION_GROUP>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_HOST_CONNECTION_GROUP);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszHost !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszHost);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.cConnectionGroups !== undefined) view.setUint32(8, Number(data.cConnectionGroups), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pConnectionGroups !== undefined) view.setBigUint64(16, data.pConnectionGroups === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pConnectionGroups))), true);
  return buf;
}

export class WINHTTP_HOST_CONNECTION_GROUPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwszHost(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cConnectionGroups(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pConnectionGroups(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pwszHost(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set cConnectionGroups(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pConnectionGroups(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_QUERY_CONNECTION_GROUP_RESULT (size: 16)
 */
export interface WINHTTP_QUERY_CONNECTION_GROUP_RESULT {
  /** u32 */
  cHosts: number;
  /** ptr */
  pHostConnectionGroups: Deno.PointerValue | Uint8Array;
}

export const sizeofWINHTTP_QUERY_CONNECTION_GROUP_RESULT = 16;

export function allocWINHTTP_QUERY_CONNECTION_GROUP_RESULT(data?: Partial<WINHTTP_QUERY_CONNECTION_GROUP_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_QUERY_CONNECTION_GROUP_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cHosts !== undefined) view.setUint32(0, Number(data.cHosts), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pHostConnectionGroups !== undefined) view.setBigUint64(8, data.pHostConnectionGroups === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pHostConnectionGroups))), true);
  return buf;
}

export class WINHTTP_QUERY_CONNECTION_GROUP_RESULTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cHosts(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pHostConnectionGroups(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cHosts(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pHostConnectionGroups(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_HTTP2_RECEIVE_WINDOW (size: 8)
 */
export interface WINHTTP_HTTP2_RECEIVE_WINDOW {
  /** u32 */
  ulStreamWindow: number;
  /** u32 */
  ulStreamWindowUpdateDelta: number;
}

export const sizeofWINHTTP_HTTP2_RECEIVE_WINDOW = 8;

export function allocWINHTTP_HTTP2_RECEIVE_WINDOW(data?: Partial<WINHTTP_HTTP2_RECEIVE_WINDOW>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_HTTP2_RECEIVE_WINDOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ulStreamWindow !== undefined) view.setUint32(0, Number(data.ulStreamWindow), true);
  // 0x04: u32
  if (data?.ulStreamWindowUpdateDelta !== undefined) view.setUint32(4, Number(data.ulStreamWindowUpdateDelta), true);
  return buf;
}

export class WINHTTP_HTTP2_RECEIVE_WINDOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ulStreamWindow(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get ulStreamWindowUpdateDelta(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set ulStreamWindow(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set ulStreamWindowUpdateDelta(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_FAILED_CONNECTION_RETRIES (size: 8)
 */
export interface WINHTTP_FAILED_CONNECTION_RETRIES {
  /** u32 */
  dwMaxRetries: number;
  /** u32 */
  dwAllowedRetryConditions: number;
}

export const sizeofWINHTTP_FAILED_CONNECTION_RETRIES = 8;

export function allocWINHTTP_FAILED_CONNECTION_RETRIES(data?: Partial<WINHTTP_FAILED_CONNECTION_RETRIES>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_FAILED_CONNECTION_RETRIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMaxRetries !== undefined) view.setUint32(0, Number(data.dwMaxRetries), true);
  // 0x04: u32
  if (data?.dwAllowedRetryConditions !== undefined) view.setUint32(4, Number(data.dwAllowedRetryConditions), true);
  return buf;
}

export class WINHTTP_FAILED_CONNECTION_RETRIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMaxRetries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwAllowedRetryConditions(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwMaxRetries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwAllowedRetryConditions(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_CREDS (size: 48)
 */
export interface WINHTTP_CREDS {
  /** Windows.Win32.Foundation.PSTR */
  lpszUserName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpszPassword: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpszRealm: string | null | Uint8Array;
  /** Windows.Win32.Networking.WinHttp.WINHTTP_CREDS_AUTHSCHEME */
  dwAuthScheme: WINHTTP_CREDS_AUTHSCHEME;
  /** Windows.Win32.Foundation.PSTR */
  lpszHostName: string | null | Uint8Array;
  /** u32 */
  dwPort: number;
}

export const sizeofWINHTTP_CREDS = 48;

export function allocWINHTTP_CREDS(data?: Partial<WINHTTP_CREDS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_CREDS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpszUserName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpszUserName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.lpszPassword !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszPassword);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.lpszRealm !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpszRealm);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwAuthScheme !== undefined) view.setUint32(24, Number(data.dwAuthScheme), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpszHostName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpszHostName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.dwPort !== undefined) view.setUint32(40, Number(data.dwPort), true);
  // 0x2c: pad4
  return buf;
}

export class WINHTTP_CREDSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpszUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get lpszPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get lpszRealm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwAuthScheme(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get lpszHostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwPort(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: buffer
  set lpszUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set lpszPassword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set lpszRealm(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwAuthScheme(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set lpszHostName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set dwPort(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_CREDS_EX (size: 56)
 */
export interface WINHTTP_CREDS_EX {
  /** Windows.Win32.Foundation.PSTR */
  lpszUserName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpszPassword: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpszRealm: string | null | Uint8Array;
  /** Windows.Win32.Networking.WinHttp.WINHTTP_CREDS_AUTHSCHEME */
  dwAuthScheme: WINHTTP_CREDS_AUTHSCHEME;
  /** Windows.Win32.Foundation.PSTR */
  lpszHostName: string | null | Uint8Array;
  /** u32 */
  dwPort: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszUrl: string | null | Uint8Array;
}

export const sizeofWINHTTP_CREDS_EX = 56;

export function allocWINHTTP_CREDS_EX(data?: Partial<WINHTTP_CREDS_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_CREDS_EX);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpszUserName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpszUserName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.lpszPassword !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszPassword);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.lpszRealm !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpszRealm);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwAuthScheme !== undefined) view.setUint32(24, Number(data.dwAuthScheme), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpszHostName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpszHostName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.dwPort !== undefined) view.setUint32(40, Number(data.dwPort), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.lpszUrl !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpszUrl);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  return buf;
}

export class WINHTTP_CREDS_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpszUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get lpszPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get lpszRealm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwAuthScheme(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get lpszHostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwPort(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  get lpszUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set lpszUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set lpszPassword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set lpszRealm(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwAuthScheme(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set lpszHostName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set dwPort(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  set lpszUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_CURRENT_USER_IE_PROXY_CONFIG (size: 32)
 */
export interface WINHTTP_CURRENT_USER_IE_PROXY_CONFIG {
  /** Windows.Win32.Foundation.BOOL */
  fAutoDetect: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  lpszAutoConfigUrl: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszProxy: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszProxyBypass: string | null | Uint8Array | Uint16Array;
}

export const sizeofWINHTTP_CURRENT_USER_IE_PROXY_CONFIG = 32;

export function allocWINHTTP_CURRENT_USER_IE_PROXY_CONFIG(data?: Partial<WINHTTP_CURRENT_USER_IE_PROXY_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_CURRENT_USER_IE_PROXY_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fAutoDetect !== undefined) view.setInt32(0, Number(data.fAutoDetect), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszAutoConfigUrl !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszAutoConfigUrl);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.lpszProxy !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszProxy);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.lpszProxyBypass !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszProxyBypass);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class WINHTTP_CURRENT_USER_IE_PROXY_CONFIGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get fAutoDetect(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get lpszAutoConfigUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get lpszProxy(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpszProxyBypass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set fAutoDetect(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set lpszAutoConfigUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set lpszProxy(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set lpszProxyBypass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_WEB_SOCKET_ASYNC_RESULT (size: 16)
 */
export interface WINHTTP_WEB_SOCKET_ASYNC_RESULT {
  /** Windows.Win32.Networking.WinHttp.WINHTTP_ASYNC_RESULT */
  AsyncResult: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.WinHttp.WINHTTP_WEB_SOCKET_OPERATION */
  Operation: WINHTTP_WEB_SOCKET_OPERATION;
}

export const sizeofWINHTTP_WEB_SOCKET_ASYNC_RESULT = 16;

export function allocWINHTTP_WEB_SOCKET_ASYNC_RESULT(data?: Partial<WINHTTP_WEB_SOCKET_ASYNC_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_WEB_SOCKET_ASYNC_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AsyncResult !== undefined) view.setBigUint64(0, data.AsyncResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AsyncResult))), true);
  // 0x08: i32
  if (data?.Operation !== undefined) view.setInt32(8, Number(data.Operation), true);
  // 0x0c: pad4
  return buf;
}

export class WINHTTP_WEB_SOCKET_ASYNC_RESULTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get AsyncResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get Operation(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set AsyncResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set Operation(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Networking.WinHttp.WINHTTP_WEB_SOCKET_STATUS (size: 8)
 */
export interface WINHTTP_WEB_SOCKET_STATUS {
  /** u32 */
  dwBytesTransferred: number;
  /** Windows.Win32.Networking.WinHttp.WINHTTP_WEB_SOCKET_BUFFER_TYPE */
  eBufferType: WINHTTP_WEB_SOCKET_BUFFER_TYPE;
}

export const sizeofWINHTTP_WEB_SOCKET_STATUS = 8;

export function allocWINHTTP_WEB_SOCKET_STATUS(data?: Partial<WINHTTP_WEB_SOCKET_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofWINHTTP_WEB_SOCKET_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBytesTransferred !== undefined) view.setUint32(0, Number(data.dwBytesTransferred), true);
  // 0x04: i32
  if (data?.eBufferType !== undefined) view.setInt32(4, Number(data.eBufferType), true);
  return buf;
}

export class WINHTTP_WEB_SOCKET_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwBytesTransferred(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get eBufferType(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set dwBytesTransferred(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set eBufferType(value: number) {
    this.view.setInt32(4, value, true);
  }
}

// Native Libraries

try {
  var libWINHTTP_dll = Deno.dlopen("WINHTTP.dll", {
    WinHttpSetStatusCallback: {
      parameters: ["pointer", "pointer", "u32", "usize"],
      result: "pointer",
    },
    WinHttpTimeFromSystemTime: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    WinHttpTimeToSystemTime: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    WinHttpCrackUrl: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "i32",
    },
    WinHttpCreateUrl: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "i32",
    },
    WinHttpCheckPlatform: {
      parameters: [],
      result: "i32",
    },
    WinHttpGetDefaultProxyConfiguration: {
      parameters: ["pointer"],
      result: "i32",
    },
    WinHttpSetDefaultProxyConfiguration: {
      parameters: ["pointer"],
      result: "i32",
    },
    WinHttpOpen: {
      parameters: ["buffer", "u32", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    WinHttpCloseHandle: {
      parameters: ["pointer"],
      result: "i32",
    },
    WinHttpConnect: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "pointer",
    },
    WinHttpReadData: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    WinHttpReadDataEx: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u64", "u32", "pointer"],
      result: "u32",
    },
    WinHttpWriteData: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    WinHttpQueryDataAvailable: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WinHttpQueryOption: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WinHttpSetOption: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    WinHttpSetTimeouts: {
      parameters: ["pointer", "i32", "i32", "i32", "i32"],
      result: "i32",
    },
    WinHttpOpenRequest: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "pointer", "u32"],
      result: "pointer",
    },
    WinHttpAddRequestHeaders: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "i32",
    },
    WinHttpAddRequestHeadersEx: {
      parameters: ["pointer", "u32", "u64", "u64", "u32", "pointer"],
      result: "u32",
    },
    WinHttpSendRequest: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32", "u32", "usize"],
      result: "i32",
    },
    WinHttpSetCredentials: {
      parameters: ["pointer", "u32", "u32", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    WinHttpQueryAuthSchemes: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WinHttpReceiveResponse: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WinHttpQueryHeaders: {
      parameters: ["pointer", "u32", "buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WinHttpQueryHeadersEx: {
      parameters: ["pointer", "u32", "u64", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WinHttpQueryConnectionGroup: {
      parameters: ["pointer", "pointer", "u64", "pointer"],
      result: "u32",
    },
    WinHttpFreeQueryConnectionGroupResult: {
      parameters: ["pointer"],
      result: "void",
    },
    WinHttpDetectAutoProxyConfigUrl: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    WinHttpGetProxyForUrl: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    WinHttpCreateProxyResolver: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    WinHttpGetProxyForUrlEx: {
      parameters: ["pointer", "buffer", "pointer", "usize"],
      result: "u32",
    },
    WinHttpGetProxyForUrlEx2: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "usize"],
      result: "u32",
    },
    WinHttpGetProxyResult: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    WinHttpGetProxyResultEx: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    WinHttpFreeProxyResult: {
      parameters: ["pointer"],
      result: "void",
    },
    WinHttpFreeProxyResultEx: {
      parameters: ["pointer"],
      result: "void",
    },
    WinHttpResetAutoProxy: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    WinHttpGetIEProxyConfigForCurrentUser: {
      parameters: ["pointer"],
      result: "i32",
    },
    WinHttpWriteProxySettings: {
      parameters: ["pointer", "i32", "pointer"],
      result: "u32",
    },
    WinHttpReadProxySettings: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    WinHttpFreeProxySettings: {
      parameters: ["pointer"],
      result: "void",
    },
    WinHttpGetProxySettingsVersion: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    WinHttpSetProxySettingsPerUser: {
      parameters: ["i32"],
      result: "u32",
    },
    WinHttpWebSocketCompleteUpgrade: {
      parameters: ["pointer", "usize"],
      result: "pointer",
    },
    WinHttpWebSocketSend: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "u32",
    },
    WinHttpWebSocketReceive: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WinHttpWebSocketShutdown: {
      parameters: ["pointer", "u16", "pointer", "u32"],
      result: "u32",
    },
    WinHttpWebSocketClose: {
      parameters: ["pointer", "u16", "pointer", "u32"],
      result: "u32",
    },
    WinHttpWebSocketQueryCloseStatus: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function WinHttpSetStatusCallback(
  hInternet: Deno.PointerValue | Uint8Array /* ptr */,
  lpfnInternetCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.WinHttp.WINHTTP_STATUS_CALLBACK */,
  dwNotificationFlags: number /* u32 */,
  dwReserved: bigint | number /* usize */,
): Deno.PointerValue /* Windows.Win32.Networking.WinHttp.WINHTTP_STATUS_CALLBACK */ {
  return libWINHTTP_dll.WinHttpSetStatusCallback(util.toPointer(hInternet), util.toPointer(lpfnInternetCallback), dwNotificationFlags, dwReserved);
}

export function WinHttpTimeFromSystemTime(
  pst: Deno.PointerValue | Uint8Array /* ptr */,
  pwszTime: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpTimeFromSystemTime(util.toPointer(pst), util.pwstrToFfi(pwszTime)));
}

export function WinHttpTimeToSystemTime(
  pwszTime: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pst: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpTimeToSystemTime(util.pwstrToFfi(pwszTime), util.toPointer(pst)));
}

export function WinHttpCrackUrl(
  pwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwUrlLength: number /* u32 */,
  dwFlags: number /* u32 */,
  lpUrlComponents: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpCrackUrl(util.pwstrToFfi(pwszUrl), dwUrlLength, dwFlags, util.toPointer(lpUrlComponents)));
}

export function WinHttpCreateUrl(
  lpUrlComponents: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: WIN_HTTP_CREATE_URL_FLAGS /* Windows.Win32.Networking.WinHttp.WIN_HTTP_CREATE_URL_FLAGS */,
  pwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pdwUrlLength: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpCreateUrl(util.toPointer(lpUrlComponents), dwFlags, util.pwstrToFfi(pwszUrl), util.toPointer(pdwUrlLength)));
}

export function WinHttpCheckPlatform(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpCheckPlatform());
}

export function WinHttpGetDefaultProxyConfiguration(
  pProxyInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpGetDefaultProxyConfiguration(util.toPointer(pProxyInfo)));
}

export function WinHttpSetDefaultProxyConfiguration(
  pProxyInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpSetDefaultProxyConfiguration(util.toPointer(pProxyInfo)));
}

export function WinHttpOpen(
  pszAgentW: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwAccessType: WINHTTP_ACCESS_TYPE /* Windows.Win32.Networking.WinHttp.WINHTTP_ACCESS_TYPE */,
  pszProxyW: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszProxyBypassW: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libWINHTTP_dll.WinHttpOpen(util.pwstrToFfi(pszAgentW), dwAccessType, util.pwstrToFfi(pszProxyW), util.pwstrToFfi(pszProxyBypassW), dwFlags);
}

export function WinHttpCloseHandle(
  hInternet: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpCloseHandle(util.toPointer(hInternet)));
}

export function WinHttpConnect(
  hSession: Deno.PointerValue | Uint8Array /* ptr */,
  pswzServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nServerPort: INTERNET_PORT /* Windows.Win32.Networking.WinHttp.INTERNET_PORT */,
  dwReserved: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libWINHTTP_dll.WinHttpConnect(util.toPointer(hSession), util.pwstrToFfi(pswzServerName), nServerPort, dwReserved);
}

export function WinHttpReadData(
  hRequest: Deno.PointerValue | Uint8Array /* ptr */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwNumberOfBytesToRead: number /* u32 */,
  lpdwNumberOfBytesRead: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpReadData(util.toPointer(hRequest), util.toPointer(lpBuffer), dwNumberOfBytesToRead, util.toPointer(lpdwNumberOfBytesRead)));
}

export function WinHttpReadDataEx(
  hRequest: Deno.PointerValue | Uint8Array /* ptr */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwNumberOfBytesToRead: number /* u32 */,
  lpdwNumberOfBytesRead: Deno.PointerValue | Uint8Array /* ptr */,
  ullFlags: bigint | number /* u64 */,
  cbProperty: number /* u32 */,
  pvProperty: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpReadDataEx(util.toPointer(hRequest), util.toPointer(lpBuffer), dwNumberOfBytesToRead, util.toPointer(lpdwNumberOfBytesRead), ullFlags, cbProperty, util.toPointer(pvProperty));
}

export function WinHttpWriteData(
  hRequest: Deno.PointerValue | Uint8Array /* ptr */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwNumberOfBytesToWrite: number /* u32 */,
  lpdwNumberOfBytesWritten: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpWriteData(util.toPointer(hRequest), util.toPointer(lpBuffer), dwNumberOfBytesToWrite, util.toPointer(lpdwNumberOfBytesWritten)));
}

export function WinHttpQueryDataAvailable(
  hRequest: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwNumberOfBytesAvailable: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpQueryDataAvailable(util.toPointer(hRequest), util.toPointer(lpdwNumberOfBytesAvailable)));
}

export function WinHttpQueryOption(
  hInternet: Deno.PointerValue | Uint8Array /* ptr */,
  dwOption: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpQueryOption(util.toPointer(hInternet), dwOption, util.toPointer(lpBuffer), util.toPointer(lpdwBufferLength)));
}

export function WinHttpSetOption(
  hInternet: Deno.PointerValue | Uint8Array /* ptr */,
  dwOption: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwBufferLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpSetOption(util.toPointer(hInternet), dwOption, util.toPointer(lpBuffer), dwBufferLength));
}

export function WinHttpSetTimeouts(
  hInternet: Deno.PointerValue | Uint8Array /* ptr */,
  nResolveTimeout: number /* i32 */,
  nConnectTimeout: number /* i32 */,
  nSendTimeout: number /* i32 */,
  nReceiveTimeout: number /* i32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpSetTimeouts(util.toPointer(hInternet), nResolveTimeout, nConnectTimeout, nSendTimeout, nReceiveTimeout));
}

export function WinHttpOpenRequest(
  hConnect: Deno.PointerValue | Uint8Array /* ptr */,
  pwszVerb: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszObjectName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszVersion: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszReferrer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppwszAcceptTypes: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: WINHTTP_OPEN_REQUEST_FLAGS /* Windows.Win32.Networking.WinHttp.WINHTTP_OPEN_REQUEST_FLAGS */,
): Deno.PointerValue /* ptr */ {
  return libWINHTTP_dll.WinHttpOpenRequest(util.toPointer(hConnect), util.pwstrToFfi(pwszVerb), util.pwstrToFfi(pwszObjectName), util.pwstrToFfi(pwszVersion), util.pwstrToFfi(pwszReferrer), util.toPointer(ppwszAcceptTypes), dwFlags);
}

export function WinHttpAddRequestHeaders(
  hRequest: Deno.PointerValue | Uint8Array /* ptr */,
  lpszHeaders: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwHeadersLength: number /* u32 */,
  dwModifiers: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpAddRequestHeaders(util.toPointer(hRequest), util.pwstrToFfi(lpszHeaders), dwHeadersLength, dwModifiers));
}

export function WinHttpAddRequestHeadersEx(
  hRequest: Deno.PointerValue | Uint8Array /* ptr */,
  dwModifiers: number /* u32 */,
  ullFlags: bigint | number /* u64 */,
  ullExtra: bigint | number /* u64 */,
  cHeaders: number /* u32 */,
  pHeaders: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpAddRequestHeadersEx(util.toPointer(hRequest), dwModifiers, ullFlags, ullExtra, cHeaders, util.toPointer(pHeaders));
}

export function WinHttpSendRequest(
  hRequest: Deno.PointerValue | Uint8Array /* ptr */,
  lpszHeaders: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwHeadersLength: number /* u32 */,
  lpOptional: Deno.PointerValue | Uint8Array /* ptr */,
  dwOptionalLength: number /* u32 */,
  dwTotalLength: number /* u32 */,
  dwContext: bigint | number /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpSendRequest(util.toPointer(hRequest), util.pwstrToFfi(lpszHeaders), dwHeadersLength, util.toPointer(lpOptional), dwOptionalLength, dwTotalLength, dwContext));
}

export function WinHttpSetCredentials(
  hRequest: Deno.PointerValue | Uint8Array /* ptr */,
  AuthTargets: number /* u32 */,
  AuthScheme: number /* u32 */,
  pwszUserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pAuthParams: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpSetCredentials(util.toPointer(hRequest), AuthTargets, AuthScheme, util.pwstrToFfi(pwszUserName), util.pwstrToFfi(pwszPassword), util.toPointer(pAuthParams)));
}

export function WinHttpQueryAuthSchemes(
  hRequest: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwSupportedSchemes: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwFirstScheme: Deno.PointerValue | Uint8Array /* ptr */,
  pdwAuthTarget: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpQueryAuthSchemes(util.toPointer(hRequest), util.toPointer(lpdwSupportedSchemes), util.toPointer(lpdwFirstScheme), util.toPointer(pdwAuthTarget)));
}

export function WinHttpReceiveResponse(
  hRequest: Deno.PointerValue | Uint8Array /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpReceiveResponse(util.toPointer(hRequest), util.toPointer(lpReserved)));
}

export function WinHttpQueryHeaders(
  hRequest: Deno.PointerValue | Uint8Array /* ptr */,
  dwInfoLevel: number /* u32 */,
  pwszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array /* ptr */,
  lpdwIndex: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpQueryHeaders(util.toPointer(hRequest), dwInfoLevel, util.pwstrToFfi(pwszName), util.toPointer(lpBuffer), util.toPointer(lpdwBufferLength), util.toPointer(lpdwIndex)));
}

export function WinHttpQueryHeadersEx(
  hRequest: Deno.PointerValue | Uint8Array /* ptr */,
  dwInfoLevel: number /* u32 */,
  ullFlags: bigint | number /* u64 */,
  uiCodePage: number /* u32 */,
  pdwIndex: Deno.PointerValue | Uint8Array /* ptr */,
  pHeaderName: Deno.PointerValue | Uint8Array /* ptr */,
  pBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  pdwBufferLength: Deno.PointerValue | Uint8Array /* ptr */,
  ppHeaders: Deno.PointerValue | Uint8Array /* ptr */,
  pdwHeadersCount: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpQueryHeadersEx(util.toPointer(hRequest), dwInfoLevel, ullFlags, uiCodePage, util.toPointer(pdwIndex), util.toPointer(pHeaderName), util.toPointer(pBuffer), util.toPointer(pdwBufferLength), util.toPointer(ppHeaders), util.toPointer(pdwHeadersCount));
}

export function WinHttpQueryConnectionGroup(
  hInternet: Deno.PointerValue | Uint8Array /* ptr */,
  pGuidConnection: Deno.PointerValue | Uint8Array /* ptr */,
  ullFlags: bigint | number /* u64 */,
  ppResult: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpQueryConnectionGroup(util.toPointer(hInternet), util.toPointer(pGuidConnection), ullFlags, util.toPointer(ppResult));
}

export function WinHttpFreeQueryConnectionGroupResult(
  pResult: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWINHTTP_dll.WinHttpFreeQueryConnectionGroupResult(util.toPointer(pResult));
}

export function WinHttpDetectAutoProxyConfigUrl(
  dwAutoDetectFlags: number /* u32 */,
  ppwstrAutoConfigUrl: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpDetectAutoProxyConfigUrl(dwAutoDetectFlags, util.toPointer(ppwstrAutoConfigUrl)));
}

export function WinHttpGetProxyForUrl(
  hSession: Deno.PointerValue | Uint8Array /* ptr */,
  lpcwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pAutoProxyOptions: Deno.PointerValue | Uint8Array /* ptr */,
  pProxyInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpGetProxyForUrl(util.toPointer(hSession), util.pwstrToFfi(lpcwszUrl), util.toPointer(pAutoProxyOptions), util.toPointer(pProxyInfo)));
}

export function WinHttpCreateProxyResolver(
  hSession: Deno.PointerValue | Uint8Array /* ptr */,
  phResolver: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpCreateProxyResolver(util.toPointer(hSession), util.toPointer(phResolver));
}

export function WinHttpGetProxyForUrlEx(
  hResolver: Deno.PointerValue | Uint8Array /* ptr */,
  pcwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pAutoProxyOptions: Deno.PointerValue | Uint8Array /* ptr */,
  pContext: bigint | number /* usize */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpGetProxyForUrlEx(util.toPointer(hResolver), util.pwstrToFfi(pcwszUrl), util.toPointer(pAutoProxyOptions), pContext);
}

export function WinHttpGetProxyForUrlEx2(
  hResolver: Deno.PointerValue | Uint8Array /* ptr */,
  pcwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pAutoProxyOptions: Deno.PointerValue | Uint8Array /* ptr */,
  cbInterfaceSelectionContext: number /* u32 */,
  pInterfaceSelectionContext: Deno.PointerValue | Uint8Array /* ptr */,
  pContext: bigint | number /* usize */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpGetProxyForUrlEx2(util.toPointer(hResolver), util.pwstrToFfi(pcwszUrl), util.toPointer(pAutoProxyOptions), cbInterfaceSelectionContext, util.toPointer(pInterfaceSelectionContext), pContext);
}

export function WinHttpGetProxyResult(
  hResolver: Deno.PointerValue | Uint8Array /* ptr */,
  pProxyResult: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpGetProxyResult(util.toPointer(hResolver), util.toPointer(pProxyResult));
}

export function WinHttpGetProxyResultEx(
  hResolver: Deno.PointerValue | Uint8Array /* ptr */,
  pProxyResultEx: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpGetProxyResultEx(util.toPointer(hResolver), util.toPointer(pProxyResultEx));
}

export function WinHttpFreeProxyResult(
  pProxyResult: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWINHTTP_dll.WinHttpFreeProxyResult(util.toPointer(pProxyResult));
}

export function WinHttpFreeProxyResultEx(
  pProxyResultEx: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWINHTTP_dll.WinHttpFreeProxyResultEx(util.toPointer(pProxyResultEx));
}

export function WinHttpResetAutoProxy(
  hSession: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpResetAutoProxy(util.toPointer(hSession), dwFlags);
}

export function WinHttpGetIEProxyConfigForCurrentUser(
  pProxyConfig: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWINHTTP_dll.WinHttpGetIEProxyConfigForCurrentUser(util.toPointer(pProxyConfig)));
}

export function WinHttpWriteProxySettings(
  hSession: Deno.PointerValue | Uint8Array /* ptr */,
  fForceUpdate: boolean /* Windows.Win32.Foundation.BOOL */,
  pWinHttpProxySettings: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpWriteProxySettings(util.toPointer(hSession), util.boolToFfi(fForceUpdate), util.toPointer(pWinHttpProxySettings));
}

export function WinHttpReadProxySettings(
  hSession: Deno.PointerValue | Uint8Array /* ptr */,
  pcwszConnectionName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fFallBackToDefaultSettings: boolean /* Windows.Win32.Foundation.BOOL */,
  fSetAutoDiscoverForDefaultSettings: boolean /* Windows.Win32.Foundation.BOOL */,
  pdwSettingsVersion: Deno.PointerValue | Uint8Array /* ptr */,
  pfDefaultSettingsAreReturned: Deno.PointerValue | Uint8Array /* ptr */,
  pWinHttpProxySettings: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpReadProxySettings(util.toPointer(hSession), util.pwstrToFfi(pcwszConnectionName), util.boolToFfi(fFallBackToDefaultSettings), util.boolToFfi(fSetAutoDiscoverForDefaultSettings), util.toPointer(pdwSettingsVersion), util.toPointer(pfDefaultSettingsAreReturned), util.toPointer(pWinHttpProxySettings));
}

export function WinHttpFreeProxySettings(
  pWinHttpProxySettings: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libWINHTTP_dll.WinHttpFreeProxySettings(util.toPointer(pWinHttpProxySettings));
}

export function WinHttpGetProxySettingsVersion(
  hSession: Deno.PointerValue | Uint8Array /* ptr */,
  pdwProxySettingsVersion: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpGetProxySettingsVersion(util.toPointer(hSession), util.toPointer(pdwProxySettingsVersion));
}

export function WinHttpSetProxySettingsPerUser(
  fProxySettingsPerUser: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpSetProxySettingsPerUser(util.boolToFfi(fProxySettingsPerUser));
}

export function WinHttpWebSocketCompleteUpgrade(
  hRequest: Deno.PointerValue | Uint8Array /* ptr */,
  pContext: bigint | number /* usize */,
): Deno.PointerValue /* ptr */ {
  return libWINHTTP_dll.WinHttpWebSocketCompleteUpgrade(util.toPointer(hRequest), pContext);
}

export function WinHttpWebSocketSend(
  hWebSocket: Deno.PointerValue | Uint8Array /* ptr */,
  eBufferType: WINHTTP_WEB_SOCKET_BUFFER_TYPE /* Windows.Win32.Networking.WinHttp.WINHTTP_WEB_SOCKET_BUFFER_TYPE */,
  pvBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwBufferLength: number /* u32 */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpWebSocketSend(util.toPointer(hWebSocket), eBufferType, util.toPointer(pvBuffer), dwBufferLength);
}

export function WinHttpWebSocketReceive(
  hWebSocket: Deno.PointerValue | Uint8Array /* ptr */,
  pvBuffer: Deno.PointerValue | Uint8Array /* ptr */,
  dwBufferLength: number /* u32 */,
  pdwBytesRead: Deno.PointerValue | Uint8Array /* ptr */,
  peBufferType: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpWebSocketReceive(util.toPointer(hWebSocket), util.toPointer(pvBuffer), dwBufferLength, util.toPointer(pdwBytesRead), util.toPointer(peBufferType));
}

export function WinHttpWebSocketShutdown(
  hWebSocket: Deno.PointerValue | Uint8Array /* ptr */,
  usStatus: number /* u16 */,
  pvReason: Deno.PointerValue | Uint8Array /* ptr */,
  dwReasonLength: number /* u32 */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpWebSocketShutdown(util.toPointer(hWebSocket), usStatus, util.toPointer(pvReason), dwReasonLength);
}

export function WinHttpWebSocketClose(
  hWebSocket: Deno.PointerValue | Uint8Array /* ptr */,
  usStatus: number /* u16 */,
  pvReason: Deno.PointerValue | Uint8Array /* ptr */,
  dwReasonLength: number /* u32 */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpWebSocketClose(util.toPointer(hWebSocket), usStatus, util.toPointer(pvReason), dwReasonLength);
}

export function WinHttpWebSocketQueryCloseStatus(
  hWebSocket: Deno.PointerValue | Uint8Array /* ptr */,
  pusStatus: Deno.PointerValue | Uint8Array /* ptr */,
  pvReason: Deno.PointerValue | Uint8Array /* ptr */,
  dwReasonLength: number /* u32 */,
  pdwReasonLengthConsumed: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libWINHTTP_dll.WinHttpWebSocketQueryCloseStatus(util.toPointer(hWebSocket), util.toPointer(pusStatus), util.toPointer(pvReason), dwReasonLength, util.toPointer(pdwReasonLengthConsumed));
}

