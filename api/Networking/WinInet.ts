/// Auto-generated by Deno Win32: Windows.Win32.Networking.WinInet.Apis

import * as util from "../../util.ts";

// Enums
export type CACHE_CONFIG = number;
export type FTP_FLAGS = number;
export type INTERNET_CONNECTION = number;
export type HTTP_ADDREQ_FLAG = number;
export type INTERNET_COOKIE_FLAGS = number;
export type PROXY_AUTO_DETECT_TYPE = number;
export type INTERNET_AUTODIAL = number;
export type GOPHER_TYPE = number;
export type INTERNET_PER_CONN = number;
export type INTERNET_ACCESS_TYPE = number;
export type INTERNET_STATE = number;
export type INTERNET_SCHEME = number;
export type InternetCookieState = number;
export type WPAD_CACHE_DELETE = number;
export type FORTCMD = number;
export type FORTSTAT = number;
export type REQUEST_TIMES = number;
export type HTTP_PUSH_WAIT_TYPE = number;
export type WININET_SYNC_MODE = number;
export type APP_CACHE_STATE = number;
export type APP_CACHE_FINALIZE_STATE = number;
export type URL_CACHE_LIMIT_TYPE = number;
export type HTTP_WEB_SOCKET_OPERATION = number;
export type HTTP_WEB_SOCKET_BUFFER_TYPE = number;
export type HTTP_WEB_SOCKET_CLOSE_STATUS = number;
export type HTTP_POLICY_EXTENSION_TYPE = number;
export type HTTP_POLICY_EXTENSION_VERSION = number;
export type WIN_HTTP_CREATE_URL_FLAGS = number;

// Constants
export const CACHE_CONFIG_FORCE_CLEANUP_FC = 32;
export const CACHE_CONFIG_DISK_CACHE_PATHS_FC = 64;
export const CACHE_CONFIG_SYNC_MODE_FC = 128;
export const CACHE_CONFIG_CONTENT_PATHS_FC = 256;
export const CACHE_CONFIG_HISTORY_PATHS_FC = 1024;
export const CACHE_CONFIG_COOKIES_PATHS_FC = 512;
export const CACHE_CONFIG_QUOTA_FC = 2048;
export const CACHE_CONFIG_USER_MODE_FC = 4096;
export const CACHE_CONFIG_CONTENT_USAGE_FC = 8192;
export const CACHE_CONFIG_STICKY_CONTENT_USAGE_FC = 16384;
export const FTP_TRANSFER_TYPE_ASCII = 1;
export const FTP_TRANSFER_TYPE_BINARY = 2;
export const FTP_TRANSFER_TYPE_UNKNOWN = 0;
export const INTERNET_FLAG_TRANSFER_ASCII = 1;
export const INTERNET_FLAG_TRANSFER_BINARY = 2;
export const INTERNET_CONNECTION_CONFIGURED = 64;
export const INTERNET_CONNECTION_LAN = 2;
export const INTERNET_CONNECTION_MODEM = 1;
export const INTERNET_CONNECTION_MODEM_BUSY = 8;
export const INTERNET_CONNECTION_OFFLINE = 32;
export const INTERNET_CONNECTION_PROXY = 4;
export const INTERNET_RAS_INSTALLED = 16;
export const HTTP_ADDREQ_FLAG_ADD = 536870912;
export const HTTP_ADDREQ_FLAG_ADD_IF_NEW = 268435456;
export const HTTP_ADDREQ_FLAG_COALESCE = 1073741824;
export const HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA = 1073741824;
export const HTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON = 16777216;
export const HTTP_ADDREQ_FLAG_REPLACE = 2147483648;
export const INTERNET_COOKIE_HTTPONLY = 8192;
export const INTERNET_COOKIE_THIRD_PARTY = 16;
export const INTERNET_FLAG_RESTRICTED_ZONE = 131072;
export const PROXY_AUTO_DETECT_TYPE_DHCP = 1;
export const PROXY_AUTO_DETECT_TYPE_DNS_A = 2;
export const INTERNET_AUTODIAL_FAILIFSECURITYCHECK = 4;
export const INTERNET_AUTODIAL_FORCE_ONLINE = 1;
export const INTERNET_AUTODIAL_FORCE_UNATTENDED = 2;
export const INTERNET_AUTODIAL_OVERRIDE_NET_PRESENT = 8;
export const GOPHER_TYPE_ASK = 1073741824;
export const GOPHER_TYPE_BINARY = 512;
export const GOPHER_TYPE_BITMAP = 16384;
export const GOPHER_TYPE_CALENDAR = 524288;
export const GOPHER_TYPE_CSO = 4;
export const GOPHER_TYPE_DIRECTORY = 2;
export const GOPHER_TYPE_DOS_ARCHIVE = 32;
export const GOPHER_TYPE_ERROR = 8;
export const GOPHER_TYPE_GIF = 4096;
export const GOPHER_TYPE_GOPHER_PLUS = 2147483648;
export const GOPHER_TYPE_HTML = 131072;
export const GOPHER_TYPE_IMAGE = 8192;
export const GOPHER_TYPE_INDEX_SERVER = 128;
export const GOPHER_TYPE_INLINE = 1048576;
export const GOPHER_TYPE_MAC_BINHEX = 16;
export const GOPHER_TYPE_MOVIE = 32768;
export const GOPHER_TYPE_PDF = 262144;
export const GOPHER_TYPE_REDUNDANT = 1024;
export const GOPHER_TYPE_SOUND = 65536;
export const GOPHER_TYPE_TELNET = 256;
export const GOPHER_TYPE_TEXT_FILE = 1;
export const GOPHER_TYPE_TN3270 = 2048;
export const GOPHER_TYPE_UNIX_UUENCODED = 64;
export const GOPHER_TYPE_UNKNOWN = 536870912;
export const INTERNET_PER_CONN_AUTOCONFIG_URL = 4;
export const INTERNET_PER_CONN_AUTODISCOVERY_FLAGS = 5;
export const INTERNET_PER_CONN_FLAGS = 1;
export const INTERNET_PER_CONN_PROXY_BYPASS = 3;
export const INTERNET_PER_CONN_PROXY_SERVER = 2;
export const INTERNET_PER_CONN_AUTOCONFIG_SECONDARY_URL = 6;
export const INTERNET_PER_CONN_AUTOCONFIG_RELOAD_DELAY_MINS = 7;
export const INTERNET_PER_CONN_AUTOCONFIG_LAST_DETECT_TIME = 8;
export const INTERNET_PER_CONN_AUTOCONFIG_LAST_DETECT_URL = 9;
export const INTERNET_OPEN_TYPE_DIRECT = 1;
export const INTERNET_OPEN_TYPE_PRECONFIG = 0;
export const INTERNET_OPEN_TYPE_PROXY = 3;
export const INTERNET_STATE_CONNECTED = 1;
export const INTERNET_STATE_DISCONNECTED = 2;
export const INTERNET_STATE_DISCONNECTED_BY_USER = 16;
export const INTERNET_STATE_IDLE = 256;
export const INTERNET_STATE_BUSY = 512;
export const DIALPROP_USERNAME = `UserName`;
export const DIALPROP_PASSWORD = `Password`;
export const DIALPROP_DOMAIN = `Domain`;
export const DIALPROP_SAVEPASSWORD = `SavePassword`;
export const DIALPROP_REDIALCOUNT = `RedialCount`;
export const DIALPROP_REDIALINTERVAL = `RedialInterval`;
export const DIALPROP_PHONENUMBER = `PhoneNumber`;
export const DIALPROP_LASTERROR = `LastError`;
export const DIALPROP_RESOLVEDPHONE = `ResolvedPhone`;
export const DIALENG_OperationComplete = 65536;
export const DIALENG_RedialAttempt = 65537;
export const DIALENG_RedialWait = 65538;
export const INTERNET_INVALID_PORT_NUMBER = 0;
export const INTERNET_DEFAULT_FTP_PORT = 21;
export const INTERNET_DEFAULT_GOPHER_PORT = 70;
export const INTERNET_DEFAULT_SOCKS_PORT = 1080;
export const INTERNET_MAX_HOST_NAME_LENGTH = 256;
export const INTERNET_MAX_USER_NAME_LENGTH = 128;
export const INTERNET_MAX_PASSWORD_LENGTH = 128;
export const INTERNET_MAX_PORT_NUMBER_LENGTH = 5;
export const INTERNET_MAX_PORT_NUMBER_VALUE = 65535;
export const INTERNET_KEEP_ALIVE_UNKNOWN = 4294967295;
export const INTERNET_KEEP_ALIVE_ENABLED = 1;
export const INTERNET_KEEP_ALIVE_DISABLED = 0;
export const INTERNET_REQFLAG_FROM_CACHE = 1;
export const INTERNET_REQFLAG_ASYNC = 2;
export const INTERNET_REQFLAG_VIA_PROXY = 4;
export const INTERNET_REQFLAG_NO_HEADERS = 8;
export const INTERNET_REQFLAG_PASSIVE = 16;
export const INTERNET_REQFLAG_CACHE_WRITE_DISABLED = 64;
export const INTERNET_REQFLAG_NET_TIMEOUT = 128;
export const INTERNET_FLAG_IDN_DIRECT = 1;
export const INTERNET_FLAG_IDN_PROXY = 2;
export const INTERNET_FLAG_RELOAD = 2147483648;
export const INTERNET_FLAG_RAW_DATA = 1073741824;
export const INTERNET_FLAG_EXISTING_CONNECT = 536870912;
export const INTERNET_FLAG_ASYNC = 268435456;
export const INTERNET_FLAG_PASSIVE = 134217728;
export const INTERNET_FLAG_NO_CACHE_WRITE = 67108864;
export const INTERNET_FLAG_DONT_CACHE = 67108864;
export const INTERNET_FLAG_MAKE_PERSISTENT = 33554432;
export const INTERNET_FLAG_FROM_CACHE = 16777216;
export const INTERNET_FLAG_OFFLINE = 16777216;
export const INTERNET_FLAG_SECURE = 8388608;
export const INTERNET_FLAG_KEEP_CONNECTION = 4194304;
export const INTERNET_FLAG_NO_AUTO_REDIRECT = 2097152;
export const INTERNET_FLAG_READ_PREFETCH = 1048576;
export const INTERNET_FLAG_NO_COOKIES = 524288;
export const INTERNET_FLAG_NO_AUTH = 262144;
export const INTERNET_FLAG_CACHE_IF_NET_FAIL = 65536;
export const INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP = 32768;
export const INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS = 16384;
export const INTERNET_FLAG_IGNORE_CERT_DATE_INVALID = 8192;
export const INTERNET_FLAG_IGNORE_CERT_CN_INVALID = 4096;
export const INTERNET_FLAG_RESYNCHRONIZE = 2048;
export const INTERNET_FLAG_HYPERLINK = 1024;
export const INTERNET_FLAG_NO_UI = 512;
export const INTERNET_FLAG_PRAGMA_NOCACHE = 256;
export const INTERNET_FLAG_CACHE_ASYNC = 128;
export const INTERNET_FLAG_FORMS_SUBMIT = 64;
export const INTERNET_FLAG_FWD_BACK = 32;
export const INTERNET_FLAG_NEED_FILE = 16;
export const INTERNET_FLAG_MUST_CACHE_REQUEST = 16;
export const INTERNET_ERROR_MASK_INSERT_CDROM = 1;
export const INTERNET_ERROR_MASK_COMBINED_SEC_CERT = 2;
export const INTERNET_ERROR_MASK_NEED_MSN_SSPI_PKG = 4;
export const INTERNET_ERROR_MASK_LOGIN_FAILURE_DISPLAY_ENTITY_BODY = 8;
export const WININET_API_FLAG_ASYNC = 1;
export const WININET_API_FLAG_SYNC = 4;
export const WININET_API_FLAG_USE_CONTEXT = 8;
export const INTERNET_NO_CALLBACK = 0;
export const IDSI_FLAG_KEEP_ALIVE = 1;
export const IDSI_FLAG_SECURE = 2;
export const IDSI_FLAG_PROXY = 4;
export const IDSI_FLAG_TUNNEL = 8;
export const INTERNET_PER_CONN_FLAGS_UI = 10;
export const PROXY_TYPE_DIRECT = 1;
export const PROXY_TYPE_PROXY = 2;
export const PROXY_TYPE_AUTO_PROXY_URL = 4;
export const PROXY_TYPE_AUTO_DETECT = 8;
export const AUTO_PROXY_FLAG_USER_SET = 1;
export const AUTO_PROXY_FLAG_ALWAYS_DETECT = 2;
export const AUTO_PROXY_FLAG_DETECTION_RUN = 4;
export const AUTO_PROXY_FLAG_MIGRATED = 8;
export const AUTO_PROXY_FLAG_DONT_CACHE_PROXY_RESULT = 16;
export const AUTO_PROXY_FLAG_CACHE_INIT_RUN = 32;
export const AUTO_PROXY_FLAG_DETECTION_SUSPECT = 64;
export const ISO_FORCE_DISCONNECTED = 1;
export const INTERNET_RFC1123_FORMAT = 0;
export const INTERNET_RFC1123_BUFSIZE = 30;
export const ICU_USERNAME = 1073741824;
export const INTERNET_OPEN_TYPE_PRECONFIG_WITH_NO_AUTOPROXY = 4;
export const INTERNET_SERVICE_FTP = 1;
export const INTERNET_SERVICE_GOPHER = 2;
export const INTERNET_SERVICE_HTTP = 3;
export const IRF_ASYNC = 1;
export const IRF_SYNC = 4;
export const IRF_USE_CONTEXT = 8;
export const IRF_NO_WAIT = 8;
export const ISO_GLOBAL = 1;
export const ISO_REGISTRY = 2;
export const INTERNET_OPTION_CALLBACK = 1;
export const INTERNET_OPTION_CONNECT_TIMEOUT = 2;
export const INTERNET_OPTION_CONNECT_RETRIES = 3;
export const INTERNET_OPTION_CONNECT_BACKOFF = 4;
export const INTERNET_OPTION_SEND_TIMEOUT = 5;
export const INTERNET_OPTION_CONTROL_SEND_TIMEOUT = 5;
export const INTERNET_OPTION_RECEIVE_TIMEOUT = 6;
export const INTERNET_OPTION_CONTROL_RECEIVE_TIMEOUT = 6;
export const INTERNET_OPTION_DATA_SEND_TIMEOUT = 7;
export const INTERNET_OPTION_DATA_RECEIVE_TIMEOUT = 8;
export const INTERNET_OPTION_HANDLE_TYPE = 9;
export const INTERNET_OPTION_LISTEN_TIMEOUT = 11;
export const INTERNET_OPTION_READ_BUFFER_SIZE = 12;
export const INTERNET_OPTION_WRITE_BUFFER_SIZE = 13;
export const INTERNET_OPTION_ASYNC_ID = 15;
export const INTERNET_OPTION_ASYNC_PRIORITY = 16;
export const INTERNET_OPTION_PARENT_HANDLE = 21;
export const INTERNET_OPTION_KEEP_CONNECTION = 22;
export const INTERNET_OPTION_REQUEST_FLAGS = 23;
export const INTERNET_OPTION_EXTENDED_ERROR = 24;
export const INTERNET_OPTION_OFFLINE_MODE = 26;
export const INTERNET_OPTION_CACHE_STREAM_HANDLE = 27;
export const INTERNET_OPTION_USERNAME = 28;
export const INTERNET_OPTION_PASSWORD = 29;
export const INTERNET_OPTION_ASYNC = 30;
export const INTERNET_OPTION_SECURITY_FLAGS = 31;
export const INTERNET_OPTION_SECURITY_CERTIFICATE_STRUCT = 32;
export const INTERNET_OPTION_DATAFILE_NAME = 33;
export const INTERNET_OPTION_URL = 34;
export const INTERNET_OPTION_SECURITY_CERTIFICATE = 35;
export const INTERNET_OPTION_SECURITY_KEY_BITNESS = 36;
export const INTERNET_OPTION_REFRESH = 37;
export const INTERNET_OPTION_PROXY = 38;
export const INTERNET_OPTION_SETTINGS_CHANGED = 39;
export const INTERNET_OPTION_VERSION = 40;
export const INTERNET_OPTION_USER_AGENT = 41;
export const INTERNET_OPTION_END_BROWSER_SESSION = 42;
export const INTERNET_OPTION_PROXY_USERNAME = 43;
export const INTERNET_OPTION_PROXY_PASSWORD = 44;
export const INTERNET_OPTION_CONTEXT_VALUE = 45;
export const INTERNET_OPTION_CONNECT_LIMIT = 46;
export const INTERNET_OPTION_SECURITY_SELECT_CLIENT_CERT = 47;
export const INTERNET_OPTION_POLICY = 48;
export const INTERNET_OPTION_DISCONNECTED_TIMEOUT = 49;
export const INTERNET_OPTION_CONNECTED_STATE = 50;
export const INTERNET_OPTION_IDLE_STATE = 51;
export const INTERNET_OPTION_OFFLINE_SEMANTICS = 52;
export const INTERNET_OPTION_SECONDARY_CACHE_KEY = 53;
export const INTERNET_OPTION_CALLBACK_FILTER = 54;
export const INTERNET_OPTION_CONNECT_TIME = 55;
export const INTERNET_OPTION_SEND_THROUGHPUT = 56;
export const INTERNET_OPTION_RECEIVE_THROUGHPUT = 57;
export const INTERNET_OPTION_REQUEST_PRIORITY = 58;
export const INTERNET_OPTION_HTTP_VERSION = 59;
export const INTERNET_OPTION_RESET_URLCACHE_SESSION = 60;
export const INTERNET_OPTION_ERROR_MASK = 62;
export const INTERNET_OPTION_FROM_CACHE_TIMEOUT = 63;
export const INTERNET_OPTION_BYPASS_EDITED_ENTRY = 64;
export const INTERNET_OPTION_HTTP_DECODING = 65;
export const INTERNET_OPTION_DIAGNOSTIC_SOCKET_INFO = 67;
export const INTERNET_OPTION_CODEPAGE = 68;
export const INTERNET_OPTION_CACHE_TIMESTAMPS = 69;
export const INTERNET_OPTION_DISABLE_AUTODIAL = 70;
export const INTERNET_OPTION_MAX_CONNS_PER_SERVER = 73;
export const INTERNET_OPTION_MAX_CONNS_PER_1_0_SERVER = 74;
export const INTERNET_OPTION_PER_CONNECTION_OPTION = 75;
export const INTERNET_OPTION_DIGEST_AUTH_UNLOAD = 76;
export const INTERNET_OPTION_IGNORE_OFFLINE = 77;
export const INTERNET_OPTION_IDENTITY = 78;
export const INTERNET_OPTION_REMOVE_IDENTITY = 79;
export const INTERNET_OPTION_ALTER_IDENTITY = 80;
export const INTERNET_OPTION_SUPPRESS_BEHAVIOR = 81;
export const INTERNET_OPTION_AUTODIAL_MODE = 82;
export const INTERNET_OPTION_AUTODIAL_CONNECTION = 83;
export const INTERNET_OPTION_CLIENT_CERT_CONTEXT = 84;
export const INTERNET_OPTION_AUTH_FLAGS = 85;
export const INTERNET_OPTION_COOKIES_3RD_PARTY = 86;
export const INTERNET_OPTION_DISABLE_PASSPORT_AUTH = 87;
export const INTERNET_OPTION_SEND_UTF8_SERVERNAME_TO_PROXY = 88;
export const INTERNET_OPTION_EXEMPT_CONNECTION_LIMIT = 89;
export const INTERNET_OPTION_ENABLE_PASSPORT_AUTH = 90;
export const INTERNET_OPTION_HIBERNATE_INACTIVE_WORKER_THREADS = 91;
export const INTERNET_OPTION_ACTIVATE_WORKER_THREADS = 92;
export const INTERNET_OPTION_RESTORE_WORKER_THREAD_DEFAULTS = 93;
export const INTERNET_OPTION_SOCKET_SEND_BUFFER_LENGTH = 94;
export const INTERNET_OPTION_PROXY_SETTINGS_CHANGED = 95;
export const INTERNET_OPTION_DATAFILE_EXT = 96;
export const INTERNET_OPTION_CODEPAGE_PATH = 100;
export const INTERNET_OPTION_CODEPAGE_EXTRA = 101;
export const INTERNET_OPTION_IDN = 102;
export const INTERNET_OPTION_MAX_CONNS_PER_PROXY = 103;
export const INTERNET_OPTION_SUPPRESS_SERVER_AUTH = 104;
export const INTERNET_OPTION_SERVER_CERT_CHAIN_CONTEXT = 105;
export const INTERNET_OPTION_ENABLE_REDIRECT_CACHE_READ = 122;
export const INTERNET_OPTION_COMPRESSED_CONTENT_LENGTH = 147;
export const INTERNET_OPTION_ENABLE_HTTP_PROTOCOL = 148;
export const INTERNET_OPTION_HTTP_PROTOCOL_USED = 149;
export const INTERNET_OPTION_ENCODE_EXTRA = 155;
export const INTERNET_OPTION_HSTS = 157;
export const INTERNET_OPTION_ENTERPRISE_CONTEXT = 159;
export const INTERNET_OPTION_CONNECTION_FILTER = 162;
export const INTERNET_OPTION_REFERER_TOKEN_BINDING_HOSTNAME = 163;
export const INTERNET_OPTION_TOKEN_BINDING_PUBLIC_KEY = 181;
export const INTERNET_OPTION_COOKIES_SAME_SITE_LEVEL = 187;
export const INTERNET_FIRST_OPTION = 1;
export const INTERNET_LAST_OPTION = 187;
export const INTERNET_PRIORITY_FOREGROUND = 1000;
export const HTTP_COOKIES_SAME_SITE_LEVEL_UNKNOWN = 0;
export const HTTP_COOKIES_SAME_SITE_LEVEL_SAME_SITE = 1;
export const HTTP_COOKIES_SAME_SITE_LEVEL_CROSS_SITE_LAX = 2;
export const HTTP_COOKIES_SAME_SITE_LEVEL_CROSS_SITE = 3;
export const HTTP_COOKIES_SAME_SITE_LEVEL_MAX = 3;
export const HTTP_PROTOCOL_FLAG_HTTP2 = 2;
export const HTTP_PROTOCOL_MASK = 2;
export const INTERNET_HANDLE_TYPE_INTERNET = 1;
export const INTERNET_HANDLE_TYPE_CONNECT_FTP = 2;
export const INTERNET_HANDLE_TYPE_CONNECT_GOPHER = 3;
export const INTERNET_HANDLE_TYPE_CONNECT_HTTP = 4;
export const INTERNET_HANDLE_TYPE_FTP_FIND = 5;
export const INTERNET_HANDLE_TYPE_FTP_FIND_HTML = 6;
export const INTERNET_HANDLE_TYPE_FTP_FILE = 7;
export const INTERNET_HANDLE_TYPE_FTP_FILE_HTML = 8;
export const INTERNET_HANDLE_TYPE_GOPHER_FIND = 9;
export const INTERNET_HANDLE_TYPE_GOPHER_FIND_HTML = 10;
export const INTERNET_HANDLE_TYPE_GOPHER_FILE = 11;
export const INTERNET_HANDLE_TYPE_GOPHER_FILE_HTML = 12;
export const INTERNET_HANDLE_TYPE_HTTP_REQUEST = 13;
export const INTERNET_HANDLE_TYPE_FILE_REQUEST = 14;
export const AUTH_FLAG_DISABLE_NEGOTIATE = 1;
export const AUTH_FLAG_ENABLE_NEGOTIATE = 2;
export const AUTH_FLAG_DISABLE_BASIC_CLEARCHANNEL = 4;
export const AUTH_FLAG_DISABLE_SERVER_AUTH = 8;
export const SECURITY_FLAG_UNKNOWNBIT = 2147483648;
export const SECURITY_FLAG_FORTEZZA = 134217728;
export const SECURITY_FLAG_NORMALBITNESS = 268435456;
export const SECURITY_FLAG_SSL = 2;
export const SECURITY_FLAG_SSL3 = 4;
export const SECURITY_FLAG_PCT = 8;
export const SECURITY_FLAG_PCT4 = 16;
export const SECURITY_FLAG_IETFSSL4 = 32;
export const SECURITY_FLAG_40BIT = 268435456;
export const SECURITY_FLAG_128BIT = 536870912;
export const SECURITY_FLAG_56BIT = 1073741824;
export const SECURITY_FLAG_IGNORE_REVOCATION = 128;
export const SECURITY_FLAG_IGNORE_WRONG_USAGE = 512;
export const SECURITY_FLAG_IGNORE_WEAK_SIGNATURE = 65536;
export const SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTPS = 16384;
export const SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTP = 32768;
export const SECURITY_FLAG_OPT_IN_WEAK_SIGNATURE = 131072;
export const AUTODIAL_MODE_NEVER = 1;
export const AUTODIAL_MODE_ALWAYS = 2;
export const AUTODIAL_MODE_NO_NETWORK_PRESENT = 4;
export const INTERNET_STATUS_RESOLVING_NAME = 10;
export const INTERNET_STATUS_NAME_RESOLVED = 11;
export const INTERNET_STATUS_CONNECTING_TO_SERVER = 20;
export const INTERNET_STATUS_CONNECTED_TO_SERVER = 21;
export const INTERNET_STATUS_SENDING_REQUEST = 30;
export const INTERNET_STATUS_REQUEST_SENT = 31;
export const INTERNET_STATUS_RECEIVING_RESPONSE = 40;
export const INTERNET_STATUS_RESPONSE_RECEIVED = 41;
export const INTERNET_STATUS_CTL_RESPONSE_RECEIVED = 42;
export const INTERNET_STATUS_PREFETCH = 43;
export const INTERNET_STATUS_CLOSING_CONNECTION = 50;
export const INTERNET_STATUS_CONNECTION_CLOSED = 51;
export const INTERNET_STATUS_HANDLE_CREATED = 60;
export const INTERNET_STATUS_HANDLE_CLOSING = 70;
export const INTERNET_STATUS_DETECTING_PROXY = 80;
export const INTERNET_STATUS_REQUEST_COMPLETE = 100;
export const INTERNET_STATUS_REDIRECT = 110;
export const INTERNET_STATUS_INTERMEDIATE_RESPONSE = 120;
export const INTERNET_STATUS_USER_INPUT_REQUIRED = 140;
export const INTERNET_STATUS_STATE_CHANGE = 200;
export const INTERNET_STATUS_COOKIE_SENT = 320;
export const INTERNET_STATUS_COOKIE_RECEIVED = 321;
export const INTERNET_STATUS_PRIVACY_IMPACTED = 324;
export const INTERNET_STATUS_P3P_HEADER = 325;
export const INTERNET_STATUS_P3P_POLICYREF = 326;
export const INTERNET_STATUS_COOKIE_HISTORY = 327;
export const MAX_GOPHER_DISPLAY_TEXT = 128;
export const MAX_GOPHER_SELECTOR_TEXT = 256;
export const MAX_GOPHER_HOST_NAME = 256;
export const MAX_GOPHER_CATEGORY_NAME = 128;
export const MAX_GOPHER_ATTRIBUTE_NAME = 128;
export const MIN_GOPHER_ATTRIBUTE_LENGTH = 256;
export const GOPHER_INFO_CATEGORY = `+INFO`;
export const GOPHER_ADMIN_CATEGORY = `+ADMIN`;
export const GOPHER_VIEWS_CATEGORY = `+VIEWS`;
export const GOPHER_ABSTRACT_CATEGORY = `+ABSTRACT`;
export const GOPHER_VERONICA_CATEGORY = `+VERONICA`;
export const GOPHER_ADMIN_ATTRIBUTE = `Admin`;
export const GOPHER_MOD_DATE_ATTRIBUTE = `Mod-Date`;
export const GOPHER_TTL_ATTRIBUTE = `TTL`;
export const GOPHER_SCORE_ATTRIBUTE = `Score`;
export const GOPHER_RANGE_ATTRIBUTE = `Score-range`;
export const GOPHER_SITE_ATTRIBUTE = `Site`;
export const GOPHER_ORG_ATTRIBUTE = `Org`;
export const GOPHER_LOCATION_ATTRIBUTE = `Loc`;
export const GOPHER_GEOG_ATTRIBUTE = `Geog`;
export const GOPHER_TIMEZONE_ATTRIBUTE = `TZ`;
export const GOPHER_PROVIDER_ATTRIBUTE = `Provider`;
export const GOPHER_VERSION_ATTRIBUTE = `Version`;
export const GOPHER_ABSTRACT_ATTRIBUTE = `Abstract`;
export const GOPHER_VIEW_ATTRIBUTE = `View`;
export const GOPHER_TREEWALK_ATTRIBUTE = `treewalk`;
export const GOPHER_ATTRIBUTE_ID_BASE = 2882325504;
export const GOPHER_CATEGORY_ID_ALL = 2882325505;
export const GOPHER_CATEGORY_ID_INFO = 2882325506;
export const GOPHER_CATEGORY_ID_ADMIN = 2882325507;
export const GOPHER_CATEGORY_ID_VIEWS = 2882325508;
export const GOPHER_CATEGORY_ID_ABSTRACT = 2882325509;
export const GOPHER_CATEGORY_ID_VERONICA = 2882325510;
export const GOPHER_CATEGORY_ID_ASK = 2882325511;
export const GOPHER_CATEGORY_ID_UNKNOWN = 2882325512;
export const GOPHER_ATTRIBUTE_ID_ALL = 2882325513;
export const GOPHER_ATTRIBUTE_ID_ADMIN = 2882325514;
export const GOPHER_ATTRIBUTE_ID_MOD_DATE = 2882325515;
export const GOPHER_ATTRIBUTE_ID_TTL = 2882325516;
export const GOPHER_ATTRIBUTE_ID_SCORE = 2882325517;
export const GOPHER_ATTRIBUTE_ID_RANGE = 2882325518;
export const GOPHER_ATTRIBUTE_ID_SITE = 2882325519;
export const GOPHER_ATTRIBUTE_ID_ORG = 2882325520;
export const GOPHER_ATTRIBUTE_ID_LOCATION = 2882325521;
export const GOPHER_ATTRIBUTE_ID_GEOG = 2882325522;
export const GOPHER_ATTRIBUTE_ID_TIMEZONE = 2882325523;
export const GOPHER_ATTRIBUTE_ID_PROVIDER = 2882325524;
export const GOPHER_ATTRIBUTE_ID_VERSION = 2882325525;
export const GOPHER_ATTRIBUTE_ID_ABSTRACT = 2882325526;
export const GOPHER_ATTRIBUTE_ID_VIEW = 2882325527;
export const GOPHER_ATTRIBUTE_ID_TREEWALK = 2882325528;
export const GOPHER_ATTRIBUTE_ID_UNKNOWN = 2882325529;
export const HTTP_MAJOR_VERSION = 1;
export const HTTP_MINOR_VERSION = 0;
export const HTTP_VERSIONA = `HTTP/1.0`;
export const HTTP_VERSIONW = `HTTP/1.0`;
export const HTTP_QUERY_MIME_VERSION = 0;
export const HTTP_QUERY_CONTENT_TYPE = 1;
export const HTTP_QUERY_CONTENT_TRANSFER_ENCODING = 2;
export const HTTP_QUERY_CONTENT_ID = 3;
export const HTTP_QUERY_CONTENT_DESCRIPTION = 4;
export const HTTP_QUERY_CONTENT_LENGTH = 5;
export const HTTP_QUERY_CONTENT_LANGUAGE = 6;
export const HTTP_QUERY_ALLOW = 7;
export const HTTP_QUERY_PUBLIC = 8;
export const HTTP_QUERY_DATE = 9;
export const HTTP_QUERY_EXPIRES = 10;
export const HTTP_QUERY_LAST_MODIFIED = 11;
export const HTTP_QUERY_MESSAGE_ID = 12;
export const HTTP_QUERY_URI = 13;
export const HTTP_QUERY_DERIVED_FROM = 14;
export const HTTP_QUERY_COST = 15;
export const HTTP_QUERY_LINK = 16;
export const HTTP_QUERY_PRAGMA = 17;
export const HTTP_QUERY_VERSION = 18;
export const HTTP_QUERY_STATUS_CODE = 19;
export const HTTP_QUERY_STATUS_TEXT = 20;
export const HTTP_QUERY_RAW_HEADERS = 21;
export const HTTP_QUERY_RAW_HEADERS_CRLF = 22;
export const HTTP_QUERY_CONNECTION = 23;
export const HTTP_QUERY_ACCEPT = 24;
export const HTTP_QUERY_ACCEPT_CHARSET = 25;
export const HTTP_QUERY_ACCEPT_ENCODING = 26;
export const HTTP_QUERY_ACCEPT_LANGUAGE = 27;
export const HTTP_QUERY_AUTHORIZATION = 28;
export const HTTP_QUERY_CONTENT_ENCODING = 29;
export const HTTP_QUERY_FORWARDED = 30;
export const HTTP_QUERY_FROM = 31;
export const HTTP_QUERY_IF_MODIFIED_SINCE = 32;
export const HTTP_QUERY_LOCATION = 33;
export const HTTP_QUERY_ORIG_URI = 34;
export const HTTP_QUERY_REFERER = 35;
export const HTTP_QUERY_RETRY_AFTER = 36;
export const HTTP_QUERY_SERVER = 37;
export const HTTP_QUERY_TITLE = 38;
export const HTTP_QUERY_USER_AGENT = 39;
export const HTTP_QUERY_WWW_AUTHENTICATE = 40;
export const HTTP_QUERY_PROXY_AUTHENTICATE = 41;
export const HTTP_QUERY_ACCEPT_RANGES = 42;
export const HTTP_QUERY_SET_COOKIE = 43;
export const HTTP_QUERY_COOKIE = 44;
export const HTTP_QUERY_REQUEST_METHOD = 45;
export const HTTP_QUERY_REFRESH = 46;
export const HTTP_QUERY_CONTENT_DISPOSITION = 47;
export const HTTP_QUERY_AGE = 48;
export const HTTP_QUERY_CACHE_CONTROL = 49;
export const HTTP_QUERY_CONTENT_BASE = 50;
export const HTTP_QUERY_CONTENT_LOCATION = 51;
export const HTTP_QUERY_CONTENT_MD5 = 52;
export const HTTP_QUERY_CONTENT_RANGE = 53;
export const HTTP_QUERY_ETAG = 54;
export const HTTP_QUERY_HOST = 55;
export const HTTP_QUERY_IF_MATCH = 56;
export const HTTP_QUERY_IF_NONE_MATCH = 57;
export const HTTP_QUERY_IF_RANGE = 58;
export const HTTP_QUERY_IF_UNMODIFIED_SINCE = 59;
export const HTTP_QUERY_MAX_FORWARDS = 60;
export const HTTP_QUERY_PROXY_AUTHORIZATION = 61;
export const HTTP_QUERY_RANGE = 62;
export const HTTP_QUERY_TRANSFER_ENCODING = 63;
export const HTTP_QUERY_UPGRADE = 64;
export const HTTP_QUERY_VARY = 65;
export const HTTP_QUERY_VIA = 66;
export const HTTP_QUERY_WARNING = 67;
export const HTTP_QUERY_EXPECT = 68;
export const HTTP_QUERY_PROXY_CONNECTION = 69;
export const HTTP_QUERY_UNLESS_MODIFIED_SINCE = 70;
export const HTTP_QUERY_ECHO_REQUEST = 71;
export const HTTP_QUERY_ECHO_REPLY = 72;
export const HTTP_QUERY_ECHO_HEADERS = 73;
export const HTTP_QUERY_ECHO_HEADERS_CRLF = 74;
export const HTTP_QUERY_PROXY_SUPPORT = 75;
export const HTTP_QUERY_AUTHENTICATION_INFO = 76;
export const HTTP_QUERY_PASSPORT_URLS = 77;
export const HTTP_QUERY_PASSPORT_CONFIG = 78;
export const HTTP_QUERY_X_CONTENT_TYPE_OPTIONS = 79;
export const HTTP_QUERY_P3P = 80;
export const HTTP_QUERY_X_P2P_PEERDIST = 81;
export const HTTP_QUERY_TRANSLATE = 82;
export const HTTP_QUERY_X_UA_COMPATIBLE = 83;
export const HTTP_QUERY_DEFAULT_STYLE = 84;
export const HTTP_QUERY_X_FRAME_OPTIONS = 85;
export const HTTP_QUERY_X_XSS_PROTECTION = 86;
export const HTTP_QUERY_SET_COOKIE2 = 87;
export const HTTP_QUERY_DO_NOT_TRACK = 88;
export const HTTP_QUERY_KEEP_ALIVE = 89;
export const HTTP_QUERY_HTTP2_SETTINGS = 90;
export const HTTP_QUERY_STRICT_TRANSPORT_SECURITY = 91;
export const HTTP_QUERY_TOKEN_BINDING = 92;
export const HTTP_QUERY_INCLUDE_REFERRED_TOKEN_BINDING_ID = 93;
export const HTTP_QUERY_INCLUDE_REFERER_TOKEN_BINDING_ID = 93;
export const HTTP_QUERY_PUBLIC_KEY_PINS = 94;
export const HTTP_QUERY_PUBLIC_KEY_PINS_REPORT_ONLY = 95;
export const HTTP_QUERY_MAX = 95;
export const HTTP_QUERY_CUSTOM = 65535;
export const HTTP_QUERY_FLAG_REQUEST_HEADERS = 2147483648;
export const HTTP_QUERY_FLAG_SYSTEMTIME = 1073741824;
export const HTTP_QUERY_FLAG_NUMBER = 536870912;
export const HTTP_QUERY_FLAG_COALESCE = 268435456;
export const HTTP_QUERY_FLAG_NUMBER64 = 134217728;
export const HTTP_QUERY_FLAG_COALESCE_WITH_COMMA = 67108864;
export const HTTP_STATUS_MISDIRECTED_REQUEST = 421;
export const HTTP_ADDREQ_INDEX_MASK = 65535;
export const HTTP_ADDREQ_FLAGS_MASK = 4294901760;
export const HSR_ASYNC = 1;
export const HSR_SYNC = 4;
export const HSR_USE_CONTEXT = 8;
export const HSR_INITIATE = 8;
export const HSR_DOWNLOAD = 16;
export const HSR_CHUNKED = 32;
export const INTERNET_COOKIE_IS_SECURE = 1;
export const INTERNET_COOKIE_IS_SESSION = 2;
export const INTERNET_COOKIE_PROMPT_REQUIRED = 32;
export const INTERNET_COOKIE_EVALUATE_P3P = 64;
export const INTERNET_COOKIE_APPLY_P3P = 128;
export const INTERNET_COOKIE_P3P_ENABLED = 256;
export const INTERNET_COOKIE_IS_RESTRICTED = 512;
export const INTERNET_COOKIE_IE6 = 1024;
export const INTERNET_COOKIE_IS_LEGACY = 2048;
export const INTERNET_COOKIE_NON_SCRIPT = 4096;
export const INTERNET_COOKIE_HOST_ONLY = 16384;
export const INTERNET_COOKIE_APPLY_HOST_ONLY = 32768;
export const INTERNET_COOKIE_HOST_ONLY_APPLIED = 524288;
export const INTERNET_COOKIE_SAME_SITE_STRICT = 1048576;
export const INTERNET_COOKIE_SAME_SITE_LAX = 2097152;
export const INTERNET_COOKIE_SAME_SITE_LEVEL_CROSS_SITE = 4194304;
export const FLAG_ICC_FORCE_CONNECTION = 1;
export const FLAGS_ERROR_UI_FILTER_FOR_ERRORS = 1;
export const FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS = 2;
export const FLAGS_ERROR_UI_FLAGS_GENERATE_DATA = 4;
export const FLAGS_ERROR_UI_FLAGS_NO_UI = 8;
export const FLAGS_ERROR_UI_SERIALIZE_DIALOGS = 16;
export const INTERNET_ERROR_BASE = 12000;
export const ERROR_INTERNET_OUT_OF_HANDLES = 12001;
export const ERROR_INTERNET_TIMEOUT = 12002;
export const ERROR_INTERNET_EXTENDED_ERROR = 12003;
export const ERROR_INTERNET_INTERNAL_ERROR = 12004;
export const ERROR_INTERNET_INVALID_URL = 12005;
export const ERROR_INTERNET_UNRECOGNIZED_SCHEME = 12006;
export const ERROR_INTERNET_NAME_NOT_RESOLVED = 12007;
export const ERROR_INTERNET_PROTOCOL_NOT_FOUND = 12008;
export const ERROR_INTERNET_INVALID_OPTION = 12009;
export const ERROR_INTERNET_BAD_OPTION_LENGTH = 12010;
export const ERROR_INTERNET_OPTION_NOT_SETTABLE = 12011;
export const ERROR_INTERNET_SHUTDOWN = 12012;
export const ERROR_INTERNET_INCORRECT_USER_NAME = 12013;
export const ERROR_INTERNET_INCORRECT_PASSWORD = 12014;
export const ERROR_INTERNET_LOGIN_FAILURE = 12015;
export const ERROR_INTERNET_INVALID_OPERATION = 12016;
export const ERROR_INTERNET_OPERATION_CANCELLED = 12017;
export const ERROR_INTERNET_INCORRECT_HANDLE_TYPE = 12018;
export const ERROR_INTERNET_INCORRECT_HANDLE_STATE = 12019;
export const ERROR_INTERNET_NOT_PROXY_REQUEST = 12020;
export const ERROR_INTERNET_REGISTRY_VALUE_NOT_FOUND = 12021;
export const ERROR_INTERNET_BAD_REGISTRY_PARAMETER = 12022;
export const ERROR_INTERNET_NO_DIRECT_ACCESS = 12023;
export const ERROR_INTERNET_NO_CONTEXT = 12024;
export const ERROR_INTERNET_NO_CALLBACK = 12025;
export const ERROR_INTERNET_REQUEST_PENDING = 12026;
export const ERROR_INTERNET_INCORRECT_FORMAT = 12027;
export const ERROR_INTERNET_ITEM_NOT_FOUND = 12028;
export const ERROR_INTERNET_CANNOT_CONNECT = 12029;
export const ERROR_INTERNET_CONNECTION_ABORTED = 12030;
export const ERROR_INTERNET_CONNECTION_RESET = 12031;
export const ERROR_INTERNET_FORCE_RETRY = 12032;
export const ERROR_INTERNET_INVALID_PROXY_REQUEST = 12033;
export const ERROR_INTERNET_NEED_UI = 12034;
export const ERROR_INTERNET_HANDLE_EXISTS = 12036;
export const ERROR_INTERNET_SEC_CERT_DATE_INVALID = 12037;
export const ERROR_INTERNET_SEC_CERT_CN_INVALID = 12038;
export const ERROR_INTERNET_HTTP_TO_HTTPS_ON_REDIR = 12039;
export const ERROR_INTERNET_HTTPS_TO_HTTP_ON_REDIR = 12040;
export const ERROR_INTERNET_MIXED_SECURITY = 12041;
export const ERROR_INTERNET_CHG_POST_IS_NON_SECURE = 12042;
export const ERROR_INTERNET_POST_IS_NON_SECURE = 12043;
export const ERROR_INTERNET_CLIENT_AUTH_CERT_NEEDED = 12044;
export const ERROR_INTERNET_INVALID_CA = 12045;
export const ERROR_INTERNET_CLIENT_AUTH_NOT_SETUP = 12046;
export const ERROR_INTERNET_ASYNC_THREAD_FAILED = 12047;
export const ERROR_INTERNET_REDIRECT_SCHEME_CHANGE = 12048;
export const ERROR_INTERNET_DIALOG_PENDING = 12049;
export const ERROR_INTERNET_RETRY_DIALOG = 12050;
export const ERROR_INTERNET_HTTPS_HTTP_SUBMIT_REDIR = 12052;
export const ERROR_INTERNET_INSERT_CDROM = 12053;
export const ERROR_INTERNET_FORTEZZA_LOGIN_NEEDED = 12054;
export const ERROR_INTERNET_SEC_CERT_ERRORS = 12055;
export const ERROR_INTERNET_SEC_CERT_NO_REV = 12056;
export const ERROR_INTERNET_SEC_CERT_REV_FAILED = 12057;
export const ERROR_HTTP_HSTS_REDIRECT_REQUIRED = 12060;
export const ERROR_INTERNET_SEC_CERT_WEAK_SIGNATURE = 12062;
export const ERROR_FTP_TRANSFER_IN_PROGRESS = 12110;
export const ERROR_FTP_DROPPED = 12111;
export const ERROR_FTP_NO_PASSIVE_MODE = 12112;
export const ERROR_GOPHER_PROTOCOL_ERROR = 12130;
export const ERROR_GOPHER_NOT_FILE = 12131;
export const ERROR_GOPHER_DATA_ERROR = 12132;
export const ERROR_GOPHER_END_OF_DATA = 12133;
export const ERROR_GOPHER_INVALID_LOCATOR = 12134;
export const ERROR_GOPHER_INCORRECT_LOCATOR_TYPE = 12135;
export const ERROR_GOPHER_NOT_GOPHER_PLUS = 12136;
export const ERROR_GOPHER_ATTRIBUTE_NOT_FOUND = 12137;
export const ERROR_GOPHER_UNKNOWN_LOCATOR = 12138;
export const ERROR_HTTP_HEADER_NOT_FOUND = 12150;
export const ERROR_HTTP_DOWNLEVEL_SERVER = 12151;
export const ERROR_HTTP_INVALID_SERVER_RESPONSE = 12152;
export const ERROR_HTTP_INVALID_HEADER = 12153;
export const ERROR_HTTP_INVALID_QUERY_REQUEST = 12154;
export const ERROR_HTTP_HEADER_ALREADY_EXISTS = 12155;
export const ERROR_HTTP_REDIRECT_FAILED = 12156;
export const ERROR_HTTP_NOT_REDIRECTED = 12160;
export const ERROR_HTTP_COOKIE_NEEDS_CONFIRMATION = 12161;
export const ERROR_HTTP_COOKIE_DECLINED = 12162;
export const ERROR_HTTP_REDIRECT_NEEDS_CONFIRMATION = 12168;
export const ERROR_INTERNET_SECURITY_CHANNEL_ERROR = 12157;
export const ERROR_INTERNET_UNABLE_TO_CACHE_FILE = 12158;
export const ERROR_INTERNET_TCPIP_NOT_INSTALLED = 12159;
export const ERROR_INTERNET_DISCONNECTED = 12163;
export const ERROR_INTERNET_SERVER_UNREACHABLE = 12164;
export const ERROR_INTERNET_PROXY_SERVER_UNREACHABLE = 12165;
export const ERROR_INTERNET_BAD_AUTO_PROXY_SCRIPT = 12166;
export const ERROR_INTERNET_UNABLE_TO_DOWNLOAD_SCRIPT = 12167;
export const ERROR_INTERNET_SEC_INVALID_CERT = 12169;
export const ERROR_INTERNET_SEC_CERT_REVOKED = 12170;
export const ERROR_INTERNET_FAILED_DUETOSECURITYCHECK = 12171;
export const ERROR_INTERNET_NOT_INITIALIZED = 12172;
export const ERROR_INTERNET_NEED_MSN_SSPI_PKG = 12173;
export const ERROR_INTERNET_LOGIN_FAILURE_DISPLAY_ENTITY_BODY = 12174;
export const ERROR_INTERNET_DECODING_FAILED = 12175;
export const ERROR_INTERNET_CLIENT_AUTH_CERT_NEEDED_PROXY = 12187;
export const ERROR_INTERNET_SECURE_FAILURE_PROXY = 12188;
export const ERROR_INTERNET_HTTP_PROTOCOL_MISMATCH = 12190;
export const ERROR_INTERNET_GLOBAL_CALLBACK_FAILED = 12191;
export const ERROR_INTERNET_FEATURE_DISABLED = 12192;
export const INTERNET_ERROR_LAST = 12192;
export const NORMAL_CACHE_ENTRY = 1;
export const STICKY_CACHE_ENTRY = 4;
export const EDITED_CACHE_ENTRY = 8;
export const TRACK_OFFLINE_CACHE_ENTRY = 16;
export const TRACK_ONLINE_CACHE_ENTRY = 32;
export const SPARSE_CACHE_ENTRY = 65536;
export const COOKIE_CACHE_ENTRY = 1048576;
export const URLHISTORY_CACHE_ENTRY = 2097152;
export const CACHEGROUP_ATTRIBUTE_GET_ALL = 4294967295;
export const CACHEGROUP_ATTRIBUTE_BASIC = 1;
export const CACHEGROUP_ATTRIBUTE_FLAG = 2;
export const CACHEGROUP_ATTRIBUTE_TYPE = 4;
export const CACHEGROUP_ATTRIBUTE_QUOTA = 8;
export const CACHEGROUP_ATTRIBUTE_GROUPNAME = 16;
export const CACHEGROUP_ATTRIBUTE_STORAGE = 32;
export const CACHEGROUP_FLAG_NONPURGEABLE = 1;
export const CACHEGROUP_FLAG_GIDONLY = 4;
export const CACHEGROUP_FLAG_FLUSHURL_ONDELETE = 2;
export const CACHEGROUP_SEARCH_ALL = 0;
export const CACHEGROUP_SEARCH_BYURL = 1;
export const CACHEGROUP_TYPE_INVALID = 1;
export const GROUPNAME_MAX_LENGTH = 120;
export const GROUP_OWNER_STORAGE_SIZE = 4;
export const CACHE_ENTRY_ATTRIBUTE_FC = 4;
export const CACHE_ENTRY_HITRATE_FC = 16;
export const CACHE_ENTRY_MODTIME_FC = 64;
export const CACHE_ENTRY_EXPTIME_FC = 128;
export const CACHE_ENTRY_ACCTIME_FC = 256;
export const CACHE_ENTRY_SYNCTIME_FC = 512;
export const CACHE_ENTRY_HEADERINFO_FC = 1024;
export const CACHE_ENTRY_EXEMPT_DELTA_FC = 2048;
export const INTERNET_CACHE_GROUP_ADD = 0;
export const INTERNET_CACHE_GROUP_REMOVE = 1;
export const INTERNET_DIAL_FORCE_PROMPT = 8192;
export const INTERNET_DIAL_SHOW_OFFLINE = 16384;
export const INTERNET_DIAL_UNATTENDED = 32768;
export const INTERENT_GOONLINE_REFRESH = 1;
export const INTERENT_GOONLINE_NOPROMPT = 2;
export const INTERENT_GOONLINE_MASK = 3;
export const INTERNET_CUSTOMDIAL_CONNECT = 0;
export const INTERNET_CUSTOMDIAL_UNATTENDED = 1;
export const INTERNET_CUSTOMDIAL_DISCONNECT = 2;
export const INTERNET_CUSTOMDIAL_SHOWOFFLINE = 4;
export const INTERNET_CUSTOMDIAL_SAFE_FOR_UNATTENDED = 1;
export const INTERNET_CUSTOMDIAL_WILL_SUPPLY_STATE = 2;
export const INTERNET_CUSTOMDIAL_CAN_HANGUP = 4;
export const INTERNET_DIALSTATE_DISCONNECTED = 1;
export const INTERNET_IDENTITY_FLAG_PRIVATE_CACHE = 1;
export const INTERNET_IDENTITY_FLAG_SHARED_CACHE = 2;
export const INTERNET_IDENTITY_FLAG_CLEAR_DATA = 4;
export const INTERNET_IDENTITY_FLAG_CLEAR_COOKIES = 8;
export const INTERNET_IDENTITY_FLAG_CLEAR_HISTORY = 16;
export const INTERNET_IDENTITY_FLAG_CLEAR_CONTENT = 32;
export const INTERNET_SUPPRESS_RESET_ALL = 0;
export const INTERNET_SUPPRESS_COOKIE_POLICY = 1;
export const INTERNET_SUPPRESS_COOKIE_POLICY_RESET = 2;
export const PRIVACY_TEMPLATE_NO_COOKIES = 0;
export const PRIVACY_TEMPLATE_HIGH = 1;
export const PRIVACY_TEMPLATE_MEDIUM_HIGH = 2;
export const PRIVACY_TEMPLATE_MEDIUM = 3;
export const PRIVACY_TEMPLATE_MEDIUM_LOW = 4;
export const PRIVACY_TEMPLATE_LOW = 5;
export const PRIVACY_TEMPLATE_CUSTOM = 100;
export const PRIVACY_TEMPLATE_ADVANCED = 101;
export const PRIVACY_TEMPLATE_MAX = 5;
export const PRIVACY_TYPE_FIRST_PARTY = 0;
export const PRIVACY_TYPE_THIRD_PARTY = 1;
export const MAX_CACHE_ENTRY_INFO_SIZE = 4096;
export const INTERNET_REQFLAG_FROM_APP_CACHE = 256;
export const INTERNET_FLAG_BGUPDATE = 8;
export const INTERNET_FLAG_FTP_FOLDER_VIEW = 4;
export const INTERNET_PREFETCH_PROGRESS = 0;
export const INTERNET_PREFETCH_COMPLETE = 1;
export const INTERNET_PREFETCH_ABORTED = 2;
export const ISO_FORCE_OFFLINE = 1;
export const DLG_FLAGS_INVALID_CA = 16777216;
export const DLG_FLAGS_SEC_CERT_CN_INVALID = 33554432;
export const DLG_FLAGS_SEC_CERT_DATE_INVALID = 67108864;
export const DLG_FLAGS_WEAK_SIGNATURE = 2097152;
export const DLG_FLAGS_INSECURE_FALLBACK = 4194304;
export const DLG_FLAGS_SEC_CERT_REV_FAILED = 8388608;
export const INTERNET_SERVICE_URL = 0;
export const INTERNET_OPTION_CONTEXT_VALUE_OLD = 10;
export const INTERNET_OPTION_NET_SPEED = 61;
export const INTERNET_OPTION_SECURITY_CONNECTION_INFO = 66;
export const INTERNET_OPTION_DETECT_POST_SEND = 71;
export const INTERNET_OPTION_DISABLE_NTLM_PREAUTH = 72;
export const INTERNET_OPTION_ORIGINAL_CONNECT_FLAGS = 97;
export const INTERNET_OPTION_CERT_ERROR_FLAGS = 98;
export const INTERNET_OPTION_IGNORE_CERT_ERROR_FLAGS = 99;
export const INTERNET_OPTION_SESSION_START_TIME = 106;
export const INTERNET_OPTION_PROXY_CREDENTIALS = 107;
export const INTERNET_OPTION_EXTENDED_CALLBACKS = 108;
export const INTERNET_OPTION_PROXY_FROM_REQUEST = 109;
export const INTERNET_OPTION_ALLOW_FAILED_CONNECT_CONTENT = 110;
export const INTERNET_OPTION_CACHE_PARTITION = 111;
export const INTERNET_OPTION_AUTODIAL_HWND = 112;
export const INTERNET_OPTION_SERVER_CREDENTIALS = 113;
export const INTERNET_OPTION_WPAD_SLEEP = 114;
export const INTERNET_OPTION_FAIL_ON_CACHE_WRITE_ERROR = 115;
export const INTERNET_OPTION_DOWNLOAD_MODE = 116;
export const INTERNET_OPTION_RESPONSE_RESUMABLE = 117;
export const INTERNET_OPTION_CM_HANDLE_COPY_REF = 118;
export const INTERNET_OPTION_CONNECTION_INFO = 120;
export const INTERNET_OPTION_BACKGROUND_CONNECTIONS = 121;
export const INTERNET_OPTION_DO_NOT_TRACK = 123;
export const INTERNET_OPTION_USE_MODIFIED_HEADER_FILTER = 124;
export const INTERNET_OPTION_WWA_MODE = 125;
export const INTERNET_OPTION_UPGRADE_TO_WEB_SOCKET = 126;
export const INTERNET_OPTION_WEB_SOCKET_KEEPALIVE_INTERVAL = 127;
export const INTERNET_OPTION_UNLOAD_NOTIFY_EVENT = 128;
export const INTERNET_OPTION_SOCKET_NODELAY = 129;
export const INTERNET_OPTION_APP_CACHE = 130;
export const INTERNET_OPTION_DEPENDENCY_HANDLE = 131;
export const INTERNET_OPTION_USE_FIRST_AVAILABLE_CONNECTION = 132;
export const INTERNET_OPTION_TIMED_CONNECTION_LIMIT_BYPASS = 133;
export const INTERNET_OPTION_WEB_SOCKET_CLOSE_TIMEOUT = 134;
export const INTERNET_OPTION_FLUSH_STATE = 135;
export const INTERNET_OPTION_DISALLOW_PREMATURE_EOF = 137;
export const INTERNET_OPTION_SOCKET_NOTIFICATION_IOCTL = 138;
export const INTERNET_OPTION_CACHE_ENTRY_EXTRA_DATA = 139;
export const INTERNET_OPTION_MAX_QUERY_BUFFER_SIZE = 140;
export const INTERNET_OPTION_FALSE_START = 141;
export const INTERNET_OPTION_USER_PASS_SERVER_ONLY = 142;
export const INTERNET_OPTION_SERVER_AUTH_SCHEME = 143;
export const INTERNET_OPTION_PROXY_AUTH_SCHEME = 144;
export const INTERNET_OPTION_TUNNEL_ONLY = 145;
export const INTERNET_OPTION_SOURCE_PORT = 146;
export const INTERNET_OPTION_ENABLE_DUO = 148;
export const INTERNET_OPTION_DUO_USED = 149;
export const INTERNET_OPTION_CHUNK_ENCODE_REQUEST = 150;
export const INTERNET_OPTION_SECURE_FAILURE = 151;
export const INTERNET_OPTION_NOTIFY_SENDING_COOKIE = 152;
export const INTERNET_OPTION_CLIENT_CERT_ISSUER_LIST = 153;
export const INTERNET_OPTION_RESET = 154;
export const INTERNET_OPTION_SERVER_ADDRESS_INFO = 156;
export const INTERNET_OPTION_ENABLE_WBOEXT = 158;
export const INTERNET_OPTION_DISABLE_INSECURE_FALLBACK = 160;
export const INTERNET_OPTION_ALLOW_INSECURE_FALLBACK = 161;
export const INTERNET_OPTION_SET_IN_PRIVATE = 164;
export const INTERNET_OPTION_DOWNLOAD_MODE_HANDLE = 165;
export const INTERNET_OPTION_EDGE_COOKIES = 166;
export const INTERNET_OPTION_NO_HTTP_SERVER_AUTH = 167;
export const INTERNET_OPTION_ENABLE_HEADER_CALLBACKS = 168;
export const INTERNET_OPTION_PRESERVE_REQUEST_SERVER_CREDENTIALS_ON_REDIRECT = 169;
export const INTERNET_OPTION_PRESERVE_REFERER_ON_HTTPS_TO_HTTP_REDIRECT = 170;
export const INTERNET_OPTION_TCP_FAST_OPEN = 171;
export const INTERNET_OPTION_SYNC_MODE_AUTOMATIC_SESSION_DISABLED = 172;
export const INTERNET_OPTION_ENABLE_ZLIB_DEFLATE = 173;
export const INTERNET_OPTION_ENCODE_FALLBACK_FOR_REDIRECT_URI = 174;
export const INTERNET_OPTION_EDGE_COOKIES_TEMP = 175;
export const INTERNET_OPTION_OPT_IN_WEAK_SIGNATURE = 176;
export const INTERNET_OPTION_PARSE_LINE_FOLDING = 177;
export const INTERNET_OPTION_FORCE_DECODE = 178;
export const INTERNET_OPTION_COOKIES_APPLY_HOST_ONLY = 179;
export const INTERNET_OPTION_EDGE_MODE = 180;
export const INTERNET_OPTION_CANCEL_CACHE_WRITE = 182;
export const INTERNET_OPTION_AUTH_SCHEME_SELECTED = 183;
export const INTERNET_OPTION_NOCACHE_WRITE_IN_PRIVATE = 184;
export const INTERNET_OPTION_ACTIVITY_ID = 185;
export const INTERNET_OPTION_REQUEST_TIMES = 186;
export const INTERNET_OPTION_GLOBAL_CALLBACK = 188;
export const INTERNET_OPTION_ENABLE_TEST_SIGNING = 189;
export const INTERNET_OPTION_DISABLE_PROXY_LINK_LOCAL_NAME_RESOLUTION = 190;
export const INTERNET_OPTION_HTTP_09 = 191;
export const INTERNET_LAST_OPTION_INTERNAL = 191;
export const INTERNET_OPTION_OFFLINE_TIMEOUT = 49;
export const INTERNET_OPTION_LINE_STATE = 50;
export const DUO_PROTOCOL_FLAG_SPDY3 = 1;
export const DUO_PROTOCOL_MASK = 1;
export const AUTH_FLAG_RESET = 0;
export const INTERNET_AUTH_SCHEME_BASIC = 0;
export const INTERNET_AUTH_SCHEME_DIGEST = 1;
export const INTERNET_AUTH_SCHEME_NTLM = 2;
export const INTERNET_AUTH_SCHEME_KERBEROS = 3;
export const INTERNET_AUTH_SCHEME_NEGOTIATE = 4;
export const INTERNET_AUTH_SCHEME_PASSPORT = 5;
export const INTERNET_AUTH_SCHEME_UNKNOWN = 6;
export const INTERNET_STATUS_SENDING_COOKIE = 328;
export const INTERNET_STATUS_REQUEST_HEADERS_SET = 329;
export const INTERNET_STATUS_RESPONSE_HEADERS_SET = 330;
export const INTERNET_STATUS_PROXY_CREDENTIALS = 400;
export const INTERNET_STATUS_SERVER_CREDENTIALS = 401;
export const INTERNET_STATUS_SERVER_CONNECTION_STATE = 410;
export const INTERNET_STATUS_END_BROWSER_SESSION = 420;
export const INTERNET_STATUS_COOKIE = 430;
export const COOKIE_STATE_LB = 0;
export const COOKIE_STATE_UB = 5;
export const MaxPrivacySettings = 16384;
export const INTERNET_STATUS_FILTER_RESOLVING = 1;
export const INTERNET_STATUS_FILTER_RESOLVED = 2;
export const INTERNET_STATUS_FILTER_CONNECTING = 4;
export const INTERNET_STATUS_FILTER_CONNECTED = 8;
export const INTERNET_STATUS_FILTER_SENDING = 16;
export const INTERNET_STATUS_FILTER_SENT = 32;
export const INTERNET_STATUS_FILTER_RECEIVING = 64;
export const INTERNET_STATUS_FILTER_RECEIVED = 128;
export const INTERNET_STATUS_FILTER_CLOSING = 256;
export const INTERNET_STATUS_FILTER_CLOSED = 512;
export const INTERNET_STATUS_FILTER_HANDLE_CREATED = 1024;
export const INTERNET_STATUS_FILTER_HANDLE_CLOSING = 2048;
export const INTERNET_STATUS_FILTER_PREFETCH = 4096;
export const INTERNET_STATUS_FILTER_REDIRECT = 8192;
export const INTERNET_STATUS_FILTER_STATE_CHANGE = 16384;
export const HTTP_ADDREQ_FLAG_RESPONSE_HEADERS = 33554432;
export const HTTP_ADDREQ_FLAG_ALLOW_EMPTY_VALUES = 67108864;
export const COOKIE_DONT_ALLOW = 1;
export const COOKIE_ALLOW = 2;
export const COOKIE_ALLOW_ALL = 4;
export const COOKIE_DONT_ALLOW_ALL = 8;
export const COOKIE_OP_SET = 1;
export const COOKIE_OP_MODIFY = 2;
export const COOKIE_OP_GET = 4;
export const COOKIE_OP_SESSION = 8;
export const COOKIE_OP_PERSISTENT = 16;
export const COOKIE_OP_3RD_PARTY = 32;
export const INTERNET_COOKIE_PERSISTENT_HOST_ONLY = 65536;
export const INTERNET_COOKIE_RESTRICTED_ZONE = 131072;
export const INTERNET_COOKIE_EDGE_COOKIES = 262144;
export const INTERNET_COOKIE_ALL_COOKIES = 536870912;
export const INTERNET_COOKIE_NO_CALLBACK = 1073741824;
export const INTERNET_COOKIE_ECTX_3RDPARTY = 2147483648;
export const FLAGS_ERROR_UI_SHOW_IDN_HOSTNAME = 32;
export const ERROR_INTERNET_NO_NEW_CONTAINERS = 12051;
export const ERROR_INTERNET_SOURCE_PORT_IN_USE = 12058;
export const ERROR_INTERNET_INSECURE_FALLBACK_REQUIRED = 12059;
export const ERROR_INTERNET_PROXY_ALERT = 12061;
export const ERROR_INTERNET_NO_CM_CONNECTION = 12080;
export const ERROR_HTTP_PUSH_STATUS_CODE_NOT_SUPPORTED = 12147;
export const ERROR_HTTP_PUSH_RETRY_NOT_SUPPORTED = 12148;
export const ERROR_HTTP_PUSH_ENABLE_FAILED = 12149;
export const ERROR_INTERNET_DISALLOW_INPRIVATE = 12189;
export const ERROR_INTERNET_OFFLINE = 12163;
export const INTERNET_INTERNAL_ERROR_BASE = 12900;
export const ERROR_INTERNET_INTERNAL_SOCKET_ERROR = 12901;
export const ERROR_INTERNET_CONNECTION_AVAILABLE = 12902;
export const ERROR_INTERNET_NO_KNOWN_SERVERS = 12903;
export const ERROR_INTERNET_PING_FAILED = 12904;
export const ERROR_INTERNET_NO_PING_SUPPORT = 12905;
export const ERROR_INTERNET_CACHE_SUCCESS = 12906;
export const ERROR_HTTP_COOKIE_NEEDS_CONFIRMATION_EX = 12907;
export const HTTP_1_1_CACHE_ENTRY = 64;
export const STATIC_CACHE_ENTRY = 128;
export const MUST_REVALIDATE_CACHE_ENTRY = 256;
export const SHORTPATH_CACHE_ENTRY = 512;
export const DOWNLOAD_CACHE_ENTRY = 1024;
export const REDIRECT_CACHE_ENTRY = 2048;
export const COOKIE_ACCEPTED_CACHE_ENTRY = 4096;
export const COOKIE_LEASHED_CACHE_ENTRY = 8192;
export const COOKIE_DOWNGRADED_CACHE_ENTRY = 16384;
export const COOKIE_REJECTED_CACHE_ENTRY = 32768;
export const PRIVACY_MODE_CACHE_ENTRY = 131072;
export const XDR_CACHE_ENTRY = 262144;
export const IMMUTABLE_CACHE_ENTRY = 524288;
export const PENDING_DELETE_CACHE_ENTRY = 4194304;
export const OTHER_USER_CACHE_ENTRY = 8388608;
export const PRIVACY_IMPACTED_CACHE_ENTRY = 33554432;
export const POST_RESPONSE_CACHE_ENTRY = 67108864;
export const INSTALLED_CACHE_ENTRY = 268435456;
export const POST_CHECK_CACHE_ENTRY = 536870912;
export const IDENTITY_CACHE_ENTRY = 2147483648;
export const ANY_CACHE_ENTRY = 4294967295;
export const CACHEGROUP_FLAG_VALID = 7;
export const CACHEGROUP_ID_BUILTIN_STICKY = 1152921504606846983n;
export const INTERNET_CACHE_FLAG_ALLOW_COLLISIONS = 256;
export const INTERNET_CACHE_FLAG_INSTALLED_ENTRY = 512;
export const INTERNET_CACHE_FLAG_ENTRY_OR_MAPPING = 1024;
export const INTERNET_CACHE_FLAG_ADD_FILENAME_ONLY = 2048;
export const INTERNET_CACHE_FLAG_GET_STRUCT_ONLY = 4096;
export const CACHE_ENTRY_TYPE_FC = 4096;
export const CACHE_ENTRY_MODIFY_DATA_FC = 2147483648;
export const INTERNET_CACHE_CONTAINER_NOSUBDIRS = 1;
export const INTERNET_CACHE_CONTAINER_AUTODELETE = 2;
export const INTERNET_CACHE_CONTAINER_RESERVED1 = 4;
export const INTERNET_CACHE_CONTAINER_NODESKTOPINIT = 8;
export const INTERNET_CACHE_CONTAINER_MAP_ENABLED = 16;
export const INTERNET_CACHE_CONTAINER_BLOOM_FILTER = 32;
export const INTERNET_CACHE_CONTAINER_SHARE_READ = 256;
export const INTERNET_CACHE_CONTAINER_SHARE_READ_WRITE = 768;
export const CACHE_FIND_CONTAINER_RETURN_NOCHANGE = 1;
export const CACHE_HEADER_DATA_CURRENT_SETTINGS_VERSION = 0;
export const CACHE_HEADER_DATA_CONLIST_CHANGE_COUNT = 1;
export const CACHE_HEADER_DATA_COOKIE_CHANGE_COUNT = 2;
export const CACHE_HEADER_DATA_NOTIFICATION_HWND = 3;
export const CACHE_HEADER_DATA_NOTIFICATION_MESG = 4;
export const CACHE_HEADER_DATA_ROOTGROUP_OFFSET = 5;
export const CACHE_HEADER_DATA_GID_LOW = 6;
export const CACHE_HEADER_DATA_GID_HIGH = 7;
export const CACHE_HEADER_DATA_LAST_SCAVENGE_TIMESTAMP = 8;
export const CACHE_HEADER_DATA_CACHE_READ_COUNT_SINCE_LAST_SCAVENGE = 9;
export const CACHE_HEADER_DATA_CACHE_WRITE_COUNT_SINCE_LAST_SCAVENGE = 10;
export const CACHE_HEADER_DATA_HSTS_CHANGE_COUNT = 11;
export const CACHE_HEADER_DATA_CACHE_RESERVED_12 = 12;
export const CACHE_HEADER_DATA_CACHE_RESERVED_13 = 13;
export const CACHE_HEADER_DATA_SSL_STATE_COUNT = 14;
export const CACHE_HEADER_DATA_DOWNLOAD_PARTIAL = 14;
export const CACHE_HEADER_DATA_CACHE_RESERVED_15 = 15;
export const CACHE_HEADER_DATA_CACHE_RESERVED_16 = 16;
export const CACHE_HEADER_DATA_CACHE_RESERVED_17 = 17;
export const CACHE_HEADER_DATA_CACHE_RESERVED_18 = 18;
export const CACHE_HEADER_DATA_CACHE_RESERVED_19 = 19;
export const CACHE_HEADER_DATA_CACHE_RESERVED_20 = 20;
export const CACHE_HEADER_DATA_NOTIFICATION_FILTER = 21;
export const CACHE_HEADER_DATA_ROOT_LEAK_OFFSET = 22;
export const CACHE_HEADER_DATA_CACHE_RESERVED_23 = 23;
export const CACHE_HEADER_DATA_CACHE_RESERVED_24 = 24;
export const CACHE_HEADER_DATA_CACHE_RESERVED_25 = 25;
export const CACHE_HEADER_DATA_CACHE_RESERVED_26 = 26;
export const CACHE_HEADER_DATA_ROOT_GROUPLIST_OFFSET = 27;
export const CACHE_HEADER_DATA_CACHE_RESERVED_28 = 28;
export const CACHE_HEADER_DATA_CACHE_RESERVED_29 = 29;
export const CACHE_HEADER_DATA_CACHE_RESERVED_30 = 30;
export const CACHE_HEADER_DATA_CACHE_RESERVED_31 = 31;
export const CACHE_HEADER_DATA_LAST = 31;
export const CACHE_NOTIFY_ADD_URL = 1;
export const CACHE_NOTIFY_DELETE_URL = 2;
export const CACHE_NOTIFY_UPDATE_URL = 4;
export const CACHE_NOTIFY_DELETE_ALL = 8;
export const CACHE_NOTIFY_URL_SET_STICKY = 16;
export const CACHE_NOTIFY_URL_UNSET_STICKY = 32;
export const CACHE_NOTIFY_SET_ONLINE = 256;
export const CACHE_NOTIFY_SET_OFFLINE = 512;
export const CACHE_NOTIFY_FILTER_CHANGED = 268435456;
export const APP_CACHE_LOOKUP_NO_MASTER_ONLY = 1;
export const APP_CACHE_ENTRY_TYPE_MASTER = 1;
export const APP_CACHE_ENTRY_TYPE_EXPLICIT = 2;
export const APP_CACHE_ENTRY_TYPE_FALLBACK = 4;
export const APP_CACHE_ENTRY_TYPE_FOREIGN = 8;
export const APP_CACHE_ENTRY_TYPE_MANIFEST = 16;
export const CACHE_CONFIG_CONTENT_QUOTA_FC = 32768;
export const CACHE_CONFIG_TOTAL_CONTENT_QUOTA_FC = 65536;
export const CACHE_CONFIG_APPCONTAINER_CONTENT_QUOTA_FC = 131072;
export const CACHE_CONFIG_APPCONTAINER_TOTAL_CONTENT_QUOTA_FC = 262144;
export const INTERNET_AUTOPROXY_INIT_DEFAULT = 1;
export const INTERNET_AUTOPROXY_INIT_DOWNLOADSYNC = 2;
export const INTERNET_AUTOPROXY_INIT_QUERYSTATE = 4;
export const INTERNET_AUTOPROXY_INIT_ONLYQUERY = 8;
export const REGSTR_DIAL_AUTOCONNECT = `AutoConnect`;
export const REGSTR_LEASH_LEGACY_COOKIES = `LeashLegacyCookies`;
export const LOCAL_NAMESPACE_PREFIX = `Local\\`;
export const LOCAL_NAMESPACE_PREFIX_W = `Local\\`;
export const INTERNET_SUPPRESS_COOKIE_PERSIST = 3;
export const INTERNET_SUPPRESS_COOKIE_PERSIST_RESET = 4;
export const HTTP_WEB_SOCKET_MAX_CLOSE_REASON_LENGTH = 123;
export const HTTP_WEB_SOCKET_MIN_KEEPALIVE_VALUE = 10000;
export const INTERNET_GLOBAL_CALLBACK_SENDING_HTTP_HEADERS = 1;
export const INTERNET_SCHEME_PARTIAL = `-2`;
export const INTERNET_SCHEME_UNKNOWN = `-1`;
export const INTERNET_SCHEME_DEFAULT = 0;
export const INTERNET_SCHEME_FTP = 1;
export const INTERNET_SCHEME_GOPHER = 2;
export const INTERNET_SCHEME_HTTP = 3;
export const INTERNET_SCHEME_HTTPS = 4;
export const INTERNET_SCHEME_FILE = 5;
export const INTERNET_SCHEME_NEWS = 6;
export const INTERNET_SCHEME_MAILTO = 7;
export const INTERNET_SCHEME_SOCKS = 8;
export const INTERNET_SCHEME_JAVASCRIPT = 9;
export const INTERNET_SCHEME_VBSCRIPT = 10;
export const INTERNET_SCHEME_RES = 11;
export const INTERNET_SCHEME_FIRST = 1;
export const INTERNET_SCHEME_LAST = 11;
export const COOKIE_STATE_UNKNOWN = 0;
export const COOKIE_STATE_ACCEPT = 1;
export const COOKIE_STATE_PROMPT = 2;
export const COOKIE_STATE_LEASH = 3;
export const COOKIE_STATE_DOWNGRADE = 4;
export const COOKIE_STATE_REJECT = 5;
export const COOKIE_STATE_MAX = 5;
export const WPAD_CACHE_DELETE_CURRENT = 0;
export const WPAD_CACHE_DELETE_ALL = 1;
export const FORTCMD_LOGON = 1;
export const FORTCMD_LOGOFF = 2;
export const FORTCMD_CHG_PERSONALITY = 3;
export const FORTSTAT_INSTALLED = 1;
export const FORTSTAT_LOGGEDON = 2;
export const NameResolutionStart = 0;
export const NameResolutionEnd = 1;
export const ConnectionEstablishmentStart = 2;
export const ConnectionEstablishmentEnd = 3;
export const TLSHandshakeStart = 4;
export const TLSHandshakeEnd = 5;
export const HttpRequestTimeMax = 32;
export const HttpPushWaitEnableComplete = 0;
export const HttpPushWaitReceiveComplete = 1;
export const HttpPushWaitSendComplete = 2;
export const WININET_SYNC_MODE_NEVER = 0;
export const WININET_SYNC_MODE_ON_EXPIRY = 1;
export const WININET_SYNC_MODE_ONCE_PER_SESSION = 2;
export const WININET_SYNC_MODE_ALWAYS = 3;
export const WININET_SYNC_MODE_AUTOMATIC = 4;
export const WININET_SYNC_MODE_DEFAULT = 4;
export const AppCacheStateNoUpdateNeeded = 0;
export const AppCacheStateUpdateNeeded = 1;
export const AppCacheStateUpdateNeededNew = 2;
export const AppCacheStateUpdateNeededMasterOnly = 3;
export const AppCacheFinalizeStateIncomplete = 0;
export const AppCacheFinalizeStateManifestChange = 1;
export const AppCacheFinalizeStateComplete = 2;
export const UrlCacheLimitTypeIE = 0;
export const UrlCacheLimitTypeIETotal = 1;
export const UrlCacheLimitTypeAppContainer = 2;
export const UrlCacheLimitTypeAppContainerTotal = 3;
export const UrlCacheLimitTypeNum = 4;
export const HTTP_WEB_SOCKET_SEND_OPERATION = 0;
export const HTTP_WEB_SOCKET_RECEIVE_OPERATION = 1;
export const HTTP_WEB_SOCKET_CLOSE_OPERATION = 2;
export const HTTP_WEB_SOCKET_SHUTDOWN_OPERATION = 3;
export const HTTP_WEB_SOCKET_BINARY_MESSAGE_TYPE = 0;
export const HTTP_WEB_SOCKET_BINARY_FRAGMENT_TYPE = 1;
export const HTTP_WEB_SOCKET_UTF8_MESSAGE_TYPE = 2;
export const HTTP_WEB_SOCKET_UTF8_FRAGMENT_TYPE = 3;
export const HTTP_WEB_SOCKET_CLOSE_TYPE = 4;
export const HTTP_WEB_SOCKET_PING_TYPE = 5;
export const HTTP_WEB_SOCKET_SUCCESS_CLOSE_STATUS = 1000;
export const HTTP_WEB_SOCKET_ENDPOINT_TERMINATED_CLOSE_STATUS = 1001;
export const HTTP_WEB_SOCKET_PROTOCOL_ERROR_CLOSE_STATUS = 1002;
export const HTTP_WEB_SOCKET_INVALID_DATA_TYPE_CLOSE_STATUS = 1003;
export const HTTP_WEB_SOCKET_EMPTY_CLOSE_STATUS = 1005;
export const HTTP_WEB_SOCKET_ABORTED_CLOSE_STATUS = 1006;
export const HTTP_WEB_SOCKET_INVALID_PAYLOAD_CLOSE_STATUS = 1007;
export const HTTP_WEB_SOCKET_POLICY_VIOLATION_CLOSE_STATUS = 1008;
export const HTTP_WEB_SOCKET_MESSAGE_TOO_BIG_CLOSE_STATUS = 1009;
export const HTTP_WEB_SOCKET_UNSUPPORTED_EXTENSIONS_CLOSE_STATUS = 1010;
export const HTTP_WEB_SOCKET_SERVER_ERROR_CLOSE_STATUS = 1011;
export const HTTP_WEB_SOCKET_SECURE_HANDSHAKE_ERROR_CLOSE_STATUS = 1015;
export const POLICY_EXTENSION_TYPE_NONE = 0;
export const POLICY_EXTENSION_TYPE_WINHTTP = 1;
export const POLICY_EXTENSION_TYPE_WININET = 2;
export const POLICY_EXTENSION_VERSION1 = 1;
export const ICU_ESCAPE = 2147483648;
export const ICU_REJECT_USERPWD = 16384;
export const ICU_DECODE = 268435456;

// Structs

export type HTTP_PUSH_WAIT_HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Networking.WinInet.INTERNET_ASYNC_RESULT (size: 16)
 */
export interface INTERNET_ASYNC_RESULT {
  /** usize */
  dwResult: Deno.PointerValue;
  /** u32 */
  dwError: number;
}

export const sizeofINTERNET_ASYNC_RESULT = 16;

export function allocINTERNET_ASYNC_RESULT(data?: Partial<INTERNET_ASYNC_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_ASYNC_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwResult !== undefined) view.setBigUint64(0, BigInt(data.dwResult), true);
  // 0x08: u32
  if (data?.dwError !== undefined) view.setUint32(8, Number(data.dwError), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_DIAGNOSTIC_SOCKET_INFO (size: 24)
 */
export interface INTERNET_DIAGNOSTIC_SOCKET_INFO {
  /** usize */
  Socket: Deno.PointerValue;
  /** u32 */
  SourcePort: number;
  /** u32 */
  DestPort: number;
  /** u32 */
  Flags: number;
}

export const sizeofINTERNET_DIAGNOSTIC_SOCKET_INFO = 24;

export function allocINTERNET_DIAGNOSTIC_SOCKET_INFO(data?: Partial<INTERNET_DIAGNOSTIC_SOCKET_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_DIAGNOSTIC_SOCKET_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Socket !== undefined) view.setBigUint64(0, BigInt(data.Socket), true);
  // 0x08: u32
  if (data?.SourcePort !== undefined) view.setUint32(8, Number(data.SourcePort), true);
  // 0x0c: u32
  if (data?.DestPort !== undefined) view.setUint32(12, Number(data.DestPort), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_PROXY_INFO (size: 24)
 */
export interface INTERNET_PROXY_INFO {
  /** Windows.Win32.Networking.WinInet.INTERNET_ACCESS_TYPE */
  dwAccessType: INTERNET_ACCESS_TYPE;
  /** ptr */
  lpszProxy: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpszProxyBypass: Deno.PointerValue | Uint8Array | null;
}

export const sizeofINTERNET_PROXY_INFO = 24;

export function allocINTERNET_PROXY_INFO(data?: Partial<INTERNET_PROXY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_PROXY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAccessType !== undefined) view.setUint32(0, Number(data.dwAccessType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpszProxy !== undefined) view.setBigUint64(8, data.lpszProxy === null ? 0n : BigInt(util.toPointer(data.lpszProxy)), true);
  // 0x10: pointer
  if (data?.lpszProxyBypass !== undefined) view.setBigUint64(16, data.lpszProxyBypass === null ? 0n : BigInt(util.toPointer(data.lpszProxyBypass)), true);
  return buf;
}

/**
 * _Value_e__Union (size: 16)
 */
export interface _Value_e__Union {
  /** u16 */
  ShortUuid: number;
  /** System.Guid */
  LongUuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Value_e__Union = 16;

export function alloc_Value_e__Union(data?: Partial<_Value_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Value_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ShortUuid !== undefined) view.setUint16(0, Number(data.ShortUuid), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.LongUuid !== undefined) view.setBigUint64(8, data.LongUuid === null ? 0n : BigInt(util.toPointer(data.LongUuid)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_PER_CONN_OPTIONA (size: 16)
 */
export interface INTERNET_PER_CONN_OPTIONA {
  /** Windows.Win32.Networking.WinInet.INTERNET_PER_CONN */
  dwOption: INTERNET_PER_CONN;
  /** _Value_e__Union */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTERNET_PER_CONN_OPTIONA = 16;

export function allocINTERNET_PER_CONN_OPTIONA(data?: Partial<INTERNET_PER_CONN_OPTIONA>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_PER_CONN_OPTIONA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOption !== undefined) view.setUint32(0, Number(data.dwOption), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_PER_CONN_OPTIONW (size: 16)
 */
export interface INTERNET_PER_CONN_OPTIONW {
  /** Windows.Win32.Networking.WinInet.INTERNET_PER_CONN */
  dwOption: INTERNET_PER_CONN;
  /** _Value_e__Union */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTERNET_PER_CONN_OPTIONW = 16;

export function allocINTERNET_PER_CONN_OPTIONW(data?: Partial<INTERNET_PER_CONN_OPTIONW>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_PER_CONN_OPTIONW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwOption !== undefined) view.setUint32(0, Number(data.dwOption), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Networking.WinInet.INTERNET_PER_CONN_OPTION_LISTA (size: 32)
 */
export interface INTERNET_PER_CONN_OPTION_LISTA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PSTR */
  pszConnection: string | null | Uint8Array;
  /** u32 */
  dwOptionCount: number;
  /** u32 */
  dwOptionError: number;
  /** ptr */
  pOptions: Deno.PointerValue | Uint8Array | null;
}

export const sizeofINTERNET_PER_CONN_OPTION_LISTA = 32;

export function allocINTERNET_PER_CONN_OPTION_LISTA(data?: Partial<INTERNET_PER_CONN_OPTION_LISTA>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_PER_CONN_OPTION_LISTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszConnection !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszConnection);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwOptionCount !== undefined) view.setUint32(16, Number(data.dwOptionCount), true);
  // 0x14: u32
  if (data?.dwOptionError !== undefined) view.setUint32(20, Number(data.dwOptionError), true);
  // 0x18: pointer
  if (data?.pOptions !== undefined) view.setBigUint64(24, data.pOptions === null ? 0n : BigInt(util.toPointer(data.pOptions)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Networking.WinInet.INTERNET_PER_CONN_OPTION_LISTW (size: 32)
 */
export interface INTERNET_PER_CONN_OPTION_LISTW {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszConnection: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwOptionCount: number;
  /** u32 */
  dwOptionError: number;
  /** ptr */
  pOptions: Deno.PointerValue | Uint8Array | null;
}

export const sizeofINTERNET_PER_CONN_OPTION_LISTW = 32;

export function allocINTERNET_PER_CONN_OPTION_LISTW(data?: Partial<INTERNET_PER_CONN_OPTION_LISTW>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_PER_CONN_OPTION_LISTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszConnection !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszConnection);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwOptionCount !== undefined) view.setUint32(16, Number(data.dwOptionCount), true);
  // 0x14: u32
  if (data?.dwOptionError !== undefined) view.setUint32(20, Number(data.dwOptionError), true);
  // 0x18: pointer
  if (data?.pOptions !== undefined) view.setBigUint64(24, data.pOptions === null ? 0n : BigInt(util.toPointer(data.pOptions)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_VERSION_INFO (size: 8)
 */
export interface INTERNET_VERSION_INFO {
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
}

export const sizeofINTERNET_VERSION_INFO = 8;

export function allocINTERNET_VERSION_INFO(data?: Partial<INTERNET_VERSION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_VERSION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(0, Number(data.dwMajorVersion), true);
  // 0x04: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(4, Number(data.dwMinorVersion), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CONNECTED_INFO (size: 8)
 */
export interface INTERNET_CONNECTED_INFO {
  /** Windows.Win32.Networking.WinInet.INTERNET_STATE */
  dwConnectedState: INTERNET_STATE;
  /** u32 */
  dwFlags: number;
}

export const sizeofINTERNET_CONNECTED_INFO = 8;

export function allocINTERNET_CONNECTED_INFO(data?: Partial<INTERNET_CONNECTED_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CONNECTED_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwConnectedState !== undefined) view.setUint32(0, Number(data.dwConnectedState), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.URL_COMPONENTSA (size: 104)
 */
export interface URL_COMPONENTSA {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszScheme: string | null | Uint8Array;
  /** u32 */
  dwSchemeLength: number;
  /** Windows.Win32.Networking.WinInet.INTERNET_SCHEME */
  nScheme: INTERNET_SCHEME;
  /** Windows.Win32.Foundation.PSTR */
  lpszHostName: string | null | Uint8Array;
  /** u32 */
  dwHostNameLength: number;
  /** u16 */
  nPort: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszUserName: string | null | Uint8Array;
  /** u32 */
  dwUserNameLength: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszPassword: string | null | Uint8Array;
  /** u32 */
  dwPasswordLength: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszUrlPath: string | null | Uint8Array;
  /** u32 */
  dwUrlPathLength: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszExtraInfo: string | null | Uint8Array;
  /** u32 */
  dwExtraInfoLength: number;
}

export const sizeofURL_COMPONENTSA = 104;

export function allocURL_COMPONENTSA(data?: Partial<URL_COMPONENTSA>): Uint8Array {
  const buf = new Uint8Array(sizeofURL_COMPONENTSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszScheme !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszScheme);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwSchemeLength !== undefined) view.setUint32(16, Number(data.dwSchemeLength), true);
  // 0x14: i32
  if (data?.nScheme !== undefined) view.setInt32(20, Number(data.nScheme), true);
  // 0x18: buffer
  if (data?.lpszHostName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpszHostName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwHostNameLength !== undefined) view.setUint32(32, Number(data.dwHostNameLength), true);
  // 0x24: u16
  if (data?.nPort !== undefined) view.setUint16(36, Number(data.nPort), true);
  // 0x26: pad2
  // 0x28: buffer
  if (data?.lpszUserName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.lpszUserName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.dwUserNameLength !== undefined) view.setUint32(48, Number(data.dwUserNameLength), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.lpszPassword !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.lpszPassword);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.dwPasswordLength !== undefined) view.setUint32(64, Number(data.dwPasswordLength), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.lpszUrlPath !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.lpszUrlPath);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.dwUrlPathLength !== undefined) view.setUint32(80, Number(data.dwUrlPathLength), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.lpszExtraInfo !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.lpszExtraInfo);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: u32
  if (data?.dwExtraInfoLength !== undefined) view.setUint32(96, Number(data.dwExtraInfoLength), true);
  // 0x64: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.URL_COMPONENTSW (size: 104)
 */
export interface URL_COMPONENTSW {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszScheme: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwSchemeLength: number;
  /** Windows.Win32.Networking.WinInet.INTERNET_SCHEME */
  nScheme: INTERNET_SCHEME;
  /** Windows.Win32.Foundation.PWSTR */
  lpszHostName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwHostNameLength: number;
  /** u16 */
  nPort: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszUserName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwUserNameLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszPassword: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwPasswordLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszUrlPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwUrlPathLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszExtraInfo: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwExtraInfoLength: number;
}

export const sizeofURL_COMPONENTSW = 104;

export function allocURL_COMPONENTSW(data?: Partial<URL_COMPONENTSW>): Uint8Array {
  const buf = new Uint8Array(sizeofURL_COMPONENTSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszScheme !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszScheme);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwSchemeLength !== undefined) view.setUint32(16, Number(data.dwSchemeLength), true);
  // 0x14: i32
  if (data?.nScheme !== undefined) view.setInt32(20, Number(data.nScheme), true);
  // 0x18: buffer
  if (data?.lpszHostName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszHostName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwHostNameLength !== undefined) view.setUint32(32, Number(data.dwHostNameLength), true);
  // 0x24: u16
  if (data?.nPort !== undefined) view.setUint16(36, Number(data.nPort), true);
  // 0x26: pad2
  // 0x28: buffer
  if (data?.lpszUserName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.lpszUserName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: u32
  if (data?.dwUserNameLength !== undefined) view.setUint32(48, Number(data.dwUserNameLength), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.lpszPassword !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.lpszPassword);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.dwPasswordLength !== undefined) view.setUint32(64, Number(data.dwPasswordLength), true);
  // 0x44: pad4
  // 0x48: buffer
  if (data?.lpszUrlPath !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.lpszUrlPath);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.dwUrlPathLength !== undefined) view.setUint32(80, Number(data.dwUrlPathLength), true);
  // 0x54: pad4
  // 0x58: buffer
  if (data?.lpszExtraInfo !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.lpszExtraInfo);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: u32
  if (data?.dwExtraInfoLength !== undefined) view.setUint32(96, Number(data.dwExtraInfoLength), true);
  // 0x64: pad4
  return buf;
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CERTIFICATE_INFO (size: 64)
 */
export interface INTERNET_CERTIFICATE_INFO {
  /** Windows.Win32.Foundation.FILETIME */
  ftExpiry: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ftStart: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpszSubjectInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpszIssuerInfo: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpszProtocolName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpszSignatureAlgName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpszEncryptionAlgName: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwKeySize: number;
}

export const sizeofINTERNET_CERTIFICATE_INFO = 64;

export function allocINTERNET_CERTIFICATE_INFO(data?: Partial<INTERNET_CERTIFICATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CERTIFICATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ftExpiry !== undefined) view.setBigUint64(0, data.ftExpiry === null ? 0n : BigInt(util.toPointer(data.ftExpiry)), true);
  // 0x08: pointer
  if (data?.ftStart !== undefined) view.setBigUint64(8, data.ftStart === null ? 0n : BigInt(util.toPointer(data.ftStart)), true);
  // 0x10: pointer
  if (data?.lpszSubjectInfo !== undefined) view.setBigUint64(16, data.lpszSubjectInfo === null ? 0n : BigInt(util.toPointer(data.lpszSubjectInfo)), true);
  // 0x18: pointer
  if (data?.lpszIssuerInfo !== undefined) view.setBigUint64(24, data.lpszIssuerInfo === null ? 0n : BigInt(util.toPointer(data.lpszIssuerInfo)), true);
  // 0x20: pointer
  if (data?.lpszProtocolName !== undefined) view.setBigUint64(32, data.lpszProtocolName === null ? 0n : BigInt(util.toPointer(data.lpszProtocolName)), true);
  // 0x28: pointer
  if (data?.lpszSignatureAlgName !== undefined) view.setBigUint64(40, data.lpszSignatureAlgName === null ? 0n : BigInt(util.toPointer(data.lpszSignatureAlgName)), true);
  // 0x30: pointer
  if (data?.lpszEncryptionAlgName !== undefined) view.setBigUint64(48, data.lpszEncryptionAlgName === null ? 0n : BigInt(util.toPointer(data.lpszEncryptionAlgName)), true);
  // 0x38: u32
  if (data?.dwKeySize !== undefined) view.setUint32(56, Number(data.dwKeySize), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_BUFFERSA (size: 56)
 */
export interface INTERNET_BUFFERSA {
  /** u32 */
  dwStructSize: number;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  lpcszHeader: string | null | Uint8Array;
  /** u32 */
  dwHeadersLength: number;
  /** u32 */
  dwHeadersTotal: number;
  /** ptr */
  lpvBuffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwBufferLength: number;
  /** u32 */
  dwBufferTotal: number;
  /** u32 */
  dwOffsetLow: number;
  /** u32 */
  dwOffsetHigh: number;
}

export const sizeofINTERNET_BUFFERSA = 56;

export function allocINTERNET_BUFFERSA(data?: Partial<INTERNET_BUFFERSA>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_BUFFERSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(util.toPointer(data.Next)), true);
  // 0x10: buffer
  if (data?.lpcszHeader !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpcszHeader);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwHeadersLength !== undefined) view.setUint32(24, Number(data.dwHeadersLength), true);
  // 0x1c: u32
  if (data?.dwHeadersTotal !== undefined) view.setUint32(28, Number(data.dwHeadersTotal), true);
  // 0x20: pointer
  if (data?.lpvBuffer !== undefined) view.setBigUint64(32, data.lpvBuffer === null ? 0n : BigInt(util.toPointer(data.lpvBuffer)), true);
  // 0x28: u32
  if (data?.dwBufferLength !== undefined) view.setUint32(40, Number(data.dwBufferLength), true);
  // 0x2c: u32
  if (data?.dwBufferTotal !== undefined) view.setUint32(44, Number(data.dwBufferTotal), true);
  // 0x30: u32
  if (data?.dwOffsetLow !== undefined) view.setUint32(48, Number(data.dwOffsetLow), true);
  // 0x34: u32
  if (data?.dwOffsetHigh !== undefined) view.setUint32(52, Number(data.dwOffsetHigh), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_BUFFERSW (size: 56)
 */
export interface INTERNET_BUFFERSW {
  /** u32 */
  dwStructSize: number;
  /** ptr */
  Next: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpcszHeader: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwHeadersLength: number;
  /** u32 */
  dwHeadersTotal: number;
  /** ptr */
  lpvBuffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwBufferLength: number;
  /** u32 */
  dwBufferTotal: number;
  /** u32 */
  dwOffsetLow: number;
  /** u32 */
  dwOffsetHigh: number;
}

export const sizeofINTERNET_BUFFERSW = 56;

export function allocINTERNET_BUFFERSW(data?: Partial<INTERNET_BUFFERSW>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_BUFFERSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Next !== undefined) view.setBigUint64(8, data.Next === null ? 0n : BigInt(util.toPointer(data.Next)), true);
  // 0x10: buffer
  if (data?.lpcszHeader !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpcszHeader);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.dwHeadersLength !== undefined) view.setUint32(24, Number(data.dwHeadersLength), true);
  // 0x1c: u32
  if (data?.dwHeadersTotal !== undefined) view.setUint32(28, Number(data.dwHeadersTotal), true);
  // 0x20: pointer
  if (data?.lpvBuffer !== undefined) view.setBigUint64(32, data.lpvBuffer === null ? 0n : BigInt(util.toPointer(data.lpvBuffer)), true);
  // 0x28: u32
  if (data?.dwBufferLength !== undefined) view.setUint32(40, Number(data.dwBufferLength), true);
  // 0x2c: u32
  if (data?.dwBufferTotal !== undefined) view.setUint32(44, Number(data.dwBufferTotal), true);
  // 0x30: u32
  if (data?.dwOffsetLow !== undefined) view.setUint32(48, Number(data.dwOffsetLow), true);
  // 0x34: u32
  if (data?.dwOffsetHigh !== undefined) view.setUint32(52, Number(data.dwOffsetHigh), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.IncomingCookieState (size: 32)
 */
export interface IncomingCookieState {
  /** i32 */
  cSession: number;
  /** i32 */
  cPersistent: number;
  /** i32 */
  cAccepted: number;
  /** i32 */
  cLeashed: number;
  /** i32 */
  cDowngraded: number;
  /** i32 */
  cBlocked: number;
  /** Windows.Win32.Foundation.PSTR */
  pszLocation: string | null | Uint8Array;
}

export const sizeofIncomingCookieState = 32;

export function allocIncomingCookieState(data?: Partial<IncomingCookieState>): Uint8Array {
  const buf = new Uint8Array(sizeofIncomingCookieState);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cSession !== undefined) view.setInt32(0, Number(data.cSession), true);
  // 0x04: i32
  if (data?.cPersistent !== undefined) view.setInt32(4, Number(data.cPersistent), true);
  // 0x08: i32
  if (data?.cAccepted !== undefined) view.setInt32(8, Number(data.cAccepted), true);
  // 0x0c: i32
  if (data?.cLeashed !== undefined) view.setInt32(12, Number(data.cLeashed), true);
  // 0x10: i32
  if (data?.cDowngraded !== undefined) view.setInt32(16, Number(data.cDowngraded), true);
  // 0x14: i32
  if (data?.cBlocked !== undefined) view.setInt32(20, Number(data.cBlocked), true);
  // 0x18: buffer
  if (data?.pszLocation !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszLocation);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.OutgoingCookieState (size: 16)
 */
export interface OutgoingCookieState {
  /** i32 */
  cSent: number;
  /** i32 */
  cSuppressed: number;
  /** Windows.Win32.Foundation.PSTR */
  pszLocation: string | null | Uint8Array;
}

export const sizeofOutgoingCookieState = 16;

export function allocOutgoingCookieState(data?: Partial<OutgoingCookieState>): Uint8Array {
  const buf = new Uint8Array(sizeofOutgoingCookieState);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cSent !== undefined) view.setInt32(0, Number(data.cSent), true);
  // 0x04: i32
  if (data?.cSuppressed !== undefined) view.setInt32(4, Number(data.cSuppressed), true);
  // 0x08: buffer
  if (data?.pszLocation !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszLocation);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Networking.WinInet.InternetCookieHistory (size: 16)
 */
export interface InternetCookieHistory {
  /** Windows.Win32.Foundation.BOOL */
  fAccepted: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fLeashed: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDowngraded: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fRejected: boolean;
}

export const sizeofInternetCookieHistory = 16;

export function allocInternetCookieHistory(data?: Partial<InternetCookieHistory>): Uint8Array {
  const buf = new Uint8Array(sizeofInternetCookieHistory);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fAccepted !== undefined) view.setInt32(0, Number(data.fAccepted), true);
  // 0x04: i32
  if (data?.fLeashed !== undefined) view.setInt32(4, Number(data.fLeashed), true);
  // 0x08: i32
  if (data?.fDowngraded !== undefined) view.setInt32(8, Number(data.fDowngraded), true);
  // 0x0c: i32
  if (data?.fRejected !== undefined) view.setInt32(12, Number(data.fRejected), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.CookieDecision (size: 8)
 */
export interface CookieDecision {
  /** u32 */
  dwCookieState: number;
  /** Windows.Win32.Foundation.BOOL */
  fAllowSession: boolean;
}

export const sizeofCookieDecision = 8;

export function allocCookieDecision(data?: Partial<CookieDecision>): Uint8Array {
  const buf = new Uint8Array(sizeofCookieDecision);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCookieState !== undefined) view.setUint32(0, Number(data.dwCookieState), true);
  // 0x04: i32
  if (data?.fAllowSession !== undefined) view.setInt32(4, Number(data.fAllowSession), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_FIND_DATAA (size: 40)
 */
export interface GOPHER_FIND_DATAA {
  /** array */
  DisplayString: Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_TYPE */
  GopherType: GOPHER_TYPE;
  /** u32 */
  SizeLow: number;
  /** u32 */
  SizeHigh: number;
  /** Windows.Win32.Foundation.FILETIME */
  LastModificationTime: Uint8Array | Deno.PointerValue | null;
  /** array */
  Locator: Deno.PointerValue | null;
}

export const sizeofGOPHER_FIND_DATAA = 40;

export function allocGOPHER_FIND_DATAA(data?: Partial<GOPHER_FIND_DATAA>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_FIND_DATAA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DisplayString !== undefined) view.setBigUint64(0, data.DisplayString === null ? 0n : BigInt(util.toPointer(data.DisplayString)), true);
  // 0x08: u32
  if (data?.GopherType !== undefined) view.setUint32(8, Number(data.GopherType), true);
  // 0x0c: u32
  if (data?.SizeLow !== undefined) view.setUint32(12, Number(data.SizeLow), true);
  // 0x10: u32
  if (data?.SizeHigh !== undefined) view.setUint32(16, Number(data.SizeHigh), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.LastModificationTime !== undefined) view.setBigUint64(24, data.LastModificationTime === null ? 0n : BigInt(util.toPointer(data.LastModificationTime)), true);
  // 0x20: pointer
  if (data?.Locator !== undefined) view.setBigUint64(32, data.Locator === null ? 0n : BigInt(util.toPointer(data.Locator)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_FIND_DATAW (size: 40)
 */
export interface GOPHER_FIND_DATAW {
  /** array */
  DisplayString: Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_TYPE */
  GopherType: GOPHER_TYPE;
  /** u32 */
  SizeLow: number;
  /** u32 */
  SizeHigh: number;
  /** Windows.Win32.Foundation.FILETIME */
  LastModificationTime: Uint8Array | Deno.PointerValue | null;
  /** array */
  Locator: Deno.PointerValue | null;
}

export const sizeofGOPHER_FIND_DATAW = 40;

export function allocGOPHER_FIND_DATAW(data?: Partial<GOPHER_FIND_DATAW>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_FIND_DATAW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DisplayString !== undefined) view.setBigUint64(0, data.DisplayString === null ? 0n : BigInt(util.toPointer(data.DisplayString)), true);
  // 0x08: u32
  if (data?.GopherType !== undefined) view.setUint32(8, Number(data.GopherType), true);
  // 0x0c: u32
  if (data?.SizeLow !== undefined) view.setUint32(12, Number(data.SizeLow), true);
  // 0x10: u32
  if (data?.SizeHigh !== undefined) view.setUint32(16, Number(data.SizeHigh), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.LastModificationTime !== undefined) view.setBigUint64(24, data.LastModificationTime === null ? 0n : BigInt(util.toPointer(data.LastModificationTime)), true);
  // 0x20: pointer
  if (data?.Locator !== undefined) view.setBigUint64(32, data.Locator === null ? 0n : BigInt(util.toPointer(data.Locator)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_ADMIN_ATTRIBUTE_TYPE (size: 16)
 */
export interface GOPHER_ADMIN_ATTRIBUTE_TYPE {
  /** ptr */
  Comment: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  EmailAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofGOPHER_ADMIN_ATTRIBUTE_TYPE = 16;

export function allocGOPHER_ADMIN_ATTRIBUTE_TYPE(data?: Partial<GOPHER_ADMIN_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_ADMIN_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Comment !== undefined) view.setBigUint64(0, data.Comment === null ? 0n : BigInt(util.toPointer(data.Comment)), true);
  // 0x08: pointer
  if (data?.EmailAddress !== undefined) view.setBigUint64(8, data.EmailAddress === null ? 0n : BigInt(util.toPointer(data.EmailAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_MOD_DATE_ATTRIBUTE_TYPE (size: 8)
 */
export interface GOPHER_MOD_DATE_ATTRIBUTE_TYPE {
  /** Windows.Win32.Foundation.FILETIME */
  DateAndTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGOPHER_MOD_DATE_ATTRIBUTE_TYPE = 8;

export function allocGOPHER_MOD_DATE_ATTRIBUTE_TYPE(data?: Partial<GOPHER_MOD_DATE_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_MOD_DATE_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DateAndTime !== undefined) view.setBigUint64(0, data.DateAndTime === null ? 0n : BigInt(util.toPointer(data.DateAndTime)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_TTL_ATTRIBUTE_TYPE (size: 8)
 */
export interface GOPHER_TTL_ATTRIBUTE_TYPE {
  /** u32 */
  Ttl: number;
}

export const sizeofGOPHER_TTL_ATTRIBUTE_TYPE = 8;

export function allocGOPHER_TTL_ATTRIBUTE_TYPE(data?: Partial<GOPHER_TTL_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_TTL_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Ttl !== undefined) view.setUint32(0, Number(data.Ttl), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_SCORE_ATTRIBUTE_TYPE (size: 8)
 */
export interface GOPHER_SCORE_ATTRIBUTE_TYPE {
  /** i32 */
  Score: number;
}

export const sizeofGOPHER_SCORE_ATTRIBUTE_TYPE = 8;

export function allocGOPHER_SCORE_ATTRIBUTE_TYPE(data?: Partial<GOPHER_SCORE_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_SCORE_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Score !== undefined) view.setInt32(0, Number(data.Score), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE (size: 8)
 */
export interface GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE {
  /** i32 */
  LowerBound: number;
  /** i32 */
  UpperBound: number;
}

export const sizeofGOPHER_SCORE_RANGE_ATTRIBUTE_TYPE = 8;

export function allocGOPHER_SCORE_RANGE_ATTRIBUTE_TYPE(data?: Partial<GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_SCORE_RANGE_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.LowerBound !== undefined) view.setInt32(0, Number(data.LowerBound), true);
  // 0x04: i32
  if (data?.UpperBound !== undefined) view.setInt32(4, Number(data.UpperBound), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_SITE_ATTRIBUTE_TYPE (size: 8)
 */
export interface GOPHER_SITE_ATTRIBUTE_TYPE {
  /** ptr */
  Site: Deno.PointerValue | Uint8Array | null;
}

export const sizeofGOPHER_SITE_ATTRIBUTE_TYPE = 8;

export function allocGOPHER_SITE_ATTRIBUTE_TYPE(data?: Partial<GOPHER_SITE_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_SITE_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Site !== undefined) view.setBigUint64(0, data.Site === null ? 0n : BigInt(util.toPointer(data.Site)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_ORGANIZATION_ATTRIBUTE_TYPE (size: 8)
 */
export interface GOPHER_ORGANIZATION_ATTRIBUTE_TYPE {
  /** ptr */
  Organization: Deno.PointerValue | Uint8Array | null;
}

export const sizeofGOPHER_ORGANIZATION_ATTRIBUTE_TYPE = 8;

export function allocGOPHER_ORGANIZATION_ATTRIBUTE_TYPE(data?: Partial<GOPHER_ORGANIZATION_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_ORGANIZATION_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Organization !== undefined) view.setBigUint64(0, data.Organization === null ? 0n : BigInt(util.toPointer(data.Organization)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_LOCATION_ATTRIBUTE_TYPE (size: 8)
 */
export interface GOPHER_LOCATION_ATTRIBUTE_TYPE {
  /** ptr */
  Location: Deno.PointerValue | Uint8Array | null;
}

export const sizeofGOPHER_LOCATION_ATTRIBUTE_TYPE = 8;

export function allocGOPHER_LOCATION_ATTRIBUTE_TYPE(data?: Partial<GOPHER_LOCATION_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_LOCATION_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Location !== undefined) view.setBigUint64(0, data.Location === null ? 0n : BigInt(util.toPointer(data.Location)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE (size: 24)
 */
export interface GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE {
  /** i32 */
  DegreesNorth: number;
  /** i32 */
  MinutesNorth: number;
  /** i32 */
  SecondsNorth: number;
  /** i32 */
  DegreesEast: number;
  /** i32 */
  MinutesEast: number;
  /** i32 */
  SecondsEast: number;
}

export const sizeofGOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE = 24;

export function allocGOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE(data?: Partial<GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DegreesNorth !== undefined) view.setInt32(0, Number(data.DegreesNorth), true);
  // 0x04: i32
  if (data?.MinutesNorth !== undefined) view.setInt32(4, Number(data.MinutesNorth), true);
  // 0x08: i32
  if (data?.SecondsNorth !== undefined) view.setInt32(8, Number(data.SecondsNorth), true);
  // 0x0c: i32
  if (data?.DegreesEast !== undefined) view.setInt32(12, Number(data.DegreesEast), true);
  // 0x10: i32
  if (data?.MinutesEast !== undefined) view.setInt32(16, Number(data.MinutesEast), true);
  // 0x14: i32
  if (data?.SecondsEast !== undefined) view.setInt32(20, Number(data.SecondsEast), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_TIMEZONE_ATTRIBUTE_TYPE (size: 8)
 */
export interface GOPHER_TIMEZONE_ATTRIBUTE_TYPE {
  /** i32 */
  Zone: number;
}

export const sizeofGOPHER_TIMEZONE_ATTRIBUTE_TYPE = 8;

export function allocGOPHER_TIMEZONE_ATTRIBUTE_TYPE(data?: Partial<GOPHER_TIMEZONE_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_TIMEZONE_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Zone !== undefined) view.setInt32(0, Number(data.Zone), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_PROVIDER_ATTRIBUTE_TYPE (size: 8)
 */
export interface GOPHER_PROVIDER_ATTRIBUTE_TYPE {
  /** ptr */
  Provider: Deno.PointerValue | Uint8Array | null;
}

export const sizeofGOPHER_PROVIDER_ATTRIBUTE_TYPE = 8;

export function allocGOPHER_PROVIDER_ATTRIBUTE_TYPE(data?: Partial<GOPHER_PROVIDER_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_PROVIDER_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Provider !== undefined) view.setBigUint64(0, data.Provider === null ? 0n : BigInt(util.toPointer(data.Provider)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_VERSION_ATTRIBUTE_TYPE (size: 8)
 */
export interface GOPHER_VERSION_ATTRIBUTE_TYPE {
  /** ptr */
  Version: Deno.PointerValue | Uint8Array | null;
}

export const sizeofGOPHER_VERSION_ATTRIBUTE_TYPE = 8;

export function allocGOPHER_VERSION_ATTRIBUTE_TYPE(data?: Partial<GOPHER_VERSION_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_VERSION_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Version !== undefined) view.setBigUint64(0, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_ABSTRACT_ATTRIBUTE_TYPE (size: 16)
 */
export interface GOPHER_ABSTRACT_ATTRIBUTE_TYPE {
  /** ptr */
  ShortAbstract: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  AbstractFile: Deno.PointerValue | Uint8Array | null;
}

export const sizeofGOPHER_ABSTRACT_ATTRIBUTE_TYPE = 16;

export function allocGOPHER_ABSTRACT_ATTRIBUTE_TYPE(data?: Partial<GOPHER_ABSTRACT_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_ABSTRACT_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ShortAbstract !== undefined) view.setBigUint64(0, data.ShortAbstract === null ? 0n : BigInt(util.toPointer(data.ShortAbstract)), true);
  // 0x08: pointer
  if (data?.AbstractFile !== undefined) view.setBigUint64(8, data.AbstractFile === null ? 0n : BigInt(util.toPointer(data.AbstractFile)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_VIEW_ATTRIBUTE_TYPE (size: 24)
 */
export interface GOPHER_VIEW_ATTRIBUTE_TYPE {
  /** ptr */
  ContentType: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  Language: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Size: number;
}

export const sizeofGOPHER_VIEW_ATTRIBUTE_TYPE = 24;

export function allocGOPHER_VIEW_ATTRIBUTE_TYPE(data?: Partial<GOPHER_VIEW_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_VIEW_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ContentType !== undefined) view.setBigUint64(0, data.ContentType === null ? 0n : BigInt(util.toPointer(data.ContentType)), true);
  // 0x08: pointer
  if (data?.Language !== undefined) view.setBigUint64(8, data.Language === null ? 0n : BigInt(util.toPointer(data.Language)), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_VERONICA_ATTRIBUTE_TYPE (size: 8)
 */
export interface GOPHER_VERONICA_ATTRIBUTE_TYPE {
  /** Windows.Win32.Foundation.BOOL */
  TreeWalk: boolean;
}

export const sizeofGOPHER_VERONICA_ATTRIBUTE_TYPE = 8;

export function allocGOPHER_VERONICA_ATTRIBUTE_TYPE(data?: Partial<GOPHER_VERONICA_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_VERONICA_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.TreeWalk !== undefined) view.setInt32(0, Number(data.TreeWalk), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_ASK_ATTRIBUTE_TYPE (size: 16)
 */
export interface GOPHER_ASK_ATTRIBUTE_TYPE {
  /** ptr */
  QuestionType: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  QuestionText: Deno.PointerValue | Uint8Array | null;
}

export const sizeofGOPHER_ASK_ATTRIBUTE_TYPE = 16;

export function allocGOPHER_ASK_ATTRIBUTE_TYPE(data?: Partial<GOPHER_ASK_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_ASK_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.QuestionType !== undefined) view.setBigUint64(0, data.QuestionType === null ? 0n : BigInt(util.toPointer(data.QuestionType)), true);
  // 0x08: pointer
  if (data?.QuestionText !== undefined) view.setBigUint64(8, data.QuestionText === null ? 0n : BigInt(util.toPointer(data.QuestionText)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_UNKNOWN_ATTRIBUTE_TYPE (size: 8)
 */
export interface GOPHER_UNKNOWN_ATTRIBUTE_TYPE {
  /** ptr */
  Text: Deno.PointerValue | Uint8Array | null;
}

export const sizeofGOPHER_UNKNOWN_ATTRIBUTE_TYPE = 8;

export function allocGOPHER_UNKNOWN_ATTRIBUTE_TYPE(data?: Partial<GOPHER_UNKNOWN_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_UNKNOWN_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Text !== undefined) view.setBigUint64(0, data.Text === null ? 0n : BigInt(util.toPointer(data.Text)), true);
  return buf;
}

/**
 * _AttributeType_e__Union (size: 136)
 */
export interface _AttributeType_e__Union {
  /** Windows.Win32.Networking.WinInet.GOPHER_ADMIN_ATTRIBUTE_TYPE */
  Admin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_MOD_DATE_ATTRIBUTE_TYPE */
  ModDate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_TTL_ATTRIBUTE_TYPE */
  Ttl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_SCORE_ATTRIBUTE_TYPE */
  Score: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE */
  ScoreRange: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_SITE_ATTRIBUTE_TYPE */
  Site: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_ORGANIZATION_ATTRIBUTE_TYPE */
  Organization: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_LOCATION_ATTRIBUTE_TYPE */
  Location: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE */
  GeographicalLocation: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_TIMEZONE_ATTRIBUTE_TYPE */
  TimeZone: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_PROVIDER_ATTRIBUTE_TYPE */
  Provider: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_VERSION_ATTRIBUTE_TYPE */
  Version: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_ABSTRACT_ATTRIBUTE_TYPE */
  Abstract: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_VIEW_ATTRIBUTE_TYPE */
  View: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_VERONICA_ATTRIBUTE_TYPE */
  Veronica: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_ASK_ATTRIBUTE_TYPE */
  Ask: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.GOPHER_UNKNOWN_ATTRIBUTE_TYPE */
  Unknown: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_AttributeType_e__Union = 136;

export function alloc_AttributeType_e__Union(data?: Partial<_AttributeType_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_AttributeType_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Admin !== undefined) view.setBigUint64(0, data.Admin === null ? 0n : BigInt(util.toPointer(data.Admin)), true);
  // 0x08: pointer
  if (data?.ModDate !== undefined) view.setBigUint64(8, data.ModDate === null ? 0n : BigInt(util.toPointer(data.ModDate)), true);
  // 0x10: pointer
  if (data?.Ttl !== undefined) view.setBigUint64(16, data.Ttl === null ? 0n : BigInt(util.toPointer(data.Ttl)), true);
  // 0x18: pointer
  if (data?.Score !== undefined) view.setBigUint64(24, data.Score === null ? 0n : BigInt(util.toPointer(data.Score)), true);
  // 0x20: pointer
  if (data?.ScoreRange !== undefined) view.setBigUint64(32, data.ScoreRange === null ? 0n : BigInt(util.toPointer(data.ScoreRange)), true);
  // 0x28: pointer
  if (data?.Site !== undefined) view.setBigUint64(40, data.Site === null ? 0n : BigInt(util.toPointer(data.Site)), true);
  // 0x30: pointer
  if (data?.Organization !== undefined) view.setBigUint64(48, data.Organization === null ? 0n : BigInt(util.toPointer(data.Organization)), true);
  // 0x38: pointer
  if (data?.Location !== undefined) view.setBigUint64(56, data.Location === null ? 0n : BigInt(util.toPointer(data.Location)), true);
  // 0x40: pointer
  if (data?.GeographicalLocation !== undefined) view.setBigUint64(64, data.GeographicalLocation === null ? 0n : BigInt(util.toPointer(data.GeographicalLocation)), true);
  // 0x48: pointer
  if (data?.TimeZone !== undefined) view.setBigUint64(72, data.TimeZone === null ? 0n : BigInt(util.toPointer(data.TimeZone)), true);
  // 0x50: pointer
  if (data?.Provider !== undefined) view.setBigUint64(80, data.Provider === null ? 0n : BigInt(util.toPointer(data.Provider)), true);
  // 0x58: pointer
  if (data?.Version !== undefined) view.setBigUint64(88, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  // 0x60: pointer
  if (data?.Abstract !== undefined) view.setBigUint64(96, data.Abstract === null ? 0n : BigInt(util.toPointer(data.Abstract)), true);
  // 0x68: pointer
  if (data?.View !== undefined) view.setBigUint64(104, data.View === null ? 0n : BigInt(util.toPointer(data.View)), true);
  // 0x70: pointer
  if (data?.Veronica !== undefined) view.setBigUint64(112, data.Veronica === null ? 0n : BigInt(util.toPointer(data.Veronica)), true);
  // 0x78: pointer
  if (data?.Ask !== undefined) view.setBigUint64(120, data.Ask === null ? 0n : BigInt(util.toPointer(data.Ask)), true);
  // 0x80: pointer
  if (data?.Unknown !== undefined) view.setBigUint64(128, data.Unknown === null ? 0n : BigInt(util.toPointer(data.Unknown)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.GOPHER_ATTRIBUTE_TYPE (size: 16)
 */
export interface GOPHER_ATTRIBUTE_TYPE {
  /** u32 */
  CategoryId: number;
  /** u32 */
  AttributeId: number;
  /** _AttributeType_e__Union */
  AttributeType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGOPHER_ATTRIBUTE_TYPE = 16;

export function allocGOPHER_ATTRIBUTE_TYPE(data?: Partial<GOPHER_ATTRIBUTE_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofGOPHER_ATTRIBUTE_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CategoryId !== undefined) view.setUint32(0, Number(data.CategoryId), true);
  // 0x04: u32
  if (data?.AttributeId !== undefined) view.setUint32(4, Number(data.AttributeId), true);
  // 0x08: pointer
  if (data?.AttributeType !== undefined) view.setBigUint64(8, data.AttributeType === null ? 0n : BigInt(util.toPointer(data.AttributeType)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_COOKIE2 (size: 56)
 */
export interface INTERNET_COOKIE2 {
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszValue: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszDomain: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftExpires: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  fExpiresSet: boolean;
}

export const sizeofINTERNET_COOKIE2 = 56;

export function allocINTERNET_COOKIE2(data?: Partial<INTERNET_COOKIE2>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_COOKIE2);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwszValue !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszValue);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pwszDomain !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszDomain);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pwszPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwszPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ftExpires !== undefined) view.setBigUint64(40, data.ftExpires === null ? 0n : BigInt(util.toPointer(data.ftExpires)), true);
  // 0x30: i32
  if (data?.fExpiresSet !== undefined) view.setInt32(48, Number(data.fExpiresSet), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_AUTH_NOTIFY_DATA (size: 24)
 */
export interface INTERNET_AUTH_NOTIFY_DATA {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwOptions: number;
  /** Windows.Win32.Networking.WinInet.PFN_AUTH_NOTIFY */
  pfnNotify: Uint8Array | Deno.PointerValue | null;
  /** usize */
  dwContext: Deno.PointerValue;
}

export const sizeofINTERNET_AUTH_NOTIFY_DATA = 24;

export function allocINTERNET_AUTH_NOTIFY_DATA(data?: Partial<INTERNET_AUTH_NOTIFY_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_AUTH_NOTIFY_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwOptions !== undefined) view.setUint32(4, Number(data.dwOptions), true);
  // 0x08: pointer
  if (data?.pfnNotify !== undefined) view.setBigUint64(8, data.pfnNotify === null ? 0n : BigInt(util.toPointer(data.pfnNotify)), true);
  // 0x10: usize
  if (data?.dwContext !== undefined) view.setBigUint64(16, BigInt(data.dwContext), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CACHE_ENTRY_INFOA (size: 112)
 */
export interface INTERNET_CACHE_ENTRY_INFOA {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszSourceUrlName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpszLocalFileName: string | null | Uint8Array;
  /** u32 */
  CacheEntryType: number;
  /** u32 */
  dwUseCount: number;
  /** u32 */
  dwHitRate: number;
  /** u32 */
  dwSizeLow: number;
  /** u32 */
  dwSizeHigh: number;
  /** Windows.Win32.Foundation.FILETIME */
  LastModifiedTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ExpireTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  LastAccessTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  LastSyncTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  lpHeaderInfo: string | null | Uint8Array;
  /** u32 */
  dwHeaderInfoSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszFileExtension: string | null | Uint8Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTERNET_CACHE_ENTRY_INFOA = 112;

export function allocINTERNET_CACHE_ENTRY_INFOA(data?: Partial<INTERNET_CACHE_ENTRY_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CACHE_ENTRY_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszSourceUrlName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszSourceUrlName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpszLocalFileName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpszLocalFileName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.CacheEntryType !== undefined) view.setUint32(24, Number(data.CacheEntryType), true);
  // 0x1c: u32
  if (data?.dwUseCount !== undefined) view.setUint32(28, Number(data.dwUseCount), true);
  // 0x20: u32
  if (data?.dwHitRate !== undefined) view.setUint32(32, Number(data.dwHitRate), true);
  // 0x24: u32
  if (data?.dwSizeLow !== undefined) view.setUint32(36, Number(data.dwSizeLow), true);
  // 0x28: u32
  if (data?.dwSizeHigh !== undefined) view.setUint32(40, Number(data.dwSizeHigh), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.LastModifiedTime !== undefined) view.setBigUint64(48, data.LastModifiedTime === null ? 0n : BigInt(util.toPointer(data.LastModifiedTime)), true);
  // 0x38: pointer
  if (data?.ExpireTime !== undefined) view.setBigUint64(56, data.ExpireTime === null ? 0n : BigInt(util.toPointer(data.ExpireTime)), true);
  // 0x40: pointer
  if (data?.LastAccessTime !== undefined) view.setBigUint64(64, data.LastAccessTime === null ? 0n : BigInt(util.toPointer(data.LastAccessTime)), true);
  // 0x48: pointer
  if (data?.LastSyncTime !== undefined) view.setBigUint64(72, data.LastSyncTime === null ? 0n : BigInt(util.toPointer(data.LastSyncTime)), true);
  // 0x50: buffer
  if (data?.lpHeaderInfo !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.lpHeaderInfo);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: u32
  if (data?.dwHeaderInfoSize !== undefined) view.setUint32(88, Number(data.dwHeaderInfoSize), true);
  // 0x5c: pad4
  // 0x60: buffer
  if (data?.lpszFileExtension !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.lpszFileExtension);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(104, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CACHE_ENTRY_INFOW (size: 112)
 */
export interface INTERNET_CACHE_ENTRY_INFOW {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszSourceUrlName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszLocalFileName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  CacheEntryType: number;
  /** u32 */
  dwUseCount: number;
  /** u32 */
  dwHitRate: number;
  /** u32 */
  dwSizeLow: number;
  /** u32 */
  dwSizeHigh: number;
  /** Windows.Win32.Foundation.FILETIME */
  LastModifiedTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ExpireTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  LastAccessTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  LastSyncTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpHeaderInfo: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwHeaderInfoSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszFileExtension: string | null | Uint8Array | Uint16Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTERNET_CACHE_ENTRY_INFOW = 112;

export function allocINTERNET_CACHE_ENTRY_INFOW(data?: Partial<INTERNET_CACHE_ENTRY_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CACHE_ENTRY_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszSourceUrlName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszSourceUrlName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpszLocalFileName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszLocalFileName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u32
  if (data?.CacheEntryType !== undefined) view.setUint32(24, Number(data.CacheEntryType), true);
  // 0x1c: u32
  if (data?.dwUseCount !== undefined) view.setUint32(28, Number(data.dwUseCount), true);
  // 0x20: u32
  if (data?.dwHitRate !== undefined) view.setUint32(32, Number(data.dwHitRate), true);
  // 0x24: u32
  if (data?.dwSizeLow !== undefined) view.setUint32(36, Number(data.dwSizeLow), true);
  // 0x28: u32
  if (data?.dwSizeHigh !== undefined) view.setUint32(40, Number(data.dwSizeHigh), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.LastModifiedTime !== undefined) view.setBigUint64(48, data.LastModifiedTime === null ? 0n : BigInt(util.toPointer(data.LastModifiedTime)), true);
  // 0x38: pointer
  if (data?.ExpireTime !== undefined) view.setBigUint64(56, data.ExpireTime === null ? 0n : BigInt(util.toPointer(data.ExpireTime)), true);
  // 0x40: pointer
  if (data?.LastAccessTime !== undefined) view.setBigUint64(64, data.LastAccessTime === null ? 0n : BigInt(util.toPointer(data.LastAccessTime)), true);
  // 0x48: pointer
  if (data?.LastSyncTime !== undefined) view.setBigUint64(72, data.LastSyncTime === null ? 0n : BigInt(util.toPointer(data.LastSyncTime)), true);
  // 0x50: buffer
  if (data?.lpHeaderInfo !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.lpHeaderInfo);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: u32
  if (data?.dwHeaderInfoSize !== undefined) view.setUint32(88, Number(data.dwHeaderInfoSize), true);
  // 0x5c: pad4
  // 0x60: buffer
  if (data?.lpszFileExtension !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.lpszFileExtension);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(104, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CACHE_TIMESTAMPS (size: 16)
 */
export interface INTERNET_CACHE_TIMESTAMPS {
  /** Windows.Win32.Foundation.FILETIME */
  ftExpires: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastModified: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTERNET_CACHE_TIMESTAMPS = 16;

export function allocINTERNET_CACHE_TIMESTAMPS(data?: Partial<INTERNET_CACHE_TIMESTAMPS>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CACHE_TIMESTAMPS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ftExpires !== undefined) view.setBigUint64(0, data.ftExpires === null ? 0n : BigInt(util.toPointer(data.ftExpires)), true);
  // 0x08: pointer
  if (data?.ftLastModified !== undefined) view.setBigUint64(8, data.ftLastModified === null ? 0n : BigInt(util.toPointer(data.ftLastModified)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CACHE_GROUP_INFOA (size: 40)
 */
export interface INTERNET_CACHE_GROUP_INFOA {
  /** u32 */
  dwGroupSize: number;
  /** u32 */
  dwGroupFlags: number;
  /** u32 */
  dwGroupType: number;
  /** u32 */
  dwDiskUsage: number;
  /** u32 */
  dwDiskQuota: number;
  /** array */
  dwOwnerStorage: Deno.PointerValue | null;
  /** array */
  szGroupName: Deno.PointerValue | null;
}

export const sizeofINTERNET_CACHE_GROUP_INFOA = 40;

export function allocINTERNET_CACHE_GROUP_INFOA(data?: Partial<INTERNET_CACHE_GROUP_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CACHE_GROUP_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwGroupSize !== undefined) view.setUint32(0, Number(data.dwGroupSize), true);
  // 0x04: u32
  if (data?.dwGroupFlags !== undefined) view.setUint32(4, Number(data.dwGroupFlags), true);
  // 0x08: u32
  if (data?.dwGroupType !== undefined) view.setUint32(8, Number(data.dwGroupType), true);
  // 0x0c: u32
  if (data?.dwDiskUsage !== undefined) view.setUint32(12, Number(data.dwDiskUsage), true);
  // 0x10: u32
  if (data?.dwDiskQuota !== undefined) view.setUint32(16, Number(data.dwDiskQuota), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwOwnerStorage !== undefined) view.setBigUint64(24, data.dwOwnerStorage === null ? 0n : BigInt(util.toPointer(data.dwOwnerStorage)), true);
  // 0x20: pointer
  if (data?.szGroupName !== undefined) view.setBigUint64(32, data.szGroupName === null ? 0n : BigInt(util.toPointer(data.szGroupName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CACHE_GROUP_INFOW (size: 40)
 */
export interface INTERNET_CACHE_GROUP_INFOW {
  /** u32 */
  dwGroupSize: number;
  /** u32 */
  dwGroupFlags: number;
  /** u32 */
  dwGroupType: number;
  /** u32 */
  dwDiskUsage: number;
  /** u32 */
  dwDiskQuota: number;
  /** array */
  dwOwnerStorage: Deno.PointerValue | null;
  /** array */
  szGroupName: Deno.PointerValue | null;
}

export const sizeofINTERNET_CACHE_GROUP_INFOW = 40;

export function allocINTERNET_CACHE_GROUP_INFOW(data?: Partial<INTERNET_CACHE_GROUP_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CACHE_GROUP_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwGroupSize !== undefined) view.setUint32(0, Number(data.dwGroupSize), true);
  // 0x04: u32
  if (data?.dwGroupFlags !== undefined) view.setUint32(4, Number(data.dwGroupFlags), true);
  // 0x08: u32
  if (data?.dwGroupType !== undefined) view.setUint32(8, Number(data.dwGroupType), true);
  // 0x0c: u32
  if (data?.dwDiskUsage !== undefined) view.setUint32(12, Number(data.dwDiskUsage), true);
  // 0x10: u32
  if (data?.dwDiskQuota !== undefined) view.setUint32(16, Number(data.dwDiskQuota), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwOwnerStorage !== undefined) view.setBigUint64(24, data.dwOwnerStorage === null ? 0n : BigInt(util.toPointer(data.dwOwnerStorage)), true);
  // 0x20: pointer
  if (data?.szGroupName !== undefined) view.setBigUint64(32, data.szGroupName === null ? 0n : BigInt(util.toPointer(data.szGroupName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.AutoProxyHelperVtbl (size: 72)
 */
export interface AutoProxyHelperVtbl {
  /** isize */
  IsResolvable: Deno.PointerValue;
  /** isize */
  GetIPAddress: Deno.PointerValue;
  /** isize */
  ResolveHostName: Deno.PointerValue;
  /** isize */
  IsInNet: Deno.PointerValue;
  /** isize */
  IsResolvableEx: Deno.PointerValue;
  /** isize */
  GetIPAddressEx: Deno.PointerValue;
  /** isize */
  ResolveHostNameEx: Deno.PointerValue;
  /** isize */
  IsInNetEx: Deno.PointerValue;
  /** isize */
  SortIpList: Deno.PointerValue;
}

export const sizeofAutoProxyHelperVtbl = 72;

export function allocAutoProxyHelperVtbl(data?: Partial<AutoProxyHelperVtbl>): Uint8Array {
  const buf = new Uint8Array(sizeofAutoProxyHelperVtbl);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.IsResolvable !== undefined) view.setBigInt64(0, BigInt(data.IsResolvable), true);
  // 0x08: isize
  if (data?.GetIPAddress !== undefined) view.setBigInt64(8, BigInt(data.GetIPAddress), true);
  // 0x10: isize
  if (data?.ResolveHostName !== undefined) view.setBigInt64(16, BigInt(data.ResolveHostName), true);
  // 0x18: isize
  if (data?.IsInNet !== undefined) view.setBigInt64(24, BigInt(data.IsInNet), true);
  // 0x20: isize
  if (data?.IsResolvableEx !== undefined) view.setBigInt64(32, BigInt(data.IsResolvableEx), true);
  // 0x28: isize
  if (data?.GetIPAddressEx !== undefined) view.setBigInt64(40, BigInt(data.GetIPAddressEx), true);
  // 0x30: isize
  if (data?.ResolveHostNameEx !== undefined) view.setBigInt64(48, BigInt(data.ResolveHostNameEx), true);
  // 0x38: isize
  if (data?.IsInNetEx !== undefined) view.setBigInt64(56, BigInt(data.IsInNetEx), true);
  // 0x40: isize
  if (data?.SortIpList !== undefined) view.setBigInt64(64, BigInt(data.SortIpList), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.AUTO_PROXY_SCRIPT_BUFFER (size: 24)
 */
export interface AUTO_PROXY_SCRIPT_BUFFER {
  /** u32 */
  dwStructSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszScriptBuffer: string | null | Uint8Array;
  /** u32 */
  dwScriptBufferSize: number;
}

export const sizeofAUTO_PROXY_SCRIPT_BUFFER = 24;

export function allocAUTO_PROXY_SCRIPT_BUFFER(data?: Partial<AUTO_PROXY_SCRIPT_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofAUTO_PROXY_SCRIPT_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszScriptBuffer !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszScriptBuffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwScriptBufferSize !== undefined) view.setUint32(16, Number(data.dwScriptBufferSize), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.AutoProxyHelperFunctions (size: 8)
 */
export interface AutoProxyHelperFunctions {
  /** ptr */
  lpVtbl: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAutoProxyHelperFunctions = 8;

export function allocAutoProxyHelperFunctions(data?: Partial<AutoProxyHelperFunctions>): Uint8Array {
  const buf = new Uint8Array(sizeofAutoProxyHelperFunctions);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpVtbl !== undefined) view.setBigUint64(0, data.lpVtbl === null ? 0n : BigInt(util.toPointer(data.lpVtbl)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_PREFETCH_STATUS (size: 8)
 */
export interface INTERNET_PREFETCH_STATUS {
  /** u32 */
  dwStatus: number;
  /** u32 */
  dwSize: number;
}

export const sizeofINTERNET_PREFETCH_STATUS = 8;

export function allocINTERNET_PREFETCH_STATUS(data?: Partial<INTERNET_PREFETCH_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_PREFETCH_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStatus !== undefined) view.setUint32(0, Number(data.dwStatus), true);
  // 0x04: u32
  if (data?.dwSize !== undefined) view.setUint32(4, Number(data.dwSize), true);
  return buf;
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_ConnectionInfo (size: 32)
 */
export interface SecPkgContext_ConnectionInfo {
  /** u32 */
  dwProtocol: number;
  /** u32 */
  aiCipher: number;
  /** u32 */
  dwCipherStrength: number;
  /** u32 */
  aiHash: number;
  /** u32 */
  dwHashStrength: number;
  /** u32 */
  aiExch: number;
  /** u32 */
  dwExchStrength: number;
}

export const sizeofSecPkgContext_ConnectionInfo = 32;

export function allocSecPkgContext_ConnectionInfo(data?: Partial<SecPkgContext_ConnectionInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_ConnectionInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwProtocol !== undefined) view.setUint32(0, Number(data.dwProtocol), true);
  // 0x04: u32
  if (data?.aiCipher !== undefined) view.setUint32(4, Number(data.aiCipher), true);
  // 0x08: u32
  if (data?.dwCipherStrength !== undefined) view.setUint32(8, Number(data.dwCipherStrength), true);
  // 0x0c: u32
  if (data?.aiHash !== undefined) view.setUint32(12, Number(data.aiHash), true);
  // 0x10: u32
  if (data?.dwHashStrength !== undefined) view.setUint32(16, Number(data.dwHashStrength), true);
  // 0x14: u32
  if (data?.aiExch !== undefined) view.setUint32(20, Number(data.aiExch), true);
  // 0x18: u32
  if (data?.dwExchStrength !== undefined) view.setUint32(24, Number(data.dwExchStrength), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_CipherInfo (size: 88)
 */
export interface SecPkgContext_CipherInfo {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwProtocol: number;
  /** u32 */
  dwCipherSuite: number;
  /** u32 */
  dwBaseCipherSuite: number;
  /** array */
  szCipherSuite: Deno.PointerValue | null;
  /** array */
  szCipher: Deno.PointerValue | null;
  /** u32 */
  dwCipherLen: number;
  /** u32 */
  dwCipherBlockLen: number;
  /** array */
  szHash: Deno.PointerValue | null;
  /** u32 */
  dwHashLen: number;
  /** array */
  szExchange: Deno.PointerValue | null;
  /** u32 */
  dwMinExchangeLen: number;
  /** u32 */
  dwMaxExchangeLen: number;
  /** array */
  szCertificate: Deno.PointerValue | null;
  /** u32 */
  dwKeyType: number;
}

export const sizeofSecPkgContext_CipherInfo = 88;

export function allocSecPkgContext_CipherInfo(data?: Partial<SecPkgContext_CipherInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_CipherInfo);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwProtocol !== undefined) view.setUint32(4, Number(data.dwProtocol), true);
  // 0x08: u32
  if (data?.dwCipherSuite !== undefined) view.setUint32(8, Number(data.dwCipherSuite), true);
  // 0x0c: u32
  if (data?.dwBaseCipherSuite !== undefined) view.setUint32(12, Number(data.dwBaseCipherSuite), true);
  // 0x10: pointer
  if (data?.szCipherSuite !== undefined) view.setBigUint64(16, data.szCipherSuite === null ? 0n : BigInt(util.toPointer(data.szCipherSuite)), true);
  // 0x18: pointer
  if (data?.szCipher !== undefined) view.setBigUint64(24, data.szCipher === null ? 0n : BigInt(util.toPointer(data.szCipher)), true);
  // 0x20: u32
  if (data?.dwCipherLen !== undefined) view.setUint32(32, Number(data.dwCipherLen), true);
  // 0x24: u32
  if (data?.dwCipherBlockLen !== undefined) view.setUint32(36, Number(data.dwCipherBlockLen), true);
  // 0x28: pointer
  if (data?.szHash !== undefined) view.setBigUint64(40, data.szHash === null ? 0n : BigInt(util.toPointer(data.szHash)), true);
  // 0x30: u32
  if (data?.dwHashLen !== undefined) view.setUint32(48, Number(data.dwHashLen), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.szExchange !== undefined) view.setBigUint64(56, data.szExchange === null ? 0n : BigInt(util.toPointer(data.szExchange)), true);
  // 0x40: u32
  if (data?.dwMinExchangeLen !== undefined) view.setUint32(64, Number(data.dwMinExchangeLen), true);
  // 0x44: u32
  if (data?.dwMaxExchangeLen !== undefined) view.setUint32(68, Number(data.dwMaxExchangeLen), true);
  // 0x48: pointer
  if (data?.szCertificate !== undefined) view.setBigUint64(72, data.szCertificate === null ? 0n : BigInt(util.toPointer(data.szCertificate)), true);
  // 0x50: u32
  if (data?.dwKeyType !== undefined) view.setUint32(80, Number(data.dwKeyType), true);
  // 0x54: pad4
  return buf;
}

/**
 * Windows.Win32.Security.Authentication.Identity.SecPkgContext_Bindings (size: 16)
 */
export interface SecPkgContext_Bindings {
  /** u32 */
  BindingsLength: number;
  /** ptr */
  Bindings: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSecPkgContext_Bindings = 16;

export function allocSecPkgContext_Bindings(data?: Partial<SecPkgContext_Bindings>): Uint8Array {
  const buf = new Uint8Array(sizeofSecPkgContext_Bindings);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BindingsLength !== undefined) view.setUint32(0, Number(data.BindingsLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Bindings !== undefined) view.setBigUint64(8, data.Bindings === null ? 0n : BigInt(util.toPointer(data.Bindings)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_SECURITY_INFO (size: 56)
 */
export interface INTERNET_SECURITY_INFO {
  /** u32 */
  dwSize: number;
  /** ptr */
  pCertificate: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pcCertChain: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Authentication.Identity.SecPkgContext_ConnectionInfo */
  connectionInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SecPkgContext_CipherInfo */
  cipherInfo: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pcUnverifiedCertChain: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Security.Authentication.Identity.SecPkgContext_Bindings */
  channelBindingToken: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTERNET_SECURITY_INFO = 56;

export function allocINTERNET_SECURITY_INFO(data?: Partial<INTERNET_SECURITY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_SECURITY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCertificate !== undefined) view.setBigUint64(8, data.pCertificate === null ? 0n : BigInt(util.toPointer(data.pCertificate)), true);
  // 0x10: pointer
  if (data?.pcCertChain !== undefined) view.setBigUint64(16, data.pcCertChain === null ? 0n : BigInt(util.toPointer(data.pcCertChain)), true);
  // 0x18: pointer
  if (data?.connectionInfo !== undefined) view.setBigUint64(24, data.connectionInfo === null ? 0n : BigInt(util.toPointer(data.connectionInfo)), true);
  // 0x20: pointer
  if (data?.cipherInfo !== undefined) view.setBigUint64(32, data.cipherInfo === null ? 0n : BigInt(util.toPointer(data.cipherInfo)), true);
  // 0x28: pointer
  if (data?.pcUnverifiedCertChain !== undefined) view.setBigUint64(40, data.pcUnverifiedCertChain === null ? 0n : BigInt(util.toPointer(data.pcUnverifiedCertChain)), true);
  // 0x30: pointer
  if (data?.channelBindingToken !== undefined) view.setBigUint64(48, data.channelBindingToken === null ? 0n : BigInt(util.toPointer(data.channelBindingToken)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_SECURITY_CONNECTION_INFO (size: 24)
 */
export interface INTERNET_SECURITY_CONNECTION_INFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.BOOL */
  fSecure: boolean;
  /** Windows.Win32.Security.Authentication.Identity.SecPkgContext_ConnectionInfo */
  connectionInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Security.Authentication.Identity.SecPkgContext_CipherInfo */
  cipherInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTERNET_SECURITY_CONNECTION_INFO = 24;

export function allocINTERNET_SECURITY_CONNECTION_INFO(data?: Partial<INTERNET_SECURITY_CONNECTION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_SECURITY_CONNECTION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.fSecure !== undefined) view.setInt32(4, Number(data.fSecure), true);
  // 0x08: pointer
  if (data?.connectionInfo !== undefined) view.setBigUint64(8, data.connectionInfo === null ? 0n : BigInt(util.toPointer(data.connectionInfo)), true);
  // 0x10: pointer
  if (data?.cipherInfo !== undefined) view.setBigUint64(16, data.cipherInfo === null ? 0n : BigInt(util.toPointer(data.cipherInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_DOWNLOAD_MODE_HANDLE (size: 16)
 */
export interface INTERNET_DOWNLOAD_MODE_HANDLE {
  /** Windows.Win32.Foundation.PWSTR */
  pcwszFileName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  phFile: Deno.PointerValue | Uint8Array | null;
}

export const sizeofINTERNET_DOWNLOAD_MODE_HANDLE = 16;

export function allocINTERNET_DOWNLOAD_MODE_HANDLE(data?: Partial<INTERNET_DOWNLOAD_MODE_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_DOWNLOAD_MODE_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pcwszFileName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pcwszFileName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.phFile !== undefined) view.setBigUint64(8, data.phFile === null ? 0n : BigInt(util.toPointer(data.phFile)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.HTTP_REQUEST_TIMES (size: 16)
 */
export interface HTTP_REQUEST_TIMES {
  /** u32 */
  cTimes: number;
  /** array */
  rgTimes: Deno.PointerValue | null;
}

export const sizeofHTTP_REQUEST_TIMES = 16;

export function allocHTTP_REQUEST_TIMES(data?: Partial<HTTP_REQUEST_TIMES>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_REQUEST_TIMES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cTimes !== undefined) view.setUint32(0, Number(data.cTimes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rgTimes !== undefined) view.setBigUint64(8, data.rgTimes === null ? 0n : BigInt(util.toPointer(data.rgTimes)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_SERVER_CONNECTION_STATE (size: 40)
 */
export interface INTERNET_SERVER_CONNECTION_STATE {
  /** Windows.Win32.Foundation.PWSTR */
  lpcwszHostName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  fProxy: boolean;
  /** u32 */
  dwCounter: number;
  /** u32 */
  dwConnectionLimit: number;
  /** u32 */
  dwAvailableCreates: number;
  /** u32 */
  dwAvailableKeepAlives: number;
  /** u32 */
  dwActiveConnections: number;
  /** u32 */
  dwWaiters: number;
}

export const sizeofINTERNET_SERVER_CONNECTION_STATE = 40;

export function allocINTERNET_SERVER_CONNECTION_STATE(data?: Partial<INTERNET_SERVER_CONNECTION_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_SERVER_CONNECTION_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpcwszHostName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpcwszHostName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.fProxy !== undefined) view.setInt32(8, Number(data.fProxy), true);
  // 0x0c: u32
  if (data?.dwCounter !== undefined) view.setUint32(12, Number(data.dwCounter), true);
  // 0x10: u32
  if (data?.dwConnectionLimit !== undefined) view.setUint32(16, Number(data.dwConnectionLimit), true);
  // 0x14: u32
  if (data?.dwAvailableCreates !== undefined) view.setUint32(20, Number(data.dwAvailableCreates), true);
  // 0x18: u32
  if (data?.dwAvailableKeepAlives !== undefined) view.setUint32(24, Number(data.dwAvailableKeepAlives), true);
  // 0x1c: u32
  if (data?.dwActiveConnections !== undefined) view.setUint32(28, Number(data.dwActiveConnections), true);
  // 0x20: u32
  if (data?.dwWaiters !== undefined) view.setUint32(32, Number(data.dwWaiters), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_END_BROWSER_SESSION_DATA (size: 16)
 */
export interface INTERNET_END_BROWSER_SESSION_DATA {
  /** ptr */
  lpBuffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwBufferLength: number;
}

export const sizeofINTERNET_END_BROWSER_SESSION_DATA = 16;

export function allocINTERNET_END_BROWSER_SESSION_DATA(data?: Partial<INTERNET_END_BROWSER_SESSION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_END_BROWSER_SESSION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBuffer !== undefined) view.setBigUint64(0, data.lpBuffer === null ? 0n : BigInt(util.toPointer(data.lpBuffer)), true);
  // 0x08: u32
  if (data?.dwBufferLength !== undefined) view.setUint32(8, Number(data.dwBufferLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CALLBACK_COOKIE (size: 48)
 */
export interface INTERNET_CALLBACK_COOKIE {
  /** Windows.Win32.Foundation.PWSTR */
  pcwszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszValue: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszDomain: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pcwszPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftExpires: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofINTERNET_CALLBACK_COOKIE = 48;

export function allocINTERNET_CALLBACK_COOKIE(data?: Partial<INTERNET_CALLBACK_COOKIE>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CALLBACK_COOKIE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pcwszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pcwszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pcwszValue !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pcwszValue);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pcwszDomain !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pcwszDomain);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pcwszPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pcwszPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.ftExpires !== undefined) view.setBigUint64(32, data.ftExpires === null ? 0n : BigInt(util.toPointer(data.ftExpires)), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CREDENTIALS (size: 48)
 */
export interface INTERNET_CREDENTIALS {
  /** Windows.Win32.Foundation.PWSTR */
  lpcwszHostName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwPort: number;
  /** u32 */
  dwScheme: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpcwszUrl: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpcwszRealm: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  fAuthIdentity: boolean;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTERNET_CREDENTIALS = 48;

export function allocINTERNET_CREDENTIALS(data?: Partial<INTERNET_CREDENTIALS>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CREDENTIALS);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpcwszHostName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpcwszHostName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwPort !== undefined) view.setUint32(8, Number(data.dwPort), true);
  // 0x0c: u32
  if (data?.dwScheme !== undefined) view.setUint32(12, Number(data.dwScheme), true);
  // 0x10: buffer
  if (data?.lpcwszUrl !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpcwszUrl);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpcwszRealm !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpcwszRealm);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: i32
  if (data?.fAuthIdentity !== undefined) view.setInt32(32, Number(data.fAuthIdentity), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.HTTP_PUSH_TRANSPORT_SETTING (size: 16)
 */
export interface HTTP_PUSH_TRANSPORT_SETTING {
  /** System.Guid */
  TransportSettingId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  BrokerEventId: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_PUSH_TRANSPORT_SETTING = 16;

export function allocHTTP_PUSH_TRANSPORT_SETTING(data?: Partial<HTTP_PUSH_TRANSPORT_SETTING>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_PUSH_TRANSPORT_SETTING);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransportSettingId !== undefined) view.setBigUint64(0, data.TransportSettingId === null ? 0n : BigInt(util.toPointer(data.TransportSettingId)), true);
  // 0x08: pointer
  if (data?.BrokerEventId !== undefined) view.setBigUint64(8, data.BrokerEventId === null ? 0n : BigInt(util.toPointer(data.BrokerEventId)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.HTTP_PUSH_NOTIFICATION_STATUS (size: 8)
 */
export interface HTTP_PUSH_NOTIFICATION_STATUS {
  /** Windows.Win32.Foundation.BOOL */
  ChannelStatusValid: boolean;
  /** u32 */
  ChannelStatus: number;
}

export const sizeofHTTP_PUSH_NOTIFICATION_STATUS = 8;

export function allocHTTP_PUSH_NOTIFICATION_STATUS(data?: Partial<HTTP_PUSH_NOTIFICATION_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_PUSH_NOTIFICATION_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ChannelStatusValid !== undefined) view.setInt32(0, Number(data.ChannelStatusValid), true);
  // 0x04: u32
  if (data?.ChannelStatus !== undefined) view.setUint32(4, Number(data.ChannelStatus), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_COOKIE (size: 72)
 */
export interface INTERNET_COOKIE {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PSTR */
  pszName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszData: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszDomain: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszPath: string | null | Uint8Array;
  /** ptr */
  pftExpires: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PSTR */
  pszUrl: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszP3PPolicy: string | null | Uint8Array;
}

export const sizeofINTERNET_COOKIE = 72;

export function allocINTERNET_COOKIE(data?: Partial<INTERNET_COOKIE>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_COOKIE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pszData !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszData);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pszDomain !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszDomain);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pszPath !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pszPath);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.pftExpires !== undefined) view.setBigUint64(40, data.pftExpires === null ? 0n : BigInt(util.toPointer(data.pftExpires)), true);
  // 0x30: u32
  if (data?.dwFlags !== undefined) view.setUint32(48, Number(data.dwFlags), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.pszUrl !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.pszUrl);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.pszP3PPolicy !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.pszP3PPolicy);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.COOKIE_DLG_INFO (size: 48)
 */
export interface COOKIE_DLG_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pszServer: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pic: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwStopWarning: number;
  /** i32 */
  cx: number;
  /** i32 */
  cy: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszHeader: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwOperation: number;
}

export const sizeofCOOKIE_DLG_INFO = 48;

export function allocCOOKIE_DLG_INFO(data?: Partial<COOKIE_DLG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCOOKIE_DLG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszServer !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszServer);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.pic !== undefined) view.setBigUint64(8, data.pic === null ? 0n : BigInt(util.toPointer(data.pic)), true);
  // 0x10: u32
  if (data?.dwStopWarning !== undefined) view.setUint32(16, Number(data.dwStopWarning), true);
  // 0x14: i32
  if (data?.cx !== undefined) view.setInt32(20, Number(data.cx), true);
  // 0x18: i32
  if (data?.cy !== undefined) view.setInt32(24, Number(data.cy), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.pszHeader !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszHeader);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwOperation !== undefined) view.setUint32(40, Number(data.dwOperation), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CACHE_CONFIG_PATH_ENTRYA (size: 16)
 */
export interface INTERNET_CACHE_CONFIG_PATH_ENTRYA {
  /** array */
  CachePath: Deno.PointerValue | null;
  /** u32 */
  dwCacheSize: number;
}

export const sizeofINTERNET_CACHE_CONFIG_PATH_ENTRYA = 16;

export function allocINTERNET_CACHE_CONFIG_PATH_ENTRYA(data?: Partial<INTERNET_CACHE_CONFIG_PATH_ENTRYA>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CACHE_CONFIG_PATH_ENTRYA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CachePath !== undefined) view.setBigUint64(0, data.CachePath === null ? 0n : BigInt(util.toPointer(data.CachePath)), true);
  // 0x08: u32
  if (data?.dwCacheSize !== undefined) view.setUint32(8, Number(data.dwCacheSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CACHE_CONFIG_PATH_ENTRYW (size: 16)
 */
export interface INTERNET_CACHE_CONFIG_PATH_ENTRYW {
  /** array */
  CachePath: Deno.PointerValue | null;
  /** u32 */
  dwCacheSize: number;
}

export const sizeofINTERNET_CACHE_CONFIG_PATH_ENTRYW = 16;

export function allocINTERNET_CACHE_CONFIG_PATH_ENTRYW(data?: Partial<INTERNET_CACHE_CONFIG_PATH_ENTRYW>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CACHE_CONFIG_PATH_ENTRYW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CachePath !== undefined) view.setBigUint64(0, data.CachePath === null ? 0n : BigInt(util.toPointer(data.CachePath)), true);
  // 0x08: u32
  if (data?.dwCacheSize !== undefined) view.setUint32(8, Number(data.dwCacheSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CACHE_CONFIG_INFOA (size: 48)
 */
export interface INTERNET_CACHE_CONFIG_INFOA {
  /** u32 */
  dwStructSize: number;
  /** u32 */
  dwContainer: number;
  /** u32 */
  dwQuota: number;
  /** u32 */
  dwReserved4: number;
  /** Windows.Win32.Foundation.BOOL */
  fPerUser: boolean;
  /** u32 */
  dwSyncMode: number;
  /** u32 */
  dwNumCachePaths: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNormalUsage: number;
  /** u32 */
  dwExemptUsage: number;
}

export const sizeofINTERNET_CACHE_CONFIG_INFOA = 48;

export function allocINTERNET_CACHE_CONFIG_INFOA(data?: Partial<INTERNET_CACHE_CONFIG_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CACHE_CONFIG_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: u32
  if (data?.dwContainer !== undefined) view.setUint32(4, Number(data.dwContainer), true);
  // 0x08: u32
  if (data?.dwQuota !== undefined) view.setUint32(8, Number(data.dwQuota), true);
  // 0x0c: u32
  if (data?.dwReserved4 !== undefined) view.setUint32(12, Number(data.dwReserved4), true);
  // 0x10: i32
  if (data?.fPerUser !== undefined) view.setInt32(16, Number(data.fPerUser), true);
  // 0x14: u32
  if (data?.dwSyncMode !== undefined) view.setUint32(20, Number(data.dwSyncMode), true);
  // 0x18: u32
  if (data?.dwNumCachePaths !== undefined) view.setUint32(24, Number(data.dwNumCachePaths), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x28: u32
  if (data?.dwNormalUsage !== undefined) view.setUint32(40, Number(data.dwNormalUsage), true);
  // 0x2c: u32
  if (data?.dwExemptUsage !== undefined) view.setUint32(44, Number(data.dwExemptUsage), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CACHE_CONFIG_INFOW (size: 48)
 */
export interface INTERNET_CACHE_CONFIG_INFOW {
  /** u32 */
  dwStructSize: number;
  /** u32 */
  dwContainer: number;
  /** u32 */
  dwQuota: number;
  /** u32 */
  dwReserved4: number;
  /** Windows.Win32.Foundation.BOOL */
  fPerUser: boolean;
  /** u32 */
  dwSyncMode: number;
  /** u32 */
  dwNumCachePaths: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNormalUsage: number;
  /** u32 */
  dwExemptUsage: number;
}

export const sizeofINTERNET_CACHE_CONFIG_INFOW = 48;

export function allocINTERNET_CACHE_CONFIG_INFOW(data?: Partial<INTERNET_CACHE_CONFIG_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CACHE_CONFIG_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStructSize !== undefined) view.setUint32(0, Number(data.dwStructSize), true);
  // 0x04: u32
  if (data?.dwContainer !== undefined) view.setUint32(4, Number(data.dwContainer), true);
  // 0x08: u32
  if (data?.dwQuota !== undefined) view.setUint32(8, Number(data.dwQuota), true);
  // 0x0c: u32
  if (data?.dwReserved4 !== undefined) view.setUint32(12, Number(data.dwReserved4), true);
  // 0x10: i32
  if (data?.fPerUser !== undefined) view.setInt32(16, Number(data.fPerUser), true);
  // 0x14: u32
  if (data?.dwSyncMode !== undefined) view.setUint32(20, Number(data.dwSyncMode), true);
  // 0x18: u32
  if (data?.dwNumCachePaths !== undefined) view.setUint32(24, Number(data.dwNumCachePaths), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x28: u32
  if (data?.dwNormalUsage !== undefined) view.setUint32(40, Number(data.dwNormalUsage), true);
  // 0x2c: u32
  if (data?.dwExemptUsage !== undefined) view.setUint32(44, Number(data.dwExemptUsage), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CACHE_CONTAINER_INFOA (size: 40)
 */
export interface INTERNET_CACHE_CONTAINER_INFOA {
  /** u32 */
  dwCacheVersion: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpszCachePrefix: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpszVolumeLabel: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  lpszVolumeTitle: string | null | Uint8Array;
}

export const sizeofINTERNET_CACHE_CONTAINER_INFOA = 40;

export function allocINTERNET_CACHE_CONTAINER_INFOA(data?: Partial<INTERNET_CACHE_CONTAINER_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CACHE_CONTAINER_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCacheVersion !== undefined) view.setUint32(0, Number(data.dwCacheVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpszCachePrefix !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpszCachePrefix);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpszVolumeLabel !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpszVolumeLabel);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpszVolumeTitle !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpszVolumeTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.INTERNET_CACHE_CONTAINER_INFOW (size: 40)
 */
export interface INTERNET_CACHE_CONTAINER_INFOW {
  /** u32 */
  dwCacheVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszCachePrefix: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszVolumeLabel: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszVolumeTitle: string | null | Uint8Array | Uint16Array;
}

export const sizeofINTERNET_CACHE_CONTAINER_INFOW = 40;

export function allocINTERNET_CACHE_CONTAINER_INFOW(data?: Partial<INTERNET_CACHE_CONTAINER_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERNET_CACHE_CONTAINER_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCacheVersion !== undefined) view.setUint32(0, Number(data.dwCacheVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpszCachePrefix !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszCachePrefix);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpszVolumeLabel !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszVolumeLabel);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpszVolumeTitle !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpszVolumeTitle);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.APP_CACHE_DOWNLOAD_ENTRY (size: 16)
 */
export interface APP_CACHE_DOWNLOAD_ENTRY {
  /** Windows.Win32.Foundation.PWSTR */
  pwszUrl: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwEntryType: number;
}

export const sizeofAPP_CACHE_DOWNLOAD_ENTRY = 16;

export function allocAPP_CACHE_DOWNLOAD_ENTRY(data?: Partial<APP_CACHE_DOWNLOAD_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofAPP_CACHE_DOWNLOAD_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszUrl !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszUrl);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwEntryType !== undefined) view.setUint32(8, Number(data.dwEntryType), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.APP_CACHE_DOWNLOAD_LIST (size: 16)
 */
export interface APP_CACHE_DOWNLOAD_LIST {
  /** u32 */
  dwEntryCount: number;
  /** ptr */
  pEntries: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAPP_CACHE_DOWNLOAD_LIST = 16;

export function allocAPP_CACHE_DOWNLOAD_LIST(data?: Partial<APP_CACHE_DOWNLOAD_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofAPP_CACHE_DOWNLOAD_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwEntryCount !== undefined) view.setUint32(0, Number(data.dwEntryCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pEntries !== undefined) view.setBigUint64(8, data.pEntries === null ? 0n : BigInt(util.toPointer(data.pEntries)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.APP_CACHE_GROUP_INFO (size: 24)
 */
export interface APP_CACHE_GROUP_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwszManifestUrl: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastAccessTime: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  ullSize: Deno.PointerValue;
}

export const sizeofAPP_CACHE_GROUP_INFO = 24;

export function allocAPP_CACHE_GROUP_INFO(data?: Partial<APP_CACHE_GROUP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofAPP_CACHE_GROUP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszManifestUrl !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszManifestUrl);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.ftLastAccessTime !== undefined) view.setBigUint64(8, data.ftLastAccessTime === null ? 0n : BigInt(util.toPointer(data.ftLastAccessTime)), true);
  // 0x10: u64
  if (data?.ullSize !== undefined) view.setBigUint64(16, BigInt(data.ullSize), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.APP_CACHE_GROUP_LIST (size: 16)
 */
export interface APP_CACHE_GROUP_LIST {
  /** u32 */
  dwAppCacheGroupCount: number;
  /** ptr */
  pAppCacheGroups: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAPP_CACHE_GROUP_LIST = 16;

export function allocAPP_CACHE_GROUP_LIST(data?: Partial<APP_CACHE_GROUP_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofAPP_CACHE_GROUP_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAppCacheGroupCount !== undefined) view.setUint32(0, Number(data.dwAppCacheGroupCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pAppCacheGroups !== undefined) view.setBigUint64(8, data.pAppCacheGroups === null ? 0n : BigInt(util.toPointer(data.pAppCacheGroups)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.URLCACHE_ENTRY_INFO (size: 104)
 */
export interface URLCACHE_ENTRY_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pwszSourceUrlName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwszLocalFileName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwCacheEntryType: number;
  /** u32 */
  dwUseCount: number;
  /** u32 */
  dwHitRate: number;
  /** u32 */
  dwSizeLow: number;
  /** u32 */
  dwSizeHigh: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastModifiedTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ftExpireTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastAccessTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.FILETIME */
  ftLastSyncTime: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  pbHeaderInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbHeaderInfoSize: number;
  /** ptr */
  pbExtraData: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  cbExtraDataSize: number;
}

export const sizeofURLCACHE_ENTRY_INFO = 104;

export function allocURLCACHE_ENTRY_INFO(data?: Partial<URLCACHE_ENTRY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofURLCACHE_ENTRY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwszSourceUrlName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwszSourceUrlName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pwszLocalFileName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszLocalFileName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwCacheEntryType !== undefined) view.setUint32(16, Number(data.dwCacheEntryType), true);
  // 0x14: u32
  if (data?.dwUseCount !== undefined) view.setUint32(20, Number(data.dwUseCount), true);
  // 0x18: u32
  if (data?.dwHitRate !== undefined) view.setUint32(24, Number(data.dwHitRate), true);
  // 0x1c: u32
  if (data?.dwSizeLow !== undefined) view.setUint32(28, Number(data.dwSizeLow), true);
  // 0x20: u32
  if (data?.dwSizeHigh !== undefined) view.setUint32(32, Number(data.dwSizeHigh), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ftLastModifiedTime !== undefined) view.setBigUint64(40, data.ftLastModifiedTime === null ? 0n : BigInt(util.toPointer(data.ftLastModifiedTime)), true);
  // 0x30: pointer
  if (data?.ftExpireTime !== undefined) view.setBigUint64(48, data.ftExpireTime === null ? 0n : BigInt(util.toPointer(data.ftExpireTime)), true);
  // 0x38: pointer
  if (data?.ftLastAccessTime !== undefined) view.setBigUint64(56, data.ftLastAccessTime === null ? 0n : BigInt(util.toPointer(data.ftLastAccessTime)), true);
  // 0x40: pointer
  if (data?.ftLastSyncTime !== undefined) view.setBigUint64(64, data.ftLastSyncTime === null ? 0n : BigInt(util.toPointer(data.ftLastSyncTime)), true);
  // 0x48: pointer
  if (data?.pbHeaderInfo !== undefined) view.setBigUint64(72, data.pbHeaderInfo === null ? 0n : BigInt(util.toPointer(data.pbHeaderInfo)), true);
  // 0x50: u32
  if (data?.cbHeaderInfoSize !== undefined) view.setUint32(80, Number(data.cbHeaderInfoSize), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pbExtraData !== undefined) view.setBigUint64(88, data.pbExtraData === null ? 0n : BigInt(util.toPointer(data.pbExtraData)), true);
  // 0x60: u32
  if (data?.cbExtraDataSize !== undefined) view.setUint32(96, Number(data.cbExtraDataSize), true);
  // 0x64: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.WININET_PROXY_INFO (size: 32)
 */
export interface WININET_PROXY_INFO {
  /** Windows.Win32.Foundation.BOOL */
  fProxy: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fBypass: boolean;
  /** Windows.Win32.Networking.WinInet.INTERNET_SCHEME */
  ProxyScheme: INTERNET_SCHEME;
  /** Windows.Win32.Foundation.PWSTR */
  pwszProxy: string | null | Uint8Array | Uint16Array;
  /** u16 */
  ProxyPort: number;
}

export const sizeofWININET_PROXY_INFO = 32;

export function allocWININET_PROXY_INFO(data?: Partial<WININET_PROXY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWININET_PROXY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.fProxy !== undefined) view.setInt32(0, Number(data.fProxy), true);
  // 0x04: i32
  if (data?.fBypass !== undefined) view.setInt32(4, Number(data.fBypass), true);
  // 0x08: i32
  if (data?.ProxyScheme !== undefined) view.setInt32(8, Number(data.ProxyScheme), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pwszProxy !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwszProxy);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u16
  if (data?.ProxyPort !== undefined) view.setUint16(24, Number(data.ProxyPort), true);
  // 0x1a: pad6
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.WININET_PROXY_INFO_LIST (size: 16)
 */
export interface WININET_PROXY_INFO_LIST {
  /** u32 */
  dwProxyInfoCount: number;
  /** ptr */
  pProxyInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWININET_PROXY_INFO_LIST = 16;

export function allocWININET_PROXY_INFO_LIST(data?: Partial<WININET_PROXY_INFO_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWININET_PROXY_INFO_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwProxyInfoCount !== undefined) view.setUint32(0, Number(data.dwProxyInfoCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pProxyInfo !== undefined) view.setBigUint64(8, data.pProxyInfo === null ? 0n : BigInt(util.toPointer(data.pProxyInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.HTTP_WEB_SOCKET_ASYNC_RESULT (size: 24)
 */
export interface HTTP_WEB_SOCKET_ASYNC_RESULT {
  /** Windows.Win32.Networking.WinInet.INTERNET_ASYNC_RESULT */
  AsyncResult: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinInet.HTTP_WEB_SOCKET_OPERATION */
  Operation: HTTP_WEB_SOCKET_OPERATION;
  /** Windows.Win32.Networking.WinInet.HTTP_WEB_SOCKET_BUFFER_TYPE */
  BufferType: HTTP_WEB_SOCKET_BUFFER_TYPE;
  /** u32 */
  dwBytesTransferred: number;
}

export const sizeofHTTP_WEB_SOCKET_ASYNC_RESULT = 24;

export function allocHTTP_WEB_SOCKET_ASYNC_RESULT(data?: Partial<HTTP_WEB_SOCKET_ASYNC_RESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_WEB_SOCKET_ASYNC_RESULT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AsyncResult !== undefined) view.setBigUint64(0, data.AsyncResult === null ? 0n : BigInt(util.toPointer(data.AsyncResult)), true);
  // 0x08: i32
  if (data?.Operation !== undefined) view.setInt32(8, Number(data.Operation), true);
  // 0x0c: i32
  if (data?.BufferType !== undefined) view.setInt32(12, Number(data.BufferType), true);
  // 0x10: u32
  if (data?.dwBytesTransferred !== undefined) view.setUint32(16, Number(data.dwBytesTransferred), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinInet.ProofOfPossessionCookieInfo (size: 32)
 */
export interface ProofOfPossessionCookieInfo {
  /** Windows.Win32.Foundation.PWSTR */
  name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  data: string | null | Uint8Array | Uint16Array;
  /** u32 */
  flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  p3pHeader: string | null | Uint8Array | Uint16Array;
}

export const sizeofProofOfPossessionCookieInfo = 32;

export function allocProofOfPossessionCookieInfo(data?: Partial<ProofOfPossessionCookieInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofProofOfPossessionCookieInfo);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.data !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.data);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.flags !== undefined) view.setUint32(16, Number(data.flags), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.p3pHeader !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.p3pHeader);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export type HANDLE = Deno.PointerValue;

export type HWND = Deno.PointerValue;

export type HINSTANCE = Deno.PointerValue;

// Native Libraries

try {
  var libWININET_dll = Deno.dlopen("WININET.dll", {
    InternetTimeFromSystemTimeA: {
      parameters: ["pointer", "u32", "buffer", "u32"],
      result: "i32",
    },
    InternetTimeFromSystemTimeW: {
      parameters: ["pointer", "u32", "buffer", "u32"],
      result: "i32",
    },
    InternetTimeFromSystemTime: {
      parameters: ["pointer", "u32", "buffer", "u32"],
      result: "i32",
    },
    InternetTimeToSystemTimeA: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetTimeToSystemTimeW: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetTimeToSystemTime: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetCrackUrlA: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "i32",
    },
    InternetCrackUrlW: {
      parameters: ["buffer", "u32", "u32", "pointer"],
      result: "i32",
    },
    InternetCreateUrlA: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "i32",
    },
    InternetCreateUrlW: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "i32",
    },
    InternetCanonicalizeUrlA: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetCanonicalizeUrlW: {
      parameters: ["buffer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetCombineUrlA: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetCombineUrlW: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetOpenA: {
      parameters: ["buffer", "u32", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    InternetOpenW: {
      parameters: ["buffer", "u32", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    InternetCloseHandle: {
      parameters: ["pointer"],
      result: "i32",
    },
    InternetConnectA: {
      parameters: ["pointer", "buffer", "u16", "buffer", "buffer", "u32", "u32", "usize"],
      result: "pointer",
    },
    InternetConnectW: {
      parameters: ["pointer", "buffer", "u16", "buffer", "buffer", "u32", "u32", "usize"],
      result: "pointer",
    },
    InternetOpenUrlA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "u32", "usize"],
      result: "pointer",
    },
    InternetOpenUrlW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "u32", "usize"],
      result: "pointer",
    },
    InternetReadFile: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    InternetReadFileExA: {
      parameters: ["pointer", "pointer", "u32", "usize"],
      result: "i32",
    },
    InternetReadFileExW: {
      parameters: ["pointer", "pointer", "u32", "usize"],
      result: "i32",
    },
    InternetSetFilePointer: {
      parameters: ["pointer", "i32", "pointer", "u32", "usize"],
      result: "u32",
    },
    InternetWriteFile: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    InternetQueryDataAvailable: {
      parameters: ["pointer", "pointer", "u32", "usize"],
      result: "i32",
    },
    InternetFindNextFileA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    InternetFindNextFileW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    InternetQueryOptionA: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    InternetQueryOptionW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    InternetSetOptionA: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    InternetSetOptionW: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    InternetSetOptionExA: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32"],
      result: "i32",
    },
    InternetSetOptionExW: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32"],
      result: "i32",
    },
    InternetLockRequestFile: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    InternetUnlockRequestFile: {
      parameters: ["pointer"],
      result: "i32",
    },
    InternetGetLastResponseInfoA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    InternetGetLastResponseInfoW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    InternetSetStatusCallbackA: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    InternetSetStatusCallbackW: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    InternetSetStatusCallback: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    FtpFindFirstFileA: {
      parameters: ["pointer", "buffer", "pointer", "u32", "usize"],
      result: "pointer",
    },
    FtpFindFirstFileW: {
      parameters: ["pointer", "buffer", "pointer", "u32", "usize"],
      result: "pointer",
    },
    FtpGetFileA: {
      parameters: ["pointer", "buffer", "buffer", "i32", "u32", "u32", "usize"],
      result: "i32",
    },
    FtpGetFileW: {
      parameters: ["pointer", "buffer", "buffer", "i32", "u32", "u32", "usize"],
      result: "i32",
    },
    FtpPutFileA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "usize"],
      result: "i32",
    },
    FtpPutFileW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "usize"],
      result: "i32",
    },
    FtpGetFileEx: {
      parameters: ["pointer", "buffer", "buffer", "i32", "u32", "u32", "usize"],
      result: "i32",
    },
    FtpPutFileEx: {
      parameters: ["pointer", "buffer", "buffer", "u32", "usize"],
      result: "i32",
    },
    FtpDeleteFileA: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    FtpDeleteFileW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    FtpRenameFileA: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "i32",
    },
    FtpRenameFileW: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "i32",
    },
    FtpOpenFileA: {
      parameters: ["pointer", "buffer", "u32", "u32", "usize"],
      result: "pointer",
    },
    FtpOpenFileW: {
      parameters: ["pointer", "buffer", "u32", "u32", "usize"],
      result: "pointer",
    },
    FtpCreateDirectoryA: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    FtpCreateDirectoryW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    FtpRemoveDirectoryA: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    FtpRemoveDirectoryW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    FtpSetCurrentDirectoryA: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    FtpSetCurrentDirectoryW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    FtpGetCurrentDirectoryA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    FtpGetCurrentDirectoryW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    FtpCommandA: {
      parameters: ["pointer", "i32", "u32", "buffer", "usize", "pointer"],
      result: "i32",
    },
    FtpCommandW: {
      parameters: ["pointer", "i32", "u32", "buffer", "usize", "pointer"],
      result: "i32",
    },
    FtpGetFileSize: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    GopherCreateLocatorA: {
      parameters: ["buffer", "u16", "buffer", "buffer", "u32", "buffer", "pointer"],
      result: "i32",
    },
    GopherCreateLocatorW: {
      parameters: ["buffer", "u16", "buffer", "buffer", "u32", "buffer", "pointer"],
      result: "i32",
    },
    GopherGetLocatorTypeA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    GopherGetLocatorTypeW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    GopherFindFirstFileA: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32", "usize"],
      result: "pointer",
    },
    GopherFindFirstFileW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32", "usize"],
      result: "pointer",
    },
    GopherOpenFileA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "usize"],
      result: "pointer",
    },
    GopherOpenFileW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "usize"],
      result: "pointer",
    },
    GopherGetAttributeA: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32", "pointer", "pointer", "usize"],
      result: "i32",
    },
    GopherGetAttributeW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32", "pointer", "pointer", "usize"],
      result: "i32",
    },
    HttpOpenRequestA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "pointer", "u32", "usize"],
      result: "pointer",
    },
    HttpOpenRequestW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "pointer", "u32", "usize"],
      result: "pointer",
    },
    HttpAddRequestHeadersA: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "i32",
    },
    HttpAddRequestHeadersW: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "i32",
    },
    HttpSendRequestA: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    HttpSendRequestW: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    HttpSendRequestExA: {
      parameters: ["pointer", "pointer", "pointer", "u32", "usize"],
      result: "i32",
    },
    HttpSendRequestExW: {
      parameters: ["pointer", "pointer", "pointer", "u32", "usize"],
      result: "i32",
    },
    HttpEndRequestA: {
      parameters: ["pointer", "pointer", "u32", "usize"],
      result: "i32",
    },
    HttpEndRequestW: {
      parameters: ["pointer", "pointer", "u32", "usize"],
      result: "i32",
    },
    HttpQueryInfoA: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    HttpQueryInfoW: {
      parameters: ["pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    InternetSetCookieA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    InternetSetCookieW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    InternetGetCookieA: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    InternetGetCookieW: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    InternetSetCookieExA: {
      parameters: ["buffer", "buffer", "buffer", "u32", "usize"],
      result: "u32",
    },
    InternetSetCookieExW: {
      parameters: ["buffer", "buffer", "buffer", "u32", "usize"],
      result: "u32",
    },
    InternetGetCookieExA: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    InternetGetCookieExW: {
      parameters: ["buffer", "buffer", "buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    InternetFreeCookies: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    InternetGetCookieEx2: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    InternetSetCookieEx2: {
      parameters: ["buffer", "pointer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    InternetAttemptConnect: {
      parameters: ["u32"],
      result: "u32",
    },
    InternetCheckConnectionA: {
      parameters: ["buffer", "u32", "u32"],
      result: "i32",
    },
    InternetCheckConnectionW: {
      parameters: ["buffer", "u32", "u32"],
      result: "i32",
    },
    ResumeSuspendedDownload: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    InternetErrorDlg: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    InternetConfirmZoneCrossingA: {
      parameters: ["pointer", "buffer", "buffer", "i32"],
      result: "u32",
    },
    InternetConfirmZoneCrossingW: {
      parameters: ["pointer", "buffer", "buffer", "i32"],
      result: "u32",
    },
    InternetConfirmZoneCrossing: {
      parameters: ["pointer", "buffer", "buffer", "i32"],
      result: "u32",
    },
    CreateUrlCacheEntryA: {
      parameters: ["buffer", "u32", "buffer", "buffer", "u32"],
      result: "i32",
    },
    CreateUrlCacheEntryW: {
      parameters: ["buffer", "u32", "buffer", "buffer", "u32"],
      result: "i32",
    },
    CommitUrlCacheEntryA: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "u32", "pointer", "u32", "buffer", "buffer"],
      result: "i32",
    },
    CommitUrlCacheEntryW: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "u32", "buffer", "u32", "buffer", "buffer"],
      result: "i32",
    },
    RetrieveUrlCacheEntryFileA: {
      parameters: ["buffer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    RetrieveUrlCacheEntryFileW: {
      parameters: ["buffer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    UnlockUrlCacheEntryFileA: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    UnlockUrlCacheEntryFileW: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    UnlockUrlCacheEntryFile: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    RetrieveUrlCacheEntryStreamA: {
      parameters: ["buffer", "pointer", "pointer", "i32", "u32"],
      result: "pointer",
    },
    RetrieveUrlCacheEntryStreamW: {
      parameters: ["buffer", "pointer", "pointer", "i32", "u32"],
      result: "pointer",
    },
    ReadUrlCacheEntryStream: {
      parameters: ["pointer", "u32", "pointer", "pointer", "u32"],
      result: "i32",
    },
    ReadUrlCacheEntryStreamEx: {
      parameters: ["pointer", "u64", "pointer", "pointer"],
      result: "i32",
    },
    UnlockUrlCacheEntryStream: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GetUrlCacheEntryInfoA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    GetUrlCacheEntryInfoW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    FindFirstUrlCacheGroup: {
      parameters: ["u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    FindNextUrlCacheGroup: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetUrlCacheGroupAttributeA: {
      parameters: ["i64", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetUrlCacheGroupAttributeW: {
      parameters: ["i64", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetUrlCacheGroupAttributeA: {
      parameters: ["i64", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SetUrlCacheGroupAttributeW: {
      parameters: ["i64", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    GetUrlCacheEntryInfoExA: {
      parameters: ["buffer", "pointer", "pointer", "buffer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    GetUrlCacheEntryInfoExW: {
      parameters: ["buffer", "pointer", "pointer", "buffer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    SetUrlCacheEntryInfoA: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
    SetUrlCacheEntryInfoW: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
    CreateUrlCacheGroup: {
      parameters: ["u32", "pointer"],
      result: "i64",
    },
    DeleteUrlCacheGroup: {
      parameters: ["i64", "u32", "pointer"],
      result: "i32",
    },
    SetUrlCacheEntryGroupA: {
      parameters: ["buffer", "u32", "i64", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetUrlCacheEntryGroupW: {
      parameters: ["buffer", "u32", "i64", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetUrlCacheEntryGroup: {
      parameters: ["buffer", "u32", "i64", "pointer", "u32", "pointer"],
      result: "i32",
    },
    FindFirstUrlCacheEntryExA: {
      parameters: ["buffer", "u32", "u32", "i64", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    FindFirstUrlCacheEntryExW: {
      parameters: ["buffer", "u32", "u32", "i64", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    FindNextUrlCacheEntryExA: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    FindNextUrlCacheEntryExW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    FindFirstUrlCacheEntryA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    FindFirstUrlCacheEntryW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    FindNextUrlCacheEntryA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FindNextUrlCacheEntryW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FindCloseUrlCache: {
      parameters: ["pointer"],
      result: "i32",
    },
    DeleteUrlCacheEntryA: {
      parameters: ["buffer"],
      result: "i32",
    },
    DeleteUrlCacheEntryW: {
      parameters: ["buffer"],
      result: "i32",
    },
    DeleteUrlCacheEntry: {
      parameters: ["buffer"],
      result: "i32",
    },
    InternetDialA: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    InternetDialW: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    InternetDial: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    InternetHangUp: {
      parameters: ["usize", "u32"],
      result: "u32",
    },
    InternetGoOnlineA: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetGoOnlineW: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetGoOnline: {
      parameters: ["buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetAutodial: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    InternetAutodialHangup: {
      parameters: ["u32"],
      result: "i32",
    },
    InternetGetConnectedState: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    InternetGetConnectedStateExA: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "i32",
    },
    InternetGetConnectedStateExW: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "i32",
    },
    DeleteWpadCacheForNetworks: {
      parameters: ["i32"],
      result: "i32",
    },
    InternetInitializeAutoProxyDll: {
      parameters: ["u32"],
      result: "i32",
    },
    DetectAutoProxyUrl: {
      parameters: ["buffer", "u32", "u32"],
      result: "i32",
    },
    CreateMD5SSOHash: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "i32",
    },
    InternetGetConnectedStateEx: {
      parameters: ["pointer", "buffer", "u32", "u32"],
      result: "i32",
    },
    InternetSetDialStateA: {
      parameters: ["buffer", "u32", "u32"],
      result: "i32",
    },
    InternetSetDialStateW: {
      parameters: ["buffer", "u32", "u32"],
      result: "i32",
    },
    InternetSetDialState: {
      parameters: ["buffer", "u32", "u32"],
      result: "i32",
    },
    InternetSetPerSiteCookieDecisionA: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    InternetSetPerSiteCookieDecisionW: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    InternetGetPerSiteCookieDecisionA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    InternetGetPerSiteCookieDecisionW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    InternetClearAllPerSiteCookieDecisions: {
      parameters: [],
      result: "i32",
    },
    InternetEnumPerSiteCookieDecisionA: {
      parameters: ["buffer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    InternetEnumPerSiteCookieDecisionW: {
      parameters: ["buffer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    PrivacySetZonePreferenceW: {
      parameters: ["u32", "u32", "u32", "buffer"],
      result: "u32",
    },
    PrivacyGetZonePreferenceW: {
      parameters: ["u32", "u32", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    HttpIsHostHstsEnabled: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    InternetAlgIdToStringA: {
      parameters: ["u32", "buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetAlgIdToStringW: {
      parameters: ["u32", "buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetSecurityProtocolToStringA: {
      parameters: ["u32", "buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetSecurityProtocolToStringW: {
      parameters: ["u32", "buffer", "pointer", "u32"],
      result: "i32",
    },
    InternetGetSecurityInfoByURLA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    InternetGetSecurityInfoByURLW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    InternetGetSecurityInfoByURL: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    ShowSecurityInfo: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    ShowX509EncodedCertificate: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    ShowClientAuthCerts: {
      parameters: ["pointer"],
      result: "u32",
    },
    ParseX509EncodedCertificateForListBoxEntry: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    InternetShowSecurityInfoByURLA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    InternetShowSecurityInfoByURLW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    InternetShowSecurityInfoByURL: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    InternetFortezzaCommand: {
      parameters: ["u32", "pointer", "usize"],
      result: "i32",
    },
    InternetQueryFortezzaStatus: {
      parameters: ["pointer", "usize"],
      result: "i32",
    },
    InternetWriteFileExA: {
      parameters: ["pointer", "pointer", "u32", "usize"],
      result: "i32",
    },
    InternetWriteFileExW: {
      parameters: ["pointer", "pointer", "u32", "usize"],
      result: "i32",
    },
    FindP3PPolicySymbol: {
      parameters: ["buffer"],
      result: "i32",
    },
    HttpGetServerCredentials: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
    },
    HttpPushEnable: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "u32",
    },
    HttpPushWait: {
      parameters: ["pointer", "i32", "pointer"],
      result: "u32",
    },
    HttpPushClose: {
      parameters: ["pointer"],
      result: "void",
    },
    HttpCheckDavComplianceA: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    HttpCheckDavComplianceW: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    IsUrlCacheEntryExpiredA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    IsUrlCacheEntryExpiredW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    CreateUrlCacheEntryExW: {
      parameters: ["buffer", "u32", "buffer", "buffer", "u32", "i32"],
      result: "i32",
    },
    GetUrlCacheEntryBinaryBlob: {
      parameters: ["buffer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    CommitUrlCacheEntryBinaryBlob: {
      parameters: ["buffer", "u32", "pointer", "pointer", "pointer", "u32"],
      result: "u32",
    },
    CreateUrlCacheContainerA: {
      parameters: ["buffer", "buffer", "buffer", "u32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    CreateUrlCacheContainerW: {
      parameters: ["buffer", "buffer", "buffer", "u32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    DeleteUrlCacheContainerA: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    DeleteUrlCacheContainerW: {
      parameters: ["buffer", "u32"],
      result: "i32",
    },
    FindFirstUrlCacheContainerA: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    FindFirstUrlCacheContainerW: {
      parameters: ["pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    FindNextUrlCacheContainerA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FindNextUrlCacheContainerW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    FreeUrlCacheSpaceA: {
      parameters: ["buffer", "u32", "u32"],
      result: "i32",
    },
    FreeUrlCacheSpaceW: {
      parameters: ["buffer", "u32", "u32"],
      result: "i32",
    },
    UrlCacheFreeGlobalSpace: {
      parameters: ["u64", "u32"],
      result: "u32",
    },
    UrlCacheGetGlobalCacheSize: {
      parameters: ["u32", "pointer", "pointer"],
      result: "u32",
    },
    GetUrlCacheConfigInfoA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    GetUrlCacheConfigInfoW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    SetUrlCacheConfigInfoA: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    SetUrlCacheConfigInfoW: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    RunOnceUrlCache: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "u32",
    },
    DeleteIE3Cache: {
      parameters: ["pointer", "pointer", "buffer", "i32"],
      result: "u32",
    },
    UpdateUrlCacheContentPath: {
      parameters: ["buffer"],
      result: "i32",
    },
    RegisterUrlCacheNotification: {
      parameters: ["pointer", "u32", "i64", "u32", "u32"],
      result: "i32",
    },
    GetUrlCacheHeaderData: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    SetUrlCacheHeaderData: {
      parameters: ["u32", "u32"],
      result: "i32",
    },
    IncrementUrlCacheHeaderData: {
      parameters: ["u32", "pointer"],
      result: "i32",
    },
    LoadUrlCacheContent: {
      parameters: [],
      result: "i32",
    },
    AppCacheLookup: {
      parameters: ["buffer", "u32", "pointer"],
      result: "u32",
    },
    AppCacheCheckManifest: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    AppCacheGetDownloadList: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    AppCacheFreeDownloadList: {
      parameters: ["pointer"],
      result: "void",
    },
    AppCacheFinalize: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    AppCacheGetFallbackUrl: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    AppCacheGetManifestUrl: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    AppCacheDuplicateHandle: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    AppCacheCloseHandle: {
      parameters: ["pointer"],
      result: "void",
    },
    AppCacheFreeGroupList: {
      parameters: ["pointer"],
      result: "void",
    },
    AppCacheGetGroupList: {
      parameters: ["pointer"],
      result: "u32",
    },
    AppCacheGetInfo: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    AppCacheDeleteGroup: {
      parameters: ["buffer"],
      result: "u32",
    },
    AppCacheFreeSpace: {
      parameters: ["pointer"],
      result: "u32",
    },
    AppCacheGetIEGroupList: {
      parameters: ["pointer"],
      result: "u32",
    },
    AppCacheDeleteIEGroup: {
      parameters: ["buffer"],
      result: "u32",
    },
    AppCacheFreeIESpace: {
      parameters: ["pointer"],
      result: "u32",
    },
    AppCacheCreateAndCommitFile: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    HttpOpenDependencyHandle: {
      parameters: ["pointer", "i32", "pointer"],
      result: "u32",
    },
    HttpCloseDependencyHandle: {
      parameters: ["pointer"],
      result: "void",
    },
    HttpDuplicateDependencyHandle: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    HttpIndicatePageLoadComplete: {
      parameters: ["pointer"],
      result: "u32",
    },
    UrlCacheFreeEntryInfo: {
      parameters: ["pointer"],
      result: "void",
    },
    UrlCacheGetEntryInfo: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    UrlCacheCloseEntryHandle: {
      parameters: ["pointer"],
      result: "void",
    },
    UrlCacheRetrieveEntryFile: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    UrlCacheReadEntryStream: {
      parameters: ["pointer", "u64", "pointer", "u32", "pointer"],
      result: "u32",
    },
    UrlCacheRetrieveEntryStream: {
      parameters: ["pointer", "buffer", "i32", "pointer", "pointer"],
      result: "u32",
    },
    UrlCacheUpdateEntryExtraData: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    UrlCacheCreateContainer: {
      parameters: ["buffer", "buffer", "buffer", "u64", "u32"],
      result: "u32",
    },
    UrlCacheCheckEntriesExist: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    UrlCacheGetContentPaths: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    UrlCacheGetGlobalLimit: {
      parameters: ["i32", "pointer"],
      result: "u32",
    },
    UrlCacheSetGlobalLimit: {
      parameters: ["i32", "u64"],
      result: "u32",
    },
    UrlCacheReloadSettings: {
      parameters: [],
      result: "u32",
    },
    UrlCacheContainerSetEntryMaximumAge: {
      parameters: ["buffer", "u32"],
      result: "u32",
    },
    UrlCacheFindFirstEntry: {
      parameters: ["buffer", "u32", "u32", "i64", "pointer", "pointer"],
      result: "u32",
    },
    UrlCacheFindNextEntry: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    UrlCacheServer: {
      parameters: [],
      result: "u32",
    },
    ReadGuidsForConnectedNetworks: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    IsHostInProxyBypassList: {
      parameters: ["i32", "buffer", "u32"],
      result: "i32",
    },
    InternetFreeProxyInfoList: {
      parameters: ["pointer"],
      result: "void",
    },
    InternetGetProxyForUrl: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    DoConnectoidsExist: {
      parameters: [],
      result: "i32",
    },
    GetDiskInfoA: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    PerformOperationOverUrlCacheA: {
      parameters: ["buffer", "u32", "u32", "i64", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    IsProfilesEnabled: {
      parameters: [],
      result: "i32",
    },
    InternalInternetGetCookie: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    ImportCookieFileA: {
      parameters: ["buffer"],
      result: "i32",
    },
    ImportCookieFileW: {
      parameters: ["buffer"],
      result: "i32",
    },
    ExportCookieFileA: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    ExportCookieFileW: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    IsDomainLegalCookieDomainA: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    IsDomainLegalCookieDomainW: {
      parameters: ["buffer", "buffer"],
      result: "i32",
    },
    HttpWebSocketCompleteUpgrade: {
      parameters: ["pointer", "usize"],
      result: "pointer",
    },
    HttpWebSocketSend: {
      parameters: ["pointer", "i32", "pointer", "u32"],
      result: "i32",
    },
    HttpWebSocketReceive: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    HttpWebSocketClose: {
      parameters: ["pointer", "u16", "pointer", "u32"],
      result: "i32",
    },
    HttpWebSocketShutdown: {
      parameters: ["pointer", "u16", "pointer", "u32"],
      result: "i32",
    },
    HttpWebSocketQueryCloseStatus: {
      parameters: ["pointer", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    InternetConvertUrlFromWireToWideChar: {
      parameters: ["buffer", "u32", "buffer", "u32", "u32", "i32", "u32", "pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function InternetTimeFromSystemTimeA(
  pst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwRFC: number /* u32 */,
  lpszTime: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cbTime: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetTimeFromSystemTimeA(util.toPointer(pst), dwRFC, util.pstrToFfi(lpszTime), cbTime));
}

export function InternetTimeFromSystemTimeW(
  pst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwRFC: number /* u32 */,
  lpszTime: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cbTime: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetTimeFromSystemTimeW(util.toPointer(pst), dwRFC, util.pwstrToFfi(lpszTime), cbTime));
}

export function InternetTimeFromSystemTime(
  pst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwRFC: number /* u32 */,
  lpszTime: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cbTime: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetTimeFromSystemTime(util.toPointer(pst), dwRFC, util.pstrToFfi(lpszTime), cbTime));
}

export function InternetTimeToSystemTimeA(
  lpszTime: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetTimeToSystemTimeA(util.pstrToFfi(lpszTime), util.toPointer(pst), dwReserved));
}

export function InternetTimeToSystemTimeW(
  lpszTime: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetTimeToSystemTimeW(util.pwstrToFfi(lpszTime), util.toPointer(pst), dwReserved));
}

export function InternetTimeToSystemTime(
  lpszTime: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pst: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetTimeToSystemTime(util.pstrToFfi(lpszTime), util.toPointer(pst), dwReserved));
}

export function InternetCrackUrlA(
  lpszUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwUrlLength: number /* u32 */,
  dwFlags: WIN_HTTP_CREATE_URL_FLAGS /* Windows.Win32.Networking.WinHttp.WIN_HTTP_CREATE_URL_FLAGS */,
  lpUrlComponents: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetCrackUrlA(util.pstrToFfi(lpszUrl), dwUrlLength, dwFlags, util.toPointer(lpUrlComponents)));
}

export function InternetCrackUrlW(
  lpszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwUrlLength: number /* u32 */,
  dwFlags: WIN_HTTP_CREATE_URL_FLAGS /* Windows.Win32.Networking.WinHttp.WIN_HTTP_CREATE_URL_FLAGS */,
  lpUrlComponents: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetCrackUrlW(util.pwstrToFfi(lpszUrl), dwUrlLength, dwFlags, util.toPointer(lpUrlComponents)));
}

export function InternetCreateUrlA(
  lpUrlComponents: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  lpszUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwUrlLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetCreateUrlA(util.toPointer(lpUrlComponents), dwFlags, util.pstrToFfi(lpszUrl), util.toPointer(lpdwUrlLength)));
}

export function InternetCreateUrlW(
  lpUrlComponents: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  lpszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpdwUrlLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetCreateUrlW(util.toPointer(lpUrlComponents), dwFlags, util.pwstrToFfi(lpszUrl), util.toPointer(lpdwUrlLength)));
}

export function InternetCanonicalizeUrlA(
  lpszUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetCanonicalizeUrlA(util.pstrToFfi(lpszUrl), util.pstrToFfi(lpszBuffer), util.toPointer(lpdwBufferLength), dwFlags));
}

export function InternetCanonicalizeUrlW(
  lpszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetCanonicalizeUrlW(util.pwstrToFfi(lpszUrl), util.pwstrToFfi(lpszBuffer), util.toPointer(lpdwBufferLength), dwFlags));
}

export function InternetCombineUrlA(
  lpszBaseUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszRelativeUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetCombineUrlA(util.pstrToFfi(lpszBaseUrl), util.pstrToFfi(lpszRelativeUrl), util.pstrToFfi(lpszBuffer), util.toPointer(lpdwBufferLength), dwFlags));
}

export function InternetCombineUrlW(
  lpszBaseUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszRelativeUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetCombineUrlW(util.pwstrToFfi(lpszBaseUrl), util.pwstrToFfi(lpszRelativeUrl), util.pwstrToFfi(lpszBuffer), util.toPointer(lpdwBufferLength), dwFlags));
}

export function InternetOpenA(
  lpszAgent: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwAccessType: number /* u32 */,
  lpszProxy: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszProxyBypass: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.InternetOpenA(util.pstrToFfi(lpszAgent), dwAccessType, util.pstrToFfi(lpszProxy), util.pstrToFfi(lpszProxyBypass), dwFlags));
}

export function InternetOpenW(
  lpszAgent: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwAccessType: number /* u32 */,
  lpszProxy: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszProxyBypass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.InternetOpenW(util.pwstrToFfi(lpszAgent), dwAccessType, util.pwstrToFfi(lpszProxy), util.pwstrToFfi(lpszProxyBypass), dwFlags));
}

export function InternetCloseHandle(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetCloseHandle(util.toPointer(hInternet)));
}

export function InternetConnectA(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszServerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nServerPort: number /* u16 */,
  lpszUserName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszPassword: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwService: number /* u32 */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.InternetConnectA(util.toPointer(hInternet), util.pstrToFfi(lpszServerName), nServerPort, util.pstrToFfi(lpszUserName), util.pstrToFfi(lpszPassword), dwService, dwFlags, dwContext));
}

export function InternetConnectW(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nServerPort: number /* u16 */,
  lpszUserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwService: number /* u32 */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.InternetConnectW(util.toPointer(hInternet), util.pwstrToFfi(lpszServerName), nServerPort, util.pwstrToFfi(lpszUserName), util.pwstrToFfi(lpszPassword), dwService, dwFlags, dwContext));
}

export function InternetOpenUrlA(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszHeaders: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwHeadersLength: number /* u32 */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.InternetOpenUrlA(util.toPointer(hInternet), util.pstrToFfi(lpszUrl), util.pstrToFfi(lpszHeaders), dwHeadersLength, dwFlags, dwContext));
}

export function InternetOpenUrlW(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszHeaders: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwHeadersLength: number /* u32 */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.InternetOpenUrlW(util.toPointer(hInternet), util.pwstrToFfi(lpszUrl), util.pwstrToFfi(lpszHeaders), dwHeadersLength, dwFlags, dwContext));
}

export function InternetReadFile(
  hFile: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumberOfBytesToRead: number /* u32 */,
  lpdwNumberOfBytesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetReadFile(util.toPointer(hFile), util.toPointer(lpBuffer), dwNumberOfBytesToRead, util.toPointer(lpdwNumberOfBytesRead)));
}

export function InternetReadFileExA(
  hFile: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffersOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetReadFileExA(util.toPointer(hFile), util.toPointer(lpBuffersOut), dwFlags, dwContext));
}

export function InternetReadFileExW(
  hFile: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffersOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetReadFileExW(util.toPointer(hFile), util.toPointer(lpBuffersOut), dwFlags, dwContext));
}

export function InternetSetFilePointer(
  hFile: Deno.PointerValue | Uint8Array | null /* ptr */,
  lDistanceToMove: number /* i32 */,
  lpDistanceToMoveHigh: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwMoveMethod: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libWININET_dll.InternetSetFilePointer(util.toPointer(hFile), lDistanceToMove, util.toPointer(lpDistanceToMoveHigh), dwMoveMethod, dwContext);
}

export function InternetWriteFile(
  hFile: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumberOfBytesToWrite: number /* u32 */,
  lpdwNumberOfBytesWritten: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetWriteFile(util.toPointer(hFile), util.toPointer(lpBuffer), dwNumberOfBytesToWrite, util.toPointer(lpdwNumberOfBytesWritten)));
}

export function InternetQueryDataAvailable(
  hFile: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwNumberOfBytesAvailable: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetQueryDataAvailable(util.toPointer(hFile), util.toPointer(lpdwNumberOfBytesAvailable), dwFlags, dwContext));
}

export function InternetFindNextFileA(
  hFind: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpvFindData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetFindNextFileA(util.toPointer(hFind), util.toPointer(lpvFindData)));
}

export function InternetFindNextFileW(
  hFind: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpvFindData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetFindNextFileW(util.toPointer(hFind), util.toPointer(lpvFindData)));
}

export function InternetQueryOptionA(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOption: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetQueryOptionA(util.toPointer(hInternet), dwOption, util.toPointer(lpBuffer), util.toPointer(lpdwBufferLength)));
}

export function InternetQueryOptionW(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOption: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetQueryOptionW(util.toPointer(hInternet), dwOption, util.toPointer(lpBuffer), util.toPointer(lpdwBufferLength)));
}

export function InternetSetOptionA(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOption: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetSetOptionA(util.toPointer(hInternet), dwOption, util.toPointer(lpBuffer), dwBufferLength));
}

export function InternetSetOptionW(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOption: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetSetOptionW(util.toPointer(hInternet), dwOption, util.toPointer(lpBuffer), dwBufferLength));
}

export function InternetSetOptionExA(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOption: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferLength: number /* u32 */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetSetOptionExA(util.toPointer(hInternet), dwOption, util.toPointer(lpBuffer), dwBufferLength, dwFlags));
}

export function InternetSetOptionExW(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOption: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferLength: number /* u32 */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetSetOptionExW(util.toPointer(hInternet), dwOption, util.toPointer(lpBuffer), dwBufferLength, dwFlags));
}

export function InternetLockRequestFile(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  lphLockRequestInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetLockRequestFile(util.toPointer(hInternet), util.toPointer(lphLockRequestInfo)));
}

export function InternetUnlockRequestFile(
  hLockRequestInfo: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetUnlockRequestFile(util.toPointer(hLockRequestInfo)));
}

export function InternetGetLastResponseInfoA(
  lpdwError: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetLastResponseInfoA(util.toPointer(lpdwError), util.pstrToFfi(lpszBuffer), util.toPointer(lpdwBufferLength)));
}

export function InternetGetLastResponseInfoW(
  lpdwError: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetLastResponseInfoW(util.toPointer(lpdwError), util.pwstrToFfi(lpszBuffer), util.toPointer(lpdwBufferLength)));
}

export function InternetSetStatusCallbackA(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpfnInternetCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinInet.LPINTERNET_STATUS_CALLBACK */,
): Deno.PointerValue | null /* Windows.Win32.Networking.WinInet.LPINTERNET_STATUS_CALLBACK */ {
  return util.pointerFromFfi(libWININET_dll.InternetSetStatusCallbackA(util.toPointer(hInternet), util.toPointer(lpfnInternetCallback)));
}

export function InternetSetStatusCallbackW(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpfnInternetCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinInet.LPINTERNET_STATUS_CALLBACK */,
): Deno.PointerValue | null /* Windows.Win32.Networking.WinInet.LPINTERNET_STATUS_CALLBACK */ {
  return util.pointerFromFfi(libWININET_dll.InternetSetStatusCallbackW(util.toPointer(hInternet), util.toPointer(lpfnInternetCallback)));
}

export function InternetSetStatusCallback(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpfnInternetCallback: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinInet.LPINTERNET_STATUS_CALLBACK */,
): Deno.PointerValue | null /* Windows.Win32.Networking.WinInet.LPINTERNET_STATUS_CALLBACK */ {
  return util.pointerFromFfi(libWININET_dll.InternetSetStatusCallback(util.toPointer(hInternet), util.toPointer(lpfnInternetCallback)));
}

export function FtpFindFirstFileA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszSearchFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpFindFileData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.FtpFindFirstFileA(util.toPointer(hConnect), util.pstrToFfi(lpszSearchFile), util.toPointer(lpFindFileData), dwFlags, dwContext));
}

export function FtpFindFirstFileW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszSearchFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpFindFileData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.FtpFindFirstFileW(util.toPointer(hConnect), util.pwstrToFfi(lpszSearchFile), util.toPointer(lpFindFileData), dwFlags, dwContext));
}

export function FtpGetFileA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszRemoteFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszNewFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fFailIfExists: boolean /* Windows.Win32.Foundation.BOOL */,
  dwFlagsAndAttributes: number /* u32 */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpGetFileA(util.toPointer(hConnect), util.pstrToFfi(lpszRemoteFile), util.pstrToFfi(lpszNewFile), util.boolToFfi(fFailIfExists), dwFlagsAndAttributes, dwFlags, dwContext));
}

export function FtpGetFileW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszRemoteFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszNewFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fFailIfExists: boolean /* Windows.Win32.Foundation.BOOL */,
  dwFlagsAndAttributes: number /* u32 */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpGetFileW(util.toPointer(hConnect), util.pwstrToFfi(lpszRemoteFile), util.pwstrToFfi(lpszNewFile), util.boolToFfi(fFailIfExists), dwFlagsAndAttributes, dwFlags, dwContext));
}

export function FtpPutFileA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszLocalFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszNewRemoteFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: FTP_FLAGS /* Windows.Win32.Networking.WinInet.FTP_FLAGS */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpPutFileA(util.toPointer(hConnect), util.pstrToFfi(lpszLocalFile), util.pstrToFfi(lpszNewRemoteFile), dwFlags, dwContext));
}

export function FtpPutFileW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszLocalFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszNewRemoteFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: FTP_FLAGS /* Windows.Win32.Networking.WinInet.FTP_FLAGS */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpPutFileW(util.toPointer(hConnect), util.pwstrToFfi(lpszLocalFile), util.pwstrToFfi(lpszNewRemoteFile), dwFlags, dwContext));
}

export function FtpGetFileEx(
  hFtpSession: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszRemoteFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszNewFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fFailIfExists: boolean /* Windows.Win32.Foundation.BOOL */,
  dwFlagsAndAttributes: number /* u32 */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpGetFileEx(util.toPointer(hFtpSession), util.pstrToFfi(lpszRemoteFile), util.pwstrToFfi(lpszNewFile), util.boolToFfi(fFailIfExists), dwFlagsAndAttributes, dwFlags, dwContext));
}

export function FtpPutFileEx(
  hFtpSession: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszLocalFile: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszNewRemoteFile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpPutFileEx(util.toPointer(hFtpSession), util.pwstrToFfi(lpszLocalFile), util.pstrToFfi(lpszNewRemoteFile), dwFlags, dwContext));
}

export function FtpDeleteFileA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpDeleteFileA(util.toPointer(hConnect), util.pstrToFfi(lpszFileName)));
}

export function FtpDeleteFileW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpDeleteFileW(util.toPointer(hConnect), util.pwstrToFfi(lpszFileName)));
}

export function FtpRenameFileA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszExisting: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszNew: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpRenameFileA(util.toPointer(hConnect), util.pstrToFfi(lpszExisting), util.pstrToFfi(lpszNew)));
}

export function FtpRenameFileW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszExisting: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszNew: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpRenameFileW(util.toPointer(hConnect), util.pwstrToFfi(lpszExisting), util.pwstrToFfi(lpszNew)));
}

export function FtpOpenFileA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwAccess: number /* u32 */,
  dwFlags: FTP_FLAGS /* Windows.Win32.Networking.WinInet.FTP_FLAGS */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.FtpOpenFileA(util.toPointer(hConnect), util.pstrToFfi(lpszFileName), dwAccess, dwFlags, dwContext));
}

export function FtpOpenFileW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwAccess: number /* u32 */,
  dwFlags: FTP_FLAGS /* Windows.Win32.Networking.WinInet.FTP_FLAGS */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.FtpOpenFileW(util.toPointer(hConnect), util.pwstrToFfi(lpszFileName), dwAccess, dwFlags, dwContext));
}

export function FtpCreateDirectoryA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDirectory: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpCreateDirectoryA(util.toPointer(hConnect), util.pstrToFfi(lpszDirectory)));
}

export function FtpCreateDirectoryW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDirectory: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpCreateDirectoryW(util.toPointer(hConnect), util.pwstrToFfi(lpszDirectory)));
}

export function FtpRemoveDirectoryA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDirectory: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpRemoveDirectoryA(util.toPointer(hConnect), util.pstrToFfi(lpszDirectory)));
}

export function FtpRemoveDirectoryW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDirectory: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpRemoveDirectoryW(util.toPointer(hConnect), util.pwstrToFfi(lpszDirectory)));
}

export function FtpSetCurrentDirectoryA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDirectory: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpSetCurrentDirectoryA(util.toPointer(hConnect), util.pstrToFfi(lpszDirectory)));
}

export function FtpSetCurrentDirectoryW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszDirectory: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpSetCurrentDirectoryW(util.toPointer(hConnect), util.pwstrToFfi(lpszDirectory)));
}

export function FtpGetCurrentDirectoryA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszCurrentDirectory: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwCurrentDirectory: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpGetCurrentDirectoryA(util.toPointer(hConnect), util.pstrToFfi(lpszCurrentDirectory), util.toPointer(lpdwCurrentDirectory)));
}

export function FtpGetCurrentDirectoryW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszCurrentDirectory: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpdwCurrentDirectory: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpGetCurrentDirectoryW(util.toPointer(hConnect), util.pwstrToFfi(lpszCurrentDirectory), util.toPointer(lpdwCurrentDirectory)));
}

export function FtpCommandA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  fExpectResponse: boolean /* Windows.Win32.Foundation.BOOL */,
  dwFlags: FTP_FLAGS /* Windows.Win32.Networking.WinInet.FTP_FLAGS */,
  lpszCommand: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwContext: Deno.PointerValue /* usize */,
  phFtpCommand: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpCommandA(util.toPointer(hConnect), util.boolToFfi(fExpectResponse), dwFlags, util.pstrToFfi(lpszCommand), dwContext, util.toPointer(phFtpCommand)));
}

export function FtpCommandW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  fExpectResponse: boolean /* Windows.Win32.Foundation.BOOL */,
  dwFlags: FTP_FLAGS /* Windows.Win32.Networking.WinInet.FTP_FLAGS */,
  lpszCommand: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwContext: Deno.PointerValue /* usize */,
  phFtpCommand: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FtpCommandW(util.toPointer(hConnect), util.boolToFfi(fExpectResponse), dwFlags, util.pwstrToFfi(lpszCommand), dwContext, util.toPointer(phFtpCommand)));
}

export function FtpGetFileSize(
  hFile: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwFileSizeHigh: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.FtpGetFileSize(util.toPointer(hFile), util.toPointer(lpdwFileSizeHigh));
}

export function GopherCreateLocatorA(
  lpszHost: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nServerPort: number /* u16 */,
  lpszDisplayString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszSelectorString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwGopherType: number /* u32 */,
  lpszLocator: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GopherCreateLocatorA(util.pstrToFfi(lpszHost), nServerPort, util.pstrToFfi(lpszDisplayString), util.pstrToFfi(lpszSelectorString), dwGopherType, util.pstrToFfi(lpszLocator), util.toPointer(lpdwBufferLength)));
}

export function GopherCreateLocatorW(
  lpszHost: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  nServerPort: number /* u16 */,
  lpszDisplayString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszSelectorString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwGopherType: number /* u32 */,
  lpszLocator: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GopherCreateLocatorW(util.pwstrToFfi(lpszHost), nServerPort, util.pwstrToFfi(lpszDisplayString), util.pwstrToFfi(lpszSelectorString), dwGopherType, util.pwstrToFfi(lpszLocator), util.toPointer(lpdwBufferLength)));
}

export function GopherGetLocatorTypeA(
  lpszLocator: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwGopherType: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GopherGetLocatorTypeA(util.pstrToFfi(lpszLocator), util.toPointer(lpdwGopherType)));
}

export function GopherGetLocatorTypeW(
  lpszLocator: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpdwGopherType: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GopherGetLocatorTypeW(util.pwstrToFfi(lpszLocator), util.toPointer(lpdwGopherType)));
}

export function GopherFindFirstFileA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszLocator: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszSearchString: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpFindData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.GopherFindFirstFileA(util.toPointer(hConnect), util.pstrToFfi(lpszLocator), util.pstrToFfi(lpszSearchString), util.toPointer(lpFindData), dwFlags, dwContext));
}

export function GopherFindFirstFileW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszLocator: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszSearchString: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpFindData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.GopherFindFirstFileW(util.toPointer(hConnect), util.pwstrToFfi(lpszLocator), util.pwstrToFfi(lpszSearchString), util.toPointer(lpFindData), dwFlags, dwContext));
}

export function GopherOpenFileA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszLocator: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszView: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.GopherOpenFileA(util.toPointer(hConnect), util.pstrToFfi(lpszLocator), util.pstrToFfi(lpszView), dwFlags, dwContext));
}

export function GopherOpenFileW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszLocator: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszView: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.GopherOpenFileW(util.toPointer(hConnect), util.pwstrToFfi(lpszLocator), util.pwstrToFfi(lpszView), dwFlags, dwContext));
}

export function GopherGetAttributeA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszLocator: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszAttributeName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferLength: number /* u32 */,
  lpdwCharactersReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpfnEnumerator: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinInet.GOPHER_ATTRIBUTE_ENUMERATOR */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GopherGetAttributeA(util.toPointer(hConnect), util.pstrToFfi(lpszLocator), util.pstrToFfi(lpszAttributeName), util.toPointer(lpBuffer), dwBufferLength, util.toPointer(lpdwCharactersReturned), util.toPointer(lpfnEnumerator), dwContext));
}

export function GopherGetAttributeW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszLocator: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszAttributeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferLength: number /* u32 */,
  lpdwCharactersReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpfnEnumerator: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinInet.GOPHER_ATTRIBUTE_ENUMERATOR */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GopherGetAttributeW(util.toPointer(hConnect), util.pwstrToFfi(lpszLocator), util.pwstrToFfi(lpszAttributeName), util.toPointer(lpBuffer), dwBufferLength, util.toPointer(lpdwCharactersReturned), util.toPointer(lpfnEnumerator), dwContext));
}

export function HttpOpenRequestA(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszVerb: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszObjectName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszVersion: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszReferrer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lplpszAcceptTypes: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.HttpOpenRequestA(util.toPointer(hConnect), util.pstrToFfi(lpszVerb), util.pstrToFfi(lpszObjectName), util.pstrToFfi(lpszVersion), util.pstrToFfi(lpszReferrer), util.toPointer(lplpszAcceptTypes), dwFlags, dwContext));
}

export function HttpOpenRequestW(
  hConnect: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszVerb: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszObjectName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszVersion: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszReferrer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lplpszAcceptTypes: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.HttpOpenRequestW(util.toPointer(hConnect), util.pwstrToFfi(lpszVerb), util.pwstrToFfi(lpszObjectName), util.pwstrToFfi(lpszVersion), util.pwstrToFfi(lpszReferrer), util.toPointer(lplpszAcceptTypes), dwFlags, dwContext));
}

export function HttpAddRequestHeadersA(
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszHeaders: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwHeadersLength: number /* u32 */,
  dwModifiers: HTTP_ADDREQ_FLAG /* Windows.Win32.Networking.WinInet.HTTP_ADDREQ_FLAG */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpAddRequestHeadersA(util.toPointer(hRequest), util.pstrToFfi(lpszHeaders), dwHeadersLength, dwModifiers));
}

export function HttpAddRequestHeadersW(
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszHeaders: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwHeadersLength: number /* u32 */,
  dwModifiers: HTTP_ADDREQ_FLAG /* Windows.Win32.Networking.WinInet.HTTP_ADDREQ_FLAG */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpAddRequestHeadersW(util.toPointer(hRequest), util.pwstrToFfi(lpszHeaders), dwHeadersLength, dwModifiers));
}

export function HttpSendRequestA(
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszHeaders: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwHeadersLength: number /* u32 */,
  lpOptional: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOptionalLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpSendRequestA(util.toPointer(hRequest), util.pstrToFfi(lpszHeaders), dwHeadersLength, util.toPointer(lpOptional), dwOptionalLength));
}

export function HttpSendRequestW(
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszHeaders: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwHeadersLength: number /* u32 */,
  lpOptional: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOptionalLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpSendRequestW(util.toPointer(hRequest), util.pwstrToFfi(lpszHeaders), dwHeadersLength, util.toPointer(lpOptional), dwOptionalLength));
}

export function HttpSendRequestExA(
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffersIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffersOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpSendRequestExA(util.toPointer(hRequest), util.toPointer(lpBuffersIn), util.toPointer(lpBuffersOut), dwFlags, dwContext));
}

export function HttpSendRequestExW(
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffersIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffersOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpSendRequestExW(util.toPointer(hRequest), util.toPointer(lpBuffersIn), util.toPointer(lpBuffersOut), dwFlags, dwContext));
}

export function HttpEndRequestA(
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffersOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpEndRequestA(util.toPointer(hRequest), util.toPointer(lpBuffersOut), dwFlags, dwContext));
}

export function HttpEndRequestW(
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffersOut: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpEndRequestW(util.toPointer(hRequest), util.toPointer(lpBuffersOut), dwFlags, dwContext));
}

export function HttpQueryInfoA(
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInfoLevel: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpQueryInfoA(util.toPointer(hRequest), dwInfoLevel, util.toPointer(lpBuffer), util.toPointer(lpdwBufferLength), util.toPointer(lpdwIndex)));
}

export function HttpQueryInfoW(
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwInfoLevel: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwIndex: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpQueryInfoW(util.toPointer(hRequest), dwInfoLevel, util.toPointer(lpBuffer), util.toPointer(lpdwBufferLength), util.toPointer(lpdwIndex)));
}

export function InternetSetCookieA(
  lpszUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszCookieName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszCookieData: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetSetCookieA(util.pstrToFfi(lpszUrl), util.pstrToFfi(lpszCookieName), util.pstrToFfi(lpszCookieData)));
}

export function InternetSetCookieW(
  lpszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszCookieName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszCookieData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetSetCookieW(util.pwstrToFfi(lpszUrl), util.pwstrToFfi(lpszCookieName), util.pwstrToFfi(lpszCookieData)));
}

export function InternetGetCookieA(
  lpszUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszCookieName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszCookieData: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetCookieA(util.pstrToFfi(lpszUrl), util.pstrToFfi(lpszCookieName), util.pstrToFfi(lpszCookieData), util.toPointer(lpdwSize)));
}

export function InternetGetCookieW(
  lpszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszCookieName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszCookieData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpdwSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetCookieW(util.pwstrToFfi(lpszUrl), util.pwstrToFfi(lpszCookieName), util.pwstrToFfi(lpszCookieData), util.toPointer(lpdwSize)));
}

export function InternetSetCookieExA(
  lpszUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszCookieName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszCookieData: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwReserved: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libWININET_dll.InternetSetCookieExA(util.pstrToFfi(lpszUrl), util.pstrToFfi(lpszCookieName), util.pstrToFfi(lpszCookieData), dwFlags, dwReserved);
}

export function InternetSetCookieExW(
  lpszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszCookieName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszCookieData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwReserved: Deno.PointerValue /* usize */,
): number /* u32 */ {
  return libWININET_dll.InternetSetCookieExW(util.pwstrToFfi(lpszUrl), util.pwstrToFfi(lpszCookieName), util.pwstrToFfi(lpszCookieData), dwFlags, dwReserved);
}

export function InternetGetCookieExA(
  lpszUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszCookieName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszCookieData: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: INTERNET_COOKIE_FLAGS /* Windows.Win32.Networking.WinInet.INTERNET_COOKIE_FLAGS */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetCookieExA(util.pstrToFfi(lpszUrl), util.pstrToFfi(lpszCookieName), util.pstrToFfi(lpszCookieData), util.toPointer(lpdwSize), dwFlags, util.toPointer(lpReserved)));
}

export function InternetGetCookieExW(
  lpszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszCookieName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszCookieData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpdwSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: INTERNET_COOKIE_FLAGS /* Windows.Win32.Networking.WinInet.INTERNET_COOKIE_FLAGS */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetCookieExW(util.pwstrToFfi(lpszUrl), util.pwstrToFfi(lpszCookieName), util.pwstrToFfi(lpszCookieData), util.toPointer(lpdwSize), dwFlags, util.toPointer(lpReserved)));
}

export function InternetFreeCookies(
  pCookies: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwCookieCount: number /* u32 */,
): void /* void */ {
  return libWININET_dll.InternetFreeCookies(util.toPointer(pCookies), dwCookieCount);
}

export function InternetGetCookieEx2(
  pcwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcwszCookieName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  ppCookies: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwCookieCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.InternetGetCookieEx2(util.pwstrToFfi(pcwszUrl), util.pwstrToFfi(pcwszCookieName), dwFlags, util.toPointer(ppCookies), util.toPointer(pdwCookieCount));
}

export function InternetSetCookieEx2(
  pcwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCookie: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcwszP3PPolicy: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  pdwCookieState: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.InternetSetCookieEx2(util.pwstrToFfi(pcwszUrl), util.toPointer(pCookie), util.pwstrToFfi(pcwszP3PPolicy), dwFlags, util.toPointer(pdwCookieState));
}

export function InternetAttemptConnect(
  dwReserved: number /* u32 */,
): number /* u32 */ {
  return libWININET_dll.InternetAttemptConnect(dwReserved);
}

export function InternetCheckConnectionA(
  lpszUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetCheckConnectionA(util.pstrToFfi(lpszUrl), dwFlags, dwReserved));
}

export function InternetCheckConnectionW(
  lpszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetCheckConnectionW(util.pwstrToFfi(lpszUrl), dwFlags, dwReserved));
}

export function ResumeSuspendedDownload(
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwResultCode: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.ResumeSuspendedDownload(util.toPointer(hRequest), dwResultCode));
}

export function InternetErrorDlg(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwError: number /* u32 */,
  dwFlags: number /* u32 */,
  lppvData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.InternetErrorDlg(util.hwndToFfi(hWnd), util.toPointer(hRequest), dwError, dwFlags, util.toPointer(lppvData));
}

export function InternetConfirmZoneCrossingA(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  szUrlPrev: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szUrlNew: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  bPost: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libWININET_dll.InternetConfirmZoneCrossingA(util.hwndToFfi(hWnd), util.pstrToFfi(szUrlPrev), util.pstrToFfi(szUrlNew), util.boolToFfi(bPost));
}

export function InternetConfirmZoneCrossingW(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  szUrlPrev: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  szUrlNew: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  bPost: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libWININET_dll.InternetConfirmZoneCrossingW(util.hwndToFfi(hWnd), util.pwstrToFfi(szUrlPrev), util.pwstrToFfi(szUrlNew), util.boolToFfi(bPost));
}

export function InternetConfirmZoneCrossing(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  szUrlPrev: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  szUrlNew: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  bPost: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libWININET_dll.InternetConfirmZoneCrossing(util.hwndToFfi(hWnd), util.pstrToFfi(szUrlPrev), util.pstrToFfi(szUrlNew), util.boolToFfi(bPost));
}

export function CreateUrlCacheEntryA(
  lpszUrlName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwExpectedFileSize: number /* u32 */,
  lpszFileExtension: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.CreateUrlCacheEntryA(util.pstrToFfi(lpszUrlName), dwExpectedFileSize, util.pstrToFfi(lpszFileExtension), util.pstrToFfi(lpszFileName), dwReserved));
}

export function CreateUrlCacheEntryW(
  lpszUrlName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwExpectedFileSize: number /* u32 */,
  lpszFileExtension: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.CreateUrlCacheEntryW(util.pwstrToFfi(lpszUrlName), dwExpectedFileSize, util.pwstrToFfi(lpszFileExtension), util.pwstrToFfi(lpszFileName), dwReserved));
}

export function CommitUrlCacheEntryA(
  lpszUrlName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszLocalFileName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ExpireTime: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
  LastModifiedTime: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
  CacheEntryType: number /* u32 */,
  lpHeaderInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  cchHeaderInfo: number /* u32 */,
  lpszFileExtension: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszOriginalUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.CommitUrlCacheEntryA(util.pstrToFfi(lpszUrlName), util.pstrToFfi(lpszLocalFileName), util.toPointer(ExpireTime), util.toPointer(LastModifiedTime), CacheEntryType, util.toPointer(lpHeaderInfo), cchHeaderInfo, util.pstrToFfi(lpszFileExtension), util.pstrToFfi(lpszOriginalUrl)));
}

export function CommitUrlCacheEntryW(
  lpszUrlName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszLocalFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ExpireTime: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
  LastModifiedTime: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
  CacheEntryType: number /* u32 */,
  lpszHeaderInfo: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchHeaderInfo: number /* u32 */,
  lpszFileExtension: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszOriginalUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.CommitUrlCacheEntryW(util.pwstrToFfi(lpszUrlName), util.pwstrToFfi(lpszLocalFileName), util.toPointer(ExpireTime), util.toPointer(LastModifiedTime), CacheEntryType, util.pwstrToFfi(lpszHeaderInfo), cchHeaderInfo, util.pwstrToFfi(lpszFileExtension), util.pwstrToFfi(lpszOriginalUrl)));
}

export function RetrieveUrlCacheEntryFileA(
  lpszUrlName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.RetrieveUrlCacheEntryFileA(util.pstrToFfi(lpszUrlName), util.toPointer(lpCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo), dwReserved));
}

export function RetrieveUrlCacheEntryFileW(
  lpszUrlName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.RetrieveUrlCacheEntryFileW(util.pwstrToFfi(lpszUrlName), util.toPointer(lpCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo), dwReserved));
}

export function UnlockUrlCacheEntryFileA(
  lpszUrlName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.UnlockUrlCacheEntryFileA(util.pstrToFfi(lpszUrlName), dwReserved));
}

export function UnlockUrlCacheEntryFileW(
  lpszUrlName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.UnlockUrlCacheEntryFileW(util.pwstrToFfi(lpszUrlName), dwReserved));
}

export function UnlockUrlCacheEntryFile(
  lpszUrlName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.UnlockUrlCacheEntryFile(util.pstrToFfi(lpszUrlName), dwReserved));
}

export function RetrieveUrlCacheEntryStreamA(
  lpszUrlName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  fRandomRead: boolean /* Windows.Win32.Foundation.BOOL */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWININET_dll.RetrieveUrlCacheEntryStreamA(util.pstrToFfi(lpszUrlName), util.toPointer(lpCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo), util.boolToFfi(fRandomRead), dwReserved));
}

export function RetrieveUrlCacheEntryStreamW(
  lpszUrlName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  fRandomRead: boolean /* Windows.Win32.Foundation.BOOL */,
  dwReserved: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWININET_dll.RetrieveUrlCacheEntryStreamW(util.pwstrToFfi(lpszUrlName), util.toPointer(lpCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo), util.boolToFfi(fRandomRead), dwReserved));
}

export function ReadUrlCacheEntryStream(
  hUrlCacheStream: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwLocation: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.ReadUrlCacheEntryStream(util.toPointer(hUrlCacheStream), dwLocation, util.toPointer(lpBuffer), util.toPointer(lpdwLen), Reserved));
}

export function ReadUrlCacheEntryStreamEx(
  hUrlCacheStream: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  qwLocation: Deno.PointerValue /* u64 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwLen: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.ReadUrlCacheEntryStreamEx(util.toPointer(hUrlCacheStream), qwLocation, util.toPointer(lpBuffer), util.toPointer(lpdwLen)));
}

export function UnlockUrlCacheEntryStream(
  hUrlCacheStream: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Reserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.UnlockUrlCacheEntryStream(util.toPointer(hUrlCacheStream), Reserved));
}

export function GetUrlCacheEntryInfoA(
  lpszUrlName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GetUrlCacheEntryInfoA(util.pstrToFfi(lpszUrlName), util.toPointer(lpCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo)));
}

export function GetUrlCacheEntryInfoW(
  lpszUrlName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GetUrlCacheEntryInfoW(util.pwstrToFfi(lpszUrlName), util.toPointer(lpCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo)));
}

export function FindFirstUrlCacheGroup(
  dwFlags: number /* u32 */,
  dwFilter: number /* u32 */,
  lpSearchCondition: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwSearchCondition: number /* u32 */,
  lpGroupId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWININET_dll.FindFirstUrlCacheGroup(dwFlags, dwFilter, util.toPointer(lpSearchCondition), dwSearchCondition, util.toPointer(lpGroupId), util.toPointer(lpReserved)));
}

export function FindNextUrlCacheGroup(
  hFind: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpGroupId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FindNextUrlCacheGroup(util.toPointer(hFind), util.toPointer(lpGroupId), util.toPointer(lpReserved)));
}

export function GetUrlCacheGroupAttributeA(
  gid: Deno.PointerValue /* i64 */,
  dwFlags: number /* u32 */,
  dwAttributes: number /* u32 */,
  lpGroupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbGroupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GetUrlCacheGroupAttributeA(gid, dwFlags, dwAttributes, util.toPointer(lpGroupInfo), util.toPointer(lpcbGroupInfo), util.toPointer(lpReserved)));
}

export function GetUrlCacheGroupAttributeW(
  gid: Deno.PointerValue /* i64 */,
  dwFlags: number /* u32 */,
  dwAttributes: number /* u32 */,
  lpGroupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbGroupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GetUrlCacheGroupAttributeW(gid, dwFlags, dwAttributes, util.toPointer(lpGroupInfo), util.toPointer(lpcbGroupInfo), util.toPointer(lpReserved)));
}

export function SetUrlCacheGroupAttributeA(
  gid: Deno.PointerValue /* i64 */,
  dwFlags: number /* u32 */,
  dwAttributes: number /* u32 */,
  lpGroupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.SetUrlCacheGroupAttributeA(gid, dwFlags, dwAttributes, util.toPointer(lpGroupInfo), util.toPointer(lpReserved)));
}

export function SetUrlCacheGroupAttributeW(
  gid: Deno.PointerValue /* i64 */,
  dwFlags: number /* u32 */,
  dwAttributes: number /* u32 */,
  lpGroupInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.SetUrlCacheGroupAttributeW(gid, dwFlags, dwAttributes, util.toPointer(lpGroupInfo), util.toPointer(lpReserved)));
}

export function GetUrlCacheEntryInfoExA(
  lpszUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszRedirectUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpcbRedirectUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GetUrlCacheEntryInfoExA(util.pstrToFfi(lpszUrl), util.toPointer(lpCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo), util.pstrToFfi(lpszRedirectUrl), util.toPointer(lpcbRedirectUrl), util.toPointer(lpReserved), dwFlags));
}

export function GetUrlCacheEntryInfoExW(
  lpszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszRedirectUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpcbRedirectUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GetUrlCacheEntryInfoExW(util.pwstrToFfi(lpszUrl), util.toPointer(lpCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo), util.pwstrToFfi(lpszRedirectUrl), util.toPointer(lpcbRedirectUrl), util.toPointer(lpReserved), dwFlags));
}

export function SetUrlCacheEntryInfoA(
  lpszUrlName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFieldControl: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.SetUrlCacheEntryInfoA(util.pstrToFfi(lpszUrlName), util.toPointer(lpCacheEntryInfo), dwFieldControl));
}

export function SetUrlCacheEntryInfoW(
  lpszUrlName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFieldControl: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.SetUrlCacheEntryInfoW(util.pwstrToFfi(lpszUrlName), util.toPointer(lpCacheEntryInfo), dwFieldControl));
}

export function CreateUrlCacheGroup(
  dwFlags: number /* u32 */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue /* i64 */ {
  return libWININET_dll.CreateUrlCacheGroup(dwFlags, util.toPointer(lpReserved));
}

export function DeleteUrlCacheGroup(
  GroupId: Deno.PointerValue /* i64 */,
  dwFlags: number /* u32 */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.DeleteUrlCacheGroup(GroupId, dwFlags, util.toPointer(lpReserved)));
}

export function SetUrlCacheEntryGroupA(
  lpszUrlName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  GroupId: Deno.PointerValue /* i64 */,
  pbGroupAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbGroupAttributes: number /* u32 */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.SetUrlCacheEntryGroupA(util.pstrToFfi(lpszUrlName), dwFlags, GroupId, util.toPointer(pbGroupAttributes), cbGroupAttributes, util.toPointer(lpReserved)));
}

export function SetUrlCacheEntryGroupW(
  lpszUrlName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  GroupId: Deno.PointerValue /* i64 */,
  pbGroupAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbGroupAttributes: number /* u32 */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.SetUrlCacheEntryGroupW(util.pwstrToFfi(lpszUrlName), dwFlags, GroupId, util.toPointer(pbGroupAttributes), cbGroupAttributes, util.toPointer(lpReserved)));
}

export function SetUrlCacheEntryGroup(
  lpszUrlName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  GroupId: Deno.PointerValue /* i64 */,
  pbGroupAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbGroupAttributes: number /* u32 */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.SetUrlCacheEntryGroup(util.pstrToFfi(lpszUrlName), dwFlags, GroupId, util.toPointer(pbGroupAttributes), cbGroupAttributes, util.toPointer(lpReserved)));
}

export function FindFirstUrlCacheEntryExA(
  lpszUrlSearchPattern: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwFilter: number /* u32 */,
  GroupId: Deno.PointerValue /* i64 */,
  lpFirstCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpGroupAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbGroupAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWININET_dll.FindFirstUrlCacheEntryExA(util.pstrToFfi(lpszUrlSearchPattern), dwFlags, dwFilter, GroupId, util.toPointer(lpFirstCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo), util.toPointer(lpGroupAttributes), util.toPointer(lpcbGroupAttributes), util.toPointer(lpReserved)));
}

export function FindFirstUrlCacheEntryExW(
  lpszUrlSearchPattern: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwFilter: number /* u32 */,
  GroupId: Deno.PointerValue /* i64 */,
  lpFirstCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpGroupAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbGroupAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWININET_dll.FindFirstUrlCacheEntryExW(util.pwstrToFfi(lpszUrlSearchPattern), dwFlags, dwFilter, GroupId, util.toPointer(lpFirstCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo), util.toPointer(lpGroupAttributes), util.toPointer(lpcbGroupAttributes), util.toPointer(lpReserved)));
}

export function FindNextUrlCacheEntryExA(
  hEnumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpNextCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpGroupAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbGroupAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FindNextUrlCacheEntryExA(util.toPointer(hEnumHandle), util.toPointer(lpNextCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo), util.toPointer(lpGroupAttributes), util.toPointer(lpcbGroupAttributes), util.toPointer(lpReserved)));
}

export function FindNextUrlCacheEntryExW(
  hEnumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpNextCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpGroupAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbGroupAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FindNextUrlCacheEntryExW(util.toPointer(hEnumHandle), util.toPointer(lpNextCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo), util.toPointer(lpGroupAttributes), util.toPointer(lpcbGroupAttributes), util.toPointer(lpReserved)));
}

export function FindFirstUrlCacheEntryA(
  lpszUrlSearchPattern: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpFirstCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWININET_dll.FindFirstUrlCacheEntryA(util.pstrToFfi(lpszUrlSearchPattern), util.toPointer(lpFirstCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo)));
}

export function FindFirstUrlCacheEntryW(
  lpszUrlSearchPattern: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpFirstCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWININET_dll.FindFirstUrlCacheEntryW(util.pwstrToFfi(lpszUrlSearchPattern), util.toPointer(lpFirstCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo)));
}

export function FindNextUrlCacheEntryA(
  hEnumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpNextCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FindNextUrlCacheEntryA(util.toPointer(hEnumHandle), util.toPointer(lpNextCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo)));
}

export function FindNextUrlCacheEntryW(
  hEnumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpNextCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FindNextUrlCacheEntryW(util.toPointer(hEnumHandle), util.toPointer(lpNextCacheEntryInfo), util.toPointer(lpcbCacheEntryInfo)));
}

export function FindCloseUrlCache(
  hEnumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FindCloseUrlCache(util.toPointer(hEnumHandle)));
}

export function DeleteUrlCacheEntryA(
  lpszUrlName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.DeleteUrlCacheEntryA(util.pstrToFfi(lpszUrlName)));
}

export function DeleteUrlCacheEntryW(
  lpszUrlName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.DeleteUrlCacheEntryW(util.pwstrToFfi(lpszUrlName)));
}

export function DeleteUrlCacheEntry(
  lpszUrlName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.DeleteUrlCacheEntry(util.pstrToFfi(lpszUrlName)));
}

export function InternetDialA(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszConnectoid: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  lpdwConnection: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): number /* u32 */ {
  return libWININET_dll.InternetDialA(util.hwndToFfi(hwndParent), util.pstrToFfi(lpszConnectoid), dwFlags, util.toPointer(lpdwConnection), dwReserved);
}

export function InternetDialW(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszConnectoid: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  lpdwConnection: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): number /* u32 */ {
  return libWININET_dll.InternetDialW(util.hwndToFfi(hwndParent), util.pwstrToFfi(lpszConnectoid), dwFlags, util.toPointer(lpdwConnection), dwReserved);
}

export function InternetDial(
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpszConnectoid: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  lpdwConnection: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): number /* u32 */ {
  return libWININET_dll.InternetDial(util.hwndToFfi(hwndParent), util.pstrToFfi(lpszConnectoid), dwFlags, util.toPointer(lpdwConnection), dwReserved);
}

export function InternetHangUp(
  dwConnection: Deno.PointerValue /* usize */,
  dwReserved: number /* u32 */,
): number /* u32 */ {
  return libWININET_dll.InternetHangUp(dwConnection, dwReserved);
}

export function InternetGoOnlineA(
  lpszURL: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGoOnlineA(util.pstrToFfi(lpszURL), util.hwndToFfi(hwndParent), dwFlags));
}

export function InternetGoOnlineW(
  lpszURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGoOnlineW(util.pwstrToFfi(lpszURL), util.hwndToFfi(hwndParent), dwFlags));
}

export function InternetGoOnline(
  lpszURL: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGoOnline(util.pstrToFfi(lpszURL), util.hwndToFfi(hwndParent), dwFlags));
}

export function InternetAutodial(
  dwFlags: INTERNET_AUTODIAL /* Windows.Win32.Networking.WinInet.INTERNET_AUTODIAL */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetAutodial(dwFlags, util.hwndToFfi(hwndParent)));
}

export function InternetAutodialHangup(
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetAutodialHangup(dwReserved));
}

export function InternetGetConnectedState(
  lpdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetConnectedState(util.toPointer(lpdwFlags), dwReserved));
}

export function InternetGetConnectedStateExA(
  lpdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszConnectionName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchNameLen: number /* u32 */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetConnectedStateExA(util.toPointer(lpdwFlags), util.pstrToFfi(lpszConnectionName), cchNameLen, dwReserved));
}

export function InternetGetConnectedStateExW(
  lpdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszConnectionName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchNameLen: number /* u32 */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetConnectedStateExW(util.toPointer(lpdwFlags), util.pwstrToFfi(lpszConnectionName), cchNameLen, dwReserved));
}

export function DeleteWpadCacheForNetworks(
  param0: WPAD_CACHE_DELETE /* Windows.Win32.Networking.WinInet.WPAD_CACHE_DELETE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.DeleteWpadCacheForNetworks(param0));
}

export function InternetInitializeAutoProxyDll(
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetInitializeAutoProxyDll(dwReserved));
}

export function DetectAutoProxyUrl(
  pszAutoProxyUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchAutoProxyUrl: number /* u32 */,
  dwDetectFlags: PROXY_AUTO_DETECT_TYPE /* Windows.Win32.Networking.WinInet.PROXY_AUTO_DETECT_TYPE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.DetectAutoProxyUrl(util.pstrToFfi(pszAutoProxyUrl), cchAutoProxyUrl, dwDetectFlags));
}

export function CreateMD5SSOHash(
  pszChallengeInfo: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszRealm: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszTarget: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pbHexHash: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.CreateMD5SSOHash(util.pwstrToFfi(pszChallengeInfo), util.pwstrToFfi(pwszRealm), util.pwstrToFfi(pwszTarget), util.toPointer(pbHexHash)));
}

export function InternetGetConnectedStateEx(
  lpdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszConnectionName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwNameLen: number /* u32 */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetConnectedStateEx(util.toPointer(lpdwFlags), util.pstrToFfi(lpszConnectionName), dwNameLen, dwReserved));
}

export function InternetSetDialStateA(
  lpszConnectoid: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwState: number /* u32 */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetSetDialStateA(util.pstrToFfi(lpszConnectoid), dwState, dwReserved));
}

export function InternetSetDialStateW(
  lpszConnectoid: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwState: number /* u32 */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetSetDialStateW(util.pwstrToFfi(lpszConnectoid), dwState, dwReserved));
}

export function InternetSetDialState(
  lpszConnectoid: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwState: number /* u32 */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetSetDialState(util.pstrToFfi(lpszConnectoid), dwState, dwReserved));
}

export function InternetSetPerSiteCookieDecisionA(
  pchHostName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwDecision: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetSetPerSiteCookieDecisionA(util.pstrToFfi(pchHostName), dwDecision));
}

export function InternetSetPerSiteCookieDecisionW(
  pchHostName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwDecision: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetSetPerSiteCookieDecisionW(util.pwstrToFfi(pchHostName), dwDecision));
}

export function InternetGetPerSiteCookieDecisionA(
  pchHostName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetPerSiteCookieDecisionA(util.pstrToFfi(pchHostName), util.toPointer(pResult)));
}

export function InternetGetPerSiteCookieDecisionW(
  pchHostName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetPerSiteCookieDecisionW(util.pwstrToFfi(pchHostName), util.toPointer(pResult)));
}

export function InternetClearAllPerSiteCookieDecisions(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetClearAllPerSiteCookieDecisions());
}

export function InternetEnumPerSiteCookieDecisionA(
  pszSiteName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcSiteNameSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwDecision: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetEnumPerSiteCookieDecisionA(util.pstrToFfi(pszSiteName), util.toPointer(pcSiteNameSize), util.toPointer(pdwDecision), dwIndex));
}

export function InternetEnumPerSiteCookieDecisionW(
  pszSiteName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcSiteNameSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwDecision: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwIndex: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetEnumPerSiteCookieDecisionW(util.pwstrToFfi(pszSiteName), util.toPointer(pcSiteNameSize), util.toPointer(pdwDecision), dwIndex));
}

export function PrivacySetZonePreferenceW(
  dwZone: number /* u32 */,
  dwType: number /* u32 */,
  dwTemplate: number /* u32 */,
  pszPreference: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libWININET_dll.PrivacySetZonePreferenceW(dwZone, dwType, dwTemplate, util.pwstrToFfi(pszPreference));
}

export function PrivacyGetZonePreferenceW(
  dwZone: number /* u32 */,
  dwType: number /* u32 */,
  pdwTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  pszBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.PrivacyGetZonePreferenceW(dwZone, dwType, util.toPointer(pdwTemplate), util.pwstrToFfi(pszBuffer), util.toPointer(pdwBufferLength));
}

export function HttpIsHostHstsEnabled(
  pcwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pfIsHsts: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.HttpIsHostHstsEnabled(util.pwstrToFfi(pcwszUrl), util.toPointer(pfIsHsts));
}

export function InternetAlgIdToStringA(
  ai: number /* u32 */,
  lpstr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwstrLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetAlgIdToStringA(ai, util.pstrToFfi(lpstr), util.toPointer(lpdwstrLength), dwReserved));
}

export function InternetAlgIdToStringW(
  ai: number /* u32 */,
  lpstr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpdwstrLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetAlgIdToStringW(ai, util.pwstrToFfi(lpstr), util.toPointer(lpdwstrLength), dwReserved));
}

export function InternetSecurityProtocolToStringA(
  dwProtocol: number /* u32 */,
  lpstr: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwstrLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetSecurityProtocolToStringA(dwProtocol, util.pstrToFfi(lpstr), util.toPointer(lpdwstrLength), dwReserved));
}

export function InternetSecurityProtocolToStringW(
  dwProtocol: number /* u32 */,
  lpstr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpdwstrLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetSecurityProtocolToStringW(dwProtocol, util.pwstrToFfi(lpstr), util.toPointer(lpdwstrLength), dwReserved));
}

export function InternetGetSecurityInfoByURLA(
  lpszURL: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ppCertChain: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSecureFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetSecurityInfoByURLA(util.pstrToFfi(lpszURL), util.toPointer(ppCertChain), util.toPointer(pdwSecureFlags)));
}

export function InternetGetSecurityInfoByURLW(
  lpszURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppCertChain: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSecureFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetSecurityInfoByURLW(util.pwstrToFfi(lpszURL), util.toPointer(ppCertChain), util.toPointer(pdwSecureFlags)));
}

export function InternetGetSecurityInfoByURL(
  lpszURL: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ppCertChain: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwSecureFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetGetSecurityInfoByURL(util.pstrToFfi(lpszURL), util.toPointer(ppCertChain), util.toPointer(pdwSecureFlags)));
}

export function ShowSecurityInfo(
  hWndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  pSecurityInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.ShowSecurityInfo(util.hwndToFfi(hWndParent), util.toPointer(pSecurityInfo));
}

export function ShowX509EncodedCertificate(
  hWndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpCert: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbCert: number /* u32 */,
): number /* u32 */ {
  return libWININET_dll.ShowX509EncodedCertificate(util.hwndToFfi(hWndParent), util.toPointer(lpCert), cbCert);
}

export function ShowClientAuthCerts(
  hWndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): number /* u32 */ {
  return libWININET_dll.ShowClientAuthCerts(util.hwndToFfi(hWndParent));
}

export function ParseX509EncodedCertificateForListBoxEntry(
  lpCert: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbCert: number /* u32 */,
  lpszListBoxEntry: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwListBoxEntry: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.ParseX509EncodedCertificateForListBoxEntry(util.toPointer(lpCert), cbCert, util.pstrToFfi(lpszListBoxEntry), util.toPointer(lpdwListBoxEntry));
}

export function InternetShowSecurityInfoByURLA(
  lpszURL: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetShowSecurityInfoByURLA(util.pstrToFfi(lpszURL), util.hwndToFfi(hwndParent)));
}

export function InternetShowSecurityInfoByURLW(
  lpszURL: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetShowSecurityInfoByURLW(util.pwstrToFfi(lpszURL), util.hwndToFfi(hwndParent)));
}

export function InternetShowSecurityInfoByURL(
  lpszURL: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  hwndParent: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetShowSecurityInfoByURL(util.pstrToFfi(lpszURL), util.hwndToFfi(hwndParent)));
}

export function InternetFortezzaCommand(
  dwCommand: number /* u32 */,
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  dwReserved: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetFortezzaCommand(dwCommand, util.hwndToFfi(hwnd), dwReserved));
}

export function InternetQueryFortezzaStatus(
  pdwStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetQueryFortezzaStatus(util.toPointer(pdwStatus), dwReserved));
}

export function InternetWriteFileExA(
  hFile: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffersIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetWriteFileExA(util.toPointer(hFile), util.toPointer(lpBuffersIn), dwFlags, dwContext));
}

export function InternetWriteFileExW(
  hFile: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpBuffersIn: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwContext: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.InternetWriteFileExW(util.toPointer(hFile), util.toPointer(lpBuffersIn), dwFlags, dwContext));
}

export function FindP3PPolicySymbol(
  pszSymbol: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* i32 */ {
  return libWININET_dll.FindP3PPolicySymbol(util.pstrToFfi(pszSymbol));
}

export function HttpGetServerCredentials(
  pwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppwszUserName: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppwszPassword: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.HttpGetServerCredentials(util.pwstrToFfi(pwszUrl), util.toPointer(ppwszUserName), util.toPointer(ppwszPassword));
}

export function HttpPushEnable(
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTransportSetting: Deno.PointerValue | Uint8Array | null /* ptr */,
  phWait: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.HttpPushEnable(util.toPointer(hRequest), util.toPointer(pTransportSetting), util.toPointer(phWait));
}

export function HttpPushWait(
  hWait: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinInet.HTTP_PUSH_WAIT_HANDLE */,
  eType: HTTP_PUSH_WAIT_TYPE /* Windows.Win32.Networking.WinInet.HTTP_PUSH_WAIT_TYPE */,
  pNotificationStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.HttpPushWait(util.toPointer(hWait), eType, util.toPointer(pNotificationStatus));
}

export function HttpPushClose(
  hWait: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinInet.HTTP_PUSH_WAIT_HANDLE */,
): void /* void */ {
  return libWININET_dll.HttpPushClose(util.toPointer(hWait));
}

export function HttpCheckDavComplianceA(
  lpszUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszComplianceToken: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpfFound: Deno.PointerValue | Uint8Array | null /* ptr */,
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpCheckDavComplianceA(util.pstrToFfi(lpszUrl), util.pstrToFfi(lpszComplianceToken), util.toPointer(lpfFound), util.hwndToFfi(hWnd), util.toPointer(lpvReserved)));
}

export function HttpCheckDavComplianceW(
  lpszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszComplianceToken: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpfFound: Deno.PointerValue | Uint8Array | null /* ptr */,
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  lpvReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpCheckDavComplianceW(util.pwstrToFfi(lpszUrl), util.pwstrToFfi(lpszComplianceToken), util.toPointer(lpfFound), util.hwndToFfi(hWnd), util.toPointer(lpvReserved)));
}

export function IsUrlCacheEntryExpiredA(
  lpszUrlName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  pftLastModified: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.IsUrlCacheEntryExpiredA(util.pstrToFfi(lpszUrlName), dwFlags, util.toPointer(pftLastModified)));
}

export function IsUrlCacheEntryExpiredW(
  lpszUrlName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  pftLastModified: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.IsUrlCacheEntryExpiredW(util.pwstrToFfi(lpszUrlName), dwFlags, util.toPointer(pftLastModified)));
}

export function CreateUrlCacheEntryExW(
  lpszUrlName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwExpectedFileSize: number /* u32 */,
  lpszFileExtension: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszFileName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwReserved: number /* u32 */,
  fPreserveIncomingFileName: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.CreateUrlCacheEntryExW(util.pwstrToFfi(lpszUrlName), dwExpectedFileSize, util.pwstrToFfi(lpszFileExtension), util.pwstrToFfi(lpszFileName), dwReserved, util.boolToFfi(fPreserveIncomingFileName)));
}

export function GetUrlCacheEntryBinaryBlob(
  pwszUrlName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwType: Deno.PointerValue | Uint8Array | null /* ptr */,
  pftExpireTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  pftAccessTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  pftModifiedTime: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppbBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcbBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.GetUrlCacheEntryBinaryBlob(util.pwstrToFfi(pwszUrlName), util.toPointer(dwType), util.toPointer(pftExpireTime), util.toPointer(pftAccessTime), util.toPointer(pftModifiedTime), util.toPointer(ppbBlob), util.toPointer(pcbBlob));
}

export function CommitUrlCacheEntryBinaryBlob(
  pwszUrlName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwType: number /* u32 */,
  ftExpireTime: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
  ftModifiedTime: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
  pbBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBlob: number /* u32 */,
): number /* u32 */ {
  return libWININET_dll.CommitUrlCacheEntryBinaryBlob(util.pwstrToFfi(pwszUrlName), dwType, util.toPointer(ftExpireTime), util.toPointer(ftModifiedTime), util.toPointer(pbBlob), cbBlob);
}

export function CreateUrlCacheContainerA(
  Name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpCachePrefix: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszCachePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  KBCacheLimit: number /* u32 */,
  dwContainerType: number /* u32 */,
  dwOptions: number /* u32 */,
  pvBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.CreateUrlCacheContainerA(util.pstrToFfi(Name), util.pstrToFfi(lpCachePrefix), util.pstrToFfi(lpszCachePath), KBCacheLimit, dwContainerType, dwOptions, util.toPointer(pvBuffer), util.toPointer(cbBuffer)));
}

export function CreateUrlCacheContainerW(
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpCachePrefix: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszCachePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  KBCacheLimit: number /* u32 */,
  dwContainerType: number /* u32 */,
  dwOptions: number /* u32 */,
  pvBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.CreateUrlCacheContainerW(util.pwstrToFfi(Name), util.pwstrToFfi(lpCachePrefix), util.pwstrToFfi(lpszCachePath), KBCacheLimit, dwContainerType, dwOptions, util.toPointer(pvBuffer), util.toPointer(cbBuffer)));
}

export function DeleteUrlCacheContainerA(
  Name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwOptions: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.DeleteUrlCacheContainerA(util.pstrToFfi(Name), dwOptions));
}

export function DeleteUrlCacheContainerW(
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwOptions: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.DeleteUrlCacheContainerW(util.pwstrToFfi(Name), dwOptions));
}

export function FindFirstUrlCacheContainerA(
  pdwModified: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpContainerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbContainerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOptions: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWININET_dll.FindFirstUrlCacheContainerA(util.toPointer(pdwModified), util.toPointer(lpContainerInfo), util.toPointer(lpcbContainerInfo), dwOptions));
}

export function FindFirstUrlCacheContainerW(
  pdwModified: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpContainerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbContainerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwOptions: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWININET_dll.FindFirstUrlCacheContainerW(util.toPointer(pdwModified), util.toPointer(lpContainerInfo), util.toPointer(lpcbContainerInfo), dwOptions));
}

export function FindNextUrlCacheContainerA(
  hEnumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpContainerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbContainerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FindNextUrlCacheContainerA(util.toPointer(hEnumHandle), util.toPointer(lpContainerInfo), util.toPointer(lpcbContainerInfo)));
}

export function FindNextUrlCacheContainerW(
  hEnumHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpContainerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbContainerInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FindNextUrlCacheContainerW(util.toPointer(hEnumHandle), util.toPointer(lpContainerInfo), util.toPointer(lpcbContainerInfo)));
}

export function FreeUrlCacheSpaceA(
  lpszCachePath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwSize: number /* u32 */,
  dwFilter: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FreeUrlCacheSpaceA(util.pstrToFfi(lpszCachePath), dwSize, dwFilter));
}

export function FreeUrlCacheSpaceW(
  lpszCachePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwSize: number /* u32 */,
  dwFilter: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.FreeUrlCacheSpaceW(util.pwstrToFfi(lpszCachePath), dwSize, dwFilter));
}

export function UrlCacheFreeGlobalSpace(
  ullTargetSize: Deno.PointerValue /* u64 */,
  dwFilter: number /* u32 */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheFreeGlobalSpace(ullTargetSize, dwFilter);
}

export function UrlCacheGetGlobalCacheSize(
  dwFilter: number /* u32 */,
  pullSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pullLimit: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheGetGlobalCacheSize(dwFilter, util.toPointer(pullSize), util.toPointer(pullLimit));
}

export function GetUrlCacheConfigInfoA(
  lpCacheConfigInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheConfigInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFieldControl: CACHE_CONFIG /* Windows.Win32.Networking.WinInet.CACHE_CONFIG */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GetUrlCacheConfigInfoA(util.toPointer(lpCacheConfigInfo), util.toPointer(lpcbCacheConfigInfo), dwFieldControl));
}

export function GetUrlCacheConfigInfoW(
  lpCacheConfigInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbCacheConfigInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFieldControl: CACHE_CONFIG /* Windows.Win32.Networking.WinInet.CACHE_CONFIG */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GetUrlCacheConfigInfoW(util.toPointer(lpCacheConfigInfo), util.toPointer(lpcbCacheConfigInfo), dwFieldControl));
}

export function SetUrlCacheConfigInfoA(
  lpCacheConfigInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFieldControl: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.SetUrlCacheConfigInfoA(util.toPointer(lpCacheConfigInfo), dwFieldControl));
}

export function SetUrlCacheConfigInfoW(
  lpCacheConfigInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFieldControl: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.SetUrlCacheConfigInfoW(util.toPointer(lpCacheConfigInfo), dwFieldControl));
}

export function RunOnceUrlCache(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hinst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpszCmd: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nCmdShow: number /* i32 */,
): number /* u32 */ {
  return libWININET_dll.RunOnceUrlCache(util.hwndToFfi(hwnd), util.toPointer(hinst), util.pstrToFfi(lpszCmd), nCmdShow);
}

export function DeleteIE3Cache(
  hwnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  hinst: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HINSTANCE */,
  lpszCmd: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  nCmdShow: number /* i32 */,
): number /* u32 */ {
  return libWININET_dll.DeleteIE3Cache(util.hwndToFfi(hwnd), util.toPointer(hinst), util.pstrToFfi(lpszCmd), nCmdShow);
}

export function UpdateUrlCacheContentPath(
  szNewPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.UpdateUrlCacheContentPath(util.pstrToFfi(szNewPath)));
}

export function RegisterUrlCacheNotification(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  uMsg: number /* u32 */,
  gid: Deno.PointerValue /* i64 */,
  dwOpsFilter: number /* u32 */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.RegisterUrlCacheNotification(util.hwndToFfi(hWnd), uMsg, gid, dwOpsFilter, dwReserved));
}

export function GetUrlCacheHeaderData(
  nIdx: number /* u32 */,
  lpdwData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GetUrlCacheHeaderData(nIdx, util.toPointer(lpdwData)));
}

export function SetUrlCacheHeaderData(
  nIdx: number /* u32 */,
  dwData: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.SetUrlCacheHeaderData(nIdx, dwData));
}

export function IncrementUrlCacheHeaderData(
  nIdx: number /* u32 */,
  lpdwData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.IncrementUrlCacheHeaderData(nIdx, util.toPointer(lpdwData)));
}

export function LoadUrlCacheContent(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.LoadUrlCacheContent());
}

export function AppCacheLookup(
  pwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  phAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.AppCacheLookup(util.pwstrToFfi(pwszUrl), dwFlags, util.toPointer(phAppCache));
}

export function AppCacheCheckManifest(
  pwszMasterUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszManifestUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pbManifestData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwManifestDataSize: number /* u32 */,
  pbManifestResponseHeaders: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwManifestResponseHeadersSize: number /* u32 */,
  peState: Deno.PointerValue | Uint8Array | null /* ptr */,
  phNewAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.AppCacheCheckManifest(util.pwstrToFfi(pwszMasterUrl), util.pwstrToFfi(pwszManifestUrl), util.toPointer(pbManifestData), dwManifestDataSize, util.toPointer(pbManifestResponseHeaders), dwManifestResponseHeadersSize, util.toPointer(peState), util.toPointer(phNewAppCache));
}

export function AppCacheGetDownloadList(
  hAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
  pDownloadList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.AppCacheGetDownloadList(util.toPointer(hAppCache), util.toPointer(pDownloadList));
}

export function AppCacheFreeDownloadList(
  pDownloadList: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libWININET_dll.AppCacheFreeDownloadList(util.toPointer(pDownloadList));
}

export function AppCacheFinalize(
  hAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
  pbManifestData: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwManifestDataSize: number /* u32 */,
  peState: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.AppCacheFinalize(util.toPointer(hAppCache), util.toPointer(pbManifestData), dwManifestDataSize, util.toPointer(peState));
}

export function AppCacheGetFallbackUrl(
  hAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
  pwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppwszFallbackUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.AppCacheGetFallbackUrl(util.toPointer(hAppCache), util.pwstrToFfi(pwszUrl), util.toPointer(ppwszFallbackUrl));
}

export function AppCacheGetManifestUrl(
  hAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppwszManifestUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.AppCacheGetManifestUrl(util.toPointer(hAppCache), util.toPointer(ppwszManifestUrl));
}

export function AppCacheDuplicateHandle(
  hAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
  phDuplicatedAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.AppCacheDuplicateHandle(util.toPointer(hAppCache), util.toPointer(phDuplicatedAppCache));
}

export function AppCacheCloseHandle(
  hAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libWININET_dll.AppCacheCloseHandle(util.toPointer(hAppCache));
}

export function AppCacheFreeGroupList(
  pAppCacheGroupList: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libWININET_dll.AppCacheFreeGroupList(util.toPointer(pAppCacheGroupList));
}

export function AppCacheGetGroupList(
  pAppCacheGroupList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.AppCacheGetGroupList(util.toPointer(pAppCacheGroupList));
}

export function AppCacheGetInfo(
  hAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
  pAppCacheInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.AppCacheGetInfo(util.toPointer(hAppCache), util.toPointer(pAppCacheInfo));
}

export function AppCacheDeleteGroup(
  pwszManifestUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libWININET_dll.AppCacheDeleteGroup(util.pwstrToFfi(pwszManifestUrl));
}

export function AppCacheFreeSpace(
  ftCutOff: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
): number /* u32 */ {
  return libWININET_dll.AppCacheFreeSpace(util.toPointer(ftCutOff));
}

export function AppCacheGetIEGroupList(
  pAppCacheGroupList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.AppCacheGetIEGroupList(util.toPointer(pAppCacheGroupList));
}

export function AppCacheDeleteIEGroup(
  pwszManifestUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libWININET_dll.AppCacheDeleteIEGroup(util.pwstrToFfi(pwszManifestUrl));
}

export function AppCacheFreeIESpace(
  ftCutOff: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FILETIME */,
): number /* u32 */ {
  return libWININET_dll.AppCacheFreeIESpace(util.toPointer(ftCutOff));
}

export function AppCacheCreateAndCommitFile(
  hAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
  pwszSourceFilePath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pbResponseHeaders: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwResponseHeadersSize: number /* u32 */,
): number /* u32 */ {
  return libWININET_dll.AppCacheCreateAndCommitFile(util.toPointer(hAppCache), util.pwstrToFfi(pwszSourceFilePath), util.pwstrToFfi(pwszUrl), util.toPointer(pbResponseHeaders), dwResponseHeadersSize);
}

export function HttpOpenDependencyHandle(
  hRequestHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  fBackground: boolean /* Windows.Win32.Foundation.BOOL */,
  phDependencyHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.HttpOpenDependencyHandle(util.toPointer(hRequestHandle), util.boolToFfi(fBackground), util.toPointer(phDependencyHandle));
}

export function HttpCloseDependencyHandle(
  hDependencyHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libWININET_dll.HttpCloseDependencyHandle(util.toPointer(hDependencyHandle));
}

export function HttpDuplicateDependencyHandle(
  hDependencyHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  phDuplicatedDependencyHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.HttpDuplicateDependencyHandle(util.toPointer(hDependencyHandle), util.toPointer(phDuplicatedDependencyHandle));
}

export function HttpIndicatePageLoadComplete(
  hDependencyHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.HttpIndicatePageLoadComplete(util.toPointer(hDependencyHandle));
}

export function UrlCacheFreeEntryInfo(
  pCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libWININET_dll.UrlCacheFreeEntryInfo(util.toPointer(pCacheEntryInfo));
}

export function UrlCacheGetEntryInfo(
  hAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheGetEntryInfo(util.toPointer(hAppCache), util.pwstrToFfi(pcwszUrl), util.toPointer(pCacheEntryInfo));
}

export function UrlCacheCloseEntryHandle(
  hEntryFile: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libWININET_dll.UrlCacheCloseEntryHandle(util.toPointer(hEntryFile));
}

export function UrlCacheRetrieveEntryFile(
  hAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  phEntryFile: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheRetrieveEntryFile(util.toPointer(hAppCache), util.pwstrToFfi(pcwszUrl), util.toPointer(pCacheEntryInfo), util.toPointer(phEntryFile));
}

export function UrlCacheReadEntryStream(
  hUrlCacheStream: Deno.PointerValue | Uint8Array | null /* ptr */,
  ullLocation: Deno.PointerValue /* u64 */,
  pBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferLen: number /* u32 */,
  pdwBufferLen: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheReadEntryStream(util.toPointer(hUrlCacheStream), ullLocation, util.toPointer(pBuffer), dwBufferLen, util.toPointer(pdwBufferLen));
}

export function UrlCacheRetrieveEntryStream(
  hAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fRandomRead: boolean /* Windows.Win32.Foundation.BOOL */,
  pCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  phEntryStream: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheRetrieveEntryStream(util.toPointer(hAppCache), util.pwstrToFfi(pcwszUrl), util.boolToFfi(fRandomRead), util.toPointer(pCacheEntryInfo), util.toPointer(phEntryStream));
}

export function UrlCacheUpdateEntryExtraData(
  hAppCache: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pbExtraData: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbExtraData: number /* u32 */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheUpdateEntryExtraData(util.toPointer(hAppCache), util.pwstrToFfi(pcwszUrl), util.toPointer(pbExtraData), cbExtraData);
}

export function UrlCacheCreateContainer(
  pwszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszPrefix: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pwszDirectory: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ullLimit: Deno.PointerValue /* u64 */,
  dwOptions: number /* u32 */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheCreateContainer(util.pwstrToFfi(pwszName), util.pwstrToFfi(pwszPrefix), util.pwstrToFfi(pwszDirectory), ullLimit, dwOptions);
}

export function UrlCacheCheckEntriesExist(
  rgpwszUrls: Deno.PointerValue | Uint8Array | null /* ptr */,
  cEntries: number /* u32 */,
  rgfExist: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheCheckEntriesExist(util.toPointer(rgpwszUrls), cEntries, util.toPointer(rgfExist));
}

export function UrlCacheGetContentPaths(
  pppwszDirectories: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcDirectories: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheGetContentPaths(util.toPointer(pppwszDirectories), util.toPointer(pcDirectories));
}

export function UrlCacheGetGlobalLimit(
  limitType: URL_CACHE_LIMIT_TYPE /* Windows.Win32.Networking.WinInet.URL_CACHE_LIMIT_TYPE */,
  pullLimit: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheGetGlobalLimit(limitType, util.toPointer(pullLimit));
}

export function UrlCacheSetGlobalLimit(
  limitType: URL_CACHE_LIMIT_TYPE /* Windows.Win32.Networking.WinInet.URL_CACHE_LIMIT_TYPE */,
  ullLimit: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheSetGlobalLimit(limitType, ullLimit);
}

export function UrlCacheReloadSettings(): number /* u32 */ {
  return libWININET_dll.UrlCacheReloadSettings();
}

export function UrlCacheContainerSetEntryMaximumAge(
  pwszPrefix: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwEntryMaxAge: number /* u32 */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheContainerSetEntryMaximumAge(util.pwstrToFfi(pwszPrefix), dwEntryMaxAge);
}

export function UrlCacheFindFirstEntry(
  pwszPrefix: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwFilter: number /* u32 */,
  GroupId: Deno.PointerValue /* i64 */,
  pCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  phFind: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheFindFirstEntry(util.pwstrToFfi(pwszPrefix), dwFlags, dwFilter, GroupId, util.toPointer(pCacheEntryInfo), util.toPointer(phFind));
}

export function UrlCacheFindNextEntry(
  hFind: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  pCacheEntryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.UrlCacheFindNextEntry(util.toPointer(hFind), util.toPointer(pCacheEntryInfo));
}

export function UrlCacheServer(): number /* u32 */ {
  return libWININET_dll.UrlCacheServer();
}

export function ReadGuidsForConnectedNetworks(
  pcNetworks: Deno.PointerValue | Uint8Array | null /* ptr */,
  pppwszNetworkGuids: Deno.PointerValue | Uint8Array | null /* ptr */,
  pppbstrNetworkNames: Deno.PointerValue | Uint8Array | null /* ptr */,
  pppwszGWMacs: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcGatewayMacs: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.ReadGuidsForConnectedNetworks(util.toPointer(pcNetworks), util.toPointer(pppwszNetworkGuids), util.toPointer(pppbstrNetworkNames), util.toPointer(pppwszGWMacs), util.toPointer(pcGatewayMacs), util.toPointer(pdwFlags)));
}

export function IsHostInProxyBypassList(
  tScheme: INTERNET_SCHEME /* Windows.Win32.Networking.WinInet.INTERNET_SCHEME */,
  lpszHost: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchHost: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.IsHostInProxyBypassList(tScheme, util.pstrToFfi(lpszHost), cchHost));
}

export function InternetFreeProxyInfoList(
  pProxyInfoList: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libWININET_dll.InternetFreeProxyInfoList(util.toPointer(pProxyInfoList));
}

export function InternetGetProxyForUrl(
  hInternet: Deno.PointerValue | Uint8Array | null /* ptr */,
  pcwszUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pProxyInfoList: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.InternetGetProxyForUrl(util.toPointer(hInternet), util.pwstrToFfi(pcwszUrl), util.toPointer(pProxyInfoList));
}

export function DoConnectoidsExist(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.DoConnectoidsExist());
}

export function GetDiskInfoA(
  pszPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pdwClusterSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdlAvail: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdlTotal: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.GetDiskInfoA(util.pstrToFfi(pszPath), util.toPointer(pdwClusterSize), util.toPointer(pdlAvail), util.toPointer(pdlTotal)));
}

export function PerformOperationOverUrlCacheA(
  pszUrlSearchPattern: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  dwFilter: number /* u32 */,
  GroupId: Deno.PointerValue /* i64 */,
  pReserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  pdwReserved2: Deno.PointerValue | Uint8Array | null /* ptr */,
  pReserved3: Deno.PointerValue | Uint8Array | null /* ptr */,
  op: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinInet.CACHE_OPERATOR */,
  pOperatorData: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.PerformOperationOverUrlCacheA(util.pstrToFfi(pszUrlSearchPattern), dwFlags, dwFilter, GroupId, util.toPointer(pReserved1), util.toPointer(pdwReserved2), util.toPointer(pReserved3), util.toPointer(op), util.toPointer(pOperatorData)));
}

export function IsProfilesEnabled(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.IsProfilesEnabled());
}

export function InternalInternetGetCookie(
  lpszUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpszCookieData: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  lpdwDataSize: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.InternalInternetGetCookie(util.pstrToFfi(lpszUrl), util.pstrToFfi(lpszCookieData), util.toPointer(lpdwDataSize));
}

export function ImportCookieFileA(
  szFilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.ImportCookieFileA(util.pstrToFfi(szFilename)));
}

export function ImportCookieFileW(
  szFilename: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.ImportCookieFileW(util.pwstrToFfi(szFilename)));
}

export function ExportCookieFileA(
  szFilename: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fAppend: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.ExportCookieFileA(util.pstrToFfi(szFilename), util.boolToFfi(fAppend)));
}

export function ExportCookieFileW(
  szFilename: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fAppend: boolean /* Windows.Win32.Foundation.BOOL */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.ExportCookieFileW(util.pwstrToFfi(szFilename), util.boolToFfi(fAppend)));
}

export function IsDomainLegalCookieDomainA(
  pchDomain: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pchFullDomain: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.IsDomainLegalCookieDomainA(util.pstrToFfi(pchDomain), util.pstrToFfi(pchFullDomain)));
}

export function IsDomainLegalCookieDomainW(
  pchDomain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pchFullDomain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.IsDomainLegalCookieDomainW(util.pwstrToFfi(pchDomain), util.pwstrToFfi(pchFullDomain)));
}

export function HttpWebSocketCompleteUpgrade(
  hRequest: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwContext: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWININET_dll.HttpWebSocketCompleteUpgrade(util.toPointer(hRequest), dwContext));
}

export function HttpWebSocketSend(
  hWebSocket: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferType: HTTP_WEB_SOCKET_BUFFER_TYPE /* Windows.Win32.Networking.WinInet.HTTP_WEB_SOCKET_BUFFER_TYPE */,
  pvBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpWebSocketSend(util.toPointer(hWebSocket), BufferType, util.toPointer(pvBuffer), dwBufferLength));
}

export function HttpWebSocketReceive(
  hWebSocket: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferLength: number /* u32 */,
  pdwBytesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  pBufferType: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpWebSocketReceive(util.toPointer(hWebSocket), util.toPointer(pvBuffer), dwBufferLength, util.toPointer(pdwBytesRead), util.toPointer(pBufferType)));
}

export function HttpWebSocketClose(
  hWebSocket: Deno.PointerValue | Uint8Array | null /* ptr */,
  usStatus: number /* u16 */,
  pvReason: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReasonLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpWebSocketClose(util.toPointer(hWebSocket), usStatus, util.toPointer(pvReason), dwReasonLength));
}

export function HttpWebSocketShutdown(
  hWebSocket: Deno.PointerValue | Uint8Array | null /* ptr */,
  usStatus: number /* u16 */,
  pvReason: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReasonLength: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpWebSocketShutdown(util.toPointer(hWebSocket), usStatus, util.toPointer(pvReason), dwReasonLength));
}

export function HttpWebSocketQueryCloseStatus(
  hWebSocket: Deno.PointerValue | Uint8Array | null /* ptr */,
  pusStatus: Deno.PointerValue | Uint8Array | null /* ptr */,
  pvReason: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReasonLength: number /* u32 */,
  pdwReasonLengthConsumed: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWININET_dll.HttpWebSocketQueryCloseStatus(util.toPointer(hWebSocket), util.toPointer(pusStatus), util.toPointer(pvReason), dwReasonLength, util.toPointer(pdwReasonLengthConsumed)));
}

export function InternetConvertUrlFromWireToWideChar(
  pcszUrl: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchUrl: number /* u32 */,
  pcwszBaseUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwCodePageHost: number /* u32 */,
  dwCodePagePath: number /* u32 */,
  fEncodePathExtra: boolean /* Windows.Win32.Foundation.BOOL */,
  dwCodePageExtra: number /* u32 */,
  ppwszConvertedUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWININET_dll.InternetConvertUrlFromWireToWideChar(util.pstrToFfi(pcszUrl), cchUrl, util.pwstrToFfi(pcwszBaseUrl), dwCodePageHost, dwCodePagePath, util.boolToFfi(fEncodePathExtra), dwCodePageExtra, util.toPointer(ppwszConvertedUrl));
}

