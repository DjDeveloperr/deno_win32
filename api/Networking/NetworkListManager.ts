/// Auto-generated by Deno Win32: Windows.Win32.Networking.NetworkListManager.Apis

import * as util from "../../util.ts";

// Enums
export type NLM_CONNECTION_COST = number;
export type NLM_NETWORK_CLASS = number;
export type NLM_INTERNET_CONNECTIVITY = number;
export type NLM_CONNECTIVITY = number;
export type NLM_DOMAIN_TYPE = number;
export type NLM_ENUM_NETWORK = number;
export type NLM_NETWORK_CATEGORY = number;
export type NLM_NETWORK_PROPERTY_CHANGE = number;
export type NLM_CONNECTION_PROPERTY_CHANGE = number;

// Constants
export const NA_DomainAuthenticationFailed = `NA_DomainAuthenticationFailed`;
export const NA_NetworkClass = `NA_NetworkClass`;
export const NA_NameSetByPolicy = `NA_NameSetByPolicy`;
export const NA_IconSetByPolicy = `NA_IconSetByPolicy`;
export const NA_DescriptionSetByPolicy = `NA_DescriptionSetByPolicy`;
export const NA_CategorySetByPolicy = `NA_CategorySetByPolicy`;
export const NA_NameReadOnly = `NA_NameReadOnly`;
export const NA_IconReadOnly = `NA_IconReadOnly`;
export const NA_DescriptionReadOnly = `NA_DescriptionReadOnly`;
export const NA_CategoryReadOnly = `NA_CategoryReadOnly`;
export const NA_AllowMerge = `NA_AllowMerge`;
export const NA_InternetConnectivityV4 = `NA_InternetConnectivityV4`;
export const NA_InternetConnectivityV6 = `NA_InternetConnectivityV6`;
export const NLM_MAX_ADDRESS_LIST_SIZE = 10;
export const NLM_UNKNOWN_DATAPLAN_STATUS = 4294967295;
export const NLM_CONNECTION_COST_UNKNOWN = 0;
export const NLM_CONNECTION_COST_UNRESTRICTED = 1;
export const NLM_CONNECTION_COST_FIXED = 2;
export const NLM_CONNECTION_COST_VARIABLE = 4;
export const NLM_CONNECTION_COST_OVERDATALIMIT = 65536;
export const NLM_CONNECTION_COST_CONGESTED = 131072;
export const NLM_CONNECTION_COST_ROAMING = 262144;
export const NLM_CONNECTION_COST_APPROACHINGDATALIMIT = 524288;
export const NLM_NETWORK_IDENTIFYING = 1;
export const NLM_NETWORK_IDENTIFIED = 2;
export const NLM_NETWORK_UNIDENTIFIED = 3;
export const NLM_INTERNET_CONNECTIVITY_WEBHIJACK = 1;
export const NLM_INTERNET_CONNECTIVITY_PROXIED = 2;
export const NLM_INTERNET_CONNECTIVITY_CORPORATE = 4;
export const NLM_CONNECTIVITY_DISCONNECTED = 0;
export const NLM_CONNECTIVITY_IPV4_NOTRAFFIC = 1;
export const NLM_CONNECTIVITY_IPV6_NOTRAFFIC = 2;
export const NLM_CONNECTIVITY_IPV4_SUBNET = 16;
export const NLM_CONNECTIVITY_IPV4_LOCALNETWORK = 32;
export const NLM_CONNECTIVITY_IPV4_INTERNET = 64;
export const NLM_CONNECTIVITY_IPV6_SUBNET = 256;
export const NLM_CONNECTIVITY_IPV6_LOCALNETWORK = 512;
export const NLM_CONNECTIVITY_IPV6_INTERNET = 1024;
export const NLM_DOMAIN_TYPE_NON_DOMAIN_NETWORK = 0;
export const NLM_DOMAIN_TYPE_DOMAIN_NETWORK = 1;
export const NLM_DOMAIN_TYPE_DOMAIN_AUTHENTICATED = 2;
export const NLM_ENUM_NETWORK_CONNECTED = 1;
export const NLM_ENUM_NETWORK_DISCONNECTED = 2;
export const NLM_ENUM_NETWORK_ALL = 3;
export const NLM_NETWORK_CATEGORY_PUBLIC = 0;
export const NLM_NETWORK_CATEGORY_PRIVATE = 1;
export const NLM_NETWORK_CATEGORY_DOMAIN_AUTHENTICATED = 2;
export const NLM_NETWORK_PROPERTY_CHANGE_CONNECTION = 1;
export const NLM_NETWORK_PROPERTY_CHANGE_DESCRIPTION = 2;
export const NLM_NETWORK_PROPERTY_CHANGE_NAME = 4;
export const NLM_NETWORK_PROPERTY_CHANGE_ICON = 8;
export const NLM_NETWORK_PROPERTY_CHANGE_CATEGORY_VALUE = 16;
export const NLM_CONNECTION_PROPERTY_CHANGE_AUTHENTICATION = 1;

// Structs

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Networking.NetworkListManager.NLM_USAGE_DATA (size: 16)
 */
export interface NLM_USAGE_DATA {
  /** u32 */
  UsageInMegabytes: number;
  /** Windows.Win32.Foundation.FILETIME */
  LastSyncTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNLM_USAGE_DATA = 16;

export function allocNLM_USAGE_DATA(data?: Partial<NLM_USAGE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofNLM_USAGE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UsageInMegabytes !== undefined) view.setUint32(0, Number(data.UsageInMegabytes), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.LastSyncTime !== undefined) view.setBigUint64(8, data.LastSyncTime === null ? 0n : BigInt(util.toPointer(data.LastSyncTime)), true);
  return buf;
}

export class NLM_USAGE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get UsageInMegabytes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get LastSyncTime(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set UsageInMegabytes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set LastSyncTime(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.NetworkListManager.NLM_DATAPLAN_STATUS (size: 48)
 */
export interface NLM_DATAPLAN_STATUS {
  /** System.Guid */
  InterfaceGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.NetworkListManager.NLM_USAGE_DATA */
  UsageData: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  DataLimitInMegabytes: number;
  /** u32 */
  InboundBandwidthInKbps: number;
  /** u32 */
  OutboundBandwidthInKbps: number;
  /** Windows.Win32.Foundation.FILETIME */
  NextBillingCycle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaxTransferSizeInMegabytes: number;
  /** u32 */
  Reserved: number;
}

export const sizeofNLM_DATAPLAN_STATUS = 48;

export function allocNLM_DATAPLAN_STATUS(data?: Partial<NLM_DATAPLAN_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofNLM_DATAPLAN_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.InterfaceGuid !== undefined) view.setBigUint64(0, data.InterfaceGuid === null ? 0n : BigInt(util.toPointer(data.InterfaceGuid)), true);
  // 0x08: pointer
  if (data?.UsageData !== undefined) view.setBigUint64(8, data.UsageData === null ? 0n : BigInt(util.toPointer(data.UsageData)), true);
  // 0x10: u32
  if (data?.DataLimitInMegabytes !== undefined) view.setUint32(16, Number(data.DataLimitInMegabytes), true);
  // 0x14: u32
  if (data?.InboundBandwidthInKbps !== undefined) view.setUint32(20, Number(data.InboundBandwidthInKbps), true);
  // 0x18: u32
  if (data?.OutboundBandwidthInKbps !== undefined) view.setUint32(24, Number(data.OutboundBandwidthInKbps), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.NextBillingCycle !== undefined) view.setBigUint64(32, data.NextBillingCycle === null ? 0n : BigInt(util.toPointer(data.NextBillingCycle)), true);
  // 0x28: u32
  if (data?.MaxTransferSizeInMegabytes !== undefined) view.setUint32(40, Number(data.MaxTransferSizeInMegabytes), true);
  // 0x2c: u32
  if (data?.Reserved !== undefined) view.setUint32(44, Number(data.Reserved), true);
  return buf;
}

export class NLM_DATAPLAN_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get InterfaceGuid(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get UsageData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get DataLimitInMegabytes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get InboundBandwidthInKbps(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get OutboundBandwidthInKbps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get NextBillingCycle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get MaxTransferSizeInMegabytes(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get Reserved(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set InterfaceGuid(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set UsageData(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set DataLimitInMegabytes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set InboundBandwidthInKbps(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set OutboundBandwidthInKbps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set NextBillingCycle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set MaxTransferSizeInMegabytes(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set Reserved(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Networking.NetworkListManager.NLM_SOCKADDR (size: 8)
 */
export interface NLM_SOCKADDR {
  /** array */
  data: Deno.PointerValue | null;
}

export const sizeofNLM_SOCKADDR = 8;

export function allocNLM_SOCKADDR(data?: Partial<NLM_SOCKADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofNLM_SOCKADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.data !== undefined) view.setBigUint64(0, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

export class NLM_SOCKADDRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.NetworkListManager.NLM_SIMULATED_PROFILE_INFO (size: 24)
 */
export interface NLM_SIMULATED_PROFILE_INFO {
  /** array */
  ProfileName: Deno.PointerValue | null;
  /** Windows.Win32.Networking.NetworkListManager.NLM_CONNECTION_COST */
  cost: NLM_CONNECTION_COST;
  /** u32 */
  UsageInMegabytes: number;
  /** u32 */
  DataLimitInMegabytes: number;
}

export const sizeofNLM_SIMULATED_PROFILE_INFO = 24;

export function allocNLM_SIMULATED_PROFILE_INFO(data?: Partial<NLM_SIMULATED_PROFILE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofNLM_SIMULATED_PROFILE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ProfileName !== undefined) view.setBigUint64(0, data.ProfileName === null ? 0n : BigInt(util.toPointer(data.ProfileName)), true);
  // 0x08: i32
  if (data?.cost !== undefined) view.setInt32(8, Number(data.cost), true);
  // 0x0c: u32
  if (data?.UsageInMegabytes !== undefined) view.setUint32(12, Number(data.UsageInMegabytes), true);
  // 0x10: u32
  if (data?.DataLimitInMegabytes !== undefined) view.setUint32(16, Number(data.DataLimitInMegabytes), true);
  // 0x14: pad4
  return buf;
}

export class NLM_SIMULATED_PROFILE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ProfileName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get cost(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get UsageInMegabytes(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get DataLimitInMegabytes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set ProfileName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set cost(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set UsageInMegabytes(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set DataLimitInMegabytes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

// Native Libraries

// Symbols

