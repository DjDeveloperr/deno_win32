/// Auto-generated by Deno Win32: Windows.Win32.Networking.WinSock.Apis

import * as util from "../../util.ts";

// Enums
export type WSA_ERROR = number;
export type SET_SERVICE_OPERATION = number;
export type SEND_FLAGS = number;
export type RESOURCE_DISPLAY_TYPE = number;
export type IPPROTO = number;
export type SCOPE_LEVEL = number;
export type WSACOMPLETIONTYPE = number;
export type WSAECOMPARATOR = number;
export type WSAESETSERVICEOP = number;
export type RIP_INFO_TYPE = number;
export type PMTUD_STATE = number;
export type MULTICAST_MODE_TYPE = number;
export type eWINDOW_ADVANCE_METHOD = number;
export type NL_PREFIX_ORIGIN = number;
export type NL_SUFFIX_ORIGIN = number;
export type NL_DAD_STATE = number;
export type NL_ROUTE_PROTOCOL = number;
export type NL_ADDRESS_TYPE = number;
export type NL_ROUTE_ORIGIN = number;
export type NL_NEIGHBOR_STATE = number;
export type NL_LINK_LOCAL_ADDRESS_BEHAVIOR = number;
export type NL_ROUTER_DISCOVERY_BEHAVIOR = number;
export type NL_BANDWIDTH_FLAG = number;
export type NL_NETWORK_CATEGORY = number;
export type NL_INTERFACE_NETWORK_CATEGORY_STATE = number;
export type NL_NETWORK_CONNECTIVITY_LEVEL_HINT = number;
export type NL_NETWORK_CONNECTIVITY_COST_HINT = number;
export type TCPSTATE = number;
export type CONTROL_CHANNEL_TRIGGER_STATUS = number;
export type SOCKET_PRIORITY_HINT = number;
export type RCVALL_VALUE = number;
export type TCP_ICW_LEVEL = number;
export type SOCKET_USAGE_TYPE = number;
export type SOCKET_SECURITY_PROTOCOL = number;
export type WSA_COMPATIBILITY_BEHAVIOR_ID = number;
export type Q2931_IE_TYPE = number;
export type AAL_TYPE = number;
export type NAPI_PROVIDER_TYPE = number;
export type NAPI_PROVIDER_LEVEL = number;
export type NLA_BLOB_DATA_TYPE = number;
export type NLA_CONNECTIVITY_TYPE = number;
export type NLA_INTERNET = number;
export type RIO_NOTIFICATION_COMPLETION_TYPE = number;
export type WSC_PROVIDER_INFO_TYPE = number;

// Constants
export const WSA_IO_PENDING = 997;
export const WSA_IO_INCOMPLETE = 996;
export const WSA_INVALID_HANDLE = 6;
export const WSA_INVALID_PARAMETER = 87;
export const WSA_NOT_ENOUGH_MEMORY = 8;
export const WSA_OPERATION_ABORTED = 995;
export const WSABASEERR = 10000;
export const WSAEINTR = 10004;
export const WSAEBADF = 10009;
export const WSAEACCES = 10013;
export const WSAEFAULT = 10014;
export const WSAEINVAL = 10022;
export const WSAEMFILE = 10024;
export const WSAEWOULDBLOCK = 10035;
export const WSAEINPROGRESS = 10036;
export const WSAEALREADY = 10037;
export const WSAENOTSOCK = 10038;
export const WSAEDESTADDRREQ = 10039;
export const WSAEMSGSIZE = 10040;
export const WSAEPROTOTYPE = 10041;
export const WSAENOPROTOOPT = 10042;
export const WSAEPROTONOSUPPORT = 10043;
export const WSAESOCKTNOSUPPORT = 10044;
export const WSAEOPNOTSUPP = 10045;
export const WSAEPFNOSUPPORT = 10046;
export const WSAEAFNOSUPPORT = 10047;
export const WSAEADDRINUSE = 10048;
export const WSAEADDRNOTAVAIL = 10049;
export const WSAENETDOWN = 10050;
export const WSAENETUNREACH = 10051;
export const WSAENETRESET = 10052;
export const WSAECONNABORTED = 10053;
export const WSAECONNRESET = 10054;
export const WSAENOBUFS = 10055;
export const WSAEISCONN = 10056;
export const WSAENOTCONN = 10057;
export const WSAESHUTDOWN = 10058;
export const WSAETOOMANYREFS = 10059;
export const WSAETIMEDOUT = 10060;
export const WSAECONNREFUSED = 10061;
export const WSAELOOP = 10062;
export const WSAENAMETOOLONG = 10063;
export const WSAEHOSTDOWN = 10064;
export const WSAEHOSTUNREACH = 10065;
export const WSAENOTEMPTY = 10066;
export const WSAEPROCLIM = 10067;
export const WSAEUSERS = 10068;
export const WSAEDQUOT = 10069;
export const WSAESTALE = 10070;
export const WSAEREMOTE = 10071;
export const WSASYSNOTREADY = 10091;
export const WSAVERNOTSUPPORTED = 10092;
export const WSANOTINITIALISED = 10093;
export const WSAEDISCON = 10101;
export const WSAENOMORE = 10102;
export const WSAECANCELLED = 10103;
export const WSAEINVALIDPROCTABLE = 10104;
export const WSAEINVALIDPROVIDER = 10105;
export const WSAEPROVIDERFAILEDINIT = 10106;
export const WSASYSCALLFAILURE = 10107;
export const WSASERVICE_NOT_FOUND = 10108;
export const WSATYPE_NOT_FOUND = 10109;
export const WSA_E_NO_MORE = 10110;
export const WSA_E_CANCELLED = 10111;
export const WSAEREFUSED = 10112;
export const WSAHOST_NOT_FOUND = 11001;
export const WSATRY_AGAIN = 11002;
export const WSANO_RECOVERY = 11003;
export const WSANO_DATA = 11004;
export const WSA_QOS_RECEIVERS = 11005;
export const WSA_QOS_SENDERS = 11006;
export const WSA_QOS_NO_SENDERS = 11007;
export const WSA_QOS_NO_RECEIVERS = 11008;
export const WSA_QOS_REQUEST_CONFIRMED = 11009;
export const WSA_QOS_ADMISSION_FAILURE = 11010;
export const WSA_QOS_POLICY_FAILURE = 11011;
export const WSA_QOS_BAD_STYLE = 11012;
export const WSA_QOS_BAD_OBJECT = 11013;
export const WSA_QOS_TRAFFIC_CTRL_ERROR = 11014;
export const WSA_QOS_GENERIC_ERROR = 11015;
export const WSA_QOS_ESERVICETYPE = 11016;
export const WSA_QOS_EFLOWSPEC = 11017;
export const WSA_QOS_EPROVSPECBUF = 11018;
export const WSA_QOS_EFILTERSTYLE = 11019;
export const WSA_QOS_EFILTERTYPE = 11020;
export const WSA_QOS_EFILTERCOUNT = 11021;
export const WSA_QOS_EOBJLENGTH = 11022;
export const WSA_QOS_EFLOWCOUNT = 11023;
export const WSA_QOS_EUNKOWNPSOBJ = 11024;
export const WSA_QOS_EPOLICYOBJ = 11025;
export const WSA_QOS_EFLOWDESC = 11026;
export const WSA_QOS_EPSFLOWSPEC = 11027;
export const WSA_QOS_EPSFILTERSPEC = 11028;
export const WSA_QOS_ESDMODEOBJ = 11029;
export const WSA_QOS_ESHAPERATEOBJ = 11030;
export const WSA_QOS_RESERVED_PETYPE = 11031;
export const WSA_SECURE_HOST_NOT_FOUND = 11032;
export const WSA_IPSEC_NAME_POLICY_ERROR = 11033;
export const SERVICE_REGISTER = 1;
export const SERVICE_DEREGISTER = 2;
export const SERVICE_FLUSH = 3;
export const SERVICE_ADD_TYPE = 4;
export const SERVICE_DELETE_TYPE = 5;
export const MSG_DONTROUTE = 4;
export const MSG_OOB = 1;
export const RESOURCEDISPLAYTYPE_DOMAIN = 1;
export const RESOURCEDISPLAYTYPE_FILE = 4;
export const RESOURCEDISPLAYTYPE_GENERIC = 0;
export const RESOURCEDISPLAYTYPE_GROUP = 5;
export const RESOURCEDISPLAYTYPE_SERVER = 2;
export const RESOURCEDISPLAYTYPE_SHARE = 3;
export const RESOURCEDISPLAYTYPE_TREE = 10;
export const TIMESTAMPING_FLAG_RX = 1;
export const TIMESTAMPING_FLAG_TX = 2;
export const SO_TIMESTAMP = 12298;
export const SO_TIMESTAMP_ID = 12299;
export const TCP_INITIAL_RTO_DEFAULT_RTT = 0;
export const TCP_INITIAL_RTO_DEFAULT_MAX_SYN_RETRANSMISSIONS = 0;
export const SOCKET_SETTINGS_GUARANTEE_ENCRYPTION = 1;
export const SOCKET_SETTINGS_ALLOW_INSECURE = 2;
export const SOCKET_SETTINGS_IPSEC_SKIP_FILTER_INSTANTIATION = 1;
export const SOCKET_SETTINGS_IPSEC_OPTIONAL_PEER_NAME_VERIFICATION = 2;
export const SOCKET_SETTINGS_IPSEC_ALLOW_FIRST_INBOUND_PKT_UNENCRYPTED = 4;
export const SOCKET_SETTINGS_IPSEC_PEER_NAME_IS_RAW_FORMAT = 8;
export const SOCKET_QUERY_IPSEC2_ABORT_CONNECTION_ON_FIELD_CHANGE = 1;
export const SOCKET_QUERY_IPSEC2_FIELD_MASK_MM_SA_ID = 1;
export const SOCKET_QUERY_IPSEC2_FIELD_MASK_QM_SA_ID = 2;
export const SOCKET_INFO_CONNECTION_SECURED = 1;
export const SOCKET_INFO_CONNECTION_ENCRYPTED = 2;
export const SOCKET_INFO_CONNECTION_IMPERSONATED = 4;
export const IN4ADDR_LOOPBACK = 16777343;
export const IN4ADDR_LOOPBACKPREFIX_LENGTH = 8;
export const IN4ADDR_LINKLOCALPREFIX_LENGTH = 16;
export const IN4ADDR_MULTICASTPREFIX_LENGTH = 4;
export const RIO_MSG_DONT_NOTIFY = 1;
export const RIO_MSG_DEFER = 2;
export const RIO_MSG_WAITALL = 4;
export const RIO_MSG_COMMIT_ONLY = 8;
export const RIO_MAX_CQ_SIZE = 134217728;
export const RIO_CORRUPT_CQ = 4294967295;
export const AF_UNIX = 1;
export const AF_IMPLINK = 3;
export const AF_PUP = 4;
export const AF_CHAOS = 5;
export const AF_NS = 6;
export const AF_IPX = 6;
export const AF_ISO = 7;
export const AF_OSI = 7;
export const AF_ECMA = 8;
export const AF_DATAKIT = 9;
export const AF_CCITT = 10;
export const AF_SNA = 11;
export const AF_DECnet = 12;
export const AF_DLI = 13;
export const AF_LAT = 14;
export const AF_HYLINK = 15;
export const AF_APPLETALK = 16;
export const AF_NETBIOS = 17;
export const AF_VOICEVIEW = 18;
export const AF_FIREFOX = 19;
export const AF_UNKNOWN1 = 20;
export const AF_BAN = 21;
export const AF_ATM = 22;
export const AF_CLUSTER = 24;
export const AF_12844 = 25;
export const AF_IRDA = 26;
export const AF_NETDES = 28;
export const AF_MAX = 29;
export const AF_TCNPROCESS = 29;
export const AF_TCNMESSAGE = 30;
export const AF_ICLFXBM = 31;
export const AF_LINK = 33;
export const AF_HYPERV = 34;
export const SOCK_STREAM = 1;
export const SOCK_DGRAM = 2;
export const SOCK_RAW = 3;
export const SOCK_RDM = 4;
export const SOCK_SEQPACKET = 5;
export const SOL_SOCKET = 65535;
export const SO_DEBUG = 1;
export const SO_ACCEPTCONN = 2;
export const SO_REUSEADDR = 4;
export const SO_KEEPALIVE = 8;
export const SO_DONTROUTE = 16;
export const SO_BROADCAST = 32;
export const SO_USELOOPBACK = 64;
export const SO_LINGER = 128;
export const SO_OOBINLINE = 256;
export const SO_SNDBUF = 4097;
export const SO_RCVBUF = 4098;
export const SO_SNDLOWAT = 4099;
export const SO_RCVLOWAT = 4100;
export const SO_SNDTIMEO = 4101;
export const SO_RCVTIMEO = 4102;
export const SO_ERROR = 4103;
export const SO_TYPE = 4104;
export const SO_BSP_STATE = 4105;
export const SO_GROUP_ID = 8193;
export const SO_GROUP_PRIORITY = 8194;
export const SO_MAX_MSG_SIZE = 8195;
export const SO_CONDITIONAL_ACCEPT = 12290;
export const SO_PAUSE_ACCEPT = 12291;
export const SO_COMPARTMENT_ID = 12292;
export const SO_RANDOMIZE_PORT = 12293;
export const SO_PORT_SCALABILITY = 12294;
export const SO_REUSE_UNICASTPORT = 12295;
export const SO_REUSE_MULTICASTPORT = 12296;
export const SO_ORIGINAL_DST = 12303;
export const IP6T_SO_ORIGINAL_DST = 12303;
export const WSK_SO_BASE = 16384;
export const TCP_NODELAY = 1;
export const _SS_MAXSIZE = 128;
export const IOC_UNIX = 0;
export const IOC_WS2 = 134217728;
export const IOC_PROTOCOL = 268435456;
export const IOC_VENDOR = 402653184;
export const IPPROTO_IP = 0;
export const IPPORT_TCPMUX = 1;
export const IPPORT_ECHO = 7;
export const IPPORT_DISCARD = 9;
export const IPPORT_SYSTAT = 11;
export const IPPORT_DAYTIME = 13;
export const IPPORT_NETSTAT = 15;
export const IPPORT_QOTD = 17;
export const IPPORT_MSP = 18;
export const IPPORT_CHARGEN = 19;
export const IPPORT_FTP_DATA = 20;
export const IPPORT_FTP = 21;
export const IPPORT_TELNET = 23;
export const IPPORT_SMTP = 25;
export const IPPORT_TIMESERVER = 37;
export const IPPORT_NAMESERVER = 42;
export const IPPORT_WHOIS = 43;
export const IPPORT_MTP = 57;
export const IPPORT_TFTP = 69;
export const IPPORT_RJE = 77;
export const IPPORT_FINGER = 79;
export const IPPORT_TTYLINK = 87;
export const IPPORT_SUPDUP = 95;
export const IPPORT_POP3 = 110;
export const IPPORT_NTP = 123;
export const IPPORT_EPMAP = 135;
export const IPPORT_NETBIOS_NS = 137;
export const IPPORT_NETBIOS_DGM = 138;
export const IPPORT_NETBIOS_SSN = 139;
export const IPPORT_IMAP = 143;
export const IPPORT_SNMP = 161;
export const IPPORT_SNMP_TRAP = 162;
export const IPPORT_IMAP3 = 220;
export const IPPORT_LDAP = 389;
export const IPPORT_HTTPS = 443;
export const IPPORT_MICROSOFT_DS = 445;
export const IPPORT_EXECSERVER = 512;
export const IPPORT_LOGINSERVER = 513;
export const IPPORT_CMDSERVER = 514;
export const IPPORT_EFSSERVER = 520;
export const IPPORT_BIFFUDP = 512;
export const IPPORT_WHOSERVER = 513;
export const IPPORT_ROUTESERVER = 520;
export const IPPORT_RESERVED = 1024;
export const IPPORT_REGISTERED_MIN = 1024;
export const IPPORT_REGISTERED_MAX = 49151;
export const IPPORT_DYNAMIC_MIN = 49152;
export const IPPORT_DYNAMIC_MAX = 65535;
export const IN_CLASSA_NET = 4278190080;
export const IN_CLASSA_NSHIFT = 24;
export const IN_CLASSA_HOST = 16777215;
export const IN_CLASSA_MAX = 128;
export const IN_CLASSB_NET = 4294901760;
export const IN_CLASSB_NSHIFT = 16;
export const IN_CLASSB_HOST = 65535;
export const IN_CLASSB_MAX = 65536;
export const IN_CLASSC_NET = 4294967040;
export const IN_CLASSC_NSHIFT = 8;
export const IN_CLASSC_HOST = 255;
export const IN_CLASSD_NET = 4026531840;
export const IN_CLASSD_NSHIFT = 28;
export const IN_CLASSD_HOST = 268435455;
export const INADDR_LOOPBACK = 2130706433;
export const INADDR_NONE = 4294967295;
export const IOCPARM_MASK = 127;
export const IOC_VOID = 536870912;
export const IOC_OUT = 1073741824;
export const IOC_IN = 2147483648;
export const MSG_TRUNC = 256;
export const MSG_CTRUNC = 512;
export const MSG_BCAST = 1024;
export const MSG_MCAST = 2048;
export const MSG_ERRQUEUE = 4096;
export const AI_PASSIVE = 1;
export const AI_CANONNAME = 2;
export const AI_NUMERICHOST = 4;
export const AI_NUMERICSERV = 8;
export const AI_DNS_ONLY = 16;
export const AI_FORCE_CLEAR_TEXT = 32;
export const AI_BYPASS_DNS_CACHE = 64;
export const AI_RETURN_TTL = 128;
export const AI_ALL = 256;
export const AI_ADDRCONFIG = 1024;
export const AI_V4MAPPED = 2048;
export const AI_NON_AUTHORITATIVE = 16384;
export const AI_SECURE = 32768;
export const AI_RETURN_PREFERRED_NAMES = 65536;
export const AI_FQDN = 131072;
export const AI_FILESERVER = 262144;
export const AI_DISABLE_IDN_ENCODING = 524288;
export const AI_SECURE_WITH_FALLBACK = 1048576;
export const AI_EXCLUSIVE_CUSTOM_SERVERS = 2097152;
export const AI_RETURN_RESPONSE_FLAGS = 268435456;
export const AI_REQUIRE_SECURE = 536870912;
export const AI_RESOLUTION_HANDLE = 1073741824;
export const AI_EXTENDED = 2147483648;
export const ADDRINFOEX_VERSION_2 = 2;
export const ADDRINFOEX_VERSION_3 = 3;
export const ADDRINFOEX_VERSION_4 = 4;
export const ADDRINFOEX_VERSION_5 = 5;
export const ADDRINFOEX_VERSION_6 = 6;
export const AI_DNS_SERVER_TYPE_UDP = 1;
export const AI_DNS_SERVER_TYPE_DOH = 2;
export const AI_DNS_SERVER_UDP_FALLBACK = 1;
export const AI_DNS_RESPONSE_SECURE = 1;
export const AI_DNS_RESPONSE_HOSTFILE = 2;
export const NS_ALL = 0;
export const NS_SAP = 1;
export const NS_NDS = 2;
export const NS_PEER_BROWSE = 3;
export const NS_SLP = 5;
export const NS_DHCP = 6;
export const NS_TCPIP_LOCAL = 10;
export const NS_TCPIP_HOSTS = 11;
export const NS_DNS = 12;
export const NS_NETBT = 13;
export const NS_WINS = 14;
export const NS_NLA = 15;
export const NS_NBP = 20;
export const NS_MS = 30;
export const NS_STDA = 31;
export const NS_NTDS = 32;
export const NS_EMAIL = 37;
export const NS_X500 = 40;
export const NS_NIS = 41;
export const NS_NISPLUS = 42;
export const NS_WRQ = 50;
export const NS_NETDES = 60;
export const NI_NOFQDN = 1;
export const NI_NUMERICHOST = 2;
export const NI_NAMEREQD = 4;
export const NI_NUMERICSERV = 8;
export const NI_DGRAM = 16;
export const NI_MAXHOST = 1025;
export const NI_MAXSERV = 32;
export const IFF_UP = 1;
export const IFF_BROADCAST = 2;
export const IFF_LOOPBACK = 4;
export const IFF_POINTTOPOINT = 8;
export const IFF_MULTICAST = 16;
export const IP_OPTIONS = 1;
export const IP_HDRINCL = 2;
export const IP_TOS = 3;
export const IP_TTL = 4;
export const IP_MULTICAST_IF = 9;
export const IP_MULTICAST_TTL = 10;
export const IP_MULTICAST_LOOP = 11;
export const IP_ADD_MEMBERSHIP = 12;
export const IP_DROP_MEMBERSHIP = 13;
export const IP_DONTFRAGMENT = 14;
export const IP_ADD_SOURCE_MEMBERSHIP = 15;
export const IP_DROP_SOURCE_MEMBERSHIP = 16;
export const IP_BLOCK_SOURCE = 17;
export const IP_UNBLOCK_SOURCE = 18;
export const IP_PKTINFO = 19;
export const IP_HOPLIMIT = 21;
export const IP_RECVTTL = 21;
export const IP_RECEIVE_BROADCAST = 22;
export const IP_RECVIF = 24;
export const IP_RECVDSTADDR = 25;
export const IP_IFLIST = 28;
export const IP_ADD_IFLIST = 29;
export const IP_DEL_IFLIST = 30;
export const IP_UNICAST_IF = 31;
export const IP_RTHDR = 32;
export const IP_GET_IFLIST = 33;
export const IP_RECVRTHDR = 38;
export const IP_TCLASS = 39;
export const IP_RECVTCLASS = 40;
export const IP_RECVTOS = 40;
export const IP_ORIGINAL_ARRIVAL_IF = 47;
export const IP_ECN = 50;
export const IP_RECVECN = 50;
export const IP_PKTINFO_EX = 51;
export const IP_WFP_REDIRECT_RECORDS = 60;
export const IP_WFP_REDIRECT_CONTEXT = 70;
export const IP_MTU_DISCOVER = 71;
export const IP_MTU = 73;
export const IP_NRT_INTERFACE = 74;
export const IP_RECVERR = 75;
export const IP_USER_MTU = 76;
export const IP_UNSPECIFIED_TYPE_OF_SERVICE = "-1";
export const IP_UNSPECIFIED_USER_MTU = 4294967295;
export const IN6ADDR_LINKLOCALPREFIX_LENGTH = 64;
export const IN6ADDR_MULTICASTPREFIX_LENGTH = 8;
export const IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_LENGTH = 104;
export const IN6ADDR_V4MAPPEDPREFIX_LENGTH = 96;
export const IN6ADDR_6TO4PREFIX_LENGTH = 16;
export const IN6ADDR_TEREDOPREFIX_LENGTH = 32;
export const MCAST_JOIN_GROUP = 41;
export const MCAST_LEAVE_GROUP = 42;
export const MCAST_BLOCK_SOURCE = 43;
export const MCAST_UNBLOCK_SOURCE = 44;
export const MCAST_JOIN_SOURCE_GROUP = 45;
export const MCAST_LEAVE_SOURCE_GROUP = 46;
export const IPV6_HOPOPTS = 1;
export const IPV6_HDRINCL = 2;
export const IPV6_UNICAST_HOPS = 4;
export const IPV6_MULTICAST_IF = 9;
export const IPV6_MULTICAST_HOPS = 10;
export const IPV6_MULTICAST_LOOP = 11;
export const IPV6_ADD_MEMBERSHIP = 12;
export const IPV6_JOIN_GROUP = 12;
export const IPV6_DROP_MEMBERSHIP = 13;
export const IPV6_LEAVE_GROUP = 13;
export const IPV6_DONTFRAG = 14;
export const IPV6_PKTINFO = 19;
export const IPV6_HOPLIMIT = 21;
export const IPV6_PROTECTION_LEVEL = 23;
export const IPV6_RECVIF = 24;
export const IPV6_RECVDSTADDR = 25;
export const IPV6_CHECKSUM = 26;
export const IPV6_V6ONLY = 27;
export const IPV6_IFLIST = 28;
export const IPV6_ADD_IFLIST = 29;
export const IPV6_DEL_IFLIST = 30;
export const IPV6_UNICAST_IF = 31;
export const IPV6_RTHDR = 32;
export const IPV6_GET_IFLIST = 33;
export const IPV6_RECVRTHDR = 38;
export const IPV6_TCLASS = 39;
export const IPV6_RECVTCLASS = 40;
export const IPV6_ECN = 50;
export const IPV6_RECVECN = 50;
export const IPV6_PKTINFO_EX = 51;
export const IPV6_WFP_REDIRECT_RECORDS = 60;
export const IPV6_WFP_REDIRECT_CONTEXT = 70;
export const IPV6_MTU_DISCOVER = 71;
export const IPV6_MTU = 72;
export const IPV6_NRT_INTERFACE = 74;
export const IPV6_RECVERR = 75;
export const IPV6_USER_MTU = 76;
export const IP_UNSPECIFIED_HOP_LIMIT = "-1";
export const IP_PROTECTION_LEVEL = 23;
export const PROTECTION_LEVEL_UNRESTRICTED = 10;
export const PROTECTION_LEVEL_EDGERESTRICTED = 20;
export const PROTECTION_LEVEL_RESTRICTED = 30;
export const PROTECTION_LEVEL_DEFAULT = 20;
export const INET_ADDRSTRLEN = 22;
export const INET6_ADDRSTRLEN = 65;
export const TCP_OFFLOAD_NO_PREFERENCE = 0;
export const TCP_OFFLOAD_NOT_PREFERRED = 1;
export const TCP_OFFLOAD_PREFERRED = 2;
export const TCP_EXPEDITED_1122 = 2;
export const TCP_KEEPALIVE = 3;
export const TCP_MAXSEG = 4;
export const TCP_MAXRT = 5;
export const TCP_STDURG = 6;
export const TCP_NOURG = 7;
export const TCP_ATMARK = 8;
export const TCP_NOSYNRETRIES = 9;
export const TCP_TIMESTAMPS = 10;
export const TCP_OFFLOAD_PREFERENCE = 11;
export const TCP_CONGESTION_ALGORITHM = 12;
export const TCP_DELAY_FIN_ACK = 13;
export const TCP_MAXRTMS = 14;
export const TCP_FASTOPEN = 15;
export const TCP_KEEPCNT = 16;
export const TCP_KEEPIDLE = 3;
export const TCP_KEEPINTVL = 17;
export const TCP_FAIL_CONNECT_ON_ICMP_ERROR = 18;
export const TCP_ICMP_ERROR_INFO = 19;
export const UDP_SEND_MSG_SIZE = 2;
export const UDP_RECV_MAX_COALESCED_SIZE = 3;
export const UDP_COALESCED_INFO = 3;
export const WINDOWS_AF_IRDA = 26;
export const WINDOWS_PF_IRDA = 26;
export const WCE_AF_IRDA = 22;
export const WCE_PF_IRDA = 22;
export const IRDA_PROTO_SOCK_STREAM = 1;
export const PF_IRDA = 26;
export const SOL_IRLMP = 255;
export const IRLMP_ENUMDEVICES = 16;
export const IRLMP_IAS_SET = 17;
export const IRLMP_IAS_QUERY = 18;
export const IRLMP_SEND_PDU_LEN = 19;
export const IRLMP_EXCLUSIVE_MODE = 20;
export const IRLMP_IRLPT_MODE = 21;
export const IRLMP_9WIRE_MODE = 22;
export const IRLMP_TINYTP_MODE = 23;
export const IRLMP_PARAMETERS = 24;
export const IRLMP_DISCOVERY_MODE = 25;
export const IRLMP_SHARP_MODE = 32;
export const IAS_ATTRIB_NO_CLASS = 16;
export const IAS_ATTRIB_NO_ATTRIB = 0;
export const IAS_ATTRIB_INT = 1;
export const IAS_ATTRIB_OCTETSEQ = 2;
export const IAS_ATTRIB_STR = 3;
export const IAS_MAX_USER_STRING = 256;
export const IAS_MAX_OCTET_STRING = 1024;
export const IAS_MAX_CLASSNAME = 64;
export const IAS_MAX_ATTRIBNAME = 256;
export const LmCharSetASCII = 0;
export const LmCharSetISO_8859_1 = 1;
export const LmCharSetISO_8859_2 = 2;
export const LmCharSetISO_8859_3 = 3;
export const LmCharSetISO_8859_4 = 4;
export const LmCharSetISO_8859_5 = 5;
export const LmCharSetISO_8859_6 = 6;
export const LmCharSetISO_8859_7 = 7;
export const LmCharSetISO_8859_8 = 8;
export const LmCharSetISO_8859_9 = 9;
export const LmCharSetUNICODE = 255;
export const LM_BAUD_1200 = 1200;
export const LM_BAUD_2400 = 2400;
export const LM_BAUD_9600 = 9600;
export const LM_BAUD_19200 = 19200;
export const LM_BAUD_38400 = 38400;
export const LM_BAUD_57600 = 57600;
export const LM_BAUD_115200 = 115200;
export const LM_BAUD_576K = 576000;
export const LM_BAUD_1152K = 1152000;
export const LM_BAUD_4M = 4000000;
export const LM_BAUD_16M = 16000000;
export const SO_CONNDATA = 28672;
export const SO_CONNOPT = 28673;
export const SO_DISCDATA = 28674;
export const SO_DISCOPT = 28675;
export const SO_CONNDATALEN = 28676;
export const SO_CONNOPTLEN = 28677;
export const SO_DISCDATALEN = 28678;
export const SO_DISCOPTLEN = 28679;
export const SO_OPENTYPE = 28680;
export const SO_SYNCHRONOUS_ALERT = 16;
export const SO_SYNCHRONOUS_NONALERT = 32;
export const SO_MAXDG = 28681;
export const SO_MAXPATHDG = 28682;
export const SO_UPDATE_ACCEPT_CONTEXT = 28683;
export const SO_CONNECT_TIME = 28684;
export const SO_UPDATE_CONNECT_CONTEXT = 28688;
export const TCP_BSDURGENT = 28672;
export const TF_DISCONNECT = 1;
export const TF_REUSE_SOCKET = 2;
export const TF_WRITE_BEHIND = 4;
export const TF_USE_DEFAULT_WORKER = 0;
export const TF_USE_SYSTEM_THREAD = 16;
export const TF_USE_KERNEL_APC = 32;
export const TP_ELEMENT_MEMORY = 1;
export const TP_ELEMENT_FILE = 2;
export const TP_ELEMENT_EOP = 4;
export const TP_DISCONNECT = 1;
export const TP_REUSE_SOCKET = 2;
export const TP_USE_DEFAULT_WORKER = 0;
export const TP_USE_SYSTEM_THREAD = 16;
export const TP_USE_KERNEL_APC = 32;
export const DE_REUSE_SOCKET = 2;
export const NLA_ALLUSERS_NETWORK = 1;
export const NLA_FRIENDLY_NAME = 2;
export const SERVICE_RESOURCE = 1;
export const SERVICE_SERVICE = 2;
export const SERVICE_LOCAL = 4;
export const SERVICE_FLAG_DEFER = 1;
export const SERVICE_FLAG_HARD = 2;
export const PROP_COMMENT = 1;
export const PROP_LOCALE = 2;
export const PROP_DISPLAY_HINT = 4;
export const PROP_VERSION = 8;
export const PROP_START_TIME = 16;
export const PROP_MACHINE = 32;
export const PROP_ADDRESSES = 256;
export const PROP_SD = 512;
export const PROP_ALL = 2147483648;
export const SERVICE_ADDRESS_FLAG_RPC_CN = 1;
export const SERVICE_ADDRESS_FLAG_RPC_DG = 2;
export const SERVICE_ADDRESS_FLAG_RPC_NB = 4;
export const NS_DEFAULT = 0;
export const NS_VNS = 50;
export const NSTYPE_HIERARCHICAL = 1;
export const NSTYPE_DYNAMIC = 2;
export const NSTYPE_ENUMERABLE = 4;
export const NSTYPE_WORKGROUP = 8;
export const XP_CONNECTIONLESS = 1;
export const XP_GUARANTEED_DELIVERY = 2;
export const XP_GUARANTEED_ORDER = 4;
export const XP_MESSAGE_ORIENTED = 8;
export const XP_PSEUDO_STREAM = 16;
export const XP_GRACEFUL_CLOSE = 32;
export const XP_EXPEDITED_DATA = 64;
export const XP_CONNECT_DATA = 128;
export const XP_DISCONNECT_DATA = 256;
export const XP_SUPPORTS_BROADCAST = 512;
export const XP_SUPPORTS_MULTICAST = 1024;
export const XP_BANDWIDTH_ALLOCATION = 2048;
export const XP_FRAGMENTATION = 4096;
export const XP_ENCRYPTS = 8192;
export const RES_SOFT_SEARCH = 1;
export const RES_FIND_MULTIPLE = 2;
export const RES_SERVICE = 4;
export const SET_SERVICE_PARTIAL_SUCCESS = 1;
export const FD_SETSIZE = 64;
export const IMPLINK_IP = 155;
export const IMPLINK_LOWEXPER = 156;
export const IMPLINK_HIGHEXPER = 158;
export const WSADESCRIPTION_LEN = 256;
export const WSASYS_STATUS_LEN = 128;
export const IP_DEFAULT_MULTICAST_TTL = 1;
export const IP_DEFAULT_MULTICAST_LOOP = 1;
export const IP_MAX_MEMBERSHIPS = 20;
export const SOCKET_ERROR = "-1";
export const PF_UNIX = 1;
export const PF_IMPLINK = 3;
export const PF_PUP = 4;
export const PF_CHAOS = 5;
export const PF_NS = 6;
export const PF_IPX = 6;
export const PF_ISO = 7;
export const PF_OSI = 7;
export const PF_ECMA = 8;
export const PF_DATAKIT = 9;
export const PF_CCITT = 10;
export const PF_SNA = 11;
export const PF_DECnet = 12;
export const PF_DLI = 13;
export const PF_LAT = 14;
export const PF_HYLINK = 15;
export const PF_APPLETALK = 16;
export const PF_VOICEVIEW = 18;
export const PF_FIREFOX = 19;
export const PF_UNKNOWN1 = 20;
export const PF_BAN = 21;
export const PF_MAX = 29;
export const SOMAXCONN = 5;
export const MSG_PEEK = 2;
export const MSG_MAXIOVLEN = 16;
export const MSG_PARTIAL = 32768;
export const MAXGETHOSTSTRUCT = 1024;
export const FD_READ = 1;
export const FD_WRITE = 2;
export const FD_OOB = 4;
export const FD_ACCEPT = 8;
export const FD_CONNECT = 16;
export const FD_CLOSE = 32;
export const INCL_WINSOCK_API_PROTOTYPES = 1;
export const INCL_WINSOCK_API_TYPEDEFS = 0;
export const FROM_PROTOCOL_INFO = "-1";
export const SO_PROTOCOL_INFOA = 8196;
export const SO_PROTOCOL_INFOW = 8197;
export const SO_PROTOCOL_INFO = 8197;
export const PVD_CONFIG = 12289;
export const PF_ATM = 22;
export const MSG_WAITALL = 8;
export const MSG_PUSH_IMMEDIATE = 32;
export const MSG_INTERRUPT = 16;
export const FD_READ_BIT = 0;
export const FD_WRITE_BIT = 1;
export const FD_OOB_BIT = 2;
export const FD_ACCEPT_BIT = 3;
export const FD_CONNECT_BIT = 4;
export const FD_CLOSE_BIT = 5;
export const FD_QOS_BIT = 6;
export const FD_GROUP_QOS_BIT = 7;
export const FD_ROUTING_INTERFACE_CHANGE_BIT = 8;
export const FD_ADDRESS_LIST_CHANGE_BIT = 9;
export const FD_MAX_EVENTS = 10;
export const WSA_MAXIMUM_WAIT_EVENTS = 64;
export const WSA_WAIT_EVENT_0 = 0;
export const WSA_WAIT_IO_COMPLETION = 192;
export const WSA_WAIT_FAILED = 4294967295;
export const CF_ACCEPT = 0;
export const CF_REJECT = 1;
export const CF_DEFER = 2;
export const SD_RECEIVE = 0;
export const SD_SEND = 1;
export const SD_BOTH = 2;
export const SG_UNCONSTRAINED_GROUP = 1;
export const SG_CONSTRAINED_GROUP = 2;
export const MAX_PROTOCOL_CHAIN = 7;
export const BASE_PROTOCOL = 1;
export const LAYERED_PROTOCOL = 0;
export const WSAPROTOCOL_LEN = 255;
export const PFL_MULTIPLE_PROTO_ENTRIES = 1;
export const PFL_RECOMMENDED_PROTO_ENTRY = 2;
export const PFL_HIDDEN = 4;
export const PFL_MATCHES_PROTOCOL_ZERO = 8;
export const PFL_NETWORKDIRECT_PROVIDER = 16;
export const XP1_CONNECTIONLESS = 1;
export const XP1_GUARANTEED_DELIVERY = 2;
export const XP1_GUARANTEED_ORDER = 4;
export const XP1_MESSAGE_ORIENTED = 8;
export const XP1_PSEUDO_STREAM = 16;
export const XP1_GRACEFUL_CLOSE = 32;
export const XP1_EXPEDITED_DATA = 64;
export const XP1_CONNECT_DATA = 128;
export const XP1_DISCONNECT_DATA = 256;
export const XP1_SUPPORT_BROADCAST = 512;
export const XP1_SUPPORT_MULTIPOINT = 1024;
export const XP1_MULTIPOINT_CONTROL_PLANE = 2048;
export const XP1_MULTIPOINT_DATA_PLANE = 4096;
export const XP1_QOS_SUPPORTED = 8192;
export const XP1_INTERRUPT = 16384;
export const XP1_UNI_SEND = 32768;
export const XP1_UNI_RECV = 65536;
export const XP1_IFS_HANDLES = 131072;
export const XP1_PARTIAL_MESSAGE = 262144;
export const XP1_SAN_SUPPORT_SDP = 524288;
export const BIGENDIAN = 0;
export const LITTLEENDIAN = 1;
export const SECURITY_PROTOCOL_NONE = 0;
export const JL_SENDER_ONLY = 1;
export const JL_RECEIVER_ONLY = 2;
export const JL_BOTH = 4;
export const WSA_FLAG_OVERLAPPED = 1;
export const WSA_FLAG_MULTIPOINT_C_ROOT = 2;
export const WSA_FLAG_MULTIPOINT_C_LEAF = 4;
export const WSA_FLAG_MULTIPOINT_D_ROOT = 8;
export const WSA_FLAG_MULTIPOINT_D_LEAF = 16;
export const WSA_FLAG_ACCESS_SYSTEM_SECURITY = 64;
export const WSA_FLAG_NO_HANDLE_INHERIT = 128;
export const WSA_FLAG_REGISTERED_IO = 256;
export const TH_NETDEV = 1;
export const TH_TAPI = 2;
export const SERVICE_MULTIPLE = 1;
export const NS_LOCALNAME = 19;
export const RES_UNUSED_1 = 1;
export const RES_FLUSH_CACHE = 2;
export const LUP_DEEP = 1;
export const LUP_CONTAINERS = 2;
export const LUP_NOCONTAINERS = 4;
export const LUP_NEAREST = 8;
export const LUP_RETURN_NAME = 16;
export const LUP_RETURN_TYPE = 32;
export const LUP_RETURN_VERSION = 64;
export const LUP_RETURN_COMMENT = 128;
export const LUP_RETURN_ADDR = 256;
export const LUP_RETURN_BLOB = 512;
export const LUP_RETURN_ALIASES = 1024;
export const LUP_RETURN_QUERY_STRING = 2048;
export const LUP_RETURN_ALL = 4080;
export const LUP_RES_SERVICE = 32768;
export const LUP_FLUSHCACHE = 4096;
export const LUP_FLUSHPREVIOUS = 8192;
export const LUP_NON_AUTHORITATIVE = 16384;
export const LUP_SECURE = 32768;
export const LUP_RETURN_PREFERRED_NAMES = 65536;
export const LUP_DNS_ONLY = 131072;
export const LUP_RETURN_RESPONSE_FLAGS = 262144;
export const LUP_ADDRCONFIG = 1048576;
export const LUP_DUAL_ADDR = 2097152;
export const LUP_FILESERVER = 4194304;
export const LUP_DISABLE_IDN_ENCODING = 8388608;
export const LUP_API_ANSI = 16777216;
export const LUP_EXTENDED_QUERYSET = 33554432;
export const LUP_SECURE_WITH_FALLBACK = 67108864;
export const LUP_EXCLUSIVE_CUSTOM_SERVERS = 134217728;
export const LUP_REQUIRE_SECURE = 268435456;
export const LUP_RETURN_TTL = 536870912;
export const LUP_FORCE_CLEAR_TEXT = 1073741824;
export const LUP_RESOLUTION_HANDLE = 2147483648;
export const RESULT_IS_ALIAS = 1;
export const RESULT_IS_ADDED = 16;
export const RESULT_IS_CHANGED = 32;
export const RESULT_IS_DELETED = 64;
export const POLLRDNORM = 256;
export const POLLRDBAND = 512;
export const POLLPRI = 1024;
export const POLLWRNORM = 16;
export const POLLOUT = 16;
export const POLLWRBAND = 32;
export const POLLERR = 1;
export const POLLHUP = 2;
export const POLLNVAL = 4;
export const SOCK_NOTIFY_REGISTER_EVENT_NONE = 0;
export const SOCK_NOTIFY_REGISTER_EVENT_IN = 1;
export const SOCK_NOTIFY_REGISTER_EVENT_OUT = 2;
export const SOCK_NOTIFY_REGISTER_EVENT_HANGUP = 4;
export const SOCK_NOTIFY_EVENT_IN = 1;
export const SOCK_NOTIFY_EVENT_OUT = 2;
export const SOCK_NOTIFY_EVENT_HANGUP = 4;
export const SOCK_NOTIFY_EVENT_ERR = 64;
export const SOCK_NOTIFY_EVENT_REMOVE = 128;
export const SOCK_NOTIFY_OP_NONE = 0;
export const SOCK_NOTIFY_OP_ENABLE = 1;
export const SOCK_NOTIFY_OP_DISABLE = 2;
export const SOCK_NOTIFY_OP_REMOVE = 4;
export const SOCK_NOTIFY_TRIGGER_ONESHOT = 1;
export const SOCK_NOTIFY_TRIGGER_PERSISTENT = 2;
export const SOCK_NOTIFY_TRIGGER_LEVEL = 4;
export const SOCK_NOTIFY_TRIGGER_EDGE = 8;
export const ATMPROTO_AALUSER = 0;
export const ATMPROTO_AAL1 = 1;
export const ATMPROTO_AAL2 = 2;
export const ATMPROTO_AAL34 = 3;
export const ATMPROTO_AAL5 = 5;
export const SAP_FIELD_ABSENT = 4294967294;
export const SAP_FIELD_ANY = 4294967295;
export const SAP_FIELD_ANY_AESA_SEL = 4294967290;
export const SAP_FIELD_ANY_AESA_REST = 4294967291;
export const ATM_E164 = 1;
export const ATM_NSAP = 2;
export const ATM_AESA = 2;
export const ATM_ADDR_SIZE = 20;
export const BLLI_L2_ISO_1745 = 1;
export const BLLI_L2_Q921 = 2;
export const BLLI_L2_X25L = 6;
export const BLLI_L2_X25M = 7;
export const BLLI_L2_ELAPB = 8;
export const BLLI_L2_HDLC_ARM = 9;
export const BLLI_L2_HDLC_NRM = 10;
export const BLLI_L2_HDLC_ABM = 11;
export const BLLI_L2_LLC = 12;
export const BLLI_L2_X75 = 13;
export const BLLI_L2_Q922 = 14;
export const BLLI_L2_USER_SPECIFIED = 16;
export const BLLI_L2_ISO_7776 = 17;
export const BLLI_L3_X25 = 6;
export const BLLI_L3_ISO_8208 = 7;
export const BLLI_L3_X223 = 8;
export const BLLI_L3_SIO_8473 = 9;
export const BLLI_L3_T70 = 10;
export const BLLI_L3_ISO_TR9577 = 11;
export const BLLI_L3_USER_SPECIFIED = 16;
export const BLLI_L3_IPI_SNAP = 128;
export const BLLI_L3_IPI_IP = 204;
export const BHLI_ISO = 0;
export const BHLI_UserSpecific = 1;
export const BHLI_HighLayerProfile = 2;
export const BHLI_VendorSpecificAppId = 3;
export const AAL5_MODE_MESSAGE = 1;
export const AAL5_MODE_STREAMING = 2;
export const AAL5_SSCS_NULL = 0;
export const AAL5_SSCS_SSCOP_ASSURED = 1;
export const AAL5_SSCS_SSCOP_NON_ASSURED = 2;
export const AAL5_SSCS_FRAME_RELAY = 4;
export const BCOB_A = 1;
export const BCOB_C = 3;
export const BCOB_X = 16;
export const TT_NOIND = 0;
export const TT_CBR = 4;
export const TT_VBR = 8;
export const TR_NOIND = 0;
export const TR_END_TO_END = 1;
export const TR_NO_END_TO_END = 2;
export const CLIP_NOT = 0;
export const CLIP_SUS = 32;
export const UP_P2P = 0;
export const UP_P2MP = 1;
export const BLLI_L2_MODE_NORMAL = 64;
export const BLLI_L2_MODE_EXT = 128;
export const BLLI_L3_MODE_NORMAL = 64;
export const BLLI_L3_MODE_EXT = 128;
export const BLLI_L3_PACKET_16 = 4;
export const BLLI_L3_PACKET_32 = 5;
export const BLLI_L3_PACKET_64 = 6;
export const BLLI_L3_PACKET_128 = 7;
export const BLLI_L3_PACKET_256 = 8;
export const BLLI_L3_PACKET_512 = 9;
export const BLLI_L3_PACKET_1024 = 10;
export const BLLI_L3_PACKET_2048 = 11;
export const BLLI_L3_PACKET_4096 = 12;
export const PI_ALLOWED = 0;
export const PI_RESTRICTED = 64;
export const PI_NUMBER_NOT_AVAILABLE = 128;
export const SI_USER_NOT_SCREENED = 0;
export const SI_USER_PASSED = 1;
export const SI_USER_FAILED = 2;
export const SI_NETWORK = 3;
export const CAUSE_LOC_USER = 0;
export const CAUSE_LOC_PRIVATE_LOCAL = 1;
export const CAUSE_LOC_PUBLIC_LOCAL = 2;
export const CAUSE_LOC_TRANSIT_NETWORK = 3;
export const CAUSE_LOC_PUBLIC_REMOTE = 4;
export const CAUSE_LOC_PRIVATE_REMOTE = 5;
export const CAUSE_LOC_INTERNATIONAL_NETWORK = 7;
export const CAUSE_LOC_BEYOND_INTERWORKING = 10;
export const CAUSE_UNALLOCATED_NUMBER = 1;
export const CAUSE_NO_ROUTE_TO_TRANSIT_NETWORK = 2;
export const CAUSE_NO_ROUTE_TO_DESTINATION = 3;
export const CAUSE_VPI_VCI_UNACCEPTABLE = 10;
export const CAUSE_NORMAL_CALL_CLEARING = 16;
export const CAUSE_USER_BUSY = 17;
export const CAUSE_NO_USER_RESPONDING = 18;
export const CAUSE_CALL_REJECTED = 21;
export const CAUSE_NUMBER_CHANGED = 22;
export const CAUSE_USER_REJECTS_CLIR = 23;
export const CAUSE_DESTINATION_OUT_OF_ORDER = 27;
export const CAUSE_INVALID_NUMBER_FORMAT = 28;
export const CAUSE_STATUS_ENQUIRY_RESPONSE = 30;
export const CAUSE_NORMAL_UNSPECIFIED = 31;
export const CAUSE_VPI_VCI_UNAVAILABLE = 35;
export const CAUSE_NETWORK_OUT_OF_ORDER = 38;
export const CAUSE_TEMPORARY_FAILURE = 41;
export const CAUSE_ACCESS_INFORMAION_DISCARDED = 43;
export const CAUSE_NO_VPI_VCI_AVAILABLE = 45;
export const CAUSE_RESOURCE_UNAVAILABLE = 47;
export const CAUSE_QOS_UNAVAILABLE = 49;
export const CAUSE_USER_CELL_RATE_UNAVAILABLE = 51;
export const CAUSE_BEARER_CAPABILITY_UNAUTHORIZED = 57;
export const CAUSE_BEARER_CAPABILITY_UNAVAILABLE = 58;
export const CAUSE_OPTION_UNAVAILABLE = 63;
export const CAUSE_BEARER_CAPABILITY_UNIMPLEMENTED = 65;
export const CAUSE_UNSUPPORTED_TRAFFIC_PARAMETERS = 73;
export const CAUSE_INVALID_CALL_REFERENCE = 81;
export const CAUSE_CHANNEL_NONEXISTENT = 82;
export const CAUSE_INCOMPATIBLE_DESTINATION = 88;
export const CAUSE_INVALID_ENDPOINT_REFERENCE = 89;
export const CAUSE_INVALID_TRANSIT_NETWORK_SELECTION = 91;
export const CAUSE_TOO_MANY_PENDING_ADD_PARTY = 92;
export const CAUSE_AAL_PARAMETERS_UNSUPPORTED = 93;
export const CAUSE_MANDATORY_IE_MISSING = 96;
export const CAUSE_UNIMPLEMENTED_MESSAGE_TYPE = 97;
export const CAUSE_UNIMPLEMENTED_IE = 99;
export const CAUSE_INVALID_IE_CONTENTS = 100;
export const CAUSE_INVALID_STATE_FOR_MESSAGE = 101;
export const CAUSE_RECOVERY_ON_TIMEOUT = 102;
export const CAUSE_INCORRECT_MESSAGE_LENGTH = 104;
export const CAUSE_PROTOCOL_ERROR = 111;
export const CAUSE_COND_UNKNOWN = 0;
export const CAUSE_COND_PERMANENT = 1;
export const CAUSE_COND_TRANSIENT = 2;
export const CAUSE_REASON_USER = 0;
export const CAUSE_REASON_IE_MISSING = 4;
export const CAUSE_REASON_IE_INSUFFICIENT = 8;
export const CAUSE_PU_PROVIDER = 0;
export const CAUSE_PU_USER = 8;
export const CAUSE_NA_NORMAL = 0;
export const CAUSE_NA_ABNORMAL = 4;
export const QOS_CLASS0 = 0;
export const QOS_CLASS1 = 1;
export const QOS_CLASS2 = 2;
export const QOS_CLASS3 = 3;
export const QOS_CLASS4 = 4;
export const TNS_TYPE_NATIONAL = 64;
export const TNS_PLAN_CARRIER_ID_CODE = 1;
export const SIO_GET_NUMBER_OF_ATM_DEVICES = 1343619073;
export const SIO_GET_ATM_ADDRESS = 3491102722;
export const SIO_ASSOCIATE_PVC = 2417360899;
export const SIO_GET_ATM_CONNECTION_ID = 1343619076;
export const WSPDESCRIPTION_LEN = 255;
export const WSS_OPERATION_IN_PROGRESS = 259;
export const LSP_SYSTEM = 2147483648;
export const LSP_INSPECTOR = 1;
export const LSP_REDIRECTOR = 2;
export const LSP_PROXY = 4;
export const LSP_FIREWALL = 8;
export const LSP_INBOUND_MODIFY = 16;
export const LSP_OUTBOUND_MODIFY = 32;
export const LSP_CRYPTO_COMPRESS = 64;
export const LSP_LOCAL_CACHE = 128;
export const UDP_NOCHECKSUM = 1;
export const UDP_CHECKSUM_COVERAGE = 20;
export const GAI_STRERROR_BUFFER_SIZE = 1024;
export const IPX_PTYPE = 16384;
export const IPX_FILTERPTYPE = 16385;
export const IPX_STOPFILTERPTYPE = 16387;
export const IPX_DSTYPE = 16386;
export const IPX_EXTENDED_ADDRESS = 16388;
export const IPX_RECVHDR = 16389;
export const IPX_MAXSIZE = 16390;
export const IPX_ADDRESS = 16391;
export const IPX_GETNETINFO = 16392;
export const IPX_GETNETINFO_NORIP = 16393;
export const IPX_SPXGETCONNECTIONSTATUS = 16395;
export const IPX_ADDRESS_NOTIFY = 16396;
export const IPX_MAX_ADAPTER_NUM = 16397;
export const IPX_RERIPNETNUMBER = 16398;
export const IPX_RECEIVE_BROADCAST = 16399;
export const IPX_IMMEDIATESPXACK = 16400;
export const IPPROTO_RM = 113;
export const MAX_MCAST_TTL = 255;
export const RM_OPTIONSBASE = 1000;
export const RM_RATE_WINDOW_SIZE = 1001;
export const RM_SET_MESSAGE_BOUNDARY = 1002;
export const RM_FLUSHCACHE = 1003;
export const RM_SENDER_WINDOW_ADVANCE_METHOD = 1004;
export const RM_SENDER_STATISTICS = 1005;
export const RM_LATEJOIN = 1006;
export const RM_SET_SEND_IF = 1007;
export const RM_ADD_RECEIVE_IF = 1008;
export const RM_DEL_RECEIVE_IF = 1009;
export const RM_SEND_WINDOW_ADV_RATE = 1010;
export const RM_USE_FEC = 1011;
export const RM_SET_MCAST_TTL = 1012;
export const RM_RECEIVER_STATISTICS = 1013;
export const RM_HIGH_SPEED_INTRANET_OPT = 1014;
export const SENDER_DEFAULT_RATE_KBITS_PER_SEC = 56;
export const SENDER_DEFAULT_WINDOW_ADV_PERCENTAGE = 15;
export const MAX_WINDOW_INCREMENT_PERCENTAGE = 25;
export const SENDER_DEFAULT_LATE_JOINER_PERCENTAGE = 0;
export const SENDER_MAX_LATE_JOINER_PERCENTAGE = 75;
export const BITS_PER_BYTE = 8;
export const LOG2_BITS_PER_BYTE = 3;
export const UNIX_PATH_MAX = 108;
export const ISOPROTO_TP0 = 25;
export const ISOPROTO_TP1 = 26;
export const ISOPROTO_TP2 = 27;
export const ISOPROTO_TP3 = 28;
export const ISOPROTO_TP4 = 29;
export const ISOPROTO_TP = 29;
export const ISOPROTO_CLTP = 30;
export const ISOPROTO_CLNP = 31;
export const ISOPROTO_X25 = 32;
export const ISOPROTO_INACT_NL = 33;
export const ISOPROTO_ESIS = 34;
export const ISOPROTO_INTRAISIS = 35;
export const ISO_MAX_ADDR_LENGTH = 64;
export const ISO_HIERARCHICAL = 0;
export const ISO_NON_HIERARCHICAL = 1;
export const ISO_EXP_DATA_USE = 0;
export const ISO_EXP_DATA_NUSE = 1;
export const NSPROTO_IPX = 1000;
export const NSPROTO_SPX = 1256;
export const NSPROTO_SPXII = 1257;
export const NETBIOS_NAME_LENGTH = 16;
export const NETBIOS_UNIQUE_NAME = 0;
export const NETBIOS_GROUP_NAME = 1;
export const NETBIOS_TYPE_QUICK_UNIQUE = 2;
export const NETBIOS_TYPE_QUICK_GROUP = 3;
export const VNSPROTO_IPC = 1;
export const VNSPROTO_RELIABLE_IPC = 2;
export const VNSPROTO_SPP = 3;
export const INVALID_SOCKET = 1120986464255;
export const WSA_INFINITE = 4294967295;
export const IOC_INOUT = 3221225472;
export const FIONREAD = 1074030207;
export const FIONBIO = "-2147195266";
export const FIOASYNC = "-2147195267";
export const SIOCSHIWAT = "-2147192064";
export const SIOCGHIWAT = 1074033409;
export const SIOCSLOWAT = "-2147192062";
export const SIOCGLOWAT = 1074033411;
export const SIOCATMARK = 1074033415;
export const LM_HB_Extension = 128;
export const LM_HB1_PnP = 1;
export const LM_HB1_PDA_Palmtop = 2;
export const LM_HB1_Computer = 4;
export const LM_HB1_Printer = 8;
export const LM_HB1_Modem = 16;
export const LM_HB1_Fax = 32;
export const LM_HB1_LANAccess = 64;
export const LM_HB2_Telephony = 1;
export const LM_HB2_FileServer = 2;
export const IPPROTO_HOPOPTS = 0;
export const IPPROTO_ICMP = 1;
export const IPPROTO_IGMP = 2;
export const IPPROTO_GGP = 3;
export const IPPROTO_IPV4 = 4;
export const IPPROTO_ST = 5;
export const IPPROTO_TCP = 6;
export const IPPROTO_CBT = 7;
export const IPPROTO_EGP = 8;
export const IPPROTO_IGP = 9;
export const IPPROTO_PUP = 12;
export const IPPROTO_UDP = 17;
export const IPPROTO_IDP = 22;
export const IPPROTO_RDP = 27;
export const IPPROTO_IPV6 = 41;
export const IPPROTO_ROUTING = 43;
export const IPPROTO_FRAGMENT = 44;
export const IPPROTO_ESP = 50;
export const IPPROTO_AH = 51;
export const IPPROTO_ICMPV6 = 58;
export const IPPROTO_NONE = 59;
export const IPPROTO_DSTOPTS = 60;
export const IPPROTO_ND = 77;
export const IPPROTO_ICLFXBM = 78;
export const IPPROTO_PIM = 103;
export const IPPROTO_PGM = 113;
export const IPPROTO_L2TP = 115;
export const IPPROTO_SCTP = 132;
export const IPPROTO_RAW = 255;
export const IPPROTO_MAX = 256;
export const IPPROTO_RESERVED_RAW = 257;
export const IPPROTO_RESERVED_IPSEC = 258;
export const IPPROTO_RESERVED_IPSECOFFLOAD = 259;
export const IPPROTO_RESERVED_WNV = 260;
export const IPPROTO_RESERVED_MAX = 261;
export const ScopeLevelInterface = 1;
export const ScopeLevelLink = 2;
export const ScopeLevelSubnet = 3;
export const ScopeLevelAdmin = 4;
export const ScopeLevelSite = 5;
export const ScopeLevelOrganization = 8;
export const ScopeLevelGlobal = 14;
export const ScopeLevelCount = 16;
export const NSP_NOTIFY_IMMEDIATELY = 0;
export const NSP_NOTIFY_HWND = 1;
export const NSP_NOTIFY_EVENT = 2;
export const NSP_NOTIFY_PORT = 3;
export const NSP_NOTIFY_APC = 4;
export const COMP_EQUAL = 0;
export const COMP_NOTLESS = 1;
export const RNRSERVICE_REGISTER = 0;
export const RNRSERVICE_DEREGISTER = 1;
export const RNRSERVICE_DELETE = 2;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const IP_PMTUDISC_NOT_SET = 0;
export const IP_PMTUDISC_DO = 1;
export const IP_PMTUDISC_DONT = 2;
export const IP_PMTUDISC_PROBE = 3;
export const IP_PMTUDISC_MAX = 4;
export const MCAST_INCLUDE = 0;
export const MCAST_EXCLUDE = 1;
export const E_WINDOW_ADVANCE_BY_TIME = 1;
export const E_WINDOW_USE_AS_DATA_CACHE = 2;
export const IpPrefixOriginOther = 0;
export const IpPrefixOriginManual = 1;
export const IpPrefixOriginWellKnown = 2;
export const IpPrefixOriginDhcp = 3;
export const IpPrefixOriginRouterAdvertisement = 4;
export const IpPrefixOriginUnchanged = 16;
export const NlsoOther = 0;
export const NlsoManual = 1;
export const NlsoWellKnown = 2;
export const NlsoDhcp = 3;
export const NlsoLinkLayerAddress = 4;
export const NlsoRandom = 5;
export const IpSuffixOriginOther = 0;
export const IpSuffixOriginManual = 1;
export const IpSuffixOriginWellKnown = 2;
export const IpSuffixOriginDhcp = 3;
export const IpSuffixOriginLinkLayerAddress = 4;
export const IpSuffixOriginRandom = 5;
export const IpSuffixOriginUnchanged = 16;
export const NldsInvalid = 0;
export const NldsTentative = 1;
export const NldsDuplicate = 2;
export const NldsDeprecated = 3;
export const NldsPreferred = 4;
export const IpDadStateInvalid = 0;
export const IpDadStateTentative = 1;
export const IpDadStateDuplicate = 2;
export const IpDadStateDeprecated = 3;
export const IpDadStatePreferred = 4;
export const RouteProtocolOther = 1;
export const RouteProtocolLocal = 2;
export const RouteProtocolNetMgmt = 3;
export const RouteProtocolIcmp = 4;
export const RouteProtocolEgp = 5;
export const RouteProtocolGgp = 6;
export const RouteProtocolHello = 7;
export const RouteProtocolRip = 8;
export const RouteProtocolIsIs = 9;
export const RouteProtocolEsIs = 10;
export const RouteProtocolCisco = 11;
export const RouteProtocolBbn = 12;
export const RouteProtocolOspf = 13;
export const RouteProtocolBgp = 14;
export const RouteProtocolIdpr = 15;
export const RouteProtocolEigrp = 16;
export const RouteProtocolDvmrp = 17;
export const RouteProtocolRpl = 18;
export const RouteProtocolDhcp = 19;
export const MIB_IPPROTO_OTHER = 1;
export const PROTO_IP_OTHER = 1;
export const MIB_IPPROTO_LOCAL = 2;
export const PROTO_IP_LOCAL = 2;
export const MIB_IPPROTO_NETMGMT = 3;
export const PROTO_IP_NETMGMT = 3;
export const MIB_IPPROTO_ICMP = 4;
export const PROTO_IP_ICMP = 4;
export const MIB_IPPROTO_EGP = 5;
export const PROTO_IP_EGP = 5;
export const MIB_IPPROTO_GGP = 6;
export const PROTO_IP_GGP = 6;
export const MIB_IPPROTO_HELLO = 7;
export const PROTO_IP_HELLO = 7;
export const MIB_IPPROTO_RIP = 8;
export const PROTO_IP_RIP = 8;
export const MIB_IPPROTO_IS_IS = 9;
export const PROTO_IP_IS_IS = 9;
export const MIB_IPPROTO_ES_IS = 10;
export const PROTO_IP_ES_IS = 10;
export const MIB_IPPROTO_CISCO = 11;
export const PROTO_IP_CISCO = 11;
export const MIB_IPPROTO_BBN = 12;
export const PROTO_IP_BBN = 12;
export const MIB_IPPROTO_OSPF = 13;
export const PROTO_IP_OSPF = 13;
export const MIB_IPPROTO_BGP = 14;
export const PROTO_IP_BGP = 14;
export const MIB_IPPROTO_IDPR = 15;
export const PROTO_IP_IDPR = 15;
export const MIB_IPPROTO_EIGRP = 16;
export const PROTO_IP_EIGRP = 16;
export const MIB_IPPROTO_DVMRP = 17;
export const PROTO_IP_DVMRP = 17;
export const MIB_IPPROTO_RPL = 18;
export const PROTO_IP_RPL = 18;
export const MIB_IPPROTO_DHCP = 19;
export const PROTO_IP_DHCP = 19;
export const MIB_IPPROTO_NT_AUTOSTATIC = 10002;
export const PROTO_IP_NT_AUTOSTATIC = 10002;
export const MIB_IPPROTO_NT_STATIC = 10006;
export const PROTO_IP_NT_STATIC = 10006;
export const MIB_IPPROTO_NT_STATIC_NON_DOD = 10007;
export const PROTO_IP_NT_STATIC_NON_DOD = 10007;
export const NlatUnspecified = 0;
export const NlatUnicast = 1;
export const NlatAnycast = 2;
export const NlatMulticast = 3;
export const NlatBroadcast = 4;
export const NlatInvalid = 5;
export const NlroManual = 0;
export const NlroWellKnown = 1;
export const NlroDHCP = 2;
export const NlroRouterAdvertisement = 3;
export const Nlro6to4 = 4;
export const NlnsUnreachable = 0;
export const NlnsIncomplete = 1;
export const NlnsProbe = 2;
export const NlnsDelay = 3;
export const NlnsStale = 4;
export const NlnsReachable = 5;
export const NlnsPermanent = 6;
export const NlnsMaximum = 7;
export const LinkLocalAlwaysOff = 0;
export const LinkLocalDelayed = 1;
export const LinkLocalAlwaysOn = 2;
export const LinkLocalUnchanged = "-1";
export const RouterDiscoveryDisabled = 0;
export const RouterDiscoveryEnabled = 1;
export const RouterDiscoveryDhcp = 2;
export const RouterDiscoveryUnchanged = "-1";
export const NlbwDisabled = 0;
export const NlbwEnabled = 1;
export const NlbwUnchanged = "-1";
export const NetworkCategoryPublic = 0;
export const NetworkCategoryPrivate = 1;
export const NetworkCategoryDomainAuthenticated = 2;
export const NetworkCategoryUnchanged = "-1";
export const NetworkCategoryUnknown = "-1";
export const NlincCategoryUnknown = 0;
export const NlincPublic = 1;
export const NlincPrivate = 2;
export const NlincDomainAuthenticated = 3;
export const NlincCategoryStateMax = 4;
export const NetworkConnectivityLevelHintUnknown = 0;
export const NetworkConnectivityLevelHintNone = 1;
export const NetworkConnectivityLevelHintLocalAccess = 2;
export const NetworkConnectivityLevelHintInternetAccess = 3;
export const NetworkConnectivityLevelHintConstrainedInternetAccess = 4;
export const NetworkConnectivityLevelHintHidden = 5;
export const NetworkConnectivityCostHintUnknown = 0;
export const NetworkConnectivityCostHintUnrestricted = 1;
export const NetworkConnectivityCostHintFixed = 2;
export const NetworkConnectivityCostHintVariable = 3;
export const TCPSTATE_CLOSED = 0;
export const TCPSTATE_LISTEN = 1;
export const TCPSTATE_SYN_SENT = 2;
export const TCPSTATE_SYN_RCVD = 3;
export const TCPSTATE_ESTABLISHED = 4;
export const TCPSTATE_FIN_WAIT_1 = 5;
export const TCPSTATE_FIN_WAIT_2 = 6;
export const TCPSTATE_CLOSE_WAIT = 7;
export const TCPSTATE_CLOSING = 8;
export const TCPSTATE_LAST_ACK = 9;
export const TCPSTATE_TIME_WAIT = 10;
export const TCPSTATE_MAX = 11;
export const CONTROL_CHANNEL_TRIGGER_STATUS_INVALID = 0;
export const CONTROL_CHANNEL_TRIGGER_STATUS_SOFTWARE_SLOT_ALLOCATED = 1;
export const CONTROL_CHANNEL_TRIGGER_STATUS_HARDWARE_SLOT_ALLOCATED = 2;
export const CONTROL_CHANNEL_TRIGGER_STATUS_POLICY_ERROR = 3;
export const CONTROL_CHANNEL_TRIGGER_STATUS_SYSTEM_ERROR = 4;
export const CONTROL_CHANNEL_TRIGGER_STATUS_TRANSPORT_DISCONNECTED = 5;
export const CONTROL_CHANNEL_TRIGGER_STATUS_SERVICE_UNAVAILABLE = 6;
export const SocketPriorityHintVeryLow = 0;
export const SocketPriorityHintLow = 1;
export const SocketPriorityHintNormal = 2;
export const SocketMaximumPriorityHintType = 3;
export const RCVALL_OFF = 0;
export const RCVALL_ON = 1;
export const RCVALL_SOCKETLEVELONLY = 2;
export const RCVALL_IPLEVEL = 3;
export const TCP_ICW_LEVEL_DEFAULT = 0;
export const TCP_ICW_LEVEL_HIGH = 1;
export const TCP_ICW_LEVEL_VERY_HIGH = 2;
export const TCP_ICW_LEVEL_AGGRESSIVE = 3;
export const TCP_ICW_LEVEL_EXPERIMENTAL = 4;
export const TCP_ICW_LEVEL_COMPAT = 254;
export const TCP_ICW_LEVEL_MAX = 255;
export const SYSTEM_CRITICAL_SOCKET = 1;
export const SOCKET_SECURITY_PROTOCOL_DEFAULT = 0;
export const SOCKET_SECURITY_PROTOCOL_IPSEC = 1;
export const SOCKET_SECURITY_PROTOCOL_IPSEC2 = 2;
export const SOCKET_SECURITY_PROTOCOL_INVALID = 3;
export const WsaBehaviorAll = 0;
export const WsaBehaviorReceiveBuffering = 1;
export const WsaBehaviorAutoTuning = 2;
export const IE_AALParameters = 0;
export const IE_TrafficDescriptor = 1;
export const IE_BroadbandBearerCapability = 2;
export const IE_BHLI = 3;
export const IE_BLLI = 4;
export const IE_CalledPartyNumber = 5;
export const IE_CalledPartySubaddress = 6;
export const IE_CallingPartyNumber = 7;
export const IE_CallingPartySubaddress = 8;
export const IE_Cause = 9;
export const IE_QOSClass = 10;
export const IE_TransitNetworkSelection = 11;
export const AALTYPE_5 = 5;
export const AALTYPE_USER = 16;
export const ProviderType_Application = 1;
export const ProviderType_Service = 2;
export const ProviderLevel_None = 0;
export const ProviderLevel_Secondary = 1;
export const ProviderLevel_Primary = 2;
export const NLA_RAW_DATA = 0;
export const NLA_INTERFACE = 1;
export const NLA_802_1X_LOCATION = 2;
export const NLA_CONNECTIVITY = 3;
export const NLA_ICS = 4;
export const NLA_NETWORK_AD_HOC = 0;
export const NLA_NETWORK_MANAGED = 1;
export const NLA_NETWORK_UNMANAGED = 2;
export const NLA_NETWORK_UNKNOWN = 3;
export const NLA_INTERNET_UNKNOWN = 0;
export const NLA_INTERNET_NO = 1;
export const NLA_INTERNET_YES = 2;
export const RIO_EVENT_COMPLETION = 1;
export const RIO_IOCP_COMPLETION = 2;
export const ProviderInfoLspCategories = 0;
export const ProviderInfoAudit = 1;

// Structs

export type HWSAEVENT = Deno.PointerValue;

export type SOCKET = Deno.PointerValue;

/**
 * _S_un_ports_e__Struct (size: 8)
 */
export interface _S_un_ports_e__Struct {
  /** u16 */
  s_srcport: number;
  /** u16 */
  s_dstport: number;
}

export const sizeof_S_un_ports_e__Struct = 8;

export function alloc_S_un_ports_e__Struct(data?: Partial<_S_un_ports_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_ports_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.s_srcport !== undefined) view.setUint16(0, Number(data.s_srcport), true);
  // 0x02: u16
  if (data?.s_dstport !== undefined) view.setUint16(2, Number(data.s_dstport), true);
  // 0x04: pad4
  return buf;
}

/**
 * _S_un_icmp_e__Struct (size: 8)
 */
export interface _S_un_icmp_e__Struct {
  /** u8 */
  s_type: number;
  /** u8 */
  s_code: number;
  /** u16 */
  filler: number;
}

export const sizeof_S_un_icmp_e__Struct = 8;

export function alloc_S_un_icmp_e__Struct(data?: Partial<_S_un_icmp_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_icmp_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.s_type !== undefined) view.setUint8(0, Number(data.s_type));
  // 0x01: u8
  if (data?.s_code !== undefined) view.setUint8(1, Number(data.s_code));
  // 0x02: u16
  if (data?.filler !== undefined) view.setUint16(2, Number(data.filler), true);
  // 0x04: pad4
  return buf;
}

/**
 * _S_un_e__Union (size: 24)
 */
export interface _S_un_e__Union {
  /** _S_un_ports_e__Struct */
  S_un_ports: Uint8Array | Deno.PointerValue | null;
  /** _S_un_icmp_e__Struct */
  S_un_icmp: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  S_Spi: number;
}

export const sizeof_S_un_e__Union = 24;

export function alloc_S_un_e__Union(data?: Partial<_S_un_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_S_un_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S_un_ports !== undefined) view.setBigUint64(0, data.S_un_ports === null ? 0n : BigInt(util.toPointer(data.S_un_ports)), true);
  // 0x08: pointer
  if (data?.S_un_icmp !== undefined) view.setBigUint64(8, data.S_un_icmp === null ? 0n : BigInt(util.toPointer(data.S_un_icmp)), true);
  // 0x10: u32
  if (data?.S_Spi !== undefined) view.setUint32(16, Number(data.S_Spi), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IN_ADDR (size: 8)
 */
export interface IN_ADDR {
  /** _S_un_e__Union */
  S_un: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIN_ADDR = 8;

export function allocIN_ADDR(data?: Partial<IN_ADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofIN_ADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.S_un !== undefined) view.setBigUint64(0, data.S_un === null ? 0n : BigInt(util.toPointer(data.S_un)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR (size: 16)
 */
export interface SOCKADDR {
  /** u16 */
  sa_family: number;
  /** array */
  sa_data: Deno.PointerValue | null;
}

export const sizeofSOCKADDR = 16;

export function allocSOCKADDR(data?: Partial<SOCKADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sa_family !== undefined) view.setUint16(0, Number(data.sa_family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.sa_data !== undefined) view.setBigUint64(8, data.sa_data === null ? 0n : BigInt(util.toPointer(data.sa_data)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKET_ADDRESS (size: 16)
 */
export interface SOCKET_ADDRESS {
  /** ptr */
  lpSockaddr: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  iSockaddrLength: number;
}

export const sizeofSOCKET_ADDRESS = 16;

export function allocSOCKET_ADDRESS(data?: Partial<SOCKET_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKET_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpSockaddr !== undefined) view.setBigUint64(0, data.lpSockaddr === null ? 0n : BigInt(util.toPointer(data.lpSockaddr)), true);
  // 0x08: i32
  if (data?.iSockaddrLength !== undefined) view.setInt32(8, Number(data.iSockaddrLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKET_ADDRESS_LIST (size: 16)
 */
export interface SOCKET_ADDRESS_LIST {
  /** i32 */
  iAddressCount: number;
  /** array */
  Address: Deno.PointerValue | null;
}

export const sizeofSOCKET_ADDRESS_LIST = 16;

export function allocSOCKET_ADDRESS_LIST(data?: Partial<SOCKET_ADDRESS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKET_ADDRESS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iAddressCount !== undefined) view.setInt32(0, Number(data.iAddressCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.CSADDR_INFO (size: 24)
 */
export interface CSADDR_INFO {
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  LocalAddr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  RemoteAddr: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  iSocketType: number;
  /** i32 */
  iProtocol: number;
}

export const sizeofCSADDR_INFO = 24;

export function allocCSADDR_INFO(data?: Partial<CSADDR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCSADDR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LocalAddr !== undefined) view.setBigUint64(0, data.LocalAddr === null ? 0n : BigInt(util.toPointer(data.LocalAddr)), true);
  // 0x08: pointer
  if (data?.RemoteAddr !== undefined) view.setBigUint64(8, data.RemoteAddr === null ? 0n : BigInt(util.toPointer(data.RemoteAddr)), true);
  // 0x10: i32
  if (data?.iSocketType !== undefined) view.setInt32(16, Number(data.iSocketType), true);
  // 0x14: i32
  if (data?.iProtocol !== undefined) view.setInt32(20, Number(data.iProtocol), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE (size: 32)
 */
export interface SOCKADDR_STORAGE {
  /** u16 */
  ss_family: number;
  /** array */
  __ss_pad1: Deno.PointerValue | null;
  /** i64 */
  __ss_align: Deno.PointerValue;
  /** array */
  __ss_pad2: Deno.PointerValue | null;
}

export const sizeofSOCKADDR_STORAGE = 32;

export function allocSOCKADDR_STORAGE(data?: Partial<SOCKADDR_STORAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_STORAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ss_family !== undefined) view.setUint16(0, Number(data.ss_family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.__ss_pad1 !== undefined) view.setBigUint64(8, data.__ss_pad1 === null ? 0n : BigInt(util.toPointer(data.__ss_pad1)), true);
  // 0x10: i64
  if (data?.__ss_align !== undefined) view.setBigInt64(16, BigInt(data.__ss_align), true);
  // 0x18: pointer
  if (data?.__ss_pad2 !== undefined) view.setBigUint64(24, data.__ss_pad2 === null ? 0n : BigInt(util.toPointer(data.__ss_pad2)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE_XP (size: 32)
 */
export interface SOCKADDR_STORAGE_XP {
  /** i16 */
  ss_family: number;
  /** array */
  __ss_pad1: Deno.PointerValue | null;
  /** i64 */
  __ss_align: Deno.PointerValue;
  /** array */
  __ss_pad2: Deno.PointerValue | null;
}

export const sizeofSOCKADDR_STORAGE_XP = 32;

export function allocSOCKADDR_STORAGE_XP(data?: Partial<SOCKADDR_STORAGE_XP>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_STORAGE_XP);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.ss_family !== undefined) view.setInt16(0, Number(data.ss_family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.__ss_pad1 !== undefined) view.setBigUint64(8, data.__ss_pad1 === null ? 0n : BigInt(util.toPointer(data.__ss_pad1)), true);
  // 0x10: i64
  if (data?.__ss_align !== undefined) view.setBigInt64(16, BigInt(data.__ss_align), true);
  // 0x18: pointer
  if (data?.__ss_pad2 !== undefined) view.setBigUint64(24, data.__ss_pad2 === null ? 0n : BigInt(util.toPointer(data.__ss_pad2)), true);
  return buf;
}

/**
 * Windows.Win32.System.Kernel.PROCESSOR_NUMBER (size: 8)
 */
export interface PROCESSOR_NUMBER {
  /** u16 */
  Group: number;
  /** u8 */
  Number: number;
  /** u8 */
  Reserved: number;
}

export const sizeofPROCESSOR_NUMBER = 8;

export function allocPROCESSOR_NUMBER(data?: Partial<PROCESSOR_NUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESSOR_NUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Group !== undefined) view.setUint16(0, Number(data.Group), true);
  // 0x02: u8
  if (data?.Number !== undefined) view.setUint8(2, Number(data.Number));
  // 0x03: u8
  if (data?.Reserved !== undefined) view.setUint8(3, Number(data.Reserved));
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKET_PROCESSOR_AFFINITY (size: 16)
 */
export interface SOCKET_PROCESSOR_AFFINITY {
  /** Windows.Win32.System.Kernel.PROCESSOR_NUMBER */
  Processor: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  NumaNodeId: number;
  /** u16 */
  Reserved: number;
}

export const sizeofSOCKET_PROCESSOR_AFFINITY = 16;

export function allocSOCKET_PROCESSOR_AFFINITY(data?: Partial<SOCKET_PROCESSOR_AFFINITY>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKET_PROCESSOR_AFFINITY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Processor !== undefined) view.setBigUint64(0, data.Processor === null ? 0n : BigInt(util.toPointer(data.Processor)), true);
  // 0x08: u16
  if (data?.NumaNodeId !== undefined) view.setUint16(8, Number(data.NumaNodeId), true);
  // 0x0a: u16
  if (data?.Reserved !== undefined) view.setUint16(10, Number(data.Reserved), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SCOPE_ID (size: 8)
 */
export interface SCOPE_ID {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSCOPE_ID = 8;

export function allocSCOPE_ID(data?: Partial<SCOPE_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofSCOPE_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_IN (size: 24)
 */
export interface SOCKADDR_IN {
  /** u16 */
  sin_family: number;
  /** u16 */
  sin_port: number;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  sin_addr: Uint8Array | Deno.PointerValue | null;
  /** array */
  sin_zero: Deno.PointerValue | null;
}

export const sizeofSOCKADDR_IN = 24;

export function allocSOCKADDR_IN(data?: Partial<SOCKADDR_IN>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_IN);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sin_family !== undefined) view.setUint16(0, Number(data.sin_family), true);
  // 0x02: u16
  if (data?.sin_port !== undefined) view.setUint16(2, Number(data.sin_port), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.sin_addr !== undefined) view.setBigUint64(8, data.sin_addr === null ? 0n : BigInt(util.toPointer(data.sin_addr)), true);
  // 0x10: pointer
  if (data?.sin_zero !== undefined) view.setBigUint64(16, data.sin_zero === null ? 0n : BigInt(util.toPointer(data.sin_zero)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_DL (size: 24)
 */
export interface SOCKADDR_DL {
  /** u16 */
  sdl_family: number;
  /** array */
  sdl_data: Deno.PointerValue | null;
  /** array */
  sdl_zero: Deno.PointerValue | null;
}

export const sizeofSOCKADDR_DL = 24;

export function allocSOCKADDR_DL(data?: Partial<SOCKADDR_DL>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_DL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sdl_family !== undefined) view.setUint16(0, Number(data.sdl_family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.sdl_data !== undefined) view.setBigUint64(8, data.sdl_data === null ? 0n : BigInt(util.toPointer(data.sdl_data)), true);
  // 0x10: pointer
  if (data?.sdl_zero !== undefined) view.setBigUint64(16, data.sdl_zero === null ? 0n : BigInt(util.toPointer(data.sdl_zero)), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Networking.WinSock.WSABUF (size: 16)
 */
export interface WSABUF {
  /** u32 */
  len: number;
  /** Windows.Win32.Foundation.PSTR */
  buf: string | null;
}

export const sizeofWSABUF = 16;

export function allocWSABUF(data?: Partial<WSABUF>): Uint8Array {
  const buf = new Uint8Array(sizeofWSABUF);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.len !== undefined) view.setUint32(0, Number(data.len), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.buf !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.buf);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSAMSG (size: 48)
 */
export interface WSAMSG {
  /** ptr */
  name: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  namelen: number;
  /** ptr */
  lpBuffers: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwBufferCount: number;
  /** Windows.Win32.Networking.WinSock.WSABUF */
  Control: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFlags: number;
}

export const sizeofWSAMSG = 48;

export function allocWSAMSG(data?: Partial<WSAMSG>): Uint8Array {
  const buf = new Uint8Array(sizeofWSAMSG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.name !== undefined) view.setBigUint64(0, data.name === null ? 0n : BigInt(util.toPointer(data.name)), true);
  // 0x08: i32
  if (data?.namelen !== undefined) view.setInt32(8, Number(data.namelen), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpBuffers !== undefined) view.setBigUint64(16, data.lpBuffers === null ? 0n : BigInt(util.toPointer(data.lpBuffers)), true);
  // 0x18: u32
  if (data?.dwBufferCount !== undefined) view.setUint32(24, Number(data.dwBufferCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Control !== undefined) view.setBigUint64(32, data.Control === null ? 0n : BigInt(util.toPointer(data.Control)), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.cmsghdr (size: 16)
 */
export interface cmsghdr {
  /** usize */
  cmsg_len: Deno.PointerValue;
  /** i32 */
  cmsg_level: number;
  /** i32 */
  cmsg_type: number;
}

export const sizeofCmsghdr = 16;

export function allocCmsghdr(data?: Partial<cmsghdr>): Uint8Array {
  const buf = new Uint8Array(sizeofCmsghdr);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.cmsg_len !== undefined) view.setBigUint64(0, BigInt(data.cmsg_len), true);
  // 0x08: i32
  if (data?.cmsg_level !== undefined) view.setInt32(8, Number(data.cmsg_level), true);
  // 0x0c: i32
  if (data?.cmsg_type !== undefined) view.setInt32(12, Number(data.cmsg_type), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ADDRINFOA (size: 48)
 */
export interface ADDRINFOA {
  /** i32 */
  ai_flags: number;
  /** i32 */
  ai_family: number;
  /** i32 */
  ai_socktype: number;
  /** i32 */
  ai_protocol: number;
  /** usize */
  ai_addrlen: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  ai_canonname: string | null;
  /** ptr */
  ai_addr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_next: Deno.PointerValue | Uint8Array | null;
}

export const sizeofADDRINFOA = 48;

export function allocADDRINFOA(data?: Partial<ADDRINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofADDRINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ai_flags !== undefined) view.setInt32(0, Number(data.ai_flags), true);
  // 0x04: i32
  if (data?.ai_family !== undefined) view.setInt32(4, Number(data.ai_family), true);
  // 0x08: i32
  if (data?.ai_socktype !== undefined) view.setInt32(8, Number(data.ai_socktype), true);
  // 0x0c: i32
  if (data?.ai_protocol !== undefined) view.setInt32(12, Number(data.ai_protocol), true);
  // 0x10: usize
  if (data?.ai_addrlen !== undefined) view.setBigUint64(16, BigInt(data.ai_addrlen), true);
  // 0x18: buffer
  if (data?.ai_canonname !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.ai_canonname);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.ai_addr !== undefined) view.setBigUint64(32, data.ai_addr === null ? 0n : BigInt(util.toPointer(data.ai_addr)), true);
  // 0x28: pointer
  if (data?.ai_next !== undefined) view.setBigUint64(40, data.ai_next === null ? 0n : BigInt(util.toPointer(data.ai_next)), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Networking.WinSock.addrinfoW (size: 48)
 */
export interface addrinfoW {
  /** i32 */
  ai_flags: number;
  /** i32 */
  ai_family: number;
  /** i32 */
  ai_socktype: number;
  /** i32 */
  ai_protocol: number;
  /** usize */
  ai_addrlen: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ai_canonname: string | null;
  /** ptr */
  ai_addr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_next: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAddrinfoW = 48;

export function allocAddrinfoW(data?: Partial<addrinfoW>): Uint8Array {
  const buf = new Uint8Array(sizeofAddrinfoW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ai_flags !== undefined) view.setInt32(0, Number(data.ai_flags), true);
  // 0x04: i32
  if (data?.ai_family !== undefined) view.setInt32(4, Number(data.ai_family), true);
  // 0x08: i32
  if (data?.ai_socktype !== undefined) view.setInt32(8, Number(data.ai_socktype), true);
  // 0x0c: i32
  if (data?.ai_protocol !== undefined) view.setInt32(12, Number(data.ai_protocol), true);
  // 0x10: usize
  if (data?.ai_addrlen !== undefined) view.setBigUint64(16, BigInt(data.ai_addrlen), true);
  // 0x18: buffer
  if (data?.ai_canonname !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ai_canonname);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.ai_addr !== undefined) view.setBigUint64(32, data.ai_addr === null ? 0n : BigInt(util.toPointer(data.ai_addr)), true);
  // 0x28: pointer
  if (data?.ai_next !== undefined) view.setBigUint64(40, data.ai_next === null ? 0n : BigInt(util.toPointer(data.ai_next)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.addrinfoexA (size: 72)
 */
export interface addrinfoexA {
  /** i32 */
  ai_flags: number;
  /** i32 */
  ai_family: number;
  /** i32 */
  ai_socktype: number;
  /** i32 */
  ai_protocol: number;
  /** usize */
  ai_addrlen: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  ai_canonname: string | null;
  /** ptr */
  ai_addr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_blob: Deno.PointerValue | Uint8Array | null;
  /** usize */
  ai_bloblen: Deno.PointerValue;
  /** ptr */
  ai_provider: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_next: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAddrinfoexA = 72;

export function allocAddrinfoexA(data?: Partial<addrinfoexA>): Uint8Array {
  const buf = new Uint8Array(sizeofAddrinfoexA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ai_flags !== undefined) view.setInt32(0, Number(data.ai_flags), true);
  // 0x04: i32
  if (data?.ai_family !== undefined) view.setInt32(4, Number(data.ai_family), true);
  // 0x08: i32
  if (data?.ai_socktype !== undefined) view.setInt32(8, Number(data.ai_socktype), true);
  // 0x0c: i32
  if (data?.ai_protocol !== undefined) view.setInt32(12, Number(data.ai_protocol), true);
  // 0x10: usize
  if (data?.ai_addrlen !== undefined) view.setBigUint64(16, BigInt(data.ai_addrlen), true);
  // 0x18: buffer
  if (data?.ai_canonname !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.ai_canonname);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.ai_addr !== undefined) view.setBigUint64(32, data.ai_addr === null ? 0n : BigInt(util.toPointer(data.ai_addr)), true);
  // 0x28: pointer
  if (data?.ai_blob !== undefined) view.setBigUint64(40, data.ai_blob === null ? 0n : BigInt(util.toPointer(data.ai_blob)), true);
  // 0x30: usize
  if (data?.ai_bloblen !== undefined) view.setBigUint64(48, BigInt(data.ai_bloblen), true);
  // 0x38: pointer
  if (data?.ai_provider !== undefined) view.setBigUint64(56, data.ai_provider === null ? 0n : BigInt(util.toPointer(data.ai_provider)), true);
  // 0x40: pointer
  if (data?.ai_next !== undefined) view.setBigUint64(64, data.ai_next === null ? 0n : BigInt(util.toPointer(data.ai_next)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.addrinfoexW (size: 72)
 */
export interface addrinfoexW {
  /** i32 */
  ai_flags: number;
  /** i32 */
  ai_family: number;
  /** i32 */
  ai_socktype: number;
  /** i32 */
  ai_protocol: number;
  /** usize */
  ai_addrlen: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ai_canonname: string | null;
  /** ptr */
  ai_addr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_blob: Deno.PointerValue | Uint8Array | null;
  /** usize */
  ai_bloblen: Deno.PointerValue;
  /** ptr */
  ai_provider: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_next: Deno.PointerValue | Uint8Array | null;
}

export const sizeofAddrinfoexW = 72;

export function allocAddrinfoexW(data?: Partial<addrinfoexW>): Uint8Array {
  const buf = new Uint8Array(sizeofAddrinfoexW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ai_flags !== undefined) view.setInt32(0, Number(data.ai_flags), true);
  // 0x04: i32
  if (data?.ai_family !== undefined) view.setInt32(4, Number(data.ai_family), true);
  // 0x08: i32
  if (data?.ai_socktype !== undefined) view.setInt32(8, Number(data.ai_socktype), true);
  // 0x0c: i32
  if (data?.ai_protocol !== undefined) view.setInt32(12, Number(data.ai_protocol), true);
  // 0x10: usize
  if (data?.ai_addrlen !== undefined) view.setBigUint64(16, BigInt(data.ai_addrlen), true);
  // 0x18: buffer
  if (data?.ai_canonname !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ai_canonname);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.ai_addr !== undefined) view.setBigUint64(32, data.ai_addr === null ? 0n : BigInt(util.toPointer(data.ai_addr)), true);
  // 0x28: pointer
  if (data?.ai_blob !== undefined) view.setBigUint64(40, data.ai_blob === null ? 0n : BigInt(util.toPointer(data.ai_blob)), true);
  // 0x30: usize
  if (data?.ai_bloblen !== undefined) view.setBigUint64(48, BigInt(data.ai_bloblen), true);
  // 0x38: pointer
  if (data?.ai_provider !== undefined) view.setBigUint64(56, data.ai_provider === null ? 0n : BigInt(util.toPointer(data.ai_provider)), true);
  // 0x40: pointer
  if (data?.ai_next !== undefined) view.setBigUint64(64, data.ai_next === null ? 0n : BigInt(util.toPointer(data.ai_next)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.addrinfoex2A (size: 88)
 */
export interface addrinfoex2A {
  /** i32 */
  ai_flags: number;
  /** i32 */
  ai_family: number;
  /** i32 */
  ai_socktype: number;
  /** i32 */
  ai_protocol: number;
  /** usize */
  ai_addrlen: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  ai_canonname: string | null;
  /** ptr */
  ai_addr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_blob: Deno.PointerValue | Uint8Array | null;
  /** usize */
  ai_bloblen: Deno.PointerValue;
  /** ptr */
  ai_provider: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_next: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  ai_version: number;
  /** Windows.Win32.Foundation.PSTR */
  ai_fqdn: string | null;
}

export const sizeofAddrinfoex2A = 88;

export function allocAddrinfoex2A(data?: Partial<addrinfoex2A>): Uint8Array {
  const buf = new Uint8Array(sizeofAddrinfoex2A);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ai_flags !== undefined) view.setInt32(0, Number(data.ai_flags), true);
  // 0x04: i32
  if (data?.ai_family !== undefined) view.setInt32(4, Number(data.ai_family), true);
  // 0x08: i32
  if (data?.ai_socktype !== undefined) view.setInt32(8, Number(data.ai_socktype), true);
  // 0x0c: i32
  if (data?.ai_protocol !== undefined) view.setInt32(12, Number(data.ai_protocol), true);
  // 0x10: usize
  if (data?.ai_addrlen !== undefined) view.setBigUint64(16, BigInt(data.ai_addrlen), true);
  // 0x18: buffer
  if (data?.ai_canonname !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.ai_canonname);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.ai_addr !== undefined) view.setBigUint64(32, data.ai_addr === null ? 0n : BigInt(util.toPointer(data.ai_addr)), true);
  // 0x28: pointer
  if (data?.ai_blob !== undefined) view.setBigUint64(40, data.ai_blob === null ? 0n : BigInt(util.toPointer(data.ai_blob)), true);
  // 0x30: usize
  if (data?.ai_bloblen !== undefined) view.setBigUint64(48, BigInt(data.ai_bloblen), true);
  // 0x38: pointer
  if (data?.ai_provider !== undefined) view.setBigUint64(56, data.ai_provider === null ? 0n : BigInt(util.toPointer(data.ai_provider)), true);
  // 0x40: pointer
  if (data?.ai_next !== undefined) view.setBigUint64(64, data.ai_next === null ? 0n : BigInt(util.toPointer(data.ai_next)), true);
  // 0x48: i32
  if (data?.ai_version !== undefined) view.setInt32(72, Number(data.ai_version), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.ai_fqdn !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.ai_fqdn);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.addrinfoex2W (size: 88)
 */
export interface addrinfoex2W {
  /** i32 */
  ai_flags: number;
  /** i32 */
  ai_family: number;
  /** i32 */
  ai_socktype: number;
  /** i32 */
  ai_protocol: number;
  /** usize */
  ai_addrlen: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ai_canonname: string | null;
  /** ptr */
  ai_addr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_blob: Deno.PointerValue | Uint8Array | null;
  /** usize */
  ai_bloblen: Deno.PointerValue;
  /** ptr */
  ai_provider: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_next: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  ai_version: number;
  /** Windows.Win32.Foundation.PWSTR */
  ai_fqdn: string | null;
}

export const sizeofAddrinfoex2W = 88;

export function allocAddrinfoex2W(data?: Partial<addrinfoex2W>): Uint8Array {
  const buf = new Uint8Array(sizeofAddrinfoex2W);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ai_flags !== undefined) view.setInt32(0, Number(data.ai_flags), true);
  // 0x04: i32
  if (data?.ai_family !== undefined) view.setInt32(4, Number(data.ai_family), true);
  // 0x08: i32
  if (data?.ai_socktype !== undefined) view.setInt32(8, Number(data.ai_socktype), true);
  // 0x0c: i32
  if (data?.ai_protocol !== undefined) view.setInt32(12, Number(data.ai_protocol), true);
  // 0x10: usize
  if (data?.ai_addrlen !== undefined) view.setBigUint64(16, BigInt(data.ai_addrlen), true);
  // 0x18: buffer
  if (data?.ai_canonname !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ai_canonname);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.ai_addr !== undefined) view.setBigUint64(32, data.ai_addr === null ? 0n : BigInt(util.toPointer(data.ai_addr)), true);
  // 0x28: pointer
  if (data?.ai_blob !== undefined) view.setBigUint64(40, data.ai_blob === null ? 0n : BigInt(util.toPointer(data.ai_blob)), true);
  // 0x30: usize
  if (data?.ai_bloblen !== undefined) view.setBigUint64(48, BigInt(data.ai_bloblen), true);
  // 0x38: pointer
  if (data?.ai_provider !== undefined) view.setBigUint64(56, data.ai_provider === null ? 0n : BigInt(util.toPointer(data.ai_provider)), true);
  // 0x40: pointer
  if (data?.ai_next !== undefined) view.setBigUint64(64, data.ai_next === null ? 0n : BigInt(util.toPointer(data.ai_next)), true);
  // 0x48: i32
  if (data?.ai_version !== undefined) view.setInt32(72, Number(data.ai_version), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.ai_fqdn !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.ai_fqdn);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.addrinfoex3 (size: 96)
 */
export interface addrinfoex3 {
  /** i32 */
  ai_flags: number;
  /** i32 */
  ai_family: number;
  /** i32 */
  ai_socktype: number;
  /** i32 */
  ai_protocol: number;
  /** usize */
  ai_addrlen: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ai_canonname: string | null;
  /** ptr */
  ai_addr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_blob: Deno.PointerValue | Uint8Array | null;
  /** usize */
  ai_bloblen: Deno.PointerValue;
  /** ptr */
  ai_provider: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_next: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  ai_version: number;
  /** Windows.Win32.Foundation.PWSTR */
  ai_fqdn: string | null;
  /** i32 */
  ai_interfaceindex: number;
}

export const sizeofAddrinfoex3 = 96;

export function allocAddrinfoex3(data?: Partial<addrinfoex3>): Uint8Array {
  const buf = new Uint8Array(sizeofAddrinfoex3);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ai_flags !== undefined) view.setInt32(0, Number(data.ai_flags), true);
  // 0x04: i32
  if (data?.ai_family !== undefined) view.setInt32(4, Number(data.ai_family), true);
  // 0x08: i32
  if (data?.ai_socktype !== undefined) view.setInt32(8, Number(data.ai_socktype), true);
  // 0x0c: i32
  if (data?.ai_protocol !== undefined) view.setInt32(12, Number(data.ai_protocol), true);
  // 0x10: usize
  if (data?.ai_addrlen !== undefined) view.setBigUint64(16, BigInt(data.ai_addrlen), true);
  // 0x18: buffer
  if (data?.ai_canonname !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ai_canonname);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.ai_addr !== undefined) view.setBigUint64(32, data.ai_addr === null ? 0n : BigInt(util.toPointer(data.ai_addr)), true);
  // 0x28: pointer
  if (data?.ai_blob !== undefined) view.setBigUint64(40, data.ai_blob === null ? 0n : BigInt(util.toPointer(data.ai_blob)), true);
  // 0x30: usize
  if (data?.ai_bloblen !== undefined) view.setBigUint64(48, BigInt(data.ai_bloblen), true);
  // 0x38: pointer
  if (data?.ai_provider !== undefined) view.setBigUint64(56, data.ai_provider === null ? 0n : BigInt(util.toPointer(data.ai_provider)), true);
  // 0x40: pointer
  if (data?.ai_next !== undefined) view.setBigUint64(64, data.ai_next === null ? 0n : BigInt(util.toPointer(data.ai_next)), true);
  // 0x48: i32
  if (data?.ai_version !== undefined) view.setInt32(72, Number(data.ai_version), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.ai_fqdn !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.ai_fqdn);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: i32
  if (data?.ai_interfaceindex !== undefined) view.setInt32(88, Number(data.ai_interfaceindex), true);
  // 0x5c: pad4
  return buf;
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Networking.WinSock.addrinfoex4 (size: 104)
 */
export interface addrinfoex4 {
  /** i32 */
  ai_flags: number;
  /** i32 */
  ai_family: number;
  /** i32 */
  ai_socktype: number;
  /** i32 */
  ai_protocol: number;
  /** usize */
  ai_addrlen: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ai_canonname: string | null;
  /** ptr */
  ai_addr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_blob: Deno.PointerValue | Uint8Array | null;
  /** usize */
  ai_bloblen: Deno.PointerValue;
  /** ptr */
  ai_provider: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_next: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  ai_version: number;
  /** Windows.Win32.Foundation.PWSTR */
  ai_fqdn: string | null;
  /** i32 */
  ai_interfaceindex: number;
  /** Windows.Win32.Foundation.HANDLE */
  ai_resolutionhandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAddrinfoex4 = 104;

export function allocAddrinfoex4(data?: Partial<addrinfoex4>): Uint8Array {
  const buf = new Uint8Array(sizeofAddrinfoex4);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ai_flags !== undefined) view.setInt32(0, Number(data.ai_flags), true);
  // 0x04: i32
  if (data?.ai_family !== undefined) view.setInt32(4, Number(data.ai_family), true);
  // 0x08: i32
  if (data?.ai_socktype !== undefined) view.setInt32(8, Number(data.ai_socktype), true);
  // 0x0c: i32
  if (data?.ai_protocol !== undefined) view.setInt32(12, Number(data.ai_protocol), true);
  // 0x10: usize
  if (data?.ai_addrlen !== undefined) view.setBigUint64(16, BigInt(data.ai_addrlen), true);
  // 0x18: buffer
  if (data?.ai_canonname !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ai_canonname);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.ai_addr !== undefined) view.setBigUint64(32, data.ai_addr === null ? 0n : BigInt(util.toPointer(data.ai_addr)), true);
  // 0x28: pointer
  if (data?.ai_blob !== undefined) view.setBigUint64(40, data.ai_blob === null ? 0n : BigInt(util.toPointer(data.ai_blob)), true);
  // 0x30: usize
  if (data?.ai_bloblen !== undefined) view.setBigUint64(48, BigInt(data.ai_bloblen), true);
  // 0x38: pointer
  if (data?.ai_provider !== undefined) view.setBigUint64(56, data.ai_provider === null ? 0n : BigInt(util.toPointer(data.ai_provider)), true);
  // 0x40: pointer
  if (data?.ai_next !== undefined) view.setBigUint64(64, data.ai_next === null ? 0n : BigInt(util.toPointer(data.ai_next)), true);
  // 0x48: i32
  if (data?.ai_version !== undefined) view.setInt32(72, Number(data.ai_version), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.ai_fqdn !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.ai_fqdn);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: i32
  if (data?.ai_interfaceindex !== undefined) view.setInt32(88, Number(data.ai_interfaceindex), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.ai_resolutionhandle !== undefined) view.setBigUint64(96, data.ai_resolutionhandle === null ? 0n : BigInt(util.toPointer(data.ai_resolutionhandle)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.addrinfoex5 (size: 112)
 */
export interface addrinfoex5 {
  /** i32 */
  ai_flags: number;
  /** i32 */
  ai_family: number;
  /** i32 */
  ai_socktype: number;
  /** i32 */
  ai_protocol: number;
  /** usize */
  ai_addrlen: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ai_canonname: string | null;
  /** ptr */
  ai_addr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_blob: Deno.PointerValue | Uint8Array | null;
  /** usize */
  ai_bloblen: Deno.PointerValue;
  /** ptr */
  ai_provider: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_next: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  ai_version: number;
  /** Windows.Win32.Foundation.PWSTR */
  ai_fqdn: string | null;
  /** i32 */
  ai_interfaceindex: number;
  /** Windows.Win32.Foundation.HANDLE */
  ai_resolutionhandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ai_ttl: number;
}

export const sizeofAddrinfoex5 = 112;

export function allocAddrinfoex5(data?: Partial<addrinfoex5>): Uint8Array {
  const buf = new Uint8Array(sizeofAddrinfoex5);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ai_flags !== undefined) view.setInt32(0, Number(data.ai_flags), true);
  // 0x04: i32
  if (data?.ai_family !== undefined) view.setInt32(4, Number(data.ai_family), true);
  // 0x08: i32
  if (data?.ai_socktype !== undefined) view.setInt32(8, Number(data.ai_socktype), true);
  // 0x0c: i32
  if (data?.ai_protocol !== undefined) view.setInt32(12, Number(data.ai_protocol), true);
  // 0x10: usize
  if (data?.ai_addrlen !== undefined) view.setBigUint64(16, BigInt(data.ai_addrlen), true);
  // 0x18: buffer
  if (data?.ai_canonname !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ai_canonname);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.ai_addr !== undefined) view.setBigUint64(32, data.ai_addr === null ? 0n : BigInt(util.toPointer(data.ai_addr)), true);
  // 0x28: pointer
  if (data?.ai_blob !== undefined) view.setBigUint64(40, data.ai_blob === null ? 0n : BigInt(util.toPointer(data.ai_blob)), true);
  // 0x30: usize
  if (data?.ai_bloblen !== undefined) view.setBigUint64(48, BigInt(data.ai_bloblen), true);
  // 0x38: pointer
  if (data?.ai_provider !== undefined) view.setBigUint64(56, data.ai_provider === null ? 0n : BigInt(util.toPointer(data.ai_provider)), true);
  // 0x40: pointer
  if (data?.ai_next !== undefined) view.setBigUint64(64, data.ai_next === null ? 0n : BigInt(util.toPointer(data.ai_next)), true);
  // 0x48: i32
  if (data?.ai_version !== undefined) view.setInt32(72, Number(data.ai_version), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.ai_fqdn !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.ai_fqdn);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: i32
  if (data?.ai_interfaceindex !== undefined) view.setInt32(88, Number(data.ai_interfaceindex), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.ai_resolutionhandle !== undefined) view.setBigUint64(96, data.ai_resolutionhandle === null ? 0n : BigInt(util.toPointer(data.ai_resolutionhandle)), true);
  // 0x68: u32
  if (data?.ai_ttl !== undefined) view.setUint32(104, Number(data.ai_ttl), true);
  // 0x6c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.addrinfo_dns_server (size: 40)
 */
export interface addrinfo_dns_server {
  /** u32 */
  ai_servertype: number;
  /** u64 */
  ai_flags: Deno.PointerValue;
  /** u32 */
  ai_addrlen: number;
  /** ptr */
  ai_addr: Deno.PointerValue | Uint8Array | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAddrinfo_dns_server = 40;

export function allocAddrinfo_dns_server(data?: Partial<addrinfo_dns_server>): Uint8Array {
  const buf = new Uint8Array(sizeofAddrinfo_dns_server);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ai_servertype !== undefined) view.setUint32(0, Number(data.ai_servertype), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.ai_flags !== undefined) view.setBigUint64(8, BigInt(data.ai_flags), true);
  // 0x10: u32
  if (data?.ai_addrlen !== undefined) view.setUint32(16, Number(data.ai_addrlen), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ai_addr !== undefined) view.setBigUint64(24, data.ai_addr === null ? 0n : BigInt(util.toPointer(data.ai_addr)), true);
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.addrinfoex6 (size: 128)
 */
export interface addrinfoex6 {
  /** i32 */
  ai_flags: number;
  /** i32 */
  ai_family: number;
  /** i32 */
  ai_socktype: number;
  /** i32 */
  ai_protocol: number;
  /** usize */
  ai_addrlen: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  ai_canonname: string | null;
  /** ptr */
  ai_addr: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_blob: Deno.PointerValue | Uint8Array | null;
  /** usize */
  ai_bloblen: Deno.PointerValue;
  /** ptr */
  ai_provider: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ai_next: Deno.PointerValue | Uint8Array | null;
  /** i32 */
  ai_version: number;
  /** Windows.Win32.Foundation.PWSTR */
  ai_fqdn: string | null;
  /** i32 */
  ai_interfaceindex: number;
  /** Windows.Win32.Foundation.HANDLE */
  ai_resolutionhandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ai_ttl: number;
  /** u32 */
  ai_numservers: number;
  /** ptr */
  ai_servers: Deno.PointerValue | Uint8Array | null;
  /** u64 */
  ai_responseflags: Deno.PointerValue;
}

export const sizeofAddrinfoex6 = 128;

export function allocAddrinfoex6(data?: Partial<addrinfoex6>): Uint8Array {
  const buf = new Uint8Array(sizeofAddrinfoex6);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ai_flags !== undefined) view.setInt32(0, Number(data.ai_flags), true);
  // 0x04: i32
  if (data?.ai_family !== undefined) view.setInt32(4, Number(data.ai_family), true);
  // 0x08: i32
  if (data?.ai_socktype !== undefined) view.setInt32(8, Number(data.ai_socktype), true);
  // 0x0c: i32
  if (data?.ai_protocol !== undefined) view.setInt32(12, Number(data.ai_protocol), true);
  // 0x10: usize
  if (data?.ai_addrlen !== undefined) view.setBigUint64(16, BigInt(data.ai_addrlen), true);
  // 0x18: buffer
  if (data?.ai_canonname !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ai_canonname);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.ai_addr !== undefined) view.setBigUint64(32, data.ai_addr === null ? 0n : BigInt(util.toPointer(data.ai_addr)), true);
  // 0x28: pointer
  if (data?.ai_blob !== undefined) view.setBigUint64(40, data.ai_blob === null ? 0n : BigInt(util.toPointer(data.ai_blob)), true);
  // 0x30: usize
  if (data?.ai_bloblen !== undefined) view.setBigUint64(48, BigInt(data.ai_bloblen), true);
  // 0x38: pointer
  if (data?.ai_provider !== undefined) view.setBigUint64(56, data.ai_provider === null ? 0n : BigInt(util.toPointer(data.ai_provider)), true);
  // 0x40: pointer
  if (data?.ai_next !== undefined) view.setBigUint64(64, data.ai_next === null ? 0n : BigInt(util.toPointer(data.ai_next)), true);
  // 0x48: i32
  if (data?.ai_version !== undefined) view.setInt32(72, Number(data.ai_version), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.ai_fqdn !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.ai_fqdn);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: i32
  if (data?.ai_interfaceindex !== undefined) view.setInt32(88, Number(data.ai_interfaceindex), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.ai_resolutionhandle !== undefined) view.setBigUint64(96, data.ai_resolutionhandle === null ? 0n : BigInt(util.toPointer(data.ai_resolutionhandle)), true);
  // 0x68: u32
  if (data?.ai_ttl !== undefined) view.setUint32(104, Number(data.ai_ttl), true);
  // 0x6c: u32
  if (data?.ai_numservers !== undefined) view.setUint32(108, Number(data.ai_numservers), true);
  // 0x70: pointer
  if (data?.ai_servers !== undefined) view.setBigUint64(112, data.ai_servers === null ? 0n : BigInt(util.toPointer(data.ai_servers)), true);
  // 0x78: u64
  if (data?.ai_responseflags !== undefined) view.setBigUint64(120, BigInt(data.ai_responseflags), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.fd_set (size: 16)
 */
export interface fd_set {
  /** u32 */
  fd_count: number;
  /** array */
  fd_array: Deno.PointerValue | null;
}

export const sizeofFd_set = 16;

export function allocFd_set(data?: Partial<fd_set>): Uint8Array {
  const buf = new Uint8Array(sizeofFd_set);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fd_count !== undefined) view.setUint32(0, Number(data.fd_count), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.fd_array !== undefined) view.setBigUint64(8, data.fd_array === null ? 0n : BigInt(util.toPointer(data.fd_array)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.timeval (size: 8)
 */
export interface timeval {
  /** i32 */
  tv_sec: number;
  /** i32 */
  tv_usec: number;
}

export const sizeofTimeval = 8;

export function allocTimeval(data?: Partial<timeval>): Uint8Array {
  const buf = new Uint8Array(sizeofTimeval);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.tv_sec !== undefined) view.setInt32(0, Number(data.tv_sec), true);
  // 0x04: i32
  if (data?.tv_usec !== undefined) view.setInt32(4, Number(data.tv_usec), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.hostent (size: 32)
 */
export interface hostent {
  /** Windows.Win32.Foundation.PSTR */
  h_name: string | null;
  /** ptr */
  h_aliases: Deno.PointerValue | Uint8Array | null;
  /** i16 */
  h_addrtype: number;
  /** i16 */
  h_length: number;
  /** ptr */
  h_addr_list: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHostent = 32;

export function allocHostent(data?: Partial<hostent>): Uint8Array {
  const buf = new Uint8Array(sizeofHostent);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.h_name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.h_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.h_aliases !== undefined) view.setBigUint64(8, data.h_aliases === null ? 0n : BigInt(util.toPointer(data.h_aliases)), true);
  // 0x10: i16
  if (data?.h_addrtype !== undefined) view.setInt16(16, Number(data.h_addrtype), true);
  // 0x12: i16
  if (data?.h_length !== undefined) view.setInt16(18, Number(data.h_length), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.h_addr_list !== undefined) view.setBigUint64(24, data.h_addr_list === null ? 0n : BigInt(util.toPointer(data.h_addr_list)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.netent (size: 24)
 */
export interface netent {
  /** Windows.Win32.Foundation.PSTR */
  n_name: string | null;
  /** ptr */
  n_aliases: Deno.PointerValue | Uint8Array | null;
  /** i16 */
  n_addrtype: number;
  /** u32 */
  n_net: number;
}

export const sizeofNetent = 24;

export function allocNetent(data?: Partial<netent>): Uint8Array {
  const buf = new Uint8Array(sizeofNetent);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.n_name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.n_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.n_aliases !== undefined) view.setBigUint64(8, data.n_aliases === null ? 0n : BigInt(util.toPointer(data.n_aliases)), true);
  // 0x10: i16
  if (data?.n_addrtype !== undefined) view.setInt16(16, Number(data.n_addrtype), true);
  // 0x12: u32
  if (data?.n_net !== undefined) view.setUint32(18, Number(data.n_net), true);
  // 0x16: pad2
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.servent (size: 32)
 */
export interface servent {
  /** Windows.Win32.Foundation.PSTR */
  s_name: string | null;
  /** ptr */
  s_aliases: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  s_proto: string | null;
  /** i16 */
  s_port: number;
}

export const sizeofServent = 32;

export function allocServent(data?: Partial<servent>): Uint8Array {
  const buf = new Uint8Array(sizeofServent);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.s_name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.s_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.s_aliases !== undefined) view.setBigUint64(8, data.s_aliases === null ? 0n : BigInt(util.toPointer(data.s_aliases)), true);
  // 0x10: buffer
  if (data?.s_proto !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.s_proto);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: i16
  if (data?.s_port !== undefined) view.setInt16(24, Number(data.s_port), true);
  // 0x1a: pad6
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.protoent (size: 24)
 */
export interface protoent {
  /** Windows.Win32.Foundation.PSTR */
  p_name: string | null;
  /** ptr */
  p_aliases: Deno.PointerValue | Uint8Array | null;
  /** i16 */
  p_proto: number;
}

export const sizeofProtoent = 24;

export function allocProtoent(data?: Partial<protoent>): Uint8Array {
  const buf = new Uint8Array(sizeofProtoent);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.p_name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.p_name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.p_aliases !== undefined) view.setBigUint64(8, data.p_aliases === null ? 0n : BigInt(util.toPointer(data.p_aliases)), true);
  // 0x10: i16
  if (data?.p_proto !== undefined) view.setInt16(16, Number(data.p_proto), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSAData (size: 32)
 */
export interface WSAData {
  /** u16 */
  wVersion: number;
  /** u16 */
  wHighVersion: number;
  /** u16 */
  iMaxSockets: number;
  /** u16 */
  iMaxUdpDg: number;
  /** Windows.Win32.Foundation.PSTR */
  lpVendorInfo: string | null;
  /** array */
  szDescription: Deno.PointerValue | null;
  /** array */
  szSystemStatus: Deno.PointerValue | null;
}

export const sizeofWSAData = 32;

export function allocWSAData(data?: Partial<WSAData>): Uint8Array {
  const buf = new Uint8Array(sizeofWSAData);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wVersion !== undefined) view.setUint16(0, Number(data.wVersion), true);
  // 0x02: u16
  if (data?.wHighVersion !== undefined) view.setUint16(2, Number(data.wHighVersion), true);
  // 0x04: u16
  if (data?.iMaxSockets !== undefined) view.setUint16(4, Number(data.iMaxSockets), true);
  // 0x06: u16
  if (data?.iMaxUdpDg !== undefined) view.setUint16(6, Number(data.iMaxUdpDg), true);
  // 0x08: buffer
  if (data?.lpVendorInfo !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpVendorInfo);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(16, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  // 0x18: pointer
  if (data?.szSystemStatus !== undefined) view.setBigUint64(24, data.szSystemStatus === null ? 0n : BigInt(util.toPointer(data.szSystemStatus)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.sockproto (size: 8)
 */
export interface sockproto {
  /** u16 */
  sp_family: number;
  /** u16 */
  sp_protocol: number;
}

export const sizeofSockproto = 8;

export function allocSockproto(data?: Partial<sockproto>): Uint8Array {
  const buf = new Uint8Array(sizeofSockproto);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sp_family !== undefined) view.setUint16(0, Number(data.sp_family), true);
  // 0x02: u16
  if (data?.sp_protocol !== undefined) view.setUint16(2, Number(data.sp_protocol), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.linger (size: 8)
 */
export interface linger {
  /** u16 */
  l_onoff: number;
  /** u16 */
  l_linger: number;
}

export const sizeofLinger = 8;

export function allocLinger(data?: Partial<linger>): Uint8Array {
  const buf = new Uint8Array(sizeofLinger);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.l_onoff !== undefined) view.setUint16(0, Number(data.l_onoff), true);
  // 0x02: u16
  if (data?.l_linger !== undefined) view.setUint16(2, Number(data.l_linger), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSANETWORKEVENTS (size: 16)
 */
export interface WSANETWORKEVENTS {
  /** i32 */
  lNetworkEvents: number;
  /** array */
  iErrorCode: Deno.PointerValue | null;
}

export const sizeofWSANETWORKEVENTS = 16;

export function allocWSANETWORKEVENTS(data?: Partial<WSANETWORKEVENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofWSANETWORKEVENTS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.lNetworkEvents !== undefined) view.setInt32(0, Number(data.lNetworkEvents), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.iErrorCode !== undefined) view.setBigUint64(8, data.iErrorCode === null ? 0n : BigInt(util.toPointer(data.iErrorCode)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSAPROTOCOLCHAIN (size: 16)
 */
export interface WSAPROTOCOLCHAIN {
  /** i32 */
  ChainLen: number;
  /** array */
  ChainEntries: Deno.PointerValue | null;
}

export const sizeofWSAPROTOCOLCHAIN = 16;

export function allocWSAPROTOCOLCHAIN(data?: Partial<WSAPROTOCOLCHAIN>): Uint8Array {
  const buf = new Uint8Array(sizeofWSAPROTOCOLCHAIN);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ChainLen !== undefined) view.setInt32(0, Number(data.ChainLen), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ChainEntries !== undefined) view.setBigUint64(8, data.ChainEntries === null ? 0n : BigInt(util.toPointer(data.ChainEntries)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSAPROTOCOL_INFOA (size: 104)
 */
export interface WSAPROTOCOL_INFOA {
  /** u32 */
  dwServiceFlags1: number;
  /** u32 */
  dwServiceFlags2: number;
  /** u32 */
  dwServiceFlags3: number;
  /** u32 */
  dwServiceFlags4: number;
  /** u32 */
  dwProviderFlags: number;
  /** System.Guid */
  ProviderId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCatalogEntryId: number;
  /** Windows.Win32.Networking.WinSock.WSAPROTOCOLCHAIN */
  ProtocolChain: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  iVersion: number;
  /** i32 */
  iAddressFamily: number;
  /** i32 */
  iMaxSockAddr: number;
  /** i32 */
  iMinSockAddr: number;
  /** i32 */
  iSocketType: number;
  /** i32 */
  iProtocol: number;
  /** i32 */
  iProtocolMaxOffset: number;
  /** i32 */
  iNetworkByteOrder: number;
  /** i32 */
  iSecurityScheme: number;
  /** u32 */
  dwMessageSize: number;
  /** u32 */
  dwProviderReserved: number;
  /** array */
  szProtocol: Deno.PointerValue | null;
}

export const sizeofWSAPROTOCOL_INFOA = 104;

export function allocWSAPROTOCOL_INFOA(data?: Partial<WSAPROTOCOL_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSAPROTOCOL_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwServiceFlags1 !== undefined) view.setUint32(0, Number(data.dwServiceFlags1), true);
  // 0x04: u32
  if (data?.dwServiceFlags2 !== undefined) view.setUint32(4, Number(data.dwServiceFlags2), true);
  // 0x08: u32
  if (data?.dwServiceFlags3 !== undefined) view.setUint32(8, Number(data.dwServiceFlags3), true);
  // 0x0c: u32
  if (data?.dwServiceFlags4 !== undefined) view.setUint32(12, Number(data.dwServiceFlags4), true);
  // 0x10: u32
  if (data?.dwProviderFlags !== undefined) view.setUint32(16, Number(data.dwProviderFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ProviderId !== undefined) view.setBigUint64(24, data.ProviderId === null ? 0n : BigInt(util.toPointer(data.ProviderId)), true);
  // 0x20: u32
  if (data?.dwCatalogEntryId !== undefined) view.setUint32(32, Number(data.dwCatalogEntryId), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ProtocolChain !== undefined) view.setBigUint64(40, data.ProtocolChain === null ? 0n : BigInt(util.toPointer(data.ProtocolChain)), true);
  // 0x30: i32
  if (data?.iVersion !== undefined) view.setInt32(48, Number(data.iVersion), true);
  // 0x34: i32
  if (data?.iAddressFamily !== undefined) view.setInt32(52, Number(data.iAddressFamily), true);
  // 0x38: i32
  if (data?.iMaxSockAddr !== undefined) view.setInt32(56, Number(data.iMaxSockAddr), true);
  // 0x3c: i32
  if (data?.iMinSockAddr !== undefined) view.setInt32(60, Number(data.iMinSockAddr), true);
  // 0x40: i32
  if (data?.iSocketType !== undefined) view.setInt32(64, Number(data.iSocketType), true);
  // 0x44: i32
  if (data?.iProtocol !== undefined) view.setInt32(68, Number(data.iProtocol), true);
  // 0x48: i32
  if (data?.iProtocolMaxOffset !== undefined) view.setInt32(72, Number(data.iProtocolMaxOffset), true);
  // 0x4c: i32
  if (data?.iNetworkByteOrder !== undefined) view.setInt32(76, Number(data.iNetworkByteOrder), true);
  // 0x50: i32
  if (data?.iSecurityScheme !== undefined) view.setInt32(80, Number(data.iSecurityScheme), true);
  // 0x54: u32
  if (data?.dwMessageSize !== undefined) view.setUint32(84, Number(data.dwMessageSize), true);
  // 0x58: u32
  if (data?.dwProviderReserved !== undefined) view.setUint32(88, Number(data.dwProviderReserved), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.szProtocol !== undefined) view.setBigUint64(96, data.szProtocol === null ? 0n : BigInt(util.toPointer(data.szProtocol)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSAPROTOCOL_INFOW (size: 104)
 */
export interface WSAPROTOCOL_INFOW {
  /** u32 */
  dwServiceFlags1: number;
  /** u32 */
  dwServiceFlags2: number;
  /** u32 */
  dwServiceFlags3: number;
  /** u32 */
  dwServiceFlags4: number;
  /** u32 */
  dwProviderFlags: number;
  /** System.Guid */
  ProviderId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwCatalogEntryId: number;
  /** Windows.Win32.Networking.WinSock.WSAPROTOCOLCHAIN */
  ProtocolChain: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  iVersion: number;
  /** i32 */
  iAddressFamily: number;
  /** i32 */
  iMaxSockAddr: number;
  /** i32 */
  iMinSockAddr: number;
  /** i32 */
  iSocketType: number;
  /** i32 */
  iProtocol: number;
  /** i32 */
  iProtocolMaxOffset: number;
  /** i32 */
  iNetworkByteOrder: number;
  /** i32 */
  iSecurityScheme: number;
  /** u32 */
  dwMessageSize: number;
  /** u32 */
  dwProviderReserved: number;
  /** array */
  szProtocol: Deno.PointerValue | null;
}

export const sizeofWSAPROTOCOL_INFOW = 104;

export function allocWSAPROTOCOL_INFOW(data?: Partial<WSAPROTOCOL_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofWSAPROTOCOL_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwServiceFlags1 !== undefined) view.setUint32(0, Number(data.dwServiceFlags1), true);
  // 0x04: u32
  if (data?.dwServiceFlags2 !== undefined) view.setUint32(4, Number(data.dwServiceFlags2), true);
  // 0x08: u32
  if (data?.dwServiceFlags3 !== undefined) view.setUint32(8, Number(data.dwServiceFlags3), true);
  // 0x0c: u32
  if (data?.dwServiceFlags4 !== undefined) view.setUint32(12, Number(data.dwServiceFlags4), true);
  // 0x10: u32
  if (data?.dwProviderFlags !== undefined) view.setUint32(16, Number(data.dwProviderFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ProviderId !== undefined) view.setBigUint64(24, data.ProviderId === null ? 0n : BigInt(util.toPointer(data.ProviderId)), true);
  // 0x20: u32
  if (data?.dwCatalogEntryId !== undefined) view.setUint32(32, Number(data.dwCatalogEntryId), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ProtocolChain !== undefined) view.setBigUint64(40, data.ProtocolChain === null ? 0n : BigInt(util.toPointer(data.ProtocolChain)), true);
  // 0x30: i32
  if (data?.iVersion !== undefined) view.setInt32(48, Number(data.iVersion), true);
  // 0x34: i32
  if (data?.iAddressFamily !== undefined) view.setInt32(52, Number(data.iAddressFamily), true);
  // 0x38: i32
  if (data?.iMaxSockAddr !== undefined) view.setInt32(56, Number(data.iMaxSockAddr), true);
  // 0x3c: i32
  if (data?.iMinSockAddr !== undefined) view.setInt32(60, Number(data.iMinSockAddr), true);
  // 0x40: i32
  if (data?.iSocketType !== undefined) view.setInt32(64, Number(data.iSocketType), true);
  // 0x44: i32
  if (data?.iProtocol !== undefined) view.setInt32(68, Number(data.iProtocol), true);
  // 0x48: i32
  if (data?.iProtocolMaxOffset !== undefined) view.setInt32(72, Number(data.iProtocolMaxOffset), true);
  // 0x4c: i32
  if (data?.iNetworkByteOrder !== undefined) view.setInt32(76, Number(data.iNetworkByteOrder), true);
  // 0x50: i32
  if (data?.iSecurityScheme !== undefined) view.setInt32(80, Number(data.iSecurityScheme), true);
  // 0x54: u32
  if (data?.dwMessageSize !== undefined) view.setUint32(84, Number(data.dwMessageSize), true);
  // 0x58: u32
  if (data?.dwProviderReserved !== undefined) view.setUint32(88, Number(data.dwProviderReserved), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.szProtocol !== undefined) view.setBigUint64(96, data.szProtocol === null ? 0n : BigInt(util.toPointer(data.szProtocol)), true);
  return buf;
}

/**
 * _Unclaimed_e__Struct (size: 8)
 */
export interface _Unclaimed_e__Struct {
  /** u32 */
  UnitId: number;
  /** u32 */
  RejectDetail: number;
}

export const sizeof_Unclaimed_e__Struct = 8;

export function alloc_Unclaimed_e__Struct(data?: Partial<_Unclaimed_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Unclaimed_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnitId !== undefined) view.setUint32(0, Number(data.UnitId), true);
  // 0x04: u32
  if (data?.RejectDetail !== undefined) view.setUint32(4, Number(data.RejectDetail), true);
  return buf;
}

/**
 * _AccountSid_e__Struct (size: 16)
 */
export interface _AccountSid_e__Struct {
  /** u32 */
  Size: number;
  /** array */
  Data: Deno.PointerValue | null;
}

export const sizeof_AccountSid_e__Struct = 16;

export function alloc_AccountSid_e__Struct(data?: Partial<_AccountSid_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_AccountSid_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(util.toPointer(data.Data)), true);
  return buf;
}

/**
 * _Value_e__Union (size: 32)
 */
export interface _Value_e__Union {
  /** u32 */
  Null: number;
  /** u32 */
  Wildcard: number;
  /** System.Guid */
  TemplateGuid: Uint8Array | Deno.PointerValue | null;
  /** _AccountSid_e__Struct */
  AccountSid: Uint8Array | Deno.PointerValue | null;
  /** array */
  SecureId: Deno.PointerValue | null;
}

export const sizeof_Value_e__Union = 32;

export function alloc_Value_e__Union(data?: Partial<_Value_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Value_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Null !== undefined) view.setUint32(0, Number(data.Null), true);
  // 0x04: u32
  if (data?.Wildcard !== undefined) view.setUint32(4, Number(data.Wildcard), true);
  // 0x08: pointer
  if (data?.TemplateGuid !== undefined) view.setBigUint64(8, data.TemplateGuid === null ? 0n : BigInt(util.toPointer(data.TemplateGuid)), true);
  // 0x10: pointer
  if (data?.AccountSid !== undefined) view.setBigUint64(16, data.AccountSid === null ? 0n : BigInt(util.toPointer(data.AccountSid)), true);
  // 0x18: pointer
  if (data?.SecureId !== undefined) view.setBigUint64(24, data.SecureId === null ? 0n : BigInt(util.toPointer(data.SecureId)), true);
  return buf;
}

/**
 * Windows.Win32.Devices.BiometricFramework.WINBIO_IDENTITY (size: 16)
 */
export interface WINBIO_IDENTITY {
  /** u32 */
  Type: number;
  /** _Value_e__Union */
  Value: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINBIO_IDENTITY = 16;

export function allocWINBIO_IDENTITY(data?: Partial<WINBIO_IDENTITY>): Uint8Array {
  const buf = new Uint8Array(sizeofWINBIO_IDENTITY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Value !== undefined) view.setBigUint64(8, data.Value === null ? 0n : BigInt(util.toPointer(data.Value)), true);
  return buf;
}

/**
 * _UnclaimedIdentify_e__Struct (size: 24)
 */
export interface _UnclaimedIdentify_e__Struct {
  /** u32 */
  UnitId: number;
  /** Windows.Win32.Devices.BiometricFramework.WINBIO_IDENTITY */
  Identity: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  SubFactor: number;
  /** u32 */
  RejectDetail: number;
}

export const sizeof_UnclaimedIdentify_e__Struct = 24;

export function alloc_UnclaimedIdentify_e__Struct(data?: Partial<_UnclaimedIdentify_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_UnclaimedIdentify_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnitId !== undefined) view.setUint32(0, Number(data.UnitId), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Identity !== undefined) view.setBigUint64(8, data.Identity === null ? 0n : BigInt(util.toPointer(data.Identity)), true);
  // 0x10: u8
  if (data?.SubFactor !== undefined) view.setUint8(16, Number(data.SubFactor));
  // 0x11: u32
  if (data?.RejectDetail !== undefined) view.setUint32(17, Number(data.RejectDetail), true);
  // 0x15: pad3
  return buf;
}

export type HRESULT = number;

/**
 * _Error_e__Struct (size: 8)
 */
export interface _Error_e__Struct {
  /** Windows.Win32.Foundation.HRESULT */
  ErrorCode: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Error_e__Struct = 8;

export function alloc_Error_e__Struct(data?: Partial<_Error_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Error_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ErrorCode !== undefined) view.setBigUint64(0, data.ErrorCode === null ? 0n : BigInt(util.toPointer(data.ErrorCode)), true);
  return buf;
}

/**
 * _Parameters_e__Union (size: 24)
 */
export interface _Parameters_e__Union {
  /** _Unclaimed_e__Struct */
  Unclaimed: Uint8Array | Deno.PointerValue | null;
  /** _UnclaimedIdentify_e__Struct */
  UnclaimedIdentify: Uint8Array | Deno.PointerValue | null;
  /** _Error_e__Struct */
  Error: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_Parameters_e__Union = 24;

export function alloc_Parameters_e__Union(data?: Partial<_Parameters_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Parameters_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Unclaimed !== undefined) view.setBigUint64(0, data.Unclaimed === null ? 0n : BigInt(util.toPointer(data.Unclaimed)), true);
  // 0x08: pointer
  if (data?.UnclaimedIdentify !== undefined) view.setBigUint64(8, data.UnclaimedIdentify === null ? 0n : BigInt(util.toPointer(data.UnclaimedIdentify)), true);
  // 0x10: pointer
  if (data?.Error !== undefined) view.setBigUint64(16, data.Error === null ? 0n : BigInt(util.toPointer(data.Error)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSACOMPLETION (size: 16)
 */
export interface WSACOMPLETION {
  /** Windows.Win32.Networking.WinSock.WSACOMPLETIONTYPE */
  Type: WSACOMPLETIONTYPE;
  /** _Parameters_e__Union */
  Parameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWSACOMPLETION = 16;

export function allocWSACOMPLETION(data?: Partial<WSACOMPLETION>): Uint8Array {
  const buf = new Uint8Array(sizeofWSACOMPLETION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(8, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.AFPROTOCOLS (size: 8)
 */
export interface AFPROTOCOLS {
  /** i32 */
  iAddressFamily: number;
  /** i32 */
  iProtocol: number;
}

export const sizeofAFPROTOCOLS = 8;

export function allocAFPROTOCOLS(data?: Partial<AFPROTOCOLS>): Uint8Array {
  const buf = new Uint8Array(sizeofAFPROTOCOLS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iAddressFamily !== undefined) view.setInt32(0, Number(data.iAddressFamily), true);
  // 0x04: i32
  if (data?.iProtocol !== undefined) view.setInt32(4, Number(data.iProtocol), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSAVERSION (size: 8)
 */
export interface WSAVERSION {
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Networking.WinSock.WSAECOMPARATOR */
  ecHow: WSAECOMPARATOR;
}

export const sizeofWSAVERSION = 8;

export function allocWSAVERSION(data?: Partial<WSAVERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofWSAVERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: i32
  if (data?.ecHow !== undefined) view.setInt32(4, Number(data.ecHow), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSAQUERYSETA (size: 120)
 */
export interface WSAQUERYSETA {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszServiceInstanceName: string | null;
  /** ptr */
  lpServiceClassId: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpVersion: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszComment: string | null;
  /** u32 */
  dwNameSpace: number;
  /** ptr */
  lpNSProviderId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszContext: string | null;
  /** u32 */
  dwNumberOfProtocols: number;
  /** ptr */
  lpafpProtocols: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszQueryString: string | null;
  /** u32 */
  dwNumberOfCsAddrs: number;
  /** ptr */
  lpcsaBuffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwOutputFlags: number;
  /** ptr */
  lpBlob: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWSAQUERYSETA = 120;

export function allocWSAQUERYSETA(data?: Partial<WSAQUERYSETA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSAQUERYSETA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszServiceInstanceName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszServiceInstanceName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.lpServiceClassId !== undefined) view.setBigUint64(16, data.lpServiceClassId === null ? 0n : BigInt(util.toPointer(data.lpServiceClassId)), true);
  // 0x18: pointer
  if (data?.lpVersion !== undefined) view.setBigUint64(24, data.lpVersion === null ? 0n : BigInt(util.toPointer(data.lpVersion)), true);
  // 0x20: buffer
  if (data?.lpszComment !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpszComment);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(40, Number(data.dwNameSpace), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lpNSProviderId !== undefined) view.setBigUint64(48, data.lpNSProviderId === null ? 0n : BigInt(util.toPointer(data.lpNSProviderId)), true);
  // 0x38: buffer
  if (data?.lpszContext !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.lpszContext);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.dwNumberOfProtocols !== undefined) view.setUint32(64, Number(data.dwNumberOfProtocols), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.lpafpProtocols !== undefined) view.setBigUint64(72, data.lpafpProtocols === null ? 0n : BigInt(util.toPointer(data.lpafpProtocols)), true);
  // 0x50: buffer
  if (data?.lpszQueryString !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.lpszQueryString);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: u32
  if (data?.dwNumberOfCsAddrs !== undefined) view.setUint32(88, Number(data.dwNumberOfCsAddrs), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.lpcsaBuffer !== undefined) view.setBigUint64(96, data.lpcsaBuffer === null ? 0n : BigInt(util.toPointer(data.lpcsaBuffer)), true);
  // 0x68: u32
  if (data?.dwOutputFlags !== undefined) view.setUint32(104, Number(data.dwOutputFlags), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.lpBlob !== undefined) view.setBigUint64(112, data.lpBlob === null ? 0n : BigInt(util.toPointer(data.lpBlob)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSAQUERYSETW (size: 120)
 */
export interface WSAQUERYSETW {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszServiceInstanceName: string | null;
  /** ptr */
  lpServiceClassId: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpVersion: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszComment: string | null;
  /** u32 */
  dwNameSpace: number;
  /** ptr */
  lpNSProviderId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszContext: string | null;
  /** u32 */
  dwNumberOfProtocols: number;
  /** ptr */
  lpafpProtocols: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszQueryString: string | null;
  /** u32 */
  dwNumberOfCsAddrs: number;
  /** ptr */
  lpcsaBuffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwOutputFlags: number;
  /** ptr */
  lpBlob: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWSAQUERYSETW = 120;

export function allocWSAQUERYSETW(data?: Partial<WSAQUERYSETW>): Uint8Array {
  const buf = new Uint8Array(sizeofWSAQUERYSETW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszServiceInstanceName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszServiceInstanceName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.lpServiceClassId !== undefined) view.setBigUint64(16, data.lpServiceClassId === null ? 0n : BigInt(util.toPointer(data.lpServiceClassId)), true);
  // 0x18: pointer
  if (data?.lpVersion !== undefined) view.setBigUint64(24, data.lpVersion === null ? 0n : BigInt(util.toPointer(data.lpVersion)), true);
  // 0x20: buffer
  if (data?.lpszComment !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpszComment);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(40, Number(data.dwNameSpace), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lpNSProviderId !== undefined) view.setBigUint64(48, data.lpNSProviderId === null ? 0n : BigInt(util.toPointer(data.lpNSProviderId)), true);
  // 0x38: buffer
  if (data?.lpszContext !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.lpszContext);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.dwNumberOfProtocols !== undefined) view.setUint32(64, Number(data.dwNumberOfProtocols), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.lpafpProtocols !== undefined) view.setBigUint64(72, data.lpafpProtocols === null ? 0n : BigInt(util.toPointer(data.lpafpProtocols)), true);
  // 0x50: buffer
  if (data?.lpszQueryString !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.lpszQueryString);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: u32
  if (data?.dwNumberOfCsAddrs !== undefined) view.setUint32(88, Number(data.dwNumberOfCsAddrs), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.lpcsaBuffer !== undefined) view.setBigUint64(96, data.lpcsaBuffer === null ? 0n : BigInt(util.toPointer(data.lpcsaBuffer)), true);
  // 0x68: u32
  if (data?.dwOutputFlags !== undefined) view.setUint32(104, Number(data.dwOutputFlags), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.lpBlob !== undefined) view.setBigUint64(112, data.lpBlob === null ? 0n : BigInt(util.toPointer(data.lpBlob)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSAQUERYSET2A (size: 112)
 */
export interface WSAQUERYSET2A {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszServiceInstanceName: string | null;
  /** ptr */
  lpVersion: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszComment: string | null;
  /** u32 */
  dwNameSpace: number;
  /** ptr */
  lpNSProviderId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszContext: string | null;
  /** u32 */
  dwNumberOfProtocols: number;
  /** ptr */
  lpafpProtocols: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszQueryString: string | null;
  /** u32 */
  dwNumberOfCsAddrs: number;
  /** ptr */
  lpcsaBuffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwOutputFlags: number;
  /** ptr */
  lpBlob: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWSAQUERYSET2A = 112;

export function allocWSAQUERYSET2A(data?: Partial<WSAQUERYSET2A>): Uint8Array {
  const buf = new Uint8Array(sizeofWSAQUERYSET2A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszServiceInstanceName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszServiceInstanceName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.lpVersion !== undefined) view.setBigUint64(16, data.lpVersion === null ? 0n : BigInt(util.toPointer(data.lpVersion)), true);
  // 0x18: buffer
  if (data?.lpszComment !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpszComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(32, Number(data.dwNameSpace), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpNSProviderId !== undefined) view.setBigUint64(40, data.lpNSProviderId === null ? 0n : BigInt(util.toPointer(data.lpNSProviderId)), true);
  // 0x30: buffer
  if (data?.lpszContext !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpszContext);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.dwNumberOfProtocols !== undefined) view.setUint32(56, Number(data.dwNumberOfProtocols), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.lpafpProtocols !== undefined) view.setBigUint64(64, data.lpafpProtocols === null ? 0n : BigInt(util.toPointer(data.lpafpProtocols)), true);
  // 0x48: buffer
  if (data?.lpszQueryString !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.lpszQueryString);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.dwNumberOfCsAddrs !== undefined) view.setUint32(80, Number(data.dwNumberOfCsAddrs), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.lpcsaBuffer !== undefined) view.setBigUint64(88, data.lpcsaBuffer === null ? 0n : BigInt(util.toPointer(data.lpcsaBuffer)), true);
  // 0x60: u32
  if (data?.dwOutputFlags !== undefined) view.setUint32(96, Number(data.dwOutputFlags), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.lpBlob !== undefined) view.setBigUint64(104, data.lpBlob === null ? 0n : BigInt(util.toPointer(data.lpBlob)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSAQUERYSET2W (size: 112)
 */
export interface WSAQUERYSET2W {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszServiceInstanceName: string | null;
  /** ptr */
  lpVersion: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszComment: string | null;
  /** u32 */
  dwNameSpace: number;
  /** ptr */
  lpNSProviderId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszContext: string | null;
  /** u32 */
  dwNumberOfProtocols: number;
  /** ptr */
  lpafpProtocols: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszQueryString: string | null;
  /** u32 */
  dwNumberOfCsAddrs: number;
  /** ptr */
  lpcsaBuffer: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwOutputFlags: number;
  /** ptr */
  lpBlob: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWSAQUERYSET2W = 112;

export function allocWSAQUERYSET2W(data?: Partial<WSAQUERYSET2W>): Uint8Array {
  const buf = new Uint8Array(sizeofWSAQUERYSET2W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.lpszServiceInstanceName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszServiceInstanceName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.lpVersion !== undefined) view.setBigUint64(16, data.lpVersion === null ? 0n : BigInt(util.toPointer(data.lpVersion)), true);
  // 0x18: buffer
  if (data?.lpszComment !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(32, Number(data.dwNameSpace), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpNSProviderId !== undefined) view.setBigUint64(40, data.lpNSProviderId === null ? 0n : BigInt(util.toPointer(data.lpNSProviderId)), true);
  // 0x30: buffer
  if (data?.lpszContext !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpszContext);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: u32
  if (data?.dwNumberOfProtocols !== undefined) view.setUint32(56, Number(data.dwNumberOfProtocols), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.lpafpProtocols !== undefined) view.setBigUint64(64, data.lpafpProtocols === null ? 0n : BigInt(util.toPointer(data.lpafpProtocols)), true);
  // 0x48: buffer
  if (data?.lpszQueryString !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.lpszQueryString);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: u32
  if (data?.dwNumberOfCsAddrs !== undefined) view.setUint32(80, Number(data.dwNumberOfCsAddrs), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.lpcsaBuffer !== undefined) view.setBigUint64(88, data.lpcsaBuffer === null ? 0n : BigInt(util.toPointer(data.lpcsaBuffer)), true);
  // 0x60: u32
  if (data?.dwOutputFlags !== undefined) view.setUint32(96, Number(data.dwOutputFlags), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.lpBlob !== undefined) view.setBigUint64(104, data.lpBlob === null ? 0n : BigInt(util.toPointer(data.lpBlob)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSANSCLASSINFOA (size: 32)
 */
export interface WSANSCLASSINFOA {
  /** Windows.Win32.Foundation.PSTR */
  lpszName: string | null;
  /** u32 */
  dwNameSpace: number;
  /** u32 */
  dwValueType: number;
  /** u32 */
  dwValueSize: number;
  /** ptr */
  lpValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWSANSCLASSINFOA = 32;

export function allocWSANSCLASSINFOA(data?: Partial<WSANSCLASSINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSANSCLASSINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpszName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(8, Number(data.dwNameSpace), true);
  // 0x0c: u32
  if (data?.dwValueType !== undefined) view.setUint32(12, Number(data.dwValueType), true);
  // 0x10: u32
  if (data?.dwValueSize !== undefined) view.setUint32(16, Number(data.dwValueSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpValue !== undefined) view.setBigUint64(24, data.lpValue === null ? 0n : BigInt(util.toPointer(data.lpValue)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSANSCLASSINFOW (size: 32)
 */
export interface WSANSCLASSINFOW {
  /** Windows.Win32.Foundation.PWSTR */
  lpszName: string | null;
  /** u32 */
  dwNameSpace: number;
  /** u32 */
  dwValueType: number;
  /** u32 */
  dwValueSize: number;
  /** ptr */
  lpValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWSANSCLASSINFOW = 32;

export function allocWSANSCLASSINFOW(data?: Partial<WSANSCLASSINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofWSANSCLASSINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(8, Number(data.dwNameSpace), true);
  // 0x0c: u32
  if (data?.dwValueType !== undefined) view.setUint32(12, Number(data.dwValueType), true);
  // 0x10: u32
  if (data?.dwValueSize !== undefined) view.setUint32(16, Number(data.dwValueSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpValue !== undefined) view.setBigUint64(24, data.lpValue === null ? 0n : BigInt(util.toPointer(data.lpValue)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSASERVICECLASSINFOA (size: 32)
 */
export interface WSASERVICECLASSINFOA {
  /** ptr */
  lpServiceClassId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  lpszServiceClassName: string | null;
  /** u32 */
  dwCount: number;
  /** ptr */
  lpClassInfos: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWSASERVICECLASSINFOA = 32;

export function allocWSASERVICECLASSINFOA(data?: Partial<WSASERVICECLASSINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSASERVICECLASSINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpServiceClassId !== undefined) view.setBigUint64(0, data.lpServiceClassId === null ? 0n : BigInt(util.toPointer(data.lpServiceClassId)), true);
  // 0x08: buffer
  if (data?.lpszServiceClassName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpszServiceClassName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwCount !== undefined) view.setUint32(16, Number(data.dwCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpClassInfos !== undefined) view.setBigUint64(24, data.lpClassInfos === null ? 0n : BigInt(util.toPointer(data.lpClassInfos)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSASERVICECLASSINFOW (size: 32)
 */
export interface WSASERVICECLASSINFOW {
  /** ptr */
  lpServiceClassId: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpszServiceClassName: string | null;
  /** u32 */
  dwCount: number;
  /** ptr */
  lpClassInfos: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWSASERVICECLASSINFOW = 32;

export function allocWSASERVICECLASSINFOW(data?: Partial<WSASERVICECLASSINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofWSASERVICECLASSINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpServiceClassId !== undefined) view.setBigUint64(0, data.lpServiceClassId === null ? 0n : BigInt(util.toPointer(data.lpServiceClassId)), true);
  // 0x08: buffer
  if (data?.lpszServiceClassName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpszServiceClassName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.dwCount !== undefined) view.setUint32(16, Number(data.dwCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpClassInfos !== undefined) view.setBigUint64(24, data.lpClassInfos === null ? 0n : BigInt(util.toPointer(data.lpClassInfos)), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Networking.WinSock.WSANAMESPACE_INFOA (size: 32)
 */
export interface WSANAMESPACE_INFOA {
  /** System.Guid */
  NSProviderId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNameSpace: number;
  /** Windows.Win32.Foundation.BOOL */
  fActive: boolean;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszIdentifier: string | null;
}

export const sizeofWSANAMESPACE_INFOA = 32;

export function allocWSANAMESPACE_INFOA(data?: Partial<WSANAMESPACE_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSANAMESPACE_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NSProviderId !== undefined) view.setBigUint64(0, data.NSProviderId === null ? 0n : BigInt(util.toPointer(data.NSProviderId)), true);
  // 0x08: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(8, Number(data.dwNameSpace), true);
  // 0x0c: i32
  if (data?.fActive !== undefined) view.setInt32(12, Number(data.fActive), true);
  // 0x10: u32
  if (data?.dwVersion !== undefined) view.setUint32(16, Number(data.dwVersion), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpszIdentifier !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpszIdentifier);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSANAMESPACE_INFOW (size: 32)
 */
export interface WSANAMESPACE_INFOW {
  /** System.Guid */
  NSProviderId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNameSpace: number;
  /** Windows.Win32.Foundation.BOOL */
  fActive: boolean;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszIdentifier: string | null;
}

export const sizeofWSANAMESPACE_INFOW = 32;

export function allocWSANAMESPACE_INFOW(data?: Partial<WSANAMESPACE_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofWSANAMESPACE_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NSProviderId !== undefined) view.setBigUint64(0, data.NSProviderId === null ? 0n : BigInt(util.toPointer(data.NSProviderId)), true);
  // 0x08: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(8, Number(data.dwNameSpace), true);
  // 0x0c: i32
  if (data?.fActive !== undefined) view.setInt32(12, Number(data.fActive), true);
  // 0x10: u32
  if (data?.dwVersion !== undefined) view.setUint32(16, Number(data.dwVersion), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpszIdentifier !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszIdentifier);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

/**
 * Windows.Win32.System.Com.BLOB (size: 16)
 */
export interface BLOB {
  /** u32 */
  cbSize: number;
  /** ptr */
  pBlobData: Deno.PointerValue | Uint8Array | null;
}

export const sizeofBLOB = 16;

export function allocBLOB(data?: Partial<BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofBLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pBlobData !== undefined) view.setBigUint64(8, data.pBlobData === null ? 0n : BigInt(util.toPointer(data.pBlobData)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSANAMESPACE_INFOEXA (size: 40)
 */
export interface WSANAMESPACE_INFOEXA {
  /** System.Guid */
  NSProviderId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNameSpace: number;
  /** Windows.Win32.Foundation.BOOL */
  fActive: boolean;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PSTR */
  lpszIdentifier: string | null;
  /** Windows.Win32.System.Com.BLOB */
  ProviderSpecific: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWSANAMESPACE_INFOEXA = 40;

export function allocWSANAMESPACE_INFOEXA(data?: Partial<WSANAMESPACE_INFOEXA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSANAMESPACE_INFOEXA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NSProviderId !== undefined) view.setBigUint64(0, data.NSProviderId === null ? 0n : BigInt(util.toPointer(data.NSProviderId)), true);
  // 0x08: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(8, Number(data.dwNameSpace), true);
  // 0x0c: i32
  if (data?.fActive !== undefined) view.setInt32(12, Number(data.fActive), true);
  // 0x10: u32
  if (data?.dwVersion !== undefined) view.setUint32(16, Number(data.dwVersion), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpszIdentifier !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpszIdentifier);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.ProviderSpecific !== undefined) view.setBigUint64(32, data.ProviderSpecific === null ? 0n : BigInt(util.toPointer(data.ProviderSpecific)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSANAMESPACE_INFOEXW (size: 40)
 */
export interface WSANAMESPACE_INFOEXW {
  /** System.Guid */
  NSProviderId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwNameSpace: number;
  /** Windows.Win32.Foundation.BOOL */
  fActive: boolean;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpszIdentifier: string | null;
  /** Windows.Win32.System.Com.BLOB */
  ProviderSpecific: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWSANAMESPACE_INFOEXW = 40;

export function allocWSANAMESPACE_INFOEXW(data?: Partial<WSANAMESPACE_INFOEXW>): Uint8Array {
  const buf = new Uint8Array(sizeofWSANAMESPACE_INFOEXW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.NSProviderId !== undefined) view.setBigUint64(0, data.NSProviderId === null ? 0n : BigInt(util.toPointer(data.NSProviderId)), true);
  // 0x08: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(8, Number(data.dwNameSpace), true);
  // 0x0c: i32
  if (data?.fActive !== undefined) view.setInt32(12, Number(data.fActive), true);
  // 0x10: u32
  if (data?.dwVersion !== undefined) view.setUint32(16, Number(data.dwVersion), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.lpszIdentifier !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszIdentifier);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.ProviderSpecific !== undefined) view.setBigUint64(32, data.ProviderSpecific === null ? 0n : BigInt(util.toPointer(data.ProviderSpecific)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSAPOLLFD (size: 16)
 */
export interface WSAPOLLFD {
  /** Windows.Win32.Networking.WinSock.SOCKET */
  fd: Uint8Array | Deno.PointerValue | null;
  /** i16 */
  events: number;
  /** i16 */
  revents: number;
}

export const sizeofWSAPOLLFD = 16;

export function allocWSAPOLLFD(data?: Partial<WSAPOLLFD>): Uint8Array {
  const buf = new Uint8Array(sizeofWSAPOLLFD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.fd !== undefined) view.setBigUint64(0, data.fd === null ? 0n : BigInt(util.toPointer(data.fd)), true);
  // 0x08: i16
  if (data?.events !== undefined) view.setInt16(8, Number(data.events), true);
  // 0x0a: i16
  if (data?.revents !== undefined) view.setInt16(10, Number(data.revents), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCK_NOTIFY_REGISTRATION (size: 24)
 */
export interface SOCK_NOTIFY_REGISTRATION {
  /** Windows.Win32.Networking.WinSock.SOCKET */
  socket: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  completionKey: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  eventFilter: number;
  /** u8 */
  operation: number;
  /** u8 */
  triggerFlags: number;
  /** u32 */
  registrationResult: number;
}

export const sizeofSOCK_NOTIFY_REGISTRATION = 24;

export function allocSOCK_NOTIFY_REGISTRATION(data?: Partial<SOCK_NOTIFY_REGISTRATION>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCK_NOTIFY_REGISTRATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.socket !== undefined) view.setBigUint64(0, data.socket === null ? 0n : BigInt(util.toPointer(data.socket)), true);
  // 0x08: pointer
  if (data?.completionKey !== undefined) view.setBigUint64(8, data.completionKey === null ? 0n : BigInt(util.toPointer(data.completionKey)), true);
  // 0x10: u16
  if (data?.eventFilter !== undefined) view.setUint16(16, Number(data.eventFilter), true);
  // 0x12: u8
  if (data?.operation !== undefined) view.setUint8(18, Number(data.operation));
  // 0x13: u8
  if (data?.triggerFlags !== undefined) view.setUint8(19, Number(data.triggerFlags));
  // 0x14: u32
  if (data?.registrationResult !== undefined) view.setUint32(20, Number(data.registrationResult), true);
  return buf;
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue | null;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(util.toPointer(data.ExceptionCode)), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(util.toPointer(data.ExceptionAddress)), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(util.toPointer(data.ExceptionInformation)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(util.toPointer(data.ExceptionRecord)), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(util.toPointer(data.hProcess)), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(util.toPointer(data.hThread)), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(util.toPointer(data.lpBaseOfImage)), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(util.toPointer(data.lpThreadLocalBase)), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(util.toPointer(data.lpStartAddress)), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue | null;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(util.toPointer(data.hFile)), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(util.toPointer(data.lpImageName)), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array | null;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(util.toPointer(data.lpBaseOfDll)), true);
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(util.toPointer(data.Exception)), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(util.toPointer(data.CreateThread)), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(util.toPointer(data.CreateProcessInfo)), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(util.toPointer(data.ExitThread)), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(util.toPointer(data.ExitProcess)), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(util.toPointer(data.LoadDll)), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(util.toPointer(data.UnloadDll)), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(util.toPointer(data.DebugString)), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(util.toPointer(data.RipInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IN6_ADDR (size: 8)
 */
export interface IN6_ADDR {
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIN6_ADDR = 8;

export function allocIN6_ADDR(data?: Partial<IN6_ADDR>): Uint8Array {
  const buf = new Uint8Array(sizeofIN6_ADDR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.u !== undefined) view.setBigUint64(0, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.sockaddr_in6_old (size: 16)
 */
export interface sockaddr_in6_old {
  /** i16 */
  sin6_family: number;
  /** u16 */
  sin6_port: number;
  /** u32 */
  sin6_flowinfo: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  sin6_addr: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSockaddr_in6_old = 16;

export function allocSockaddr_in6_old(data?: Partial<sockaddr_in6_old>): Uint8Array {
  const buf = new Uint8Array(sizeofSockaddr_in6_old);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.sin6_family !== undefined) view.setInt16(0, Number(data.sin6_family), true);
  // 0x02: u16
  if (data?.sin6_port !== undefined) view.setUint16(2, Number(data.sin6_port), true);
  // 0x04: u32
  if (data?.sin6_flowinfo !== undefined) view.setUint32(4, Number(data.sin6_flowinfo), true);
  // 0x08: pointer
  if (data?.sin6_addr !== undefined) view.setBigUint64(8, data.sin6_addr === null ? 0n : BigInt(util.toPointer(data.sin6_addr)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.sockaddr_gen (size: 24)
 */
export interface sockaddr_gen {
  /** Windows.Win32.Networking.WinSock.SOCKADDR */
  Address: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_IN */
  AddressIn: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.sockaddr_in6_old */
  AddressIn6: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSockaddr_gen = 24;

export function allocSockaddr_gen(data?: Partial<sockaddr_gen>): Uint8Array {
  const buf = new Uint8Array(sizeofSockaddr_gen);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Address !== undefined) view.setBigUint64(0, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  // 0x08: pointer
  if (data?.AddressIn !== undefined) view.setBigUint64(8, data.AddressIn === null ? 0n : BigInt(util.toPointer(data.AddressIn)), true);
  // 0x10: pointer
  if (data?.AddressIn6 !== undefined) view.setBigUint64(16, data.AddressIn6 === null ? 0n : BigInt(util.toPointer(data.AddressIn6)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.INTERFACE_INFO (size: 32)
 */
export interface INTERFACE_INFO {
  /** u32 */
  iiFlags: number;
  /** Windows.Win32.Networking.WinSock.sockaddr_gen */
  iiAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.sockaddr_gen */
  iiBroadcastAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.sockaddr_gen */
  iiNetmask: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTERFACE_INFO = 32;

export function allocINTERFACE_INFO(data?: Partial<INTERFACE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERFACE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iiFlags !== undefined) view.setUint32(0, Number(data.iiFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.iiAddress !== undefined) view.setBigUint64(8, data.iiAddress === null ? 0n : BigInt(util.toPointer(data.iiAddress)), true);
  // 0x10: pointer
  if (data?.iiBroadcastAddress !== undefined) view.setBigUint64(16, data.iiBroadcastAddress === null ? 0n : BigInt(util.toPointer(data.iiBroadcastAddress)), true);
  // 0x18: pointer
  if (data?.iiNetmask !== undefined) view.setBigUint64(24, data.iiNetmask === null ? 0n : BigInt(util.toPointer(data.iiNetmask)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.INTERFACE_INFO_EX (size: 32)
 */
export interface INTERFACE_INFO_EX {
  /** u32 */
  iiFlags: number;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  iiAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  iiBroadcastAddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.SOCKET_ADDRESS */
  iiNetmask: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINTERFACE_INFO_EX = 32;

export function allocINTERFACE_INFO_EX(data?: Partial<INTERFACE_INFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofINTERFACE_INFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.iiFlags !== undefined) view.setUint32(0, Number(data.iiFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.iiAddress !== undefined) view.setBigUint64(8, data.iiAddress === null ? 0n : BigInt(util.toPointer(data.iiAddress)), true);
  // 0x10: pointer
  if (data?.iiBroadcastAddress !== undefined) view.setBigUint64(16, data.iiBroadcastAddress === null ? 0n : BigInt(util.toPointer(data.iiBroadcastAddress)), true);
  // 0x18: pointer
  if (data?.iiNetmask !== undefined) view.setBigUint64(24, data.iiNetmask === null ? 0n : BigInt(util.toPointer(data.iiNetmask)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_IN6 (size: 24)
 */
export interface SOCKADDR_IN6 {
  /** u16 */
  sin6_family: number;
  /** u16 */
  sin6_port: number;
  /** u32 */
  sin6_flowinfo: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  sin6_addr: Uint8Array | Deno.PointerValue | null;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSOCKADDR_IN6 = 24;

export function allocSOCKADDR_IN6(data?: Partial<SOCKADDR_IN6>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_IN6);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sin6_family !== undefined) view.setUint16(0, Number(data.sin6_family), true);
  // 0x02: u16
  if (data?.sin6_port !== undefined) view.setUint16(2, Number(data.sin6_port), true);
  // 0x04: u32
  if (data?.sin6_flowinfo !== undefined) view.setUint32(4, Number(data.sin6_flowinfo), true);
  // 0x08: pointer
  if (data?.sin6_addr !== undefined) view.setBigUint64(8, data.sin6_addr === null ? 0n : BigInt(util.toPointer(data.sin6_addr)), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_IN6_W2KSP1 (size: 24)
 */
export interface SOCKADDR_IN6_W2KSP1 {
  /** i16 */
  sin6_family: number;
  /** u16 */
  sin6_port: number;
  /** u32 */
  sin6_flowinfo: number;
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  sin6_addr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  sin6_scope_id: number;
}

export const sizeofSOCKADDR_IN6_W2KSP1 = 24;

export function allocSOCKADDR_IN6_W2KSP1(data?: Partial<SOCKADDR_IN6_W2KSP1>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_IN6_W2KSP1);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.sin6_family !== undefined) view.setInt16(0, Number(data.sin6_family), true);
  // 0x02: u16
  if (data?.sin6_port !== undefined) view.setUint16(2, Number(data.sin6_port), true);
  // 0x04: u32
  if (data?.sin6_flowinfo !== undefined) view.setUint32(4, Number(data.sin6_flowinfo), true);
  // 0x08: pointer
  if (data?.sin6_addr !== undefined) view.setBigUint64(8, data.sin6_addr === null ? 0n : BigInt(util.toPointer(data.sin6_addr)), true);
  // 0x10: u32
  if (data?.sin6_scope_id !== undefined) view.setUint32(16, Number(data.sin6_scope_id), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_INET (size: 24)
 */
export interface SOCKADDR_INET {
  /** Windows.Win32.Networking.WinSock.SOCKADDR_IN */
  Ipv4: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_IN6 */
  Ipv6: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  si_family: number;
}

export const sizeofSOCKADDR_INET = 24;

export function allocSOCKADDR_INET(data?: Partial<SOCKADDR_INET>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_INET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ipv4 !== undefined) view.setBigUint64(0, data.Ipv4 === null ? 0n : BigInt(util.toPointer(data.Ipv4)), true);
  // 0x08: pointer
  if (data?.Ipv6 !== undefined) view.setBigUint64(8, data.Ipv6 === null ? 0n : BigInt(util.toPointer(data.Ipv6)), true);
  // 0x10: u16
  if (data?.si_family !== undefined) view.setUint16(16, Number(data.si_family), true);
  // 0x12: pad6
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_IN6_PAIR (size: 16)
 */
export interface SOCKADDR_IN6_PAIR {
  /** ptr */
  SourceAddress: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  DestinationAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSOCKADDR_IN6_PAIR = 16;

export function allocSOCKADDR_IN6_PAIR(data?: Partial<SOCKADDR_IN6_PAIR>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_IN6_PAIR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SourceAddress !== undefined) view.setBigUint64(0, data.SourceAddress === null ? 0n : BigInt(util.toPointer(data.SourceAddress)), true);
  // 0x08: pointer
  if (data?.DestinationAddress !== undefined) view.setBigUint64(8, data.DestinationAddress === null ? 0n : BigInt(util.toPointer(data.DestinationAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IP_MREQ (size: 16)
 */
export interface IP_MREQ {
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  imr_multiaddr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  imr_interface: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIP_MREQ = 16;

export function allocIP_MREQ(data?: Partial<IP_MREQ>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_MREQ);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.imr_multiaddr !== undefined) view.setBigUint64(0, data.imr_multiaddr === null ? 0n : BigInt(util.toPointer(data.imr_multiaddr)), true);
  // 0x08: pointer
  if (data?.imr_interface !== undefined) view.setBigUint64(8, data.imr_interface === null ? 0n : BigInt(util.toPointer(data.imr_interface)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IP_MREQ_SOURCE (size: 24)
 */
export interface IP_MREQ_SOURCE {
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  imr_multiaddr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  imr_sourceaddr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  imr_interface: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIP_MREQ_SOURCE = 24;

export function allocIP_MREQ_SOURCE(data?: Partial<IP_MREQ_SOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_MREQ_SOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.imr_multiaddr !== undefined) view.setBigUint64(0, data.imr_multiaddr === null ? 0n : BigInt(util.toPointer(data.imr_multiaddr)), true);
  // 0x08: pointer
  if (data?.imr_sourceaddr !== undefined) view.setBigUint64(8, data.imr_sourceaddr === null ? 0n : BigInt(util.toPointer(data.imr_sourceaddr)), true);
  // 0x10: pointer
  if (data?.imr_interface !== undefined) view.setBigUint64(16, data.imr_interface === null ? 0n : BigInt(util.toPointer(data.imr_interface)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IP_MSFILTER (size: 32)
 */
export interface IP_MSFILTER {
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  imsf_multiaddr: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  imsf_interface: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.MULTICAST_MODE_TYPE */
  imsf_fmode: MULTICAST_MODE_TYPE;
  /** u32 */
  imsf_numsrc: number;
  /** array */
  imsf_slist: Deno.PointerValue | null;
}

export const sizeofIP_MSFILTER = 32;

export function allocIP_MSFILTER(data?: Partial<IP_MSFILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofIP_MSFILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.imsf_multiaddr !== undefined) view.setBigUint64(0, data.imsf_multiaddr === null ? 0n : BigInt(util.toPointer(data.imsf_multiaddr)), true);
  // 0x08: pointer
  if (data?.imsf_interface !== undefined) view.setBigUint64(8, data.imsf_interface === null ? 0n : BigInt(util.toPointer(data.imsf_interface)), true);
  // 0x10: i32
  if (data?.imsf_fmode !== undefined) view.setInt32(16, Number(data.imsf_fmode), true);
  // 0x14: u32
  if (data?.imsf_numsrc !== undefined) view.setUint32(20, Number(data.imsf_numsrc), true);
  // 0x18: pointer
  if (data?.imsf_slist !== undefined) view.setBigUint64(24, data.imsf_slist === null ? 0n : BigInt(util.toPointer(data.imsf_slist)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IPV6_MREQ (size: 16)
 */
export interface IPV6_MREQ {
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  ipv6mr_multiaddr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ipv6mr_interface: number;
}

export const sizeofIPV6_MREQ = 16;

export function allocIPV6_MREQ(data?: Partial<IPV6_MREQ>): Uint8Array {
  const buf = new Uint8Array(sizeofIPV6_MREQ);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ipv6mr_multiaddr !== undefined) view.setBigUint64(0, data.ipv6mr_multiaddr === null ? 0n : BigInt(util.toPointer(data.ipv6mr_multiaddr)), true);
  // 0x08: u32
  if (data?.ipv6mr_interface !== undefined) view.setUint32(8, Number(data.ipv6mr_interface), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.GROUP_REQ (size: 16)
 */
export interface GROUP_REQ {
  /** u32 */
  gr_interface: number;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  gr_group: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGROUP_REQ = 16;

export function allocGROUP_REQ(data?: Partial<GROUP_REQ>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_REQ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.gr_interface !== undefined) view.setUint32(0, Number(data.gr_interface), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.gr_group !== undefined) view.setBigUint64(8, data.gr_group === null ? 0n : BigInt(util.toPointer(data.gr_group)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.GROUP_SOURCE_REQ (size: 24)
 */
export interface GROUP_SOURCE_REQ {
  /** u32 */
  gsr_interface: number;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  gsr_group: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  gsr_source: Uint8Array | Deno.PointerValue | null;
}

export const sizeofGROUP_SOURCE_REQ = 24;

export function allocGROUP_SOURCE_REQ(data?: Partial<GROUP_SOURCE_REQ>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_SOURCE_REQ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.gsr_interface !== undefined) view.setUint32(0, Number(data.gsr_interface), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.gsr_group !== undefined) view.setBigUint64(8, data.gsr_group === null ? 0n : BigInt(util.toPointer(data.gsr_group)), true);
  // 0x10: pointer
  if (data?.gsr_source !== undefined) view.setBigUint64(16, data.gsr_source === null ? 0n : BigInt(util.toPointer(data.gsr_source)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.GROUP_FILTER (size: 32)
 */
export interface GROUP_FILTER {
  /** u32 */
  gf_interface: number;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  gf_group: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.MULTICAST_MODE_TYPE */
  gf_fmode: MULTICAST_MODE_TYPE;
  /** u32 */
  gf_numsrc: number;
  /** array */
  gf_slist: Deno.PointerValue | null;
}

export const sizeofGROUP_FILTER = 32;

export function allocGROUP_FILTER(data?: Partial<GROUP_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofGROUP_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.gf_interface !== undefined) view.setUint32(0, Number(data.gf_interface), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.gf_group !== undefined) view.setBigUint64(8, data.gf_group === null ? 0n : BigInt(util.toPointer(data.gf_group)), true);
  // 0x10: i32
  if (data?.gf_fmode !== undefined) view.setInt32(16, Number(data.gf_fmode), true);
  // 0x14: u32
  if (data?.gf_numsrc !== undefined) view.setUint32(20, Number(data.gf_numsrc), true);
  // 0x18: pointer
  if (data?.gf_slist !== undefined) view.setBigUint64(24, data.gf_slist === null ? 0n : BigInt(util.toPointer(data.gf_slist)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IN_PKTINFO (size: 16)
 */
export interface IN_PKTINFO {
  /** Windows.Win32.Networking.WinSock.IN_ADDR */
  ipi_addr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ipi_ifindex: number;
}

export const sizeofIN_PKTINFO = 16;

export function allocIN_PKTINFO(data?: Partial<IN_PKTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIN_PKTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ipi_addr !== undefined) view.setBigUint64(0, data.ipi_addr === null ? 0n : BigInt(util.toPointer(data.ipi_addr)), true);
  // 0x08: u32
  if (data?.ipi_ifindex !== undefined) view.setUint32(8, Number(data.ipi_ifindex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IN6_PKTINFO (size: 16)
 */
export interface IN6_PKTINFO {
  /** Windows.Win32.Networking.WinSock.IN6_ADDR */
  ipi6_addr: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ipi6_ifindex: number;
}

export const sizeofIN6_PKTINFO = 16;

export function allocIN6_PKTINFO(data?: Partial<IN6_PKTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofIN6_PKTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ipi6_addr !== undefined) view.setBigUint64(0, data.ipi6_addr === null ? 0n : BigInt(util.toPointer(data.ipi6_addr)), true);
  // 0x08: u32
  if (data?.ipi6_ifindex !== undefined) view.setUint32(8, Number(data.ipi6_ifindex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IN_PKTINFO_EX (size: 16)
 */
export interface IN_PKTINFO_EX {
  /** Windows.Win32.Networking.WinSock.IN_PKTINFO */
  pkt_info: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.SCOPE_ID */
  scope_id: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIN_PKTINFO_EX = 16;

export function allocIN_PKTINFO_EX(data?: Partial<IN_PKTINFO_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofIN_PKTINFO_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pkt_info !== undefined) view.setBigUint64(0, data.pkt_info === null ? 0n : BigInt(util.toPointer(data.pkt_info)), true);
  // 0x08: pointer
  if (data?.scope_id !== undefined) view.setBigUint64(8, data.scope_id === null ? 0n : BigInt(util.toPointer(data.scope_id)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.in6_pktinfo_ex (size: 16)
 */
export interface in6_pktinfo_ex {
  /** Windows.Win32.Networking.WinSock.IN6_PKTINFO */
  pkt_info: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.SCOPE_ID */
  scope_id: Uint8Array | Deno.PointerValue | null;
}

export const sizeofIn6_pktinfo_ex = 16;

export function allocIn6_pktinfo_ex(data?: Partial<in6_pktinfo_ex>): Uint8Array {
  const buf = new Uint8Array(sizeofIn6_pktinfo_ex);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pkt_info !== undefined) view.setBigUint64(0, data.pkt_info === null ? 0n : BigInt(util.toPointer(data.pkt_info)), true);
  // 0x08: pointer
  if (data?.scope_id !== undefined) view.setBigUint64(8, data.scope_id === null ? 0n : BigInt(util.toPointer(data.scope_id)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IN_RECVERR (size: 16)
 */
export interface IN_RECVERR {
  /** Windows.Win32.Networking.WinSock.IPPROTO */
  protocol: IPPROTO;
  /** u32 */
  info: number;
  /** u8 */
  type: number;
  /** u8 */
  code: number;
}

export const sizeofIN_RECVERR = 16;

export function allocIN_RECVERR(data?: Partial<IN_RECVERR>): Uint8Array {
  const buf = new Uint8Array(sizeofIN_RECVERR);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.protocol !== undefined) view.setInt32(0, Number(data.protocol), true);
  // 0x04: u32
  if (data?.info !== undefined) view.setUint32(4, Number(data.info), true);
  // 0x08: u8
  if (data?.type !== undefined) view.setUint8(8, Number(data.type));
  // 0x09: u8
  if (data?.code !== undefined) view.setUint8(9, Number(data.code));
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ICMP_ERROR_INFO (size: 16)
 */
export interface ICMP_ERROR_INFO {
  /** Windows.Win32.Networking.WinSock.SOCKADDR_INET */
  srcaddress: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.IPPROTO */
  protocol: IPPROTO;
  /** u8 */
  type: number;
  /** u8 */
  code: number;
}

export const sizeofICMP_ERROR_INFO = 16;

export function allocICMP_ERROR_INFO(data?: Partial<ICMP_ERROR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofICMP_ERROR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.srcaddress !== undefined) view.setBigUint64(0, data.srcaddress === null ? 0n : BigInt(util.toPointer(data.srcaddress)), true);
  // 0x08: i32
  if (data?.protocol !== undefined) view.setInt32(8, Number(data.protocol), true);
  // 0x0c: u8
  if (data?.type !== undefined) view.setUint8(12, Number(data.type));
  // 0x0d: u8
  if (data?.code !== undefined) view.setUint8(13, Number(data.code));
  // 0x0e: pad2
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.RM_SEND_WINDOW (size: 16)
 */
export interface RM_SEND_WINDOW {
  /** u32 */
  RateKbitsPerSec: number;
  /** u32 */
  WindowSizeInMSecs: number;
  /** u32 */
  WindowSizeInBytes: number;
}

export const sizeofRM_SEND_WINDOW = 16;

export function allocRM_SEND_WINDOW(data?: Partial<RM_SEND_WINDOW>): Uint8Array {
  const buf = new Uint8Array(sizeofRM_SEND_WINDOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RateKbitsPerSec !== undefined) view.setUint32(0, Number(data.RateKbitsPerSec), true);
  // 0x04: u32
  if (data?.WindowSizeInMSecs !== undefined) view.setUint32(4, Number(data.WindowSizeInMSecs), true);
  // 0x08: u32
  if (data?.WindowSizeInBytes !== undefined) view.setUint32(8, Number(data.WindowSizeInBytes), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.RM_SENDER_STATS (size: 104)
 */
export interface RM_SENDER_STATS {
  /** u64 */
  DataBytesSent: Deno.PointerValue;
  /** u64 */
  TotalBytesSent: Deno.PointerValue;
  /** u64 */
  NaksReceived: Deno.PointerValue;
  /** u64 */
  NaksReceivedTooLate: Deno.PointerValue;
  /** u64 */
  NumOutstandingNaks: Deno.PointerValue;
  /** u64 */
  NumNaksAfterRData: Deno.PointerValue;
  /** u64 */
  RepairPacketsSent: Deno.PointerValue;
  /** u64 */
  BufferSpaceAvailable: Deno.PointerValue;
  /** u64 */
  TrailingEdgeSeqId: Deno.PointerValue;
  /** u64 */
  LeadingEdgeSeqId: Deno.PointerValue;
  /** u64 */
  RateKBitsPerSecOverall: Deno.PointerValue;
  /** u64 */
  RateKBitsPerSecLast: Deno.PointerValue;
  /** u64 */
  TotalODataPacketsSent: Deno.PointerValue;
}

export const sizeofRM_SENDER_STATS = 104;

export function allocRM_SENDER_STATS(data?: Partial<RM_SENDER_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofRM_SENDER_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.DataBytesSent !== undefined) view.setBigUint64(0, BigInt(data.DataBytesSent), true);
  // 0x08: u64
  if (data?.TotalBytesSent !== undefined) view.setBigUint64(8, BigInt(data.TotalBytesSent), true);
  // 0x10: u64
  if (data?.NaksReceived !== undefined) view.setBigUint64(16, BigInt(data.NaksReceived), true);
  // 0x18: u64
  if (data?.NaksReceivedTooLate !== undefined) view.setBigUint64(24, BigInt(data.NaksReceivedTooLate), true);
  // 0x20: u64
  if (data?.NumOutstandingNaks !== undefined) view.setBigUint64(32, BigInt(data.NumOutstandingNaks), true);
  // 0x28: u64
  if (data?.NumNaksAfterRData !== undefined) view.setBigUint64(40, BigInt(data.NumNaksAfterRData), true);
  // 0x30: u64
  if (data?.RepairPacketsSent !== undefined) view.setBigUint64(48, BigInt(data.RepairPacketsSent), true);
  // 0x38: u64
  if (data?.BufferSpaceAvailable !== undefined) view.setBigUint64(56, BigInt(data.BufferSpaceAvailable), true);
  // 0x40: u64
  if (data?.TrailingEdgeSeqId !== undefined) view.setBigUint64(64, BigInt(data.TrailingEdgeSeqId), true);
  // 0x48: u64
  if (data?.LeadingEdgeSeqId !== undefined) view.setBigUint64(72, BigInt(data.LeadingEdgeSeqId), true);
  // 0x50: u64
  if (data?.RateKBitsPerSecOverall !== undefined) view.setBigUint64(80, BigInt(data.RateKBitsPerSecOverall), true);
  // 0x58: u64
  if (data?.RateKBitsPerSecLast !== undefined) view.setBigUint64(88, BigInt(data.RateKBitsPerSecLast), true);
  // 0x60: u64
  if (data?.TotalODataPacketsSent !== undefined) view.setBigUint64(96, BigInt(data.TotalODataPacketsSent), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.RM_RECEIVER_STATS (size: 144)
 */
export interface RM_RECEIVER_STATS {
  /** u64 */
  NumODataPacketsReceived: Deno.PointerValue;
  /** u64 */
  NumRDataPacketsReceived: Deno.PointerValue;
  /** u64 */
  NumDuplicateDataPackets: Deno.PointerValue;
  /** u64 */
  DataBytesReceived: Deno.PointerValue;
  /** u64 */
  TotalBytesReceived: Deno.PointerValue;
  /** u64 */
  RateKBitsPerSecOverall: Deno.PointerValue;
  /** u64 */
  RateKBitsPerSecLast: Deno.PointerValue;
  /** u64 */
  TrailingEdgeSeqId: Deno.PointerValue;
  /** u64 */
  LeadingEdgeSeqId: Deno.PointerValue;
  /** u64 */
  AverageSequencesInWindow: Deno.PointerValue;
  /** u64 */
  MinSequencesInWindow: Deno.PointerValue;
  /** u64 */
  MaxSequencesInWindow: Deno.PointerValue;
  /** u64 */
  FirstNakSequenceNumber: Deno.PointerValue;
  /** u64 */
  NumPendingNaks: Deno.PointerValue;
  /** u64 */
  NumOutstandingNaks: Deno.PointerValue;
  /** u64 */
  NumDataPacketsBuffered: Deno.PointerValue;
  /** u64 */
  TotalSelectiveNaksSent: Deno.PointerValue;
  /** u64 */
  TotalParityNaksSent: Deno.PointerValue;
}

export const sizeofRM_RECEIVER_STATS = 144;

export function allocRM_RECEIVER_STATS(data?: Partial<RM_RECEIVER_STATS>): Uint8Array {
  const buf = new Uint8Array(sizeofRM_RECEIVER_STATS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.NumODataPacketsReceived !== undefined) view.setBigUint64(0, BigInt(data.NumODataPacketsReceived), true);
  // 0x08: u64
  if (data?.NumRDataPacketsReceived !== undefined) view.setBigUint64(8, BigInt(data.NumRDataPacketsReceived), true);
  // 0x10: u64
  if (data?.NumDuplicateDataPackets !== undefined) view.setBigUint64(16, BigInt(data.NumDuplicateDataPackets), true);
  // 0x18: u64
  if (data?.DataBytesReceived !== undefined) view.setBigUint64(24, BigInt(data.DataBytesReceived), true);
  // 0x20: u64
  if (data?.TotalBytesReceived !== undefined) view.setBigUint64(32, BigInt(data.TotalBytesReceived), true);
  // 0x28: u64
  if (data?.RateKBitsPerSecOverall !== undefined) view.setBigUint64(40, BigInt(data.RateKBitsPerSecOverall), true);
  // 0x30: u64
  if (data?.RateKBitsPerSecLast !== undefined) view.setBigUint64(48, BigInt(data.RateKBitsPerSecLast), true);
  // 0x38: u64
  if (data?.TrailingEdgeSeqId !== undefined) view.setBigUint64(56, BigInt(data.TrailingEdgeSeqId), true);
  // 0x40: u64
  if (data?.LeadingEdgeSeqId !== undefined) view.setBigUint64(64, BigInt(data.LeadingEdgeSeqId), true);
  // 0x48: u64
  if (data?.AverageSequencesInWindow !== undefined) view.setBigUint64(72, BigInt(data.AverageSequencesInWindow), true);
  // 0x50: u64
  if (data?.MinSequencesInWindow !== undefined) view.setBigUint64(80, BigInt(data.MinSequencesInWindow), true);
  // 0x58: u64
  if (data?.MaxSequencesInWindow !== undefined) view.setBigUint64(88, BigInt(data.MaxSequencesInWindow), true);
  // 0x60: u64
  if (data?.FirstNakSequenceNumber !== undefined) view.setBigUint64(96, BigInt(data.FirstNakSequenceNumber), true);
  // 0x68: u64
  if (data?.NumPendingNaks !== undefined) view.setBigUint64(104, BigInt(data.NumPendingNaks), true);
  // 0x70: u64
  if (data?.NumOutstandingNaks !== undefined) view.setBigUint64(112, BigInt(data.NumOutstandingNaks), true);
  // 0x78: u64
  if (data?.NumDataPacketsBuffered !== undefined) view.setBigUint64(120, BigInt(data.NumDataPacketsBuffered), true);
  // 0x80: u64
  if (data?.TotalSelectiveNaksSent !== undefined) view.setBigUint64(128, BigInt(data.TotalSelectiveNaksSent), true);
  // 0x88: u64
  if (data?.TotalParityNaksSent !== undefined) view.setBigUint64(136, BigInt(data.TotalParityNaksSent), true);
  return buf;
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Networking.WinSock.RM_FEC_INFO (size: 16)
 */
export interface RM_FEC_INFO {
  /** u16 */
  FECBlockSize: number;
  /** u16 */
  FECProActivePackets: number;
  /** u8 */
  FECGroupSize: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  fFECOnDemandParityEnabled: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRM_FEC_INFO = 16;

export function allocRM_FEC_INFO(data?: Partial<RM_FEC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRM_FEC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.FECBlockSize !== undefined) view.setUint16(0, Number(data.FECBlockSize), true);
  // 0x02: u16
  if (data?.FECProActivePackets !== undefined) view.setUint16(2, Number(data.FECProActivePackets), true);
  // 0x04: u8
  if (data?.FECGroupSize !== undefined) view.setUint8(4, Number(data.FECGroupSize));
  // 0x05: pad3
  // 0x08: pointer
  if (data?.fFECOnDemandParityEnabled !== undefined) view.setBigUint64(8, data.fFECOnDemandParityEnabled === null ? 0n : BigInt(util.toPointer(data.fFECOnDemandParityEnabled)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IPX_ADDRESS_DATA (size: 48)
 */
export interface IPX_ADDRESS_DATA {
  /** i32 */
  adapternum: number;
  /** array */
  netnum: Deno.PointerValue | null;
  /** array */
  nodenum: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  wan: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  status: Uint8Array | Deno.PointerValue | null;
  /** i32 */
  maxpkt: number;
  /** u32 */
  linkspeed: number;
}

export const sizeofIPX_ADDRESS_DATA = 48;

export function allocIPX_ADDRESS_DATA(data?: Partial<IPX_ADDRESS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofIPX_ADDRESS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.adapternum !== undefined) view.setInt32(0, Number(data.adapternum), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.netnum !== undefined) view.setBigUint64(8, data.netnum === null ? 0n : BigInt(util.toPointer(data.netnum)), true);
  // 0x10: pointer
  if (data?.nodenum !== undefined) view.setBigUint64(16, data.nodenum === null ? 0n : BigInt(util.toPointer(data.nodenum)), true);
  // 0x18: pointer
  if (data?.wan !== undefined) view.setBigUint64(24, data.wan === null ? 0n : BigInt(util.toPointer(data.wan)), true);
  // 0x20: pointer
  if (data?.status !== undefined) view.setBigUint64(32, data.status === null ? 0n : BigInt(util.toPointer(data.status)), true);
  // 0x28: i32
  if (data?.maxpkt !== undefined) view.setInt32(40, Number(data.maxpkt), true);
  // 0x2c: u32
  if (data?.linkspeed !== undefined) view.setUint32(44, Number(data.linkspeed), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IPX_NETNUM_DATA (size: 24)
 */
export interface IPX_NETNUM_DATA {
  /** array */
  netnum: Deno.PointerValue | null;
  /** u16 */
  hopcount: number;
  /** u16 */
  netdelay: number;
  /** i32 */
  cardnum: number;
  /** array */
  router: Deno.PointerValue | null;
}

export const sizeofIPX_NETNUM_DATA = 24;

export function allocIPX_NETNUM_DATA(data?: Partial<IPX_NETNUM_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofIPX_NETNUM_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.netnum !== undefined) view.setBigUint64(0, data.netnum === null ? 0n : BigInt(util.toPointer(data.netnum)), true);
  // 0x08: u16
  if (data?.hopcount !== undefined) view.setUint16(8, Number(data.hopcount), true);
  // 0x0a: u16
  if (data?.netdelay !== undefined) view.setUint16(10, Number(data.netdelay), true);
  // 0x0c: i32
  if (data?.cardnum !== undefined) view.setInt32(12, Number(data.cardnum), true);
  // 0x10: pointer
  if (data?.router !== undefined) view.setBigUint64(16, data.router === null ? 0n : BigInt(util.toPointer(data.router)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.IPX_SPXCONNSTATUS_DATA (size: 64)
 */
export interface IPX_SPXCONNSTATUS_DATA {
  /** u8 */
  ConnectionState: number;
  /** u8 */
  WatchDogActive: number;
  /** u16 */
  LocalConnectionId: number;
  /** u16 */
  RemoteConnectionId: number;
  /** u16 */
  LocalSequenceNumber: number;
  /** u16 */
  LocalAckNumber: number;
  /** u16 */
  LocalAllocNumber: number;
  /** u16 */
  RemoteAckNumber: number;
  /** u16 */
  RemoteAllocNumber: number;
  /** u16 */
  LocalSocket: number;
  /** array */
  ImmediateAddress: Deno.PointerValue | null;
  /** array */
  RemoteNetwork: Deno.PointerValue | null;
  /** array */
  RemoteNode: Deno.PointerValue | null;
  /** u16 */
  RemoteSocket: number;
  /** u16 */
  RetransmissionCount: number;
  /** u16 */
  EstimatedRoundTripDelay: number;
  /** u16 */
  RetransmittedPackets: number;
  /** u16 */
  SuppressedPacket: number;
}

export const sizeofIPX_SPXCONNSTATUS_DATA = 64;

export function allocIPX_SPXCONNSTATUS_DATA(data?: Partial<IPX_SPXCONNSTATUS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofIPX_SPXCONNSTATUS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ConnectionState !== undefined) view.setUint8(0, Number(data.ConnectionState));
  // 0x01: u8
  if (data?.WatchDogActive !== undefined) view.setUint8(1, Number(data.WatchDogActive));
  // 0x02: u16
  if (data?.LocalConnectionId !== undefined) view.setUint16(2, Number(data.LocalConnectionId), true);
  // 0x04: u16
  if (data?.RemoteConnectionId !== undefined) view.setUint16(4, Number(data.RemoteConnectionId), true);
  // 0x06: u16
  if (data?.LocalSequenceNumber !== undefined) view.setUint16(6, Number(data.LocalSequenceNumber), true);
  // 0x08: u16
  if (data?.LocalAckNumber !== undefined) view.setUint16(8, Number(data.LocalAckNumber), true);
  // 0x0a: u16
  if (data?.LocalAllocNumber !== undefined) view.setUint16(10, Number(data.LocalAllocNumber), true);
  // 0x0c: u16
  if (data?.RemoteAckNumber !== undefined) view.setUint16(12, Number(data.RemoteAckNumber), true);
  // 0x0e: u16
  if (data?.RemoteAllocNumber !== undefined) view.setUint16(14, Number(data.RemoteAllocNumber), true);
  // 0x10: u16
  if (data?.LocalSocket !== undefined) view.setUint16(16, Number(data.LocalSocket), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.ImmediateAddress !== undefined) view.setBigUint64(24, data.ImmediateAddress === null ? 0n : BigInt(util.toPointer(data.ImmediateAddress)), true);
  // 0x20: pointer
  if (data?.RemoteNetwork !== undefined) view.setBigUint64(32, data.RemoteNetwork === null ? 0n : BigInt(util.toPointer(data.RemoteNetwork)), true);
  // 0x28: pointer
  if (data?.RemoteNode !== undefined) view.setBigUint64(40, data.RemoteNode === null ? 0n : BigInt(util.toPointer(data.RemoteNode)), true);
  // 0x30: u16
  if (data?.RemoteSocket !== undefined) view.setUint16(48, Number(data.RemoteSocket), true);
  // 0x32: u16
  if (data?.RetransmissionCount !== undefined) view.setUint16(50, Number(data.RetransmissionCount), true);
  // 0x34: u16
  if (data?.EstimatedRoundTripDelay !== undefined) view.setUint16(52, Number(data.EstimatedRoundTripDelay), true);
  // 0x36: u16
  if (data?.RetransmittedPackets !== undefined) view.setUint16(54, Number(data.RetransmittedPackets), true);
  // 0x38: u16
  if (data?.SuppressedPacket !== undefined) view.setUint16(56, Number(data.SuppressedPacket), true);
  // 0x3a: pad6
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.LM_IRPARMS (size: 24)
 */
export interface LM_IRPARMS {
  /** u32 */
  nTXDataBytes: number;
  /** u32 */
  nRXDataBytes: number;
  /** u32 */
  nBaudRate: number;
  /** u32 */
  thresholdTime: number;
  /** u32 */
  discTime: number;
  /** u16 */
  nMSLinkTurn: number;
  /** u8 */
  nTXPackets: number;
  /** u8 */
  nRXPackets: number;
}

export const sizeofLM_IRPARMS = 24;

export function allocLM_IRPARMS(data?: Partial<LM_IRPARMS>): Uint8Array {
  const buf = new Uint8Array(sizeofLM_IRPARMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nTXDataBytes !== undefined) view.setUint32(0, Number(data.nTXDataBytes), true);
  // 0x04: u32
  if (data?.nRXDataBytes !== undefined) view.setUint32(4, Number(data.nRXDataBytes), true);
  // 0x08: u32
  if (data?.nBaudRate !== undefined) view.setUint32(8, Number(data.nBaudRate), true);
  // 0x0c: u32
  if (data?.thresholdTime !== undefined) view.setUint32(12, Number(data.thresholdTime), true);
  // 0x10: u32
  if (data?.discTime !== undefined) view.setUint32(16, Number(data.discTime), true);
  // 0x14: u16
  if (data?.nMSLinkTurn !== undefined) view.setUint16(20, Number(data.nMSLinkTurn), true);
  // 0x16: u8
  if (data?.nTXPackets !== undefined) view.setUint8(22, Number(data.nTXPackets));
  // 0x17: u8
  if (data?.nRXPackets !== undefined) view.setUint8(23, Number(data.nRXPackets));
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_IRDA (size: 24)
 */
export interface SOCKADDR_IRDA {
  /** u16 */
  irdaAddressFamily: number;
  /** array */
  irdaDeviceID: Deno.PointerValue | null;
  /** array */
  irdaServiceName: Deno.PointerValue | null;
}

export const sizeofSOCKADDR_IRDA = 24;

export function allocSOCKADDR_IRDA(data?: Partial<SOCKADDR_IRDA>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_IRDA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.irdaAddressFamily !== undefined) view.setUint16(0, Number(data.irdaAddressFamily), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.irdaDeviceID !== undefined) view.setBigUint64(8, data.irdaDeviceID === null ? 0n : BigInt(util.toPointer(data.irdaDeviceID)), true);
  // 0x10: pointer
  if (data?.irdaServiceName !== undefined) view.setBigUint64(16, data.irdaServiceName === null ? 0n : BigInt(util.toPointer(data.irdaServiceName)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WINDOWS_IRDA_DEVICE_INFO (size: 24)
 */
export interface WINDOWS_IRDA_DEVICE_INFO {
  /** array */
  irdaDeviceID: Deno.PointerValue | null;
  /** array */
  irdaDeviceName: Deno.PointerValue | null;
  /** u8 */
  irdaDeviceHints1: number;
  /** u8 */
  irdaDeviceHints2: number;
  /** u8 */
  irdaCharSet: number;
}

export const sizeofWINDOWS_IRDA_DEVICE_INFO = 24;

export function allocWINDOWS_IRDA_DEVICE_INFO(data?: Partial<WINDOWS_IRDA_DEVICE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWINDOWS_IRDA_DEVICE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.irdaDeviceID !== undefined) view.setBigUint64(0, data.irdaDeviceID === null ? 0n : BigInt(util.toPointer(data.irdaDeviceID)), true);
  // 0x08: pointer
  if (data?.irdaDeviceName !== undefined) view.setBigUint64(8, data.irdaDeviceName === null ? 0n : BigInt(util.toPointer(data.irdaDeviceName)), true);
  // 0x10: u8
  if (data?.irdaDeviceHints1 !== undefined) view.setUint8(16, Number(data.irdaDeviceHints1));
  // 0x11: u8
  if (data?.irdaDeviceHints2 !== undefined) view.setUint8(17, Number(data.irdaDeviceHints2));
  // 0x12: u8
  if (data?.irdaCharSet !== undefined) view.setUint8(18, Number(data.irdaCharSet));
  // 0x13: pad5
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WCE_IRDA_DEVICE_INFO (size: 24)
 */
export interface WCE_IRDA_DEVICE_INFO {
  /** array */
  irdaDeviceID: Deno.PointerValue | null;
  /** array */
  irdaDeviceName: Deno.PointerValue | null;
  /** array */
  Reserved: Deno.PointerValue | null;
}

export const sizeofWCE_IRDA_DEVICE_INFO = 24;

export function allocWCE_IRDA_DEVICE_INFO(data?: Partial<WCE_IRDA_DEVICE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWCE_IRDA_DEVICE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.irdaDeviceID !== undefined) view.setBigUint64(0, data.irdaDeviceID === null ? 0n : BigInt(util.toPointer(data.irdaDeviceID)), true);
  // 0x08: pointer
  if (data?.irdaDeviceName !== undefined) view.setBigUint64(8, data.irdaDeviceName === null ? 0n : BigInt(util.toPointer(data.irdaDeviceName)), true);
  // 0x10: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(16, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WINDOWS_DEVICELIST (size: 16)
 */
export interface WINDOWS_DEVICELIST {
  /** u32 */
  numDevice: number;
  /** array */
  Device: Deno.PointerValue | null;
}

export const sizeofWINDOWS_DEVICELIST = 16;

export function allocWINDOWS_DEVICELIST(data?: Partial<WINDOWS_DEVICELIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWINDOWS_DEVICELIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numDevice !== undefined) view.setUint32(0, Number(data.numDevice), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Device !== undefined) view.setBigUint64(8, data.Device === null ? 0n : BigInt(util.toPointer(data.Device)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WCE_DEVICELIST (size: 16)
 */
export interface WCE_DEVICELIST {
  /** u32 */
  numDevice: number;
  /** array */
  Device: Deno.PointerValue | null;
}

export const sizeofWCE_DEVICELIST = 16;

export function allocWCE_DEVICELIST(data?: Partial<WCE_DEVICELIST>): Uint8Array {
  const buf = new Uint8Array(sizeofWCE_DEVICELIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numDevice !== undefined) view.setUint32(0, Number(data.numDevice), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Device !== undefined) view.setBigUint64(8, data.Device === null ? 0n : BigInt(util.toPointer(data.Device)), true);
  return buf;
}

/**
 * _irdaAttribOctetSeq_e__Struct (size: 16)
 */
export interface _irdaAttribOctetSeq_e__Struct {
  /** u16 */
  Len: number;
  /** array */
  OctetSeq: Deno.PointerValue | null;
}

export const sizeof_irdaAttribOctetSeq_e__Struct = 16;

export function alloc_irdaAttribOctetSeq_e__Struct(data?: Partial<_irdaAttribOctetSeq_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_irdaAttribOctetSeq_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Len !== undefined) view.setUint16(0, Number(data.Len), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.OctetSeq !== undefined) view.setBigUint64(8, data.OctetSeq === null ? 0n : BigInt(util.toPointer(data.OctetSeq)), true);
  return buf;
}

/**
 * _irdaAttribUsrStr_e__Struct (size: 16)
 */
export interface _irdaAttribUsrStr_e__Struct {
  /** u8 */
  Len: number;
  /** u8 */
  CharSet: number;
  /** array */
  UsrStr: Deno.PointerValue | null;
}

export const sizeof_irdaAttribUsrStr_e__Struct = 16;

export function alloc_irdaAttribUsrStr_e__Struct(data?: Partial<_irdaAttribUsrStr_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_irdaAttribUsrStr_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Len !== undefined) view.setUint8(0, Number(data.Len));
  // 0x01: u8
  if (data?.CharSet !== undefined) view.setUint8(1, Number(data.CharSet));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.UsrStr !== undefined) view.setBigUint64(8, data.UsrStr === null ? 0n : BigInt(util.toPointer(data.UsrStr)), true);
  return buf;
}

/**
 * _irdaAttribute_e__Union (size: 24)
 */
export interface _irdaAttribute_e__Union {
  /** i32 */
  irdaAttribInt: number;
  /** _irdaAttribOctetSeq_e__Struct */
  irdaAttribOctetSeq: Uint8Array | Deno.PointerValue | null;
  /** _irdaAttribUsrStr_e__Struct */
  irdaAttribUsrStr: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_irdaAttribute_e__Union = 24;

export function alloc_irdaAttribute_e__Union(data?: Partial<_irdaAttribute_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_irdaAttribute_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.irdaAttribInt !== undefined) view.setInt32(0, Number(data.irdaAttribInt), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.irdaAttribOctetSeq !== undefined) view.setBigUint64(8, data.irdaAttribOctetSeq === null ? 0n : BigInt(util.toPointer(data.irdaAttribOctetSeq)), true);
  // 0x10: pointer
  if (data?.irdaAttribUsrStr !== undefined) view.setBigUint64(16, data.irdaAttribUsrStr === null ? 0n : BigInt(util.toPointer(data.irdaAttribUsrStr)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WINDOWS_IAS_SET (size: 32)
 */
export interface WINDOWS_IAS_SET {
  /** array */
  irdaClassName: Deno.PointerValue | null;
  /** array */
  irdaAttribName: Deno.PointerValue | null;
  /** u32 */
  irdaAttribType: number;
  /** _irdaAttribute_e__Union */
  irdaAttribute: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINDOWS_IAS_SET = 32;

export function allocWINDOWS_IAS_SET(data?: Partial<WINDOWS_IAS_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofWINDOWS_IAS_SET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.irdaClassName !== undefined) view.setBigUint64(0, data.irdaClassName === null ? 0n : BigInt(util.toPointer(data.irdaClassName)), true);
  // 0x08: pointer
  if (data?.irdaAttribName !== undefined) view.setBigUint64(8, data.irdaAttribName === null ? 0n : BigInt(util.toPointer(data.irdaAttribName)), true);
  // 0x10: u32
  if (data?.irdaAttribType !== undefined) view.setUint32(16, Number(data.irdaAttribType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.irdaAttribute !== undefined) view.setBigUint64(24, data.irdaAttribute === null ? 0n : BigInt(util.toPointer(data.irdaAttribute)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WINDOWS_IAS_QUERY (size: 40)
 */
export interface WINDOWS_IAS_QUERY {
  /** array */
  irdaDeviceID: Deno.PointerValue | null;
  /** array */
  irdaClassName: Deno.PointerValue | null;
  /** array */
  irdaAttribName: Deno.PointerValue | null;
  /** u32 */
  irdaAttribType: number;
  /** _irdaAttribute_e__Union */
  irdaAttribute: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWINDOWS_IAS_QUERY = 40;

export function allocWINDOWS_IAS_QUERY(data?: Partial<WINDOWS_IAS_QUERY>): Uint8Array {
  const buf = new Uint8Array(sizeofWINDOWS_IAS_QUERY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.irdaDeviceID !== undefined) view.setBigUint64(0, data.irdaDeviceID === null ? 0n : BigInt(util.toPointer(data.irdaDeviceID)), true);
  // 0x08: pointer
  if (data?.irdaClassName !== undefined) view.setBigUint64(8, data.irdaClassName === null ? 0n : BigInt(util.toPointer(data.irdaClassName)), true);
  // 0x10: pointer
  if (data?.irdaAttribName !== undefined) view.setBigUint64(16, data.irdaAttribName === null ? 0n : BigInt(util.toPointer(data.irdaAttribName)), true);
  // 0x18: u32
  if (data?.irdaAttribType !== undefined) view.setUint32(24, Number(data.irdaAttribType), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.irdaAttribute !== undefined) view.setBigUint64(32, data.irdaAttribute === null ? 0n : BigInt(util.toPointer(data.irdaAttribute)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NL_INTERFACE_OFFLOAD_ROD (size: 8)
 */
export interface NL_INTERFACE_OFFLOAD_ROD {
  /** u8 */
  _bitfield: number;
}

export const sizeofNL_INTERFACE_OFFLOAD_ROD = 8;

export function allocNL_INTERFACE_OFFLOAD_ROD(data?: Partial<NL_INTERFACE_OFFLOAD_ROD>): Uint8Array {
  const buf = new Uint8Array(sizeofNL_INTERFACE_OFFLOAD_ROD);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?._bitfield !== undefined) view.setUint8(0, Number(data._bitfield));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NL_PATH_BANDWIDTH_ROD (size: 24)
 */
export interface NL_PATH_BANDWIDTH_ROD {
  /** u64 */
  Bandwidth: Deno.PointerValue;
  /** u64 */
  Instability: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  BandwidthPeaked: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNL_PATH_BANDWIDTH_ROD = 24;

export function allocNL_PATH_BANDWIDTH_ROD(data?: Partial<NL_PATH_BANDWIDTH_ROD>): Uint8Array {
  const buf = new Uint8Array(sizeofNL_PATH_BANDWIDTH_ROD);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Bandwidth !== undefined) view.setBigUint64(0, BigInt(data.Bandwidth), true);
  // 0x08: u64
  if (data?.Instability !== undefined) view.setBigUint64(8, BigInt(data.Instability), true);
  // 0x10: pointer
  if (data?.BandwidthPeaked !== undefined) view.setBigUint64(16, data.BandwidthPeaked === null ? 0n : BigInt(util.toPointer(data.BandwidthPeaked)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NL_NETWORK_CONNECTIVITY_HINT (size: 32)
 */
export interface NL_NETWORK_CONNECTIVITY_HINT {
  /** Windows.Win32.Networking.WinSock.NL_NETWORK_CONNECTIVITY_LEVEL_HINT */
  ConnectivityLevel: NL_NETWORK_CONNECTIVITY_LEVEL_HINT;
  /** Windows.Win32.Networking.WinSock.NL_NETWORK_CONNECTIVITY_COST_HINT */
  ConnectivityCost: NL_NETWORK_CONNECTIVITY_COST_HINT;
  /** Windows.Win32.Foundation.BOOLEAN */
  ApproachingDataLimit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  OverDataLimit: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Roaming: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNL_NETWORK_CONNECTIVITY_HINT = 32;

export function allocNL_NETWORK_CONNECTIVITY_HINT(data?: Partial<NL_NETWORK_CONNECTIVITY_HINT>): Uint8Array {
  const buf = new Uint8Array(sizeofNL_NETWORK_CONNECTIVITY_HINT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ConnectivityLevel !== undefined) view.setInt32(0, Number(data.ConnectivityLevel), true);
  // 0x04: i32
  if (data?.ConnectivityCost !== undefined) view.setInt32(4, Number(data.ConnectivityCost), true);
  // 0x08: pointer
  if (data?.ApproachingDataLimit !== undefined) view.setBigUint64(8, data.ApproachingDataLimit === null ? 0n : BigInt(util.toPointer(data.ApproachingDataLimit)), true);
  // 0x10: pointer
  if (data?.OverDataLimit !== undefined) view.setBigUint64(16, data.OverDataLimit === null ? 0n : BigInt(util.toPointer(data.OverDataLimit)), true);
  // 0x18: pointer
  if (data?.Roaming !== undefined) view.setBigUint64(24, data.Roaming === null ? 0n : BigInt(util.toPointer(data.Roaming)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NL_BANDWIDTH_INFORMATION (size: 24)
 */
export interface NL_BANDWIDTH_INFORMATION {
  /** u64 */
  Bandwidth: Deno.PointerValue;
  /** u64 */
  Instability: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  BandwidthPeaked: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNL_BANDWIDTH_INFORMATION = 24;

export function allocNL_BANDWIDTH_INFORMATION(data?: Partial<NL_BANDWIDTH_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofNL_BANDWIDTH_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Bandwidth !== undefined) view.setBigUint64(0, BigInt(data.Bandwidth), true);
  // 0x08: u64
  if (data?.Instability !== undefined) view.setBigUint64(8, BigInt(data.Instability), true);
  // 0x10: pointer
  if (data?.BandwidthPeaked !== undefined) view.setBigUint64(16, data.BandwidthPeaked === null ? 0n : BigInt(util.toPointer(data.BandwidthPeaked)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.TRANSPORT_SETTING_ID (size: 8)
 */
export interface TRANSPORT_SETTING_ID {
  /** System.Guid */
  Guid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSPORT_SETTING_ID = 8;

export function allocTRANSPORT_SETTING_ID(data?: Partial<TRANSPORT_SETTING_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSPORT_SETTING_ID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Guid !== undefined) view.setBigUint64(0, data.Guid === null ? 0n : BigInt(util.toPointer(data.Guid)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.tcp_keepalive (size: 16)
 */
export interface tcp_keepalive {
  /** u32 */
  onoff: number;
  /** u32 */
  keepalivetime: number;
  /** u32 */
  keepaliveinterval: number;
}

export const sizeofTcp_keepalive = 16;

export function allocTcp_keepalive(data?: Partial<tcp_keepalive>): Uint8Array {
  const buf = new Uint8Array(sizeofTcp_keepalive);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.onoff !== undefined) view.setUint32(0, Number(data.onoff), true);
  // 0x04: u32
  if (data?.keepalivetime !== undefined) view.setUint32(4, Number(data.keepalivetime), true);
  // 0x08: u32
  if (data?.keepaliveinterval !== undefined) view.setUint32(8, Number(data.keepaliveinterval), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.REAL_TIME_NOTIFICATION_SETTING_INPUT (size: 16)
 */
export interface REAL_TIME_NOTIFICATION_SETTING_INPUT {
  /** Windows.Win32.Networking.WinSock.TRANSPORT_SETTING_ID */
  TransportSettingId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  BrokerEventGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofREAL_TIME_NOTIFICATION_SETTING_INPUT = 16;

export function allocREAL_TIME_NOTIFICATION_SETTING_INPUT(data?: Partial<REAL_TIME_NOTIFICATION_SETTING_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofREAL_TIME_NOTIFICATION_SETTING_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransportSettingId !== undefined) view.setBigUint64(0, data.TransportSettingId === null ? 0n : BigInt(util.toPointer(data.TransportSettingId)), true);
  // 0x08: pointer
  if (data?.BrokerEventGuid !== undefined) view.setBigUint64(8, data.BrokerEventGuid === null ? 0n : BigInt(util.toPointer(data.BrokerEventGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.REAL_TIME_NOTIFICATION_SETTING_INPUT_EX (size: 24)
 */
export interface REAL_TIME_NOTIFICATION_SETTING_INPUT_EX {
  /** Windows.Win32.Networking.WinSock.TRANSPORT_SETTING_ID */
  TransportSettingId: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  BrokerEventGuid: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  Unmark: Uint8Array | Deno.PointerValue | null;
}

export const sizeofREAL_TIME_NOTIFICATION_SETTING_INPUT_EX = 24;

export function allocREAL_TIME_NOTIFICATION_SETTING_INPUT_EX(data?: Partial<REAL_TIME_NOTIFICATION_SETTING_INPUT_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofREAL_TIME_NOTIFICATION_SETTING_INPUT_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransportSettingId !== undefined) view.setBigUint64(0, data.TransportSettingId === null ? 0n : BigInt(util.toPointer(data.TransportSettingId)), true);
  // 0x08: pointer
  if (data?.BrokerEventGuid !== undefined) view.setBigUint64(8, data.BrokerEventGuid === null ? 0n : BigInt(util.toPointer(data.BrokerEventGuid)), true);
  // 0x10: pointer
  if (data?.Unmark !== undefined) view.setBigUint64(16, data.Unmark === null ? 0n : BigInt(util.toPointer(data.Unmark)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.REAL_TIME_NOTIFICATION_SETTING_OUTPUT (size: 8)
 */
export interface REAL_TIME_NOTIFICATION_SETTING_OUTPUT {
  /** Windows.Win32.Networking.WinSock.CONTROL_CHANNEL_TRIGGER_STATUS */
  ChannelStatus: CONTROL_CHANNEL_TRIGGER_STATUS;
}

export const sizeofREAL_TIME_NOTIFICATION_SETTING_OUTPUT = 8;

export function allocREAL_TIME_NOTIFICATION_SETTING_OUTPUT(data?: Partial<REAL_TIME_NOTIFICATION_SETTING_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofREAL_TIME_NOTIFICATION_SETTING_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ChannelStatus !== undefined) view.setInt32(0, Number(data.ChannelStatus), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ASSOCIATE_NAMERES_CONTEXT_INPUT (size: 16)
 */
export interface ASSOCIATE_NAMERES_CONTEXT_INPUT {
  /** Windows.Win32.Networking.WinSock.TRANSPORT_SETTING_ID */
  TransportSettingId: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Handle: Deno.PointerValue;
}

export const sizeofASSOCIATE_NAMERES_CONTEXT_INPUT = 16;

export function allocASSOCIATE_NAMERES_CONTEXT_INPUT(data?: Partial<ASSOCIATE_NAMERES_CONTEXT_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofASSOCIATE_NAMERES_CONTEXT_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TransportSettingId !== undefined) view.setBigUint64(0, data.TransportSettingId === null ? 0n : BigInt(util.toPointer(data.TransportSettingId)), true);
  // 0x08: u64
  if (data?.Handle !== undefined) view.setBigUint64(8, BigInt(data.Handle), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.TIMESTAMPING_CONFIG (size: 8)
 */
export interface TIMESTAMPING_CONFIG {
  /** u32 */
  Flags: number;
  /** u16 */
  TxTimestampsBuffered: number;
}

export const sizeofTIMESTAMPING_CONFIG = 8;

export function allocTIMESTAMPING_CONFIG(data?: Partial<TIMESTAMPING_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofTIMESTAMPING_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: u16
  if (data?.TxTimestampsBuffered !== undefined) view.setUint16(4, Number(data.TxTimestampsBuffered), true);
  // 0x06: pad2
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.PRIORITY_STATUS (size: 8)
 */
export interface PRIORITY_STATUS {
  /** Windows.Win32.Networking.WinSock.SOCKET_PRIORITY_HINT */
  Sender: SOCKET_PRIORITY_HINT;
  /** Windows.Win32.Networking.WinSock.SOCKET_PRIORITY_HINT */
  Receiver: SOCKET_PRIORITY_HINT;
}

export const sizeofPRIORITY_STATUS = 8;

export function allocPRIORITY_STATUS(data?: Partial<PRIORITY_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofPRIORITY_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Sender !== undefined) view.setInt32(0, Number(data.Sender), true);
  // 0x04: i32
  if (data?.Receiver !== undefined) view.setInt32(4, Number(data.Receiver), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.RCVALL_IF (size: 8)
 */
export interface RCVALL_IF {
  /** Windows.Win32.Networking.WinSock.RCVALL_VALUE */
  Mode: RCVALL_VALUE;
  /** u32 */
  Interface: number;
}

export const sizeofRCVALL_IF = 8;

export function allocRCVALL_IF(data?: Partial<RCVALL_IF>): Uint8Array {
  const buf = new Uint8Array(sizeofRCVALL_IF);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Mode !== undefined) view.setInt32(0, Number(data.Mode), true);
  // 0x04: u32
  if (data?.Interface !== undefined) view.setUint32(4, Number(data.Interface), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.TCP_INITIAL_RTO_PARAMETERS (size: 8)
 */
export interface TCP_INITIAL_RTO_PARAMETERS {
  /** u16 */
  Rtt: number;
  /** u8 */
  MaxSynRetransmissions: number;
}

export const sizeofTCP_INITIAL_RTO_PARAMETERS = 8;

export function allocTCP_INITIAL_RTO_PARAMETERS(data?: Partial<TCP_INITIAL_RTO_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_INITIAL_RTO_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Rtt !== undefined) view.setUint16(0, Number(data.Rtt), true);
  // 0x02: u8
  if (data?.MaxSynRetransmissions !== undefined) view.setUint8(2, Number(data.MaxSynRetransmissions));
  // 0x03: pad5
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.TCP_ICW_PARAMETERS (size: 8)
 */
export interface TCP_ICW_PARAMETERS {
  /** Windows.Win32.Networking.WinSock.TCP_ICW_LEVEL */
  Level: TCP_ICW_LEVEL;
}

export const sizeofTCP_ICW_PARAMETERS = 8;

export function allocTCP_ICW_PARAMETERS(data?: Partial<TCP_ICW_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ICW_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Level !== undefined) view.setInt32(0, Number(data.Level), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.TCP_ACK_FREQUENCY_PARAMETERS (size: 8)
 */
export interface TCP_ACK_FREQUENCY_PARAMETERS {
  /** u8 */
  TcpDelayedAckFrequency: number;
}

export const sizeofTCP_ACK_FREQUENCY_PARAMETERS = 8;

export function allocTCP_ACK_FREQUENCY_PARAMETERS(data?: Partial<TCP_ACK_FREQUENCY_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_ACK_FREQUENCY_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.TcpDelayedAckFrequency !== undefined) view.setUint8(0, Number(data.TcpDelayedAckFrequency));
  // 0x01: pad7
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.TCP_INFO_v0 (size: 96)
 */
export interface TCP_INFO_v0 {
  /** Windows.Win32.Networking.WinSock.TCPSTATE */
  State: TCPSTATE;
  /** u32 */
  Mss: number;
  /** u64 */
  ConnectionTimeMs: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  TimestampsEnabled: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  RttUs: number;
  /** u32 */
  MinRttUs: number;
  /** u32 */
  BytesInFlight: number;
  /** u32 */
  Cwnd: number;
  /** u32 */
  SndWnd: number;
  /** u32 */
  RcvWnd: number;
  /** u32 */
  RcvBuf: number;
  /** u64 */
  BytesOut: Deno.PointerValue;
  /** u64 */
  BytesIn: Deno.PointerValue;
  /** u32 */
  BytesReordered: number;
  /** u32 */
  BytesRetrans: number;
  /** u32 */
  FastRetrans: number;
  /** u32 */
  DupAcksIn: number;
  /** u32 */
  TimeoutEpisodes: number;
  /** u8 */
  SynRetrans: number;
}

export const sizeofTCP_INFO_v0 = 96;

export function allocTCP_INFO_v0(data?: Partial<TCP_INFO_v0>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_INFO_v0);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.State !== undefined) view.setInt32(0, Number(data.State), true);
  // 0x04: u32
  if (data?.Mss !== undefined) view.setUint32(4, Number(data.Mss), true);
  // 0x08: u64
  if (data?.ConnectionTimeMs !== undefined) view.setBigUint64(8, BigInt(data.ConnectionTimeMs), true);
  // 0x10: pointer
  if (data?.TimestampsEnabled !== undefined) view.setBigUint64(16, data.TimestampsEnabled === null ? 0n : BigInt(util.toPointer(data.TimestampsEnabled)), true);
  // 0x18: u32
  if (data?.RttUs !== undefined) view.setUint32(24, Number(data.RttUs), true);
  // 0x1c: u32
  if (data?.MinRttUs !== undefined) view.setUint32(28, Number(data.MinRttUs), true);
  // 0x20: u32
  if (data?.BytesInFlight !== undefined) view.setUint32(32, Number(data.BytesInFlight), true);
  // 0x24: u32
  if (data?.Cwnd !== undefined) view.setUint32(36, Number(data.Cwnd), true);
  // 0x28: u32
  if (data?.SndWnd !== undefined) view.setUint32(40, Number(data.SndWnd), true);
  // 0x2c: u32
  if (data?.RcvWnd !== undefined) view.setUint32(44, Number(data.RcvWnd), true);
  // 0x30: u32
  if (data?.RcvBuf !== undefined) view.setUint32(48, Number(data.RcvBuf), true);
  // 0x34: pad4
  // 0x38: u64
  if (data?.BytesOut !== undefined) view.setBigUint64(56, BigInt(data.BytesOut), true);
  // 0x40: u64
  if (data?.BytesIn !== undefined) view.setBigUint64(64, BigInt(data.BytesIn), true);
  // 0x48: u32
  if (data?.BytesReordered !== undefined) view.setUint32(72, Number(data.BytesReordered), true);
  // 0x4c: u32
  if (data?.BytesRetrans !== undefined) view.setUint32(76, Number(data.BytesRetrans), true);
  // 0x50: u32
  if (data?.FastRetrans !== undefined) view.setUint32(80, Number(data.FastRetrans), true);
  // 0x54: u32
  if (data?.DupAcksIn !== undefined) view.setUint32(84, Number(data.DupAcksIn), true);
  // 0x58: u32
  if (data?.TimeoutEpisodes !== undefined) view.setUint32(88, Number(data.TimeoutEpisodes), true);
  // 0x5c: u8
  if (data?.SynRetrans !== undefined) view.setUint8(92, Number(data.SynRetrans));
  // 0x5d: pad3
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.TCP_INFO_v1 (size: 144)
 */
export interface TCP_INFO_v1 {
  /** Windows.Win32.Networking.WinSock.TCPSTATE */
  State: TCPSTATE;
  /** u32 */
  Mss: number;
  /** u64 */
  ConnectionTimeMs: Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOLEAN */
  TimestampsEnabled: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  RttUs: number;
  /** u32 */
  MinRttUs: number;
  /** u32 */
  BytesInFlight: number;
  /** u32 */
  Cwnd: number;
  /** u32 */
  SndWnd: number;
  /** u32 */
  RcvWnd: number;
  /** u32 */
  RcvBuf: number;
  /** u64 */
  BytesOut: Deno.PointerValue;
  /** u64 */
  BytesIn: Deno.PointerValue;
  /** u32 */
  BytesReordered: number;
  /** u32 */
  BytesRetrans: number;
  /** u32 */
  FastRetrans: number;
  /** u32 */
  DupAcksIn: number;
  /** u32 */
  TimeoutEpisodes: number;
  /** u8 */
  SynRetrans: number;
  /** u32 */
  SndLimTransRwin: number;
  /** u32 */
  SndLimTimeRwin: number;
  /** u64 */
  SndLimBytesRwin: Deno.PointerValue;
  /** u32 */
  SndLimTransCwnd: number;
  /** u32 */
  SndLimTimeCwnd: number;
  /** u64 */
  SndLimBytesCwnd: Deno.PointerValue;
  /** u32 */
  SndLimTransSnd: number;
  /** u32 */
  SndLimTimeSnd: number;
  /** u64 */
  SndLimBytesSnd: Deno.PointerValue;
}

export const sizeofTCP_INFO_v1 = 144;

export function allocTCP_INFO_v1(data?: Partial<TCP_INFO_v1>): Uint8Array {
  const buf = new Uint8Array(sizeofTCP_INFO_v1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.State !== undefined) view.setInt32(0, Number(data.State), true);
  // 0x04: u32
  if (data?.Mss !== undefined) view.setUint32(4, Number(data.Mss), true);
  // 0x08: u64
  if (data?.ConnectionTimeMs !== undefined) view.setBigUint64(8, BigInt(data.ConnectionTimeMs), true);
  // 0x10: pointer
  if (data?.TimestampsEnabled !== undefined) view.setBigUint64(16, data.TimestampsEnabled === null ? 0n : BigInt(util.toPointer(data.TimestampsEnabled)), true);
  // 0x18: u32
  if (data?.RttUs !== undefined) view.setUint32(24, Number(data.RttUs), true);
  // 0x1c: u32
  if (data?.MinRttUs !== undefined) view.setUint32(28, Number(data.MinRttUs), true);
  // 0x20: u32
  if (data?.BytesInFlight !== undefined) view.setUint32(32, Number(data.BytesInFlight), true);
  // 0x24: u32
  if (data?.Cwnd !== undefined) view.setUint32(36, Number(data.Cwnd), true);
  // 0x28: u32
  if (data?.SndWnd !== undefined) view.setUint32(40, Number(data.SndWnd), true);
  // 0x2c: u32
  if (data?.RcvWnd !== undefined) view.setUint32(44, Number(data.RcvWnd), true);
  // 0x30: u32
  if (data?.RcvBuf !== undefined) view.setUint32(48, Number(data.RcvBuf), true);
  // 0x34: pad4
  // 0x38: u64
  if (data?.BytesOut !== undefined) view.setBigUint64(56, BigInt(data.BytesOut), true);
  // 0x40: u64
  if (data?.BytesIn !== undefined) view.setBigUint64(64, BigInt(data.BytesIn), true);
  // 0x48: u32
  if (data?.BytesReordered !== undefined) view.setUint32(72, Number(data.BytesReordered), true);
  // 0x4c: u32
  if (data?.BytesRetrans !== undefined) view.setUint32(76, Number(data.BytesRetrans), true);
  // 0x50: u32
  if (data?.FastRetrans !== undefined) view.setUint32(80, Number(data.FastRetrans), true);
  // 0x54: u32
  if (data?.DupAcksIn !== undefined) view.setUint32(84, Number(data.DupAcksIn), true);
  // 0x58: u32
  if (data?.TimeoutEpisodes !== undefined) view.setUint32(88, Number(data.TimeoutEpisodes), true);
  // 0x5c: u8
  if (data?.SynRetrans !== undefined) view.setUint8(92, Number(data.SynRetrans));
  // 0x5d: u32
  if (data?.SndLimTransRwin !== undefined) view.setUint32(93, Number(data.SndLimTransRwin), true);
  // 0x61: u32
  if (data?.SndLimTimeRwin !== undefined) view.setUint32(97, Number(data.SndLimTimeRwin), true);
  // 0x65: pad3
  // 0x68: u64
  if (data?.SndLimBytesRwin !== undefined) view.setBigUint64(104, BigInt(data.SndLimBytesRwin), true);
  // 0x70: u32
  if (data?.SndLimTransCwnd !== undefined) view.setUint32(112, Number(data.SndLimTransCwnd), true);
  // 0x74: u32
  if (data?.SndLimTimeCwnd !== undefined) view.setUint32(116, Number(data.SndLimTimeCwnd), true);
  // 0x78: u64
  if (data?.SndLimBytesCwnd !== undefined) view.setBigUint64(120, BigInt(data.SndLimBytesCwnd), true);
  // 0x80: u32
  if (data?.SndLimTransSnd !== undefined) view.setUint32(128, Number(data.SndLimTransSnd), true);
  // 0x84: u32
  if (data?.SndLimTimeSnd !== undefined) view.setUint32(132, Number(data.SndLimTimeSnd), true);
  // 0x88: u64
  if (data?.SndLimBytesSnd !== undefined) view.setBigUint64(136, BigInt(data.SndLimBytesSnd), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.INET_PORT_RANGE (size: 8)
 */
export interface INET_PORT_RANGE {
  /** u16 */
  StartPort: number;
  /** u16 */
  NumberOfPorts: number;
}

export const sizeofINET_PORT_RANGE = 8;

export function allocINET_PORT_RANGE(data?: Partial<INET_PORT_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofINET_PORT_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.StartPort !== undefined) view.setUint16(0, Number(data.StartPort), true);
  // 0x02: u16
  if (data?.NumberOfPorts !== undefined) view.setUint16(2, Number(data.NumberOfPorts), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.INET_PORT_RESERVATION_TOKEN (size: 8)
 */
export interface INET_PORT_RESERVATION_TOKEN {
  /** u64 */
  Token: Deno.PointerValue;
}

export const sizeofINET_PORT_RESERVATION_TOKEN = 8;

export function allocINET_PORT_RESERVATION_TOKEN(data?: Partial<INET_PORT_RESERVATION_TOKEN>): Uint8Array {
  const buf = new Uint8Array(sizeofINET_PORT_RESERVATION_TOKEN);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Token !== undefined) view.setBigUint64(0, BigInt(data.Token), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.INET_PORT_RESERVATION_INSTANCE (size: 16)
 */
export interface INET_PORT_RESERVATION_INSTANCE {
  /** Windows.Win32.Networking.WinSock.INET_PORT_RANGE */
  Reservation: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.INET_PORT_RESERVATION_TOKEN */
  Token: Uint8Array | Deno.PointerValue | null;
}

export const sizeofINET_PORT_RESERVATION_INSTANCE = 16;

export function allocINET_PORT_RESERVATION_INSTANCE(data?: Partial<INET_PORT_RESERVATION_INSTANCE>): Uint8Array {
  const buf = new Uint8Array(sizeofINET_PORT_RESERVATION_INSTANCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reservation !== undefined) view.setBigUint64(0, data.Reservation === null ? 0n : BigInt(util.toPointer(data.Reservation)), true);
  // 0x08: pointer
  if (data?.Token !== undefined) view.setBigUint64(8, data.Token === null ? 0n : BigInt(util.toPointer(data.Token)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.INET_PORT_RESERVATION_INFORMATION (size: 8)
 */
export interface INET_PORT_RESERVATION_INFORMATION {
  /** u32 */
  OwningPid: number;
}

export const sizeofINET_PORT_RESERVATION_INFORMATION = 8;

export function allocINET_PORT_RESERVATION_INFORMATION(data?: Partial<INET_PORT_RESERVATION_INFORMATION>): Uint8Array {
  const buf = new Uint8Array(sizeofINET_PORT_RESERVATION_INFORMATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OwningPid !== undefined) view.setUint32(0, Number(data.OwningPid), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKET_SECURITY_SETTINGS (size: 8)
 */
export interface SOCKET_SECURITY_SETTINGS {
  /** Windows.Win32.Networking.WinSock.SOCKET_SECURITY_PROTOCOL */
  SecurityProtocol: SOCKET_SECURITY_PROTOCOL;
  /** u32 */
  SecurityFlags: number;
}

export const sizeofSOCKET_SECURITY_SETTINGS = 8;

export function allocSOCKET_SECURITY_SETTINGS(data?: Partial<SOCKET_SECURITY_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKET_SECURITY_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SecurityProtocol !== undefined) view.setInt32(0, Number(data.SecurityProtocol), true);
  // 0x04: u32
  if (data?.SecurityFlags !== undefined) view.setUint32(4, Number(data.SecurityFlags), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKET_SECURITY_SETTINGS_IPSEC (size: 72)
 */
export interface SOCKET_SECURITY_SETTINGS_IPSEC {
  /** Windows.Win32.Networking.WinSock.SOCKET_SECURITY_PROTOCOL */
  SecurityProtocol: SOCKET_SECURITY_PROTOCOL;
  /** u32 */
  SecurityFlags: number;
  /** u32 */
  IpsecFlags: number;
  /** System.Guid */
  AuthipMMPolicyKey: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  AuthipQMPolicyKey: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  Reserved: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Reserved2: Deno.PointerValue;
  /** u32 */
  UserNameStringLen: number;
  /** u32 */
  DomainNameStringLen: number;
  /** u32 */
  PasswordStringLen: number;
  /** array */
  AllStrings: Deno.PointerValue | null;
}

export const sizeofSOCKET_SECURITY_SETTINGS_IPSEC = 72;

export function allocSOCKET_SECURITY_SETTINGS_IPSEC(data?: Partial<SOCKET_SECURITY_SETTINGS_IPSEC>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKET_SECURITY_SETTINGS_IPSEC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SecurityProtocol !== undefined) view.setInt32(0, Number(data.SecurityProtocol), true);
  // 0x04: u32
  if (data?.SecurityFlags !== undefined) view.setUint32(4, Number(data.SecurityFlags), true);
  // 0x08: u32
  if (data?.IpsecFlags !== undefined) view.setUint32(8, Number(data.IpsecFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.AuthipMMPolicyKey !== undefined) view.setBigUint64(16, data.AuthipMMPolicyKey === null ? 0n : BigInt(util.toPointer(data.AuthipMMPolicyKey)), true);
  // 0x18: pointer
  if (data?.AuthipQMPolicyKey !== undefined) view.setBigUint64(24, data.AuthipQMPolicyKey === null ? 0n : BigInt(util.toPointer(data.AuthipQMPolicyKey)), true);
  // 0x20: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(32, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  // 0x28: u64
  if (data?.Reserved2 !== undefined) view.setBigUint64(40, BigInt(data.Reserved2), true);
  // 0x30: u32
  if (data?.UserNameStringLen !== undefined) view.setUint32(48, Number(data.UserNameStringLen), true);
  // 0x34: u32
  if (data?.DomainNameStringLen !== undefined) view.setUint32(52, Number(data.DomainNameStringLen), true);
  // 0x38: u32
  if (data?.PasswordStringLen !== undefined) view.setUint32(56, Number(data.PasswordStringLen), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.AllStrings !== undefined) view.setBigUint64(64, data.AllStrings === null ? 0n : BigInt(util.toPointer(data.AllStrings)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKET_PEER_TARGET_NAME (size: 32)
 */
export interface SOCKET_PEER_TARGET_NAME {
  /** Windows.Win32.Networking.WinSock.SOCKET_SECURITY_PROTOCOL */
  SecurityProtocol: SOCKET_SECURITY_PROTOCOL;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  PeerAddress: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PeerTargetNameStringLen: number;
  /** array */
  AllStrings: Deno.PointerValue | null;
}

export const sizeofSOCKET_PEER_TARGET_NAME = 32;

export function allocSOCKET_PEER_TARGET_NAME(data?: Partial<SOCKET_PEER_TARGET_NAME>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKET_PEER_TARGET_NAME);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SecurityProtocol !== undefined) view.setInt32(0, Number(data.SecurityProtocol), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PeerAddress !== undefined) view.setBigUint64(8, data.PeerAddress === null ? 0n : BigInt(util.toPointer(data.PeerAddress)), true);
  // 0x10: u32
  if (data?.PeerTargetNameStringLen !== undefined) view.setUint32(16, Number(data.PeerTargetNameStringLen), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.AllStrings !== undefined) view.setBigUint64(24, data.AllStrings === null ? 0n : BigInt(util.toPointer(data.AllStrings)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKET_SECURITY_QUERY_TEMPLATE (size: 24)
 */
export interface SOCKET_SECURITY_QUERY_TEMPLATE {
  /** Windows.Win32.Networking.WinSock.SOCKET_SECURITY_PROTOCOL */
  SecurityProtocol: SOCKET_SECURITY_PROTOCOL;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  PeerAddress: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PeerTokenAccessMask: number;
}

export const sizeofSOCKET_SECURITY_QUERY_TEMPLATE = 24;

export function allocSOCKET_SECURITY_QUERY_TEMPLATE(data?: Partial<SOCKET_SECURITY_QUERY_TEMPLATE>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKET_SECURITY_QUERY_TEMPLATE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SecurityProtocol !== undefined) view.setInt32(0, Number(data.SecurityProtocol), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PeerAddress !== undefined) view.setBigUint64(8, data.PeerAddress === null ? 0n : BigInt(util.toPointer(data.PeerAddress)), true);
  // 0x10: u32
  if (data?.PeerTokenAccessMask !== undefined) view.setUint32(16, Number(data.PeerTokenAccessMask), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2 (size: 32)
 */
export interface SOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2 {
  /** Windows.Win32.Networking.WinSock.SOCKET_SECURITY_PROTOCOL */
  SecurityProtocol: SOCKET_SECURITY_PROTOCOL;
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  PeerAddress: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  PeerTokenAccessMask: number;
  /** u32 */
  Flags: number;
  /** u32 */
  FieldMask: number;
}

export const sizeofSOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2 = 32;

export function allocSOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2(data?: Partial<SOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKET_SECURITY_QUERY_TEMPLATE_IPSEC2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SecurityProtocol !== undefined) view.setInt32(0, Number(data.SecurityProtocol), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.PeerAddress !== undefined) view.setBigUint64(8, data.PeerAddress === null ? 0n : BigInt(util.toPointer(data.PeerAddress)), true);
  // 0x10: u32
  if (data?.PeerTokenAccessMask !== undefined) view.setUint32(16, Number(data.PeerTokenAccessMask), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  // 0x18: u32
  if (data?.FieldMask !== undefined) view.setUint32(24, Number(data.FieldMask), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKET_SECURITY_QUERY_INFO (size: 24)
 */
export interface SOCKET_SECURITY_QUERY_INFO {
  /** Windows.Win32.Networking.WinSock.SOCKET_SECURITY_PROTOCOL */
  SecurityProtocol: SOCKET_SECURITY_PROTOCOL;
  /** u32 */
  Flags: number;
  /** u64 */
  PeerApplicationAccessTokenHandle: Deno.PointerValue;
  /** u64 */
  PeerMachineAccessTokenHandle: Deno.PointerValue;
}

export const sizeofSOCKET_SECURITY_QUERY_INFO = 24;

export function allocSOCKET_SECURITY_QUERY_INFO(data?: Partial<SOCKET_SECURITY_QUERY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKET_SECURITY_QUERY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SecurityProtocol !== undefined) view.setInt32(0, Number(data.SecurityProtocol), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u64
  if (data?.PeerApplicationAccessTokenHandle !== undefined) view.setBigUint64(8, BigInt(data.PeerApplicationAccessTokenHandle), true);
  // 0x10: u64
  if (data?.PeerMachineAccessTokenHandle !== undefined) view.setBigUint64(16, BigInt(data.PeerMachineAccessTokenHandle), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SOCKET_SECURITY_QUERY_INFO_IPSEC2 (size: 56)
 */
export interface SOCKET_SECURITY_QUERY_INFO_IPSEC2 {
  /** Windows.Win32.Networking.WinSock.SOCKET_SECURITY_PROTOCOL */
  SecurityProtocol: SOCKET_SECURITY_PROTOCOL;
  /** u32 */
  Flags: number;
  /** u64 */
  PeerApplicationAccessTokenHandle: Deno.PointerValue;
  /** u64 */
  PeerMachineAccessTokenHandle: Deno.PointerValue;
  /** u64 */
  MmSaId: Deno.PointerValue;
  /** u64 */
  QmSaId: Deno.PointerValue;
  /** u32 */
  NegotiationWinerr: number;
  /** System.Guid */
  SaLookupContext: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSOCKET_SECURITY_QUERY_INFO_IPSEC2 = 56;

export function allocSOCKET_SECURITY_QUERY_INFO_IPSEC2(data?: Partial<SOCKET_SECURITY_QUERY_INFO_IPSEC2>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKET_SECURITY_QUERY_INFO_IPSEC2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SecurityProtocol !== undefined) view.setInt32(0, Number(data.SecurityProtocol), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u64
  if (data?.PeerApplicationAccessTokenHandle !== undefined) view.setBigUint64(8, BigInt(data.PeerApplicationAccessTokenHandle), true);
  // 0x10: u64
  if (data?.PeerMachineAccessTokenHandle !== undefined) view.setBigUint64(16, BigInt(data.PeerMachineAccessTokenHandle), true);
  // 0x18: u64
  if (data?.MmSaId !== undefined) view.setBigUint64(24, BigInt(data.MmSaId), true);
  // 0x20: u64
  if (data?.QmSaId !== undefined) view.setBigUint64(32, BigInt(data.QmSaId), true);
  // 0x28: u32
  if (data?.NegotiationWinerr !== undefined) view.setUint32(40, Number(data.NegotiationWinerr), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.SaLookupContext !== undefined) view.setBigUint64(48, data.SaLookupContext === null ? 0n : BigInt(util.toPointer(data.SaLookupContext)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.RSS_SCALABILITY_INFO (size: 8)
 */
export interface RSS_SCALABILITY_INFO {
  /** Windows.Win32.Foundation.BOOLEAN */
  RssEnabled: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRSS_SCALABILITY_INFO = 8;

export function allocRSS_SCALABILITY_INFO(data?: Partial<RSS_SCALABILITY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRSS_SCALABILITY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RssEnabled !== undefined) view.setBigUint64(0, data.RssEnabled === null ? 0n : BigInt(util.toPointer(data.RssEnabled)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSA_COMPATIBILITY_MODE (size: 8)
 */
export interface WSA_COMPATIBILITY_MODE {
  /** Windows.Win32.Networking.WinSock.WSA_COMPATIBILITY_BEHAVIOR_ID */
  BehaviorId: WSA_COMPATIBILITY_BEHAVIOR_ID;
  /** u32 */
  TargetOsVersion: number;
}

export const sizeofWSA_COMPATIBILITY_MODE = 8;

export function allocWSA_COMPATIBILITY_MODE(data?: Partial<WSA_COMPATIBILITY_MODE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSA_COMPATIBILITY_MODE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BehaviorId !== undefined) view.setInt32(0, Number(data.BehaviorId), true);
  // 0x04: u32
  if (data?.TargetOsVersion !== undefined) view.setUint32(4, Number(data.TargetOsVersion), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.RIORESULT (size: 24)
 */
export interface RIORESULT {
  /** i32 */
  Status: number;
  /** u32 */
  BytesTransferred: number;
  /** u64 */
  SocketContext: Deno.PointerValue;
  /** u64 */
  RequestContext: Deno.PointerValue;
}

export const sizeofRIORESULT = 24;

export function allocRIORESULT(data?: Partial<RIORESULT>): Uint8Array {
  const buf = new Uint8Array(sizeofRIORESULT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Status !== undefined) view.setInt32(0, Number(data.Status), true);
  // 0x04: u32
  if (data?.BytesTransferred !== undefined) view.setUint32(4, Number(data.BytesTransferred), true);
  // 0x08: u64
  if (data?.SocketContext !== undefined) view.setBigUint64(8, BigInt(data.SocketContext), true);
  // 0x10: u64
  if (data?.RequestContext !== undefined) view.setBigUint64(16, BigInt(data.RequestContext), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.RIO_BUF (size: 16)
 */
export interface RIO_BUF {
  /** ptr */
  BufferId: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  Offset: number;
  /** u32 */
  Length: number;
}

export const sizeofRIO_BUF = 16;

export function allocRIO_BUF(data?: Partial<RIO_BUF>): Uint8Array {
  const buf = new Uint8Array(sizeofRIO_BUF);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.BufferId !== undefined) view.setBigUint64(0, data.BufferId === null ? 0n : BigInt(util.toPointer(data.BufferId)), true);
  // 0x08: u32
  if (data?.Offset !== undefined) view.setUint32(8, Number(data.Offset), true);
  // 0x0c: u32
  if (data?.Length !== undefined) view.setUint32(12, Number(data.Length), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.RIO_CMSG_BUFFER (size: 8)
 */
export interface RIO_CMSG_BUFFER {
  /** u32 */
  TotalLength: number;
}

export const sizeofRIO_CMSG_BUFFER = 8;

export function allocRIO_CMSG_BUFFER(data?: Partial<RIO_CMSG_BUFFER>): Uint8Array {
  const buf = new Uint8Array(sizeofRIO_CMSG_BUFFER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TotalLength !== undefined) view.setUint32(0, Number(data.TotalLength), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ATM_ADDRESS (size: 16)
 */
export interface ATM_ADDRESS {
  /** u32 */
  AddressType: number;
  /** u32 */
  NumofDigits: number;
  /** array */
  Addr: Deno.PointerValue | null;
}

export const sizeofATM_ADDRESS = 16;

export function allocATM_ADDRESS(data?: Partial<ATM_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofATM_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AddressType !== undefined) view.setUint32(0, Number(data.AddressType), true);
  // 0x04: u32
  if (data?.NumofDigits !== undefined) view.setUint32(4, Number(data.NumofDigits), true);
  // 0x08: pointer
  if (data?.Addr !== undefined) view.setBigUint64(8, data.Addr === null ? 0n : BigInt(util.toPointer(data.Addr)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ATM_BLLI (size: 32)
 */
export interface ATM_BLLI {
  /** u32 */
  Layer2Protocol: number;
  /** u32 */
  Layer2UserSpecifiedProtocol: number;
  /** u32 */
  Layer3Protocol: number;
  /** u32 */
  Layer3UserSpecifiedProtocol: number;
  /** u32 */
  Layer3IPI: number;
  /** array */
  SnapID: Deno.PointerValue | null;
}

export const sizeofATM_BLLI = 32;

export function allocATM_BLLI(data?: Partial<ATM_BLLI>): Uint8Array {
  const buf = new Uint8Array(sizeofATM_BLLI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Layer2Protocol !== undefined) view.setUint32(0, Number(data.Layer2Protocol), true);
  // 0x04: u32
  if (data?.Layer2UserSpecifiedProtocol !== undefined) view.setUint32(4, Number(data.Layer2UserSpecifiedProtocol), true);
  // 0x08: u32
  if (data?.Layer3Protocol !== undefined) view.setUint32(8, Number(data.Layer3Protocol), true);
  // 0x0c: u32
  if (data?.Layer3UserSpecifiedProtocol !== undefined) view.setUint32(12, Number(data.Layer3UserSpecifiedProtocol), true);
  // 0x10: u32
  if (data?.Layer3IPI !== undefined) view.setUint32(16, Number(data.Layer3IPI), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.SnapID !== undefined) view.setBigUint64(24, data.SnapID === null ? 0n : BigInt(util.toPointer(data.SnapID)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ATM_BHLI (size: 16)
 */
export interface ATM_BHLI {
  /** u32 */
  HighLayerInfoType: number;
  /** u32 */
  HighLayerInfoLength: number;
  /** array */
  HighLayerInfo: Deno.PointerValue | null;
}

export const sizeofATM_BHLI = 16;

export function allocATM_BHLI(data?: Partial<ATM_BHLI>): Uint8Array {
  const buf = new Uint8Array(sizeofATM_BHLI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.HighLayerInfoType !== undefined) view.setUint32(0, Number(data.HighLayerInfoType), true);
  // 0x04: u32
  if (data?.HighLayerInfoLength !== undefined) view.setUint32(4, Number(data.HighLayerInfoLength), true);
  // 0x08: pointer
  if (data?.HighLayerInfo !== undefined) view.setBigUint64(8, data.HighLayerInfo === null ? 0n : BigInt(util.toPointer(data.HighLayerInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.sockaddr_atm (size: 32)
 */
export interface sockaddr_atm {
  /** u16 */
  satm_family: number;
  /** Windows.Win32.Networking.WinSock.ATM_ADDRESS */
  satm_number: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.ATM_BLLI */
  satm_blli: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.ATM_BHLI */
  satm_bhli: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSockaddr_atm = 32;

export function allocSockaddr_atm(data?: Partial<sockaddr_atm>): Uint8Array {
  const buf = new Uint8Array(sizeofSockaddr_atm);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.satm_family !== undefined) view.setUint16(0, Number(data.satm_family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.satm_number !== undefined) view.setBigUint64(8, data.satm_number === null ? 0n : BigInt(util.toPointer(data.satm_number)), true);
  // 0x10: pointer
  if (data?.satm_blli !== undefined) view.setBigUint64(16, data.satm_blli === null ? 0n : BigInt(util.toPointer(data.satm_blli)), true);
  // 0x18: pointer
  if (data?.satm_bhli !== undefined) view.setBigUint64(24, data.satm_bhli === null ? 0n : BigInt(util.toPointer(data.satm_bhli)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.Q2931_IE (size: 16)
 */
export interface Q2931_IE {
  /** Windows.Win32.Networking.WinSock.Q2931_IE_TYPE */
  IEType: Q2931_IE_TYPE;
  /** u32 */
  IELength: number;
  /** array */
  IE: Deno.PointerValue | null;
}

export const sizeofQ2931_IE = 16;

export function allocQ2931_IE(data?: Partial<Q2931_IE>): Uint8Array {
  const buf = new Uint8Array(sizeofQ2931_IE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.IEType !== undefined) view.setInt32(0, Number(data.IEType), true);
  // 0x04: u32
  if (data?.IELength !== undefined) view.setUint32(4, Number(data.IELength), true);
  // 0x08: pointer
  if (data?.IE !== undefined) view.setBigUint64(8, data.IE === null ? 0n : BigInt(util.toPointer(data.IE)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.AAL5_PARAMETERS (size: 16)
 */
export interface AAL5_PARAMETERS {
  /** u32 */
  ForwardMaxCPCSSDUSize: number;
  /** u32 */
  BackwardMaxCPCSSDUSize: number;
  /** u8 */
  Mode: number;
  /** u8 */
  SSCSType: number;
}

export const sizeofAAL5_PARAMETERS = 16;

export function allocAAL5_PARAMETERS(data?: Partial<AAL5_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofAAL5_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ForwardMaxCPCSSDUSize !== undefined) view.setUint32(0, Number(data.ForwardMaxCPCSSDUSize), true);
  // 0x04: u32
  if (data?.BackwardMaxCPCSSDUSize !== undefined) view.setUint32(4, Number(data.BackwardMaxCPCSSDUSize), true);
  // 0x08: u8
  if (data?.Mode !== undefined) view.setUint8(8, Number(data.Mode));
  // 0x09: u8
  if (data?.SSCSType !== undefined) view.setUint8(9, Number(data.SSCSType));
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.AALUSER_PARAMETERS (size: 8)
 */
export interface AALUSER_PARAMETERS {
  /** u32 */
  UserDefined: number;
}

export const sizeofAALUSER_PARAMETERS = 8;

export function allocAALUSER_PARAMETERS(data?: Partial<AALUSER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofAALUSER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UserDefined !== undefined) view.setUint32(0, Number(data.UserDefined), true);
  // 0x04: pad4
  return buf;
}

/**
 * _AALSpecificParameters_e__Union (size: 16)
 */
export interface _AALSpecificParameters_e__Union {
  /** Windows.Win32.Networking.WinSock.AAL5_PARAMETERS */
  AAL5Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.AALUSER_PARAMETERS */
  AALUserParameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_AALSpecificParameters_e__Union = 16;

export function alloc_AALSpecificParameters_e__Union(data?: Partial<_AALSpecificParameters_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_AALSpecificParameters_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AAL5Parameters !== undefined) view.setBigUint64(0, data.AAL5Parameters === null ? 0n : BigInt(util.toPointer(data.AAL5Parameters)), true);
  // 0x08: pointer
  if (data?.AALUserParameters !== undefined) view.setBigUint64(8, data.AALUserParameters === null ? 0n : BigInt(util.toPointer(data.AALUserParameters)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.AAL_PARAMETERS_IE (size: 16)
 */
export interface AAL_PARAMETERS_IE {
  /** Windows.Win32.Networking.WinSock.AAL_TYPE */
  AALType: AAL_TYPE;
  /** _AALSpecificParameters_e__Union */
  AALSpecificParameters: Uint8Array | Deno.PointerValue | null;
}

export const sizeofAAL_PARAMETERS_IE = 16;

export function allocAAL_PARAMETERS_IE(data?: Partial<AAL_PARAMETERS_IE>): Uint8Array {
  const buf = new Uint8Array(sizeofAAL_PARAMETERS_IE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AALType !== undefined) view.setInt32(0, Number(data.AALType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.AALSpecificParameters !== undefined) view.setBigUint64(8, data.AALSpecificParameters === null ? 0n : BigInt(util.toPointer(data.AALSpecificParameters)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ATM_TD (size: 32)
 */
export interface ATM_TD {
  /** u32 */
  PeakCellRate_CLP0: number;
  /** u32 */
  PeakCellRate_CLP01: number;
  /** u32 */
  SustainableCellRate_CLP0: number;
  /** u32 */
  SustainableCellRate_CLP01: number;
  /** u32 */
  MaxBurstSize_CLP0: number;
  /** u32 */
  MaxBurstSize_CLP01: number;
  /** Windows.Win32.Foundation.BOOL */
  Tagging: boolean;
}

export const sizeofATM_TD = 32;

export function allocATM_TD(data?: Partial<ATM_TD>): Uint8Array {
  const buf = new Uint8Array(sizeofATM_TD);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PeakCellRate_CLP0 !== undefined) view.setUint32(0, Number(data.PeakCellRate_CLP0), true);
  // 0x04: u32
  if (data?.PeakCellRate_CLP01 !== undefined) view.setUint32(4, Number(data.PeakCellRate_CLP01), true);
  // 0x08: u32
  if (data?.SustainableCellRate_CLP0 !== undefined) view.setUint32(8, Number(data.SustainableCellRate_CLP0), true);
  // 0x0c: u32
  if (data?.SustainableCellRate_CLP01 !== undefined) view.setUint32(12, Number(data.SustainableCellRate_CLP01), true);
  // 0x10: u32
  if (data?.MaxBurstSize_CLP0 !== undefined) view.setUint32(16, Number(data.MaxBurstSize_CLP0), true);
  // 0x14: u32
  if (data?.MaxBurstSize_CLP01 !== undefined) view.setUint32(20, Number(data.MaxBurstSize_CLP01), true);
  // 0x18: i32
  if (data?.Tagging !== undefined) view.setInt32(24, Number(data.Tagging), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ATM_TRAFFIC_DESCRIPTOR_IE (size: 24)
 */
export interface ATM_TRAFFIC_DESCRIPTOR_IE {
  /** Windows.Win32.Networking.WinSock.ATM_TD */
  Forward: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.ATM_TD */
  Backward: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  BestEffort: boolean;
}

export const sizeofATM_TRAFFIC_DESCRIPTOR_IE = 24;

export function allocATM_TRAFFIC_DESCRIPTOR_IE(data?: Partial<ATM_TRAFFIC_DESCRIPTOR_IE>): Uint8Array {
  const buf = new Uint8Array(sizeofATM_TRAFFIC_DESCRIPTOR_IE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Forward !== undefined) view.setBigUint64(0, data.Forward === null ? 0n : BigInt(util.toPointer(data.Forward)), true);
  // 0x08: pointer
  if (data?.Backward !== undefined) view.setBigUint64(8, data.Backward === null ? 0n : BigInt(util.toPointer(data.Backward)), true);
  // 0x10: i32
  if (data?.BestEffort !== undefined) view.setInt32(16, Number(data.BestEffort), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ATM_BROADBAND_BEARER_CAPABILITY_IE (size: 8)
 */
export interface ATM_BROADBAND_BEARER_CAPABILITY_IE {
  /** u8 */
  BearerClass: number;
  /** u8 */
  TrafficType: number;
  /** u8 */
  TimingRequirements: number;
  /** u8 */
  ClippingSusceptability: number;
  /** u8 */
  UserPlaneConnectionConfig: number;
}

export const sizeofATM_BROADBAND_BEARER_CAPABILITY_IE = 8;

export function allocATM_BROADBAND_BEARER_CAPABILITY_IE(data?: Partial<ATM_BROADBAND_BEARER_CAPABILITY_IE>): Uint8Array {
  const buf = new Uint8Array(sizeofATM_BROADBAND_BEARER_CAPABILITY_IE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.BearerClass !== undefined) view.setUint8(0, Number(data.BearerClass));
  // 0x01: u8
  if (data?.TrafficType !== undefined) view.setUint8(1, Number(data.TrafficType));
  // 0x02: u8
  if (data?.TimingRequirements !== undefined) view.setUint8(2, Number(data.TimingRequirements));
  // 0x03: u8
  if (data?.ClippingSusceptability !== undefined) view.setUint8(3, Number(data.ClippingSusceptability));
  // 0x04: u8
  if (data?.UserPlaneConnectionConfig !== undefined) view.setUint8(4, Number(data.UserPlaneConnectionConfig));
  // 0x05: pad3
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ATM_BLLI_IE (size: 40)
 */
export interface ATM_BLLI_IE {
  /** u32 */
  Layer2Protocol: number;
  /** u8 */
  Layer2Mode: number;
  /** u8 */
  Layer2WindowSize: number;
  /** u32 */
  Layer2UserSpecifiedProtocol: number;
  /** u32 */
  Layer3Protocol: number;
  /** u8 */
  Layer3Mode: number;
  /** u8 */
  Layer3DefaultPacketSize: number;
  /** u8 */
  Layer3PacketWindowSize: number;
  /** u32 */
  Layer3UserSpecifiedProtocol: number;
  /** u32 */
  Layer3IPI: number;
  /** array */
  SnapID: Deno.PointerValue | null;
}

export const sizeofATM_BLLI_IE = 40;

export function allocATM_BLLI_IE(data?: Partial<ATM_BLLI_IE>): Uint8Array {
  const buf = new Uint8Array(sizeofATM_BLLI_IE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Layer2Protocol !== undefined) view.setUint32(0, Number(data.Layer2Protocol), true);
  // 0x04: u8
  if (data?.Layer2Mode !== undefined) view.setUint8(4, Number(data.Layer2Mode));
  // 0x05: u8
  if (data?.Layer2WindowSize !== undefined) view.setUint8(5, Number(data.Layer2WindowSize));
  // 0x06: u32
  if (data?.Layer2UserSpecifiedProtocol !== undefined) view.setUint32(6, Number(data.Layer2UserSpecifiedProtocol), true);
  // 0x0a: u32
  if (data?.Layer3Protocol !== undefined) view.setUint32(10, Number(data.Layer3Protocol), true);
  // 0x0e: u8
  if (data?.Layer3Mode !== undefined) view.setUint8(14, Number(data.Layer3Mode));
  // 0x0f: u8
  if (data?.Layer3DefaultPacketSize !== undefined) view.setUint8(15, Number(data.Layer3DefaultPacketSize));
  // 0x10: u8
  if (data?.Layer3PacketWindowSize !== undefined) view.setUint8(16, Number(data.Layer3PacketWindowSize));
  // 0x11: u32
  if (data?.Layer3UserSpecifiedProtocol !== undefined) view.setUint32(17, Number(data.Layer3UserSpecifiedProtocol), true);
  // 0x15: u32
  if (data?.Layer3IPI !== undefined) view.setUint32(21, Number(data.Layer3IPI), true);
  // 0x19: pad7
  // 0x20: pointer
  if (data?.SnapID !== undefined) view.setBigUint64(32, data.SnapID === null ? 0n : BigInt(util.toPointer(data.SnapID)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ATM_CALLING_PARTY_NUMBER_IE (size: 16)
 */
export interface ATM_CALLING_PARTY_NUMBER_IE {
  /** Windows.Win32.Networking.WinSock.ATM_ADDRESS */
  ATM_Number: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  Presentation_Indication: number;
  /** u8 */
  Screening_Indicator: number;
}

export const sizeofATM_CALLING_PARTY_NUMBER_IE = 16;

export function allocATM_CALLING_PARTY_NUMBER_IE(data?: Partial<ATM_CALLING_PARTY_NUMBER_IE>): Uint8Array {
  const buf = new Uint8Array(sizeofATM_CALLING_PARTY_NUMBER_IE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ATM_Number !== undefined) view.setBigUint64(0, data.ATM_Number === null ? 0n : BigInt(util.toPointer(data.ATM_Number)), true);
  // 0x08: u8
  if (data?.Presentation_Indication !== undefined) view.setUint8(8, Number(data.Presentation_Indication));
  // 0x09: u8
  if (data?.Screening_Indicator !== undefined) view.setUint8(9, Number(data.Screening_Indicator));
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ATM_CAUSE_IE (size: 16)
 */
export interface ATM_CAUSE_IE {
  /** u8 */
  Location: number;
  /** u8 */
  Cause: number;
  /** u8 */
  DiagnosticsLength: number;
  /** array */
  Diagnostics: Deno.PointerValue | null;
}

export const sizeofATM_CAUSE_IE = 16;

export function allocATM_CAUSE_IE(data?: Partial<ATM_CAUSE_IE>): Uint8Array {
  const buf = new Uint8Array(sizeofATM_CAUSE_IE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.Location !== undefined) view.setUint8(0, Number(data.Location));
  // 0x01: u8
  if (data?.Cause !== undefined) view.setUint8(1, Number(data.Cause));
  // 0x02: u8
  if (data?.DiagnosticsLength !== undefined) view.setUint8(2, Number(data.DiagnosticsLength));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.Diagnostics !== undefined) view.setBigUint64(8, data.Diagnostics === null ? 0n : BigInt(util.toPointer(data.Diagnostics)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ATM_QOS_CLASS_IE (size: 8)
 */
export interface ATM_QOS_CLASS_IE {
  /** u8 */
  QOSClassForward: number;
  /** u8 */
  QOSClassBackward: number;
}

export const sizeofATM_QOS_CLASS_IE = 8;

export function allocATM_QOS_CLASS_IE(data?: Partial<ATM_QOS_CLASS_IE>): Uint8Array {
  const buf = new Uint8Array(sizeofATM_QOS_CLASS_IE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.QOSClassForward !== undefined) view.setUint8(0, Number(data.QOSClassForward));
  // 0x01: u8
  if (data?.QOSClassBackward !== undefined) view.setUint8(1, Number(data.QOSClassBackward));
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ATM_TRANSIT_NETWORK_SELECTION_IE (size: 16)
 */
export interface ATM_TRANSIT_NETWORK_SELECTION_IE {
  /** u8 */
  TypeOfNetworkId: number;
  /** u8 */
  NetworkIdPlan: number;
  /** u8 */
  NetworkIdLength: number;
  /** array */
  NetworkId: Deno.PointerValue | null;
}

export const sizeofATM_TRANSIT_NETWORK_SELECTION_IE = 16;

export function allocATM_TRANSIT_NETWORK_SELECTION_IE(data?: Partial<ATM_TRANSIT_NETWORK_SELECTION_IE>): Uint8Array {
  const buf = new Uint8Array(sizeofATM_TRANSIT_NETWORK_SELECTION_IE);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.TypeOfNetworkId !== undefined) view.setUint8(0, Number(data.TypeOfNetworkId));
  // 0x01: u8
  if (data?.NetworkIdPlan !== undefined) view.setUint8(1, Number(data.NetworkIdPlan));
  // 0x02: u8
  if (data?.NetworkIdLength !== undefined) view.setUint8(2, Number(data.NetworkIdLength));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.NetworkId !== undefined) view.setBigUint64(8, data.NetworkId === null ? 0n : BigInt(util.toPointer(data.NetworkId)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ATM_CONNECTION_ID (size: 16)
 */
export interface ATM_CONNECTION_ID {
  /** u32 */
  DeviceNumber: number;
  /** u32 */
  VPI: number;
  /** u32 */
  VCI: number;
}

export const sizeofATM_CONNECTION_ID = 16;

export function allocATM_CONNECTION_ID(data?: Partial<ATM_CONNECTION_ID>): Uint8Array {
  const buf = new Uint8Array(sizeofATM_CONNECTION_ID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceNumber !== undefined) view.setUint32(0, Number(data.DeviceNumber), true);
  // 0x04: u32
  if (data?.VPI !== undefined) view.setUint32(4, Number(data.VPI), true);
  // 0x08: u32
  if (data?.VCI !== undefined) view.setUint32(8, Number(data.VCI), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.QoS.FLOWSPEC (size: 32)
 */
export interface FLOWSPEC {
  /** u32 */
  TokenRate: number;
  /** u32 */
  TokenBucketSize: number;
  /** u32 */
  PeakBandwidth: number;
  /** u32 */
  Latency: number;
  /** u32 */
  DelayVariation: number;
  /** u32 */
  ServiceType: number;
  /** u32 */
  MaxSduSize: number;
  /** u32 */
  MinimumPolicedSize: number;
}

export const sizeofFLOWSPEC = 32;

export function allocFLOWSPEC(data?: Partial<FLOWSPEC>): Uint8Array {
  const buf = new Uint8Array(sizeofFLOWSPEC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.TokenRate !== undefined) view.setUint32(0, Number(data.TokenRate), true);
  // 0x04: u32
  if (data?.TokenBucketSize !== undefined) view.setUint32(4, Number(data.TokenBucketSize), true);
  // 0x08: u32
  if (data?.PeakBandwidth !== undefined) view.setUint32(8, Number(data.PeakBandwidth), true);
  // 0x0c: u32
  if (data?.Latency !== undefined) view.setUint32(12, Number(data.Latency), true);
  // 0x10: u32
  if (data?.DelayVariation !== undefined) view.setUint32(16, Number(data.DelayVariation), true);
  // 0x14: u32
  if (data?.ServiceType !== undefined) view.setUint32(20, Number(data.ServiceType), true);
  // 0x18: u32
  if (data?.MaxSduSize !== undefined) view.setUint32(24, Number(data.MaxSduSize), true);
  // 0x1c: u32
  if (data?.MinimumPolicedSize !== undefined) view.setUint32(28, Number(data.MinimumPolicedSize), true);
  return buf;
}

/**
 * Windows.Win32.NetworkManagement.QoS.QOS (size: 24)
 */
export interface QOS {
  /** Windows.Win32.NetworkManagement.QoS.FLOWSPEC */
  SendingFlowspec: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.QoS.FLOWSPEC */
  ReceivingFlowspec: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.WSABUF */
  ProviderSpecific: Uint8Array | Deno.PointerValue | null;
}

export const sizeofQOS = 24;

export function allocQOS(data?: Partial<QOS>): Uint8Array {
  const buf = new Uint8Array(sizeofQOS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.SendingFlowspec !== undefined) view.setBigUint64(0, data.SendingFlowspec === null ? 0n : BigInt(util.toPointer(data.SendingFlowspec)), true);
  // 0x08: pointer
  if (data?.ReceivingFlowspec !== undefined) view.setBigUint64(8, data.ReceivingFlowspec === null ? 0n : BigInt(util.toPointer(data.ReceivingFlowspec)), true);
  // 0x10: pointer
  if (data?.ProviderSpecific !== undefined) view.setBigUint64(16, data.ProviderSpecific === null ? 0n : BigInt(util.toPointer(data.ProviderSpecific)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.ATM_PVC_PARAMS (size: 16)
 */
export interface ATM_PVC_PARAMS {
  /** Windows.Win32.Networking.WinSock.ATM_CONNECTION_ID */
  PvcConnectionId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.NetworkManagement.QoS.QOS */
  PvcQos: Uint8Array | Deno.PointerValue | null;
}

export const sizeofATM_PVC_PARAMS = 16;

export function allocATM_PVC_PARAMS(data?: Partial<ATM_PVC_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofATM_PVC_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PvcConnectionId !== undefined) view.setBigUint64(0, data.PvcConnectionId === null ? 0n : BigInt(util.toPointer(data.PvcConnectionId)), true);
  // 0x08: pointer
  if (data?.PvcQos !== undefined) view.setBigUint64(8, data.PvcQos === null ? 0n : BigInt(util.toPointer(data.PvcQos)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NAPI_DOMAIN_DESCRIPTION_BLOB (size: 16)
 */
export interface NAPI_DOMAIN_DESCRIPTION_BLOB {
  /** u32 */
  AuthLevel: number;
  /** u32 */
  cchDomainName: number;
  /** u32 */
  OffsetNextDomainDescription: number;
  /** u32 */
  OffsetThisDomainName: number;
}

export const sizeofNAPI_DOMAIN_DESCRIPTION_BLOB = 16;

export function allocNAPI_DOMAIN_DESCRIPTION_BLOB(data?: Partial<NAPI_DOMAIN_DESCRIPTION_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofNAPI_DOMAIN_DESCRIPTION_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AuthLevel !== undefined) view.setUint32(0, Number(data.AuthLevel), true);
  // 0x04: u32
  if (data?.cchDomainName !== undefined) view.setUint32(4, Number(data.cchDomainName), true);
  // 0x08: u32
  if (data?.OffsetNextDomainDescription !== undefined) view.setUint32(8, Number(data.OffsetNextDomainDescription), true);
  // 0x0c: u32
  if (data?.OffsetThisDomainName !== undefined) view.setUint32(12, Number(data.OffsetThisDomainName), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NAPI_PROVIDER_INSTALLATION_BLOB (size: 24)
 */
export interface NAPI_PROVIDER_INSTALLATION_BLOB {
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwProviderType: number;
  /** u32 */
  fSupportsWildCard: number;
  /** u32 */
  cDomains: number;
  /** u32 */
  OffsetFirstDomain: number;
}

export const sizeofNAPI_PROVIDER_INSTALLATION_BLOB = 24;

export function allocNAPI_PROVIDER_INSTALLATION_BLOB(data?: Partial<NAPI_PROVIDER_INSTALLATION_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofNAPI_PROVIDER_INSTALLATION_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.dwProviderType !== undefined) view.setUint32(4, Number(data.dwProviderType), true);
  // 0x08: u32
  if (data?.fSupportsWildCard !== undefined) view.setUint32(8, Number(data.fSupportsWildCard), true);
  // 0x0c: u32
  if (data?.cDomains !== undefined) view.setUint32(12, Number(data.cDomains), true);
  // 0x10: u32
  if (data?.OffsetFirstDomain !== undefined) view.setUint32(16, Number(data.OffsetFirstDomain), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.TRANSMIT_FILE_BUFFERS (size: 32)
 */
export interface TRANSMIT_FILE_BUFFERS {
  /** ptr */
  Head: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  HeadLength: number;
  /** ptr */
  Tail: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  TailLength: number;
}

export const sizeofTRANSMIT_FILE_BUFFERS = 32;

export function allocTRANSMIT_FILE_BUFFERS(data?: Partial<TRANSMIT_FILE_BUFFERS>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSMIT_FILE_BUFFERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Head !== undefined) view.setBigUint64(0, data.Head === null ? 0n : BigInt(util.toPointer(data.Head)), true);
  // 0x08: u32
  if (data?.HeadLength !== undefined) view.setUint32(8, Number(data.HeadLength), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Tail !== undefined) view.setBigUint64(16, data.Tail === null ? 0n : BigInt(util.toPointer(data.Tail)), true);
  // 0x18: u32
  if (data?.TailLength !== undefined) view.setUint32(24, Number(data.TailLength), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.TRANSMIT_PACKETS_ELEMENT (size: 16)
 */
export interface TRANSMIT_PACKETS_ELEMENT {
  /** u32 */
  dwElFlags: number;
  /** u32 */
  cLength: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofTRANSMIT_PACKETS_ELEMENT = 16;

export function allocTRANSMIT_PACKETS_ELEMENT(data?: Partial<TRANSMIT_PACKETS_ELEMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSMIT_PACKETS_ELEMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwElFlags !== undefined) view.setUint32(0, Number(data.dwElFlags), true);
  // 0x04: u32
  if (data?.cLength !== undefined) view.setUint32(4, Number(data.cLength), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * _header_e__Struct (size: 16)
 */
export interface _header_e__Struct {
  /** Windows.Win32.Networking.WinSock.NLA_BLOB_DATA_TYPE */
  type: NLA_BLOB_DATA_TYPE;
  /** u32 */
  dwSize: number;
  /** u32 */
  nextOffset: number;
}

export const sizeof_header_e__Struct = 16;

export function alloc_header_e__Struct(data?: Partial<_header_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_header_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.type !== undefined) view.setInt32(0, Number(data.type), true);
  // 0x04: u32
  if (data?.dwSize !== undefined) view.setUint32(4, Number(data.dwSize), true);
  // 0x08: u32
  if (data?.nextOffset !== undefined) view.setUint32(8, Number(data.nextOffset), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Devices.Bluetooth.SDP_LARGE_INTEGER_16 (size: 16)
 */
export interface SDP_LARGE_INTEGER_16 {
  /** u64 */
  LowPart: Deno.PointerValue;
  /** i64 */
  HighPart: Deno.PointerValue;
}

export const sizeofSDP_LARGE_INTEGER_16 = 16;

export function allocSDP_LARGE_INTEGER_16(data?: Partial<SDP_LARGE_INTEGER_16>): Uint8Array {
  const buf = new Uint8Array(sizeofSDP_LARGE_INTEGER_16);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.LowPart !== undefined) view.setBigUint64(0, BigInt(data.LowPart), true);
  // 0x08: i64
  if (data?.HighPart !== undefined) view.setBigInt64(8, BigInt(data.HighPart), true);
  return buf;
}

export type CHAR = number;

/**
 * Windows.Win32.Devices.Bluetooth.SDP_ULARGE_INTEGER_16 (size: 16)
 */
export interface SDP_ULARGE_INTEGER_16 {
  /** u64 */
  LowPart: Deno.PointerValue;
  /** u64 */
  HighPart: Deno.PointerValue;
}

export const sizeofSDP_ULARGE_INTEGER_16 = 16;

export function allocSDP_ULARGE_INTEGER_16(data?: Partial<SDP_ULARGE_INTEGER_16>): Uint8Array {
  const buf = new Uint8Array(sizeofSDP_ULARGE_INTEGER_16);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.LowPart !== undefined) view.setBigUint64(0, BigInt(data.LowPart), true);
  // 0x08: u64
  if (data?.HighPart !== undefined) view.setBigUint64(8, BigInt(data.HighPart), true);
  return buf;
}

/**
 * _string_e__Struct (size: 16)
 */
export interface _string_e__Struct {
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  length: number;
}

export const sizeof_string_e__Struct = 16;

export function alloc_string_e__Struct(data?: Partial<_string_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_string_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x08: u32
  if (data?.length !== undefined) view.setUint32(8, Number(data.length), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _url_e__Struct (size: 16)
 */
export interface _url_e__Struct {
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  length: number;
}

export const sizeof_url_e__Struct = 16;

export function alloc_url_e__Struct(data?: Partial<_url_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_url_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x08: u32
  if (data?.length !== undefined) view.setUint32(8, Number(data.length), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _sequence_e__Struct (size: 16)
 */
export interface _sequence_e__Struct {
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  length: number;
}

export const sizeof_sequence_e__Struct = 16;

export function alloc_sequence_e__Struct(data?: Partial<_sequence_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_sequence_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x08: u32
  if (data?.length !== undefined) view.setUint32(8, Number(data.length), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _alternative_e__Struct (size: 16)
 */
export interface _alternative_e__Struct {
  /** ptr */
  value: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  length: number;
}

export const sizeof_alternative_e__Struct = 16;

export function alloc_alternative_e__Struct(data?: Partial<_alternative_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_alternative_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.value !== undefined) view.setBigUint64(0, data.value === null ? 0n : BigInt(util.toPointer(data.value)), true);
  // 0x08: u32
  if (data?.length !== undefined) view.setUint32(8, Number(data.length), true);
  // 0x0c: pad4
  return buf;
}

/**
 * _data_e__Union (size: 104)
 */
export interface _data_e__Union {
  /** Windows.Win32.Devices.Bluetooth.SDP_LARGE_INTEGER_16 */
  int128: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  int64: Deno.PointerValue;
  /** i32 */
  int32: number;
  /** i16 */
  int16: number;
  /** Windows.Win32.Foundation.CHAR */
  int8: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Devices.Bluetooth.SDP_ULARGE_INTEGER_16 */
  uint128: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  uint64: Deno.PointerValue;
  /** u32 */
  uint32: number;
  /** u16 */
  uint16: number;
  /** u8 */
  uint8: number;
  /** u8 */
  booleanVal: number;
  /** System.Guid */
  uuid128: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  uuid32: number;
  /** u16 */
  uuid16: number;
  /** _string_e__Struct */
  string: Uint8Array | Deno.PointerValue | null;
  /** _url_e__Struct */
  url: Uint8Array | Deno.PointerValue | null;
  /** _sequence_e__Struct */
  sequence: Uint8Array | Deno.PointerValue | null;
  /** _alternative_e__Struct */
  alternative: Uint8Array | Deno.PointerValue | null;
}

export const sizeof_data_e__Union = 104;

export function alloc_data_e__Union(data?: Partial<_data_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_data_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.int128 !== undefined) view.setBigUint64(0, data.int128 === null ? 0n : BigInt(util.toPointer(data.int128)), true);
  // 0x08: i64
  if (data?.int64 !== undefined) view.setBigInt64(8, BigInt(data.int64), true);
  // 0x10: i32
  if (data?.int32 !== undefined) view.setInt32(16, Number(data.int32), true);
  // 0x14: i16
  if (data?.int16 !== undefined) view.setInt16(20, Number(data.int16), true);
  // 0x16: pad2
  // 0x18: pointer
  if (data?.int8 !== undefined) view.setBigUint64(24, data.int8 === null ? 0n : BigInt(util.toPointer(data.int8)), true);
  // 0x20: pointer
  if (data?.uint128 !== undefined) view.setBigUint64(32, data.uint128 === null ? 0n : BigInt(util.toPointer(data.uint128)), true);
  // 0x28: u64
  if (data?.uint64 !== undefined) view.setBigUint64(40, BigInt(data.uint64), true);
  // 0x30: u32
  if (data?.uint32 !== undefined) view.setUint32(48, Number(data.uint32), true);
  // 0x34: u16
  if (data?.uint16 !== undefined) view.setUint16(52, Number(data.uint16), true);
  // 0x36: u8
  if (data?.uint8 !== undefined) view.setUint8(54, Number(data.uint8));
  // 0x37: u8
  if (data?.booleanVal !== undefined) view.setUint8(55, Number(data.booleanVal));
  // 0x38: pointer
  if (data?.uuid128 !== undefined) view.setBigUint64(56, data.uuid128 === null ? 0n : BigInt(util.toPointer(data.uuid128)), true);
  // 0x40: u32
  if (data?.uuid32 !== undefined) view.setUint32(64, Number(data.uuid32), true);
  // 0x44: u16
  if (data?.uuid16 !== undefined) view.setUint16(68, Number(data.uuid16), true);
  // 0x46: pad2
  // 0x48: pointer
  if (data?.string !== undefined) view.setBigUint64(72, data.string === null ? 0n : BigInt(util.toPointer(data.string)), true);
  // 0x50: pointer
  if (data?.url !== undefined) view.setBigUint64(80, data.url === null ? 0n : BigInt(util.toPointer(data.url)), true);
  // 0x58: pointer
  if (data?.sequence !== undefined) view.setBigUint64(88, data.sequence === null ? 0n : BigInt(util.toPointer(data.sequence)), true);
  // 0x60: pointer
  if (data?.alternative !== undefined) view.setBigUint64(96, data.alternative === null ? 0n : BigInt(util.toPointer(data.alternative)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NLA_BLOB (size: 16)
 */
export interface NLA_BLOB {
  /** _header_e__Struct */
  header: Uint8Array | Deno.PointerValue | null;
  /** _data_e__Union */
  data: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNLA_BLOB = 16;

export function allocNLA_BLOB(data?: Partial<NLA_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofNLA_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.header !== undefined) view.setBigUint64(0, data.header === null ? 0n : BigInt(util.toPointer(data.header)), true);
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : BigInt(util.toPointer(data.data)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSAPOLLDATA (size: 24)
 */
export interface WSAPOLLDATA {
  /** i32 */
  result: number;
  /** u32 */
  fds: number;
  /** i32 */
  timeout: number;
  /** array */
  fdArray: Deno.PointerValue | null;
}

export const sizeofWSAPOLLDATA = 24;

export function allocWSAPOLLDATA(data?: Partial<WSAPOLLDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofWSAPOLLDATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.result !== undefined) view.setInt32(0, Number(data.result), true);
  // 0x04: u32
  if (data?.fds !== undefined) view.setUint32(4, Number(data.fds), true);
  // 0x08: i32
  if (data?.timeout !== undefined) view.setInt32(8, Number(data.timeout), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.fdArray !== undefined) view.setBigUint64(16, data.fdArray === null ? 0n : BigInt(util.toPointer(data.fdArray)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSASENDMSG (size: 40)
 */
export interface WSASENDMSG {
  /** ptr */
  lpMsg: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpNumberOfBytesSent: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpOverlapped: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Networking.WinSock.LPWSAOVERLAPPED_COMPLETION_ROUTINE */
  lpCompletionRoutine: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWSASENDMSG = 40;

export function allocWSASENDMSG(data?: Partial<WSASENDMSG>): Uint8Array {
  const buf = new Uint8Array(sizeofWSASENDMSG);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpMsg !== undefined) view.setBigUint64(0, data.lpMsg === null ? 0n : BigInt(util.toPointer(data.lpMsg)), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpNumberOfBytesSent !== undefined) view.setBigUint64(16, data.lpNumberOfBytesSent === null ? 0n : BigInt(util.toPointer(data.lpNumberOfBytesSent)), true);
  // 0x18: pointer
  if (data?.lpOverlapped !== undefined) view.setBigUint64(24, data.lpOverlapped === null ? 0n : BigInt(util.toPointer(data.lpOverlapped)), true);
  // 0x20: pointer
  if (data?.lpCompletionRoutine !== undefined) view.setBigUint64(32, data.lpCompletionRoutine === null ? 0n : BigInt(util.toPointer(data.lpCompletionRoutine)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.RIO_NOTIFICATION_COMPLETION (size: 16)
 */
export interface RIO_NOTIFICATION_COMPLETION {
  /** Windows.Win32.Networking.WinSock.RIO_NOTIFICATION_COMPLETION_TYPE */
  Type: RIO_NOTIFICATION_COMPLETION_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRIO_NOTIFICATION_COMPLETION = 16;

export function allocRIO_NOTIFICATION_COMPLETION(data?: Partial<RIO_NOTIFICATION_COMPLETION>): Uint8Array {
  const buf = new Uint8Array(sizeofRIO_NOTIFICATION_COMPLETION);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.RIO_EXTENSION_FUNCTION_TABLE (size: 112)
 */
export interface RIO_EXTENSION_FUNCTION_TABLE {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Networking.WinSock.LPFN_RIORECEIVE */
  RIOReceive: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPFN_RIORECEIVEEX */
  RIOReceiveEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPFN_RIOSEND */
  RIOSend: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPFN_RIOSENDEX */
  RIOSendEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPFN_RIOCLOSECOMPLETIONQUEUE */
  RIOCloseCompletionQueue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPFN_RIOCREATECOMPLETIONQUEUE */
  RIOCreateCompletionQueue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPFN_RIOCREATEREQUESTQUEUE */
  RIOCreateRequestQueue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPFN_RIODEQUEUECOMPLETION */
  RIODequeueCompletion: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPFN_RIODEREGISTERBUFFER */
  RIODeregisterBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPFN_RIONOTIFY */
  RIONotify: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPFN_RIOREGISTERBUFFER */
  RIORegisterBuffer: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPFN_RIORESIZECOMPLETIONQUEUE */
  RIOResizeCompletionQueue: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPFN_RIORESIZEREQUESTQUEUE */
  RIOResizeRequestQueue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofRIO_EXTENSION_FUNCTION_TABLE = 112;

export function allocRIO_EXTENSION_FUNCTION_TABLE(data?: Partial<RIO_EXTENSION_FUNCTION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofRIO_EXTENSION_FUNCTION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.RIOReceive !== undefined) view.setBigUint64(8, data.RIOReceive === null ? 0n : BigInt(util.toPointer(data.RIOReceive)), true);
  // 0x10: pointer
  if (data?.RIOReceiveEx !== undefined) view.setBigUint64(16, data.RIOReceiveEx === null ? 0n : BigInt(util.toPointer(data.RIOReceiveEx)), true);
  // 0x18: pointer
  if (data?.RIOSend !== undefined) view.setBigUint64(24, data.RIOSend === null ? 0n : BigInt(util.toPointer(data.RIOSend)), true);
  // 0x20: pointer
  if (data?.RIOSendEx !== undefined) view.setBigUint64(32, data.RIOSendEx === null ? 0n : BigInt(util.toPointer(data.RIOSendEx)), true);
  // 0x28: pointer
  if (data?.RIOCloseCompletionQueue !== undefined) view.setBigUint64(40, data.RIOCloseCompletionQueue === null ? 0n : BigInt(util.toPointer(data.RIOCloseCompletionQueue)), true);
  // 0x30: pointer
  if (data?.RIOCreateCompletionQueue !== undefined) view.setBigUint64(48, data.RIOCreateCompletionQueue === null ? 0n : BigInt(util.toPointer(data.RIOCreateCompletionQueue)), true);
  // 0x38: pointer
  if (data?.RIOCreateRequestQueue !== undefined) view.setBigUint64(56, data.RIOCreateRequestQueue === null ? 0n : BigInt(util.toPointer(data.RIOCreateRequestQueue)), true);
  // 0x40: pointer
  if (data?.RIODequeueCompletion !== undefined) view.setBigUint64(64, data.RIODequeueCompletion === null ? 0n : BigInt(util.toPointer(data.RIODequeueCompletion)), true);
  // 0x48: pointer
  if (data?.RIODeregisterBuffer !== undefined) view.setBigUint64(72, data.RIODeregisterBuffer === null ? 0n : BigInt(util.toPointer(data.RIODeregisterBuffer)), true);
  // 0x50: pointer
  if (data?.RIONotify !== undefined) view.setBigUint64(80, data.RIONotify === null ? 0n : BigInt(util.toPointer(data.RIONotify)), true);
  // 0x58: pointer
  if (data?.RIORegisterBuffer !== undefined) view.setBigUint64(88, data.RIORegisterBuffer === null ? 0n : BigInt(util.toPointer(data.RIORegisterBuffer)), true);
  // 0x60: pointer
  if (data?.RIOResizeCompletionQueue !== undefined) view.setBigUint64(96, data.RIOResizeCompletionQueue === null ? 0n : BigInt(util.toPointer(data.RIOResizeCompletionQueue)), true);
  // 0x68: pointer
  if (data?.RIOResizeRequestQueue !== undefined) view.setBigUint64(104, data.RIOResizeRequestQueue === null ? 0n : BigInt(util.toPointer(data.RIOResizeRequestQueue)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSPData (size: 16)
 */
export interface WSPData {
  /** u16 */
  wVersion: number;
  /** u16 */
  wHighVersion: number;
  /** array */
  szDescription: Deno.PointerValue | null;
}

export const sizeofWSPData = 16;

export function allocWSPData(data?: Partial<WSPData>): Uint8Array {
  const buf = new Uint8Array(sizeofWSPData);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wVersion !== undefined) view.setUint16(0, Number(data.wVersion), true);
  // 0x02: u16
  if (data?.wHighVersion !== undefined) view.setUint16(2, Number(data.wHighVersion), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(8, data.szDescription === null ? 0n : BigInt(util.toPointer(data.szDescription)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSATHREADID (size: 16)
 */
export interface WSATHREADID {
  /** Windows.Win32.Foundation.HANDLE */
  ThreadHandle: Uint8Array | Deno.PointerValue | null;
  /** usize */
  Reserved: Deno.PointerValue;
}

export const sizeofWSATHREADID = 16;

export function allocWSATHREADID(data?: Partial<WSATHREADID>): Uint8Array {
  const buf = new Uint8Array(sizeofWSATHREADID);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ThreadHandle !== undefined) view.setBigUint64(0, data.ThreadHandle === null ? 0n : BigInt(util.toPointer(data.ThreadHandle)), true);
  // 0x08: usize
  if (data?.Reserved !== undefined) view.setBigUint64(8, BigInt(data.Reserved), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSPPROC_TABLE (size: 240)
 */
export interface WSPPROC_TABLE {
  /** Windows.Win32.Networking.WinSock.LPWSPACCEPT */
  lpWSPAccept: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPADDRESSTOSTRING */
  lpWSPAddressToString: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPASYNCSELECT */
  lpWSPAsyncSelect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPBIND */
  lpWSPBind: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPCANCELBLOCKINGCALL */
  lpWSPCancelBlockingCall: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPCLEANUP */
  lpWSPCleanup: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPCLOSESOCKET */
  lpWSPCloseSocket: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPCONNECT */
  lpWSPConnect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPDUPLICATESOCKET */
  lpWSPDuplicateSocket: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPENUMNETWORKEVENTS */
  lpWSPEnumNetworkEvents: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPEVENTSELECT */
  lpWSPEventSelect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPGETOVERLAPPEDRESULT */
  lpWSPGetOverlappedResult: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPGETPEERNAME */
  lpWSPGetPeerName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPGETSOCKNAME */
  lpWSPGetSockName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPGETSOCKOPT */
  lpWSPGetSockOpt: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPGETQOSBYNAME */
  lpWSPGetQOSByName: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPIOCTL */
  lpWSPIoctl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPJOINLEAF */
  lpWSPJoinLeaf: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPLISTEN */
  lpWSPListen: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPRECV */
  lpWSPRecv: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPRECVDISCONNECT */
  lpWSPRecvDisconnect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPRECVFROM */
  lpWSPRecvFrom: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPSELECT */
  lpWSPSelect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPSEND */
  lpWSPSend: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPSENDDISCONNECT */
  lpWSPSendDisconnect: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPSENDTO */
  lpWSPSendTo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPSETSOCKOPT */
  lpWSPSetSockOpt: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPSHUTDOWN */
  lpWSPShutdown: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPSOCKET */
  lpWSPSocket: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWSPSTRINGTOADDRESS */
  lpWSPStringToAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWSPPROC_TABLE = 240;

export function allocWSPPROC_TABLE(data?: Partial<WSPPROC_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSPPROC_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpWSPAccept !== undefined) view.setBigUint64(0, data.lpWSPAccept === null ? 0n : BigInt(util.toPointer(data.lpWSPAccept)), true);
  // 0x08: pointer
  if (data?.lpWSPAddressToString !== undefined) view.setBigUint64(8, data.lpWSPAddressToString === null ? 0n : BigInt(util.toPointer(data.lpWSPAddressToString)), true);
  // 0x10: pointer
  if (data?.lpWSPAsyncSelect !== undefined) view.setBigUint64(16, data.lpWSPAsyncSelect === null ? 0n : BigInt(util.toPointer(data.lpWSPAsyncSelect)), true);
  // 0x18: pointer
  if (data?.lpWSPBind !== undefined) view.setBigUint64(24, data.lpWSPBind === null ? 0n : BigInt(util.toPointer(data.lpWSPBind)), true);
  // 0x20: pointer
  if (data?.lpWSPCancelBlockingCall !== undefined) view.setBigUint64(32, data.lpWSPCancelBlockingCall === null ? 0n : BigInt(util.toPointer(data.lpWSPCancelBlockingCall)), true);
  // 0x28: pointer
  if (data?.lpWSPCleanup !== undefined) view.setBigUint64(40, data.lpWSPCleanup === null ? 0n : BigInt(util.toPointer(data.lpWSPCleanup)), true);
  // 0x30: pointer
  if (data?.lpWSPCloseSocket !== undefined) view.setBigUint64(48, data.lpWSPCloseSocket === null ? 0n : BigInt(util.toPointer(data.lpWSPCloseSocket)), true);
  // 0x38: pointer
  if (data?.lpWSPConnect !== undefined) view.setBigUint64(56, data.lpWSPConnect === null ? 0n : BigInt(util.toPointer(data.lpWSPConnect)), true);
  // 0x40: pointer
  if (data?.lpWSPDuplicateSocket !== undefined) view.setBigUint64(64, data.lpWSPDuplicateSocket === null ? 0n : BigInt(util.toPointer(data.lpWSPDuplicateSocket)), true);
  // 0x48: pointer
  if (data?.lpWSPEnumNetworkEvents !== undefined) view.setBigUint64(72, data.lpWSPEnumNetworkEvents === null ? 0n : BigInt(util.toPointer(data.lpWSPEnumNetworkEvents)), true);
  // 0x50: pointer
  if (data?.lpWSPEventSelect !== undefined) view.setBigUint64(80, data.lpWSPEventSelect === null ? 0n : BigInt(util.toPointer(data.lpWSPEventSelect)), true);
  // 0x58: pointer
  if (data?.lpWSPGetOverlappedResult !== undefined) view.setBigUint64(88, data.lpWSPGetOverlappedResult === null ? 0n : BigInt(util.toPointer(data.lpWSPGetOverlappedResult)), true);
  // 0x60: pointer
  if (data?.lpWSPGetPeerName !== undefined) view.setBigUint64(96, data.lpWSPGetPeerName === null ? 0n : BigInt(util.toPointer(data.lpWSPGetPeerName)), true);
  // 0x68: pointer
  if (data?.lpWSPGetSockName !== undefined) view.setBigUint64(104, data.lpWSPGetSockName === null ? 0n : BigInt(util.toPointer(data.lpWSPGetSockName)), true);
  // 0x70: pointer
  if (data?.lpWSPGetSockOpt !== undefined) view.setBigUint64(112, data.lpWSPGetSockOpt === null ? 0n : BigInt(util.toPointer(data.lpWSPGetSockOpt)), true);
  // 0x78: pointer
  if (data?.lpWSPGetQOSByName !== undefined) view.setBigUint64(120, data.lpWSPGetQOSByName === null ? 0n : BigInt(util.toPointer(data.lpWSPGetQOSByName)), true);
  // 0x80: pointer
  if (data?.lpWSPIoctl !== undefined) view.setBigUint64(128, data.lpWSPIoctl === null ? 0n : BigInt(util.toPointer(data.lpWSPIoctl)), true);
  // 0x88: pointer
  if (data?.lpWSPJoinLeaf !== undefined) view.setBigUint64(136, data.lpWSPJoinLeaf === null ? 0n : BigInt(util.toPointer(data.lpWSPJoinLeaf)), true);
  // 0x90: pointer
  if (data?.lpWSPListen !== undefined) view.setBigUint64(144, data.lpWSPListen === null ? 0n : BigInt(util.toPointer(data.lpWSPListen)), true);
  // 0x98: pointer
  if (data?.lpWSPRecv !== undefined) view.setBigUint64(152, data.lpWSPRecv === null ? 0n : BigInt(util.toPointer(data.lpWSPRecv)), true);
  // 0xa0: pointer
  if (data?.lpWSPRecvDisconnect !== undefined) view.setBigUint64(160, data.lpWSPRecvDisconnect === null ? 0n : BigInt(util.toPointer(data.lpWSPRecvDisconnect)), true);
  // 0xa8: pointer
  if (data?.lpWSPRecvFrom !== undefined) view.setBigUint64(168, data.lpWSPRecvFrom === null ? 0n : BigInt(util.toPointer(data.lpWSPRecvFrom)), true);
  // 0xb0: pointer
  if (data?.lpWSPSelect !== undefined) view.setBigUint64(176, data.lpWSPSelect === null ? 0n : BigInt(util.toPointer(data.lpWSPSelect)), true);
  // 0xb8: pointer
  if (data?.lpWSPSend !== undefined) view.setBigUint64(184, data.lpWSPSend === null ? 0n : BigInt(util.toPointer(data.lpWSPSend)), true);
  // 0xc0: pointer
  if (data?.lpWSPSendDisconnect !== undefined) view.setBigUint64(192, data.lpWSPSendDisconnect === null ? 0n : BigInt(util.toPointer(data.lpWSPSendDisconnect)), true);
  // 0xc8: pointer
  if (data?.lpWSPSendTo !== undefined) view.setBigUint64(200, data.lpWSPSendTo === null ? 0n : BigInt(util.toPointer(data.lpWSPSendTo)), true);
  // 0xd0: pointer
  if (data?.lpWSPSetSockOpt !== undefined) view.setBigUint64(208, data.lpWSPSetSockOpt === null ? 0n : BigInt(util.toPointer(data.lpWSPSetSockOpt)), true);
  // 0xd8: pointer
  if (data?.lpWSPShutdown !== undefined) view.setBigUint64(216, data.lpWSPShutdown === null ? 0n : BigInt(util.toPointer(data.lpWSPShutdown)), true);
  // 0xe0: pointer
  if (data?.lpWSPSocket !== undefined) view.setBigUint64(224, data.lpWSPSocket === null ? 0n : BigInt(util.toPointer(data.lpWSPSocket)), true);
  // 0xe8: pointer
  if (data?.lpWSPStringToAddress !== undefined) view.setBigUint64(232, data.lpWSPStringToAddress === null ? 0n : BigInt(util.toPointer(data.lpWSPStringToAddress)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSPUPCALLTABLE (size: 120)
 */
export interface WSPUPCALLTABLE {
  /** Windows.Win32.Networking.WinSock.LPWPUCLOSEEVENT */
  lpWPUCloseEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPUCLOSESOCKETHANDLE */
  lpWPUCloseSocketHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPUCREATEEVENT */
  lpWPUCreateEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPUCREATESOCKETHANDLE */
  lpWPUCreateSocketHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPUFDISSET */
  lpWPUFDIsSet: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPUGETPROVIDERPATH */
  lpWPUGetProviderPath: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPUMODIFYIFSHANDLE */
  lpWPUModifyIFSHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPUPOSTMESSAGE */
  lpWPUPostMessage: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPUQUERYBLOCKINGCALLBACK */
  lpWPUQueryBlockingCallback: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPUQUERYSOCKETHANDLECONTEXT */
  lpWPUQuerySocketHandleContext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPUQUEUEAPC */
  lpWPUQueueApc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPURESETEVENT */
  lpWPUResetEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPUSETEVENT */
  lpWPUSetEvent: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPUOPENCURRENTTHREAD */
  lpWPUOpenCurrentThread: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPWPUCLOSETHREAD */
  lpWPUCloseThread: Uint8Array | Deno.PointerValue | null;
}

export const sizeofWSPUPCALLTABLE = 120;

export function allocWSPUPCALLTABLE(data?: Partial<WSPUPCALLTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofWSPUPCALLTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpWPUCloseEvent !== undefined) view.setBigUint64(0, data.lpWPUCloseEvent === null ? 0n : BigInt(util.toPointer(data.lpWPUCloseEvent)), true);
  // 0x08: pointer
  if (data?.lpWPUCloseSocketHandle !== undefined) view.setBigUint64(8, data.lpWPUCloseSocketHandle === null ? 0n : BigInt(util.toPointer(data.lpWPUCloseSocketHandle)), true);
  // 0x10: pointer
  if (data?.lpWPUCreateEvent !== undefined) view.setBigUint64(16, data.lpWPUCreateEvent === null ? 0n : BigInt(util.toPointer(data.lpWPUCreateEvent)), true);
  // 0x18: pointer
  if (data?.lpWPUCreateSocketHandle !== undefined) view.setBigUint64(24, data.lpWPUCreateSocketHandle === null ? 0n : BigInt(util.toPointer(data.lpWPUCreateSocketHandle)), true);
  // 0x20: pointer
  if (data?.lpWPUFDIsSet !== undefined) view.setBigUint64(32, data.lpWPUFDIsSet === null ? 0n : BigInt(util.toPointer(data.lpWPUFDIsSet)), true);
  // 0x28: pointer
  if (data?.lpWPUGetProviderPath !== undefined) view.setBigUint64(40, data.lpWPUGetProviderPath === null ? 0n : BigInt(util.toPointer(data.lpWPUGetProviderPath)), true);
  // 0x30: pointer
  if (data?.lpWPUModifyIFSHandle !== undefined) view.setBigUint64(48, data.lpWPUModifyIFSHandle === null ? 0n : BigInt(util.toPointer(data.lpWPUModifyIFSHandle)), true);
  // 0x38: pointer
  if (data?.lpWPUPostMessage !== undefined) view.setBigUint64(56, data.lpWPUPostMessage === null ? 0n : BigInt(util.toPointer(data.lpWPUPostMessage)), true);
  // 0x40: pointer
  if (data?.lpWPUQueryBlockingCallback !== undefined) view.setBigUint64(64, data.lpWPUQueryBlockingCallback === null ? 0n : BigInt(util.toPointer(data.lpWPUQueryBlockingCallback)), true);
  // 0x48: pointer
  if (data?.lpWPUQuerySocketHandleContext !== undefined) view.setBigUint64(72, data.lpWPUQuerySocketHandleContext === null ? 0n : BigInt(util.toPointer(data.lpWPUQuerySocketHandleContext)), true);
  // 0x50: pointer
  if (data?.lpWPUQueueApc !== undefined) view.setBigUint64(80, data.lpWPUQueueApc === null ? 0n : BigInt(util.toPointer(data.lpWPUQueueApc)), true);
  // 0x58: pointer
  if (data?.lpWPUResetEvent !== undefined) view.setBigUint64(88, data.lpWPUResetEvent === null ? 0n : BigInt(util.toPointer(data.lpWPUResetEvent)), true);
  // 0x60: pointer
  if (data?.lpWPUSetEvent !== undefined) view.setBigUint64(96, data.lpWPUSetEvent === null ? 0n : BigInt(util.toPointer(data.lpWPUSetEvent)), true);
  // 0x68: pointer
  if (data?.lpWPUOpenCurrentThread !== undefined) view.setBigUint64(104, data.lpWPUOpenCurrentThread === null ? 0n : BigInt(util.toPointer(data.lpWPUOpenCurrentThread)), true);
  // 0x70: pointer
  if (data?.lpWPUCloseThread !== undefined) view.setBigUint64(112, data.lpWPUCloseThread === null ? 0n : BigInt(util.toPointer(data.lpWPUCloseThread)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.WSC_PROVIDER_AUDIT_INFO (size: 16)
 */
export interface WSC_PROVIDER_AUDIT_INFO {
  /** u32 */
  RecordSize: number;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array | null;
}

export const sizeofWSC_PROVIDER_AUDIT_INFO = 16;

export function allocWSC_PROVIDER_AUDIT_INFO(data?: Partial<WSC_PROVIDER_AUDIT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofWSC_PROVIDER_AUDIT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RecordSize !== undefined) view.setUint32(0, Number(data.RecordSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(util.toPointer(data.Reserved)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NSP_ROUTINE (size: 88)
 */
export interface NSP_ROUTINE {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
  /** Windows.Win32.Networking.WinSock.LPNSPCLEANUP */
  NSPCleanup: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPLOOKUPSERVICEBEGIN */
  NSPLookupServiceBegin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPLOOKUPSERVICENEXT */
  NSPLookupServiceNext: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPLOOKUPSERVICEEND */
  NSPLookupServiceEnd: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPSETSERVICE */
  NSPSetService: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPINSTALLSERVICECLASS */
  NSPInstallServiceClass: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPREMOVESERVICECLASS */
  NSPRemoveServiceClass: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPGETSERVICECLASSINFO */
  NSPGetServiceClassInfo: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPIOCTL */
  NSPIoctl: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNSP_ROUTINE = 88;

export function allocNSP_ROUTINE(data?: Partial<NSP_ROUTINE>): Uint8Array {
  const buf = new Uint8Array(sizeofNSP_ROUTINE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(4, Number(data.dwMajorVersion), true);
  // 0x08: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(8, Number(data.dwMinorVersion), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.NSPCleanup !== undefined) view.setBigUint64(16, data.NSPCleanup === null ? 0n : BigInt(util.toPointer(data.NSPCleanup)), true);
  // 0x18: pointer
  if (data?.NSPLookupServiceBegin !== undefined) view.setBigUint64(24, data.NSPLookupServiceBegin === null ? 0n : BigInt(util.toPointer(data.NSPLookupServiceBegin)), true);
  // 0x20: pointer
  if (data?.NSPLookupServiceNext !== undefined) view.setBigUint64(32, data.NSPLookupServiceNext === null ? 0n : BigInt(util.toPointer(data.NSPLookupServiceNext)), true);
  // 0x28: pointer
  if (data?.NSPLookupServiceEnd !== undefined) view.setBigUint64(40, data.NSPLookupServiceEnd === null ? 0n : BigInt(util.toPointer(data.NSPLookupServiceEnd)), true);
  // 0x30: pointer
  if (data?.NSPSetService !== undefined) view.setBigUint64(48, data.NSPSetService === null ? 0n : BigInt(util.toPointer(data.NSPSetService)), true);
  // 0x38: pointer
  if (data?.NSPInstallServiceClass !== undefined) view.setBigUint64(56, data.NSPInstallServiceClass === null ? 0n : BigInt(util.toPointer(data.NSPInstallServiceClass)), true);
  // 0x40: pointer
  if (data?.NSPRemoveServiceClass !== undefined) view.setBigUint64(64, data.NSPRemoveServiceClass === null ? 0n : BigInt(util.toPointer(data.NSPRemoveServiceClass)), true);
  // 0x48: pointer
  if (data?.NSPGetServiceClassInfo !== undefined) view.setBigUint64(72, data.NSPGetServiceClassInfo === null ? 0n : BigInt(util.toPointer(data.NSPGetServiceClassInfo)), true);
  // 0x50: pointer
  if (data?.NSPIoctl !== undefined) view.setBigUint64(80, data.NSPIoctl === null ? 0n : BigInt(util.toPointer(data.NSPIoctl)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NSPV2_ROUTINE (size: 72)
 */
export interface NSPV2_ROUTINE {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
  /** Windows.Win32.Networking.WinSock.LPNSPV2STARTUP */
  NSPv2Startup: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPV2CLEANUP */
  NSPv2Cleanup: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPV2LOOKUPSERVICEBEGIN */
  NSPv2LookupServiceBegin: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPV2LOOKUPSERVICENEXTEX */
  NSPv2LookupServiceNextEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPV2LOOKUPSERVICEEND */
  NSPv2LookupServiceEnd: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPV2SETSERVICEEX */
  NSPv2SetServiceEx: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.WinSock.LPNSPV2CLIENTSESSIONRUNDOWN */
  NSPv2ClientSessionRundown: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNSPV2_ROUTINE = 72;

export function allocNSPV2_ROUTINE(data?: Partial<NSPV2_ROUTINE>): Uint8Array {
  const buf = new Uint8Array(sizeofNSPV2_ROUTINE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(4, Number(data.dwMajorVersion), true);
  // 0x08: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(8, Number(data.dwMinorVersion), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.NSPv2Startup !== undefined) view.setBigUint64(16, data.NSPv2Startup === null ? 0n : BigInt(util.toPointer(data.NSPv2Startup)), true);
  // 0x18: pointer
  if (data?.NSPv2Cleanup !== undefined) view.setBigUint64(24, data.NSPv2Cleanup === null ? 0n : BigInt(util.toPointer(data.NSPv2Cleanup)), true);
  // 0x20: pointer
  if (data?.NSPv2LookupServiceBegin !== undefined) view.setBigUint64(32, data.NSPv2LookupServiceBegin === null ? 0n : BigInt(util.toPointer(data.NSPv2LookupServiceBegin)), true);
  // 0x28: pointer
  if (data?.NSPv2LookupServiceNextEx !== undefined) view.setBigUint64(40, data.NSPv2LookupServiceNextEx === null ? 0n : BigInt(util.toPointer(data.NSPv2LookupServiceNextEx)), true);
  // 0x30: pointer
  if (data?.NSPv2LookupServiceEnd !== undefined) view.setBigUint64(48, data.NSPv2LookupServiceEnd === null ? 0n : BigInt(util.toPointer(data.NSPv2LookupServiceEnd)), true);
  // 0x38: pointer
  if (data?.NSPv2SetServiceEx !== undefined) view.setBigUint64(56, data.NSPv2SetServiceEx === null ? 0n : BigInt(util.toPointer(data.NSPv2SetServiceEx)), true);
  // 0x40: pointer
  if (data?.NSPv2ClientSessionRundown !== undefined) view.setBigUint64(64, data.NSPv2ClientSessionRundown === null ? 0n : BigInt(util.toPointer(data.NSPv2ClientSessionRundown)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NS_INFOA (size: 16)
 */
export interface NS_INFOA {
  /** u32 */
  dwNameSpace: number;
  /** u32 */
  dwNameSpaceFlags: number;
  /** Windows.Win32.Foundation.PSTR */
  lpNameSpace: string | null;
}

export const sizeofNS_INFOA = 16;

export function allocNS_INFOA(data?: Partial<NS_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofNS_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(0, Number(data.dwNameSpace), true);
  // 0x04: u32
  if (data?.dwNameSpaceFlags !== undefined) view.setUint32(4, Number(data.dwNameSpaceFlags), true);
  // 0x08: buffer
  if (data?.lpNameSpace !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpNameSpace);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NS_INFOW (size: 16)
 */
export interface NS_INFOW {
  /** u32 */
  dwNameSpace: number;
  /** u32 */
  dwNameSpaceFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpNameSpace: string | null;
}

export const sizeofNS_INFOW = 16;

export function allocNS_INFOW(data?: Partial<NS_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofNS_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(0, Number(data.dwNameSpace), true);
  // 0x04: u32
  if (data?.dwNameSpaceFlags !== undefined) view.setUint32(4, Number(data.dwNameSpaceFlags), true);
  // 0x08: buffer
  if (data?.lpNameSpace !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpNameSpace);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SERVICE_TYPE_VALUE (size: 24)
 */
export interface SERVICE_TYPE_VALUE {
  /** u32 */
  dwNameSpace: number;
  /** u32 */
  dwValueType: number;
  /** u32 */
  dwValueSize: number;
  /** u32 */
  dwValueNameOffset: number;
  /** u32 */
  dwValueOffset: number;
}

export const sizeofSERVICE_TYPE_VALUE = 24;

export function allocSERVICE_TYPE_VALUE(data?: Partial<SERVICE_TYPE_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_TYPE_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(0, Number(data.dwNameSpace), true);
  // 0x04: u32
  if (data?.dwValueType !== undefined) view.setUint32(4, Number(data.dwValueType), true);
  // 0x08: u32
  if (data?.dwValueSize !== undefined) view.setUint32(8, Number(data.dwValueSize), true);
  // 0x0c: u32
  if (data?.dwValueNameOffset !== undefined) view.setUint32(12, Number(data.dwValueNameOffset), true);
  // 0x10: u32
  if (data?.dwValueOffset !== undefined) view.setUint32(16, Number(data.dwValueOffset), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SERVICE_TYPE_VALUE_ABSA (size: 32)
 */
export interface SERVICE_TYPE_VALUE_ABSA {
  /** u32 */
  dwNameSpace: number;
  /** u32 */
  dwValueType: number;
  /** u32 */
  dwValueSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpValueName: string | null;
  /** ptr */
  lpValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSERVICE_TYPE_VALUE_ABSA = 32;

export function allocSERVICE_TYPE_VALUE_ABSA(data?: Partial<SERVICE_TYPE_VALUE_ABSA>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_TYPE_VALUE_ABSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(0, Number(data.dwNameSpace), true);
  // 0x04: u32
  if (data?.dwValueType !== undefined) view.setUint32(4, Number(data.dwValueType), true);
  // 0x08: u32
  if (data?.dwValueSize !== undefined) view.setUint32(8, Number(data.dwValueSize), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpValueName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpValueName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpValue !== undefined) view.setBigUint64(24, data.lpValue === null ? 0n : BigInt(util.toPointer(data.lpValue)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SERVICE_TYPE_VALUE_ABSW (size: 32)
 */
export interface SERVICE_TYPE_VALUE_ABSW {
  /** u32 */
  dwNameSpace: number;
  /** u32 */
  dwValueType: number;
  /** u32 */
  dwValueSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpValueName: string | null;
  /** ptr */
  lpValue: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSERVICE_TYPE_VALUE_ABSW = 32;

export function allocSERVICE_TYPE_VALUE_ABSW(data?: Partial<SERVICE_TYPE_VALUE_ABSW>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_TYPE_VALUE_ABSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(0, Number(data.dwNameSpace), true);
  // 0x04: u32
  if (data?.dwValueType !== undefined) view.setUint32(4, Number(data.dwValueType), true);
  // 0x08: u32
  if (data?.dwValueSize !== undefined) view.setUint32(8, Number(data.dwValueSize), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.lpValueName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpValueName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: pointer
  if (data?.lpValue !== undefined) view.setBigUint64(24, data.lpValue === null ? 0n : BigInt(util.toPointer(data.lpValue)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SERVICE_TYPE_INFO (size: 16)
 */
export interface SERVICE_TYPE_INFO {
  /** u32 */
  dwTypeNameOffset: number;
  /** u32 */
  dwValueCount: number;
  /** array */
  Values: Deno.PointerValue | null;
}

export const sizeofSERVICE_TYPE_INFO = 16;

export function allocSERVICE_TYPE_INFO(data?: Partial<SERVICE_TYPE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_TYPE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwTypeNameOffset !== undefined) view.setUint32(0, Number(data.dwTypeNameOffset), true);
  // 0x04: u32
  if (data?.dwValueCount !== undefined) view.setUint32(4, Number(data.dwValueCount), true);
  // 0x08: pointer
  if (data?.Values !== undefined) view.setBigUint64(8, data.Values === null ? 0n : BigInt(util.toPointer(data.Values)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SERVICE_TYPE_INFO_ABSA (size: 24)
 */
export interface SERVICE_TYPE_INFO_ABSA {
  /** Windows.Win32.Foundation.PSTR */
  lpTypeName: string | null;
  /** u32 */
  dwValueCount: number;
  /** array */
  Values: Deno.PointerValue | null;
}

export const sizeofSERVICE_TYPE_INFO_ABSA = 24;

export function allocSERVICE_TYPE_INFO_ABSA(data?: Partial<SERVICE_TYPE_INFO_ABSA>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_TYPE_INFO_ABSA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpTypeName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpTypeName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwValueCount !== undefined) view.setUint32(8, Number(data.dwValueCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Values !== undefined) view.setBigUint64(16, data.Values === null ? 0n : BigInt(util.toPointer(data.Values)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SERVICE_TYPE_INFO_ABSW (size: 24)
 */
export interface SERVICE_TYPE_INFO_ABSW {
  /** Windows.Win32.Foundation.PWSTR */
  lpTypeName: string | null;
  /** u32 */
  dwValueCount: number;
  /** array */
  Values: Deno.PointerValue | null;
}

export const sizeofSERVICE_TYPE_INFO_ABSW = 24;

export function allocSERVICE_TYPE_INFO_ABSW(data?: Partial<SERVICE_TYPE_INFO_ABSW>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_TYPE_INFO_ABSW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpTypeName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.lpTypeName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.dwValueCount !== undefined) view.setUint32(8, Number(data.dwValueCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Values !== undefined) view.setBigUint64(16, data.Values === null ? 0n : BigInt(util.toPointer(data.Values)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SERVICE_ADDRESS (size: 32)
 */
export interface SERVICE_ADDRESS {
  /** u32 */
  dwAddressType: number;
  /** u32 */
  dwAddressFlags: number;
  /** u32 */
  dwAddressLength: number;
  /** u32 */
  dwPrincipalLength: number;
  /** ptr */
  lpAddress: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  lpPrincipal: Deno.PointerValue | Uint8Array | null;
}

export const sizeofSERVICE_ADDRESS = 32;

export function allocSERVICE_ADDRESS(data?: Partial<SERVICE_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAddressType !== undefined) view.setUint32(0, Number(data.dwAddressType), true);
  // 0x04: u32
  if (data?.dwAddressFlags !== undefined) view.setUint32(4, Number(data.dwAddressFlags), true);
  // 0x08: u32
  if (data?.dwAddressLength !== undefined) view.setUint32(8, Number(data.dwAddressLength), true);
  // 0x0c: u32
  if (data?.dwPrincipalLength !== undefined) view.setUint32(12, Number(data.dwPrincipalLength), true);
  // 0x10: pointer
  if (data?.lpAddress !== undefined) view.setBigUint64(16, data.lpAddress === null ? 0n : BigInt(util.toPointer(data.lpAddress)), true);
  // 0x18: pointer
  if (data?.lpPrincipal !== undefined) view.setBigUint64(24, data.lpPrincipal === null ? 0n : BigInt(util.toPointer(data.lpPrincipal)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SERVICE_ADDRESSES (size: 16)
 */
export interface SERVICE_ADDRESSES {
  /** u32 */
  dwAddressCount: number;
  /** array */
  Addresses: Deno.PointerValue | null;
}

export const sizeofSERVICE_ADDRESSES = 16;

export function allocSERVICE_ADDRESSES(data?: Partial<SERVICE_ADDRESSES>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_ADDRESSES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAddressCount !== undefined) view.setUint32(0, Number(data.dwAddressCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Addresses !== undefined) view.setBigUint64(8, data.Addresses === null ? 0n : BigInt(util.toPointer(data.Addresses)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SERVICE_INFOA (size: 72)
 */
export interface SERVICE_INFOA {
  /** ptr */
  lpServiceType: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PSTR */
  lpServiceName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpComment: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpLocale: string | null;
  /** Windows.Win32.Networking.WinSock.RESOURCE_DISPLAY_TYPE */
  dwDisplayHint: RESOURCE_DISPLAY_TYPE;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwTime: number;
  /** Windows.Win32.Foundation.PSTR */
  lpMachineName: string | null;
  /** ptr */
  lpServiceAddress: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Com.BLOB */
  ServiceSpecificInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSERVICE_INFOA = 72;

export function allocSERVICE_INFOA(data?: Partial<SERVICE_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpServiceType !== undefined) view.setBigUint64(0, data.lpServiceType === null ? 0n : BigInt(util.toPointer(data.lpServiceType)), true);
  // 0x08: buffer
  if (data?.lpServiceName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.lpServiceName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpComment !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpComment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpLocale !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpLocale);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwDisplayHint !== undefined) view.setUint32(32, Number(data.dwDisplayHint), true);
  // 0x24: u32
  if (data?.dwVersion !== undefined) view.setUint32(36, Number(data.dwVersion), true);
  // 0x28: u32
  if (data?.dwTime !== undefined) view.setUint32(40, Number(data.dwTime), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.lpMachineName !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.lpMachineName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.lpServiceAddress !== undefined) view.setBigUint64(56, data.lpServiceAddress === null ? 0n : BigInt(util.toPointer(data.lpServiceAddress)), true);
  // 0x40: pointer
  if (data?.ServiceSpecificInfo !== undefined) view.setBigUint64(64, data.ServiceSpecificInfo === null ? 0n : BigInt(util.toPointer(data.ServiceSpecificInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.SERVICE_INFOW (size: 72)
 */
export interface SERVICE_INFOW {
  /** ptr */
  lpServiceType: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpServiceName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpComment: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpLocale: string | null;
  /** Windows.Win32.Networking.WinSock.RESOURCE_DISPLAY_TYPE */
  dwDisplayHint: RESOURCE_DISPLAY_TYPE;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwTime: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpMachineName: string | null;
  /** ptr */
  lpServiceAddress: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Com.BLOB */
  ServiceSpecificInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSERVICE_INFOW = 72;

export function allocSERVICE_INFOW(data?: Partial<SERVICE_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpServiceType !== undefined) view.setBigUint64(0, data.lpServiceType === null ? 0n : BigInt(util.toPointer(data.lpServiceType)), true);
  // 0x08: buffer
  if (data?.lpServiceName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.lpServiceName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.lpComment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpComment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpLocale !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpLocale);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.dwDisplayHint !== undefined) view.setUint32(32, Number(data.dwDisplayHint), true);
  // 0x24: u32
  if (data?.dwVersion !== undefined) view.setUint32(36, Number(data.dwVersion), true);
  // 0x28: u32
  if (data?.dwTime !== undefined) view.setUint32(40, Number(data.dwTime), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.lpMachineName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.lpMachineName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: pointer
  if (data?.lpServiceAddress !== undefined) view.setBigUint64(56, data.lpServiceAddress === null ? 0n : BigInt(util.toPointer(data.lpServiceAddress)), true);
  // 0x40: pointer
  if (data?.ServiceSpecificInfo !== undefined) view.setBigUint64(64, data.ServiceSpecificInfo === null ? 0n : BigInt(util.toPointer(data.ServiceSpecificInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NS_SERVICE_INFOA (size: 16)
 */
export interface NS_SERVICE_INFOA {
  /** u32 */
  dwNameSpace: number;
  /** Windows.Win32.Networking.WinSock.SERVICE_INFOA */
  ServiceInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNS_SERVICE_INFOA = 16;

export function allocNS_SERVICE_INFOA(data?: Partial<NS_SERVICE_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofNS_SERVICE_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(0, Number(data.dwNameSpace), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ServiceInfo !== undefined) view.setBigUint64(8, data.ServiceInfo === null ? 0n : BigInt(util.toPointer(data.ServiceInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NS_SERVICE_INFOW (size: 16)
 */
export interface NS_SERVICE_INFOW {
  /** u32 */
  dwNameSpace: number;
  /** Windows.Win32.Networking.WinSock.SERVICE_INFOW */
  ServiceInfo: Uint8Array | Deno.PointerValue | null;
}

export const sizeofNS_SERVICE_INFOW = 16;

export function allocNS_SERVICE_INFOW(data?: Partial<NS_SERVICE_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofNS_SERVICE_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwNameSpace !== undefined) view.setUint32(0, Number(data.dwNameSpace), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ServiceInfo !== undefined) view.setBigUint64(8, data.ServiceInfo === null ? 0n : BigInt(util.toPointer(data.ServiceInfo)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.PROTOCOL_INFOA (size: 40)
 */
export interface PROTOCOL_INFOA {
  /** u32 */
  dwServiceFlags: number;
  /** i32 */
  iAddressFamily: number;
  /** i32 */
  iMaxSockAddr: number;
  /** i32 */
  iMinSockAddr: number;
  /** i32 */
  iSocketType: number;
  /** i32 */
  iProtocol: number;
  /** u32 */
  dwMessageSize: number;
  /** Windows.Win32.Foundation.PSTR */
  lpProtocol: string | null;
}

export const sizeofPROTOCOL_INFOA = 40;

export function allocPROTOCOL_INFOA(data?: Partial<PROTOCOL_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofPROTOCOL_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwServiceFlags !== undefined) view.setUint32(0, Number(data.dwServiceFlags), true);
  // 0x04: i32
  if (data?.iAddressFamily !== undefined) view.setInt32(4, Number(data.iAddressFamily), true);
  // 0x08: i32
  if (data?.iMaxSockAddr !== undefined) view.setInt32(8, Number(data.iMaxSockAddr), true);
  // 0x0c: i32
  if (data?.iMinSockAddr !== undefined) view.setInt32(12, Number(data.iMinSockAddr), true);
  // 0x10: i32
  if (data?.iSocketType !== undefined) view.setInt32(16, Number(data.iSocketType), true);
  // 0x14: i32
  if (data?.iProtocol !== undefined) view.setInt32(20, Number(data.iProtocol), true);
  // 0x18: u32
  if (data?.dwMessageSize !== undefined) view.setUint32(24, Number(data.dwMessageSize), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpProtocol !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpProtocol);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.PROTOCOL_INFOW (size: 40)
 */
export interface PROTOCOL_INFOW {
  /** u32 */
  dwServiceFlags: number;
  /** i32 */
  iAddressFamily: number;
  /** i32 */
  iMaxSockAddr: number;
  /** i32 */
  iMinSockAddr: number;
  /** i32 */
  iSocketType: number;
  /** i32 */
  iProtocol: number;
  /** u32 */
  dwMessageSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpProtocol: string | null;
}

export const sizeofPROTOCOL_INFOW = 40;

export function allocPROTOCOL_INFOW(data?: Partial<PROTOCOL_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofPROTOCOL_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwServiceFlags !== undefined) view.setUint32(0, Number(data.dwServiceFlags), true);
  // 0x04: i32
  if (data?.iAddressFamily !== undefined) view.setInt32(4, Number(data.iAddressFamily), true);
  // 0x08: i32
  if (data?.iMaxSockAddr !== undefined) view.setInt32(8, Number(data.iMaxSockAddr), true);
  // 0x0c: i32
  if (data?.iMinSockAddr !== undefined) view.setInt32(12, Number(data.iMinSockAddr), true);
  // 0x10: i32
  if (data?.iSocketType !== undefined) view.setInt32(16, Number(data.iSocketType), true);
  // 0x14: i32
  if (data?.iProtocol !== undefined) view.setInt32(20, Number(data.iProtocol), true);
  // 0x18: u32
  if (data?.dwMessageSize !== undefined) view.setUint32(24, Number(data.dwMessageSize), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.lpProtocol !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpProtocol);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NETRESOURCE2A (size: 72)
 */
export interface NETRESOURCE2A {
  /** u32 */
  dwScope: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwUsage: number;
  /** u32 */
  dwDisplayType: number;
  /** Windows.Win32.Foundation.PSTR */
  lpLocalName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpRemoteName: string | null;
  /** Windows.Win32.Foundation.PSTR */
  lpComment: string | null;
  /** Windows.Win32.Networking.WinSock.NS_INFOA */
  ns_info: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ServiceType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwProtocols: number;
  /** ptr */
  lpiProtocols: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNETRESOURCE2A = 72;

export function allocNETRESOURCE2A(data?: Partial<NETRESOURCE2A>): Uint8Array {
  const buf = new Uint8Array(sizeofNETRESOURCE2A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwScope !== undefined) view.setUint32(0, Number(data.dwScope), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  // 0x08: u32
  if (data?.dwUsage !== undefined) view.setUint32(8, Number(data.dwUsage), true);
  // 0x0c: u32
  if (data?.dwDisplayType !== undefined) view.setUint32(12, Number(data.dwDisplayType), true);
  // 0x10: buffer
  if (data?.lpLocalName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.lpLocalName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpRemoteName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.lpRemoteName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpComment !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.lpComment);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.ns_info !== undefined) view.setBigUint64(40, data.ns_info === null ? 0n : BigInt(util.toPointer(data.ns_info)), true);
  // 0x30: pointer
  if (data?.ServiceType !== undefined) view.setBigUint64(48, data.ServiceType === null ? 0n : BigInt(util.toPointer(data.ServiceType)), true);
  // 0x38: u32
  if (data?.dwProtocols !== undefined) view.setUint32(56, Number(data.dwProtocols), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.lpiProtocols !== undefined) view.setBigUint64(64, data.lpiProtocols === null ? 0n : BigInt(util.toPointer(data.lpiProtocols)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.NETRESOURCE2W (size: 72)
 */
export interface NETRESOURCE2W {
  /** u32 */
  dwScope: number;
  /** u32 */
  dwType: number;
  /** u32 */
  dwUsage: number;
  /** u32 */
  dwDisplayType: number;
  /** Windows.Win32.Foundation.PWSTR */
  lpLocalName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpRemoteName: string | null;
  /** Windows.Win32.Foundation.PWSTR */
  lpComment: string | null;
  /** Windows.Win32.Networking.WinSock.NS_INFOA */
  ns_info: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ServiceType: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwProtocols: number;
  /** ptr */
  lpiProtocols: Deno.PointerValue | Uint8Array | null;
}

export const sizeofNETRESOURCE2W = 72;

export function allocNETRESOURCE2W(data?: Partial<NETRESOURCE2W>): Uint8Array {
  const buf = new Uint8Array(sizeofNETRESOURCE2W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwScope !== undefined) view.setUint32(0, Number(data.dwScope), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  // 0x08: u32
  if (data?.dwUsage !== undefined) view.setUint32(8, Number(data.dwUsage), true);
  // 0x0c: u32
  if (data?.dwDisplayType !== undefined) view.setUint32(12, Number(data.dwDisplayType), true);
  // 0x10: buffer
  if (data?.lpLocalName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpLocalName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.lpRemoteName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpRemoteName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.lpComment !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.lpComment);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: pointer
  if (data?.ns_info !== undefined) view.setBigUint64(40, data.ns_info === null ? 0n : BigInt(util.toPointer(data.ns_info)), true);
  // 0x30: pointer
  if (data?.ServiceType !== undefined) view.setBigUint64(48, data.ServiceType === null ? 0n : BigInt(util.toPointer(data.ServiceType)), true);
  // 0x38: u32
  if (data?.dwProtocols !== undefined) view.setUint32(56, Number(data.dwProtocols), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.lpiProtocols !== undefined) view.setBigUint64(64, data.lpiProtocols === null ? 0n : BigInt(util.toPointer(data.lpiProtocols)), true);
  return buf;
}

export type LPARAM = Deno.PointerValue;

/**
 * Windows.Win32.Networking.WinSock.SERVICE_ASYNC_INFO (size: 24)
 */
export interface SERVICE_ASYNC_INFO {
  /** Windows.Win32.Networking.WinSock.LPSERVICE_CALLBACK_PROC */
  lpServiceCallbackProc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hAsyncTaskHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofSERVICE_ASYNC_INFO = 24;

export function allocSERVICE_ASYNC_INFO(data?: Partial<SERVICE_ASYNC_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSERVICE_ASYNC_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpServiceCallbackProc !== undefined) view.setBigUint64(0, data.lpServiceCallbackProc === null ? 0n : BigInt(util.toPointer(data.lpServiceCallbackProc)), true);
  // 0x08: pointer
  if (data?.lParam !== undefined) view.setBigUint64(8, data.lParam === null ? 0n : BigInt(util.toPointer(data.lParam)), true);
  // 0x10: pointer
  if (data?.hAsyncTaskHandle !== undefined) view.setBigUint64(16, data.hAsyncTaskHandle === null ? 0n : BigInt(util.toPointer(data.hAsyncTaskHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.sockaddr_un (size: 16)
 */
export interface sockaddr_un {
  /** u16 */
  sun_family: number;
  /** array */
  sun_path: Deno.PointerValue | null;
}

export const sizeofSockaddr_un = 16;

export function allocSockaddr_un(data?: Partial<sockaddr_un>): Uint8Array {
  const buf = new Uint8Array(sizeofSockaddr_un);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sun_family !== undefined) view.setUint16(0, Number(data.sun_family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.sun_path !== undefined) view.setBigUint64(8, data.sun_path === null ? 0n : BigInt(util.toPointer(data.sun_path)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.sockaddr_ipx (size: 32)
 */
export interface sockaddr_ipx {
  /** i16 */
  sa_family: number;
  /** array */
  sa_netnum: Deno.PointerValue | null;
  /** array */
  sa_nodenum: Deno.PointerValue | null;
  /** u16 */
  sa_socket: number;
}

export const sizeofSockaddr_ipx = 32;

export function allocSockaddr_ipx(data?: Partial<sockaddr_ipx>): Uint8Array {
  const buf = new Uint8Array(sizeofSockaddr_ipx);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.sa_family !== undefined) view.setInt16(0, Number(data.sa_family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.sa_netnum !== undefined) view.setBigUint64(8, data.sa_netnum === null ? 0n : BigInt(util.toPointer(data.sa_netnum)), true);
  // 0x10: pointer
  if (data?.sa_nodenum !== undefined) view.setBigUint64(16, data.sa_nodenum === null ? 0n : BigInt(util.toPointer(data.sa_nodenum)), true);
  // 0x18: u16
  if (data?.sa_socket !== undefined) view.setUint16(24, Number(data.sa_socket), true);
  // 0x1a: pad6
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.sockaddr_tp (size: 16)
 */
export interface sockaddr_tp {
  /** u16 */
  tp_family: number;
  /** u16 */
  tp_addr_type: number;
  /** u16 */
  tp_taddr_len: number;
  /** u16 */
  tp_tsel_len: number;
  /** array */
  tp_addr: Deno.PointerValue | null;
}

export const sizeofSockaddr_tp = 16;

export function allocSockaddr_tp(data?: Partial<sockaddr_tp>): Uint8Array {
  const buf = new Uint8Array(sizeofSockaddr_tp);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.tp_family !== undefined) view.setUint16(0, Number(data.tp_family), true);
  // 0x02: u16
  if (data?.tp_addr_type !== undefined) view.setUint16(2, Number(data.tp_addr_type), true);
  // 0x04: u16
  if (data?.tp_taddr_len !== undefined) view.setUint16(4, Number(data.tp_taddr_len), true);
  // 0x06: u16
  if (data?.tp_tsel_len !== undefined) view.setUint16(6, Number(data.tp_tsel_len), true);
  // 0x08: pointer
  if (data?.tp_addr !== undefined) view.setBigUint64(8, data.tp_addr === null ? 0n : BigInt(util.toPointer(data.tp_addr)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.sockaddr_nb (size: 16)
 */
export interface sockaddr_nb {
  /** i16 */
  snb_family: number;
  /** u16 */
  snb_type: number;
  /** array */
  snb_name: Deno.PointerValue | null;
}

export const sizeofSockaddr_nb = 16;

export function allocSockaddr_nb(data?: Partial<sockaddr_nb>): Uint8Array {
  const buf = new Uint8Array(sizeofSockaddr_nb);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.snb_family !== undefined) view.setInt16(0, Number(data.snb_family), true);
  // 0x02: u16
  if (data?.snb_type !== undefined) view.setUint16(2, Number(data.snb_type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.snb_name !== undefined) view.setBigUint64(8, data.snb_name === null ? 0n : BigInt(util.toPointer(data.snb_name)), true);
  return buf;
}

/**
 * Windows.Win32.Networking.WinSock.sockaddr_vns (size: 48)
 */
export interface sockaddr_vns {
  /** u16 */
  sin_family: number;
  /** array */
  net_address: Deno.PointerValue | null;
  /** array */
  subnet_addr: Deno.PointerValue | null;
  /** array */
  port: Deno.PointerValue | null;
  /** u8 */
  hops: number;
  /** array */
  filler: Deno.PointerValue | null;
}

export const sizeofSockaddr_vns = 48;

export function allocSockaddr_vns(data?: Partial<sockaddr_vns>): Uint8Array {
  const buf = new Uint8Array(sizeofSockaddr_vns);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.sin_family !== undefined) view.setUint16(0, Number(data.sin_family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.net_address !== undefined) view.setBigUint64(8, data.net_address === null ? 0n : BigInt(util.toPointer(data.net_address)), true);
  // 0x10: pointer
  if (data?.subnet_addr !== undefined) view.setBigUint64(16, data.subnet_addr === null ? 0n : BigInt(util.toPointer(data.subnet_addr)), true);
  // 0x18: pointer
  if (data?.port !== undefined) view.setBigUint64(24, data.port === null ? 0n : BigInt(util.toPointer(data.port)), true);
  // 0x20: u8
  if (data?.hops !== undefined) view.setUint8(32, Number(data.hops));
  // 0x21: pad7
  // 0x28: pointer
  if (data?.filler !== undefined) view.setBigUint64(40, data.filler === null ? 0n : BigInt(util.toPointer(data.filler)), true);
  return buf;
}

export type HWND = Deno.PointerValue;

// Native Libraries

try {
  var libWS2_32 = Deno.dlopen("WS2_32", {
    __WSAFDIsSet: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    accept: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    bind: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    closesocket: {
      parameters: ["pointer"],
      result: "i32",
    },
    connect: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    ioctlsocket: {
      parameters: ["pointer", "i32", "pointer"],
      result: "i32",
    },
    getpeername: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    getsockname: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    getsockopt: {
      parameters: ["pointer", "i32", "i32", "buffer", "pointer"],
      result: "i32",
    },
    htonl: {
      parameters: ["u32"],
      result: "u32",
    },
    htons: {
      parameters: ["u16"],
      result: "u16",
    },
    inet_addr: {
      parameters: ["buffer"],
      result: "u32",
    },
    inet_ntoa: {
      parameters: ["pointer"],
      result: "buffer",
    },
    listen: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    ntohl: {
      parameters: ["u32"],
      result: "u32",
    },
    ntohs: {
      parameters: ["u16"],
      result: "u16",
    },
    recv: {
      parameters: ["pointer", "buffer", "i32", "i32"],
      result: "i32",
    },
    recvfrom: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer", "pointer"],
      result: "i32",
    },
    select: {
      parameters: ["i32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    send: {
      parameters: ["pointer", "buffer", "i32", "u32"],
      result: "i32",
    },
    sendto: {
      parameters: ["pointer", "buffer", "i32", "i32", "pointer", "i32"],
      result: "i32",
    },
    setsockopt: {
      parameters: ["pointer", "i32", "i32", "buffer", "i32"],
      result: "i32",
    },
    shutdown: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    socket: {
      parameters: ["i32", "i32", "i32"],
      result: "pointer",
    },
    gethostbyaddr: {
      parameters: ["buffer", "i32", "i32"],
      result: "pointer",
    },
    gethostbyname: {
      parameters: ["buffer"],
      result: "pointer",
    },
    gethostname: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    GetHostNameW: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    getservbyport: {
      parameters: ["i32", "buffer"],
      result: "pointer",
    },
    getservbyname: {
      parameters: ["buffer", "buffer"],
      result: "pointer",
    },
    getprotobynumber: {
      parameters: ["i32"],
      result: "pointer",
    },
    getprotobyname: {
      parameters: ["buffer"],
      result: "pointer",
    },
    WSAStartup: {
      parameters: ["u16", "pointer"],
      result: "i32",
    },
    WSACleanup: {
      parameters: [],
      result: "i32",
    },
    WSASetLastError: {
      parameters: ["i32"],
      result: "void",
    },
    WSAGetLastError: {
      parameters: [],
      result: "i32",
    },
    WSAIsBlocking: {
      parameters: [],
      result: "i32",
    },
    WSAUnhookBlockingHook: {
      parameters: [],
      result: "i32",
    },
    WSASetBlockingHook: {
      parameters: ["pointer"],
      result: "pointer",
    },
    WSACancelBlockingCall: {
      parameters: [],
      result: "i32",
    },
    WSAAsyncGetServByName: {
      parameters: ["pointer", "u32", "buffer", "buffer", "buffer", "i32"],
      result: "pointer",
    },
    WSAAsyncGetServByPort: {
      parameters: ["pointer", "u32", "i32", "buffer", "buffer", "i32"],
      result: "pointer",
    },
    WSAAsyncGetProtoByName: {
      parameters: ["pointer", "u32", "buffer", "buffer", "i32"],
      result: "pointer",
    },
    WSAAsyncGetProtoByNumber: {
      parameters: ["pointer", "u32", "i32", "buffer", "i32"],
      result: "pointer",
    },
    WSAAsyncGetHostByName: {
      parameters: ["pointer", "u32", "buffer", "buffer", "i32"],
      result: "pointer",
    },
    WSAAsyncGetHostByAddr: {
      parameters: ["pointer", "u32", "buffer", "i32", "i32", "buffer", "i32"],
      result: "pointer",
    },
    WSACancelAsyncRequest: {
      parameters: ["pointer"],
      result: "i32",
    },
    WSAAsyncSelect: {
      parameters: ["pointer", "pointer", "u32", "i32"],
      result: "i32",
    },
    WSAAccept: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "usize"],
      result: "pointer",
    },
    WSACloseEvent: {
      parameters: ["pointer"],
      result: "i32",
    },
    WSAConnect: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSAConnectByNameW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSAConnectByNameA: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSAConnectByList: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSACreateEvent: {
      parameters: [],
      result: "pointer",
    },
    WSADuplicateSocketA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    WSADuplicateSocketW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    WSAEnumNetworkEvents: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSAEnumProtocolsA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSAEnumProtocolsW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSAEventSelect: {
      parameters: ["pointer", "pointer", "i32"],
      result: "i32",
    },
    WSAGetOverlappedResult: {
      parameters: ["pointer", "pointer", "pointer", "i32", "pointer"],
      result: "i32",
    },
    WSAGetQOSByName: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSAHtonl: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    WSAHtons: {
      parameters: ["pointer", "u16", "pointer"],
      result: "i32",
    },
    WSAIoctl: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSAJoinLeaf: {
      parameters: ["pointer", "pointer", "i32", "pointer", "pointer", "pointer", "pointer", "u32"],
      result: "pointer",
    },
    WSANtohl: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    WSANtohs: {
      parameters: ["pointer", "u16", "pointer"],
      result: "i32",
    },
    WSARecv: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSARecvDisconnect: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WSARecvFrom: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSAResetEvent: {
      parameters: ["pointer"],
      result: "i32",
    },
    WSASend: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WSASendMsg: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSASendDisconnect: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WSASendTo: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "pointer", "i32", "pointer", "pointer"],
      result: "i32",
    },
    WSASetEvent: {
      parameters: ["pointer"],
      result: "i32",
    },
    WSASocketA: {
      parameters: ["i32", "i32", "i32", "pointer", "u32", "u32"],
      result: "pointer",
    },
    WSASocketW: {
      parameters: ["i32", "i32", "i32", "pointer", "u32", "u32"],
      result: "pointer",
    },
    WSAWaitForMultipleEvents: {
      parameters: ["u32", "pointer", "i32", "u32", "i32"],
      result: "u32",
    },
    WSAAddressToStringA: {
      parameters: ["pointer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    WSAAddressToStringW: {
      parameters: ["pointer", "u32", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    WSAStringToAddressA: {
      parameters: ["buffer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSAStringToAddressW: {
      parameters: ["buffer", "i32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSALookupServiceBeginA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    WSALookupServiceBeginW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    WSALookupServiceNextA: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WSALookupServiceNextW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WSANSPIoctl: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WSALookupServiceEnd: {
      parameters: ["pointer"],
      result: "i32",
    },
    WSAInstallServiceClassA: {
      parameters: ["pointer"],
      result: "i32",
    },
    WSAInstallServiceClassW: {
      parameters: ["pointer"],
      result: "i32",
    },
    WSARemoveServiceClass: {
      parameters: ["pointer"],
      result: "i32",
    },
    WSAGetServiceClassInfoA: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSAGetServiceClassInfoW: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSAEnumNameSpaceProvidersA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WSAEnumNameSpaceProvidersW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WSAEnumNameSpaceProvidersExA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WSAEnumNameSpaceProvidersExW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WSAGetServiceClassNameByClassIdA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    WSAGetServiceClassNameByClassIdW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "i32",
    },
    WSASetServiceA: {
      parameters: ["pointer", "i32", "u32"],
      result: "i32",
    },
    WSASetServiceW: {
      parameters: ["pointer", "i32", "u32"],
      result: "i32",
    },
    WSAProviderConfigChange: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSAPoll: {
      parameters: ["pointer", "u32", "i32"],
      result: "i32",
    },
    ProcessSocketNotifications: {
      parameters: ["pointer", "u32", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    WSCEnumProtocols: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSCEnumProtocols32: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSCDeinstallProvider: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WSCDeinstallProvider32: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WSCInstallProvider: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    WSCInstallProvider64_32: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    WSCGetProviderPath: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    WSCGetProviderPath32: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    WSCUpdateProvider: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    WSCUpdateProvider32: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    WSCSetProviderInfo: {
      parameters: ["pointer", "i32", "pointer", "usize", "u32", "pointer"],
      result: "i32",
    },
    WSCGetProviderInfo: {
      parameters: ["pointer", "i32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    WSCSetProviderInfo32: {
      parameters: ["pointer", "i32", "pointer", "usize", "u32", "pointer"],
      result: "i32",
    },
    WSCGetProviderInfo32: {
      parameters: ["pointer", "i32", "pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    WSCSetApplicationCategory: {
      parameters: ["buffer", "u32", "buffer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WSCGetApplicationCategory: {
      parameters: ["buffer", "u32", "buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WPUCompleteOverlappedRequest: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer"],
      result: "i32",
    },
    WSCEnumNameSpaceProviders32: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WSCEnumNameSpaceProvidersEx32: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WSCInstallNameSpace: {
      parameters: ["buffer", "buffer", "u32", "u32", "pointer"],
      result: "i32",
    },
    WSCInstallNameSpace32: {
      parameters: ["buffer", "buffer", "u32", "u32", "pointer"],
      result: "i32",
    },
    WSCUnInstallNameSpace: {
      parameters: ["pointer"],
      result: "i32",
    },
    WSCInstallNameSpaceEx: {
      parameters: ["buffer", "buffer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WSCInstallNameSpaceEx32: {
      parameters: ["buffer", "buffer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WSCUnInstallNameSpace32: {
      parameters: ["pointer"],
      result: "i32",
    },
    WSCEnableNSProvider: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    WSCEnableNSProvider32: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    WSCInstallProviderAndChains64_32: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WSAAdvertiseProvider: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    WSAUnadvertiseProvider: {
      parameters: ["pointer"],
      result: "i32",
    },
    WSAProviderCompleteAsyncCall: {
      parameters: ["pointer", "i32"],
      result: "i32",
    },
    getaddrinfo: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    GetAddrInfoW: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    GetAddrInfoExA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetAddrInfoExW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetAddrInfoExCancel: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetAddrInfoExOverlappedResult: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetAddrInfoExA: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetAddrInfoExW: {
      parameters: ["buffer", "buffer", "pointer", "u32", "pointer", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    freeaddrinfo: {
      parameters: ["pointer"],
      result: "void",
    },
    FreeAddrInfoW: {
      parameters: ["pointer"],
      result: "void",
    },
    FreeAddrInfoEx: {
      parameters: ["pointer"],
      result: "void",
    },
    FreeAddrInfoExW: {
      parameters: ["pointer"],
      result: "void",
    },
    getnameinfo: {
      parameters: ["pointer", "i32", "buffer", "u32", "buffer", "u32", "i32"],
      result: "i32",
    },
    GetNameInfoW: {
      parameters: ["pointer", "i32", "buffer", "u32", "buffer", "u32", "i32"],
      result: "i32",
    },
    inet_pton: {
      parameters: ["i32", "buffer", "pointer"],
      result: "i32",
    },
    InetPtonW: {
      parameters: ["i32", "buffer", "pointer"],
      result: "i32",
    },
    inet_ntop: {
      parameters: ["i32", "pointer", "buffer", "usize"],
      result: "buffer",
    },
    InetNtopW: {
      parameters: ["i32", "pointer", "buffer", "usize"],
      result: "buffer",
    },
    WSCWriteProviderOrder: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    WSCWriteProviderOrder32: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    WSCWriteNameSpaceOrder: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    WSCWriteNameSpaceOrder32: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libntdll = Deno.dlopen("ntdll", {
    RtlIpv4AddressToStringA: {
      parameters: ["pointer", "buffer"],
      result: "buffer",
    },
    RtlIpv4AddressToStringExA: {
      parameters: ["pointer", "u16", "buffer", "pointer"],
      result: "i32",
    },
    RtlIpv4AddressToStringW: {
      parameters: ["pointer", "buffer"],
      result: "buffer",
    },
    RtlIpv4AddressToStringExW: {
      parameters: ["pointer", "u16", "buffer", "pointer"],
      result: "i32",
    },
    RtlIpv4StringToAddressA: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RtlIpv4StringToAddressExA: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RtlIpv4StringToAddressW: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RtlIpv4StringToAddressExW: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RtlIpv6AddressToStringA: {
      parameters: ["pointer", "buffer"],
      result: "buffer",
    },
    RtlIpv6AddressToStringExA: {
      parameters: ["pointer", "u32", "u16", "buffer", "pointer"],
      result: "i32",
    },
    RtlIpv6AddressToStringW: {
      parameters: ["pointer", "buffer"],
      result: "buffer",
    },
    RtlIpv6AddressToStringExW: {
      parameters: ["pointer", "u32", "u16", "buffer", "pointer"],
      result: "i32",
    },
    RtlIpv6StringToAddressA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    RtlIpv6StringToAddressExA: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RtlIpv6StringToAddressW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    RtlIpv6StringToAddressExW: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    RtlEthernetAddressToStringA: {
      parameters: ["pointer", "buffer"],
      result: "buffer",
    },
    RtlEthernetAddressToStringW: {
      parameters: ["pointer", "buffer"],
      result: "buffer",
    },
    RtlEthernetStringToAddressA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    RtlEthernetStringToAddressW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libMSWSOCK = Deno.dlopen("MSWSOCK", {
    WSARecvEx: {
      parameters: ["pointer", "buffer", "i32", "pointer"],
      result: "i32",
    },
    TransmitFile: {
      parameters: ["pointer", "pointer", "u32", "u32", "pointer", "pointer", "u32"],
      result: "i32",
    },
    AcceptEx: {
      parameters: ["pointer", "pointer", "pointer", "u32", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    GetAcceptExSockaddrs: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
    EnumProtocolsA: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    EnumProtocolsW: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetAddressByNameA: {
      parameters: ["u32", "pointer", "buffer", "pointer", "u32", "pointer", "pointer", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    GetAddressByNameW: {
      parameters: ["u32", "pointer", "buffer", "pointer", "u32", "pointer", "pointer", "pointer", "buffer", "pointer"],
      result: "i32",
    },
    GetTypeByNameA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    GetTypeByNameW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    GetNameByTypeA: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    GetNameByTypeW: {
      parameters: ["pointer", "buffer", "u32"],
      result: "i32",
    },
    SetServiceA: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SetServiceW: {
      parameters: ["u32", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetServiceA: {
      parameters: ["u32", "pointer", "buffer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetServiceW: {
      parameters: ["u32", "pointer", "buffer", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libfwpuclnt = Deno.dlopen("fwpuclnt", {
    WSASetSocketSecurity: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WSAQuerySocketSecurity: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    WSASetSocketPeerTargetName: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WSADeleteSocketPeerTargetName: {
      parameters: ["pointer", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    WSAImpersonateSocketPeer: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    WSARevertImpersonation: {
      parameters: [],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libWindows_Networking = Deno.dlopen("Windows.Networking", {
    SetSocketMediaStreamingMode: {
      parameters: ["i32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function __WSAFDIsSet(
  fd: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.__WSAFDIsSet(util.toPointer(fd), util.toPointer(param1));
}

export function accept(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  addr: Deno.PointerValue | Uint8Array | null /* ptr */,
  addrlen: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */ {
  return util.pointerFromFfi(libWS2_32.accept(util.toPointer(s), util.toPointer(addr), util.toPointer(addrlen)));
}

export function bind(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  name: Deno.PointerValue | Uint8Array | null /* ptr */,
  namelen: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.bind(util.toPointer(s), util.toPointer(name), namelen);
}

export function closesocket(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
): number /* i32 */ {
  return libWS2_32.closesocket(util.toPointer(s));
}

export function connect(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  name: Deno.PointerValue | Uint8Array | null /* ptr */,
  namelen: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.connect(util.toPointer(s), util.toPointer(name), namelen);
}

export function ioctlsocket(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  cmd: number /* i32 */,
  argp: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.ioctlsocket(util.toPointer(s), cmd, util.toPointer(argp));
}

export function getpeername(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  name: Deno.PointerValue | Uint8Array | null /* ptr */,
  namelen: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.getpeername(util.toPointer(s), util.toPointer(name), util.toPointer(namelen));
}

export function getsockname(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  name: Deno.PointerValue | Uint8Array | null /* ptr */,
  namelen: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.getsockname(util.toPointer(s), util.toPointer(name), util.toPointer(namelen));
}

export function getsockopt(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  level: number /* i32 */,
  optname: number /* i32 */,
  optval: string | null /* Windows.Win32.Foundation.PSTR */,
  optlen: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.getsockopt(util.toPointer(s), level, optname, util.pstrToFfi(optval), util.toPointer(optlen));
}

export function htonl(
  hostlong: number /* u32 */,
): number /* u32 */ {
  return libWS2_32.htonl(hostlong);
}

export function htons(
  hostshort: number /* u16 */,
): number /* u16 */ {
  return libWS2_32.htons(hostshort);
}

export function inet_addr(
  cp: string | null /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libWS2_32.inet_addr(util.pstrToFfi(cp));
}

export function inet_ntoa(
  in__: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.IN_ADDR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libWS2_32.inet_ntoa(util.toPointer(in__)));
}

export function listen(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  backlog: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.listen(util.toPointer(s), backlog);
}

export function ntohl(
  netlong: number /* u32 */,
): number /* u32 */ {
  return libWS2_32.ntohl(netlong);
}

export function ntohs(
  netshort: number /* u16 */,
): number /* u16 */ {
  return libWS2_32.ntohs(netshort);
}

export function recv(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  buf: string | null /* Windows.Win32.Foundation.PSTR */,
  len: number /* i32 */,
  flags: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.recv(util.toPointer(s), util.pstrToFfi(buf), len, flags);
}

export function recvfrom(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  buf: string | null /* Windows.Win32.Foundation.PSTR */,
  len: number /* i32 */,
  flags: number /* i32 */,
  from: Deno.PointerValue | Uint8Array | null /* ptr */,
  fromlen: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.recvfrom(util.toPointer(s), util.pstrToFfi(buf), len, flags, util.toPointer(from), util.toPointer(fromlen));
}

export function select(
  nfds: number /* i32 */,
  readfds: Deno.PointerValue | Uint8Array | null /* ptr */,
  writefds: Deno.PointerValue | Uint8Array | null /* ptr */,
  exceptfds: Deno.PointerValue | Uint8Array | null /* ptr */,
  timeout: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.select(nfds, util.toPointer(readfds), util.toPointer(writefds), util.toPointer(exceptfds), util.toPointer(timeout));
}

export function send(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  buf: string | null /* Windows.Win32.Foundation.PSTR */,
  len: number /* i32 */,
  flags: SEND_FLAGS /* Windows.Win32.Networking.WinSock.SEND_FLAGS */,
): number /* i32 */ {
  return libWS2_32.send(util.toPointer(s), util.pstrToFfi(buf), len, flags);
}

export function sendto(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  buf: string | null /* Windows.Win32.Foundation.PSTR */,
  len: number /* i32 */,
  flags: number /* i32 */,
  to: Deno.PointerValue | Uint8Array | null /* ptr */,
  tolen: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.sendto(util.toPointer(s), util.pstrToFfi(buf), len, flags, util.toPointer(to), tolen);
}

export function setsockopt(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  level: number /* i32 */,
  optname: number /* i32 */,
  optval: string | null /* Windows.Win32.Foundation.PSTR */,
  optlen: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.setsockopt(util.toPointer(s), level, optname, util.pstrToFfi(optval), optlen);
}

export function shutdown(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  how: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.shutdown(util.toPointer(s), how);
}

export function socket(
  af: number /* i32 */,
  type: number /* i32 */,
  protocol: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */ {
  return util.pointerFromFfi(libWS2_32.socket(af, type, protocol));
}

export function gethostbyaddr(
  addr: string | null /* Windows.Win32.Foundation.PSTR */,
  len: number /* i32 */,
  type: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWS2_32.gethostbyaddr(util.pstrToFfi(addr), len, type));
}

export function gethostbyname(
  name: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWS2_32.gethostbyname(util.pstrToFfi(name)));
}

export function gethostname(
  name: string | null /* Windows.Win32.Foundation.PSTR */,
  namelen: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.gethostname(util.pstrToFfi(name), namelen);
}

export function GetHostNameW(
  name: string | null /* Windows.Win32.Foundation.PWSTR */,
  namelen: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.GetHostNameW(util.pwstrToFfi(name), namelen);
}

export function getservbyport(
  port: number /* i32 */,
  proto: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWS2_32.getservbyport(port, util.pstrToFfi(proto)));
}

export function getservbyname(
  name: string | null /* Windows.Win32.Foundation.PSTR */,
  proto: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWS2_32.getservbyname(util.pstrToFfi(name), util.pstrToFfi(proto)));
}

export function getprotobynumber(
  number: number /* i32 */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWS2_32.getprotobynumber(number));
}

export function getprotobyname(
  name: string | null /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue | null /* ptr */ {
  return util.pointerFromFfi(libWS2_32.getprotobyname(util.pstrToFfi(name)));
}

export function WSAStartup(
  wVersionRequested: number /* u16 */,
  lpWSAData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAStartup(wVersionRequested, util.toPointer(lpWSAData));
}

export function WSACleanup(): number /* i32 */ {
  return libWS2_32.WSACleanup();
}

export function WSASetLastError(
  iError: number /* i32 */,
): void /* void */ {
  return libWS2_32.WSASetLastError(iError);
}

export function WSAGetLastError(): WSA_ERROR /* Windows.Win32.Networking.WinSock.WSA_ERROR */ {
  return libWS2_32.WSAGetLastError();
}

export function WSAIsBlocking(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWS2_32.WSAIsBlocking());
}

export function WSAUnhookBlockingHook(): number /* i32 */ {
  return libWS2_32.WSAUnhookBlockingHook();
}

export function WSASetBlockingHook(
  lpBlockFunc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.FARPROC */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.FARPROC */ {
  return util.pointerFromFfi(libWS2_32.WSASetBlockingHook(util.toPointer(lpBlockFunc)));
}

export function WSACancelBlockingCall(): number /* i32 */ {
  return libWS2_32.WSACancelBlockingCall();
}

export function WSAAsyncGetServByName(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  wMsg: number /* u32 */,
  name: string | null /* Windows.Win32.Foundation.PSTR */,
  proto: string | null /* Windows.Win32.Foundation.PSTR */,
  buf: string | null /* Windows.Win32.Foundation.PSTR */,
  buflen: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWS2_32.WSAAsyncGetServByName(util.hwndToFfi(hWnd), wMsg, util.pstrToFfi(name), util.pstrToFfi(proto), util.pstrToFfi(buf), buflen));
}

export function WSAAsyncGetServByPort(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  wMsg: number /* u32 */,
  port: number /* i32 */,
  proto: string | null /* Windows.Win32.Foundation.PSTR */,
  buf: string | null /* Windows.Win32.Foundation.PSTR */,
  buflen: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWS2_32.WSAAsyncGetServByPort(util.hwndToFfi(hWnd), wMsg, port, util.pstrToFfi(proto), util.pstrToFfi(buf), buflen));
}

export function WSAAsyncGetProtoByName(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  wMsg: number /* u32 */,
  name: string | null /* Windows.Win32.Foundation.PSTR */,
  buf: string | null /* Windows.Win32.Foundation.PSTR */,
  buflen: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWS2_32.WSAAsyncGetProtoByName(util.hwndToFfi(hWnd), wMsg, util.pstrToFfi(name), util.pstrToFfi(buf), buflen));
}

export function WSAAsyncGetProtoByNumber(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  wMsg: number /* u32 */,
  number: number /* i32 */,
  buf: string | null /* Windows.Win32.Foundation.PSTR */,
  buflen: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWS2_32.WSAAsyncGetProtoByNumber(util.hwndToFfi(hWnd), wMsg, number, util.pstrToFfi(buf), buflen));
}

export function WSAAsyncGetHostByName(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  wMsg: number /* u32 */,
  name: string | null /* Windows.Win32.Foundation.PSTR */,
  buf: string | null /* Windows.Win32.Foundation.PSTR */,
  buflen: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWS2_32.WSAAsyncGetHostByName(util.hwndToFfi(hWnd), wMsg, util.pstrToFfi(name), util.pstrToFfi(buf), buflen));
}

export function WSAAsyncGetHostByAddr(
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  wMsg: number /* u32 */,
  addr: string | null /* Windows.Win32.Foundation.PSTR */,
  len: number /* i32 */,
  type: number /* i32 */,
  buf: string | null /* Windows.Win32.Foundation.PSTR */,
  buflen: number /* i32 */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWS2_32.WSAAsyncGetHostByAddr(util.hwndToFfi(hWnd), wMsg, util.pstrToFfi(addr), len, type, util.pstrToFfi(buf), buflen));
}

export function WSACancelAsyncRequest(
  hAsyncTaskHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* i32 */ {
  return libWS2_32.WSACancelAsyncRequest(util.toPointer(hAsyncTaskHandle));
}

export function WSAAsyncSelect(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  hWnd: Deno.PointerValue | null /* Windows.Win32.Foundation.HWND */,
  wMsg: number /* u32 */,
  lEvent: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.WSAAsyncSelect(util.toPointer(s), util.hwndToFfi(hWnd), wMsg, lEvent);
}

export function WSAAccept(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  addr: Deno.PointerValue | Uint8Array | null /* ptr */,
  addrlen: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpfnCondition: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPCONDITIONPROC */,
  dwCallbackData: Deno.PointerValue /* usize */,
): Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */ {
  return util.pointerFromFfi(libWS2_32.WSAAccept(util.toPointer(s), util.toPointer(addr), util.toPointer(addrlen), util.toPointer(lpfnCondition), dwCallbackData));
}

export function WSACloseEvent(
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWS2_32.WSACloseEvent(util.toPointer(hEvent)));
}

export function WSAConnect(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  name: Deno.PointerValue | Uint8Array | null /* ptr */,
  namelen: number /* i32 */,
  lpCallerData: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCalleeData: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpSQOS: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpGQOS: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAConnect(util.toPointer(s), util.toPointer(name), namelen, util.toPointer(lpCallerData), util.toPointer(lpCalleeData), util.toPointer(lpSQOS), util.toPointer(lpGQOS));
}

export function WSAConnectByNameW(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  nodename: string | null /* Windows.Win32.Foundation.PWSTR */,
  servicename: string | null /* Windows.Win32.Foundation.PWSTR */,
  LocalAddressLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  LocalAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  RemoteAddressLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  RemoteAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  timeout: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWS2_32.WSAConnectByNameW(util.toPointer(s), util.pwstrToFfi(nodename), util.pwstrToFfi(servicename), util.toPointer(LocalAddressLength), util.toPointer(LocalAddress), util.toPointer(RemoteAddressLength), util.toPointer(RemoteAddress), util.toPointer(timeout), util.toPointer(Reserved)));
}

export function WSAConnectByNameA(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  nodename: string | null /* Windows.Win32.Foundation.PSTR */,
  servicename: string | null /* Windows.Win32.Foundation.PSTR */,
  LocalAddressLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  LocalAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  RemoteAddressLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  RemoteAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  timeout: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWS2_32.WSAConnectByNameA(util.toPointer(s), util.pstrToFfi(nodename), util.pstrToFfi(servicename), util.toPointer(LocalAddressLength), util.toPointer(LocalAddress), util.toPointer(RemoteAddressLength), util.toPointer(RemoteAddress), util.toPointer(timeout), util.toPointer(Reserved)));
}

export function WSAConnectByList(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  SocketAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  LocalAddressLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  LocalAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  RemoteAddressLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  RemoteAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  timeout: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWS2_32.WSAConnectByList(util.toPointer(s), util.toPointer(SocketAddress), util.toPointer(LocalAddressLength), util.toPointer(LocalAddress), util.toPointer(RemoteAddressLength), util.toPointer(RemoteAddress), util.toPointer(timeout), util.toPointer(Reserved)));
}

export function WSACreateEvent(): Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */ {
  return util.pointerFromFfi(libWS2_32.WSACreateEvent());
}

export function WSADuplicateSocketA(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  dwProcessId: number /* u32 */,
  lpProtocolInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSADuplicateSocketA(util.toPointer(s), dwProcessId, util.toPointer(lpProtocolInfo));
}

export function WSADuplicateSocketW(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  dwProcessId: number /* u32 */,
  lpProtocolInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSADuplicateSocketW(util.toPointer(s), dwProcessId, util.toPointer(lpProtocolInfo));
}

export function WSAEnumNetworkEvents(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  hEventObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lpNetworkEvents: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAEnumNetworkEvents(util.toPointer(s), util.toPointer(hEventObject), util.toPointer(lpNetworkEvents));
}

export function WSAEnumProtocolsA(
  lpiProtocols: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProtocolBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAEnumProtocolsA(util.toPointer(lpiProtocols), util.toPointer(lpProtocolBuffer), util.toPointer(lpdwBufferLength));
}

export function WSAEnumProtocolsW(
  lpiProtocols: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProtocolBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAEnumProtocolsW(util.toPointer(lpiProtocols), util.toPointer(lpProtocolBuffer), util.toPointer(lpdwBufferLength));
}

export function WSAEventSelect(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  hEventObject: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  lNetworkEvents: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.WSAEventSelect(util.toPointer(s), util.toPointer(hEventObject), lNetworkEvents);
}

export function WSAGetOverlappedResult(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpcbTransfer: Deno.PointerValue | Uint8Array | null /* ptr */,
  fWait: boolean /* Windows.Win32.Foundation.BOOL */,
  lpdwFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWS2_32.WSAGetOverlappedResult(util.toPointer(s), util.toPointer(lpOverlapped), util.toPointer(lpcbTransfer), util.boolToFfi(fWait), util.toPointer(lpdwFlags)));
}

export function WSAGetQOSByName(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  lpQOSName: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpQOS: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWS2_32.WSAGetQOSByName(util.toPointer(s), util.toPointer(lpQOSName), util.toPointer(lpQOS)));
}

export function WSAHtonl(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  hostlong: number /* u32 */,
  lpnetlong: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAHtonl(util.toPointer(s), hostlong, util.toPointer(lpnetlong));
}

export function WSAHtons(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  hostshort: number /* u16 */,
  lpnetshort: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAHtons(util.toPointer(s), hostshort, util.toPointer(lpnetshort));
}

export function WSAIoctl(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  dwIoControlCode: number /* u32 */,
  lpvInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInBuffer: number /* u32 */,
  lpvOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbOutBuffer: number /* u32 */,
  lpcbBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPWSAOVERLAPPED_COMPLETION_ROUTINE */,
): number /* i32 */ {
  return libWS2_32.WSAIoctl(util.toPointer(s), dwIoControlCode, util.toPointer(lpvInBuffer), cbInBuffer, util.toPointer(lpvOutBuffer), cbOutBuffer, util.toPointer(lpcbBytesReturned), util.toPointer(lpOverlapped), util.toPointer(lpCompletionRoutine));
}

export function WSAJoinLeaf(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  name: Deno.PointerValue | Uint8Array | null /* ptr */,
  namelen: number /* i32 */,
  lpCallerData: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCalleeData: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpSQOS: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpGQOS: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */ {
  return util.pointerFromFfi(libWS2_32.WSAJoinLeaf(util.toPointer(s), util.toPointer(name), namelen, util.toPointer(lpCallerData), util.toPointer(lpCalleeData), util.toPointer(lpSQOS), util.toPointer(lpGQOS), dwFlags));
}

export function WSANtohl(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  netlong: number /* u32 */,
  lphostlong: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSANtohl(util.toPointer(s), netlong, util.toPointer(lphostlong));
}

export function WSANtohs(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  netshort: number /* u16 */,
  lphostshort: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSANtohs(util.toPointer(s), netshort, util.toPointer(lphostshort));
}

export function WSARecv(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  lpBuffers: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferCount: number /* u32 */,
  lpNumberOfBytesRecvd: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPWSAOVERLAPPED_COMPLETION_ROUTINE */,
): number /* i32 */ {
  return libWS2_32.WSARecv(util.toPointer(s), util.toPointer(lpBuffers), dwBufferCount, util.toPointer(lpNumberOfBytesRecvd), util.toPointer(lpFlags), util.toPointer(lpOverlapped), util.toPointer(lpCompletionRoutine));
}

export function WSARecvDisconnect(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  lpInboundDisconnectData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSARecvDisconnect(util.toPointer(s), util.toPointer(lpInboundDisconnectData));
}

export function WSARecvFrom(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  lpBuffers: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferCount: number /* u32 */,
  lpNumberOfBytesRecvd: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFrom: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpFromlen: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPWSAOVERLAPPED_COMPLETION_ROUTINE */,
): number /* i32 */ {
  return libWS2_32.WSARecvFrom(util.toPointer(s), util.toPointer(lpBuffers), dwBufferCount, util.toPointer(lpNumberOfBytesRecvd), util.toPointer(lpFlags), util.toPointer(lpFrom), util.toPointer(lpFromlen), util.toPointer(lpOverlapped), util.toPointer(lpCompletionRoutine));
}

export function WSAResetEvent(
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWS2_32.WSAResetEvent(util.toPointer(hEvent)));
}

export function WSASend(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  lpBuffers: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferCount: number /* u32 */,
  lpNumberOfBytesSent: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPWSAOVERLAPPED_COMPLETION_ROUTINE */,
): number /* i32 */ {
  return libWS2_32.WSASend(util.toPointer(s), util.toPointer(lpBuffers), dwBufferCount, util.toPointer(lpNumberOfBytesSent), dwFlags, util.toPointer(lpOverlapped), util.toPointer(lpCompletionRoutine));
}

export function WSASendMsg(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  lpMsg: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  lpNumberOfBytesSent: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPWSAOVERLAPPED_COMPLETION_ROUTINE */,
): number /* i32 */ {
  return libWS2_32.WSASendMsg(util.toPointer(Handle), util.toPointer(lpMsg), dwFlags, util.toPointer(lpNumberOfBytesSent), util.toPointer(lpOverlapped), util.toPointer(lpCompletionRoutine));
}

export function WSASendDisconnect(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  lpOutboundDisconnectData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSASendDisconnect(util.toPointer(s), util.toPointer(lpOutboundDisconnectData));
}

export function WSASendTo(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  lpBuffers: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwBufferCount: number /* u32 */,
  lpNumberOfBytesSent: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  lpTo: Deno.PointerValue | Uint8Array | null /* ptr */,
  iTolen: number /* i32 */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPWSAOVERLAPPED_COMPLETION_ROUTINE */,
): number /* i32 */ {
  return libWS2_32.WSASendTo(util.toPointer(s), util.toPointer(lpBuffers), dwBufferCount, util.toPointer(lpNumberOfBytesSent), dwFlags, util.toPointer(lpTo), iTolen, util.toPointer(lpOverlapped), util.toPointer(lpCompletionRoutine));
}

export function WSASetEvent(
  hEvent: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libWS2_32.WSASetEvent(util.toPointer(hEvent)));
}

export function WSASocketA(
  af: number /* i32 */,
  type: number /* i32 */,
  protocol: number /* i32 */,
  lpProtocolInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  g: number /* u32 */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */ {
  return util.pointerFromFfi(libWS2_32.WSASocketA(af, type, protocol, util.toPointer(lpProtocolInfo), g, dwFlags));
}

export function WSASocketW(
  af: number /* i32 */,
  type: number /* i32 */,
  protocol: number /* i32 */,
  lpProtocolInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  g: number /* u32 */,
  dwFlags: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */ {
  return util.pointerFromFfi(libWS2_32.WSASocketW(af, type, protocol, util.toPointer(lpProtocolInfo), g, dwFlags));
}

export function WSAWaitForMultipleEvents(
  cEvents: number /* u32 */,
  lphEvents: Deno.PointerValue | Uint8Array | null /* ptr */,
  fWaitAll: boolean /* Windows.Win32.Foundation.BOOL */,
  dwTimeout: number /* u32 */,
  fAlertable: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libWS2_32.WSAWaitForMultipleEvents(cEvents, util.toPointer(lphEvents), util.boolToFfi(fWaitAll), dwTimeout, util.boolToFfi(fAlertable));
}

export function WSAAddressToStringA(
  lpsaAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAddressLength: number /* u32 */,
  lpProtocolInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszAddressString: string | null /* Windows.Win32.Foundation.PSTR */,
  lpdwAddressStringLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAAddressToStringA(util.toPointer(lpsaAddress), dwAddressLength, util.toPointer(lpProtocolInfo), util.pstrToFfi(lpszAddressString), util.toPointer(lpdwAddressStringLength));
}

export function WSAAddressToStringW(
  lpsaAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAddressLength: number /* u32 */,
  lpProtocolInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszAddressString: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpdwAddressStringLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAAddressToStringW(util.toPointer(lpsaAddress), dwAddressLength, util.toPointer(lpProtocolInfo), util.pwstrToFfi(lpszAddressString), util.toPointer(lpdwAddressStringLength));
}

export function WSAStringToAddressA(
  AddressString: string | null /* Windows.Win32.Foundation.PSTR */,
  AddressFamily: number /* i32 */,
  lpProtocolInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAddressLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAStringToAddressA(util.pstrToFfi(AddressString), AddressFamily, util.toPointer(lpProtocolInfo), util.toPointer(lpAddress), util.toPointer(lpAddressLength));
}

export function WSAStringToAddressW(
  AddressString: string | null /* Windows.Win32.Foundation.PWSTR */,
  AddressFamily: number /* i32 */,
  lpProtocolInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAddress: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAddressLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAStringToAddressW(util.pwstrToFfi(AddressString), AddressFamily, util.toPointer(lpProtocolInfo), util.toPointer(lpAddress), util.toPointer(lpAddressLength));
}

export function WSALookupServiceBeginA(
  lpqsRestrictions: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwControlFlags: number /* u32 */,
  lphLookup: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSALookupServiceBeginA(util.toPointer(lpqsRestrictions), dwControlFlags, util.toPointer(lphLookup));
}

export function WSALookupServiceBeginW(
  lpqsRestrictions: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwControlFlags: number /* u32 */,
  lphLookup: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSALookupServiceBeginW(util.toPointer(lpqsRestrictions), dwControlFlags, util.toPointer(lphLookup));
}

export function WSALookupServiceNextA(
  hLookup: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwControlFlags: number /* u32 */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpqsResults: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSALookupServiceNextA(util.toPointer(hLookup), dwControlFlags, util.toPointer(lpdwBufferLength), util.toPointer(lpqsResults));
}

export function WSALookupServiceNextW(
  hLookup: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwControlFlags: number /* u32 */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpqsResults: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSALookupServiceNextW(util.toPointer(hLookup), dwControlFlags, util.toPointer(lpdwBufferLength), util.toPointer(lpqsResults));
}

export function WSANSPIoctl(
  hLookup: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  dwControlCode: number /* u32 */,
  lpvInBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbInBuffer: number /* u32 */,
  lpvOutBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  cbOutBuffer: number /* u32 */,
  lpcbBytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCompletion: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSANSPIoctl(util.toPointer(hLookup), dwControlCode, util.toPointer(lpvInBuffer), cbInBuffer, util.toPointer(lpvOutBuffer), cbOutBuffer, util.toPointer(lpcbBytesReturned), util.toPointer(lpCompletion));
}

export function WSALookupServiceEnd(
  hLookup: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* i32 */ {
  return libWS2_32.WSALookupServiceEnd(util.toPointer(hLookup));
}

export function WSAInstallServiceClassA(
  lpServiceClassInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAInstallServiceClassA(util.toPointer(lpServiceClassInfo));
}

export function WSAInstallServiceClassW(
  lpServiceClassInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAInstallServiceClassW(util.toPointer(lpServiceClassInfo));
}

export function WSARemoveServiceClass(
  lpServiceClassId: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSARemoveServiceClass(util.toPointer(lpServiceClassId));
}

export function WSAGetServiceClassInfoA(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceClassId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceClassInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAGetServiceClassInfoA(util.toPointer(lpProviderId), util.toPointer(lpServiceClassId), util.toPointer(lpdwBufSize), util.toPointer(lpServiceClassInfo));
}

export function WSAGetServiceClassInfoW(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceClassId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceClassInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAGetServiceClassInfoW(util.toPointer(lpProviderId), util.toPointer(lpServiceClassId), util.toPointer(lpdwBufSize), util.toPointer(lpServiceClassInfo));
}

export function WSAEnumNameSpaceProvidersA(
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpnspBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAEnumNameSpaceProvidersA(util.toPointer(lpdwBufferLength), util.toPointer(lpnspBuffer));
}

export function WSAEnumNameSpaceProvidersW(
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpnspBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAEnumNameSpaceProvidersW(util.toPointer(lpdwBufferLength), util.toPointer(lpnspBuffer));
}

export function WSAEnumNameSpaceProvidersExA(
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpnspBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAEnumNameSpaceProvidersExA(util.toPointer(lpdwBufferLength), util.toPointer(lpnspBuffer));
}

export function WSAEnumNameSpaceProvidersExW(
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpnspBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAEnumNameSpaceProvidersExW(util.toPointer(lpdwBufferLength), util.toPointer(lpnspBuffer));
}

export function WSAGetServiceClassNameByClassIdA(
  lpServiceClassId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszServiceClassName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAGetServiceClassNameByClassIdA(util.toPointer(lpServiceClassId), util.pstrToFfi(lpszServiceClassName), util.toPointer(lpdwBufferLength));
}

export function WSAGetServiceClassNameByClassIdW(
  lpServiceClassId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszServiceClassName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAGetServiceClassNameByClassIdW(util.toPointer(lpServiceClassId), util.pwstrToFfi(lpszServiceClassName), util.toPointer(lpdwBufferLength));
}

export function WSASetServiceA(
  lpqsRegInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  essoperation: WSAESETSERVICEOP /* Windows.Win32.Networking.WinSock.WSAESETSERVICEOP */,
  dwControlFlags: number /* u32 */,
): number /* i32 */ {
  return libWS2_32.WSASetServiceA(util.toPointer(lpqsRegInfo), essoperation, dwControlFlags);
}

export function WSASetServiceW(
  lpqsRegInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  essoperation: WSAESETSERVICEOP /* Windows.Win32.Networking.WinSock.WSAESETSERVICEOP */,
  dwControlFlags: number /* u32 */,
): number /* i32 */ {
  return libWS2_32.WSASetServiceW(util.toPointer(lpqsRegInfo), essoperation, dwControlFlags);
}

export function WSAProviderConfigChange(
  lpNotificationHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPWSAOVERLAPPED_COMPLETION_ROUTINE */,
): number /* i32 */ {
  return libWS2_32.WSAProviderConfigChange(util.toPointer(lpNotificationHandle), util.toPointer(lpOverlapped), util.toPointer(lpCompletionRoutine));
}

export function WSAPoll(
  fdArray: Deno.PointerValue | Uint8Array | null /* ptr */,
  fds: number /* u32 */,
  timeout: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.WSAPoll(util.toPointer(fdArray), fds, timeout);
}

export function ProcessSocketNotifications(
  completionPort: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  registrationCount: number /* u32 */,
  registrationInfos: Deno.PointerValue | Uint8Array | null /* ptr */,
  timeoutMs: number /* u32 */,
  completionCount: number /* u32 */,
  completionPortEntries: Deno.PointerValue | Uint8Array | null /* ptr */,
  receivedEntryCount: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libWS2_32.ProcessSocketNotifications(util.toPointer(completionPort), registrationCount, util.toPointer(registrationInfos), timeoutMs, completionCount, util.toPointer(completionPortEntries), util.toPointer(receivedEntryCount));
}

export function RtlIpv4AddressToStringA(
  Addr: Deno.PointerValue | Uint8Array | null /* ptr */,
  S: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libntdll.RtlIpv4AddressToStringA(util.toPointer(Addr), util.pstrToFfi(S)));
}

export function RtlIpv4AddressToStringExA(
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
  Port: number /* u16 */,
  AddressString: string | null /* Windows.Win32.Foundation.PSTR */,
  AddressStringLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlIpv4AddressToStringExA(util.toPointer(Address), Port, util.pstrToFfi(AddressString), util.toPointer(AddressStringLength));
}

export function RtlIpv4AddressToStringW(
  Addr: Deno.PointerValue | Uint8Array | null /* ptr */,
  S: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libntdll.RtlIpv4AddressToStringW(util.toPointer(Addr), util.pwstrToFfi(S)));
}

export function RtlIpv4AddressToStringExW(
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
  Port: number /* u16 */,
  AddressString: string | null /* Windows.Win32.Foundation.PWSTR */,
  AddressStringLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlIpv4AddressToStringExW(util.toPointer(Address), Port, util.pwstrToFfi(AddressString), util.toPointer(AddressStringLength));
}

export function RtlIpv4StringToAddressA(
  S: string | null /* Windows.Win32.Foundation.PSTR */,
  Strict: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  Terminator: Deno.PointerValue | Uint8Array | null /* ptr */,
  Addr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlIpv4StringToAddressA(util.pstrToFfi(S), util.toPointer(Strict), util.toPointer(Terminator), util.toPointer(Addr));
}

export function RtlIpv4StringToAddressExA(
  AddressString: string | null /* Windows.Win32.Foundation.PSTR */,
  Strict: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
  Port: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlIpv4StringToAddressExA(util.pstrToFfi(AddressString), util.toPointer(Strict), util.toPointer(Address), util.toPointer(Port));
}

export function RtlIpv4StringToAddressW(
  S: string | null /* Windows.Win32.Foundation.PWSTR */,
  Strict: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  Terminator: Deno.PointerValue | Uint8Array | null /* ptr */,
  Addr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlIpv4StringToAddressW(util.pwstrToFfi(S), util.toPointer(Strict), util.toPointer(Terminator), util.toPointer(Addr));
}

export function RtlIpv4StringToAddressExW(
  AddressString: string | null /* Windows.Win32.Foundation.PWSTR */,
  Strict: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.BOOLEAN */,
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
  Port: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlIpv4StringToAddressExW(util.pwstrToFfi(AddressString), util.toPointer(Strict), util.toPointer(Address), util.toPointer(Port));
}

export function RtlIpv6AddressToStringA(
  Addr: Deno.PointerValue | Uint8Array | null /* ptr */,
  S: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libntdll.RtlIpv6AddressToStringA(util.toPointer(Addr), util.pstrToFfi(S)));
}

export function RtlIpv6AddressToStringExA(
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
  ScopeId: number /* u32 */,
  Port: number /* u16 */,
  AddressString: string | null /* Windows.Win32.Foundation.PSTR */,
  AddressStringLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlIpv6AddressToStringExA(util.toPointer(Address), ScopeId, Port, util.pstrToFfi(AddressString), util.toPointer(AddressStringLength));
}

export function RtlIpv6AddressToStringW(
  Addr: Deno.PointerValue | Uint8Array | null /* ptr */,
  S: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libntdll.RtlIpv6AddressToStringW(util.toPointer(Addr), util.pwstrToFfi(S)));
}

export function RtlIpv6AddressToStringExW(
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
  ScopeId: number /* u32 */,
  Port: number /* u16 */,
  AddressString: string | null /* Windows.Win32.Foundation.PWSTR */,
  AddressStringLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlIpv6AddressToStringExW(util.toPointer(Address), ScopeId, Port, util.pwstrToFfi(AddressString), util.toPointer(AddressStringLength));
}

export function RtlIpv6StringToAddressA(
  S: string | null /* Windows.Win32.Foundation.PSTR */,
  Terminator: Deno.PointerValue | Uint8Array | null /* ptr */,
  Addr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlIpv6StringToAddressA(util.pstrToFfi(S), util.toPointer(Terminator), util.toPointer(Addr));
}

export function RtlIpv6StringToAddressExA(
  AddressString: string | null /* Windows.Win32.Foundation.PSTR */,
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
  ScopeId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Port: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlIpv6StringToAddressExA(util.pstrToFfi(AddressString), util.toPointer(Address), util.toPointer(ScopeId), util.toPointer(Port));
}

export function RtlIpv6StringToAddressW(
  S: string | null /* Windows.Win32.Foundation.PWSTR */,
  Terminator: Deno.PointerValue | Uint8Array | null /* ptr */,
  Addr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlIpv6StringToAddressW(util.pwstrToFfi(S), util.toPointer(Terminator), util.toPointer(Addr));
}

export function RtlIpv6StringToAddressExW(
  AddressString: string | null /* Windows.Win32.Foundation.PWSTR */,
  Address: Deno.PointerValue | Uint8Array | null /* ptr */,
  ScopeId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Port: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlIpv6StringToAddressExW(util.pwstrToFfi(AddressString), util.toPointer(Address), util.toPointer(ScopeId), util.toPointer(Port));
}

export function RtlEthernetAddressToStringA(
  Addr: Deno.PointerValue | Uint8Array | null /* ptr */,
  S: string | null /* Windows.Win32.Foundation.PSTR */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libntdll.RtlEthernetAddressToStringA(util.toPointer(Addr), util.pstrToFfi(S)));
}

export function RtlEthernetAddressToStringW(
  Addr: Deno.PointerValue | Uint8Array | null /* ptr */,
  S: string | null /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libntdll.RtlEthernetAddressToStringW(util.toPointer(Addr), util.pwstrToFfi(S)));
}

export function RtlEthernetStringToAddressA(
  S: string | null /* Windows.Win32.Foundation.PSTR */,
  Terminator: Deno.PointerValue | Uint8Array | null /* ptr */,
  Addr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlEthernetStringToAddressA(util.pstrToFfi(S), util.toPointer(Terminator), util.toPointer(Addr));
}

export function RtlEthernetStringToAddressW(
  S: string | null /* Windows.Win32.Foundation.PWSTR */,
  Terminator: Deno.PointerValue | Uint8Array | null /* ptr */,
  Addr: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libntdll.RtlEthernetStringToAddressW(util.pwstrToFfi(S), util.toPointer(Terminator), util.toPointer(Addr));
}

export function WSARecvEx(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  buf: string | null /* Windows.Win32.Foundation.PSTR */,
  len: number /* i32 */,
  flags: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMSWSOCK.WSARecvEx(util.toPointer(s), util.pstrToFfi(buf), len, util.toPointer(flags));
}

export function TransmitFile(
  hSocket: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  hFile: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  nNumberOfBytesToWrite: number /* u32 */,
  nNumberOfBytesPerSend: number /* u32 */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpTransmitBuffers: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReserved: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSWSOCK.TransmitFile(util.toPointer(hSocket), util.toPointer(hFile), nNumberOfBytesToWrite, nNumberOfBytesPerSend, util.toPointer(lpOverlapped), util.toPointer(lpTransmitBuffers), dwReserved));
}

export function AcceptEx(
  sListenSocket: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  sAcceptSocket: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  lpOutputBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReceiveDataLength: number /* u32 */,
  dwLocalAddressLength: number /* u32 */,
  dwRemoteAddressLength: number /* u32 */,
  lpdwBytesReceived: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libMSWSOCK.AcceptEx(util.toPointer(sListenSocket), util.toPointer(sAcceptSocket), util.toPointer(lpOutputBuffer), dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, util.toPointer(lpdwBytesReceived), util.toPointer(lpOverlapped)));
}

export function GetAcceptExSockaddrs(
  lpOutputBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwReceiveDataLength: number /* u32 */,
  dwLocalAddressLength: number /* u32 */,
  dwRemoteAddressLength: number /* u32 */,
  LocalSockaddr: Deno.PointerValue | Uint8Array | null /* ptr */,
  LocalSockaddrLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  RemoteSockaddr: Deno.PointerValue | Uint8Array | null /* ptr */,
  RemoteSockaddrLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libMSWSOCK.GetAcceptExSockaddrs(util.toPointer(lpOutputBuffer), dwReceiveDataLength, dwLocalAddressLength, dwRemoteAddressLength, util.toPointer(LocalSockaddr), util.toPointer(LocalSockaddrLength), util.toPointer(RemoteSockaddr), util.toPointer(RemoteSockaddrLength));
}

export function WSCEnumProtocols(
  lpiProtocols: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProtocolBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCEnumProtocols(util.toPointer(lpiProtocols), util.toPointer(lpProtocolBuffer), util.toPointer(lpdwBufferLength), util.toPointer(lpErrno));
}

export function WSCEnumProtocols32(
  lpiProtocols: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProtocolBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCEnumProtocols32(util.toPointer(lpiProtocols), util.toPointer(lpProtocolBuffer), util.toPointer(lpdwBufferLength), util.toPointer(lpErrno));
}

export function WSCDeinstallProvider(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCDeinstallProvider(util.toPointer(lpProviderId), util.toPointer(lpErrno));
}

export function WSCDeinstallProvider32(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCDeinstallProvider32(util.toPointer(lpProviderId), util.toPointer(lpErrno));
}

export function WSCInstallProvider(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszProviderDllPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpProtocolInfoList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumberOfEntries: number /* u32 */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCInstallProvider(util.toPointer(lpProviderId), util.pwstrToFfi(lpszProviderDllPath), util.toPointer(lpProtocolInfoList), dwNumberOfEntries, util.toPointer(lpErrno));
}

export function WSCInstallProvider64_32(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszProviderDllPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpProtocolInfoList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumberOfEntries: number /* u32 */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCInstallProvider64_32(util.toPointer(lpProviderId), util.pwstrToFfi(lpszProviderDllPath), util.toPointer(lpProtocolInfoList), dwNumberOfEntries, util.toPointer(lpErrno));
}

export function WSCGetProviderPath(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszProviderDllPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpProviderDllPathLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCGetProviderPath(util.toPointer(lpProviderId), util.pwstrToFfi(lpszProviderDllPath), util.toPointer(lpProviderDllPathLen), util.toPointer(lpErrno));
}

export function WSCGetProviderPath32(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszProviderDllPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpProviderDllPathLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCGetProviderPath32(util.toPointer(lpProviderId), util.pwstrToFfi(lpszProviderDllPath), util.toPointer(lpProviderDllPathLen), util.toPointer(lpErrno));
}

export function WSCUpdateProvider(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszProviderDllPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpProtocolInfoList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumberOfEntries: number /* u32 */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCUpdateProvider(util.toPointer(lpProviderId), util.pwstrToFfi(lpszProviderDllPath), util.toPointer(lpProtocolInfoList), dwNumberOfEntries, util.toPointer(lpErrno));
}

export function WSCUpdateProvider32(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszProviderDllPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpProtocolInfoList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumberOfEntries: number /* u32 */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCUpdateProvider32(util.toPointer(lpProviderId), util.pwstrToFfi(lpszProviderDllPath), util.toPointer(lpProtocolInfoList), dwNumberOfEntries, util.toPointer(lpErrno));
}

export function WSCSetProviderInfo(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfoType: WSC_PROVIDER_INFO_TYPE /* Windows.Win32.Networking.WinSock.WSC_PROVIDER_INFO_TYPE */,
  Info: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfoSize: Deno.PointerValue /* usize */,
  Flags: number /* u32 */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCSetProviderInfo(util.toPointer(lpProviderId), InfoType, util.toPointer(Info), InfoSize, Flags, util.toPointer(lpErrno));
}

export function WSCGetProviderInfo(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfoType: WSC_PROVIDER_INFO_TYPE /* Windows.Win32.Networking.WinSock.WSC_PROVIDER_INFO_TYPE */,
  Info: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfoSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCGetProviderInfo(util.toPointer(lpProviderId), InfoType, util.toPointer(Info), util.toPointer(InfoSize), Flags, util.toPointer(lpErrno));
}

export function WSCSetProviderInfo32(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfoType: WSC_PROVIDER_INFO_TYPE /* Windows.Win32.Networking.WinSock.WSC_PROVIDER_INFO_TYPE */,
  Info: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfoSize: Deno.PointerValue /* usize */,
  Flags: number /* u32 */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCSetProviderInfo32(util.toPointer(lpProviderId), InfoType, util.toPointer(Info), InfoSize, Flags, util.toPointer(lpErrno));
}

export function WSCGetProviderInfo32(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfoType: WSC_PROVIDER_INFO_TYPE /* Windows.Win32.Networking.WinSock.WSC_PROVIDER_INFO_TYPE */,
  Info: Deno.PointerValue | Uint8Array | null /* ptr */,
  InfoSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCGetProviderInfo32(util.toPointer(lpProviderId), InfoType, util.toPointer(Info), util.toPointer(InfoSize), Flags, util.toPointer(lpErrno));
}

export function WSCSetApplicationCategory(
  Path: string | null /* Windows.Win32.Foundation.PWSTR */,
  PathLength: number /* u32 */,
  Extra: string | null /* Windows.Win32.Foundation.PWSTR */,
  ExtraLength: number /* u32 */,
  PermittedLspCategories: number /* u32 */,
  pPrevPermLspCat: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCSetApplicationCategory(util.pwstrToFfi(Path), PathLength, util.pwstrToFfi(Extra), ExtraLength, PermittedLspCategories, util.toPointer(pPrevPermLspCat), util.toPointer(lpErrno));
}

export function WSCGetApplicationCategory(
  Path: string | null /* Windows.Win32.Foundation.PWSTR */,
  PathLength: number /* u32 */,
  Extra: string | null /* Windows.Win32.Foundation.PWSTR */,
  ExtraLength: number /* u32 */,
  pPermittedLspCategories: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCGetApplicationCategory(util.pwstrToFfi(Path), PathLength, util.pwstrToFfi(Extra), ExtraLength, util.toPointer(pPermittedLspCategories), util.toPointer(lpErrno));
}

export function WPUCompleteOverlappedRequest(
  s: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwError: number /* u32 */,
  cbTransferred: number /* u32 */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WPUCompleteOverlappedRequest(util.toPointer(s), util.toPointer(lpOverlapped), dwError, cbTransferred, util.toPointer(lpErrno));
}

export function WSCEnumNameSpaceProviders32(
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpnspBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCEnumNameSpaceProviders32(util.toPointer(lpdwBufferLength), util.toPointer(lpnspBuffer));
}

export function WSCEnumNameSpaceProvidersEx32(
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpnspBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCEnumNameSpaceProvidersEx32(util.toPointer(lpdwBufferLength), util.toPointer(lpnspBuffer));
}

export function WSCInstallNameSpace(
  lpszIdentifier: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszPathName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwNameSpace: number /* u32 */,
  dwVersion: number /* u32 */,
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCInstallNameSpace(util.pwstrToFfi(lpszIdentifier), util.pwstrToFfi(lpszPathName), dwNameSpace, dwVersion, util.toPointer(lpProviderId));
}

export function WSCInstallNameSpace32(
  lpszIdentifier: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszPathName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwNameSpace: number /* u32 */,
  dwVersion: number /* u32 */,
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCInstallNameSpace32(util.pwstrToFfi(lpszIdentifier), util.pwstrToFfi(lpszPathName), dwNameSpace, dwVersion, util.toPointer(lpProviderId));
}

export function WSCUnInstallNameSpace(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCUnInstallNameSpace(util.toPointer(lpProviderId));
}

export function WSCInstallNameSpaceEx(
  lpszIdentifier: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszPathName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwNameSpace: number /* u32 */,
  dwVersion: number /* u32 */,
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProviderSpecific: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCInstallNameSpaceEx(util.pwstrToFfi(lpszIdentifier), util.pwstrToFfi(lpszPathName), dwNameSpace, dwVersion, util.toPointer(lpProviderId), util.toPointer(lpProviderSpecific));
}

export function WSCInstallNameSpaceEx32(
  lpszIdentifier: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszPathName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwNameSpace: number /* u32 */,
  dwVersion: number /* u32 */,
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProviderSpecific: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCInstallNameSpaceEx32(util.pwstrToFfi(lpszIdentifier), util.pwstrToFfi(lpszPathName), dwNameSpace, dwVersion, util.toPointer(lpProviderId), util.toPointer(lpProviderSpecific));
}

export function WSCUnInstallNameSpace32(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCUnInstallNameSpace32(util.toPointer(lpProviderId));
}

export function WSCEnableNSProvider(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  fEnable: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libWS2_32.WSCEnableNSProvider(util.toPointer(lpProviderId), util.boolToFfi(fEnable));
}

export function WSCEnableNSProvider32(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  fEnable: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* i32 */ {
  return libWS2_32.WSCEnableNSProvider32(util.toPointer(lpProviderId), util.boolToFfi(fEnable));
}

export function WSCInstallProviderAndChains64_32(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpszProviderDllPath: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszProviderDllPath32: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpszLspName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwServiceFlags: number /* u32 */,
  lpProtocolInfoList: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumberOfEntries: number /* u32 */,
  lpdwCatalogEntryId: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpErrno: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSCInstallProviderAndChains64_32(util.toPointer(lpProviderId), util.pwstrToFfi(lpszProviderDllPath), util.pwstrToFfi(lpszProviderDllPath32), util.pwstrToFfi(lpszLspName), dwServiceFlags, util.toPointer(lpProtocolInfoList), dwNumberOfEntries, util.toPointer(lpdwCatalogEntryId), util.toPointer(lpErrno));
}

export function WSAAdvertiseProvider(
  puuidProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  pNSPv2Routine: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAAdvertiseProvider(util.toPointer(puuidProviderId), util.toPointer(pNSPv2Routine));
}

export function WSAUnadvertiseProvider(
  puuidProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.WSAUnadvertiseProvider(util.toPointer(puuidProviderId));
}

export function WSAProviderCompleteAsyncCall(
  hAsyncCall: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  iRetCode: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.WSAProviderCompleteAsyncCall(util.toPointer(hAsyncCall), iRetCode);
}

export function EnumProtocolsA(
  lpiProtocols: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProtocolBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMSWSOCK.EnumProtocolsA(util.toPointer(lpiProtocols), util.toPointer(lpProtocolBuffer), util.toPointer(lpdwBufferLength));
}

export function EnumProtocolsW(
  lpiProtocols: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpProtocolBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMSWSOCK.EnumProtocolsW(util.toPointer(lpiProtocols), util.toPointer(lpProtocolBuffer), util.toPointer(lpdwBufferLength));
}

export function GetAddressByNameA(
  dwNameSpace: number /* u32 */,
  lpServiceType: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpiProtocols: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwResolution: number /* u32 */,
  lpServiceAsyncInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCsaddrBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAliasBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  lpdwAliasBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMSWSOCK.GetAddressByNameA(dwNameSpace, util.toPointer(lpServiceType), util.pstrToFfi(lpServiceName), util.toPointer(lpiProtocols), dwResolution, util.toPointer(lpServiceAsyncInfo), util.toPointer(lpCsaddrBuffer), util.toPointer(lpdwBufferLength), util.pstrToFfi(lpAliasBuffer), util.toPointer(lpdwAliasBufferLength));
}

export function GetAddressByNameW(
  dwNameSpace: number /* u32 */,
  lpServiceType: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpiProtocols: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwResolution: number /* u32 */,
  lpServiceAsyncInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCsaddrBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpAliasBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpdwAliasBufferLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMSWSOCK.GetAddressByNameW(dwNameSpace, util.toPointer(lpServiceType), util.pwstrToFfi(lpServiceName), util.toPointer(lpiProtocols), dwResolution, util.toPointer(lpServiceAsyncInfo), util.toPointer(lpCsaddrBuffer), util.toPointer(lpdwBufferLength), util.pwstrToFfi(lpAliasBuffer), util.toPointer(lpdwAliasBufferLength));
}

export function GetTypeByNameA(
  lpServiceName: string | null /* Windows.Win32.Foundation.PSTR */,
  lpServiceType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMSWSOCK.GetTypeByNameA(util.pstrToFfi(lpServiceName), util.toPointer(lpServiceType));
}

export function GetTypeByNameW(
  lpServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  lpServiceType: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMSWSOCK.GetTypeByNameW(util.pwstrToFfi(lpServiceName), util.toPointer(lpServiceType));
}

export function GetNameByTypeA(
  lpServiceType: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwNameLength: number /* u32 */,
): number /* i32 */ {
  return libMSWSOCK.GetNameByTypeA(util.toPointer(lpServiceType), util.pstrToFfi(lpServiceName), dwNameLength);
}

export function GetNameByTypeW(
  lpServiceType: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwNameLength: number /* u32 */,
): number /* i32 */ {
  return libMSWSOCK.GetNameByTypeW(util.toPointer(lpServiceType), util.pwstrToFfi(lpServiceName), dwNameLength);
}

export function SetServiceA(
  dwNameSpace: number /* u32 */,
  dwOperation: SET_SERVICE_OPERATION /* Windows.Win32.Networking.WinSock.SET_SERVICE_OPERATION */,
  dwFlags: number /* u32 */,
  lpServiceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceAsyncInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwStatusFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMSWSOCK.SetServiceA(dwNameSpace, dwOperation, dwFlags, util.toPointer(lpServiceInfo), util.toPointer(lpServiceAsyncInfo), util.toPointer(lpdwStatusFlags));
}

export function SetServiceW(
  dwNameSpace: number /* u32 */,
  dwOperation: SET_SERVICE_OPERATION /* Windows.Win32.Networking.WinSock.SET_SERVICE_OPERATION */,
  dwFlags: number /* u32 */,
  lpServiceInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceAsyncInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwStatusFlags: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMSWSOCK.SetServiceW(dwNameSpace, dwOperation, dwFlags, util.toPointer(lpServiceInfo), util.toPointer(lpServiceAsyncInfo), util.toPointer(lpdwStatusFlags));
}

export function GetServiceA(
  dwNameSpace: number /* u32 */,
  lpGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwProperties: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceAsyncInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMSWSOCK.GetServiceA(dwNameSpace, util.toPointer(lpGuid), util.pstrToFfi(lpServiceName), dwProperties, util.toPointer(lpBuffer), util.toPointer(lpdwBufferSize), util.toPointer(lpServiceAsyncInfo));
}

export function GetServiceW(
  dwNameSpace: number /* u32 */,
  lpGuid: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwProperties: number /* u32 */,
  lpBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpdwBufferSize: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpServiceAsyncInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libMSWSOCK.GetServiceW(dwNameSpace, util.toPointer(lpGuid), util.pwstrToFfi(lpServiceName), dwProperties, util.toPointer(lpBuffer), util.toPointer(lpdwBufferSize), util.toPointer(lpServiceAsyncInfo));
}

export function getaddrinfo(
  pNodeName: string | null /* Windows.Win32.Foundation.PSTR */,
  pServiceName: string | null /* Windows.Win32.Foundation.PSTR */,
  pHints: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.getaddrinfo(util.pstrToFfi(pNodeName), util.pstrToFfi(pServiceName), util.toPointer(pHints), util.toPointer(ppResult));
}

export function GetAddrInfoW(
  pNodeName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pHints: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppResult: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.GetAddrInfoW(util.pwstrToFfi(pNodeName), util.pwstrToFfi(pServiceName), util.toPointer(pHints), util.toPointer(ppResult));
}

export function GetAddrInfoExA(
  pName: string | null /* Windows.Win32.Foundation.PSTR */,
  pServiceName: string | null /* Windows.Win32.Foundation.PSTR */,
  dwNameSpace: number /* u32 */,
  lpNspId: Deno.PointerValue | Uint8Array | null /* ptr */,
  hints: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppResult: Deno.PointerValue | Uint8Array | null /* ptr */,
  timeout: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPLOOKUPSERVICE_COMPLETION_ROUTINE */,
  lpNameHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.GetAddrInfoExA(util.pstrToFfi(pName), util.pstrToFfi(pServiceName), dwNameSpace, util.toPointer(lpNspId), util.toPointer(hints), util.toPointer(ppResult), util.toPointer(timeout), util.toPointer(lpOverlapped), util.toPointer(lpCompletionRoutine), util.toPointer(lpNameHandle));
}

export function GetAddrInfoExW(
  pName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  dwNameSpace: number /* u32 */,
  lpNspId: Deno.PointerValue | Uint8Array | null /* ptr */,
  hints: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppResult: Deno.PointerValue | Uint8Array | null /* ptr */,
  timeout: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPLOOKUPSERVICE_COMPLETION_ROUTINE */,
  lpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.GetAddrInfoExW(util.pwstrToFfi(pName), util.pwstrToFfi(pServiceName), dwNameSpace, util.toPointer(lpNspId), util.toPointer(hints), util.toPointer(ppResult), util.toPointer(timeout), util.toPointer(lpOverlapped), util.toPointer(lpCompletionRoutine), util.toPointer(lpHandle));
}

export function GetAddrInfoExCancel(
  lpHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.GetAddrInfoExCancel(util.toPointer(lpHandle));
}

export function GetAddrInfoExOverlappedResult(
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.GetAddrInfoExOverlappedResult(util.toPointer(lpOverlapped));
}

export function SetAddrInfoExA(
  pName: string | null /* Windows.Win32.Foundation.PSTR */,
  pServiceName: string | null /* Windows.Win32.Foundation.PSTR */,
  pAddresses: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAddressCount: number /* u32 */,
  lpBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwNameSpace: number /* u32 */,
  lpNspId: Deno.PointerValue | Uint8Array | null /* ptr */,
  timeout: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPLOOKUPSERVICE_COMPLETION_ROUTINE */,
  lpNameHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.SetAddrInfoExA(util.pstrToFfi(pName), util.pstrToFfi(pServiceName), util.toPointer(pAddresses), dwAddressCount, util.toPointer(lpBlob), dwFlags, dwNameSpace, util.toPointer(lpNspId), util.toPointer(timeout), util.toPointer(lpOverlapped), util.toPointer(lpCompletionRoutine), util.toPointer(lpNameHandle));
}

export function SetAddrInfoExW(
  pName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pServiceName: string | null /* Windows.Win32.Foundation.PWSTR */,
  pAddresses: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwAddressCount: number /* u32 */,
  lpBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwFlags: number /* u32 */,
  dwNameSpace: number /* u32 */,
  lpNspId: Deno.PointerValue | Uint8Array | null /* ptr */,
  timeout: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  lpCompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPLOOKUPSERVICE_COMPLETION_ROUTINE */,
  lpNameHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.SetAddrInfoExW(util.pwstrToFfi(pName), util.pwstrToFfi(pServiceName), util.toPointer(pAddresses), dwAddressCount, util.toPointer(lpBlob), dwFlags, dwNameSpace, util.toPointer(lpNspId), util.toPointer(timeout), util.toPointer(lpOverlapped), util.toPointer(lpCompletionRoutine), util.toPointer(lpNameHandle));
}

export function freeaddrinfo(
  pAddrInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libWS2_32.freeaddrinfo(util.toPointer(pAddrInfo));
}

export function FreeAddrInfoW(
  pAddrInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libWS2_32.FreeAddrInfoW(util.toPointer(pAddrInfo));
}

export function FreeAddrInfoEx(
  pAddrInfoEx: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libWS2_32.FreeAddrInfoEx(util.toPointer(pAddrInfoEx));
}

export function FreeAddrInfoExW(
  pAddrInfoEx: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libWS2_32.FreeAddrInfoExW(util.toPointer(pAddrInfoEx));
}

export function getnameinfo(
  pSockaddr: Deno.PointerValue | Uint8Array | null /* ptr */,
  SockaddrLength: number /* i32 */,
  pNodeBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  NodeBufferSize: number /* u32 */,
  pServiceBuffer: string | null /* Windows.Win32.Foundation.PSTR */,
  ServiceBufferSize: number /* u32 */,
  Flags: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.getnameinfo(util.toPointer(pSockaddr), SockaddrLength, util.pstrToFfi(pNodeBuffer), NodeBufferSize, util.pstrToFfi(pServiceBuffer), ServiceBufferSize, Flags);
}

export function GetNameInfoW(
  pSockaddr: Deno.PointerValue | Uint8Array | null /* ptr */,
  SockaddrLength: number /* i32 */,
  pNodeBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  NodeBufferSize: number /* u32 */,
  pServiceBuffer: string | null /* Windows.Win32.Foundation.PWSTR */,
  ServiceBufferSize: number /* u32 */,
  Flags: number /* i32 */,
): number /* i32 */ {
  return libWS2_32.GetNameInfoW(util.toPointer(pSockaddr), SockaddrLength, util.pwstrToFfi(pNodeBuffer), NodeBufferSize, util.pwstrToFfi(pServiceBuffer), ServiceBufferSize, Flags);
}

export function inet_pton(
  Family: number /* i32 */,
  pszAddrString: string | null /* Windows.Win32.Foundation.PSTR */,
  pAddrBuf: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.inet_pton(Family, util.pstrToFfi(pszAddrString), util.toPointer(pAddrBuf));
}

export function InetPtonW(
  Family: number /* i32 */,
  pszAddrString: string | null /* Windows.Win32.Foundation.PWSTR */,
  pAddrBuf: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* i32 */ {
  return libWS2_32.InetPtonW(Family, util.pwstrToFfi(pszAddrString), util.toPointer(pAddrBuf));
}

export function inet_ntop(
  Family: number /* i32 */,
  pAddr: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStringBuf: string | null /* Windows.Win32.Foundation.PSTR */,
  StringBufSize: Deno.PointerValue /* usize */,
): string | null /* Windows.Win32.Foundation.PSTR */ {
  return util.pstrFromFfi(libWS2_32.inet_ntop(Family, util.toPointer(pAddr), util.pstrToFfi(pStringBuf), StringBufSize));
}

export function InetNtopW(
  Family: number /* i32 */,
  pAddr: Deno.PointerValue | Uint8Array | null /* ptr */,
  pStringBuf: string | null /* Windows.Win32.Foundation.PWSTR */,
  StringBufSize: Deno.PointerValue /* usize */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libWS2_32.InetNtopW(Family, util.toPointer(pAddr), util.pwstrToFfi(pStringBuf), StringBufSize));
}

export function WSASetSocketSecurity(
  Socket: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  SecuritySettings: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecuritySettingsLen: number /* u32 */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  CompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPWSAOVERLAPPED_COMPLETION_ROUTINE */,
): number /* i32 */ {
  return libfwpuclnt.WSASetSocketSecurity(util.toPointer(Socket), util.toPointer(SecuritySettings), SecuritySettingsLen, util.toPointer(Overlapped), util.toPointer(CompletionRoutine));
}

export function WSAQuerySocketSecurity(
  Socket: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  SecurityQueryTemplate: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityQueryTemplateLen: number /* u32 */,
  SecurityQueryInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  SecurityQueryInfoLen: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  CompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPWSAOVERLAPPED_COMPLETION_ROUTINE */,
): number /* i32 */ {
  return libfwpuclnt.WSAQuerySocketSecurity(util.toPointer(Socket), util.toPointer(SecurityQueryTemplate), SecurityQueryTemplateLen, util.toPointer(SecurityQueryInfo), util.toPointer(SecurityQueryInfoLen), util.toPointer(Overlapped), util.toPointer(CompletionRoutine));
}

export function WSASetSocketPeerTargetName(
  Socket: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  PeerTargetName: Deno.PointerValue | Uint8Array | null /* ptr */,
  PeerTargetNameLen: number /* u32 */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  CompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPWSAOVERLAPPED_COMPLETION_ROUTINE */,
): number /* i32 */ {
  return libfwpuclnt.WSASetSocketPeerTargetName(util.toPointer(Socket), util.toPointer(PeerTargetName), PeerTargetNameLen, util.toPointer(Overlapped), util.toPointer(CompletionRoutine));
}

export function WSADeleteSocketPeerTargetName(
  Socket: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  PeerAddr: Deno.PointerValue | Uint8Array | null /* ptr */,
  PeerAddrLen: number /* u32 */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  CompletionRoutine: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.LPWSAOVERLAPPED_COMPLETION_ROUTINE */,
): number /* i32 */ {
  return libfwpuclnt.WSADeleteSocketPeerTargetName(util.toPointer(Socket), util.toPointer(PeerAddr), PeerAddrLen, util.toPointer(Overlapped), util.toPointer(CompletionRoutine));
}

export function WSAImpersonateSocketPeer(
  Socket: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.WinSock.SOCKET */,
  PeerAddr: Deno.PointerValue | Uint8Array | null /* ptr */,
  PeerAddrLen: number /* u32 */,
): number /* i32 */ {
  return libfwpuclnt.WSAImpersonateSocketPeer(util.toPointer(Socket), util.toPointer(PeerAddr), PeerAddrLen);
}

export function WSARevertImpersonation(): number /* i32 */ {
  return libfwpuclnt.WSARevertImpersonation();
}

export function SetSocketMediaStreamingMode(
  value: boolean /* Windows.Win32.Foundation.BOOL */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libWindows_Networking.SetSocketMediaStreamingMode(util.boolToFfi(value)));
}

export function WSCWriteProviderOrder(
  lpwdCatalogEntryId: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumberOfEntries: number /* u32 */,
): number /* i32 */ {
  return libWS2_32.WSCWriteProviderOrder(util.toPointer(lpwdCatalogEntryId), dwNumberOfEntries);
}

export function WSCWriteProviderOrder32(
  lpwdCatalogEntryId: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumberOfEntries: number /* u32 */,
): number /* i32 */ {
  return libWS2_32.WSCWriteProviderOrder32(util.toPointer(lpwdCatalogEntryId), dwNumberOfEntries);
}

export function WSCWriteNameSpaceOrder(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumberOfEntries: number /* u32 */,
): number /* i32 */ {
  return libWS2_32.WSCWriteNameSpaceOrder(util.toPointer(lpProviderId), dwNumberOfEntries);
}

export function WSCWriteNameSpaceOrder32(
  lpProviderId: Deno.PointerValue | Uint8Array | null /* ptr */,
  dwNumberOfEntries: number /* u32 */,
): number /* i32 */ {
  return libWS2_32.WSCWriteNameSpaceOrder32(util.toPointer(lpProviderId), dwNumberOfEntries);
}

