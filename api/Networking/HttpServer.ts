/// Auto-generated by Deno Win32: Windows.Win32.Networking.HttpServer.Apis

import * as util from "../../util.ts";

// Enums
export type HTTP_RECEIVE_HTTP_REQUEST_FLAGS = number;
export type HTTP_INITIALIZE = number;
export type HTTP_SERVER_PROPERTY = number;
export type HTTP_ENABLED_STATE = number;
export type HTTP_503_RESPONSE_VERBOSITY = number;
export type HTTP_QOS_SETTING_TYPE = number;
export type HTTP_SERVICE_CONFIG_TIMEOUT_KEY = number;
export type HTTP_SERVICE_CONFIG_SETTING_KEY = number;
export type HTTP_SERVICE_BINDING_TYPE = number;
export type HTTP_AUTHENTICATION_HARDENING_LEVELS = number;
export type HTTP_LOGGING_TYPE = number;
export type HTTP_LOGGING_ROLLOVER_TYPE = number;
export type HTTP_PROTECTION_LEVEL_TYPE = number;
export type HTTP_SCHEME = number;
export type HTTP_VERB = number;
export type HTTP_HEADER_ID = number;
export type HTTP_LOG_DATA_TYPE = number;
export type HTTP_DATA_CHUNK_TYPE = number;
export type HTTP_DELEGATE_REQUEST_PROPERTY_ID = number;
export type HTTP_CREATE_REQUEST_QUEUE_PROPERTY_ID = number;
export type HTTP_AUTH_STATUS = number;
export type HTTP_REQUEST_AUTH_TYPE = number;
export type HTTP_REQUEST_SIZING_TYPE = number;
export type HTTP_REQUEST_TIMING_TYPE = number;
export type HTTP_REQUEST_INFO_TYPE = number;
export type HTTP_RESPONSE_INFO_TYPE = number;
export type HTTP_CACHE_POLICY_TYPE = number;
export type HTTP_SERVICE_CONFIG_ID = number;
export type HTTP_SERVICE_CONFIG_QUERY_TYPE = number;
export type HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE = number;
export type HTTP_PERFORMANCE_PARAM_TYPE = number;
export type HTTP_SERVICE_CONFIG_CACHE_KEY = number;
export type HTTP_REQUEST_PROPERTY = number;
export type HTTP_FEATURE_ID = number;

// Constants
export const HTTP_RECEIVE_REQUEST_FLAG_COPY_BODY = 1;
export const HTTP_RECEIVE_REQUEST_FLAG_FLUSH_BODY = 2;
export const HTTP_INITIALIZE_CONFIG = 2;
export const HTTP_INITIALIZE_SERVER = 1;
export const HTTP_DEMAND_CBT = 4;
export const HTTP_MAX_SERVER_QUEUE_LENGTH = 2147483647;
export const HTTP_MIN_SERVER_QUEUE_LENGTH = 1;
export const HTTP_AUTH_ENABLE_BASIC = 1;
export const HTTP_AUTH_ENABLE_DIGEST = 2;
export const HTTP_AUTH_ENABLE_NTLM = 4;
export const HTTP_AUTH_ENABLE_NEGOTIATE = 8;
export const HTTP_AUTH_ENABLE_KERBEROS = 16;
export const HTTP_AUTH_EX_FLAG_ENABLE_KERBEROS_CREDENTIAL_CACHING = 1;
export const HTTP_AUTH_EX_FLAG_CAPTURE_CREDENTIAL = 2;
export const HTTP_CHANNEL_BIND_PROXY = 1;
export const HTTP_CHANNEL_BIND_PROXY_COHOSTING = 32;
export const HTTP_CHANNEL_BIND_NO_SERVICE_NAME_CHECK = 2;
export const HTTP_CHANNEL_BIND_DOTLESS_SERVICE = 4;
export const HTTP_CHANNEL_BIND_SECURE_CHANNEL_TOKEN = 8;
export const HTTP_CHANNEL_BIND_CLIENT_SERVICE = 16;
export const HTTP_LOG_FIELD_DATE = 1;
export const HTTP_LOG_FIELD_TIME = 2;
export const HTTP_LOG_FIELD_CLIENT_IP = 4;
export const HTTP_LOG_FIELD_USER_NAME = 8;
export const HTTP_LOG_FIELD_SITE_NAME = 16;
export const HTTP_LOG_FIELD_COMPUTER_NAME = 32;
export const HTTP_LOG_FIELD_SERVER_IP = 64;
export const HTTP_LOG_FIELD_METHOD = 128;
export const HTTP_LOG_FIELD_URI_STEM = 256;
export const HTTP_LOG_FIELD_URI_QUERY = 512;
export const HTTP_LOG_FIELD_STATUS = 1024;
export const HTTP_LOG_FIELD_WIN32_STATUS = 2048;
export const HTTP_LOG_FIELD_BYTES_SENT = 4096;
export const HTTP_LOG_FIELD_BYTES_RECV = 8192;
export const HTTP_LOG_FIELD_TIME_TAKEN = 16384;
export const HTTP_LOG_FIELD_SERVER_PORT = 32768;
export const HTTP_LOG_FIELD_USER_AGENT = 65536;
export const HTTP_LOG_FIELD_COOKIE = 131072;
export const HTTP_LOG_FIELD_REFERER = 262144;
export const HTTP_LOG_FIELD_VERSION = 524288;
export const HTTP_LOG_FIELD_HOST = 1048576;
export const HTTP_LOG_FIELD_SUB_STATUS = 2097152;
export const HTTP_LOG_FIELD_STREAM_ID = 134217728;
export const HTTP_LOG_FIELD_STREAM_ID_EX = 268435456;
export const HTTP_LOG_FIELD_TRANSPORT_TYPE = 536870912;
export const HTTP_LOG_FIELD_CLIENT_PORT = 4194304;
export const HTTP_LOG_FIELD_URI = 8388608;
export const HTTP_LOG_FIELD_SITE_ID = 16777216;
export const HTTP_LOG_FIELD_REASON = 33554432;
export const HTTP_LOG_FIELD_QUEUE_NAME = 67108864;
export const HTTP_LOG_FIELD_CORRELATION_ID = 1073741824;
export const HTTP_LOGGING_FLAG_LOCAL_TIME_ROLLOVER = 1;
export const HTTP_LOGGING_FLAG_USE_UTF8_CONVERSION = 2;
export const HTTP_LOGGING_FLAG_LOG_ERRORS_ONLY = 4;
export const HTTP_LOGGING_FLAG_LOG_SUCCESS_ONLY = 8;
export const HTTP_CREATE_REQUEST_QUEUE_FLAG_OPEN_EXISTING = 1;
export const HTTP_CREATE_REQUEST_QUEUE_FLAG_CONTROLLER = 2;
export const HTTP_CREATE_REQUEST_QUEUE_FLAG_DELEGATION = 8;
export const HTTP_RECEIVE_REQUEST_ENTITY_BODY_FLAG_FILL_BUFFER = 1;
export const HTTP_SEND_RESPONSE_FLAG_DISCONNECT = 1;
export const HTTP_SEND_RESPONSE_FLAG_MORE_DATA = 2;
export const HTTP_SEND_RESPONSE_FLAG_BUFFER_DATA = 4;
export const HTTP_SEND_RESPONSE_FLAG_ENABLE_NAGLING = 8;
export const HTTP_SEND_RESPONSE_FLAG_PROCESS_RANGES = 32;
export const HTTP_SEND_RESPONSE_FLAG_OPAQUE = 64;
export const HTTP_SEND_RESPONSE_FLAG_GOAWAY = 256;
export const HTTP_FLUSH_RESPONSE_FLAG_RECURSIVE = 1;
export const HTTP_URL_FLAG_REMOVE_ALL = 1;
export const HTTP_RECEIVE_SECURE_CHANNEL_TOKEN = 1;
export const HTTP_RECEIVE_FULL_CHAIN = 2;
export const HTTP_REQUEST_SIZING_INFO_FLAG_TCP_FAST_OPEN = 1;
export const HTTP_REQUEST_SIZING_INFO_FLAG_TLS_SESSION_RESUMPTION = 2;
export const HTTP_REQUEST_SIZING_INFO_FLAG_TLS_FALSE_START = 4;
export const HTTP_REQUEST_SIZING_INFO_FLAG_FIRST_REQUEST = 8;
export const HTTP_REQUEST_AUTH_FLAG_TOKEN_FOR_CACHED_CRED = 1;
export const HTTP_REQUEST_FLAG_MORE_ENTITY_BODY_EXISTS = 1;
export const HTTP_REQUEST_FLAG_IP_ROUTED = 2;
export const HTTP_REQUEST_FLAG_HTTP2 = 4;
export const HTTP_REQUEST_FLAG_HTTP3 = 8;
export const HTTP_RESPONSE_FLAG_MULTIPLE_ENCODINGS_AVAILABLE = 1;
export const HTTP_RESPONSE_FLAG_MORE_ENTITY_BODY_EXISTS = 2;
export const HTTP_RESPONSE_INFO_FLAGS_PRESERVE_ORDER = 1;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_USE_DS_MAPPER = 1;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_NEGOTIATE_CLIENT_CERT = 2;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_NO_RAW_FILTER = 4;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_REJECT = 8;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_HTTP2 = 16;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_QUIC = 32;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_TLS13 = 64;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_OCSP_STAPLING = 128;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_ENABLE_TOKEN_BINDING = 256;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_LOG_EXTENDED_EVENTS = 512;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_LEGACY_TLS = 1024;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_ENABLE_SESSION_TICKET = 2048;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_TLS12 = 4096;
export const HTTP_SERVICE_CONFIG_SSL_FLAG_ENABLE_CLIENT_CORRELATION = 8192;
export const HTTP_REQUEST_PROPERTY_SNI_HOST_MAX_LENGTH = 255;
export const HTTP_REQUEST_PROPERTY_SNI_FLAG_SNI_USED = 1;
export const HTTP_REQUEST_PROPERTY_SNI_FLAG_NO_SNI = 2;
export const HTTP_VERSION = `HTTP/1.0`;
export const HttpServerAuthenticationProperty = 0;
export const HttpServerLoggingProperty = 1;
export const HttpServerQosProperty = 2;
export const HttpServerTimeoutsProperty = 3;
export const HttpServerQueueLengthProperty = 4;
export const HttpServerStateProperty = 5;
export const HttpServer503VerbosityProperty = 6;
export const HttpServerBindingProperty = 7;
export const HttpServerExtendedAuthenticationProperty = 8;
export const HttpServerListenEndpointProperty = 9;
export const HttpServerChannelBindProperty = 10;
export const HttpServerProtectionLevelProperty = 11;
export const HttpServerDelegationProperty = 16;
export const HttpEnabledStateActive = 0;
export const HttpEnabledStateInactive = 1;
export const Http503ResponseVerbosityBasic = 0;
export const Http503ResponseVerbosityLimited = 1;
export const Http503ResponseVerbosityFull = 2;
export const HttpQosSettingTypeBandwidth = 0;
export const HttpQosSettingTypeConnectionLimit = 1;
export const HttpQosSettingTypeFlowRate = 2;
export const IdleConnectionTimeout = 0;
export const HeaderWaitTimeout = 1;
export const HttpNone = 0;
export const HttpTlsThrottle = 1;
export const HttpServiceBindingTypeNone = 0;
export const HttpServiceBindingTypeW = 1;
export const HttpServiceBindingTypeA = 2;
export const HttpAuthenticationHardeningLegacy = 0;
export const HttpAuthenticationHardeningMedium = 1;
export const HttpAuthenticationHardeningStrict = 2;
export const HttpLoggingTypeW3C = 0;
export const HttpLoggingTypeIIS = 1;
export const HttpLoggingTypeNCSA = 2;
export const HttpLoggingTypeRaw = 3;
export const HttpLoggingRolloverSize = 0;
export const HttpLoggingRolloverDaily = 1;
export const HttpLoggingRolloverWeekly = 2;
export const HttpLoggingRolloverMonthly = 3;
export const HttpLoggingRolloverHourly = 4;
export const HttpProtectionLevelUnrestricted = 0;
export const HttpProtectionLevelEdgeRestricted = 1;
export const HttpProtectionLevelRestricted = 2;
export const HttpSchemeHttp = 0;
export const HttpSchemeHttps = 1;
export const HttpSchemeMaximum = 2;
export const HttpVerbUnparsed = 0;
export const HttpVerbUnknown = 1;
export const HttpVerbInvalid = 2;
export const HttpVerbOPTIONS = 3;
export const HttpVerbGET = 4;
export const HttpVerbHEAD = 5;
export const HttpVerbPOST = 6;
export const HttpVerbPUT = 7;
export const HttpVerbDELETE = 8;
export const HttpVerbTRACE = 9;
export const HttpVerbCONNECT = 10;
export const HttpVerbTRACK = 11;
export const HttpVerbMOVE = 12;
export const HttpVerbCOPY = 13;
export const HttpVerbPROPFIND = 14;
export const HttpVerbPROPPATCH = 15;
export const HttpVerbMKCOL = 16;
export const HttpVerbLOCK = 17;
export const HttpVerbUNLOCK = 18;
export const HttpVerbSEARCH = 19;
export const HttpVerbMaximum = 20;
export const HttpHeaderCacheControl = 0;
export const HttpHeaderConnection = 1;
export const HttpHeaderDate = 2;
export const HttpHeaderKeepAlive = 3;
export const HttpHeaderPragma = 4;
export const HttpHeaderTrailer = 5;
export const HttpHeaderTransferEncoding = 6;
export const HttpHeaderUpgrade = 7;
export const HttpHeaderVia = 8;
export const HttpHeaderWarning = 9;
export const HttpHeaderAllow = 10;
export const HttpHeaderContentLength = 11;
export const HttpHeaderContentType = 12;
export const HttpHeaderContentEncoding = 13;
export const HttpHeaderContentLanguage = 14;
export const HttpHeaderContentLocation = 15;
export const HttpHeaderContentMd5 = 16;
export const HttpHeaderContentRange = 17;
export const HttpHeaderExpires = 18;
export const HttpHeaderLastModified = 19;
export const HttpHeaderAccept = 20;
export const HttpHeaderAcceptCharset = 21;
export const HttpHeaderAcceptEncoding = 22;
export const HttpHeaderAcceptLanguage = 23;
export const HttpHeaderAuthorization = 24;
export const HttpHeaderCookie = 25;
export const HttpHeaderExpect = 26;
export const HttpHeaderFrom = 27;
export const HttpHeaderHost = 28;
export const HttpHeaderIfMatch = 29;
export const HttpHeaderIfModifiedSince = 30;
export const HttpHeaderIfNoneMatch = 31;
export const HttpHeaderIfRange = 32;
export const HttpHeaderIfUnmodifiedSince = 33;
export const HttpHeaderMaxForwards = 34;
export const HttpHeaderProxyAuthorization = 35;
export const HttpHeaderReferer = 36;
export const HttpHeaderRange = 37;
export const HttpHeaderTe = 38;
export const HttpHeaderTranslate = 39;
export const HttpHeaderUserAgent = 40;
export const HttpHeaderRequestMaximum = 41;
export const HttpHeaderAcceptRanges = 20;
export const HttpHeaderAge = 21;
export const HttpHeaderEtag = 22;
export const HttpHeaderLocation = 23;
export const HttpHeaderProxyAuthenticate = 24;
export const HttpHeaderRetryAfter = 25;
export const HttpHeaderServer = 26;
export const HttpHeaderSetCookie = 27;
export const HttpHeaderVary = 28;
export const HttpHeaderWwwAuthenticate = 29;
export const HttpHeaderResponseMaximum = 30;
export const HttpHeaderMaximum = 41;
export const HttpLogDataTypeFields = 0;
export const HttpDataChunkFromMemory = 0;
export const HttpDataChunkFromFileHandle = 1;
export const HttpDataChunkFromFragmentCache = 2;
export const HttpDataChunkFromFragmentCacheEx = 3;
export const HttpDataChunkTrailers = 4;
export const HttpDataChunkMaximum = 5;
export const DelegateRequestReservedProperty = 0;
export const DelegateRequestDelegateUrlProperty = 1;
export const CreateRequestQueueExternalIdProperty = 1;
export const CreateRequestQueueMax = 2;
export const HttpAuthStatusSuccess = 0;
export const HttpAuthStatusNotAuthenticated = 1;
export const HttpAuthStatusFailure = 2;
export const HttpRequestAuthTypeNone = 0;
export const HttpRequestAuthTypeBasic = 1;
export const HttpRequestAuthTypeDigest = 2;
export const HttpRequestAuthTypeNTLM = 3;
export const HttpRequestAuthTypeNegotiate = 4;
export const HttpRequestAuthTypeKerberos = 5;
export const HttpRequestSizingTypeTlsHandshakeLeg1ClientData = 0;
export const HttpRequestSizingTypeTlsHandshakeLeg1ServerData = 1;
export const HttpRequestSizingTypeTlsHandshakeLeg2ClientData = 2;
export const HttpRequestSizingTypeTlsHandshakeLeg2ServerData = 3;
export const HttpRequestSizingTypeHeaders = 4;
export const HttpRequestSizingTypeMax = 5;
export const HttpRequestTimingTypeConnectionStart = 0;
export const HttpRequestTimingTypeDataStart = 1;
export const HttpRequestTimingTypeTlsCertificateLoadStart = 2;
export const HttpRequestTimingTypeTlsCertificateLoadEnd = 3;
export const HttpRequestTimingTypeTlsHandshakeLeg1Start = 4;
export const HttpRequestTimingTypeTlsHandshakeLeg1End = 5;
export const HttpRequestTimingTypeTlsHandshakeLeg2Start = 6;
export const HttpRequestTimingTypeTlsHandshakeLeg2End = 7;
export const HttpRequestTimingTypeTlsAttributesQueryStart = 8;
export const HttpRequestTimingTypeTlsAttributesQueryEnd = 9;
export const HttpRequestTimingTypeTlsClientCertQueryStart = 10;
export const HttpRequestTimingTypeTlsClientCertQueryEnd = 11;
export const HttpRequestTimingTypeHttp2StreamStart = 12;
export const HttpRequestTimingTypeHttp2HeaderDecodeStart = 13;
export const HttpRequestTimingTypeHttp2HeaderDecodeEnd = 14;
export const HttpRequestTimingTypeRequestHeaderParseStart = 15;
export const HttpRequestTimingTypeRequestHeaderParseEnd = 16;
export const HttpRequestTimingTypeRequestRoutingStart = 17;
export const HttpRequestTimingTypeRequestRoutingEnd = 18;
export const HttpRequestTimingTypeRequestQueuedForInspection = 19;
export const HttpRequestTimingTypeRequestDeliveredForInspection = 20;
export const HttpRequestTimingTypeRequestReturnedAfterInspection = 21;
export const HttpRequestTimingTypeRequestQueuedForDelegation = 22;
export const HttpRequestTimingTypeRequestDeliveredForDelegation = 23;
export const HttpRequestTimingTypeRequestReturnedAfterDelegation = 24;
export const HttpRequestTimingTypeRequestQueuedForIO = 25;
export const HttpRequestTimingTypeRequestDeliveredForIO = 26;
export const HttpRequestTimingTypeHttp3StreamStart = 27;
export const HttpRequestTimingTypeHttp3HeaderDecodeStart = 28;
export const HttpRequestTimingTypeHttp3HeaderDecodeEnd = 29;
export const HttpRequestTimingTypeMax = 30;
export const HttpRequestInfoTypeAuth = 0;
export const HttpRequestInfoTypeChannelBind = 1;
export const HttpRequestInfoTypeSslProtocol = 2;
export const HttpRequestInfoTypeSslTokenBindingDraft = 3;
export const HttpRequestInfoTypeSslTokenBinding = 4;
export const HttpRequestInfoTypeRequestTiming = 5;
export const HttpRequestInfoTypeTcpInfoV0 = 6;
export const HttpRequestInfoTypeRequestSizing = 7;
export const HttpRequestInfoTypeQuicStats = 8;
export const HttpRequestInfoTypeTcpInfoV1 = 9;
export const HttpResponseInfoTypeMultipleKnownHeaders = 0;
export const HttpResponseInfoTypeAuthenticationProperty = 1;
export const HttpResponseInfoTypeQoSProperty = 2;
export const HttpResponseInfoTypeChannelBind = 3;
export const HttpCachePolicyNocache = 0;
export const HttpCachePolicyUserInvalidates = 1;
export const HttpCachePolicyTimeToLive = 2;
export const HttpCachePolicyMaximum = 3;
export const HttpServiceConfigIPListenList = 0;
export const HttpServiceConfigSSLCertInfo = 1;
export const HttpServiceConfigUrlAclInfo = 2;
export const HttpServiceConfigTimeout = 3;
export const HttpServiceConfigCache = 4;
export const HttpServiceConfigSslSniCertInfo = 5;
export const HttpServiceConfigSslCcsCertInfo = 6;
export const HttpServiceConfigSetting = 7;
export const HttpServiceConfigSslCertInfoEx = 8;
export const HttpServiceConfigSslSniCertInfoEx = 9;
export const HttpServiceConfigSslCcsCertInfoEx = 10;
export const HttpServiceConfigSslScopedCcsCertInfo = 11;
export const HttpServiceConfigSslScopedCcsCertInfoEx = 12;
export const HttpServiceConfigMax = 13;
export const HttpServiceConfigQueryExact = 0;
export const HttpServiceConfigQueryNext = 1;
export const HttpServiceConfigQueryMax = 2;
export const ExParamTypeHttp2Window = 0;
export const ExParamTypeHttp2SettingsLimits = 1;
export const ExParamTypeHttpPerformance = 2;
export const ExParamTypeTlsRestrictions = 3;
export const ExParamTypeErrorHeaders = 4;
export const ExParamTypeTlsSessionTicketKeys = 5;
export const ExParamTypeMax = 6;
export const PerformanceParamSendBufferingFlags = 0;
export const PerformanceParamAggressiveICW = 1;
export const PerformanceParamMaxSendBufferSize = 2;
export const PerformanceParamMaxConcurrentClientStreams = 3;
export const PerformanceParamMaxReceiveBufferSize = 4;
export const PerformanceParamDecryptOnSspiThread = 5;
export const PerformanceParamMax = 6;
export const MaxCacheResponseSize = 0;
export const CacheRangeChunkSize = 1;
export const HttpRequestPropertyIsb = 0;
export const HttpRequestPropertyTcpInfoV0 = 1;
export const HttpRequestPropertyQuicStats = 2;
export const HttpRequestPropertyTcpInfoV1 = 3;
export const HttpRequestPropertySni = 4;
export const HttpRequestPropertyStreamError = 5;
export const HttpRequestPropertyWskApiTimings = 6;
export const HttpRequestPropertyQuicApiTimings = 7;
export const HttpFeatureUnknown = 0;
export const HttpFeatureResponseTrailers = 1;
export const HttpFeatureApiTimings = 2;
export const HttpFeatureDelegateEx = 3;
export const HttpFeatureHttp3 = 4;
export const HttpFeaturemax = `-1`;

// Structs

/**
 * Windows.Win32.Networking.HttpServer.HTTP_PROPERTY_FLAGS (size: 8)
 */
export interface HTTP_PROPERTY_FLAGS {
  /** u32 */
  _bitfield: number;
}

export const sizeofHTTP_PROPERTY_FLAGS = 8;

export function allocHTTP_PROPERTY_FLAGS(data?: Partial<HTTP_PROPERTY_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_PROPERTY_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?._bitfield !== undefined) view.setUint32(0, Number(data._bitfield), true);
  // 0x04: pad4
  return buf;
}

export class HTTP_PROPERTY_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get _bitfield(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set _bitfield(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_STATE_INFO (size: 16)
 */
export interface HTTP_STATE_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_PROPERTY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_ENABLED_STATE */
  State: HTTP_ENABLED_STATE;
}

export const sizeofHTTP_STATE_INFO = 16;

export function allocHTTP_STATE_INFO(data?: Partial<HTTP_STATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_STATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: i32
  if (data?.State !== undefined) view.setInt32(8, Number(data.State), true);
  // 0x0c: pad4
  return buf;
}

export class HTTP_STATE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get State(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set State(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_QOS_SETTING_INFO (size: 16)
 */
export interface HTTP_QOS_SETTING_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_QOS_SETTING_TYPE */
  QosType: HTTP_QOS_SETTING_TYPE;
  /** ptr */
  QosSetting: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_QOS_SETTING_INFO = 16;

export function allocHTTP_QOS_SETTING_INFO(data?: Partial<HTTP_QOS_SETTING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_QOS_SETTING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.QosType !== undefined) view.setInt32(0, Number(data.QosType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.QosSetting !== undefined) view.setBigUint64(8, data.QosSetting === null ? 0n : BigInt(util.toPointer(data.QosSetting)), true);
  return buf;
}

export class HTTP_QOS_SETTING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get QosType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get QosSetting(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set QosType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set QosSetting(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_CONNECTION_LIMIT_INFO (size: 16)
 */
export interface HTTP_CONNECTION_LIMIT_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_PROPERTY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaxConnections: number;
}

export const sizeofHTTP_CONNECTION_LIMIT_INFO = 16;

export function allocHTTP_CONNECTION_LIMIT_INFO(data?: Partial<HTTP_CONNECTION_LIMIT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_CONNECTION_LIMIT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: u32
  if (data?.MaxConnections !== undefined) view.setUint32(8, Number(data.MaxConnections), true);
  // 0x0c: pad4
  return buf;
}

export class HTTP_CONNECTION_LIMIT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get MaxConnections(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set MaxConnections(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_BANDWIDTH_LIMIT_INFO (size: 16)
 */
export interface HTTP_BANDWIDTH_LIMIT_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_PROPERTY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaxBandwidth: number;
}

export const sizeofHTTP_BANDWIDTH_LIMIT_INFO = 16;

export function allocHTTP_BANDWIDTH_LIMIT_INFO(data?: Partial<HTTP_BANDWIDTH_LIMIT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_BANDWIDTH_LIMIT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: u32
  if (data?.MaxBandwidth !== undefined) view.setUint32(8, Number(data.MaxBandwidth), true);
  // 0x0c: pad4
  return buf;
}

export class HTTP_BANDWIDTH_LIMIT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get MaxBandwidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set MaxBandwidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_FLOWRATE_INFO (size: 24)
 */
export interface HTTP_FLOWRATE_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_PROPERTY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  MaxBandwidth: number;
  /** u32 */
  MaxPeakBandwidth: number;
  /** u32 */
  BurstSize: number;
}

export const sizeofHTTP_FLOWRATE_INFO = 24;

export function allocHTTP_FLOWRATE_INFO(data?: Partial<HTTP_FLOWRATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_FLOWRATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: u32
  if (data?.MaxBandwidth !== undefined) view.setUint32(8, Number(data.MaxBandwidth), true);
  // 0x0c: u32
  if (data?.MaxPeakBandwidth !== undefined) view.setUint32(12, Number(data.MaxPeakBandwidth), true);
  // 0x10: u32
  if (data?.BurstSize !== undefined) view.setUint32(16, Number(data.BurstSize), true);
  // 0x14: pad4
  return buf;
}

export class HTTP_FLOWRATE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get MaxBandwidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get MaxPeakBandwidth(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get BurstSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set MaxBandwidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set MaxPeakBandwidth(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set BurstSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_TIMEOUT_SET (size: 8)
 */
export interface HTTP_SERVICE_CONFIG_TIMEOUT_SET {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_TIMEOUT_KEY */
  KeyDesc: HTTP_SERVICE_CONFIG_TIMEOUT_KEY;
  /** u16 */
  ParamDesc: number;
}

export const sizeofHTTP_SERVICE_CONFIG_TIMEOUT_SET = 8;

export function allocHTTP_SERVICE_CONFIG_TIMEOUT_SET(data?: Partial<HTTP_SERVICE_CONFIG_TIMEOUT_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_TIMEOUT_SET);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.KeyDesc !== undefined) view.setInt32(0, Number(data.KeyDesc), true);
  // 0x04: u16
  if (data?.ParamDesc !== undefined) view.setUint16(4, Number(data.ParamDesc), true);
  // 0x06: pad2
  return buf;
}

export class HTTP_SERVICE_CONFIG_TIMEOUT_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get KeyDesc(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u16
  get ParamDesc(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: pad2

  // 0x00: i32
  set KeyDesc(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u16
  set ParamDesc(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: pad2
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_TIMEOUT_LIMIT_INFO (size: 24)
 */
export interface HTTP_TIMEOUT_LIMIT_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_PROPERTY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  EntityBody: number;
  /** u16 */
  DrainEntityBody: number;
  /** u16 */
  RequestQueue: number;
  /** u16 */
  IdleConnection: number;
  /** u16 */
  HeaderWait: number;
  /** u32 */
  MinSendRate: number;
}

export const sizeofHTTP_TIMEOUT_LIMIT_INFO = 24;

export function allocHTTP_TIMEOUT_LIMIT_INFO(data?: Partial<HTTP_TIMEOUT_LIMIT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_TIMEOUT_LIMIT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: u16
  if (data?.EntityBody !== undefined) view.setUint16(8, Number(data.EntityBody), true);
  // 0x0a: u16
  if (data?.DrainEntityBody !== undefined) view.setUint16(10, Number(data.DrainEntityBody), true);
  // 0x0c: u16
  if (data?.RequestQueue !== undefined) view.setUint16(12, Number(data.RequestQueue), true);
  // 0x0e: u16
  if (data?.IdleConnection !== undefined) view.setUint16(14, Number(data.IdleConnection), true);
  // 0x10: u16
  if (data?.HeaderWait !== undefined) view.setUint16(16, Number(data.HeaderWait), true);
  // 0x12: u32
  if (data?.MinSendRate !== undefined) view.setUint32(18, Number(data.MinSendRate), true);
  // 0x16: pad2
  return buf;
}

export class HTTP_TIMEOUT_LIMIT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get EntityBody(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get DrainEntityBody(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get RequestQueue(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get IdleConnection(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u16
  get HeaderWait(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u32
  get MinSendRate(): number {
    return this.view.getUint32(18, true);
  }

  // 0x16: pad2

  // 0x00: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set EntityBody(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set DrainEntityBody(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set RequestQueue(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set IdleConnection(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u16
  set HeaderWait(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u32
  set MinSendRate(value: number) {
    this.view.setUint32(18, value, true);
  }

  // 0x16: pad2
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SETTING_SET (size: 8)
 */
export interface HTTP_SERVICE_CONFIG_SETTING_SET {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SETTING_KEY */
  KeyDesc: HTTP_SERVICE_CONFIG_SETTING_KEY;
  /** u32 */
  ParamDesc: number;
}

export const sizeofHTTP_SERVICE_CONFIG_SETTING_SET = 8;

export function allocHTTP_SERVICE_CONFIG_SETTING_SET(data?: Partial<HTTP_SERVICE_CONFIG_SETTING_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SETTING_SET);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.KeyDesc !== undefined) view.setInt32(0, Number(data.KeyDesc), true);
  // 0x04: u32
  if (data?.ParamDesc !== undefined) view.setUint32(4, Number(data.ParamDesc), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SETTING_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get KeyDesc(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ParamDesc(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set KeyDesc(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ParamDesc(value: number) {
    this.view.setUint32(4, value, true);
  }
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Networking.HttpServer.HTTP_LISTEN_ENDPOINT_INFO (size: 16)
 */
export interface HTTP_LISTEN_ENDPOINT_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_PROPERTY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  EnableSharing: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_LISTEN_ENDPOINT_INFO = 16;

export function allocHTTP_LISTEN_ENDPOINT_INFO(data?: Partial<HTTP_LISTEN_ENDPOINT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_LISTEN_ENDPOINT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: pointer
  if (data?.EnableSharing !== undefined) view.setBigUint64(8, data.EnableSharing === null ? 0n : BigInt(util.toPointer(data.EnableSharing)), true);
  return buf;
}

export class HTTP_LISTEN_ENDPOINT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get EnableSharing(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set EnableSharing(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS (size: 32)
 */
export interface HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS {
  /** u16 */
  DomainNameLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  DomainName: string | null | Uint8Array | Uint16Array;
  /** u16 */
  RealmLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  Realm: string | null | Uint8Array | Uint16Array;
}

export const sizeofHTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS = 32;

export function allocHTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS(data?: Partial<HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.DomainNameLength !== undefined) view.setUint16(0, Number(data.DomainNameLength), true);
  // 0x02: pad6
  // 0x08: buffer
  if (data?.DomainName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.DomainName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u16
  if (data?.RealmLength !== undefined) view.setUint16(16, Number(data.RealmLength), true);
  // 0x12: pad6
  // 0x18: buffer
  if (data?.Realm !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.Realm);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  return buf;
}

export class HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get DomainNameLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  get DomainName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get RealmLength(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: buffer
  get Realm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set DomainNameLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  set DomainName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u16
  set RealmLength(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: buffer
  set Realm(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS (size: 16)
 */
export interface HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS {
  /** u16 */
  RealmLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  Realm: string | null | Uint8Array | Uint16Array;
}

export const sizeofHTTP_SERVER_AUTHENTICATION_BASIC_PARAMS = 16;

export function allocHTTP_SERVER_AUTHENTICATION_BASIC_PARAMS(data?: Partial<HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVER_AUTHENTICATION_BASIC_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.RealmLength !== undefined) view.setUint16(0, Number(data.RealmLength), true);
  // 0x02: pad6
  // 0x08: buffer
  if (data?.Realm !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Realm);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class HTTP_SERVER_AUTHENTICATION_BASIC_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get RealmLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  get Realm(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set RealmLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  set Realm(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_INFO (size: 64)
 */
export interface HTTP_SERVER_AUTHENTICATION_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_PROPERTY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  AuthSchemes: number;
  /** Windows.Win32.Foundation.BOOLEAN */
  ReceiveMutualAuth: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  ReceiveContextHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  DisableNTLMCredentialCaching: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  ExFlags: number;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS */
  DigestParams: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS */
  BasicParams: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_SERVER_AUTHENTICATION_INFO = 64;

export function allocHTTP_SERVER_AUTHENTICATION_INFO(data?: Partial<HTTP_SERVER_AUTHENTICATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVER_AUTHENTICATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: u32
  if (data?.AuthSchemes !== undefined) view.setUint32(8, Number(data.AuthSchemes), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ReceiveMutualAuth !== undefined) view.setBigUint64(16, data.ReceiveMutualAuth === null ? 0n : BigInt(util.toPointer(data.ReceiveMutualAuth)), true);
  // 0x18: pointer
  if (data?.ReceiveContextHandle !== undefined) view.setBigUint64(24, data.ReceiveContextHandle === null ? 0n : BigInt(util.toPointer(data.ReceiveContextHandle)), true);
  // 0x20: pointer
  if (data?.DisableNTLMCredentialCaching !== undefined) view.setBigUint64(32, data.DisableNTLMCredentialCaching === null ? 0n : BigInt(util.toPointer(data.DisableNTLMCredentialCaching)), true);
  // 0x28: u8
  if (data?.ExFlags !== undefined) view.setUint8(40, Number(data.ExFlags));
  // 0x29: pad7
  // 0x30: pointer
  if (data?.DigestParams !== undefined) view.setBigUint64(48, data.DigestParams === null ? 0n : BigInt(util.toPointer(data.DigestParams)), true);
  // 0x38: pointer
  if (data?.BasicParams !== undefined) view.setBigUint64(56, data.BasicParams === null ? 0n : BigInt(util.toPointer(data.BasicParams)), true);
  return buf;
}

export class HTTP_SERVER_AUTHENTICATION_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get AuthSchemes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ReceiveMutualAuth(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get ReceiveContextHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get DisableNTLMCredentialCaching(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u8
  get ExFlags(): number {
    return this.view.getUint8(40);
  }

  // 0x29: pad7

  // 0x30: pointer
  get DigestParams(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get BasicParams(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set AuthSchemes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ReceiveMutualAuth(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set ReceiveContextHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set DisableNTLMCredentialCaching(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u8
  set ExFlags(value: number) {
    this.view.setUint8(40, value);
  }

  // 0x29: pad7

  // 0x30: pointer
  set DigestParams(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set BasicParams(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_BINDING_BASE (size: 8)
 */
export interface HTTP_SERVICE_BINDING_BASE {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_BINDING_TYPE */
  Type: HTTP_SERVICE_BINDING_TYPE;
}

export const sizeofHTTP_SERVICE_BINDING_BASE = 8;

export function allocHTTP_SERVICE_BINDING_BASE(data?: Partial<HTTP_SERVICE_BINDING_BASE>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_BINDING_BASE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  return buf;
}

export class HTTP_SERVICE_BINDING_BASEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_BINDING_A (size: 24)
 */
export interface HTTP_SERVICE_BINDING_A {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_BINDING_BASE */
  Base: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PSTR */
  Buffer: string | null | Uint8Array;
  /** u32 */
  BufferSize: number;
}

export const sizeofHTTP_SERVICE_BINDING_A = 24;

export function allocHTTP_SERVICE_BINDING_A(data?: Partial<HTTP_SERVICE_BINDING_A>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_BINDING_A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(util.toPointer(data.Base)), true);
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.BufferSize !== undefined) view.setUint32(16, Number(data.BufferSize), true);
  // 0x14: pad4
  return buf;
}

export class HTTP_SERVICE_BINDING_AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get BufferSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set BufferSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_BINDING_W (size: 24)
 */
export interface HTTP_SERVICE_BINDING_W {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_BINDING_BASE */
  Base: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  Buffer: string | null | Uint8Array | Uint16Array;
  /** u32 */
  BufferSize: number;
}

export const sizeofHTTP_SERVICE_BINDING_W = 24;

export function allocHTTP_SERVICE_BINDING_W(data?: Partial<HTTP_SERVICE_BINDING_W>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_BINDING_W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(util.toPointer(data.Base)), true);
  // 0x08: buffer
  if (data?.Buffer !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Buffer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.BufferSize !== undefined) view.setUint32(16, Number(data.BufferSize), true);
  // 0x14: pad4
  return buf;
}

export class HTTP_SERVICE_BINDING_WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get BufferSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: u32
  set BufferSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_CHANNEL_BIND_INFO (size: 24)
 */
export interface HTTP_CHANNEL_BIND_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_AUTHENTICATION_HARDENING_LEVELS */
  Hardening: HTTP_AUTHENTICATION_HARDENING_LEVELS;
  /** u32 */
  Flags: number;
  /** ptr */
  ServiceNames: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumberOfServiceNames: number;
}

export const sizeofHTTP_CHANNEL_BIND_INFO = 24;

export function allocHTTP_CHANNEL_BIND_INFO(data?: Partial<HTTP_CHANNEL_BIND_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_CHANNEL_BIND_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Hardening !== undefined) view.setInt32(0, Number(data.Hardening), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.ServiceNames !== undefined) view.setBigUint64(8, data.ServiceNames === null ? 0n : BigInt(util.toPointer(data.ServiceNames)), true);
  // 0x10: u32
  if (data?.NumberOfServiceNames !== undefined) view.setUint32(16, Number(data.NumberOfServiceNames), true);
  // 0x14: pad4
  return buf;
}

export class HTTP_CHANNEL_BIND_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Hardening(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ServiceNames(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get NumberOfServiceNames(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set Hardening(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ServiceNames(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set NumberOfServiceNames(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_REQUEST_CHANNEL_BIND_STATUS (size: 24)
 */
export interface HTTP_REQUEST_CHANNEL_BIND_STATUS {
  /** ptr */
  ServiceName: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  ChannelToken: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  ChannelTokenSize: number;
  /** u32 */
  Flags: number;
}

export const sizeofHTTP_REQUEST_CHANNEL_BIND_STATUS = 24;

export function allocHTTP_REQUEST_CHANNEL_BIND_STATUS(data?: Partial<HTTP_REQUEST_CHANNEL_BIND_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_REQUEST_CHANNEL_BIND_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ServiceName !== undefined) view.setBigUint64(0, data.ServiceName === null ? 0n : BigInt(util.toPointer(data.ServiceName)), true);
  // 0x08: pointer
  if (data?.ChannelToken !== undefined) view.setBigUint64(8, data.ChannelToken === null ? 0n : BigInt(util.toPointer(data.ChannelToken)), true);
  // 0x10: u32
  if (data?.ChannelTokenSize !== undefined) view.setUint32(16, Number(data.ChannelTokenSize), true);
  // 0x14: u32
  if (data?.Flags !== undefined) view.setUint32(20, Number(data.Flags), true);
  return buf;
}

export class HTTP_REQUEST_CHANNEL_BIND_STATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ServiceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ChannelToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get ChannelTokenSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get Flags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set ServiceName(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ChannelToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set ChannelTokenSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set Flags(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_REQUEST_TOKEN_BINDING_INFO (size: 32)
 */
export interface HTTP_REQUEST_TOKEN_BINDING_INFO {
  /** ptr */
  TokenBinding: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  TokenBindingSize: number;
  /** ptr */
  EKM: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  EKMSize: number;
  /** u8 */
  KeyType: number;
}

export const sizeofHTTP_REQUEST_TOKEN_BINDING_INFO = 32;

export function allocHTTP_REQUEST_TOKEN_BINDING_INFO(data?: Partial<HTTP_REQUEST_TOKEN_BINDING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_REQUEST_TOKEN_BINDING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.TokenBinding !== undefined) view.setBigUint64(0, data.TokenBinding === null ? 0n : BigInt(util.toPointer(data.TokenBinding)), true);
  // 0x08: u32
  if (data?.TokenBindingSize !== undefined) view.setUint32(8, Number(data.TokenBindingSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.EKM !== undefined) view.setBigUint64(16, data.EKM === null ? 0n : BigInt(util.toPointer(data.EKM)), true);
  // 0x18: u32
  if (data?.EKMSize !== undefined) view.setUint32(24, Number(data.EKMSize), true);
  // 0x1c: u8
  if (data?.KeyType !== undefined) view.setUint8(28, Number(data.KeyType));
  // 0x1d: pad3
  return buf;
}

export class HTTP_REQUEST_TOKEN_BINDING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get TokenBinding(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get TokenBindingSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get EKM(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get EKMSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u8
  get KeyType(): number {
    return this.view.getUint8(28);
  }

  // 0x1d: pad3

  // 0x00: pointer
  set TokenBinding(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set TokenBindingSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set EKM(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set EKMSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u8
  set KeyType(value: number) {
    this.view.setUint8(28, value);
  }

  // 0x1d: pad3
}

export type PSECURITY_DESCRIPTOR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Networking.HttpServer.HTTP_LOGGING_INFO (size: 80)
 */
export interface HTTP_LOGGING_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_PROPERTY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  LoggingFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  SoftwareName: string | null | Uint8Array | Uint16Array;
  /** u16 */
  SoftwareNameLength: number;
  /** u16 */
  DirectoryNameLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  DirectoryName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Networking.HttpServer.HTTP_LOGGING_TYPE */
  Format: HTTP_LOGGING_TYPE;
  /** u32 */
  Fields: number;
  /** ptr */
  pExtFields: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  NumOfExtFields: number;
  /** u16 */
  MaxRecordSize: number;
  /** Windows.Win32.Networking.HttpServer.HTTP_LOGGING_ROLLOVER_TYPE */
  RolloverType: HTTP_LOGGING_ROLLOVER_TYPE;
  /** u32 */
  RolloverSize: number;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  pSecurityDescriptor: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_LOGGING_INFO = 80;

export function allocHTTP_LOGGING_INFO(data?: Partial<HTTP_LOGGING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_LOGGING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: u32
  if (data?.LoggingFlags !== undefined) view.setUint32(8, Number(data.LoggingFlags), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.SoftwareName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.SoftwareName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: u16
  if (data?.SoftwareNameLength !== undefined) view.setUint16(24, Number(data.SoftwareNameLength), true);
  // 0x1a: u16
  if (data?.DirectoryNameLength !== undefined) view.setUint16(26, Number(data.DirectoryNameLength), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.DirectoryName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.DirectoryName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: i32
  if (data?.Format !== undefined) view.setInt32(40, Number(data.Format), true);
  // 0x2c: u32
  if (data?.Fields !== undefined) view.setUint32(44, Number(data.Fields), true);
  // 0x30: pointer
  if (data?.pExtFields !== undefined) view.setBigUint64(48, data.pExtFields === null ? 0n : BigInt(util.toPointer(data.pExtFields)), true);
  // 0x38: u16
  if (data?.NumOfExtFields !== undefined) view.setUint16(56, Number(data.NumOfExtFields), true);
  // 0x3a: u16
  if (data?.MaxRecordSize !== undefined) view.setUint16(58, Number(data.MaxRecordSize), true);
  // 0x3c: i32
  if (data?.RolloverType !== undefined) view.setInt32(60, Number(data.RolloverType), true);
  // 0x40: u32
  if (data?.RolloverSize !== undefined) view.setUint32(64, Number(data.RolloverSize), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(72, data.pSecurityDescriptor === null ? 0n : BigInt(util.toPointer(data.pSecurityDescriptor)), true);
  return buf;
}

export class HTTP_LOGGING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get LoggingFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get SoftwareName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u16
  get SoftwareNameLength(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get DirectoryNameLength(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  get DirectoryName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: i32
  get Format(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get Fields(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get pExtFields(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u16
  get NumOfExtFields(): number {
    return this.view.getUint16(56, true);
  }

  // 0x3a: u16
  get MaxRecordSize(): number {
    return this.view.getUint16(58, true);
  }

  // 0x3c: i32
  get RolloverType(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: u32
  get RolloverSize(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get pSecurityDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set LoggingFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set SoftwareName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: u16
  set SoftwareNameLength(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set DirectoryNameLength(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: pad4

  // 0x20: buffer
  set DirectoryName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: i32
  set Format(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set Fields(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set pExtFields(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u16
  set NumOfExtFields(value: number) {
    this.view.setUint16(56, value, true);
  }

  // 0x3a: u16
  set MaxRecordSize(value: number) {
    this.view.setUint16(58, value, true);
  }

  // 0x3c: i32
  set RolloverType(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: u32
  set RolloverSize(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set pSecurityDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Networking.HttpServer.HTTP_BINDING_INFO (size: 16)
 */
export interface HTTP_BINDING_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_PROPERTY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_BINDING_INFO = 16;

export function allocHTTP_BINDING_INFO(data?: Partial<HTTP_BINDING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_BINDING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: pointer
  if (data?.RequestQueueHandle !== undefined) view.setBigUint64(8, data.RequestQueueHandle === null ? 0n : BigInt(util.toPointer(data.RequestQueueHandle)), true);
  return buf;
}

export class HTTP_BINDING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get RequestQueueHandle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set RequestQueueHandle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_PROTECTION_LEVEL_INFO (size: 16)
 */
export interface HTTP_PROTECTION_LEVEL_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_PROPERTY_FLAGS */
  Flags: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_PROTECTION_LEVEL_TYPE */
  Level: HTTP_PROTECTION_LEVEL_TYPE;
}

export const sizeofHTTP_PROTECTION_LEVEL_INFO = 16;

export function allocHTTP_PROTECTION_LEVEL_INFO(data?: Partial<HTTP_PROTECTION_LEVEL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_PROTECTION_LEVEL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Flags !== undefined) view.setBigUint64(0, data.Flags === null ? 0n : BigInt(util.toPointer(data.Flags)), true);
  // 0x08: i32
  if (data?.Level !== undefined) view.setInt32(8, Number(data.Level), true);
  // 0x0c: pad4
  return buf;
}

export class HTTP_PROTECTION_LEVEL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Flags(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: i32
  get Level(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Flags(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: i32
  set Level(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Foundation.ULARGE_INTEGER (size: 24)
 */
export interface ULARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofULARGE_INTEGER = 24;

export function allocULARGE_INTEGER(data?: Partial<ULARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofULARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: u64
  if (data?.QuadPart !== undefined) view.setBigUint64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class ULARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u64
  get QuadPart(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u64
  set QuadPart(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_BYTE_RANGE (size: 16)
 */
export interface HTTP_BYTE_RANGE {
  /** Windows.Win32.Foundation.ULARGE_INTEGER */
  StartingOffset: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.ULARGE_INTEGER */
  Length: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_BYTE_RANGE = 16;

export function allocHTTP_BYTE_RANGE(data?: Partial<HTTP_BYTE_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_BYTE_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.StartingOffset !== undefined) view.setBigUint64(0, data.StartingOffset === null ? 0n : BigInt(util.toPointer(data.StartingOffset)), true);
  // 0x08: pointer
  if (data?.Length !== undefined) view.setBigUint64(8, data.Length === null ? 0n : BigInt(util.toPointer(data.Length)), true);
  return buf;
}

export class HTTP_BYTE_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get StartingOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Length(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set StartingOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Length(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_VERSION (size: 8)
 */
export interface HTTP_VERSION {
  /** u16 */
  MajorVersion: number;
  /** u16 */
  MinorVersion: number;
}

export const sizeofHTTP_VERSION = 8;

export function allocHTTP_VERSION(data?: Partial<HTTP_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.MajorVersion !== undefined) view.setUint16(0, Number(data.MajorVersion), true);
  // 0x02: u16
  if (data?.MinorVersion !== undefined) view.setUint16(2, Number(data.MinorVersion), true);
  // 0x04: pad4
  return buf;
}

export class HTTP_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get MajorVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get MinorVersion(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set MajorVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set MinorVersion(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_KNOWN_HEADER (size: 16)
 */
export interface HTTP_KNOWN_HEADER {
  /** u16 */
  RawValueLength: number;
  /** Windows.Win32.Foundation.PSTR */
  pRawValue: string | null | Uint8Array;
}

export const sizeofHTTP_KNOWN_HEADER = 16;

export function allocHTTP_KNOWN_HEADER(data?: Partial<HTTP_KNOWN_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_KNOWN_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.RawValueLength !== undefined) view.setUint16(0, Number(data.RawValueLength), true);
  // 0x02: pad6
  // 0x08: buffer
  if (data?.pRawValue !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pRawValue);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class HTTP_KNOWN_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get RawValueLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  get pRawValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set RawValueLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: buffer
  set pRawValue(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_UNKNOWN_HEADER (size: 24)
 */
export interface HTTP_UNKNOWN_HEADER {
  /** u16 */
  NameLength: number;
  /** u16 */
  RawValueLength: number;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pRawValue: string | null | Uint8Array;
}

export const sizeofHTTP_UNKNOWN_HEADER = 24;

export function allocHTTP_UNKNOWN_HEADER(data?: Partial<HTTP_UNKNOWN_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_UNKNOWN_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.NameLength !== undefined) view.setUint16(0, Number(data.NameLength), true);
  // 0x02: u16
  if (data?.RawValueLength !== undefined) view.setUint16(2, Number(data.RawValueLength), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pRawValue !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pRawValue);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  return buf;
}

export class HTTP_UNKNOWN_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get NameLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get RawValueLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pRawValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set NameLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set RawValueLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pRawValue(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_LOG_DATA (size: 8)
 */
export interface HTTP_LOG_DATA {
  /** Windows.Win32.Networking.HttpServer.HTTP_LOG_DATA_TYPE */
  Type: HTTP_LOG_DATA_TYPE;
}

export const sizeofHTTP_LOG_DATA = 8;

export function allocHTTP_LOG_DATA(data?: Partial<HTTP_LOG_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_LOG_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  return buf;
}

export class HTTP_LOG_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_LOG_FIELDS_DATA (size: 144)
 */
export interface HTTP_LOG_FIELDS_DATA {
  /** Windows.Win32.Networking.HttpServer.HTTP_LOG_DATA */
  Base: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  UserNameLength: number;
  /** u16 */
  UriStemLength: number;
  /** u16 */
  ClientIpLength: number;
  /** u16 */
  ServerNameLength: number;
  /** u16 */
  ServiceNameLength: number;
  /** u16 */
  ServerIpLength: number;
  /** u16 */
  MethodLength: number;
  /** u16 */
  UriQueryLength: number;
  /** u16 */
  HostLength: number;
  /** u16 */
  UserAgentLength: number;
  /** u16 */
  CookieLength: number;
  /** u16 */
  ReferrerLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  UserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  UriStem: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PSTR */
  ClientIp: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ServerName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ServiceName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ServerIp: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Method: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  UriQuery: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Host: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  UserAgent: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Cookie: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  Referrer: string | null | Uint8Array;
  /** u16 */
  ServerPort: number;
  /** u16 */
  ProtocolStatus: number;
  /** u32 */
  Win32Status: number;
  /** Windows.Win32.Networking.HttpServer.HTTP_VERB */
  MethodNum: HTTP_VERB;
  /** u16 */
  SubStatus: number;
}

export const sizeofHTTP_LOG_FIELDS_DATA = 144;

export function allocHTTP_LOG_FIELDS_DATA(data?: Partial<HTTP_LOG_FIELDS_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_LOG_FIELDS_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(util.toPointer(data.Base)), true);
  // 0x08: u16
  if (data?.UserNameLength !== undefined) view.setUint16(8, Number(data.UserNameLength), true);
  // 0x0a: u16
  if (data?.UriStemLength !== undefined) view.setUint16(10, Number(data.UriStemLength), true);
  // 0x0c: u16
  if (data?.ClientIpLength !== undefined) view.setUint16(12, Number(data.ClientIpLength), true);
  // 0x0e: u16
  if (data?.ServerNameLength !== undefined) view.setUint16(14, Number(data.ServerNameLength), true);
  // 0x10: u16
  if (data?.ServiceNameLength !== undefined) view.setUint16(16, Number(data.ServiceNameLength), true);
  // 0x12: u16
  if (data?.ServerIpLength !== undefined) view.setUint16(18, Number(data.ServerIpLength), true);
  // 0x14: u16
  if (data?.MethodLength !== undefined) view.setUint16(20, Number(data.MethodLength), true);
  // 0x16: u16
  if (data?.UriQueryLength !== undefined) view.setUint16(22, Number(data.UriQueryLength), true);
  // 0x18: u16
  if (data?.HostLength !== undefined) view.setUint16(24, Number(data.HostLength), true);
  // 0x1a: u16
  if (data?.UserAgentLength !== undefined) view.setUint16(26, Number(data.UserAgentLength), true);
  // 0x1c: u16
  if (data?.CookieLength !== undefined) view.setUint16(28, Number(data.CookieLength), true);
  // 0x1e: u16
  if (data?.ReferrerLength !== undefined) view.setUint16(30, Number(data.ReferrerLength), true);
  // 0x20: buffer
  if (data?.UserName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.UserName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  // 0x28: buffer
  if (data?.UriStem !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.UriStem);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f40)), true);
  }
  // 0x30: buffer
  if (data?.ClientIp !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.ClientIp);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.ServerName !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.ServerName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: buffer
  if (data?.ServiceName !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.ServiceName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: buffer
  if (data?.ServerIp !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.ServerIp);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f72)), true);
  }
  // 0x50: buffer
  if (data?.Method !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.Method);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  // 0x58: buffer
  if (data?.UriQuery !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.UriQuery);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f88)), true);
  }
  // 0x60: buffer
  if (data?.Host !== undefined) {
    (buf as any)._f96 = util.pstrToFfi(data.Host);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f96)), true);
  }
  // 0x68: buffer
  if (data?.UserAgent !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.UserAgent);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f104)), true);
  }
  // 0x70: buffer
  if (data?.Cookie !== undefined) {
    (buf as any)._f112 = util.pstrToFfi(data.Cookie);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f112)), true);
  }
  // 0x78: buffer
  if (data?.Referrer !== undefined) {
    (buf as any)._f120 = util.pstrToFfi(data.Referrer);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f120)), true);
  }
  // 0x80: u16
  if (data?.ServerPort !== undefined) view.setUint16(128, Number(data.ServerPort), true);
  // 0x82: u16
  if (data?.ProtocolStatus !== undefined) view.setUint16(130, Number(data.ProtocolStatus), true);
  // 0x84: u32
  if (data?.Win32Status !== undefined) view.setUint32(132, Number(data.Win32Status), true);
  // 0x88: i32
  if (data?.MethodNum !== undefined) view.setInt32(136, Number(data.MethodNum), true);
  // 0x8c: u16
  if (data?.SubStatus !== undefined) view.setUint16(140, Number(data.SubStatus), true);
  // 0x8e: pad2
  return buf;
}

export class HTTP_LOG_FIELDS_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get UserNameLength(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get UriStemLength(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get ClientIpLength(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get ServerNameLength(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: u16
  get ServiceNameLength(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get ServerIpLength(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u16
  get MethodLength(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: u16
  get UriQueryLength(): number {
    return this.view.getUint16(22, true);
  }

  // 0x18: u16
  get HostLength(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get UserAgentLength(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: u16
  get CookieLength(): number {
    return this.view.getUint16(28, true);
  }

  // 0x1e: u16
  get ReferrerLength(): number {
    return this.view.getUint16(30, true);
  }

  // 0x20: buffer
  get UserName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: buffer
  get UriStem(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: buffer
  get ClientIp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: buffer
  get ServerName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: buffer
  get ServiceName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: buffer
  get ServerIp(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: buffer
  get Method(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: buffer
  get UriQuery(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: buffer
  get Host(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: buffer
  get UserAgent(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: buffer
  get Cookie(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: buffer
  get Referrer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: u16
  get ServerPort(): number {
    return this.view.getUint16(128, true);
  }

  // 0x82: u16
  get ProtocolStatus(): number {
    return this.view.getUint16(130, true);
  }

  // 0x84: u32
  get Win32Status(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: i32
  get MethodNum(): number {
    return this.view.getInt32(136, true);
  }

  // 0x8c: u16
  get SubStatus(): number {
    return this.view.getUint16(140, true);
  }

  // 0x8e: pad2

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set UserNameLength(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set UriStemLength(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set ClientIpLength(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set ServerNameLength(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: u16
  set ServiceNameLength(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set ServerIpLength(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u16
  set MethodLength(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: u16
  set UriQueryLength(value: number) {
    this.view.setUint16(22, value, true);
  }

  // 0x18: u16
  set HostLength(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set UserAgentLength(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: u16
  set CookieLength(value: number) {
    this.view.setUint16(28, value, true);
  }

  // 0x1e: u16
  set ReferrerLength(value: number) {
    this.view.setUint16(30, value, true);
  }

  // 0x20: buffer
  set UserName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }

  // 0x28: buffer
  set UriStem(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(util.toPointer((this.buf as any)._f40)), true);
  }

  // 0x30: buffer
  set ClientIp(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(util.toPointer((this.buf as any)._f48)), true);
  }

  // 0x38: buffer
  set ServerName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(util.toPointer((this.buf as any)._f56)), true);
  }

  // 0x40: buffer
  set ServiceName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(util.toPointer((this.buf as any)._f64)), true);
  }

  // 0x48: buffer
  set ServerIp(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(util.toPointer((this.buf as any)._f72)), true);
  }

  // 0x50: buffer
  set Method(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(util.toPointer((this.buf as any)._f80)), true);
  }

  // 0x58: buffer
  set UriQuery(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(util.toPointer((this.buf as any)._f88)), true);
  }

  // 0x60: buffer
  set Host(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(util.toPointer((this.buf as any)._f96)), true);
  }

  // 0x68: buffer
  set UserAgent(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(util.toPointer((this.buf as any)._f104)), true);
  }

  // 0x70: buffer
  set Cookie(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f112 = value;
    this.view.setBigUint64(112, BigInt(util.toPointer((this.buf as any)._f112)), true);
  }

  // 0x78: buffer
  set Referrer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f120 = value;
    this.view.setBigUint64(120, BigInt(util.toPointer((this.buf as any)._f120)), true);
  }

  // 0x80: u16
  set ServerPort(value: number) {
    this.view.setUint16(128, value, true);
  }

  // 0x82: u16
  set ProtocolStatus(value: number) {
    this.view.setUint16(130, value, true);
  }

  // 0x84: u32
  set Win32Status(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: i32
  set MethodNum(value: number) {
    this.view.setInt32(136, value, true);
  }

  // 0x8c: u16
  set SubStatus(value: number) {
    this.view.setUint16(140, value, true);
  }

  // 0x8e: pad2
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK (size: 16)
 */
export interface HTTP_DATA_CHUNK {
  /** Windows.Win32.Networking.HttpServer.HTTP_DATA_CHUNK_TYPE */
  DataChunkType: HTTP_DATA_CHUNK_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_DATA_CHUNK = 16;

export function allocHTTP_DATA_CHUNK(data?: Partial<HTTP_DATA_CHUNK>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_DATA_CHUNK);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DataChunkType !== undefined) view.setInt32(0, Number(data.DataChunkType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class HTTP_DATA_CHUNKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get DataChunkType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set DataChunkType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_REQUEST_HEADERS (size: 40)
 */
export interface HTTP_REQUEST_HEADERS {
  /** u16 */
  UnknownHeaderCount: number;
  /** ptr */
  pUnknownHeaders: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  TrailerCount: number;
  /** ptr */
  pTrailers: Deno.PointerValue | Uint8Array | null;
  /** array */
  KnownHeaders: Deno.PointerValue | null;
}

export const sizeofHTTP_REQUEST_HEADERS = 40;

export function allocHTTP_REQUEST_HEADERS(data?: Partial<HTTP_REQUEST_HEADERS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_REQUEST_HEADERS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UnknownHeaderCount !== undefined) view.setUint16(0, Number(data.UnknownHeaderCount), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.pUnknownHeaders !== undefined) view.setBigUint64(8, data.pUnknownHeaders === null ? 0n : BigInt(util.toPointer(data.pUnknownHeaders)), true);
  // 0x10: u16
  if (data?.TrailerCount !== undefined) view.setUint16(16, Number(data.TrailerCount), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.pTrailers !== undefined) view.setBigUint64(24, data.pTrailers === null ? 0n : BigInt(util.toPointer(data.pTrailers)), true);
  // 0x20: pointer
  if (data?.KnownHeaders !== undefined) view.setBigUint64(32, data.KnownHeaders === null ? 0n : BigInt(util.toPointer(data.KnownHeaders)), true);
  return buf;
}

export class HTTP_REQUEST_HEADERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UnknownHeaderCount(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get pUnknownHeaders(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get TrailerCount(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get pTrailers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get KnownHeaders(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set UnknownHeaderCount(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set pUnknownHeaders(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set TrailerCount(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set pTrailers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set KnownHeaders(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_HEADERS (size: 40)
 */
export interface HTTP_RESPONSE_HEADERS {
  /** u16 */
  UnknownHeaderCount: number;
  /** ptr */
  pUnknownHeaders: Deno.PointerValue | Uint8Array | null;
  /** u16 */
  TrailerCount: number;
  /** ptr */
  pTrailers: Deno.PointerValue | Uint8Array | null;
  /** array */
  KnownHeaders: Deno.PointerValue | null;
}

export const sizeofHTTP_RESPONSE_HEADERS = 40;

export function allocHTTP_RESPONSE_HEADERS(data?: Partial<HTTP_RESPONSE_HEADERS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_RESPONSE_HEADERS);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.UnknownHeaderCount !== undefined) view.setUint16(0, Number(data.UnknownHeaderCount), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.pUnknownHeaders !== undefined) view.setBigUint64(8, data.pUnknownHeaders === null ? 0n : BigInt(util.toPointer(data.pUnknownHeaders)), true);
  // 0x10: u16
  if (data?.TrailerCount !== undefined) view.setUint16(16, Number(data.TrailerCount), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.pTrailers !== undefined) view.setBigUint64(24, data.pTrailers === null ? 0n : BigInt(util.toPointer(data.pTrailers)), true);
  // 0x20: pointer
  if (data?.KnownHeaders !== undefined) view.setBigUint64(32, data.KnownHeaders === null ? 0n : BigInt(util.toPointer(data.KnownHeaders)), true);
  return buf;
}

export class HTTP_RESPONSE_HEADERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get UnknownHeaderCount(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get pUnknownHeaders(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get TrailerCount(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get pTrailers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get KnownHeaders(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set UnknownHeaderCount(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set pUnknownHeaders(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set TrailerCount(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set pTrailers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set KnownHeaders(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_DELEGATE_REQUEST_PROPERTY_INFO (size: 16)
 */
export interface HTTP_DELEGATE_REQUEST_PROPERTY_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_DELEGATE_REQUEST_PROPERTY_ID */
  PropertyId: HTTP_DELEGATE_REQUEST_PROPERTY_ID;
  /** u32 */
  PropertyInfoLength: number;
  /** ptr */
  PropertyInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_DELEGATE_REQUEST_PROPERTY_INFO = 16;

export function allocHTTP_DELEGATE_REQUEST_PROPERTY_INFO(data?: Partial<HTTP_DELEGATE_REQUEST_PROPERTY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_DELEGATE_REQUEST_PROPERTY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PropertyId !== undefined) view.setInt32(0, Number(data.PropertyId), true);
  // 0x04: u32
  if (data?.PropertyInfoLength !== undefined) view.setUint32(4, Number(data.PropertyInfoLength), true);
  // 0x08: pointer
  if (data?.PropertyInfo !== undefined) view.setBigUint64(8, data.PropertyInfo === null ? 0n : BigInt(util.toPointer(data.PropertyInfo)), true);
  return buf;
}

export class HTTP_DELEGATE_REQUEST_PROPERTY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get PropertyId(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get PropertyInfoLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get PropertyInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set PropertyId(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set PropertyInfoLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set PropertyInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_CREATE_REQUEST_QUEUE_PROPERTY_INFO (size: 16)
 */
export interface HTTP_CREATE_REQUEST_QUEUE_PROPERTY_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_CREATE_REQUEST_QUEUE_PROPERTY_ID */
  PropertyId: HTTP_CREATE_REQUEST_QUEUE_PROPERTY_ID;
  /** u32 */
  PropertyInfoLength: number;
  /** ptr */
  PropertyInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_CREATE_REQUEST_QUEUE_PROPERTY_INFO = 16;

export function allocHTTP_CREATE_REQUEST_QUEUE_PROPERTY_INFO(data?: Partial<HTTP_CREATE_REQUEST_QUEUE_PROPERTY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_CREATE_REQUEST_QUEUE_PROPERTY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.PropertyId !== undefined) view.setInt32(0, Number(data.PropertyId), true);
  // 0x04: u32
  if (data?.PropertyInfoLength !== undefined) view.setUint32(4, Number(data.PropertyInfoLength), true);
  // 0x08: pointer
  if (data?.PropertyInfo !== undefined) view.setBigUint64(8, data.PropertyInfo === null ? 0n : BigInt(util.toPointer(data.PropertyInfo)), true);
  return buf;
}

export class HTTP_CREATE_REQUEST_QUEUE_PROPERTY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get PropertyId(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get PropertyInfoLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get PropertyInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set PropertyId(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set PropertyInfoLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set PropertyInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_TRANSPORT_ADDRESS (size: 16)
 */
export interface HTTP_TRANSPORT_ADDRESS {
  /** ptr */
  pRemoteAddress: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pLocalAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_TRANSPORT_ADDRESS = 16;

export function allocHTTP_TRANSPORT_ADDRESS(data?: Partial<HTTP_TRANSPORT_ADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_TRANSPORT_ADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pRemoteAddress !== undefined) view.setBigUint64(0, data.pRemoteAddress === null ? 0n : BigInt(util.toPointer(data.pRemoteAddress)), true);
  // 0x08: pointer
  if (data?.pLocalAddress !== undefined) view.setBigUint64(8, data.pLocalAddress === null ? 0n : BigInt(util.toPointer(data.pLocalAddress)), true);
  return buf;
}

export class HTTP_TRANSPORT_ADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pRemoteAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pLocalAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pRemoteAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pLocalAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_COOKED_URL (size: 40)
 */
export interface HTTP_COOKED_URL {
  /** u16 */
  FullUrlLength: number;
  /** u16 */
  HostLength: number;
  /** u16 */
  AbsPathLength: number;
  /** u16 */
  QueryStringLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  pFullUrl: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pHost: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pAbsPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pQueryString: string | null | Uint8Array | Uint16Array;
}

export const sizeofHTTP_COOKED_URL = 40;

export function allocHTTP_COOKED_URL(data?: Partial<HTTP_COOKED_URL>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_COOKED_URL);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.FullUrlLength !== undefined) view.setUint16(0, Number(data.FullUrlLength), true);
  // 0x02: u16
  if (data?.HostLength !== undefined) view.setUint16(2, Number(data.HostLength), true);
  // 0x04: u16
  if (data?.AbsPathLength !== undefined) view.setUint16(4, Number(data.AbsPathLength), true);
  // 0x06: u16
  if (data?.QueryStringLength !== undefined) view.setUint16(6, Number(data.QueryStringLength), true);
  // 0x08: buffer
  if (data?.pFullUrl !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pFullUrl);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: buffer
  if (data?.pHost !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pHost);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pAbsPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pAbsPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.pQueryString !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pQueryString);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

export class HTTP_COOKED_URLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get FullUrlLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get HostLength(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get AbsPathLength(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get QueryStringLength(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: buffer
  get pFullUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: buffer
  get pHost(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pAbsPath(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: buffer
  get pQueryString(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set FullUrlLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set HostLength(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set AbsPathLength(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set QueryStringLength(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: buffer
  set pFullUrl(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }

  // 0x10: buffer
  set pHost(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pAbsPath(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: buffer
  set pQueryString(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(util.toPointer((this.buf as any)._f32)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SSL_CLIENT_CERT_INFO (size: 32)
 */
export interface HTTP_SSL_CLIENT_CERT_INFO {
  /** u32 */
  CertFlags: number;
  /** u32 */
  CertEncodedSize: number;
  /** ptr */
  pCertEncoded: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.HANDLE */
  Token: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOLEAN */
  CertDeniedByMapper: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_SSL_CLIENT_CERT_INFO = 32;

export function allocHTTP_SSL_CLIENT_CERT_INFO(data?: Partial<HTTP_SSL_CLIENT_CERT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SSL_CLIENT_CERT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.CertFlags !== undefined) view.setUint32(0, Number(data.CertFlags), true);
  // 0x04: u32
  if (data?.CertEncodedSize !== undefined) view.setUint32(4, Number(data.CertEncodedSize), true);
  // 0x08: pointer
  if (data?.pCertEncoded !== undefined) view.setBigUint64(8, data.pCertEncoded === null ? 0n : BigInt(util.toPointer(data.pCertEncoded)), true);
  // 0x10: pointer
  if (data?.Token !== undefined) view.setBigUint64(16, data.Token === null ? 0n : BigInt(util.toPointer(data.Token)), true);
  // 0x18: pointer
  if (data?.CertDeniedByMapper !== undefined) view.setBigUint64(24, data.CertDeniedByMapper === null ? 0n : BigInt(util.toPointer(data.CertDeniedByMapper)), true);
  return buf;
}

export class HTTP_SSL_CLIENT_CERT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get CertFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get CertEncodedSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pCertEncoded(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get Token(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get CertDeniedByMapper(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set CertFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set CertEncodedSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pCertEncoded(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set Token(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set CertDeniedByMapper(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SSL_INFO (size: 48)
 */
export interface HTTP_SSL_INFO {
  /** u16 */
  ServerCertKeySize: number;
  /** u16 */
  ConnectionKeySize: number;
  /** u32 */
  ServerCertIssuerSize: number;
  /** u32 */
  ServerCertSubjectSize: number;
  /** Windows.Win32.Foundation.PSTR */
  pServerCertIssuer: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pServerCertSubject: string | null | Uint8Array;
  /** ptr */
  pClientCertInfo: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  SslClientCertNegotiated: number;
}

export const sizeofHTTP_SSL_INFO = 48;

export function allocHTTP_SSL_INFO(data?: Partial<HTTP_SSL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SSL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ServerCertKeySize !== undefined) view.setUint16(0, Number(data.ServerCertKeySize), true);
  // 0x02: u16
  if (data?.ConnectionKeySize !== undefined) view.setUint16(2, Number(data.ConnectionKeySize), true);
  // 0x04: u32
  if (data?.ServerCertIssuerSize !== undefined) view.setUint32(4, Number(data.ServerCertIssuerSize), true);
  // 0x08: u32
  if (data?.ServerCertSubjectSize !== undefined) view.setUint32(8, Number(data.ServerCertSubjectSize), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pServerCertIssuer !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pServerCertIssuer);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.pServerCertSubject !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pServerCertSubject);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.pClientCertInfo !== undefined) view.setBigUint64(32, data.pClientCertInfo === null ? 0n : BigInt(util.toPointer(data.pClientCertInfo)), true);
  // 0x28: u32
  if (data?.SslClientCertNegotiated !== undefined) view.setUint32(40, Number(data.SslClientCertNegotiated), true);
  // 0x2c: pad4
  return buf;
}

export class HTTP_SSL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ServerCertKeySize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get ConnectionKeySize(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get ServerCertIssuerSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ServerCertSubjectSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pServerCertIssuer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pServerCertSubject(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get pClientCertInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u32
  get SslClientCertNegotiated(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u16
  set ServerCertKeySize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set ConnectionKeySize(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set ServerCertIssuerSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ServerCertSubjectSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pServerCertIssuer(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(util.toPointer((this.buf as any)._f16)), true);
  }

  // 0x18: buffer
  set pServerCertSubject(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: pointer
  set pClientCertInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u32
  set SslClientCertNegotiated(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SSL_PROTOCOL_INFO (size: 32)
 */
export interface HTTP_SSL_PROTOCOL_INFO {
  /** u32 */
  Protocol: number;
  /** u32 */
  CipherType: number;
  /** u32 */
  CipherStrength: number;
  /** u32 */
  HashType: number;
  /** u32 */
  HashStrength: number;
  /** u32 */
  KeyExchangeType: number;
  /** u32 */
  KeyExchangeStrength: number;
}

export const sizeofHTTP_SSL_PROTOCOL_INFO = 32;

export function allocHTTP_SSL_PROTOCOL_INFO(data?: Partial<HTTP_SSL_PROTOCOL_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SSL_PROTOCOL_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Protocol !== undefined) view.setUint32(0, Number(data.Protocol), true);
  // 0x04: u32
  if (data?.CipherType !== undefined) view.setUint32(4, Number(data.CipherType), true);
  // 0x08: u32
  if (data?.CipherStrength !== undefined) view.setUint32(8, Number(data.CipherStrength), true);
  // 0x0c: u32
  if (data?.HashType !== undefined) view.setUint32(12, Number(data.HashType), true);
  // 0x10: u32
  if (data?.HashStrength !== undefined) view.setUint32(16, Number(data.HashStrength), true);
  // 0x14: u32
  if (data?.KeyExchangeType !== undefined) view.setUint32(20, Number(data.KeyExchangeType), true);
  // 0x18: u32
  if (data?.KeyExchangeStrength !== undefined) view.setUint32(24, Number(data.KeyExchangeStrength), true);
  // 0x1c: pad4
  return buf;
}

export class HTTP_SSL_PROTOCOL_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Protocol(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get CipherType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get CipherStrength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get HashType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get HashStrength(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get KeyExchangeType(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get KeyExchangeStrength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set Protocol(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set CipherType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set CipherStrength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set HashType(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set HashStrength(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set KeyExchangeType(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set KeyExchangeStrength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_REQUEST_SIZING_INFO (size: 24)
 */
export interface HTTP_REQUEST_SIZING_INFO {
  /** u64 */
  Flags: Deno.PointerValue;
  /** u32 */
  RequestIndex: number;
  /** u32 */
  RequestSizingCount: number;
  /** array */
  RequestSizing: Deno.PointerValue | null;
}

export const sizeofHTTP_REQUEST_SIZING_INFO = 24;

export function allocHTTP_REQUEST_SIZING_INFO(data?: Partial<HTTP_REQUEST_SIZING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_REQUEST_SIZING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Flags !== undefined) view.setBigUint64(0, BigInt(data.Flags), true);
  // 0x08: u32
  if (data?.RequestIndex !== undefined) view.setUint32(8, Number(data.RequestIndex), true);
  // 0x0c: u32
  if (data?.RequestSizingCount !== undefined) view.setUint32(12, Number(data.RequestSizingCount), true);
  // 0x10: pointer
  if (data?.RequestSizing !== undefined) view.setBigUint64(16, data.RequestSizing === null ? 0n : BigInt(util.toPointer(data.RequestSizing)), true);
  return buf;
}

export class HTTP_REQUEST_SIZING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Flags(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get RequestIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get RequestSizingCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get RequestSizing(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set Flags(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set RequestIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set RequestSizingCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set RequestSizing(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_REQUEST_TIMING_INFO (size: 16)
 */
export interface HTTP_REQUEST_TIMING_INFO {
  /** u32 */
  RequestTimingCount: number;
  /** array */
  RequestTiming: Deno.PointerValue | null;
}

export const sizeofHTTP_REQUEST_TIMING_INFO = 16;

export function allocHTTP_REQUEST_TIMING_INFO(data?: Partial<HTTP_REQUEST_TIMING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_REQUEST_TIMING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RequestTimingCount !== undefined) view.setUint32(0, Number(data.RequestTimingCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.RequestTiming !== undefined) view.setBigUint64(8, data.RequestTiming === null ? 0n : BigInt(util.toPointer(data.RequestTiming)), true);
  return buf;
}

export class HTTP_REQUEST_TIMING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get RequestTimingCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get RequestTiming(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set RequestTimingCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set RequestTiming(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_REQUEST_INFO (size: 16)
 */
export interface HTTP_REQUEST_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_REQUEST_INFO_TYPE */
  InfoType: HTTP_REQUEST_INFO_TYPE;
  /** u32 */
  InfoLength: number;
  /** ptr */
  pInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_REQUEST_INFO = 16;

export function allocHTTP_REQUEST_INFO(data?: Partial<HTTP_REQUEST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_REQUEST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.InfoType !== undefined) view.setInt32(0, Number(data.InfoType), true);
  // 0x04: u32
  if (data?.InfoLength !== undefined) view.setUint32(4, Number(data.InfoLength), true);
  // 0x08: pointer
  if (data?.pInfo !== undefined) view.setBigUint64(8, data.pInfo === null ? 0n : BigInt(util.toPointer(data.pInfo)), true);
  return buf;
}

export class HTTP_REQUEST_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get InfoType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get InfoLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set InfoType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set InfoLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

export type HRESULT = number;

/**
 * Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_INFO (size: 88)
 */
export interface HTTP_REQUEST_AUTH_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_AUTH_STATUS */
  AuthStatus: HTTP_AUTH_STATUS;
  /** Windows.Win32.Foundation.HRESULT */
  SecStatus: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Networking.HttpServer.HTTP_REQUEST_AUTH_TYPE */
  AuthType: HTTP_REQUEST_AUTH_TYPE;
  /** Windows.Win32.Foundation.HANDLE */
  AccessToken: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ContextAttributes: number;
  /** u32 */
  PackedContextLength: number;
  /** u32 */
  PackedContextType: number;
  /** ptr */
  PackedContext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  MutualAuthDataLength: number;
  /** Windows.Win32.Foundation.PSTR */
  pMutualAuthData: string | null | Uint8Array;
  /** u16 */
  PackageNameLength: number;
  /** Windows.Win32.Foundation.PWSTR */
  pPackageName: string | null | Uint8Array | Uint16Array;
}

export const sizeofHTTP_REQUEST_AUTH_INFO = 88;

export function allocHTTP_REQUEST_AUTH_INFO(data?: Partial<HTTP_REQUEST_AUTH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_REQUEST_AUTH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AuthStatus !== undefined) view.setInt32(0, Number(data.AuthStatus), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SecStatus !== undefined) view.setBigUint64(8, data.SecStatus === null ? 0n : BigInt(util.toPointer(data.SecStatus)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: i32
  if (data?.AuthType !== undefined) view.setInt32(20, Number(data.AuthType), true);
  // 0x18: pointer
  if (data?.AccessToken !== undefined) view.setBigUint64(24, data.AccessToken === null ? 0n : BigInt(util.toPointer(data.AccessToken)), true);
  // 0x20: u32
  if (data?.ContextAttributes !== undefined) view.setUint32(32, Number(data.ContextAttributes), true);
  // 0x24: u32
  if (data?.PackedContextLength !== undefined) view.setUint32(36, Number(data.PackedContextLength), true);
  // 0x28: u32
  if (data?.PackedContextType !== undefined) view.setUint32(40, Number(data.PackedContextType), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.PackedContext !== undefined) view.setBigUint64(48, data.PackedContext === null ? 0n : BigInt(util.toPointer(data.PackedContext)), true);
  // 0x38: u32
  if (data?.MutualAuthDataLength !== undefined) view.setUint32(56, Number(data.MutualAuthDataLength), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.pMutualAuthData !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.pMutualAuthData);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f64)), true);
  }
  // 0x48: u16
  if (data?.PackageNameLength !== undefined) view.setUint16(72, Number(data.PackageNameLength), true);
  // 0x4a: pad6
  // 0x50: buffer
  if (data?.pPackageName !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pPackageName);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f80)), true);
  }
  return buf;
}

export class HTTP_REQUEST_AUTH_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get AuthStatus(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SecStatus(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get AuthType(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: pointer
  get AccessToken(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get ContextAttributes(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get PackedContextLength(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get PackedContextType(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get PackedContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: u32
  get MutualAuthDataLength(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get pMutualAuthData(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: u16
  get PackageNameLength(): number {
    return this.view.getUint16(72, true);
  }

  // 0x4a: pad6

  // 0x50: buffer
  get pPackageName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set AuthStatus(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SecStatus(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set AuthType(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: pointer
  set AccessToken(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set ContextAttributes(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set PackedContextLength(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set PackedContextType(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set PackedContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }

  // 0x38: u32
  set MutualAuthDataLength(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set pMutualAuthData(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(util.toPointer((this.buf as any)._f64)), true);
  }

  // 0x48: u16
  set PackageNameLength(value: number) {
    this.view.setUint16(72, value, true);
  }

  // 0x4a: pad6

  // 0x50: buffer
  set pPackageName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(util.toPointer((this.buf as any)._f80)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1 (size: 128)
 */
export interface HTTP_REQUEST_V1 {
  /** u32 */
  Flags: number;
  /** u64 */
  ConnectionId: Deno.PointerValue;
  /** u64 */
  RequestId: Deno.PointerValue;
  /** u64 */
  UrlContext: Deno.PointerValue;
  /** Windows.Win32.Networking.HttpServer.HTTP_VERSION */
  Version: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_VERB */
  Verb: HTTP_VERB;
  /** u16 */
  UnknownVerbLength: number;
  /** u16 */
  RawUrlLength: number;
  /** Windows.Win32.Foundation.PSTR */
  pUnknownVerb: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pRawUrl: string | null | Uint8Array;
  /** Windows.Win32.Networking.HttpServer.HTTP_COOKED_URL */
  CookedUrl: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_TRANSPORT_ADDRESS */
  Address: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_REQUEST_HEADERS */
  Headers: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  BytesReceived: Deno.PointerValue;
  /** u16 */
  EntityChunkCount: number;
  /** ptr */
  pEntityChunks: Deno.PointerValue | Uint8Array | null;
  /** u64 */
  RawConnectionId: Deno.PointerValue;
  /** ptr */
  pSslInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_REQUEST_V1 = 128;

export function allocHTTP_REQUEST_V1(data?: Partial<HTTP_REQUEST_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_REQUEST_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.ConnectionId !== undefined) view.setBigUint64(8, BigInt(data.ConnectionId), true);
  // 0x10: u64
  if (data?.RequestId !== undefined) view.setBigUint64(16, BigInt(data.RequestId), true);
  // 0x18: u64
  if (data?.UrlContext !== undefined) view.setBigUint64(24, BigInt(data.UrlContext), true);
  // 0x20: pointer
  if (data?.Version !== undefined) view.setBigUint64(32, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  // 0x28: i32
  if (data?.Verb !== undefined) view.setInt32(40, Number(data.Verb), true);
  // 0x2c: u16
  if (data?.UnknownVerbLength !== undefined) view.setUint16(44, Number(data.UnknownVerbLength), true);
  // 0x2e: u16
  if (data?.RawUrlLength !== undefined) view.setUint16(46, Number(data.RawUrlLength), true);
  // 0x30: buffer
  if (data?.pUnknownVerb !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pUnknownVerb);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pRawUrl !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.pRawUrl);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: pointer
  if (data?.CookedUrl !== undefined) view.setBigUint64(64, data.CookedUrl === null ? 0n : BigInt(util.toPointer(data.CookedUrl)), true);
  // 0x48: pointer
  if (data?.Address !== undefined) view.setBigUint64(72, data.Address === null ? 0n : BigInt(util.toPointer(data.Address)), true);
  // 0x50: pointer
  if (data?.Headers !== undefined) view.setBigUint64(80, data.Headers === null ? 0n : BigInt(util.toPointer(data.Headers)), true);
  // 0x58: u64
  if (data?.BytesReceived !== undefined) view.setBigUint64(88, BigInt(data.BytesReceived), true);
  // 0x60: u16
  if (data?.EntityChunkCount !== undefined) view.setUint16(96, Number(data.EntityChunkCount), true);
  // 0x62: pad6
  // 0x68: pointer
  if (data?.pEntityChunks !== undefined) view.setBigUint64(104, data.pEntityChunks === null ? 0n : BigInt(util.toPointer(data.pEntityChunks)), true);
  // 0x70: u64
  if (data?.RawConnectionId !== undefined) view.setBigUint64(112, BigInt(data.RawConnectionId), true);
  // 0x78: pointer
  if (data?.pSslInfo !== undefined) view.setBigUint64(120, data.pSslInfo === null ? 0n : BigInt(util.toPointer(data.pSslInfo)), true);
  return buf;
}

export class HTTP_REQUEST_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get ConnectionId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get RequestId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get UrlContext(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get Version(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: i32
  get Verb(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u16
  get UnknownVerbLength(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: u16
  get RawUrlLength(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: buffer
  get pUnknownVerb(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: buffer
  get pRawUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get CookedUrl(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get Address(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get Headers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: u64
  get BytesReceived(): Deno.PointerValue {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x60: u16
  get EntityChunkCount(): number {
    return this.view.getUint16(96, true);
  }

  // 0x62: pad6

  // 0x68: pointer
  get pEntityChunks(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: u64
  get RawConnectionId(): Deno.PointerValue {
    return Number(this.view.getBigUint64(112, true));
  }

  // 0x78: pointer
  get pSslInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set ConnectionId(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set RequestId(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set UrlContext(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set Version(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: i32
  set Verb(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u16
  set UnknownVerbLength(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: u16
  set RawUrlLength(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: buffer
  set pUnknownVerb(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(util.toPointer((this.buf as any)._f48)), true);
  }

  // 0x38: buffer
  set pRawUrl(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(util.toPointer((this.buf as any)._f56)), true);
  }

  // 0x40: pointer
  set CookedUrl(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, BigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set Address(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, BigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set Headers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, BigInt(util.toPointer(value)), true);
  }

  // 0x58: u64
  set BytesReceived(value: Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(value), true);
  }

  // 0x60: u16
  set EntityChunkCount(value: number) {
    this.view.setUint16(96, value, true);
  }

  // 0x62: pad6

  // 0x68: pointer
  set pEntityChunks(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, BigInt(util.toPointer(value)), true);
  }

  // 0x70: u64
  set RawConnectionId(value: Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(value), true);
  }

  // 0x78: pointer
  set pSslInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V2 (size: 24)
 */
export interface HTTP_REQUEST_V2 {
  /** Windows.Win32.Networking.HttpServer.HTTP_REQUEST_V1 */
  Base: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  RequestInfoCount: number;
  /** ptr */
  pRequestInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_REQUEST_V2 = 24;

export function allocHTTP_REQUEST_V2(data?: Partial<HTTP_REQUEST_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_REQUEST_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(util.toPointer(data.Base)), true);
  // 0x08: u16
  if (data?.RequestInfoCount !== undefined) view.setUint16(8, Number(data.RequestInfoCount), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.pRequestInfo !== undefined) view.setBigUint64(16, data.pRequestInfo === null ? 0n : BigInt(util.toPointer(data.pRequestInfo)), true);
  return buf;
}

export class HTTP_REQUEST_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get RequestInfoCount(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get pRequestInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set RequestInfoCount(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set pRequestInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V1 (size: 56)
 */
export interface HTTP_RESPONSE_V1 {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Networking.HttpServer.HTTP_VERSION */
  Version: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  StatusCode: number;
  /** u16 */
  ReasonLength: number;
  /** Windows.Win32.Foundation.PSTR */
  pReason: string | null | Uint8Array;
  /** Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_HEADERS */
  Headers: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  EntityChunkCount: number;
  /** ptr */
  pEntityChunks: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_RESPONSE_V1 = 56;

export function allocHTTP_RESPONSE_V1(data?: Partial<HTTP_RESPONSE_V1>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_RESPONSE_V1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Version !== undefined) view.setBigUint64(8, data.Version === null ? 0n : BigInt(util.toPointer(data.Version)), true);
  // 0x10: u16
  if (data?.StatusCode !== undefined) view.setUint16(16, Number(data.StatusCode), true);
  // 0x12: u16
  if (data?.ReasonLength !== undefined) view.setUint16(18, Number(data.ReasonLength), true);
  // 0x14: pad4
  // 0x18: buffer
  if (data?.pReason !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pReason);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.Headers !== undefined) view.setBigUint64(32, data.Headers === null ? 0n : BigInt(util.toPointer(data.Headers)), true);
  // 0x28: u16
  if (data?.EntityChunkCount !== undefined) view.setUint16(40, Number(data.EntityChunkCount), true);
  // 0x2a: pad6
  // 0x30: pointer
  if (data?.pEntityChunks !== undefined) view.setBigUint64(48, data.pEntityChunks === null ? 0n : BigInt(util.toPointer(data.pEntityChunks)), true);
  return buf;
}

export class HTTP_RESPONSE_V1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Version(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u16
  get StatusCode(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get ReasonLength(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  get pReason(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get Headers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: u16
  get EntityChunkCount(): number {
    return this.view.getUint16(40, true);
  }

  // 0x2a: pad6

  // 0x30: pointer
  get pEntityChunks(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Version(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u16
  set StatusCode(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set ReasonLength(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: pad4

  // 0x18: buffer
  set pReason(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: pointer
  set Headers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, BigInt(util.toPointer(value)), true);
  }

  // 0x28: u16
  set EntityChunkCount(value: number) {
    this.view.setUint16(40, value, true);
  }

  // 0x2a: pad6

  // 0x30: pointer
  set pEntityChunks(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_INFO (size: 16)
 */
export interface HTTP_RESPONSE_INFO {
  /** Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_INFO_TYPE */
  Type: HTTP_RESPONSE_INFO_TYPE;
  /** u32 */
  Length: number;
  /** ptr */
  pInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_RESPONSE_INFO = 16;

export function allocHTTP_RESPONSE_INFO(data?: Partial<HTTP_RESPONSE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_RESPONSE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Length !== undefined) view.setUint32(4, Number(data.Length), true);
  // 0x08: pointer
  if (data?.pInfo !== undefined) view.setBigUint64(8, data.pInfo === null ? 0n : BigInt(util.toPointer(data.pInfo)), true);
  return buf;
}

export class HTTP_RESPONSE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Length(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Length(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_MULTIPLE_KNOWN_HEADERS (size: 24)
 */
export interface HTTP_MULTIPLE_KNOWN_HEADERS {
  /** Windows.Win32.Networking.HttpServer.HTTP_HEADER_ID */
  HeaderId: HTTP_HEADER_ID;
  /** u32 */
  Flags: number;
  /** u16 */
  KnownHeaderCount: number;
  /** ptr */
  KnownHeaders: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_MULTIPLE_KNOWN_HEADERS = 24;

export function allocHTTP_MULTIPLE_KNOWN_HEADERS(data?: Partial<HTTP_MULTIPLE_KNOWN_HEADERS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_MULTIPLE_KNOWN_HEADERS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.HeaderId !== undefined) view.setInt32(0, Number(data.HeaderId), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u16
  if (data?.KnownHeaderCount !== undefined) view.setUint16(8, Number(data.KnownHeaderCount), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.KnownHeaders !== undefined) view.setBigUint64(16, data.KnownHeaders === null ? 0n : BigInt(util.toPointer(data.KnownHeaders)), true);
  return buf;
}

export class HTTP_MULTIPLE_KNOWN_HEADERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get HeaderId(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get KnownHeaderCount(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get KnownHeaders(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set HeaderId(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set KnownHeaderCount(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set KnownHeaders(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V2 (size: 24)
 */
export interface HTTP_RESPONSE_V2 {
  /** Windows.Win32.Networking.HttpServer.HTTP_RESPONSE_V1 */
  Base: Uint8Array | Deno.PointerValue | null;
  /** u16 */
  ResponseInfoCount: number;
  /** ptr */
  pResponseInfo: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_RESPONSE_V2 = 24;

export function allocHTTP_RESPONSE_V2(data?: Partial<HTTP_RESPONSE_V2>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_RESPONSE_V2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : BigInt(util.toPointer(data.Base)), true);
  // 0x08: u16
  if (data?.ResponseInfoCount !== undefined) view.setUint16(8, Number(data.ResponseInfoCount), true);
  // 0x0a: pad6
  // 0x10: pointer
  if (data?.pResponseInfo !== undefined) view.setBigUint64(16, data.pResponseInfo === null ? 0n : BigInt(util.toPointer(data.pResponseInfo)), true);
  return buf;
}

export class HTTP_RESPONSE_V2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u16
  get ResponseInfoCount(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  get pResponseInfo(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u16
  set ResponseInfoCount(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6

  // 0x10: pointer
  set pResponseInfo(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION (size: 8)
 */
export interface HTTPAPI_VERSION {
  /** u16 */
  HttpApiMajorVersion: number;
  /** u16 */
  HttpApiMinorVersion: number;
}

export const sizeofHTTPAPI_VERSION = 8;

export function allocHTTPAPI_VERSION(data?: Partial<HTTPAPI_VERSION>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTPAPI_VERSION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.HttpApiMajorVersion !== undefined) view.setUint16(0, Number(data.HttpApiMajorVersion), true);
  // 0x02: u16
  if (data?.HttpApiMinorVersion !== undefined) view.setUint16(2, Number(data.HttpApiMinorVersion), true);
  // 0x04: pad4
  return buf;
}

export class HTTPAPI_VERSIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get HttpApiMajorVersion(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get HttpApiMinorVersion(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x00: u16
  set HttpApiMajorVersion(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set HttpApiMinorVersion(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_CACHE_POLICY (size: 8)
 */
export interface HTTP_CACHE_POLICY {
  /** Windows.Win32.Networking.HttpServer.HTTP_CACHE_POLICY_TYPE */
  Policy: HTTP_CACHE_POLICY_TYPE;
  /** u32 */
  SecondsToLive: number;
}

export const sizeofHTTP_CACHE_POLICY = 8;

export function allocHTTP_CACHE_POLICY(data?: Partial<HTTP_CACHE_POLICY>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_CACHE_POLICY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Policy !== undefined) view.setInt32(0, Number(data.Policy), true);
  // 0x04: u32
  if (data?.SecondsToLive !== undefined) view.setUint32(4, Number(data.SecondsToLive), true);
  return buf;
}

export class HTTP_CACHE_POLICYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Policy(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get SecondsToLive(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set Policy(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set SecondsToLive(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_KEY (size: 8)
 */
export interface HTTP_SERVICE_CONFIG_SSL_KEY {
  /** ptr */
  pIpPort: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_KEY = 8;

export function allocHTTP_SERVICE_CONFIG_SSL_KEY(data?: Partial<HTTP_SERVICE_CONFIG_SSL_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pIpPort !== undefined) view.setBigUint64(0, data.pIpPort === null ? 0n : BigInt(util.toPointer(data.pIpPort)), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pIpPort(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pIpPort(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE (size: 32)
 */
export interface SOCKADDR_STORAGE {
  /** u16 */
  ss_family: number;
  /** array */
  __ss_pad1: Deno.PointerValue | null;
  /** i64 */
  __ss_align: Deno.PointerValue;
  /** array */
  __ss_pad2: Deno.PointerValue | null;
}

export const sizeofSOCKADDR_STORAGE = 32;

export function allocSOCKADDR_STORAGE(data?: Partial<SOCKADDR_STORAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofSOCKADDR_STORAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.ss_family !== undefined) view.setUint16(0, Number(data.ss_family), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.__ss_pad1 !== undefined) view.setBigUint64(8, data.__ss_pad1 === null ? 0n : BigInt(util.toPointer(data.__ss_pad1)), true);
  // 0x10: i64
  if (data?.__ss_align !== undefined) view.setBigInt64(16, BigInt(data.__ss_align), true);
  // 0x18: pointer
  if (data?.__ss_pad2 !== undefined) view.setBigUint64(24, data.__ss_pad2 === null ? 0n : BigInt(util.toPointer(data.__ss_pad2)), true);
  return buf;
}

export class SOCKADDR_STORAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get ss_family(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get __ss_pad1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: i64
  get __ss_align(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: pointer
  get __ss_pad2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set ss_family(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set __ss_pad1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: i64
  set __ss_align(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set __ss_pad2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_KEY_EX (size: 8)
 */
export interface HTTP_SERVICE_CONFIG_SSL_KEY_EX {
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  IpPort: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_KEY_EX = 8;

export function allocHTTP_SERVICE_CONFIG_SSL_KEY_EX(data?: Partial<HTTP_SERVICE_CONFIG_SSL_KEY_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_KEY_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IpPort !== undefined) view.setBigUint64(0, data.IpPort === null ? 0n : BigInt(util.toPointer(data.IpPort)), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_KEY_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get IpPort(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set IpPort(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_SNI_KEY (size: 16)
 */
export interface HTTP_SERVICE_CONFIG_SSL_SNI_KEY {
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  IpPort: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  Host: string | null | Uint8Array | Uint16Array;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_SNI_KEY = 16;

export function allocHTTP_SERVICE_CONFIG_SSL_SNI_KEY(data?: Partial<HTTP_SERVICE_CONFIG_SSL_SNI_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_SNI_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.IpPort !== undefined) view.setBigUint64(0, data.IpPort === null ? 0n : BigInt(util.toPointer(data.IpPort)), true);
  // 0x08: buffer
  if (data?.Host !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Host);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_SNI_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get IpPort(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Host(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set IpPort(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: buffer
  set Host(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_CCS_KEY (size: 8)
 */
export interface HTTP_SERVICE_CONFIG_SSL_CCS_KEY {
  /** Windows.Win32.Networking.WinSock.SOCKADDR_STORAGE */
  LocalAddress: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_CCS_KEY = 8;

export function allocHTTP_SERVICE_CONFIG_SSL_CCS_KEY(data?: Partial<HTTP_SERVICE_CONFIG_SSL_CCS_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_CCS_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LocalAddress !== undefined) view.setBigUint64(0, data.LocalAddress === null ? 0n : BigInt(util.toPointer(data.LocalAddress)), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_CCS_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LocalAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set LocalAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_PARAM (size: 72)
 */
export interface HTTP_SERVICE_CONFIG_SSL_PARAM {
  /** u32 */
  SslHashLength: number;
  /** ptr */
  pSslHash: Deno.PointerValue | Uint8Array | null;
  /** System.Guid */
  AppId: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  pSslCertStoreName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  DefaultCertCheckMode: number;
  /** u32 */
  DefaultRevocationFreshnessTime: number;
  /** u32 */
  DefaultRevocationUrlRetrievalTimeout: number;
  /** Windows.Win32.Foundation.PWSTR */
  pDefaultSslCtlIdentifier: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDefaultSslCtlStoreName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  DefaultFlags: number;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_PARAM = 72;

export function allocHTTP_SERVICE_CONFIG_SSL_PARAM(data?: Partial<HTTP_SERVICE_CONFIG_SSL_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SslHashLength !== undefined) view.setUint32(0, Number(data.SslHashLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pSslHash !== undefined) view.setBigUint64(8, data.pSslHash === null ? 0n : BigInt(util.toPointer(data.pSslHash)), true);
  // 0x10: pointer
  if (data?.AppId !== undefined) view.setBigUint64(16, data.AppId === null ? 0n : BigInt(util.toPointer(data.AppId)), true);
  // 0x18: buffer
  if (data?.pSslCertStoreName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pSslCertStoreName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: u32
  if (data?.DefaultCertCheckMode !== undefined) view.setUint32(32, Number(data.DefaultCertCheckMode), true);
  // 0x24: u32
  if (data?.DefaultRevocationFreshnessTime !== undefined) view.setUint32(36, Number(data.DefaultRevocationFreshnessTime), true);
  // 0x28: u32
  if (data?.DefaultRevocationUrlRetrievalTimeout !== undefined) view.setUint32(40, Number(data.DefaultRevocationUrlRetrievalTimeout), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.pDefaultSslCtlIdentifier !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pDefaultSslCtlIdentifier);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f48)), true);
  }
  // 0x38: buffer
  if (data?.pDefaultSslCtlStoreName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pDefaultSslCtlStoreName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f56)), true);
  }
  // 0x40: u32
  if (data?.DefaultFlags !== undefined) view.setUint32(64, Number(data.DefaultFlags), true);
  // 0x44: pad4
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SslHashLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pSslHash(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get AppId(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: buffer
  get pSslCertStoreName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get DefaultCertCheckMode(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get DefaultRevocationFreshnessTime(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get DefaultRevocationUrlRetrievalTimeout(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  get pDefaultSslCtlIdentifier(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: buffer
  get pDefaultSslCtlStoreName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: u32
  get DefaultFlags(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set SslHashLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pSslHash(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set AppId(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }

  // 0x18: buffer
  set pSslCertStoreName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(util.toPointer((this.buf as any)._f24)), true);
  }

  // 0x20: u32
  set DefaultCertCheckMode(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set DefaultRevocationFreshnessTime(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set DefaultRevocationUrlRetrievalTimeout(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  set pDefaultSslCtlIdentifier(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(util.toPointer((this.buf as any)._f48)), true);
  }

  // 0x38: buffer
  set pDefaultSslCtlStoreName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(util.toPointer((this.buf as any)._f56)), true);
  }

  // 0x40: u32
  set DefaultFlags(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP2_WINDOW_SIZE_PARAM (size: 8)
 */
export interface HTTP2_WINDOW_SIZE_PARAM {
  /** u32 */
  Http2ReceiveWindowSize: number;
}

export const sizeofHTTP2_WINDOW_SIZE_PARAM = 8;

export function allocHTTP2_WINDOW_SIZE_PARAM(data?: Partial<HTTP2_WINDOW_SIZE_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP2_WINDOW_SIZE_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Http2ReceiveWindowSize !== undefined) view.setUint32(0, Number(data.Http2ReceiveWindowSize), true);
  // 0x04: pad4
  return buf;
}

export class HTTP2_WINDOW_SIZE_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Http2ReceiveWindowSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set Http2ReceiveWindowSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP2_SETTINGS_LIMITS_PARAM (size: 8)
 */
export interface HTTP2_SETTINGS_LIMITS_PARAM {
  /** u32 */
  Http2MaxSettingsPerFrame: number;
  /** u32 */
  Http2MaxSettingsPerMinute: number;
}

export const sizeofHTTP2_SETTINGS_LIMITS_PARAM = 8;

export function allocHTTP2_SETTINGS_LIMITS_PARAM(data?: Partial<HTTP2_SETTINGS_LIMITS_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP2_SETTINGS_LIMITS_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Http2MaxSettingsPerFrame !== undefined) view.setUint32(0, Number(data.Http2MaxSettingsPerFrame), true);
  // 0x04: u32
  if (data?.Http2MaxSettingsPerMinute !== undefined) view.setUint32(4, Number(data.Http2MaxSettingsPerMinute), true);
  return buf;
}

export class HTTP2_SETTINGS_LIMITS_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Http2MaxSettingsPerFrame(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Http2MaxSettingsPerMinute(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Http2MaxSettingsPerFrame(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Http2MaxSettingsPerMinute(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_PERFORMANCE_PARAM (size: 16)
 */
export interface HTTP_PERFORMANCE_PARAM {
  /** Windows.Win32.Networking.HttpServer.HTTP_PERFORMANCE_PARAM_TYPE */
  Type: HTTP_PERFORMANCE_PARAM_TYPE;
  /** u32 */
  BufferSize: number;
  /** ptr */
  Buffer: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_PERFORMANCE_PARAM = 16;

export function allocHTTP_PERFORMANCE_PARAM(data?: Partial<HTTP_PERFORMANCE_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_PERFORMANCE_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.BufferSize !== undefined) view.setUint32(4, Number(data.BufferSize), true);
  // 0x08: pointer
  if (data?.Buffer !== undefined) view.setBigUint64(8, data.Buffer === null ? 0n : BigInt(util.toPointer(data.Buffer)), true);
  return buf;
}

export class HTTP_PERFORMANCE_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get Type(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get BufferSize(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Buffer(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set Type(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set BufferSize(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Buffer(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_TLS_RESTRICTIONS_PARAM (size: 16)
 */
export interface HTTP_TLS_RESTRICTIONS_PARAM {
  /** u32 */
  RestrictionCount: number;
  /** ptr */
  TlsRestrictions: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_TLS_RESTRICTIONS_PARAM = 16;

export function allocHTTP_TLS_RESTRICTIONS_PARAM(data?: Partial<HTTP_TLS_RESTRICTIONS_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_TLS_RESTRICTIONS_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RestrictionCount !== undefined) view.setUint32(0, Number(data.RestrictionCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.TlsRestrictions !== undefined) view.setBigUint64(8, data.TlsRestrictions === null ? 0n : BigInt(util.toPointer(data.TlsRestrictions)), true);
  return buf;
}

export class HTTP_TLS_RESTRICTIONS_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get RestrictionCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get TlsRestrictions(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set RestrictionCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set TlsRestrictions(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_ERROR_HEADERS_PARAM (size: 16)
 */
export interface HTTP_ERROR_HEADERS_PARAM {
  /** u16 */
  StatusCode: number;
  /** u16 */
  HeaderCount: number;
  /** ptr */
  Headers: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_ERROR_HEADERS_PARAM = 16;

export function allocHTTP_ERROR_HEADERS_PARAM(data?: Partial<HTTP_ERROR_HEADERS_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_ERROR_HEADERS_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.StatusCode !== undefined) view.setUint16(0, Number(data.StatusCode), true);
  // 0x02: u16
  if (data?.HeaderCount !== undefined) view.setUint16(2, Number(data.HeaderCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Headers !== undefined) view.setBigUint64(8, data.Headers === null ? 0n : BigInt(util.toPointer(data.Headers)), true);
  return buf;
}

export class HTTP_ERROR_HEADERS_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get StatusCode(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get HeaderCount(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Headers(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set StatusCode(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set HeaderCount(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Headers(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_TLS_SESSION_TICKET_KEYS_PARAM (size: 16)
 */
export interface HTTP_TLS_SESSION_TICKET_KEYS_PARAM {
  /** u32 */
  SessionTicketKeyCount: number;
  /** ptr */
  SessionTicketKeys: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_TLS_SESSION_TICKET_KEYS_PARAM = 16;

export function allocHTTP_TLS_SESSION_TICKET_KEYS_PARAM(data?: Partial<HTTP_TLS_SESSION_TICKET_KEYS_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_TLS_SESSION_TICKET_KEYS_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SessionTicketKeyCount !== undefined) view.setUint32(0, Number(data.SessionTicketKeyCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SessionTicketKeys !== undefined) view.setBigUint64(8, data.SessionTicketKeys === null ? 0n : BigInt(util.toPointer(data.SessionTicketKeys)), true);
  return buf;
}

export class HTTP_TLS_SESSION_TICKET_KEYS_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get SessionTicketKeyCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SessionTicketKeys(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set SessionTicketKeyCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SessionTicketKeys(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_PARAM_EX (size: 24)
 */
export interface HTTP_SERVICE_CONFIG_SSL_PARAM_EX {
  /** Windows.Win32.Networking.HttpServer.HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE */
  ParamType: HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE;
  /** u64 */
  Flags: Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_PARAM_EX = 24;

export function allocHTTP_SERVICE_CONFIG_SSL_PARAM_EX(data?: Partial<HTTP_SERVICE_CONFIG_SSL_PARAM_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_PARAM_EX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ParamType !== undefined) view.setInt32(0, Number(data.ParamType), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Flags !== undefined) view.setBigUint64(8, BigInt(data.Flags), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_PARAM_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ParamType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: u64
  get Flags(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set ParamType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: u64
  set Flags(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_SET (size: 16)
 */
export interface HTTP_SERVICE_CONFIG_SSL_SET {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_KEY */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_PARAM */
  ParamDesc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_SET = 16;

export function allocHTTP_SERVICE_CONFIG_SSL_SET(data?: Partial<HTTP_SERVICE_CONFIG_SSL_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_SET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(0, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x08: pointer
  if (data?.ParamDesc !== undefined) view.setBigUint64(8, data.ParamDesc === null ? 0n : BigInt(util.toPointer(data.ParamDesc)), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ParamDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ParamDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_SNI_SET (size: 16)
 */
export interface HTTP_SERVICE_CONFIG_SSL_SNI_SET {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_SNI_KEY */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_PARAM */
  ParamDesc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_SNI_SET = 16;

export function allocHTTP_SERVICE_CONFIG_SSL_SNI_SET(data?: Partial<HTTP_SERVICE_CONFIG_SSL_SNI_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_SNI_SET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(0, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x08: pointer
  if (data?.ParamDesc !== undefined) view.setBigUint64(8, data.ParamDesc === null ? 0n : BigInt(util.toPointer(data.ParamDesc)), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_SNI_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ParamDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ParamDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_CCS_SET (size: 16)
 */
export interface HTTP_SERVICE_CONFIG_SSL_CCS_SET {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_CCS_KEY */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_PARAM */
  ParamDesc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_CCS_SET = 16;

export function allocHTTP_SERVICE_CONFIG_SSL_CCS_SET(data?: Partial<HTTP_SERVICE_CONFIG_SSL_CCS_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_CCS_SET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(0, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x08: pointer
  if (data?.ParamDesc !== undefined) view.setBigUint64(8, data.ParamDesc === null ? 0n : BigInt(util.toPointer(data.ParamDesc)), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_CCS_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ParamDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ParamDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_SET_EX (size: 16)
 */
export interface HTTP_SERVICE_CONFIG_SSL_SET_EX {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_KEY_EX */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_PARAM_EX */
  ParamDesc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_SET_EX = 16;

export function allocHTTP_SERVICE_CONFIG_SSL_SET_EX(data?: Partial<HTTP_SERVICE_CONFIG_SSL_SET_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_SET_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(0, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x08: pointer
  if (data?.ParamDesc !== undefined) view.setBigUint64(8, data.ParamDesc === null ? 0n : BigInt(util.toPointer(data.ParamDesc)), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_SET_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ParamDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ParamDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX (size: 16)
 */
export interface HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_SNI_KEY */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_PARAM_EX */
  ParamDesc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_SNI_SET_EX = 16;

export function allocHTTP_SERVICE_CONFIG_SSL_SNI_SET_EX(data?: Partial<HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_SNI_SET_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(0, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x08: pointer
  if (data?.ParamDesc !== undefined) view.setBigUint64(8, data.ParamDesc === null ? 0n : BigInt(util.toPointer(data.ParamDesc)), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_SNI_SET_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ParamDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ParamDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX (size: 16)
 */
export interface HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_CCS_KEY */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_PARAM_EX */
  ParamDesc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_CCS_SET_EX = 16;

export function allocHTTP_SERVICE_CONFIG_SSL_CCS_SET_EX(data?: Partial<HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_CCS_SET_EX);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(0, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x08: pointer
  if (data?.ParamDesc !== undefined) view.setBigUint64(8, data.ParamDesc === null ? 0n : BigInt(util.toPointer(data.ParamDesc)), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_CCS_SET_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ParamDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ParamDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_QUERY (size: 24)
 */
export interface HTTP_SERVICE_CONFIG_SSL_QUERY {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_QUERY_TYPE */
  QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_KEY */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwToken: number;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_QUERY = 24;

export function allocHTTP_SERVICE_CONFIG_SSL_QUERY(data?: Partial<HTTP_SERVICE_CONFIG_SSL_QUERY>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_QUERY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.QueryDesc !== undefined) view.setInt32(0, Number(data.QueryDesc), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(8, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x10: u32
  if (data?.dwToken !== undefined) view.setUint32(16, Number(data.dwToken), true);
  // 0x14: pad4
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_QUERYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get QueryDesc(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwToken(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set QueryDesc(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwToken(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_SNI_QUERY (size: 24)
 */
export interface HTTP_SERVICE_CONFIG_SSL_SNI_QUERY {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_QUERY_TYPE */
  QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_SNI_KEY */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwToken: number;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_SNI_QUERY = 24;

export function allocHTTP_SERVICE_CONFIG_SSL_SNI_QUERY(data?: Partial<HTTP_SERVICE_CONFIG_SSL_SNI_QUERY>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_SNI_QUERY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.QueryDesc !== undefined) view.setInt32(0, Number(data.QueryDesc), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(8, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x10: u32
  if (data?.dwToken !== undefined) view.setUint32(16, Number(data.dwToken), true);
  // 0x14: pad4
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_SNI_QUERYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get QueryDesc(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwToken(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set QueryDesc(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwToken(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_CCS_QUERY (size: 24)
 */
export interface HTTP_SERVICE_CONFIG_SSL_CCS_QUERY {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_QUERY_TYPE */
  QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_CCS_KEY */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwToken: number;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_CCS_QUERY = 24;

export function allocHTTP_SERVICE_CONFIG_SSL_CCS_QUERY(data?: Partial<HTTP_SERVICE_CONFIG_SSL_CCS_QUERY>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_CCS_QUERY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.QueryDesc !== undefined) view.setInt32(0, Number(data.QueryDesc), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(8, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x10: u32
  if (data?.dwToken !== undefined) view.setUint32(16, Number(data.dwToken), true);
  // 0x14: pad4
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_CCS_QUERYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get QueryDesc(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwToken(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set QueryDesc(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwToken(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_QUERY_EX (size: 24)
 */
export interface HTTP_SERVICE_CONFIG_SSL_QUERY_EX {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_QUERY_TYPE */
  QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_KEY_EX */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwToken: number;
  /** Windows.Win32.Networking.HttpServer.HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE */
  ParamType: HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_QUERY_EX = 24;

export function allocHTTP_SERVICE_CONFIG_SSL_QUERY_EX(data?: Partial<HTTP_SERVICE_CONFIG_SSL_QUERY_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_QUERY_EX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.QueryDesc !== undefined) view.setInt32(0, Number(data.QueryDesc), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(8, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x10: u32
  if (data?.dwToken !== undefined) view.setUint32(16, Number(data.dwToken), true);
  // 0x14: i32
  if (data?.ParamType !== undefined) view.setInt32(20, Number(data.ParamType), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_QUERY_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get QueryDesc(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwToken(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get ParamType(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: i32
  set QueryDesc(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwToken(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set ParamType(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX (size: 24)
 */
export interface HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_QUERY_TYPE */
  QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_SNI_KEY */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwToken: number;
  /** Windows.Win32.Networking.HttpServer.HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE */
  ParamType: HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX = 24;

export function allocHTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX(data?: Partial<HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.QueryDesc !== undefined) view.setInt32(0, Number(data.QueryDesc), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(8, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x10: u32
  if (data?.dwToken !== undefined) view.setUint32(16, Number(data.dwToken), true);
  // 0x14: i32
  if (data?.ParamType !== undefined) view.setInt32(20, Number(data.ParamType), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get QueryDesc(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwToken(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get ParamType(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: i32
  set QueryDesc(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwToken(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set ParamType(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX (size: 24)
 */
export interface HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_QUERY_TYPE */
  QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_SSL_CCS_KEY */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwToken: number;
  /** Windows.Win32.Networking.HttpServer.HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE */
  ParamType: HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE;
}

export const sizeofHTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX = 24;

export function allocHTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX(data?: Partial<HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.QueryDesc !== undefined) view.setInt32(0, Number(data.QueryDesc), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(8, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x10: u32
  if (data?.dwToken !== undefined) view.setUint32(16, Number(data.dwToken), true);
  // 0x14: i32
  if (data?.ParamType !== undefined) view.setInt32(20, Number(data.ParamType), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get QueryDesc(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwToken(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get ParamType(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: i32
  set QueryDesc(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwToken(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set ParamType(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM (size: 16)
 */
export interface HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM {
  /** u16 */
  AddrLength: number;
  /** ptr */
  pAddress: Deno.PointerValue | Uint8Array | null;
}

export const sizeofHTTP_SERVICE_CONFIG_IP_LISTEN_PARAM = 16;

export function allocHTTP_SERVICE_CONFIG_IP_LISTEN_PARAM(data?: Partial<HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_IP_LISTEN_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.AddrLength !== undefined) view.setUint16(0, Number(data.AddrLength), true);
  // 0x02: pad6
  // 0x08: pointer
  if (data?.pAddress !== undefined) view.setBigUint64(8, data.pAddress === null ? 0n : BigInt(util.toPointer(data.pAddress)), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_IP_LISTEN_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get AddrLength(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  get pAddress(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u16
  set AddrLength(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: pad6

  // 0x08: pointer
  set pAddress(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY (size: 16)
 */
export interface HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY {
  /** u32 */
  AddrCount: number;
  /** array */
  AddrList: Deno.PointerValue | null;
}

export const sizeofHTTP_SERVICE_CONFIG_IP_LISTEN_QUERY = 16;

export function allocHTTP_SERVICE_CONFIG_IP_LISTEN_QUERY(data?: Partial<HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_IP_LISTEN_QUERY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AddrCount !== undefined) view.setUint32(0, Number(data.AddrCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.AddrList !== undefined) view.setBigUint64(8, data.AddrList === null ? 0n : BigInt(util.toPointer(data.AddrList)), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_IP_LISTEN_QUERYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AddrCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get AddrList(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set AddrCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set AddrList(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_URLACL_KEY (size: 8)
 */
export interface HTTP_SERVICE_CONFIG_URLACL_KEY {
  /** Windows.Win32.Foundation.PWSTR */
  pUrlPrefix: string | null | Uint8Array | Uint16Array;
}

export const sizeofHTTP_SERVICE_CONFIG_URLACL_KEY = 8;

export function allocHTTP_SERVICE_CONFIG_URLACL_KEY(data?: Partial<HTTP_SERVICE_CONFIG_URLACL_KEY>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_URLACL_KEY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pUrlPrefix !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pUrlPrefix);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

export class HTTP_SERVICE_CONFIG_URLACL_KEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pUrlPrefix(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pUrlPrefix(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_URLACL_PARAM (size: 8)
 */
export interface HTTP_SERVICE_CONFIG_URLACL_PARAM {
  /** Windows.Win32.Foundation.PWSTR */
  pStringSecurityDescriptor: string | null | Uint8Array | Uint16Array;
}

export const sizeofHTTP_SERVICE_CONFIG_URLACL_PARAM = 8;

export function allocHTTP_SERVICE_CONFIG_URLACL_PARAM(data?: Partial<HTTP_SERVICE_CONFIG_URLACL_PARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_URLACL_PARAM);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pStringSecurityDescriptor !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pStringSecurityDescriptor);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  return buf;
}

export class HTTP_SERVICE_CONFIG_URLACL_PARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pStringSecurityDescriptor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pStringSecurityDescriptor(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_URLACL_SET (size: 16)
 */
export interface HTTP_SERVICE_CONFIG_URLACL_SET {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_URLACL_KEY */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_URLACL_PARAM */
  ParamDesc: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_SERVICE_CONFIG_URLACL_SET = 16;

export function allocHTTP_SERVICE_CONFIG_URLACL_SET(data?: Partial<HTTP_SERVICE_CONFIG_URLACL_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_URLACL_SET);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(0, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x08: pointer
  if (data?.ParamDesc !== undefined) view.setBigUint64(8, data.ParamDesc === null ? 0n : BigInt(util.toPointer(data.ParamDesc)), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_URLACL_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get ParamDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set ParamDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_URLACL_QUERY (size: 24)
 */
export interface HTTP_SERVICE_CONFIG_URLACL_QUERY {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_QUERY_TYPE */
  QueryDesc: HTTP_SERVICE_CONFIG_QUERY_TYPE;
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_URLACL_KEY */
  KeyDesc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  dwToken: number;
}

export const sizeofHTTP_SERVICE_CONFIG_URLACL_QUERY = 24;

export function allocHTTP_SERVICE_CONFIG_URLACL_QUERY(data?: Partial<HTTP_SERVICE_CONFIG_URLACL_QUERY>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_URLACL_QUERY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.QueryDesc !== undefined) view.setInt32(0, Number(data.QueryDesc), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.KeyDesc !== undefined) view.setBigUint64(8, data.KeyDesc === null ? 0n : BigInt(util.toPointer(data.KeyDesc)), true);
  // 0x10: u32
  if (data?.dwToken !== undefined) view.setUint32(16, Number(data.dwToken), true);
  // 0x14: pad4
  return buf;
}

export class HTTP_SERVICE_CONFIG_URLACL_QUERYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get QueryDesc(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get KeyDesc(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get dwToken(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set QueryDesc(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set KeyDesc(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set dwToken(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_CACHE_SET (size: 8)
 */
export interface HTTP_SERVICE_CONFIG_CACHE_SET {
  /** Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_CACHE_KEY */
  KeyDesc: HTTP_SERVICE_CONFIG_CACHE_KEY;
  /** u32 */
  ParamDesc: number;
}

export const sizeofHTTP_SERVICE_CONFIG_CACHE_SET = 8;

export function allocHTTP_SERVICE_CONFIG_CACHE_SET(data?: Partial<HTTP_SERVICE_CONFIG_CACHE_SET>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_SERVICE_CONFIG_CACHE_SET);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.KeyDesc !== undefined) view.setInt32(0, Number(data.KeyDesc), true);
  // 0x04: u32
  if (data?.ParamDesc !== undefined) view.setUint32(4, Number(data.ParamDesc), true);
  return buf;
}

export class HTTP_SERVICE_CONFIG_CACHE_SETView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get KeyDesc(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get ParamDesc(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set KeyDesc(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set ParamDesc(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_QUERY_REQUEST_QUALIFIER_TCP (size: 8)
 */
export interface HTTP_QUERY_REQUEST_QUALIFIER_TCP {
  /** u64 */
  Freshness: Deno.PointerValue;
}

export const sizeofHTTP_QUERY_REQUEST_QUALIFIER_TCP = 8;

export function allocHTTP_QUERY_REQUEST_QUALIFIER_TCP(data?: Partial<HTTP_QUERY_REQUEST_QUALIFIER_TCP>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_QUERY_REQUEST_QUALIFIER_TCP);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Freshness !== undefined) view.setBigUint64(0, BigInt(data.Freshness), true);
  return buf;
}

export class HTTP_QUERY_REQUEST_QUALIFIER_TCPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Freshness(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: u64
  set Freshness(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_QUERY_REQUEST_QUALIFIER_QUIC (size: 8)
 */
export interface HTTP_QUERY_REQUEST_QUALIFIER_QUIC {
  /** u64 */
  Freshness: Deno.PointerValue;
}

export const sizeofHTTP_QUERY_REQUEST_QUALIFIER_QUIC = 8;

export function allocHTTP_QUERY_REQUEST_QUALIFIER_QUIC(data?: Partial<HTTP_QUERY_REQUEST_QUALIFIER_QUIC>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_QUERY_REQUEST_QUALIFIER_QUIC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Freshness !== undefined) view.setBigUint64(0, BigInt(data.Freshness), true);
  return buf;
}

export class HTTP_QUERY_REQUEST_QUALIFIER_QUICView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Freshness(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: u64
  set Freshness(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_REQUEST_PROPERTY_SNI (size: 16)
 */
export interface HTTP_REQUEST_PROPERTY_SNI {
  /** array */
  Hostname: Deno.PointerValue | null;
  /** u32 */
  Flags: number;
}

export const sizeofHTTP_REQUEST_PROPERTY_SNI = 16;

export function allocHTTP_REQUEST_PROPERTY_SNI(data?: Partial<HTTP_REQUEST_PROPERTY_SNI>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_REQUEST_PROPERTY_SNI);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Hostname !== undefined) view.setBigUint64(0, data.Hostname === null ? 0n : BigInt(util.toPointer(data.Hostname)), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

export class HTTP_REQUEST_PROPERTY_SNIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Hostname(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get Flags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Hostname(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set Flags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_REQUEST_PROPERTY_STREAM_ERROR (size: 8)
 */
export interface HTTP_REQUEST_PROPERTY_STREAM_ERROR {
  /** u32 */
  ErrorCode: number;
}

export const sizeofHTTP_REQUEST_PROPERTY_STREAM_ERROR = 8;

export function allocHTTP_REQUEST_PROPERTY_STREAM_ERROR(data?: Partial<HTTP_REQUEST_PROPERTY_STREAM_ERROR>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_REQUEST_PROPERTY_STREAM_ERROR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ErrorCode !== undefined) view.setUint32(0, Number(data.ErrorCode), true);
  // 0x04: pad4
  return buf;
}

export class HTTP_REQUEST_PROPERTY_STREAM_ERRORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ErrorCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set ErrorCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_WSK_API_TIMINGS (size: 96)
 */
export interface HTTP_WSK_API_TIMINGS {
  /** u64 */
  ConnectCount: Deno.PointerValue;
  /** u64 */
  ConnectSum: Deno.PointerValue;
  /** u64 */
  DisconnectCount: Deno.PointerValue;
  /** u64 */
  DisconnectSum: Deno.PointerValue;
  /** u64 */
  SendCount: Deno.PointerValue;
  /** u64 */
  SendSum: Deno.PointerValue;
  /** u64 */
  ReceiveCount: Deno.PointerValue;
  /** u64 */
  ReceiveSum: Deno.PointerValue;
  /** u64 */
  ReleaseCount: Deno.PointerValue;
  /** u64 */
  ReleaseSum: Deno.PointerValue;
  /** u64 */
  ControlSocketCount: Deno.PointerValue;
  /** u64 */
  ControlSocketSum: Deno.PointerValue;
}

export const sizeofHTTP_WSK_API_TIMINGS = 96;

export function allocHTTP_WSK_API_TIMINGS(data?: Partial<HTTP_WSK_API_TIMINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_WSK_API_TIMINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ConnectCount !== undefined) view.setBigUint64(0, BigInt(data.ConnectCount), true);
  // 0x08: u64
  if (data?.ConnectSum !== undefined) view.setBigUint64(8, BigInt(data.ConnectSum), true);
  // 0x10: u64
  if (data?.DisconnectCount !== undefined) view.setBigUint64(16, BigInt(data.DisconnectCount), true);
  // 0x18: u64
  if (data?.DisconnectSum !== undefined) view.setBigUint64(24, BigInt(data.DisconnectSum), true);
  // 0x20: u64
  if (data?.SendCount !== undefined) view.setBigUint64(32, BigInt(data.SendCount), true);
  // 0x28: u64
  if (data?.SendSum !== undefined) view.setBigUint64(40, BigInt(data.SendSum), true);
  // 0x30: u64
  if (data?.ReceiveCount !== undefined) view.setBigUint64(48, BigInt(data.ReceiveCount), true);
  // 0x38: u64
  if (data?.ReceiveSum !== undefined) view.setBigUint64(56, BigInt(data.ReceiveSum), true);
  // 0x40: u64
  if (data?.ReleaseCount !== undefined) view.setBigUint64(64, BigInt(data.ReleaseCount), true);
  // 0x48: u64
  if (data?.ReleaseSum !== undefined) view.setBigUint64(72, BigInt(data.ReleaseSum), true);
  // 0x50: u64
  if (data?.ControlSocketCount !== undefined) view.setBigUint64(80, BigInt(data.ControlSocketCount), true);
  // 0x58: u64
  if (data?.ControlSocketSum !== undefined) view.setBigUint64(88, BigInt(data.ControlSocketSum), true);
  return buf;
}

export class HTTP_WSK_API_TIMINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get ConnectCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get ConnectSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get DisconnectCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get DisconnectSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get SendCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get SendSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get ReceiveCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u64
  get ReceiveSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get ReleaseCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u64
  get ReleaseSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u64
  get ControlSocketCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x58: u64
  get ControlSocketSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x00: u64
  set ConnectCount(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set ConnectSum(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set DisconnectCount(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set DisconnectSum(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set SendCount(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set SendSum(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set ReceiveCount(value: Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u64
  set ReceiveSum(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set ReleaseCount(value: Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u64
  set ReleaseSum(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u64
  set ControlSocketCount(value: Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(value), true);
  }

  // 0x58: u64
  set ControlSocketSum(value: Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_QUIC_STREAM_API_TIMINGS (size: 144)
 */
export interface HTTP_QUIC_STREAM_API_TIMINGS {
  /** u64 */
  OpenCount: Deno.PointerValue;
  /** u64 */
  OpenSum: Deno.PointerValue;
  /** u64 */
  CloseCount: Deno.PointerValue;
  /** u64 */
  CloseSum: Deno.PointerValue;
  /** u64 */
  StartCount: Deno.PointerValue;
  /** u64 */
  StartSum: Deno.PointerValue;
  /** u64 */
  ShutdownCount: Deno.PointerValue;
  /** u64 */
  ShutdownSum: Deno.PointerValue;
  /** u64 */
  SendCount: Deno.PointerValue;
  /** u64 */
  SendSum: Deno.PointerValue;
  /** u64 */
  ReceiveSetEnabledCount: Deno.PointerValue;
  /** u64 */
  ReceiveSetEnabledSum: Deno.PointerValue;
  /** u64 */
  GetParamCount: Deno.PointerValue;
  /** u64 */
  GetParamSum: Deno.PointerValue;
  /** u64 */
  SetParamCount: Deno.PointerValue;
  /** u64 */
  SetParamSum: Deno.PointerValue;
  /** u64 */
  SetCallbackHandlerCount: Deno.PointerValue;
  /** u64 */
  SetCallbackHandlerSum: Deno.PointerValue;
}

export const sizeofHTTP_QUIC_STREAM_API_TIMINGS = 144;

export function allocHTTP_QUIC_STREAM_API_TIMINGS(data?: Partial<HTTP_QUIC_STREAM_API_TIMINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_QUIC_STREAM_API_TIMINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.OpenCount !== undefined) view.setBigUint64(0, BigInt(data.OpenCount), true);
  // 0x08: u64
  if (data?.OpenSum !== undefined) view.setBigUint64(8, BigInt(data.OpenSum), true);
  // 0x10: u64
  if (data?.CloseCount !== undefined) view.setBigUint64(16, BigInt(data.CloseCount), true);
  // 0x18: u64
  if (data?.CloseSum !== undefined) view.setBigUint64(24, BigInt(data.CloseSum), true);
  // 0x20: u64
  if (data?.StartCount !== undefined) view.setBigUint64(32, BigInt(data.StartCount), true);
  // 0x28: u64
  if (data?.StartSum !== undefined) view.setBigUint64(40, BigInt(data.StartSum), true);
  // 0x30: u64
  if (data?.ShutdownCount !== undefined) view.setBigUint64(48, BigInt(data.ShutdownCount), true);
  // 0x38: u64
  if (data?.ShutdownSum !== undefined) view.setBigUint64(56, BigInt(data.ShutdownSum), true);
  // 0x40: u64
  if (data?.SendCount !== undefined) view.setBigUint64(64, BigInt(data.SendCount), true);
  // 0x48: u64
  if (data?.SendSum !== undefined) view.setBigUint64(72, BigInt(data.SendSum), true);
  // 0x50: u64
  if (data?.ReceiveSetEnabledCount !== undefined) view.setBigUint64(80, BigInt(data.ReceiveSetEnabledCount), true);
  // 0x58: u64
  if (data?.ReceiveSetEnabledSum !== undefined) view.setBigUint64(88, BigInt(data.ReceiveSetEnabledSum), true);
  // 0x60: u64
  if (data?.GetParamCount !== undefined) view.setBigUint64(96, BigInt(data.GetParamCount), true);
  // 0x68: u64
  if (data?.GetParamSum !== undefined) view.setBigUint64(104, BigInt(data.GetParamSum), true);
  // 0x70: u64
  if (data?.SetParamCount !== undefined) view.setBigUint64(112, BigInt(data.SetParamCount), true);
  // 0x78: u64
  if (data?.SetParamSum !== undefined) view.setBigUint64(120, BigInt(data.SetParamSum), true);
  // 0x80: u64
  if (data?.SetCallbackHandlerCount !== undefined) view.setBigUint64(128, BigInt(data.SetCallbackHandlerCount), true);
  // 0x88: u64
  if (data?.SetCallbackHandlerSum !== undefined) view.setBigUint64(136, BigInt(data.SetCallbackHandlerSum), true);
  return buf;
}

export class HTTP_QUIC_STREAM_API_TIMINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get OpenCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get OpenSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get CloseCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get CloseSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get StartCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get StartSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get ShutdownCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u64
  get ShutdownSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get SendCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u64
  get SendSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u64
  get ReceiveSetEnabledCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x58: u64
  get ReceiveSetEnabledSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x60: u64
  get GetParamCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(96, true));
  }

  // 0x68: u64
  get GetParamSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(104, true));
  }

  // 0x70: u64
  get SetParamCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(112, true));
  }

  // 0x78: u64
  get SetParamSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(120, true));
  }

  // 0x80: u64
  get SetCallbackHandlerCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(128, true));
  }

  // 0x88: u64
  get SetCallbackHandlerSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(136, true));
  }

  // 0x00: u64
  set OpenCount(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set OpenSum(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set CloseCount(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set CloseSum(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set StartCount(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set StartSum(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set ShutdownCount(value: Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u64
  set ShutdownSum(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set SendCount(value: Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u64
  set SendSum(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u64
  set ReceiveSetEnabledCount(value: Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(value), true);
  }

  // 0x58: u64
  set ReceiveSetEnabledSum(value: Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(value), true);
  }

  // 0x60: u64
  set GetParamCount(value: Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(value), true);
  }

  // 0x68: u64
  set GetParamSum(value: Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(value), true);
  }

  // 0x70: u64
  set SetParamCount(value: Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(value), true);
  }

  // 0x78: u64
  set SetParamSum(value: Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(value), true);
  }

  // 0x80: u64
  set SetCallbackHandlerCount(value: Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(value), true);
  }

  // 0x88: u64
  set SetCallbackHandlerSum(value: Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_QUIC_CONNECTION_API_TIMINGS (size: 104)
 */
export interface HTTP_QUIC_CONNECTION_API_TIMINGS {
  /** u64 */
  OpenTime: Deno.PointerValue;
  /** u64 */
  CloseTime: Deno.PointerValue;
  /** u64 */
  StartTime: Deno.PointerValue;
  /** u64 */
  ShutdownTime: Deno.PointerValue;
  /** u64 */
  SecConfigCreateTime: Deno.PointerValue;
  /** u64 */
  SecConfigDeleteTime: Deno.PointerValue;
  /** u64 */
  GetParamCount: Deno.PointerValue;
  /** u64 */
  GetParamSum: Deno.PointerValue;
  /** u64 */
  SetParamCount: Deno.PointerValue;
  /** u64 */
  SetParamSum: Deno.PointerValue;
  /** u64 */
  SetCallbackHandlerCount: Deno.PointerValue;
  /** u64 */
  SetCallbackHandlerSum: Deno.PointerValue;
  /** Windows.Win32.Networking.HttpServer.HTTP_QUIC_STREAM_API_TIMINGS */
  ControlStreamTimings: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_QUIC_CONNECTION_API_TIMINGS = 104;

export function allocHTTP_QUIC_CONNECTION_API_TIMINGS(data?: Partial<HTTP_QUIC_CONNECTION_API_TIMINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_QUIC_CONNECTION_API_TIMINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.OpenTime !== undefined) view.setBigUint64(0, BigInt(data.OpenTime), true);
  // 0x08: u64
  if (data?.CloseTime !== undefined) view.setBigUint64(8, BigInt(data.CloseTime), true);
  // 0x10: u64
  if (data?.StartTime !== undefined) view.setBigUint64(16, BigInt(data.StartTime), true);
  // 0x18: u64
  if (data?.ShutdownTime !== undefined) view.setBigUint64(24, BigInt(data.ShutdownTime), true);
  // 0x20: u64
  if (data?.SecConfigCreateTime !== undefined) view.setBigUint64(32, BigInt(data.SecConfigCreateTime), true);
  // 0x28: u64
  if (data?.SecConfigDeleteTime !== undefined) view.setBigUint64(40, BigInt(data.SecConfigDeleteTime), true);
  // 0x30: u64
  if (data?.GetParamCount !== undefined) view.setBigUint64(48, BigInt(data.GetParamCount), true);
  // 0x38: u64
  if (data?.GetParamSum !== undefined) view.setBigUint64(56, BigInt(data.GetParamSum), true);
  // 0x40: u64
  if (data?.SetParamCount !== undefined) view.setBigUint64(64, BigInt(data.SetParamCount), true);
  // 0x48: u64
  if (data?.SetParamSum !== undefined) view.setBigUint64(72, BigInt(data.SetParamSum), true);
  // 0x50: u64
  if (data?.SetCallbackHandlerCount !== undefined) view.setBigUint64(80, BigInt(data.SetCallbackHandlerCount), true);
  // 0x58: u64
  if (data?.SetCallbackHandlerSum !== undefined) view.setBigUint64(88, BigInt(data.SetCallbackHandlerSum), true);
  // 0x60: pointer
  if (data?.ControlStreamTimings !== undefined) view.setBigUint64(96, data.ControlStreamTimings === null ? 0n : BigInt(util.toPointer(data.ControlStreamTimings)), true);
  return buf;
}

export class HTTP_QUIC_CONNECTION_API_TIMINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get OpenTime(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get CloseTime(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u64
  get StartTime(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u64
  get ShutdownTime(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: u64
  get SecConfigCreateTime(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: u64
  get SecConfigDeleteTime(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u64
  get GetParamCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u64
  get GetParamSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u64
  get SetParamCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: u64
  get SetParamSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u64
  get SetCallbackHandlerCount(): Deno.PointerValue {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x58: u64
  get SetCallbackHandlerSum(): Deno.PointerValue {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x60: pointer
  get ControlStreamTimings(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u64
  set OpenTime(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set CloseTime(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u64
  set StartTime(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u64
  set ShutdownTime(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: u64
  set SecConfigCreateTime(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: u64
  set SecConfigDeleteTime(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u64
  set GetParamCount(value: Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u64
  set GetParamSum(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u64
  set SetParamCount(value: Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: u64
  set SetParamSum(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u64
  set SetCallbackHandlerCount(value: Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(value), true);
  }

  // 0x58: u64
  set SetCallbackHandlerSum(value: Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(value), true);
  }

  // 0x60: pointer
  set ControlStreamTimings(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Networking.HttpServer.HTTP_QUIC_API_TIMINGS (size: 16)
 */
export interface HTTP_QUIC_API_TIMINGS {
  /** Windows.Win32.Networking.HttpServer.HTTP_QUIC_CONNECTION_API_TIMINGS */
  ConnectionTimings: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Networking.HttpServer.HTTP_QUIC_STREAM_API_TIMINGS */
  StreamTimings: Uint8Array | Deno.PointerValue | null;
}

export const sizeofHTTP_QUIC_API_TIMINGS = 16;

export function allocHTTP_QUIC_API_TIMINGS(data?: Partial<HTTP_QUIC_API_TIMINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofHTTP_QUIC_API_TIMINGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ConnectionTimings !== undefined) view.setBigUint64(0, data.ConnectionTimings === null ? 0n : BigInt(util.toPointer(data.ConnectionTimings)), true);
  // 0x08: pointer
  if (data?.StreamTimings !== undefined) view.setBigUint64(8, data.StreamTimings === null ? 0n : BigInt(util.toPointer(data.StreamTimings)), true);
  return buf;
}

export class HTTP_QUIC_API_TIMINGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ConnectionTimings(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get StreamTimings(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set ConnectionTimings(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set StreamTimings(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

export type BOOL = number;

// Native Libraries

try {
  var libHTTPAPI_dll = Deno.dlopen("HTTPAPI.dll", {
    HttpInitialize: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    HttpTerminate: {
      parameters: ["u32", "pointer"],
      result: "u32",
    },
    HttpCreateHttpHandle: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    HttpCreateRequestQueue: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    HttpCloseRequestQueue: {
      parameters: ["pointer"],
      result: "u32",
    },
    HttpSetRequestQueueProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    HttpQueryRequestQueueProperty: {
      parameters: ["pointer", "i32", "pointer", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    HttpSetRequestProperty: {
      parameters: ["pointer", "u64", "i32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    HttpShutdownRequestQueue: {
      parameters: ["pointer"],
      result: "u32",
    },
    HttpReceiveClientCertificate: {
      parameters: ["pointer", "u64", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    HttpCreateServerSession: {
      parameters: ["pointer", "pointer", "u32"],
      result: "u32",
    },
    HttpCloseServerSession: {
      parameters: ["u64"],
      result: "u32",
    },
    HttpQueryServerSessionProperty: {
      parameters: ["u64", "i32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    HttpSetServerSessionProperty: {
      parameters: ["u64", "i32", "pointer", "u32"],
      result: "u32",
    },
    HttpAddUrl: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    HttpRemoveUrl: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    HttpCreateUrlGroup: {
      parameters: ["u64", "pointer", "u32"],
      result: "u32",
    },
    HttpCloseUrlGroup: {
      parameters: ["u64"],
      result: "u32",
    },
    HttpAddUrlToUrlGroup: {
      parameters: ["u64", "buffer", "u64", "u32"],
      result: "u32",
    },
    HttpRemoveUrlFromUrlGroup: {
      parameters: ["u64", "buffer", "u32"],
      result: "u32",
    },
    HttpSetUrlGroupProperty: {
      parameters: ["u64", "i32", "pointer", "u32"],
      result: "u32",
    },
    HttpQueryUrlGroupProperty: {
      parameters: ["u64", "i32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    HttpPrepareUrl: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    HttpReceiveHttpRequest: {
      parameters: ["pointer", "u64", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    HttpReceiveRequestEntityBody: {
      parameters: ["pointer", "u64", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    HttpSendHttpResponse: {
      parameters: ["pointer", "u64", "u32", "pointer", "pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    HttpSendResponseEntityBody: {
      parameters: ["pointer", "u64", "u32", "u16", "pointer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    HttpDeclarePush: {
      parameters: ["pointer", "u64", "i32", "buffer", "buffer", "pointer"],
      result: "u32",
    },
    HttpWaitForDisconnect: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    HttpWaitForDisconnectEx: {
      parameters: ["pointer", "u64", "u32", "pointer"],
      result: "u32",
    },
    HttpCancelHttpRequest: {
      parameters: ["pointer", "u64", "pointer"],
      result: "u32",
    },
    HttpWaitForDemandStart: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    HttpIsFeatureSupported: {
      parameters: ["i32"],
      result: "i32",
    },
    HttpDelegateRequestEx: {
      parameters: ["pointer", "pointer", "u64", "u64", "u32", "pointer"],
      result: "u32",
    },
    HttpFindUrlGroupId: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
    },
    HttpFlushResponseCache: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    HttpAddFragmentToCache: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    HttpReadFragmentFromCache: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    HttpSetServiceConfiguration: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    HttpUpdateServiceConfiguration: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    HttpDeleteServiceConfiguration: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer"],
      result: "u32",
    },
    HttpQueryServiceConfiguration: {
      parameters: ["pointer", "i32", "pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    HttpGetExtension: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function HttpInitialize(
  Version: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION */,
  Flags: HTTP_INITIALIZE /* Windows.Win32.Networking.HttpServer.HTTP_INITIALIZE */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpInitialize(util.toPointer(Version), Flags, util.toPointer(pReserved));
}

export function HttpTerminate(
  Flags: HTTP_INITIALIZE /* Windows.Win32.Networking.HttpServer.HTTP_INITIALIZE */,
  pReserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpTerminate(Flags, util.toPointer(pReserved));
}

export function HttpCreateHttpHandle(
  RequestQueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: number /* u32 */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpCreateHttpHandle(util.toPointer(RequestQueueHandle), Reserved);
}

export function HttpCreateRequestQueue(
  Version: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION */,
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SecurityAttributes: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  RequestQueueHandle: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpCreateRequestQueue(util.toPointer(Version), util.pwstrToFfi(Name), util.toPointer(SecurityAttributes), Flags, util.toPointer(RequestQueueHandle));
}

export function HttpCloseRequestQueue(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpCloseRequestQueue(util.toPointer(RequestQueueHandle));
}

export function HttpSetRequestQueueProperty(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Property: HTTP_SERVER_PROPERTY /* Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY */,
  PropertyInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyInformationLength: number /* u32 */,
  Reserved1: number /* u32 */,
  Reserved2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpSetRequestQueueProperty(util.toPointer(RequestQueueHandle), Property, util.toPointer(PropertyInformation), PropertyInformationLength, Reserved1, util.toPointer(Reserved2));
}

export function HttpQueryRequestQueueProperty(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Property: HTTP_SERVER_PROPERTY /* Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY */,
  PropertyInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyInformationLength: number /* u32 */,
  Reserved1: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpQueryRequestQueueProperty(util.toPointer(RequestQueueHandle), Property, util.toPointer(PropertyInformation), PropertyInformationLength, Reserved1, util.toPointer(ReturnLength), util.toPointer(Reserved2));
}

export function HttpSetRequestProperty(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Id: Deno.PointerValue /* u64 */,
  PropertyId: HTTP_REQUEST_PROPERTY /* Windows.Win32.Networking.HttpServer.HTTP_REQUEST_PROPERTY */,
  Input: Deno.PointerValue | Uint8Array | null /* ptr */,
  InputPropertySize: number /* u32 */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpSetRequestProperty(util.toPointer(RequestQueueHandle), Id, PropertyId, util.toPointer(Input), InputPropertySize, util.toPointer(Overlapped));
}

export function HttpShutdownRequestQueue(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpShutdownRequestQueue(util.toPointer(RequestQueueHandle));
}

export function HttpReceiveClientCertificate(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ConnectionId: Deno.PointerValue /* u64 */,
  Flags: number /* u32 */,
  SslClientCertInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  SslClientCertInfoSize: number /* u32 */,
  BytesReceived: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpReceiveClientCertificate(util.toPointer(RequestQueueHandle), ConnectionId, Flags, util.toPointer(SslClientCertInfo), SslClientCertInfoSize, util.toPointer(BytesReceived), util.toPointer(Overlapped));
}

export function HttpCreateServerSession(
  Version: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION */,
  ServerSessionId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: number /* u32 */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpCreateServerSession(util.toPointer(Version), util.toPointer(ServerSessionId), Reserved);
}

export function HttpCloseServerSession(
  ServerSessionId: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpCloseServerSession(ServerSessionId);
}

export function HttpQueryServerSessionProperty(
  ServerSessionId: Deno.PointerValue /* u64 */,
  Property: HTTP_SERVER_PROPERTY /* Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY */,
  PropertyInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyInformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpQueryServerSessionProperty(ServerSessionId, Property, util.toPointer(PropertyInformation), PropertyInformationLength, util.toPointer(ReturnLength));
}

export function HttpSetServerSessionProperty(
  ServerSessionId: Deno.PointerValue /* u64 */,
  Property: HTTP_SERVER_PROPERTY /* Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY */,
  PropertyInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyInformationLength: number /* u32 */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpSetServerSessionProperty(ServerSessionId, Property, util.toPointer(PropertyInformation), PropertyInformationLength);
}

export function HttpAddUrl(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FullyQualifiedUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpAddUrl(util.toPointer(RequestQueueHandle), util.pwstrToFfi(FullyQualifiedUrl), util.toPointer(Reserved));
}

export function HttpRemoveUrl(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  FullyQualifiedUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpRemoveUrl(util.toPointer(RequestQueueHandle), util.pwstrToFfi(FullyQualifiedUrl));
}

export function HttpCreateUrlGroup(
  ServerSessionId: Deno.PointerValue /* u64 */,
  pUrlGroupId: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved: number /* u32 */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpCreateUrlGroup(ServerSessionId, util.toPointer(pUrlGroupId), Reserved);
}

export function HttpCloseUrlGroup(
  UrlGroupId: Deno.PointerValue /* u64 */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpCloseUrlGroup(UrlGroupId);
}

export function HttpAddUrlToUrlGroup(
  UrlGroupId: Deno.PointerValue /* u64 */,
  pFullyQualifiedUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  UrlContext: Deno.PointerValue /* u64 */,
  Reserved: number /* u32 */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpAddUrlToUrlGroup(UrlGroupId, util.pwstrToFfi(pFullyQualifiedUrl), UrlContext, Reserved);
}

export function HttpRemoveUrlFromUrlGroup(
  UrlGroupId: Deno.PointerValue /* u64 */,
  pFullyQualifiedUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpRemoveUrlFromUrlGroup(UrlGroupId, util.pwstrToFfi(pFullyQualifiedUrl), Flags);
}

export function HttpSetUrlGroupProperty(
  UrlGroupId: Deno.PointerValue /* u64 */,
  Property: HTTP_SERVER_PROPERTY /* Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY */,
  PropertyInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyInformationLength: number /* u32 */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpSetUrlGroupProperty(UrlGroupId, Property, util.toPointer(PropertyInformation), PropertyInformationLength);
}

export function HttpQueryUrlGroupProperty(
  UrlGroupId: Deno.PointerValue /* u64 */,
  Property: HTTP_SERVER_PROPERTY /* Windows.Win32.Networking.HttpServer.HTTP_SERVER_PROPERTY */,
  PropertyInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  PropertyInformationLength: number /* u32 */,
  ReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpQueryUrlGroupProperty(UrlGroupId, Property, util.toPointer(PropertyInformation), PropertyInformationLength, util.toPointer(ReturnLength));
}

export function HttpPrepareUrl(
  Reserved: Deno.PointerValue | Uint8Array | null /* ptr */,
  Flags: number /* u32 */,
  Url: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  PreparedUrl: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpPrepareUrl(util.toPointer(Reserved), Flags, util.pwstrToFfi(Url), util.toPointer(PreparedUrl));
}

export function HttpReceiveHttpRequest(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RequestId: Deno.PointerValue /* u64 */,
  Flags: HTTP_RECEIVE_HTTP_REQUEST_FLAGS /* Windows.Win32.Networking.HttpServer.HTTP_RECEIVE_HTTP_REQUEST_FLAGS */,
  RequestBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  RequestBufferLength: number /* u32 */,
  BytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpReceiveHttpRequest(util.toPointer(RequestQueueHandle), RequestId, Flags, util.toPointer(RequestBuffer), RequestBufferLength, util.toPointer(BytesReturned), util.toPointer(Overlapped));
}

export function HttpReceiveRequestEntityBody(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RequestId: Deno.PointerValue /* u64 */,
  Flags: number /* u32 */,
  EntityBuffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  EntityBufferLength: number /* u32 */,
  BytesReturned: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpReceiveRequestEntityBody(util.toPointer(RequestQueueHandle), RequestId, Flags, util.toPointer(EntityBuffer), EntityBufferLength, util.toPointer(BytesReturned), util.toPointer(Overlapped));
}

export function HttpSendHttpResponse(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RequestId: Deno.PointerValue /* u64 */,
  Flags: number /* u32 */,
  HttpResponse: Deno.PointerValue | Uint8Array | null /* ptr */,
  CachePolicy: Deno.PointerValue | Uint8Array | null /* ptr */,
  BytesSent: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  LogData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpSendHttpResponse(util.toPointer(RequestQueueHandle), RequestId, Flags, util.toPointer(HttpResponse), util.toPointer(CachePolicy), util.toPointer(BytesSent), util.toPointer(Reserved1), Reserved2, util.toPointer(Overlapped), util.toPointer(LogData));
}

export function HttpSendResponseEntityBody(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RequestId: Deno.PointerValue /* u64 */,
  Flags: number /* u32 */,
  EntityChunkCount: number /* u16 */,
  EntityChunks: Deno.PointerValue | Uint8Array | null /* ptr */,
  BytesSent: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved1: Deno.PointerValue | Uint8Array | null /* ptr */,
  Reserved2: number /* u32 */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
  LogData: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpSendResponseEntityBody(util.toPointer(RequestQueueHandle), RequestId, Flags, EntityChunkCount, util.toPointer(EntityChunks), util.toPointer(BytesSent), util.toPointer(Reserved1), Reserved2, util.toPointer(Overlapped), util.toPointer(LogData));
}

export function HttpDeclarePush(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RequestId: Deno.PointerValue /* u64 */,
  Verb: HTTP_VERB /* Windows.Win32.Networking.HttpServer.HTTP_VERB */,
  Path: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Query: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Headers: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpDeclarePush(util.toPointer(RequestQueueHandle), RequestId, Verb, util.pwstrToFfi(Path), util.pstrToFfi(Query), util.toPointer(Headers));
}

export function HttpWaitForDisconnect(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ConnectionId: Deno.PointerValue /* u64 */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpWaitForDisconnect(util.toPointer(RequestQueueHandle), ConnectionId, util.toPointer(Overlapped));
}

export function HttpWaitForDisconnectEx(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ConnectionId: Deno.PointerValue /* u64 */,
  Reserved: number /* u32 */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpWaitForDisconnectEx(util.toPointer(RequestQueueHandle), ConnectionId, Reserved, util.toPointer(Overlapped));
}

export function HttpCancelHttpRequest(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RequestId: Deno.PointerValue /* u64 */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpCancelHttpRequest(util.toPointer(RequestQueueHandle), RequestId, util.toPointer(Overlapped));
}

export function HttpWaitForDemandStart(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpWaitForDemandStart(util.toPointer(RequestQueueHandle), util.toPointer(Overlapped));
}

export function HttpIsFeatureSupported(
  FeatureId: HTTP_FEATURE_ID /* Windows.Win32.Networking.HttpServer.HTTP_FEATURE_ID */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libHTTPAPI_dll.HttpIsFeatureSupported(FeatureId));
}

export function HttpDelegateRequestEx(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  DelegateQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  RequestId: Deno.PointerValue /* u64 */,
  DelegateUrlGroupId: Deno.PointerValue /* u64 */,
  PropertyInfoSetSize: number /* u32 */,
  PropertyInfoSet: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpDelegateRequestEx(util.toPointer(RequestQueueHandle), util.toPointer(DelegateQueueHandle), RequestId, DelegateUrlGroupId, PropertyInfoSetSize, util.toPointer(PropertyInfoSet));
}

export function HttpFindUrlGroupId(
  FullyQualifiedUrl: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  UrlGroupId: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpFindUrlGroupId(util.pwstrToFfi(FullyQualifiedUrl), util.toPointer(RequestQueueHandle), util.toPointer(UrlGroupId));
}

export function HttpFlushResponseCache(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  UrlPrefix: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpFlushResponseCache(util.toPointer(RequestQueueHandle), util.pwstrToFfi(UrlPrefix), Flags, util.toPointer(Overlapped));
}

export function HttpAddFragmentToCache(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  UrlPrefix: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DataChunk: Deno.PointerValue | Uint8Array | null /* ptr */,
  CachePolicy: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpAddFragmentToCache(util.toPointer(RequestQueueHandle), util.pwstrToFfi(UrlPrefix), util.toPointer(DataChunk), util.toPointer(CachePolicy), util.toPointer(Overlapped));
}

export function HttpReadFragmentFromCache(
  RequestQueueHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  UrlPrefix: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ByteRange: Deno.PointerValue | Uint8Array | null /* ptr */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferLength: number /* u32 */,
  BytesRead: Deno.PointerValue | Uint8Array | null /* ptr */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpReadFragmentFromCache(util.toPointer(RequestQueueHandle), util.pwstrToFfi(UrlPrefix), util.toPointer(ByteRange), util.toPointer(Buffer), BufferLength, util.toPointer(BytesRead), util.toPointer(Overlapped));
}

export function HttpSetServiceConfiguration(
  ServiceHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ConfigId: HTTP_SERVICE_CONFIG_ID /* Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_ID */,
  pConfigInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ConfigInformationLength: number /* u32 */,
  pOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpSetServiceConfiguration(util.toPointer(ServiceHandle), ConfigId, util.toPointer(pConfigInformation), ConfigInformationLength, util.toPointer(pOverlapped));
}

export function HttpUpdateServiceConfiguration(
  Handle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ConfigId: HTTP_SERVICE_CONFIG_ID /* Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_ID */,
  ConfigInfo: Deno.PointerValue | Uint8Array | null /* ptr */,
  ConfigInfoLength: number /* u32 */,
  Overlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpUpdateServiceConfiguration(util.toPointer(Handle), ConfigId, util.toPointer(ConfigInfo), ConfigInfoLength, util.toPointer(Overlapped));
}

export function HttpDeleteServiceConfiguration(
  ServiceHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ConfigId: HTTP_SERVICE_CONFIG_ID /* Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_ID */,
  pConfigInformation: Deno.PointerValue | Uint8Array | null /* ptr */,
  ConfigInformationLength: number /* u32 */,
  pOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpDeleteServiceConfiguration(util.toPointer(ServiceHandle), ConfigId, util.toPointer(pConfigInformation), ConfigInformationLength, util.toPointer(pOverlapped));
}

export function HttpQueryServiceConfiguration(
  ServiceHandle: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Foundation.HANDLE */,
  ConfigId: HTTP_SERVICE_CONFIG_ID /* Windows.Win32.Networking.HttpServer.HTTP_SERVICE_CONFIG_ID */,
  pInput: Deno.PointerValue | Uint8Array | null /* ptr */,
  InputLength: number /* u32 */,
  pOutput: Deno.PointerValue | Uint8Array | null /* ptr */,
  OutputLength: number /* u32 */,
  pReturnLength: Deno.PointerValue | Uint8Array | null /* ptr */,
  pOverlapped: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpQueryServiceConfiguration(util.toPointer(ServiceHandle), ConfigId, util.toPointer(pInput), InputLength, util.toPointer(pOutput), OutputLength, util.toPointer(pReturnLength), util.toPointer(pOverlapped));
}

export function HttpGetExtension(
  Version: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Networking.HttpServer.HTTPAPI_VERSION */,
  Extension: number /* u32 */,
  Buffer: Deno.PointerValue | Uint8Array | null /* ptr */,
  BufferSize: number /* u32 */,
): number /* u32 */ {
  return libHTTPAPI_dll.HttpGetExtension(util.toPointer(Version), Extension, util.toPointer(Buffer), BufferSize);
}

