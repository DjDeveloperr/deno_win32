/// Auto-generated by Deno Win32: Windows.Win32.Networking.ActiveDirectory.Apis

import * as util from "../../util.ts";

// Enums
export type ADSTYPE = number;
export type ADS_AUTHENTICATION_ENUM = number;
export type ADS_STATUSENUM = number;
export type ADS_DEREFENUM = number;
export type ADS_SCOPEENUM = number;
export type ADS_PREFERENCES_ENUM = number;
export type ADSI_DIALECT_ENUM = number;
export type ADS_CHASE_REFERRALS_ENUM = number;
export type ADS_SEARCHPREF_ENUM = number;
export type ADS_PASSWORD_ENCODING_ENUM = number;
export type ADS_PROPERTY_OPERATION_ENUM = number;
export type ADS_SYSTEMFLAG_ENUM = number;
export type ADS_GROUP_TYPE_ENUM = number;
export type ADS_USER_FLAG_ENUM = number;
export type ADS_RIGHTS_ENUM = number;
export type ADS_ACETYPE_ENUM = number;
export type ADS_ACEFLAG_ENUM = number;
export type ADS_FLAGTYPE_ENUM = number;
export type ADS_SD_CONTROL_ENUM = number;
export type ADS_SD_REVISION_ENUM = number;
export type ADS_NAME_TYPE_ENUM = number;
export type ADS_NAME_INITTYPE_ENUM = number;
export type ADS_OPTION_ENUM = number;
export type ADS_SECURITY_INFO_ENUM = number;
export type ADS_SETTYPE_ENUM = number;
export type ADS_FORMAT_ENUM = number;
export type ADS_DISPLAY_ENUM = number;
export type ADS_ESCAPE_MODE_ENUM = number;
export type ADS_PATHTYPE_ENUM = number;
export type ADS_SD_FORMAT_ENUM = number;
export type DS_MANGLE_FOR = number;
export type DS_NAME_FORMAT = number;
export type DS_NAME_FLAGS = number;
export type DS_NAME_ERROR = number;
export type DS_SPN_NAME_TYPE = number;
export type DS_SPN_WRITE_OP = number;
export type DS_REPSYNCALL_ERROR = number;
export type DS_REPSYNCALL_EVENT = number;
export type DS_KCC_TASKID = number;
export type DS_REPL_INFO_TYPE = number;
export type DS_REPL_OP_TYPE = number;
export type DSROLE_MACHINE_ROLE = number;
export type DSROLE_SERVER_STATE = number;
export type DSROLE_PRIMARY_DOMAIN_INFO_LEVEL = number;
export type DSROLE_OPERATION_STATE = number;

// Constants
export const WM_ADSPROP_NOTIFY_PAGEINIT = 2125;
export const WM_ADSPROP_NOTIFY_PAGEHWND = 2126;
export const WM_ADSPROP_NOTIFY_CHANGE = 2127;
export const WM_ADSPROP_NOTIFY_APPLY = 2128;
export const WM_ADSPROP_NOTIFY_SETFOCUS = 2129;
export const WM_ADSPROP_NOTIFY_FOREGROUND = 2130;
export const WM_ADSPROP_NOTIFY_EXIT = 2131;
export const WM_ADSPROP_NOTIFY_ERROR = 2134;
export const QUERYFORM_CHANGESFORMLIST = 1;
export const QUERYFORM_CHANGESOPTFORMLIST = 2;
export const CQFF_NOGLOBALPAGES = 1;
export const CQFF_ISOPTIONAL = 2;
export const CQPM_INITIALIZE = 1;
export const CQPM_RELEASE = 2;
export const CQPM_ENABLE = 3;
export const CQPM_GETPARAMETERS = 5;
export const CQPM_CLEARFORM = 6;
export const CQPM_PERSIST = 7;
export const CQPM_HELP = 8;
export const CQPM_SETDEFAULTPARAMETERS = 9;
export const CQPM_HANDLERSPECIFIC = 268435456;
export const OQWF_OKCANCEL = 1;
export const OQWF_DEFAULTFORM = 2;
export const OQWF_SINGLESELECT = 4;
export const OQWF_LOADQUERY = 8;
export const OQWF_REMOVESCOPES = 16;
export const OQWF_REMOVEFORMS = 32;
export const OQWF_ISSUEONOPEN = 64;
export const OQWF_SHOWOPTIONAL = 128;
export const OQWF_SAVEQUERYONOK = 512;
export const OQWF_HIDEMENUS = 1024;
export const OQWF_HIDESEARCHUI = 2048;
export const OQWF_PARAMISPROPERTYBAG = 2147483648;
export const DSA_NEWOBJ_CTX_PRECOMMIT = 1;
export const DSA_NEWOBJ_CTX_COMMIT = 2;
export const DSA_NEWOBJ_CTX_POSTCOMMIT = 3;
export const DSA_NEWOBJ_CTX_CLEANUP = 4;
export const DSA_NOTIFY_DEL = 1;
export const DSA_NOTIFY_REN = 2;
export const DSA_NOTIFY_MOV = 4;
export const DSA_NOTIFY_PROP = 8;
export const DSA_NOTIFY_FLAG_ADDITIONAL_DATA = 2;
export const DSA_NOTIFY_FLAG_FORCE_ADDITIONAL_DATA = 1;
export const DSOBJECT_ISCONTAINER = 1;
export const DSOBJECT_READONLYPAGES = 2147483648;
export const DSPROVIDER_UNUSED_0 = 1;
export const DSPROVIDER_UNUSED_1 = 2;
export const DSPROVIDER_UNUSED_2 = 4;
export const DSPROVIDER_UNUSED_3 = 8;
export const DSPROVIDER_ADVANCED = 16;
export const DSPROVIDER_AD_LDS = 32;
export const CFSTR_DSOBJECTNAMES = `DsObjectNames`;
export const CFSTR_DS_DISPLAY_SPEC_OPTIONS = `DsDisplaySpecOptions`;
export const CFSTR_DSDISPLAYSPECOPTIONS = `DsDisplaySpecOptions`;
export const DS_PROP_SHELL_PREFIX = `shell`;
export const DS_PROP_ADMIN_PREFIX = `admin`;
export const DSDSOF_HASUSERANDSERVERINFO = 1;
export const DSDSOF_SIMPLEAUTHENTICATE = 2;
export const DSDSOF_DONTSIGNSEAL = 4;
export const DSDSOF_DSAVAILABLE = 1073741824;
export const CFSTR_DSPROPERTYPAGEINFO = `DsPropPageInfo`;
export const DSPROP_ATTRCHANGED_MSG = `DsPropAttrChanged`;
export const DBDTF_RETURNFQDN = 1;
export const DBDTF_RETURNMIXEDDOMAINS = 2;
export const DBDTF_RETURNEXTERNAL = 4;
export const DBDTF_RETURNINBOUND = 8;
export const DBDTF_RETURNINOUTBOUND = 16;
export const DSSSF_SIMPLEAUTHENTICATE = 1;
export const DSSSF_DONTSIGNSEAL = 2;
export const DSSSF_DSAVAILABLE = 2147483648;
export const DSGIF_ISNORMAL = 0;
export const DSGIF_ISOPEN = 1;
export const DSGIF_ISDISABLED = 2;
export const DSGIF_ISMASK = 15;
export const DSGIF_GETDEFAULTICON = 16;
export const DSGIF_DEFAULTISCONTAINER = 32;
export const DSICCF_IGNORETREATASLEAF = 1;
export const DSECAF_NOTLISTED = 1;
export const DSCCIF_HASWIZARDDIALOG = 1;
export const DSCCIF_HASWIZARDPRIMARYPAGE = 2;
export const DSBI_NOBUTTONS = 1;
export const DSBI_NOLINES = 2;
export const DSBI_NOLINESATROOT = 4;
export const DSBI_CHECKBOXES = 256;
export const DSBI_NOROOT = 65536;
export const DSBI_INCLUDEHIDDEN = 131072;
export const DSBI_EXPANDONOPEN = 262144;
export const DSBI_ENTIREDIRECTORY = 589824;
export const DSBI_RETURN_FORMAT = 1048576;
export const DSBI_HASCREDENTIALS = 2097152;
export const DSBI_IGNORETREATASLEAF = 4194304;
export const DSBI_SIMPLEAUTHENTICATE = 8388608;
export const DSBI_RETURNOBJECTCLASS = 16777216;
export const DSBI_DONTSIGNSEAL = 33554432;
export const DSB_MAX_DISPLAYNAME_CHARS = 64;
export const DSBF_STATE = 1;
export const DSBF_ICONLOCATION = 2;
export const DSBF_DISPLAYNAME = 4;
export const DSBS_CHECKED = 1;
export const DSBS_HIDDEN = 2;
export const DSBS_ROOT = 4;
export const DSBM_QUERYINSERTW = 100;
export const DSBM_QUERYINSERTA = 101;
export const DSBM_QUERYINSERT = 100;
export const DSBM_CHANGEIMAGESTATE = 102;
export const DSBM_HELP = 103;
export const DSBM_CONTEXTMENU = 104;
export const DSBID_BANNER = 256;
export const DSBID_CONTAINERLIST = 257;
export const DS_FORCE_REDISCOVERY = 1;
export const DS_DIRECTORY_SERVICE_REQUIRED = 16;
export const DS_DIRECTORY_SERVICE_PREFERRED = 32;
export const DS_GC_SERVER_REQUIRED = 64;
export const DS_PDC_REQUIRED = 128;
export const DS_BACKGROUND_ONLY = 256;
export const DS_IP_REQUIRED = 512;
export const DS_KDC_REQUIRED = 1024;
export const DS_TIMESERV_REQUIRED = 2048;
export const DS_WRITABLE_REQUIRED = 4096;
export const DS_GOOD_TIMESERV_PREFERRED = 8192;
export const DS_AVOID_SELF = 16384;
export const DS_ONLY_LDAP_NEEDED = 32768;
export const DS_IS_FLAT_NAME = 65536;
export const DS_IS_DNS_NAME = 131072;
export const DS_TRY_NEXTCLOSEST_SITE = 262144;
export const DS_DIRECTORY_SERVICE_6_REQUIRED = 524288;
export const DS_WEB_SERVICE_REQUIRED = 1048576;
export const DS_DIRECTORY_SERVICE_8_REQUIRED = 2097152;
export const DS_DIRECTORY_SERVICE_9_REQUIRED = 4194304;
export const DS_DIRECTORY_SERVICE_10_REQUIRED = 8388608;
export const DS_KEY_LIST_SUPPORT_REQUIRED = 16777216;
export const DS_RETURN_DNS_NAME = 1073741824;
export const DS_RETURN_FLAT_NAME = 2147483648;
export const DS_PDC_FLAG = 1;
export const DS_GC_FLAG = 4;
export const DS_LDAP_FLAG = 8;
export const DS_DS_FLAG = 16;
export const DS_KDC_FLAG = 32;
export const DS_TIMESERV_FLAG = 64;
export const DS_CLOSEST_FLAG = 128;
export const DS_WRITABLE_FLAG = 256;
export const DS_GOOD_TIMESERV_FLAG = 512;
export const DS_NDNC_FLAG = 1024;
export const DS_SELECT_SECRET_DOMAIN_6_FLAG = 2048;
export const DS_FULL_SECRET_DOMAIN_6_FLAG = 4096;
export const DS_WS_FLAG = 8192;
export const DS_DS_8_FLAG = 16384;
export const DS_DS_9_FLAG = 32768;
export const DS_DS_10_FLAG = 65536;
export const DS_KEY_LIST_FLAG = 131072;
export const DS_PING_FLAGS = 1048575;
export const DS_DNS_CONTROLLER_FLAG = 536870912;
export const DS_DNS_DOMAIN_FLAG = 1073741824;
export const DS_DNS_FOREST_FLAG = 2147483648;
export const DS_DOMAIN_IN_FOREST = 1;
export const DS_DOMAIN_DIRECT_OUTBOUND = 2;
export const DS_DOMAIN_TREE_ROOT = 4;
export const DS_DOMAIN_PRIMARY = 8;
export const DS_DOMAIN_NATIVE_MODE = 16;
export const DS_DOMAIN_DIRECT_INBOUND = 32;
export const DS_GFTI_UPDATE_TDO = 1;
export const DS_GFTI_VALID_FLAGS = 1;
export const DS_ONLY_DO_SITE_NAME = 1;
export const DS_NOTIFY_AFTER_SITE_RECORDS = 2;
export const DSQPF_NOSAVE = 1;
export const DSQPF_SAVELOCATION = 2;
export const DSQPF_SHOWHIDDENOBJECTS = 4;
export const DSQPF_ENABLEADMINFEATURES = 8;
export const DSQPF_ENABLEADVANCEDFEATURES = 16;
export const DSQPF_HASCREDENTIALS = 32;
export const DSQPF_NOCHOOSECOLUMNS = 64;
export const CFSTR_DSQUERYPARAMS = `DsQueryParameters`;
export const CFSTR_DSQUERYSCOPE = `DsQueryScope`;
export const DSQPM_GETCLASSLIST = 268435456;
export const DSQPM_HELPTOPICS = 268435457;
export const DSROLE_PRIMARY_DS_RUNNING = 1;
export const DSROLE_PRIMARY_DS_MIXED_MODE = 2;
export const DSROLE_UPGRADE_IN_PROGRESS = 4;
export const DSROLE_PRIMARY_DS_READONLY = 8;
export const DSROLE_PRIMARY_DOMAIN_GUID_PRESENT = 16777216;
export const ADS_ATTR_CLEAR = 1;
export const ADS_ATTR_UPDATE = 2;
export const ADS_ATTR_APPEND = 3;
export const ADS_ATTR_DELETE = 4;
export const ADS_EXT_MINEXTDISPID = 1;
export const ADS_EXT_MAXEXTDISPID = 16777215;
export const ADS_EXT_INITCREDENTIALS = 1;
export const ADS_EXT_INITIALIZE_COMPLETE = 2;
export const DS_BEHAVIOR_WIN2000 = 0;
export const DS_BEHAVIOR_WIN2003_WITH_MIXED_DOMAINS = 1;
export const DS_BEHAVIOR_WIN2003 = 2;
export const DS_BEHAVIOR_WIN2008 = 3;
export const DS_BEHAVIOR_WIN2008R2 = 4;
export const DS_BEHAVIOR_WIN2012 = 5;
export const DS_BEHAVIOR_WIN2012R2 = 6;
export const DS_BEHAVIOR_WIN2016 = 7;
export const DS_BEHAVIOR_LONGHORN = 3;
export const DS_BEHAVIOR_WIN7 = 4;
export const DS_BEHAVIOR_WIN8 = 5;
export const DS_BEHAVIOR_WINBLUE = 6;
export const DS_BEHAVIOR_WINTHRESHOLD = 7;
export const DS_SYNCED_EVENT_NAME = `NTDSInitialSyncsCompleted`;
export const DS_SYNCED_EVENT_NAME_W = `NTDSInitialSyncsCompleted`;
export const ACTRL_DS_OPEN = 0;
export const ACTRL_DS_CREATE_CHILD = 1;
export const ACTRL_DS_DELETE_CHILD = 2;
export const ACTRL_DS_LIST = 4;
export const ACTRL_DS_SELF = 8;
export const ACTRL_DS_READ_PROP = 16;
export const ACTRL_DS_WRITE_PROP = 32;
export const ACTRL_DS_DELETE_TREE = 64;
export const ACTRL_DS_LIST_OBJECT = 128;
export const ACTRL_DS_CONTROL_ACCESS = 256;
export const NTDSAPI_BIND_ALLOW_DELEGATION = 1;
export const NTDSAPI_BIND_FIND_BINDING = 2;
export const NTDSAPI_BIND_FORCE_KERBEROS = 4;
export const DS_REPSYNC_ASYNCHRONOUS_OPERATION = 1;
export const DS_REPSYNC_WRITEABLE = 2;
export const DS_REPSYNC_PERIODIC = 4;
export const DS_REPSYNC_INTERSITE_MESSAGING = 8;
export const DS_REPSYNC_FULL = 32;
export const DS_REPSYNC_URGENT = 64;
export const DS_REPSYNC_NO_DISCARD = 128;
export const DS_REPSYNC_FORCE = 256;
export const DS_REPSYNC_ADD_REFERENCE = 512;
export const DS_REPSYNC_NEVER_COMPLETED = 1024;
export const DS_REPSYNC_TWO_WAY = 2048;
export const DS_REPSYNC_NEVER_NOTIFY = 4096;
export const DS_REPSYNC_INITIAL = 8192;
export const DS_REPSYNC_USE_COMPRESSION = 16384;
export const DS_REPSYNC_ABANDONED = 32768;
export const DS_REPSYNC_SELECT_SECRETS = 32768;
export const DS_REPSYNC_INITIAL_IN_PROGRESS = 65536;
export const DS_REPSYNC_PARTIAL_ATTRIBUTE_SET = 131072;
export const DS_REPSYNC_REQUEUE = 262144;
export const DS_REPSYNC_NOTIFICATION = 524288;
export const DS_REPSYNC_ASYNCHRONOUS_REPLICA = 1048576;
export const DS_REPSYNC_CRITICAL = 2097152;
export const DS_REPSYNC_FULL_IN_PROGRESS = 4194304;
export const DS_REPSYNC_PREEMPTED = 8388608;
export const DS_REPSYNC_NONGC_RO_REPLICA = 16777216;
export const DS_REPADD_ASYNCHRONOUS_OPERATION = 1;
export const DS_REPADD_WRITEABLE = 2;
export const DS_REPADD_INITIAL = 4;
export const DS_REPADD_PERIODIC = 8;
export const DS_REPADD_INTERSITE_MESSAGING = 16;
export const DS_REPADD_ASYNCHRONOUS_REPLICA = 32;
export const DS_REPADD_DISABLE_NOTIFICATION = 64;
export const DS_REPADD_DISABLE_PERIODIC = 128;
export const DS_REPADD_USE_COMPRESSION = 256;
export const DS_REPADD_NEVER_NOTIFY = 512;
export const DS_REPADD_TWO_WAY = 1024;
export const DS_REPADD_CRITICAL = 2048;
export const DS_REPADD_SELECT_SECRETS = 4096;
export const DS_REPADD_NONGC_RO_REPLICA = 16777216;
export const DS_REPDEL_ASYNCHRONOUS_OPERATION = 1;
export const DS_REPDEL_WRITEABLE = 2;
export const DS_REPDEL_INTERSITE_MESSAGING = 4;
export const DS_REPDEL_IGNORE_ERRORS = 8;
export const DS_REPDEL_LOCAL_ONLY = 16;
export const DS_REPDEL_NO_SOURCE = 32;
export const DS_REPDEL_REF_OK = 64;
export const DS_REPMOD_ASYNCHRONOUS_OPERATION = 1;
export const DS_REPMOD_WRITEABLE = 2;
export const DS_REPMOD_UPDATE_FLAGS = 1;
export const DS_REPMOD_UPDATE_INSTANCE = 2;
export const DS_REPMOD_UPDATE_ADDRESS = 2;
export const DS_REPMOD_UPDATE_SCHEDULE = 4;
export const DS_REPMOD_UPDATE_RESULT = 8;
export const DS_REPMOD_UPDATE_TRANSPORT = 16;
export const DS_REPUPD_ASYNCHRONOUS_OPERATION = 1;
export const DS_REPUPD_WRITEABLE = 2;
export const DS_REPUPD_ADD_REFERENCE = 4;
export const DS_REPUPD_DELETE_REFERENCE = 8;
export const DS_REPUPD_REFERENCE_GCSPN = 16;
export const DS_INSTANCETYPE_IS_NC_HEAD = 1;
export const DS_INSTANCETYPE_NC_IS_WRITEABLE = 4;
export const DS_INSTANCETYPE_NC_COMING = 16;
export const DS_INSTANCETYPE_NC_GOING = 32;
export const NTDSDSA_OPT_IS_GC = 1;
export const NTDSDSA_OPT_DISABLE_INBOUND_REPL = 2;
export const NTDSDSA_OPT_DISABLE_OUTBOUND_REPL = 4;
export const NTDSDSA_OPT_DISABLE_NTDSCONN_XLATE = 8;
export const NTDSDSA_OPT_DISABLE_SPN_REGISTRATION = 16;
export const NTDSDSA_OPT_GENERATE_OWN_TOPO = 32;
export const NTDSDSA_OPT_BLOCK_RPC = 64;
export const NTDSCONN_OPT_IS_GENERATED = 1;
export const NTDSCONN_OPT_TWOWAY_SYNC = 2;
export const NTDSCONN_OPT_OVERRIDE_NOTIFY_DEFAULT = 4;
export const NTDSCONN_OPT_USE_NOTIFY = 8;
export const NTDSCONN_OPT_DISABLE_INTERSITE_COMPRESSION = 16;
export const NTDSCONN_OPT_USER_OWNED_SCHEDULE = 32;
export const NTDSCONN_OPT_RODC_TOPOLOGY = 64;
export const NTDSCONN_KCC_NO_REASON = 0;
export const NTDSCONN_KCC_GC_TOPOLOGY = 1;
export const NTDSCONN_KCC_RING_TOPOLOGY = 2;
export const NTDSCONN_KCC_MINIMIZE_HOPS_TOPOLOGY = 4;
export const NTDSCONN_KCC_STALE_SERVERS_TOPOLOGY = 8;
export const NTDSCONN_KCC_OSCILLATING_CONNECTION_TOPOLOGY = 16;
export const NTDSCONN_KCC_INTERSITE_GC_TOPOLOGY = 32;
export const NTDSCONN_KCC_INTERSITE_TOPOLOGY = 64;
export const NTDSCONN_KCC_SERVER_FAILOVER_TOPOLOGY = 128;
export const NTDSCONN_KCC_SITE_FAILOVER_TOPOLOGY = 256;
export const NTDSCONN_KCC_REDUNDANT_SERVER_TOPOLOGY = 512;
export const FRSCONN_PRIORITY_MASK = 1879048192;
export const FRSCONN_MAX_PRIORITY = 8;
export const NTDSCONN_OPT_IGNORE_SCHEDULE_MASK = 2147483648;
export const NTDSSETTINGS_OPT_IS_AUTO_TOPOLOGY_DISABLED = 1;
export const NTDSSETTINGS_OPT_IS_TOPL_CLEANUP_DISABLED = 2;
export const NTDSSETTINGS_OPT_IS_TOPL_MIN_HOPS_DISABLED = 4;
export const NTDSSETTINGS_OPT_IS_TOPL_DETECT_STALE_DISABLED = 8;
export const NTDSSETTINGS_OPT_IS_INTER_SITE_AUTO_TOPOLOGY_DISABLED = 16;
export const NTDSSETTINGS_OPT_IS_GROUP_CACHING_ENABLED = 32;
export const NTDSSETTINGS_OPT_FORCE_KCC_WHISTLER_BEHAVIOR = 64;
export const NTDSSETTINGS_OPT_FORCE_KCC_W2K_ELECTION = 128;
export const NTDSSETTINGS_OPT_IS_RAND_BH_SELECTION_DISABLED = 256;
export const NTDSSETTINGS_OPT_IS_SCHEDULE_HASHING_ENABLED = 512;
export const NTDSSETTINGS_OPT_IS_REDUNDANT_SERVER_TOPOLOGY_ENABLED = 1024;
export const NTDSSETTINGS_OPT_W2K3_IGNORE_SCHEDULES = 2048;
export const NTDSSETTINGS_OPT_W2K3_BRIDGES_REQUIRED = 4096;
export const NTDSSETTINGS_DEFAULT_SERVER_REDUNDANCY = 2;
export const NTDSTRANSPORT_OPT_IGNORE_SCHEDULES = 1;
export const NTDSTRANSPORT_OPT_BRIDGES_REQUIRED = 2;
export const NTDSSITECONN_OPT_USE_NOTIFY = 1;
export const NTDSSITECONN_OPT_TWOWAY_SYNC = 2;
export const NTDSSITECONN_OPT_DISABLE_COMPRESSION = 4;
export const NTDSSITELINK_OPT_USE_NOTIFY = 1;
export const NTDSSITELINK_OPT_TWOWAY_SYNC = 2;
export const NTDSSITELINK_OPT_DISABLE_COMPRESSION = 4;
export const GUID_USERS_CONTAINER_A = `a9d1ca15768811d1aded00c04fd8d5cd`;
export const GUID_COMPUTRS_CONTAINER_A = `aa312825768811d1aded00c04fd8d5cd`;
export const GUID_SYSTEMS_CONTAINER_A = `ab1d30f3768811d1aded00c04fd8d5cd`;
export const GUID_DOMAIN_CONTROLLERS_CONTAINER_A = `a361b2ffffd211d1aa4b00c04fd7d83a`;
export const GUID_INFRASTRUCTURE_CONTAINER_A = `2fbac1870ade11d297c400c04fd8d5cd`;
export const GUID_DELETED_OBJECTS_CONTAINER_A = `18e2ea80684f11d2b9aa00c04f79f805`;
export const GUID_LOSTANDFOUND_CONTAINER_A = `ab8153b7768811d1aded00c04fd8d5cd`;
export const GUID_FOREIGNSECURITYPRINCIPALS_CONTAINER_A = `22b70c67d56e4efb91e9300fca3dc1aa`;
export const GUID_PROGRAM_DATA_CONTAINER_A = `09460c08ae1e4a4ea0f64aee7daa1e5a`;
export const GUID_MICROSOFT_PROGRAM_DATA_CONTAINER_A = `f4be92a4c777485e878e9421d53087db`;
export const GUID_NTDS_QUOTAS_CONTAINER_A = `6227f0af1fc2410d8e3bb10615bb5b0f`;
export const GUID_USERS_CONTAINER_W = `a9d1ca15768811d1aded00c04fd8d5cd`;
export const GUID_COMPUTRS_CONTAINER_W = `aa312825768811d1aded00c04fd8d5cd`;
export const GUID_SYSTEMS_CONTAINER_W = `ab1d30f3768811d1aded00c04fd8d5cd`;
export const GUID_DOMAIN_CONTROLLERS_CONTAINER_W = `a361b2ffffd211d1aa4b00c04fd7d83a`;
export const GUID_INFRASTRUCTURE_CONTAINER_W = `2fbac1870ade11d297c400c04fd8d5cd`;
export const GUID_DELETED_OBJECTS_CONTAINER_W = `18e2ea80684f11d2b9aa00c04f79f805`;
export const GUID_LOSTANDFOUND_CONTAINER_W = `ab8153b7768811d1aded00c04fd8d5cd`;
export const GUID_FOREIGNSECURITYPRINCIPALS_CONTAINER_W = `22b70c67d56e4efb91e9300fca3dc1aa`;
export const GUID_PROGRAM_DATA_CONTAINER_W = `09460c08ae1e4a4ea0f64aee7daa1e5a`;
export const GUID_MICROSOFT_PROGRAM_DATA_CONTAINER_W = `f4be92a4c777485e878e9421d53087db`;
export const GUID_NTDS_QUOTAS_CONTAINER_W = `6227f0af1fc2410d8e3bb10615bb5b0f`;
export const GUID_MANAGED_SERVICE_ACCOUNTS_CONTAINER_W = `1EB93889E40C45DF9F0C64D23BBB6237`;
export const GUID_KEYS_CONTAINER_W = `683A24E2E8164BD3AF86AC3C2CF3F981`;
export const DS_REPSYNCALL_NO_OPTIONS = 0;
export const DS_REPSYNCALL_ABORT_IF_SERVER_UNAVAILABLE = 1;
export const DS_REPSYNCALL_SYNC_ADJACENT_SERVERS_ONLY = 2;
export const DS_REPSYNCALL_ID_SERVERS_BY_DN = 4;
export const DS_REPSYNCALL_DO_NOT_SYNC = 8;
export const DS_REPSYNCALL_SKIP_INITIAL_CHECK = 16;
export const DS_REPSYNCALL_PUSH_CHANGES_OUTWARD = 32;
export const DS_REPSYNCALL_CROSS_SITE_BOUNDARIES = 64;
export const DS_LIST_DSA_OBJECT_FOR_SERVER = 0;
export const DS_LIST_DNS_HOST_NAME_FOR_SERVER = 1;
export const DS_LIST_ACCOUNT_OBJECT_FOR_SERVER = 2;
export const DS_ROLE_SCHEMA_OWNER = 0;
export const DS_ROLE_DOMAIN_OWNER = 1;
export const DS_ROLE_PDC_OWNER = 2;
export const DS_ROLE_RID_OWNER = 3;
export const DS_ROLE_INFRASTRUCTURE_OWNER = 4;
export const DS_SCHEMA_GUID_NOT_FOUND = 0;
export const DS_SCHEMA_GUID_ATTR = 1;
export const DS_SCHEMA_GUID_ATTR_SET = 2;
export const DS_SCHEMA_GUID_CLASS = 3;
export const DS_SCHEMA_GUID_CONTROL_RIGHT = 4;
export const DS_KCC_FLAG_ASYNC_OP = 1;
export const DS_KCC_FLAG_DAMPED = 2;
export const DS_EXIST_ADVISORY_MODE = 1;
export const DS_REPL_INFO_FLAG_IMPROVE_LINKED_ATTRS = 1;
export const DS_REPL_NBR_WRITEABLE = 16;
export const DS_REPL_NBR_SYNC_ON_STARTUP = 32;
export const DS_REPL_NBR_DO_SCHEDULED_SYNCS = 64;
export const DS_REPL_NBR_USE_ASYNC_INTERSITE_TRANSPORT = 128;
export const DS_REPL_NBR_TWO_WAY_SYNC = 512;
export const DS_REPL_NBR_NONGC_RO_REPLICA = 1024;
export const DS_REPL_NBR_RETURN_OBJECT_PARENTS = 2048;
export const DS_REPL_NBR_SELECT_SECRETS = 4096;
export const DS_REPL_NBR_FULL_SYNC_IN_PROGRESS = 65536;
export const DS_REPL_NBR_FULL_SYNC_NEXT_PACKET = 131072;
export const DS_REPL_NBR_GCSPN = 1048576;
export const DS_REPL_NBR_NEVER_SYNCED = 2097152;
export const DS_REPL_NBR_PREEMPTED = 16777216;
export const DS_REPL_NBR_IGNORE_CHANGE_NOTIFICATIONS = 67108864;
export const DS_REPL_NBR_DISABLE_SCHEDULED_SYNC = 134217728;
export const DS_REPL_NBR_COMPRESS_CHANGES = 268435456;
export const DS_REPL_NBR_NO_CHANGE_NOTIFICATIONS = 536870912;
export const DS_REPL_NBR_PARTIAL_ATTRIBUTE_SET = 1073741824;
export const ADAM_SCP_SITE_NAME_STRING = `site:`;
export const ADAM_SCP_SITE_NAME_STRING_W = `site:`;
export const ADAM_SCP_PARTITION_STRING = `partition:`;
export const ADAM_SCP_PARTITION_STRING_W = `partition:`;
export const ADAM_SCP_INSTANCE_NAME_STRING = `instance:`;
export const ADAM_SCP_INSTANCE_NAME_STRING_W = `instance:`;
export const ADAM_SCP_FSMO_STRING = `fsmo:`;
export const ADAM_SCP_FSMO_STRING_W = `fsmo:`;
export const ADAM_SCP_FSMO_NAMING_STRING = `naming`;
export const ADAM_SCP_FSMO_NAMING_STRING_W = `naming`;
export const ADAM_SCP_FSMO_SCHEMA_STRING = `schema`;
export const ADAM_SCP_FSMO_SCHEMA_STRING_W = `schema`;
export const ADAM_REPL_AUTHENTICATION_MODE_NEGOTIATE_PASS_THROUGH = 0;
export const ADAM_REPL_AUTHENTICATION_MODE_NEGOTIATE = 1;
export const ADAM_REPL_AUTHENTICATION_MODE_MUTUAL_AUTH_REQUIRED = 2;
export const FLAG_FOREST_OPTIONAL_FEATURE = 1;
export const FLAG_DOMAIN_OPTIONAL_FEATURE = 2;
export const FLAG_DISABLABLE_OPTIONAL_FEATURE = 4;
export const FLAG_SERVER_OPTIONAL_FEATURE = 8;
export const GUID_RECYCLE_BIN_OPTIONAL_FEATURE_A = `d8dc6d76d0ac5e44f3b9a7f9b6744f2a`;
export const GUID_RECYCLE_BIN_OPTIONAL_FEATURE_W = `d8dc6d76d0ac5e44f3b9a7f9b6744f2a`;
export const GUID_PRIVILEGED_ACCESS_MANAGEMENT_OPTIONAL_FEATURE_A = `73e843ece8cc4046b4ab07ffe4ab5bcd`;
export const GUID_PRIVILEGED_ACCESS_MANAGEMENT_OPTIONAL_FEATURE_W = `73e843ece8cc4046b4ab07ffe4ab5bcd`;
export const CFSTR_DSOP_DS_SELECTION_LIST = `CFSTR_DSOP_DS_SELECTION_LIST`;
export const DSOP_SCOPE_TYPE_TARGET_COMPUTER = 1;
export const DSOP_SCOPE_TYPE_UPLEVEL_JOINED_DOMAIN = 2;
export const DSOP_SCOPE_TYPE_DOWNLEVEL_JOINED_DOMAIN = 4;
export const DSOP_SCOPE_TYPE_ENTERPRISE_DOMAIN = 8;
export const DSOP_SCOPE_TYPE_GLOBAL_CATALOG = 16;
export const DSOP_SCOPE_TYPE_EXTERNAL_UPLEVEL_DOMAIN = 32;
export const DSOP_SCOPE_TYPE_EXTERNAL_DOWNLEVEL_DOMAIN = 64;
export const DSOP_SCOPE_TYPE_WORKGROUP = 128;
export const DSOP_SCOPE_TYPE_USER_ENTERED_UPLEVEL_SCOPE = 256;
export const DSOP_SCOPE_TYPE_USER_ENTERED_DOWNLEVEL_SCOPE = 512;
export const DSOP_SCOPE_FLAG_STARTING_SCOPE = 1;
export const DSOP_SCOPE_FLAG_WANT_PROVIDER_WINNT = 2;
export const DSOP_SCOPE_FLAG_WANT_PROVIDER_LDAP = 4;
export const DSOP_SCOPE_FLAG_WANT_PROVIDER_GC = 8;
export const DSOP_SCOPE_FLAG_WANT_SID_PATH = 16;
export const DSOP_SCOPE_FLAG_WANT_DOWNLEVEL_BUILTIN_PATH = 32;
export const DSOP_SCOPE_FLAG_DEFAULT_FILTER_USERS = 64;
export const DSOP_SCOPE_FLAG_DEFAULT_FILTER_GROUPS = 128;
export const DSOP_SCOPE_FLAG_DEFAULT_FILTER_COMPUTERS = 256;
export const DSOP_SCOPE_FLAG_DEFAULT_FILTER_CONTACTS = 512;
export const DSOP_SCOPE_FLAG_DEFAULT_FILTER_SERVICE_ACCOUNTS = 1024;
export const DSOP_SCOPE_FLAG_DEFAULT_FILTER_PASSWORDSETTINGS_OBJECTS = 2048;
export const DSOP_FILTER_INCLUDE_ADVANCED_VIEW = 1;
export const DSOP_FILTER_USERS = 2;
export const DSOP_FILTER_BUILTIN_GROUPS = 4;
export const DSOP_FILTER_WELL_KNOWN_PRINCIPALS = 8;
export const DSOP_FILTER_UNIVERSAL_GROUPS_DL = 16;
export const DSOP_FILTER_UNIVERSAL_GROUPS_SE = 32;
export const DSOP_FILTER_GLOBAL_GROUPS_DL = 64;
export const DSOP_FILTER_GLOBAL_GROUPS_SE = 128;
export const DSOP_FILTER_DOMAIN_LOCAL_GROUPS_DL = 256;
export const DSOP_FILTER_DOMAIN_LOCAL_GROUPS_SE = 512;
export const DSOP_FILTER_CONTACTS = 1024;
export const DSOP_FILTER_COMPUTERS = 2048;
export const DSOP_FILTER_SERVICE_ACCOUNTS = 4096;
export const DSOP_FILTER_PASSWORDSETTINGS_OBJECTS = 8192;
export const DSOP_DOWNLEVEL_FILTER_USERS = 2147483649;
export const DSOP_DOWNLEVEL_FILTER_LOCAL_GROUPS = 2147483650;
export const DSOP_DOWNLEVEL_FILTER_GLOBAL_GROUPS = 2147483652;
export const DSOP_DOWNLEVEL_FILTER_COMPUTERS = 2147483656;
export const DSOP_DOWNLEVEL_FILTER_WORLD = 2147483664;
export const DSOP_DOWNLEVEL_FILTER_AUTHENTICATED_USER = 2147483680;
export const DSOP_DOWNLEVEL_FILTER_ANONYMOUS = 2147483712;
export const DSOP_DOWNLEVEL_FILTER_BATCH = 2147483776;
export const DSOP_DOWNLEVEL_FILTER_CREATOR_OWNER = 2147483904;
export const DSOP_DOWNLEVEL_FILTER_CREATOR_GROUP = 2147484160;
export const DSOP_DOWNLEVEL_FILTER_DIALUP = 2147484672;
export const DSOP_DOWNLEVEL_FILTER_INTERACTIVE = 2147485696;
export const DSOP_DOWNLEVEL_FILTER_NETWORK = 2147487744;
export const DSOP_DOWNLEVEL_FILTER_SERVICE = 2147491840;
export const DSOP_DOWNLEVEL_FILTER_SYSTEM = 2147500032;
export const DSOP_DOWNLEVEL_FILTER_EXCLUDE_BUILTIN_GROUPS = 2147516416;
export const DSOP_DOWNLEVEL_FILTER_TERMINAL_SERVER = 2147549184;
export const DSOP_DOWNLEVEL_FILTER_ALL_WELLKNOWN_SIDS = 2147614720;
export const DSOP_DOWNLEVEL_FILTER_LOCAL_SERVICE = 2147745792;
export const DSOP_DOWNLEVEL_FILTER_NETWORK_SERVICE = 2148007936;
export const DSOP_DOWNLEVEL_FILTER_REMOTE_LOGON = 2148532224;
export const DSOP_DOWNLEVEL_FILTER_INTERNET_USER = 2149580800;
export const DSOP_DOWNLEVEL_FILTER_OWNER_RIGHTS = 2151677952;
export const DSOP_DOWNLEVEL_FILTER_SERVICES = 2155872256;
export const DSOP_DOWNLEVEL_FILTER_LOCAL_LOGON = 2164260864;
export const DSOP_DOWNLEVEL_FILTER_THIS_ORG_CERT = 2181038080;
export const DSOP_DOWNLEVEL_FILTER_IIS_APP_POOL = 2214592512;
export const DSOP_DOWNLEVEL_FILTER_ALL_APP_PACKAGES = 2281701376;
export const DSOP_DOWNLEVEL_FILTER_LOCAL_ACCOUNTS = 2415919104;
export const DSOP_FLAG_MULTISELECT = 1;
export const DSOP_FLAG_SKIP_TARGET_COMPUTER_DC_CHECK = 2;
export const SCHEDULE_INTERVAL = 0;
export const SCHEDULE_BANDWIDTH = 1;
export const SCHEDULE_PRIORITY = 2;
export const FACILITY_NTDSB = 2048;
export const FACILITY_BACKUP = 2047;
export const FACILITY_SYSTEM = 0;
export const STATUS_SEVERITY_SUCCESS = 0;
export const STATUS_SEVERITY_INFORMATIONAL = 1;
export const STATUS_SEVERITY_WARNING = 2;
export const STATUS_SEVERITY_ERROR = 3;
export const hrNone = 72057611217797120n;
export const hrNyi = 2219424350209;
export const hrInvalidParam = 18374688699230126081n;
export const hrError = 18374689798741753858n;
export const hrInvalidHandle = 18374690898253381635n;
export const hrRestoreInProgress = 18374691997765009412n;
export const hrAlreadyOpen = 18374693097276637189n;
export const hrInvalidRecips = 18374694196788264966n;
export const hrCouldNotConnect = 18374695296299892743n;
export const hrRestoreMapExists = 18374696395811520520n;
export const hrIncrementalBackupDisabled = 18374697495323148297n;
export const hrLogFileNotFound = 18374698594834776074n;
export const hrCircularLogging = 18374699694346403851n;
export const hrNoFullRestore = 18374700793858031628n;
export const hrCommunicationError = 18374701893369659405n;
export const hrFullBackupNotTaken = 18374702992881287182n;
export const hrMissingExpiryToken = 18374704092392914959n;
export const hrUnknownExpiryTokenFormat = 18374705191904542736n;
export const hrContentsExpired = 112170721280017;
export const hrFileClose = 113270232973414;
export const hrOutOfThreads = 115469256228967;
export const hrTooManyIO = 219922860867689;
export const hrBFNotSynchronous = 221021298753736;
export const hrBFPageNotFound = 222120810381513;
export const hrBFInUse = 332073046900938;
export const hrPMRecDeleted = 352963767828782;
export const hrRemainingVersions = 439824112681281;
export const hrFLDKeyTooBig = 440923624309136;
export const hrFLDTooManySegments = 442024209678737;
export const hrFLDNullKey = 550874787086738;
export const hrLogFileCorrupt = 553074884084213;
export const hrNoBackupDirectory = 554174395711991;
export const hrBackupDirectoryNotEmpty = 555273907339768;
export const hrBackupInProgress = 559671953850873;
export const hrMissingPreviousLogFile = 560771465478653;
export const hrLogWriteFail = 565169511989758;
export const hrBadLogVersion = 566269023617538;
export const hrInvalidLogSequence = 567368535245315;
export const hrLoggingDisabled = 568468046873092;
export const hrLogBufferTooSmall = 570667070128645;
export const hrLogSequenceEnd = 571766581756423;
export const hrNoBackup = 572866093384200;
export const hrInvalidBackupSequence = 575065116639753;
export const hrBackupNotAllowedYet = 576164628267531;
export const hrDeleteBackupFileFail = 577264139895308;
export const hrMakeBackupDirectoryFail = 578363651523085;
export const hrInvalidBackup = 579463163150862;
export const hrRecoveredWithErrors = 580562674778639;
export const hrMissingLogFile = 581662186406416;
export const hrLogDiskFull = 582761698034193;
export const hrBadLogSignature = 583861209661970;
export const hrBadDbSignature = 584960721289747;
export const hrBadCheckpointSignature = 586060232917524;
export const hrCheckpointCorrupt = 604751930589717;
export const hrDatabaseInconsistent = 605851442217510;
export const hrConsistentTimeMismatch = 606950953845287;
export const hrPatchFileMismatch = 608050465473064;
export const hrRestoreLogTooLow = 609149977100841;
export const hrRestoreLogTooHigh = 610249488728618;
export const hrGivenLogFileHasBadSignature = 611349000356395;
export const hrGivenLogFileIsNotContiguous = 612448511984172;
export const hrMissingRestoreLogFiles = 613548023611949;
export const hrExistingLogFileHasBadSignature = 614646461497902;
export const hrExistingLogFileIsNotContiguous = 615745973125679;
export const hrMissingFullBackup = 616846558495280;
export const hrBadBackupDatabaseSize = 1099532163088945;
export const hrTermInProgress = 1100631674717160;
export const hrFeatureNotAvailable = 1101731186344937;
export const hrInvalidName = 1102830697972714;
export const hrInvalidParameter = 1103930209600491;
export const hrColumnNull = 1106128159114220;
export const hrBufferTruncated = 1107227670741998;
export const hrDatabaseAttached = 1110526205625327;
export const hrInvalidDatabaseId = 1111626790994930;
export const hrOutOfMemory = 1112726302622707;
export const hrOutOfDatabaseSpace = 1113825814250484;
export const hrOutOfCursors = 1114925325878261;
export const hrOutOfBuffers = 1116024837506038;
export const hrTooManyIndexes = 1117124349133815;
export const hrTooManyKeys = 1118223860761592;
export const hrRecordDeleted = 1119323372389369;
export const hrReadVerifyFailure = 1121522395644922;
export const hrOutOfFileHandles = 1123721418900476;
export const hrDiskIO = 1124820930528254;
export const hrInvalidPath = 1128119465411583;
export const hrRecordTooBig = 1129218977039362;
export const hrTooManyOpenDatabases = 1130318488667139;
export const hrInvalidDatabase = 1131418000294916;
export const hrNotInitialized = 1132517511922693;
export const hrAlreadyInitialized = 1134716535178246;
export const hrFileAccessDenied = 1141313604944904;
export const hrBufferTooSmall = 1142413116572686;
export const hrSeekNotEqual = 1143511554458639;
export const hrTooManyColumns = 1146811163083792;
export const hrContainerNotEmpty = 1147910674711571;
export const hrInvalidFilename = 1149010186339348;
export const hrInvalidBookmark = 1150109697967125;
export const hrColumnInUse = 1151209209594902;
export const hrInvalidBufferSize = 1152308721222679;
export const hrColumnNotUpdatable = 1155607256106008;
export const hrIndexInUse = 1157806279361563;
export const hrNullKeyDisallowed = 1158905790989341;
export const hrNotInTransaction = 1163303837500446;
export const hrNoIdleActivity = 1164402275386402;
export const hrTooManyActiveUsers = 1166602372383779;
export const hrInvalidCountry = 1167701884011557;
export const hrInvalidLanguageId = 1168801395639334;
export const hrInvalidCodePage = 1173199442150439;
export const hrNoWriteLock = 1174297880036395;
export const hrColumnSetNull = 1175397391664172;
export const hrVersionStoreOutOfMemory = 1176497977033773;
export const hrCurrencyStackOutOfMemory = 1210582837494830;
export const hrOutOfSessions = 1211682349122637;
export const hrWriteConflict = 1212781860750414;
export const hrTransTooDeep = 1213881372378191;
export const hrInvalidSesid = 1217179907261520;
export const hrSessionWriteConflict = 1218279418889299;
export const hrInTransaction = 1320534000272468;
export const hrDatabaseDuplicate = 1321633511900337;
export const hrDatabaseInUse = 1322733023528114;
export const hrDatabaseNotFound = 1323832535155891;
export const hrDatabaseInvalidName = 1324932046783668;
export const hrDatabaseInvalidPages = 1326031558411445;
export const hrDatabaseCorrupted = 1327131070039222;
export const hrDatabaseLocked = 1430485163050167;
export const hrTableEmpty = 1431583600936213;
export const hrTableLocked = 1432684186305814;
export const hrTableDuplicate = 1433783697933591;
export const hrTableInUse = 1434883209561368;
export const hrObjectNotFound = 1435982721189145;
export const hrCannotRename = 1437082232816922;
export const hrDensityInvalid = 1438181744444699;
export const hrTableNotEmpty = 1440380767700252;
export const hrInvalidTableId = 1441480279328030;
export const hrTooManyOpenTables = 1442579790955807;
export const hrIllegalOperation = 1444778814211360;
export const hrObjectDuplicate = 1446977837466914;
export const hrInvalidObject = 1540436325827876;
export const hrIndexCantBuild = 1541535837455737;
export const hrIndexHasPrimary = 1542635349083514;
export const hrIndexDuplicate = 1543734860711291;
export const hrIndexNotFound = 1544834372339068;
export const hrIndexMustStay = 1545933883966845;
export const hrIndexInvalidDef = 1548132907222398;
export const hrIndexHasClustered = 1549232418850176;
export const hrCreateIndexFailed = 1550330856736129;
export const hrTooManyOpenIndexes = 1650387488605570;
export const hrColumnLong = 1652586511861213;
export const hrColumnDoesNotFit = 1653686023488991;
export const hrNullInvalid = 1654785535116768;
export const hrColumnIndexed = 1655885046744545;
export const hrColumnTooBig = 1656984558372322;
export const hrColumnNotFound = 1658084070000099;
export const hrColumnDuplicate = 1660283093255652;
export const hrColumn2ndSysMaint = 1661382604883430;
export const hrInvalidColumnType = 1662482116511207;
export const hrColumnMaxTruncated = 1663580554397160;
export const hrColumnCannotIndex = 1664681139766761;
export const hrTaggedNotNULL = 1665780651394538;
export const hrNoCurrentIndex = 1666880163022315;
export const hrKeyIsMade = 1667979674650092;
export const hrBadColumnId = 1669079186277869;
export const hrBadItagSequence = 1672377721161198;
export const hrCannotBeTagged = 1760338651383281;
export const hrRecordNotFound = 1762537674638913;
export const hrNoCurrentRecord = 1763637186266691;
export const hrRecordClusteredChanged = 1764736697894468;
export const hrKeyDuplicate = 1766935721150021;
export const hrAlreadyPrepared = 1768035232777799;
export const hrKeyNotMade = 1769134744405576;
export const hrUpdateNotPrepared = 1770234256033353;
export const hrwrnDataHasChanged = 1771332693919306;
export const hrerrDataHasChanged = 1779030349055563;
export const hrKeyChanged = 1870288740419154;
export const hrTooManySorts = 1871389325788837;
export const hrInvalidOnSort = 1982440000194214;
export const hrTempFileOpenError = 1984639023449867;
export const hrTooManyAttachedDatabases = 1987937558333197;
export const hrDiskFull = 1989037069960976;
export const hrPermissionDenied = 1991236093216529;
export const hrFileNotFound = 1993435116472083;
export const hrFileOpenReadOnly = 2034115972957973;
export const hrAfterInitialization = 2036316069955386;
export const hrLogCorrupted = 2095689697855292;
export const hrInvalidOperation = 2096789209483122;
export const hrAccessDenied = 1225542099198281587n;
export const ADSTYPE_INVALID = 0;
export const ADSTYPE_DN_STRING = 1;
export const ADSTYPE_CASE_EXACT_STRING = 2;
export const ADSTYPE_CASE_IGNORE_STRING = 3;
export const ADSTYPE_PRINTABLE_STRING = 4;
export const ADSTYPE_NUMERIC_STRING = 5;
export const ADSTYPE_BOOLEAN = 6;
export const ADSTYPE_INTEGER = 7;
export const ADSTYPE_OCTET_STRING = 8;
export const ADSTYPE_UTC_TIME = 9;
export const ADSTYPE_LARGE_INTEGER = 10;
export const ADSTYPE_PROV_SPECIFIC = 11;
export const ADSTYPE_OBJECT_CLASS = 12;
export const ADSTYPE_CASEIGNORE_LIST = 13;
export const ADSTYPE_OCTET_LIST = 14;
export const ADSTYPE_PATH = 15;
export const ADSTYPE_POSTALADDRESS = 16;
export const ADSTYPE_TIMESTAMP = 17;
export const ADSTYPE_BACKLINK = 18;
export const ADSTYPE_TYPEDNAME = 19;
export const ADSTYPE_HOLD = 20;
export const ADSTYPE_NETADDRESS = 21;
export const ADSTYPE_REPLICAPOINTER = 22;
export const ADSTYPE_FAXNUMBER = 23;
export const ADSTYPE_EMAIL = 24;
export const ADSTYPE_NT_SECURITY_DESCRIPTOR = 25;
export const ADSTYPE_UNKNOWN = 26;
export const ADSTYPE_DN_WITH_BINARY = 27;
export const ADSTYPE_DN_WITH_STRING = 28;
export const ADS_SECURE_AUTHENTICATION = 1;
export const ADS_USE_ENCRYPTION = 2;
export const ADS_USE_SSL = 2;
export const ADS_READONLY_SERVER = 4;
export const ADS_PROMPT_CREDENTIALS = 8;
export const ADS_NO_AUTHENTICATION = 16;
export const ADS_FAST_BIND = 32;
export const ADS_USE_SIGNING = 64;
export const ADS_USE_SEALING = 128;
export const ADS_USE_DELEGATION = 256;
export const ADS_SERVER_BIND = 512;
export const ADS_NO_REFERRAL_CHASING = 1024;
export const ADS_AUTH_RESERVED = 2147483648;
export const ADS_STATUS_S_OK = 0;
export const ADS_STATUS_INVALID_SEARCHPREF = 1;
export const ADS_STATUS_INVALID_SEARCHPREFVALUE = 2;
export const ADS_DEREF_NEVER = 0;
export const ADS_DEREF_SEARCHING = 1;
export const ADS_DEREF_FINDING = 2;
export const ADS_DEREF_ALWAYS = 3;
export const ADS_SCOPE_BASE = 0;
export const ADS_SCOPE_ONELEVEL = 1;
export const ADS_SCOPE_SUBTREE = 2;
export const ADSIPROP_ASYNCHRONOUS = 0;
export const ADSIPROP_DEREF_ALIASES = 1;
export const ADSIPROP_SIZE_LIMIT = 2;
export const ADSIPROP_TIME_LIMIT = 3;
export const ADSIPROP_ATTRIBTYPES_ONLY = 4;
export const ADSIPROP_SEARCH_SCOPE = 5;
export const ADSIPROP_TIMEOUT = 6;
export const ADSIPROP_PAGESIZE = 7;
export const ADSIPROP_PAGED_TIME_LIMIT = 8;
export const ADSIPROP_CHASE_REFERRALS = 9;
export const ADSIPROP_SORT_ON = 10;
export const ADSIPROP_CACHE_RESULTS = 11;
export const ADSIPROP_ADSIFLAG = 12;
export const ADSI_DIALECT_LDAP = 0;
export const ADSI_DIALECT_SQL = 1;
export const ADS_CHASE_REFERRALS_NEVER = 0;
export const ADS_CHASE_REFERRALS_SUBORDINATE = 32;
export const ADS_CHASE_REFERRALS_EXTERNAL = 64;
export const ADS_CHASE_REFERRALS_ALWAYS = 96;
export const ADS_SEARCHPREF_ASYNCHRONOUS = 0;
export const ADS_SEARCHPREF_DEREF_ALIASES = 1;
export const ADS_SEARCHPREF_SIZE_LIMIT = 2;
export const ADS_SEARCHPREF_TIME_LIMIT = 3;
export const ADS_SEARCHPREF_ATTRIBTYPES_ONLY = 4;
export const ADS_SEARCHPREF_SEARCH_SCOPE = 5;
export const ADS_SEARCHPREF_TIMEOUT = 6;
export const ADS_SEARCHPREF_PAGESIZE = 7;
export const ADS_SEARCHPREF_PAGED_TIME_LIMIT = 8;
export const ADS_SEARCHPREF_CHASE_REFERRALS = 9;
export const ADS_SEARCHPREF_SORT_ON = 10;
export const ADS_SEARCHPREF_CACHE_RESULTS = 11;
export const ADS_SEARCHPREF_DIRSYNC = 12;
export const ADS_SEARCHPREF_TOMBSTONE = 13;
export const ADS_SEARCHPREF_VLV = 14;
export const ADS_SEARCHPREF_ATTRIBUTE_QUERY = 15;
export const ADS_SEARCHPREF_SECURITY_MASK = 16;
export const ADS_SEARCHPREF_DIRSYNC_FLAG = 17;
export const ADS_SEARCHPREF_EXTENDED_DN = 18;
export const ADS_PASSWORD_ENCODE_REQUIRE_SSL = 0;
export const ADS_PASSWORD_ENCODE_CLEAR = 1;
export const ADS_PROPERTY_CLEAR = 1;
export const ADS_PROPERTY_UPDATE = 2;
export const ADS_PROPERTY_APPEND = 3;
export const ADS_PROPERTY_DELETE = 4;
export const ADS_SYSTEMFLAG_DISALLOW_DELETE = `-2147483648`;
export const ADS_SYSTEMFLAG_CONFIG_ALLOW_RENAME = 1073741824;
export const ADS_SYSTEMFLAG_CONFIG_ALLOW_MOVE = 536870912;
export const ADS_SYSTEMFLAG_CONFIG_ALLOW_LIMITED_MOVE = 268435456;
export const ADS_SYSTEMFLAG_DOMAIN_DISALLOW_RENAME = 134217728;
export const ADS_SYSTEMFLAG_DOMAIN_DISALLOW_MOVE = 67108864;
export const ADS_SYSTEMFLAG_CR_NTDS_NC = 1;
export const ADS_SYSTEMFLAG_CR_NTDS_DOMAIN = 2;
export const ADS_SYSTEMFLAG_ATTR_NOT_REPLICATED = 1;
export const ADS_SYSTEMFLAG_ATTR_IS_CONSTRUCTED = 4;
export const ADS_GROUP_TYPE_GLOBAL_GROUP = 2;
export const ADS_GROUP_TYPE_DOMAIN_LOCAL_GROUP = 4;
export const ADS_GROUP_TYPE_LOCAL_GROUP = 4;
export const ADS_GROUP_TYPE_UNIVERSAL_GROUP = 8;
export const ADS_GROUP_TYPE_SECURITY_ENABLED = `-2147483648`;
export const ADS_UF_SCRIPT = 1;
export const ADS_UF_ACCOUNTDISABLE = 2;
export const ADS_UF_HOMEDIR_REQUIRED = 8;
export const ADS_UF_LOCKOUT = 16;
export const ADS_UF_PASSWD_NOTREQD = 32;
export const ADS_UF_PASSWD_CANT_CHANGE = 64;
export const ADS_UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED = 128;
export const ADS_UF_TEMP_DUPLICATE_ACCOUNT = 256;
export const ADS_UF_NORMAL_ACCOUNT = 512;
export const ADS_UF_INTERDOMAIN_TRUST_ACCOUNT = 2048;
export const ADS_UF_WORKSTATION_TRUST_ACCOUNT = 4096;
export const ADS_UF_SERVER_TRUST_ACCOUNT = 8192;
export const ADS_UF_DONT_EXPIRE_PASSWD = 65536;
export const ADS_UF_MNS_LOGON_ACCOUNT = 131072;
export const ADS_UF_SMARTCARD_REQUIRED = 262144;
export const ADS_UF_TRUSTED_FOR_DELEGATION = 524288;
export const ADS_UF_NOT_DELEGATED = 1048576;
export const ADS_UF_USE_DES_KEY_ONLY = 2097152;
export const ADS_UF_DONT_REQUIRE_PREAUTH = 4194304;
export const ADS_UF_PASSWORD_EXPIRED = 8388608;
export const ADS_UF_TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 16777216;
export const ADS_RIGHT_DELETE = 65536;
export const ADS_RIGHT_READ_CONTROL = 131072;
export const ADS_RIGHT_WRITE_DAC = 262144;
export const ADS_RIGHT_WRITE_OWNER = 524288;
export const ADS_RIGHT_SYNCHRONIZE = 1048576;
export const ADS_RIGHT_ACCESS_SYSTEM_SECURITY = 16777216;
export const ADS_RIGHT_GENERIC_READ = `-2147483648`;
export const ADS_RIGHT_GENERIC_WRITE = 1073741824;
export const ADS_RIGHT_GENERIC_EXECUTE = 536870912;
export const ADS_RIGHT_GENERIC_ALL = 268435456;
export const ADS_RIGHT_DS_CREATE_CHILD = 1;
export const ADS_RIGHT_DS_DELETE_CHILD = 2;
export const ADS_RIGHT_ACTRL_DS_LIST = 4;
export const ADS_RIGHT_DS_SELF = 8;
export const ADS_RIGHT_DS_READ_PROP = 16;
export const ADS_RIGHT_DS_WRITE_PROP = 32;
export const ADS_RIGHT_DS_DELETE_TREE = 64;
export const ADS_RIGHT_DS_LIST_OBJECT = 128;
export const ADS_RIGHT_DS_CONTROL_ACCESS = 256;
export const ADS_ACETYPE_ACCESS_ALLOWED = 0;
export const ADS_ACETYPE_ACCESS_DENIED = 1;
export const ADS_ACETYPE_SYSTEM_AUDIT = 2;
export const ADS_ACETYPE_ACCESS_ALLOWED_OBJECT = 5;
export const ADS_ACETYPE_ACCESS_DENIED_OBJECT = 6;
export const ADS_ACETYPE_SYSTEM_AUDIT_OBJECT = 7;
export const ADS_ACETYPE_SYSTEM_ALARM_OBJECT = 8;
export const ADS_ACETYPE_ACCESS_ALLOWED_CALLBACK = 9;
export const ADS_ACETYPE_ACCESS_DENIED_CALLBACK = 10;
export const ADS_ACETYPE_ACCESS_ALLOWED_CALLBACK_OBJECT = 11;
export const ADS_ACETYPE_ACCESS_DENIED_CALLBACK_OBJECT = 12;
export const ADS_ACETYPE_SYSTEM_AUDIT_CALLBACK = 13;
export const ADS_ACETYPE_SYSTEM_ALARM_CALLBACK = 14;
export const ADS_ACETYPE_SYSTEM_AUDIT_CALLBACK_OBJECT = 15;
export const ADS_ACETYPE_SYSTEM_ALARM_CALLBACK_OBJECT = 16;
export const ADS_ACEFLAG_INHERIT_ACE = 2;
export const ADS_ACEFLAG_NO_PROPAGATE_INHERIT_ACE = 4;
export const ADS_ACEFLAG_INHERIT_ONLY_ACE = 8;
export const ADS_ACEFLAG_INHERITED_ACE = 16;
export const ADS_ACEFLAG_VALID_INHERIT_FLAGS = 31;
export const ADS_ACEFLAG_SUCCESSFUL_ACCESS = 64;
export const ADS_ACEFLAG_FAILED_ACCESS = 128;
export const ADS_FLAG_OBJECT_TYPE_PRESENT = 1;
export const ADS_FLAG_INHERITED_OBJECT_TYPE_PRESENT = 2;
export const ADS_SD_CONTROL_SE_OWNER_DEFAULTED = 1;
export const ADS_SD_CONTROL_SE_GROUP_DEFAULTED = 2;
export const ADS_SD_CONTROL_SE_DACL_PRESENT = 4;
export const ADS_SD_CONTROL_SE_DACL_DEFAULTED = 8;
export const ADS_SD_CONTROL_SE_SACL_PRESENT = 16;
export const ADS_SD_CONTROL_SE_SACL_DEFAULTED = 32;
export const ADS_SD_CONTROL_SE_DACL_AUTO_INHERIT_REQ = 256;
export const ADS_SD_CONTROL_SE_SACL_AUTO_INHERIT_REQ = 512;
export const ADS_SD_CONTROL_SE_DACL_AUTO_INHERITED = 1024;
export const ADS_SD_CONTROL_SE_SACL_AUTO_INHERITED = 2048;
export const ADS_SD_CONTROL_SE_DACL_PROTECTED = 4096;
export const ADS_SD_CONTROL_SE_SACL_PROTECTED = 8192;
export const ADS_SD_CONTROL_SE_SELF_RELATIVE = 32768;
export const ADS_SD_REVISION_DS = 4;
export const ADS_NAME_TYPE_1779 = 1;
export const ADS_NAME_TYPE_CANONICAL = 2;
export const ADS_NAME_TYPE_NT4 = 3;
export const ADS_NAME_TYPE_DISPLAY = 4;
export const ADS_NAME_TYPE_DOMAIN_SIMPLE = 5;
export const ADS_NAME_TYPE_ENTERPRISE_SIMPLE = 6;
export const ADS_NAME_TYPE_GUID = 7;
export const ADS_NAME_TYPE_UNKNOWN = 8;
export const ADS_NAME_TYPE_USER_PRINCIPAL_NAME = 9;
export const ADS_NAME_TYPE_CANONICAL_EX = 10;
export const ADS_NAME_TYPE_SERVICE_PRINCIPAL_NAME = 11;
export const ADS_NAME_TYPE_SID_OR_SID_HISTORY_NAME = 12;
export const ADS_NAME_INITTYPE_DOMAIN = 1;
export const ADS_NAME_INITTYPE_SERVER = 2;
export const ADS_NAME_INITTYPE_GC = 3;
export const ADS_OPTION_SERVERNAME = 0;
export const ADS_OPTION_REFERRALS = 1;
export const ADS_OPTION_PAGE_SIZE = 2;
export const ADS_OPTION_SECURITY_MASK = 3;
export const ADS_OPTION_MUTUAL_AUTH_STATUS = 4;
export const ADS_OPTION_QUOTA = 5;
export const ADS_OPTION_PASSWORD_PORTNUMBER = 6;
export const ADS_OPTION_PASSWORD_METHOD = 7;
export const ADS_OPTION_ACCUMULATIVE_MODIFICATION = 8;
export const ADS_OPTION_SKIP_SID_LOOKUP = 9;
export const ADS_SECURITY_INFO_OWNER = 1;
export const ADS_SECURITY_INFO_GROUP = 2;
export const ADS_SECURITY_INFO_DACL = 4;
export const ADS_SECURITY_INFO_SACL = 8;
export const ADS_SETTYPE_FULL = 1;
export const ADS_SETTYPE_PROVIDER = 2;
export const ADS_SETTYPE_SERVER = 3;
export const ADS_SETTYPE_DN = 4;
export const ADS_FORMAT_WINDOWS = 1;
export const ADS_FORMAT_WINDOWS_NO_SERVER = 2;
export const ADS_FORMAT_WINDOWS_DN = 3;
export const ADS_FORMAT_WINDOWS_PARENT = 4;
export const ADS_FORMAT_X500 = 5;
export const ADS_FORMAT_X500_NO_SERVER = 6;
export const ADS_FORMAT_X500_DN = 7;
export const ADS_FORMAT_X500_PARENT = 8;
export const ADS_FORMAT_SERVER = 9;
export const ADS_FORMAT_PROVIDER = 10;
export const ADS_FORMAT_LEAF = 11;
export const ADS_DISPLAY_FULL = 1;
export const ADS_DISPLAY_VALUE_ONLY = 2;
export const ADS_ESCAPEDMODE_DEFAULT = 1;
export const ADS_ESCAPEDMODE_ON = 2;
export const ADS_ESCAPEDMODE_OFF = 3;
export const ADS_ESCAPEDMODE_OFF_EX = 4;
export const ADS_PATH_FILE = 1;
export const ADS_PATH_FILESHARE = 2;
export const ADS_PATH_REGISTRY = 3;
export const ADS_SD_FORMAT_IID = 1;
export const ADS_SD_FORMAT_RAW = 2;
export const ADS_SD_FORMAT_HEXSTRING = 3;
export const DS_MANGLE_UNKNOWN = 0;
export const DS_MANGLE_OBJECT_RDN_FOR_DELETION = 1;
export const DS_MANGLE_OBJECT_RDN_FOR_NAME_CONFLICT = 2;
export const DS_UNKNOWN_NAME = 0;
export const DS_FQDN_1779_NAME = 1;
export const DS_NT4_ACCOUNT_NAME = 2;
export const DS_DISPLAY_NAME = 3;
export const DS_UNIQUE_ID_NAME = 6;
export const DS_CANONICAL_NAME = 7;
export const DS_USER_PRINCIPAL_NAME = 8;
export const DS_CANONICAL_NAME_EX = 9;
export const DS_SERVICE_PRINCIPAL_NAME = 10;
export const DS_SID_OR_SID_HISTORY_NAME = 11;
export const DS_DNS_DOMAIN_NAME = 12;
export const DS_NAME_NO_FLAGS = 0;
export const DS_NAME_FLAG_SYNTACTICAL_ONLY = 1;
export const DS_NAME_FLAG_EVAL_AT_DC = 2;
export const DS_NAME_FLAG_GCVERIFY = 4;
export const DS_NAME_FLAG_TRUST_REFERRAL = 8;
export const DS_NAME_NO_ERROR = 0;
export const DS_NAME_ERROR_RESOLVING = 1;
export const DS_NAME_ERROR_NOT_FOUND = 2;
export const DS_NAME_ERROR_NOT_UNIQUE = 3;
export const DS_NAME_ERROR_NO_MAPPING = 4;
export const DS_NAME_ERROR_DOMAIN_ONLY = 5;
export const DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 6;
export const DS_NAME_ERROR_TRUST_REFERRAL = 7;
export const DS_SPN_DNS_HOST = 0;
export const DS_SPN_DN_HOST = 1;
export const DS_SPN_NB_HOST = 2;
export const DS_SPN_DOMAIN = 3;
export const DS_SPN_NB_DOMAIN = 4;
export const DS_SPN_SERVICE = 5;
export const DS_SPN_ADD_SPN_OP = 0;
export const DS_SPN_REPLACE_SPN_OP = 1;
export const DS_SPN_DELETE_SPN_OP = 2;
export const DS_REPSYNCALL_WIN32_ERROR_CONTACTING_SERVER = 0;
export const DS_REPSYNCALL_WIN32_ERROR_REPLICATING = 1;
export const DS_REPSYNCALL_SERVER_UNREACHABLE = 2;
export const DS_REPSYNCALL_EVENT_ERROR = 0;
export const DS_REPSYNCALL_EVENT_SYNC_STARTED = 1;
export const DS_REPSYNCALL_EVENT_SYNC_COMPLETED = 2;
export const DS_REPSYNCALL_EVENT_FINISHED = 3;
export const DS_KCC_TASKID_UPDATE_TOPOLOGY = 0;
export const DS_REPL_INFO_NEIGHBORS = 0;
export const DS_REPL_INFO_CURSORS_FOR_NC = 1;
export const DS_REPL_INFO_METADATA_FOR_OBJ = 2;
export const DS_REPL_INFO_KCC_DSA_CONNECT_FAILURES = 3;
export const DS_REPL_INFO_KCC_DSA_LINK_FAILURES = 4;
export const DS_REPL_INFO_PENDING_OPS = 5;
export const DS_REPL_INFO_METADATA_FOR_ATTR_VALUE = 6;
export const DS_REPL_INFO_CURSORS_2_FOR_NC = 7;
export const DS_REPL_INFO_CURSORS_3_FOR_NC = 8;
export const DS_REPL_INFO_METADATA_2_FOR_OBJ = 9;
export const DS_REPL_INFO_METADATA_2_FOR_ATTR_VALUE = 10;
export const DS_REPL_INFO_METADATA_EXT_FOR_ATTR_VALUE = 11;
export const DS_REPL_INFO_TYPE_MAX = 12;
export const DS_REPL_OP_TYPE_SYNC = 0;
export const DS_REPL_OP_TYPE_ADD = 1;
export const DS_REPL_OP_TYPE_DELETE = 2;
export const DS_REPL_OP_TYPE_MODIFY = 3;
export const DS_REPL_OP_TYPE_UPDATE_REFS = 4;
export const DsRole_RoleStandaloneWorkstation = 0;
export const DsRole_RoleMemberWorkstation = 1;
export const DsRole_RoleStandaloneServer = 2;
export const DsRole_RoleMemberServer = 3;
export const DsRole_RoleBackupDomainController = 4;
export const DsRole_RolePrimaryDomainController = 5;
export const DsRoleServerUnknown = 0;
export const DsRoleServerPrimary = 1;
export const DsRoleServerBackup = 2;
export const DsRolePrimaryDomainInfoBasic = 1;
export const DsRoleUpgradeStatus = 2;
export const DsRoleOperationState = 3;
export const DsRoleOperationIdle = 0;
export const DsRoleOperationActive = 1;
export const DsRoleOperationNeedReboot = 2;

// Structs

export type HICON = Deno.PointerValue;

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Networking.ActiveDirectory.CQFORM (size: 32)
 */
export interface CQFORM {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  clsid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszTitle: string | null | Uint8Array | Uint16Array;
}

export const sizeofCQFORM = 32;

export function allocCQFORM(data?: Partial<CQFORM>): Uint8Array {
  const buf = new Uint8Array(sizeofCQFORM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.clsid !== undefined) view.setBigUint64(8, data.clsid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clsid))), true);
  // 0x10: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(16, data.hIcon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hIcon))), true);
  // 0x18: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class CQFORMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get clsid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hIcon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set clsid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hIcon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pszTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

export type HINSTANCE = Deno.PointerValue;

export type LPARAM = Deno.PointerValue;

/**
 * Windows.Win32.Networking.ActiveDirectory.CQPAGE (size: 48)
 */
export interface CQPAGE {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Networking.ActiveDirectory.LPCQPAGEPROC */
  pPageProc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** i32 */
  idPageName: number;
  /** i32 */
  idPageTemplate: number;
  /** Windows.Win32.UI.WindowsAndMessaging.DLGPROC */
  pDlgProc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
}

export const sizeofCQPAGE = 48;

export function allocCQPAGE(data?: Partial<CQPAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofCQPAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.pPageProc !== undefined) view.setBigUint64(8, data.pPageProc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPageProc))), true);
  // 0x10: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(16, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x18: i32
  if (data?.idPageName !== undefined) view.setInt32(24, Number(data.idPageName), true);
  // 0x1c: i32
  if (data?.idPageTemplate !== undefined) view.setInt32(28, Number(data.idPageTemplate), true);
  // 0x20: pointer
  if (data?.pDlgProc !== undefined) view.setBigUint64(32, data.pDlgProc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDlgProc))), true);
  // 0x28: pointer
  if (data?.lParam !== undefined) view.setBigUint64(40, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  return buf;
}

export class CQPAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pPageProc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get idPageName(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get idPageTemplate(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get pDlgProc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pPageProc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set idPageName(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set idPageTemplate(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set pDlgProc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.OPENQUERYWINDOW (size: 48)
 */
export interface OPENQUERYWINDOW {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  clsidHandler: Uint8Array | Deno.PointerValue;
  /** ptr */
  pHandlerParameters: Deno.PointerValue | Uint8Array;
  /** System.Guid */
  clsidDefaultForm: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.ActiveDirectory.IPersistQuery */
  pPersistQuery: Uint8Array | Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofOPENQUERYWINDOW = 48;

export function allocOPENQUERYWINDOW(data?: Partial<OPENQUERYWINDOW>): Uint8Array {
  const buf = new Uint8Array(sizeofOPENQUERYWINDOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.clsidHandler !== undefined) view.setBigUint64(8, data.clsidHandler === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clsidHandler))), true);
  // 0x10: pointer
  if (data?.pHandlerParameters !== undefined) view.setBigUint64(16, data.pHandlerParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pHandlerParameters))), true);
  // 0x18: pointer
  if (data?.clsidDefaultForm !== undefined) view.setBigUint64(24, data.clsidDefaultForm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clsidDefaultForm))), true);
  // 0x20: pointer
  if (data?.pPersistQuery !== undefined) view.setBigUint64(32, data.pPersistQuery === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPersistQuery))), true);
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class OPENQUERYWINDOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get clsidHandler(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pHandlerParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get clsidDefaultForm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pPersistQuery(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set clsidHandler(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pHandlerParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set clsidDefaultForm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pPersistQuery(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_OCTET_STRING (size: 16)
 */
export interface ADS_OCTET_STRING {
  /** u32 */
  dwLength: number;
  /** ptr */
  lpValue: Deno.PointerValue | Uint8Array;
}

export const sizeofADS_OCTET_STRING = 16;

export function allocADS_OCTET_STRING(data?: Partial<ADS_OCTET_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_OCTET_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpValue !== undefined) view.setBigUint64(8, data.lpValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpValue))), true);
  return buf;
}

export class ADS_OCTET_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_NT_SECURITY_DESCRIPTOR (size: 16)
 */
export interface ADS_NT_SECURITY_DESCRIPTOR {
  /** u32 */
  dwLength: number;
  /** ptr */
  lpValue: Deno.PointerValue | Uint8Array;
}

export const sizeofADS_NT_SECURITY_DESCRIPTOR = 16;

export function allocADS_NT_SECURITY_DESCRIPTOR(data?: Partial<ADS_NT_SECURITY_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_NT_SECURITY_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpValue !== undefined) view.setBigUint64(8, data.lpValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpValue))), true);
  return buf;
}

export class ADS_NT_SECURITY_DESCRIPTORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_PROV_SPECIFIC (size: 16)
 */
export interface ADS_PROV_SPECIFIC {
  /** u32 */
  dwLength: number;
  /** ptr */
  lpValue: Deno.PointerValue | Uint8Array;
}

export const sizeofADS_PROV_SPECIFIC = 16;

export function allocADS_PROV_SPECIFIC(data?: Partial<ADS_PROV_SPECIFIC>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_PROV_SPECIFIC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpValue !== undefined) view.setBigUint64(8, data.lpValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpValue))), true);
  return buf;
}

export class ADS_PROV_SPECIFICView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_CASEIGNORE_LIST (size: 16)
 */
export interface ADS_CASEIGNORE_LIST {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
}

export const sizeofADS_CASEIGNORE_LIST = 16;

export function allocADS_CASEIGNORE_LIST(data?: Partial<ADS_CASEIGNORE_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_CASEIGNORE_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class ADS_CASEIGNORE_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_OCTET_LIST (size: 24)
 */
export interface ADS_OCTET_LIST {
  /** ptr */
  Next: Deno.PointerValue | Uint8Array;
  /** u32 */
  Length: number;
  /** ptr */
  Data: Deno.PointerValue | Uint8Array;
}

export const sizeofADS_OCTET_LIST = 24;

export function allocADS_OCTET_LIST(data?: Partial<ADS_OCTET_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_OCTET_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Next !== undefined) view.setBigUint64(0, data.Next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Next))), true);
  // 0x08: u32
  if (data?.Length !== undefined) view.setUint32(8, Number(data.Length), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Data !== undefined) view.setBigUint64(16, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class ADS_OCTET_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Length(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set Length(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_PATH (size: 24)
 */
export interface ADS_PATH {
  /** u32 */
  Type: number;
  /** Windows.Win32.Foundation.PWSTR */
  VolumeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Path: string | null | Uint8Array | Uint16Array;
}

export const sizeofADS_PATH = 24;

export function allocADS_PATH(data?: Partial<ADS_PATH>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_PATH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.VolumeName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.VolumeName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.Path !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.Path);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class ADS_PATHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get VolumeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get Path(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set VolumeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set Path(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_POSTALADDRESS (size: 8)
 */
export interface ADS_POSTALADDRESS {
  /** array */
  PostalAddress: Deno.PointerValue;
}

export const sizeofADS_POSTALADDRESS = 8;

export function allocADS_POSTALADDRESS(data?: Partial<ADS_POSTALADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_POSTALADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.PostalAddress !== undefined) view.setBigUint64(0, data.PostalAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.PostalAddress))), true);
  return buf;
}

export class ADS_POSTALADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get PostalAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set PostalAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_TIMESTAMP (size: 8)
 */
export interface ADS_TIMESTAMP {
  /** u32 */
  WholeSeconds: number;
  /** u32 */
  EventID: number;
}

export const sizeofADS_TIMESTAMP = 8;

export function allocADS_TIMESTAMP(data?: Partial<ADS_TIMESTAMP>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_TIMESTAMP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WholeSeconds !== undefined) view.setUint32(0, Number(data.WholeSeconds), true);
  // 0x04: u32
  if (data?.EventID !== undefined) view.setUint32(4, Number(data.EventID), true);
  return buf;
}

export class ADS_TIMESTAMPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get WholeSeconds(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get EventID(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set WholeSeconds(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set EventID(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_BACKLINK (size: 16)
 */
export interface ADS_BACKLINK {
  /** u32 */
  RemoteID: number;
  /** Windows.Win32.Foundation.PWSTR */
  ObjectName: string | null | Uint8Array | Uint16Array;
}

export const sizeofADS_BACKLINK = 16;

export function allocADS_BACKLINK(data?: Partial<ADS_BACKLINK>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_BACKLINK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.RemoteID !== undefined) view.setUint32(0, Number(data.RemoteID), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.ObjectName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ObjectName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class ADS_BACKLINKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get RemoteID(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get ObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set RemoteID(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set ObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_TYPEDNAME (size: 16)
 */
export interface ADS_TYPEDNAME {
  /** Windows.Win32.Foundation.PWSTR */
  ObjectName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Level: number;
  /** u32 */
  Interval: number;
}

export const sizeofADS_TYPEDNAME = 16;

export function allocADS_TYPEDNAME(data?: Partial<ADS_TYPEDNAME>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_TYPEDNAME);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.ObjectName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.ObjectName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.Level !== undefined) view.setUint32(8, Number(data.Level), true);
  // 0x0c: u32
  if (data?.Interval !== undefined) view.setUint32(12, Number(data.Interval), true);
  return buf;
}

export class ADS_TYPEDNAMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get ObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Level(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Interval(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: buffer
  set ObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set Level(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Interval(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_HOLD (size: 16)
 */
export interface ADS_HOLD {
  /** Windows.Win32.Foundation.PWSTR */
  ObjectName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Amount: number;
}

export const sizeofADS_HOLD = 16;

export function allocADS_HOLD(data?: Partial<ADS_HOLD>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_HOLD);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.ObjectName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.ObjectName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.Amount !== undefined) view.setUint32(8, Number(data.Amount), true);
  // 0x0c: pad4
  return buf;
}

export class ADS_HOLDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get ObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Amount(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set ObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set Amount(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_NETADDRESS (size: 16)
 */
export interface ADS_NETADDRESS {
  /** u32 */
  AddressType: number;
  /** u32 */
  AddressLength: number;
  /** ptr */
  Address: Deno.PointerValue | Uint8Array;
}

export const sizeofADS_NETADDRESS = 16;

export function allocADS_NETADDRESS(data?: Partial<ADS_NETADDRESS>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_NETADDRESS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AddressType !== undefined) view.setUint32(0, Number(data.AddressType), true);
  // 0x04: u32
  if (data?.AddressLength !== undefined) view.setUint32(4, Number(data.AddressLength), true);
  // 0x08: pointer
  if (data?.Address !== undefined) view.setBigUint64(8, data.Address === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Address))), true);
  return buf;
}

export class ADS_NETADDRESSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get AddressType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get AddressLength(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set AddressType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set AddressLength(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Address(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_REPLICAPOINTER (size: 32)
 */
export interface ADS_REPLICAPOINTER {
  /** Windows.Win32.Foundation.PWSTR */
  ServerName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ReplicaType: number;
  /** u32 */
  ReplicaNumber: number;
  /** u32 */
  Count: number;
  /** ptr */
  ReplicaAddressHints: Deno.PointerValue | Uint8Array;
}

export const sizeofADS_REPLICAPOINTER = 32;

export function allocADS_REPLICAPOINTER(data?: Partial<ADS_REPLICAPOINTER>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_REPLICAPOINTER);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.ServerName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.ServerName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.ReplicaType !== undefined) view.setUint32(8, Number(data.ReplicaType), true);
  // 0x0c: u32
  if (data?.ReplicaNumber !== undefined) view.setUint32(12, Number(data.ReplicaNumber), true);
  // 0x10: u32
  if (data?.Count !== undefined) view.setUint32(16, Number(data.Count), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ReplicaAddressHints !== undefined) view.setBigUint64(24, data.ReplicaAddressHints === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ReplicaAddressHints))), true);
  return buf;
}

export class ADS_REPLICAPOINTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get ServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ReplicaType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ReplicaNumber(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get Count(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ReplicaAddressHints(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set ServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set ReplicaType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ReplicaNumber(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set Count(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ReplicaAddressHints(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_FAXNUMBER (size: 24)
 */
export interface ADS_FAXNUMBER {
  /** Windows.Win32.Foundation.PWSTR */
  TelephoneNumber: string | null | Uint8Array | Uint16Array;
  /** u32 */
  NumberOfBits: number;
  /** ptr */
  Parameters: Deno.PointerValue | Uint8Array;
}

export const sizeofADS_FAXNUMBER = 24;

export function allocADS_FAXNUMBER(data?: Partial<ADS_FAXNUMBER>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_FAXNUMBER);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.TelephoneNumber !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.TelephoneNumber);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.NumberOfBits !== undefined) view.setUint32(8, Number(data.NumberOfBits), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(16, data.Parameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Parameters))), true);
  return buf;
}

export class ADS_FAXNUMBERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get TelephoneNumber(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get NumberOfBits(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Parameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set TelephoneNumber(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set NumberOfBits(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Parameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_EMAIL (size: 16)
 */
export interface ADS_EMAIL {
  /** Windows.Win32.Foundation.PWSTR */
  Address: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Type: number;
}

export const sizeofADS_EMAIL = 16;

export function allocADS_EMAIL(data?: Partial<ADS_EMAIL>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_EMAIL);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Address !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Address);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.Type !== undefined) view.setUint32(8, Number(data.Type), true);
  // 0x0c: pad4
  return buf;
}

export class ADS_EMAILView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Address(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get Type(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set Address(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set Type(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_DN_WITH_BINARY (size: 24)
 */
export interface ADS_DN_WITH_BINARY {
  /** u32 */
  dwLength: number;
  /** ptr */
  lpBinaryValue: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszDNString: string | null | Uint8Array | Uint16Array;
}

export const sizeofADS_DN_WITH_BINARY = 24;

export function allocADS_DN_WITH_BINARY(data?: Partial<ADS_DN_WITH_BINARY>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_DN_WITH_BINARY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLength !== undefined) view.setUint32(0, Number(data.dwLength), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpBinaryValue !== undefined) view.setBigUint64(8, data.lpBinaryValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBinaryValue))), true);
  // 0x10: buffer
  if (data?.pszDNString !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszDNString);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class ADS_DN_WITH_BINARYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLength(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpBinaryValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszDNString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwLength(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpBinaryValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set pszDNString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_DN_WITH_STRING (size: 16)
 */
export interface ADS_DN_WITH_STRING {
  /** Windows.Win32.Foundation.PWSTR */
  pszStringValue: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszDNString: string | null | Uint8Array | Uint16Array;
}

export const sizeofADS_DN_WITH_STRING = 16;

export function allocADS_DN_WITH_STRING(data?: Partial<ADS_DN_WITH_STRING>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_DN_WITH_STRING);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszStringValue !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszStringValue);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszDNString !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszDNString);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class ADS_DN_WITH_STRINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszStringValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszDNString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszStringValue(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszDNString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADSVALUE (size: 16)
 */
export interface ADSVALUE {
  /** Windows.Win32.Networking.ActiveDirectory.ADSTYPE */
  dwType: ADSTYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofADSVALUE = 16;

export function allocADSVALUE(data?: Partial<ADSVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofADSVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dwType !== undefined) view.setInt32(0, Number(data.dwType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class ADSVALUEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dwType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set dwType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_ATTR_INFO (size: 32)
 */
export interface ADS_ATTR_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pszAttrName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwControlCode: number;
  /** Windows.Win32.Networking.ActiveDirectory.ADSTYPE */
  dwADsType: ADSTYPE;
  /** ptr */
  pADsValues: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumValues: number;
}

export const sizeofADS_ATTR_INFO = 32;

export function allocADS_ATTR_INFO(data?: Partial<ADS_ATTR_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_ATTR_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszAttrName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszAttrName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.dwControlCode !== undefined) view.setUint32(8, Number(data.dwControlCode), true);
  // 0x0c: i32
  if (data?.dwADsType !== undefined) view.setInt32(12, Number(data.dwADsType), true);
  // 0x10: pointer
  if (data?.pADsValues !== undefined) view.setBigUint64(16, data.pADsValues === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pADsValues))), true);
  // 0x18: u32
  if (data?.dwNumValues !== undefined) view.setUint32(24, Number(data.dwNumValues), true);
  // 0x1c: pad4
  return buf;
}

export class ADS_ATTR_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszAttrName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwControlCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get dwADsType(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: pointer
  get pADsValues(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwNumValues(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: buffer
  set pszAttrName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set dwControlCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set dwADsType(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: pointer
  set pADsValues(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwNumValues(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_OBJECT_INFO (size: 40)
 */
export interface ADS_OBJECT_INFO {
  /** Windows.Win32.Foundation.PWSTR */
  pszRDN: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszObjectDN: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszParentDN: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszSchemaDN: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszClassName: string | null | Uint8Array | Uint16Array;
}

export const sizeofADS_OBJECT_INFO = 40;

export function allocADS_OBJECT_INFO(data?: Partial<ADS_OBJECT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_OBJECT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszRDN !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszRDN);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszObjectDN !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszObjectDN);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszParentDN !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszParentDN);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pszSchemaDN !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszSchemaDN);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pszClassName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszClassName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  return buf;
}

export class ADS_OBJECT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszRDN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszObjectDN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszParentDN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszSchemaDN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszClassName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszRDN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszObjectDN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszParentDN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pszSchemaDN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pszClassName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_SEARCHPREF_INFO (size: 24)
 */
export interface ADS_SEARCHPREF_INFO {
  /** Windows.Win32.Networking.ActiveDirectory.ADS_SEARCHPREF_ENUM */
  dwSearchPref: ADS_SEARCHPREF_ENUM;
  /** Windows.Win32.Networking.ActiveDirectory.ADSVALUE */
  vValue: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.ActiveDirectory.ADS_STATUSENUM */
  dwStatus: ADS_STATUSENUM;
}

export const sizeofADS_SEARCHPREF_INFO = 24;

export function allocADS_SEARCHPREF_INFO(data?: Partial<ADS_SEARCHPREF_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_SEARCHPREF_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dwSearchPref !== undefined) view.setInt32(0, Number(data.dwSearchPref), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.vValue !== undefined) view.setBigUint64(8, data.vValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vValue))), true);
  // 0x10: i32
  if (data?.dwStatus !== undefined) view.setInt32(16, Number(data.dwStatus), true);
  // 0x14: pad4
  return buf;
}

export class ADS_SEARCHPREF_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dwSearchPref(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get vValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get dwStatus(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: i32
  set dwSearchPref(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set vValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set dwStatus(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

export type HANDLE = Deno.PointerValue;

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_SEARCH_COLUMN (size: 40)
 */
export interface ADS_SEARCH_COLUMN {
  /** Windows.Win32.Foundation.PWSTR */
  pszAttrName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Networking.ActiveDirectory.ADSTYPE */
  dwADsType: ADSTYPE;
  /** ptr */
  pADsValues: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumValues: number;
  /** Windows.Win32.Foundation.HANDLE */
  hReserved: Uint8Array | Deno.PointerValue;
}

export const sizeofADS_SEARCH_COLUMN = 40;

export function allocADS_SEARCH_COLUMN(data?: Partial<ADS_SEARCH_COLUMN>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_SEARCH_COLUMN);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszAttrName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszAttrName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.dwADsType !== undefined) view.setInt32(8, Number(data.dwADsType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pADsValues !== undefined) view.setBigUint64(16, data.pADsValues === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pADsValues))), true);
  // 0x18: u32
  if (data?.dwNumValues !== undefined) view.setUint32(24, Number(data.dwNumValues), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.hReserved !== undefined) view.setBigUint64(32, data.hReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hReserved))), true);
  return buf;
}

export class ADS_SEARCH_COLUMNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszAttrName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get dwADsType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pADsValues(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwNumValues(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get hReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszAttrName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set dwADsType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pADsValues(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwNumValues(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set hReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_ATTR_DEF (size: 24)
 */
export interface ADS_ATTR_DEF {
  /** Windows.Win32.Foundation.PWSTR */
  pszAttrName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Networking.ActiveDirectory.ADSTYPE */
  dwADsType: ADSTYPE;
  /** u32 */
  dwMinRange: number;
  /** u32 */
  dwMaxRange: number;
  /** Windows.Win32.Foundation.BOOL */
  fMultiValued: boolean;
}

export const sizeofADS_ATTR_DEF = 24;

export function allocADS_ATTR_DEF(data?: Partial<ADS_ATTR_DEF>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_ATTR_DEF);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszAttrName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszAttrName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.dwADsType !== undefined) view.setInt32(8, Number(data.dwADsType), true);
  // 0x0c: u32
  if (data?.dwMinRange !== undefined) view.setUint32(12, Number(data.dwMinRange), true);
  // 0x10: u32
  if (data?.dwMaxRange !== undefined) view.setUint32(16, Number(data.dwMaxRange), true);
  // 0x14: i32
  if (data?.fMultiValued !== undefined) view.setInt32(20, Number(data.fMultiValued), true);
  return buf;
}

export class ADS_ATTR_DEFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszAttrName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get dwADsType(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwMinRange(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwMaxRange(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get fMultiValued(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: buffer
  set pszAttrName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set dwADsType(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwMinRange(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwMaxRange(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set fMultiValued(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_CLASS_DEF (size: 80)
 */
export interface ADS_CLASS_DEF {
  /** Windows.Win32.Foundation.PWSTR */
  pszClassName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwMandatoryAttrs: number;
  /** ptr */
  ppszMandatoryAttrs: Deno.PointerValue | Uint8Array;
  /** u32 */
  optionalAttrs: number;
  /** ptr */
  ppszOptionalAttrs: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNamingAttrs: number;
  /** ptr */
  ppszNamingAttrs: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwSuperClasses: number;
  /** ptr */
  ppszSuperClasses: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  fIsContainer: boolean;
}

export const sizeofADS_CLASS_DEF = 80;

export function allocADS_CLASS_DEF(data?: Partial<ADS_CLASS_DEF>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_CLASS_DEF);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszClassName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszClassName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.dwMandatoryAttrs !== undefined) view.setUint32(8, Number(data.dwMandatoryAttrs), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ppszMandatoryAttrs !== undefined) view.setBigUint64(16, data.ppszMandatoryAttrs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppszMandatoryAttrs))), true);
  // 0x18: u32
  if (data?.optionalAttrs !== undefined) view.setUint32(24, Number(data.optionalAttrs), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ppszOptionalAttrs !== undefined) view.setBigUint64(32, data.ppszOptionalAttrs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppszOptionalAttrs))), true);
  // 0x28: u32
  if (data?.dwNamingAttrs !== undefined) view.setUint32(40, Number(data.dwNamingAttrs), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ppszNamingAttrs !== undefined) view.setBigUint64(48, data.ppszNamingAttrs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppszNamingAttrs))), true);
  // 0x38: u32
  if (data?.dwSuperClasses !== undefined) view.setUint32(56, Number(data.dwSuperClasses), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.ppszSuperClasses !== undefined) view.setBigUint64(64, data.ppszSuperClasses === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ppszSuperClasses))), true);
  // 0x48: i32
  if (data?.fIsContainer !== undefined) view.setInt32(72, Number(data.fIsContainer), true);
  // 0x4c: pad4
  return buf;
}

export class ADS_CLASS_DEFView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszClassName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwMandatoryAttrs(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ppszMandatoryAttrs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get optionalAttrs(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ppszOptionalAttrs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwNamingAttrs(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ppszNamingAttrs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwSuperClasses(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get ppszSuperClasses(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: i32
  get fIsContainer(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: pad4

  // 0x00: buffer
  set pszClassName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set dwMandatoryAttrs(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ppszMandatoryAttrs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set optionalAttrs(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ppszOptionalAttrs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwNamingAttrs(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ppszNamingAttrs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwSuperClasses(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set ppszSuperClasses(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: i32
  set fIsContainer(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: pad4
}

export type BOOLEAN = number;

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_SORTKEY (size: 24)
 */
export interface ADS_SORTKEY {
  /** Windows.Win32.Foundation.PWSTR */
  pszAttrType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszReserved: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOLEAN */
  fReverseorder: Uint8Array | Deno.PointerValue;
}

export const sizeofADS_SORTKEY = 24;

export function allocADS_SORTKEY(data?: Partial<ADS_SORTKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_SORTKEY);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszAttrType !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszAttrType);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszReserved !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszReserved);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.fReverseorder !== undefined) view.setBigUint64(16, data.fReverseorder === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.fReverseorder))), true);
  return buf;
}

export class ADS_SORTKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszAttrType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get fReverseorder(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszAttrType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszReserved(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set fReverseorder(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADS_VLV (size: 40)
 */
export interface ADS_VLV {
  /** u32 */
  dwBeforeCount: number;
  /** u32 */
  dwAfterCount: number;
  /** u32 */
  dwOffset: number;
  /** u32 */
  dwContentCount: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszTarget: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwContextIDLength: number;
  /** ptr */
  lpContextID: Deno.PointerValue | Uint8Array;
}

export const sizeofADS_VLV = 40;

export function allocADS_VLV(data?: Partial<ADS_VLV>): Uint8Array {
  const buf = new Uint8Array(sizeofADS_VLV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBeforeCount !== undefined) view.setUint32(0, Number(data.dwBeforeCount), true);
  // 0x04: u32
  if (data?.dwAfterCount !== undefined) view.setUint32(4, Number(data.dwAfterCount), true);
  // 0x08: u32
  if (data?.dwOffset !== undefined) view.setUint32(8, Number(data.dwOffset), true);
  // 0x0c: u32
  if (data?.dwContentCount !== undefined) view.setUint32(12, Number(data.dwContentCount), true);
  // 0x10: buffer
  if (data?.pszTarget !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszTarget);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwContextIDLength !== undefined) view.setUint32(24, Number(data.dwContextIDLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpContextID !== undefined) view.setBigUint64(32, data.lpContextID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpContextID))), true);
  return buf;
}

export class ADS_VLVView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwBeforeCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwAfterCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwContentCount(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: buffer
  get pszTarget(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwContextIDLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lpContextID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwBeforeCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwAfterCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwContentCount(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: buffer
  set pszTarget(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwContextIDLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lpContextID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSOBJECT (size: 16)
 */
export interface DSOBJECT {
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwProviderFlags: number;
  /** u32 */
  offsetName: number;
  /** u32 */
  offsetClass: number;
}

export const sizeofDSOBJECT = 16;

export function allocDSOBJECT(data?: Partial<DSOBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofDSOBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.dwProviderFlags !== undefined) view.setUint32(4, Number(data.dwProviderFlags), true);
  // 0x08: u32
  if (data?.offsetName !== undefined) view.setUint32(8, Number(data.offsetName), true);
  // 0x0c: u32
  if (data?.offsetClass !== undefined) view.setUint32(12, Number(data.offsetClass), true);
  return buf;
}

export class DSOBJECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwProviderFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get offsetName(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get offsetClass(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwProviderFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set offsetName(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set offsetClass(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSOBJECTNAMES (size: 24)
 */
export interface DSOBJECTNAMES {
  /** System.Guid */
  clsidNamespace: Uint8Array | Deno.PointerValue;
  /** u32 */
  cItems: number;
  /** array */
  aObjects: Deno.PointerValue;
}

export const sizeofDSOBJECTNAMES = 24;

export function allocDSOBJECTNAMES(data?: Partial<DSOBJECTNAMES>): Uint8Array {
  const buf = new Uint8Array(sizeofDSOBJECTNAMES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.clsidNamespace !== undefined) view.setBigUint64(0, data.clsidNamespace === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clsidNamespace))), true);
  // 0x08: u32
  if (data?.cItems !== undefined) view.setUint32(8, Number(data.cItems), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.aObjects !== undefined) view.setBigUint64(16, data.aObjects === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aObjects))), true);
  return buf;
}

export class DSOBJECTNAMESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get clsidNamespace(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cItems(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get aObjects(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set clsidNamespace(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cItems(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set aObjects(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSDISPLAYSPECOPTIONS (size: 32)
 */
export interface DSDISPLAYSPECOPTIONS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  offsetAttribPrefix: number;
  /** u32 */
  offsetUserName: number;
  /** u32 */
  offsetPassword: number;
  /** u32 */
  offsetServer: number;
  /** u32 */
  offsetServerConfigPath: number;
}

export const sizeofDSDISPLAYSPECOPTIONS = 32;

export function allocDSDISPLAYSPECOPTIONS(data?: Partial<DSDISPLAYSPECOPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSDISPLAYSPECOPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.offsetAttribPrefix !== undefined) view.setUint32(8, Number(data.offsetAttribPrefix), true);
  // 0x0c: u32
  if (data?.offsetUserName !== undefined) view.setUint32(12, Number(data.offsetUserName), true);
  // 0x10: u32
  if (data?.offsetPassword !== undefined) view.setUint32(16, Number(data.offsetPassword), true);
  // 0x14: u32
  if (data?.offsetServer !== undefined) view.setUint32(20, Number(data.offsetServer), true);
  // 0x18: u32
  if (data?.offsetServerConfigPath !== undefined) view.setUint32(24, Number(data.offsetServerConfigPath), true);
  // 0x1c: pad4
  return buf;
}

export class DSDISPLAYSPECOPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get offsetAttribPrefix(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get offsetUserName(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get offsetPassword(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get offsetServer(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get offsetServerConfigPath(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set offsetAttribPrefix(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set offsetUserName(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set offsetPassword(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set offsetServer(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set offsetServerConfigPath(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSPROPERTYPAGEINFO (size: 8)
 */
export interface DSPROPERTYPAGEINFO {
  /** u32 */
  offsetString: number;
}

export const sizeofDSPROPERTYPAGEINFO = 8;

export function allocDSPROPERTYPAGEINFO(data?: Partial<DSPROPERTYPAGEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDSPROPERTYPAGEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.offsetString !== undefined) view.setUint32(0, Number(data.offsetString), true);
  // 0x04: pad4
  return buf;
}

export class DSPROPERTYPAGEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get offsetString(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set offsetString(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DOMAINDESC (size: 64)
 */
export interface DOMAINDESC {
  /** Windows.Win32.Foundation.PWSTR */
  pszName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszNCName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszTrustParent: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszObjectClass: string | null | Uint8Array | Uint16Array;
  /** u32 */
  ulFlags: number;
  /** Windows.Win32.Foundation.BOOL */
  fDownLevel: boolean;
  /** ptr */
  pdChildList: Deno.PointerValue | Uint8Array;
  /** ptr */
  pdNextSibling: Deno.PointerValue | Uint8Array;
}

export const sizeofDOMAINDESC = 64;

export function allocDOMAINDESC(data?: Partial<DOMAINDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDOMAINDESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszNCName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszNCName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pszTrustParent !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszTrustParent);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pszObjectClass !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszObjectClass);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.ulFlags !== undefined) view.setUint32(40, Number(data.ulFlags), true);
  // 0x2c: i32
  if (data?.fDownLevel !== undefined) view.setInt32(44, Number(data.fDownLevel), true);
  // 0x30: pointer
  if (data?.pdChildList !== undefined) view.setBigUint64(48, data.pdChildList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pdChildList))), true);
  // 0x38: pointer
  if (data?.pdNextSibling !== undefined) view.setBigUint64(56, data.pdNextSibling === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pdNextSibling))), true);
  return buf;
}

export class DOMAINDESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszNCName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszTrustParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszObjectClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get ulFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: i32
  get fDownLevel(): number {
    return this.view.getInt32(44, true);
  }

  // 0x30: pointer
  get pdChildList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pdNextSibling(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszNCName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pszTrustParent(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pszObjectClass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set ulFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: i32
  set fDownLevel(value: number) {
    this.view.setInt32(44, value, true);
  }

  // 0x30: pointer
  set pdChildList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pdNextSibling(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DOMAIN_TREE (size: 16)
 */
export interface DOMAIN_TREE {
  /** u32 */
  dsSize: number;
  /** u32 */
  dwCount: number;
  /** array */
  aDomains: Deno.PointerValue;
}

export const sizeofDOMAIN_TREE = 16;

export function allocDOMAIN_TREE(data?: Partial<DOMAIN_TREE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOMAIN_TREE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dsSize !== undefined) view.setUint32(0, Number(data.dsSize), true);
  // 0x04: u32
  if (data?.dwCount !== undefined) view.setUint32(4, Number(data.dwCount), true);
  // 0x08: pointer
  if (data?.aDomains !== undefined) view.setBigUint64(8, data.aDomains === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aDomains))), true);
  return buf;
}

export class DOMAIN_TREEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dsSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get aDomains(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dsSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCount(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set aDomains(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSCLASSCREATIONINFO (size: 40)
 */
export interface DSCLASSCREATIONINFO {
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  clsidWizardDialog: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  clsidWizardPrimaryPage: Uint8Array | Deno.PointerValue;
  /** u32 */
  cWizardExtensions: number;
  /** array */
  aWizardExtensions: Deno.PointerValue;
}

export const sizeofDSCLASSCREATIONINFO = 40;

export function allocDSCLASSCREATIONINFO(data?: Partial<DSCLASSCREATIONINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCLASSCREATIONINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.clsidWizardDialog !== undefined) view.setBigUint64(8, data.clsidWizardDialog === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clsidWizardDialog))), true);
  // 0x10: pointer
  if (data?.clsidWizardPrimaryPage !== undefined) view.setBigUint64(16, data.clsidWizardPrimaryPage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clsidWizardPrimaryPage))), true);
  // 0x18: u32
  if (data?.cWizardExtensions !== undefined) view.setUint32(24, Number(data.cWizardExtensions), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.aWizardExtensions !== undefined) view.setBigUint64(32, data.aWizardExtensions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aWizardExtensions))), true);
  return buf;
}

export class DSCLASSCREATIONINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get clsidWizardDialog(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get clsidWizardPrimaryPage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cWizardExtensions(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get aWizardExtensions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set clsidWizardDialog(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set clsidWizardPrimaryPage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cWizardExtensions(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set aWizardExtensions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.Networking.ActiveDirectory.DSBROWSEINFOW (size: 112)
 */
export interface DSBROWSEINFOW {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszCaption: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszRoot: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchPath: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.UI.Shell.BFFCALLBACK */
  pfnCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwReturnFormat: number;
  /** Windows.Win32.Foundation.PWSTR */
  pUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPassword: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszObjectClass: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchObjectClass: number;
}

export const sizeofDSBROWSEINFOW = 112;

export function allocDSBROWSEINFOW(data?: Partial<DSBROWSEINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBROWSEINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: buffer
  if (data?.pszCaption !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pszRoot !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszRoot);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pszPath !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszPath);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.cchPath !== undefined) view.setUint32(48, Number(data.cchPath), true);
  // 0x34: u32
  if (data?.dwFlags !== undefined) view.setUint32(52, Number(data.dwFlags), true);
  // 0x38: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(56, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  // 0x40: pointer
  if (data?.lParam !== undefined) view.setBigUint64(64, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x48: u32
  if (data?.dwReturnFormat !== undefined) view.setUint32(72, Number(data.dwReturnFormat), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pUserName);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.pPassword !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pPassword);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: buffer
  if (data?.pszObjectClass !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.pszObjectClass);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: u32
  if (data?.cchObjectClass !== undefined) view.setUint32(104, Number(data.cchObjectClass), true);
  // 0x6c: pad4
  return buf;
}

export class DSBROWSEINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszCaption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszRoot(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pszPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get cchPath(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwFlags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get dwReturnFormat(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get pPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get pszObjectClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get cchObjectClass(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set pszCaption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pszTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pszRoot(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pszPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set cchPath(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwFlags(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set dwReturnFormat(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set pPassword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: buffer
  set pszObjectClass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: u32
  set cchObjectClass(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Networking.ActiveDirectory.DSBROWSEINFOA (size: 112)
 */
export interface DSBROWSEINFOA {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.HWND */
  hwndOwner: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszCaption: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszTitle: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszRoot: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchPath: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.UI.Shell.BFFCALLBACK */
  pfnCallback: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwReturnFormat: number;
  /** Windows.Win32.Foundation.PWSTR */
  pUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPassword: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszObjectClass: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchObjectClass: number;
}

export const sizeofDSBROWSEINFOA = 112;

export function allocDSBROWSEINFOA(data?: Partial<DSBROWSEINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBROWSEINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hwndOwner !== undefined) view.setBigUint64(8, data.hwndOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndOwner))), true);
  // 0x10: buffer
  if (data?.pszCaption !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszCaption);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pszTitle !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pszTitle);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pszRoot !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszRoot);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pszPath !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszPath);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.cchPath !== undefined) view.setUint32(48, Number(data.cchPath), true);
  // 0x34: u32
  if (data?.dwFlags !== undefined) view.setUint32(52, Number(data.dwFlags), true);
  // 0x38: pointer
  if (data?.pfnCallback !== undefined) view.setBigUint64(56, data.pfnCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallback))), true);
  // 0x40: pointer
  if (data?.lParam !== undefined) view.setBigUint64(64, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x48: u32
  if (data?.dwReturnFormat !== undefined) view.setUint32(72, Number(data.dwReturnFormat), true);
  // 0x4c: pad4
  // 0x50: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pUserName);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.pPassword !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pPassword);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: buffer
  if (data?.pszObjectClass !== undefined) {
    (buf as any)._f96 = util.pwstrToFfi(data.pszObjectClass);
    view.setBigUint64(96, (buf as any)._f96 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f96))), true);
  }
  // 0x68: u32
  if (data?.cchObjectClass !== undefined) view.setUint32(104, Number(data.cchObjectClass), true);
  // 0x6c: pad4
  return buf;
}

export class DSBROWSEINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hwndOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszCaption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszRoot(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pszPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get cchPath(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwFlags(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get pfnCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get dwReturnFormat(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get pPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: buffer
  get pszObjectClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get cchObjectClass(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hwndOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set pszCaption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pszTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pszRoot(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pszPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set cchPath(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwFlags(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set pfnCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set dwReturnFormat(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set pPassword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: buffer
  set pszObjectClass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f96 = value;
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f96))), true);
  }

  // 0x68: u32
  set cchObjectClass(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSBITEMW (size: 64)
 */
export interface DSBITEMW {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszADsPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszClass: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwMask: number;
  /** u32 */
  dwState: number;
  /** u32 */
  dwStateMask: number;
  /** array */
  szDisplayName: Deno.PointerValue;
  /** array */
  szIconLocation: Deno.PointerValue;
  /** i32 */
  iIconResID: number;
}

export const sizeofDSBITEMW = 64;

export function allocDSBITEMW(data?: Partial<DSBITEMW>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBITEMW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszADsPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszADsPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszClass !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszClass);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwMask !== undefined) view.setUint32(24, Number(data.dwMask), true);
  // 0x1c: u32
  if (data?.dwState !== undefined) view.setUint32(28, Number(data.dwState), true);
  // 0x20: u32
  if (data?.dwStateMask !== undefined) view.setUint32(32, Number(data.dwStateMask), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.szDisplayName !== undefined) view.setBigUint64(40, data.szDisplayName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDisplayName))), true);
  // 0x30: pointer
  if (data?.szIconLocation !== undefined) view.setBigUint64(48, data.szIconLocation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szIconLocation))), true);
  // 0x38: i32
  if (data?.iIconResID !== undefined) view.setInt32(56, Number(data.iIconResID), true);
  // 0x3c: pad4
  return buf;
}

export class DSBITEMWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszADsPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwMask(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwState(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwStateMask(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get szDisplayName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get szIconLocation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get iIconResID(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszADsPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszClass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwMask(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwState(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwStateMask(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set szDisplayName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set szIconLocation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: i32
  set iIconResID(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSBITEMA (size: 64)
 */
export interface DSBITEMA {
  /** u32 */
  cbStruct: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszADsPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszClass: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwMask: number;
  /** u32 */
  dwState: number;
  /** u32 */
  dwStateMask: number;
  /** array */
  szDisplayName: Deno.PointerValue;
  /** array */
  szIconLocation: Deno.PointerValue;
  /** i32 */
  iIconResID: number;
}

export const sizeofDSBITEMA = 64;

export function allocDSBITEMA(data?: Partial<DSBITEMA>): Uint8Array {
  const buf = new Uint8Array(sizeofDSBITEMA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszADsPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszADsPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszClass !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszClass);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwMask !== undefined) view.setUint32(24, Number(data.dwMask), true);
  // 0x1c: u32
  if (data?.dwState !== undefined) view.setUint32(28, Number(data.dwState), true);
  // 0x20: u32
  if (data?.dwStateMask !== undefined) view.setUint32(32, Number(data.dwStateMask), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.szDisplayName !== undefined) view.setBigUint64(40, data.szDisplayName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDisplayName))), true);
  // 0x30: pointer
  if (data?.szIconLocation !== undefined) view.setBigUint64(48, data.szIconLocation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szIconLocation))), true);
  // 0x38: i32
  if (data?.iIconResID !== undefined) view.setInt32(56, Number(data.iIconResID), true);
  // 0x3c: pad4
  return buf;
}

export class DSBITEMAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszADsPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwMask(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwState(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwStateMask(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get szDisplayName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get szIconLocation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get iIconResID(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszADsPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszClass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwMask(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwState(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwStateMask(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set szDisplayName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set szIconLocation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: i32
  set iIconResID(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSOP_UPLEVEL_FILTER_FLAGS (size: 16)
 */
export interface DSOP_UPLEVEL_FILTER_FLAGS {
  /** u32 */
  flBothModes: number;
  /** u32 */
  flMixedModeOnly: number;
  /** u32 */
  flNativeModeOnly: number;
}

export const sizeofDSOP_UPLEVEL_FILTER_FLAGS = 16;

export function allocDSOP_UPLEVEL_FILTER_FLAGS(data?: Partial<DSOP_UPLEVEL_FILTER_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSOP_UPLEVEL_FILTER_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.flBothModes !== undefined) view.setUint32(0, Number(data.flBothModes), true);
  // 0x04: u32
  if (data?.flMixedModeOnly !== undefined) view.setUint32(4, Number(data.flMixedModeOnly), true);
  // 0x08: u32
  if (data?.flNativeModeOnly !== undefined) view.setUint32(8, Number(data.flNativeModeOnly), true);
  // 0x0c: pad4
  return buf;
}

export class DSOP_UPLEVEL_FILTER_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get flBothModes(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get flMixedModeOnly(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get flNativeModeOnly(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set flBothModes(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set flMixedModeOnly(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set flNativeModeOnly(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSOP_FILTER_FLAGS (size: 16)
 */
export interface DSOP_FILTER_FLAGS {
  /** Windows.Win32.Networking.ActiveDirectory.DSOP_UPLEVEL_FILTER_FLAGS */
  Uplevel: Uint8Array | Deno.PointerValue;
  /** u32 */
  flDownlevel: number;
}

export const sizeofDSOP_FILTER_FLAGS = 16;

export function allocDSOP_FILTER_FLAGS(data?: Partial<DSOP_FILTER_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSOP_FILTER_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Uplevel !== undefined) view.setBigUint64(0, data.Uplevel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Uplevel))), true);
  // 0x08: u32
  if (data?.flDownlevel !== undefined) view.setUint32(8, Number(data.flDownlevel), true);
  // 0x0c: pad4
  return buf;
}

export class DSOP_FILTER_FLAGSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Uplevel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get flDownlevel(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Uplevel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set flDownlevel(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

export type HRESULT = number;

/**
 * Windows.Win32.Networking.ActiveDirectory.DSOP_SCOPE_INIT_INFO (size: 48)
 */
export interface DSOP_SCOPE_INIT_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  flType: number;
  /** u32 */
  flScope: number;
  /** Windows.Win32.Networking.ActiveDirectory.DSOP_FILTER_FLAGS */
  FilterFlags: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwzDcName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzADsPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue;
}

export const sizeofDSOP_SCOPE_INIT_INFO = 48;

export function allocDSOP_SCOPE_INIT_INFO(data?: Partial<DSOP_SCOPE_INIT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDSOP_SCOPE_INIT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.flType !== undefined) view.setUint32(4, Number(data.flType), true);
  // 0x08: u32
  if (data?.flScope !== undefined) view.setUint32(8, Number(data.flScope), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.FilterFlags !== undefined) view.setBigUint64(16, data.FilterFlags === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FilterFlags))), true);
  // 0x18: buffer
  if (data?.pwzDcName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwzDcName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pwzADsPath !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pwzADsPath);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: pointer
  if (data?.hr !== undefined) view.setBigUint64(40, data.hr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hr))), true);
  return buf;
}

export class DSOP_SCOPE_INIT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get flType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get flScope(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get FilterFlags(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pwzDcName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pwzADsPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get hr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set flType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set flScope(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set FilterFlags(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pwzDcName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pwzADsPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: pointer
  set hr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSOP_INIT_INFO (size: 48)
 */
export interface DSOP_INIT_INFO {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwzTargetComputer: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cDsScopeInfos: number;
  /** ptr */
  aDsScopeInfos: Deno.PointerValue | Uint8Array;
  /** u32 */
  flOptions: number;
  /** u32 */
  cAttributesToFetch: number;
  /** ptr */
  apwzAttributeNames: Deno.PointerValue | Uint8Array;
}

export const sizeofDSOP_INIT_INFO = 48;

export function allocDSOP_INIT_INFO(data?: Partial<DSOP_INIT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDSOP_INIT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwzTargetComputer !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzTargetComputer);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.cDsScopeInfos !== undefined) view.setUint32(16, Number(data.cDsScopeInfos), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.aDsScopeInfos !== undefined) view.setBigUint64(24, data.aDsScopeInfos === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aDsScopeInfos))), true);
  // 0x20: u32
  if (data?.flOptions !== undefined) view.setUint32(32, Number(data.flOptions), true);
  // 0x24: u32
  if (data?.cAttributesToFetch !== undefined) view.setUint32(36, Number(data.cAttributesToFetch), true);
  // 0x28: pointer
  if (data?.apwzAttributeNames !== undefined) view.setBigUint64(40, data.apwzAttributeNames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.apwzAttributeNames))), true);
  return buf;
}

export class DSOP_INIT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwzTargetComputer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cDsScopeInfos(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get aDsScopeInfos(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get flOptions(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get cAttributesToFetch(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get apwzAttributeNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwzTargetComputer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set cDsScopeInfos(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set aDsScopeInfos(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set flOptions(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set cAttributesToFetch(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set apwzAttributeNames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_SELECTION (size: 48)
 */
export interface DS_SELECTION {
  /** Windows.Win32.Foundation.PWSTR */
  pwzName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzADsPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzClass: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pwzUPN: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pvarFetchedAttributes: Deno.PointerValue | Uint8Array;
  /** u32 */
  flScopeType: number;
}

export const sizeofDS_SELECTION = 48;

export function allocDS_SELECTION(data?: Partial<DS_SELECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_SELECTION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pwzName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pwzName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pwzADsPath !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwzADsPath);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pwzClass !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pwzClass);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pwzUPN !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwzUPN);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.pvarFetchedAttributes !== undefined) view.setBigUint64(32, data.pvarFetchedAttributes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvarFetchedAttributes))), true);
  // 0x28: u32
  if (data?.flScopeType !== undefined) view.setUint32(40, Number(data.flScopeType), true);
  // 0x2c: pad4
  return buf;
}

export class DS_SELECTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pwzName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pwzADsPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pwzClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pwzUPN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pvarFetchedAttributes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get flScopeType(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: buffer
  set pwzName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pwzADsPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pwzClass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pwzUPN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set pvarFetchedAttributes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set flScopeType(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_SELECTION_LIST (size: 16)
 */
export interface DS_SELECTION_LIST {
  /** u32 */
  cItems: number;
  /** u32 */
  cFetchedAttributes: number;
  /** array */
  aDsSelection: Deno.PointerValue;
}

export const sizeofDS_SELECTION_LIST = 16;

export function allocDS_SELECTION_LIST(data?: Partial<DS_SELECTION_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_SELECTION_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cItems !== undefined) view.setUint32(0, Number(data.cItems), true);
  // 0x04: u32
  if (data?.cFetchedAttributes !== undefined) view.setUint32(4, Number(data.cFetchedAttributes), true);
  // 0x08: pointer
  if (data?.aDsSelection !== undefined) view.setBigUint64(8, data.aDsSelection === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aDsSelection))), true);
  return buf;
}

export class DS_SELECTION_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cItems(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cFetchedAttributes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get aDsSelection(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cItems(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cFetchedAttributes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set aDsSelection(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSQUERYINITPARAMS (size: 48)
 */
export interface DSQUERYINITPARAMS {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pDefaultScope: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDefaultSaveLocation: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPassword: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pServer: string | null | Uint8Array | Uint16Array;
}

export const sizeofDSQUERYINITPARAMS = 48;

export function allocDSQUERYINITPARAMS(data?: Partial<DSQUERYINITPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSQUERYINITPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: buffer
  if (data?.pDefaultScope !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pDefaultScope);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pDefaultSaveLocation !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pDefaultSaveLocation);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pUserName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pPassword !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pPassword);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pServer !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pServer);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class DSQUERYINITPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pDefaultScope(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pDefaultSaveLocation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pPassword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pServer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pDefaultScope(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pDefaultSaveLocation(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pPassword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pServer(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSCOLUMN (size: 24)
 */
export interface DSCOLUMN {
  /** u32 */
  dwFlags: number;
  /** i32 */
  fmt: number;
  /** i32 */
  cx: number;
  /** i32 */
  idsName: number;
  /** i32 */
  offsetProperty: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofDSCOLUMN = 24;

export function allocDSCOLUMN(data?: Partial<DSCOLUMN>): Uint8Array {
  const buf = new Uint8Array(sizeofDSCOLUMN);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: i32
  if (data?.fmt !== undefined) view.setInt32(4, Number(data.fmt), true);
  // 0x08: i32
  if (data?.cx !== undefined) view.setInt32(8, Number(data.cx), true);
  // 0x0c: i32
  if (data?.idsName !== undefined) view.setInt32(12, Number(data.idsName), true);
  // 0x10: i32
  if (data?.offsetProperty !== undefined) view.setInt32(16, Number(data.offsetProperty), true);
  // 0x14: u32
  if (data?.dwReserved !== undefined) view.setUint32(20, Number(data.dwReserved), true);
  return buf;
}

export class DSCOLUMNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get fmt(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get cx(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get idsName(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get offsetProperty(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get dwReserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set fmt(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set cx(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set idsName(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set offsetProperty(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set dwReserved(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSQUERYPARAMS (size: 40)
 */
export interface DSQUERYPARAMS {
  /** u32 */
  cbStruct: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstance: Uint8Array | Deno.PointerValue;
  /** i32 */
  offsetQuery: number;
  /** i32 */
  iColumns: number;
  /** u32 */
  dwReserved: number;
  /** array */
  aColumns: Deno.PointerValue;
}

export const sizeofDSQUERYPARAMS = 40;

export function allocDSQUERYPARAMS(data?: Partial<DSQUERYPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofDSQUERYPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hInstance !== undefined) view.setBigUint64(8, data.hInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstance))), true);
  // 0x10: i32
  if (data?.offsetQuery !== undefined) view.setInt32(16, Number(data.offsetQuery), true);
  // 0x14: i32
  if (data?.iColumns !== undefined) view.setInt32(20, Number(data.iColumns), true);
  // 0x18: u32
  if (data?.dwReserved !== undefined) view.setUint32(24, Number(data.dwReserved), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.aColumns !== undefined) view.setBigUint64(32, data.aColumns === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aColumns))), true);
  return buf;
}

export class DSQUERYPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get offsetQuery(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get iColumns(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: u32
  get dwReserved(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get aColumns(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set offsetQuery(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set iColumns(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: u32
  set dwReserved(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set aColumns(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSQUERYCLASSLIST (size: 16)
 */
export interface DSQUERYCLASSLIST {
  /** u32 */
  cbStruct: number;
  /** i32 */
  cClasses: number;
  /** array */
  offsetClass: Deno.PointerValue;
}

export const sizeofDSQUERYCLASSLIST = 16;

export function allocDSQUERYCLASSLIST(data?: Partial<DSQUERYCLASSLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDSQUERYCLASSLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbStruct !== undefined) view.setUint32(0, Number(data.cbStruct), true);
  // 0x04: i32
  if (data?.cClasses !== undefined) view.setInt32(4, Number(data.cClasses), true);
  // 0x08: pointer
  if (data?.offsetClass !== undefined) view.setBigUint64(8, data.offsetClass === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.offsetClass))), true);
  return buf;
}

export class DSQUERYCLASSLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbStruct(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get cClasses(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get offsetClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbStruct(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set cClasses(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set offsetClass(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSA_NEWOBJ_DISPINFO (size: 32)
 */
export interface DSA_NEWOBJ_DISPINFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hObjClassIcon: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  lpszWizTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  lpszContDisplayName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDSA_NEWOBJ_DISPINFO = 32;

export function allocDSA_NEWOBJ_DISPINFO(data?: Partial<DSA_NEWOBJ_DISPINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDSA_NEWOBJ_DISPINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hObjClassIcon !== undefined) view.setBigUint64(8, data.hObjClassIcon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hObjClassIcon))), true);
  // 0x10: buffer
  if (data?.lpszWizTitle !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.lpszWizTitle);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.lpszContDisplayName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.lpszContDisplayName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class DSA_NEWOBJ_DISPINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hObjClassIcon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get lpszWizTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get lpszContDisplayName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hObjClassIcon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: buffer
  set lpszWizTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set lpszContDisplayName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADSPROPINITPARAMS (size: 40)
 */
export interface ADSPROPINITPARAMS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Networking.ActiveDirectory.IDirectoryObject */
  pDsObj: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pwzCN: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pWritableAttrs: Deno.PointerValue | Uint8Array;
}

export const sizeofADSPROPINITPARAMS = 40;

export function allocADSPROPINITPARAMS(data?: Partial<ADSPROPINITPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofADSPROPINITPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.hr !== undefined) view.setBigUint64(8, data.hr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hr))), true);
  // 0x10: pointer
  if (data?.pDsObj !== undefined) view.setBigUint64(16, data.pDsObj === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDsObj))), true);
  // 0x18: buffer
  if (data?.pwzCN !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pwzCN);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.pWritableAttrs !== undefined) view.setBigUint64(32, data.pWritableAttrs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pWritableAttrs))), true);
  return buf;
}

export class ADSPROPINITPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get hr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pDsObj(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pwzCN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pWritableAttrs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set hr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pDsObj(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pwzCN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set pWritableAttrs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.ADSPROPERROR (size: 48)
 */
export interface ADSPROPERROR {
  /** Windows.Win32.Foundation.HWND */
  hwndPage: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszPageTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszObjPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszObjClass: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HRESULT */
  hr: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszError: string | null | Uint8Array | Uint16Array;
}

export const sizeofADSPROPERROR = 48;

export function allocADSPROPERROR(data?: Partial<ADSPROPERROR>): Uint8Array {
  const buf = new Uint8Array(sizeofADSPROPERROR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwndPage !== undefined) view.setBigUint64(0, data.hwndPage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hwndPage))), true);
  // 0x08: buffer
  if (data?.pszPageTitle !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszPageTitle);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszObjPath !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszObjPath);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pszObjClass !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszObjClass);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.hr !== undefined) view.setBigUint64(32, data.hr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hr))), true);
  // 0x28: buffer
  if (data?.pszError !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszError);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class ADSPROPERRORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hwndPage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszPageTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszObjPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszObjClass(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get hr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pszError(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hwndPage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pszPageTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszObjPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pszObjClass(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set hr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: buffer
  set pszError(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.SCHEDULE_HEADER (size: 8)
 */
export interface SCHEDULE_HEADER {
  /** u32 */
  Type: number;
  /** u32 */
  Offset: number;
}

export const sizeofSCHEDULE_HEADER = 8;

export function allocSCHEDULE_HEADER(data?: Partial<SCHEDULE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHEDULE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Type !== undefined) view.setUint32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Offset !== undefined) view.setUint32(4, Number(data.Offset), true);
  return buf;
}

export class SCHEDULE_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Offset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Offset(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.SCHEDULE (size: 24)
 */
export interface SCHEDULE {
  /** u32 */
  Size: number;
  /** u32 */
  Bandwidth: number;
  /** u32 */
  NumberOfSchedules: number;
  /** array */
  Schedules: Deno.PointerValue;
}

export const sizeofSCHEDULE = 24;

export function allocSCHEDULE(data?: Partial<SCHEDULE>): Uint8Array {
  const buf = new Uint8Array(sizeofSCHEDULE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Bandwidth !== undefined) view.setUint32(4, Number(data.Bandwidth), true);
  // 0x08: u32
  if (data?.NumberOfSchedules !== undefined) view.setUint32(8, Number(data.NumberOfSchedules), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Schedules !== undefined) view.setBigUint64(16, data.Schedules === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Schedules))), true);
  return buf;
}

export class SCHEDULEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Bandwidth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get NumberOfSchedules(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Schedules(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Bandwidth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set NumberOfSchedules(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Schedules(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_NAME_RESULT_ITEMA (size: 24)
 */
export interface DS_NAME_RESULT_ITEMA {
  /** u32 */
  status: number;
  /** Windows.Win32.Foundation.PSTR */
  pDomain: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
}

export const sizeofDS_NAME_RESULT_ITEMA = 24;

export function allocDS_NAME_RESULT_ITEMA(data?: Partial<DS_NAME_RESULT_ITEMA>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_NAME_RESULT_ITEMA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.status !== undefined) view.setUint32(0, Number(data.status), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pDomain !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pDomain);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DS_NAME_RESULT_ITEMAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get status(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pDomain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set status(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pDomain(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_NAME_RESULTA (size: 16)
 */
export interface DS_NAME_RESULTA {
  /** u32 */
  cItems: number;
  /** ptr */
  rItems: Deno.PointerValue | Uint8Array;
}

export const sizeofDS_NAME_RESULTA = 16;

export function allocDS_NAME_RESULTA(data?: Partial<DS_NAME_RESULTA>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_NAME_RESULTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cItems !== undefined) view.setUint32(0, Number(data.cItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rItems !== undefined) view.setBigUint64(8, data.rItems === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rItems))), true);
  return buf;
}

export class DS_NAME_RESULTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cItems(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rItems(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cItems(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rItems(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_NAME_RESULT_ITEMW (size: 24)
 */
export interface DS_NAME_RESULT_ITEMW {
  /** u32 */
  status: number;
  /** Windows.Win32.Foundation.PWSTR */
  pDomain: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDS_NAME_RESULT_ITEMW = 24;

export function allocDS_NAME_RESULT_ITEMW(data?: Partial<DS_NAME_RESULT_ITEMW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_NAME_RESULT_ITEMW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.status !== undefined) view.setUint32(0, Number(data.status), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pDomain !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pDomain);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DS_NAME_RESULT_ITEMWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get status(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pDomain(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set status(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pDomain(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_NAME_RESULTW (size: 16)
 */
export interface DS_NAME_RESULTW {
  /** u32 */
  cItems: number;
  /** ptr */
  rItems: Deno.PointerValue | Uint8Array;
}

export const sizeofDS_NAME_RESULTW = 16;

export function allocDS_NAME_RESULTW(data?: Partial<DS_NAME_RESULTW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_NAME_RESULTW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cItems !== undefined) view.setUint32(0, Number(data.cItems), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.rItems !== undefined) view.setBigUint64(8, data.rItems === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rItems))), true);
  return buf;
}

export class DS_NAME_RESULTWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cItems(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get rItems(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cItems(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set rItems(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPSYNCALL_SYNCA (size: 40)
 */
export interface DS_REPSYNCALL_SYNCA {
  /** Windows.Win32.Foundation.PSTR */
  pszSrcId: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszDstId: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszNC: string | null | Uint8Array;
  /** ptr */
  pguidSrc: Deno.PointerValue | Uint8Array;
  /** ptr */
  pguidDst: Deno.PointerValue | Uint8Array;
}

export const sizeofDS_REPSYNCALL_SYNCA = 40;

export function allocDS_REPSYNCALL_SYNCA(data?: Partial<DS_REPSYNCALL_SYNCA>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPSYNCALL_SYNCA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszSrcId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszSrcId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszDstId !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszDstId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszNC !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszNC);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.pguidSrc !== undefined) view.setBigUint64(24, data.pguidSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguidSrc))), true);
  // 0x20: pointer
  if (data?.pguidDst !== undefined) view.setBigUint64(32, data.pguidDst === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguidDst))), true);
  return buf;
}

export class DS_REPSYNCALL_SYNCAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszSrcId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszDstId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszNC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pguidSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pguidDst(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszSrcId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszDstId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszNC(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set pguidSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pguidDst(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPSYNCALL_SYNCW (size: 40)
 */
export interface DS_REPSYNCALL_SYNCW {
  /** Windows.Win32.Foundation.PWSTR */
  pszSrcId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszDstId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszNC: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pguidSrc: Deno.PointerValue | Uint8Array;
  /** ptr */
  pguidDst: Deno.PointerValue | Uint8Array;
}

export const sizeofDS_REPSYNCALL_SYNCW = 40;

export function allocDS_REPSYNCALL_SYNCW(data?: Partial<DS_REPSYNCALL_SYNCW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPSYNCALL_SYNCW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszSrcId !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszSrcId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszDstId !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszDstId);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszNC !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszNC);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.pguidSrc !== undefined) view.setBigUint64(24, data.pguidSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguidSrc))), true);
  // 0x20: pointer
  if (data?.pguidDst !== undefined) view.setBigUint64(32, data.pguidDst === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguidDst))), true);
  return buf;
}

export class DS_REPSYNCALL_SYNCWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszSrcId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszDstId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszNC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pguidSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pguidDst(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszSrcId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszDstId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszNC(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set pguidSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pguidDst(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPSYNCALL_ERRINFOA (size: 24)
 */
export interface DS_REPSYNCALL_ERRINFOA {
  /** Windows.Win32.Foundation.PSTR */
  pszSvrId: string | null | Uint8Array;
  /** Windows.Win32.Networking.ActiveDirectory.DS_REPSYNCALL_ERROR */
  error: DS_REPSYNCALL_ERROR;
  /** u32 */
  dwWin32Err: number;
  /** Windows.Win32.Foundation.PSTR */
  pszSrcId: string | null | Uint8Array;
}

export const sizeofDS_REPSYNCALL_ERRINFOA = 24;

export function allocDS_REPSYNCALL_ERRINFOA(data?: Partial<DS_REPSYNCALL_ERRINFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPSYNCALL_ERRINFOA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszSvrId !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszSvrId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.error !== undefined) view.setInt32(8, Number(data.error), true);
  // 0x0c: u32
  if (data?.dwWin32Err !== undefined) view.setUint32(12, Number(data.dwWin32Err), true);
  // 0x10: buffer
  if (data?.pszSrcId !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pszSrcId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DS_REPSYNCALL_ERRINFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszSvrId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get error(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwWin32Err(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: buffer
  get pszSrcId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszSvrId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set error(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwWin32Err(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: buffer
  set pszSrcId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPSYNCALL_ERRINFOW (size: 24)
 */
export interface DS_REPSYNCALL_ERRINFOW {
  /** Windows.Win32.Foundation.PWSTR */
  pszSvrId: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Networking.ActiveDirectory.DS_REPSYNCALL_ERROR */
  error: DS_REPSYNCALL_ERROR;
  /** u32 */
  dwWin32Err: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszSrcId: string | null | Uint8Array | Uint16Array;
}

export const sizeofDS_REPSYNCALL_ERRINFOW = 24;

export function allocDS_REPSYNCALL_ERRINFOW(data?: Partial<DS_REPSYNCALL_ERRINFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPSYNCALL_ERRINFOW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszSvrId !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszSvrId);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: i32
  if (data?.error !== undefined) view.setInt32(8, Number(data.error), true);
  // 0x0c: u32
  if (data?.dwWin32Err !== undefined) view.setUint32(12, Number(data.dwWin32Err), true);
  // 0x10: buffer
  if (data?.pszSrcId !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszSrcId);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DS_REPSYNCALL_ERRINFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszSvrId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get error(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwWin32Err(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: buffer
  get pszSrcId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszSvrId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: i32
  set error(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwWin32Err(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: buffer
  set pszSrcId(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPSYNCALL_UPDATEA (size: 24)
 */
export interface DS_REPSYNCALL_UPDATEA {
  /** Windows.Win32.Networking.ActiveDirectory.DS_REPSYNCALL_EVENT */
  event: DS_REPSYNCALL_EVENT;
  /** ptr */
  pErrInfo: Deno.PointerValue | Uint8Array;
  /** ptr */
  pSync: Deno.PointerValue | Uint8Array;
}

export const sizeofDS_REPSYNCALL_UPDATEA = 24;

export function allocDS_REPSYNCALL_UPDATEA(data?: Partial<DS_REPSYNCALL_UPDATEA>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPSYNCALL_UPDATEA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.event !== undefined) view.setInt32(0, Number(data.event), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pErrInfo !== undefined) view.setBigUint64(8, data.pErrInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pErrInfo))), true);
  // 0x10: pointer
  if (data?.pSync !== undefined) view.setBigUint64(16, data.pSync === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSync))), true);
  return buf;
}

export class DS_REPSYNCALL_UPDATEAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get event(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pErrInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pSync(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set event(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pErrInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pSync(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPSYNCALL_UPDATEW (size: 24)
 */
export interface DS_REPSYNCALL_UPDATEW {
  /** Windows.Win32.Networking.ActiveDirectory.DS_REPSYNCALL_EVENT */
  event: DS_REPSYNCALL_EVENT;
  /** ptr */
  pErrInfo: Deno.PointerValue | Uint8Array;
  /** ptr */
  pSync: Deno.PointerValue | Uint8Array;
}

export const sizeofDS_REPSYNCALL_UPDATEW = 24;

export function allocDS_REPSYNCALL_UPDATEW(data?: Partial<DS_REPSYNCALL_UPDATEW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPSYNCALL_UPDATEW);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.event !== undefined) view.setInt32(0, Number(data.event), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pErrInfo !== undefined) view.setBigUint64(8, data.pErrInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pErrInfo))), true);
  // 0x10: pointer
  if (data?.pSync !== undefined) view.setBigUint64(16, data.pSync === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSync))), true);
  return buf;
}

export class DS_REPSYNCALL_UPDATEWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get event(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pErrInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pSync(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set event(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pErrInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pSync(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_SITE_COST_INFO (size: 8)
 */
export interface DS_SITE_COST_INFO {
  /** u32 */
  errorCode: number;
  /** u32 */
  cost: number;
}

export const sizeofDS_SITE_COST_INFO = 8;

export function allocDS_SITE_COST_INFO(data?: Partial<DS_SITE_COST_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_SITE_COST_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.errorCode !== undefined) view.setUint32(0, Number(data.errorCode), true);
  // 0x04: u32
  if (data?.cost !== undefined) view.setUint32(4, Number(data.cost), true);
  return buf;
}

export class DS_SITE_COST_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get errorCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cost(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set errorCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cost(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_SCHEMA_GUID_MAPA (size: 24)
 */
export interface DS_SCHEMA_GUID_MAPA {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue;
  /** u32 */
  guidType: number;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
}

export const sizeofDS_SCHEMA_GUID_MAPA = 24;

export function allocDS_SCHEMA_GUID_MAPA(data?: Partial<DS_SCHEMA_GUID_MAPA>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_SCHEMA_GUID_MAPA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guid))), true);
  // 0x08: u32
  if (data?.guidType !== undefined) view.setUint32(8, Number(data.guidType), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DS_SCHEMA_GUID_MAPAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get guidType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set guidType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_SCHEMA_GUID_MAPW (size: 24)
 */
export interface DS_SCHEMA_GUID_MAPW {
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue;
  /** u32 */
  guidType: number;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDS_SCHEMA_GUID_MAPW = 24;

export function allocDS_SCHEMA_GUID_MAPW(data?: Partial<DS_SCHEMA_GUID_MAPW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_SCHEMA_GUID_MAPW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.guid !== undefined) view.setBigUint64(0, data.guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guid))), true);
  // 0x08: u32
  if (data?.guidType !== undefined) view.setUint32(8, Number(data.guidType), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DS_SCHEMA_GUID_MAPWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get guidType(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set guidType(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_DOMAIN_CONTROLLER_INFO_1A (size: 48)
 */
export interface DS_DOMAIN_CONTROLLER_INFO_1A {
  /** Windows.Win32.Foundation.PSTR */
  NetbiosName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  DnsHostName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  SiteName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ComputerObjectName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ServerObjectName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  fIsPdc: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDsEnabled: boolean;
}

export const sizeofDS_DOMAIN_CONTROLLER_INFO_1A = 48;

export function allocDS_DOMAIN_CONTROLLER_INFO_1A(data?: Partial<DS_DOMAIN_CONTROLLER_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_DOMAIN_CONTROLLER_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.NetbiosName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.NetbiosName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.DnsHostName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.DnsHostName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.SiteName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.SiteName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.ComputerObjectName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.ComputerObjectName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.ServerObjectName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.ServerObjectName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: i32
  if (data?.fIsPdc !== undefined) view.setInt32(40, Number(data.fIsPdc), true);
  // 0x2c: i32
  if (data?.fDsEnabled !== undefined) view.setInt32(44, Number(data.fDsEnabled), true);
  return buf;
}

export class DS_DOMAIN_CONTROLLER_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get NetbiosName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get DnsHostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get SiteName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ComputerObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get ServerObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get fIsPdc(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get fDsEnabled(): number {
    return this.view.getInt32(44, true);
  }

  // 0x00: buffer
  set NetbiosName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set DnsHostName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set SiteName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set ComputerObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set ServerObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: i32
  set fIsPdc(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set fDsEnabled(value: number) {
    this.view.setInt32(44, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_DOMAIN_CONTROLLER_INFO_1W (size: 48)
 */
export interface DS_DOMAIN_CONTROLLER_INFO_1W {
  /** Windows.Win32.Foundation.PWSTR */
  NetbiosName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DnsHostName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SiteName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ComputerObjectName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ServerObjectName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  fIsPdc: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDsEnabled: boolean;
}

export const sizeofDS_DOMAIN_CONTROLLER_INFO_1W = 48;

export function allocDS_DOMAIN_CONTROLLER_INFO_1W(data?: Partial<DS_DOMAIN_CONTROLLER_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_DOMAIN_CONTROLLER_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.NetbiosName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.NetbiosName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.DnsHostName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.DnsHostName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.SiteName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.SiteName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.ComputerObjectName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ComputerObjectName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.ServerObjectName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.ServerObjectName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: i32
  if (data?.fIsPdc !== undefined) view.setInt32(40, Number(data.fIsPdc), true);
  // 0x2c: i32
  if (data?.fDsEnabled !== undefined) view.setInt32(44, Number(data.fDsEnabled), true);
  return buf;
}

export class DS_DOMAIN_CONTROLLER_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get NetbiosName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get DnsHostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get SiteName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get ComputerObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get ServerObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get fIsPdc(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get fDsEnabled(): number {
    return this.view.getInt32(44, true);
  }

  // 0x00: buffer
  set NetbiosName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set DnsHostName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set SiteName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set ComputerObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set ServerObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: i32
  set fIsPdc(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set fDsEnabled(value: number) {
    this.view.setInt32(44, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_DOMAIN_CONTROLLER_INFO_2A (size: 104)
 */
export interface DS_DOMAIN_CONTROLLER_INFO_2A {
  /** Windows.Win32.Foundation.PSTR */
  NetbiosName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  DnsHostName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  SiteName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  SiteObjectName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ComputerObjectName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ServerObjectName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  NtdsDsaObjectName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  fIsPdc: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDsEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fIsGc: boolean;
  /** System.Guid */
  SiteObjectGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  ComputerObjectGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  ServerObjectGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  NtdsDsaObjectGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofDS_DOMAIN_CONTROLLER_INFO_2A = 104;

export function allocDS_DOMAIN_CONTROLLER_INFO_2A(data?: Partial<DS_DOMAIN_CONTROLLER_INFO_2A>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_DOMAIN_CONTROLLER_INFO_2A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.NetbiosName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.NetbiosName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.DnsHostName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.DnsHostName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.SiteName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.SiteName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.SiteObjectName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.SiteObjectName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.ComputerObjectName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.ComputerObjectName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.ServerObjectName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.ServerObjectName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.NtdsDsaObjectName !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.NtdsDsaObjectName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: i32
  if (data?.fIsPdc !== undefined) view.setInt32(56, Number(data.fIsPdc), true);
  // 0x3c: i32
  if (data?.fDsEnabled !== undefined) view.setInt32(60, Number(data.fDsEnabled), true);
  // 0x40: i32
  if (data?.fIsGc !== undefined) view.setInt32(64, Number(data.fIsGc), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.SiteObjectGuid !== undefined) view.setBigUint64(72, data.SiteObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SiteObjectGuid))), true);
  // 0x50: pointer
  if (data?.ComputerObjectGuid !== undefined) view.setBigUint64(80, data.ComputerObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ComputerObjectGuid))), true);
  // 0x58: pointer
  if (data?.ServerObjectGuid !== undefined) view.setBigUint64(88, data.ServerObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerObjectGuid))), true);
  // 0x60: pointer
  if (data?.NtdsDsaObjectGuid !== undefined) view.setBigUint64(96, data.NtdsDsaObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NtdsDsaObjectGuid))), true);
  return buf;
}

export class DS_DOMAIN_CONTROLLER_INFO_2AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get NetbiosName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get DnsHostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get SiteName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get SiteObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get ComputerObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get ServerObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get NtdsDsaObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get fIsPdc(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get fDsEnabled(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: i32
  get fIsGc(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get SiteObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get ComputerObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ServerObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get NtdsDsaObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set NetbiosName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set DnsHostName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set SiteName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set SiteObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set ComputerObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set ServerObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set NtdsDsaObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: i32
  set fIsPdc(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set fDsEnabled(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: i32
  set fIsGc(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set SiteObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set ComputerObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set ServerObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set NtdsDsaObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_DOMAIN_CONTROLLER_INFO_2W (size: 104)
 */
export interface DS_DOMAIN_CONTROLLER_INFO_2W {
  /** Windows.Win32.Foundation.PWSTR */
  NetbiosName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DnsHostName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SiteName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SiteObjectName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ComputerObjectName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ServerObjectName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  NtdsDsaObjectName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  fIsPdc: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDsEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fIsGc: boolean;
  /** System.Guid */
  SiteObjectGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  ComputerObjectGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  ServerObjectGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  NtdsDsaObjectGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofDS_DOMAIN_CONTROLLER_INFO_2W = 104;

export function allocDS_DOMAIN_CONTROLLER_INFO_2W(data?: Partial<DS_DOMAIN_CONTROLLER_INFO_2W>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_DOMAIN_CONTROLLER_INFO_2W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.NetbiosName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.NetbiosName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.DnsHostName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.DnsHostName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.SiteName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.SiteName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.SiteObjectName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.SiteObjectName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.ComputerObjectName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.ComputerObjectName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.ServerObjectName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.ServerObjectName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.NtdsDsaObjectName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.NtdsDsaObjectName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: i32
  if (data?.fIsPdc !== undefined) view.setInt32(56, Number(data.fIsPdc), true);
  // 0x3c: i32
  if (data?.fDsEnabled !== undefined) view.setInt32(60, Number(data.fDsEnabled), true);
  // 0x40: i32
  if (data?.fIsGc !== undefined) view.setInt32(64, Number(data.fIsGc), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.SiteObjectGuid !== undefined) view.setBigUint64(72, data.SiteObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SiteObjectGuid))), true);
  // 0x50: pointer
  if (data?.ComputerObjectGuid !== undefined) view.setBigUint64(80, data.ComputerObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ComputerObjectGuid))), true);
  // 0x58: pointer
  if (data?.ServerObjectGuid !== undefined) view.setBigUint64(88, data.ServerObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerObjectGuid))), true);
  // 0x60: pointer
  if (data?.NtdsDsaObjectGuid !== undefined) view.setBigUint64(96, data.NtdsDsaObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NtdsDsaObjectGuid))), true);
  return buf;
}

export class DS_DOMAIN_CONTROLLER_INFO_2WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get NetbiosName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get DnsHostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get SiteName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get SiteObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get ComputerObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get ServerObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get NtdsDsaObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get fIsPdc(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get fDsEnabled(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: i32
  get fIsGc(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get SiteObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get ComputerObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ServerObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get NtdsDsaObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set NetbiosName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set DnsHostName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set SiteName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set SiteObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set ComputerObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set ServerObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set NtdsDsaObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: i32
  set fIsPdc(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set fDsEnabled(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: i32
  set fIsGc(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set SiteObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set ComputerObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set ServerObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set NtdsDsaObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_DOMAIN_CONTROLLER_INFO_3A (size: 104)
 */
export interface DS_DOMAIN_CONTROLLER_INFO_3A {
  /** Windows.Win32.Foundation.PSTR */
  NetbiosName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  DnsHostName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  SiteName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  SiteObjectName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ComputerObjectName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ServerObjectName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  NtdsDsaObjectName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  fIsPdc: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDsEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fIsGc: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fIsRodc: boolean;
  /** System.Guid */
  SiteObjectGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  ComputerObjectGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  ServerObjectGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  NtdsDsaObjectGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofDS_DOMAIN_CONTROLLER_INFO_3A = 104;

export function allocDS_DOMAIN_CONTROLLER_INFO_3A(data?: Partial<DS_DOMAIN_CONTROLLER_INFO_3A>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_DOMAIN_CONTROLLER_INFO_3A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.NetbiosName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.NetbiosName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.DnsHostName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.DnsHostName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.SiteName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.SiteName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.SiteObjectName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.SiteObjectName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.ComputerObjectName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.ComputerObjectName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.ServerObjectName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.ServerObjectName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.NtdsDsaObjectName !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.NtdsDsaObjectName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: i32
  if (data?.fIsPdc !== undefined) view.setInt32(56, Number(data.fIsPdc), true);
  // 0x3c: i32
  if (data?.fDsEnabled !== undefined) view.setInt32(60, Number(data.fDsEnabled), true);
  // 0x40: i32
  if (data?.fIsGc !== undefined) view.setInt32(64, Number(data.fIsGc), true);
  // 0x44: i32
  if (data?.fIsRodc !== undefined) view.setInt32(68, Number(data.fIsRodc), true);
  // 0x48: pointer
  if (data?.SiteObjectGuid !== undefined) view.setBigUint64(72, data.SiteObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SiteObjectGuid))), true);
  // 0x50: pointer
  if (data?.ComputerObjectGuid !== undefined) view.setBigUint64(80, data.ComputerObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ComputerObjectGuid))), true);
  // 0x58: pointer
  if (data?.ServerObjectGuid !== undefined) view.setBigUint64(88, data.ServerObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerObjectGuid))), true);
  // 0x60: pointer
  if (data?.NtdsDsaObjectGuid !== undefined) view.setBigUint64(96, data.NtdsDsaObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NtdsDsaObjectGuid))), true);
  return buf;
}

export class DS_DOMAIN_CONTROLLER_INFO_3AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get NetbiosName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get DnsHostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get SiteName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get SiteObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get ComputerObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get ServerObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get NtdsDsaObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get fIsPdc(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get fDsEnabled(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: i32
  get fIsGc(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: i32
  get fIsRodc(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: pointer
  get SiteObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get ComputerObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ServerObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get NtdsDsaObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set NetbiosName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set DnsHostName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set SiteName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set SiteObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set ComputerObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set ServerObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set NtdsDsaObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: i32
  set fIsPdc(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set fDsEnabled(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: i32
  set fIsGc(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: i32
  set fIsRodc(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: pointer
  set SiteObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set ComputerObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set ServerObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set NtdsDsaObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_DOMAIN_CONTROLLER_INFO_3W (size: 104)
 */
export interface DS_DOMAIN_CONTROLLER_INFO_3W {
  /** Windows.Win32.Foundation.PWSTR */
  NetbiosName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DnsHostName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SiteName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  SiteObjectName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ComputerObjectName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ServerObjectName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  NtdsDsaObjectName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.BOOL */
  fIsPdc: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fDsEnabled: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fIsGc: boolean;
  /** Windows.Win32.Foundation.BOOL */
  fIsRodc: boolean;
  /** System.Guid */
  SiteObjectGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  ComputerObjectGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  ServerObjectGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  NtdsDsaObjectGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofDS_DOMAIN_CONTROLLER_INFO_3W = 104;

export function allocDS_DOMAIN_CONTROLLER_INFO_3W(data?: Partial<DS_DOMAIN_CONTROLLER_INFO_3W>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_DOMAIN_CONTROLLER_INFO_3W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.NetbiosName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.NetbiosName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.DnsHostName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.DnsHostName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.SiteName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.SiteName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.SiteObjectName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.SiteObjectName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.ComputerObjectName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.ComputerObjectName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.ServerObjectName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.ServerObjectName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.NtdsDsaObjectName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.NtdsDsaObjectName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: i32
  if (data?.fIsPdc !== undefined) view.setInt32(56, Number(data.fIsPdc), true);
  // 0x3c: i32
  if (data?.fDsEnabled !== undefined) view.setInt32(60, Number(data.fDsEnabled), true);
  // 0x40: i32
  if (data?.fIsGc !== undefined) view.setInt32(64, Number(data.fIsGc), true);
  // 0x44: i32
  if (data?.fIsRodc !== undefined) view.setInt32(68, Number(data.fIsRodc), true);
  // 0x48: pointer
  if (data?.SiteObjectGuid !== undefined) view.setBigUint64(72, data.SiteObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SiteObjectGuid))), true);
  // 0x50: pointer
  if (data?.ComputerObjectGuid !== undefined) view.setBigUint64(80, data.ComputerObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ComputerObjectGuid))), true);
  // 0x58: pointer
  if (data?.ServerObjectGuid !== undefined) view.setBigUint64(88, data.ServerObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ServerObjectGuid))), true);
  // 0x60: pointer
  if (data?.NtdsDsaObjectGuid !== undefined) view.setBigUint64(96, data.NtdsDsaObjectGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NtdsDsaObjectGuid))), true);
  return buf;
}

export class DS_DOMAIN_CONTROLLER_INFO_3WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get NetbiosName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get DnsHostName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get SiteName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get SiteObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get ComputerObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get ServerObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get NtdsDsaObjectName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i32
  get fIsPdc(): number {
    return this.view.getInt32(56, true);
  }

  // 0x3c: i32
  get fDsEnabled(): number {
    return this.view.getInt32(60, true);
  }

  // 0x40: i32
  get fIsGc(): number {
    return this.view.getInt32(64, true);
  }

  // 0x44: i32
  get fIsRodc(): number {
    return this.view.getInt32(68, true);
  }

  // 0x48: pointer
  get SiteObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get ComputerObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ServerObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get NtdsDsaObjectGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set NetbiosName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set DnsHostName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set SiteName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set SiteObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set ComputerObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set ServerObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set NtdsDsaObjectName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: i32
  set fIsPdc(value: number) {
    this.view.setInt32(56, value, true);
  }

  // 0x3c: i32
  set fDsEnabled(value: number) {
    this.view.setInt32(60, value, true);
  }

  // 0x40: i32
  set fIsGc(value: number) {
    this.view.setInt32(64, value, true);
  }

  // 0x44: i32
  set fIsRodc(value: number) {
    this.view.setInt32(68, value, true);
  }

  // 0x48: pointer
  set SiteObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set ComputerObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set ServerObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set NtdsDsaObjectGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_NEIGHBORW (size: 112)
 */
export interface DS_REPL_NEIGHBORW {
  /** Windows.Win32.Foundation.PWSTR */
  pszNamingContext: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszSourceDsaDN: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszSourceDsaAddress: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszAsyncIntersiteTransportDN: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwReplicaFlags: number;
  /** u32 */
  dwReserved: number;
  /** System.Guid */
  uuidNamingContextObjGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidSourceDsaObjGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidSourceDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidAsyncIntersiteTransportObjGuid: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnLastObjChangeSynced: Deno.PointerValue;
  /** i64 */
  usnAttributeFilter: Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastSyncSuccess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastSyncAttempt: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwLastSyncResult: number;
  /** u32 */
  cNumConsecutiveSyncFailures: number;
}

export const sizeofDS_REPL_NEIGHBORW = 112;

export function allocDS_REPL_NEIGHBORW(data?: Partial<DS_REPL_NEIGHBORW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_NEIGHBORW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszNamingContext !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszNamingContext);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszSourceDsaDN !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszSourceDsaDN);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pszSourceDsaAddress !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pszSourceDsaAddress);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pszAsyncIntersiteTransportDN !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszAsyncIntersiteTransportDN);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.dwReplicaFlags !== undefined) view.setUint32(32, Number(data.dwReplicaFlags), true);
  // 0x24: u32
  if (data?.dwReserved !== undefined) view.setUint32(36, Number(data.dwReserved), true);
  // 0x28: pointer
  if (data?.uuidNamingContextObjGuid !== undefined) view.setBigUint64(40, data.uuidNamingContextObjGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidNamingContextObjGuid))), true);
  // 0x30: pointer
  if (data?.uuidSourceDsaObjGuid !== undefined) view.setBigUint64(48, data.uuidSourceDsaObjGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidSourceDsaObjGuid))), true);
  // 0x38: pointer
  if (data?.uuidSourceDsaInvocationID !== undefined) view.setBigUint64(56, data.uuidSourceDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidSourceDsaInvocationID))), true);
  // 0x40: pointer
  if (data?.uuidAsyncIntersiteTransportObjGuid !== undefined) view.setBigUint64(64, data.uuidAsyncIntersiteTransportObjGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidAsyncIntersiteTransportObjGuid))), true);
  // 0x48: i64
  if (data?.usnLastObjChangeSynced !== undefined) view.setBigInt64(72, BigInt(data.usnLastObjChangeSynced), true);
  // 0x50: i64
  if (data?.usnAttributeFilter !== undefined) view.setBigInt64(80, BigInt(data.usnAttributeFilter), true);
  // 0x58: pointer
  if (data?.ftimeLastSyncSuccess !== undefined) view.setBigUint64(88, data.ftimeLastSyncSuccess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastSyncSuccess))), true);
  // 0x60: pointer
  if (data?.ftimeLastSyncAttempt !== undefined) view.setBigUint64(96, data.ftimeLastSyncAttempt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastSyncAttempt))), true);
  // 0x68: u32
  if (data?.dwLastSyncResult !== undefined) view.setUint32(104, Number(data.dwLastSyncResult), true);
  // 0x6c: u32
  if (data?.cNumConsecutiveSyncFailures !== undefined) view.setUint32(108, Number(data.cNumConsecutiveSyncFailures), true);
  return buf;
}

export class DS_REPL_NEIGHBORWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszNamingContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszSourceDsaDN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pszSourceDsaAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszAsyncIntersiteTransportDN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwReplicaFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwReserved(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get uuidNamingContextObjGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get uuidSourceDsaObjGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get uuidSourceDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get uuidAsyncIntersiteTransportObjGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: i64
  get usnLastObjChangeSynced(): Deno.PointerValue {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: i64
  get usnAttributeFilter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: pointer
  get ftimeLastSyncSuccess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get ftimeLastSyncAttempt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get dwLastSyncResult(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get cNumConsecutiveSyncFailures(): number {
    return this.view.getUint32(108, true);
  }

  // 0x00: buffer
  set pszNamingContext(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszSourceDsaDN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pszSourceDsaAddress(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pszAsyncIntersiteTransportDN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set dwReplicaFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwReserved(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set uuidNamingContextObjGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set uuidSourceDsaObjGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set uuidSourceDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set uuidAsyncIntersiteTransportObjGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: i64
  set usnLastObjChangeSynced(value: Deno.PointerValue) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: i64
  set usnAttributeFilter(value: Deno.PointerValue) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: pointer
  set ftimeLastSyncSuccess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set ftimeLastSyncAttempt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set dwLastSyncResult(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set cNumConsecutiveSyncFailures(value: number) {
    this.view.setUint32(108, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_NEIGHBORW_BLOB (size: 96)
 */
export interface DS_REPL_NEIGHBORW_BLOB {
  /** u32 */
  oszNamingContext: number;
  /** u32 */
  oszSourceDsaDN: number;
  /** u32 */
  oszSourceDsaAddress: number;
  /** u32 */
  oszAsyncIntersiteTransportDN: number;
  /** u32 */
  dwReplicaFlags: number;
  /** u32 */
  dwReserved: number;
  /** System.Guid */
  uuidNamingContextObjGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidSourceDsaObjGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidSourceDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidAsyncIntersiteTransportObjGuid: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnLastObjChangeSynced: Deno.PointerValue;
  /** i64 */
  usnAttributeFilter: Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastSyncSuccess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastSyncAttempt: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwLastSyncResult: number;
  /** u32 */
  cNumConsecutiveSyncFailures: number;
}

export const sizeofDS_REPL_NEIGHBORW_BLOB = 96;

export function allocDS_REPL_NEIGHBORW_BLOB(data?: Partial<DS_REPL_NEIGHBORW_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_NEIGHBORW_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.oszNamingContext !== undefined) view.setUint32(0, Number(data.oszNamingContext), true);
  // 0x04: u32
  if (data?.oszSourceDsaDN !== undefined) view.setUint32(4, Number(data.oszSourceDsaDN), true);
  // 0x08: u32
  if (data?.oszSourceDsaAddress !== undefined) view.setUint32(8, Number(data.oszSourceDsaAddress), true);
  // 0x0c: u32
  if (data?.oszAsyncIntersiteTransportDN !== undefined) view.setUint32(12, Number(data.oszAsyncIntersiteTransportDN), true);
  // 0x10: u32
  if (data?.dwReplicaFlags !== undefined) view.setUint32(16, Number(data.dwReplicaFlags), true);
  // 0x14: u32
  if (data?.dwReserved !== undefined) view.setUint32(20, Number(data.dwReserved), true);
  // 0x18: pointer
  if (data?.uuidNamingContextObjGuid !== undefined) view.setBigUint64(24, data.uuidNamingContextObjGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidNamingContextObjGuid))), true);
  // 0x20: pointer
  if (data?.uuidSourceDsaObjGuid !== undefined) view.setBigUint64(32, data.uuidSourceDsaObjGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidSourceDsaObjGuid))), true);
  // 0x28: pointer
  if (data?.uuidSourceDsaInvocationID !== undefined) view.setBigUint64(40, data.uuidSourceDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidSourceDsaInvocationID))), true);
  // 0x30: pointer
  if (data?.uuidAsyncIntersiteTransportObjGuid !== undefined) view.setBigUint64(48, data.uuidAsyncIntersiteTransportObjGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidAsyncIntersiteTransportObjGuid))), true);
  // 0x38: i64
  if (data?.usnLastObjChangeSynced !== undefined) view.setBigInt64(56, BigInt(data.usnLastObjChangeSynced), true);
  // 0x40: i64
  if (data?.usnAttributeFilter !== undefined) view.setBigInt64(64, BigInt(data.usnAttributeFilter), true);
  // 0x48: pointer
  if (data?.ftimeLastSyncSuccess !== undefined) view.setBigUint64(72, data.ftimeLastSyncSuccess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastSyncSuccess))), true);
  // 0x50: pointer
  if (data?.ftimeLastSyncAttempt !== undefined) view.setBigUint64(80, data.ftimeLastSyncAttempt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastSyncAttempt))), true);
  // 0x58: u32
  if (data?.dwLastSyncResult !== undefined) view.setUint32(88, Number(data.dwLastSyncResult), true);
  // 0x5c: u32
  if (data?.cNumConsecutiveSyncFailures !== undefined) view.setUint32(92, Number(data.cNumConsecutiveSyncFailures), true);
  return buf;
}

export class DS_REPL_NEIGHBORW_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get oszNamingContext(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get oszSourceDsaDN(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get oszSourceDsaAddress(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get oszAsyncIntersiteTransportDN(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwReplicaFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwReserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get uuidNamingContextObjGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get uuidSourceDsaObjGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get uuidSourceDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get uuidAsyncIntersiteTransportObjGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i64
  get usnLastObjChangeSynced(): Deno.PointerValue {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: i64
  get usnAttributeFilter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: pointer
  get ftimeLastSyncSuccess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get ftimeLastSyncAttempt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get dwLastSyncResult(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get cNumConsecutiveSyncFailures(): number {
    return this.view.getUint32(92, true);
  }

  // 0x00: u32
  set oszNamingContext(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set oszSourceDsaDN(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set oszSourceDsaAddress(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set oszAsyncIntersiteTransportDN(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwReplicaFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwReserved(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set uuidNamingContextObjGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set uuidSourceDsaObjGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set uuidSourceDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set uuidAsyncIntersiteTransportObjGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: i64
  set usnLastObjChangeSynced(value: Deno.PointerValue) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: i64
  set usnAttributeFilter(value: Deno.PointerValue) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: pointer
  set ftimeLastSyncSuccess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set ftimeLastSyncAttempt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set dwLastSyncResult(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set cNumConsecutiveSyncFailures(value: number) {
    this.view.setUint32(92, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_NEIGHBORSW (size: 16)
 */
export interface DS_REPL_NEIGHBORSW {
  /** u32 */
  cNumNeighbors: number;
  /** u32 */
  dwReserved: number;
  /** array */
  rgNeighbor: Deno.PointerValue;
}

export const sizeofDS_REPL_NEIGHBORSW = 16;

export function allocDS_REPL_NEIGHBORSW(data?: Partial<DS_REPL_NEIGHBORSW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_NEIGHBORSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cNumNeighbors !== undefined) view.setUint32(0, Number(data.cNumNeighbors), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  // 0x08: pointer
  if (data?.rgNeighbor !== undefined) view.setBigUint64(8, data.rgNeighbor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgNeighbor))), true);
  return buf;
}

export class DS_REPL_NEIGHBORSWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cNumNeighbors(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwReserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgNeighbor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cNumNeighbors(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwReserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgNeighbor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_CURSOR (size: 16)
 */
export interface DS_REPL_CURSOR {
  /** System.Guid */
  uuidSourceDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnAttributeFilter: Deno.PointerValue;
}

export const sizeofDS_REPL_CURSOR = 16;

export function allocDS_REPL_CURSOR(data?: Partial<DS_REPL_CURSOR>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_CURSOR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.uuidSourceDsaInvocationID !== undefined) view.setBigUint64(0, data.uuidSourceDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidSourceDsaInvocationID))), true);
  // 0x08: i64
  if (data?.usnAttributeFilter !== undefined) view.setBigInt64(8, BigInt(data.usnAttributeFilter), true);
  return buf;
}

export class DS_REPL_CURSORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get uuidSourceDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i64
  get usnAttributeFilter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x00: pointer
  set uuidSourceDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i64
  set usnAttributeFilter(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_CURSOR_2 (size: 24)
 */
export interface DS_REPL_CURSOR_2 {
  /** System.Guid */
  uuidSourceDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnAttributeFilter: Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastSyncSuccess: Uint8Array | Deno.PointerValue;
}

export const sizeofDS_REPL_CURSOR_2 = 24;

export function allocDS_REPL_CURSOR_2(data?: Partial<DS_REPL_CURSOR_2>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_CURSOR_2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.uuidSourceDsaInvocationID !== undefined) view.setBigUint64(0, data.uuidSourceDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidSourceDsaInvocationID))), true);
  // 0x08: i64
  if (data?.usnAttributeFilter !== undefined) view.setBigInt64(8, BigInt(data.usnAttributeFilter), true);
  // 0x10: pointer
  if (data?.ftimeLastSyncSuccess !== undefined) view.setBigUint64(16, data.ftimeLastSyncSuccess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastSyncSuccess))), true);
  return buf;
}

export class DS_REPL_CURSOR_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get uuidSourceDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i64
  get usnAttributeFilter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get ftimeLastSyncSuccess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set uuidSourceDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i64
  set usnAttributeFilter(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ftimeLastSyncSuccess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_CURSOR_3W (size: 32)
 */
export interface DS_REPL_CURSOR_3W {
  /** System.Guid */
  uuidSourceDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnAttributeFilter: Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastSyncSuccess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszSourceDsaDN: string | null | Uint8Array | Uint16Array;
}

export const sizeofDS_REPL_CURSOR_3W = 32;

export function allocDS_REPL_CURSOR_3W(data?: Partial<DS_REPL_CURSOR_3W>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_CURSOR_3W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.uuidSourceDsaInvocationID !== undefined) view.setBigUint64(0, data.uuidSourceDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidSourceDsaInvocationID))), true);
  // 0x08: i64
  if (data?.usnAttributeFilter !== undefined) view.setBigInt64(8, BigInt(data.usnAttributeFilter), true);
  // 0x10: pointer
  if (data?.ftimeLastSyncSuccess !== undefined) view.setBigUint64(16, data.ftimeLastSyncSuccess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastSyncSuccess))), true);
  // 0x18: buffer
  if (data?.pszSourceDsaDN !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszSourceDsaDN);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class DS_REPL_CURSOR_3WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get uuidSourceDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i64
  get usnAttributeFilter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get ftimeLastSyncSuccess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszSourceDsaDN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set uuidSourceDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i64
  set usnAttributeFilter(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ftimeLastSyncSuccess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pszSourceDsaDN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_CURSOR_BLOB (size: 32)
 */
export interface DS_REPL_CURSOR_BLOB {
  /** System.Guid */
  uuidSourceDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnAttributeFilter: Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastSyncSuccess: Uint8Array | Deno.PointerValue;
  /** u32 */
  oszSourceDsaDN: number;
}

export const sizeofDS_REPL_CURSOR_BLOB = 32;

export function allocDS_REPL_CURSOR_BLOB(data?: Partial<DS_REPL_CURSOR_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_CURSOR_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.uuidSourceDsaInvocationID !== undefined) view.setBigUint64(0, data.uuidSourceDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidSourceDsaInvocationID))), true);
  // 0x08: i64
  if (data?.usnAttributeFilter !== undefined) view.setBigInt64(8, BigInt(data.usnAttributeFilter), true);
  // 0x10: pointer
  if (data?.ftimeLastSyncSuccess !== undefined) view.setBigUint64(16, data.ftimeLastSyncSuccess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastSyncSuccess))), true);
  // 0x18: u32
  if (data?.oszSourceDsaDN !== undefined) view.setUint32(24, Number(data.oszSourceDsaDN), true);
  // 0x1c: pad4
  return buf;
}

export class DS_REPL_CURSOR_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get uuidSourceDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i64
  get usnAttributeFilter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: pointer
  get ftimeLastSyncSuccess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get oszSourceDsaDN(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set uuidSourceDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i64
  set usnAttributeFilter(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ftimeLastSyncSuccess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set oszSourceDsaDN(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_CURSORS (size: 16)
 */
export interface DS_REPL_CURSORS {
  /** u32 */
  cNumCursors: number;
  /** u32 */
  dwReserved: number;
  /** array */
  rgCursor: Deno.PointerValue;
}

export const sizeofDS_REPL_CURSORS = 16;

export function allocDS_REPL_CURSORS(data?: Partial<DS_REPL_CURSORS>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_CURSORS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cNumCursors !== undefined) view.setUint32(0, Number(data.cNumCursors), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  // 0x08: pointer
  if (data?.rgCursor !== undefined) view.setBigUint64(8, data.rgCursor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgCursor))), true);
  return buf;
}

export class DS_REPL_CURSORSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cNumCursors(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwReserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgCursor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cNumCursors(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwReserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgCursor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_CURSORS_2 (size: 16)
 */
export interface DS_REPL_CURSORS_2 {
  /** u32 */
  cNumCursors: number;
  /** u32 */
  dwEnumerationContext: number;
  /** array */
  rgCursor: Deno.PointerValue;
}

export const sizeofDS_REPL_CURSORS_2 = 16;

export function allocDS_REPL_CURSORS_2(data?: Partial<DS_REPL_CURSORS_2>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_CURSORS_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cNumCursors !== undefined) view.setUint32(0, Number(data.cNumCursors), true);
  // 0x04: u32
  if (data?.dwEnumerationContext !== undefined) view.setUint32(4, Number(data.dwEnumerationContext), true);
  // 0x08: pointer
  if (data?.rgCursor !== undefined) view.setBigUint64(8, data.rgCursor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgCursor))), true);
  return buf;
}

export class DS_REPL_CURSORS_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cNumCursors(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwEnumerationContext(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgCursor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cNumCursors(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwEnumerationContext(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgCursor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_CURSORS_3W (size: 16)
 */
export interface DS_REPL_CURSORS_3W {
  /** u32 */
  cNumCursors: number;
  /** u32 */
  dwEnumerationContext: number;
  /** array */
  rgCursor: Deno.PointerValue;
}

export const sizeofDS_REPL_CURSORS_3W = 16;

export function allocDS_REPL_CURSORS_3W(data?: Partial<DS_REPL_CURSORS_3W>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_CURSORS_3W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cNumCursors !== undefined) view.setUint32(0, Number(data.cNumCursors), true);
  // 0x04: u32
  if (data?.dwEnumerationContext !== undefined) view.setUint32(4, Number(data.dwEnumerationContext), true);
  // 0x08: pointer
  if (data?.rgCursor !== undefined) view.setBigUint64(8, data.rgCursor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgCursor))), true);
  return buf;
}

export class DS_REPL_CURSORS_3WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cNumCursors(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwEnumerationContext(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgCursor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cNumCursors(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwEnumerationContext(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgCursor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_ATTR_META_DATA (size: 48)
 */
export interface DS_REPL_ATTR_META_DATA {
  /** Windows.Win32.Foundation.PWSTR */
  pszAttributeName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastOriginatingChange: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidLastOriginatingDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnOriginatingChange: Deno.PointerValue;
  /** i64 */
  usnLocalChange: Deno.PointerValue;
}

export const sizeofDS_REPL_ATTR_META_DATA = 48;

export function allocDS_REPL_ATTR_META_DATA(data?: Partial<DS_REPL_ATTR_META_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_ATTR_META_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszAttributeName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszAttributeName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.dwVersion !== undefined) view.setUint32(8, Number(data.dwVersion), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ftimeLastOriginatingChange !== undefined) view.setBigUint64(16, data.ftimeLastOriginatingChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastOriginatingChange))), true);
  // 0x18: pointer
  if (data?.uuidLastOriginatingDsaInvocationID !== undefined) view.setBigUint64(24, data.uuidLastOriginatingDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidLastOriginatingDsaInvocationID))), true);
  // 0x20: i64
  if (data?.usnOriginatingChange !== undefined) view.setBigInt64(32, BigInt(data.usnOriginatingChange), true);
  // 0x28: i64
  if (data?.usnLocalChange !== undefined) view.setBigInt64(40, BigInt(data.usnLocalChange), true);
  return buf;
}

export class DS_REPL_ATTR_META_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszAttributeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ftimeLastOriginatingChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get uuidLastOriginatingDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i64
  get usnOriginatingChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: i64
  get usnLocalChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x00: buffer
  set pszAttributeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set dwVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ftimeLastOriginatingChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set uuidLastOriginatingDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i64
  set usnOriginatingChange(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: i64
  set usnLocalChange(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_ATTR_META_DATA_2 (size: 56)
 */
export interface DS_REPL_ATTR_META_DATA_2 {
  /** Windows.Win32.Foundation.PWSTR */
  pszAttributeName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastOriginatingChange: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidLastOriginatingDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnOriginatingChange: Deno.PointerValue;
  /** i64 */
  usnLocalChange: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszLastOriginatingDsaDN: string | null | Uint8Array | Uint16Array;
}

export const sizeofDS_REPL_ATTR_META_DATA_2 = 56;

export function allocDS_REPL_ATTR_META_DATA_2(data?: Partial<DS_REPL_ATTR_META_DATA_2>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_ATTR_META_DATA_2);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszAttributeName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszAttributeName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.dwVersion !== undefined) view.setUint32(8, Number(data.dwVersion), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ftimeLastOriginatingChange !== undefined) view.setBigUint64(16, data.ftimeLastOriginatingChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastOriginatingChange))), true);
  // 0x18: pointer
  if (data?.uuidLastOriginatingDsaInvocationID !== undefined) view.setBigUint64(24, data.uuidLastOriginatingDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidLastOriginatingDsaInvocationID))), true);
  // 0x20: i64
  if (data?.usnOriginatingChange !== undefined) view.setBigInt64(32, BigInt(data.usnOriginatingChange), true);
  // 0x28: i64
  if (data?.usnLocalChange !== undefined) view.setBigInt64(40, BigInt(data.usnLocalChange), true);
  // 0x30: buffer
  if (data?.pszLastOriginatingDsaDN !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pszLastOriginatingDsaDN);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  return buf;
}

export class DS_REPL_ATTR_META_DATA_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszAttributeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ftimeLastOriginatingChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get uuidLastOriginatingDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i64
  get usnOriginatingChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: i64
  get usnLocalChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: buffer
  get pszLastOriginatingDsaDN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszAttributeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set dwVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ftimeLastOriginatingChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set uuidLastOriginatingDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i64
  set usnOriginatingChange(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: i64
  set usnLocalChange(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: buffer
  set pszLastOriginatingDsaDN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_ATTR_META_DATA_BLOB (size: 48)
 */
export interface DS_REPL_ATTR_META_DATA_BLOB {
  /** u32 */
  oszAttributeName: number;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastOriginatingChange: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidLastOriginatingDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnOriginatingChange: Deno.PointerValue;
  /** i64 */
  usnLocalChange: Deno.PointerValue;
  /** u32 */
  oszLastOriginatingDsaDN: number;
}

export const sizeofDS_REPL_ATTR_META_DATA_BLOB = 48;

export function allocDS_REPL_ATTR_META_DATA_BLOB(data?: Partial<DS_REPL_ATTR_META_DATA_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_ATTR_META_DATA_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.oszAttributeName !== undefined) view.setUint32(0, Number(data.oszAttributeName), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: pointer
  if (data?.ftimeLastOriginatingChange !== undefined) view.setBigUint64(8, data.ftimeLastOriginatingChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastOriginatingChange))), true);
  // 0x10: pointer
  if (data?.uuidLastOriginatingDsaInvocationID !== undefined) view.setBigUint64(16, data.uuidLastOriginatingDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidLastOriginatingDsaInvocationID))), true);
  // 0x18: i64
  if (data?.usnOriginatingChange !== undefined) view.setBigInt64(24, BigInt(data.usnOriginatingChange), true);
  // 0x20: i64
  if (data?.usnLocalChange !== undefined) view.setBigInt64(32, BigInt(data.usnLocalChange), true);
  // 0x28: u32
  if (data?.oszLastOriginatingDsaDN !== undefined) view.setUint32(40, Number(data.oszLastOriginatingDsaDN), true);
  // 0x2c: pad4
  return buf;
}

export class DS_REPL_ATTR_META_DATA_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get oszAttributeName(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ftimeLastOriginatingChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get uuidLastOriginatingDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i64
  get usnOriginatingChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: i64
  get usnLocalChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: u32
  get oszLastOriginatingDsaDN(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x00: u32
  set oszAttributeName(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ftimeLastOriginatingChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set uuidLastOriginatingDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i64
  set usnOriginatingChange(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: i64
  set usnLocalChange(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: u32
  set oszLastOriginatingDsaDN(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_OBJ_META_DATA (size: 16)
 */
export interface DS_REPL_OBJ_META_DATA {
  /** u32 */
  cNumEntries: number;
  /** u32 */
  dwReserved: number;
  /** array */
  rgMetaData: Deno.PointerValue;
}

export const sizeofDS_REPL_OBJ_META_DATA = 16;

export function allocDS_REPL_OBJ_META_DATA(data?: Partial<DS_REPL_OBJ_META_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_OBJ_META_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cNumEntries !== undefined) view.setUint32(0, Number(data.cNumEntries), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  // 0x08: pointer
  if (data?.rgMetaData !== undefined) view.setBigUint64(8, data.rgMetaData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgMetaData))), true);
  return buf;
}

export class DS_REPL_OBJ_META_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwReserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgMetaData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwReserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgMetaData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_OBJ_META_DATA_2 (size: 16)
 */
export interface DS_REPL_OBJ_META_DATA_2 {
  /** u32 */
  cNumEntries: number;
  /** u32 */
  dwReserved: number;
  /** array */
  rgMetaData: Deno.PointerValue;
}

export const sizeofDS_REPL_OBJ_META_DATA_2 = 16;

export function allocDS_REPL_OBJ_META_DATA_2(data?: Partial<DS_REPL_OBJ_META_DATA_2>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_OBJ_META_DATA_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cNumEntries !== undefined) view.setUint32(0, Number(data.cNumEntries), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  // 0x08: pointer
  if (data?.rgMetaData !== undefined) view.setBigUint64(8, data.rgMetaData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgMetaData))), true);
  return buf;
}

export class DS_REPL_OBJ_META_DATA_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwReserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgMetaData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwReserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgMetaData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_KCC_DSA_FAILUREW (size: 32)
 */
export interface DS_REPL_KCC_DSA_FAILUREW {
  /** Windows.Win32.Foundation.PWSTR */
  pszDsaDN: string | null | Uint8Array | Uint16Array;
  /** System.Guid */
  uuidDsaObjGuid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeFirstFailure: Uint8Array | Deno.PointerValue;
  /** u32 */
  cNumFailures: number;
  /** u32 */
  dwLastResult: number;
}

export const sizeofDS_REPL_KCC_DSA_FAILUREW = 32;

export function allocDS_REPL_KCC_DSA_FAILUREW(data?: Partial<DS_REPL_KCC_DSA_FAILUREW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_KCC_DSA_FAILUREW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszDsaDN !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszDsaDN);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.uuidDsaObjGuid !== undefined) view.setBigUint64(8, data.uuidDsaObjGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidDsaObjGuid))), true);
  // 0x10: pointer
  if (data?.ftimeFirstFailure !== undefined) view.setBigUint64(16, data.ftimeFirstFailure === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeFirstFailure))), true);
  // 0x18: u32
  if (data?.cNumFailures !== undefined) view.setUint32(24, Number(data.cNumFailures), true);
  // 0x1c: u32
  if (data?.dwLastResult !== undefined) view.setUint32(28, Number(data.dwLastResult), true);
  return buf;
}

export class DS_REPL_KCC_DSA_FAILUREWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszDsaDN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get uuidDsaObjGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ftimeFirstFailure(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cNumFailures(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwLastResult(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: buffer
  set pszDsaDN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set uuidDsaObjGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ftimeFirstFailure(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cNumFailures(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwLastResult(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_KCC_DSA_FAILUREW_BLOB (size: 32)
 */
export interface DS_REPL_KCC_DSA_FAILUREW_BLOB {
  /** u32 */
  oszDsaDN: number;
  /** System.Guid */
  uuidDsaObjGuid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeFirstFailure: Uint8Array | Deno.PointerValue;
  /** u32 */
  cNumFailures: number;
  /** u32 */
  dwLastResult: number;
}

export const sizeofDS_REPL_KCC_DSA_FAILUREW_BLOB = 32;

export function allocDS_REPL_KCC_DSA_FAILUREW_BLOB(data?: Partial<DS_REPL_KCC_DSA_FAILUREW_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_KCC_DSA_FAILUREW_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.oszDsaDN !== undefined) view.setUint32(0, Number(data.oszDsaDN), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.uuidDsaObjGuid !== undefined) view.setBigUint64(8, data.uuidDsaObjGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidDsaObjGuid))), true);
  // 0x10: pointer
  if (data?.ftimeFirstFailure !== undefined) view.setBigUint64(16, data.ftimeFirstFailure === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeFirstFailure))), true);
  // 0x18: u32
  if (data?.cNumFailures !== undefined) view.setUint32(24, Number(data.cNumFailures), true);
  // 0x1c: u32
  if (data?.dwLastResult !== undefined) view.setUint32(28, Number(data.dwLastResult), true);
  return buf;
}

export class DS_REPL_KCC_DSA_FAILUREW_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get oszDsaDN(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get uuidDsaObjGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ftimeFirstFailure(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cNumFailures(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwLastResult(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set oszDsaDN(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set uuidDsaObjGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ftimeFirstFailure(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cNumFailures(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwLastResult(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_KCC_DSA_FAILURESW (size: 16)
 */
export interface DS_REPL_KCC_DSA_FAILURESW {
  /** u32 */
  cNumEntries: number;
  /** u32 */
  dwReserved: number;
  /** array */
  rgDsaFailure: Deno.PointerValue;
}

export const sizeofDS_REPL_KCC_DSA_FAILURESW = 16;

export function allocDS_REPL_KCC_DSA_FAILURESW(data?: Partial<DS_REPL_KCC_DSA_FAILURESW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_KCC_DSA_FAILURESW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cNumEntries !== undefined) view.setUint32(0, Number(data.cNumEntries), true);
  // 0x04: u32
  if (data?.dwReserved !== undefined) view.setUint32(4, Number(data.dwReserved), true);
  // 0x08: pointer
  if (data?.rgDsaFailure !== undefined) view.setBigUint64(8, data.rgDsaFailure === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgDsaFailure))), true);
  return buf;
}

export class DS_REPL_KCC_DSA_FAILURESWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwReserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgDsaFailure(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwReserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgDsaFailure(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_OPW (size: 64)
 */
export interface DS_REPL_OPW {
  /** Windows.Win32.Foundation.FILETIME */
  ftimeEnqueued: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulSerialNumber: number;
  /** u32 */
  ulPriority: number;
  /** Windows.Win32.Networking.ActiveDirectory.DS_REPL_OP_TYPE */
  OpType: DS_REPL_OP_TYPE;
  /** u32 */
  ulOptions: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszNamingContext: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszDsaDN: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszDsaAddress: string | null | Uint8Array | Uint16Array;
  /** System.Guid */
  uuidNamingContextObjGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidDsaObjGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofDS_REPL_OPW = 64;

export function allocDS_REPL_OPW(data?: Partial<DS_REPL_OPW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_OPW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ftimeEnqueued !== undefined) view.setBigUint64(0, data.ftimeEnqueued === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeEnqueued))), true);
  // 0x08: u32
  if (data?.ulSerialNumber !== undefined) view.setUint32(8, Number(data.ulSerialNumber), true);
  // 0x0c: u32
  if (data?.ulPriority !== undefined) view.setUint32(12, Number(data.ulPriority), true);
  // 0x10: i32
  if (data?.OpType !== undefined) view.setInt32(16, Number(data.OpType), true);
  // 0x14: u32
  if (data?.ulOptions !== undefined) view.setUint32(20, Number(data.ulOptions), true);
  // 0x18: buffer
  if (data?.pszNamingContext !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszNamingContext);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pszDsaDN !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pszDsaDN);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pszDsaAddress !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszDsaAddress);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: pointer
  if (data?.uuidNamingContextObjGuid !== undefined) view.setBigUint64(48, data.uuidNamingContextObjGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidNamingContextObjGuid))), true);
  // 0x38: pointer
  if (data?.uuidDsaObjGuid !== undefined) view.setBigUint64(56, data.uuidDsaObjGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidDsaObjGuid))), true);
  return buf;
}

export class DS_REPL_OPWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ftimeEnqueued(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulSerialNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulPriority(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get OpType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get ulOptions(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: buffer
  get pszNamingContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pszDsaDN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pszDsaAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get uuidNamingContextObjGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get uuidDsaObjGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ftimeEnqueued(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulSerialNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulPriority(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set OpType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set ulOptions(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: buffer
  set pszNamingContext(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pszDsaDN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pszDsaAddress(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: pointer
  set uuidNamingContextObjGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set uuidDsaObjGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_OPW_BLOB (size: 56)
 */
export interface DS_REPL_OPW_BLOB {
  /** Windows.Win32.Foundation.FILETIME */
  ftimeEnqueued: Uint8Array | Deno.PointerValue;
  /** u32 */
  ulSerialNumber: number;
  /** u32 */
  ulPriority: number;
  /** Windows.Win32.Networking.ActiveDirectory.DS_REPL_OP_TYPE */
  OpType: DS_REPL_OP_TYPE;
  /** u32 */
  ulOptions: number;
  /** u32 */
  oszNamingContext: number;
  /** u32 */
  oszDsaDN: number;
  /** u32 */
  oszDsaAddress: number;
  /** System.Guid */
  uuidNamingContextObjGuid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidDsaObjGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofDS_REPL_OPW_BLOB = 56;

export function allocDS_REPL_OPW_BLOB(data?: Partial<DS_REPL_OPW_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_OPW_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ftimeEnqueued !== undefined) view.setBigUint64(0, data.ftimeEnqueued === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeEnqueued))), true);
  // 0x08: u32
  if (data?.ulSerialNumber !== undefined) view.setUint32(8, Number(data.ulSerialNumber), true);
  // 0x0c: u32
  if (data?.ulPriority !== undefined) view.setUint32(12, Number(data.ulPriority), true);
  // 0x10: i32
  if (data?.OpType !== undefined) view.setInt32(16, Number(data.OpType), true);
  // 0x14: u32
  if (data?.ulOptions !== undefined) view.setUint32(20, Number(data.ulOptions), true);
  // 0x18: u32
  if (data?.oszNamingContext !== undefined) view.setUint32(24, Number(data.oszNamingContext), true);
  // 0x1c: u32
  if (data?.oszDsaDN !== undefined) view.setUint32(28, Number(data.oszDsaDN), true);
  // 0x20: u32
  if (data?.oszDsaAddress !== undefined) view.setUint32(32, Number(data.oszDsaAddress), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.uuidNamingContextObjGuid !== undefined) view.setBigUint64(40, data.uuidNamingContextObjGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidNamingContextObjGuid))), true);
  // 0x30: pointer
  if (data?.uuidDsaObjGuid !== undefined) view.setBigUint64(48, data.uuidDsaObjGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidDsaObjGuid))), true);
  return buf;
}

export class DS_REPL_OPW_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ftimeEnqueued(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulSerialNumber(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get ulPriority(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get OpType(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: u32
  get ulOptions(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get oszNamingContext(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get oszDsaDN(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get oszDsaAddress(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get uuidNamingContextObjGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get uuidDsaObjGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ftimeEnqueued(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulSerialNumber(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set ulPriority(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set OpType(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: u32
  set ulOptions(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set oszNamingContext(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set oszDsaDN(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set oszDsaAddress(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set uuidNamingContextObjGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set uuidDsaObjGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_PENDING_OPSW (size: 24)
 */
export interface DS_REPL_PENDING_OPSW {
  /** Windows.Win32.Foundation.FILETIME */
  ftimeCurrentOpStarted: Uint8Array | Deno.PointerValue;
  /** u32 */
  cNumPendingOps: number;
  /** array */
  rgPendingOp: Deno.PointerValue;
}

export const sizeofDS_REPL_PENDING_OPSW = 24;

export function allocDS_REPL_PENDING_OPSW(data?: Partial<DS_REPL_PENDING_OPSW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_PENDING_OPSW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ftimeCurrentOpStarted !== undefined) view.setBigUint64(0, data.ftimeCurrentOpStarted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeCurrentOpStarted))), true);
  // 0x08: u32
  if (data?.cNumPendingOps !== undefined) view.setUint32(8, Number(data.cNumPendingOps), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.rgPendingOp !== undefined) view.setBigUint64(16, data.rgPendingOp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgPendingOp))), true);
  return buf;
}

export class DS_REPL_PENDING_OPSWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ftimeCurrentOpStarted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cNumPendingOps(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get rgPendingOp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ftimeCurrentOpStarted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cNumPendingOps(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set rgPendingOp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_VALUE_META_DATA (size: 88)
 */
export interface DS_REPL_VALUE_META_DATA {
  /** Windows.Win32.Foundation.PWSTR */
  pszAttributeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszObjectDn: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeDeleted: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeCreated: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastOriginatingChange: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidLastOriginatingDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnOriginatingChange: Deno.PointerValue;
  /** i64 */
  usnLocalChange: Deno.PointerValue;
}

export const sizeofDS_REPL_VALUE_META_DATA = 88;

export function allocDS_REPL_VALUE_META_DATA(data?: Partial<DS_REPL_VALUE_META_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_VALUE_META_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszAttributeName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszAttributeName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszObjectDn !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszObjectDn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbData !== undefined) view.setBigUint64(24, data.pbData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbData))), true);
  // 0x20: pointer
  if (data?.ftimeDeleted !== undefined) view.setBigUint64(32, data.ftimeDeleted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeDeleted))), true);
  // 0x28: pointer
  if (data?.ftimeCreated !== undefined) view.setBigUint64(40, data.ftimeCreated === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeCreated))), true);
  // 0x30: u32
  if (data?.dwVersion !== undefined) view.setUint32(48, Number(data.dwVersion), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ftimeLastOriginatingChange !== undefined) view.setBigUint64(56, data.ftimeLastOriginatingChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastOriginatingChange))), true);
  // 0x40: pointer
  if (data?.uuidLastOriginatingDsaInvocationID !== undefined) view.setBigUint64(64, data.uuidLastOriginatingDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidLastOriginatingDsaInvocationID))), true);
  // 0x48: i64
  if (data?.usnOriginatingChange !== undefined) view.setBigInt64(72, BigInt(data.usnOriginatingChange), true);
  // 0x50: i64
  if (data?.usnLocalChange !== undefined) view.setBigInt64(80, BigInt(data.usnLocalChange), true);
  return buf;
}

export class DS_REPL_VALUE_META_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszAttributeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszObjectDn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pbData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ftimeDeleted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ftimeCreated(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwVersion(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ftimeLastOriginatingChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get uuidLastOriginatingDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: i64
  get usnOriginatingChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: i64
  get usnLocalChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x00: buffer
  set pszAttributeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszObjectDn(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set cbData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pbData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ftimeDeleted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ftimeCreated(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwVersion(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ftimeLastOriginatingChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set uuidLastOriginatingDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: i64
  set usnOriginatingChange(value: Deno.PointerValue) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: i64
  set usnLocalChange(value: Deno.PointerValue) {
    this.view.setBigInt64(80, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_VALUE_META_DATA_2 (size: 96)
 */
export interface DS_REPL_VALUE_META_DATA_2 {
  /** Windows.Win32.Foundation.PWSTR */
  pszAttributeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszObjectDn: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeDeleted: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeCreated: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastOriginatingChange: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidLastOriginatingDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnOriginatingChange: Deno.PointerValue;
  /** i64 */
  usnLocalChange: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszLastOriginatingDsaDN: string | null | Uint8Array | Uint16Array;
}

export const sizeofDS_REPL_VALUE_META_DATA_2 = 96;

export function allocDS_REPL_VALUE_META_DATA_2(data?: Partial<DS_REPL_VALUE_META_DATA_2>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_VALUE_META_DATA_2);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszAttributeName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszAttributeName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszObjectDn !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszObjectDn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbData !== undefined) view.setBigUint64(24, data.pbData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbData))), true);
  // 0x20: pointer
  if (data?.ftimeDeleted !== undefined) view.setBigUint64(32, data.ftimeDeleted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeDeleted))), true);
  // 0x28: pointer
  if (data?.ftimeCreated !== undefined) view.setBigUint64(40, data.ftimeCreated === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeCreated))), true);
  // 0x30: u32
  if (data?.dwVersion !== undefined) view.setUint32(48, Number(data.dwVersion), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ftimeLastOriginatingChange !== undefined) view.setBigUint64(56, data.ftimeLastOriginatingChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastOriginatingChange))), true);
  // 0x40: pointer
  if (data?.uuidLastOriginatingDsaInvocationID !== undefined) view.setBigUint64(64, data.uuidLastOriginatingDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidLastOriginatingDsaInvocationID))), true);
  // 0x48: i64
  if (data?.usnOriginatingChange !== undefined) view.setBigInt64(72, BigInt(data.usnOriginatingChange), true);
  // 0x50: i64
  if (data?.usnLocalChange !== undefined) view.setBigInt64(80, BigInt(data.usnLocalChange), true);
  // 0x58: buffer
  if (data?.pszLastOriginatingDsaDN !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pszLastOriginatingDsaDN);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  return buf;
}

export class DS_REPL_VALUE_META_DATA_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszAttributeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszObjectDn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pbData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ftimeDeleted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ftimeCreated(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwVersion(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ftimeLastOriginatingChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get uuidLastOriginatingDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: i64
  get usnOriginatingChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: i64
  get usnLocalChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: buffer
  get pszLastOriginatingDsaDN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszAttributeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszObjectDn(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set cbData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pbData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ftimeDeleted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ftimeCreated(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwVersion(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ftimeLastOriginatingChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set uuidLastOriginatingDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: i64
  set usnOriginatingChange(value: Deno.PointerValue) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: i64
  set usnLocalChange(value: Deno.PointerValue) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: buffer
  set pszLastOriginatingDsaDN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_VALUE_META_DATA_EXT (size: 112)
 */
export interface DS_REPL_VALUE_META_DATA_EXT {
  /** Windows.Win32.Foundation.PWSTR */
  pszAttributeName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszObjectDn: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeDeleted: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeCreated: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastOriginatingChange: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidLastOriginatingDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnOriginatingChange: Deno.PointerValue;
  /** i64 */
  usnLocalChange: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszLastOriginatingDsaDN: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwUserIdentifier: number;
  /** u32 */
  dwPriorLinkState: number;
  /** u32 */
  dwCurrentLinkState: number;
}

export const sizeofDS_REPL_VALUE_META_DATA_EXT = 112;

export function allocDS_REPL_VALUE_META_DATA_EXT(data?: Partial<DS_REPL_VALUE_META_DATA_EXT>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_VALUE_META_DATA_EXT);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszAttributeName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszAttributeName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszObjectDn !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszObjectDn);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.cbData !== undefined) view.setUint32(16, Number(data.cbData), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pbData !== undefined) view.setBigUint64(24, data.pbData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbData))), true);
  // 0x20: pointer
  if (data?.ftimeDeleted !== undefined) view.setBigUint64(32, data.ftimeDeleted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeDeleted))), true);
  // 0x28: pointer
  if (data?.ftimeCreated !== undefined) view.setBigUint64(40, data.ftimeCreated === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeCreated))), true);
  // 0x30: u32
  if (data?.dwVersion !== undefined) view.setUint32(48, Number(data.dwVersion), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ftimeLastOriginatingChange !== undefined) view.setBigUint64(56, data.ftimeLastOriginatingChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastOriginatingChange))), true);
  // 0x40: pointer
  if (data?.uuidLastOriginatingDsaInvocationID !== undefined) view.setBigUint64(64, data.uuidLastOriginatingDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidLastOriginatingDsaInvocationID))), true);
  // 0x48: i64
  if (data?.usnOriginatingChange !== undefined) view.setBigInt64(72, BigInt(data.usnOriginatingChange), true);
  // 0x50: i64
  if (data?.usnLocalChange !== undefined) view.setBigInt64(80, BigInt(data.usnLocalChange), true);
  // 0x58: buffer
  if (data?.pszLastOriginatingDsaDN !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pszLastOriginatingDsaDN);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: u32
  if (data?.dwUserIdentifier !== undefined) view.setUint32(96, Number(data.dwUserIdentifier), true);
  // 0x64: u32
  if (data?.dwPriorLinkState !== undefined) view.setUint32(100, Number(data.dwPriorLinkState), true);
  // 0x68: u32
  if (data?.dwCurrentLinkState !== undefined) view.setUint32(104, Number(data.dwCurrentLinkState), true);
  // 0x6c: pad4
  return buf;
}

export class DS_REPL_VALUE_META_DATA_EXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszAttributeName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszObjectDn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cbData(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pbData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ftimeDeleted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ftimeCreated(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwVersion(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ftimeLastOriginatingChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get uuidLastOriginatingDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: i64
  get usnOriginatingChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: i64
  get usnLocalChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: buffer
  get pszLastOriginatingDsaDN(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get dwUserIdentifier(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: u32
  get dwPriorLinkState(): number {
    return this.view.getUint32(100, true);
  }

  // 0x68: u32
  get dwCurrentLinkState(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x00: buffer
  set pszAttributeName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszObjectDn(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set cbData(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pbData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ftimeDeleted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ftimeCreated(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwVersion(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ftimeLastOriginatingChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set uuidLastOriginatingDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: i64
  set usnOriginatingChange(value: Deno.PointerValue) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: i64
  set usnLocalChange(value: Deno.PointerValue) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: buffer
  set pszLastOriginatingDsaDN(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: u32
  set dwUserIdentifier(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: u32
  set dwPriorLinkState(value: number) {
    this.view.setUint32(100, value, true);
  }

  // 0x68: u32
  set dwCurrentLinkState(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_VALUE_META_DATA_BLOB (size: 80)
 */
export interface DS_REPL_VALUE_META_DATA_BLOB {
  /** u32 */
  oszAttributeName: number;
  /** u32 */
  oszObjectDn: number;
  /** u32 */
  cbData: number;
  /** u32 */
  obData: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeDeleted: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeCreated: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastOriginatingChange: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidLastOriginatingDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnOriginatingChange: Deno.PointerValue;
  /** i64 */
  usnLocalChange: Deno.PointerValue;
  /** u32 */
  oszLastOriginatingDsaDN: number;
}

export const sizeofDS_REPL_VALUE_META_DATA_BLOB = 80;

export function allocDS_REPL_VALUE_META_DATA_BLOB(data?: Partial<DS_REPL_VALUE_META_DATA_BLOB>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_VALUE_META_DATA_BLOB);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.oszAttributeName !== undefined) view.setUint32(0, Number(data.oszAttributeName), true);
  // 0x04: u32
  if (data?.oszObjectDn !== undefined) view.setUint32(4, Number(data.oszObjectDn), true);
  // 0x08: u32
  if (data?.cbData !== undefined) view.setUint32(8, Number(data.cbData), true);
  // 0x0c: u32
  if (data?.obData !== undefined) view.setUint32(12, Number(data.obData), true);
  // 0x10: pointer
  if (data?.ftimeDeleted !== undefined) view.setBigUint64(16, data.ftimeDeleted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeDeleted))), true);
  // 0x18: pointer
  if (data?.ftimeCreated !== undefined) view.setBigUint64(24, data.ftimeCreated === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeCreated))), true);
  // 0x20: u32
  if (data?.dwVersion !== undefined) view.setUint32(32, Number(data.dwVersion), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ftimeLastOriginatingChange !== undefined) view.setBigUint64(40, data.ftimeLastOriginatingChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastOriginatingChange))), true);
  // 0x30: pointer
  if (data?.uuidLastOriginatingDsaInvocationID !== undefined) view.setBigUint64(48, data.uuidLastOriginatingDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidLastOriginatingDsaInvocationID))), true);
  // 0x38: i64
  if (data?.usnOriginatingChange !== undefined) view.setBigInt64(56, BigInt(data.usnOriginatingChange), true);
  // 0x40: i64
  if (data?.usnLocalChange !== undefined) view.setBigInt64(64, BigInt(data.usnLocalChange), true);
  // 0x48: u32
  if (data?.oszLastOriginatingDsaDN !== undefined) view.setUint32(72, Number(data.oszLastOriginatingDsaDN), true);
  // 0x4c: pad4
  return buf;
}

export class DS_REPL_VALUE_META_DATA_BLOBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get oszAttributeName(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get oszObjectDn(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get obData(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ftimeDeleted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ftimeCreated(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwVersion(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ftimeLastOriginatingChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get uuidLastOriginatingDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i64
  get usnOriginatingChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: i64
  get usnLocalChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: u32
  get oszLastOriginatingDsaDN(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x00: u32
  set oszAttributeName(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set oszObjectDn(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set obData(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ftimeDeleted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ftimeCreated(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwVersion(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ftimeLastOriginatingChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set uuidLastOriginatingDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: i64
  set usnOriginatingChange(value: Deno.PointerValue) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: i64
  set usnLocalChange(value: Deno.PointerValue) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: u32
  set oszLastOriginatingDsaDN(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_VALUE_META_DATA_BLOB_EXT (size: 88)
 */
export interface DS_REPL_VALUE_META_DATA_BLOB_EXT {
  /** u32 */
  oszAttributeName: number;
  /** u32 */
  oszObjectDn: number;
  /** u32 */
  cbData: number;
  /** u32 */
  obData: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeDeleted: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeCreated: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwVersion: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeLastOriginatingChange: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  uuidLastOriginatingDsaInvocationID: Uint8Array | Deno.PointerValue;
  /** i64 */
  usnOriginatingChange: Deno.PointerValue;
  /** i64 */
  usnLocalChange: Deno.PointerValue;
  /** u32 */
  oszLastOriginatingDsaDN: number;
  /** u32 */
  dwUserIdentifier: number;
  /** u32 */
  dwPriorLinkState: number;
  /** u32 */
  dwCurrentLinkState: number;
}

export const sizeofDS_REPL_VALUE_META_DATA_BLOB_EXT = 88;

export function allocDS_REPL_VALUE_META_DATA_BLOB_EXT(data?: Partial<DS_REPL_VALUE_META_DATA_BLOB_EXT>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_VALUE_META_DATA_BLOB_EXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.oszAttributeName !== undefined) view.setUint32(0, Number(data.oszAttributeName), true);
  // 0x04: u32
  if (data?.oszObjectDn !== undefined) view.setUint32(4, Number(data.oszObjectDn), true);
  // 0x08: u32
  if (data?.cbData !== undefined) view.setUint32(8, Number(data.cbData), true);
  // 0x0c: u32
  if (data?.obData !== undefined) view.setUint32(12, Number(data.obData), true);
  // 0x10: pointer
  if (data?.ftimeDeleted !== undefined) view.setBigUint64(16, data.ftimeDeleted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeDeleted))), true);
  // 0x18: pointer
  if (data?.ftimeCreated !== undefined) view.setBigUint64(24, data.ftimeCreated === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeCreated))), true);
  // 0x20: u32
  if (data?.dwVersion !== undefined) view.setUint32(32, Number(data.dwVersion), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ftimeLastOriginatingChange !== undefined) view.setBigUint64(40, data.ftimeLastOriginatingChange === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeLastOriginatingChange))), true);
  // 0x30: pointer
  if (data?.uuidLastOriginatingDsaInvocationID !== undefined) view.setBigUint64(48, data.uuidLastOriginatingDsaInvocationID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uuidLastOriginatingDsaInvocationID))), true);
  // 0x38: i64
  if (data?.usnOriginatingChange !== undefined) view.setBigInt64(56, BigInt(data.usnOriginatingChange), true);
  // 0x40: i64
  if (data?.usnLocalChange !== undefined) view.setBigInt64(64, BigInt(data.usnLocalChange), true);
  // 0x48: u32
  if (data?.oszLastOriginatingDsaDN !== undefined) view.setUint32(72, Number(data.oszLastOriginatingDsaDN), true);
  // 0x4c: u32
  if (data?.dwUserIdentifier !== undefined) view.setUint32(76, Number(data.dwUserIdentifier), true);
  // 0x50: u32
  if (data?.dwPriorLinkState !== undefined) view.setUint32(80, Number(data.dwPriorLinkState), true);
  // 0x54: u32
  if (data?.dwCurrentLinkState !== undefined) view.setUint32(84, Number(data.dwCurrentLinkState), true);
  return buf;
}

export class DS_REPL_VALUE_META_DATA_BLOB_EXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get oszAttributeName(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get oszObjectDn(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cbData(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get obData(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ftimeDeleted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ftimeCreated(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwVersion(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ftimeLastOriginatingChange(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get uuidLastOriginatingDsaInvocationID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: i64
  get usnOriginatingChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: i64
  get usnLocalChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: u32
  get oszLastOriginatingDsaDN(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwUserIdentifier(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwPriorLinkState(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwCurrentLinkState(): number {
    return this.view.getUint32(84, true);
  }

  // 0x00: u32
  set oszAttributeName(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set oszObjectDn(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cbData(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set obData(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ftimeDeleted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ftimeCreated(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwVersion(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ftimeLastOriginatingChange(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set uuidLastOriginatingDsaInvocationID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: i64
  set usnOriginatingChange(value: Deno.PointerValue) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: i64
  set usnLocalChange(value: Deno.PointerValue) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: u32
  set oszLastOriginatingDsaDN(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwUserIdentifier(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwPriorLinkState(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwCurrentLinkState(value: number) {
    this.view.setUint32(84, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_ATTR_VALUE_META_DATA (size: 16)
 */
export interface DS_REPL_ATTR_VALUE_META_DATA {
  /** u32 */
  cNumEntries: number;
  /** u32 */
  dwEnumerationContext: number;
  /** array */
  rgMetaData: Deno.PointerValue;
}

export const sizeofDS_REPL_ATTR_VALUE_META_DATA = 16;

export function allocDS_REPL_ATTR_VALUE_META_DATA(data?: Partial<DS_REPL_ATTR_VALUE_META_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_ATTR_VALUE_META_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cNumEntries !== undefined) view.setUint32(0, Number(data.cNumEntries), true);
  // 0x04: u32
  if (data?.dwEnumerationContext !== undefined) view.setUint32(4, Number(data.dwEnumerationContext), true);
  // 0x08: pointer
  if (data?.rgMetaData !== undefined) view.setBigUint64(8, data.rgMetaData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgMetaData))), true);
  return buf;
}

export class DS_REPL_ATTR_VALUE_META_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwEnumerationContext(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgMetaData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwEnumerationContext(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgMetaData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_ATTR_VALUE_META_DATA_2 (size: 16)
 */
export interface DS_REPL_ATTR_VALUE_META_DATA_2 {
  /** u32 */
  cNumEntries: number;
  /** u32 */
  dwEnumerationContext: number;
  /** array */
  rgMetaData: Deno.PointerValue;
}

export const sizeofDS_REPL_ATTR_VALUE_META_DATA_2 = 16;

export function allocDS_REPL_ATTR_VALUE_META_DATA_2(data?: Partial<DS_REPL_ATTR_VALUE_META_DATA_2>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_ATTR_VALUE_META_DATA_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cNumEntries !== undefined) view.setUint32(0, Number(data.cNumEntries), true);
  // 0x04: u32
  if (data?.dwEnumerationContext !== undefined) view.setUint32(4, Number(data.dwEnumerationContext), true);
  // 0x08: pointer
  if (data?.rgMetaData !== undefined) view.setBigUint64(8, data.rgMetaData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgMetaData))), true);
  return buf;
}

export class DS_REPL_ATTR_VALUE_META_DATA_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwEnumerationContext(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgMetaData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwEnumerationContext(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgMetaData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_ATTR_VALUE_META_DATA_EXT (size: 16)
 */
export interface DS_REPL_ATTR_VALUE_META_DATA_EXT {
  /** u32 */
  cNumEntries: number;
  /** u32 */
  dwEnumerationContext: number;
  /** array */
  rgMetaData: Deno.PointerValue;
}

export const sizeofDS_REPL_ATTR_VALUE_META_DATA_EXT = 16;

export function allocDS_REPL_ATTR_VALUE_META_DATA_EXT(data?: Partial<DS_REPL_ATTR_VALUE_META_DATA_EXT>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_ATTR_VALUE_META_DATA_EXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cNumEntries !== undefined) view.setUint32(0, Number(data.cNumEntries), true);
  // 0x04: u32
  if (data?.dwEnumerationContext !== undefined) view.setUint32(4, Number(data.dwEnumerationContext), true);
  // 0x08: pointer
  if (data?.rgMetaData !== undefined) view.setBigUint64(8, data.rgMetaData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgMetaData))), true);
  return buf;
}

export class DS_REPL_ATTR_VALUE_META_DATA_EXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cNumEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwEnumerationContext(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get rgMetaData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cNumEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwEnumerationContext(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set rgMetaData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_REPL_QUEUE_STATISTICSW (size: 56)
 */
export interface DS_REPL_QUEUE_STATISTICSW {
  /** Windows.Win32.Foundation.FILETIME */
  ftimeCurrentOpStarted: Uint8Array | Deno.PointerValue;
  /** u32 */
  cNumPendingOps: number;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeOldestSync: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeOldestAdd: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeOldestMod: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeOldestDel: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftimeOldestUpdRefs: Uint8Array | Deno.PointerValue;
}

export const sizeofDS_REPL_QUEUE_STATISTICSW = 56;

export function allocDS_REPL_QUEUE_STATISTICSW(data?: Partial<DS_REPL_QUEUE_STATISTICSW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_REPL_QUEUE_STATISTICSW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ftimeCurrentOpStarted !== undefined) view.setBigUint64(0, data.ftimeCurrentOpStarted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeCurrentOpStarted))), true);
  // 0x08: u32
  if (data?.cNumPendingOps !== undefined) view.setUint32(8, Number(data.cNumPendingOps), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ftimeOldestSync !== undefined) view.setBigUint64(16, data.ftimeOldestSync === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeOldestSync))), true);
  // 0x18: pointer
  if (data?.ftimeOldestAdd !== undefined) view.setBigUint64(24, data.ftimeOldestAdd === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeOldestAdd))), true);
  // 0x20: pointer
  if (data?.ftimeOldestMod !== undefined) view.setBigUint64(32, data.ftimeOldestMod === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeOldestMod))), true);
  // 0x28: pointer
  if (data?.ftimeOldestDel !== undefined) view.setBigUint64(40, data.ftimeOldestDel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeOldestDel))), true);
  // 0x30: pointer
  if (data?.ftimeOldestUpdRefs !== undefined) view.setBigUint64(48, data.ftimeOldestUpdRefs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftimeOldestUpdRefs))), true);
  return buf;
}

export class DS_REPL_QUEUE_STATISTICSWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ftimeCurrentOpStarted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cNumPendingOps(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ftimeOldestSync(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ftimeOldestAdd(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ftimeOldestMod(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ftimeOldestDel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ftimeOldestUpdRefs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ftimeCurrentOpStarted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set cNumPendingOps(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ftimeOldestSync(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ftimeOldestAdd(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ftimeOldestMod(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ftimeOldestDel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ftimeOldestUpdRefs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSROLE_PRIMARY_DOMAIN_INFO_BASIC (size: 40)
 */
export interface DSROLE_PRIMARY_DOMAIN_INFO_BASIC {
  /** Windows.Win32.Networking.ActiveDirectory.DSROLE_MACHINE_ROLE */
  MachineRole: DSROLE_MACHINE_ROLE;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  DomainNameFlat: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DomainNameDns: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DomainForestName: string | null | Uint8Array | Uint16Array;
  /** System.Guid */
  DomainGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofDSROLE_PRIMARY_DOMAIN_INFO_BASIC = 40;

export function allocDSROLE_PRIMARY_DOMAIN_INFO_BASIC(data?: Partial<DSROLE_PRIMARY_DOMAIN_INFO_BASIC>): Uint8Array {
  const buf = new Uint8Array(sizeofDSROLE_PRIMARY_DOMAIN_INFO_BASIC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MachineRole !== undefined) view.setInt32(0, Number(data.MachineRole), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: buffer
  if (data?.DomainNameFlat !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.DomainNameFlat);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.DomainNameDns !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.DomainNameDns);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.DomainForestName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.DomainForestName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.DomainGuid !== undefined) view.setBigUint64(32, data.DomainGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainGuid))), true);
  return buf;
}

export class DSROLE_PRIMARY_DOMAIN_INFO_BASICView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get MachineRole(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get DomainNameFlat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get DomainNameDns(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get DomainForestName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DomainGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set MachineRole(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set DomainNameFlat(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set DomainNameDns(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set DomainForestName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set DomainGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSROLE_UPGRADE_STATUS_INFO (size: 8)
 */
export interface DSROLE_UPGRADE_STATUS_INFO {
  /** u32 */
  OperationState: number;
  /** Windows.Win32.Networking.ActiveDirectory.DSROLE_SERVER_STATE */
  PreviousServerState: DSROLE_SERVER_STATE;
}

export const sizeofDSROLE_UPGRADE_STATUS_INFO = 8;

export function allocDSROLE_UPGRADE_STATUS_INFO(data?: Partial<DSROLE_UPGRADE_STATUS_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDSROLE_UPGRADE_STATUS_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.OperationState !== undefined) view.setUint32(0, Number(data.OperationState), true);
  // 0x04: i32
  if (data?.PreviousServerState !== undefined) view.setInt32(4, Number(data.PreviousServerState), true);
  return buf;
}

export class DSROLE_UPGRADE_STATUS_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get OperationState(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get PreviousServerState(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set OperationState(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set PreviousServerState(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DSROLE_OPERATION_STATE_INFO (size: 8)
 */
export interface DSROLE_OPERATION_STATE_INFO {
  /** Windows.Win32.Networking.ActiveDirectory.DSROLE_OPERATION_STATE */
  OperationState: DSROLE_OPERATION_STATE;
}

export const sizeofDSROLE_OPERATION_STATE_INFO = 8;

export function allocDSROLE_OPERATION_STATE_INFO(data?: Partial<DSROLE_OPERATION_STATE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDSROLE_OPERATION_STATE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.OperationState !== undefined) view.setInt32(0, Number(data.OperationState), true);
  // 0x04: pad4
  return buf;
}

export class DSROLE_OPERATION_STATE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get OperationState(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set OperationState(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DOMAIN_CONTROLLER_INFOA (size: 72)
 */
export interface DOMAIN_CONTROLLER_INFOA {
  /** Windows.Win32.Foundation.PSTR */
  DomainControllerName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  DomainControllerAddress: string | null | Uint8Array;
  /** u32 */
  DomainControllerAddressType: number;
  /** System.Guid */
  DomainGuid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  DomainName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  DnsForestName: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.PSTR */
  DcSiteName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  ClientSiteName: string | null | Uint8Array;
}

export const sizeofDOMAIN_CONTROLLER_INFOA = 72;

export function allocDOMAIN_CONTROLLER_INFOA(data?: Partial<DOMAIN_CONTROLLER_INFOA>): Uint8Array {
  const buf = new Uint8Array(sizeofDOMAIN_CONTROLLER_INFOA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.DomainControllerName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.DomainControllerName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.DomainControllerAddress !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.DomainControllerAddress);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.DomainControllerAddressType !== undefined) view.setUint32(16, Number(data.DomainControllerAddressType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.DomainGuid !== undefined) view.setBigUint64(24, data.DomainGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainGuid))), true);
  // 0x20: buffer
  if (data?.DomainName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.DomainName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.DnsForestName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.DnsForestName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.Flags !== undefined) view.setUint32(48, Number(data.Flags), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.DcSiteName !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.DcSiteName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.ClientSiteName !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.ClientSiteName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  return buf;
}

export class DOMAIN_CONTROLLER_INFOAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get DomainControllerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get DomainControllerAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get DomainControllerAddressType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get DomainGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get DnsForestName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get Flags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: buffer
  get DcSiteName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get ClientSiteName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set DomainControllerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set DomainControllerAddress(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set DomainControllerAddressType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set DomainGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set DnsForestName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set Flags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: buffer
  set DcSiteName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set ClientSiteName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DOMAIN_CONTROLLER_INFOW (size: 72)
 */
export interface DOMAIN_CONTROLLER_INFOW {
  /** Windows.Win32.Foundation.PWSTR */
  DomainControllerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DomainControllerAddress: string | null | Uint8Array | Uint16Array;
  /** u32 */
  DomainControllerAddressType: number;
  /** System.Guid */
  DomainGuid: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  DomainName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DnsForestName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  DcSiteName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClientSiteName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDOMAIN_CONTROLLER_INFOW = 72;

export function allocDOMAIN_CONTROLLER_INFOW(data?: Partial<DOMAIN_CONTROLLER_INFOW>): Uint8Array {
  const buf = new Uint8Array(sizeofDOMAIN_CONTROLLER_INFOW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.DomainControllerName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.DomainControllerName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.DomainControllerAddress !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.DomainControllerAddress);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.DomainControllerAddressType !== undefined) view.setUint32(16, Number(data.DomainControllerAddressType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.DomainGuid !== undefined) view.setBigUint64(24, data.DomainGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainGuid))), true);
  // 0x20: buffer
  if (data?.DomainName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.DomainName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.DnsForestName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.DnsForestName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.Flags !== undefined) view.setUint32(48, Number(data.Flags), true);
  // 0x34: pad4
  // 0x38: buffer
  if (data?.DcSiteName !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.DcSiteName);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.ClientSiteName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.ClientSiteName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  return buf;
}

export class DOMAIN_CONTROLLER_INFOWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get DomainControllerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get DomainControllerAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get DomainControllerAddressType(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get DomainGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get DomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get DnsForestName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get Flags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: buffer
  get DcSiteName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get ClientSiteName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set DomainControllerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set DomainControllerAddress(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set DomainControllerAddressType(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set DomainGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set DomainName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set DnsForestName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set Flags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: buffer
  set DcSiteName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set ClientSiteName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }
}

export type PSID = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_DOMAIN_TRUSTSW (size: 48)
 */
export interface DS_DOMAIN_TRUSTSW {
  /** Windows.Win32.Foundation.PWSTR */
  NetbiosDomainName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  DnsDomainName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Flags: number;
  /** u32 */
  ParentIndex: number;
  /** u32 */
  TrustType: number;
  /** u32 */
  TrustAttributes: number;
  /** Windows.Win32.Foundation.PSID */
  DomainSid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  DomainGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofDS_DOMAIN_TRUSTSW = 48;

export function allocDS_DOMAIN_TRUSTSW(data?: Partial<DS_DOMAIN_TRUSTSW>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_DOMAIN_TRUSTSW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.NetbiosDomainName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.NetbiosDomainName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.DnsDomainName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.DnsDomainName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ParentIndex !== undefined) view.setUint32(20, Number(data.ParentIndex), true);
  // 0x18: u32
  if (data?.TrustType !== undefined) view.setUint32(24, Number(data.TrustType), true);
  // 0x1c: u32
  if (data?.TrustAttributes !== undefined) view.setUint32(28, Number(data.TrustAttributes), true);
  // 0x20: pointer
  if (data?.DomainSid !== undefined) view.setBigUint64(32, data.DomainSid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainSid))), true);
  // 0x28: pointer
  if (data?.DomainGuid !== undefined) view.setBigUint64(40, data.DomainGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainGuid))), true);
  return buf;
}

export class DS_DOMAIN_TRUSTSWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get NetbiosDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get DnsDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ParentIndex(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get TrustType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get TrustAttributes(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get DomainSid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DomainGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set NetbiosDomainName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ParentIndex(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set TrustType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set TrustAttributes(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set DomainSid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DomainGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Networking.ActiveDirectory.DS_DOMAIN_TRUSTSA (size: 48)
 */
export interface DS_DOMAIN_TRUSTSA {
  /** Windows.Win32.Foundation.PSTR */
  NetbiosDomainName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  DnsDomainName: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  ParentIndex: number;
  /** u32 */
  TrustType: number;
  /** u32 */
  TrustAttributes: number;
  /** Windows.Win32.Foundation.PSID */
  DomainSid: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  DomainGuid: Uint8Array | Deno.PointerValue;
}

export const sizeofDS_DOMAIN_TRUSTSA = 48;

export function allocDS_DOMAIN_TRUSTSA(data?: Partial<DS_DOMAIN_TRUSTSA>): Uint8Array {
  const buf = new Uint8Array(sizeofDS_DOMAIN_TRUSTSA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.NetbiosDomainName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.NetbiosDomainName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.DnsDomainName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.DnsDomainName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ParentIndex !== undefined) view.setUint32(20, Number(data.ParentIndex), true);
  // 0x18: u32
  if (data?.TrustType !== undefined) view.setUint32(24, Number(data.TrustType), true);
  // 0x1c: u32
  if (data?.TrustAttributes !== undefined) view.setUint32(28, Number(data.TrustAttributes), true);
  // 0x20: pointer
  if (data?.DomainSid !== undefined) view.setBigUint64(32, data.DomainSid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainSid))), true);
  // 0x28: pointer
  if (data?.DomainGuid !== undefined) view.setBigUint64(40, data.DomainGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DomainGuid))), true);
  return buf;
}

export class DS_DOMAIN_TRUSTSAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get NetbiosDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get DnsDomainName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Flags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get ParentIndex(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get TrustType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get TrustAttributes(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get DomainSid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DomainGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set NetbiosDomainName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set DnsDomainName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set Flags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set ParentIndex(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set TrustType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set TrustAttributes(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set DomainSid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DomainGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type GetDcContextHandle = Deno.PointerValue;

export type ADS_SEARCH_HANDLE = Deno.PointerValue;

export type PSECURITY_DESCRIPTOR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.System.Com.VARIANT (size: 8)
 */
export interface VARIANT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofVARIANT = 8;

export function allocVARIANT(data?: Partial<VARIANT>): Uint8Array {
  const buf = new Uint8Array(sizeofVARIANT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class VARIANTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

// Native Libraries

try {
  var libACTIVEDS_dll = Deno.dlopen("ACTIVEDS.dll", {
    ADsGetObject: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    ADsBuildEnumerator: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    ADsFreeEnumerator: {
      parameters: ["pointer"],
      result: "pointer",
    },
    ADsEnumerateNext: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    ADsBuildVarArrayStr: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ADsBuildVarArrayInt: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ADsOpenObject: {
      parameters: ["buffer", "buffer", "buffer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    ADsGetLastError: {
      parameters: ["pointer", "buffer", "u32", "buffer", "u32"],
      result: "pointer",
    },
    ADsSetLastError: {
      parameters: ["u32", "buffer", "buffer"],
      result: "void",
    },
    AllocADsMem: {
      parameters: ["u32"],
      result: "pointer",
    },
    FreeADsMem: {
      parameters: ["pointer"],
      result: "i32",
    },
    ReallocADsMem: {
      parameters: ["pointer", "u32", "u32"],
      result: "pointer",
    },
    AllocADsStr: {
      parameters: ["buffer"],
      result: "buffer",
    },
    FreeADsStr: {
      parameters: ["buffer"],
      result: "i32",
    },
    ReallocADsStr: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    ADsEncodeBinaryData: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    ADsDecodeBinaryData: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "pointer",
    },
    PropVariantToAdsType: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "pointer",
    },
    AdsTypeToPropVariant: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    AdsFreeAdsValues: {
      parameters: ["pointer", "u32"],
      result: "void",
    },
    BinarySDToSecurityDescriptor: {
      parameters: ["pointer", "pointer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    SecurityDescriptorToBinarySD: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libdsuiext_dll = Deno.dlopen("dsuiext.dll", {
    DsBrowseForContainerW: {
      parameters: ["pointer"],
      result: "i32",
    },
    DsBrowseForContainerA: {
      parameters: ["pointer"],
      result: "i32",
    },
    DsGetIcon: {
      parameters: ["u32", "buffer", "i32", "i32"],
      result: "pointer",
    },
    DsGetFriendlyClassName: {
      parameters: ["buffer", "buffer", "u32"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libdsprop_dll = Deno.dlopen("dsprop.dll", {
    ADsPropCreateNotifyObj: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "pointer",
    },
    ADsPropGetInitInfo: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ADsPropSetHwndWithTitle: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    ADsPropSetHwnd: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ADsPropCheckIfWritable: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    ADsPropSendErrorMessage: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ADsPropShowErrorDialog: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libDSPARSE_dll = Deno.dlopen("DSPARSE.dll", {
    DsMakeSpnW: {
      parameters: ["buffer", "buffer", "buffer", "u16", "buffer", "pointer", "buffer"],
      result: "u32",
    },
    DsMakeSpnA: {
      parameters: ["buffer", "buffer", "buffer", "u16", "buffer", "pointer", "buffer"],
      result: "u32",
    },
    DsCrackSpnA: {
      parameters: ["buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    DsCrackSpnW: {
      parameters: ["buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    DsQuoteRdnValueW: {
      parameters: ["u32", "buffer", "pointer", "buffer"],
      result: "u32",
    },
    DsQuoteRdnValueA: {
      parameters: ["u32", "buffer", "pointer", "buffer"],
      result: "u32",
    },
    DsUnquoteRdnValueW: {
      parameters: ["u32", "buffer", "pointer", "buffer"],
      result: "u32",
    },
    DsUnquoteRdnValueA: {
      parameters: ["u32", "buffer", "pointer", "buffer"],
      result: "u32",
    },
    DsGetRdnW: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    DsCrackUnquotedMangledRdnW: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    DsCrackUnquotedMangledRdnA: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    DsIsMangledRdnValueW: {
      parameters: ["buffer", "u32", "i32"],
      result: "i32",
    },
    DsIsMangledRdnValueA: {
      parameters: ["buffer", "u32", "i32"],
      result: "i32",
    },
    DsIsMangledDnA: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    DsIsMangledDnW: {
      parameters: ["buffer", "i32"],
      result: "i32",
    },
    DsCrackSpn2A: {
      parameters: ["buffer", "u32", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    DsCrackSpn2W: {
      parameters: ["buffer", "u32", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    DsCrackSpn3W: {
      parameters: ["buffer", "u32", "pointer", "buffer", "pointer", "buffer", "pointer", "pointer", "buffer", "pointer", "buffer"],
      result: "u32",
    },
    DsCrackSpn4W: {
      parameters: ["buffer", "u32", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer", "pointer", "buffer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libNTDSAPI_dll = Deno.dlopen("NTDSAPI.dll", {
    DsBindW: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    DsBindA: {
      parameters: ["buffer", "buffer", "pointer"],
      result: "u32",
    },
    DsBindWithCredW: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    DsBindWithCredA: {
      parameters: ["buffer", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    DsBindWithSpnW: {
      parameters: ["buffer", "buffer", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    DsBindWithSpnA: {
      parameters: ["buffer", "buffer", "pointer", "buffer", "pointer"],
      result: "u32",
    },
    DsBindWithSpnExW: {
      parameters: ["buffer", "buffer", "pointer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    DsBindWithSpnExA: {
      parameters: ["buffer", "buffer", "pointer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    DsBindByInstanceW: {
      parameters: ["buffer", "buffer", "pointer", "buffer", "pointer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    DsBindByInstanceA: {
      parameters: ["buffer", "buffer", "pointer", "buffer", "pointer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    DsBindToISTGW: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    DsBindToISTGA: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    DsBindingSetTimeout: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    DsUnBindW: {
      parameters: ["pointer"],
      result: "u32",
    },
    DsUnBindA: {
      parameters: ["pointer"],
      result: "u32",
    },
    DsMakePasswordCredentialsW: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "u32",
    },
    DsMakePasswordCredentialsA: {
      parameters: ["buffer", "buffer", "buffer", "pointer"],
      result: "u32",
    },
    DsFreePasswordCredentials: {
      parameters: ["pointer"],
      result: "void",
    },
    DsCrackNamesW: {
      parameters: ["pointer", "i32", "i32", "i32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    DsCrackNamesA: {
      parameters: ["pointer", "i32", "i32", "i32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    DsFreeNameResultW: {
      parameters: ["pointer"],
      result: "void",
    },
    DsFreeNameResultA: {
      parameters: ["pointer"],
      result: "void",
    },
    DsGetSpnA: {
      parameters: ["i32", "buffer", "buffer", "u16", "u16", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    DsGetSpnW: {
      parameters: ["i32", "buffer", "buffer", "u16", "u16", "pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    DsFreeSpnArrayA: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    DsFreeSpnArrayW: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    DsWriteAccountSpnA: {
      parameters: ["pointer", "i32", "buffer", "u32", "pointer"],
      result: "u32",
    },
    DsWriteAccountSpnW: {
      parameters: ["pointer", "i32", "buffer", "u32", "pointer"],
      result: "u32",
    },
    DsClientMakeSpnForTargetServerW: {
      parameters: ["buffer", "buffer", "pointer", "buffer"],
      result: "u32",
    },
    DsClientMakeSpnForTargetServerA: {
      parameters: ["buffer", "buffer", "pointer", "buffer"],
      result: "u32",
    },
    DsServerRegisterSpnA: {
      parameters: ["i32", "buffer", "buffer"],
      result: "u32",
    },
    DsServerRegisterSpnW: {
      parameters: ["i32", "buffer", "buffer"],
      result: "u32",
    },
    DsReplicaSyncA: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    DsReplicaSyncW: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    DsReplicaAddA: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    DsReplicaAddW: {
      parameters: ["pointer", "buffer", "buffer", "buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    DsReplicaDelA: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    DsReplicaDelW: {
      parameters: ["pointer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    DsReplicaModifyA: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "buffer", "pointer", "u32", "u32", "u32"],
      result: "u32",
    },
    DsReplicaModifyW: {
      parameters: ["pointer", "buffer", "pointer", "buffer", "buffer", "pointer", "u32", "u32", "u32"],
      result: "u32",
    },
    DsReplicaUpdateRefsA: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    DsReplicaUpdateRefsW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    DsReplicaSyncAllA: {
      parameters: ["pointer", "buffer", "u32", "isize", "pointer", "pointer"],
      result: "u32",
    },
    DsReplicaSyncAllW: {
      parameters: ["pointer", "buffer", "u32", "isize", "pointer", "pointer"],
      result: "u32",
    },
    DsRemoveDsServerW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "i32"],
      result: "u32",
    },
    DsRemoveDsServerA: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "i32"],
      result: "u32",
    },
    DsRemoveDsDomainW: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    DsRemoveDsDomainA: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    DsListSitesA: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    DsListSitesW: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    DsListServersInSiteA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    DsListServersInSiteW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    DsListDomainsInSiteA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    DsListDomainsInSiteW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    DsListServersForDomainInSiteA: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "u32",
    },
    DsListServersForDomainInSiteW: {
      parameters: ["pointer", "buffer", "buffer", "pointer"],
      result: "u32",
    },
    DsListInfoForServerA: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    DsListInfoForServerW: {
      parameters: ["pointer", "buffer", "pointer"],
      result: "u32",
    },
    DsListRolesA: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    DsListRolesW: {
      parameters: ["pointer", "pointer"],
      result: "u32",
    },
    DsQuerySitesByCostW: {
      parameters: ["pointer", "buffer", "pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    DsQuerySitesByCostA: {
      parameters: ["pointer", "buffer", "pointer", "u32", "u32", "pointer"],
      result: "u32",
    },
    DsQuerySitesFree: {
      parameters: ["pointer"],
      result: "void",
    },
    DsMapSchemaGuidsA: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    DsFreeSchemaGuidMapA: {
      parameters: ["pointer"],
      result: "void",
    },
    DsMapSchemaGuidsW: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    DsFreeSchemaGuidMapW: {
      parameters: ["pointer"],
      result: "void",
    },
    DsGetDomainControllerInfoA: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    DsGetDomainControllerInfoW: {
      parameters: ["pointer", "buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    DsFreeDomainControllerInfoA: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    DsFreeDomainControllerInfoW: {
      parameters: ["u32", "u32", "pointer"],
      result: "void",
    },
    DsReplicaConsistencyCheck: {
      parameters: ["pointer", "i32", "u32"],
      result: "u32",
    },
    DsReplicaVerifyObjectsW: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    DsReplicaVerifyObjectsA: {
      parameters: ["pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
    DsReplicaGetInfoW: {
      parameters: ["pointer", "i32", "buffer", "pointer", "pointer"],
      result: "u32",
    },
    DsReplicaGetInfo2W: {
      parameters: ["pointer", "i32", "buffer", "pointer", "buffer", "buffer", "u32", "u32", "pointer"],
      result: "u32",
    },
    DsReplicaFreeInfo: {
      parameters: ["i32", "pointer"],
      result: "void",
    },
    DsAddSidHistoryW: {
      parameters: ["pointer", "u32", "buffer", "buffer", "buffer", "pointer", "buffer", "buffer"],
      result: "u32",
    },
    DsAddSidHistoryA: {
      parameters: ["pointer", "u32", "buffer", "buffer", "buffer", "pointer", "buffer", "buffer"],
      result: "u32",
    },
    DsInheritSecurityIdentityW: {
      parameters: ["pointer", "u32", "buffer", "buffer"],
      result: "u32",
    },
    DsInheritSecurityIdentityA: {
      parameters: ["pointer", "u32", "buffer", "buffer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libNETAPI32_dll = Deno.dlopen("NETAPI32.dll", {
    DsRoleGetPrimaryDomainInformation: {
      parameters: ["buffer", "i32", "pointer"],
      result: "u32",
    },
    DsRoleFreeMemory: {
      parameters: ["pointer"],
      result: "void",
    },
    DsGetDcNameA: {
      parameters: ["buffer", "buffer", "pointer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    DsGetDcNameW: {
      parameters: ["buffer", "buffer", "pointer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    DsGetSiteNameA: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    DsGetSiteNameW: {
      parameters: ["buffer", "pointer"],
      result: "u32",
    },
    DsValidateSubnetNameW: {
      parameters: ["buffer"],
      result: "u32",
    },
    DsValidateSubnetNameA: {
      parameters: ["buffer"],
      result: "u32",
    },
    DsAddressToSiteNamesW: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    DsAddressToSiteNamesA: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    DsAddressToSiteNamesExW: {
      parameters: ["buffer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    DsAddressToSiteNamesExA: {
      parameters: ["buffer", "u32", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    DsEnumerateDomainTrustsW: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    DsEnumerateDomainTrustsA: {
      parameters: ["buffer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    DsGetForestTrustInformationW: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    DsMergeForestTrustInformationW: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    DsGetDcSiteCoverageW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
    },
    DsGetDcSiteCoverageA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "u32",
    },
    DsDeregisterDnsHostRecordsW: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "buffer"],
      result: "u32",
    },
    DsDeregisterDnsHostRecordsA: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "buffer"],
      result: "u32",
    },
    DsGetDcOpenW: {
      parameters: ["buffer", "u32", "buffer", "pointer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    DsGetDcOpenA: {
      parameters: ["buffer", "u32", "buffer", "pointer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    DsGetDcNextW: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    DsGetDcNextA: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "u32",
    },
    DsGetDcCloseW: {
      parameters: ["pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function ADsGetObject(
  lpszPathName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppObject: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.ADsGetObject(util.pwstrToFfi(lpszPathName), util.toPointer(riid), util.toPointer(ppObject));
}

export function ADsBuildEnumerator(
  pADsContainer: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.ActiveDirectory.IADsContainer */,
  ppEnumVariant: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.ADsBuildEnumerator(util.toPointer(pADsContainer), util.toPointer(ppEnumVariant));
}

export function ADsFreeEnumerator(
  pEnumVariant: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Ole.IEnumVARIANT */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.ADsFreeEnumerator(util.toPointer(pEnumVariant));
}

export function ADsEnumerateNext(
  pEnumVariant: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Ole.IEnumVARIANT */,
  cElements: number /* u32 */,
  pvar: Deno.PointerValue | Uint8Array /* ptr */,
  pcElementsFetched: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.ADsEnumerateNext(util.toPointer(pEnumVariant), cElements, util.toPointer(pvar), util.toPointer(pcElementsFetched));
}

export function ADsBuildVarArrayStr(
  lppPathNames: Deno.PointerValue | Uint8Array /* ptr */,
  dwPathNames: number /* u32 */,
  pVar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.ADsBuildVarArrayStr(util.toPointer(lppPathNames), dwPathNames, util.toPointer(pVar));
}

export function ADsBuildVarArrayInt(
  lpdwObjectTypes: Deno.PointerValue | Uint8Array /* ptr */,
  dwObjectTypes: number /* u32 */,
  pVar: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.ADsBuildVarArrayInt(util.toPointer(lpdwObjectTypes), dwObjectTypes, util.toPointer(pVar));
}

export function ADsOpenObject(
  lpszPathName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszUserName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  lpszPassword: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwReserved: ADS_AUTHENTICATION_ENUM /* Windows.Win32.Networking.ActiveDirectory.ADS_AUTHENTICATION_ENUM */,
  riid: Deno.PointerValue | Uint8Array /* ptr */,
  ppObject: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.ADsOpenObject(util.pwstrToFfi(lpszPathName), util.pwstrToFfi(lpszUserName), util.pwstrToFfi(lpszPassword), dwReserved, util.toPointer(riid), util.toPointer(ppObject));
}

export function ADsGetLastError(
  lpError: Deno.PointerValue | Uint8Array /* ptr */,
  lpErrorBuf: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwErrorBufLen: number /* u32 */,
  lpNameBuf: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwNameBufLen: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.ADsGetLastError(util.toPointer(lpError), util.pwstrToFfi(lpErrorBuf), dwErrorBufLen, util.pwstrToFfi(lpNameBuf), dwNameBufLen);
}

export function ADsSetLastError(
  dwErr: number /* u32 */,
  pszError: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszProvider: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libACTIVEDS_dll.ADsSetLastError(dwErr, util.pwstrToFfi(pszError), util.pwstrToFfi(pszProvider));
}

export function AllocADsMem(
  cb: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libACTIVEDS_dll.AllocADsMem(cb);
}

export function FreeADsMem(
  pMem: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libACTIVEDS_dll.FreeADsMem(util.toPointer(pMem)));
}

export function ReallocADsMem(
  pOldMem: Deno.PointerValue | Uint8Array /* ptr */,
  cbOld: number /* u32 */,
  cbNew: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libACTIVEDS_dll.ReallocADsMem(util.toPointer(pOldMem), cbOld, cbNew);
}

export function AllocADsStr(
  pStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): string | null /* Windows.Win32.Foundation.PWSTR */ {
  return util.pwstrFromFfi(libACTIVEDS_dll.AllocADsStr(util.pwstrToFfi(pStr)));
}

export function FreeADsStr(
  pStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libACTIVEDS_dll.FreeADsStr(util.pwstrToFfi(pStr)));
}

export function ReallocADsStr(
  ppStr: Deno.PointerValue | Uint8Array /* ptr */,
  pStr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libACTIVEDS_dll.ReallocADsStr(util.toPointer(ppStr), util.pwstrToFfi(pStr)));
}

export function ADsEncodeBinaryData(
  pbSrcData: Deno.PointerValue | Uint8Array /* ptr */,
  dwSrcLen: number /* u32 */,
  ppszDestData: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.ADsEncodeBinaryData(util.toPointer(pbSrcData), dwSrcLen, util.toPointer(ppszDestData));
}

export function ADsDecodeBinaryData(
  szSrcData: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppbDestData: Deno.PointerValue | Uint8Array /* ptr */,
  pdwDestLen: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.ADsDecodeBinaryData(util.pwstrToFfi(szSrcData), util.toPointer(ppbDestData), util.toPointer(pdwDestLen));
}

export function PropVariantToAdsType(
  pVariant: Deno.PointerValue | Uint8Array /* ptr */,
  dwNumVariant: number /* u32 */,
  ppAdsValues: Deno.PointerValue | Uint8Array /* ptr */,
  pdwNumValues: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.PropVariantToAdsType(util.toPointer(pVariant), dwNumVariant, util.toPointer(ppAdsValues), util.toPointer(pdwNumValues));
}

export function AdsTypeToPropVariant(
  pAdsValues: Deno.PointerValue | Uint8Array /* ptr */,
  dwNumValues: number /* u32 */,
  pVariant: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.AdsTypeToPropVariant(util.toPointer(pAdsValues), dwNumValues, util.toPointer(pVariant));
}

export function AdsFreeAdsValues(
  pAdsValues: Deno.PointerValue | Uint8Array /* ptr */,
  dwNumValues: number /* u32 */,
): void /* void */ {
  return libACTIVEDS_dll.AdsFreeAdsValues(util.toPointer(pAdsValues), dwNumValues);
}

export function BinarySDToSecurityDescriptor(
  pSecurityDescriptor: Uint8Array | Deno.PointerValue /* Windows.Win32.Security.PSECURITY_DESCRIPTOR */,
  pVarsec: Deno.PointerValue | Uint8Array /* ptr */,
  pszServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  userName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  passWord: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.BinarySDToSecurityDescriptor(util.toPointer(pSecurityDescriptor), util.toPointer(pVarsec), util.pwstrToFfi(pszServerName), util.pwstrToFfi(userName), util.pwstrToFfi(passWord), dwFlags);
}

export function SecurityDescriptorToBinarySD(
  vVarSecDes: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.VARIANT */,
  ppSecurityDescriptor: Deno.PointerValue | Uint8Array /* ptr */,
  pdwSDLength: Deno.PointerValue | Uint8Array /* ptr */,
  pszServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  userName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  passWord: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libACTIVEDS_dll.SecurityDescriptorToBinarySD(util.toPointer(vVarSecDes), util.toPointer(ppSecurityDescriptor), util.toPointer(pdwSDLength), util.pwstrToFfi(pszServerName), util.pwstrToFfi(userName), util.pwstrToFfi(passWord), dwFlags);
}

export function DsBrowseForContainerW(
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libdsuiext_dll.DsBrowseForContainerW(util.toPointer(pInfo));
}

export function DsBrowseForContainerA(
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libdsuiext_dll.DsBrowseForContainerA(util.toPointer(pInfo));
}

export function DsGetIcon(
  dwFlags: number /* u32 */,
  pszObjectClass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cxImage: number /* i32 */,
  cyImage: number /* i32 */,
): Deno.PointerValue /* Windows.Win32.UI.WindowsAndMessaging.HICON */ {
  return libdsuiext_dll.DsGetIcon(dwFlags, util.pwstrToFfi(pszObjectClass), cxImage, cyImage);
}

export function DsGetFriendlyClassName(
  pszObjectClass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchBuffer: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdsuiext_dll.DsGetFriendlyClassName(util.pwstrToFfi(pszObjectClass), util.pwstrToFfi(pszBuffer), cchBuffer);
}

export function ADsPropCreateNotifyObj(
  pAppThdDataObj: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IDataObject */,
  pwzADsObjName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phNotifyObj: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libdsprop_dll.ADsPropCreateNotifyObj(util.toPointer(pAppThdDataObj), util.pwstrToFfi(pwzADsObjName), util.toPointer(phNotifyObj));
}

export function ADsPropGetInitInfo(
  hNotifyObj: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pInitParams: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdsprop_dll.ADsPropGetInitInfo((hNotifyObj), util.toPointer(pInitParams)));
}

export function ADsPropSetHwndWithTitle(
  hNotifyObj: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hPage: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  ptzTitle: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdsprop_dll.ADsPropSetHwndWithTitle((hNotifyObj), (hPage), util.toPointer(ptzTitle)));
}

export function ADsPropSetHwnd(
  hNotifyObj: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hPage: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdsprop_dll.ADsPropSetHwnd((hNotifyObj), (hPage)));
}

export function ADsPropCheckIfWritable(
  pwzAttr: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pWritableAttrs: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdsprop_dll.ADsPropCheckIfWritable(util.pwstrToFfi(pwzAttr), util.toPointer(pWritableAttrs)));
}

export function ADsPropSendErrorMessage(
  hNotifyObj: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pError: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdsprop_dll.ADsPropSendErrorMessage((hNotifyObj), util.toPointer(pError)));
}

export function ADsPropShowErrorDialog(
  hNotifyObj: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hPage: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libdsprop_dll.ADsPropShowErrorDialog((hNotifyObj), (hPage)));
}

export function DsMakeSpnW(
  ServiceClass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ServiceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InstanceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InstancePort: number /* u16 */,
  Referrer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcSpnLength: Deno.PointerValue | Uint8Array /* ptr */,
  pszSpn: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDSPARSE_dll.DsMakeSpnW(util.pwstrToFfi(ServiceClass), util.pwstrToFfi(ServiceName), util.pwstrToFfi(InstanceName), InstancePort, util.pwstrToFfi(Referrer), util.toPointer(pcSpnLength), util.pwstrToFfi(pszSpn));
}

export function DsMakeSpnA(
  ServiceClass: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ServiceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InstanceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InstancePort: number /* u16 */,
  Referrer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcSpnLength: Deno.PointerValue | Uint8Array /* ptr */,
  pszSpn: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libDSPARSE_dll.DsMakeSpnA(util.pstrToFfi(ServiceClass), util.pstrToFfi(ServiceName), util.pstrToFfi(InstanceName), InstancePort, util.pstrToFfi(Referrer), util.toPointer(pcSpnLength), util.pstrToFfi(pszSpn));
}

export function DsCrackSpnA(
  pszSpn: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcServiceClass: Deno.PointerValue | Uint8Array /* ptr */,
  ServiceClass: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcServiceName: Deno.PointerValue | Uint8Array /* ptr */,
  ServiceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcInstanceName: Deno.PointerValue | Uint8Array /* ptr */,
  InstanceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pInstancePort: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDSPARSE_dll.DsCrackSpnA(util.pstrToFfi(pszSpn), util.toPointer(pcServiceClass), util.pstrToFfi(ServiceClass), util.toPointer(pcServiceName), util.pstrToFfi(ServiceName), util.toPointer(pcInstanceName), util.pstrToFfi(InstanceName), util.toPointer(pInstancePort));
}

export function DsCrackSpnW(
  pszSpn: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcServiceClass: Deno.PointerValue | Uint8Array /* ptr */,
  ServiceClass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcServiceName: Deno.PointerValue | Uint8Array /* ptr */,
  ServiceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcInstanceName: Deno.PointerValue | Uint8Array /* ptr */,
  InstanceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pInstancePort: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDSPARSE_dll.DsCrackSpnW(util.pwstrToFfi(pszSpn), util.toPointer(pcServiceClass), util.pwstrToFfi(ServiceClass), util.toPointer(pcServiceName), util.pwstrToFfi(ServiceName), util.toPointer(pcInstanceName), util.pwstrToFfi(InstanceName), util.toPointer(pInstancePort));
}

export function DsQuoteRdnValueW(
  cUnquotedRdnValueLength: number /* u32 */,
  psUnquotedRdnValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcQuotedRdnValueLength: Deno.PointerValue | Uint8Array /* ptr */,
  psQuotedRdnValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDSPARSE_dll.DsQuoteRdnValueW(cUnquotedRdnValueLength, util.pwstrToFfi(psUnquotedRdnValue), util.toPointer(pcQuotedRdnValueLength), util.pwstrToFfi(psQuotedRdnValue));
}

export function DsQuoteRdnValueA(
  cUnquotedRdnValueLength: number /* u32 */,
  psUnquotedRdnValue: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcQuotedRdnValueLength: Deno.PointerValue | Uint8Array /* ptr */,
  psQuotedRdnValue: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libDSPARSE_dll.DsQuoteRdnValueA(cUnquotedRdnValueLength, util.pstrToFfi(psUnquotedRdnValue), util.toPointer(pcQuotedRdnValueLength), util.pstrToFfi(psQuotedRdnValue));
}

export function DsUnquoteRdnValueW(
  cQuotedRdnValueLength: number /* u32 */,
  psQuotedRdnValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcUnquotedRdnValueLength: Deno.PointerValue | Uint8Array /* ptr */,
  psUnquotedRdnValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDSPARSE_dll.DsUnquoteRdnValueW(cQuotedRdnValueLength, util.pwstrToFfi(psQuotedRdnValue), util.toPointer(pcUnquotedRdnValueLength), util.pwstrToFfi(psUnquotedRdnValue));
}

export function DsUnquoteRdnValueA(
  cQuotedRdnValueLength: number /* u32 */,
  psQuotedRdnValue: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcUnquotedRdnValueLength: Deno.PointerValue | Uint8Array /* ptr */,
  psUnquotedRdnValue: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libDSPARSE_dll.DsUnquoteRdnValueA(cQuotedRdnValueLength, util.pstrToFfi(psQuotedRdnValue), util.toPointer(pcUnquotedRdnValueLength), util.pstrToFfi(psUnquotedRdnValue));
}

export function DsGetRdnW(
  ppDN: Deno.PointerValue | Uint8Array /* ptr */,
  pcDN: Deno.PointerValue | Uint8Array /* ptr */,
  ppKey: Deno.PointerValue | Uint8Array /* ptr */,
  pcKey: Deno.PointerValue | Uint8Array /* ptr */,
  ppVal: Deno.PointerValue | Uint8Array /* ptr */,
  pcVal: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDSPARSE_dll.DsGetRdnW(util.toPointer(ppDN), util.toPointer(pcDN), util.toPointer(ppKey), util.toPointer(pcKey), util.toPointer(ppVal), util.toPointer(pcVal));
}

export function DsCrackUnquotedMangledRdnW(
  pszRDN: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchRDN: number /* u32 */,
  pGuid: Deno.PointerValue | Uint8Array /* ptr */,
  peDsMangleFor: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDSPARSE_dll.DsCrackUnquotedMangledRdnW(util.pwstrToFfi(pszRDN), cchRDN, util.toPointer(pGuid), util.toPointer(peDsMangleFor)));
}

export function DsCrackUnquotedMangledRdnA(
  pszRDN: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchRDN: number /* u32 */,
  pGuid: Deno.PointerValue | Uint8Array /* ptr */,
  peDsMangleFor: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDSPARSE_dll.DsCrackUnquotedMangledRdnA(util.pstrToFfi(pszRDN), cchRDN, util.toPointer(pGuid), util.toPointer(peDsMangleFor)));
}

export function DsIsMangledRdnValueW(
  pszRdn: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cRdn: number /* u32 */,
  eDsMangleForDesired: DS_MANGLE_FOR /* Windows.Win32.Networking.ActiveDirectory.DS_MANGLE_FOR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDSPARSE_dll.DsIsMangledRdnValueW(util.pwstrToFfi(pszRdn), cRdn, eDsMangleForDesired));
}

export function DsIsMangledRdnValueA(
  pszRdn: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cRdn: number /* u32 */,
  eDsMangleForDesired: DS_MANGLE_FOR /* Windows.Win32.Networking.ActiveDirectory.DS_MANGLE_FOR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDSPARSE_dll.DsIsMangledRdnValueA(util.pstrToFfi(pszRdn), cRdn, eDsMangleForDesired));
}

export function DsIsMangledDnA(
  pszDn: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  eDsMangleFor: DS_MANGLE_FOR /* Windows.Win32.Networking.ActiveDirectory.DS_MANGLE_FOR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDSPARSE_dll.DsIsMangledDnA(util.pstrToFfi(pszDn), eDsMangleFor));
}

export function DsIsMangledDnW(
  pszDn: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  eDsMangleFor: DS_MANGLE_FOR /* Windows.Win32.Networking.ActiveDirectory.DS_MANGLE_FOR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libDSPARSE_dll.DsIsMangledDnW(util.pwstrToFfi(pszDn), eDsMangleFor));
}

export function DsCrackSpn2A(
  pszSpn: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cSpn: number /* u32 */,
  pcServiceClass: Deno.PointerValue | Uint8Array /* ptr */,
  ServiceClass: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcServiceName: Deno.PointerValue | Uint8Array /* ptr */,
  ServiceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcInstanceName: Deno.PointerValue | Uint8Array /* ptr */,
  InstanceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pInstancePort: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDSPARSE_dll.DsCrackSpn2A(util.pstrToFfi(pszSpn), cSpn, util.toPointer(pcServiceClass), util.pstrToFfi(ServiceClass), util.toPointer(pcServiceName), util.pstrToFfi(ServiceName), util.toPointer(pcInstanceName), util.pstrToFfi(InstanceName), util.toPointer(pInstancePort));
}

export function DsCrackSpn2W(
  pszSpn: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cSpn: number /* u32 */,
  pcServiceClass: Deno.PointerValue | Uint8Array /* ptr */,
  ServiceClass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcServiceName: Deno.PointerValue | Uint8Array /* ptr */,
  ServiceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcInstanceName: Deno.PointerValue | Uint8Array /* ptr */,
  InstanceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pInstancePort: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libDSPARSE_dll.DsCrackSpn2W(util.pwstrToFfi(pszSpn), cSpn, util.toPointer(pcServiceClass), util.pwstrToFfi(ServiceClass), util.toPointer(pcServiceName), util.pwstrToFfi(ServiceName), util.toPointer(pcInstanceName), util.pwstrToFfi(InstanceName), util.toPointer(pInstancePort));
}

export function DsCrackSpn3W(
  pszSpn: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cSpn: number /* u32 */,
  pcHostName: Deno.PointerValue | Uint8Array /* ptr */,
  HostName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcInstanceName: Deno.PointerValue | Uint8Array /* ptr */,
  InstanceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pPortNumber: Deno.PointerValue | Uint8Array /* ptr */,
  pcDomainName: Deno.PointerValue | Uint8Array /* ptr */,
  DomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcRealmName: Deno.PointerValue | Uint8Array /* ptr */,
  RealmName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDSPARSE_dll.DsCrackSpn3W(util.pwstrToFfi(pszSpn), cSpn, util.toPointer(pcHostName), util.pwstrToFfi(HostName), util.toPointer(pcInstanceName), util.pwstrToFfi(InstanceName), util.toPointer(pPortNumber), util.toPointer(pcDomainName), util.pwstrToFfi(DomainName), util.toPointer(pcRealmName), util.pwstrToFfi(RealmName));
}

export function DsCrackSpn4W(
  pszSpn: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cSpn: number /* u32 */,
  pcHostName: Deno.PointerValue | Uint8Array /* ptr */,
  HostName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcInstanceName: Deno.PointerValue | Uint8Array /* ptr */,
  InstanceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcPortName: Deno.PointerValue | Uint8Array /* ptr */,
  PortName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcDomainName: Deno.PointerValue | Uint8Array /* ptr */,
  DomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcRealmName: Deno.PointerValue | Uint8Array /* ptr */,
  RealmName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libDSPARSE_dll.DsCrackSpn4W(util.pwstrToFfi(pszSpn), cSpn, util.toPointer(pcHostName), util.pwstrToFfi(HostName), util.toPointer(pcInstanceName), util.pwstrToFfi(InstanceName), util.toPointer(pcPortName), util.pwstrToFfi(PortName), util.toPointer(pcDomainName), util.pwstrToFfi(DomainName), util.toPointer(pcRealmName), util.pwstrToFfi(RealmName));
}

export function DsBindW(
  DomainControllerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DnsDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsBindW(util.pwstrToFfi(DomainControllerName), util.pwstrToFfi(DnsDomainName), util.toPointer(phDS));
}

export function DsBindA(
  DomainControllerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DnsDomainName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsBindA(util.pstrToFfi(DomainControllerName), util.pstrToFfi(DnsDomainName), util.toPointer(phDS));
}

export function DsBindWithCredW(
  DomainControllerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DnsDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  AuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsBindWithCredW(util.pwstrToFfi(DomainControllerName), util.pwstrToFfi(DnsDomainName), util.toPointer(AuthIdentity), util.toPointer(phDS));
}

export function DsBindWithCredA(
  DomainControllerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DnsDomainName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  AuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsBindWithCredA(util.pstrToFfi(DomainControllerName), util.pstrToFfi(DnsDomainName), util.toPointer(AuthIdentity), util.toPointer(phDS));
}

export function DsBindWithSpnW(
  DomainControllerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DnsDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  AuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  ServicePrincipalName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsBindWithSpnW(util.pwstrToFfi(DomainControllerName), util.pwstrToFfi(DnsDomainName), util.toPointer(AuthIdentity), util.pwstrToFfi(ServicePrincipalName), util.toPointer(phDS));
}

export function DsBindWithSpnA(
  DomainControllerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DnsDomainName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  AuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  ServicePrincipalName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsBindWithSpnA(util.pstrToFfi(DomainControllerName), util.pstrToFfi(DnsDomainName), util.toPointer(AuthIdentity), util.pstrToFfi(ServicePrincipalName), util.toPointer(phDS));
}

export function DsBindWithSpnExW(
  DomainControllerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DnsDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  AuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  ServicePrincipalName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  BindFlags: number /* u32 */,
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsBindWithSpnExW(util.pwstrToFfi(DomainControllerName), util.pwstrToFfi(DnsDomainName), util.toPointer(AuthIdentity), util.pwstrToFfi(ServicePrincipalName), BindFlags, util.toPointer(phDS));
}

export function DsBindWithSpnExA(
  DomainControllerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DnsDomainName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  AuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  ServicePrincipalName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  BindFlags: number /* u32 */,
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsBindWithSpnExA(util.pstrToFfi(DomainControllerName), util.pstrToFfi(DnsDomainName), util.toPointer(AuthIdentity), util.pstrToFfi(ServicePrincipalName), BindFlags, util.toPointer(phDS));
}

export function DsBindByInstanceW(
  ServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Annotation: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InstanceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DnsDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  AuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  ServicePrincipalName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  BindFlags: number /* u32 */,
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsBindByInstanceW(util.pwstrToFfi(ServerName), util.pwstrToFfi(Annotation), util.toPointer(InstanceGuid), util.pwstrToFfi(DnsDomainName), util.toPointer(AuthIdentity), util.pwstrToFfi(ServicePrincipalName), BindFlags, util.toPointer(phDS));
}

export function DsBindByInstanceA(
  ServerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Annotation: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InstanceGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DnsDomainName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  AuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
  ServicePrincipalName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  BindFlags: number /* u32 */,
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsBindByInstanceA(util.pstrToFfi(ServerName), util.pstrToFfi(Annotation), util.toPointer(InstanceGuid), util.pstrToFfi(DnsDomainName), util.toPointer(AuthIdentity), util.pstrToFfi(ServicePrincipalName), BindFlags, util.toPointer(phDS));
}

export function DsBindToISTGW(
  SiteName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsBindToISTGW(util.pwstrToFfi(SiteName), util.toPointer(phDS));
}

export function DsBindToISTGA(
  SiteName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsBindToISTGA(util.pstrToFfi(SiteName), util.toPointer(phDS));
}

export function DsBindingSetTimeout(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  cTimeoutSecs: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsBindingSetTimeout(util.toPointer(hDS), cTimeoutSecs);
}

export function DsUnBindW(
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsUnBindW(util.toPointer(phDS));
}

export function DsUnBindA(
  phDS: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsUnBindA(util.toPointer(phDS));
}

export function DsMakePasswordCredentialsW(
  User: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Domain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Password: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pAuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsMakePasswordCredentialsW(util.pwstrToFfi(User), util.pwstrToFfi(Domain), util.pwstrToFfi(Password), util.toPointer(pAuthIdentity));
}

export function DsMakePasswordCredentialsA(
  User: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Domain: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Password: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pAuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsMakePasswordCredentialsA(util.pstrToFfi(User), util.pstrToFfi(Domain), util.pstrToFfi(Password), util.toPointer(pAuthIdentity));
}

export function DsFreePasswordCredentials(
  AuthIdentity: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libNTDSAPI_dll.DsFreePasswordCredentials(util.toPointer(AuthIdentity));
}

export function DsCrackNamesW(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  flags: DS_NAME_FLAGS /* Windows.Win32.Networking.ActiveDirectory.DS_NAME_FLAGS */,
  formatOffered: DS_NAME_FORMAT /* Windows.Win32.Networking.ActiveDirectory.DS_NAME_FORMAT */,
  formatDesired: DS_NAME_FORMAT /* Windows.Win32.Networking.ActiveDirectory.DS_NAME_FORMAT */,
  cNames: number /* u32 */,
  rpNames: Deno.PointerValue | Uint8Array /* ptr */,
  ppResult: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsCrackNamesW(util.toPointer(hDS), flags, formatOffered, formatDesired, cNames, util.toPointer(rpNames), util.toPointer(ppResult));
}

export function DsCrackNamesA(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  flags: DS_NAME_FLAGS /* Windows.Win32.Networking.ActiveDirectory.DS_NAME_FLAGS */,
  formatOffered: DS_NAME_FORMAT /* Windows.Win32.Networking.ActiveDirectory.DS_NAME_FORMAT */,
  formatDesired: DS_NAME_FORMAT /* Windows.Win32.Networking.ActiveDirectory.DS_NAME_FORMAT */,
  cNames: number /* u32 */,
  rpNames: Deno.PointerValue | Uint8Array /* ptr */,
  ppResult: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsCrackNamesA(util.toPointer(hDS), flags, formatOffered, formatDesired, cNames, util.toPointer(rpNames), util.toPointer(ppResult));
}

export function DsFreeNameResultW(
  pResult: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libNTDSAPI_dll.DsFreeNameResultW(util.toPointer(pResult));
}

export function DsFreeNameResultA(
  pResult: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libNTDSAPI_dll.DsFreeNameResultA(util.toPointer(pResult));
}

export function DsGetSpnA(
  ServiceType: DS_SPN_NAME_TYPE /* Windows.Win32.Networking.ActiveDirectory.DS_SPN_NAME_TYPE */,
  ServiceClass: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ServiceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InstancePort: number /* u16 */,
  cInstanceNames: number /* u16 */,
  pInstanceNames: Deno.PointerValue | Uint8Array /* ptr */,
  pInstancePorts: Deno.PointerValue | Uint8Array /* ptr */,
  pcSpn: Deno.PointerValue | Uint8Array /* ptr */,
  prpszSpn: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsGetSpnA(ServiceType, util.pstrToFfi(ServiceClass), util.pstrToFfi(ServiceName), InstancePort, cInstanceNames, util.toPointer(pInstanceNames), util.toPointer(pInstancePorts), util.toPointer(pcSpn), util.toPointer(prpszSpn));
}

export function DsGetSpnW(
  ServiceType: DS_SPN_NAME_TYPE /* Windows.Win32.Networking.ActiveDirectory.DS_SPN_NAME_TYPE */,
  ServiceClass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ServiceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InstancePort: number /* u16 */,
  cInstanceNames: number /* u16 */,
  pInstanceNames: Deno.PointerValue | Uint8Array /* ptr */,
  pInstancePorts: Deno.PointerValue | Uint8Array /* ptr */,
  pcSpn: Deno.PointerValue | Uint8Array /* ptr */,
  prpszSpn: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsGetSpnW(ServiceType, util.pwstrToFfi(ServiceClass), util.pwstrToFfi(ServiceName), InstancePort, cInstanceNames, util.toPointer(pInstanceNames), util.toPointer(pInstancePorts), util.toPointer(pcSpn), util.toPointer(prpszSpn));
}

export function DsFreeSpnArrayA(
  cSpn: number /* u32 */,
  rpszSpn: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libNTDSAPI_dll.DsFreeSpnArrayA(cSpn, util.toPointer(rpszSpn));
}

export function DsFreeSpnArrayW(
  cSpn: number /* u32 */,
  rpszSpn: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libNTDSAPI_dll.DsFreeSpnArrayW(cSpn, util.toPointer(rpszSpn));
}

export function DsWriteAccountSpnA(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Operation: DS_SPN_WRITE_OP /* Windows.Win32.Networking.ActiveDirectory.DS_SPN_WRITE_OP */,
  pszAccount: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cSpn: number /* u32 */,
  rpszSpn: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsWriteAccountSpnA(util.toPointer(hDS), Operation, util.pstrToFfi(pszAccount), cSpn, util.toPointer(rpszSpn));
}

export function DsWriteAccountSpnW(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Operation: DS_SPN_WRITE_OP /* Windows.Win32.Networking.ActiveDirectory.DS_SPN_WRITE_OP */,
  pszAccount: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cSpn: number /* u32 */,
  rpszSpn: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsWriteAccountSpnW(util.toPointer(hDS), Operation, util.pwstrToFfi(pszAccount), cSpn, util.toPointer(rpszSpn));
}

export function DsClientMakeSpnForTargetServerW(
  ServiceClass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ServiceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcSpnLength: Deno.PointerValue | Uint8Array /* ptr */,
  pszSpn: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsClientMakeSpnForTargetServerW(util.pwstrToFfi(ServiceClass), util.pwstrToFfi(ServiceName), util.toPointer(pcSpnLength), util.pwstrToFfi(pszSpn));
}

export function DsClientMakeSpnForTargetServerA(
  ServiceClass: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ServiceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcSpnLength: Deno.PointerValue | Uint8Array /* ptr */,
  pszSpn: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsClientMakeSpnForTargetServerA(util.pstrToFfi(ServiceClass), util.pstrToFfi(ServiceName), util.toPointer(pcSpnLength), util.pstrToFfi(pszSpn));
}

export function DsServerRegisterSpnA(
  Operation: DS_SPN_WRITE_OP /* Windows.Win32.Networking.ActiveDirectory.DS_SPN_WRITE_OP */,
  ServiceClass: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  UserObjectDN: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsServerRegisterSpnA(Operation, util.pstrToFfi(ServiceClass), util.pstrToFfi(UserObjectDN));
}

export function DsServerRegisterSpnW(
  Operation: DS_SPN_WRITE_OP /* Windows.Win32.Networking.ActiveDirectory.DS_SPN_WRITE_OP */,
  ServiceClass: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  UserObjectDN: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsServerRegisterSpnW(Operation, util.pwstrToFfi(ServiceClass), util.pwstrToFfi(UserObjectDN));
}

export function DsReplicaSyncA(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NameContext: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pUuidDsaSrc: Deno.PointerValue | Uint8Array /* ptr */,
  Options: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaSyncA(util.toPointer(hDS), util.pstrToFfi(NameContext), util.toPointer(pUuidDsaSrc), Options);
}

export function DsReplicaSyncW(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NameContext: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pUuidDsaSrc: Deno.PointerValue | Uint8Array /* ptr */,
  Options: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaSyncW(util.toPointer(hDS), util.pwstrToFfi(NameContext), util.toPointer(pUuidDsaSrc), Options);
}

export function DsReplicaAddA(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NameContext: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SourceDsaDn: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  TransportDn: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SourceDsaAddress: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pSchedule: Deno.PointerValue | Uint8Array /* ptr */,
  Options: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaAddA(util.toPointer(hDS), util.pstrToFfi(NameContext), util.pstrToFfi(SourceDsaDn), util.pstrToFfi(TransportDn), util.pstrToFfi(SourceDsaAddress), util.toPointer(pSchedule), Options);
}

export function DsReplicaAddW(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NameContext: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SourceDsaDn: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TransportDn: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SourceDsaAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pSchedule: Deno.PointerValue | Uint8Array /* ptr */,
  Options: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaAddW(util.toPointer(hDS), util.pwstrToFfi(NameContext), util.pwstrToFfi(SourceDsaDn), util.pwstrToFfi(TransportDn), util.pwstrToFfi(SourceDsaAddress), util.toPointer(pSchedule), Options);
}

export function DsReplicaDelA(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NameContext: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DsaSrc: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Options: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaDelA(util.toPointer(hDS), util.pstrToFfi(NameContext), util.pstrToFfi(DsaSrc), Options);
}

export function DsReplicaDelW(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NameContext: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DsaSrc: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Options: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaDelW(util.toPointer(hDS), util.pwstrToFfi(NameContext), util.pwstrToFfi(DsaSrc), Options);
}

export function DsReplicaModifyA(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NameContext: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pUuidSourceDsa: Deno.PointerValue | Uint8Array /* ptr */,
  TransportDn: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SourceDsaAddress: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pSchedule: Deno.PointerValue | Uint8Array /* ptr */,
  ReplicaFlags: number /* u32 */,
  ModifyFields: number /* u32 */,
  Options: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaModifyA(util.toPointer(hDS), util.pstrToFfi(NameContext), util.toPointer(pUuidSourceDsa), util.pstrToFfi(TransportDn), util.pstrToFfi(SourceDsaAddress), util.toPointer(pSchedule), ReplicaFlags, ModifyFields, Options);
}

export function DsReplicaModifyW(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NameContext: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pUuidSourceDsa: Deno.PointerValue | Uint8Array /* ptr */,
  TransportDn: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SourceDsaAddress: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pSchedule: Deno.PointerValue | Uint8Array /* ptr */,
  ReplicaFlags: number /* u32 */,
  ModifyFields: number /* u32 */,
  Options: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaModifyW(util.toPointer(hDS), util.pwstrToFfi(NameContext), util.toPointer(pUuidSourceDsa), util.pwstrToFfi(TransportDn), util.pwstrToFfi(SourceDsaAddress), util.toPointer(pSchedule), ReplicaFlags, ModifyFields, Options);
}

export function DsReplicaUpdateRefsA(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NameContext: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DsaDest: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pUuidDsaDest: Deno.PointerValue | Uint8Array /* ptr */,
  Options: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaUpdateRefsA(util.toPointer(hDS), util.pstrToFfi(NameContext), util.pstrToFfi(DsaDest), util.toPointer(pUuidDsaDest), Options);
}

export function DsReplicaUpdateRefsW(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NameContext: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DsaDest: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pUuidDsaDest: Deno.PointerValue | Uint8Array /* ptr */,
  Options: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaUpdateRefsW(util.toPointer(hDS), util.pwstrToFfi(NameContext), util.pwstrToFfi(DsaDest), util.toPointer(pUuidDsaDest), Options);
}

export function DsReplicaSyncAllA(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pszNameContext: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ulFlags: number /* u32 */,
  pFnCallBack: Deno.PointerValue /* isize */,
  pCallbackData: Deno.PointerValue | Uint8Array /* ptr */,
  pErrors: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaSyncAllA(util.toPointer(hDS), util.pstrToFfi(pszNameContext), ulFlags, pFnCallBack, util.toPointer(pCallbackData), util.toPointer(pErrors));
}

export function DsReplicaSyncAllW(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pszNameContext: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ulFlags: number /* u32 */,
  pFnCallBack: Deno.PointerValue /* isize */,
  pCallbackData: Deno.PointerValue | Uint8Array /* ptr */,
  pErrors: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaSyncAllW(util.toPointer(hDS), util.pwstrToFfi(pszNameContext), ulFlags, pFnCallBack, util.toPointer(pCallbackData), util.toPointer(pErrors));
}

export function DsRemoveDsServerW(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ServerDN: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DomainDN: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  fLastDcInDomain: Deno.PointerValue | Uint8Array /* ptr */,
  fCommit: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsRemoveDsServerW(util.toPointer(hDs), util.pwstrToFfi(ServerDN), util.pwstrToFfi(DomainDN), util.toPointer(fLastDcInDomain), util.boolToFfi(fCommit));
}

export function DsRemoveDsServerA(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ServerDN: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DomainDN: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fLastDcInDomain: Deno.PointerValue | Uint8Array /* ptr */,
  fCommit: boolean /* Windows.Win32.Foundation.BOOL */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsRemoveDsServerA(util.toPointer(hDs), util.pstrToFfi(ServerDN), util.pstrToFfi(DomainDN), util.toPointer(fLastDcInDomain), util.boolToFfi(fCommit));
}

export function DsRemoveDsDomainW(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  DomainDN: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsRemoveDsDomainW(util.toPointer(hDs), util.pwstrToFfi(DomainDN));
}

export function DsRemoveDsDomainA(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  DomainDN: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsRemoveDsDomainA(util.toPointer(hDs), util.pstrToFfi(DomainDN));
}

export function DsListSitesA(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ppSites: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsListSitesA(util.toPointer(hDs), util.toPointer(ppSites));
}

export function DsListSitesW(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ppSites: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsListSitesW(util.toPointer(hDs), util.toPointer(ppSites));
}

export function DsListServersInSiteA(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  site: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ppServers: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsListServersInSiteA(util.toPointer(hDs), util.pstrToFfi(site), util.toPointer(ppServers));
}

export function DsListServersInSiteW(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  site: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppServers: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsListServersInSiteW(util.toPointer(hDs), util.pwstrToFfi(site), util.toPointer(ppServers));
}

export function DsListDomainsInSiteA(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  site: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ppDomains: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsListDomainsInSiteA(util.toPointer(hDs), util.pstrToFfi(site), util.toPointer(ppDomains));
}

export function DsListDomainsInSiteW(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  site: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppDomains: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsListDomainsInSiteW(util.toPointer(hDs), util.pwstrToFfi(site), util.toPointer(ppDomains));
}

export function DsListServersForDomainInSiteA(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  domain: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  site: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ppServers: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsListServersForDomainInSiteA(util.toPointer(hDs), util.pstrToFfi(domain), util.pstrToFfi(site), util.toPointer(ppServers));
}

export function DsListServersForDomainInSiteW(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  domain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  site: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppServers: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsListServersForDomainInSiteW(util.toPointer(hDs), util.pwstrToFfi(domain), util.pwstrToFfi(site), util.toPointer(ppServers));
}

export function DsListInfoForServerA(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  server: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  ppInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsListInfoForServerA(util.toPointer(hDs), util.pstrToFfi(server), util.toPointer(ppInfo));
}

export function DsListInfoForServerW(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  server: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  ppInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsListInfoForServerW(util.toPointer(hDs), util.pwstrToFfi(server), util.toPointer(ppInfo));
}

export function DsListRolesA(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ppRoles: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsListRolesA(util.toPointer(hDs), util.toPointer(ppRoles));
}

export function DsListRolesW(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  ppRoles: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsListRolesW(util.toPointer(hDs), util.toPointer(ppRoles));
}

export function DsQuerySitesByCostW(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pwszFromSite: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  rgwszToSites: Deno.PointerValue | Uint8Array /* ptr */,
  cToSites: number /* u32 */,
  dwFlags: number /* u32 */,
  prgSiteInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsQuerySitesByCostW(util.toPointer(hDS), util.pwstrToFfi(pwszFromSite), util.toPointer(rgwszToSites), cToSites, dwFlags, util.toPointer(prgSiteInfo));
}

export function DsQuerySitesByCostA(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pszFromSite: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  rgszToSites: Deno.PointerValue | Uint8Array /* ptr */,
  cToSites: number /* u32 */,
  dwFlags: number /* u32 */,
  prgSiteInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsQuerySitesByCostA(util.toPointer(hDS), util.pstrToFfi(pszFromSite), util.toPointer(rgszToSites), cToSites, dwFlags, util.toPointer(prgSiteInfo));
}

export function DsQuerySitesFree(
  rgSiteInfo: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libNTDSAPI_dll.DsQuerySitesFree(util.toPointer(rgSiteInfo));
}

export function DsMapSchemaGuidsA(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  cGuids: number /* u32 */,
  rGuids: Deno.PointerValue | Uint8Array /* ptr */,
  ppGuidMap: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsMapSchemaGuidsA(util.toPointer(hDs), cGuids, util.toPointer(rGuids), util.toPointer(ppGuidMap));
}

export function DsFreeSchemaGuidMapA(
  pGuidMap: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libNTDSAPI_dll.DsFreeSchemaGuidMapA(util.toPointer(pGuidMap));
}

export function DsMapSchemaGuidsW(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  cGuids: number /* u32 */,
  rGuids: Deno.PointerValue | Uint8Array /* ptr */,
  ppGuidMap: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsMapSchemaGuidsW(util.toPointer(hDs), cGuids, util.toPointer(rGuids), util.toPointer(ppGuidMap));
}

export function DsFreeSchemaGuidMapW(
  pGuidMap: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libNTDSAPI_dll.DsFreeSchemaGuidMapW(util.toPointer(pGuidMap));
}

export function DsGetDomainControllerInfoA(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  DomainName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  InfoLevel: number /* u32 */,
  pcOut: Deno.PointerValue | Uint8Array /* ptr */,
  ppInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsGetDomainControllerInfoA(util.toPointer(hDs), util.pstrToFfi(DomainName), InfoLevel, util.toPointer(pcOut), util.toPointer(ppInfo));
}

export function DsGetDomainControllerInfoW(
  hDs: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  DomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InfoLevel: number /* u32 */,
  pcOut: Deno.PointerValue | Uint8Array /* ptr */,
  ppInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsGetDomainControllerInfoW(util.toPointer(hDs), util.pwstrToFfi(DomainName), InfoLevel, util.toPointer(pcOut), util.toPointer(ppInfo));
}

export function DsFreeDomainControllerInfoA(
  InfoLevel: number /* u32 */,
  cInfo: number /* u32 */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libNTDSAPI_dll.DsFreeDomainControllerInfoA(InfoLevel, cInfo, util.toPointer(pInfo));
}

export function DsFreeDomainControllerInfoW(
  InfoLevel: number /* u32 */,
  cInfo: number /* u32 */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libNTDSAPI_dll.DsFreeDomainControllerInfoW(InfoLevel, cInfo, util.toPointer(pInfo));
}

export function DsReplicaConsistencyCheck(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  TaskID: DS_KCC_TASKID /* Windows.Win32.Networking.ActiveDirectory.DS_KCC_TASKID */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaConsistencyCheck(util.toPointer(hDS), TaskID, dwFlags);
}

export function DsReplicaVerifyObjectsW(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NameContext: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pUuidDsaSrc: Deno.PointerValue | Uint8Array /* ptr */,
  ulOptions: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaVerifyObjectsW(util.toPointer(hDS), util.pwstrToFfi(NameContext), util.toPointer(pUuidDsaSrc), ulOptions);
}

export function DsReplicaVerifyObjectsA(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  NameContext: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pUuidDsaSrc: Deno.PointerValue | Uint8Array /* ptr */,
  ulOptions: number /* u32 */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaVerifyObjectsA(util.toPointer(hDS), util.pstrToFfi(NameContext), util.toPointer(pUuidDsaSrc), ulOptions);
}

export function DsReplicaGetInfoW(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  InfoType: DS_REPL_INFO_TYPE /* Windows.Win32.Networking.ActiveDirectory.DS_REPL_INFO_TYPE */,
  pszObject: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puuidForSourceDsaObjGuid: Deno.PointerValue | Uint8Array /* ptr */,
  ppInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaGetInfoW(util.toPointer(hDS), InfoType, util.pwstrToFfi(pszObject), util.toPointer(puuidForSourceDsaObjGuid), util.toPointer(ppInfo));
}

export function DsReplicaGetInfo2W(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  InfoType: DS_REPL_INFO_TYPE /* Windows.Win32.Networking.ActiveDirectory.DS_REPL_INFO_TYPE */,
  pszObject: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  puuidForSourceDsaObjGuid: Deno.PointerValue | Uint8Array /* ptr */,
  pszAttributeName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszValue: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  dwEnumerationContext: number /* u32 */,
  ppInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsReplicaGetInfo2W(util.toPointer(hDS), InfoType, util.pwstrToFfi(pszObject), util.toPointer(puuidForSourceDsaObjGuid), util.pwstrToFfi(pszAttributeName), util.pwstrToFfi(pszValue), dwFlags, dwEnumerationContext, util.toPointer(ppInfo));
}

export function DsReplicaFreeInfo(
  InfoType: DS_REPL_INFO_TYPE /* Windows.Win32.Networking.ActiveDirectory.DS_REPL_INFO_TYPE */,
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libNTDSAPI_dll.DsReplicaFreeInfo(InfoType, util.toPointer(pInfo));
}

export function DsAddSidHistoryW(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Flags: number /* u32 */,
  SrcDomain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SrcPrincipal: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SrcDomainController: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SrcDomainCreds: Deno.PointerValue | Uint8Array /* ptr */,
  DstDomain: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DstPrincipal: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsAddSidHistoryW(util.toPointer(hDS), Flags, util.pwstrToFfi(SrcDomain), util.pwstrToFfi(SrcPrincipal), util.pwstrToFfi(SrcDomainController), util.toPointer(SrcDomainCreds), util.pwstrToFfi(DstDomain), util.pwstrToFfi(DstPrincipal));
}

export function DsAddSidHistoryA(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Flags: number /* u32 */,
  SrcDomain: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SrcPrincipal: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SrcDomainController: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SrcDomainCreds: Deno.PointerValue | Uint8Array /* ptr */,
  DstDomain: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DstPrincipal: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsAddSidHistoryA(util.toPointer(hDS), Flags, util.pstrToFfi(SrcDomain), util.pstrToFfi(SrcPrincipal), util.pstrToFfi(SrcDomainController), util.toPointer(SrcDomainCreds), util.pstrToFfi(DstDomain), util.pstrToFfi(DstPrincipal));
}

export function DsInheritSecurityIdentityW(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Flags: number /* u32 */,
  SrcPrincipal: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DstPrincipal: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsInheritSecurityIdentityW(util.toPointer(hDS), Flags, util.pwstrToFfi(SrcPrincipal), util.pwstrToFfi(DstPrincipal));
}

export function DsInheritSecurityIdentityA(
  hDS: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Flags: number /* u32 */,
  SrcPrincipal: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DstPrincipal: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libNTDSAPI_dll.DsInheritSecurityIdentityA(util.toPointer(hDS), Flags, util.pstrToFfi(SrcPrincipal), util.pstrToFfi(DstPrincipal));
}

export function DsRoleGetPrimaryDomainInformation(
  lpServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  InfoLevel: DSROLE_PRIMARY_DOMAIN_INFO_LEVEL /* Windows.Win32.Networking.ActiveDirectory.DSROLE_PRIMARY_DOMAIN_INFO_LEVEL */,
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsRoleGetPrimaryDomainInformation(util.pwstrToFfi(lpServer), InfoLevel, util.toPointer(Buffer));
}

export function DsRoleFreeMemory(
  Buffer: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libNETAPI32_dll.DsRoleFreeMemory(util.toPointer(Buffer));
}

export function DsGetDcNameA(
  ComputerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DomainName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DomainGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SiteName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
  DomainControllerInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsGetDcNameA(util.pstrToFfi(ComputerName), util.pstrToFfi(DomainName), util.toPointer(DomainGuid), util.pstrToFfi(SiteName), Flags, util.toPointer(DomainControllerInfo));
}

export function DsGetDcNameW(
  ComputerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DomainGuid: Deno.PointerValue | Uint8Array /* ptr */,
  SiteName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  DomainControllerInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsGetDcNameW(util.pwstrToFfi(ComputerName), util.pwstrToFfi(DomainName), util.toPointer(DomainGuid), util.pwstrToFfi(SiteName), Flags, util.toPointer(DomainControllerInfo));
}

export function DsGetSiteNameA(
  ComputerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  SiteName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsGetSiteNameA(util.pstrToFfi(ComputerName), util.toPointer(SiteName));
}

export function DsGetSiteNameW(
  ComputerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  SiteName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsGetSiteNameW(util.pwstrToFfi(ComputerName), util.toPointer(SiteName));
}

export function DsValidateSubnetNameW(
  SubnetName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.DsValidateSubnetNameW(util.pwstrToFfi(SubnetName));
}

export function DsValidateSubnetNameA(
  SubnetName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.DsValidateSubnetNameA(util.pstrToFfi(SubnetName));
}

export function DsAddressToSiteNamesW(
  ComputerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  EntryCount: number /* u32 */,
  SocketAddresses: Deno.PointerValue | Uint8Array /* ptr */,
  SiteNames: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsAddressToSiteNamesW(util.pwstrToFfi(ComputerName), EntryCount, util.toPointer(SocketAddresses), util.toPointer(SiteNames));
}

export function DsAddressToSiteNamesA(
  ComputerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  EntryCount: number /* u32 */,
  SocketAddresses: Deno.PointerValue | Uint8Array /* ptr */,
  SiteNames: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsAddressToSiteNamesA(util.pstrToFfi(ComputerName), EntryCount, util.toPointer(SocketAddresses), util.toPointer(SiteNames));
}

export function DsAddressToSiteNamesExW(
  ComputerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  EntryCount: number /* u32 */,
  SocketAddresses: Deno.PointerValue | Uint8Array /* ptr */,
  SiteNames: Deno.PointerValue | Uint8Array /* ptr */,
  SubnetNames: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsAddressToSiteNamesExW(util.pwstrToFfi(ComputerName), EntryCount, util.toPointer(SocketAddresses), util.toPointer(SiteNames), util.toPointer(SubnetNames));
}

export function DsAddressToSiteNamesExA(
  ComputerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  EntryCount: number /* u32 */,
  SocketAddresses: Deno.PointerValue | Uint8Array /* ptr */,
  SiteNames: Deno.PointerValue | Uint8Array /* ptr */,
  SubnetNames: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsAddressToSiteNamesExA(util.pstrToFfi(ComputerName), EntryCount, util.toPointer(SocketAddresses), util.toPointer(SiteNames), util.toPointer(SubnetNames));
}

export function DsEnumerateDomainTrustsW(
  ServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  Domains: Deno.PointerValue | Uint8Array /* ptr */,
  DomainCount: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsEnumerateDomainTrustsW(util.pwstrToFfi(ServerName), Flags, util.toPointer(Domains), util.toPointer(DomainCount));
}

export function DsEnumerateDomainTrustsA(
  ServerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Flags: number /* u32 */,
  Domains: Deno.PointerValue | Uint8Array /* ptr */,
  DomainCount: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsEnumerateDomainTrustsA(util.pstrToFfi(ServerName), Flags, util.toPointer(Domains), util.toPointer(DomainCount));
}

export function DsGetForestTrustInformationW(
  ServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  TrustedDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Flags: number /* u32 */,
  ForestTrustInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsGetForestTrustInformationW(util.pwstrToFfi(ServerName), util.pwstrToFfi(TrustedDomainName), Flags, util.toPointer(ForestTrustInfo));
}

export function DsMergeForestTrustInformationW(
  DomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  NewForestTrustInfo: Deno.PointerValue | Uint8Array /* ptr */,
  OldForestTrustInfo: Deno.PointerValue | Uint8Array /* ptr */,
  MergedForestTrustInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsMergeForestTrustInformationW(util.pwstrToFfi(DomainName), util.toPointer(NewForestTrustInfo), util.toPointer(OldForestTrustInfo), util.toPointer(MergedForestTrustInfo));
}

export function DsGetDcSiteCoverageW(
  ServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  EntryCount: Deno.PointerValue | Uint8Array /* ptr */,
  SiteNames: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsGetDcSiteCoverageW(util.pwstrToFfi(ServerName), util.toPointer(EntryCount), util.toPointer(SiteNames));
}

export function DsGetDcSiteCoverageA(
  ServerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  EntryCount: Deno.PointerValue | Uint8Array /* ptr */,
  SiteNames: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsGetDcSiteCoverageA(util.pstrToFfi(ServerName), util.toPointer(EntryCount), util.toPointer(SiteNames));
}

export function DsDeregisterDnsHostRecordsW(
  ServerName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DnsDomainName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DomainGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DsaGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DnsHostName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.DsDeregisterDnsHostRecordsW(util.pwstrToFfi(ServerName), util.pwstrToFfi(DnsDomainName), util.toPointer(DomainGuid), util.toPointer(DsaGuid), util.pwstrToFfi(DnsHostName));
}

export function DsDeregisterDnsHostRecordsA(
  ServerName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DnsDomainName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DomainGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DsaGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DnsHostName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libNETAPI32_dll.DsDeregisterDnsHostRecordsA(util.pstrToFfi(ServerName), util.pstrToFfi(DnsDomainName), util.toPointer(DomainGuid), util.toPointer(DsaGuid), util.pstrToFfi(DnsHostName));
}

export function DsGetDcOpenW(
  DnsName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  OptionFlags: number /* u32 */,
  SiteName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DomainGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DnsForestName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  DcFlags: number /* u32 */,
  RetGetDcContext: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsGetDcOpenW(util.pwstrToFfi(DnsName), OptionFlags, util.pwstrToFfi(SiteName), util.toPointer(DomainGuid), util.pwstrToFfi(DnsForestName), DcFlags, util.toPointer(RetGetDcContext));
}

export function DsGetDcOpenA(
  DnsName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  OptionFlags: number /* u32 */,
  SiteName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DomainGuid: Deno.PointerValue | Uint8Array /* ptr */,
  DnsForestName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  DcFlags: number /* u32 */,
  RetGetDcContext: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsGetDcOpenA(util.pstrToFfi(DnsName), OptionFlags, util.pstrToFfi(SiteName), util.toPointer(DomainGuid), util.pstrToFfi(DnsForestName), DcFlags, util.toPointer(RetGetDcContext));
}

export function DsGetDcNextW(
  GetDcContextHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  SockAddressCount: Deno.PointerValue | Uint8Array /* ptr */,
  SockAddresses: Deno.PointerValue | Uint8Array /* ptr */,
  DnsHostName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsGetDcNextW(util.toPointer(GetDcContextHandle), util.toPointer(SockAddressCount), util.toPointer(SockAddresses), util.toPointer(DnsHostName));
}

export function DsGetDcNextA(
  GetDcContextHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  SockAddressCount: Deno.PointerValue | Uint8Array /* ptr */,
  SockAddresses: Deno.PointerValue | Uint8Array /* ptr */,
  DnsHostName: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libNETAPI32_dll.DsGetDcNextA(util.toPointer(GetDcContextHandle), util.toPointer(SockAddressCount), util.toPointer(SockAddresses), util.toPointer(DnsHostName));
}

export function DsGetDcCloseW(
  GetDcContextHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Networking.ActiveDirectory.GetDcContextHandle */,
): void /* void */ {
  return libNETAPI32_dll.DsGetDcCloseW(util.toPointer(GetDcContextHandle));
}

