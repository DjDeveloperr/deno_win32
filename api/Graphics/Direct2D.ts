/// Auto-generated by Deno Win32: Windows.Win32.Graphics.Direct2D.Apis

import * as util from "../../util.ts";

// Enums
export type D2D1_ALPHA_MODE = number;
export type DXGI_FORMAT = number;
export type D2D1_INTERPOLATION_MODE_DEFINITION = number;
export type D2D1_GAMMA = number;
export type D2D1_OPACITY_MASK_CONTENT = number;
export type D2D1_EXTEND_MODE = number;
export type D2D1_ANTIALIAS_MODE = number;
export type D2D1_TEXT_ANTIALIAS_MODE = number;
export type D2D1_BITMAP_INTERPOLATION_MODE = number;
export type D2D1_DRAW_TEXT_OPTIONS = number;
export type D2D1_ARC_SIZE = number;
export type D2D1_CAP_STYLE = number;
export type D2D1_DASH_STYLE = number;
export type D2D1_LINE_JOIN = number;
export type D2D1_COMBINE_MODE = number;
export type D2D1_GEOMETRY_RELATION = number;
export type D2D1_GEOMETRY_SIMPLIFICATION_OPTION = number;
export type D2D1_SWEEP_DIRECTION = number;
export type D2D1_LAYER_OPTIONS = number;
export type D2D1_WINDOW_STATE = number;
export type D2D1_RENDER_TARGET_TYPE = number;
export type D2D1_FEATURE_LEVEL = number;
export type D2D1_RENDER_TARGET_USAGE = number;
export type D2D1_PRESENT_OPTIONS = number;
export type D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS = number;
export type D2D1_DC_INITIALIZE_MODE = number;
export type D2D1_DEBUG_LEVEL = number;
export type D2D1_FACTORY_TYPE = number;
export type D2D1_CHANNEL_SELECTOR = number;
export type D2D1_BITMAPSOURCE_ORIENTATION = number;
export type D2D1_GAUSSIANBLUR_PROP = number;
export type D2D1_GAUSSIANBLUR_OPTIMIZATION = number;
export type D2D1_DIRECTIONALBLUR_PROP = number;
export type D2D1_DIRECTIONALBLUR_OPTIMIZATION = number;
export type D2D1_SHADOW_PROP = number;
export type D2D1_SHADOW_OPTIMIZATION = number;
export type D2D1_BLEND_PROP = number;
export type D2D1_SATURATION_PROP = number;
export type D2D1_HUEROTATION_PROP = number;
export type D2D1_COLORMATRIX_PROP = number;
export type D2D1_BITMAPSOURCE_PROP = number;
export type D2D1_BITMAPSOURCE_INTERPOLATION_MODE = number;
export type D2D1_BITMAPSOURCE_ALPHA_MODE = number;
export type D2D1_COMPOSITE_PROP = number;
export type D2D1_3DTRANSFORM_PROP = number;
export type D2D1_3DTRANSFORM_INTERPOLATION_MODE = number;
export type D2D1_3DPERSPECTIVETRANSFORM_PROP = number;
export type D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE = number;
export type D2D1_2DAFFINETRANSFORM_PROP = number;
export type D2D1_DPICOMPENSATION_PROP = number;
export type D2D1_DPICOMPENSATION_INTERPOLATION_MODE = number;
export type D2D1_SCALE_PROP = number;
export type D2D1_SCALE_INTERPOLATION_MODE = number;
export type D2D1_TURBULENCE_PROP = number;
export type D2D1_DISPLACEMENTMAP_PROP = number;
export type D2D1_COLORMANAGEMENT_PROP = number;
export type D2D1_COLORMANAGEMENT_ALPHA_MODE = number;
export type D2D1_COLORMANAGEMENT_QUALITY = number;
export type D2D1_COLORMANAGEMENT_RENDERING_INTENT = number;
export type D2D1_HISTOGRAM_PROP = number;
export type D2D1_POINTSPECULAR_PROP = number;
export type D2D1_POINTSPECULAR_SCALE_MODE = number;
export type D2D1_SPOTSPECULAR_PROP = number;
export type D2D1_SPOTSPECULAR_SCALE_MODE = number;
export type D2D1_DISTANTSPECULAR_PROP = number;
export type D2D1_DISTANTSPECULAR_SCALE_MODE = number;
export type D2D1_POINTDIFFUSE_PROP = number;
export type D2D1_POINTDIFFUSE_SCALE_MODE = number;
export type D2D1_SPOTDIFFUSE_PROP = number;
export type D2D1_SPOTDIFFUSE_SCALE_MODE = number;
export type D2D1_DISTANTDIFFUSE_PROP = number;
export type D2D1_DISTANTDIFFUSE_SCALE_MODE = number;
export type D2D1_FLOOD_PROP = number;
export type D2D1_LINEARTRANSFER_PROP = number;
export type D2D1_GAMMATRANSFER_PROP = number;
export type D2D1_TABLETRANSFER_PROP = number;
export type D2D1_DISCRETETRANSFER_PROP = number;
export type D2D1_CONVOLVEMATRIX_PROP = number;
export type D2D1_CONVOLVEMATRIX_SCALE_MODE = number;
export type D2D1_BRIGHTNESS_PROP = number;
export type D2D1_ARITHMETICCOMPOSITE_PROP = number;
export type D2D1_CROP_PROP = number;
export type D2D1_BORDER_PROP = number;
export type D2D1_BORDER_EDGE_MODE = number;
export type D2D1_MORPHOLOGY_PROP = number;
export type D2D1_MORPHOLOGY_MODE = number;
export type D2D1_TILE_PROP = number;
export type D2D1_ATLAS_PROP = number;
export type D2D1_OPACITYMETADATA_PROP = number;
export type D2D1_PROPERTY_TYPE = number;
export type D2D1_PROPERTY = number;
export type D2D1_SUBPROPERTY = number;
export type D2D1_BITMAP_OPTIONS = number;
export type D2D1_BUFFER_PRECISION = number;
export type D2D1_MAP_OPTIONS = number;
export type D2D1_INTERPOLATION_MODE = number;
export type D2D1_UNIT_MODE = number;
export type D2D1_COLOR_SPACE = number;
export type D2D1_DEVICE_CONTEXT_OPTIONS = number;
export type D2D1_STROKE_TRANSFORM_TYPE = number;
export type D2D1_PRIMITIVE_BLEND = number;
export type D2D1_THREADING_MODE = number;
export type D2D1_COLOR_INTERPOLATION_MODE = number;
export type D2D1_LAYER_OPTIONS1 = number;
export type D2D1_PRINT_FONT_SUBSET_MODE = number;
export type D2D1_CHANGE_TYPE = number;
export type D2D1_PIXEL_OPTIONS = number;
export type D2D1_VERTEX_OPTIONS = number;
export type D2D1_VERTEX_USAGE = number;
export type D2D1_BLEND_OPERATION = number;
export type D2D1_BLEND = number;
export type D2D1_CHANNEL_DEPTH = number;
export type D2D1_FILTER = number;
export type D2D1_FEATURE = number;
export type D2D1_YCBCR_PROP = number;
export type D2D1_YCBCR_CHROMA_SUBSAMPLING = number;
export type D2D1_YCBCR_INTERPOLATION_MODE = number;
export type D2D1_CONTRAST_PROP = number;
export type D2D1_RGBTOHUE_PROP = number;
export type D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE = number;
export type D2D1_HUETORGB_PROP = number;
export type D2D1_HUETORGB_INPUT_COLOR_SPACE = number;
export type D2D1_CHROMAKEY_PROP = number;
export type D2D1_EMBOSS_PROP = number;
export type D2D1_EXPOSURE_PROP = number;
export type D2D1_POSTERIZE_PROP = number;
export type D2D1_SEPIA_PROP = number;
export type D2D1_SHARPEN_PROP = number;
export type D2D1_STRAIGHTEN_PROP = number;
export type D2D1_STRAIGHTEN_SCALE_MODE = number;
export type D2D1_TEMPERATUREANDTINT_PROP = number;
export type D2D1_VIGNETTE_PROP = number;
export type D2D1_EDGEDETECTION_PROP = number;
export type D2D1_EDGEDETECTION_MODE = number;
export type D2D1_HIGHLIGHTSANDSHADOWS_PROP = number;
export type D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA = number;
export type D2D1_LOOKUPTABLE3D_PROP = number;
export type D2D1_OPACITY_PROP = number;
export type D2D1_CROSSFADE_PROP = number;
export type D2D1_TINT_PROP = number;
export type D2D1_WHITELEVELADJUSTMENT_PROP = number;
export type D2D1_HDRTONEMAP_PROP = number;
export type D2D1_HDRTONEMAP_DISPLAY_MODE = number;
export type D2D1_RENDERING_PRIORITY = number;
export type D2D1_SVG_PAINT_TYPE = number;
export type D2D1_SVG_LENGTH_UNITS = number;
export type D2D1_SVG_DISPLAY = number;
export type D2D1_SVG_VISIBILITY = number;
export type D2D1_SVG_OVERFLOW = number;
export type D2D1_SVG_LINE_CAP = number;
export type D2D1_SVG_LINE_JOIN = number;
export type D2D1_SVG_ASPECT_ALIGN = number;
export type D2D1_SVG_ASPECT_SCALING = number;
export type D2D1_SVG_PATH_COMMAND = number;
export type D2D1_SVG_UNIT_TYPE = number;
export type D2D1_SVG_ATTRIBUTE_STRING_TYPE = number;
export type D2D1_SVG_ATTRIBUTE_POD_TYPE = number;
export type D2D1_INK_NIB_SHAPE = number;
export type D2D1_ORIENTATION = number;
export type D2D1_IMAGE_SOURCE_LOADING_OPTIONS = number;
export type D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS = number;
export type D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS = number;
export type D2D1_PATCH_EDGE_MODE = number;
export type D2D1_SPRITE_OPTIONS = number;
export type D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION = number;
export type D2D1_GAMMA1 = number;
export type D2D1_COLOR_CONTEXT_TYPE = number;
export type D2D1_FIGURE_BEGIN = number;
export type D2D1_FIGURE_END = number;
export type D2D1_PATH_SEGMENT = number;
export type D2D1_FILL_MODE = number;
export type D2D1_BORDER_MODE = number;
export type D2D1_BLEND_MODE = number;
export type D2D1_COLORMATRIX_ALPHA_MODE = number;
export type D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE = number;
export type D2D1_TURBULENCE_NOISE = number;
export type D2D1_COMPOSITE_MODE = number;

// Constants
export const D2D1_DEFAULT_FLATTENING_TOLERANCE = `0.25`;
export const D2D1_SCENE_REFERRED_SDR_WHITE_LEVEL = 80;
export const D2D1_APPEND_ALIGNED_ELEMENT = 4294967295;
export const FACILITY_D2D = 2201;
export const D2D1_ALPHA_MODE_UNKNOWN = 0;
export const D2D1_ALPHA_MODE_PREMULTIPLIED = 1;
export const D2D1_ALPHA_MODE_STRAIGHT = 2;
export const D2D1_ALPHA_MODE_IGNORE = 3;
export const D2D1_ALPHA_MODE_FORCE_DWORD = 4294967295;
export const DXGI_FORMAT_UNKNOWN = 0;
export const DXGI_FORMAT_R32G32B32A32_TYPELESS = 1;
export const DXGI_FORMAT_R32G32B32A32_FLOAT = 2;
export const DXGI_FORMAT_R32G32B32A32_UINT = 3;
export const DXGI_FORMAT_R32G32B32A32_SINT = 4;
export const DXGI_FORMAT_R32G32B32_TYPELESS = 5;
export const DXGI_FORMAT_R32G32B32_FLOAT = 6;
export const DXGI_FORMAT_R32G32B32_UINT = 7;
export const DXGI_FORMAT_R32G32B32_SINT = 8;
export const DXGI_FORMAT_R16G16B16A16_TYPELESS = 9;
export const DXGI_FORMAT_R16G16B16A16_FLOAT = 10;
export const DXGI_FORMAT_R16G16B16A16_UNORM = 11;
export const DXGI_FORMAT_R16G16B16A16_UINT = 12;
export const DXGI_FORMAT_R16G16B16A16_SNORM = 13;
export const DXGI_FORMAT_R16G16B16A16_SINT = 14;
export const DXGI_FORMAT_R32G32_TYPELESS = 15;
export const DXGI_FORMAT_R32G32_FLOAT = 16;
export const DXGI_FORMAT_R32G32_UINT = 17;
export const DXGI_FORMAT_R32G32_SINT = 18;
export const DXGI_FORMAT_R32G8X24_TYPELESS = 19;
export const DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20;
export const DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21;
export const DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22;
export const DXGI_FORMAT_R10G10B10A2_TYPELESS = 23;
export const DXGI_FORMAT_R10G10B10A2_UNORM = 24;
export const DXGI_FORMAT_R10G10B10A2_UINT = 25;
export const DXGI_FORMAT_R11G11B10_FLOAT = 26;
export const DXGI_FORMAT_R8G8B8A8_TYPELESS = 27;
export const DXGI_FORMAT_R8G8B8A8_UNORM = 28;
export const DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29;
export const DXGI_FORMAT_R8G8B8A8_UINT = 30;
export const DXGI_FORMAT_R8G8B8A8_SNORM = 31;
export const DXGI_FORMAT_R8G8B8A8_SINT = 32;
export const DXGI_FORMAT_R16G16_TYPELESS = 33;
export const DXGI_FORMAT_R16G16_FLOAT = 34;
export const DXGI_FORMAT_R16G16_UNORM = 35;
export const DXGI_FORMAT_R16G16_UINT = 36;
export const DXGI_FORMAT_R16G16_SNORM = 37;
export const DXGI_FORMAT_R16G16_SINT = 38;
export const DXGI_FORMAT_R32_TYPELESS = 39;
export const DXGI_FORMAT_D32_FLOAT = 40;
export const DXGI_FORMAT_R32_FLOAT = 41;
export const DXGI_FORMAT_R32_UINT = 42;
export const DXGI_FORMAT_R32_SINT = 43;
export const DXGI_FORMAT_R24G8_TYPELESS = 44;
export const DXGI_FORMAT_D24_UNORM_S8_UINT = 45;
export const DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46;
export const DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47;
export const DXGI_FORMAT_R8G8_TYPELESS = 48;
export const DXGI_FORMAT_R8G8_UNORM = 49;
export const DXGI_FORMAT_R8G8_UINT = 50;
export const DXGI_FORMAT_R8G8_SNORM = 51;
export const DXGI_FORMAT_R8G8_SINT = 52;
export const DXGI_FORMAT_R16_TYPELESS = 53;
export const DXGI_FORMAT_R16_FLOAT = 54;
export const DXGI_FORMAT_D16_UNORM = 55;
export const DXGI_FORMAT_R16_UNORM = 56;
export const DXGI_FORMAT_R16_UINT = 57;
export const DXGI_FORMAT_R16_SNORM = 58;
export const DXGI_FORMAT_R16_SINT = 59;
export const DXGI_FORMAT_R8_TYPELESS = 60;
export const DXGI_FORMAT_R8_UNORM = 61;
export const DXGI_FORMAT_R8_UINT = 62;
export const DXGI_FORMAT_R8_SNORM = 63;
export const DXGI_FORMAT_R8_SINT = 64;
export const DXGI_FORMAT_A8_UNORM = 65;
export const DXGI_FORMAT_R1_UNORM = 66;
export const DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67;
export const DXGI_FORMAT_R8G8_B8G8_UNORM = 68;
export const DXGI_FORMAT_G8R8_G8B8_UNORM = 69;
export const DXGI_FORMAT_BC1_TYPELESS = 70;
export const DXGI_FORMAT_BC1_UNORM = 71;
export const DXGI_FORMAT_BC1_UNORM_SRGB = 72;
export const DXGI_FORMAT_BC2_TYPELESS = 73;
export const DXGI_FORMAT_BC2_UNORM = 74;
export const DXGI_FORMAT_BC2_UNORM_SRGB = 75;
export const DXGI_FORMAT_BC3_TYPELESS = 76;
export const DXGI_FORMAT_BC3_UNORM = 77;
export const DXGI_FORMAT_BC3_UNORM_SRGB = 78;
export const DXGI_FORMAT_BC4_TYPELESS = 79;
export const DXGI_FORMAT_BC4_UNORM = 80;
export const DXGI_FORMAT_BC4_SNORM = 81;
export const DXGI_FORMAT_BC5_TYPELESS = 82;
export const DXGI_FORMAT_BC5_UNORM = 83;
export const DXGI_FORMAT_BC5_SNORM = 84;
export const DXGI_FORMAT_B5G6R5_UNORM = 85;
export const DXGI_FORMAT_B5G5R5A1_UNORM = 86;
export const DXGI_FORMAT_B8G8R8A8_UNORM = 87;
export const DXGI_FORMAT_B8G8R8X8_UNORM = 88;
export const DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89;
export const DXGI_FORMAT_B8G8R8A8_TYPELESS = 90;
export const DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91;
export const DXGI_FORMAT_B8G8R8X8_TYPELESS = 92;
export const DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93;
export const DXGI_FORMAT_BC6H_TYPELESS = 94;
export const DXGI_FORMAT_BC6H_UF16 = 95;
export const DXGI_FORMAT_BC6H_SF16 = 96;
export const DXGI_FORMAT_BC7_TYPELESS = 97;
export const DXGI_FORMAT_BC7_UNORM = 98;
export const DXGI_FORMAT_BC7_UNORM_SRGB = 99;
export const DXGI_FORMAT_AYUV = 100;
export const DXGI_FORMAT_Y410 = 101;
export const DXGI_FORMAT_Y416 = 102;
export const DXGI_FORMAT_NV12 = 103;
export const DXGI_FORMAT_P010 = 104;
export const DXGI_FORMAT_P016 = 105;
export const DXGI_FORMAT_420_OPAQUE = 106;
export const DXGI_FORMAT_YUY2 = 107;
export const DXGI_FORMAT_Y210 = 108;
export const DXGI_FORMAT_Y216 = 109;
export const DXGI_FORMAT_NV11 = 110;
export const DXGI_FORMAT_AI44 = 111;
export const DXGI_FORMAT_IA44 = 112;
export const DXGI_FORMAT_P8 = 113;
export const DXGI_FORMAT_A8P8 = 114;
export const DXGI_FORMAT_B4G4R4A4_UNORM = 115;
export const DXGI_FORMAT_P208 = 130;
export const DXGI_FORMAT_V208 = 131;
export const DXGI_FORMAT_V408 = 132;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190;
export const DXGI_FORMAT_FORCE_UINT = 4294967295;
export const D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR = 0;
export const D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR = 1;
export const D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC = 2;
export const D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC = 4;
export const D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC = 5;
export const D2D1_INTERPOLATION_MODE_DEFINITION_FANT = 6;
export const D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR = 7;
export const D2D1_GAMMA_2_2 = 0;
export const D2D1_GAMMA_1_0 = 1;
export const D2D1_GAMMA_FORCE_DWORD = 4294967295;
export const D2D1_OPACITY_MASK_CONTENT_GRAPHICS = 0;
export const D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL = 1;
export const D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE = 2;
export const D2D1_OPACITY_MASK_CONTENT_FORCE_DWORD = 4294967295;
export const D2D1_EXTEND_MODE_CLAMP = 0;
export const D2D1_EXTEND_MODE_WRAP = 1;
export const D2D1_EXTEND_MODE_MIRROR = 2;
export const D2D1_EXTEND_MODE_FORCE_DWORD = 4294967295;
export const D2D1_ANTIALIAS_MODE_PER_PRIMITIVE = 0;
export const D2D1_ANTIALIAS_MODE_ALIASED = 1;
export const D2D1_ANTIALIAS_MODE_FORCE_DWORD = 4294967295;
export const D2D1_TEXT_ANTIALIAS_MODE_DEFAULT = 0;
export const D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE = 1;
export const D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE = 2;
export const D2D1_TEXT_ANTIALIAS_MODE_ALIASED = 3;
export const D2D1_TEXT_ANTIALIAS_MODE_FORCE_DWORD = 4294967295;
export const D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_BITMAP_INTERPOLATION_MODE_LINEAR = 1;
export const D2D1_BITMAP_INTERPOLATION_MODE_FORCE_DWORD = 4294967295;
export const D2D1_DRAW_TEXT_OPTIONS_NO_SNAP = 1;
export const D2D1_DRAW_TEXT_OPTIONS_CLIP = 2;
export const D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT = 4;
export const D2D1_DRAW_TEXT_OPTIONS_DISABLE_COLOR_BITMAP_SNAPPING = 8;
export const D2D1_DRAW_TEXT_OPTIONS_NONE = 0;
export const D2D1_DRAW_TEXT_OPTIONS_FORCE_DWORD = 4294967295;
export const D2D1_ARC_SIZE_SMALL = 0;
export const D2D1_ARC_SIZE_LARGE = 1;
export const D2D1_ARC_SIZE_FORCE_DWORD = 4294967295;
export const D2D1_CAP_STYLE_FLAT = 0;
export const D2D1_CAP_STYLE_SQUARE = 1;
export const D2D1_CAP_STYLE_ROUND = 2;
export const D2D1_CAP_STYLE_TRIANGLE = 3;
export const D2D1_CAP_STYLE_FORCE_DWORD = 4294967295;
export const D2D1_DASH_STYLE_SOLID = 0;
export const D2D1_DASH_STYLE_DASH = 1;
export const D2D1_DASH_STYLE_DOT = 2;
export const D2D1_DASH_STYLE_DASH_DOT = 3;
export const D2D1_DASH_STYLE_DASH_DOT_DOT = 4;
export const D2D1_DASH_STYLE_CUSTOM = 5;
export const D2D1_DASH_STYLE_FORCE_DWORD = 4294967295;
export const D2D1_LINE_JOIN_MITER = 0;
export const D2D1_LINE_JOIN_BEVEL = 1;
export const D2D1_LINE_JOIN_ROUND = 2;
export const D2D1_LINE_JOIN_MITER_OR_BEVEL = 3;
export const D2D1_LINE_JOIN_FORCE_DWORD = 4294967295;
export const D2D1_COMBINE_MODE_UNION = 0;
export const D2D1_COMBINE_MODE_INTERSECT = 1;
export const D2D1_COMBINE_MODE_XOR = 2;
export const D2D1_COMBINE_MODE_EXCLUDE = 3;
export const D2D1_COMBINE_MODE_FORCE_DWORD = 4294967295;
export const D2D1_GEOMETRY_RELATION_UNKNOWN = 0;
export const D2D1_GEOMETRY_RELATION_DISJOINT = 1;
export const D2D1_GEOMETRY_RELATION_IS_CONTAINED = 2;
export const D2D1_GEOMETRY_RELATION_CONTAINS = 3;
export const D2D1_GEOMETRY_RELATION_OVERLAP = 4;
export const D2D1_GEOMETRY_RELATION_FORCE_DWORD = 4294967295;
export const D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES = 0;
export const D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES = 1;
export const D2D1_GEOMETRY_SIMPLIFICATION_OPTION_FORCE_DWORD = 4294967295;
export const D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE = 0;
export const D2D1_SWEEP_DIRECTION_CLOCKWISE = 1;
export const D2D1_SWEEP_DIRECTION_FORCE_DWORD = 4294967295;
export const D2D1_LAYER_OPTIONS_NONE = 0;
export const D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE = 1;
export const D2D1_LAYER_OPTIONS_FORCE_DWORD = 4294967295;
export const D2D1_WINDOW_STATE_NONE = 0;
export const D2D1_WINDOW_STATE_OCCLUDED = 1;
export const D2D1_WINDOW_STATE_FORCE_DWORD = 4294967295;
export const D2D1_RENDER_TARGET_TYPE_DEFAULT = 0;
export const D2D1_RENDER_TARGET_TYPE_SOFTWARE = 1;
export const D2D1_RENDER_TARGET_TYPE_HARDWARE = 2;
export const D2D1_RENDER_TARGET_TYPE_FORCE_DWORD = 4294967295;
export const D2D1_FEATURE_LEVEL_DEFAULT = 0;
export const D2D1_FEATURE_LEVEL_9 = 37120;
export const D2D1_FEATURE_LEVEL_10 = 40960;
export const D2D1_FEATURE_LEVEL_FORCE_DWORD = 4294967295;
export const D2D1_RENDER_TARGET_USAGE_NONE = 0;
export const D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING = 1;
export const D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE = 2;
export const D2D1_RENDER_TARGET_USAGE_FORCE_DWORD = 4294967295;
export const D2D1_PRESENT_OPTIONS_NONE = 0;
export const D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS = 1;
export const D2D1_PRESENT_OPTIONS_IMMEDIATELY = 2;
export const D2D1_PRESENT_OPTIONS_FORCE_DWORD = 4294967295;
export const D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE = 0;
export const D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE = 1;
export const D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_FORCE_DWORD = 4294967295;
export const D2D1_DC_INITIALIZE_MODE_COPY = 0;
export const D2D1_DC_INITIALIZE_MODE_CLEAR = 1;
export const D2D1_DC_INITIALIZE_MODE_FORCE_DWORD = 4294967295;
export const D2D1_DEBUG_LEVEL_NONE = 0;
export const D2D1_DEBUG_LEVEL_ERROR = 1;
export const D2D1_DEBUG_LEVEL_WARNING = 2;
export const D2D1_DEBUG_LEVEL_INFORMATION = 3;
export const D2D1_DEBUG_LEVEL_FORCE_DWORD = 4294967295;
export const D2D1_FACTORY_TYPE_SINGLE_THREADED = 0;
export const D2D1_FACTORY_TYPE_MULTI_THREADED = 1;
export const D2D1_FACTORY_TYPE_FORCE_DWORD = 4294967295;
export const D2D1_CHANNEL_SELECTOR_R = 0;
export const D2D1_CHANNEL_SELECTOR_G = 1;
export const D2D1_CHANNEL_SELECTOR_B = 2;
export const D2D1_CHANNEL_SELECTOR_A = 3;
export const D2D1_CHANNEL_SELECTOR_FORCE_DWORD = 4294967295;
export const D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT = 1;
export const D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL = 2;
export const D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180 = 3;
export const D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4;
export const D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 5;
export const D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90 = 6;
export const D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 7;
export const D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270 = 8;
export const D2D1_BITMAPSOURCE_ORIENTATION_FORCE_DWORD = 4294967295;
export const D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION = 0;
export const D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION = 1;
export const D2D1_GAUSSIANBLUR_PROP_BORDER_MODE = 2;
export const D2D1_GAUSSIANBLUR_PROP_FORCE_DWORD = 4294967295;
export const D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED = 0;
export const D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED = 1;
export const D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY = 2;
export const D2D1_GAUSSIANBLUR_OPTIMIZATION_FORCE_DWORD = 4294967295;
export const D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION = 0;
export const D2D1_DIRECTIONALBLUR_PROP_ANGLE = 1;
export const D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION = 2;
export const D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE = 3;
export const D2D1_DIRECTIONALBLUR_PROP_FORCE_DWORD = 4294967295;
export const D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED = 0;
export const D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED = 1;
export const D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY = 2;
export const D2D1_DIRECTIONALBLUR_OPTIMIZATION_FORCE_DWORD = 4294967295;
export const D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION = 0;
export const D2D1_SHADOW_PROP_COLOR = 1;
export const D2D1_SHADOW_PROP_OPTIMIZATION = 2;
export const D2D1_SHADOW_PROP_FORCE_DWORD = 4294967295;
export const D2D1_SHADOW_OPTIMIZATION_SPEED = 0;
export const D2D1_SHADOW_OPTIMIZATION_BALANCED = 1;
export const D2D1_SHADOW_OPTIMIZATION_QUALITY = 2;
export const D2D1_SHADOW_OPTIMIZATION_FORCE_DWORD = 4294967295;
export const D2D1_BLEND_PROP_MODE = 0;
export const D2D1_BLEND_PROP_FORCE_DWORD = 4294967295;
export const D2D1_SATURATION_PROP_SATURATION = 0;
export const D2D1_SATURATION_PROP_FORCE_DWORD = 4294967295;
export const D2D1_HUEROTATION_PROP_ANGLE = 0;
export const D2D1_HUEROTATION_PROP_FORCE_DWORD = 4294967295;
export const D2D1_COLORMATRIX_PROP_COLOR_MATRIX = 0;
export const D2D1_COLORMATRIX_PROP_ALPHA_MODE = 1;
export const D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT = 2;
export const D2D1_COLORMATRIX_PROP_FORCE_DWORD = 4294967295;
export const D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE = 0;
export const D2D1_BITMAPSOURCE_PROP_SCALE = 1;
export const D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE = 2;
export const D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION = 3;
export const D2D1_BITMAPSOURCE_PROP_ALPHA_MODE = 4;
export const D2D1_BITMAPSOURCE_PROP_ORIENTATION = 5;
export const D2D1_BITMAPSOURCE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR = 1;
export const D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC = 2;
export const D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT = 6;
export const D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR = 7;
export const D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FORCE_DWORD = 4294967295;
export const D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED = 1;
export const D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT = 2;
export const D2D1_BITMAPSOURCE_ALPHA_MODE_FORCE_DWORD = 4294967295;
export const D2D1_COMPOSITE_PROP_MODE = 0;
export const D2D1_COMPOSITE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE = 0;
export const D2D1_3DTRANSFORM_PROP_BORDER_MODE = 1;
export const D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX = 2;
export const D2D1_3DTRANSFORM_PROP_FORCE_DWORD = 4294967295;
export const D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR = 1;
export const D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC = 2;
export const D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = 4;
export const D2D1_3DTRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = 4294967295;
export const D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE = 0;
export const D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE = 1;
export const D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH = 2;
export const D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN = 3;
export const D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET = 4;
export const D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET = 5;
export const D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN = 6;
export const D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION = 7;
export const D2D1_3DPERSPECTIVETRANSFORM_PROP_FORCE_DWORD = 4294967295;
export const D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR = 1;
export const D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC = 2;
export const D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = 4;
export const D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = 4294967295;
export const D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE = 0;
export const D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE = 1;
export const D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX = 2;
export const D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS = 3;
export const D2D1_2DAFFINETRANSFORM_PROP_FORCE_DWORD = 4294967295;
export const D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE = 0;
export const D2D1_DPICOMPENSATION_PROP_BORDER_MODE = 1;
export const D2D1_DPICOMPENSATION_PROP_INPUT_DPI = 2;
export const D2D1_DPICOMPENSATION_PROP_FORCE_DWORD = 4294967295;
export const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR = 1;
export const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC = 2;
export const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC = 4;
export const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5;
export const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_FORCE_DWORD = 4294967295;
export const D2D1_SCALE_PROP_SCALE = 0;
export const D2D1_SCALE_PROP_CENTER_POINT = 1;
export const D2D1_SCALE_PROP_INTERPOLATION_MODE = 2;
export const D2D1_SCALE_PROP_BORDER_MODE = 3;
export const D2D1_SCALE_PROP_SHARPNESS = 4;
export const D2D1_SCALE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_SCALE_INTERPOLATION_MODE_LINEAR = 1;
export const D2D1_SCALE_INTERPOLATION_MODE_CUBIC = 2;
export const D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC = 4;
export const D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5;
export const D2D1_SCALE_INTERPOLATION_MODE_FORCE_DWORD = 4294967295;
export const D2D1_TURBULENCE_PROP_OFFSET = 0;
export const D2D1_TURBULENCE_PROP_SIZE = 1;
export const D2D1_TURBULENCE_PROP_BASE_FREQUENCY = 2;
export const D2D1_TURBULENCE_PROP_NUM_OCTAVES = 3;
export const D2D1_TURBULENCE_PROP_SEED = 4;
export const D2D1_TURBULENCE_PROP_NOISE = 5;
export const D2D1_TURBULENCE_PROP_STITCHABLE = 6;
export const D2D1_TURBULENCE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_DISPLACEMENTMAP_PROP_SCALE = 0;
export const D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT = 1;
export const D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT = 2;
export const D2D1_DISPLACEMENTMAP_PROP_FORCE_DWORD = 4294967295;
export const D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT = 0;
export const D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT = 1;
export const D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT = 2;
export const D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT = 3;
export const D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE = 4;
export const D2D1_COLORMANAGEMENT_PROP_QUALITY = 5;
export const D2D1_COLORMANAGEMENT_PROP_FORCE_DWORD = 4294967295;
export const D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED = 1;
export const D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT = 2;
export const D2D1_COLORMANAGEMENT_ALPHA_MODE_FORCE_DWORD = 4294967295;
export const D2D1_COLORMANAGEMENT_QUALITY_PROOF = 0;
export const D2D1_COLORMANAGEMENT_QUALITY_NORMAL = 1;
export const D2D1_COLORMANAGEMENT_QUALITY_BEST = 2;
export const D2D1_COLORMANAGEMENT_QUALITY_FORCE_DWORD = 4294967295;
export const D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL = 0;
export const D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC = 1;
export const D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION = 2;
export const D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC = 3;
export const D2D1_COLORMANAGEMENT_RENDERING_INTENT_FORCE_DWORD = 4294967295;
export const D2D1_HISTOGRAM_PROP_NUM_BINS = 0;
export const D2D1_HISTOGRAM_PROP_CHANNEL_SELECT = 1;
export const D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT = 2;
export const D2D1_HISTOGRAM_PROP_FORCE_DWORD = 4294967295;
export const D2D1_POINTSPECULAR_PROP_LIGHT_POSITION = 0;
export const D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT = 1;
export const D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT = 2;
export const D2D1_POINTSPECULAR_PROP_SURFACE_SCALE = 3;
export const D2D1_POINTSPECULAR_PROP_COLOR = 4;
export const D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 5;
export const D2D1_POINTSPECULAR_PROP_SCALE_MODE = 6;
export const D2D1_POINTSPECULAR_PROP_FORCE_DWORD = 4294967295;
export const D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_POINTSPECULAR_SCALE_MODE_LINEAR = 1;
export const D2D1_POINTSPECULAR_SCALE_MODE_CUBIC = 2;
export const D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC = 4;
export const D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5;
export const D2D1_POINTSPECULAR_SCALE_MODE_FORCE_DWORD = 4294967295;
export const D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION = 0;
export const D2D1_SPOTSPECULAR_PROP_POINTS_AT = 1;
export const D2D1_SPOTSPECULAR_PROP_FOCUS = 2;
export const D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE = 3;
export const D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT = 4;
export const D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT = 5;
export const D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE = 6;
export const D2D1_SPOTSPECULAR_PROP_COLOR = 7;
export const D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 8;
export const D2D1_SPOTSPECULAR_PROP_SCALE_MODE = 9;
export const D2D1_SPOTSPECULAR_PROP_FORCE_DWORD = 4294967295;
export const D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR = 1;
export const D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC = 2;
export const D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC = 4;
export const D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5;
export const D2D1_SPOTSPECULAR_SCALE_MODE_FORCE_DWORD = 4294967295;
export const D2D1_DISTANTSPECULAR_PROP_AZIMUTH = 0;
export const D2D1_DISTANTSPECULAR_PROP_ELEVATION = 1;
export const D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT = 2;
export const D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT = 3;
export const D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE = 4;
export const D2D1_DISTANTSPECULAR_PROP_COLOR = 5;
export const D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 6;
export const D2D1_DISTANTSPECULAR_PROP_SCALE_MODE = 7;
export const D2D1_DISTANTSPECULAR_PROP_FORCE_DWORD = 4294967295;
export const D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR = 1;
export const D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC = 2;
export const D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC = 4;
export const D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = 5;
export const D2D1_DISTANTSPECULAR_SCALE_MODE_FORCE_DWORD = 4294967295;
export const D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION = 0;
export const D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT = 1;
export const D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE = 2;
export const D2D1_POINTDIFFUSE_PROP_COLOR = 3;
export const D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 4;
export const D2D1_POINTDIFFUSE_PROP_SCALE_MODE = 5;
export const D2D1_POINTDIFFUSE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR = 1;
export const D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC = 2;
export const D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4;
export const D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5;
export const D2D1_POINTDIFFUSE_SCALE_MODE_FORCE_DWORD = 4294967295;
export const D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION = 0;
export const D2D1_SPOTDIFFUSE_PROP_POINTS_AT = 1;
export const D2D1_SPOTDIFFUSE_PROP_FOCUS = 2;
export const D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE = 3;
export const D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT = 4;
export const D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE = 5;
export const D2D1_SPOTDIFFUSE_PROP_COLOR = 6;
export const D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 7;
export const D2D1_SPOTDIFFUSE_PROP_SCALE_MODE = 8;
export const D2D1_SPOTDIFFUSE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR = 1;
export const D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC = 2;
export const D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4;
export const D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5;
export const D2D1_SPOTDIFFUSE_SCALE_MODE_FORCE_DWORD = 4294967295;
export const D2D1_DISTANTDIFFUSE_PROP_AZIMUTH = 0;
export const D2D1_DISTANTDIFFUSE_PROP_ELEVATION = 1;
export const D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT = 2;
export const D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE = 3;
export const D2D1_DISTANTDIFFUSE_PROP_COLOR = 4;
export const D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 5;
export const D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE = 6;
export const D2D1_DISTANTDIFFUSE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR = 1;
export const D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC = 2;
export const D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC = 4;
export const D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = 5;
export const D2D1_DISTANTDIFFUSE_SCALE_MODE_FORCE_DWORD = 4294967295;
export const D2D1_FLOOD_PROP_COLOR = 0;
export const D2D1_FLOOD_PROP_FORCE_DWORD = 4294967295;
export const D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT = 0;
export const D2D1_LINEARTRANSFER_PROP_RED_SLOPE = 1;
export const D2D1_LINEARTRANSFER_PROP_RED_DISABLE = 2;
export const D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT = 3;
export const D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE = 4;
export const D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE = 5;
export const D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT = 6;
export const D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE = 7;
export const D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE = 8;
export const D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT = 9;
export const D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE = 10;
export const D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE = 11;
export const D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT = 12;
export const D2D1_LINEARTRANSFER_PROP_FORCE_DWORD = 4294967295;
export const D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE = 0;
export const D2D1_GAMMATRANSFER_PROP_RED_EXPONENT = 1;
export const D2D1_GAMMATRANSFER_PROP_RED_OFFSET = 2;
export const D2D1_GAMMATRANSFER_PROP_RED_DISABLE = 3;
export const D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE = 4;
export const D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT = 5;
export const D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET = 6;
export const D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE = 7;
export const D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE = 8;
export const D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT = 9;
export const D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET = 10;
export const D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE = 11;
export const D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE = 12;
export const D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT = 13;
export const D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET = 14;
export const D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE = 15;
export const D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT = 16;
export const D2D1_GAMMATRANSFER_PROP_FORCE_DWORD = 4294967295;
export const D2D1_TABLETRANSFER_PROP_RED_TABLE = 0;
export const D2D1_TABLETRANSFER_PROP_RED_DISABLE = 1;
export const D2D1_TABLETRANSFER_PROP_GREEN_TABLE = 2;
export const D2D1_TABLETRANSFER_PROP_GREEN_DISABLE = 3;
export const D2D1_TABLETRANSFER_PROP_BLUE_TABLE = 4;
export const D2D1_TABLETRANSFER_PROP_BLUE_DISABLE = 5;
export const D2D1_TABLETRANSFER_PROP_ALPHA_TABLE = 6;
export const D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE = 7;
export const D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT = 8;
export const D2D1_TABLETRANSFER_PROP_FORCE_DWORD = 4294967295;
export const D2D1_DISCRETETRANSFER_PROP_RED_TABLE = 0;
export const D2D1_DISCRETETRANSFER_PROP_RED_DISABLE = 1;
export const D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE = 2;
export const D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE = 3;
export const D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE = 4;
export const D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE = 5;
export const D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE = 6;
export const D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE = 7;
export const D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT = 8;
export const D2D1_DISCRETETRANSFER_PROP_FORCE_DWORD = 4294967295;
export const D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH = 0;
export const D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE = 1;
export const D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X = 2;
export const D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y = 3;
export const D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX = 4;
export const D2D1_CONVOLVEMATRIX_PROP_DIVISOR = 5;
export const D2D1_CONVOLVEMATRIX_PROP_BIAS = 6;
export const D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET = 7;
export const D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA = 8;
export const D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE = 9;
export const D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT = 10;
export const D2D1_CONVOLVEMATRIX_PROP_FORCE_DWORD = 4294967295;
export const D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR = 1;
export const D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC = 2;
export const D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC = 4;
export const D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC = 5;
export const D2D1_CONVOLVEMATRIX_SCALE_MODE_FORCE_DWORD = 4294967295;
export const D2D1_BRIGHTNESS_PROP_WHITE_POINT = 0;
export const D2D1_BRIGHTNESS_PROP_BLACK_POINT = 1;
export const D2D1_BRIGHTNESS_PROP_FORCE_DWORD = 4294967295;
export const D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS = 0;
export const D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT = 1;
export const D2D1_ARITHMETICCOMPOSITE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_CROP_PROP_RECT = 0;
export const D2D1_CROP_PROP_BORDER_MODE = 1;
export const D2D1_CROP_PROP_FORCE_DWORD = 4294967295;
export const D2D1_BORDER_PROP_EDGE_MODE_X = 0;
export const D2D1_BORDER_PROP_EDGE_MODE_Y = 1;
export const D2D1_BORDER_PROP_FORCE_DWORD = 4294967295;
export const D2D1_BORDER_EDGE_MODE_CLAMP = 0;
export const D2D1_BORDER_EDGE_MODE_WRAP = 1;
export const D2D1_BORDER_EDGE_MODE_MIRROR = 2;
export const D2D1_BORDER_EDGE_MODE_FORCE_DWORD = 4294967295;
export const D2D1_MORPHOLOGY_PROP_MODE = 0;
export const D2D1_MORPHOLOGY_PROP_WIDTH = 1;
export const D2D1_MORPHOLOGY_PROP_HEIGHT = 2;
export const D2D1_MORPHOLOGY_PROP_FORCE_DWORD = 4294967295;
export const D2D1_MORPHOLOGY_MODE_ERODE = 0;
export const D2D1_MORPHOLOGY_MODE_DILATE = 1;
export const D2D1_MORPHOLOGY_MODE_FORCE_DWORD = 4294967295;
export const D2D1_TILE_PROP_RECT = 0;
export const D2D1_TILE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_ATLAS_PROP_INPUT_RECT = 0;
export const D2D1_ATLAS_PROP_INPUT_PADDING_RECT = 1;
export const D2D1_ATLAS_PROP_FORCE_DWORD = 4294967295;
export const D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT = 0;
export const D2D1_OPACITYMETADATA_PROP_FORCE_DWORD = 4294967295;
export const D2D1_PROPERTY_TYPE_UNKNOWN = 0;
export const D2D1_PROPERTY_TYPE_STRING = 1;
export const D2D1_PROPERTY_TYPE_BOOL = 2;
export const D2D1_PROPERTY_TYPE_UINT32 = 3;
export const D2D1_PROPERTY_TYPE_INT32 = 4;
export const D2D1_PROPERTY_TYPE_FLOAT = 5;
export const D2D1_PROPERTY_TYPE_VECTOR2 = 6;
export const D2D1_PROPERTY_TYPE_VECTOR3 = 7;
export const D2D1_PROPERTY_TYPE_VECTOR4 = 8;
export const D2D1_PROPERTY_TYPE_BLOB = 9;
export const D2D1_PROPERTY_TYPE_IUNKNOWN = 10;
export const D2D1_PROPERTY_TYPE_ENUM = 11;
export const D2D1_PROPERTY_TYPE_ARRAY = 12;
export const D2D1_PROPERTY_TYPE_CLSID = 13;
export const D2D1_PROPERTY_TYPE_MATRIX_3X2 = 14;
export const D2D1_PROPERTY_TYPE_MATRIX_4X3 = 15;
export const D2D1_PROPERTY_TYPE_MATRIX_4X4 = 16;
export const D2D1_PROPERTY_TYPE_MATRIX_5X4 = 17;
export const D2D1_PROPERTY_TYPE_COLOR_CONTEXT = 18;
export const D2D1_PROPERTY_TYPE_FORCE_DWORD = 4294967295;
export const D2D1_PROPERTY_CLSID = 2147483648;
export const D2D1_PROPERTY_DISPLAYNAME = 2147483649;
export const D2D1_PROPERTY_AUTHOR = 2147483650;
export const D2D1_PROPERTY_CATEGORY = 2147483651;
export const D2D1_PROPERTY_DESCRIPTION = 2147483652;
export const D2D1_PROPERTY_INPUTS = 2147483653;
export const D2D1_PROPERTY_CACHED = 2147483654;
export const D2D1_PROPERTY_PRECISION = 2147483655;
export const D2D1_PROPERTY_MIN_INPUTS = 2147483656;
export const D2D1_PROPERTY_MAX_INPUTS = 2147483657;
export const D2D1_PROPERTY_FORCE_DWORD = 4294967295;
export const D2D1_SUBPROPERTY_DISPLAYNAME = 2147483648;
export const D2D1_SUBPROPERTY_ISREADONLY = 2147483649;
export const D2D1_SUBPROPERTY_MIN = 2147483650;
export const D2D1_SUBPROPERTY_MAX = 2147483651;
export const D2D1_SUBPROPERTY_DEFAULT = 2147483652;
export const D2D1_SUBPROPERTY_FIELDS = 2147483653;
export const D2D1_SUBPROPERTY_INDEX = 2147483654;
export const D2D1_SUBPROPERTY_FORCE_DWORD = 4294967295;
export const D2D1_BITMAP_OPTIONS_NONE = 0;
export const D2D1_BITMAP_OPTIONS_TARGET = 1;
export const D2D1_BITMAP_OPTIONS_CANNOT_DRAW = 2;
export const D2D1_BITMAP_OPTIONS_CPU_READ = 4;
export const D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE = 8;
export const D2D1_BITMAP_OPTIONS_FORCE_DWORD = 4294967295;
export const D2D1_BUFFER_PRECISION_UNKNOWN = 0;
export const D2D1_BUFFER_PRECISION_8BPC_UNORM = 1;
export const D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB = 2;
export const D2D1_BUFFER_PRECISION_16BPC_UNORM = 3;
export const D2D1_BUFFER_PRECISION_16BPC_FLOAT = 4;
export const D2D1_BUFFER_PRECISION_32BPC_FLOAT = 5;
export const D2D1_BUFFER_PRECISION_FORCE_DWORD = 4294967295;
export const D2D1_MAP_OPTIONS_NONE = 0;
export const D2D1_MAP_OPTIONS_READ = 1;
export const D2D1_MAP_OPTIONS_WRITE = 2;
export const D2D1_MAP_OPTIONS_DISCARD = 4;
export const D2D1_MAP_OPTIONS_FORCE_DWORD = 4294967295;
export const D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_INTERPOLATION_MODE_LINEAR = 1;
export const D2D1_INTERPOLATION_MODE_CUBIC = 2;
export const D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_INTERPOLATION_MODE_ANISOTROPIC = 4;
export const D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5;
export const D2D1_INTERPOLATION_MODE_FORCE_DWORD = 4294967295;
export const D2D1_UNIT_MODE_DIPS = 0;
export const D2D1_UNIT_MODE_PIXELS = 1;
export const D2D1_UNIT_MODE_FORCE_DWORD = 4294967295;
export const D2D1_COLOR_SPACE_CUSTOM = 0;
export const D2D1_COLOR_SPACE_SRGB = 1;
export const D2D1_COLOR_SPACE_SCRGB = 2;
export const D2D1_COLOR_SPACE_FORCE_DWORD = 4294967295;
export const D2D1_DEVICE_CONTEXT_OPTIONS_NONE = 0;
export const D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS = 1;
export const D2D1_DEVICE_CONTEXT_OPTIONS_FORCE_DWORD = 4294967295;
export const D2D1_STROKE_TRANSFORM_TYPE_NORMAL = 0;
export const D2D1_STROKE_TRANSFORM_TYPE_FIXED = 1;
export const D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE = 2;
export const D2D1_STROKE_TRANSFORM_TYPE_FORCE_DWORD = 4294967295;
export const D2D1_PRIMITIVE_BLEND_SOURCE_OVER = 0;
export const D2D1_PRIMITIVE_BLEND_COPY = 1;
export const D2D1_PRIMITIVE_BLEND_MIN = 2;
export const D2D1_PRIMITIVE_BLEND_ADD = 3;
export const D2D1_PRIMITIVE_BLEND_MAX = 4;
export const D2D1_PRIMITIVE_BLEND_FORCE_DWORD = 4294967295;
export const D2D1_THREADING_MODE_SINGLE_THREADED = 0;
export const D2D1_THREADING_MODE_MULTI_THREADED = 1;
export const D2D1_THREADING_MODE_FORCE_DWORD = 4294967295;
export const D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT = 0;
export const D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED = 1;
export const D2D1_COLOR_INTERPOLATION_MODE_FORCE_DWORD = 4294967295;
export const D2D1_LAYER_OPTIONS1_NONE = 0;
export const D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND = 1;
export const D2D1_LAYER_OPTIONS1_IGNORE_ALPHA = 2;
export const D2D1_LAYER_OPTIONS1_FORCE_DWORD = 4294967295;
export const D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT = 0;
export const D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE = 1;
export const D2D1_PRINT_FONT_SUBSET_MODE_NONE = 2;
export const D2D1_PRINT_FONT_SUBSET_MODE_FORCE_DWORD = 4294967295;
export const D2D1_CHANGE_TYPE_NONE = 0;
export const D2D1_CHANGE_TYPE_PROPERTIES = 1;
export const D2D1_CHANGE_TYPE_CONTEXT = 2;
export const D2D1_CHANGE_TYPE_GRAPH = 3;
export const D2D1_CHANGE_TYPE_FORCE_DWORD = 4294967295;
export const D2D1_PIXEL_OPTIONS_NONE = 0;
export const D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING = 1;
export const D2D1_PIXEL_OPTIONS_FORCE_DWORD = 4294967295;
export const D2D1_VERTEX_OPTIONS_NONE = 0;
export const D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR = 1;
export const D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER = 2;
export const D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP = 4;
export const D2D1_VERTEX_OPTIONS_FORCE_DWORD = 4294967295;
export const D2D1_VERTEX_USAGE_STATIC = 0;
export const D2D1_VERTEX_USAGE_DYNAMIC = 1;
export const D2D1_VERTEX_USAGE_FORCE_DWORD = 4294967295;
export const D2D1_BLEND_OPERATION_ADD = 1;
export const D2D1_BLEND_OPERATION_SUBTRACT = 2;
export const D2D1_BLEND_OPERATION_REV_SUBTRACT = 3;
export const D2D1_BLEND_OPERATION_MIN = 4;
export const D2D1_BLEND_OPERATION_MAX = 5;
export const D2D1_BLEND_OPERATION_FORCE_DWORD = 4294967295;
export const D2D1_BLEND_ZERO = 1;
export const D2D1_BLEND_ONE = 2;
export const D2D1_BLEND_SRC_COLOR = 3;
export const D2D1_BLEND_INV_SRC_COLOR = 4;
export const D2D1_BLEND_SRC_ALPHA = 5;
export const D2D1_BLEND_INV_SRC_ALPHA = 6;
export const D2D1_BLEND_DEST_ALPHA = 7;
export const D2D1_BLEND_INV_DEST_ALPHA = 8;
export const D2D1_BLEND_DEST_COLOR = 9;
export const D2D1_BLEND_INV_DEST_COLOR = 10;
export const D2D1_BLEND_SRC_ALPHA_SAT = 11;
export const D2D1_BLEND_BLEND_FACTOR = 14;
export const D2D1_BLEND_INV_BLEND_FACTOR = 15;
export const D2D1_BLEND_FORCE_DWORD = 4294967295;
export const D2D1_CHANNEL_DEPTH_DEFAULT = 0;
export const D2D1_CHANNEL_DEPTH_1 = 1;
export const D2D1_CHANNEL_DEPTH_4 = 4;
export const D2D1_CHANNEL_DEPTH_FORCE_DWORD = 4294967295;
export const D2D1_FILTER_MIN_MAG_MIP_POINT = 0;
export const D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1;
export const D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4;
export const D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5;
export const D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16;
export const D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17;
export const D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20;
export const D2D1_FILTER_MIN_MAG_MIP_LINEAR = 21;
export const D2D1_FILTER_ANISOTROPIC = 85;
export const D2D1_FILTER_FORCE_DWORD = 4294967295;
export const D2D1_FEATURE_DOUBLES = 0;
export const D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS = 1;
export const D2D1_FEATURE_FORCE_DWORD = 4294967295;
export const D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING = 0;
export const D2D1_YCBCR_PROP_TRANSFORM_MATRIX = 1;
export const D2D1_YCBCR_PROP_INTERPOLATION_MODE = 2;
export const D2D1_YCBCR_PROP_FORCE_DWORD = 4294967295;
export const D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO = 0;
export const D2D1_YCBCR_CHROMA_SUBSAMPLING_420 = 1;
export const D2D1_YCBCR_CHROMA_SUBSAMPLING_422 = 2;
export const D2D1_YCBCR_CHROMA_SUBSAMPLING_444 = 3;
export const D2D1_YCBCR_CHROMA_SUBSAMPLING_440 = 4;
export const D2D1_YCBCR_CHROMA_SUBSAMPLING_FORCE_DWORD = 4294967295;
export const D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_YCBCR_INTERPOLATION_MODE_LINEAR = 1;
export const D2D1_YCBCR_INTERPOLATION_MODE_CUBIC = 2;
export const D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC = 4;
export const D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5;
export const D2D1_YCBCR_INTERPOLATION_MODE_FORCE_DWORD = 4294967295;
export const D2D1_CONTRAST_PROP_CONTRAST = 0;
export const D2D1_CONTRAST_PROP_CLAMP_INPUT = 1;
export const D2D1_CONTRAST_PROP_FORCE_DWORD = 4294967295;
export const D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE = 0;
export const D2D1_RGBTOHUE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE = 0;
export const D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = 1;
export const D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_FORCE_DWORD = 4294967295;
export const D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE = 0;
export const D2D1_HUETORGB_PROP_FORCE_DWORD = 4294967295;
export const D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE = 0;
export const D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = 1;
export const D2D1_HUETORGB_INPUT_COLOR_SPACE_FORCE_DWORD = 4294967295;
export const D2D1_CHROMAKEY_PROP_COLOR = 0;
export const D2D1_CHROMAKEY_PROP_TOLERANCE = 1;
export const D2D1_CHROMAKEY_PROP_INVERT_ALPHA = 2;
export const D2D1_CHROMAKEY_PROP_FEATHER = 3;
export const D2D1_CHROMAKEY_PROP_FORCE_DWORD = 4294967295;
export const D2D1_EMBOSS_PROP_HEIGHT = 0;
export const D2D1_EMBOSS_PROP_DIRECTION = 1;
export const D2D1_EMBOSS_PROP_FORCE_DWORD = 4294967295;
export const D2D1_EXPOSURE_PROP_EXPOSURE_VALUE = 0;
export const D2D1_EXPOSURE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_POSTERIZE_PROP_RED_VALUE_COUNT = 0;
export const D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT = 1;
export const D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT = 2;
export const D2D1_POSTERIZE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_SEPIA_PROP_INTENSITY = 0;
export const D2D1_SEPIA_PROP_ALPHA_MODE = 1;
export const D2D1_SEPIA_PROP_FORCE_DWORD = 4294967295;
export const D2D1_SHARPEN_PROP_SHARPNESS = 0;
export const D2D1_SHARPEN_PROP_THRESHOLD = 1;
export const D2D1_SHARPEN_PROP_FORCE_DWORD = 4294967295;
export const D2D1_STRAIGHTEN_PROP_ANGLE = 0;
export const D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE = 1;
export const D2D1_STRAIGHTEN_PROP_SCALE_MODE = 2;
export const D2D1_STRAIGHTEN_PROP_FORCE_DWORD = 4294967295;
export const D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_STRAIGHTEN_SCALE_MODE_LINEAR = 1;
export const D2D1_STRAIGHTEN_SCALE_MODE_CUBIC = 2;
export const D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC = 4;
export const D2D1_STRAIGHTEN_SCALE_MODE_FORCE_DWORD = 4294967295;
export const D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE = 0;
export const D2D1_TEMPERATUREANDTINT_PROP_TINT = 1;
export const D2D1_TEMPERATUREANDTINT_PROP_FORCE_DWORD = 4294967295;
export const D2D1_VIGNETTE_PROP_COLOR = 0;
export const D2D1_VIGNETTE_PROP_TRANSITION_SIZE = 1;
export const D2D1_VIGNETTE_PROP_STRENGTH = 2;
export const D2D1_VIGNETTE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_EDGEDETECTION_PROP_STRENGTH = 0;
export const D2D1_EDGEDETECTION_PROP_BLUR_RADIUS = 1;
export const D2D1_EDGEDETECTION_PROP_MODE = 2;
export const D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES = 3;
export const D2D1_EDGEDETECTION_PROP_ALPHA_MODE = 4;
export const D2D1_EDGEDETECTION_PROP_FORCE_DWORD = 4294967295;
export const D2D1_EDGEDETECTION_MODE_SOBEL = 0;
export const D2D1_EDGEDETECTION_MODE_PREWITT = 1;
export const D2D1_EDGEDETECTION_MODE_FORCE_DWORD = 4294967295;
export const D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS = 0;
export const D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS = 1;
export const D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY = 2;
export const D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA = 3;
export const D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS = 4;
export const D2D1_HIGHLIGHTSANDSHADOWS_PROP_FORCE_DWORD = 4294967295;
export const D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR = 0;
export const D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB = 1;
export const D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_FORCE_DWORD = 4294967295;
export const D2D1_LOOKUPTABLE3D_PROP_LUT = 0;
export const D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE = 1;
export const D2D1_LOOKUPTABLE3D_PROP_FORCE_DWORD = 4294967295;
export const D2D1_OPACITY_PROP_OPACITY = 0;
export const D2D1_OPACITY_PROP_FORCE_DWORD = 4294967295;
export const D2D1_CROSSFADE_PROP_WEIGHT = 0;
export const D2D1_CROSSFADE_PROP_FORCE_DWORD = 4294967295;
export const D2D1_TINT_PROP_COLOR = 0;
export const D2D1_TINT_PROP_CLAMP_OUTPUT = 1;
export const D2D1_TINT_PROP_FORCE_DWORD = 4294967295;
export const D2D1_WHITELEVELADJUSTMENT_PROP_INPUT_WHITE_LEVEL = 0;
export const D2D1_WHITELEVELADJUSTMENT_PROP_OUTPUT_WHITE_LEVEL = 1;
export const D2D1_WHITELEVELADJUSTMENT_PROP_FORCE_DWORD = 4294967295;
export const D2D1_HDRTONEMAP_PROP_INPUT_MAX_LUMINANCE = 0;
export const D2D1_HDRTONEMAP_PROP_OUTPUT_MAX_LUMINANCE = 1;
export const D2D1_HDRTONEMAP_PROP_DISPLAY_MODE = 2;
export const D2D1_HDRTONEMAP_PROP_FORCE_DWORD = 4294967295;
export const D2D1_HDRTONEMAP_DISPLAY_MODE_SDR = 0;
export const D2D1_HDRTONEMAP_DISPLAY_MODE_HDR = 1;
export const D2D1_HDRTONEMAP_DISPLAY_MODE_FORCE_DWORD = 4294967295;
export const D2D1_RENDERING_PRIORITY_NORMAL = 0;
export const D2D1_RENDERING_PRIORITY_LOW = 1;
export const D2D1_RENDERING_PRIORITY_FORCE_DWORD = 4294967295;
export const D2D1_SVG_PAINT_TYPE_NONE = 0;
export const D2D1_SVG_PAINT_TYPE_COLOR = 1;
export const D2D1_SVG_PAINT_TYPE_CURRENT_COLOR = 2;
export const D2D1_SVG_PAINT_TYPE_URI = 3;
export const D2D1_SVG_PAINT_TYPE_URI_NONE = 4;
export const D2D1_SVG_PAINT_TYPE_URI_COLOR = 5;
export const D2D1_SVG_PAINT_TYPE_URI_CURRENT_COLOR = 6;
export const D2D1_SVG_PAINT_TYPE_FORCE_DWORD = 4294967295;
export const D2D1_SVG_LENGTH_UNITS_NUMBER = 0;
export const D2D1_SVG_LENGTH_UNITS_PERCENTAGE = 1;
export const D2D1_SVG_LENGTH_UNITS_FORCE_DWORD = 4294967295;
export const D2D1_SVG_DISPLAY_INLINE = 0;
export const D2D1_SVG_DISPLAY_NONE = 1;
export const D2D1_SVG_DISPLAY_FORCE_DWORD = 4294967295;
export const D2D1_SVG_VISIBILITY_VISIBLE = 0;
export const D2D1_SVG_VISIBILITY_HIDDEN = 1;
export const D2D1_SVG_VISIBILITY_FORCE_DWORD = 4294967295;
export const D2D1_SVG_OVERFLOW_VISIBLE = 0;
export const D2D1_SVG_OVERFLOW_HIDDEN = 1;
export const D2D1_SVG_OVERFLOW_FORCE_DWORD = 4294967295;
export const D2D1_SVG_LINE_CAP_BUTT = 0;
export const D2D1_SVG_LINE_CAP_SQUARE = 1;
export const D2D1_SVG_LINE_CAP_ROUND = 2;
export const D2D1_SVG_LINE_CAP_FORCE_DWORD = 4294967295;
export const D2D1_SVG_LINE_JOIN_BEVEL = 1;
export const D2D1_SVG_LINE_JOIN_MITER = 3;
export const D2D1_SVG_LINE_JOIN_ROUND = 2;
export const D2D1_SVG_LINE_JOIN_FORCE_DWORD = 4294967295;
export const D2D1_SVG_ASPECT_ALIGN_NONE = 0;
export const D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MIN = 1;
export const D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MIN = 2;
export const D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MIN = 3;
export const D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MID = 4;
export const D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MID = 5;
export const D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MID = 6;
export const D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MAX = 7;
export const D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MAX = 8;
export const D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MAX = 9;
export const D2D1_SVG_ASPECT_ALIGN_FORCE_DWORD = 4294967295;
export const D2D1_SVG_ASPECT_SCALING_MEET = 0;
export const D2D1_SVG_ASPECT_SCALING_SLICE = 1;
export const D2D1_SVG_ASPECT_SCALING_FORCE_DWORD = 4294967295;
export const D2D1_SVG_PATH_COMMAND_CLOSE_PATH = 0;
export const D2D1_SVG_PATH_COMMAND_MOVE_ABSOLUTE = 1;
export const D2D1_SVG_PATH_COMMAND_MOVE_RELATIVE = 2;
export const D2D1_SVG_PATH_COMMAND_LINE_ABSOLUTE = 3;
export const D2D1_SVG_PATH_COMMAND_LINE_RELATIVE = 4;
export const D2D1_SVG_PATH_COMMAND_CUBIC_ABSOLUTE = 5;
export const D2D1_SVG_PATH_COMMAND_CUBIC_RELATIVE = 6;
export const D2D1_SVG_PATH_COMMAND_QUADRADIC_ABSOLUTE = 7;
export const D2D1_SVG_PATH_COMMAND_QUADRADIC_RELATIVE = 8;
export const D2D1_SVG_PATH_COMMAND_ARC_ABSOLUTE = 9;
export const D2D1_SVG_PATH_COMMAND_ARC_RELATIVE = 10;
export const D2D1_SVG_PATH_COMMAND_HORIZONTAL_ABSOLUTE = 11;
export const D2D1_SVG_PATH_COMMAND_HORIZONTAL_RELATIVE = 12;
export const D2D1_SVG_PATH_COMMAND_VERTICAL_ABSOLUTE = 13;
export const D2D1_SVG_PATH_COMMAND_VERTICAL_RELATIVE = 14;
export const D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_ABSOLUTE = 15;
export const D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_RELATIVE = 16;
export const D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_ABSOLUTE = 17;
export const D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_RELATIVE = 18;
export const D2D1_SVG_PATH_COMMAND_FORCE_DWORD = 4294967295;
export const D2D1_SVG_UNIT_TYPE_USER_SPACE_ON_USE = 0;
export const D2D1_SVG_UNIT_TYPE_OBJECT_BOUNDING_BOX = 1;
export const D2D1_SVG_UNIT_TYPE_FORCE_DWORD = 4294967295;
export const D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG = 0;
export const D2D1_SVG_ATTRIBUTE_STRING_TYPE_ID = 1;
export const D2D1_SVG_ATTRIBUTE_STRING_TYPE_FORCE_DWORD = 4294967295;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_FLOAT = 0;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_COLOR = 1;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_FILL_MODE = 2;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_DISPLAY = 3;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_OVERFLOW = 4;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_CAP = 5;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_JOIN = 6;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_VISIBILITY = 7;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_MATRIX = 8;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_UNIT_TYPE = 9;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_EXTEND_MODE = 10;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_PRESERVE_ASPECT_RATIO = 11;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_VIEWBOX = 12;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_LENGTH = 13;
export const D2D1_SVG_ATTRIBUTE_POD_TYPE_FORCE_DWORD = 4294967295;
export const D2D1_INK_NIB_SHAPE_ROUND = 0;
export const D2D1_INK_NIB_SHAPE_SQUARE = 1;
export const D2D1_INK_NIB_SHAPE_FORCE_DWORD = 4294967295;
export const D2D1_ORIENTATION_DEFAULT = 1;
export const D2D1_ORIENTATION_FLIP_HORIZONTAL = 2;
export const D2D1_ORIENTATION_ROTATE_CLOCKWISE180 = 3;
export const D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4;
export const D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 5;
export const D2D1_ORIENTATION_ROTATE_CLOCKWISE270 = 6;
export const D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 7;
export const D2D1_ORIENTATION_ROTATE_CLOCKWISE90 = 8;
export const D2D1_ORIENTATION_FORCE_DWORD = 4294967295;
export const D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE = 0;
export const D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE = 1;
export const D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND = 2;
export const D2D1_IMAGE_SOURCE_LOADING_OPTIONS_FORCE_DWORD = 4294967295;
export const D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE = 0;
export const D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION = 1;
export const D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_FORCE_DWORD = 4294967295;
export const D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE = 0;
export const D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE = 1;
export const D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_FORCE_DWORD = 4294967295;
export const D2D1_PATCH_EDGE_MODE_ALIASED = 0;
export const D2D1_PATCH_EDGE_MODE_ANTIALIASED = 1;
export const D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED = 2;
export const D2D1_PATCH_EDGE_MODE_FORCE_DWORD = 4294967295;
export const D2D1_SPRITE_OPTIONS_NONE = 0;
export const D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE = 1;
export const D2D1_SPRITE_OPTIONS_FORCE_DWORD = 4294967295;
export const D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DEFAULT = 0;
export const D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DISABLE = 1;
export const D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_FORCE_DWORD = 4294967295;
export const D2D1_GAMMA1_G22 = 0;
export const D2D1_GAMMA1_G10 = 1;
export const D2D1_GAMMA1_G2084 = 2;
export const D2D1_GAMMA1_FORCE_DWORD = 4294967295;
export const D2D1_COLOR_CONTEXT_TYPE_ICC = 0;
export const D2D1_COLOR_CONTEXT_TYPE_SIMPLE = 1;
export const D2D1_COLOR_CONTEXT_TYPE_DXGI = 2;
export const D2D1_COLOR_CONTEXT_TYPE_FORCE_DWORD = 4294967295;
export const D2D1_FIGURE_BEGIN_FILLED = 0;
export const D2D1_FIGURE_BEGIN_HOLLOW = 1;
export const D2D1_FIGURE_BEGIN_FORCE_DWORD = 4294967295;
export const D2D1_FIGURE_END_OPEN = 0;
export const D2D1_FIGURE_END_CLOSED = 1;
export const D2D1_FIGURE_END_FORCE_DWORD = 4294967295;
export const D2D1_PATH_SEGMENT_NONE = 0;
export const D2D1_PATH_SEGMENT_FORCE_UNSTROKED = 1;
export const D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN = 2;
export const D2D1_PATH_SEGMENT_FORCE_DWORD = 4294967295;
export const D2D1_FILL_MODE_ALTERNATE = 0;
export const D2D1_FILL_MODE_WINDING = 1;
export const D2D1_FILL_MODE_FORCE_DWORD = 4294967295;
export const D2D1_BORDER_MODE_SOFT = 0;
export const D2D1_BORDER_MODE_HARD = 1;
export const D2D1_BORDER_MODE_FORCE_DWORD = 4294967295;
export const D2D1_BLEND_MODE_MULTIPLY = 0;
export const D2D1_BLEND_MODE_SCREEN = 1;
export const D2D1_BLEND_MODE_DARKEN = 2;
export const D2D1_BLEND_MODE_LIGHTEN = 3;
export const D2D1_BLEND_MODE_DISSOLVE = 4;
export const D2D1_BLEND_MODE_COLOR_BURN = 5;
export const D2D1_BLEND_MODE_LINEAR_BURN = 6;
export const D2D1_BLEND_MODE_DARKER_COLOR = 7;
export const D2D1_BLEND_MODE_LIGHTER_COLOR = 8;
export const D2D1_BLEND_MODE_COLOR_DODGE = 9;
export const D2D1_BLEND_MODE_LINEAR_DODGE = 10;
export const D2D1_BLEND_MODE_OVERLAY = 11;
export const D2D1_BLEND_MODE_SOFT_LIGHT = 12;
export const D2D1_BLEND_MODE_HARD_LIGHT = 13;
export const D2D1_BLEND_MODE_VIVID_LIGHT = 14;
export const D2D1_BLEND_MODE_LINEAR_LIGHT = 15;
export const D2D1_BLEND_MODE_PIN_LIGHT = 16;
export const D2D1_BLEND_MODE_HARD_MIX = 17;
export const D2D1_BLEND_MODE_DIFFERENCE = 18;
export const D2D1_BLEND_MODE_EXCLUSION = 19;
export const D2D1_BLEND_MODE_HUE = 20;
export const D2D1_BLEND_MODE_SATURATION = 21;
export const D2D1_BLEND_MODE_COLOR = 22;
export const D2D1_BLEND_MODE_LUMINOSITY = 23;
export const D2D1_BLEND_MODE_SUBTRACT = 24;
export const D2D1_BLEND_MODE_DIVISION = 25;
export const D2D1_BLEND_MODE_FORCE_DWORD = 4294967295;
export const D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED = 1;
export const D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT = 2;
export const D2D1_COLORMATRIX_ALPHA_MODE_FORCE_DWORD = 4294967295;
export const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0;
export const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_LINEAR = 1;
export const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_CUBIC = 2;
export const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 3;
export const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = 4;
export const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = 5;
export const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = 4294967295;
export const D2D1_TURBULENCE_NOISE_FRACTAL_SUM = 0;
export const D2D1_TURBULENCE_NOISE_TURBULENCE = 1;
export const D2D1_TURBULENCE_NOISE_FORCE_DWORD = 4294967295;
export const D2D1_COMPOSITE_MODE_SOURCE_OVER = 0;
export const D2D1_COMPOSITE_MODE_DESTINATION_OVER = 1;
export const D2D1_COMPOSITE_MODE_SOURCE_IN = 2;
export const D2D1_COMPOSITE_MODE_DESTINATION_IN = 3;
export const D2D1_COMPOSITE_MODE_SOURCE_OUT = 4;
export const D2D1_COMPOSITE_MODE_DESTINATION_OUT = 5;
export const D2D1_COMPOSITE_MODE_SOURCE_ATOP = 6;
export const D2D1_COMPOSITE_MODE_DESTINATION_ATOP = 7;
export const D2D1_COMPOSITE_MODE_XOR = 8;
export const D2D1_COMPOSITE_MODE_PLUS = 9;
export const D2D1_COMPOSITE_MODE_SOURCE_COPY = 10;
export const D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY = 11;
export const D2D1_COMPOSITE_MODE_MASK_INVERT = 12;
export const D2D1_COMPOSITE_MODE_FORCE_DWORD = 4294967295;

// Structs

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_COLOR_F (size: 16)
 */
export interface D2D_COLOR_F {
  /** f32 */
  r: number;
  /** f32 */
  g: number;
  /** f32 */
  b: number;
  /** f32 */
  a: number;
}

export const sizeofD2D_COLOR_F = 16;

export function allocD2D_COLOR_F(data?: Partial<D2D_COLOR_F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_COLOR_F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.r !== undefined) view.setFloat32(0, Number(data.r), true);
  // 0x04: f32
  if (data?.g !== undefined) view.setFloat32(4, Number(data.g), true);
  // 0x08: f32
  if (data?.b !== undefined) view.setFloat32(8, Number(data.b), true);
  // 0x0c: f32
  if (data?.a !== undefined) view.setFloat32(12, Number(data.a), true);
  return buf;
}

export class D2D_COLOR_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get r(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get g(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get b(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get a(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set r(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set g(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set b(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set a(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D1_COLOR_F (size: 16)
 */
export interface D2D1_COLOR_F {
  /** f32 */
  r: number;
  /** f32 */
  g: number;
  /** f32 */
  b: number;
  /** f32 */
  a: number;
}

export const sizeofD2D1_COLOR_F = 16;

export function allocD2D1_COLOR_F(data?: Partial<D2D1_COLOR_F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_COLOR_F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.r !== undefined) view.setFloat32(0, Number(data.r), true);
  // 0x04: f32
  if (data?.g !== undefined) view.setFloat32(4, Number(data.g), true);
  // 0x08: f32
  if (data?.b !== undefined) view.setFloat32(8, Number(data.b), true);
  // 0x0c: f32
  if (data?.a !== undefined) view.setFloat32(12, Number(data.a), true);
  return buf;
}

export class D2D1_COLOR_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get r(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get g(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get b(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get a(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set r(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set g(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set b(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set a(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D1_PIXEL_FORMAT (size: 8)
 */
export interface D2D1_PIXEL_FORMAT {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D1_ALPHA_MODE */
  alphaMode: D2D1_ALPHA_MODE;
}

export const sizeofD2D1_PIXEL_FORMAT = 8;

export function allocD2D1_PIXEL_FORMAT(data?: Partial<D2D1_PIXEL_FORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_PIXEL_FORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.format !== undefined) view.setUint32(0, Number(data.format), true);
  // 0x04: u32
  if (data?.alphaMode !== undefined) view.setUint32(4, Number(data.alphaMode), true);
  return buf;
}

export class D2D1_PIXEL_FORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get format(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get alphaMode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set format(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set alphaMode(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2U (size: 8)
 */
export interface D2D_POINT_2U {
  /** u32 */
  x: number;
  /** u32 */
  y: number;
}

export const sizeofD2D_POINT_2U = 8;

export function allocD2D_POINT_2U(data?: Partial<D2D_POINT_2U>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_POINT_2U);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.x !== undefined) view.setUint32(0, Number(data.x), true);
  // 0x04: u32
  if (data?.y !== undefined) view.setUint32(4, Number(data.y), true);
  return buf;
}

export class D2D_POINT_2UView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get x(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get y(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set x(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set y(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F (size: 8)
 */
export interface D2D_POINT_2F {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
}

export const sizeofD2D_POINT_2F = 8;

export function allocD2D_POINT_2F(data?: Partial<D2D_POINT_2F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_POINT_2F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  return buf;
}

export class D2D_POINT_2FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_VECTOR_2F (size: 8)
 */
export interface D2D_VECTOR_2F {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
}

export const sizeofD2D_VECTOR_2F = 8;

export function allocD2D_VECTOR_2F(data?: Partial<D2D_VECTOR_2F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_VECTOR_2F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  return buf;
}

export class D2D_VECTOR_2FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_VECTOR_3F (size: 16)
 */
export interface D2D_VECTOR_3F {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
}

export const sizeofD2D_VECTOR_3F = 16;

export function allocD2D_VECTOR_3F(data?: Partial<D2D_VECTOR_3F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_VECTOR_3F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: pad4
  return buf;
}

export class D2D_VECTOR_3FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get z(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set z(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_VECTOR_4F (size: 16)
 */
export interface D2D_VECTOR_4F {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
  /** f32 */
  w: number;
}

export const sizeofD2D_VECTOR_4F = 16;

export function allocD2D_VECTOR_4F(data?: Partial<D2D_VECTOR_4F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_VECTOR_4F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: f32
  if (data?.w !== undefined) view.setFloat32(12, Number(data.w), true);
  return buf;
}

export class D2D_VECTOR_4FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get z(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get w(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set z(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set w(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_RECT_F (size: 16)
 */
export interface D2D_RECT_F {
  /** f32 */
  left: number;
  /** f32 */
  top: number;
  /** f32 */
  right: number;
  /** f32 */
  bottom: number;
}

export const sizeofD2D_RECT_F = 16;

export function allocD2D_RECT_F(data?: Partial<D2D_RECT_F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_RECT_F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.left !== undefined) view.setFloat32(0, Number(data.left), true);
  // 0x04: f32
  if (data?.top !== undefined) view.setFloat32(4, Number(data.top), true);
  // 0x08: f32
  if (data?.right !== undefined) view.setFloat32(8, Number(data.right), true);
  // 0x0c: f32
  if (data?.bottom !== undefined) view.setFloat32(12, Number(data.bottom), true);
  return buf;
}

export class D2D_RECT_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get left(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get top(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get right(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get bottom(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set left(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set top(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set right(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set bottom(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_RECT_U (size: 16)
 */
export interface D2D_RECT_U {
  /** u32 */
  left: number;
  /** u32 */
  top: number;
  /** u32 */
  right: number;
  /** u32 */
  bottom: number;
}

export const sizeofD2D_RECT_U = 16;

export function allocD2D_RECT_U(data?: Partial<D2D_RECT_U>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_RECT_U);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.left !== undefined) view.setUint32(0, Number(data.left), true);
  // 0x04: u32
  if (data?.top !== undefined) view.setUint32(4, Number(data.top), true);
  // 0x08: u32
  if (data?.right !== undefined) view.setUint32(8, Number(data.right), true);
  // 0x0c: u32
  if (data?.bottom !== undefined) view.setUint32(12, Number(data.bottom), true);
  return buf;
}

export class D2D_RECT_UView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get left(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get top(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get right(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get bottom(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set left(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set top(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set right(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set bottom(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_SIZE_F (size: 8)
 */
export interface D2D_SIZE_F {
  /** f32 */
  width: number;
  /** f32 */
  height: number;
}

export const sizeofD2D_SIZE_F = 8;

export function allocD2D_SIZE_F(data?: Partial<D2D_SIZE_F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_SIZE_F);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.width !== undefined) view.setFloat32(0, Number(data.width), true);
  // 0x04: f32
  if (data?.height !== undefined) view.setFloat32(4, Number(data.height), true);
  return buf;
}

export class D2D_SIZE_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get width(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get height(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x00: f32
  set width(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set height(value: number) {
    this.view.setFloat32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_SIZE_U (size: 8)
 */
export interface D2D_SIZE_U {
  /** u32 */
  width: number;
  /** u32 */
  height: number;
}

export const sizeofD2D_SIZE_U = 8;

export function allocD2D_SIZE_U(data?: Partial<D2D_SIZE_U>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_SIZE_U);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.width !== undefined) view.setUint32(0, Number(data.width), true);
  // 0x04: u32
  if (data?.height !== undefined) view.setUint32(4, Number(data.height), true);
  return buf;
}

export class D2D_SIZE_UView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set height(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: number | bigint;
  /** u64 */
  Region: number | bigint;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, util.toBigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, util.toBigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): number | bigint {
    return this.view.getBigUint64(0, true);
  }

  // 0x08: u64
  get Region(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x00: u64
  set Alignment(value: number | bigint) {
    this.view.setBigUint64(0, util.toBigInt(value), true);
  }

  // 0x08: u64
  set Region(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : util.toBigInt(util.toPointer(data.X)), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_MATRIX_3X2_F (size: 8)
 */
export interface D2D_MATRIX_3X2_F {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D_MATRIX_3X2_F = 8;

export function allocD2D_MATRIX_3X2_F(data?: Partial<D2D_MATRIX_3X2_F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_MATRIX_3X2_F);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D2D_MATRIX_3X2_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_MATRIX_4X3_F (size: 8)
 */
export interface D2D_MATRIX_4X3_F {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D_MATRIX_4X3_F = 8;

export function allocD2D_MATRIX_4X3_F(data?: Partial<D2D_MATRIX_4X3_F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_MATRIX_4X3_F);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D2D_MATRIX_4X3_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_MATRIX_4X4_F (size: 8)
 */
export interface D2D_MATRIX_4X4_F {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D_MATRIX_4X4_F = 8;

export function allocD2D_MATRIX_4X4_F(data?: Partial<D2D_MATRIX_4X4_F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_MATRIX_4X4_F);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D2D_MATRIX_4X4_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D_MATRIX_5X4_F (size: 8)
 */
export interface D2D_MATRIX_5X4_F {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D_MATRIX_5X4_F = 8;

export function allocD2D_MATRIX_5X4_F(data?: Partial<D2D_MATRIX_5X4_F>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D_MATRIX_5X4_F);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : util.toBigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

export class D2D_MATRIX_5X4_FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES (size: 16)
 */
export interface D2D1_BITMAP_PROPERTIES {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D1_PIXEL_FORMAT */
  pixelFormat: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  dpiX: number;
  /** f32 */
  dpiY: number;
}

export const sizeofD2D1_BITMAP_PROPERTIES = 16;

export function allocD2D1_BITMAP_PROPERTIES(data?: Partial<D2D1_BITMAP_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_BITMAP_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pixelFormat !== undefined) view.setBigUint64(0, data.pixelFormat === null ? 0n : util.toBigInt(util.toPointer(data.pixelFormat)), true);
  // 0x08: f32
  if (data?.dpiX !== undefined) view.setFloat32(8, Number(data.dpiX), true);
  // 0x0c: f32
  if (data?.dpiY !== undefined) view.setFloat32(12, Number(data.dpiY), true);
  return buf;
}

export class D2D1_BITMAP_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pixelFormat(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: f32
  get dpiX(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get dpiY(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: pointer
  set pixelFormat(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: f32
  set dpiX(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set dpiY(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_GRADIENT_STOP (size: 16)
 */
export interface D2D1_GRADIENT_STOP {
  /** f32 */
  position: number;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D1_COLOR_F */
  color: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D1_GRADIENT_STOP = 16;

export function allocD2D1_GRADIENT_STOP(data?: Partial<D2D1_GRADIENT_STOP>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_GRADIENT_STOP);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.position !== undefined) view.setFloat32(0, Number(data.position), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.color !== undefined) view.setBigUint64(8, data.color === null ? 0n : util.toBigInt(util.toPointer(data.color)), true);
  return buf;
}

export class D2D1_GRADIENT_STOPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get position(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get color(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: f32
  set position(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set color(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_BRUSH_PROPERTIES (size: 16)
 */
export interface D2D1_BRUSH_PROPERTIES {
  /** f32 */
  opacity: number;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_MATRIX_3X2_F */
  transform: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D1_BRUSH_PROPERTIES = 16;

export function allocD2D1_BRUSH_PROPERTIES(data?: Partial<D2D1_BRUSH_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_BRUSH_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.opacity !== undefined) view.setFloat32(0, Number(data.opacity), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.transform !== undefined) view.setBigUint64(8, data.transform === null ? 0n : util.toBigInt(util.toPointer(data.transform)), true);
  return buf;
}

export class D2D1_BRUSH_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get opacity(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get transform(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: f32
  set opacity(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set transform(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES (size: 16)
 */
export interface D2D1_BITMAP_BRUSH_PROPERTIES {
  /** Windows.Win32.Graphics.Direct2D.D2D1_EXTEND_MODE */
  extendModeX: D2D1_EXTEND_MODE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_EXTEND_MODE */
  extendModeY: D2D1_EXTEND_MODE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_BITMAP_INTERPOLATION_MODE */
  interpolationMode: D2D1_BITMAP_INTERPOLATION_MODE;
}

export const sizeofD2D1_BITMAP_BRUSH_PROPERTIES = 16;

export function allocD2D1_BITMAP_BRUSH_PROPERTIES(data?: Partial<D2D1_BITMAP_BRUSH_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_BITMAP_BRUSH_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.extendModeX !== undefined) view.setUint32(0, Number(data.extendModeX), true);
  // 0x04: u32
  if (data?.extendModeY !== undefined) view.setUint32(4, Number(data.extendModeY), true);
  // 0x08: u32
  if (data?.interpolationMode !== undefined) view.setUint32(8, Number(data.interpolationMode), true);
  // 0x0c: pad4
  return buf;
}

export class D2D1_BITMAP_BRUSH_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get extendModeX(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get extendModeY(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get interpolationMode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set extendModeX(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set extendModeY(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set interpolationMode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES (size: 16)
 */
export interface D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  startPoint: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  endPoint: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES = 16;

export function allocD2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES(data?: Partial<D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.startPoint !== undefined) view.setBigUint64(0, data.startPoint === null ? 0n : util.toBigInt(util.toPointer(data.startPoint)), true);
  // 0x08: pointer
  if (data?.endPoint !== undefined) view.setBigUint64(8, data.endPoint === null ? 0n : util.toBigInt(util.toPointer(data.endPoint)), true);
  return buf;
}

export class D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get startPoint(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get endPoint(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set startPoint(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set endPoint(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES (size: 24)
 */
export interface D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  center: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  gradientOriginOffset: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  radiusX: number;
  /** f32 */
  radiusY: number;
}

export const sizeofD2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES = 24;

export function allocD2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES(data?: Partial<D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.center !== undefined) view.setBigUint64(0, data.center === null ? 0n : util.toBigInt(util.toPointer(data.center)), true);
  // 0x08: pointer
  if (data?.gradientOriginOffset !== undefined) view.setBigUint64(8, data.gradientOriginOffset === null ? 0n : util.toBigInt(util.toPointer(data.gradientOriginOffset)), true);
  // 0x10: f32
  if (data?.radiusX !== undefined) view.setFloat32(16, Number(data.radiusX), true);
  // 0x14: f32
  if (data?.radiusY !== undefined) view.setFloat32(20, Number(data.radiusY), true);
  return buf;
}

export class D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get center(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get gradientOriginOffset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: f32
  get radiusX(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get radiusY(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x00: pointer
  set center(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set gradientOriginOffset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: f32
  set radiusX(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set radiusY(value: number) {
    this.view.setFloat32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_TRIANGLE (size: 24)
 */
export interface D2D1_TRIANGLE {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point3: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D1_TRIANGLE = 24;

export function allocD2D1_TRIANGLE(data?: Partial<D2D1_TRIANGLE>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_TRIANGLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.point1 !== undefined) view.setBigUint64(0, data.point1 === null ? 0n : util.toBigInt(util.toPointer(data.point1)), true);
  // 0x08: pointer
  if (data?.point2 !== undefined) view.setBigUint64(8, data.point2 === null ? 0n : util.toBigInt(util.toPointer(data.point2)), true);
  // 0x10: pointer
  if (data?.point3 !== undefined) view.setBigUint64(16, data.point3 === null ? 0n : util.toBigInt(util.toPointer(data.point3)), true);
  return buf;
}

export class D2D1_TRIANGLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get point1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get point2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get point3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set point1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set point2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set point3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_ARC_SEGMENT (size: 32)
 */
export interface D2D1_ARC_SEGMENT {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_SIZE_F */
  size: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  rotationAngle: number;
  /** Windows.Win32.Graphics.Direct2D.D2D1_SWEEP_DIRECTION */
  sweepDirection: D2D1_SWEEP_DIRECTION;
  /** Windows.Win32.Graphics.Direct2D.D2D1_ARC_SIZE */
  arcSize: D2D1_ARC_SIZE;
}

export const sizeofD2D1_ARC_SEGMENT = 32;

export function allocD2D1_ARC_SEGMENT(data?: Partial<D2D1_ARC_SEGMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_ARC_SEGMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.point !== undefined) view.setBigUint64(0, data.point === null ? 0n : util.toBigInt(util.toPointer(data.point)), true);
  // 0x08: pointer
  if (data?.size !== undefined) view.setBigUint64(8, data.size === null ? 0n : util.toBigInt(util.toPointer(data.size)), true);
  // 0x10: f32
  if (data?.rotationAngle !== undefined) view.setFloat32(16, Number(data.rotationAngle), true);
  // 0x14: u32
  if (data?.sweepDirection !== undefined) view.setUint32(20, Number(data.sweepDirection), true);
  // 0x18: u32
  if (data?.arcSize !== undefined) view.setUint32(24, Number(data.arcSize), true);
  // 0x1c: pad4
  return buf;
}

export class D2D1_ARC_SEGMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get point(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get size(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: f32
  get rotationAngle(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: u32
  get sweepDirection(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get arcSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set point(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set size(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: f32
  set rotationAngle(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: u32
  set sweepDirection(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set arcSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_QUADRATIC_BEZIER_SEGMENT (size: 16)
 */
export interface D2D1_QUADRATIC_BEZIER_SEGMENT {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point2: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D1_QUADRATIC_BEZIER_SEGMENT = 16;

export function allocD2D1_QUADRATIC_BEZIER_SEGMENT(data?: Partial<D2D1_QUADRATIC_BEZIER_SEGMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_QUADRATIC_BEZIER_SEGMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.point1 !== undefined) view.setBigUint64(0, data.point1 === null ? 0n : util.toBigInt(util.toPointer(data.point1)), true);
  // 0x08: pointer
  if (data?.point2 !== undefined) view.setBigUint64(8, data.point2 === null ? 0n : util.toBigInt(util.toPointer(data.point2)), true);
  return buf;
}

export class D2D1_QUADRATIC_BEZIER_SEGMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get point1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get point2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set point1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set point2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_ELLIPSE (size: 16)
 */
export interface D2D1_ELLIPSE {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  radiusX: number;
  /** f32 */
  radiusY: number;
}

export const sizeofD2D1_ELLIPSE = 16;

export function allocD2D1_ELLIPSE(data?: Partial<D2D1_ELLIPSE>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_ELLIPSE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.point !== undefined) view.setBigUint64(0, data.point === null ? 0n : util.toBigInt(util.toPointer(data.point)), true);
  // 0x08: f32
  if (data?.radiusX !== undefined) view.setFloat32(8, Number(data.radiusX), true);
  // 0x0c: f32
  if (data?.radiusY !== undefined) view.setFloat32(12, Number(data.radiusY), true);
  return buf;
}

export class D2D1_ELLIPSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get point(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: f32
  get radiusX(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get radiusY(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: pointer
  set point(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: f32
  set radiusX(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set radiusY(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_ROUNDED_RECT (size: 16)
 */
export interface D2D1_ROUNDED_RECT {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_RECT_F */
  rect: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  radiusX: number;
  /** f32 */
  radiusY: number;
}

export const sizeofD2D1_ROUNDED_RECT = 16;

export function allocD2D1_ROUNDED_RECT(data?: Partial<D2D1_ROUNDED_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_ROUNDED_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.rect !== undefined) view.setBigUint64(0, data.rect === null ? 0n : util.toBigInt(util.toPointer(data.rect)), true);
  // 0x08: f32
  if (data?.radiusX !== undefined) view.setFloat32(8, Number(data.radiusX), true);
  // 0x0c: f32
  if (data?.radiusY !== undefined) view.setFloat32(12, Number(data.radiusY), true);
  return buf;
}

export class D2D1_ROUNDED_RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get rect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: f32
  get radiusX(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get radiusY(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: pointer
  set rect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: f32
  set radiusX(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set radiusY(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_STROKE_STYLE_PROPERTIES (size: 32)
 */
export interface D2D1_STROKE_STYLE_PROPERTIES {
  /** Windows.Win32.Graphics.Direct2D.D2D1_CAP_STYLE */
  startCap: D2D1_CAP_STYLE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_CAP_STYLE */
  endCap: D2D1_CAP_STYLE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_CAP_STYLE */
  dashCap: D2D1_CAP_STYLE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_LINE_JOIN */
  lineJoin: D2D1_LINE_JOIN;
  /** f32 */
  miterLimit: number;
  /** Windows.Win32.Graphics.Direct2D.D2D1_DASH_STYLE */
  dashStyle: D2D1_DASH_STYLE;
  /** f32 */
  dashOffset: number;
}

export const sizeofD2D1_STROKE_STYLE_PROPERTIES = 32;

export function allocD2D1_STROKE_STYLE_PROPERTIES(data?: Partial<D2D1_STROKE_STYLE_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_STROKE_STYLE_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.startCap !== undefined) view.setUint32(0, Number(data.startCap), true);
  // 0x04: u32
  if (data?.endCap !== undefined) view.setUint32(4, Number(data.endCap), true);
  // 0x08: u32
  if (data?.dashCap !== undefined) view.setUint32(8, Number(data.dashCap), true);
  // 0x0c: u32
  if (data?.lineJoin !== undefined) view.setUint32(12, Number(data.lineJoin), true);
  // 0x10: f32
  if (data?.miterLimit !== undefined) view.setFloat32(16, Number(data.miterLimit), true);
  // 0x14: u32
  if (data?.dashStyle !== undefined) view.setUint32(20, Number(data.dashStyle), true);
  // 0x18: f32
  if (data?.dashOffset !== undefined) view.setFloat32(24, Number(data.dashOffset), true);
  // 0x1c: pad4
  return buf;
}

export class D2D1_STROKE_STYLE_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get startCap(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get endCap(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dashCap(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get lineJoin(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: f32
  get miterLimit(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: u32
  get dashStyle(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: f32
  get dashOffset(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set startCap(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set endCap(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dashCap(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set lineJoin(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: f32
  set miterLimit(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: u32
  set dashStyle(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: f32
  set dashOffset(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS (size: 56)
 */
export interface D2D1_LAYER_PARAMETERS {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_RECT_F */
  contentBounds: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.ID2D1Geometry */
  geometricMask: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE */
  maskAntialiasMode: D2D1_ANTIALIAS_MODE;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_MATRIX_3X2_F */
  maskTransform: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  opacity: number;
  /** Windows.Win32.Graphics.Direct2D.ID2D1Brush */
  opacityBrush: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.D2D1_LAYER_OPTIONS */
  layerOptions: D2D1_LAYER_OPTIONS;
}

export const sizeofD2D1_LAYER_PARAMETERS = 56;

export function allocD2D1_LAYER_PARAMETERS(data?: Partial<D2D1_LAYER_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_LAYER_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.contentBounds !== undefined) view.setBigUint64(0, data.contentBounds === null ? 0n : util.toBigInt(util.toPointer(data.contentBounds)), true);
  // 0x08: pointer
  if (data?.geometricMask !== undefined) view.setBigUint64(8, data.geometricMask === null ? 0n : util.toBigInt(util.toPointer(data.geometricMask)), true);
  // 0x10: u32
  if (data?.maskAntialiasMode !== undefined) view.setUint32(16, Number(data.maskAntialiasMode), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.maskTransform !== undefined) view.setBigUint64(24, data.maskTransform === null ? 0n : util.toBigInt(util.toPointer(data.maskTransform)), true);
  // 0x20: f32
  if (data?.opacity !== undefined) view.setFloat32(32, Number(data.opacity), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.opacityBrush !== undefined) view.setBigUint64(40, data.opacityBrush === null ? 0n : util.toBigInt(util.toPointer(data.opacityBrush)), true);
  // 0x30: u32
  if (data?.layerOptions !== undefined) view.setUint32(48, Number(data.layerOptions), true);
  // 0x34: pad4
  return buf;
}

export class D2D1_LAYER_PARAMETERSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get contentBounds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get geometricMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get maskAntialiasMode(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get maskTransform(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: f32
  get opacity(): number {
    return this.view.getFloat32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get opacityBrush(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get layerOptions(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set contentBounds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set geometricMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set maskAntialiasMode(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set maskTransform(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: f32
  set opacity(value: number) {
    this.view.setFloat32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set opacityBrush(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set layerOptions(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_RENDER_TARGET_PROPERTIES (size: 32)
 */
export interface D2D1_RENDER_TARGET_PROPERTIES {
  /** Windows.Win32.Graphics.Direct2D.D2D1_RENDER_TARGET_TYPE */
  type: D2D1_RENDER_TARGET_TYPE;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D1_PIXEL_FORMAT */
  pixelFormat: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  dpiX: number;
  /** f32 */
  dpiY: number;
  /** Windows.Win32.Graphics.Direct2D.D2D1_RENDER_TARGET_USAGE */
  usage: D2D1_RENDER_TARGET_USAGE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_FEATURE_LEVEL */
  minLevel: D2D1_FEATURE_LEVEL;
}

export const sizeofD2D1_RENDER_TARGET_PROPERTIES = 32;

export function allocD2D1_RENDER_TARGET_PROPERTIES(data?: Partial<D2D1_RENDER_TARGET_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_RENDER_TARGET_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.type !== undefined) view.setUint32(0, Number(data.type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pixelFormat !== undefined) view.setBigUint64(8, data.pixelFormat === null ? 0n : util.toBigInt(util.toPointer(data.pixelFormat)), true);
  // 0x10: f32
  if (data?.dpiX !== undefined) view.setFloat32(16, Number(data.dpiX), true);
  // 0x14: f32
  if (data?.dpiY !== undefined) view.setFloat32(20, Number(data.dpiY), true);
  // 0x18: u32
  if (data?.usage !== undefined) view.setUint32(24, Number(data.usage), true);
  // 0x1c: u32
  if (data?.minLevel !== undefined) view.setUint32(28, Number(data.minLevel), true);
  return buf;
}

export class D2D1_RENDER_TARGET_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get type(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pixelFormat(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: f32
  get dpiX(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: f32
  get dpiY(): number {
    return this.view.getFloat32(20, true);
  }

  // 0x18: u32
  get usage(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get minLevel(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set type(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pixelFormat(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: f32
  set dpiX(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: f32
  set dpiY(value: number) {
    this.view.setFloat32(20, value, true);
  }

  // 0x18: u32
  set usage(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set minLevel(value: number) {
    this.view.setUint32(28, value, true);
  }
}

export type HWND = number | bigint;

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_HWND_RENDER_TARGET_PROPERTIES (size: 24)
 */
export interface D2D1_HWND_RENDER_TARGET_PROPERTIES {
  /** Windows.Win32.Foundation.HWND */
  hwnd: Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_SIZE_U */
  pixelSize: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.D2D1_PRESENT_OPTIONS */
  presentOptions: D2D1_PRESENT_OPTIONS;
}

export const sizeofD2D1_HWND_RENDER_TARGET_PROPERTIES = 24;

export function allocD2D1_HWND_RENDER_TARGET_PROPERTIES(data?: Partial<D2D1_HWND_RENDER_TARGET_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_HWND_RENDER_TARGET_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hwnd !== undefined) view.setBigUint64(0, data.hwnd === null ? 0n : util.toBigInt(util.toPointer(data.hwnd)), true);
  // 0x08: pointer
  if (data?.pixelSize !== undefined) view.setBigUint64(8, data.pixelSize === null ? 0n : util.toBigInt(util.toPointer(data.pixelSize)), true);
  // 0x10: u32
  if (data?.presentOptions !== undefined) view.setUint32(16, Number(data.presentOptions), true);
  // 0x14: pad4
  return buf;
}

export class D2D1_HWND_RENDER_TARGET_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hwnd(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get pixelSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get presentOptions(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set hwnd(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set pixelSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set presentOptions(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_DRAWING_STATE_DESCRIPTION (size: 32)
 */
export interface D2D1_DRAWING_STATE_DESCRIPTION {
  /** Windows.Win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE */
  antialiasMode: D2D1_ANTIALIAS_MODE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE */
  textAntialiasMode: D2D1_TEXT_ANTIALIAS_MODE;
  /** u64 */
  tag1: number | bigint;
  /** u64 */
  tag2: number | bigint;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_MATRIX_3X2_F */
  transform: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D1_DRAWING_STATE_DESCRIPTION = 32;

export function allocD2D1_DRAWING_STATE_DESCRIPTION(data?: Partial<D2D1_DRAWING_STATE_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_DRAWING_STATE_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.antialiasMode !== undefined) view.setUint32(0, Number(data.antialiasMode), true);
  // 0x04: u32
  if (data?.textAntialiasMode !== undefined) view.setUint32(4, Number(data.textAntialiasMode), true);
  // 0x08: u64
  if (data?.tag1 !== undefined) view.setBigUint64(8, util.toBigInt(data.tag1), true);
  // 0x10: u64
  if (data?.tag2 !== undefined) view.setBigUint64(16, util.toBigInt(data.tag2), true);
  // 0x18: pointer
  if (data?.transform !== undefined) view.setBigUint64(24, data.transform === null ? 0n : util.toBigInt(util.toPointer(data.transform)), true);
  return buf;
}

export class D2D1_DRAWING_STATE_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get antialiasMode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get textAntialiasMode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get tag1(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get tag2(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get transform(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set antialiasMode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set textAntialiasMode(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set tag1(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set tag2(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set transform(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_FACTORY_OPTIONS (size: 8)
 */
export interface D2D1_FACTORY_OPTIONS {
  /** Windows.Win32.Graphics.Direct2D.D2D1_DEBUG_LEVEL */
  debugLevel: D2D1_DEBUG_LEVEL;
}

export const sizeofD2D1_FACTORY_OPTIONS = 8;

export function allocD2D1_FACTORY_OPTIONS(data?: Partial<D2D1_FACTORY_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_FACTORY_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.debugLevel !== undefined) view.setUint32(0, Number(data.debugLevel), true);
  // 0x04: pad4
  return buf;
}

export class D2D1_FACTORY_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get debugLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set debugLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_BITMAP_PROPERTIES1 (size: 32)
 */
export interface D2D1_BITMAP_PROPERTIES1 {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D1_PIXEL_FORMAT */
  pixelFormat: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  dpiX: number;
  /** f32 */
  dpiY: number;
  /** Windows.Win32.Graphics.Direct2D.D2D1_BITMAP_OPTIONS */
  bitmapOptions: D2D1_BITMAP_OPTIONS;
  /** Windows.Win32.Graphics.Direct2D.ID2D1ColorContext */
  colorContext: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D1_BITMAP_PROPERTIES1 = 32;

export function allocD2D1_BITMAP_PROPERTIES1(data?: Partial<D2D1_BITMAP_PROPERTIES1>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_BITMAP_PROPERTIES1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pixelFormat !== undefined) view.setBigUint64(0, data.pixelFormat === null ? 0n : util.toBigInt(util.toPointer(data.pixelFormat)), true);
  // 0x08: f32
  if (data?.dpiX !== undefined) view.setFloat32(8, Number(data.dpiX), true);
  // 0x0c: f32
  if (data?.dpiY !== undefined) view.setFloat32(12, Number(data.dpiY), true);
  // 0x10: u32
  if (data?.bitmapOptions !== undefined) view.setUint32(16, Number(data.bitmapOptions), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.colorContext !== undefined) view.setBigUint64(24, data.colorContext === null ? 0n : util.toBigInt(util.toPointer(data.colorContext)), true);
  return buf;
}

export class D2D1_BITMAP_PROPERTIES1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pixelFormat(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: f32
  get dpiX(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get dpiY(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x10: u32
  get bitmapOptions(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get colorContext(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set pixelFormat(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: f32
  set dpiX(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set dpiY(value: number) {
    this.view.setFloat32(12, value, true);
  }

  // 0x10: u32
  set bitmapOptions(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set colorContext(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_MAPPED_RECT (size: 16)
 */
export interface D2D1_MAPPED_RECT {
  /** u32 */
  pitch: number;
  /** ptr */
  bits: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD2D1_MAPPED_RECT = 16;

export function allocD2D1_MAPPED_RECT(data?: Partial<D2D1_MAPPED_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_MAPPED_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.pitch !== undefined) view.setUint32(0, Number(data.pitch), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bits !== undefined) view.setBigUint64(8, data.bits === null ? 0n : util.toBigInt(util.toPointer(data.bits)), true);
  return buf;
}

export class D2D1_MAPPED_RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get pitch(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get bits(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set pitch(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set bits(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_RENDERING_CONTROLS (size: 16)
 */
export interface D2D1_RENDERING_CONTROLS {
  /** Windows.Win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION */
  bufferPrecision: D2D1_BUFFER_PRECISION;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_SIZE_U */
  tileSize: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D1_RENDERING_CONTROLS = 16;

export function allocD2D1_RENDERING_CONTROLS(data?: Partial<D2D1_RENDERING_CONTROLS>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_RENDERING_CONTROLS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.bufferPrecision !== undefined) view.setUint32(0, Number(data.bufferPrecision), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.tileSize !== undefined) view.setBigUint64(8, data.tileSize === null ? 0n : util.toBigInt(util.toPointer(data.tileSize)), true);
  return buf;
}

export class D2D1_RENDERING_CONTROLSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get bufferPrecision(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get tileSize(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set bufferPrecision(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set tileSize(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_EFFECT_INPUT_DESCRIPTION (size: 24)
 */
export interface D2D1_EFFECT_INPUT_DESCRIPTION {
  /** Windows.Win32.Graphics.Direct2D.ID2D1Effect */
  effect: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  inputIndex: number;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_RECT_F */
  inputRectangle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D1_EFFECT_INPUT_DESCRIPTION = 24;

export function allocD2D1_EFFECT_INPUT_DESCRIPTION(data?: Partial<D2D1_EFFECT_INPUT_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_EFFECT_INPUT_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.effect !== undefined) view.setBigUint64(0, data.effect === null ? 0n : util.toBigInt(util.toPointer(data.effect)), true);
  // 0x08: u32
  if (data?.inputIndex !== undefined) view.setUint32(8, Number(data.inputIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.inputRectangle !== undefined) view.setBigUint64(16, data.inputRectangle === null ? 0n : util.toBigInt(util.toPointer(data.inputRectangle)), true);
  return buf;
}

export class D2D1_EFFECT_INPUT_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get effect(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get inputIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get inputRectangle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set effect(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set inputIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set inputRectangle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_POINT_DESCRIPTION (size: 32)
 */
export interface D2D1_POINT_DESCRIPTION {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  unitTangentVector: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  endSegment: number;
  /** u32 */
  endFigure: number;
  /** f32 */
  lengthToEndSegment: number;
}

export const sizeofD2D1_POINT_DESCRIPTION = 32;

export function allocD2D1_POINT_DESCRIPTION(data?: Partial<D2D1_POINT_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_POINT_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.point !== undefined) view.setBigUint64(0, data.point === null ? 0n : util.toBigInt(util.toPointer(data.point)), true);
  // 0x08: pointer
  if (data?.unitTangentVector !== undefined) view.setBigUint64(8, data.unitTangentVector === null ? 0n : util.toBigInt(util.toPointer(data.unitTangentVector)), true);
  // 0x10: u32
  if (data?.endSegment !== undefined) view.setUint32(16, Number(data.endSegment), true);
  // 0x14: u32
  if (data?.endFigure !== undefined) view.setUint32(20, Number(data.endFigure), true);
  // 0x18: f32
  if (data?.lengthToEndSegment !== undefined) view.setFloat32(24, Number(data.lengthToEndSegment), true);
  // 0x1c: pad4
  return buf;
}

export class D2D1_POINT_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get point(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get unitTangentVector(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get endSegment(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get endFigure(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: f32
  get lengthToEndSegment(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set point(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set unitTangentVector(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set endSegment(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set endFigure(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: f32
  set lengthToEndSegment(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_IMAGE_BRUSH_PROPERTIES (size: 24)
 */
export interface D2D1_IMAGE_BRUSH_PROPERTIES {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_RECT_F */
  sourceRectangle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.D2D1_EXTEND_MODE */
  extendModeX: D2D1_EXTEND_MODE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_EXTEND_MODE */
  extendModeY: D2D1_EXTEND_MODE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE */
  interpolationMode: D2D1_INTERPOLATION_MODE;
}

export const sizeofD2D1_IMAGE_BRUSH_PROPERTIES = 24;

export function allocD2D1_IMAGE_BRUSH_PROPERTIES(data?: Partial<D2D1_IMAGE_BRUSH_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_IMAGE_BRUSH_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sourceRectangle !== undefined) view.setBigUint64(0, data.sourceRectangle === null ? 0n : util.toBigInt(util.toPointer(data.sourceRectangle)), true);
  // 0x08: u32
  if (data?.extendModeX !== undefined) view.setUint32(8, Number(data.extendModeX), true);
  // 0x0c: u32
  if (data?.extendModeY !== undefined) view.setUint32(12, Number(data.extendModeY), true);
  // 0x10: u32
  if (data?.interpolationMode !== undefined) view.setUint32(16, Number(data.interpolationMode), true);
  // 0x14: pad4
  return buf;
}

export class D2D1_IMAGE_BRUSH_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sourceRectangle(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get extendModeX(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get extendModeY(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get interpolationMode(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set sourceRectangle(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set extendModeX(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set extendModeY(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set interpolationMode(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_BITMAP_BRUSH_PROPERTIES1 (size: 16)
 */
export interface D2D1_BITMAP_BRUSH_PROPERTIES1 {
  /** Windows.Win32.Graphics.Direct2D.D2D1_EXTEND_MODE */
  extendModeX: D2D1_EXTEND_MODE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_EXTEND_MODE */
  extendModeY: D2D1_EXTEND_MODE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE */
  interpolationMode: D2D1_INTERPOLATION_MODE;
}

export const sizeofD2D1_BITMAP_BRUSH_PROPERTIES1 = 16;

export function allocD2D1_BITMAP_BRUSH_PROPERTIES1(data?: Partial<D2D1_BITMAP_BRUSH_PROPERTIES1>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_BITMAP_BRUSH_PROPERTIES1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.extendModeX !== undefined) view.setUint32(0, Number(data.extendModeX), true);
  // 0x04: u32
  if (data?.extendModeY !== undefined) view.setUint32(4, Number(data.extendModeY), true);
  // 0x08: u32
  if (data?.interpolationMode !== undefined) view.setUint32(8, Number(data.interpolationMode), true);
  // 0x0c: pad4
  return buf;
}

export class D2D1_BITMAP_BRUSH_PROPERTIES1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get extendModeX(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get extendModeY(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get interpolationMode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set extendModeX(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set extendModeY(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set interpolationMode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_STROKE_STYLE_PROPERTIES1 (size: 32)
 */
export interface D2D1_STROKE_STYLE_PROPERTIES1 {
  /** Windows.Win32.Graphics.Direct2D.D2D1_CAP_STYLE */
  startCap: D2D1_CAP_STYLE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_CAP_STYLE */
  endCap: D2D1_CAP_STYLE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_CAP_STYLE */
  dashCap: D2D1_CAP_STYLE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_LINE_JOIN */
  lineJoin: D2D1_LINE_JOIN;
  /** f32 */
  miterLimit: number;
  /** Windows.Win32.Graphics.Direct2D.D2D1_DASH_STYLE */
  dashStyle: D2D1_DASH_STYLE;
  /** f32 */
  dashOffset: number;
  /** Windows.Win32.Graphics.Direct2D.D2D1_STROKE_TRANSFORM_TYPE */
  transformType: D2D1_STROKE_TRANSFORM_TYPE;
}

export const sizeofD2D1_STROKE_STYLE_PROPERTIES1 = 32;

export function allocD2D1_STROKE_STYLE_PROPERTIES1(data?: Partial<D2D1_STROKE_STYLE_PROPERTIES1>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_STROKE_STYLE_PROPERTIES1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.startCap !== undefined) view.setUint32(0, Number(data.startCap), true);
  // 0x04: u32
  if (data?.endCap !== undefined) view.setUint32(4, Number(data.endCap), true);
  // 0x08: u32
  if (data?.dashCap !== undefined) view.setUint32(8, Number(data.dashCap), true);
  // 0x0c: u32
  if (data?.lineJoin !== undefined) view.setUint32(12, Number(data.lineJoin), true);
  // 0x10: f32
  if (data?.miterLimit !== undefined) view.setFloat32(16, Number(data.miterLimit), true);
  // 0x14: u32
  if (data?.dashStyle !== undefined) view.setUint32(20, Number(data.dashStyle), true);
  // 0x18: f32
  if (data?.dashOffset !== undefined) view.setFloat32(24, Number(data.dashOffset), true);
  // 0x1c: u32
  if (data?.transformType !== undefined) view.setUint32(28, Number(data.transformType), true);
  return buf;
}

export class D2D1_STROKE_STYLE_PROPERTIES1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get startCap(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get endCap(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dashCap(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get lineJoin(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: f32
  get miterLimit(): number {
    return this.view.getFloat32(16, true);
  }

  // 0x14: u32
  get dashStyle(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: f32
  get dashOffset(): number {
    return this.view.getFloat32(24, true);
  }

  // 0x1c: u32
  get transformType(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set startCap(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set endCap(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dashCap(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set lineJoin(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: f32
  set miterLimit(value: number) {
    this.view.setFloat32(16, value, true);
  }

  // 0x14: u32
  set dashStyle(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: f32
  set dashOffset(value: number) {
    this.view.setFloat32(24, value, true);
  }

  // 0x1c: u32
  set transformType(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_LAYER_PARAMETERS1 (size: 56)
 */
export interface D2D1_LAYER_PARAMETERS1 {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_RECT_F */
  contentBounds: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.ID2D1Geometry */
  geometricMask: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE */
  maskAntialiasMode: D2D1_ANTIALIAS_MODE;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_MATRIX_3X2_F */
  maskTransform: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  opacity: number;
  /** Windows.Win32.Graphics.Direct2D.ID2D1Brush */
  opacityBrush: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.D2D1_LAYER_OPTIONS1 */
  layerOptions: D2D1_LAYER_OPTIONS1;
}

export const sizeofD2D1_LAYER_PARAMETERS1 = 56;

export function allocD2D1_LAYER_PARAMETERS1(data?: Partial<D2D1_LAYER_PARAMETERS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_LAYER_PARAMETERS1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.contentBounds !== undefined) view.setBigUint64(0, data.contentBounds === null ? 0n : util.toBigInt(util.toPointer(data.contentBounds)), true);
  // 0x08: pointer
  if (data?.geometricMask !== undefined) view.setBigUint64(8, data.geometricMask === null ? 0n : util.toBigInt(util.toPointer(data.geometricMask)), true);
  // 0x10: u32
  if (data?.maskAntialiasMode !== undefined) view.setUint32(16, Number(data.maskAntialiasMode), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.maskTransform !== undefined) view.setBigUint64(24, data.maskTransform === null ? 0n : util.toBigInt(util.toPointer(data.maskTransform)), true);
  // 0x20: f32
  if (data?.opacity !== undefined) view.setFloat32(32, Number(data.opacity), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.opacityBrush !== undefined) view.setBigUint64(40, data.opacityBrush === null ? 0n : util.toBigInt(util.toPointer(data.opacityBrush)), true);
  // 0x30: u32
  if (data?.layerOptions !== undefined) view.setUint32(48, Number(data.layerOptions), true);
  // 0x34: pad4
  return buf;
}

export class D2D1_LAYER_PARAMETERS1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get contentBounds(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get geometricMask(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get maskAntialiasMode(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get maskTransform(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: f32
  get opacity(): number {
    return this.view.getFloat32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get opacityBrush(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: u32
  get layerOptions(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set contentBounds(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set geometricMask(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set maskAntialiasMode(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set maskTransform(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: f32
  set opacity(value: number) {
    this.view.setFloat32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set opacityBrush(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: u32
  set layerOptions(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_DRAWING_STATE_DESCRIPTION1 (size: 40)
 */
export interface D2D1_DRAWING_STATE_DESCRIPTION1 {
  /** Windows.Win32.Graphics.Direct2D.D2D1_ANTIALIAS_MODE */
  antialiasMode: D2D1_ANTIALIAS_MODE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_TEXT_ANTIALIAS_MODE */
  textAntialiasMode: D2D1_TEXT_ANTIALIAS_MODE;
  /** u64 */
  tag1: number | bigint;
  /** u64 */
  tag2: number | bigint;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_MATRIX_3X2_F */
  transform: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.D2D1_PRIMITIVE_BLEND */
  primitiveBlend: D2D1_PRIMITIVE_BLEND;
  /** Windows.Win32.Graphics.Direct2D.D2D1_UNIT_MODE */
  unitMode: D2D1_UNIT_MODE;
}

export const sizeofD2D1_DRAWING_STATE_DESCRIPTION1 = 40;

export function allocD2D1_DRAWING_STATE_DESCRIPTION1(data?: Partial<D2D1_DRAWING_STATE_DESCRIPTION1>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_DRAWING_STATE_DESCRIPTION1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.antialiasMode !== undefined) view.setUint32(0, Number(data.antialiasMode), true);
  // 0x04: u32
  if (data?.textAntialiasMode !== undefined) view.setUint32(4, Number(data.textAntialiasMode), true);
  // 0x08: u64
  if (data?.tag1 !== undefined) view.setBigUint64(8, util.toBigInt(data.tag1), true);
  // 0x10: u64
  if (data?.tag2 !== undefined) view.setBigUint64(16, util.toBigInt(data.tag2), true);
  // 0x18: pointer
  if (data?.transform !== undefined) view.setBigUint64(24, data.transform === null ? 0n : util.toBigInt(util.toPointer(data.transform)), true);
  // 0x20: u32
  if (data?.primitiveBlend !== undefined) view.setUint32(32, Number(data.primitiveBlend), true);
  // 0x24: u32
  if (data?.unitMode !== undefined) view.setUint32(36, Number(data.unitMode), true);
  return buf;
}

export class D2D1_DRAWING_STATE_DESCRIPTION1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get antialiasMode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get textAntialiasMode(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u64
  get tag1(): number | bigint {
    return this.view.getBigUint64(8, true);
  }

  // 0x10: u64
  get tag2(): number | bigint {
    return this.view.getBigUint64(16, true);
  }

  // 0x18: pointer
  get transform(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get primitiveBlend(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get unitMode(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set antialiasMode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set textAntialiasMode(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u64
  set tag1(value: number | bigint) {
    this.view.setBigUint64(8, util.toBigInt(value), true);
  }

  // 0x10: u64
  set tag2(value: number | bigint) {
    this.view.setBigUint64(16, util.toBigInt(value), true);
  }

  // 0x18: pointer
  set transform(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set primitiveBlend(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set unitMode(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_PRINT_CONTROL_PROPERTIES (size: 16)
 */
export interface D2D1_PRINT_CONTROL_PROPERTIES {
  /** Windows.Win32.Graphics.Direct2D.D2D1_PRINT_FONT_SUBSET_MODE */
  fontSubset: D2D1_PRINT_FONT_SUBSET_MODE;
  /** f32 */
  rasterDPI: number;
  /** Windows.Win32.Graphics.Direct2D.D2D1_COLOR_SPACE */
  colorSpace: D2D1_COLOR_SPACE;
}

export const sizeofD2D1_PRINT_CONTROL_PROPERTIES = 16;

export function allocD2D1_PRINT_CONTROL_PROPERTIES(data?: Partial<D2D1_PRINT_CONTROL_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_PRINT_CONTROL_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.fontSubset !== undefined) view.setUint32(0, Number(data.fontSubset), true);
  // 0x04: f32
  if (data?.rasterDPI !== undefined) view.setFloat32(4, Number(data.rasterDPI), true);
  // 0x08: u32
  if (data?.colorSpace !== undefined) view.setUint32(8, Number(data.colorSpace), true);
  // 0x0c: pad4
  return buf;
}

export class D2D1_PRINT_CONTROL_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get fontSubset(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: f32
  get rasterDPI(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: u32
  get colorSpace(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set fontSubset(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: f32
  set rasterDPI(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: u32
  set colorSpace(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_CREATION_PROPERTIES (size: 16)
 */
export interface D2D1_CREATION_PROPERTIES {
  /** Windows.Win32.Graphics.Direct2D.D2D1_THREADING_MODE */
  threadingMode: D2D1_THREADING_MODE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_DEBUG_LEVEL */
  debugLevel: D2D1_DEBUG_LEVEL;
  /** Windows.Win32.Graphics.Direct2D.D2D1_DEVICE_CONTEXT_OPTIONS */
  options: D2D1_DEVICE_CONTEXT_OPTIONS;
}

export const sizeofD2D1_CREATION_PROPERTIES = 16;

export function allocD2D1_CREATION_PROPERTIES(data?: Partial<D2D1_CREATION_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_CREATION_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.threadingMode !== undefined) view.setUint32(0, Number(data.threadingMode), true);
  // 0x04: u32
  if (data?.debugLevel !== undefined) view.setUint32(4, Number(data.debugLevel), true);
  // 0x08: u32
  if (data?.options !== undefined) view.setUint32(8, Number(data.options), true);
  // 0x0c: pad4
  return buf;
}

export class D2D1_CREATION_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get threadingMode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get debugLevel(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get options(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set threadingMode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set debugLevel(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set options(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.Matrix4x3F (size: 8)
 */
export interface Matrix4x3F {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_MATRIX_4X3_F */
  Base: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMatrix4x3F = 8;

export function allocMatrix4x3F(data?: Partial<Matrix4x3F>): Uint8Array {
  const buf = new Uint8Array(sizeofMatrix4x3F);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : util.toBigInt(util.toPointer(data.Base)), true);
  return buf;
}

export class Matrix4x3FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Matrix4x4F (size: 8)
 */
export interface Matrix4x4F {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_MATRIX_4X4_F */
  Base: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMatrix4x4F = 8;

export function allocMatrix4x4F(data?: Partial<Matrix4x4F>): Uint8Array {
  const buf = new Uint8Array(sizeofMatrix4x4F);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : util.toBigInt(util.toPointer(data.Base)), true);
  return buf;
}

export class Matrix4x4FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.Matrix5x4F (size: 8)
 */
export interface Matrix5x4F {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_MATRIX_5X4_F */
  Base: Uint8Array | Deno.PointerValue | null;
}

export const sizeofMatrix5x4F = 8;

export function allocMatrix5x4F(data?: Partial<Matrix5x4F>): Uint8Array {
  const buf = new Uint8Array(sizeofMatrix5x4F);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Base !== undefined) view.setBigUint64(0, data.Base === null ? 0n : util.toBigInt(util.toPointer(data.Base)), true);
  return buf;
}

export class Matrix5x4FView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Base(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Base(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_PROPERTY_BINDING (size: 24)
 */
export interface D2D1_PROPERTY_BINDING {
  /** Windows.Win32.Foundation.PWSTR */
  propertyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct2D.PD2D1_PROPERTY_SET_FUNCTION */
  setFunction: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.PD2D1_PROPERTY_GET_FUNCTION */
  getFunction: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D1_PROPERTY_BINDING = 24;

export function allocD2D1_PROPERTY_BINDING(data?: Partial<D2D1_PROPERTY_BINDING>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_PROPERTY_BINDING);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.propertyName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.propertyName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: pointer
  if (data?.setFunction !== undefined) view.setBigUint64(8, data.setFunction === null ? 0n : util.toBigInt(util.toPointer(data.setFunction)), true);
  // 0x10: pointer
  if (data?.getFunction !== undefined) view.setBigUint64(16, data.getFunction === null ? 0n : util.toBigInt(util.toPointer(data.getFunction)), true);
  return buf;
}

export class D2D1_PROPERTY_BINDINGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get propertyName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get setFunction(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get getFunction(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set propertyName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: pointer
  set setFunction(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set getFunction(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_RESOURCE_TEXTURE_PROPERTIES (size: 32)
 */
export interface D2D1_RESOURCE_TEXTURE_PROPERTIES {
  /** ptr */
  extents: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  dimensions: number;
  /** Windows.Win32.Graphics.Direct2D.D2D1_BUFFER_PRECISION */
  bufferPrecision: D2D1_BUFFER_PRECISION;
  /** Windows.Win32.Graphics.Direct2D.D2D1_CHANNEL_DEPTH */
  channelDepth: D2D1_CHANNEL_DEPTH;
  /** Windows.Win32.Graphics.Direct2D.D2D1_FILTER */
  filter: D2D1_FILTER;
  /** ptr */
  extendModes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD2D1_RESOURCE_TEXTURE_PROPERTIES = 32;

export function allocD2D1_RESOURCE_TEXTURE_PROPERTIES(data?: Partial<D2D1_RESOURCE_TEXTURE_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_RESOURCE_TEXTURE_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.extents !== undefined) view.setBigUint64(0, data.extents === null ? 0n : util.toBigInt(util.toPointer(data.extents)), true);
  // 0x08: u32
  if (data?.dimensions !== undefined) view.setUint32(8, Number(data.dimensions), true);
  // 0x0c: u32
  if (data?.bufferPrecision !== undefined) view.setUint32(12, Number(data.bufferPrecision), true);
  // 0x10: u32
  if (data?.channelDepth !== undefined) view.setUint32(16, Number(data.channelDepth), true);
  // 0x14: u32
  if (data?.filter !== undefined) view.setUint32(20, Number(data.filter), true);
  // 0x18: pointer
  if (data?.extendModes !== undefined) view.setBigUint64(24, data.extendModes === null ? 0n : util.toBigInt(util.toPointer(data.extendModes)), true);
  return buf;
}

export class D2D1_RESOURCE_TEXTURE_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get extents(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get dimensions(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get bufferPrecision(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get channelDepth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get filter(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get extendModes(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set extents(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set dimensions(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set bufferPrecision(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set channelDepth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set filter(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set extendModes(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_INPUT_ELEMENT_DESC (size: 24)
 */
export interface D2D1_INPUT_ELEMENT_DESC {
  /** Windows.Win32.Foundation.PSTR */
  semanticName: string | null | Uint8Array;
  /** u32 */
  semanticIndex: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  format: DXGI_FORMAT;
  /** u32 */
  inputSlot: number;
  /** u32 */
  alignedByteOffset: number;
}

export const sizeofD2D1_INPUT_ELEMENT_DESC = 24;

export function allocD2D1_INPUT_ELEMENT_DESC(data?: Partial<D2D1_INPUT_ELEMENT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_INPUT_ELEMENT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.semanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.semanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : util.toBigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.semanticIndex !== undefined) view.setUint32(8, Number(data.semanticIndex), true);
  // 0x0c: u32
  if (data?.format !== undefined) view.setUint32(12, Number(data.format), true);
  // 0x10: u32
  if (data?.inputSlot !== undefined) view.setUint32(16, Number(data.inputSlot), true);
  // 0x14: u32
  if (data?.alignedByteOffset !== undefined) view.setUint32(20, Number(data.alignedByteOffset), true);
  return buf;
}

export class D2D1_INPUT_ELEMENT_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get semanticName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get semanticIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get format(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get inputSlot(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get alignedByteOffset(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: buffer
  set semanticName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, util.toBigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: u32
  set semanticIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set format(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set inputSlot(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set alignedByteOffset(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_VERTEX_BUFFER_PROPERTIES (size: 24)
 */
export interface D2D1_VERTEX_BUFFER_PROPERTIES {
  /** u32 */
  inputCount: number;
  /** Windows.Win32.Graphics.Direct2D.D2D1_VERTEX_USAGE */
  usage: D2D1_VERTEX_USAGE;
  /** ptr */
  data: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  byteWidth: number;
}

export const sizeofD2D1_VERTEX_BUFFER_PROPERTIES = 24;

export function allocD2D1_VERTEX_BUFFER_PROPERTIES(data?: Partial<D2D1_VERTEX_BUFFER_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_VERTEX_BUFFER_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.inputCount !== undefined) view.setUint32(0, Number(data.inputCount), true);
  // 0x04: u32
  if (data?.usage !== undefined) view.setUint32(4, Number(data.usage), true);
  // 0x08: pointer
  if (data?.data !== undefined) view.setBigUint64(8, data.data === null ? 0n : util.toBigInt(util.toPointer(data.data)), true);
  // 0x10: u32
  if (data?.byteWidth !== undefined) view.setUint32(16, Number(data.byteWidth), true);
  // 0x14: pad4
  return buf;
}

export class D2D1_VERTEX_BUFFER_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get inputCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get usage(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get data(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get byteWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set inputCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set usage(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set data(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set byteWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES (size: 32)
 */
export interface D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES {
  /** ptr */
  shaderBufferWithInputSignature: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  shaderBufferSize: number;
  /** ptr */
  inputElements: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  elementCount: number;
  /** u32 */
  stride: number;
}

export const sizeofD2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES = 32;

export function allocD2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES(data?: Partial<D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.shaderBufferWithInputSignature !== undefined) view.setBigUint64(0, data.shaderBufferWithInputSignature === null ? 0n : util.toBigInt(util.toPointer(data.shaderBufferWithInputSignature)), true);
  // 0x08: u32
  if (data?.shaderBufferSize !== undefined) view.setUint32(8, Number(data.shaderBufferSize), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.inputElements !== undefined) view.setBigUint64(16, data.inputElements === null ? 0n : util.toBigInt(util.toPointer(data.inputElements)), true);
  // 0x18: u32
  if (data?.elementCount !== undefined) view.setUint32(24, Number(data.elementCount), true);
  // 0x1c: u32
  if (data?.stride !== undefined) view.setUint32(28, Number(data.stride), true);
  return buf;
}

export class D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get shaderBufferWithInputSignature(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: u32
  get shaderBufferSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get inputElements(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: u32
  get elementCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get stride(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set shaderBufferWithInputSignature(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: u32
  set shaderBufferSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set inputElements(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: u32
  set elementCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set stride(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_VERTEX_RANGE (size: 8)
 */
export interface D2D1_VERTEX_RANGE {
  /** u32 */
  startVertex: number;
  /** u32 */
  vertexCount: number;
}

export const sizeofD2D1_VERTEX_RANGE = 8;

export function allocD2D1_VERTEX_RANGE(data?: Partial<D2D1_VERTEX_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_VERTEX_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.startVertex !== undefined) view.setUint32(0, Number(data.startVertex), true);
  // 0x04: u32
  if (data?.vertexCount !== undefined) view.setUint32(4, Number(data.vertexCount), true);
  return buf;
}

export class D2D1_VERTEX_RANGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get startVertex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get vertexCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set startVertex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set vertexCount(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_BLEND_DESCRIPTION (size: 32)
 */
export interface D2D1_BLEND_DESCRIPTION {
  /** Windows.Win32.Graphics.Direct2D.D2D1_BLEND */
  sourceBlend: D2D1_BLEND;
  /** Windows.Win32.Graphics.Direct2D.D2D1_BLEND */
  destinationBlend: D2D1_BLEND;
  /** Windows.Win32.Graphics.Direct2D.D2D1_BLEND_OPERATION */
  blendOperation: D2D1_BLEND_OPERATION;
  /** Windows.Win32.Graphics.Direct2D.D2D1_BLEND */
  sourceBlendAlpha: D2D1_BLEND;
  /** Windows.Win32.Graphics.Direct2D.D2D1_BLEND */
  destinationBlendAlpha: D2D1_BLEND;
  /** Windows.Win32.Graphics.Direct2D.D2D1_BLEND_OPERATION */
  blendOperationAlpha: D2D1_BLEND_OPERATION;
  /** array */
  blendFactor: Deno.PointerValue | null;
}

export const sizeofD2D1_BLEND_DESCRIPTION = 32;

export function allocD2D1_BLEND_DESCRIPTION(data?: Partial<D2D1_BLEND_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_BLEND_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.sourceBlend !== undefined) view.setUint32(0, Number(data.sourceBlend), true);
  // 0x04: u32
  if (data?.destinationBlend !== undefined) view.setUint32(4, Number(data.destinationBlend), true);
  // 0x08: u32
  if (data?.blendOperation !== undefined) view.setUint32(8, Number(data.blendOperation), true);
  // 0x0c: u32
  if (data?.sourceBlendAlpha !== undefined) view.setUint32(12, Number(data.sourceBlendAlpha), true);
  // 0x10: u32
  if (data?.destinationBlendAlpha !== undefined) view.setUint32(16, Number(data.destinationBlendAlpha), true);
  // 0x14: u32
  if (data?.blendOperationAlpha !== undefined) view.setUint32(20, Number(data.blendOperationAlpha), true);
  // 0x18: pointer
  if (data?.blendFactor !== undefined) view.setBigUint64(24, data.blendFactor === null ? 0n : util.toBigInt(util.toPointer(data.blendFactor)), true);
  return buf;
}

export class D2D1_BLEND_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get sourceBlend(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get destinationBlend(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get blendOperation(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get sourceBlendAlpha(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get destinationBlendAlpha(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get blendOperationAlpha(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get blendFactor(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set sourceBlend(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set destinationBlend(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set blendOperation(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set sourceBlendAlpha(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set destinationBlendAlpha(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set blendOperationAlpha(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set blendFactor(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_INPUT_DESCRIPTION (size: 8)
 */
export interface D2D1_INPUT_DESCRIPTION {
  /** Windows.Win32.Graphics.Direct2D.D2D1_FILTER */
  filter: D2D1_FILTER;
  /** u32 */
  levelOfDetailCount: number;
}

export const sizeofD2D1_INPUT_DESCRIPTION = 8;

export function allocD2D1_INPUT_DESCRIPTION(data?: Partial<D2D1_INPUT_DESCRIPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_INPUT_DESCRIPTION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.filter !== undefined) view.setUint32(0, Number(data.filter), true);
  // 0x04: u32
  if (data?.levelOfDetailCount !== undefined) view.setUint32(4, Number(data.levelOfDetailCount), true);
  return buf;
}

export class D2D1_INPUT_DESCRIPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get filter(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get levelOfDetailCount(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set filter(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set levelOfDetailCount(value: number) {
    this.view.setUint32(4, value, true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_FEATURE_DATA_DOUBLES (size: 8)
 */
export interface D2D1_FEATURE_DATA_DOUBLES {
  /** Windows.Win32.Foundation.BOOL */
  doublePrecisionFloatShaderOps: boolean;
}

export const sizeofD2D1_FEATURE_DATA_DOUBLES = 8;

export function allocD2D1_FEATURE_DATA_DOUBLES(data?: Partial<D2D1_FEATURE_DATA_DOUBLES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_FEATURE_DATA_DOUBLES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.doublePrecisionFloatShaderOps !== undefined) view.setInt32(0, Number(data.doublePrecisionFloatShaderOps), true);
  // 0x04: pad4
  return buf;
}

export class D2D1_FEATURE_DATA_DOUBLESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get doublePrecisionFloatShaderOps(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set doublePrecisionFloatShaderOps(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS (size: 8)
 */
export interface D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x: boolean;
}

export const sizeofD2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS = 8;

export function allocD2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS(data?: Partial<D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x !== undefined) view.setInt32(0, Number(data.computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x), true);
  // 0x04: pad4
  return buf;
}

export class D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x00: i32
  set computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_SVG_LENGTH (size: 8)
 */
export interface D2D1_SVG_LENGTH {
  /** f32 */
  value: number;
  /** Windows.Win32.Graphics.Direct2D.D2D1_SVG_LENGTH_UNITS */
  units: D2D1_SVG_LENGTH_UNITS;
}

export const sizeofD2D1_SVG_LENGTH = 8;

export function allocD2D1_SVG_LENGTH(data?: Partial<D2D1_SVG_LENGTH>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_SVG_LENGTH);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.value !== undefined) view.setFloat32(0, Number(data.value), true);
  // 0x04: u32
  if (data?.units !== undefined) view.setUint32(4, Number(data.units), true);
  return buf;
}

export class D2D1_SVG_LENGTHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get value(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: u32
  get units(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: f32
  set value(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: u32
  set units(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_SVG_PRESERVE_ASPECT_RATIO (size: 16)
 */
export interface D2D1_SVG_PRESERVE_ASPECT_RATIO {
  /** Windows.Win32.Foundation.BOOL */
  defer: boolean;
  /** Windows.Win32.Graphics.Direct2D.D2D1_SVG_ASPECT_ALIGN */
  align: D2D1_SVG_ASPECT_ALIGN;
  /** Windows.Win32.Graphics.Direct2D.D2D1_SVG_ASPECT_SCALING */
  meetOrSlice: D2D1_SVG_ASPECT_SCALING;
}

export const sizeofD2D1_SVG_PRESERVE_ASPECT_RATIO = 16;

export function allocD2D1_SVG_PRESERVE_ASPECT_RATIO(data?: Partial<D2D1_SVG_PRESERVE_ASPECT_RATIO>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_SVG_PRESERVE_ASPECT_RATIO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.defer !== undefined) view.setInt32(0, Number(data.defer), true);
  // 0x04: u32
  if (data?.align !== undefined) view.setUint32(4, Number(data.align), true);
  // 0x08: u32
  if (data?.meetOrSlice !== undefined) view.setUint32(8, Number(data.meetOrSlice), true);
  // 0x0c: pad4
  return buf;
}

export class D2D1_SVG_PRESERVE_ASPECT_RATIOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get defer(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get align(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get meetOrSlice(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set defer(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set align(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set meetOrSlice(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_SVG_VIEWBOX (size: 16)
 */
export interface D2D1_SVG_VIEWBOX {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  width: number;
  /** f32 */
  height: number;
}

export const sizeofD2D1_SVG_VIEWBOX = 16;

export function allocD2D1_SVG_VIEWBOX(data?: Partial<D2D1_SVG_VIEWBOX>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_SVG_VIEWBOX);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.width !== undefined) view.setFloat32(8, Number(data.width), true);
  // 0x0c: f32
  if (data?.height !== undefined) view.setFloat32(12, Number(data.height), true);
  return buf;
}

export class D2D1_SVG_VIEWBOXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get width(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: f32
  get height(): number {
    return this.view.getFloat32(12, true);
  }

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set width(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: f32
  set height(value: number) {
    this.view.setFloat32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES (size: 24)
 */
export interface D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES {
  /** Windows.Win32.Graphics.Direct2D.D2D1_ORIENTATION */
  orientation: D2D1_ORIENTATION;
  /** f32 */
  scaleX: number;
  /** f32 */
  scaleY: number;
  /** Windows.Win32.Graphics.Direct2D.D2D1_INTERPOLATION_MODE */
  interpolationMode: D2D1_INTERPOLATION_MODE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS */
  options: D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS;
}

export const sizeofD2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES = 24;

export function allocD2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES(data?: Partial<D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.orientation !== undefined) view.setUint32(0, Number(data.orientation), true);
  // 0x04: f32
  if (data?.scaleX !== undefined) view.setFloat32(4, Number(data.scaleX), true);
  // 0x08: f32
  if (data?.scaleY !== undefined) view.setFloat32(8, Number(data.scaleY), true);
  // 0x0c: u32
  if (data?.interpolationMode !== undefined) view.setUint32(12, Number(data.interpolationMode), true);
  // 0x10: u32
  if (data?.options !== undefined) view.setUint32(16, Number(data.options), true);
  // 0x14: pad4
  return buf;
}

export class D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get orientation(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: f32
  get scaleX(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get scaleY(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: u32
  get interpolationMode(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get options(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set orientation(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: f32
  set scaleX(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set scaleY(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: u32
  set interpolationMode(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set options(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_INK_POINT (size: 16)
 */
export interface D2D1_INK_POINT {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  radius: number;
}

export const sizeofD2D1_INK_POINT = 16;

export function allocD2D1_INK_POINT(data?: Partial<D2D1_INK_POINT>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_INK_POINT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.radius !== undefined) view.setFloat32(8, Number(data.radius), true);
  // 0x0c: pad4
  return buf;
}

export class D2D1_INK_POINTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get x(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get y(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get radius(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set x(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set y(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set radius(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_INK_BEZIER_SEGMENT (size: 24)
 */
export interface D2D1_INK_BEZIER_SEGMENT {
  /** Windows.Win32.Graphics.Direct2D.D2D1_INK_POINT */
  point1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.D2D1_INK_POINT */
  point2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.D2D1_INK_POINT */
  point3: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D1_INK_BEZIER_SEGMENT = 24;

export function allocD2D1_INK_BEZIER_SEGMENT(data?: Partial<D2D1_INK_BEZIER_SEGMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_INK_BEZIER_SEGMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.point1 !== undefined) view.setBigUint64(0, data.point1 === null ? 0n : util.toBigInt(util.toPointer(data.point1)), true);
  // 0x08: pointer
  if (data?.point2 !== undefined) view.setBigUint64(8, data.point2 === null ? 0n : util.toBigInt(util.toPointer(data.point2)), true);
  // 0x10: pointer
  if (data?.point3 !== undefined) view.setBigUint64(16, data.point3 === null ? 0n : util.toBigInt(util.toPointer(data.point3)), true);
  return buf;
}

export class D2D1_INK_BEZIER_SEGMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get point1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get point2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get point3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set point1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set point2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set point3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_INK_STYLE_PROPERTIES (size: 16)
 */
export interface D2D1_INK_STYLE_PROPERTIES {
  /** Windows.Win32.Graphics.Direct2D.D2D1_INK_NIB_SHAPE */
  nibShape: D2D1_INK_NIB_SHAPE;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_MATRIX_3X2_F */
  nibTransform: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D1_INK_STYLE_PROPERTIES = 16;

export function allocD2D1_INK_STYLE_PROPERTIES(data?: Partial<D2D1_INK_STYLE_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_INK_STYLE_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.nibShape !== undefined) view.setUint32(0, Number(data.nibShape), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.nibTransform !== undefined) view.setBigUint64(8, data.nibTransform === null ? 0n : util.toBigInt(util.toPointer(data.nibTransform)), true);
  return buf;
}

export class D2D1_INK_STYLE_PROPERTIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get nibShape(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get nibTransform(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set nibShape(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set nibTransform(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_GRADIENT_MESH_PATCH (size: 176)
 */
export interface D2D1_GRADIENT_MESH_PATCH {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point00: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point01: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point02: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point03: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point10: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point11: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point12: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point13: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point20: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point21: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point22: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point23: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point30: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point31: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point32: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point33: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D1_COLOR_F */
  color00: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D1_COLOR_F */
  color03: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D1_COLOR_F */
  color30: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D1_COLOR_F */
  color33: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.D2D1_PATCH_EDGE_MODE */
  topEdgeMode: D2D1_PATCH_EDGE_MODE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_PATCH_EDGE_MODE */
  leftEdgeMode: D2D1_PATCH_EDGE_MODE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_PATCH_EDGE_MODE */
  bottomEdgeMode: D2D1_PATCH_EDGE_MODE;
  /** Windows.Win32.Graphics.Direct2D.D2D1_PATCH_EDGE_MODE */
  rightEdgeMode: D2D1_PATCH_EDGE_MODE;
}

export const sizeofD2D1_GRADIENT_MESH_PATCH = 176;

export function allocD2D1_GRADIENT_MESH_PATCH(data?: Partial<D2D1_GRADIENT_MESH_PATCH>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_GRADIENT_MESH_PATCH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.point00 !== undefined) view.setBigUint64(0, data.point00 === null ? 0n : util.toBigInt(util.toPointer(data.point00)), true);
  // 0x08: pointer
  if (data?.point01 !== undefined) view.setBigUint64(8, data.point01 === null ? 0n : util.toBigInt(util.toPointer(data.point01)), true);
  // 0x10: pointer
  if (data?.point02 !== undefined) view.setBigUint64(16, data.point02 === null ? 0n : util.toBigInt(util.toPointer(data.point02)), true);
  // 0x18: pointer
  if (data?.point03 !== undefined) view.setBigUint64(24, data.point03 === null ? 0n : util.toBigInt(util.toPointer(data.point03)), true);
  // 0x20: pointer
  if (data?.point10 !== undefined) view.setBigUint64(32, data.point10 === null ? 0n : util.toBigInt(util.toPointer(data.point10)), true);
  // 0x28: pointer
  if (data?.point11 !== undefined) view.setBigUint64(40, data.point11 === null ? 0n : util.toBigInt(util.toPointer(data.point11)), true);
  // 0x30: pointer
  if (data?.point12 !== undefined) view.setBigUint64(48, data.point12 === null ? 0n : util.toBigInt(util.toPointer(data.point12)), true);
  // 0x38: pointer
  if (data?.point13 !== undefined) view.setBigUint64(56, data.point13 === null ? 0n : util.toBigInt(util.toPointer(data.point13)), true);
  // 0x40: pointer
  if (data?.point20 !== undefined) view.setBigUint64(64, data.point20 === null ? 0n : util.toBigInt(util.toPointer(data.point20)), true);
  // 0x48: pointer
  if (data?.point21 !== undefined) view.setBigUint64(72, data.point21 === null ? 0n : util.toBigInt(util.toPointer(data.point21)), true);
  // 0x50: pointer
  if (data?.point22 !== undefined) view.setBigUint64(80, data.point22 === null ? 0n : util.toBigInt(util.toPointer(data.point22)), true);
  // 0x58: pointer
  if (data?.point23 !== undefined) view.setBigUint64(88, data.point23 === null ? 0n : util.toBigInt(util.toPointer(data.point23)), true);
  // 0x60: pointer
  if (data?.point30 !== undefined) view.setBigUint64(96, data.point30 === null ? 0n : util.toBigInt(util.toPointer(data.point30)), true);
  // 0x68: pointer
  if (data?.point31 !== undefined) view.setBigUint64(104, data.point31 === null ? 0n : util.toBigInt(util.toPointer(data.point31)), true);
  // 0x70: pointer
  if (data?.point32 !== undefined) view.setBigUint64(112, data.point32 === null ? 0n : util.toBigInt(util.toPointer(data.point32)), true);
  // 0x78: pointer
  if (data?.point33 !== undefined) view.setBigUint64(120, data.point33 === null ? 0n : util.toBigInt(util.toPointer(data.point33)), true);
  // 0x80: pointer
  if (data?.color00 !== undefined) view.setBigUint64(128, data.color00 === null ? 0n : util.toBigInt(util.toPointer(data.color00)), true);
  // 0x88: pointer
  if (data?.color03 !== undefined) view.setBigUint64(136, data.color03 === null ? 0n : util.toBigInt(util.toPointer(data.color03)), true);
  // 0x90: pointer
  if (data?.color30 !== undefined) view.setBigUint64(144, data.color30 === null ? 0n : util.toBigInt(util.toPointer(data.color30)), true);
  // 0x98: pointer
  if (data?.color33 !== undefined) view.setBigUint64(152, data.color33 === null ? 0n : util.toBigInt(util.toPointer(data.color33)), true);
  // 0xa0: u32
  if (data?.topEdgeMode !== undefined) view.setUint32(160, Number(data.topEdgeMode), true);
  // 0xa4: u32
  if (data?.leftEdgeMode !== undefined) view.setUint32(164, Number(data.leftEdgeMode), true);
  // 0xa8: u32
  if (data?.bottomEdgeMode !== undefined) view.setUint32(168, Number(data.bottomEdgeMode), true);
  // 0xac: u32
  if (data?.rightEdgeMode !== undefined) view.setUint32(172, Number(data.rightEdgeMode), true);
  return buf;
}

export class D2D1_GRADIENT_MESH_PATCHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get point00(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get point01(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get point02(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get point03(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: pointer
  get point10(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(32, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x28: pointer
  get point11(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(40, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x30: pointer
  get point12(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(48, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x38: pointer
  get point13(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(56, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x40: pointer
  get point20(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(64, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x48: pointer
  get point21(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(72, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x50: pointer
  get point22(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(80, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x58: pointer
  get point23(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(88, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x60: pointer
  get point30(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(96, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x68: pointer
  get point31(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(104, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x70: pointer
  get point32(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(112, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x78: pointer
  get point33(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(120, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x80: pointer
  get color00(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(128, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x88: pointer
  get color03(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(136, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x90: pointer
  get color30(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(144, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x98: pointer
  get color33(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(152, true);
    return util.pointerFromFfi(ptr);
  }

  // 0xa0: u32
  get topEdgeMode(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get leftEdgeMode(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: u32
  get bottomEdgeMode(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get rightEdgeMode(): number {
    return this.view.getUint32(172, true);
  }

  // 0x00: pointer
  set point00(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set point01(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set point02(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set point03(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: pointer
  set point10(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(32, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x28: pointer
  set point11(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(40, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x30: pointer
  set point12(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(48, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x38: pointer
  set point13(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(56, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x40: pointer
  set point20(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(64, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x48: pointer
  set point21(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(72, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x50: pointer
  set point22(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(80, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x58: pointer
  set point23(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(88, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x60: pointer
  set point30(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(96, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x68: pointer
  set point31(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(104, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x70: pointer
  set point32(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(112, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x78: pointer
  set point33(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(120, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x80: pointer
  set color00(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(128, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x88: pointer
  set color03(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(136, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x90: pointer
  set color30(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(144, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x98: pointer
  set color33(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(152, util.toBigInt(util.toPointer(value)), true);
  }

  // 0xa0: u32
  set topEdgeMode(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set leftEdgeMode(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: u32
  set bottomEdgeMode(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set rightEdgeMode(value: number) {
    this.view.setUint32(172, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Direct2D.D2D1_SIMPLE_COLOR_PROFILE (size: 40)
 */
export interface D2D1_SIMPLE_COLOR_PROFILE {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  redPrimary: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  greenPrimary: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  bluePrimary: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  whitePointXZ: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.D2D1_GAMMA1 */
  gamma: D2D1_GAMMA1;
}

export const sizeofD2D1_SIMPLE_COLOR_PROFILE = 40;

export function allocD2D1_SIMPLE_COLOR_PROFILE(data?: Partial<D2D1_SIMPLE_COLOR_PROFILE>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_SIMPLE_COLOR_PROFILE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.redPrimary !== undefined) view.setBigUint64(0, data.redPrimary === null ? 0n : util.toBigInt(util.toPointer(data.redPrimary)), true);
  // 0x08: pointer
  if (data?.greenPrimary !== undefined) view.setBigUint64(8, data.greenPrimary === null ? 0n : util.toBigInt(util.toPointer(data.greenPrimary)), true);
  // 0x10: pointer
  if (data?.bluePrimary !== undefined) view.setBigUint64(16, data.bluePrimary === null ? 0n : util.toBigInt(util.toPointer(data.bluePrimary)), true);
  // 0x18: pointer
  if (data?.whitePointXZ !== undefined) view.setBigUint64(24, data.whitePointXZ === null ? 0n : util.toBigInt(util.toPointer(data.whitePointXZ)), true);
  // 0x20: u32
  if (data?.gamma !== undefined) view.setUint32(32, Number(data.gamma), true);
  // 0x24: pad4
  return buf;
}

export class D2D1_SIMPLE_COLOR_PROFILEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get redPrimary(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get greenPrimary(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get bluePrimary(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x18: pointer
  get whitePointXZ(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(24, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x20: u32
  get gamma(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: pointer
  set redPrimary(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set greenPrimary(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set bluePrimary(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x18: pointer
  set whitePointXZ(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(24, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x20: u32
  set gamma(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Direct2D.Common.D2D1_BEZIER_SEGMENT (size: 24)
 */
export interface D2D1_BEZIER_SEGMENT {
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point1: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point2: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */
  point3: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD2D1_BEZIER_SEGMENT = 24;

export function allocD2D1_BEZIER_SEGMENT(data?: Partial<D2D1_BEZIER_SEGMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofD2D1_BEZIER_SEGMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.point1 !== undefined) view.setBigUint64(0, data.point1 === null ? 0n : util.toBigInt(util.toPointer(data.point1)), true);
  // 0x08: pointer
  if (data?.point2 !== undefined) view.setBigUint64(8, data.point2 === null ? 0n : util.toBigInt(util.toPointer(data.point2)), true);
  // 0x10: pointer
  if (data?.point3 !== undefined) view.setBigUint64(16, data.point3 === null ? 0n : util.toBigInt(util.toPointer(data.point3)), true);
  return buf;
}

export class D2D1_BEZIER_SEGMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get point1(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get point2(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get point3(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set point1(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set point2(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, util.toBigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set point3(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, util.toBigInt(util.toPointer(value)), true);
  }
}

export type HRESULT = number;

// Native Libraries

try {
  var libd2d1_dll = Deno.dlopen("d2d1.dll", {
    D2D1CreateFactory: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    D2D1MakeRotateMatrix: {
      parameters: ["f32", "pointer", "pointer"],
      result: "void",
    },
    D2D1MakeSkewMatrix: {
      parameters: ["f32", "f32", "pointer", "pointer"],
      result: "void",
    },
    D2D1IsMatrixInvertible: {
      parameters: ["pointer"],
      result: "i32",
    },
    D2D1InvertMatrix: {
      parameters: ["pointer"],
      result: "i32",
    },
    D2D1CreateDevice: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    D2D1CreateDeviceContext: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    D2D1ConvertColorSpace: {
      parameters: ["u32", "u32", "pointer"],
      result: "pointer",
    },
    D2D1SinCos: {
      parameters: ["f32", "pointer", "pointer"],
      result: "void",
    },
    D2D1Tan: {
      parameters: ["f32"],
      result: "f32",
    },
    D2D1Vec3Length: {
      parameters: ["f32", "f32", "f32"],
      result: "f32",
    },
    D2D1ComputeMaximumScaleFactor: {
      parameters: ["pointer"],
      result: "f32",
    },
    D2D1GetGradientMeshInteriorPointsFromCoonsPatch: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "void",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function D2D1CreateFactory(
  factoryType: D2D1_FACTORY_TYPE /* Windows.Win32.Graphics.Direct2D.D2D1_FACTORY_TYPE */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  pFactoryOptions: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppIFactory: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd2d1_dll.D2D1CreateFactory(factoryType, util.toPointer(riid), util.toPointer(pFactoryOptions), util.toPointer(ppIFactory)));
}

export function D2D1MakeRotateMatrix(
  angle: number /* f32 */,
  center: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */,
  matrix: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libd2d1_dll.D2D1MakeRotateMatrix(angle, util.toPointer(center), util.toPointer(matrix));
}

export function D2D1MakeSkewMatrix(
  angleX: number /* f32 */,
  angleY: number /* f32 */,
  center: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Direct2D.Common.D2D_POINT_2F */,
  matrix: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libd2d1_dll.D2D1MakeSkewMatrix(angleX, angleY, util.toPointer(center), util.toPointer(matrix));
}

export function D2D1IsMatrixInvertible(
  matrix: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libd2d1_dll.D2D1IsMatrixInvertible(util.toPointer(matrix)));
}

export function D2D1InvertMatrix(
  matrix: Deno.PointerValue | Uint8Array | null /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libd2d1_dll.D2D1InvertMatrix(util.toPointer(matrix)));
}

export function D2D1CreateDevice(
  dxgiDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Dxgi.IDXGIDevice */,
  creationProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
  d2dDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd2d1_dll.D2D1CreateDevice(util.toPointer(dxgiDevice), util.toPointer(creationProperties), util.toPointer(d2dDevice)));
}

export function D2D1CreateDeviceContext(
  dxgiSurface: Uint8Array | Deno.PointerValue | null /* Windows.Win32.Graphics.Dxgi.IDXGISurface */,
  creationProperties: Deno.PointerValue | Uint8Array | null /* ptr */,
  d2dDeviceContext: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd2d1_dll.D2D1CreateDeviceContext(util.toPointer(dxgiSurface), util.toPointer(creationProperties), util.toPointer(d2dDeviceContext)));
}

export function D2D1ConvertColorSpace(
  sourceColorSpace: D2D1_COLOR_SPACE /* Windows.Win32.Graphics.Direct2D.D2D1_COLOR_SPACE */,
  destinationColorSpace: D2D1_COLOR_SPACE /* Windows.Win32.Graphics.Direct2D.D2D1_COLOR_SPACE */,
  color: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Graphics.Direct2D.Common.D2D1_COLOR_F */ {
  return util.pointerFromFfi(libd2d1_dll.D2D1ConvertColorSpace(sourceColorSpace, destinationColorSpace, util.toPointer(color)));
}

export function D2D1SinCos(
  angle: number /* f32 */,
  s: Deno.PointerValue | Uint8Array | null /* ptr */,
  c: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libd2d1_dll.D2D1SinCos(angle, util.toPointer(s), util.toPointer(c));
}

export function D2D1Tan(
  angle: number /* f32 */,
): number /* f32 */ {
  return libd2d1_dll.D2D1Tan(angle);
}

export function D2D1Vec3Length(
  x: number /* f32 */,
  y: number /* f32 */,
  z: number /* f32 */,
): number /* f32 */ {
  return libd2d1_dll.D2D1Vec3Length(x, y, z);
}

export function D2D1ComputeMaximumScaleFactor(
  matrix: Deno.PointerValue | Uint8Array | null /* ptr */,
): number /* f32 */ {
  return libd2d1_dll.D2D1ComputeMaximumScaleFactor(util.toPointer(matrix));
}

export function D2D1GetGradientMeshInteriorPointsFromCoonsPatch(
  pPoint0: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPoint1: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPoint2: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPoint3: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPoint4: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPoint5: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPoint6: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPoint7: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPoint8: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPoint9: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPoint10: Deno.PointerValue | Uint8Array | null /* ptr */,
  pPoint11: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTensorPoint11: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTensorPoint12: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTensorPoint21: Deno.PointerValue | Uint8Array | null /* ptr */,
  pTensorPoint22: Deno.PointerValue | Uint8Array | null /* ptr */,
): void /* void */ {
  return libd2d1_dll.D2D1GetGradientMeshInteriorPointsFromCoonsPatch(util.toPointer(pPoint0), util.toPointer(pPoint1), util.toPointer(pPoint2), util.toPointer(pPoint3), util.toPointer(pPoint4), util.toPointer(pPoint5), util.toPointer(pPoint6), util.toPointer(pPoint7), util.toPointer(pPoint8), util.toPointer(pPoint9), util.toPointer(pPoint10), util.toPointer(pPoint11), util.toPointer(pTensorPoint11), util.toPointer(pTensorPoint12), util.toPointer(pTensorPoint21), util.toPointer(pTensorPoint22));
}

