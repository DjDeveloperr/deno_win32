/// Auto-generated by Deno Win32: Windows.Win32.Graphics.CompositionSwapchain.Apis

import * as util from "../../util.ts";

// Enums
export type PresentStatisticsKind = number;
export type PresentStatus = number;
export type CompositionFrameInstanceKind = number;
export type DXGI_COLOR_SPACE_TYPE = number;

// Constants
export const PresentStatisticsKind_PresentStatus = 1;
export const PresentStatisticsKind_CompositionFrame = 2;
export const PresentStatisticsKind_IndependentFlipFrame = 3;
export const PresentStatus_Queued = 0;
export const PresentStatus_Skipped = 1;
export const PresentStatus_Canceled = 2;
export const CompositionFrameInstanceKind_ComposedOnScreen = 0;
export const CompositionFrameInstanceKind_ScanoutOnScreen = 1;
export const CompositionFrameInstanceKind_ComposedToIntermediate = 2;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 = 0;
export const DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709 = 1;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709 = 2;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020 = 3;
export const DXGI_COLOR_SPACE_RESERVED = 4;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 = 5;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 = 6;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601 = 7;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 = 8;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709 = 9;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 = 10;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 = 11;
export const DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020 = 12;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020 = 13;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020 = 14;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020 = 17;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_GHLG_TOPLEFT_P2020 = 18;
export const DXGI_COLOR_SPACE_YCBCR_FULL_GHLG_TOPLEFT_P2020 = 19;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P709 = 20;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P2020 = 21;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P709 = 22;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P2020 = 23;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_TOPLEFT_P2020 = 24;
export const DXGI_COLOR_SPACE_CUSTOM = `-1`;

// Structs

/**
 * Windows.Win32.Graphics.CompositionSwapchain.SystemInterruptTime (size: 8)
 */
export interface SystemInterruptTime {
  /** u64 */
  value: Deno.PointerValue;
}

export const sizeofSystemInterruptTime = 8;

export function allocSystemInterruptTime(data?: Partial<SystemInterruptTime>): Uint8Array {
  const buf = new Uint8Array(sizeofSystemInterruptTime);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.value !== undefined) view.setBigUint64(0, BigInt(data.value), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.CompositionSwapchain.PresentationTransform (size: 24)
 */
export interface PresentationTransform {
  /** f32 */
  M11: number;
  /** f32 */
  M12: number;
  /** f32 */
  M21: number;
  /** f32 */
  M22: number;
  /** f32 */
  M31: number;
  /** f32 */
  M32: number;
}

export const sizeofPresentationTransform = 24;

export function allocPresentationTransform(data?: Partial<PresentationTransform>): Uint8Array {
  const buf = new Uint8Array(sizeofPresentationTransform);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.M11 !== undefined) view.setFloat32(0, Number(data.M11), true);
  // 0x04: f32
  if (data?.M12 !== undefined) view.setFloat32(4, Number(data.M12), true);
  // 0x08: f32
  if (data?.M21 !== undefined) view.setFloat32(8, Number(data.M21), true);
  // 0x0c: f32
  if (data?.M22 !== undefined) view.setFloat32(12, Number(data.M22), true);
  // 0x10: f32
  if (data?.M31 !== undefined) view.setFloat32(16, Number(data.M31), true);
  // 0x14: f32
  if (data?.M32 !== undefined) view.setFloat32(20, Number(data.M32), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.LUID (size: 8)
 */
export interface LUID {
  /** u32 */
  LowPart: number;
  /** i32 */
  HighPart: number;
}

export const sizeofLUID = 8;

export function allocLUID(data?: Partial<LUID>): Uint8Array {
  const buf = new Uint8Array(sizeofLUID);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LowPart !== undefined) view.setUint32(0, Number(data.LowPart), true);
  // 0x04: i32
  if (data?.HighPart !== undefined) view.setInt32(4, Number(data.HighPart), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.CompositionSwapchain.CompositionFrameDisplayInstance (size: 48)
 */
export interface CompositionFrameDisplayInstance {
  /** Windows.Win32.Foundation.LUID */
  displayAdapterLUID: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  displayVidPnSourceId: number;
  /** u32 */
  displayUniqueId: number;
  /** Windows.Win32.Foundation.LUID */
  renderAdapterLUID: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.CompositionSwapchain.CompositionFrameInstanceKind */
  instanceKind: CompositionFrameInstanceKind;
  /** Windows.Win32.Graphics.CompositionSwapchain.PresentationTransform */
  finalTransform: Uint8Array | Deno.PointerValue | null;
  /** u8 */
  requiredCrossAdapterCopy: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_COLOR_SPACE_TYPE */
  colorSpace: DXGI_COLOR_SPACE_TYPE;
}

export const sizeofCompositionFrameDisplayInstance = 48;

export function allocCompositionFrameDisplayInstance(data?: Partial<CompositionFrameDisplayInstance>): Uint8Array {
  const buf = new Uint8Array(sizeofCompositionFrameDisplayInstance);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.displayAdapterLUID !== undefined) view.setBigUint64(0, data.displayAdapterLUID === null ? 0n : BigInt(util.toPointer(data.displayAdapterLUID)), true);
  // 0x08: u32
  if (data?.displayVidPnSourceId !== undefined) view.setUint32(8, Number(data.displayVidPnSourceId), true);
  // 0x0c: u32
  if (data?.displayUniqueId !== undefined) view.setUint32(12, Number(data.displayUniqueId), true);
  // 0x10: pointer
  if (data?.renderAdapterLUID !== undefined) view.setBigUint64(16, data.renderAdapterLUID === null ? 0n : BigInt(util.toPointer(data.renderAdapterLUID)), true);
  // 0x18: i32
  if (data?.instanceKind !== undefined) view.setInt32(24, Number(data.instanceKind), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.finalTransform !== undefined) view.setBigUint64(32, data.finalTransform === null ? 0n : BigInt(util.toPointer(data.finalTransform)), true);
  // 0x28: u8
  if (data?.requiredCrossAdapterCopy !== undefined) view.setUint8(40, Number(data.requiredCrossAdapterCopy));
  // 0x29: i32
  if (data?.colorSpace !== undefined) view.setInt32(41, Number(data.colorSpace), true);
  // 0x2d: pad3
  return buf;
}

export type HRESULT = number;

// Native Libraries

try {
  var libdcomp_dll = Deno.dlopen("dcomp.dll", {
    CreatePresentationFactory: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CreatePresentationFactory(
  d3dDevice: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  presentationFactory: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdcomp_dll.CreatePresentationFactory(util.toPointer(d3dDevice), util.toPointer(riid), util.toPointer(presentationFactory)));
}

