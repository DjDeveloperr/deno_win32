/// Auto-generated by Deno Win32: Windows.Win32.Graphics.DirectDraw.Apis

import * as util from "../../util.ts";

// Constants
export const DIRECTDRAW_VERSION = 1792;
export const _FACDD = 2166;
export const DDENUM_ATTACHEDSECONDARYDEVICES = 1;
export const DDENUM_DETACHEDSECONDARYDEVICES = 2;
export const DDENUM_NONDISPLAYDEVICES = 4;
export const REGSTR_KEY_DDHW_DESCRIPTION = `Description`;
export const REGSTR_KEY_DDHW_DRIVERNAME = `DriverName`;
export const REGSTR_PATH_DDHW = `Hardware\\DirectDrawDrivers`;
export const DDCREATE_HARDWAREONLY = 1;
export const DDCREATE_EMULATIONONLY = 2;
export const MAX_DDDEVICEID_STRING = 512;
export const DDGDI_GETHOSTIDENTIFIER = 1;
export const DDSD_CAPS = 1;
export const DDSD_HEIGHT = 2;
export const DDSD_WIDTH = 4;
export const DDSD_PITCH = 8;
export const DDSD_BACKBUFFERCOUNT = 32;
export const DDSD_ZBUFFERBITDEPTH = 64;
export const DDSD_ALPHABITDEPTH = 128;
export const DDSD_LPSURFACE = 2048;
export const DDSD_PIXELFORMAT = 4096;
export const DDSD_CKDESTOVERLAY = 8192;
export const DDSD_CKDESTBLT = 16384;
export const DDSD_CKSRCOVERLAY = 32768;
export const DDSD_CKSRCBLT = 65536;
export const DDSD_MIPMAPCOUNT = 131072;
export const DDSD_REFRESHRATE = 262144;
export const DDSD_LINEARSIZE = 524288;
export const DDSD_TEXTURESTAGE = 1048576;
export const DDSD_FVF = 2097152;
export const DDSD_SRCVBHANDLE = 4194304;
export const DDSD_DEPTH = 8388608;
export const DDSD_ALL = 16775662;
export const DDOSD_GUID = 1;
export const DDOSD_COMPRESSION_RATIO = 2;
export const DDOSD_SCAPS = 4;
export const DDOSD_OSCAPS = 8;
export const DDOSD_ALL = 15;
export const DDOSDCAPS_OPTCOMPRESSED = 1;
export const DDOSDCAPS_OPTREORDERED = 2;
export const DDOSDCAPS_MONOLITHICMIPMAP = 4;
export const DDOSDCAPS_VALIDSCAPS = 805324800;
export const DDOSDCAPS_VALIDOSCAPS = 7;
export const DDCOLOR_BRIGHTNESS = 1;
export const DDCOLOR_CONTRAST = 2;
export const DDCOLOR_HUE = 4;
export const DDCOLOR_SATURATION = 8;
export const DDCOLOR_SHARPNESS = 16;
export const DDCOLOR_GAMMA = 32;
export const DDCOLOR_COLORENABLE = 64;
export const DDSCAPS_RESERVED1 = 1;
export const DDSCAPS_ALPHA = 2;
export const DDSCAPS_BACKBUFFER = 4;
export const DDSCAPS_COMPLEX = 8;
export const DDSCAPS_FLIP = 16;
export const DDSCAPS_FRONTBUFFER = 32;
export const DDSCAPS_OFFSCREENPLAIN = 64;
export const DDSCAPS_OVERLAY = 128;
export const DDSCAPS_PALETTE = 256;
export const DDSCAPS_PRIMARYSURFACE = 512;
export const DDSCAPS_RESERVED3 = 1024;
export const DDSCAPS_PRIMARYSURFACELEFT = 0;
export const DDSCAPS_SYSTEMMEMORY = 2048;
export const DDSCAPS_TEXTURE = 4096;
export const DDSCAPS_3DDEVICE = 8192;
export const DDSCAPS_VIDEOMEMORY = 16384;
export const DDSCAPS_VISIBLE = 32768;
export const DDSCAPS_WRITEONLY = 65536;
export const DDSCAPS_ZBUFFER = 131072;
export const DDSCAPS_OWNDC = 262144;
export const DDSCAPS_LIVEVIDEO = 524288;
export const DDSCAPS_HWCODEC = 1048576;
export const DDSCAPS_MODEX = 2097152;
export const DDSCAPS_MIPMAP = 4194304;
export const DDSCAPS_RESERVED2 = 8388608;
export const DDSCAPS_ALLOCONLOAD = 67108864;
export const DDSCAPS_VIDEOPORT = 134217728;
export const DDSCAPS_LOCALVIDMEM = 268435456;
export const DDSCAPS_NONLOCALVIDMEM = 536870912;
export const DDSCAPS_STANDARDVGAMODE = 1073741824;
export const DDSCAPS_OPTIMIZED = `-2147483648`;
export const DDSCAPS2_RESERVED4 = 2;
export const DDSCAPS2_HARDWAREDEINTERLACE = 0;
export const DDSCAPS2_HINTDYNAMIC = 4;
export const DDSCAPS2_HINTSTATIC = 8;
export const DDSCAPS2_TEXTUREMANAGE = 16;
export const DDSCAPS2_RESERVED1 = 32;
export const DDSCAPS2_RESERVED2 = 64;
export const DDSCAPS2_OPAQUE = 128;
export const DDSCAPS2_HINTANTIALIASING = 256;
export const DDSCAPS2_CUBEMAP = 512;
export const DDSCAPS2_CUBEMAP_POSITIVEX = 1024;
export const DDSCAPS2_CUBEMAP_NEGATIVEX = 2048;
export const DDSCAPS2_CUBEMAP_POSITIVEY = 4096;
export const DDSCAPS2_CUBEMAP_NEGATIVEY = 8192;
export const DDSCAPS2_CUBEMAP_POSITIVEZ = 16384;
export const DDSCAPS2_CUBEMAP_NEGATIVEZ = 32768;
export const DDSCAPS2_MIPMAPSUBLEVEL = 65536;
export const DDSCAPS2_D3DTEXTUREMANAGE = 131072;
export const DDSCAPS2_DONOTPERSIST = 262144;
export const DDSCAPS2_STEREOSURFACELEFT = 524288;
export const DDSCAPS2_VOLUME = 2097152;
export const DDSCAPS2_NOTUSERLOCKABLE = 4194304;
export const DDSCAPS2_POINTS = 8388608;
export const DDSCAPS2_RTPATCHES = 16777216;
export const DDSCAPS2_NPATCHES = 33554432;
export const DDSCAPS2_RESERVED3 = 67108864;
export const DDSCAPS2_DISCARDBACKBUFFER = 268435456;
export const DDSCAPS2_ENABLEALPHACHANNEL = 536870912;
export const DDSCAPS2_EXTENDEDFORMATPRIMARY = 1073741824;
export const DDSCAPS2_ADDITIONALPRIMARY = `-2147483648`;
export const DDSCAPS3_MULTISAMPLE_MASK = 31;
export const DDSCAPS3_MULTISAMPLE_QUALITY_MASK = 224;
export const DDSCAPS3_MULTISAMPLE_QUALITY_SHIFT = 5;
export const DDSCAPS3_RESERVED1 = 256;
export const DDSCAPS3_RESERVED2 = 512;
export const DDSCAPS3_LIGHTWEIGHTMIPMAP = 1024;
export const DDSCAPS3_AUTOGENMIPMAP = 2048;
export const DDSCAPS3_DMAP = 4096;
export const DDSCAPS3_CREATESHAREDRESOURCE = 8192;
export const DDSCAPS3_READONLYRESOURCE = 16384;
export const DDSCAPS3_OPENSHAREDRESOURCE = 32768;
export const DDCAPS_3D = 1;
export const DDCAPS_ALIGNBOUNDARYDEST = 2;
export const DDCAPS_ALIGNSIZEDEST = 4;
export const DDCAPS_ALIGNBOUNDARYSRC = 8;
export const DDCAPS_ALIGNSIZESRC = 16;
export const DDCAPS_ALIGNSTRIDE = 32;
export const DDCAPS_BLT = 64;
export const DDCAPS_BLTQUEUE = 128;
export const DDCAPS_BLTFOURCC = 256;
export const DDCAPS_BLTSTRETCH = 512;
export const DDCAPS_GDI = 1024;
export const DDCAPS_OVERLAY = 2048;
export const DDCAPS_OVERLAYCANTCLIP = 4096;
export const DDCAPS_OVERLAYFOURCC = 8192;
export const DDCAPS_OVERLAYSTRETCH = 16384;
export const DDCAPS_PALETTE = 32768;
export const DDCAPS_PALETTEVSYNC = 65536;
export const DDCAPS_READSCANLINE = 131072;
export const DDCAPS_RESERVED1 = 262144;
export const DDCAPS_VBI = 524288;
export const DDCAPS_ZBLTS = 1048576;
export const DDCAPS_ZOVERLAYS = 2097152;
export const DDCAPS_COLORKEY = 4194304;
export const DDCAPS_ALPHA = 8388608;
export const DDCAPS_COLORKEYHWASSIST = 16777216;
export const DDCAPS_NOHARDWARE = 33554432;
export const DDCAPS_BLTCOLORFILL = 67108864;
export const DDCAPS_BANKSWITCHED = 134217728;
export const DDCAPS_BLTDEPTHFILL = 268435456;
export const DDCAPS_CANCLIP = 536870912;
export const DDCAPS_CANCLIPSTRETCHED = 1073741824;
export const DDCAPS_CANBLTSYSMEM = `-2147483648`;
export const DDCAPS2_CERTIFIED = 1;
export const DDCAPS2_NO2DDURING3DSCENE = 2;
export const DDCAPS2_VIDEOPORT = 4;
export const DDCAPS2_AUTOFLIPOVERLAY = 8;
export const DDCAPS2_CANBOBINTERLEAVED = 16;
export const DDCAPS2_CANBOBNONINTERLEAVED = 32;
export const DDCAPS2_COLORCONTROLOVERLAY = 64;
export const DDCAPS2_COLORCONTROLPRIMARY = 128;
export const DDCAPS2_CANDROPZ16BIT = 256;
export const DDCAPS2_NONLOCALVIDMEM = 512;
export const DDCAPS2_NONLOCALVIDMEMCAPS = 1024;
export const DDCAPS2_NOPAGELOCKREQUIRED = 2048;
export const DDCAPS2_WIDESURFACES = 4096;
export const DDCAPS2_CANFLIPODDEVEN = 8192;
export const DDCAPS2_CANBOBHARDWARE = 16384;
export const DDCAPS2_COPYFOURCC = 32768;
export const DDCAPS2_PRIMARYGAMMA = 131072;
export const DDCAPS2_CANRENDERWINDOWED = 524288;
export const DDCAPS2_CANCALIBRATEGAMMA = 1048576;
export const DDCAPS2_FLIPINTERVAL = 2097152;
export const DDCAPS2_FLIPNOVSYNC = 4194304;
export const DDCAPS2_CANMANAGETEXTURE = 8388608;
export const DDCAPS2_TEXMANINNONLOCALVIDMEM = 16777216;
export const DDCAPS2_STEREO = 33554432;
export const DDCAPS2_SYSTONONLOCAL_AS_SYSTOLOCAL = 67108864;
export const DDCAPS2_RESERVED1 = 134217728;
export const DDCAPS2_CANMANAGERESOURCE = 268435456;
export const DDCAPS2_DYNAMICTEXTURES = 536870912;
export const DDCAPS2_CANAUTOGENMIPMAP = 1073741824;
export const DDCAPS2_CANSHARERESOURCE = `-2147483648`;
export const DDFXALPHACAPS_BLTALPHAEDGEBLEND = 1;
export const DDFXALPHACAPS_BLTALPHAPIXELS = 2;
export const DDFXALPHACAPS_BLTALPHAPIXELSNEG = 4;
export const DDFXALPHACAPS_BLTALPHASURFACES = 8;
export const DDFXALPHACAPS_BLTALPHASURFACESNEG = 16;
export const DDFXALPHACAPS_OVERLAYALPHAEDGEBLEND = 32;
export const DDFXALPHACAPS_OVERLAYALPHAPIXELS = 64;
export const DDFXALPHACAPS_OVERLAYALPHAPIXELSNEG = 128;
export const DDFXALPHACAPS_OVERLAYALPHASURFACES = 256;
export const DDFXALPHACAPS_OVERLAYALPHASURFACESNEG = 512;
export const DDFXCAPS_BLTARITHSTRETCHY = 32;
export const DDFXCAPS_BLTARITHSTRETCHYN = 16;
export const DDFXCAPS_BLTMIRRORLEFTRIGHT = 64;
export const DDFXCAPS_BLTMIRRORUPDOWN = 128;
export const DDFXCAPS_BLTROTATION = 256;
export const DDFXCAPS_BLTROTATION90 = 512;
export const DDFXCAPS_BLTSHRINKX = 1024;
export const DDFXCAPS_BLTSHRINKXN = 2048;
export const DDFXCAPS_BLTSHRINKY = 4096;
export const DDFXCAPS_BLTSHRINKYN = 8192;
export const DDFXCAPS_BLTSTRETCHX = 16384;
export const DDFXCAPS_BLTSTRETCHXN = 32768;
export const DDFXCAPS_BLTSTRETCHY = 65536;
export const DDFXCAPS_BLTSTRETCHYN = 131072;
export const DDFXCAPS_OVERLAYARITHSTRETCHY = 262144;
export const DDFXCAPS_OVERLAYARITHSTRETCHYN = 8;
export const DDFXCAPS_OVERLAYSHRINKX = 524288;
export const DDFXCAPS_OVERLAYSHRINKXN = 1048576;
export const DDFXCAPS_OVERLAYSHRINKY = 2097152;
export const DDFXCAPS_OVERLAYSHRINKYN = 4194304;
export const DDFXCAPS_OVERLAYSTRETCHX = 8388608;
export const DDFXCAPS_OVERLAYSTRETCHXN = 16777216;
export const DDFXCAPS_OVERLAYSTRETCHY = 33554432;
export const DDFXCAPS_OVERLAYSTRETCHYN = 67108864;
export const DDFXCAPS_OVERLAYMIRRORLEFTRIGHT = 134217728;
export const DDFXCAPS_OVERLAYMIRRORUPDOWN = 268435456;
export const DDFXCAPS_OVERLAYDEINTERLACE = 536870912;
export const DDFXCAPS_BLTALPHA = 1;
export const DDFXCAPS_BLTFILTER = 32;
export const DDFXCAPS_OVERLAYALPHA = 4;
export const DDFXCAPS_OVERLAYFILTER = 262144;
export const DDSVCAPS_RESERVED1 = 1;
export const DDSVCAPS_RESERVED2 = 2;
export const DDSVCAPS_RESERVED3 = 4;
export const DDSVCAPS_RESERVED4 = 8;
export const DDSVCAPS_STEREOSEQUENTIAL = 16;
export const DDPCAPS_4BIT = 1;
export const DDPCAPS_8BITENTRIES = 2;
export const DDPCAPS_8BIT = 4;
export const DDPCAPS_INITIALIZE = 0;
export const DDPCAPS_PRIMARYSURFACE = 16;
export const DDPCAPS_PRIMARYSURFACELEFT = 32;
export const DDPCAPS_ALLOW256 = 64;
export const DDPCAPS_VSYNC = 128;
export const DDPCAPS_1BIT = 256;
export const DDPCAPS_2BIT = 512;
export const DDPCAPS_ALPHA = 1024;
export const DDSPD_IUNKNOWNPOINTER = 1;
export const DDSPD_VOLATILE = 2;
export const DDBD_1 = 16384;
export const DDBD_2 = 8192;
export const DDBD_4 = 4096;
export const DDBD_8 = 2048;
export const DDBD_16 = 1024;
export const DDBD_24 = 512;
export const DDBD_32 = 256;
export const DDCKEY_COLORSPACE = 1;
export const DDCKEY_DESTBLT = 2;
export const DDCKEY_DESTOVERLAY = 4;
export const DDCKEY_SRCBLT = 8;
export const DDCKEY_SRCOVERLAY = 16;
export const DDCKEYCAPS_DESTBLT = 1;
export const DDCKEYCAPS_DESTBLTCLRSPACE = 2;
export const DDCKEYCAPS_DESTBLTCLRSPACEYUV = 4;
export const DDCKEYCAPS_DESTBLTYUV = 8;
export const DDCKEYCAPS_DESTOVERLAY = 16;
export const DDCKEYCAPS_DESTOVERLAYCLRSPACE = 32;
export const DDCKEYCAPS_DESTOVERLAYCLRSPACEYUV = 64;
export const DDCKEYCAPS_DESTOVERLAYONEACTIVE = 128;
export const DDCKEYCAPS_DESTOVERLAYYUV = 256;
export const DDCKEYCAPS_SRCBLT = 512;
export const DDCKEYCAPS_SRCBLTCLRSPACE = 1024;
export const DDCKEYCAPS_SRCBLTCLRSPACEYUV = 2048;
export const DDCKEYCAPS_SRCBLTYUV = 4096;
export const DDCKEYCAPS_SRCOVERLAY = 8192;
export const DDCKEYCAPS_SRCOVERLAYCLRSPACE = 16384;
export const DDCKEYCAPS_SRCOVERLAYCLRSPACEYUV = 32768;
export const DDCKEYCAPS_SRCOVERLAYONEACTIVE = 65536;
export const DDCKEYCAPS_SRCOVERLAYYUV = 131072;
export const DDCKEYCAPS_NOCOSTOVERLAY = 262144;
export const DDPF_ALPHAPIXELS = 1;
export const DDPF_ALPHA = 2;
export const DDPF_FOURCC = 4;
export const DDPF_PALETTEINDEXED4 = 8;
export const DDPF_PALETTEINDEXEDTO8 = 16;
export const DDPF_PALETTEINDEXED8 = 32;
export const DDPF_RGB = 64;
export const DDPF_COMPRESSED = 128;
export const DDPF_RGBTOYUV = 256;
export const DDPF_YUV = 512;
export const DDPF_ZBUFFER = 1024;
export const DDPF_PALETTEINDEXED1 = 2048;
export const DDPF_PALETTEINDEXED2 = 4096;
export const DDPF_ZPIXELS = 8192;
export const DDPF_STENCILBUFFER = 16384;
export const DDPF_ALPHAPREMULT = 32768;
export const DDPF_LUMINANCE = 131072;
export const DDPF_BUMPLUMINANCE = 262144;
export const DDPF_BUMPDUDV = 524288;
export const DDENUMSURFACES_ALL = 1;
export const DDENUMSURFACES_MATCH = 2;
export const DDENUMSURFACES_NOMATCH = 4;
export const DDENUMSURFACES_CANBECREATED = 8;
export const DDENUMSURFACES_DOESEXIST = 16;
export const DDSDM_STANDARDVGAMODE = 1;
export const DDEDM_REFRESHRATES = 1;
export const DDEDM_STANDARDVGAMODES = 2;
export const DDSCL_FULLSCREEN = 1;
export const DDSCL_ALLOWREBOOT = 2;
export const DDSCL_NOWINDOWCHANGES = 4;
export const DDSCL_NORMAL = 8;
export const DDSCL_EXCLUSIVE = 16;
export const DDSCL_ALLOWMODEX = 64;
export const DDSCL_SETFOCUSWINDOW = 128;
export const DDSCL_SETDEVICEWINDOW = 256;
export const DDSCL_CREATEDEVICEWINDOW = 512;
export const DDSCL_MULTITHREADED = 1024;
export const DDSCL_FPUSETUP = 2048;
export const DDSCL_FPUPRESERVE = 4096;
export const DDBLT_ALPHADEST = 1;
export const DDBLT_ALPHADESTCONSTOVERRIDE = 2;
export const DDBLT_ALPHADESTNEG = 4;
export const DDBLT_ALPHADESTSURFACEOVERRIDE = 8;
export const DDBLT_ALPHAEDGEBLEND = 16;
export const DDBLT_ALPHASRC = 32;
export const DDBLT_ALPHASRCCONSTOVERRIDE = 64;
export const DDBLT_ALPHASRCNEG = 128;
export const DDBLT_ALPHASRCSURFACEOVERRIDE = 256;
export const DDBLT_ASYNC = 512;
export const DDBLT_COLORFILL = 1024;
export const DDBLT_DDFX = 2048;
export const DDBLT_DDROPS = 4096;
export const DDBLT_KEYDEST = 8192;
export const DDBLT_KEYDESTOVERRIDE = 16384;
export const DDBLT_KEYSRC = 32768;
export const DDBLT_KEYSRCOVERRIDE = 65536;
export const DDBLT_ROP = 131072;
export const DDBLT_ROTATIONANGLE = 262144;
export const DDBLT_ZBUFFER = 524288;
export const DDBLT_ZBUFFERDESTCONSTOVERRIDE = 1048576;
export const DDBLT_ZBUFFERDESTOVERRIDE = 2097152;
export const DDBLT_ZBUFFERSRCCONSTOVERRIDE = 4194304;
export const DDBLT_ZBUFFERSRCOVERRIDE = 8388608;
export const DDBLT_WAIT = 16777216;
export const DDBLT_DEPTHFILL = 33554432;
export const DDBLT_DONOTWAIT = 134217728;
export const DDBLT_PRESENTATION = 268435456;
export const DDBLT_LAST_PRESENTATION = 536870912;
export const DDBLT_EXTENDED_FLAGS = 1073741824;
export const DDBLT_EXTENDED_LINEAR_CONTENT = 4;
export const DDBLTFAST_NOCOLORKEY = 0;
export const DDBLTFAST_SRCCOLORKEY = 1;
export const DDBLTFAST_DESTCOLORKEY = 2;
export const DDBLTFAST_WAIT = 16;
export const DDBLTFAST_DONOTWAIT = 32;
export const DDFLIP_WAIT = 1;
export const DDFLIP_EVEN = 2;
export const DDFLIP_ODD = 4;
export const DDFLIP_NOVSYNC = 8;
export const DDFLIP_INTERVAL2 = 33554432;
export const DDFLIP_INTERVAL3 = 50331648;
export const DDFLIP_INTERVAL4 = 67108864;
export const DDFLIP_STEREO = 16;
export const DDFLIP_DONOTWAIT = 32;
export const DDOVER_ALPHADEST = 1;
export const DDOVER_ALPHADESTCONSTOVERRIDE = 2;
export const DDOVER_ALPHADESTNEG = 4;
export const DDOVER_ALPHADESTSURFACEOVERRIDE = 8;
export const DDOVER_ALPHAEDGEBLEND = 16;
export const DDOVER_ALPHASRC = 32;
export const DDOVER_ALPHASRCCONSTOVERRIDE = 64;
export const DDOVER_ALPHASRCNEG = 128;
export const DDOVER_ALPHASRCSURFACEOVERRIDE = 256;
export const DDOVER_HIDE = 512;
export const DDOVER_KEYDEST = 1024;
export const DDOVER_KEYDESTOVERRIDE = 2048;
export const DDOVER_KEYSRC = 4096;
export const DDOVER_KEYSRCOVERRIDE = 8192;
export const DDOVER_SHOW = 16384;
export const DDOVER_ADDDIRTYRECT = 32768;
export const DDOVER_REFRESHDIRTYRECTS = 65536;
export const DDOVER_REFRESHALL = 131072;
export const DDOVER_DDFX = 524288;
export const DDOVER_AUTOFLIP = 1048576;
export const DDOVER_BOB = 2097152;
export const DDOVER_OVERRIDEBOBWEAVE = 4194304;
export const DDOVER_INTERLEAVED = 8388608;
export const DDOVER_BOBHARDWARE = 16777216;
export const DDOVER_ARGBSCALEFACTORS = 33554432;
export const DDOVER_DEGRADEARGBSCALING = 67108864;
export const DDSETSURFACEDESC_RECREATEDC = 0;
export const DDSETSURFACEDESC_PRESERVEDC = 1;
export const DDLOCK_SURFACEMEMORYPTR = 0;
export const DDLOCK_WAIT = 1;
export const DDLOCK_EVENT = 2;
export const DDLOCK_READONLY = 16;
export const DDLOCK_WRITEONLY = 32;
export const DDLOCK_NOSYSLOCK = 2048;
export const DDLOCK_NOOVERWRITE = 4096;
export const DDLOCK_DISCARDCONTENTS = 8192;
export const DDLOCK_OKTOSWAP = 8192;
export const DDLOCK_DONOTWAIT = 16384;
export const DDLOCK_HASVOLUMETEXTUREBOXRECT = 32768;
export const DDLOCK_NODIRTYUPDATE = 65536;
export const DDBLTFX_ARITHSTRETCHY = 1;
export const DDBLTFX_MIRRORLEFTRIGHT = 2;
export const DDBLTFX_MIRRORUPDOWN = 4;
export const DDBLTFX_NOTEARING = 8;
export const DDBLTFX_ROTATE180 = 16;
export const DDBLTFX_ROTATE270 = 32;
export const DDBLTFX_ROTATE90 = 64;
export const DDBLTFX_ZBUFFERRANGE = 128;
export const DDBLTFX_ZBUFFERBASEDEST = 256;
export const DDOVERFX_ARITHSTRETCHY = 1;
export const DDOVERFX_MIRRORLEFTRIGHT = 2;
export const DDOVERFX_MIRRORUPDOWN = 4;
export const DDOVERFX_DEINTERLACE = 8;
export const DDWAITVB_BLOCKBEGIN = 1;
export const DDWAITVB_BLOCKBEGINEVENT = 2;
export const DDWAITVB_BLOCKEND = 4;
export const DDGFS_CANFLIP = 1;
export const DDGFS_ISFLIPDONE = 2;
export const DDGBS_CANBLT = 1;
export const DDGBS_ISBLTDONE = 2;
export const DDENUMOVERLAYZ_BACKTOFRONT = 0;
export const DDENUMOVERLAYZ_FRONTTOBACK = 1;
export const DDOVERZ_SENDTOFRONT = 0;
export const DDOVERZ_SENDTOBACK = 1;
export const DDOVERZ_MOVEFORWARD = 2;
export const DDOVERZ_MOVEBACKWARD = 3;
export const DDOVERZ_INSERTINFRONTOF = 4;
export const DDOVERZ_INSERTINBACKOF = 5;
export const DDSGR_CALIBRATE = 1;
export const DDSMT_ISTESTREQUIRED = 1;
export const DDEM_MODEPASSED = 1;
export const DDEM_MODEFAILED = 2;
export const DDENUMRET_CANCEL = 0;
export const DDENUMRET_OK = 1;
export const DDERR_NOTINITIALIZED = `-2147221008`;
export const OBJECT_ISROOT = `-2147483648`;
export const DDUNSUPPORTEDMODE = 4294967295;
export const DDPF_NOVEL_TEXTURE_FORMAT = 1048576;
export const DDPF_D3DFORMAT = 2097152;
export const D3DFORMAT_OP_TEXTURE = 1;
export const D3DFORMAT_OP_VOLUMETEXTURE = 2;
export const D3DFORMAT_OP_CUBETEXTURE = 4;
export const D3DFORMAT_OP_OFFSCREEN_RENDERTARGET = 8;
export const D3DFORMAT_OP_SAME_FORMAT_RENDERTARGET = 16;
export const D3DFORMAT_OP_ZSTENCIL = 64;
export const D3DFORMAT_OP_ZSTENCIL_WITH_ARBITRARY_COLOR_DEPTH = 128;
export const D3DFORMAT_OP_SAME_FORMAT_UP_TO_ALPHA_RENDERTARGET = 256;
export const D3DFORMAT_OP_DISPLAYMODE = 1024;
export const D3DFORMAT_OP_3DACCELERATION = 2048;
export const D3DFORMAT_OP_PIXELSIZE = 4096;
export const D3DFORMAT_OP_CONVERT_TO_ARGB = 8192;
export const D3DFORMAT_OP_OFFSCREENPLAIN = 16384;
export const D3DFORMAT_OP_SRGBREAD = 32768;
export const D3DFORMAT_OP_BUMPMAP = 65536;
export const D3DFORMAT_OP_DMAP = 131072;
export const D3DFORMAT_OP_NOFILTER = 262144;
export const D3DFORMAT_MEMBEROFGROUP_ARGB = 524288;
export const D3DFORMAT_OP_SRGBWRITE = 1048576;
export const D3DFORMAT_OP_NOALPHABLEND = 2097152;
export const D3DFORMAT_OP_AUTOGENMIPMAP = 4194304;
export const D3DFORMAT_OP_VERTEXTEXTURE = 8388608;
export const D3DFORMAT_OP_NOTEXCOORDWRAPNORMIP = 16777216;
export const DELETED_OK = 0;
export const DELETED_LASTONE = 1;
export const DELETED_NOTFOUND = 2;
export const DCICOMMAND = 3075;
export const DD_VERSION = 512;
export const DD_RUNTIME_VERSION = 2306;
export const DD_HAL_VERSION = 256;
export const DDCREATEDRIVEROBJECT = 10;
export const DDGET32BITDRIVERNAME = 11;
export const DDNEWCALLBACKFNS = 12;
export const DDVERSIONINFO = 13;
export const DDHAL_DRIVER_DLLNAME = `DDRAW16.DLL`;
export const DDHAL_APP_DLLNAME = `DDRAW.DLL`;
export const CCHDEVICENAME = 32;
export const MAX_DRIVER_NAME = 32;
export const MAX_PALETTE_SIZE = 256;
export const MAX_AUTOFLIP_BUFFERS = 10;
export const DDSCAPS_EXECUTEBUFFER = 8388608;
export const DDSCAPS2_VERTEXBUFFER = 32;
export const DDSCAPS2_COMMANDBUFFER = 64;
export const DDSCAPS2_INDEXBUFFER = 67108864;
export const DDSCAPS3_VIDEO = 512;
export const D3DFMT_INTERNAL_D32 = 71;
export const D3DFMT_INTERNAL_S1D15 = 72;
export const D3DFMT_INTERNAL_D15S1 = 73;
export const D3DFMT_INTERNAL_S8D24 = 74;
export const D3DFMT_INTERNAL_D24S8 = 75;
export const D3DFMT_INTERNAL_X8D24 = 76;
export const D3DFMT_INTERNAL_D24X8 = 77;
export const DDHAL_PLEASEALLOC_BLOCKSIZE = 2;
export const DDHAL_PLEASEALLOC_LINEARSIZE = 3;
export const VIDMEM_ISLINEAR = 1;
export const VIDMEM_ISRECTANGULAR = 2;
export const VIDMEM_ISHEAP = 4;
export const VIDMEM_ISNONLOCAL = 8;
export const VIDMEM_ISWC = 16;
export const VIDMEM_HEAPDISABLED = 32;
export const HEAPALIASINFO_MAPPEDREAL = 1;
export const HEAPALIASINFO_MAPPEDDUMMY = 2;
export const DDHAL_CB32_DESTROYDRIVER = 1;
export const DDHAL_CB32_CREATESURFACE = 2;
export const DDHAL_CB32_SETCOLORKEY = 4;
export const DDHAL_CB32_SETMODE = 8;
export const DDHAL_CB32_WAITFORVERTICALBLANK = 16;
export const DDHAL_CB32_CANCREATESURFACE = 32;
export const DDHAL_CB32_CREATEPALETTE = 64;
export const DDHAL_CB32_GETSCANLINE = 128;
export const DDHAL_CB32_SETEXCLUSIVEMODE = 256;
export const DDHAL_CB32_FLIPTOGDISURFACE = 512;
export const DDHAL_PALCB32_DESTROYPALETTE = 1;
export const DDHAL_PALCB32_SETENTRIES = 2;
export const DDHAL_SURFCB32_DESTROYSURFACE = 1;
export const DDHAL_SURFCB32_FLIP = 2;
export const DDHAL_SURFCB32_SETCLIPLIST = 4;
export const DDHAL_SURFCB32_LOCK = 8;
export const DDHAL_SURFCB32_UNLOCK = 16;
export const DDHAL_SURFCB32_BLT = 32;
export const DDHAL_SURFCB32_SETCOLORKEY = 64;
export const DDHAL_SURFCB32_ADDATTACHEDSURFACE = 128;
export const DDHAL_SURFCB32_GETBLTSTATUS = 256;
export const DDHAL_SURFCB32_GETFLIPSTATUS = 512;
export const DDHAL_SURFCB32_UPDATEOVERLAY = 1024;
export const DDHAL_SURFCB32_SETOVERLAYPOSITION = 2048;
export const DDHAL_SURFCB32_RESERVED4 = 4096;
export const DDHAL_SURFCB32_SETPALETTE = 8192;
export const DDHAL_MISCCB32_GETAVAILDRIVERMEMORY = 1;
export const DDHAL_MISCCB32_UPDATENONLOCALHEAP = 2;
export const DDHAL_MISCCB32_GETHEAPALIGNMENT = 4;
export const DDHAL_MISCCB32_GETSYSMEMBLTSTATUS = 8;
export const DDHAL_MISC2CB32_CREATESURFACEEX = 2;
export const DDHAL_MISC2CB32_GETDRIVERSTATE = 4;
export const DDHAL_MISC2CB32_DESTROYDDLOCAL = 8;
export const DDHAL_EXEBUFCB32_CANCREATEEXEBUF = 1;
export const DDHAL_EXEBUFCB32_CREATEEXEBUF = 2;
export const DDHAL_EXEBUFCB32_DESTROYEXEBUF = 4;
export const DDHAL_EXEBUFCB32_LOCKEXEBUF = 8;
export const DDHAL_EXEBUFCB32_UNLOCKEXEBUF = 16;
export const DDHAL_VPORT32_CANCREATEVIDEOPORT = 1;
export const DDHAL_VPORT32_CREATEVIDEOPORT = 2;
export const DDHAL_VPORT32_FLIP = 4;
export const DDHAL_VPORT32_GETBANDWIDTH = 8;
export const DDHAL_VPORT32_GETINPUTFORMATS = 16;
export const DDHAL_VPORT32_GETOUTPUTFORMATS = 32;
export const DDHAL_VPORT32_GETFIELD = 128;
export const DDHAL_VPORT32_GETLINE = 256;
export const DDHAL_VPORT32_GETCONNECT = 512;
export const DDHAL_VPORT32_DESTROY = 1024;
export const DDHAL_VPORT32_GETFLIPSTATUS = 2048;
export const DDHAL_VPORT32_UPDATE = 4096;
export const DDHAL_VPORT32_WAITFORSYNC = 8192;
export const DDHAL_VPORT32_GETSIGNALSTATUS = 16384;
export const DDHAL_VPORT32_COLORCONTROL = 32768;
export const DDHAL_COLOR_COLORCONTROL = 1;
export const DDHAL_KERNEL_SYNCSURFACEDATA = 1;
export const DDHAL_KERNEL_SYNCVIDEOPORTDATA = 2;
export const DDHAL_MOCOMP32_GETGUIDS = 1;
export const DDHAL_MOCOMP32_GETFORMATS = 2;
export const DDHAL_MOCOMP32_CREATE = 4;
export const DDHAL_MOCOMP32_GETCOMPBUFFINFO = 8;
export const DDHAL_MOCOMP32_GETINTERNALINFO = 16;
export const DDHAL_MOCOMP32_BEGINFRAME = 32;
export const DDHAL_MOCOMP32_ENDFRAME = 64;
export const DDHAL_MOCOMP32_RENDER = 128;
export const DDHAL_MOCOMP32_QUERYSTATUS = 256;
export const DDHAL_MOCOMP32_DESTROY = 512;
export const DDHAL_DRIVER_NOTHANDLED = 0;
export const DDHAL_DRIVER_HANDLED = 1;
export const DDHAL_DRIVER_NOCKEYHW = 2;
export const DDRAWIPAL_256 = 1;
export const DDRAWIPAL_16 = 2;
export const DDRAWIPAL_GDI = 4;
export const DDRAWIPAL_STORED_8 = 8;
export const DDRAWIPAL_STORED_16 = 16;
export const DDRAWIPAL_STORED_24 = 32;
export const DDRAWIPAL_EXCLUSIVE = 64;
export const DDRAWIPAL_INHEL = 128;
export const DDRAWIPAL_DIRTY = 256;
export const DDRAWIPAL_ALLOW256 = 512;
export const DDRAWIPAL_4 = 1024;
export const DDRAWIPAL_2 = 2048;
export const DDRAWIPAL_STORED_8INDEX = 4096;
export const DDRAWIPAL_ALPHA = 8192;
export const DDRAWICLIP_WATCHWINDOW = 1;
export const DDRAWICLIP_ISINITIALIZED = 2;
export const DDRAWICLIP_INMASTERSPRITELIST = 4;
export const DDAL_IMPLICIT = 1;
export const ACCESSRECT_VRAMSTYLE = 1;
export const ACCESSRECT_NOTHOLDINGWIN16LOCK = 2;
export const ACCESSRECT_BROKEN = 4;
export const PFINDEX_UNINITIALIZED = 0;
export const DDRAWISURFGBL_MEMFREE = 1;
export const DDRAWISURFGBL_SYSMEMREQUESTED = 2;
export const DDRAWISURFGBL_ISGDISURFACE = 4;
export const DDRAWISURFGBL_SOFTWAREAUTOFLIP = 8;
export const DDRAWISURFGBL_LOCKNOTHOLDINGWIN16LOCK = 16;
export const DDRAWISURFGBL_LOCKVRAMSTYLE = 32;
export const DDRAWISURFGBL_LOCKBROKEN = 64;
export const DDRAWISURFGBL_IMPLICITHANDLE = 128;
export const DDRAWISURFGBL_ISCLIENTMEM = 256;
export const DDRAWISURFGBL_HARDWAREOPSOURCE = 512;
export const DDRAWISURFGBL_HARDWAREOPDEST = 1024;
export const DDRAWISURFGBL_VPORTINTERLEAVED = 2048;
export const DDRAWISURFGBL_VPORTDATA = 4096;
export const DDRAWISURFGBL_LATEALLOCATELINEAR = 8192;
export const DDRAWISURFGBL_SYSMEMEXECUTEBUFFER = 16384;
export const DDRAWISURFGBL_FASTLOCKHELD = 32768;
export const DDRAWISURFGBL_READONLYLOCKHELD = 65536;
export const DDRAWISURFGBL_DX8SURFACE = 524288;
export const DDRAWISURFGBL_DDHELDONTFREE = 1048576;
export const DDRAWISURFGBL_NOTIFYWHENUNLOCKED = 2097152;
export const DDRAWISURFGBL_RESERVED0 = `-2147483648`;
export const DDRAWISURF_ATTACHED = 1;
export const DDRAWISURF_IMPLICITCREATE = 2;
export const DDRAWISURF_ISFREE = 4;
export const DDRAWISURF_ATTACHED_FROM = 8;
export const DDRAWISURF_IMPLICITROOT = 16;
export const DDRAWISURF_PARTOFPRIMARYCHAIN = 32;
export const DDRAWISURF_DATAISALIASED = 64;
export const DDRAWISURF_HASDC = 128;
export const DDRAWISURF_HASCKEYDESTOVERLAY = 256;
export const DDRAWISURF_HASCKEYDESTBLT = 512;
export const DDRAWISURF_HASCKEYSRCOVERLAY = 1024;
export const DDRAWISURF_HASCKEYSRCBLT = 2048;
export const DDRAWISURF_LOCKEXCLUDEDCURSOR = 4096;
export const DDRAWISURF_HASPIXELFORMAT = 8192;
export const DDRAWISURF_HASOVERLAYDATA = 16384;
export const DDRAWISURF_SETGAMMA = 32768;
export const DDRAWISURF_SW_CKEYDESTOVERLAY = 65536;
export const DDRAWISURF_SW_CKEYDESTBLT = 131072;
export const DDRAWISURF_SW_CKEYSRCOVERLAY = 262144;
export const DDRAWISURF_SW_CKEYSRCBLT = 524288;
export const DDRAWISURF_HW_CKEYDESTOVERLAY = 1048576;
export const DDRAWISURF_HW_CKEYDESTBLT = 2097152;
export const DDRAWISURF_HW_CKEYSRCOVERLAY = 4194304;
export const DDRAWISURF_HW_CKEYSRCBLT = 8388608;
export const DDRAWISURF_INMASTERSPRITELIST = 16777216;
export const DDRAWISURF_HELCB = 33554432;
export const DDRAWISURF_FRONTBUFFER = 67108864;
export const DDRAWISURF_BACKBUFFER = 134217728;
export const DDRAWISURF_INVALID = 268435456;
export const DDRAWISURF_DCIBUSY = 536870912;
export const DDRAWISURF_GETDCNULL = 1073741824;
export const DDRAWISURF_STEREOSURFACELEFT = 536870912;
export const DDRAWISURF_DRIVERMANAGED = 1073741824;
export const DDRAWISURF_DCILOCK = `-2147483648`;
export const ROP_HAS_SOURCE = 1;
export const ROP_HAS_PATTERN = 2;
export const DDMODEINFO_PALETTIZED = 1;
export const DDMODEINFO_MODEX = 2;
export const DDMODEINFO_UNSUPPORTED = 4;
export const DDMODEINFO_STANDARDVGA = 8;
export const DDMODEINFO_MAXREFRESH = 16;
export const DDMODEINFO_STEREO = 32;
export const DDRAWILCL_HASEXCLUSIVEMODE = 1;
export const DDRAWILCL_ISFULLSCREEN = 2;
export const DDRAWILCL_SETCOOPCALLED = 4;
export const DDRAWILCL_ACTIVEYES = 8;
export const DDRAWILCL_ACTIVENO = 16;
export const DDRAWILCL_HOOKEDHWND = 32;
export const DDRAWILCL_ALLOWMODEX = 64;
export const DDRAWILCL_V1SCLBEHAVIOUR = 128;
export const DDRAWILCL_MODEHASBEENCHANGED = 256;
export const DDRAWILCL_CREATEDWINDOW = 512;
export const DDRAWILCL_DIRTYDC = 1024;
export const DDRAWILCL_DISABLEINACTIVATE = 2048;
export const DDRAWILCL_CURSORCLIPPED = 4096;
export const DDRAWILCL_EXPLICITMONITOR = 8192;
export const DDRAWILCL_MULTITHREADED = 16384;
export const DDRAWILCL_FPUSETUP = 32768;
export const DDRAWILCL_POWEREDDOWN = 65536;
export const DDRAWILCL_DIRECTDRAW7 = 131072;
export const DDRAWILCL_ATTEMPTEDD3DCONTEXT = 262144;
export const DDRAWILCL_FPUPRESERVE = 524288;
export const DDRAWILCL_DX8DRIVER = 1048576;
export const DDRAWILCL_DIRECTDRAW8 = 2097152;
export const DDRAWI_xxxxxxxxx1 = 1;
export const DDRAWI_xxxxxxxxx2 = 2;
export const DDRAWI_VIRTUALDESKTOP = 8;
export const DDRAWI_MODEX = 16;
export const DDRAWI_DISPLAYDRV = 32;
export const DDRAWI_FULLSCREEN = 64;
export const DDRAWI_MODECHANGED = 128;
export const DDRAWI_NOHARDWARE = 256;
export const DDRAWI_PALETTEINIT = 512;
export const DDRAWI_NOEMULATION = 1024;
export const DDRAWI_HASCKEYDESTOVERLAY = 2048;
export const DDRAWI_HASCKEYSRCOVERLAY = 4096;
export const DDRAWI_HASGDIPALETTE = 8192;
export const DDRAWI_EMULATIONINITIALIZED = 16384;
export const DDRAWI_HASGDIPALETTE_EXCLUSIVE = 32768;
export const DDRAWI_MODEXILLEGAL = 65536;
export const DDRAWI_FLIPPEDTOGDI = 131072;
export const DDRAWI_NEEDSWIN16FORVRAMLOCK = 262144;
export const DDRAWI_PDEVICEVRAMBITCLEARED = 524288;
export const DDRAWI_STANDARDVGA = 1048576;
export const DDRAWI_EXTENDEDALIGNMENT = 2097152;
export const DDRAWI_CHANGINGMODE = 4194304;
export const DDRAWI_GDIDRV = 8388608;
export const DDRAWI_ATTACHEDTODESKTOP = 16777216;
export const DDRAWI_UMODELOADED = 33554432;
export const DDRAWI_DDRAWDATANOTFETCHED = 67108864;
export const DDRAWI_SECONDARYDRIVERLOADED = 134217728;
export const DDRAWI_TESTINGMODES = 268435456;
export const DDRAWI_DRIVERINFO2 = 536870912;
export const DDRAWI_BADPDEV = 1073741824;
export const DDRAWIVPORT_ON = 1;
export const DDRAWIVPORT_SOFTWARE_AUTOFLIP = 2;
export const DDRAWIVPORT_COLORKEYANDINTERP = 4;
export const DDRAWIVPORT_NOKERNELHANDLES = 8;
export const DDRAWIVPORT_SOFTWARE_BOB = 16;
export const DDRAWIVPORT_VBION = 32;
export const DDRAWIVPORT_VIDEOON = 64;
export const DDHALINFO_ISPRIMARYDISPLAY = 1;
export const DDHALINFO_MODEXILLEGAL = 2;
export const DDHALINFO_GETDRIVERINFOSET = 4;
export const DDHALINFO_GETDRIVERINFO2 = 8;
export const DDWAITVB_I_TESTVB = `-2147483642`;
export const DDRAWI_VPORTSTART = 1;
export const DDRAWI_VPORTSTOP = 2;
export const DDRAWI_VPORTUPDATE = 3;
export const DDRAWI_VPORTGETCOLOR = 1;
export const DDRAWI_VPORTSETCOLOR = 2;
export const DDRAWI_GETCOLOR = 1;
export const DDRAWI_SETCOLOR = 2;
export const DDMCQUERY_READ = 1;
export const DDSCAPS_COMMANDBUFFER = 1024;
export const DDHAL_PLEASEALLOC_USERMEM = 4;
export const DDHAL_CB32_MAPMEMORY = `-2147483648`;
export const DDHAL_MISC2CB32_ALPHABLT = 1;
export const DDHAL_CREATESURFACEEX_SWAPHANDLES = 1;
export const DDHAL_NTCB32_FREEDRIVERMEMORY = 1;
export const DDHAL_NTCB32_SETEXCLUSIVEMODE = 2;
export const DDHAL_NTCB32_FLIPTOGDISURFACE = 4;
export const DDHAL_VPORT32_GETAUTOFLIPSURF = 64;
export const DDHAL_D3DBUFCB32_CANCREATED3DBUF = 1;
export const DDHAL_D3DBUFCB32_CREATED3DBUF = 2;
export const DDHAL_D3DBUFCB32_DESTROYD3DBUF = 4;
export const DDHAL_D3DBUFCB32_LOCKD3DBUF = 8;
export const DDHAL_D3DBUFCB32_UNLOCKD3DBUF = 16;
export const DDHAL_PRIVATECAP_ATOMICSURFACECREATION = 1;
export const DDHAL_PRIVATECAP_NOTIFYPRIMARYCREATION = 2;
export const DDHAL_PRIVATECAP_RESERVED1 = 4;
export const DDBLT_AFLAGS = `-2147483648`;
export const DDABLT_SRCOVERDEST = 1;
export const DDKERNELCAPS_SKIPFIELDS = 1;
export const DDKERNELCAPS_AUTOFLIP = 2;
export const DDKERNELCAPS_SETSTATE = 4;
export const DDKERNELCAPS_LOCK = 8;
export const DDKERNELCAPS_FLIPVIDEOPORT = 16;
export const DDKERNELCAPS_FLIPOVERLAY = 32;
export const DDKERNELCAPS_CAPTURE_SYSMEM = 64;
export const DDKERNELCAPS_CAPTURE_NONLOCALVIDMEM = 128;
export const DDKERNELCAPS_FIELDPOLARITY = 256;
export const DDKERNELCAPS_CAPTURE_INVERTED = 512;
export const DDIRQ_DISPLAY_VSYNC = 1;
export const DDIRQ_RESERVED1 = 2;
export const DDIRQ_VPORT0_VSYNC = 4;
export const DDIRQ_VPORT0_LINE = 8;
export const DDIRQ_VPORT1_VSYNC = 16;
export const DDIRQ_VPORT1_LINE = 32;
export const DDIRQ_VPORT2_VSYNC = 64;
export const DDIRQ_VPORT2_LINE = 128;
export const DDIRQ_VPORT3_VSYNC = 256;
export const DDIRQ_VPORT3_LINE = 512;
export const DDIRQ_VPORT4_VSYNC = 1024;
export const DDIRQ_VPORT4_LINE = 2048;
export const DDIRQ_VPORT5_VSYNC = 4096;
export const DDIRQ_VPORT5_LINE = 8192;
export const DDIRQ_VPORT6_VSYNC = 16384;
export const DDIRQ_VPORT6_LINE = 32768;
export const DDIRQ_VPORT7_VSYNC = 65536;
export const DDIRQ_VPORT7_LINE = 131072;
export const DDIRQ_VPORT8_VSYNC = 262144;
export const DDIRQ_VPORT8_LINE = 524288;
export const DDIRQ_VPORT9_VSYNC = 65536;
export const DDIRQ_VPORT9_LINE = 131072;
export const SURFACEALIGN_DISCARDABLE = 1;
export const VMEMHEAP_LINEAR = 1;
export const VMEMHEAP_RECTANGULAR = 2;
export const VMEMHEAP_ALIGNMENT = 4;
export const DDVPD_WIDTH = 1;
export const DDVPD_HEIGHT = 2;
export const DDVPD_ID = 4;
export const DDVPD_CAPS = 8;
export const DDVPD_FX = 16;
export const DDVPD_AUTOFLIP = 32;
export const DDVPD_ALIGN = 64;
export const DDVPD_PREFERREDAUTOFLIP = 128;
export const DDVPD_FILTERQUALITY = 256;
export const DDVPCONNECT_DOUBLECLOCK = 1;
export const DDVPCONNECT_VACT = 2;
export const DDVPCONNECT_INVERTPOLARITY = 4;
export const DDVPCONNECT_DISCARDSVREFDATA = 8;
export const DDVPCONNECT_HALFLINE = 16;
export const DDVPCONNECT_INTERLACED = 32;
export const DDVPCONNECT_SHAREEVEN = 64;
export const DDVPCONNECT_SHAREODD = 128;
export const DDVPCAPS_AUTOFLIP = 1;
export const DDVPCAPS_INTERLACED = 2;
export const DDVPCAPS_NONINTERLACED = 4;
export const DDVPCAPS_READBACKFIELD = 8;
export const DDVPCAPS_READBACKLINE = 16;
export const DDVPCAPS_SHAREABLE = 32;
export const DDVPCAPS_SKIPEVENFIELDS = 64;
export const DDVPCAPS_SKIPODDFIELDS = 128;
export const DDVPCAPS_SYNCMASTER = 256;
export const DDVPCAPS_VBISURFACE = 512;
export const DDVPCAPS_COLORCONTROL = 1024;
export const DDVPCAPS_OVERSAMPLEDVBI = 2048;
export const DDVPCAPS_SYSTEMMEMORY = 4096;
export const DDVPCAPS_VBIANDVIDEOINDEPENDENT = 8192;
export const DDVPCAPS_HARDWAREDEINTERLACE = 16384;
export const DDVPFX_CROPTOPDATA = 1;
export const DDVPFX_CROPX = 2;
export const DDVPFX_CROPY = 4;
export const DDVPFX_INTERLEAVE = 8;
export const DDVPFX_MIRRORLEFTRIGHT = 16;
export const DDVPFX_MIRRORUPDOWN = 32;
export const DDVPFX_PRESHRINKX = 64;
export const DDVPFX_PRESHRINKY = 128;
export const DDVPFX_PRESHRINKXB = 256;
export const DDVPFX_PRESHRINKYB = 512;
export const DDVPFX_PRESHRINKXS = 1024;
export const DDVPFX_PRESHRINKYS = 2048;
export const DDVPFX_PRESTRETCHX = 4096;
export const DDVPFX_PRESTRETCHY = 8192;
export const DDVPFX_PRESTRETCHXN = 16384;
export const DDVPFX_PRESTRETCHYN = 32768;
export const DDVPFX_VBICONVERT = 65536;
export const DDVPFX_VBINOSCALE = 131072;
export const DDVPFX_IGNOREVBIXCROP = 262144;
export const DDVPFX_VBINOINTERLEAVE = 524288;
export const DDVP_AUTOFLIP = 1;
export const DDVP_CONVERT = 2;
export const DDVP_CROP = 4;
export const DDVP_INTERLEAVE = 8;
export const DDVP_MIRRORLEFTRIGHT = 16;
export const DDVP_MIRRORUPDOWN = 32;
export const DDVP_PRESCALE = 64;
export const DDVP_SKIPEVENFIELDS = 128;
export const DDVP_SKIPODDFIELDS = 256;
export const DDVP_SYNCMASTER = 512;
export const DDVP_VBICONVERT = 1024;
export const DDVP_VBINOSCALE = 2048;
export const DDVP_OVERRIDEBOBWEAVE = 4096;
export const DDVP_IGNOREVBIXCROP = 8192;
export const DDVP_VBINOINTERLEAVE = 16384;
export const DDVP_HARDWAREDEINTERLACE = 32768;
export const DDVPFORMAT_VIDEO = 1;
export const DDVPFORMAT_VBI = 2;
export const DDVPTARGET_VIDEO = 1;
export const DDVPTARGET_VBI = 2;
export const DDVPWAIT_BEGIN = 1;
export const DDVPWAIT_END = 2;
export const DDVPWAIT_LINE = 3;
export const DDVPFLIP_VIDEO = 1;
export const DDVPFLIP_VBI = 2;
export const DDVPSQ_NOSIGNAL = 1;
export const DDVPSQ_SIGNALOK = 2;
export const DDVPB_VIDEOPORT = 1;
export const DDVPB_OVERLAY = 2;
export const DDVPB_TYPE = 4;
export const DDVPBCAPS_SOURCE = 1;
export const DDVPBCAPS_DESTINATION = 2;
export const DDVPCREATE_VBIONLY = 1;
export const DDVPCREATE_VIDEOONLY = 2;
export const DDVPSTATUS_VBIONLY = 1;
export const DDVPSTATUS_VIDEOONLY = 2;
export const MDL_MAPPED_TO_SYSTEM_VA = 1;
export const MDL_PAGES_LOCKED = 2;
export const MDL_SOURCE_IS_NONPAGED_POOL = 4;
export const MDL_ALLOCATED_FIXED_SIZE = 8;
export const MDL_PARTIAL = 16;
export const MDL_PARTIAL_HAS_BEEN_MAPPED = 32;
export const MDL_IO_PAGE_READ = 64;
export const MDL_WRITE_OPERATION = 128;
export const MDL_PARENT_MAPPED_SYSTEM_VA = 256;
export const MDL_LOCK_HELD = 512;
export const MDL_SCATTER_GATHER_VA = 1024;
export const MDL_IO_SPACE = 2048;
export const MDL_NETWORK_HEADER = 4096;
export const MDL_MAPPING_CAN_FAIL = 8192;
export const MDL_ALLOCATED_MUST_SUCCEED = 16384;
export const MDL_64_BIT_VA = 32768;
export const DX_OK = 0;
export const DXERR_UNSUPPORTED = 2147500033;
export const DXERR_GENERIC = 2147500037;
export const DXERR_OUTOFCAPS = 2289434984;
export const DDIRQ_BUSMASTER = 2;
export const IRQINFO_HANDLED = 1;
export const IRQINFO_NOTHANDLED = 2;
export const DDSKIP_SKIPNEXT = 1;
export const DDSKIP_ENABLENEXT = 2;
export const DDTRANSFER_SYSTEMMEMORY = 1;
export const DDTRANSFER_NONLOCALVIDMEM = 2;
export const DDTRANSFER_INVERT = 4;
export const DDTRANSFER_CANCEL = 128;
export const DDTRANSFER_HALFLINES = 256;
export const DXAPI_HALVERSION = 1;

// Structs

/**
 * Windows.Win32.Graphics.DirectDraw.DDARGB (size: 8)
 */
export interface DDARGB {
  /** u8 */
  blue: number;
  /** u8 */
  green: number;
  /** u8 */
  red: number;
  /** u8 */
  alpha: number;
}

export const sizeofDDARGB = 8;

export function allocDDARGB(data?: Partial<DDARGB>): Uint8Array {
  const buf = new Uint8Array(sizeofDDARGB);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.blue !== undefined) view.setUint8(0, Number(data.blue));
  // 0x01: u8
  if (data?.green !== undefined) view.setUint8(1, Number(data.green));
  // 0x02: u8
  if (data?.red !== undefined) view.setUint8(2, Number(data.red));
  // 0x03: u8
  if (data?.alpha !== undefined) view.setUint8(3, Number(data.alpha));
  // 0x04: pad4
  return buf;
}

export class DDARGBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get blue(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get green(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get red(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get alpha(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set blue(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set green(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set red(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set alpha(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRGBA (size: 8)
 */
export interface DDRGBA {
  /** u8 */
  red: number;
  /** u8 */
  green: number;
  /** u8 */
  blue: number;
  /** u8 */
  alpha: number;
}

export const sizeofDDRGBA = 8;

export function allocDDRGBA(data?: Partial<DDRGBA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRGBA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.red !== undefined) view.setUint8(0, Number(data.red));
  // 0x01: u8
  if (data?.green !== undefined) view.setUint8(1, Number(data.green));
  // 0x02: u8
  if (data?.blue !== undefined) view.setUint8(2, Number(data.blue));
  // 0x03: u8
  if (data?.alpha !== undefined) view.setUint8(3, Number(data.alpha));
  // 0x04: pad4
  return buf;
}

export class DDRGBAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get red(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get green(): number {
    return this.view.getUint8(1);
  }

  // 0x02: u8
  get blue(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get alpha(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x00: u8
  set red(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set green(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: u8
  set blue(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set alpha(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDCOLORKEY (size: 8)
 */
export interface DDCOLORKEY {
  /** u32 */
  dwColorSpaceLowValue: number;
  /** u32 */
  dwColorSpaceHighValue: number;
}

export const sizeofDDCOLORKEY = 8;

export function allocDDCOLORKEY(data?: Partial<DDCOLORKEY>): Uint8Array {
  const buf = new Uint8Array(sizeofDDCOLORKEY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwColorSpaceLowValue !== undefined) view.setUint32(0, Number(data.dwColorSpaceLowValue), true);
  // 0x04: u32
  if (data?.dwColorSpaceHighValue !== undefined) view.setUint32(4, Number(data.dwColorSpaceHighValue), true);
  return buf;
}

export class DDCOLORKEYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwColorSpaceLowValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwColorSpaceHighValue(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwColorSpaceLowValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwColorSpaceHighValue(value: number) {
    this.view.setUint32(4, value, true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: bigint | number;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: bigint | number;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psid))), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguid))), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pObjectTypes))), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pIpAddress))), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get u(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set Data0(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: usize
  set u(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: bigint | number;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _Anonymous3_e__Union (size: 16)
 */
export interface _Anonymous3_e__Union {
  /** u32 */
  dwAlphaDestConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaDest: Uint8Array | Deno.PointerValue;
}

export const sizeof_Anonymous3_e__Union = 16;

export function alloc_Anonymous3_e__Union(data?: Partial<_Anonymous3_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous3_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaDestConst !== undefined) view.setUint32(0, Number(data.dwAlphaDestConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaDest !== undefined) view.setBigUint64(8, data.lpDDSAlphaDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSAlphaDest))), true);
  return buf;
}

export class _Anonymous3_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAlphaDestConst(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDDSAlphaDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwAlphaDestConst(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDDSAlphaDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous4_e__Union (size: 16)
 */
export interface _Anonymous4_e__Union {
  /** u32 */
  dwAlphaSrcConst: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSAlphaSrc: Uint8Array | Deno.PointerValue;
}

export const sizeof_Anonymous4_e__Union = 16;

export function alloc_Anonymous4_e__Union(data?: Partial<_Anonymous4_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous4_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwAlphaSrcConst !== undefined) view.setUint32(0, Number(data.dwAlphaSrcConst), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDSAlphaSrc !== undefined) view.setBigUint64(8, data.lpDDSAlphaSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSAlphaSrc))), true);
  return buf;
}

export class _Anonymous4_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwAlphaSrcConst(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDDSAlphaSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwAlphaSrcConst(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDDSAlphaSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous5_e__Union (size: 24)
 */
export interface _Anonymous5_e__Union {
  /** u32 */
  dwFillColor: number;
  /** u32 */
  dwFillDepth: number;
  /** u32 */
  dwFillPixel: number;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSPattern: Uint8Array | Deno.PointerValue;
}

export const sizeof_Anonymous5_e__Union = 24;

export function alloc_Anonymous5_e__Union(data?: Partial<_Anonymous5_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous5_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFillColor !== undefined) view.setUint32(0, Number(data.dwFillColor), true);
  // 0x04: u32
  if (data?.dwFillDepth !== undefined) view.setUint32(4, Number(data.dwFillDepth), true);
  // 0x08: u32
  if (data?.dwFillPixel !== undefined) view.setUint32(8, Number(data.dwFillPixel), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpDDSPattern !== undefined) view.setBigUint64(16, data.lpDDSPattern === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSPattern))), true);
  return buf;
}

export class _Anonymous5_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFillColor(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFillDepth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFillPixel(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lpDDSPattern(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFillColor(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFillDepth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFillPixel(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lpDDSPattern(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDBLTFX (size: 128)
 */
export interface DDBLTFX {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwDDFX: number;
  /** u32 */
  dwROP: number;
  /** u32 */
  dwDDROP: number;
  /** u32 */
  dwRotationAngle: number;
  /** u32 */
  dwZBufferOpCode: number;
  /** u32 */
  dwZBufferLow: number;
  /** u32 */
  dwZBufferHigh: number;
  /** u32 */
  dwZBufferBaseDest: number;
  /** u32 */
  dwZDestConstBitDepth: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwZSrcConstBitDepth: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwAlphaEdgeBlendBitDepth: number;
  /** u32 */
  dwAlphaEdgeBlend: number;
  /** u32 */
  dwReserved: number;
  /** u32 */
  dwAlphaDestConstBitDepth: number;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwAlphaSrcConstBitDepth: number;
  /** _Anonymous4_e__Union */
  Anonymous4: Uint8Array | Deno.PointerValue;
  /** _Anonymous5_e__Union */
  Anonymous5: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckDestColorkey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckSrcColorkey: Uint8Array | Deno.PointerValue;
}

export const sizeofDDBLTFX = 128;

export function allocDDBLTFX(data?: Partial<DDBLTFX>): Uint8Array {
  const buf = new Uint8Array(sizeofDDBLTFX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwDDFX !== undefined) view.setUint32(4, Number(data.dwDDFX), true);
  // 0x08: u32
  if (data?.dwROP !== undefined) view.setUint32(8, Number(data.dwROP), true);
  // 0x0c: u32
  if (data?.dwDDROP !== undefined) view.setUint32(12, Number(data.dwDDROP), true);
  // 0x10: u32
  if (data?.dwRotationAngle !== undefined) view.setUint32(16, Number(data.dwRotationAngle), true);
  // 0x14: u32
  if (data?.dwZBufferOpCode !== undefined) view.setUint32(20, Number(data.dwZBufferOpCode), true);
  // 0x18: u32
  if (data?.dwZBufferLow !== undefined) view.setUint32(24, Number(data.dwZBufferLow), true);
  // 0x1c: u32
  if (data?.dwZBufferHigh !== undefined) view.setUint32(28, Number(data.dwZBufferHigh), true);
  // 0x20: u32
  if (data?.dwZBufferBaseDest !== undefined) view.setUint32(32, Number(data.dwZBufferBaseDest), true);
  // 0x24: u32
  if (data?.dwZDestConstBitDepth !== undefined) view.setUint32(36, Number(data.dwZDestConstBitDepth), true);
  // 0x28: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(40, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x30: u32
  if (data?.dwZSrcConstBitDepth !== undefined) view.setUint32(48, Number(data.dwZSrcConstBitDepth), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(56, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x40: u32
  if (data?.dwAlphaEdgeBlendBitDepth !== undefined) view.setUint32(64, Number(data.dwAlphaEdgeBlendBitDepth), true);
  // 0x44: u32
  if (data?.dwAlphaEdgeBlend !== undefined) view.setUint32(68, Number(data.dwAlphaEdgeBlend), true);
  // 0x48: u32
  if (data?.dwReserved !== undefined) view.setUint32(72, Number(data.dwReserved), true);
  // 0x4c: u32
  if (data?.dwAlphaDestConstBitDepth !== undefined) view.setUint32(76, Number(data.dwAlphaDestConstBitDepth), true);
  // 0x50: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(80, data.Anonymous3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous3))), true);
  // 0x58: u32
  if (data?.dwAlphaSrcConstBitDepth !== undefined) view.setUint32(88, Number(data.dwAlphaSrcConstBitDepth), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.Anonymous4 !== undefined) view.setBigUint64(96, data.Anonymous4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous4))), true);
  // 0x68: pointer
  if (data?.Anonymous5 !== undefined) view.setBigUint64(104, data.Anonymous5 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous5))), true);
  // 0x70: pointer
  if (data?.ddckDestColorkey !== undefined) view.setBigUint64(112, data.ddckDestColorkey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckDestColorkey))), true);
  // 0x78: pointer
  if (data?.ddckSrcColorkey !== undefined) view.setBigUint64(120, data.ddckSrcColorkey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckSrcColorkey))), true);
  return buf;
}

export class DDBLTFXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwDDFX(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwROP(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwDDROP(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwRotationAngle(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwZBufferOpCode(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwZBufferLow(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwZBufferHigh(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwZBufferBaseDest(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwZDestConstBitDepth(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwZSrcConstBitDepth(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get dwAlphaEdgeBlendBitDepth(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwAlphaEdgeBlend(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwReserved(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwAlphaDestConstBitDepth(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get dwAlphaSrcConstBitDepth(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get Anonymous4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get Anonymous5(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get ddckDestColorkey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get ddckSrcColorkey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwDDFX(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwROP(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwDDROP(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwRotationAngle(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwZBufferOpCode(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwZBufferLow(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwZBufferHigh(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwZBufferBaseDest(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwZDestConstBitDepth(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwZSrcConstBitDepth(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set dwAlphaEdgeBlendBitDepth(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwAlphaEdgeBlend(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwReserved(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwAlphaDestConstBitDepth(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set dwAlphaSrcConstBitDepth(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set Anonymous4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set Anonymous5(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set ddckDestColorkey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set ddckSrcColorkey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDSCAPS (size: 8)
 */
export interface DDSCAPS {
  /** u32 */
  dwCaps: number;
}

export const sizeofDDSCAPS = 8;

export function allocDDSCAPS(data?: Partial<DDSCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDSCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCaps !== undefined) view.setUint32(0, Number(data.dwCaps), true);
  // 0x04: pad4
  return buf;
}

export class DDSCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCaps(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwCaps(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDOSCAPS (size: 8)
 */
export interface DDOSCAPS {
  /** u32 */
  dwCaps: number;
}

export const sizeofDDOSCAPS = 8;

export function allocDDOSCAPS(data?: Partial<DDOSCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDOSCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCaps !== undefined) view.setUint32(0, Number(data.dwCaps), true);
  // 0x04: pad4
  return buf;
}

export class DDOSCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCaps(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwCaps(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: bigint | number;
  /** u64 */
  Region: bigint | number;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDSCAPSEX (size: 16)
 */
export interface DDSCAPSEX {
  /** u32 */
  dwCaps2: number;
  /** u32 */
  dwCaps3: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofDDSCAPSEX = 16;

export function allocDDSCAPSEX(data?: Partial<DDSCAPSEX>): Uint8Array {
  const buf = new Uint8Array(sizeofDDSCAPSEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCaps2 !== undefined) view.setUint32(0, Number(data.dwCaps2), true);
  // 0x04: u32
  if (data?.dwCaps3 !== undefined) view.setUint32(4, Number(data.dwCaps3), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class DDSCAPSEXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCaps2(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCaps3(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwCaps2(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCaps3(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDSCAPS2 (size: 24)
 */
export interface DDSCAPS2 {
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwCaps2: number;
  /** u32 */
  dwCaps3: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofDDSCAPS2 = 24;

export function allocDDSCAPS2(data?: Partial<DDSCAPS2>): Uint8Array {
  const buf = new Uint8Array(sizeofDDSCAPS2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCaps !== undefined) view.setUint32(0, Number(data.dwCaps), true);
  // 0x04: u32
  if (data?.dwCaps2 !== undefined) view.setUint32(4, Number(data.dwCaps2), true);
  // 0x08: u32
  if (data?.dwCaps3 !== undefined) view.setUint32(8, Number(data.dwCaps3), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class DDSCAPS2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCaps(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCaps2(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCaps3(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwCaps(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCaps2(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCaps3(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDCAPS_DX1 (size: 160)
 */
export interface DDCAPS_DX1 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwCaps2: number;
  /** u32 */
  dwCKeyCaps: number;
  /** u32 */
  dwFXCaps: number;
  /** u32 */
  dwFXAlphaCaps: number;
  /** u32 */
  dwPalCaps: number;
  /** u32 */
  dwSVCaps: number;
  /** u32 */
  dwAlphaBltConstBitDepths: number;
  /** u32 */
  dwAlphaBltPixelBitDepths: number;
  /** u32 */
  dwAlphaBltSurfaceBitDepths: number;
  /** u32 */
  dwAlphaOverlayConstBitDepths: number;
  /** u32 */
  dwAlphaOverlayPixelBitDepths: number;
  /** u32 */
  dwAlphaOverlaySurfaceBitDepths: number;
  /** u32 */
  dwZBufferBitDepths: number;
  /** u32 */
  dwVidMemTotal: number;
  /** u32 */
  dwVidMemFree: number;
  /** u32 */
  dwMaxVisibleOverlays: number;
  /** u32 */
  dwCurrVisibleOverlays: number;
  /** u32 */
  dwNumFourCCCodes: number;
  /** u32 */
  dwAlignBoundarySrc: number;
  /** u32 */
  dwAlignSizeSrc: number;
  /** u32 */
  dwAlignBoundaryDest: number;
  /** u32 */
  dwAlignSizeDest: number;
  /** u32 */
  dwAlignStrideAlign: number;
  /** array */
  dwRops: Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsCaps: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwMinOverlayStretch: number;
  /** u32 */
  dwMaxOverlayStretch: number;
  /** u32 */
  dwMinLiveVideoStretch: number;
  /** u32 */
  dwMaxLiveVideoStretch: number;
  /** u32 */
  dwMinHwCodecStretch: number;
  /** u32 */
  dwMaxHwCodecStretch: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwReserved3: number;
}

export const sizeofDDCAPS_DX1 = 160;

export function allocDDCAPS_DX1(data?: Partial<DDCAPS_DX1>): Uint8Array {
  const buf = new Uint8Array(sizeofDDCAPS_DX1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCaps !== undefined) view.setUint32(4, Number(data.dwCaps), true);
  // 0x08: u32
  if (data?.dwCaps2 !== undefined) view.setUint32(8, Number(data.dwCaps2), true);
  // 0x0c: u32
  if (data?.dwCKeyCaps !== undefined) view.setUint32(12, Number(data.dwCKeyCaps), true);
  // 0x10: u32
  if (data?.dwFXCaps !== undefined) view.setUint32(16, Number(data.dwFXCaps), true);
  // 0x14: u32
  if (data?.dwFXAlphaCaps !== undefined) view.setUint32(20, Number(data.dwFXAlphaCaps), true);
  // 0x18: u32
  if (data?.dwPalCaps !== undefined) view.setUint32(24, Number(data.dwPalCaps), true);
  // 0x1c: u32
  if (data?.dwSVCaps !== undefined) view.setUint32(28, Number(data.dwSVCaps), true);
  // 0x20: u32
  if (data?.dwAlphaBltConstBitDepths !== undefined) view.setUint32(32, Number(data.dwAlphaBltConstBitDepths), true);
  // 0x24: u32
  if (data?.dwAlphaBltPixelBitDepths !== undefined) view.setUint32(36, Number(data.dwAlphaBltPixelBitDepths), true);
  // 0x28: u32
  if (data?.dwAlphaBltSurfaceBitDepths !== undefined) view.setUint32(40, Number(data.dwAlphaBltSurfaceBitDepths), true);
  // 0x2c: u32
  if (data?.dwAlphaOverlayConstBitDepths !== undefined) view.setUint32(44, Number(data.dwAlphaOverlayConstBitDepths), true);
  // 0x30: u32
  if (data?.dwAlphaOverlayPixelBitDepths !== undefined) view.setUint32(48, Number(data.dwAlphaOverlayPixelBitDepths), true);
  // 0x34: u32
  if (data?.dwAlphaOverlaySurfaceBitDepths !== undefined) view.setUint32(52, Number(data.dwAlphaOverlaySurfaceBitDepths), true);
  // 0x38: u32
  if (data?.dwZBufferBitDepths !== undefined) view.setUint32(56, Number(data.dwZBufferBitDepths), true);
  // 0x3c: u32
  if (data?.dwVidMemTotal !== undefined) view.setUint32(60, Number(data.dwVidMemTotal), true);
  // 0x40: u32
  if (data?.dwVidMemFree !== undefined) view.setUint32(64, Number(data.dwVidMemFree), true);
  // 0x44: u32
  if (data?.dwMaxVisibleOverlays !== undefined) view.setUint32(68, Number(data.dwMaxVisibleOverlays), true);
  // 0x48: u32
  if (data?.dwCurrVisibleOverlays !== undefined) view.setUint32(72, Number(data.dwCurrVisibleOverlays), true);
  // 0x4c: u32
  if (data?.dwNumFourCCCodes !== undefined) view.setUint32(76, Number(data.dwNumFourCCCodes), true);
  // 0x50: u32
  if (data?.dwAlignBoundarySrc !== undefined) view.setUint32(80, Number(data.dwAlignBoundarySrc), true);
  // 0x54: u32
  if (data?.dwAlignSizeSrc !== undefined) view.setUint32(84, Number(data.dwAlignSizeSrc), true);
  // 0x58: u32
  if (data?.dwAlignBoundaryDest !== undefined) view.setUint32(88, Number(data.dwAlignBoundaryDest), true);
  // 0x5c: u32
  if (data?.dwAlignSizeDest !== undefined) view.setUint32(92, Number(data.dwAlignSizeDest), true);
  // 0x60: u32
  if (data?.dwAlignStrideAlign !== undefined) view.setUint32(96, Number(data.dwAlignStrideAlign), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.dwRops !== undefined) view.setBigUint64(104, data.dwRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwRops))), true);
  // 0x70: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(112, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  // 0x78: u32
  if (data?.dwMinOverlayStretch !== undefined) view.setUint32(120, Number(data.dwMinOverlayStretch), true);
  // 0x7c: u32
  if (data?.dwMaxOverlayStretch !== undefined) view.setUint32(124, Number(data.dwMaxOverlayStretch), true);
  // 0x80: u32
  if (data?.dwMinLiveVideoStretch !== undefined) view.setUint32(128, Number(data.dwMinLiveVideoStretch), true);
  // 0x84: u32
  if (data?.dwMaxLiveVideoStretch !== undefined) view.setUint32(132, Number(data.dwMaxLiveVideoStretch), true);
  // 0x88: u32
  if (data?.dwMinHwCodecStretch !== undefined) view.setUint32(136, Number(data.dwMinHwCodecStretch), true);
  // 0x8c: u32
  if (data?.dwMaxHwCodecStretch !== undefined) view.setUint32(140, Number(data.dwMaxHwCodecStretch), true);
  // 0x90: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(144, Number(data.dwReserved1), true);
  // 0x94: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(148, Number(data.dwReserved2), true);
  // 0x98: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(152, Number(data.dwReserved3), true);
  // 0x9c: pad4
  return buf;
}

export class DDCAPS_DX1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCaps2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwCKeyCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwFXCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFXAlphaCaps(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwPalCaps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwSVCaps(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwAlphaBltConstBitDepths(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwAlphaBltPixelBitDepths(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwAlphaBltSurfaceBitDepths(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwAlphaOverlayConstBitDepths(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwAlphaOverlayPixelBitDepths(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwAlphaOverlaySurfaceBitDepths(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwZBufferBitDepths(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwVidMemTotal(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwVidMemFree(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwMaxVisibleOverlays(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwCurrVisibleOverlays(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwNumFourCCCodes(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwAlignBoundarySrc(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwAlignSizeSrc(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwAlignBoundaryDest(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwAlignSizeDest(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get dwAlignStrideAlign(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get dwRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u32
  get dwMinOverlayStretch(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get dwMaxOverlayStretch(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get dwMinLiveVideoStretch(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwMaxLiveVideoStretch(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get dwMinHwCodecStretch(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get dwMaxHwCodecStretch(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get dwReserved1(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get dwReserved2(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get dwReserved3(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCaps2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwCKeyCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwFXCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFXAlphaCaps(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwPalCaps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwSVCaps(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwAlphaBltConstBitDepths(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwAlphaBltPixelBitDepths(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwAlphaBltSurfaceBitDepths(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwAlphaOverlayConstBitDepths(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwAlphaOverlayPixelBitDepths(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwAlphaOverlaySurfaceBitDepths(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwZBufferBitDepths(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwVidMemTotal(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwVidMemFree(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwMaxVisibleOverlays(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwCurrVisibleOverlays(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwNumFourCCCodes(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwAlignBoundarySrc(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwAlignSizeSrc(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwAlignBoundaryDest(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwAlignSizeDest(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set dwAlignStrideAlign(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set dwRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: u32
  set dwMinOverlayStretch(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set dwMaxOverlayStretch(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set dwMinLiveVideoStretch(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwMaxLiveVideoStretch(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set dwMinHwCodecStretch(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set dwMaxHwCodecStretch(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set dwReserved1(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set dwReserved2(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set dwReserved3(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDCAPS_DX3 (size: 240)
 */
export interface DDCAPS_DX3 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwCaps2: number;
  /** u32 */
  dwCKeyCaps: number;
  /** u32 */
  dwFXCaps: number;
  /** u32 */
  dwFXAlphaCaps: number;
  /** u32 */
  dwPalCaps: number;
  /** u32 */
  dwSVCaps: number;
  /** u32 */
  dwAlphaBltConstBitDepths: number;
  /** u32 */
  dwAlphaBltPixelBitDepths: number;
  /** u32 */
  dwAlphaBltSurfaceBitDepths: number;
  /** u32 */
  dwAlphaOverlayConstBitDepths: number;
  /** u32 */
  dwAlphaOverlayPixelBitDepths: number;
  /** u32 */
  dwAlphaOverlaySurfaceBitDepths: number;
  /** u32 */
  dwZBufferBitDepths: number;
  /** u32 */
  dwVidMemTotal: number;
  /** u32 */
  dwVidMemFree: number;
  /** u32 */
  dwMaxVisibleOverlays: number;
  /** u32 */
  dwCurrVisibleOverlays: number;
  /** u32 */
  dwNumFourCCCodes: number;
  /** u32 */
  dwAlignBoundarySrc: number;
  /** u32 */
  dwAlignSizeSrc: number;
  /** u32 */
  dwAlignBoundaryDest: number;
  /** u32 */
  dwAlignSizeDest: number;
  /** u32 */
  dwAlignStrideAlign: number;
  /** array */
  dwRops: Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsCaps: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwMinOverlayStretch: number;
  /** u32 */
  dwMaxOverlayStretch: number;
  /** u32 */
  dwMinLiveVideoStretch: number;
  /** u32 */
  dwMaxLiveVideoStretch: number;
  /** u32 */
  dwMinHwCodecStretch: number;
  /** u32 */
  dwMaxHwCodecStretch: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwReserved3: number;
  /** u32 */
  dwSVBCaps: number;
  /** u32 */
  dwSVBCKeyCaps: number;
  /** u32 */
  dwSVBFXCaps: number;
  /** array */
  dwSVBRops: Deno.PointerValue;
  /** u32 */
  dwVSBCaps: number;
  /** u32 */
  dwVSBCKeyCaps: number;
  /** u32 */
  dwVSBFXCaps: number;
  /** array */
  dwVSBRops: Deno.PointerValue;
  /** u32 */
  dwSSBCaps: number;
  /** u32 */
  dwSSBCKeyCaps: number;
  /** u32 */
  dwSSBFXCaps: number;
  /** array */
  dwSSBRops: Deno.PointerValue;
  /** u32 */
  dwReserved4: number;
  /** u32 */
  dwReserved5: number;
  /** u32 */
  dwReserved6: number;
}

export const sizeofDDCAPS_DX3 = 240;

export function allocDDCAPS_DX3(data?: Partial<DDCAPS_DX3>): Uint8Array {
  const buf = new Uint8Array(sizeofDDCAPS_DX3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCaps !== undefined) view.setUint32(4, Number(data.dwCaps), true);
  // 0x08: u32
  if (data?.dwCaps2 !== undefined) view.setUint32(8, Number(data.dwCaps2), true);
  // 0x0c: u32
  if (data?.dwCKeyCaps !== undefined) view.setUint32(12, Number(data.dwCKeyCaps), true);
  // 0x10: u32
  if (data?.dwFXCaps !== undefined) view.setUint32(16, Number(data.dwFXCaps), true);
  // 0x14: u32
  if (data?.dwFXAlphaCaps !== undefined) view.setUint32(20, Number(data.dwFXAlphaCaps), true);
  // 0x18: u32
  if (data?.dwPalCaps !== undefined) view.setUint32(24, Number(data.dwPalCaps), true);
  // 0x1c: u32
  if (data?.dwSVCaps !== undefined) view.setUint32(28, Number(data.dwSVCaps), true);
  // 0x20: u32
  if (data?.dwAlphaBltConstBitDepths !== undefined) view.setUint32(32, Number(data.dwAlphaBltConstBitDepths), true);
  // 0x24: u32
  if (data?.dwAlphaBltPixelBitDepths !== undefined) view.setUint32(36, Number(data.dwAlphaBltPixelBitDepths), true);
  // 0x28: u32
  if (data?.dwAlphaBltSurfaceBitDepths !== undefined) view.setUint32(40, Number(data.dwAlphaBltSurfaceBitDepths), true);
  // 0x2c: u32
  if (data?.dwAlphaOverlayConstBitDepths !== undefined) view.setUint32(44, Number(data.dwAlphaOverlayConstBitDepths), true);
  // 0x30: u32
  if (data?.dwAlphaOverlayPixelBitDepths !== undefined) view.setUint32(48, Number(data.dwAlphaOverlayPixelBitDepths), true);
  // 0x34: u32
  if (data?.dwAlphaOverlaySurfaceBitDepths !== undefined) view.setUint32(52, Number(data.dwAlphaOverlaySurfaceBitDepths), true);
  // 0x38: u32
  if (data?.dwZBufferBitDepths !== undefined) view.setUint32(56, Number(data.dwZBufferBitDepths), true);
  // 0x3c: u32
  if (data?.dwVidMemTotal !== undefined) view.setUint32(60, Number(data.dwVidMemTotal), true);
  // 0x40: u32
  if (data?.dwVidMemFree !== undefined) view.setUint32(64, Number(data.dwVidMemFree), true);
  // 0x44: u32
  if (data?.dwMaxVisibleOverlays !== undefined) view.setUint32(68, Number(data.dwMaxVisibleOverlays), true);
  // 0x48: u32
  if (data?.dwCurrVisibleOverlays !== undefined) view.setUint32(72, Number(data.dwCurrVisibleOverlays), true);
  // 0x4c: u32
  if (data?.dwNumFourCCCodes !== undefined) view.setUint32(76, Number(data.dwNumFourCCCodes), true);
  // 0x50: u32
  if (data?.dwAlignBoundarySrc !== undefined) view.setUint32(80, Number(data.dwAlignBoundarySrc), true);
  // 0x54: u32
  if (data?.dwAlignSizeSrc !== undefined) view.setUint32(84, Number(data.dwAlignSizeSrc), true);
  // 0x58: u32
  if (data?.dwAlignBoundaryDest !== undefined) view.setUint32(88, Number(data.dwAlignBoundaryDest), true);
  // 0x5c: u32
  if (data?.dwAlignSizeDest !== undefined) view.setUint32(92, Number(data.dwAlignSizeDest), true);
  // 0x60: u32
  if (data?.dwAlignStrideAlign !== undefined) view.setUint32(96, Number(data.dwAlignStrideAlign), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.dwRops !== undefined) view.setBigUint64(104, data.dwRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwRops))), true);
  // 0x70: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(112, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  // 0x78: u32
  if (data?.dwMinOverlayStretch !== undefined) view.setUint32(120, Number(data.dwMinOverlayStretch), true);
  // 0x7c: u32
  if (data?.dwMaxOverlayStretch !== undefined) view.setUint32(124, Number(data.dwMaxOverlayStretch), true);
  // 0x80: u32
  if (data?.dwMinLiveVideoStretch !== undefined) view.setUint32(128, Number(data.dwMinLiveVideoStretch), true);
  // 0x84: u32
  if (data?.dwMaxLiveVideoStretch !== undefined) view.setUint32(132, Number(data.dwMaxLiveVideoStretch), true);
  // 0x88: u32
  if (data?.dwMinHwCodecStretch !== undefined) view.setUint32(136, Number(data.dwMinHwCodecStretch), true);
  // 0x8c: u32
  if (data?.dwMaxHwCodecStretch !== undefined) view.setUint32(140, Number(data.dwMaxHwCodecStretch), true);
  // 0x90: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(144, Number(data.dwReserved1), true);
  // 0x94: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(148, Number(data.dwReserved2), true);
  // 0x98: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(152, Number(data.dwReserved3), true);
  // 0x9c: u32
  if (data?.dwSVBCaps !== undefined) view.setUint32(156, Number(data.dwSVBCaps), true);
  // 0xa0: u32
  if (data?.dwSVBCKeyCaps !== undefined) view.setUint32(160, Number(data.dwSVBCKeyCaps), true);
  // 0xa4: u32
  if (data?.dwSVBFXCaps !== undefined) view.setUint32(164, Number(data.dwSVBFXCaps), true);
  // 0xa8: pointer
  if (data?.dwSVBRops !== undefined) view.setBigUint64(168, data.dwSVBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwSVBRops))), true);
  // 0xb0: u32
  if (data?.dwVSBCaps !== undefined) view.setUint32(176, Number(data.dwVSBCaps), true);
  // 0xb4: u32
  if (data?.dwVSBCKeyCaps !== undefined) view.setUint32(180, Number(data.dwVSBCKeyCaps), true);
  // 0xb8: u32
  if (data?.dwVSBFXCaps !== undefined) view.setUint32(184, Number(data.dwVSBFXCaps), true);
  // 0xbc: pad4
  // 0xc0: pointer
  if (data?.dwVSBRops !== undefined) view.setBigUint64(192, data.dwVSBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwVSBRops))), true);
  // 0xc8: u32
  if (data?.dwSSBCaps !== undefined) view.setUint32(200, Number(data.dwSSBCaps), true);
  // 0xcc: u32
  if (data?.dwSSBCKeyCaps !== undefined) view.setUint32(204, Number(data.dwSSBCKeyCaps), true);
  // 0xd0: u32
  if (data?.dwSSBFXCaps !== undefined) view.setUint32(208, Number(data.dwSSBFXCaps), true);
  // 0xd4: pad4
  // 0xd8: pointer
  if (data?.dwSSBRops !== undefined) view.setBigUint64(216, data.dwSSBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwSSBRops))), true);
  // 0xe0: u32
  if (data?.dwReserved4 !== undefined) view.setUint32(224, Number(data.dwReserved4), true);
  // 0xe4: u32
  if (data?.dwReserved5 !== undefined) view.setUint32(228, Number(data.dwReserved5), true);
  // 0xe8: u32
  if (data?.dwReserved6 !== undefined) view.setUint32(232, Number(data.dwReserved6), true);
  // 0xec: pad4
  return buf;
}

export class DDCAPS_DX3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCaps2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwCKeyCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwFXCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFXAlphaCaps(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwPalCaps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwSVCaps(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwAlphaBltConstBitDepths(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwAlphaBltPixelBitDepths(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwAlphaBltSurfaceBitDepths(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwAlphaOverlayConstBitDepths(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwAlphaOverlayPixelBitDepths(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwAlphaOverlaySurfaceBitDepths(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwZBufferBitDepths(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwVidMemTotal(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwVidMemFree(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwMaxVisibleOverlays(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwCurrVisibleOverlays(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwNumFourCCCodes(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwAlignBoundarySrc(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwAlignSizeSrc(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwAlignBoundaryDest(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwAlignSizeDest(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get dwAlignStrideAlign(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get dwRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u32
  get dwMinOverlayStretch(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get dwMaxOverlayStretch(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get dwMinLiveVideoStretch(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwMaxLiveVideoStretch(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get dwMinHwCodecStretch(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get dwMaxHwCodecStretch(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get dwReserved1(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get dwReserved2(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get dwReserved3(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get dwSVBCaps(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get dwSVBCKeyCaps(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get dwSVBFXCaps(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: pointer
  get dwSVBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: u32
  get dwVSBCaps(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: u32
  get dwVSBCKeyCaps(): number {
    return this.view.getUint32(180, true);
  }

  // 0xb8: u32
  get dwVSBFXCaps(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  get dwVSBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: u32
  get dwSSBCaps(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get dwSSBCKeyCaps(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: u32
  get dwSSBFXCaps(): number {
    return this.view.getUint32(208, true);
  }

  // 0xd4: pad4

  // 0xd8: pointer
  get dwSSBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: u32
  get dwReserved4(): number {
    return this.view.getUint32(224, true);
  }

  // 0xe4: u32
  get dwReserved5(): number {
    return this.view.getUint32(228, true);
  }

  // 0xe8: u32
  get dwReserved6(): number {
    return this.view.getUint32(232, true);
  }

  // 0xec: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCaps2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwCKeyCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwFXCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFXAlphaCaps(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwPalCaps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwSVCaps(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwAlphaBltConstBitDepths(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwAlphaBltPixelBitDepths(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwAlphaBltSurfaceBitDepths(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwAlphaOverlayConstBitDepths(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwAlphaOverlayPixelBitDepths(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwAlphaOverlaySurfaceBitDepths(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwZBufferBitDepths(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwVidMemTotal(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwVidMemFree(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwMaxVisibleOverlays(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwCurrVisibleOverlays(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwNumFourCCCodes(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwAlignBoundarySrc(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwAlignSizeSrc(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwAlignBoundaryDest(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwAlignSizeDest(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set dwAlignStrideAlign(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set dwRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: u32
  set dwMinOverlayStretch(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set dwMaxOverlayStretch(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set dwMinLiveVideoStretch(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwMaxLiveVideoStretch(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set dwMinHwCodecStretch(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set dwMaxHwCodecStretch(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set dwReserved1(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set dwReserved2(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set dwReserved3(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set dwSVBCaps(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set dwSVBCKeyCaps(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set dwSVBFXCaps(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: pointer
  set dwSVBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: u32
  set dwVSBCaps(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: u32
  set dwVSBCKeyCaps(value: number) {
    this.view.setUint32(180, value, true);
  }

  // 0xb8: u32
  set dwVSBFXCaps(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  set dwVSBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: u32
  set dwSSBCaps(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set dwSSBCKeyCaps(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: u32
  set dwSSBFXCaps(value: number) {
    this.view.setUint32(208, value, true);
  }

  // 0xd4: pad4

  // 0xd8: pointer
  set dwSSBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: u32
  set dwReserved4(value: number) {
    this.view.setUint32(224, value, true);
  }

  // 0xe4: u32
  set dwReserved5(value: number) {
    this.view.setUint32(228, value, true);
  }

  // 0xe8: u32
  set dwReserved6(value: number) {
    this.view.setUint32(232, value, true);
  }

  // 0xec: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDCAPS_DX5 (size: 264)
 */
export interface DDCAPS_DX5 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwCaps2: number;
  /** u32 */
  dwCKeyCaps: number;
  /** u32 */
  dwFXCaps: number;
  /** u32 */
  dwFXAlphaCaps: number;
  /** u32 */
  dwPalCaps: number;
  /** u32 */
  dwSVCaps: number;
  /** u32 */
  dwAlphaBltConstBitDepths: number;
  /** u32 */
  dwAlphaBltPixelBitDepths: number;
  /** u32 */
  dwAlphaBltSurfaceBitDepths: number;
  /** u32 */
  dwAlphaOverlayConstBitDepths: number;
  /** u32 */
  dwAlphaOverlayPixelBitDepths: number;
  /** u32 */
  dwAlphaOverlaySurfaceBitDepths: number;
  /** u32 */
  dwZBufferBitDepths: number;
  /** u32 */
  dwVidMemTotal: number;
  /** u32 */
  dwVidMemFree: number;
  /** u32 */
  dwMaxVisibleOverlays: number;
  /** u32 */
  dwCurrVisibleOverlays: number;
  /** u32 */
  dwNumFourCCCodes: number;
  /** u32 */
  dwAlignBoundarySrc: number;
  /** u32 */
  dwAlignSizeSrc: number;
  /** u32 */
  dwAlignBoundaryDest: number;
  /** u32 */
  dwAlignSizeDest: number;
  /** u32 */
  dwAlignStrideAlign: number;
  /** array */
  dwRops: Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsCaps: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwMinOverlayStretch: number;
  /** u32 */
  dwMaxOverlayStretch: number;
  /** u32 */
  dwMinLiveVideoStretch: number;
  /** u32 */
  dwMaxLiveVideoStretch: number;
  /** u32 */
  dwMinHwCodecStretch: number;
  /** u32 */
  dwMaxHwCodecStretch: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwReserved3: number;
  /** u32 */
  dwSVBCaps: number;
  /** u32 */
  dwSVBCKeyCaps: number;
  /** u32 */
  dwSVBFXCaps: number;
  /** array */
  dwSVBRops: Deno.PointerValue;
  /** u32 */
  dwVSBCaps: number;
  /** u32 */
  dwVSBCKeyCaps: number;
  /** u32 */
  dwVSBFXCaps: number;
  /** array */
  dwVSBRops: Deno.PointerValue;
  /** u32 */
  dwSSBCaps: number;
  /** u32 */
  dwSSBCKeyCaps: number;
  /** u32 */
  dwSSBFXCaps: number;
  /** array */
  dwSSBRops: Deno.PointerValue;
  /** u32 */
  dwMaxVideoPorts: number;
  /** u32 */
  dwCurrVideoPorts: number;
  /** u32 */
  dwSVBCaps2: number;
  /** u32 */
  dwNLVBCaps: number;
  /** u32 */
  dwNLVBCaps2: number;
  /** u32 */
  dwNLVBCKeyCaps: number;
  /** u32 */
  dwNLVBFXCaps: number;
  /** array */
  dwNLVBRops: Deno.PointerValue;
}

export const sizeofDDCAPS_DX5 = 264;

export function allocDDCAPS_DX5(data?: Partial<DDCAPS_DX5>): Uint8Array {
  const buf = new Uint8Array(sizeofDDCAPS_DX5);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCaps !== undefined) view.setUint32(4, Number(data.dwCaps), true);
  // 0x08: u32
  if (data?.dwCaps2 !== undefined) view.setUint32(8, Number(data.dwCaps2), true);
  // 0x0c: u32
  if (data?.dwCKeyCaps !== undefined) view.setUint32(12, Number(data.dwCKeyCaps), true);
  // 0x10: u32
  if (data?.dwFXCaps !== undefined) view.setUint32(16, Number(data.dwFXCaps), true);
  // 0x14: u32
  if (data?.dwFXAlphaCaps !== undefined) view.setUint32(20, Number(data.dwFXAlphaCaps), true);
  // 0x18: u32
  if (data?.dwPalCaps !== undefined) view.setUint32(24, Number(data.dwPalCaps), true);
  // 0x1c: u32
  if (data?.dwSVCaps !== undefined) view.setUint32(28, Number(data.dwSVCaps), true);
  // 0x20: u32
  if (data?.dwAlphaBltConstBitDepths !== undefined) view.setUint32(32, Number(data.dwAlphaBltConstBitDepths), true);
  // 0x24: u32
  if (data?.dwAlphaBltPixelBitDepths !== undefined) view.setUint32(36, Number(data.dwAlphaBltPixelBitDepths), true);
  // 0x28: u32
  if (data?.dwAlphaBltSurfaceBitDepths !== undefined) view.setUint32(40, Number(data.dwAlphaBltSurfaceBitDepths), true);
  // 0x2c: u32
  if (data?.dwAlphaOverlayConstBitDepths !== undefined) view.setUint32(44, Number(data.dwAlphaOverlayConstBitDepths), true);
  // 0x30: u32
  if (data?.dwAlphaOverlayPixelBitDepths !== undefined) view.setUint32(48, Number(data.dwAlphaOverlayPixelBitDepths), true);
  // 0x34: u32
  if (data?.dwAlphaOverlaySurfaceBitDepths !== undefined) view.setUint32(52, Number(data.dwAlphaOverlaySurfaceBitDepths), true);
  // 0x38: u32
  if (data?.dwZBufferBitDepths !== undefined) view.setUint32(56, Number(data.dwZBufferBitDepths), true);
  // 0x3c: u32
  if (data?.dwVidMemTotal !== undefined) view.setUint32(60, Number(data.dwVidMemTotal), true);
  // 0x40: u32
  if (data?.dwVidMemFree !== undefined) view.setUint32(64, Number(data.dwVidMemFree), true);
  // 0x44: u32
  if (data?.dwMaxVisibleOverlays !== undefined) view.setUint32(68, Number(data.dwMaxVisibleOverlays), true);
  // 0x48: u32
  if (data?.dwCurrVisibleOverlays !== undefined) view.setUint32(72, Number(data.dwCurrVisibleOverlays), true);
  // 0x4c: u32
  if (data?.dwNumFourCCCodes !== undefined) view.setUint32(76, Number(data.dwNumFourCCCodes), true);
  // 0x50: u32
  if (data?.dwAlignBoundarySrc !== undefined) view.setUint32(80, Number(data.dwAlignBoundarySrc), true);
  // 0x54: u32
  if (data?.dwAlignSizeSrc !== undefined) view.setUint32(84, Number(data.dwAlignSizeSrc), true);
  // 0x58: u32
  if (data?.dwAlignBoundaryDest !== undefined) view.setUint32(88, Number(data.dwAlignBoundaryDest), true);
  // 0x5c: u32
  if (data?.dwAlignSizeDest !== undefined) view.setUint32(92, Number(data.dwAlignSizeDest), true);
  // 0x60: u32
  if (data?.dwAlignStrideAlign !== undefined) view.setUint32(96, Number(data.dwAlignStrideAlign), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.dwRops !== undefined) view.setBigUint64(104, data.dwRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwRops))), true);
  // 0x70: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(112, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  // 0x78: u32
  if (data?.dwMinOverlayStretch !== undefined) view.setUint32(120, Number(data.dwMinOverlayStretch), true);
  // 0x7c: u32
  if (data?.dwMaxOverlayStretch !== undefined) view.setUint32(124, Number(data.dwMaxOverlayStretch), true);
  // 0x80: u32
  if (data?.dwMinLiveVideoStretch !== undefined) view.setUint32(128, Number(data.dwMinLiveVideoStretch), true);
  // 0x84: u32
  if (data?.dwMaxLiveVideoStretch !== undefined) view.setUint32(132, Number(data.dwMaxLiveVideoStretch), true);
  // 0x88: u32
  if (data?.dwMinHwCodecStretch !== undefined) view.setUint32(136, Number(data.dwMinHwCodecStretch), true);
  // 0x8c: u32
  if (data?.dwMaxHwCodecStretch !== undefined) view.setUint32(140, Number(data.dwMaxHwCodecStretch), true);
  // 0x90: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(144, Number(data.dwReserved1), true);
  // 0x94: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(148, Number(data.dwReserved2), true);
  // 0x98: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(152, Number(data.dwReserved3), true);
  // 0x9c: u32
  if (data?.dwSVBCaps !== undefined) view.setUint32(156, Number(data.dwSVBCaps), true);
  // 0xa0: u32
  if (data?.dwSVBCKeyCaps !== undefined) view.setUint32(160, Number(data.dwSVBCKeyCaps), true);
  // 0xa4: u32
  if (data?.dwSVBFXCaps !== undefined) view.setUint32(164, Number(data.dwSVBFXCaps), true);
  // 0xa8: pointer
  if (data?.dwSVBRops !== undefined) view.setBigUint64(168, data.dwSVBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwSVBRops))), true);
  // 0xb0: u32
  if (data?.dwVSBCaps !== undefined) view.setUint32(176, Number(data.dwVSBCaps), true);
  // 0xb4: u32
  if (data?.dwVSBCKeyCaps !== undefined) view.setUint32(180, Number(data.dwVSBCKeyCaps), true);
  // 0xb8: u32
  if (data?.dwVSBFXCaps !== undefined) view.setUint32(184, Number(data.dwVSBFXCaps), true);
  // 0xbc: pad4
  // 0xc0: pointer
  if (data?.dwVSBRops !== undefined) view.setBigUint64(192, data.dwVSBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwVSBRops))), true);
  // 0xc8: u32
  if (data?.dwSSBCaps !== undefined) view.setUint32(200, Number(data.dwSSBCaps), true);
  // 0xcc: u32
  if (data?.dwSSBCKeyCaps !== undefined) view.setUint32(204, Number(data.dwSSBCKeyCaps), true);
  // 0xd0: u32
  if (data?.dwSSBFXCaps !== undefined) view.setUint32(208, Number(data.dwSSBFXCaps), true);
  // 0xd4: pad4
  // 0xd8: pointer
  if (data?.dwSSBRops !== undefined) view.setBigUint64(216, data.dwSSBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwSSBRops))), true);
  // 0xe0: u32
  if (data?.dwMaxVideoPorts !== undefined) view.setUint32(224, Number(data.dwMaxVideoPorts), true);
  // 0xe4: u32
  if (data?.dwCurrVideoPorts !== undefined) view.setUint32(228, Number(data.dwCurrVideoPorts), true);
  // 0xe8: u32
  if (data?.dwSVBCaps2 !== undefined) view.setUint32(232, Number(data.dwSVBCaps2), true);
  // 0xec: u32
  if (data?.dwNLVBCaps !== undefined) view.setUint32(236, Number(data.dwNLVBCaps), true);
  // 0xf0: u32
  if (data?.dwNLVBCaps2 !== undefined) view.setUint32(240, Number(data.dwNLVBCaps2), true);
  // 0xf4: u32
  if (data?.dwNLVBCKeyCaps !== undefined) view.setUint32(244, Number(data.dwNLVBCKeyCaps), true);
  // 0xf8: u32
  if (data?.dwNLVBFXCaps !== undefined) view.setUint32(248, Number(data.dwNLVBFXCaps), true);
  // 0xfc: pad4
  // 0x100: pointer
  if (data?.dwNLVBRops !== undefined) view.setBigUint64(256, data.dwNLVBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwNLVBRops))), true);
  return buf;
}

export class DDCAPS_DX5View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCaps2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwCKeyCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwFXCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFXAlphaCaps(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwPalCaps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwSVCaps(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwAlphaBltConstBitDepths(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwAlphaBltPixelBitDepths(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwAlphaBltSurfaceBitDepths(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwAlphaOverlayConstBitDepths(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwAlphaOverlayPixelBitDepths(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwAlphaOverlaySurfaceBitDepths(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwZBufferBitDepths(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwVidMemTotal(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwVidMemFree(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwMaxVisibleOverlays(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwCurrVisibleOverlays(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwNumFourCCCodes(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwAlignBoundarySrc(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwAlignSizeSrc(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwAlignBoundaryDest(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwAlignSizeDest(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get dwAlignStrideAlign(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get dwRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u32
  get dwMinOverlayStretch(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get dwMaxOverlayStretch(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get dwMinLiveVideoStretch(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwMaxLiveVideoStretch(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get dwMinHwCodecStretch(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get dwMaxHwCodecStretch(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get dwReserved1(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get dwReserved2(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get dwReserved3(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get dwSVBCaps(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get dwSVBCKeyCaps(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get dwSVBFXCaps(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: pointer
  get dwSVBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: u32
  get dwVSBCaps(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: u32
  get dwVSBCKeyCaps(): number {
    return this.view.getUint32(180, true);
  }

  // 0xb8: u32
  get dwVSBFXCaps(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  get dwVSBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: u32
  get dwSSBCaps(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get dwSSBCKeyCaps(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: u32
  get dwSSBFXCaps(): number {
    return this.view.getUint32(208, true);
  }

  // 0xd4: pad4

  // 0xd8: pointer
  get dwSSBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: u32
  get dwMaxVideoPorts(): number {
    return this.view.getUint32(224, true);
  }

  // 0xe4: u32
  get dwCurrVideoPorts(): number {
    return this.view.getUint32(228, true);
  }

  // 0xe8: u32
  get dwSVBCaps2(): number {
    return this.view.getUint32(232, true);
  }

  // 0xec: u32
  get dwNLVBCaps(): number {
    return this.view.getUint32(236, true);
  }

  // 0xf0: u32
  get dwNLVBCaps2(): number {
    return this.view.getUint32(240, true);
  }

  // 0xf4: u32
  get dwNLVBCKeyCaps(): number {
    return this.view.getUint32(244, true);
  }

  // 0xf8: u32
  get dwNLVBFXCaps(): number {
    return this.view.getUint32(248, true);
  }

  // 0xfc: pad4

  // 0x100: pointer
  get dwNLVBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(256, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCaps2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwCKeyCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwFXCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFXAlphaCaps(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwPalCaps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwSVCaps(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwAlphaBltConstBitDepths(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwAlphaBltPixelBitDepths(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwAlphaBltSurfaceBitDepths(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwAlphaOverlayConstBitDepths(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwAlphaOverlayPixelBitDepths(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwAlphaOverlaySurfaceBitDepths(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwZBufferBitDepths(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwVidMemTotal(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwVidMemFree(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwMaxVisibleOverlays(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwCurrVisibleOverlays(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwNumFourCCCodes(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwAlignBoundarySrc(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwAlignSizeSrc(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwAlignBoundaryDest(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwAlignSizeDest(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set dwAlignStrideAlign(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set dwRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: u32
  set dwMinOverlayStretch(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set dwMaxOverlayStretch(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set dwMinLiveVideoStretch(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwMaxLiveVideoStretch(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set dwMinHwCodecStretch(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set dwMaxHwCodecStretch(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set dwReserved1(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set dwReserved2(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set dwReserved3(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set dwSVBCaps(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set dwSVBCKeyCaps(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set dwSVBFXCaps(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: pointer
  set dwSVBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: u32
  set dwVSBCaps(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: u32
  set dwVSBCKeyCaps(value: number) {
    this.view.setUint32(180, value, true);
  }

  // 0xb8: u32
  set dwVSBFXCaps(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  set dwVSBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: u32
  set dwSSBCaps(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set dwSSBCKeyCaps(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: u32
  set dwSSBFXCaps(value: number) {
    this.view.setUint32(208, value, true);
  }

  // 0xd4: pad4

  // 0xd8: pointer
  set dwSSBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: u32
  set dwMaxVideoPorts(value: number) {
    this.view.setUint32(224, value, true);
  }

  // 0xe4: u32
  set dwCurrVideoPorts(value: number) {
    this.view.setUint32(228, value, true);
  }

  // 0xe8: u32
  set dwSVBCaps2(value: number) {
    this.view.setUint32(232, value, true);
  }

  // 0xec: u32
  set dwNLVBCaps(value: number) {
    this.view.setUint32(236, value, true);
  }

  // 0xf0: u32
  set dwNLVBCaps2(value: number) {
    this.view.setUint32(240, value, true);
  }

  // 0xf4: u32
  set dwNLVBCKeyCaps(value: number) {
    this.view.setUint32(244, value, true);
  }

  // 0xf8: u32
  set dwNLVBFXCaps(value: number) {
    this.view.setUint32(248, value, true);
  }

  // 0xfc: pad4

  // 0x100: pointer
  set dwNLVBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(256, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDCAPS_DX6 (size: 272)
 */
export interface DDCAPS_DX6 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwCaps2: number;
  /** u32 */
  dwCKeyCaps: number;
  /** u32 */
  dwFXCaps: number;
  /** u32 */
  dwFXAlphaCaps: number;
  /** u32 */
  dwPalCaps: number;
  /** u32 */
  dwSVCaps: number;
  /** u32 */
  dwAlphaBltConstBitDepths: number;
  /** u32 */
  dwAlphaBltPixelBitDepths: number;
  /** u32 */
  dwAlphaBltSurfaceBitDepths: number;
  /** u32 */
  dwAlphaOverlayConstBitDepths: number;
  /** u32 */
  dwAlphaOverlayPixelBitDepths: number;
  /** u32 */
  dwAlphaOverlaySurfaceBitDepths: number;
  /** u32 */
  dwZBufferBitDepths: number;
  /** u32 */
  dwVidMemTotal: number;
  /** u32 */
  dwVidMemFree: number;
  /** u32 */
  dwMaxVisibleOverlays: number;
  /** u32 */
  dwCurrVisibleOverlays: number;
  /** u32 */
  dwNumFourCCCodes: number;
  /** u32 */
  dwAlignBoundarySrc: number;
  /** u32 */
  dwAlignSizeSrc: number;
  /** u32 */
  dwAlignBoundaryDest: number;
  /** u32 */
  dwAlignSizeDest: number;
  /** u32 */
  dwAlignStrideAlign: number;
  /** array */
  dwRops: Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsOldCaps: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwMinOverlayStretch: number;
  /** u32 */
  dwMaxOverlayStretch: number;
  /** u32 */
  dwMinLiveVideoStretch: number;
  /** u32 */
  dwMaxLiveVideoStretch: number;
  /** u32 */
  dwMinHwCodecStretch: number;
  /** u32 */
  dwMaxHwCodecStretch: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwReserved3: number;
  /** u32 */
  dwSVBCaps: number;
  /** u32 */
  dwSVBCKeyCaps: number;
  /** u32 */
  dwSVBFXCaps: number;
  /** array */
  dwSVBRops: Deno.PointerValue;
  /** u32 */
  dwVSBCaps: number;
  /** u32 */
  dwVSBCKeyCaps: number;
  /** u32 */
  dwVSBFXCaps: number;
  /** array */
  dwVSBRops: Deno.PointerValue;
  /** u32 */
  dwSSBCaps: number;
  /** u32 */
  dwSSBCKeyCaps: number;
  /** u32 */
  dwSSBFXCaps: number;
  /** array */
  dwSSBRops: Deno.PointerValue;
  /** u32 */
  dwMaxVideoPorts: number;
  /** u32 */
  dwCurrVideoPorts: number;
  /** u32 */
  dwSVBCaps2: number;
  /** u32 */
  dwNLVBCaps: number;
  /** u32 */
  dwNLVBCaps2: number;
  /** u32 */
  dwNLVBCKeyCaps: number;
  /** u32 */
  dwNLVBFXCaps: number;
  /** array */
  dwNLVBRops: Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS2 */
  ddsCaps: Uint8Array | Deno.PointerValue;
}

export const sizeofDDCAPS_DX6 = 272;

export function allocDDCAPS_DX6(data?: Partial<DDCAPS_DX6>): Uint8Array {
  const buf = new Uint8Array(sizeofDDCAPS_DX6);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCaps !== undefined) view.setUint32(4, Number(data.dwCaps), true);
  // 0x08: u32
  if (data?.dwCaps2 !== undefined) view.setUint32(8, Number(data.dwCaps2), true);
  // 0x0c: u32
  if (data?.dwCKeyCaps !== undefined) view.setUint32(12, Number(data.dwCKeyCaps), true);
  // 0x10: u32
  if (data?.dwFXCaps !== undefined) view.setUint32(16, Number(data.dwFXCaps), true);
  // 0x14: u32
  if (data?.dwFXAlphaCaps !== undefined) view.setUint32(20, Number(data.dwFXAlphaCaps), true);
  // 0x18: u32
  if (data?.dwPalCaps !== undefined) view.setUint32(24, Number(data.dwPalCaps), true);
  // 0x1c: u32
  if (data?.dwSVCaps !== undefined) view.setUint32(28, Number(data.dwSVCaps), true);
  // 0x20: u32
  if (data?.dwAlphaBltConstBitDepths !== undefined) view.setUint32(32, Number(data.dwAlphaBltConstBitDepths), true);
  // 0x24: u32
  if (data?.dwAlphaBltPixelBitDepths !== undefined) view.setUint32(36, Number(data.dwAlphaBltPixelBitDepths), true);
  // 0x28: u32
  if (data?.dwAlphaBltSurfaceBitDepths !== undefined) view.setUint32(40, Number(data.dwAlphaBltSurfaceBitDepths), true);
  // 0x2c: u32
  if (data?.dwAlphaOverlayConstBitDepths !== undefined) view.setUint32(44, Number(data.dwAlphaOverlayConstBitDepths), true);
  // 0x30: u32
  if (data?.dwAlphaOverlayPixelBitDepths !== undefined) view.setUint32(48, Number(data.dwAlphaOverlayPixelBitDepths), true);
  // 0x34: u32
  if (data?.dwAlphaOverlaySurfaceBitDepths !== undefined) view.setUint32(52, Number(data.dwAlphaOverlaySurfaceBitDepths), true);
  // 0x38: u32
  if (data?.dwZBufferBitDepths !== undefined) view.setUint32(56, Number(data.dwZBufferBitDepths), true);
  // 0x3c: u32
  if (data?.dwVidMemTotal !== undefined) view.setUint32(60, Number(data.dwVidMemTotal), true);
  // 0x40: u32
  if (data?.dwVidMemFree !== undefined) view.setUint32(64, Number(data.dwVidMemFree), true);
  // 0x44: u32
  if (data?.dwMaxVisibleOverlays !== undefined) view.setUint32(68, Number(data.dwMaxVisibleOverlays), true);
  // 0x48: u32
  if (data?.dwCurrVisibleOverlays !== undefined) view.setUint32(72, Number(data.dwCurrVisibleOverlays), true);
  // 0x4c: u32
  if (data?.dwNumFourCCCodes !== undefined) view.setUint32(76, Number(data.dwNumFourCCCodes), true);
  // 0x50: u32
  if (data?.dwAlignBoundarySrc !== undefined) view.setUint32(80, Number(data.dwAlignBoundarySrc), true);
  // 0x54: u32
  if (data?.dwAlignSizeSrc !== undefined) view.setUint32(84, Number(data.dwAlignSizeSrc), true);
  // 0x58: u32
  if (data?.dwAlignBoundaryDest !== undefined) view.setUint32(88, Number(data.dwAlignBoundaryDest), true);
  // 0x5c: u32
  if (data?.dwAlignSizeDest !== undefined) view.setUint32(92, Number(data.dwAlignSizeDest), true);
  // 0x60: u32
  if (data?.dwAlignStrideAlign !== undefined) view.setUint32(96, Number(data.dwAlignStrideAlign), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.dwRops !== undefined) view.setBigUint64(104, data.dwRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwRops))), true);
  // 0x70: pointer
  if (data?.ddsOldCaps !== undefined) view.setBigUint64(112, data.ddsOldCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsOldCaps))), true);
  // 0x78: u32
  if (data?.dwMinOverlayStretch !== undefined) view.setUint32(120, Number(data.dwMinOverlayStretch), true);
  // 0x7c: u32
  if (data?.dwMaxOverlayStretch !== undefined) view.setUint32(124, Number(data.dwMaxOverlayStretch), true);
  // 0x80: u32
  if (data?.dwMinLiveVideoStretch !== undefined) view.setUint32(128, Number(data.dwMinLiveVideoStretch), true);
  // 0x84: u32
  if (data?.dwMaxLiveVideoStretch !== undefined) view.setUint32(132, Number(data.dwMaxLiveVideoStretch), true);
  // 0x88: u32
  if (data?.dwMinHwCodecStretch !== undefined) view.setUint32(136, Number(data.dwMinHwCodecStretch), true);
  // 0x8c: u32
  if (data?.dwMaxHwCodecStretch !== undefined) view.setUint32(140, Number(data.dwMaxHwCodecStretch), true);
  // 0x90: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(144, Number(data.dwReserved1), true);
  // 0x94: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(148, Number(data.dwReserved2), true);
  // 0x98: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(152, Number(data.dwReserved3), true);
  // 0x9c: u32
  if (data?.dwSVBCaps !== undefined) view.setUint32(156, Number(data.dwSVBCaps), true);
  // 0xa0: u32
  if (data?.dwSVBCKeyCaps !== undefined) view.setUint32(160, Number(data.dwSVBCKeyCaps), true);
  // 0xa4: u32
  if (data?.dwSVBFXCaps !== undefined) view.setUint32(164, Number(data.dwSVBFXCaps), true);
  // 0xa8: pointer
  if (data?.dwSVBRops !== undefined) view.setBigUint64(168, data.dwSVBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwSVBRops))), true);
  // 0xb0: u32
  if (data?.dwVSBCaps !== undefined) view.setUint32(176, Number(data.dwVSBCaps), true);
  // 0xb4: u32
  if (data?.dwVSBCKeyCaps !== undefined) view.setUint32(180, Number(data.dwVSBCKeyCaps), true);
  // 0xb8: u32
  if (data?.dwVSBFXCaps !== undefined) view.setUint32(184, Number(data.dwVSBFXCaps), true);
  // 0xbc: pad4
  // 0xc0: pointer
  if (data?.dwVSBRops !== undefined) view.setBigUint64(192, data.dwVSBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwVSBRops))), true);
  // 0xc8: u32
  if (data?.dwSSBCaps !== undefined) view.setUint32(200, Number(data.dwSSBCaps), true);
  // 0xcc: u32
  if (data?.dwSSBCKeyCaps !== undefined) view.setUint32(204, Number(data.dwSSBCKeyCaps), true);
  // 0xd0: u32
  if (data?.dwSSBFXCaps !== undefined) view.setUint32(208, Number(data.dwSSBFXCaps), true);
  // 0xd4: pad4
  // 0xd8: pointer
  if (data?.dwSSBRops !== undefined) view.setBigUint64(216, data.dwSSBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwSSBRops))), true);
  // 0xe0: u32
  if (data?.dwMaxVideoPorts !== undefined) view.setUint32(224, Number(data.dwMaxVideoPorts), true);
  // 0xe4: u32
  if (data?.dwCurrVideoPorts !== undefined) view.setUint32(228, Number(data.dwCurrVideoPorts), true);
  // 0xe8: u32
  if (data?.dwSVBCaps2 !== undefined) view.setUint32(232, Number(data.dwSVBCaps2), true);
  // 0xec: u32
  if (data?.dwNLVBCaps !== undefined) view.setUint32(236, Number(data.dwNLVBCaps), true);
  // 0xf0: u32
  if (data?.dwNLVBCaps2 !== undefined) view.setUint32(240, Number(data.dwNLVBCaps2), true);
  // 0xf4: u32
  if (data?.dwNLVBCKeyCaps !== undefined) view.setUint32(244, Number(data.dwNLVBCKeyCaps), true);
  // 0xf8: u32
  if (data?.dwNLVBFXCaps !== undefined) view.setUint32(248, Number(data.dwNLVBFXCaps), true);
  // 0xfc: pad4
  // 0x100: pointer
  if (data?.dwNLVBRops !== undefined) view.setBigUint64(256, data.dwNLVBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwNLVBRops))), true);
  // 0x108: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(264, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  return buf;
}

export class DDCAPS_DX6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCaps2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwCKeyCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwFXCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFXAlphaCaps(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwPalCaps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwSVCaps(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwAlphaBltConstBitDepths(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwAlphaBltPixelBitDepths(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwAlphaBltSurfaceBitDepths(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwAlphaOverlayConstBitDepths(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwAlphaOverlayPixelBitDepths(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwAlphaOverlaySurfaceBitDepths(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwZBufferBitDepths(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwVidMemTotal(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwVidMemFree(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwMaxVisibleOverlays(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwCurrVisibleOverlays(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwNumFourCCCodes(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwAlignBoundarySrc(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwAlignSizeSrc(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwAlignBoundaryDest(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwAlignSizeDest(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get dwAlignStrideAlign(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get dwRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get ddsOldCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u32
  get dwMinOverlayStretch(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get dwMaxOverlayStretch(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get dwMinLiveVideoStretch(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwMaxLiveVideoStretch(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get dwMinHwCodecStretch(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get dwMaxHwCodecStretch(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get dwReserved1(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get dwReserved2(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get dwReserved3(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get dwSVBCaps(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get dwSVBCKeyCaps(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get dwSVBFXCaps(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: pointer
  get dwSVBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: u32
  get dwVSBCaps(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: u32
  get dwVSBCKeyCaps(): number {
    return this.view.getUint32(180, true);
  }

  // 0xb8: u32
  get dwVSBFXCaps(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  get dwVSBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: u32
  get dwSSBCaps(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get dwSSBCKeyCaps(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: u32
  get dwSSBFXCaps(): number {
    return this.view.getUint32(208, true);
  }

  // 0xd4: pad4

  // 0xd8: pointer
  get dwSSBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: u32
  get dwMaxVideoPorts(): number {
    return this.view.getUint32(224, true);
  }

  // 0xe4: u32
  get dwCurrVideoPorts(): number {
    return this.view.getUint32(228, true);
  }

  // 0xe8: u32
  get dwSVBCaps2(): number {
    return this.view.getUint32(232, true);
  }

  // 0xec: u32
  get dwNLVBCaps(): number {
    return this.view.getUint32(236, true);
  }

  // 0xf0: u32
  get dwNLVBCaps2(): number {
    return this.view.getUint32(240, true);
  }

  // 0xf4: u32
  get dwNLVBCKeyCaps(): number {
    return this.view.getUint32(244, true);
  }

  // 0xf8: u32
  get dwNLVBFXCaps(): number {
    return this.view.getUint32(248, true);
  }

  // 0xfc: pad4

  // 0x100: pointer
  get dwNLVBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(256, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x108: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(264, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCaps2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwCKeyCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwFXCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFXAlphaCaps(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwPalCaps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwSVCaps(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwAlphaBltConstBitDepths(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwAlphaBltPixelBitDepths(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwAlphaBltSurfaceBitDepths(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwAlphaOverlayConstBitDepths(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwAlphaOverlayPixelBitDepths(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwAlphaOverlaySurfaceBitDepths(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwZBufferBitDepths(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwVidMemTotal(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwVidMemFree(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwMaxVisibleOverlays(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwCurrVisibleOverlays(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwNumFourCCCodes(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwAlignBoundarySrc(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwAlignSizeSrc(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwAlignBoundaryDest(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwAlignSizeDest(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set dwAlignStrideAlign(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set dwRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set ddsOldCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: u32
  set dwMinOverlayStretch(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set dwMaxOverlayStretch(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set dwMinLiveVideoStretch(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwMaxLiveVideoStretch(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set dwMinHwCodecStretch(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set dwMaxHwCodecStretch(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set dwReserved1(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set dwReserved2(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set dwReserved3(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set dwSVBCaps(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set dwSVBCKeyCaps(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set dwSVBFXCaps(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: pointer
  set dwSVBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: u32
  set dwVSBCaps(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: u32
  set dwVSBCKeyCaps(value: number) {
    this.view.setUint32(180, value, true);
  }

  // 0xb8: u32
  set dwVSBFXCaps(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  set dwVSBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: u32
  set dwSSBCaps(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set dwSSBCKeyCaps(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: u32
  set dwSSBFXCaps(value: number) {
    this.view.setUint32(208, value, true);
  }

  // 0xd4: pad4

  // 0xd8: pointer
  set dwSSBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: u32
  set dwMaxVideoPorts(value: number) {
    this.view.setUint32(224, value, true);
  }

  // 0xe4: u32
  set dwCurrVideoPorts(value: number) {
    this.view.setUint32(228, value, true);
  }

  // 0xe8: u32
  set dwSVBCaps2(value: number) {
    this.view.setUint32(232, value, true);
  }

  // 0xec: u32
  set dwNLVBCaps(value: number) {
    this.view.setUint32(236, value, true);
  }

  // 0xf0: u32
  set dwNLVBCaps2(value: number) {
    this.view.setUint32(240, value, true);
  }

  // 0xf4: u32
  set dwNLVBCKeyCaps(value: number) {
    this.view.setUint32(244, value, true);
  }

  // 0xf8: u32
  set dwNLVBFXCaps(value: number) {
    this.view.setUint32(248, value, true);
  }

  // 0xfc: pad4

  // 0x100: pointer
  set dwNLVBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(256, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x108: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(264, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDCAPS_DX7 (size: 272)
 */
export interface DDCAPS_DX7 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwCaps2: number;
  /** u32 */
  dwCKeyCaps: number;
  /** u32 */
  dwFXCaps: number;
  /** u32 */
  dwFXAlphaCaps: number;
  /** u32 */
  dwPalCaps: number;
  /** u32 */
  dwSVCaps: number;
  /** u32 */
  dwAlphaBltConstBitDepths: number;
  /** u32 */
  dwAlphaBltPixelBitDepths: number;
  /** u32 */
  dwAlphaBltSurfaceBitDepths: number;
  /** u32 */
  dwAlphaOverlayConstBitDepths: number;
  /** u32 */
  dwAlphaOverlayPixelBitDepths: number;
  /** u32 */
  dwAlphaOverlaySurfaceBitDepths: number;
  /** u32 */
  dwZBufferBitDepths: number;
  /** u32 */
  dwVidMemTotal: number;
  /** u32 */
  dwVidMemFree: number;
  /** u32 */
  dwMaxVisibleOverlays: number;
  /** u32 */
  dwCurrVisibleOverlays: number;
  /** u32 */
  dwNumFourCCCodes: number;
  /** u32 */
  dwAlignBoundarySrc: number;
  /** u32 */
  dwAlignSizeSrc: number;
  /** u32 */
  dwAlignBoundaryDest: number;
  /** u32 */
  dwAlignSizeDest: number;
  /** u32 */
  dwAlignStrideAlign: number;
  /** array */
  dwRops: Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsOldCaps: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwMinOverlayStretch: number;
  /** u32 */
  dwMaxOverlayStretch: number;
  /** u32 */
  dwMinLiveVideoStretch: number;
  /** u32 */
  dwMaxLiveVideoStretch: number;
  /** u32 */
  dwMinHwCodecStretch: number;
  /** u32 */
  dwMaxHwCodecStretch: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwReserved3: number;
  /** u32 */
  dwSVBCaps: number;
  /** u32 */
  dwSVBCKeyCaps: number;
  /** u32 */
  dwSVBFXCaps: number;
  /** array */
  dwSVBRops: Deno.PointerValue;
  /** u32 */
  dwVSBCaps: number;
  /** u32 */
  dwVSBCKeyCaps: number;
  /** u32 */
  dwVSBFXCaps: number;
  /** array */
  dwVSBRops: Deno.PointerValue;
  /** u32 */
  dwSSBCaps: number;
  /** u32 */
  dwSSBCKeyCaps: number;
  /** u32 */
  dwSSBFXCaps: number;
  /** array */
  dwSSBRops: Deno.PointerValue;
  /** u32 */
  dwMaxVideoPorts: number;
  /** u32 */
  dwCurrVideoPorts: number;
  /** u32 */
  dwSVBCaps2: number;
  /** u32 */
  dwNLVBCaps: number;
  /** u32 */
  dwNLVBCaps2: number;
  /** u32 */
  dwNLVBCKeyCaps: number;
  /** u32 */
  dwNLVBFXCaps: number;
  /** array */
  dwNLVBRops: Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS2 */
  ddsCaps: Uint8Array | Deno.PointerValue;
}

export const sizeofDDCAPS_DX7 = 272;

export function allocDDCAPS_DX7(data?: Partial<DDCAPS_DX7>): Uint8Array {
  const buf = new Uint8Array(sizeofDDCAPS_DX7);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCaps !== undefined) view.setUint32(4, Number(data.dwCaps), true);
  // 0x08: u32
  if (data?.dwCaps2 !== undefined) view.setUint32(8, Number(data.dwCaps2), true);
  // 0x0c: u32
  if (data?.dwCKeyCaps !== undefined) view.setUint32(12, Number(data.dwCKeyCaps), true);
  // 0x10: u32
  if (data?.dwFXCaps !== undefined) view.setUint32(16, Number(data.dwFXCaps), true);
  // 0x14: u32
  if (data?.dwFXAlphaCaps !== undefined) view.setUint32(20, Number(data.dwFXAlphaCaps), true);
  // 0x18: u32
  if (data?.dwPalCaps !== undefined) view.setUint32(24, Number(data.dwPalCaps), true);
  // 0x1c: u32
  if (data?.dwSVCaps !== undefined) view.setUint32(28, Number(data.dwSVCaps), true);
  // 0x20: u32
  if (data?.dwAlphaBltConstBitDepths !== undefined) view.setUint32(32, Number(data.dwAlphaBltConstBitDepths), true);
  // 0x24: u32
  if (data?.dwAlphaBltPixelBitDepths !== undefined) view.setUint32(36, Number(data.dwAlphaBltPixelBitDepths), true);
  // 0x28: u32
  if (data?.dwAlphaBltSurfaceBitDepths !== undefined) view.setUint32(40, Number(data.dwAlphaBltSurfaceBitDepths), true);
  // 0x2c: u32
  if (data?.dwAlphaOverlayConstBitDepths !== undefined) view.setUint32(44, Number(data.dwAlphaOverlayConstBitDepths), true);
  // 0x30: u32
  if (data?.dwAlphaOverlayPixelBitDepths !== undefined) view.setUint32(48, Number(data.dwAlphaOverlayPixelBitDepths), true);
  // 0x34: u32
  if (data?.dwAlphaOverlaySurfaceBitDepths !== undefined) view.setUint32(52, Number(data.dwAlphaOverlaySurfaceBitDepths), true);
  // 0x38: u32
  if (data?.dwZBufferBitDepths !== undefined) view.setUint32(56, Number(data.dwZBufferBitDepths), true);
  // 0x3c: u32
  if (data?.dwVidMemTotal !== undefined) view.setUint32(60, Number(data.dwVidMemTotal), true);
  // 0x40: u32
  if (data?.dwVidMemFree !== undefined) view.setUint32(64, Number(data.dwVidMemFree), true);
  // 0x44: u32
  if (data?.dwMaxVisibleOverlays !== undefined) view.setUint32(68, Number(data.dwMaxVisibleOverlays), true);
  // 0x48: u32
  if (data?.dwCurrVisibleOverlays !== undefined) view.setUint32(72, Number(data.dwCurrVisibleOverlays), true);
  // 0x4c: u32
  if (data?.dwNumFourCCCodes !== undefined) view.setUint32(76, Number(data.dwNumFourCCCodes), true);
  // 0x50: u32
  if (data?.dwAlignBoundarySrc !== undefined) view.setUint32(80, Number(data.dwAlignBoundarySrc), true);
  // 0x54: u32
  if (data?.dwAlignSizeSrc !== undefined) view.setUint32(84, Number(data.dwAlignSizeSrc), true);
  // 0x58: u32
  if (data?.dwAlignBoundaryDest !== undefined) view.setUint32(88, Number(data.dwAlignBoundaryDest), true);
  // 0x5c: u32
  if (data?.dwAlignSizeDest !== undefined) view.setUint32(92, Number(data.dwAlignSizeDest), true);
  // 0x60: u32
  if (data?.dwAlignStrideAlign !== undefined) view.setUint32(96, Number(data.dwAlignStrideAlign), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.dwRops !== undefined) view.setBigUint64(104, data.dwRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwRops))), true);
  // 0x70: pointer
  if (data?.ddsOldCaps !== undefined) view.setBigUint64(112, data.ddsOldCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsOldCaps))), true);
  // 0x78: u32
  if (data?.dwMinOverlayStretch !== undefined) view.setUint32(120, Number(data.dwMinOverlayStretch), true);
  // 0x7c: u32
  if (data?.dwMaxOverlayStretch !== undefined) view.setUint32(124, Number(data.dwMaxOverlayStretch), true);
  // 0x80: u32
  if (data?.dwMinLiveVideoStretch !== undefined) view.setUint32(128, Number(data.dwMinLiveVideoStretch), true);
  // 0x84: u32
  if (data?.dwMaxLiveVideoStretch !== undefined) view.setUint32(132, Number(data.dwMaxLiveVideoStretch), true);
  // 0x88: u32
  if (data?.dwMinHwCodecStretch !== undefined) view.setUint32(136, Number(data.dwMinHwCodecStretch), true);
  // 0x8c: u32
  if (data?.dwMaxHwCodecStretch !== undefined) view.setUint32(140, Number(data.dwMaxHwCodecStretch), true);
  // 0x90: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(144, Number(data.dwReserved1), true);
  // 0x94: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(148, Number(data.dwReserved2), true);
  // 0x98: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(152, Number(data.dwReserved3), true);
  // 0x9c: u32
  if (data?.dwSVBCaps !== undefined) view.setUint32(156, Number(data.dwSVBCaps), true);
  // 0xa0: u32
  if (data?.dwSVBCKeyCaps !== undefined) view.setUint32(160, Number(data.dwSVBCKeyCaps), true);
  // 0xa4: u32
  if (data?.dwSVBFXCaps !== undefined) view.setUint32(164, Number(data.dwSVBFXCaps), true);
  // 0xa8: pointer
  if (data?.dwSVBRops !== undefined) view.setBigUint64(168, data.dwSVBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwSVBRops))), true);
  // 0xb0: u32
  if (data?.dwVSBCaps !== undefined) view.setUint32(176, Number(data.dwVSBCaps), true);
  // 0xb4: u32
  if (data?.dwVSBCKeyCaps !== undefined) view.setUint32(180, Number(data.dwVSBCKeyCaps), true);
  // 0xb8: u32
  if (data?.dwVSBFXCaps !== undefined) view.setUint32(184, Number(data.dwVSBFXCaps), true);
  // 0xbc: pad4
  // 0xc0: pointer
  if (data?.dwVSBRops !== undefined) view.setBigUint64(192, data.dwVSBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwVSBRops))), true);
  // 0xc8: u32
  if (data?.dwSSBCaps !== undefined) view.setUint32(200, Number(data.dwSSBCaps), true);
  // 0xcc: u32
  if (data?.dwSSBCKeyCaps !== undefined) view.setUint32(204, Number(data.dwSSBCKeyCaps), true);
  // 0xd0: u32
  if (data?.dwSSBFXCaps !== undefined) view.setUint32(208, Number(data.dwSSBFXCaps), true);
  // 0xd4: pad4
  // 0xd8: pointer
  if (data?.dwSSBRops !== undefined) view.setBigUint64(216, data.dwSSBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwSSBRops))), true);
  // 0xe0: u32
  if (data?.dwMaxVideoPorts !== undefined) view.setUint32(224, Number(data.dwMaxVideoPorts), true);
  // 0xe4: u32
  if (data?.dwCurrVideoPorts !== undefined) view.setUint32(228, Number(data.dwCurrVideoPorts), true);
  // 0xe8: u32
  if (data?.dwSVBCaps2 !== undefined) view.setUint32(232, Number(data.dwSVBCaps2), true);
  // 0xec: u32
  if (data?.dwNLVBCaps !== undefined) view.setUint32(236, Number(data.dwNLVBCaps), true);
  // 0xf0: u32
  if (data?.dwNLVBCaps2 !== undefined) view.setUint32(240, Number(data.dwNLVBCaps2), true);
  // 0xf4: u32
  if (data?.dwNLVBCKeyCaps !== undefined) view.setUint32(244, Number(data.dwNLVBCKeyCaps), true);
  // 0xf8: u32
  if (data?.dwNLVBFXCaps !== undefined) view.setUint32(248, Number(data.dwNLVBFXCaps), true);
  // 0xfc: pad4
  // 0x100: pointer
  if (data?.dwNLVBRops !== undefined) view.setBigUint64(256, data.dwNLVBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwNLVBRops))), true);
  // 0x108: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(264, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  return buf;
}

export class DDCAPS_DX7View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCaps2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwCKeyCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwFXCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFXAlphaCaps(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwPalCaps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwSVCaps(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwAlphaBltConstBitDepths(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwAlphaBltPixelBitDepths(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwAlphaBltSurfaceBitDepths(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwAlphaOverlayConstBitDepths(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwAlphaOverlayPixelBitDepths(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwAlphaOverlaySurfaceBitDepths(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwZBufferBitDepths(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwVidMemTotal(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwVidMemFree(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwMaxVisibleOverlays(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwCurrVisibleOverlays(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwNumFourCCCodes(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwAlignBoundarySrc(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwAlignSizeSrc(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwAlignBoundaryDest(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwAlignSizeDest(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get dwAlignStrideAlign(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get dwRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get ddsOldCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u32
  get dwMinOverlayStretch(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get dwMaxOverlayStretch(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get dwMinLiveVideoStretch(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwMaxLiveVideoStretch(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get dwMinHwCodecStretch(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get dwMaxHwCodecStretch(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get dwReserved1(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get dwReserved2(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get dwReserved3(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get dwSVBCaps(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get dwSVBCKeyCaps(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get dwSVBFXCaps(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: pointer
  get dwSVBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: u32
  get dwVSBCaps(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: u32
  get dwVSBCKeyCaps(): number {
    return this.view.getUint32(180, true);
  }

  // 0xb8: u32
  get dwVSBFXCaps(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  get dwVSBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: u32
  get dwSSBCaps(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get dwSSBCKeyCaps(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: u32
  get dwSSBFXCaps(): number {
    return this.view.getUint32(208, true);
  }

  // 0xd4: pad4

  // 0xd8: pointer
  get dwSSBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: u32
  get dwMaxVideoPorts(): number {
    return this.view.getUint32(224, true);
  }

  // 0xe4: u32
  get dwCurrVideoPorts(): number {
    return this.view.getUint32(228, true);
  }

  // 0xe8: u32
  get dwSVBCaps2(): number {
    return this.view.getUint32(232, true);
  }

  // 0xec: u32
  get dwNLVBCaps(): number {
    return this.view.getUint32(236, true);
  }

  // 0xf0: u32
  get dwNLVBCaps2(): number {
    return this.view.getUint32(240, true);
  }

  // 0xf4: u32
  get dwNLVBCKeyCaps(): number {
    return this.view.getUint32(244, true);
  }

  // 0xf8: u32
  get dwNLVBFXCaps(): number {
    return this.view.getUint32(248, true);
  }

  // 0xfc: pad4

  // 0x100: pointer
  get dwNLVBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(256, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x108: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(264, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCaps2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwCKeyCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwFXCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFXAlphaCaps(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwPalCaps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwSVCaps(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwAlphaBltConstBitDepths(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwAlphaBltPixelBitDepths(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwAlphaBltSurfaceBitDepths(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwAlphaOverlayConstBitDepths(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwAlphaOverlayPixelBitDepths(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwAlphaOverlaySurfaceBitDepths(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwZBufferBitDepths(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwVidMemTotal(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwVidMemFree(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwMaxVisibleOverlays(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwCurrVisibleOverlays(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwNumFourCCCodes(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwAlignBoundarySrc(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwAlignSizeSrc(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwAlignBoundaryDest(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwAlignSizeDest(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set dwAlignStrideAlign(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set dwRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set ddsOldCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: u32
  set dwMinOverlayStretch(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set dwMaxOverlayStretch(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set dwMinLiveVideoStretch(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwMaxLiveVideoStretch(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set dwMinHwCodecStretch(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set dwMaxHwCodecStretch(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set dwReserved1(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set dwReserved2(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set dwReserved3(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set dwSVBCaps(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set dwSVBCKeyCaps(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set dwSVBFXCaps(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: pointer
  set dwSVBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: u32
  set dwVSBCaps(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: u32
  set dwVSBCKeyCaps(value: number) {
    this.view.setUint32(180, value, true);
  }

  // 0xb8: u32
  set dwVSBFXCaps(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  set dwVSBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: u32
  set dwSSBCaps(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set dwSSBCKeyCaps(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: u32
  set dwSSBFXCaps(value: number) {
    this.view.setUint32(208, value, true);
  }

  // 0xd4: pad4

  // 0xd8: pointer
  set dwSSBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: u32
  set dwMaxVideoPorts(value: number) {
    this.view.setUint32(224, value, true);
  }

  // 0xe4: u32
  set dwCurrVideoPorts(value: number) {
    this.view.setUint32(228, value, true);
  }

  // 0xe8: u32
  set dwSVBCaps2(value: number) {
    this.view.setUint32(232, value, true);
  }

  // 0xec: u32
  set dwNLVBCaps(value: number) {
    this.view.setUint32(236, value, true);
  }

  // 0xf0: u32
  set dwNLVBCaps2(value: number) {
    this.view.setUint32(240, value, true);
  }

  // 0xf4: u32
  set dwNLVBCKeyCaps(value: number) {
    this.view.setUint32(244, value, true);
  }

  // 0xf8: u32
  set dwNLVBFXCaps(value: number) {
    this.view.setUint32(248, value, true);
  }

  // 0xfc: pad4

  // 0x100: pointer
  set dwNLVBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(256, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x108: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(264, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT (size: 56)
 */
export interface DDPIXELFORMAT {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwFourCC: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue;
  /** _Anonymous4_e__Union */
  Anonymous4: Uint8Array | Deno.PointerValue;
  /** _Anonymous5_e__Union */
  Anonymous5: Uint8Array | Deno.PointerValue;
}

export const sizeofDDPIXELFORMAT = 56;

export function allocDDPIXELFORMAT(data?: Partial<DDPIXELFORMAT>): Uint8Array {
  const buf = new Uint8Array(sizeofDDPIXELFORMAT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwFourCC !== undefined) view.setUint32(8, Number(data.dwFourCC), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x20: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(32, data.Anonymous3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous3))), true);
  // 0x28: pointer
  if (data?.Anonymous4 !== undefined) view.setBigUint64(40, data.Anonymous4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous4))), true);
  // 0x30: pointer
  if (data?.Anonymous5 !== undefined) view.setBigUint64(48, data.Anonymous5 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous5))), true);
  return buf;
}

export class DDPIXELFORMATView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFourCC(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Anonymous4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Anonymous5(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFourCC(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Anonymous4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Anonymous5(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDOVERLAYFX (size: 72)
 */
export interface DDOVERLAYFX {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwAlphaEdgeBlendBitDepth: number;
  /** u32 */
  dwAlphaEdgeBlend: number;
  /** u32 */
  dwReserved: number;
  /** u32 */
  dwAlphaDestConstBitDepth: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwAlphaSrcConstBitDepth: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  dckDestColorkey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  dckSrcColorkey: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwDDFX: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofDDOVERLAYFX = 72;

export function allocDDOVERLAYFX(data?: Partial<DDOVERLAYFX>): Uint8Array {
  const buf = new Uint8Array(sizeofDDOVERLAYFX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwAlphaEdgeBlendBitDepth !== undefined) view.setUint32(4, Number(data.dwAlphaEdgeBlendBitDepth), true);
  // 0x08: u32
  if (data?.dwAlphaEdgeBlend !== undefined) view.setUint32(8, Number(data.dwAlphaEdgeBlend), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: u32
  if (data?.dwAlphaDestConstBitDepth !== undefined) view.setUint32(16, Number(data.dwAlphaDestConstBitDepth), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x20: u32
  if (data?.dwAlphaSrcConstBitDepth !== undefined) view.setUint32(32, Number(data.dwAlphaSrcConstBitDepth), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(40, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x30: pointer
  if (data?.dckDestColorkey !== undefined) view.setBigUint64(48, data.dckDestColorkey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dckDestColorkey))), true);
  // 0x38: pointer
  if (data?.dckSrcColorkey !== undefined) view.setBigUint64(56, data.dckSrcColorkey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dckSrcColorkey))), true);
  // 0x40: u32
  if (data?.dwDDFX !== undefined) view.setUint32(64, Number(data.dwDDFX), true);
  // 0x44: u32
  if (data?.dwFlags !== undefined) view.setUint32(68, Number(data.dwFlags), true);
  return buf;
}

export class DDOVERLAYFXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwAlphaEdgeBlendBitDepth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwAlphaEdgeBlend(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwAlphaDestConstBitDepth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwAlphaSrcConstBitDepth(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get dckDestColorkey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get dckSrcColorkey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get dwDDFX(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwFlags(): number {
    return this.view.getUint32(68, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwAlphaEdgeBlendBitDepth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwAlphaEdgeBlend(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwAlphaDestConstBitDepth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwAlphaSrcConstBitDepth(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set dckDestColorkey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set dckSrcColorkey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set dwDDFX(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwFlags(value: number) {
    this.view.setUint32(68, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDBLTBATCH (size: 40)
 */
export interface DDBLTBATCH {
  /** ptr */
  lprDest: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.IDirectDrawSurface */
  lpDDSSrc: Uint8Array | Deno.PointerValue;
  /** ptr */
  lprSrc: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpDDBltFx: Deno.PointerValue | Uint8Array;
}

export const sizeofDDBLTBATCH = 40;

export function allocDDBLTBATCH(data?: Partial<DDBLTBATCH>): Uint8Array {
  const buf = new Uint8Array(sizeofDDBLTBATCH);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lprDest !== undefined) view.setBigUint64(0, data.lprDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lprDest))), true);
  // 0x08: pointer
  if (data?.lpDDSSrc !== undefined) view.setBigUint64(8, data.lpDDSSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSSrc))), true);
  // 0x10: pointer
  if (data?.lprSrc !== undefined) view.setBigUint64(16, data.lprSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lprSrc))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpDDBltFx !== undefined) view.setBigUint64(32, data.lpDDBltFx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDBltFx))), true);
  return buf;
}

export class DDBLTBATCHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lprDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lprSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lpDDBltFx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lprDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lprSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lpDDBltFx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDGAMMARAMP (size: 24)
 */
export interface DDGAMMARAMP {
  /** array */
  red: Deno.PointerValue;
  /** array */
  green: Deno.PointerValue;
  /** array */
  blue: Deno.PointerValue;
}

export const sizeofDDGAMMARAMP = 24;

export function allocDDGAMMARAMP(data?: Partial<DDGAMMARAMP>): Uint8Array {
  const buf = new Uint8Array(sizeofDDGAMMARAMP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.red !== undefined) view.setBigUint64(0, data.red === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.red))), true);
  // 0x08: pointer
  if (data?.green !== undefined) view.setBigUint64(8, data.green === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.green))), true);
  // 0x10: pointer
  if (data?.blue !== undefined) view.setBigUint64(16, data.blue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.blue))), true);
  return buf;
}

export class DDGAMMARAMPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get red(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get green(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get blue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set red(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set green(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set blue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class _u_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwValue(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pwszName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwValue(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pwszName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue;
  /** i64 */
  QuadPart: bigint | number;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

export class LARGE_INTEGERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i64
  get QuadPart(): bigint | number {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i64
  set QuadPart(value: bigint | number) {
    this.view.setBigInt64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDDEVICEIDENTIFIER (size: 48)
 */
export interface DDDEVICEIDENTIFIER {
  /** array */
  szDriver: Deno.PointerValue;
  /** array */
  szDescription: Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liDriverVersion: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwVendorId: number;
  /** u32 */
  dwDeviceId: number;
  /** u32 */
  dwSubSysId: number;
  /** u32 */
  dwRevision: number;
  /** System.Guid */
  guidDeviceIdentifier: Uint8Array | Deno.PointerValue;
}

export const sizeofDDDEVICEIDENTIFIER = 48;

export function allocDDDEVICEIDENTIFIER(data?: Partial<DDDEVICEIDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofDDDEVICEIDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szDriver !== undefined) view.setBigUint64(0, data.szDriver === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDriver))), true);
  // 0x08: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(8, data.szDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDescription))), true);
  // 0x10: pointer
  if (data?.liDriverVersion !== undefined) view.setBigUint64(16, data.liDriverVersion === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.liDriverVersion))), true);
  // 0x18: u32
  if (data?.dwVendorId !== undefined) view.setUint32(24, Number(data.dwVendorId), true);
  // 0x1c: u32
  if (data?.dwDeviceId !== undefined) view.setUint32(28, Number(data.dwDeviceId), true);
  // 0x20: u32
  if (data?.dwSubSysId !== undefined) view.setUint32(32, Number(data.dwSubSysId), true);
  // 0x24: u32
  if (data?.dwRevision !== undefined) view.setUint32(36, Number(data.dwRevision), true);
  // 0x28: pointer
  if (data?.guidDeviceIdentifier !== undefined) view.setBigUint64(40, data.guidDeviceIdentifier === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidDeviceIdentifier))), true);
  return buf;
}

export class DDDEVICEIDENTIFIERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szDriver(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get szDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get liDriverVersion(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwVendorId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwDeviceId(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwSubSysId(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwRevision(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get guidDeviceIdentifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set szDriver(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set szDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set liDriverVersion(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwVendorId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwDeviceId(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwSubSysId(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwRevision(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set guidDeviceIdentifier(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDDEVICEIDENTIFIER2 (size: 56)
 */
export interface DDDEVICEIDENTIFIER2 {
  /** array */
  szDriver: Deno.PointerValue;
  /** array */
  szDescription: Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liDriverVersion: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwVendorId: number;
  /** u32 */
  dwDeviceId: number;
  /** u32 */
  dwSubSysId: number;
  /** u32 */
  dwRevision: number;
  /** System.Guid */
  guidDeviceIdentifier: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwWHQLLevel: number;
}

export const sizeofDDDEVICEIDENTIFIER2 = 56;

export function allocDDDEVICEIDENTIFIER2(data?: Partial<DDDEVICEIDENTIFIER2>): Uint8Array {
  const buf = new Uint8Array(sizeofDDDEVICEIDENTIFIER2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szDriver !== undefined) view.setBigUint64(0, data.szDriver === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDriver))), true);
  // 0x08: pointer
  if (data?.szDescription !== undefined) view.setBigUint64(8, data.szDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szDescription))), true);
  // 0x10: pointer
  if (data?.liDriverVersion !== undefined) view.setBigUint64(16, data.liDriverVersion === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.liDriverVersion))), true);
  // 0x18: u32
  if (data?.dwVendorId !== undefined) view.setUint32(24, Number(data.dwVendorId), true);
  // 0x1c: u32
  if (data?.dwDeviceId !== undefined) view.setUint32(28, Number(data.dwDeviceId), true);
  // 0x20: u32
  if (data?.dwSubSysId !== undefined) view.setUint32(32, Number(data.dwSubSysId), true);
  // 0x24: u32
  if (data?.dwRevision !== undefined) view.setUint32(36, Number(data.dwRevision), true);
  // 0x28: pointer
  if (data?.guidDeviceIdentifier !== undefined) view.setBigUint64(40, data.guidDeviceIdentifier === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidDeviceIdentifier))), true);
  // 0x30: u32
  if (data?.dwWHQLLevel !== undefined) view.setUint32(48, Number(data.dwWHQLLevel), true);
  // 0x34: pad4
  return buf;
}

export class DDDEVICEIDENTIFIER2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szDriver(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get szDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get liDriverVersion(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwVendorId(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwDeviceId(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwSubSysId(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwRevision(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get guidDeviceIdentifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwWHQLLevel(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x00: pointer
  set szDriver(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set szDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set liDriverVersion(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwVendorId(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwDeviceId(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwSubSysId(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwRevision(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set guidDeviceIdentifier(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwWHQLLevel(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDSURFACEDESC (size: 104)
 */
export interface DDSURFACEDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwWidth: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwBackBufferCount: number;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwAlphaBitDepth: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckCKDestOverlay: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckCKDestBlt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckCKSrcOverlay: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckCKSrcBlt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddpfPixelFormat: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsCaps: Uint8Array | Deno.PointerValue;
}

export const sizeofDDSURFACEDESC = 104;

export function allocDDSURFACEDESC(data?: Partial<DDSURFACEDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDDSURFACEDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwHeight !== undefined) view.setUint32(8, Number(data.dwHeight), true);
  // 0x0c: u32
  if (data?.dwWidth !== undefined) view.setUint32(12, Number(data.dwWidth), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: u32
  if (data?.dwBackBufferCount !== undefined) view.setUint32(24, Number(data.dwBackBufferCount), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(32, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x28: u32
  if (data?.dwAlphaBitDepth !== undefined) view.setUint32(40, Number(data.dwAlphaBitDepth), true);
  // 0x2c: u32
  if (data?.dwReserved !== undefined) view.setUint32(44, Number(data.dwReserved), true);
  // 0x30: pointer
  if (data?.lpSurface !== undefined) view.setBigUint64(48, data.lpSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurface))), true);
  // 0x38: pointer
  if (data?.ddckCKDestOverlay !== undefined) view.setBigUint64(56, data.ddckCKDestOverlay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckCKDestOverlay))), true);
  // 0x40: pointer
  if (data?.ddckCKDestBlt !== undefined) view.setBigUint64(64, data.ddckCKDestBlt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckCKDestBlt))), true);
  // 0x48: pointer
  if (data?.ddckCKSrcOverlay !== undefined) view.setBigUint64(72, data.ddckCKSrcOverlay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckCKSrcOverlay))), true);
  // 0x50: pointer
  if (data?.ddckCKSrcBlt !== undefined) view.setBigUint64(80, data.ddckCKSrcBlt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckCKSrcBlt))), true);
  // 0x58: pointer
  if (data?.ddpfPixelFormat !== undefined) view.setBigUint64(88, data.ddpfPixelFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddpfPixelFormat))), true);
  // 0x60: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(96, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  return buf;
}

export class DDSURFACEDESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwHeight(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwWidth(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwBackBufferCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwAlphaBitDepth(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwReserved(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get lpSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ddckCKDestOverlay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get ddckCKDestBlt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get ddckCKSrcOverlay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get ddckCKSrcBlt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ddpfPixelFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwHeight(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwWidth(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwBackBufferCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwAlphaBitDepth(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwReserved(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set lpSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ddckCKDestOverlay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set ddckCKDestBlt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set ddckCKSrcOverlay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set ddckCKSrcBlt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set ddpfPixelFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDSURFACEDESC2 (size: 112)
 */
export interface DDSURFACEDESC2 {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwWidth: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwAlphaBitDepth: number;
  /** u32 */
  dwReserved: number;
  /** ptr */
  lpSurface: Deno.PointerValue | Uint8Array;
  /** _Anonymous4_e__Union */
  Anonymous4: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckCKDestBlt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckCKSrcOverlay: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckCKSrcBlt: Uint8Array | Deno.PointerValue;
  /** _Anonymous5_e__Union */
  Anonymous5: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS2 */
  ddsCaps: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwTextureStage: number;
}

export const sizeofDDSURFACEDESC2 = 112;

export function allocDDSURFACEDESC2(data?: Partial<DDSURFACEDESC2>): Uint8Array {
  const buf = new Uint8Array(sizeofDDSURFACEDESC2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwHeight !== undefined) view.setUint32(8, Number(data.dwHeight), true);
  // 0x0c: u32
  if (data?.dwWidth !== undefined) view.setUint32(12, Number(data.dwWidth), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(24, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x20: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(32, data.Anonymous3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous3))), true);
  // 0x28: u32
  if (data?.dwAlphaBitDepth !== undefined) view.setUint32(40, Number(data.dwAlphaBitDepth), true);
  // 0x2c: u32
  if (data?.dwReserved !== undefined) view.setUint32(44, Number(data.dwReserved), true);
  // 0x30: pointer
  if (data?.lpSurface !== undefined) view.setBigUint64(48, data.lpSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurface))), true);
  // 0x38: pointer
  if (data?.Anonymous4 !== undefined) view.setBigUint64(56, data.Anonymous4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous4))), true);
  // 0x40: pointer
  if (data?.ddckCKDestBlt !== undefined) view.setBigUint64(64, data.ddckCKDestBlt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckCKDestBlt))), true);
  // 0x48: pointer
  if (data?.ddckCKSrcOverlay !== undefined) view.setBigUint64(72, data.ddckCKSrcOverlay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckCKSrcOverlay))), true);
  // 0x50: pointer
  if (data?.ddckCKSrcBlt !== undefined) view.setBigUint64(80, data.ddckCKSrcBlt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckCKSrcBlt))), true);
  // 0x58: pointer
  if (data?.Anonymous5 !== undefined) view.setBigUint64(88, data.Anonymous5 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous5))), true);
  // 0x60: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(96, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  // 0x68: u32
  if (data?.dwTextureStage !== undefined) view.setUint32(104, Number(data.dwTextureStage), true);
  // 0x6c: pad4
  return buf;
}

export class DDSURFACEDESC2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwHeight(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwWidth(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwAlphaBitDepth(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwReserved(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get lpSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Anonymous4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get ddckCKDestBlt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get ddckCKSrcOverlay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get ddckCKSrcBlt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get Anonymous5(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get dwTextureStage(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwHeight(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwWidth(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwAlphaBitDepth(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwReserved(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set lpSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Anonymous4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set ddckCKDestBlt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set ddckCKSrcOverlay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set ddckCKSrcBlt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set Anonymous5(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set dwTextureStage(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDOPTSURFACEDESC (size: 40)
 */
export interface DDOPTSURFACEDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS2 */
  ddSCaps: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDOSCAPS */
  ddOSCaps: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwCompressionRatio: number;
}

export const sizeofDDOPTSURFACEDESC = 40;

export function allocDDOPTSURFACEDESC(data?: Partial<DDOPTSURFACEDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDDOPTSURFACEDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.ddSCaps !== undefined) view.setBigUint64(8, data.ddSCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddSCaps))), true);
  // 0x10: pointer
  if (data?.ddOSCaps !== undefined) view.setBigUint64(16, data.ddOSCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddOSCaps))), true);
  // 0x18: pointer
  if (data?.guid !== undefined) view.setBigUint64(24, data.guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guid))), true);
  // 0x20: u32
  if (data?.dwCompressionRatio !== undefined) view.setUint32(32, Number(data.dwCompressionRatio), true);
  // 0x24: pad4
  return buf;
}

export class DDOPTSURFACEDESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ddSCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddOSCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwCompressionRatio(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ddSCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddOSCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwCompressionRatio(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDCOLORCONTROL (size: 40)
 */
export interface DDCOLORCONTROL {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** i32 */
  lBrightness: number;
  /** i32 */
  lContrast: number;
  /** i32 */
  lHue: number;
  /** i32 */
  lSaturation: number;
  /** i32 */
  lSharpness: number;
  /** i32 */
  lGamma: number;
  /** i32 */
  lColorEnable: number;
  /** u32 */
  dwReserved1: number;
}

export const sizeofDDCOLORCONTROL = 40;

export function allocDDCOLORCONTROL(data?: Partial<DDCOLORCONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofDDCOLORCONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: i32
  if (data?.lBrightness !== undefined) view.setInt32(8, Number(data.lBrightness), true);
  // 0x0c: i32
  if (data?.lContrast !== undefined) view.setInt32(12, Number(data.lContrast), true);
  // 0x10: i32
  if (data?.lHue !== undefined) view.setInt32(16, Number(data.lHue), true);
  // 0x14: i32
  if (data?.lSaturation !== undefined) view.setInt32(20, Number(data.lSaturation), true);
  // 0x18: i32
  if (data?.lSharpness !== undefined) view.setInt32(24, Number(data.lSharpness), true);
  // 0x1c: i32
  if (data?.lGamma !== undefined) view.setInt32(28, Number(data.lGamma), true);
  // 0x20: i32
  if (data?.lColorEnable !== undefined) view.setInt32(32, Number(data.lColorEnable), true);
  // 0x24: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(36, Number(data.dwReserved1), true);
  return buf;
}

export class DDCOLORCONTROLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get lBrightness(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get lContrast(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get lHue(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get lSaturation(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get lSharpness(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get lGamma(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get lColorEnable(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get dwReserved1(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set lBrightness(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set lContrast(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set lHue(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set lSaturation(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set lSharpness(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set lGamma(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set lColorEnable(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set dwReserved1(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTCONNECT (size: 32)
 */
export interface DDVIDEOPORTCONNECT {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwPortWidth: number;
  /** System.Guid */
  guidTypeID: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** usize */
  dwReserved1: bigint | number;
}

export const sizeofDDVIDEOPORTCONNECT = 32;

export function allocDDVIDEOPORTCONNECT(data?: Partial<DDVIDEOPORTCONNECT>): Uint8Array {
  const buf = new Uint8Array(sizeofDDVIDEOPORTCONNECT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwPortWidth !== undefined) view.setUint32(4, Number(data.dwPortWidth), true);
  // 0x08: pointer
  if (data?.guidTypeID !== undefined) view.setBigUint64(8, data.guidTypeID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidTypeID))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(24, BigInt(data.dwReserved1), true);
  return buf;
}

export class DDVIDEOPORTCONNECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPortWidth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get guidTypeID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPortWidth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set guidTypeID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTCAPS (size: 72)
 */
export interface DDVIDEOPORTCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwMaxWidth: number;
  /** u32 */
  dwMaxVBIWidth: number;
  /** u32 */
  dwMaxHeight: number;
  /** u32 */
  dwVideoPortID: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwFX: number;
  /** u32 */
  dwNumAutoFlipSurfaces: number;
  /** u32 */
  dwAlignVideoPortBoundary: number;
  /** u32 */
  dwAlignVideoPortPrescaleWidth: number;
  /** u32 */
  dwAlignVideoPortCropBoundary: number;
  /** u32 */
  dwAlignVideoPortCropWidth: number;
  /** u32 */
  dwPreshrinkXStep: number;
  /** u32 */
  dwPreshrinkYStep: number;
  /** u32 */
  dwNumVBIAutoFlipSurfaces: number;
  /** u32 */
  dwNumPreferredAutoflip: number;
  /** u16 */
  wNumFilterTapsX: number;
  /** u16 */
  wNumFilterTapsY: number;
}

export const sizeofDDVIDEOPORTCAPS = 72;

export function allocDDVIDEOPORTCAPS(data?: Partial<DDVIDEOPORTCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDVIDEOPORTCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwMaxWidth !== undefined) view.setUint32(8, Number(data.dwMaxWidth), true);
  // 0x0c: u32
  if (data?.dwMaxVBIWidth !== undefined) view.setUint32(12, Number(data.dwMaxVBIWidth), true);
  // 0x10: u32
  if (data?.dwMaxHeight !== undefined) view.setUint32(16, Number(data.dwMaxHeight), true);
  // 0x14: u32
  if (data?.dwVideoPortID !== undefined) view.setUint32(20, Number(data.dwVideoPortID), true);
  // 0x18: u32
  if (data?.dwCaps !== undefined) view.setUint32(24, Number(data.dwCaps), true);
  // 0x1c: u32
  if (data?.dwFX !== undefined) view.setUint32(28, Number(data.dwFX), true);
  // 0x20: u32
  if (data?.dwNumAutoFlipSurfaces !== undefined) view.setUint32(32, Number(data.dwNumAutoFlipSurfaces), true);
  // 0x24: u32
  if (data?.dwAlignVideoPortBoundary !== undefined) view.setUint32(36, Number(data.dwAlignVideoPortBoundary), true);
  // 0x28: u32
  if (data?.dwAlignVideoPortPrescaleWidth !== undefined) view.setUint32(40, Number(data.dwAlignVideoPortPrescaleWidth), true);
  // 0x2c: u32
  if (data?.dwAlignVideoPortCropBoundary !== undefined) view.setUint32(44, Number(data.dwAlignVideoPortCropBoundary), true);
  // 0x30: u32
  if (data?.dwAlignVideoPortCropWidth !== undefined) view.setUint32(48, Number(data.dwAlignVideoPortCropWidth), true);
  // 0x34: u32
  if (data?.dwPreshrinkXStep !== undefined) view.setUint32(52, Number(data.dwPreshrinkXStep), true);
  // 0x38: u32
  if (data?.dwPreshrinkYStep !== undefined) view.setUint32(56, Number(data.dwPreshrinkYStep), true);
  // 0x3c: u32
  if (data?.dwNumVBIAutoFlipSurfaces !== undefined) view.setUint32(60, Number(data.dwNumVBIAutoFlipSurfaces), true);
  // 0x40: u32
  if (data?.dwNumPreferredAutoflip !== undefined) view.setUint32(64, Number(data.dwNumPreferredAutoflip), true);
  // 0x44: u16
  if (data?.wNumFilterTapsX !== undefined) view.setUint16(68, Number(data.wNumFilterTapsX), true);
  // 0x46: u16
  if (data?.wNumFilterTapsY !== undefined) view.setUint16(70, Number(data.wNumFilterTapsY), true);
  return buf;
}

export class DDVIDEOPORTCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwMaxWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwMaxVBIWidth(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwMaxHeight(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwVideoPortID(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwCaps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwFX(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwNumAutoFlipSurfaces(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwAlignVideoPortBoundary(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwAlignVideoPortPrescaleWidth(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwAlignVideoPortCropBoundary(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwAlignVideoPortCropWidth(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwPreshrinkXStep(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwPreshrinkYStep(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwNumVBIAutoFlipSurfaces(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwNumPreferredAutoflip(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u16
  get wNumFilterTapsX(): number {
    return this.view.getUint16(68, true);
  }

  // 0x46: u16
  get wNumFilterTapsY(): number {
    return this.view.getUint16(70, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwMaxWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwMaxVBIWidth(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwMaxHeight(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwVideoPortID(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwCaps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwFX(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwNumAutoFlipSurfaces(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwAlignVideoPortBoundary(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwAlignVideoPortPrescaleWidth(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwAlignVideoPortCropBoundary(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwAlignVideoPortCropWidth(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwPreshrinkXStep(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwPreshrinkYStep(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwNumVBIAutoFlipSurfaces(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwNumPreferredAutoflip(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u16
  set wNumFilterTapsX(value: number) {
    this.view.setUint16(68, value, true);
  }

  // 0x46: u16
  set wNumFilterTapsY(value: number) {
    this.view.setUint16(70, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTDESC (size: 56)
 */
export interface DDVIDEOPORTDESC {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFieldWidth: number;
  /** u32 */
  dwVBIWidth: number;
  /** u32 */
  dwFieldHeight: number;
  /** u32 */
  dwMicrosecondsPerField: number;
  /** u32 */
  dwMaxPixelsPerSecond: number;
  /** u32 */
  dwVideoPortID: number;
  /** u32 */
  dwReserved1: number;
  /** Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTCONNECT */
  VideoPortType: Uint8Array | Deno.PointerValue;
  /** usize */
  dwReserved2: bigint | number;
  /** usize */
  dwReserved3: bigint | number;
}

export const sizeofDDVIDEOPORTDESC = 56;

export function allocDDVIDEOPORTDESC(data?: Partial<DDVIDEOPORTDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDDVIDEOPORTDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFieldWidth !== undefined) view.setUint32(4, Number(data.dwFieldWidth), true);
  // 0x08: u32
  if (data?.dwVBIWidth !== undefined) view.setUint32(8, Number(data.dwVBIWidth), true);
  // 0x0c: u32
  if (data?.dwFieldHeight !== undefined) view.setUint32(12, Number(data.dwFieldHeight), true);
  // 0x10: u32
  if (data?.dwMicrosecondsPerField !== undefined) view.setUint32(16, Number(data.dwMicrosecondsPerField), true);
  // 0x14: u32
  if (data?.dwMaxPixelsPerSecond !== undefined) view.setUint32(20, Number(data.dwMaxPixelsPerSecond), true);
  // 0x18: u32
  if (data?.dwVideoPortID !== undefined) view.setUint32(24, Number(data.dwVideoPortID), true);
  // 0x1c: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(28, Number(data.dwReserved1), true);
  // 0x20: pointer
  if (data?.VideoPortType !== undefined) view.setBigUint64(32, data.VideoPortType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VideoPortType))), true);
  // 0x28: usize
  if (data?.dwReserved2 !== undefined) view.setBigUint64(40, BigInt(data.dwReserved2), true);
  // 0x30: usize
  if (data?.dwReserved3 !== undefined) view.setBigUint64(48, BigInt(data.dwReserved3), true);
  return buf;
}

export class DDVIDEOPORTDESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFieldWidth(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwVBIWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFieldHeight(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwMicrosecondsPerField(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwMaxPixelsPerSecond(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwVideoPortID(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwReserved1(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get VideoPortType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: usize
  get dwReserved2(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: usize
  get dwReserved3(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFieldWidth(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwVBIWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFieldHeight(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwMicrosecondsPerField(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwMaxPixelsPerSecond(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwVideoPortID(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwReserved1(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set VideoPortType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: usize
  set dwReserved2(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: usize
  set dwReserved3(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTINFO (size: 80)
 */
export interface DDVIDEOPORTINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwOriginX: number;
  /** u32 */
  dwOriginY: number;
  /** u32 */
  dwVPFlags: number;
  /** Windows.Win32.Foundation.RECT */
  rCrop: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwPrescaleWidth: number;
  /** u32 */
  dwPrescaleHeight: number;
  /** ptr */
  lpddpfInputFormat: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpddpfVBIInputFormat: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpddpfVBIOutputFormat: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwVBIHeight: number;
  /** usize */
  dwReserved1: bigint | number;
  /** usize */
  dwReserved2: bigint | number;
}

export const sizeofDDVIDEOPORTINFO = 80;

export function allocDDVIDEOPORTINFO(data?: Partial<DDVIDEOPORTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDVIDEOPORTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwOriginX !== undefined) view.setUint32(4, Number(data.dwOriginX), true);
  // 0x08: u32
  if (data?.dwOriginY !== undefined) view.setUint32(8, Number(data.dwOriginY), true);
  // 0x0c: u32
  if (data?.dwVPFlags !== undefined) view.setUint32(12, Number(data.dwVPFlags), true);
  // 0x10: pointer
  if (data?.rCrop !== undefined) view.setBigUint64(16, data.rCrop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rCrop))), true);
  // 0x18: u32
  if (data?.dwPrescaleWidth !== undefined) view.setUint32(24, Number(data.dwPrescaleWidth), true);
  // 0x1c: u32
  if (data?.dwPrescaleHeight !== undefined) view.setUint32(28, Number(data.dwPrescaleHeight), true);
  // 0x20: pointer
  if (data?.lpddpfInputFormat !== undefined) view.setBigUint64(32, data.lpddpfInputFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddpfInputFormat))), true);
  // 0x28: pointer
  if (data?.lpddpfVBIInputFormat !== undefined) view.setBigUint64(40, data.lpddpfVBIInputFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddpfVBIInputFormat))), true);
  // 0x30: pointer
  if (data?.lpddpfVBIOutputFormat !== undefined) view.setBigUint64(48, data.lpddpfVBIOutputFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddpfVBIOutputFormat))), true);
  // 0x38: u32
  if (data?.dwVBIHeight !== undefined) view.setUint32(56, Number(data.dwVBIHeight), true);
  // 0x3c: pad4
  // 0x40: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(64, BigInt(data.dwReserved1), true);
  // 0x48: usize
  if (data?.dwReserved2 !== undefined) view.setBigUint64(72, BigInt(data.dwReserved2), true);
  return buf;
}

export class DDVIDEOPORTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwOriginX(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwOriginY(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwVPFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get rCrop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwPrescaleWidth(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwPrescaleHeight(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get lpddpfInputFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get lpddpfVBIInputFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lpddpfVBIOutputFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwVBIHeight(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: usize
  get dwReserved2(): bigint | number {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwOriginX(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwOriginY(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwVPFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set rCrop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwPrescaleWidth(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwPrescaleHeight(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set lpddpfInputFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set lpddpfVBIInputFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lpddpfVBIOutputFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwVBIHeight(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: usize
  set dwReserved2(value: bigint | number) {
    this.view.setBigUint64(72, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTBANDWIDTH (size: 40)
 */
export interface DDVIDEOPORTBANDWIDTH {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwOverlay: number;
  /** u32 */
  dwColorkey: number;
  /** u32 */
  dwYInterpolate: number;
  /** u32 */
  dwYInterpAndColorkey: number;
  /** usize */
  dwReserved1: bigint | number;
  /** usize */
  dwReserved2: bigint | number;
}

export const sizeofDDVIDEOPORTBANDWIDTH = 40;

export function allocDDVIDEOPORTBANDWIDTH(data?: Partial<DDVIDEOPORTBANDWIDTH>): Uint8Array {
  const buf = new Uint8Array(sizeofDDVIDEOPORTBANDWIDTH);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCaps !== undefined) view.setUint32(4, Number(data.dwCaps), true);
  // 0x08: u32
  if (data?.dwOverlay !== undefined) view.setUint32(8, Number(data.dwOverlay), true);
  // 0x0c: u32
  if (data?.dwColorkey !== undefined) view.setUint32(12, Number(data.dwColorkey), true);
  // 0x10: u32
  if (data?.dwYInterpolate !== undefined) view.setUint32(16, Number(data.dwYInterpolate), true);
  // 0x14: u32
  if (data?.dwYInterpAndColorkey !== undefined) view.setUint32(20, Number(data.dwYInterpAndColorkey), true);
  // 0x18: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(24, BigInt(data.dwReserved1), true);
  // 0x20: usize
  if (data?.dwReserved2 !== undefined) view.setBigUint64(32, BigInt(data.dwReserved2), true);
  return buf;
}

export class DDVIDEOPORTBANDWIDTHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwOverlay(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwColorkey(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwYInterpolate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwYInterpAndColorkey(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: usize
  get dwReserved2(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwOverlay(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwColorkey(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwYInterpolate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwYInterpAndColorkey(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: usize
  set dwReserved2(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTSTATUS (size: 40)
 */
export interface DDVIDEOPORTSTATUS {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.BOOL */
  bInUse: boolean;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwReserved1: number;
  /** Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTCONNECT */
  VideoPortType: Uint8Array | Deno.PointerValue;
  /** usize */
  dwReserved2: bigint | number;
  /** usize */
  dwReserved3: bigint | number;
}

export const sizeofDDVIDEOPORTSTATUS = 40;

export function allocDDVIDEOPORTSTATUS(data?: Partial<DDVIDEOPORTSTATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDVIDEOPORTSTATUS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: i32
  if (data?.bInUse !== undefined) view.setInt32(4, Number(data.bInUse), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(12, Number(data.dwReserved1), true);
  // 0x10: pointer
  if (data?.VideoPortType !== undefined) view.setBigUint64(16, data.VideoPortType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.VideoPortType))), true);
  // 0x18: usize
  if (data?.dwReserved2 !== undefined) view.setBigUint64(24, BigInt(data.dwReserved2), true);
  // 0x20: usize
  if (data?.dwReserved3 !== undefined) view.setBigUint64(32, BigInt(data.dwReserved3), true);
  return buf;
}

export class DDVIDEOPORTSTATUSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get bInUse(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved1(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get VideoPortType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get dwReserved2(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: usize
  get dwReserved3(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set bInUse(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved1(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set VideoPortType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set dwReserved2(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: usize
  set dwReserved3(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTNOTIFY (size: 24)
 */
export interface DDVIDEOPORTNOTIFY {
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  ApproximateTimeStamp: Uint8Array | Deno.PointerValue;
  /** i32 */
  lField: number;
  /** u32 */
  dwSurfaceIndex: number;
  /** i32 */
  lDone: number;
}

export const sizeofDDVIDEOPORTNOTIFY = 24;

export function allocDDVIDEOPORTNOTIFY(data?: Partial<DDVIDEOPORTNOTIFY>): Uint8Array {
  const buf = new Uint8Array(sizeofDDVIDEOPORTNOTIFY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ApproximateTimeStamp !== undefined) view.setBigUint64(0, data.ApproximateTimeStamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ApproximateTimeStamp))), true);
  // 0x08: i32
  if (data?.lField !== undefined) view.setInt32(8, Number(data.lField), true);
  // 0x0c: u32
  if (data?.dwSurfaceIndex !== undefined) view.setUint32(12, Number(data.dwSurfaceIndex), true);
  // 0x10: i32
  if (data?.lDone !== undefined) view.setInt32(16, Number(data.lDone), true);
  // 0x14: pad4
  return buf;
}

export class DDVIDEOPORTNOTIFYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ApproximateTimeStamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get lField(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwSurfaceIndex(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: i32
  get lDone(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set ApproximateTimeStamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set lField(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwSurfaceIndex(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: i32
  set lDone(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDKERNELCAPS (size: 16)
 */
export interface DDKERNELCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwIRQCaps: number;
}

export const sizeofDDKERNELCAPS = 16;

export function allocDDKERNELCAPS(data?: Partial<DDKERNELCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDKERNELCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCaps !== undefined) view.setUint32(4, Number(data.dwCaps), true);
  // 0x08: u32
  if (data?.dwIRQCaps !== undefined) view.setUint32(8, Number(data.dwIRQCaps), true);
  // 0x0c: pad4
  return buf;
}

export class DDKERNELCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwIRQCaps(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwIRQCaps(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.SURFACEALIGNMENT (size: 8)
 */
export interface SURFACEALIGNMENT {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofSURFACEALIGNMENT = 8;

export function allocSURFACEALIGNMENT(data?: Partial<SURFACEALIGNMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofSURFACEALIGNMENT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class SURFACEALIGNMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.HEAPALIGNMENT (size: 80)
 */
export interface HEAPALIGNMENT {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsCaps: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.Graphics.DirectDraw.SURFACEALIGNMENT */
  ExecuteBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.SURFACEALIGNMENT */
  Overlay: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.SURFACEALIGNMENT */
  Texture: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.SURFACEALIGNMENT */
  ZBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.SURFACEALIGNMENT */
  AlphaBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.SURFACEALIGNMENT */
  Offscreen: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.SURFACEALIGNMENT */
  FlipTarget: Uint8Array | Deno.PointerValue;
}

export const sizeofHEAPALIGNMENT = 80;

export function allocHEAPALIGNMENT(data?: Partial<HEAPALIGNMENT>): Uint8Array {
  const buf = new Uint8Array(sizeofHEAPALIGNMENT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(8, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  // 0x10: u32
  if (data?.dwReserved !== undefined) view.setUint32(16, Number(data.dwReserved), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ExecuteBuffer !== undefined) view.setBigUint64(24, data.ExecuteBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExecuteBuffer))), true);
  // 0x20: pointer
  if (data?.Overlay !== undefined) view.setBigUint64(32, data.Overlay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Overlay))), true);
  // 0x28: pointer
  if (data?.Texture !== undefined) view.setBigUint64(40, data.Texture === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Texture))), true);
  // 0x30: pointer
  if (data?.ZBuffer !== undefined) view.setBigUint64(48, data.ZBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ZBuffer))), true);
  // 0x38: pointer
  if (data?.AlphaBuffer !== undefined) view.setBigUint64(56, data.AlphaBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AlphaBuffer))), true);
  // 0x40: pointer
  if (data?.Offscreen !== undefined) view.setBigUint64(64, data.Offscreen === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Offscreen))), true);
  // 0x48: pointer
  if (data?.FlipTarget !== undefined) view.setBigUint64(72, data.FlipTarget === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlipTarget))), true);
  return buf;
}

export class HEAPALIGNMENTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwReserved(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ExecuteBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Overlay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Texture(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ZBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get AlphaBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get Offscreen(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get FlipTarget(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwReserved(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ExecuteBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Overlay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Texture(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ZBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set AlphaBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set Offscreen(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set FlipTarget(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HRESULT = number;

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETHEAPALIGNMENTDATA (size: 40)
 */
export interface DD_GETHEAPALIGNMENTDATA {
  /** usize */
  dwInstance: bigint | number;
  /** u32 */
  dwHeap: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  GetHeapAlignment: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.HEAPALIGNMENT */
  Alignment: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_GETHEAPALIGNMENTDATA = 40;

export function allocDD_GETHEAPALIGNMENTDATA(data?: Partial<DD_GETHEAPALIGNMENTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETHEAPALIGNMENTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwInstance !== undefined) view.setBigUint64(0, BigInt(data.dwInstance), true);
  // 0x08: u32
  if (data?.dwHeap !== undefined) view.setUint32(8, Number(data.dwHeap), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.GetHeapAlignment !== undefined) view.setBigUint64(24, data.GetHeapAlignment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetHeapAlignment))), true);
  // 0x20: pointer
  if (data?.Alignment !== undefined) view.setBigUint64(32, data.Alignment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Alignment))), true);
  return buf;
}

export class DD_GETHEAPALIGNMENTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get dwInstance(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get dwHeap(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetHeapAlignment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Alignment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set dwInstance(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set dwHeap(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetHeapAlignment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Alignment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.VMEML (size: 24)
 */
export interface VMEML {
  /** ptr */
  next: Deno.PointerValue | Uint8Array;
  /** usize */
  ptr: bigint | number;
  /** u32 */
  size: number;
  /** Windows.Win32.Foundation.BOOL */
  bDiscardable: boolean;
}

export const sizeofVMEML = 24;

export function allocVMEML(data?: Partial<VMEML>): Uint8Array {
  const buf = new Uint8Array(sizeofVMEML);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.next !== undefined) view.setBigUint64(0, data.next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.next))), true);
  // 0x08: usize
  if (data?.ptr !== undefined) view.setBigUint64(8, BigInt(data.ptr), true);
  // 0x10: u32
  if (data?.size !== undefined) view.setUint32(16, Number(data.size), true);
  // 0x14: i32
  if (data?.bDiscardable !== undefined) view.setInt32(20, Number(data.bDiscardable), true);
  return buf;
}

export class VMEMLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get ptr(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get size(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get bDiscardable(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: pointer
  set next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set ptr(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set size(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set bDiscardable(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.VMEMR (size: 96)
 */
export interface VMEMR {
  /** ptr */
  next: Deno.PointerValue | Uint8Array;
  /** ptr */
  prev: Deno.PointerValue | Uint8Array;
  /** ptr */
  pUp: Deno.PointerValue | Uint8Array;
  /** ptr */
  pDown: Deno.PointerValue | Uint8Array;
  /** ptr */
  pLeft: Deno.PointerValue | Uint8Array;
  /** ptr */
  pRight: Deno.PointerValue | Uint8Array;
  /** usize */
  ptr: bigint | number;
  /** u32 */
  size: number;
  /** u32 */
  x: number;
  /** u32 */
  y: number;
  /** u32 */
  cx: number;
  /** u32 */
  cy: number;
  /** u32 */
  flags: number;
  /** usize */
  pBits: bigint | number;
  /** Windows.Win32.Foundation.BOOL */
  bDiscardable: boolean;
}

export const sizeofVMEMR = 96;

export function allocVMEMR(data?: Partial<VMEMR>): Uint8Array {
  const buf = new Uint8Array(sizeofVMEMR);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.next !== undefined) view.setBigUint64(0, data.next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.next))), true);
  // 0x08: pointer
  if (data?.prev !== undefined) view.setBigUint64(8, data.prev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prev))), true);
  // 0x10: pointer
  if (data?.pUp !== undefined) view.setBigUint64(16, data.pUp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pUp))), true);
  // 0x18: pointer
  if (data?.pDown !== undefined) view.setBigUint64(24, data.pDown === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDown))), true);
  // 0x20: pointer
  if (data?.pLeft !== undefined) view.setBigUint64(32, data.pLeft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pLeft))), true);
  // 0x28: pointer
  if (data?.pRight !== undefined) view.setBigUint64(40, data.pRight === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pRight))), true);
  // 0x30: usize
  if (data?.ptr !== undefined) view.setBigUint64(48, BigInt(data.ptr), true);
  // 0x38: u32
  if (data?.size !== undefined) view.setUint32(56, Number(data.size), true);
  // 0x3c: u32
  if (data?.x !== undefined) view.setUint32(60, Number(data.x), true);
  // 0x40: u32
  if (data?.y !== undefined) view.setUint32(64, Number(data.y), true);
  // 0x44: u32
  if (data?.cx !== undefined) view.setUint32(68, Number(data.cx), true);
  // 0x48: u32
  if (data?.cy !== undefined) view.setUint32(72, Number(data.cy), true);
  // 0x4c: u32
  if (data?.flags !== undefined) view.setUint32(76, Number(data.flags), true);
  // 0x50: usize
  if (data?.pBits !== undefined) view.setBigUint64(80, BigInt(data.pBits), true);
  // 0x58: i32
  if (data?.bDiscardable !== undefined) view.setInt32(88, Number(data.bDiscardable), true);
  // 0x5c: pad4
  return buf;
}

export class VMEMRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get prev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pUp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pDown(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pLeft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pRight(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: usize
  get ptr(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: u32
  get size(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get x(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get y(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get cx(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get cy(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get flags(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: usize
  get pBits(): bigint | number {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x58: i32
  get bDiscardable(): number {
    return this.view.getInt32(88, true);
  }

  // 0x5c: pad4

  // 0x00: pointer
  set next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set prev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pUp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pDown(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pLeft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pRight(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: usize
  set ptr(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: u32
  set size(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set x(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set y(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set cx(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set cy(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set flags(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: usize
  set pBits(value: bigint | number) {
    this.view.setBigUint64(80, BigInt(value), true);
  }

  // 0x58: i32
  set bDiscardable(value: number) {
    this.view.setInt32(88, value, true);
  }

  // 0x5c: pad4
}

export type HANDLE = bigint | number;

/**
 * Windows.Win32.Graphics.DirectDraw.VMEMHEAP (size: 120)
 */
export interface VMEMHEAP {
  /** u32 */
  dwFlags: number;
  /** u32 */
  stride: number;
  /** ptr */
  freeList: Deno.PointerValue | Uint8Array;
  /** ptr */
  allocList: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwTotalSize: number;
  /** usize */
  fpGARTLin: bigint | number;
  /** usize */
  fpGARTDev: bigint | number;
  /** u32 */
  dwCommitedSize: number;
  /** u32 */
  dwCoalesceCount: number;
  /** Windows.Win32.Graphics.DirectDraw.HEAPALIGNMENT */
  Alignment: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPSEX */
  ddsCapsEx: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPSEX */
  ddsCapsExAlt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  liPhysAGPBase: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hdevAGP: Uint8Array | Deno.PointerValue;
  /** ptr */
  pvPhysRsrv: Deno.PointerValue | Uint8Array;
  /** ptr */
  pAgpCommitMask: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwAgpCommitMaskSize: number;
}

export const sizeofVMEMHEAP = 120;

export function allocVMEMHEAP(data?: Partial<VMEMHEAP>): Uint8Array {
  const buf = new Uint8Array(sizeofVMEMHEAP);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: u32
  if (data?.stride !== undefined) view.setUint32(4, Number(data.stride), true);
  // 0x08: pointer
  if (data?.freeList !== undefined) view.setBigUint64(8, data.freeList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.freeList))), true);
  // 0x10: pointer
  if (data?.allocList !== undefined) view.setBigUint64(16, data.allocList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.allocList))), true);
  // 0x18: u32
  if (data?.dwTotalSize !== undefined) view.setUint32(24, Number(data.dwTotalSize), true);
  // 0x1c: pad4
  // 0x20: usize
  if (data?.fpGARTLin !== undefined) view.setBigUint64(32, BigInt(data.fpGARTLin), true);
  // 0x28: usize
  if (data?.fpGARTDev !== undefined) view.setBigUint64(40, BigInt(data.fpGARTDev), true);
  // 0x30: u32
  if (data?.dwCommitedSize !== undefined) view.setUint32(48, Number(data.dwCommitedSize), true);
  // 0x34: u32
  if (data?.dwCoalesceCount !== undefined) view.setUint32(52, Number(data.dwCoalesceCount), true);
  // 0x38: pointer
  if (data?.Alignment !== undefined) view.setBigUint64(56, data.Alignment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Alignment))), true);
  // 0x40: pointer
  if (data?.ddsCapsEx !== undefined) view.setBigUint64(64, data.ddsCapsEx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCapsEx))), true);
  // 0x48: pointer
  if (data?.ddsCapsExAlt !== undefined) view.setBigUint64(72, data.ddsCapsExAlt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCapsExAlt))), true);
  // 0x50: pointer
  if (data?.liPhysAGPBase !== undefined) view.setBigUint64(80, data.liPhysAGPBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.liPhysAGPBase))), true);
  // 0x58: pointer
  if (data?.hdevAGP !== undefined) view.setBigUint64(88, data.hdevAGP === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hdevAGP))), true);
  // 0x60: pointer
  if (data?.pvPhysRsrv !== undefined) view.setBigUint64(96, data.pvPhysRsrv === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvPhysRsrv))), true);
  // 0x68: pointer
  if (data?.pAgpCommitMask !== undefined) view.setBigUint64(104, data.pAgpCommitMask === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pAgpCommitMask))), true);
  // 0x70: u32
  if (data?.dwAgpCommitMaskSize !== undefined) view.setUint32(112, Number(data.dwAgpCommitMaskSize), true);
  // 0x74: pad4
  return buf;
}

export class VMEMHEAPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get stride(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get freeList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get allocList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwTotalSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: usize
  get fpGARTLin(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: usize
  get fpGARTDev(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: u32
  get dwCommitedSize(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwCoalesceCount(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get Alignment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get ddsCapsEx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get ddsCapsExAlt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get liPhysAGPBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get hdevAGP(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get pvPhysRsrv(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get pAgpCommitMask(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get dwAgpCommitMaskSize(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set stride(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set freeList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set allocList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwTotalSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: usize
  set fpGARTLin(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: usize
  set fpGARTDev(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: u32
  set dwCommitedSize(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwCoalesceCount(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set Alignment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set ddsCapsEx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set ddsCapsExAlt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set liPhysAGPBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set hdevAGP(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set pvPhysRsrv(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set pAgpCommitMask(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set dwAgpCommitMaskSize(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.PROCESS_LIST (size: 24)
 */
export interface PROCESS_LIST {
  /** ptr */
  lpLink: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwProcessId: number;
  /** u32 */
  dwRefCnt: number;
  /** u32 */
  dwAlphaDepth: number;
  /** u32 */
  dwZDepth: number;
}

export const sizeofPROCESS_LIST = 24;

export function allocPROCESS_LIST(data?: Partial<PROCESS_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofPROCESS_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpLink !== undefined) view.setBigUint64(0, data.lpLink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLink))), true);
  // 0x08: u32
  if (data?.dwProcessId !== undefined) view.setUint32(8, Number(data.dwProcessId), true);
  // 0x0c: u32
  if (data?.dwRefCnt !== undefined) view.setUint32(12, Number(data.dwRefCnt), true);
  // 0x10: u32
  if (data?.dwAlphaDepth !== undefined) view.setUint32(16, Number(data.dwAlphaDepth), true);
  // 0x14: u32
  if (data?.dwZDepth !== undefined) view.setUint32(20, Number(data.dwZDepth), true);
  return buf;
}

export class PROCESS_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpLink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwProcessId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwRefCnt(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwAlphaDepth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwZDepth(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set lpLink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwProcessId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwRefCnt(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwAlphaDepth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwZDepth(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDMONITORINFO (size: 48)
 */
export interface DDMONITORINFO {
  /** u16 */
  Manufacturer: number;
  /** u16 */
  Product: number;
  /** u32 */
  SerialNumber: number;
  /** System.Guid */
  DeviceIdentifier: Uint8Array | Deno.PointerValue;
  /** i32 */
  Mode640x480: number;
  /** i32 */
  Mode800x600: number;
  /** i32 */
  Mode1024x768: number;
  /** i32 */
  Mode1280x1024: number;
  /** i32 */
  Mode1600x1200: number;
  /** i32 */
  ModeReserved1: number;
  /** i32 */
  ModeReserved2: number;
  /** i32 */
  ModeReserved3: number;
}

export const sizeofDDMONITORINFO = 48;

export function allocDDMONITORINFO(data?: Partial<DDMONITORINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDMONITORINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Manufacturer !== undefined) view.setUint16(0, Number(data.Manufacturer), true);
  // 0x02: u16
  if (data?.Product !== undefined) view.setUint16(2, Number(data.Product), true);
  // 0x04: u32
  if (data?.SerialNumber !== undefined) view.setUint32(4, Number(data.SerialNumber), true);
  // 0x08: pointer
  if (data?.DeviceIdentifier !== undefined) view.setBigUint64(8, data.DeviceIdentifier === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DeviceIdentifier))), true);
  // 0x10: i32
  if (data?.Mode640x480 !== undefined) view.setInt32(16, Number(data.Mode640x480), true);
  // 0x14: i32
  if (data?.Mode800x600 !== undefined) view.setInt32(20, Number(data.Mode800x600), true);
  // 0x18: i32
  if (data?.Mode1024x768 !== undefined) view.setInt32(24, Number(data.Mode1024x768), true);
  // 0x1c: i32
  if (data?.Mode1280x1024 !== undefined) view.setInt32(28, Number(data.Mode1280x1024), true);
  // 0x20: i32
  if (data?.Mode1600x1200 !== undefined) view.setInt32(32, Number(data.Mode1600x1200), true);
  // 0x24: i32
  if (data?.ModeReserved1 !== undefined) view.setInt32(36, Number(data.ModeReserved1), true);
  // 0x28: i32
  if (data?.ModeReserved2 !== undefined) view.setInt32(40, Number(data.ModeReserved2), true);
  // 0x2c: i32
  if (data?.ModeReserved3 !== undefined) view.setInt32(44, Number(data.ModeReserved3), true);
  return buf;
}

export class DDMONITORINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Manufacturer(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Product(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get SerialNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DeviceIdentifier(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get Mode640x480(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get Mode800x600(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get Mode1024x768(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get Mode1280x1024(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get Mode1600x1200(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get ModeReserved1(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get ModeReserved2(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: i32
  get ModeReserved3(): number {
    return this.view.getInt32(44, true);
  }

  // 0x00: u16
  set Manufacturer(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Product(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set SerialNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DeviceIdentifier(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set Mode640x480(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set Mode800x600(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set Mode1024x768(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set Mode1280x1024(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set Mode1600x1200(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set ModeReserved1(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set ModeReserved2(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: i32
  set ModeReserved3(value: number) {
    this.view.setInt32(44, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD32BITDRIVERDATA (size: 24)
 */
export interface DD32BITDRIVERDATA {
  /** array */
  szName: Deno.PointerValue;
  /** array */
  szEntryPoint: Deno.PointerValue;
  /** u32 */
  dwContext: number;
}

export const sizeofDD32BITDRIVERDATA = 24;

export function allocDD32BITDRIVERDATA(data?: Partial<DD32BITDRIVERDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD32BITDRIVERDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.szName !== undefined) view.setBigUint64(0, data.szName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szName))), true);
  // 0x08: pointer
  if (data?.szEntryPoint !== undefined) view.setBigUint64(8, data.szEntryPoint === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szEntryPoint))), true);
  // 0x10: u32
  if (data?.dwContext !== undefined) view.setUint32(16, Number(data.dwContext), true);
  // 0x14: pad4
  return buf;
}

export class DD32BITDRIVERDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get szName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get szEntryPoint(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwContext(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set szName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set szEntryPoint(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwContext(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDVERSIONDATA (size: 24)
 */
export interface DDVERSIONDATA {
  /** u32 */
  dwHALVersion: number;
  /** usize */
  dwReserved1: bigint | number;
  /** usize */
  dwReserved2: bigint | number;
}

export const sizeofDDVERSIONDATA = 24;

export function allocDDVERSIONDATA(data?: Partial<DDVERSIONDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDVERSIONDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwHALVersion !== undefined) view.setUint32(0, Number(data.dwHALVersion), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(8, BigInt(data.dwReserved1), true);
  // 0x10: usize
  if (data?.dwReserved2 !== undefined) view.setBigUint64(16, BigInt(data.dwReserved2), true);
  return buf;
}

export class DDVERSIONDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwHALVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: usize
  get dwReserved2(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x00: u32
  set dwHALVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: usize
  set dwReserved2(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.VIDMEM (size: 48)
 */
export interface VIDMEM {
  /** u32 */
  dwFlags: number;
  /** usize */
  fpStart: bigint | number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsCaps: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsCapsAlt: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
}

export const sizeofVIDMEM = 48;

export function allocVIDMEM(data?: Partial<VIDMEM>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDMEM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.fpStart !== undefined) view.setBigUint64(8, BigInt(data.fpStart), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(24, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  // 0x20: pointer
  if (data?.ddsCapsAlt !== undefined) view.setBigUint64(32, data.ddsCapsAlt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCapsAlt))), true);
  // 0x28: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(40, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  return buf;
}

export class VIDMEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get fpStart(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddsCapsAlt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set fpStart(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddsCapsAlt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.VIDMEMINFO (size: 64)
 */
export interface VIDMEMINFO {
  /** usize */
  fpPrimary: bigint | number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwDisplayWidth: number;
  /** u32 */
  dwDisplayHeight: number;
  /** i32 */
  lDisplayPitch: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddpfDisplay: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwOffscreenAlign: number;
  /** u32 */
  dwOverlayAlign: number;
  /** u32 */
  dwTextureAlign: number;
  /** u32 */
  dwZBufferAlign: number;
  /** u32 */
  dwAlphaAlign: number;
  /** u32 */
  dwNumHeaps: number;
  /** ptr */
  pvmList: Deno.PointerValue | Uint8Array;
}

export const sizeofVIDMEMINFO = 64;

export function allocVIDMEMINFO(data?: Partial<VIDMEMINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDMEMINFO);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.fpPrimary !== undefined) view.setBigUint64(0, BigInt(data.fpPrimary), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwDisplayWidth !== undefined) view.setUint32(12, Number(data.dwDisplayWidth), true);
  // 0x10: u32
  if (data?.dwDisplayHeight !== undefined) view.setUint32(16, Number(data.dwDisplayHeight), true);
  // 0x14: i32
  if (data?.lDisplayPitch !== undefined) view.setInt32(20, Number(data.lDisplayPitch), true);
  // 0x18: pointer
  if (data?.ddpfDisplay !== undefined) view.setBigUint64(24, data.ddpfDisplay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddpfDisplay))), true);
  // 0x20: u32
  if (data?.dwOffscreenAlign !== undefined) view.setUint32(32, Number(data.dwOffscreenAlign), true);
  // 0x24: u32
  if (data?.dwOverlayAlign !== undefined) view.setUint32(36, Number(data.dwOverlayAlign), true);
  // 0x28: u32
  if (data?.dwTextureAlign !== undefined) view.setUint32(40, Number(data.dwTextureAlign), true);
  // 0x2c: u32
  if (data?.dwZBufferAlign !== undefined) view.setUint32(44, Number(data.dwZBufferAlign), true);
  // 0x30: u32
  if (data?.dwAlphaAlign !== undefined) view.setUint32(48, Number(data.dwAlphaAlign), true);
  // 0x34: u32
  if (data?.dwNumHeaps !== undefined) view.setUint32(52, Number(data.dwNumHeaps), true);
  // 0x38: pointer
  if (data?.pvmList !== undefined) view.setBigUint64(56, data.pvmList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvmList))), true);
  return buf;
}

export class VIDMEMINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get fpPrimary(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwDisplayWidth(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwDisplayHeight(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get lDisplayPitch(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: pointer
  get ddpfDisplay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwOffscreenAlign(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwOverlayAlign(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwTextureAlign(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwZBufferAlign(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwAlphaAlign(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwNumHeaps(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get pvmList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set fpPrimary(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwDisplayWidth(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwDisplayHeight(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set lDisplayPitch(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: pointer
  set ddpfDisplay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwOffscreenAlign(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwOverlayAlign(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwTextureAlign(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwZBufferAlign(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwAlphaAlign(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwNumHeaps(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set pvmList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.HEAPALIAS (size: 24)
 */
export interface HEAPALIAS {
  /** usize */
  fpVidMem: bigint | number;
  /** ptr */
  lpAlias: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwAliasSize: number;
}

export const sizeofHEAPALIAS = 24;

export function allocHEAPALIAS(data?: Partial<HEAPALIAS>): Uint8Array {
  const buf = new Uint8Array(sizeofHEAPALIAS);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.fpVidMem !== undefined) view.setBigUint64(0, BigInt(data.fpVidMem), true);
  // 0x08: pointer
  if (data?.lpAlias !== undefined) view.setBigUint64(8, data.lpAlias === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpAlias))), true);
  // 0x10: u32
  if (data?.dwAliasSize !== undefined) view.setUint32(16, Number(data.dwAliasSize), true);
  // 0x14: pad4
  return buf;
}

export class HEAPALIASView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get fpVidMem(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: pointer
  get lpAlias(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwAliasSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: usize
  set fpVidMem(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: pointer
  set lpAlias(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwAliasSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.HEAPALIASINFO (size: 24)
 */
export interface HEAPALIASINFO {
  /** u32 */
  dwRefCnt: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwNumHeaps: number;
  /** ptr */
  lpAliases: Deno.PointerValue | Uint8Array;
}

export const sizeofHEAPALIASINFO = 24;

export function allocHEAPALIASINFO(data?: Partial<HEAPALIASINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofHEAPALIASINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRefCnt !== undefined) view.setUint32(0, Number(data.dwRefCnt), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwNumHeaps !== undefined) view.setUint32(8, Number(data.dwNumHeaps), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpAliases !== undefined) view.setBigUint64(16, data.lpAliases === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpAliases))), true);
  return buf;
}

export class HEAPALIASINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwRefCnt(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwNumHeaps(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lpAliases(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwRefCnt(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwNumHeaps(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lpAliases(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.IUNKNOWN_LIST (size: 24)
 */
export interface IUNKNOWN_LIST {
  /** ptr */
  lpLink: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpGuid: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Com.IUnknown */
  lpIUnknown: Uint8Array | Deno.PointerValue;
}

export const sizeofIUNKNOWN_LIST = 24;

export function allocIUNKNOWN_LIST(data?: Partial<IUNKNOWN_LIST>): Uint8Array {
  const buf = new Uint8Array(sizeofIUNKNOWN_LIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpLink !== undefined) view.setBigUint64(0, data.lpLink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLink))), true);
  // 0x08: pointer
  if (data?.lpGuid !== undefined) view.setBigUint64(8, data.lpGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGuid))), true);
  // 0x10: pointer
  if (data?.lpIUnknown !== undefined) view.setBigUint64(16, data.lpIUnknown === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpIUnknown))), true);
  return buf;
}

export class IUNKNOWN_LISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpLink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpIUnknown(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpLink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpIUnknown(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DDCALLBACKS (size: 88)
 */
export interface DDHAL_DDCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_DESTROYDRIVER */
  DestroyDriver: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_CREATESURFACE */
  CreateSurface: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_SETCOLORKEY */
  SetColorKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_SETMODE */
  SetMode: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_WAITFORVERTICALBLANK */
  WaitForVerticalBlank: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_CANCREATESURFACE */
  CanCreateSurface: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_CREATEPALETTE */
  CreatePalette: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_GETSCANLINE */
  GetScanLine: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_SETEXCLUSIVEMODE */
  SetExclusiveMode: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_FLIPTOGDISURFACE */
  FlipToGDISurface: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DDCALLBACKS = 88;

export function allocDDHAL_DDCALLBACKS(data?: Partial<DDHAL_DDCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DDCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.DestroyDriver !== undefined) view.setBigUint64(8, data.DestroyDriver === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyDriver))), true);
  // 0x10: pointer
  if (data?.CreateSurface !== undefined) view.setBigUint64(16, data.CreateSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateSurface))), true);
  // 0x18: pointer
  if (data?.SetColorKey !== undefined) view.setBigUint64(24, data.SetColorKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetColorKey))), true);
  // 0x20: pointer
  if (data?.SetMode !== undefined) view.setBigUint64(32, data.SetMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetMode))), true);
  // 0x28: pointer
  if (data?.WaitForVerticalBlank !== undefined) view.setBigUint64(40, data.WaitForVerticalBlank === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WaitForVerticalBlank))), true);
  // 0x30: pointer
  if (data?.CanCreateSurface !== undefined) view.setBigUint64(48, data.CanCreateSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CanCreateSurface))), true);
  // 0x38: pointer
  if (data?.CreatePalette !== undefined) view.setBigUint64(56, data.CreatePalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreatePalette))), true);
  // 0x40: pointer
  if (data?.GetScanLine !== undefined) view.setBigUint64(64, data.GetScanLine === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetScanLine))), true);
  // 0x48: pointer
  if (data?.SetExclusiveMode !== undefined) view.setBigUint64(72, data.SetExclusiveMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetExclusiveMode))), true);
  // 0x50: pointer
  if (data?.FlipToGDISurface !== undefined) view.setBigUint64(80, data.FlipToGDISurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlipToGDISurface))), true);
  return buf;
}

export class DDHAL_DDCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DestroyDriver(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SetColorKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get SetMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get WaitForVerticalBlank(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get CanCreateSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get CreatePalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get GetScanLine(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get SetExclusiveMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get FlipToGDISurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DestroyDriver(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SetColorKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set SetMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set WaitForVerticalBlank(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set CanCreateSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set CreatePalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set GetScanLine(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set SetExclusiveMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set FlipToGDISurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DDPALETTECALLBACKS (size: 24)
 */
export interface DDHAL_DDPALETTECALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALPALCB_DESTROYPALETTE */
  DestroyPalette: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALPALCB_SETENTRIES */
  SetEntries: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DDPALETTECALLBACKS = 24;

export function allocDDHAL_DDPALETTECALLBACKS(data?: Partial<DDHAL_DDPALETTECALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DDPALETTECALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.DestroyPalette !== undefined) view.setBigUint64(8, data.DestroyPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyPalette))), true);
  // 0x10: pointer
  if (data?.SetEntries !== undefined) view.setBigUint64(16, data.SetEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetEntries))), true);
  return buf;
}

export class DDHAL_DDPALETTECALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DestroyPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get SetEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DestroyPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set SetEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DDSURFACECALLBACKS (size: 120)
 */
export interface DDHAL_DDSURFACECALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_DESTROYSURFACE */
  DestroySurface: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_FLIP */
  Flip: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_SETCLIPLIST */
  SetClipList: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_LOCK */
  Lock: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_UNLOCK */
  Unlock: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_BLT */
  Blt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_SETCOLORKEY */
  SetColorKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_ADDATTACHEDSURFACE */
  AddAttachedSurface: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_GETBLTSTATUS */
  GetBltStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_GETFLIPSTATUS */
  GetFlipStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_UPDATEOVERLAY */
  UpdateOverlay: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_SETOVERLAYPOSITION */
  SetOverlayPosition: Uint8Array | Deno.PointerValue;
  /** ptr */
  reserved4: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_SETPALETTE */
  SetPalette: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DDSURFACECALLBACKS = 120;

export function allocDDHAL_DDSURFACECALLBACKS(data?: Partial<DDHAL_DDSURFACECALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DDSURFACECALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.DestroySurface !== undefined) view.setBigUint64(8, data.DestroySurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroySurface))), true);
  // 0x10: pointer
  if (data?.Flip !== undefined) view.setBigUint64(16, data.Flip === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Flip))), true);
  // 0x18: pointer
  if (data?.SetClipList !== undefined) view.setBigUint64(24, data.SetClipList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetClipList))), true);
  // 0x20: pointer
  if (data?.Lock !== undefined) view.setBigUint64(32, data.Lock === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Lock))), true);
  // 0x28: pointer
  if (data?.Unlock !== undefined) view.setBigUint64(40, data.Unlock === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Unlock))), true);
  // 0x30: pointer
  if (data?.Blt !== undefined) view.setBigUint64(48, data.Blt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Blt))), true);
  // 0x38: pointer
  if (data?.SetColorKey !== undefined) view.setBigUint64(56, data.SetColorKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetColorKey))), true);
  // 0x40: pointer
  if (data?.AddAttachedSurface !== undefined) view.setBigUint64(64, data.AddAttachedSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddAttachedSurface))), true);
  // 0x48: pointer
  if (data?.GetBltStatus !== undefined) view.setBigUint64(72, data.GetBltStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetBltStatus))), true);
  // 0x50: pointer
  if (data?.GetFlipStatus !== undefined) view.setBigUint64(80, data.GetFlipStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetFlipStatus))), true);
  // 0x58: pointer
  if (data?.UpdateOverlay !== undefined) view.setBigUint64(88, data.UpdateOverlay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateOverlay))), true);
  // 0x60: pointer
  if (data?.SetOverlayPosition !== undefined) view.setBigUint64(96, data.SetOverlayPosition === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetOverlayPosition))), true);
  // 0x68: pointer
  if (data?.reserved4 !== undefined) view.setBigUint64(104, data.reserved4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reserved4))), true);
  // 0x70: pointer
  if (data?.SetPalette !== undefined) view.setBigUint64(112, data.SetPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetPalette))), true);
  return buf;
}

export class DDHAL_DDSURFACECALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DestroySurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Flip(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SetClipList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Lock(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Unlock(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Blt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get SetColorKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get AddAttachedSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get GetBltStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get GetFlipStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get UpdateOverlay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get SetOverlayPosition(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get reserved4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get SetPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DestroySurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Flip(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SetClipList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Lock(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Unlock(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Blt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set SetColorKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set AddAttachedSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set GetBltStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set GetFlipStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set UpdateOverlay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set SetOverlayPosition(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set reserved4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set SetPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DDMISCELLANEOUSCALLBACKS (size: 40)
 */
export interface DDHAL_DDMISCELLANEOUSCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_GETAVAILDRIVERMEMORY */
  GetAvailDriverMemory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_UPDATENONLOCALHEAP */
  UpdateNonLocalHeap: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_GETHEAPALIGNMENT */
  GetHeapAlignment: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_GETBLTSTATUS */
  GetSysmemBltStatus: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DDMISCELLANEOUSCALLBACKS = 40;

export function allocDDHAL_DDMISCELLANEOUSCALLBACKS(data?: Partial<DDHAL_DDMISCELLANEOUSCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DDMISCELLANEOUSCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.GetAvailDriverMemory !== undefined) view.setBigUint64(8, data.GetAvailDriverMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetAvailDriverMemory))), true);
  // 0x10: pointer
  if (data?.UpdateNonLocalHeap !== undefined) view.setBigUint64(16, data.UpdateNonLocalHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateNonLocalHeap))), true);
  // 0x18: pointer
  if (data?.GetHeapAlignment !== undefined) view.setBigUint64(24, data.GetHeapAlignment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetHeapAlignment))), true);
  // 0x20: pointer
  if (data?.GetSysmemBltStatus !== undefined) view.setBigUint64(32, data.GetSysmemBltStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetSysmemBltStatus))), true);
  return buf;
}

export class DDHAL_DDMISCELLANEOUSCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get GetAvailDriverMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get UpdateNonLocalHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetHeapAlignment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetSysmemBltStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set GetAvailDriverMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set UpdateNonLocalHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetHeapAlignment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetSysmemBltStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DDMISCELLANEOUS2CALLBACKS (size: 40)
 */
export interface DDHAL_DDMISCELLANEOUS2CALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  Reserved: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_CREATESURFACEEX */
  CreateSurfaceEx: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_GETDRIVERSTATE */
  GetDriverState: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_DESTROYDDLOCAL */
  DestroyDDLocal: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DDMISCELLANEOUS2CALLBACKS = 40;

export function allocDDHAL_DDMISCELLANEOUS2CALLBACKS(data?: Partial<DDHAL_DDMISCELLANEOUS2CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DDMISCELLANEOUS2CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x10: pointer
  if (data?.CreateSurfaceEx !== undefined) view.setBigUint64(16, data.CreateSurfaceEx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateSurfaceEx))), true);
  // 0x18: pointer
  if (data?.GetDriverState !== undefined) view.setBigUint64(24, data.GetDriverState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetDriverState))), true);
  // 0x20: pointer
  if (data?.DestroyDDLocal !== undefined) view.setBigUint64(32, data.DestroyDDLocal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyDDLocal))), true);
  return buf;
}

export class DDHAL_DDMISCELLANEOUS2CALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateSurfaceEx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetDriverState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DestroyDDLocal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateSurfaceEx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetDriverState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DestroyDDLocal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DDEXEBUFCALLBACKS (size: 48)
 */
export interface DDHAL_DDEXEBUFCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALEXEBUFCB_CANCREATEEXEBUF */
  CanCreateExecuteBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALEXEBUFCB_CREATEEXEBUF */
  CreateExecuteBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALEXEBUFCB_DESTROYEXEBUF */
  DestroyExecuteBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALEXEBUFCB_LOCKEXEBUF */
  LockExecuteBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALEXEBUFCB_UNLOCKEXEBUF */
  UnlockExecuteBuffer: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DDEXEBUFCALLBACKS = 48;

export function allocDDHAL_DDEXEBUFCALLBACKS(data?: Partial<DDHAL_DDEXEBUFCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DDEXEBUFCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.CanCreateExecuteBuffer !== undefined) view.setBigUint64(8, data.CanCreateExecuteBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CanCreateExecuteBuffer))), true);
  // 0x10: pointer
  if (data?.CreateExecuteBuffer !== undefined) view.setBigUint64(16, data.CreateExecuteBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateExecuteBuffer))), true);
  // 0x18: pointer
  if (data?.DestroyExecuteBuffer !== undefined) view.setBigUint64(24, data.DestroyExecuteBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyExecuteBuffer))), true);
  // 0x20: pointer
  if (data?.LockExecuteBuffer !== undefined) view.setBigUint64(32, data.LockExecuteBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LockExecuteBuffer))), true);
  // 0x28: pointer
  if (data?.UnlockExecuteBuffer !== undefined) view.setBigUint64(40, data.UnlockExecuteBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnlockExecuteBuffer))), true);
  return buf;
}

export class DDHAL_DDEXEBUFCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get CanCreateExecuteBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateExecuteBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DestroyExecuteBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get LockExecuteBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get UnlockExecuteBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set CanCreateExecuteBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateExecuteBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DestroyExecuteBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set LockExecuteBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set UnlockExecuteBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DDVIDEOPORTCALLBACKS (size: 136)
 */
export interface DDHAL_DDVIDEOPORTCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_CANCREATEVIDEOPORT */
  CanCreateVideoPort: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_CREATEVIDEOPORT */
  CreateVideoPort: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_FLIP */
  FlipVideoPort: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETBANDWIDTH */
  GetVideoPortBandwidth: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETINPUTFORMATS */
  GetVideoPortInputFormats: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETOUTPUTFORMATS */
  GetVideoPortOutputFormats: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpReserved1: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETFIELD */
  GetVideoPortField: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETLINE */
  GetVideoPortLine: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETVPORTCONNECT */
  GetVideoPortConnectInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_DESTROYVPORT */
  DestroyVideoPort: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETFLIPSTATUS */
  GetVideoPortFlipStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_UPDATE */
  UpdateVideoPort: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_WAITFORSYNC */
  WaitForVideoPortSync: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETSIGNALSTATUS */
  GetVideoSignalStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_COLORCONTROL */
  ColorControl: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DDVIDEOPORTCALLBACKS = 136;

export function allocDDHAL_DDVIDEOPORTCALLBACKS(data?: Partial<DDHAL_DDVIDEOPORTCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DDVIDEOPORTCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.CanCreateVideoPort !== undefined) view.setBigUint64(8, data.CanCreateVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CanCreateVideoPort))), true);
  // 0x10: pointer
  if (data?.CreateVideoPort !== undefined) view.setBigUint64(16, data.CreateVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateVideoPort))), true);
  // 0x18: pointer
  if (data?.FlipVideoPort !== undefined) view.setBigUint64(24, data.FlipVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlipVideoPort))), true);
  // 0x20: pointer
  if (data?.GetVideoPortBandwidth !== undefined) view.setBigUint64(32, data.GetVideoPortBandwidth === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortBandwidth))), true);
  // 0x28: pointer
  if (data?.GetVideoPortInputFormats !== undefined) view.setBigUint64(40, data.GetVideoPortInputFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortInputFormats))), true);
  // 0x30: pointer
  if (data?.GetVideoPortOutputFormats !== undefined) view.setBigUint64(48, data.GetVideoPortOutputFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortOutputFormats))), true);
  // 0x38: pointer
  if (data?.lpReserved1 !== undefined) view.setBigUint64(56, data.lpReserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpReserved1))), true);
  // 0x40: pointer
  if (data?.GetVideoPortField !== undefined) view.setBigUint64(64, data.GetVideoPortField === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortField))), true);
  // 0x48: pointer
  if (data?.GetVideoPortLine !== undefined) view.setBigUint64(72, data.GetVideoPortLine === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortLine))), true);
  // 0x50: pointer
  if (data?.GetVideoPortConnectInfo !== undefined) view.setBigUint64(80, data.GetVideoPortConnectInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortConnectInfo))), true);
  // 0x58: pointer
  if (data?.DestroyVideoPort !== undefined) view.setBigUint64(88, data.DestroyVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyVideoPort))), true);
  // 0x60: pointer
  if (data?.GetVideoPortFlipStatus !== undefined) view.setBigUint64(96, data.GetVideoPortFlipStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortFlipStatus))), true);
  // 0x68: pointer
  if (data?.UpdateVideoPort !== undefined) view.setBigUint64(104, data.UpdateVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateVideoPort))), true);
  // 0x70: pointer
  if (data?.WaitForVideoPortSync !== undefined) view.setBigUint64(112, data.WaitForVideoPortSync === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WaitForVideoPortSync))), true);
  // 0x78: pointer
  if (data?.GetVideoSignalStatus !== undefined) view.setBigUint64(120, data.GetVideoSignalStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoSignalStatus))), true);
  // 0x80: pointer
  if (data?.ColorControl !== undefined) view.setBigUint64(128, data.ColorControl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ColorControl))), true);
  return buf;
}

export class DDHAL_DDVIDEOPORTCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get CanCreateVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get FlipVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetVideoPortBandwidth(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get GetVideoPortInputFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get GetVideoPortOutputFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpReserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get GetVideoPortField(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get GetVideoPortLine(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get GetVideoPortConnectInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get DestroyVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get GetVideoPortFlipStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get UpdateVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get WaitForVideoPortSync(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get GetVideoSignalStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get ColorControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set CanCreateVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set FlipVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetVideoPortBandwidth(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set GetVideoPortInputFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set GetVideoPortOutputFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpReserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set GetVideoPortField(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set GetVideoPortLine(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set GetVideoPortConnectInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set DestroyVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set GetVideoPortFlipStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set UpdateVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set WaitForVideoPortSync(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set GetVideoSignalStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set ColorControl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DDCOLORCONTROLCALLBACKS (size: 16)
 */
export interface DDHAL_DDCOLORCONTROLCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALCOLORCB_COLORCONTROL */
  ColorControl: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DDCOLORCONTROLCALLBACKS = 16;

export function allocDDHAL_DDCOLORCONTROLCALLBACKS(data?: Partial<DDHAL_DDCOLORCONTROLCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DDCOLORCONTROLCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.ColorControl !== undefined) view.setBigUint64(8, data.ColorControl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ColorControl))), true);
  return buf;
}

export class DDHAL_DDCOLORCONTROLCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ColorControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ColorControl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DDKERNELCALLBACKS (size: 24)
 */
export interface DDHAL_DDKERNELCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALKERNELCB_SYNCSURFACE */
  SyncSurfaceData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALKERNELCB_SYNCVIDEOPORT */
  SyncVideoPortData: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DDKERNELCALLBACKS = 24;

export function allocDDHAL_DDKERNELCALLBACKS(data?: Partial<DDHAL_DDKERNELCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DDKERNELCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.SyncSurfaceData !== undefined) view.setBigUint64(8, data.SyncSurfaceData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SyncSurfaceData))), true);
  // 0x10: pointer
  if (data?.SyncVideoPortData !== undefined) view.setBigUint64(16, data.SyncVideoPortData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SyncVideoPortData))), true);
  return buf;
}

export class DDHAL_DDKERNELCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get SyncSurfaceData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get SyncVideoPortData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set SyncSurfaceData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set SyncVideoPortData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DDMOTIONCOMPCALLBACKS (size: 88)
 */
export interface DDHAL_DDMOTIONCOMPCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_GETGUIDS */
  GetMoCompGuids: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_GETFORMATS */
  GetMoCompFormats: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_CREATE */
  CreateMoComp: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_GETCOMPBUFFINFO */
  GetMoCompBuffInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_GETINTERNALINFO */
  GetInternalMoCompInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_BEGINFRAME */
  BeginMoCompFrame: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_ENDFRAME */
  EndMoCompFrame: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_RENDER */
  RenderMoComp: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_QUERYSTATUS */
  QueryMoCompStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_DESTROY */
  DestroyMoComp: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DDMOTIONCOMPCALLBACKS = 88;

export function allocDDHAL_DDMOTIONCOMPCALLBACKS(data?: Partial<DDHAL_DDMOTIONCOMPCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DDMOTIONCOMPCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.GetMoCompGuids !== undefined) view.setBigUint64(8, data.GetMoCompGuids === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetMoCompGuids))), true);
  // 0x10: pointer
  if (data?.GetMoCompFormats !== undefined) view.setBigUint64(16, data.GetMoCompFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetMoCompFormats))), true);
  // 0x18: pointer
  if (data?.CreateMoComp !== undefined) view.setBigUint64(24, data.CreateMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateMoComp))), true);
  // 0x20: pointer
  if (data?.GetMoCompBuffInfo !== undefined) view.setBigUint64(32, data.GetMoCompBuffInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetMoCompBuffInfo))), true);
  // 0x28: pointer
  if (data?.GetInternalMoCompInfo !== undefined) view.setBigUint64(40, data.GetInternalMoCompInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetInternalMoCompInfo))), true);
  // 0x30: pointer
  if (data?.BeginMoCompFrame !== undefined) view.setBigUint64(48, data.BeginMoCompFrame === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BeginMoCompFrame))), true);
  // 0x38: pointer
  if (data?.EndMoCompFrame !== undefined) view.setBigUint64(56, data.EndMoCompFrame === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndMoCompFrame))), true);
  // 0x40: pointer
  if (data?.RenderMoComp !== undefined) view.setBigUint64(64, data.RenderMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RenderMoComp))), true);
  // 0x48: pointer
  if (data?.QueryMoCompStatus !== undefined) view.setBigUint64(72, data.QueryMoCompStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryMoCompStatus))), true);
  // 0x50: pointer
  if (data?.DestroyMoComp !== undefined) view.setBigUint64(80, data.DestroyMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyMoComp))), true);
  return buf;
}

export class DDHAL_DDMOTIONCOMPCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get GetMoCompGuids(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get GetMoCompFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get CreateMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetMoCompBuffInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get GetInternalMoCompInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get BeginMoCompFrame(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get EndMoCompFrame(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get RenderMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get QueryMoCompStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get DestroyMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set GetMoCompGuids(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set GetMoCompFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set CreateMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetMoCompBuffInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set GetInternalMoCompInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set BeginMoCompFrame(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set EndMoCompFrame(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set RenderMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set QueryMoCompStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set DestroyMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDNONLOCALVIDMEMCAPS (size: 32)
 */
export interface DDNONLOCALVIDMEMCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwNLVBCaps: number;
  /** u32 */
  dwNLVBCaps2: number;
  /** u32 */
  dwNLVBCKeyCaps: number;
  /** u32 */
  dwNLVBFXCaps: number;
  /** array */
  dwNLVBRops: Deno.PointerValue;
}

export const sizeofDDNONLOCALVIDMEMCAPS = 32;

export function allocDDNONLOCALVIDMEMCAPS(data?: Partial<DDNONLOCALVIDMEMCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDNONLOCALVIDMEMCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwNLVBCaps !== undefined) view.setUint32(4, Number(data.dwNLVBCaps), true);
  // 0x08: u32
  if (data?.dwNLVBCaps2 !== undefined) view.setUint32(8, Number(data.dwNLVBCaps2), true);
  // 0x0c: u32
  if (data?.dwNLVBCKeyCaps !== undefined) view.setUint32(12, Number(data.dwNLVBCKeyCaps), true);
  // 0x10: u32
  if (data?.dwNLVBFXCaps !== undefined) view.setUint32(16, Number(data.dwNLVBFXCaps), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwNLVBRops !== undefined) view.setBigUint64(24, data.dwNLVBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwNLVBRops))), true);
  return buf;
}

export class DDNONLOCALVIDMEMCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNLVBCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwNLVBCaps2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwNLVBCKeyCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwNLVBFXCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get dwNLVBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNLVBCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwNLVBCaps2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwNLVBCKeyCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwNLVBFXCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set dwNLVBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDMORESURFACECAPS (size: 24)
 */
export interface DDMORESURFACECAPS {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPSEX */
  ddsCapsMore: Uint8Array | Deno.PointerValue;
  /** array */
  ddsExtendedHeapRestrictions: Deno.PointerValue;
}

export const sizeofDDMORESURFACECAPS = 24;

export function allocDDMORESURFACECAPS(data?: Partial<DDMORESURFACECAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDMORESURFACECAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ddsCapsMore !== undefined) view.setBigUint64(8, data.ddsCapsMore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCapsMore))), true);
  // 0x10: pointer
  if (data?.ddsExtendedHeapRestrictions !== undefined) view.setBigUint64(16, data.ddsExtendedHeapRestrictions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsExtendedHeapRestrictions))), true);
  return buf;
}

export class DDMORESURFACECAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ddsCapsMore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddsExtendedHeapRestrictions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ddsCapsMore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddsExtendedHeapRestrictions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDSTEREOMODE (size: 24)
 */
export interface DDSTEREOMODE {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwBpp: number;
  /** u32 */
  dwRefreshRate: number;
  /** Windows.Win32.Foundation.BOOL */
  bSupported: boolean;
}

export const sizeofDDSTEREOMODE = 24;

export function allocDDSTEREOMODE(data?: Partial<DDSTEREOMODE>): Uint8Array {
  const buf = new Uint8Array(sizeofDDSTEREOMODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwHeight !== undefined) view.setUint32(4, Number(data.dwHeight), true);
  // 0x08: u32
  if (data?.dwWidth !== undefined) view.setUint32(8, Number(data.dwWidth), true);
  // 0x0c: u32
  if (data?.dwBpp !== undefined) view.setUint32(12, Number(data.dwBpp), true);
  // 0x10: u32
  if (data?.dwRefreshRate !== undefined) view.setUint32(16, Number(data.dwRefreshRate), true);
  // 0x14: i32
  if (data?.bSupported !== undefined) view.setInt32(20, Number(data.bSupported), true);
  return buf;
}

export class DDSTEREOMODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHeight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwBpp(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwRefreshRate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get bSupported(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHeight(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwBpp(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwRefreshRate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set bSupported(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDRAWPALETTE_INT (size: 32)
 */
export interface DDRAWI_DDRAWPALETTE_INT {
  /** ptr */
  lpVtbl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpLcl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpLink: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwIntRefCnt: number;
}

export const sizeofDDRAWI_DDRAWPALETTE_INT = 32;

export function allocDDRAWI_DDRAWPALETTE_INT(data?: Partial<DDRAWI_DDRAWPALETTE_INT>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDRAWPALETTE_INT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpVtbl !== undefined) view.setBigUint64(0, data.lpVtbl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVtbl))), true);
  // 0x08: pointer
  if (data?.lpLcl !== undefined) view.setBigUint64(8, data.lpLcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLcl))), true);
  // 0x10: pointer
  if (data?.lpLink !== undefined) view.setBigUint64(16, data.lpLink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLink))), true);
  // 0x18: u32
  if (data?.dwIntRefCnt !== undefined) view.setUint32(24, Number(data.dwIntRefCnt), true);
  // 0x1c: pad4
  return buf;
}

export class DDRAWI_DDRAWPALETTE_INTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpVtbl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpLcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpLink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwIntRefCnt(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set lpVtbl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpLcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpLink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwIntRefCnt(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDRAWPALETTE_GBL (size: 56)
 */
export interface DDRAWI_DDRAWPALETTE_GBL {
  /** u32 */
  dwRefCnt: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpDD_lcl: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwProcessId: number;
  /** ptr */
  lpColorTable: Deno.PointerValue | Uint8Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwDriverReserved: number;
  /** u32 */
  dwContentsStamp: number;
  /** u32 */
  dwSaveStamp: number;
  /** u32 */
  dwHandle: number;
}

export const sizeofDDRAWI_DDRAWPALETTE_GBL = 56;

export function allocDDRAWI_DDRAWPALETTE_GBL(data?: Partial<DDRAWI_DDRAWPALETTE_GBL>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDRAWPALETTE_GBL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRefCnt !== undefined) view.setUint32(0, Number(data.dwRefCnt), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.lpDD_lcl !== undefined) view.setBigUint64(8, data.lpDD_lcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD_lcl))), true);
  // 0x10: u32
  if (data?.dwProcessId !== undefined) view.setUint32(16, Number(data.dwProcessId), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpColorTable !== undefined) view.setBigUint64(24, data.lpColorTable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpColorTable))), true);
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x28: u32
  if (data?.dwDriverReserved !== undefined) view.setUint32(40, Number(data.dwDriverReserved), true);
  // 0x2c: u32
  if (data?.dwContentsStamp !== undefined) view.setUint32(44, Number(data.dwContentsStamp), true);
  // 0x30: u32
  if (data?.dwSaveStamp !== undefined) view.setUint32(48, Number(data.dwSaveStamp), true);
  // 0x34: u32
  if (data?.dwHandle !== undefined) view.setUint32(52, Number(data.dwHandle), true);
  return buf;
}

export class DDRAWI_DDRAWPALETTE_GBLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwRefCnt(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get lpDD_lcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwProcessId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpColorTable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwDriverReserved(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwContentsStamp(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwSaveStamp(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwHandle(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u32
  set dwRefCnt(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set lpDD_lcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwProcessId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpColorTable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwDriverReserved(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwContentsStamp(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwSaveStamp(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwHandle(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDRAWPALETTE_LCL (size: 80)
 */
export interface DDRAWI_DDRAWPALETTE_LCL {
  /** u32 */
  lpPalMore: number;
  /** ptr */
  lpGbl: Deno.PointerValue | Uint8Array;
  /** usize */
  dwUnused0: bigint | number;
  /** u32 */
  dwLocalRefCnt: number;
  /** Windows.Win32.System.Com.IUnknown */
  pUnkOuter: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpDD_lcl: Deno.PointerValue | Uint8Array;
  /** usize */
  dwReserved1: bigint | number;
  /** usize */
  dwDDRAWReserved1: bigint | number;
  /** usize */
  dwDDRAWReserved2: bigint | number;
  /** usize */
  dwDDRAWReserved3: bigint | number;
}

export const sizeofDDRAWI_DDRAWPALETTE_LCL = 80;

export function allocDDRAWI_DDRAWPALETTE_LCL(data?: Partial<DDRAWI_DDRAWPALETTE_LCL>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDRAWPALETTE_LCL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lpPalMore !== undefined) view.setUint32(0, Number(data.lpPalMore), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpGbl !== undefined) view.setBigUint64(8, data.lpGbl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGbl))), true);
  // 0x10: usize
  if (data?.dwUnused0 !== undefined) view.setBigUint64(16, BigInt(data.dwUnused0), true);
  // 0x18: u32
  if (data?.dwLocalRefCnt !== undefined) view.setUint32(24, Number(data.dwLocalRefCnt), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pUnkOuter !== undefined) view.setBigUint64(32, data.pUnkOuter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pUnkOuter))), true);
  // 0x28: pointer
  if (data?.lpDD_lcl !== undefined) view.setBigUint64(40, data.lpDD_lcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD_lcl))), true);
  // 0x30: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(48, BigInt(data.dwReserved1), true);
  // 0x38: usize
  if (data?.dwDDRAWReserved1 !== undefined) view.setBigUint64(56, BigInt(data.dwDDRAWReserved1), true);
  // 0x40: usize
  if (data?.dwDDRAWReserved2 !== undefined) view.setBigUint64(64, BigInt(data.dwDDRAWReserved2), true);
  // 0x48: usize
  if (data?.dwDDRAWReserved3 !== undefined) view.setBigUint64(72, BigInt(data.dwDDRAWReserved3), true);
  return buf;
}

export class DDRAWI_DDRAWPALETTE_LCLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lpPalMore(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpGbl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get dwUnused0(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u32
  get dwLocalRefCnt(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pUnkOuter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get lpDD_lcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: usize
  get dwDDRAWReserved1(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: usize
  get dwDDRAWReserved2(): bigint | number {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: usize
  get dwDDRAWReserved3(): bigint | number {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x00: u32
  set lpPalMore(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpGbl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set dwUnused0(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u32
  set dwLocalRefCnt(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pUnkOuter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set lpDD_lcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: usize
  set dwDDRAWReserved1(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: usize
  set dwDDRAWReserved2(value: bigint | number) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: usize
  set dwDDRAWReserved3(value: bigint | number) {
    this.view.setBigUint64(72, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDRAWCLIPPER_INT (size: 32)
 */
export interface DDRAWI_DDRAWCLIPPER_INT {
  /** ptr */
  lpVtbl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpLcl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpLink: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwIntRefCnt: number;
}

export const sizeofDDRAWI_DDRAWCLIPPER_INT = 32;

export function allocDDRAWI_DDRAWCLIPPER_INT(data?: Partial<DDRAWI_DDRAWCLIPPER_INT>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDRAWCLIPPER_INT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpVtbl !== undefined) view.setBigUint64(0, data.lpVtbl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVtbl))), true);
  // 0x08: pointer
  if (data?.lpLcl !== undefined) view.setBigUint64(8, data.lpLcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLcl))), true);
  // 0x10: pointer
  if (data?.lpLink !== undefined) view.setBigUint64(16, data.lpLink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLink))), true);
  // 0x18: u32
  if (data?.dwIntRefCnt !== undefined) view.setUint32(24, Number(data.dwIntRefCnt), true);
  // 0x1c: pad4
  return buf;
}

export class DDRAWI_DDRAWCLIPPER_INTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpVtbl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpLcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpLink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwIntRefCnt(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set lpVtbl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpLcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpLink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwIntRefCnt(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDRAWCLIPPER_GBL (size: 48)
 */
export interface DDRAWI_DDRAWCLIPPER_GBL {
  /** u32 */
  dwRefCnt: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwProcessId: number;
  /** usize */
  dwReserved1: bigint | number;
  /** usize */
  hWnd: bigint | number;
  /** ptr */
  lpStaticClipList: Deno.PointerValue | Uint8Array;
}

export const sizeofDDRAWI_DDRAWCLIPPER_GBL = 48;

export function allocDDRAWI_DDRAWCLIPPER_GBL(data?: Partial<DDRAWI_DDRAWCLIPPER_GBL>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDRAWCLIPPER_GBL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRefCnt !== undefined) view.setUint32(0, Number(data.dwRefCnt), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(8, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x10: u32
  if (data?.dwProcessId !== undefined) view.setUint32(16, Number(data.dwProcessId), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(24, BigInt(data.dwReserved1), true);
  // 0x20: usize
  if (data?.hWnd !== undefined) view.setBigUint64(32, BigInt(data.hWnd), true);
  // 0x28: pointer
  if (data?.lpStaticClipList !== undefined) view.setBigUint64(40, data.lpStaticClipList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpStaticClipList))), true);
  return buf;
}

export class DDRAWI_DDRAWCLIPPER_GBLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwRefCnt(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwProcessId(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: usize
  get hWnd(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: pointer
  get lpStaticClipList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwRefCnt(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwProcessId(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: usize
  set hWnd(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set lpStaticClipList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDRAWCLIPPER_LCL (size: 64)
 */
export interface DDRAWI_DDRAWCLIPPER_LCL {
  /** u32 */
  lpClipMore: number;
  /** ptr */
  lpGbl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDD_lcl: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwLocalRefCnt: number;
  /** Windows.Win32.System.Com.IUnknown */
  pUnkOuter: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpDD_int: Deno.PointerValue | Uint8Array;
  /** usize */
  dwReserved1: bigint | number;
  /** Windows.Win32.System.Com.IUnknown */
  pAddrefedThisOwner: Uint8Array | Deno.PointerValue;
}

export const sizeofDDRAWI_DDRAWCLIPPER_LCL = 64;

export function allocDDRAWI_DDRAWCLIPPER_LCL(data?: Partial<DDRAWI_DDRAWCLIPPER_LCL>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDRAWCLIPPER_LCL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lpClipMore !== undefined) view.setUint32(0, Number(data.lpClipMore), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpGbl !== undefined) view.setBigUint64(8, data.lpGbl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGbl))), true);
  // 0x10: pointer
  if (data?.lpDD_lcl !== undefined) view.setBigUint64(16, data.lpDD_lcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD_lcl))), true);
  // 0x18: u32
  if (data?.dwLocalRefCnt !== undefined) view.setUint32(24, Number(data.dwLocalRefCnt), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pUnkOuter !== undefined) view.setBigUint64(32, data.pUnkOuter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pUnkOuter))), true);
  // 0x28: pointer
  if (data?.lpDD_int !== undefined) view.setBigUint64(40, data.lpDD_int === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD_int))), true);
  // 0x30: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(48, BigInt(data.dwReserved1), true);
  // 0x38: pointer
  if (data?.pAddrefedThisOwner !== undefined) view.setBigUint64(56, data.pAddrefedThisOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pAddrefedThisOwner))), true);
  return buf;
}

export class DDRAWI_DDRAWCLIPPER_LCLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lpClipMore(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpGbl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpDD_lcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwLocalRefCnt(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pUnkOuter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get lpDD_int(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: pointer
  get pAddrefedThisOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lpClipMore(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpGbl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpDD_lcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwLocalRefCnt(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pUnkOuter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set lpDD_int(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: pointer
  set pAddrefedThisOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.ATTACHLIST (size: 32)
 */
export interface ATTACHLIST {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpLink: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpAttached: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpIAttached: Deno.PointerValue | Uint8Array;
}

export const sizeofATTACHLIST = 32;

export function allocATTACHLIST(data?: Partial<ATTACHLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofATTACHLIST);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpLink !== undefined) view.setBigUint64(8, data.lpLink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLink))), true);
  // 0x10: pointer
  if (data?.lpAttached !== undefined) view.setBigUint64(16, data.lpAttached === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpAttached))), true);
  // 0x18: pointer
  if (data?.lpIAttached !== undefined) view.setBigUint64(24, data.lpIAttached === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpIAttached))), true);
  return buf;
}

export class ATTACHLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpLink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpAttached(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpIAttached(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpLink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpAttached(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpIAttached(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DBLNODE (size: 32)
 */
export interface DBLNODE {
  /** ptr */
  next: Deno.PointerValue | Uint8Array;
  /** ptr */
  prev: Deno.PointerValue | Uint8Array;
  /** ptr */
  object: Deno.PointerValue | Uint8Array;
  /** ptr */
  object_int: Deno.PointerValue | Uint8Array;
}

export const sizeofDBLNODE = 32;

export function allocDBLNODE(data?: Partial<DBLNODE>): Uint8Array {
  const buf = new Uint8Array(sizeofDBLNODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.next !== undefined) view.setBigUint64(0, data.next === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.next))), true);
  // 0x08: pointer
  if (data?.prev !== undefined) view.setBigUint64(8, data.prev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prev))), true);
  // 0x10: pointer
  if (data?.object !== undefined) view.setBigUint64(16, data.object === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.object))), true);
  // 0x18: pointer
  if (data?.object_int !== undefined) view.setBigUint64(24, data.object_int === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.object_int))), true);
  return buf;
}

export class DBLNODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get next(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get prev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get object(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get object_int(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set next(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set prev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set object(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set object_int(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.ACCESSRECTLIST (size: 48)
 */
export interface ACCESSRECTLIST {
  /** ptr */
  lpLink: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.RECT */
  rDest: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpOwner: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfaceData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpHeapAliasInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofACCESSRECTLIST = 48;

export function allocACCESSRECTLIST(data?: Partial<ACCESSRECTLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofACCESSRECTLIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpLink !== undefined) view.setBigUint64(0, data.lpLink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLink))), true);
  // 0x08: pointer
  if (data?.rDest !== undefined) view.setBigUint64(8, data.rDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rDest))), true);
  // 0x10: pointer
  if (data?.lpOwner !== undefined) view.setBigUint64(16, data.lpOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOwner))), true);
  // 0x18: pointer
  if (data?.lpSurfaceData !== undefined) view.setBigUint64(24, data.lpSurfaceData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfaceData))), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpHeapAliasInfo !== undefined) view.setBigUint64(40, data.lpHeapAliasInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpHeapAliasInfo))), true);
  return buf;
}

export class ACCESSRECTLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpLink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get rDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpSurfaceData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lpHeapAliasInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpLink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set rDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpSurfaceData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lpHeapAliasInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDRAWSURFACE_INT (size: 32)
 */
export interface DDRAWI_DDRAWSURFACE_INT {
  /** ptr */
  lpVtbl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpLcl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpLink: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwIntRefCnt: number;
}

export const sizeofDDRAWI_DDRAWSURFACE_INT = 32;

export function allocDDRAWI_DDRAWSURFACE_INT(data?: Partial<DDRAWI_DDRAWSURFACE_INT>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDRAWSURFACE_INT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpVtbl !== undefined) view.setBigUint64(0, data.lpVtbl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVtbl))), true);
  // 0x08: pointer
  if (data?.lpLcl !== undefined) view.setBigUint64(8, data.lpLcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLcl))), true);
  // 0x10: pointer
  if (data?.lpLink !== undefined) view.setBigUint64(16, data.lpLink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLink))), true);
  // 0x18: u32
  if (data?.dwIntRefCnt !== undefined) view.setUint32(24, Number(data.dwIntRefCnt), true);
  // 0x1c: pad4
  return buf;
}

export class DDRAWI_DDRAWSURFACE_INTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpVtbl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpLcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpLink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwIntRefCnt(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set lpVtbl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpLcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpLink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwIntRefCnt(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDRAWSURFACE_GBL (size: 72)
 */
export interface DDRAWI_DDRAWSURFACE_GBL {
  /** u32 */
  dwRefCnt: number;
  /** u32 */
  dwGlobalFlags: number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue;
  /** usize */
  fpVidMem: bigint | number;
  /** _Anonymous4_e__Union */
  Anonymous4: Uint8Array | Deno.PointerValue;
  /** u16 */
  wHeight: number;
  /** u16 */
  wWidth: number;
  /** u32 */
  dwUsageCount: number;
  /** usize */
  dwReserved1: bigint | number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddpfSurface: Uint8Array | Deno.PointerValue;
}

export const sizeofDDRAWI_DDRAWSURFACE_GBL = 72;

export function allocDDRAWI_DDRAWSURFACE_GBL(data?: Partial<DDRAWI_DDRAWSURFACE_GBL>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDRAWSURFACE_GBL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRefCnt !== undefined) view.setUint32(0, Number(data.dwRefCnt), true);
  // 0x04: u32
  if (data?.dwGlobalFlags !== undefined) view.setUint32(4, Number(data.dwGlobalFlags), true);
  // 0x08: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(8, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x10: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(16, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x18: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(24, data.Anonymous3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous3))), true);
  // 0x20: usize
  if (data?.fpVidMem !== undefined) view.setBigUint64(32, BigInt(data.fpVidMem), true);
  // 0x28: pointer
  if (data?.Anonymous4 !== undefined) view.setBigUint64(40, data.Anonymous4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous4))), true);
  // 0x30: u16
  if (data?.wHeight !== undefined) view.setUint16(48, Number(data.wHeight), true);
  // 0x32: u16
  if (data?.wWidth !== undefined) view.setUint16(50, Number(data.wWidth), true);
  // 0x34: u32
  if (data?.dwUsageCount !== undefined) view.setUint32(52, Number(data.dwUsageCount), true);
  // 0x38: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(56, BigInt(data.dwReserved1), true);
  // 0x40: pointer
  if (data?.ddpfSurface !== undefined) view.setBigUint64(64, data.ddpfSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddpfSurface))), true);
  return buf;
}

export class DDRAWI_DDRAWSURFACE_GBLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwRefCnt(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwGlobalFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: usize
  get fpVidMem(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: pointer
  get Anonymous4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u16
  get wHeight(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get wWidth(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: u32
  get dwUsageCount(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: pointer
  get ddpfSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwRefCnt(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwGlobalFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: usize
  set fpVidMem(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set Anonymous4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u16
  set wHeight(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set wWidth(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: u32
  set dwUsageCount(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: pointer
  set ddpfSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDRAWSURFACE_GBL_MORE (size: 144)
 */
export interface DDRAWI_DDRAWSURFACE_GBL_MORE {
  /** u32 */
  dwSize: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  pPageTable: Deno.PointerValue | Uint8Array;
  /** u32 */
  cPages: number;
  /** usize */
  dwSavedDCContext: bigint | number;
  /** usize */
  fpAliasedVidMem: bigint | number;
  /** usize */
  dwDriverReserved: bigint | number;
  /** usize */
  dwHELReserved: bigint | number;
  /** u32 */
  cPageUnlocks: number;
  /** usize */
  hKernelSurface: bigint | number;
  /** u32 */
  dwKernelRefCnt: number;
  /** ptr */
  lpColorInfo: Deno.PointerValue | Uint8Array;
  /** usize */
  fpNTAlias: bigint | number;
  /** u32 */
  dwContentsStamp: number;
  /** ptr */
  lpvUnswappedDriverReserved: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDRAWReserved2: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDDRAWReserved1: number;
  /** u32 */
  dwDDRAWReserved2: number;
  /** usize */
  fpAliasOfVidMem: bigint | number;
}

export const sizeofDDRAWI_DDRAWSURFACE_GBL_MORE = 144;

export function allocDDRAWI_DDRAWSURFACE_GBL_MORE(data?: Partial<DDRAWI_DDRAWSURFACE_GBL_MORE>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDRAWSURFACE_GBL_MORE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x10: pointer
  if (data?.pPageTable !== undefined) view.setBigUint64(16, data.pPageTable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPageTable))), true);
  // 0x18: u32
  if (data?.cPages !== undefined) view.setUint32(24, Number(data.cPages), true);
  // 0x1c: pad4
  // 0x20: usize
  if (data?.dwSavedDCContext !== undefined) view.setBigUint64(32, BigInt(data.dwSavedDCContext), true);
  // 0x28: usize
  if (data?.fpAliasedVidMem !== undefined) view.setBigUint64(40, BigInt(data.fpAliasedVidMem), true);
  // 0x30: usize
  if (data?.dwDriverReserved !== undefined) view.setBigUint64(48, BigInt(data.dwDriverReserved), true);
  // 0x38: usize
  if (data?.dwHELReserved !== undefined) view.setBigUint64(56, BigInt(data.dwHELReserved), true);
  // 0x40: u32
  if (data?.cPageUnlocks !== undefined) view.setUint32(64, Number(data.cPageUnlocks), true);
  // 0x44: pad4
  // 0x48: usize
  if (data?.hKernelSurface !== undefined) view.setBigUint64(72, BigInt(data.hKernelSurface), true);
  // 0x50: u32
  if (data?.dwKernelRefCnt !== undefined) view.setUint32(80, Number(data.dwKernelRefCnt), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.lpColorInfo !== undefined) view.setBigUint64(88, data.lpColorInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpColorInfo))), true);
  // 0x60: usize
  if (data?.fpNTAlias !== undefined) view.setBigUint64(96, BigInt(data.fpNTAlias), true);
  // 0x68: u32
  if (data?.dwContentsStamp !== undefined) view.setUint32(104, Number(data.dwContentsStamp), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.lpvUnswappedDriverReserved !== undefined) view.setBigUint64(112, data.lpvUnswappedDriverReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpvUnswappedDriverReserved))), true);
  // 0x78: pointer
  if (data?.lpDDRAWReserved2 !== undefined) view.setBigUint64(120, data.lpDDRAWReserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDRAWReserved2))), true);
  // 0x80: u32
  if (data?.dwDDRAWReserved1 !== undefined) view.setUint32(128, Number(data.dwDDRAWReserved1), true);
  // 0x84: u32
  if (data?.dwDDRAWReserved2 !== undefined) view.setUint32(132, Number(data.dwDDRAWReserved2), true);
  // 0x88: usize
  if (data?.fpAliasOfVidMem !== undefined) view.setBigUint64(136, BigInt(data.fpAliasOfVidMem), true);
  return buf;
}

export class DDRAWI_DDRAWSURFACE_GBL_MOREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pPageTable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cPages(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: usize
  get dwSavedDCContext(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: usize
  get fpAliasedVidMem(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: usize
  get dwDriverReserved(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: usize
  get dwHELReserved(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u32
  get cPageUnlocks(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: usize
  get hKernelSurface(): bigint | number {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: u32
  get dwKernelRefCnt(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get lpColorInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: usize
  get fpNTAlias(): bigint | number {
    return Number(this.view.getBigUint64(96, true));
  }

  // 0x68: u32
  get dwContentsStamp(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get lpvUnswappedDriverReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get lpDDRAWReserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: u32
  get dwDDRAWReserved1(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwDDRAWReserved2(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: usize
  get fpAliasOfVidMem(): bigint | number {
    return Number(this.view.getBigUint64(136, true));
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pPageTable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cPages(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: usize
  set dwSavedDCContext(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: usize
  set fpAliasedVidMem(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: usize
  set dwDriverReserved(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: usize
  set dwHELReserved(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u32
  set cPageUnlocks(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: usize
  set hKernelSurface(value: bigint | number) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: u32
  set dwKernelRefCnt(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set lpColorInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: usize
  set fpNTAlias(value: bigint | number) {
    this.view.setBigUint64(96, BigInt(value), true);
  }

  // 0x68: u32
  set dwContentsStamp(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set lpvUnswappedDriverReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set lpDDRAWReserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: u32
  set dwDDRAWReserved1(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwDDRAWReserved2(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: usize
  set fpAliasOfVidMem(value: bigint | number) {
    this.view.setBigUint64(136, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDRAWSURFACE_MORE (size: 240)
 */
export interface DDRAWI_DDRAWSURFACE_MORE {
  /** u32 */
  dwSize: number;
  /** ptr */
  lpIUnknowns: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDD_lcl: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwPageLockCount: number;
  /** u32 */
  dwBytesAllocated: number;
  /** ptr */
  lpDD_int: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwMipMapCount: number;
  /** ptr */
  lpDDIClipper: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpHeapAliasInfo: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwOverlayFlags: number;
  /** ptr */
  rgjunc: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpddOverlayFX: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPSEX */
  ddsCapsEx: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwTextureStage: number;
  /** ptr */
  lpDDRAWReserved: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDRAWReserved2: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDrawReserved3: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDDrawReserved4: number;
  /** ptr */
  lpDDrawReserved5: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpGammaRamp: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpOriginalGammaRamp: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDrawReserved6: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwSurfaceHandle: number;
  /** array */
  qwDDrawReserved8: Deno.PointerValue;
  /** ptr */
  lpDDrawReserved9: Deno.PointerValue | Uint8Array;
  /** u32 */
  cSurfaces: number;
  /** ptr */
  pCreatedDDSurfaceDesc2: Deno.PointerValue | Uint8Array;
  /** ptr */
  slist: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFVF: number;
  /** ptr */
  lpVB: Deno.PointerValue | Uint8Array;
}

export const sizeofDDRAWI_DDRAWSURFACE_MORE = 240;

export function allocDDRAWI_DDRAWSURFACE_MORE(data?: Partial<DDRAWI_DDRAWSURFACE_MORE>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDRAWSURFACE_MORE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpIUnknowns !== undefined) view.setBigUint64(8, data.lpIUnknowns === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpIUnknowns))), true);
  // 0x10: pointer
  if (data?.lpDD_lcl !== undefined) view.setBigUint64(16, data.lpDD_lcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD_lcl))), true);
  // 0x18: u32
  if (data?.dwPageLockCount !== undefined) view.setUint32(24, Number(data.dwPageLockCount), true);
  // 0x1c: u32
  if (data?.dwBytesAllocated !== undefined) view.setUint32(28, Number(data.dwBytesAllocated), true);
  // 0x20: pointer
  if (data?.lpDD_int !== undefined) view.setBigUint64(32, data.lpDD_int === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD_int))), true);
  // 0x28: u32
  if (data?.dwMipMapCount !== undefined) view.setUint32(40, Number(data.dwMipMapCount), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lpDDIClipper !== undefined) view.setBigUint64(48, data.lpDDIClipper === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDIClipper))), true);
  // 0x38: pointer
  if (data?.lpHeapAliasInfo !== undefined) view.setBigUint64(56, data.lpHeapAliasInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpHeapAliasInfo))), true);
  // 0x40: u32
  if (data?.dwOverlayFlags !== undefined) view.setUint32(64, Number(data.dwOverlayFlags), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.rgjunc !== undefined) view.setBigUint64(72, data.rgjunc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rgjunc))), true);
  // 0x50: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(80, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x58: pointer
  if (data?.lpddOverlayFX !== undefined) view.setBigUint64(88, data.lpddOverlayFX === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddOverlayFX))), true);
  // 0x60: pointer
  if (data?.ddsCapsEx !== undefined) view.setBigUint64(96, data.ddsCapsEx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCapsEx))), true);
  // 0x68: u32
  if (data?.dwTextureStage !== undefined) view.setUint32(104, Number(data.dwTextureStage), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.lpDDRAWReserved !== undefined) view.setBigUint64(112, data.lpDDRAWReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDRAWReserved))), true);
  // 0x78: pointer
  if (data?.lpDDRAWReserved2 !== undefined) view.setBigUint64(120, data.lpDDRAWReserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDRAWReserved2))), true);
  // 0x80: pointer
  if (data?.lpDDrawReserved3 !== undefined) view.setBigUint64(128, data.lpDDrawReserved3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDrawReserved3))), true);
  // 0x88: u32
  if (data?.dwDDrawReserved4 !== undefined) view.setUint32(136, Number(data.dwDDrawReserved4), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.lpDDrawReserved5 !== undefined) view.setBigUint64(144, data.lpDDrawReserved5 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDrawReserved5))), true);
  // 0x98: pointer
  if (data?.lpGammaRamp !== undefined) view.setBigUint64(152, data.lpGammaRamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGammaRamp))), true);
  // 0xa0: pointer
  if (data?.lpOriginalGammaRamp !== undefined) view.setBigUint64(160, data.lpOriginalGammaRamp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOriginalGammaRamp))), true);
  // 0xa8: pointer
  if (data?.lpDDrawReserved6 !== undefined) view.setBigUint64(168, data.lpDDrawReserved6 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDrawReserved6))), true);
  // 0xb0: u32
  if (data?.dwSurfaceHandle !== undefined) view.setUint32(176, Number(data.dwSurfaceHandle), true);
  // 0xb4: pad4
  // 0xb8: pointer
  if (data?.qwDDrawReserved8 !== undefined) view.setBigUint64(184, data.qwDDrawReserved8 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.qwDDrawReserved8))), true);
  // 0xc0: pointer
  if (data?.lpDDrawReserved9 !== undefined) view.setBigUint64(192, data.lpDDrawReserved9 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDrawReserved9))), true);
  // 0xc8: u32
  if (data?.cSurfaces !== undefined) view.setUint32(200, Number(data.cSurfaces), true);
  // 0xcc: pad4
  // 0xd0: pointer
  if (data?.pCreatedDDSurfaceDesc2 !== undefined) view.setBigUint64(208, data.pCreatedDDSurfaceDesc2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCreatedDDSurfaceDesc2))), true);
  // 0xd8: pointer
  if (data?.slist !== undefined) view.setBigUint64(216, data.slist === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.slist))), true);
  // 0xe0: u32
  if (data?.dwFVF !== undefined) view.setUint32(224, Number(data.dwFVF), true);
  // 0xe4: pad4
  // 0xe8: pointer
  if (data?.lpVB !== undefined) view.setBigUint64(232, data.lpVB === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVB))), true);
  return buf;
}

export class DDRAWI_DDRAWSURFACE_MOREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpIUnknowns(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpDD_lcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwPageLockCount(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwBytesAllocated(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get lpDD_int(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwMipMapCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lpDDIClipper(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpHeapAliasInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get dwOverlayFlags(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get rgjunc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get lpddOverlayFX(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get ddsCapsEx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get dwTextureStage(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get lpDDRAWReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get lpDDRAWReserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get lpDDrawReserved3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: u32
  get dwDDrawReserved4(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  get lpDDrawReserved5(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get lpGammaRamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get lpOriginalGammaRamp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: pointer
  get lpDDrawReserved6(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: u32
  get dwSurfaceHandle(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: pad4

  // 0xb8: pointer
  get qwDDrawReserved8(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(184, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc0: pointer
  get lpDDrawReserved9(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: u32
  get cSurfaces(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: pad4

  // 0xd0: pointer
  get pCreatedDDSurfaceDesc2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(208, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xd8: pointer
  get slist(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: u32
  get dwFVF(): number {
    return this.view.getUint32(224, true);
  }

  // 0xe4: pad4

  // 0xe8: pointer
  get lpVB(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(232, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpIUnknowns(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpDD_lcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwPageLockCount(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwBytesAllocated(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set lpDD_int(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwMipMapCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lpDDIClipper(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpHeapAliasInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set dwOverlayFlags(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set rgjunc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set lpddOverlayFX(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set ddsCapsEx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set dwTextureStage(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set lpDDRAWReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set lpDDRAWReserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set lpDDrawReserved3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: u32
  set dwDDrawReserved4(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: pad4

  // 0x90: pointer
  set lpDDrawReserved5(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set lpGammaRamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set lpOriginalGammaRamp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: pointer
  set lpDDrawReserved6(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: u32
  set dwSurfaceHandle(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: pad4

  // 0xb8: pointer
  set qwDDrawReserved8(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc0: pointer
  set lpDDrawReserved9(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: u32
  set cSurfaces(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: pad4

  // 0xd0: pointer
  set pCreatedDDSurfaceDesc2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(208, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xd8: pointer
  set slist(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: u32
  set dwFVF(value: number) {
    this.view.setUint32(224, value, true);
  }

  // 0xe4: pad4

  // 0xe8: pointer
  set lpVB(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(232, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDRAWSURFACE_LCL (size: 184)
 */
export interface DDRAWI_DDRAWSURFACE_LCL {
  /** ptr */
  lpSurfMore: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpGbl: Deno.PointerValue | Uint8Array;
  /** usize */
  hDDSurface: bigint | number;
  /** ptr */
  lpAttachList: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpAttachListFrom: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwLocalRefCnt: number;
  /** u32 */
  dwProcessId: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsCaps: Uint8Array | Deno.PointerValue;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwModeCreatedIn: number;
  /** u32 */
  dwBackBufferCount: number;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckCKDestBlt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckCKSrcBlt: Uint8Array | Deno.PointerValue;
  /** usize */
  hDC: bigint | number;
  /** usize */
  dwReserved1: bigint | number;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckCKSrcOverlay: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckCKDestOverlay: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpSurfaceOverlaying: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.DBLNODE */
  dbnOverlayNode: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcOverlaySrc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECT */
  rcOverlayDest: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwClrXparent: number;
  /** u32 */
  dwAlpha: number;
  /** i32 */
  lOverlayX: number;
  /** i32 */
  lOverlayY: number;
}

export const sizeofDDRAWI_DDRAWSURFACE_LCL = 184;

export function allocDDRAWI_DDRAWSURFACE_LCL(data?: Partial<DDRAWI_DDRAWSURFACE_LCL>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDRAWSURFACE_LCL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpSurfMore !== undefined) view.setBigUint64(0, data.lpSurfMore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfMore))), true);
  // 0x08: pointer
  if (data?.lpGbl !== undefined) view.setBigUint64(8, data.lpGbl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGbl))), true);
  // 0x10: usize
  if (data?.hDDSurface !== undefined) view.setBigUint64(16, BigInt(data.hDDSurface), true);
  // 0x18: pointer
  if (data?.lpAttachList !== undefined) view.setBigUint64(24, data.lpAttachList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpAttachList))), true);
  // 0x20: pointer
  if (data?.lpAttachListFrom !== undefined) view.setBigUint64(32, data.lpAttachListFrom === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpAttachListFrom))), true);
  // 0x28: u32
  if (data?.dwLocalRefCnt !== undefined) view.setUint32(40, Number(data.dwLocalRefCnt), true);
  // 0x2c: u32
  if (data?.dwProcessId !== undefined) view.setUint32(44, Number(data.dwProcessId), true);
  // 0x30: u32
  if (data?.dwFlags !== undefined) view.setUint32(48, Number(data.dwFlags), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(56, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  // 0x40: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(64, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x48: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(72, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x50: u32
  if (data?.dwModeCreatedIn !== undefined) view.setUint32(80, Number(data.dwModeCreatedIn), true);
  // 0x54: u32
  if (data?.dwBackBufferCount !== undefined) view.setUint32(84, Number(data.dwBackBufferCount), true);
  // 0x58: pointer
  if (data?.ddckCKDestBlt !== undefined) view.setBigUint64(88, data.ddckCKDestBlt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckCKDestBlt))), true);
  // 0x60: pointer
  if (data?.ddckCKSrcBlt !== undefined) view.setBigUint64(96, data.ddckCKSrcBlt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckCKSrcBlt))), true);
  // 0x68: usize
  if (data?.hDC !== undefined) view.setBigUint64(104, BigInt(data.hDC), true);
  // 0x70: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(112, BigInt(data.dwReserved1), true);
  // 0x78: pointer
  if (data?.ddckCKSrcOverlay !== undefined) view.setBigUint64(120, data.ddckCKSrcOverlay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckCKSrcOverlay))), true);
  // 0x80: pointer
  if (data?.ddckCKDestOverlay !== undefined) view.setBigUint64(128, data.ddckCKDestOverlay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckCKDestOverlay))), true);
  // 0x88: pointer
  if (data?.lpSurfaceOverlaying !== undefined) view.setBigUint64(136, data.lpSurfaceOverlaying === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfaceOverlaying))), true);
  // 0x90: pointer
  if (data?.dbnOverlayNode !== undefined) view.setBigUint64(144, data.dbnOverlayNode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dbnOverlayNode))), true);
  // 0x98: pointer
  if (data?.rcOverlaySrc !== undefined) view.setBigUint64(152, data.rcOverlaySrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcOverlaySrc))), true);
  // 0xa0: pointer
  if (data?.rcOverlayDest !== undefined) view.setBigUint64(160, data.rcOverlayDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcOverlayDest))), true);
  // 0xa8: u32
  if (data?.dwClrXparent !== undefined) view.setUint32(168, Number(data.dwClrXparent), true);
  // 0xac: u32
  if (data?.dwAlpha !== undefined) view.setUint32(172, Number(data.dwAlpha), true);
  // 0xb0: i32
  if (data?.lOverlayX !== undefined) view.setInt32(176, Number(data.lOverlayX), true);
  // 0xb4: i32
  if (data?.lOverlayY !== undefined) view.setInt32(180, Number(data.lOverlayY), true);
  return buf;
}

export class DDRAWI_DDRAWSURFACE_LCLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpSurfMore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpGbl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get hDDSurface(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get lpAttachList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpAttachListFrom(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwLocalRefCnt(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwProcessId(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwFlags(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get dwModeCreatedIn(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwBackBufferCount(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: pointer
  get ddckCKDestBlt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get ddckCKSrcBlt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: usize
  get hDC(): bigint | number {
    return Number(this.view.getBigUint64(104, true));
  }

  // 0x70: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(112, true));
  }

  // 0x78: pointer
  get ddckCKSrcOverlay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get ddckCKDestOverlay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get lpSurfaceOverlaying(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get dbnOverlayNode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get rcOverlaySrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get rcOverlayDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: u32
  get dwClrXparent(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: u32
  get dwAlpha(): number {
    return this.view.getUint32(172, true);
  }

  // 0xb0: i32
  get lOverlayX(): number {
    return this.view.getInt32(176, true);
  }

  // 0xb4: i32
  get lOverlayY(): number {
    return this.view.getInt32(180, true);
  }

  // 0x00: pointer
  set lpSurfMore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpGbl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set hDDSurface(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set lpAttachList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpAttachListFrom(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwLocalRefCnt(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwProcessId(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwFlags(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set dwModeCreatedIn(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwBackBufferCount(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: pointer
  set ddckCKDestBlt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set ddckCKSrcBlt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: usize
  set hDC(value: bigint | number) {
    this.view.setBigUint64(104, BigInt(value), true);
  }

  // 0x70: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(112, BigInt(value), true);
  }

  // 0x78: pointer
  set ddckCKSrcOverlay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set ddckCKDestOverlay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set lpSurfaceOverlaying(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set dbnOverlayNode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set rcOverlaySrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set rcOverlayDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: u32
  set dwClrXparent(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: u32
  set dwAlpha(value: number) {
    this.view.setUint32(172, value, true);
  }

  // 0xb0: i32
  set lOverlayX(value: number) {
    this.view.setInt32(176, value, true);
  }

  // 0xb4: i32
  set lOverlayY(value: number) {
    this.view.setInt32(180, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHALMODEINFO (size: 40)
 */
export interface DDHALMODEINFO {
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** i32 */
  lPitch: number;
  /** u32 */
  dwBPP: number;
  /** u16 */
  wFlags: number;
  /** u16 */
  wRefreshRate: number;
  /** u32 */
  dwRBitMask: number;
  /** u32 */
  dwGBitMask: number;
  /** u32 */
  dwBBitMask: number;
  /** u32 */
  dwAlphaBitMask: number;
}

export const sizeofDDHALMODEINFO = 40;

export function allocDDHALMODEINFO(data?: Partial<DDHALMODEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHALMODEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwWidth !== undefined) view.setUint32(0, Number(data.dwWidth), true);
  // 0x04: u32
  if (data?.dwHeight !== undefined) view.setUint32(4, Number(data.dwHeight), true);
  // 0x08: i32
  if (data?.lPitch !== undefined) view.setInt32(8, Number(data.lPitch), true);
  // 0x0c: u32
  if (data?.dwBPP !== undefined) view.setUint32(12, Number(data.dwBPP), true);
  // 0x10: u16
  if (data?.wFlags !== undefined) view.setUint16(16, Number(data.wFlags), true);
  // 0x12: u16
  if (data?.wRefreshRate !== undefined) view.setUint16(18, Number(data.wRefreshRate), true);
  // 0x14: u32
  if (data?.dwRBitMask !== undefined) view.setUint32(20, Number(data.dwRBitMask), true);
  // 0x18: u32
  if (data?.dwGBitMask !== undefined) view.setUint32(24, Number(data.dwGBitMask), true);
  // 0x1c: u32
  if (data?.dwBBitMask !== undefined) view.setUint32(28, Number(data.dwBBitMask), true);
  // 0x20: u32
  if (data?.dwAlphaBitMask !== undefined) view.setUint32(32, Number(data.dwAlphaBitMask), true);
  // 0x24: pad4
  return buf;
}

export class DDHALMODEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwWidth(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHeight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get lPitch(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: u32
  get dwBPP(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u16
  get wFlags(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: u16
  get wRefreshRate(): number {
    return this.view.getUint16(18, true);
  }

  // 0x14: u32
  get dwRBitMask(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwGBitMask(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwBBitMask(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwAlphaBitMask(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwWidth(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHeight(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set lPitch(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: u32
  set dwBPP(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u16
  set wFlags(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: u16
  set wRefreshRate(value: number) {
    this.view.setUint16(18, value, true);
  }

  // 0x14: u32
  set dwRBitMask(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwGBitMask(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwBBitMask(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwAlphaBitMask(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DIRECTDRAW_INT (size: 32)
 */
export interface DDRAWI_DIRECTDRAW_INT {
  /** ptr */
  lpVtbl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpLcl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpLink: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwIntRefCnt: number;
}

export const sizeofDDRAWI_DIRECTDRAW_INT = 32;

export function allocDDRAWI_DIRECTDRAW_INT(data?: Partial<DDRAWI_DIRECTDRAW_INT>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DIRECTDRAW_INT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpVtbl !== undefined) view.setBigUint64(0, data.lpVtbl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVtbl))), true);
  // 0x08: pointer
  if (data?.lpLcl !== undefined) view.setBigUint64(8, data.lpLcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLcl))), true);
  // 0x10: pointer
  if (data?.lpLink !== undefined) view.setBigUint64(16, data.lpLink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLink))), true);
  // 0x18: u32
  if (data?.dwIntRefCnt !== undefined) view.setUint32(24, Number(data.dwIntRefCnt), true);
  // 0x1c: pad4
  return buf;
}

export class DDRAWI_DIRECTDRAW_INTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpVtbl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpLcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpLink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwIntRefCnt(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set lpVtbl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpLcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpLink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwIntRefCnt(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_CALLBACKS (size: 176)
 */
export interface DDHAL_CALLBACKS {
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDCALLBACKS */
  cbDDCallbacks: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDSURFACECALLBACKS */
  cbDDSurfaceCallbacks: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDPALETTECALLBACKS */
  cbDDPaletteCallbacks: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDCALLBACKS */
  HALDD: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDSURFACECALLBACKS */
  HALDDSurface: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDPALETTECALLBACKS */
  HALDDPalette: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDCALLBACKS */
  HELDD: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDSURFACECALLBACKS */
  HELDDSurface: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDPALETTECALLBACKS */
  HELDDPalette: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDEXEBUFCALLBACKS */
  cbDDExeBufCallbacks: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDEXEBUFCALLBACKS */
  HALDDExeBuf: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDEXEBUFCALLBACKS */
  HELDDExeBuf: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDVIDEOPORTCALLBACKS */
  cbDDVideoPortCallbacks: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDVIDEOPORTCALLBACKS */
  HALDDVideoPort: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDCOLORCONTROLCALLBACKS */
  cbDDColorControlCallbacks: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDCOLORCONTROLCALLBACKS */
  HALDDColorControl: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDMISCELLANEOUSCALLBACKS */
  cbDDMiscellaneousCallbacks: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDMISCELLANEOUSCALLBACKS */
  HALDDMiscellaneous: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDKERNELCALLBACKS */
  cbDDKernelCallbacks: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDKERNELCALLBACKS */
  HALDDKernel: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDMOTIONCOMPCALLBACKS */
  cbDDMotionCompCallbacks: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDHAL_DDMOTIONCOMPCALLBACKS */
  HALDDMotionComp: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_CALLBACKS = 176;

export function allocDDHAL_CALLBACKS(data?: Partial<DDHAL_CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.cbDDCallbacks !== undefined) view.setBigUint64(0, data.cbDDCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cbDDCallbacks))), true);
  // 0x08: pointer
  if (data?.cbDDSurfaceCallbacks !== undefined) view.setBigUint64(8, data.cbDDSurfaceCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cbDDSurfaceCallbacks))), true);
  // 0x10: pointer
  if (data?.cbDDPaletteCallbacks !== undefined) view.setBigUint64(16, data.cbDDPaletteCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cbDDPaletteCallbacks))), true);
  // 0x18: pointer
  if (data?.HALDD !== undefined) view.setBigUint64(24, data.HALDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HALDD))), true);
  // 0x20: pointer
  if (data?.HALDDSurface !== undefined) view.setBigUint64(32, data.HALDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HALDDSurface))), true);
  // 0x28: pointer
  if (data?.HALDDPalette !== undefined) view.setBigUint64(40, data.HALDDPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HALDDPalette))), true);
  // 0x30: pointer
  if (data?.HELDD !== undefined) view.setBigUint64(48, data.HELDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HELDD))), true);
  // 0x38: pointer
  if (data?.HELDDSurface !== undefined) view.setBigUint64(56, data.HELDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HELDDSurface))), true);
  // 0x40: pointer
  if (data?.HELDDPalette !== undefined) view.setBigUint64(64, data.HELDDPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HELDDPalette))), true);
  // 0x48: pointer
  if (data?.cbDDExeBufCallbacks !== undefined) view.setBigUint64(72, data.cbDDExeBufCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cbDDExeBufCallbacks))), true);
  // 0x50: pointer
  if (data?.HALDDExeBuf !== undefined) view.setBigUint64(80, data.HALDDExeBuf === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HALDDExeBuf))), true);
  // 0x58: pointer
  if (data?.HELDDExeBuf !== undefined) view.setBigUint64(88, data.HELDDExeBuf === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HELDDExeBuf))), true);
  // 0x60: pointer
  if (data?.cbDDVideoPortCallbacks !== undefined) view.setBigUint64(96, data.cbDDVideoPortCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cbDDVideoPortCallbacks))), true);
  // 0x68: pointer
  if (data?.HALDDVideoPort !== undefined) view.setBigUint64(104, data.HALDDVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HALDDVideoPort))), true);
  // 0x70: pointer
  if (data?.cbDDColorControlCallbacks !== undefined) view.setBigUint64(112, data.cbDDColorControlCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cbDDColorControlCallbacks))), true);
  // 0x78: pointer
  if (data?.HALDDColorControl !== undefined) view.setBigUint64(120, data.HALDDColorControl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HALDDColorControl))), true);
  // 0x80: pointer
  if (data?.cbDDMiscellaneousCallbacks !== undefined) view.setBigUint64(128, data.cbDDMiscellaneousCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cbDDMiscellaneousCallbacks))), true);
  // 0x88: pointer
  if (data?.HALDDMiscellaneous !== undefined) view.setBigUint64(136, data.HALDDMiscellaneous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HALDDMiscellaneous))), true);
  // 0x90: pointer
  if (data?.cbDDKernelCallbacks !== undefined) view.setBigUint64(144, data.cbDDKernelCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cbDDKernelCallbacks))), true);
  // 0x98: pointer
  if (data?.HALDDKernel !== undefined) view.setBigUint64(152, data.HALDDKernel === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HALDDKernel))), true);
  // 0xa0: pointer
  if (data?.cbDDMotionCompCallbacks !== undefined) view.setBigUint64(160, data.cbDDMotionCompCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cbDDMotionCompCallbacks))), true);
  // 0xa8: pointer
  if (data?.HALDDMotionComp !== undefined) view.setBigUint64(168, data.HALDDMotionComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.HALDDMotionComp))), true);
  return buf;
}

export class DDHAL_CALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get cbDDCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get cbDDSurfaceCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get cbDDPaletteCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get HALDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get HALDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get HALDDPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get HELDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get HELDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get HELDDPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get cbDDExeBufCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get HALDDExeBuf(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get HELDDExeBuf(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get cbDDVideoPortCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get HALDDVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get cbDDColorControlCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get HALDDColorControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get cbDDMiscellaneousCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get HALDDMiscellaneous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get cbDDKernelCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get HALDDKernel(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get cbDDMotionCompCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: pointer
  get HALDDMotionComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set cbDDCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set cbDDSurfaceCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set cbDDPaletteCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set HALDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set HALDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set HALDDPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set HELDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set HELDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set HELDDPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set cbDDExeBufCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set HALDDExeBuf(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set HELDDExeBuf(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set cbDDVideoPortCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set HALDDVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set cbDDColorControlCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set HALDDColorControl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set cbDDMiscellaneousCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set HALDDMiscellaneous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set cbDDKernelCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set HALDDKernel(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set cbDDMotionCompCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: pointer
  set HALDDMotionComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDCORECAPS (size: 240)
 */
export interface DDCORECAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwCaps2: number;
  /** u32 */
  dwCKeyCaps: number;
  /** u32 */
  dwFXCaps: number;
  /** u32 */
  dwFXAlphaCaps: number;
  /** u32 */
  dwPalCaps: number;
  /** u32 */
  dwSVCaps: number;
  /** u32 */
  dwAlphaBltConstBitDepths: number;
  /** u32 */
  dwAlphaBltPixelBitDepths: number;
  /** u32 */
  dwAlphaBltSurfaceBitDepths: number;
  /** u32 */
  dwAlphaOverlayConstBitDepths: number;
  /** u32 */
  dwAlphaOverlayPixelBitDepths: number;
  /** u32 */
  dwAlphaOverlaySurfaceBitDepths: number;
  /** u32 */
  dwZBufferBitDepths: number;
  /** u32 */
  dwVidMemTotal: number;
  /** u32 */
  dwVidMemFree: number;
  /** u32 */
  dwMaxVisibleOverlays: number;
  /** u32 */
  dwCurrVisibleOverlays: number;
  /** u32 */
  dwNumFourCCCodes: number;
  /** u32 */
  dwAlignBoundarySrc: number;
  /** u32 */
  dwAlignSizeSrc: number;
  /** u32 */
  dwAlignBoundaryDest: number;
  /** u32 */
  dwAlignSizeDest: number;
  /** u32 */
  dwAlignStrideAlign: number;
  /** array */
  dwRops: Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsCaps: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwMinOverlayStretch: number;
  /** u32 */
  dwMaxOverlayStretch: number;
  /** u32 */
  dwMinLiveVideoStretch: number;
  /** u32 */
  dwMaxLiveVideoStretch: number;
  /** u32 */
  dwMinHwCodecStretch: number;
  /** u32 */
  dwMaxHwCodecStretch: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwReserved3: number;
  /** u32 */
  dwSVBCaps: number;
  /** u32 */
  dwSVBCKeyCaps: number;
  /** u32 */
  dwSVBFXCaps: number;
  /** array */
  dwSVBRops: Deno.PointerValue;
  /** u32 */
  dwVSBCaps: number;
  /** u32 */
  dwVSBCKeyCaps: number;
  /** u32 */
  dwVSBFXCaps: number;
  /** array */
  dwVSBRops: Deno.PointerValue;
  /** u32 */
  dwSSBCaps: number;
  /** u32 */
  dwSSBCKeyCaps: number;
  /** u32 */
  dwSSBFXCaps: number;
  /** array */
  dwSSBRops: Deno.PointerValue;
  /** u32 */
  dwMaxVideoPorts: number;
  /** u32 */
  dwCurrVideoPorts: number;
  /** u32 */
  dwSVBCaps2: number;
}

export const sizeofDDCORECAPS = 240;

export function allocDDCORECAPS(data?: Partial<DDCORECAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDCORECAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCaps !== undefined) view.setUint32(4, Number(data.dwCaps), true);
  // 0x08: u32
  if (data?.dwCaps2 !== undefined) view.setUint32(8, Number(data.dwCaps2), true);
  // 0x0c: u32
  if (data?.dwCKeyCaps !== undefined) view.setUint32(12, Number(data.dwCKeyCaps), true);
  // 0x10: u32
  if (data?.dwFXCaps !== undefined) view.setUint32(16, Number(data.dwFXCaps), true);
  // 0x14: u32
  if (data?.dwFXAlphaCaps !== undefined) view.setUint32(20, Number(data.dwFXAlphaCaps), true);
  // 0x18: u32
  if (data?.dwPalCaps !== undefined) view.setUint32(24, Number(data.dwPalCaps), true);
  // 0x1c: u32
  if (data?.dwSVCaps !== undefined) view.setUint32(28, Number(data.dwSVCaps), true);
  // 0x20: u32
  if (data?.dwAlphaBltConstBitDepths !== undefined) view.setUint32(32, Number(data.dwAlphaBltConstBitDepths), true);
  // 0x24: u32
  if (data?.dwAlphaBltPixelBitDepths !== undefined) view.setUint32(36, Number(data.dwAlphaBltPixelBitDepths), true);
  // 0x28: u32
  if (data?.dwAlphaBltSurfaceBitDepths !== undefined) view.setUint32(40, Number(data.dwAlphaBltSurfaceBitDepths), true);
  // 0x2c: u32
  if (data?.dwAlphaOverlayConstBitDepths !== undefined) view.setUint32(44, Number(data.dwAlphaOverlayConstBitDepths), true);
  // 0x30: u32
  if (data?.dwAlphaOverlayPixelBitDepths !== undefined) view.setUint32(48, Number(data.dwAlphaOverlayPixelBitDepths), true);
  // 0x34: u32
  if (data?.dwAlphaOverlaySurfaceBitDepths !== undefined) view.setUint32(52, Number(data.dwAlphaOverlaySurfaceBitDepths), true);
  // 0x38: u32
  if (data?.dwZBufferBitDepths !== undefined) view.setUint32(56, Number(data.dwZBufferBitDepths), true);
  // 0x3c: u32
  if (data?.dwVidMemTotal !== undefined) view.setUint32(60, Number(data.dwVidMemTotal), true);
  // 0x40: u32
  if (data?.dwVidMemFree !== undefined) view.setUint32(64, Number(data.dwVidMemFree), true);
  // 0x44: u32
  if (data?.dwMaxVisibleOverlays !== undefined) view.setUint32(68, Number(data.dwMaxVisibleOverlays), true);
  // 0x48: u32
  if (data?.dwCurrVisibleOverlays !== undefined) view.setUint32(72, Number(data.dwCurrVisibleOverlays), true);
  // 0x4c: u32
  if (data?.dwNumFourCCCodes !== undefined) view.setUint32(76, Number(data.dwNumFourCCCodes), true);
  // 0x50: u32
  if (data?.dwAlignBoundarySrc !== undefined) view.setUint32(80, Number(data.dwAlignBoundarySrc), true);
  // 0x54: u32
  if (data?.dwAlignSizeSrc !== undefined) view.setUint32(84, Number(data.dwAlignSizeSrc), true);
  // 0x58: u32
  if (data?.dwAlignBoundaryDest !== undefined) view.setUint32(88, Number(data.dwAlignBoundaryDest), true);
  // 0x5c: u32
  if (data?.dwAlignSizeDest !== undefined) view.setUint32(92, Number(data.dwAlignSizeDest), true);
  // 0x60: u32
  if (data?.dwAlignStrideAlign !== undefined) view.setUint32(96, Number(data.dwAlignStrideAlign), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.dwRops !== undefined) view.setBigUint64(104, data.dwRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwRops))), true);
  // 0x70: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(112, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  // 0x78: u32
  if (data?.dwMinOverlayStretch !== undefined) view.setUint32(120, Number(data.dwMinOverlayStretch), true);
  // 0x7c: u32
  if (data?.dwMaxOverlayStretch !== undefined) view.setUint32(124, Number(data.dwMaxOverlayStretch), true);
  // 0x80: u32
  if (data?.dwMinLiveVideoStretch !== undefined) view.setUint32(128, Number(data.dwMinLiveVideoStretch), true);
  // 0x84: u32
  if (data?.dwMaxLiveVideoStretch !== undefined) view.setUint32(132, Number(data.dwMaxLiveVideoStretch), true);
  // 0x88: u32
  if (data?.dwMinHwCodecStretch !== undefined) view.setUint32(136, Number(data.dwMinHwCodecStretch), true);
  // 0x8c: u32
  if (data?.dwMaxHwCodecStretch !== undefined) view.setUint32(140, Number(data.dwMaxHwCodecStretch), true);
  // 0x90: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(144, Number(data.dwReserved1), true);
  // 0x94: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(148, Number(data.dwReserved2), true);
  // 0x98: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(152, Number(data.dwReserved3), true);
  // 0x9c: u32
  if (data?.dwSVBCaps !== undefined) view.setUint32(156, Number(data.dwSVBCaps), true);
  // 0xa0: u32
  if (data?.dwSVBCKeyCaps !== undefined) view.setUint32(160, Number(data.dwSVBCKeyCaps), true);
  // 0xa4: u32
  if (data?.dwSVBFXCaps !== undefined) view.setUint32(164, Number(data.dwSVBFXCaps), true);
  // 0xa8: pointer
  if (data?.dwSVBRops !== undefined) view.setBigUint64(168, data.dwSVBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwSVBRops))), true);
  // 0xb0: u32
  if (data?.dwVSBCaps !== undefined) view.setUint32(176, Number(data.dwVSBCaps), true);
  // 0xb4: u32
  if (data?.dwVSBCKeyCaps !== undefined) view.setUint32(180, Number(data.dwVSBCKeyCaps), true);
  // 0xb8: u32
  if (data?.dwVSBFXCaps !== undefined) view.setUint32(184, Number(data.dwVSBFXCaps), true);
  // 0xbc: pad4
  // 0xc0: pointer
  if (data?.dwVSBRops !== undefined) view.setBigUint64(192, data.dwVSBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwVSBRops))), true);
  // 0xc8: u32
  if (data?.dwSSBCaps !== undefined) view.setUint32(200, Number(data.dwSSBCaps), true);
  // 0xcc: u32
  if (data?.dwSSBCKeyCaps !== undefined) view.setUint32(204, Number(data.dwSSBCKeyCaps), true);
  // 0xd0: u32
  if (data?.dwSSBFXCaps !== undefined) view.setUint32(208, Number(data.dwSSBFXCaps), true);
  // 0xd4: pad4
  // 0xd8: pointer
  if (data?.dwSSBRops !== undefined) view.setBigUint64(216, data.dwSSBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwSSBRops))), true);
  // 0xe0: u32
  if (data?.dwMaxVideoPorts !== undefined) view.setUint32(224, Number(data.dwMaxVideoPorts), true);
  // 0xe4: u32
  if (data?.dwCurrVideoPorts !== undefined) view.setUint32(228, Number(data.dwCurrVideoPorts), true);
  // 0xe8: u32
  if (data?.dwSVBCaps2 !== undefined) view.setUint32(232, Number(data.dwSVBCaps2), true);
  // 0xec: pad4
  return buf;
}

export class DDCORECAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCaps2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwCKeyCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwFXCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFXAlphaCaps(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwPalCaps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwSVCaps(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwAlphaBltConstBitDepths(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwAlphaBltPixelBitDepths(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwAlphaBltSurfaceBitDepths(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwAlphaOverlayConstBitDepths(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwAlphaOverlayPixelBitDepths(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwAlphaOverlaySurfaceBitDepths(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwZBufferBitDepths(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwVidMemTotal(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwVidMemFree(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwMaxVisibleOverlays(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwCurrVisibleOverlays(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwNumFourCCCodes(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwAlignBoundarySrc(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwAlignSizeSrc(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwAlignBoundaryDest(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwAlignSizeDest(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get dwAlignStrideAlign(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get dwRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u32
  get dwMinOverlayStretch(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get dwMaxOverlayStretch(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get dwMinLiveVideoStretch(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwMaxLiveVideoStretch(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get dwMinHwCodecStretch(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get dwMaxHwCodecStretch(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get dwReserved1(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get dwReserved2(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get dwReserved3(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get dwSVBCaps(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get dwSVBCKeyCaps(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get dwSVBFXCaps(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: pointer
  get dwSVBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: u32
  get dwVSBCaps(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: u32
  get dwVSBCKeyCaps(): number {
    return this.view.getUint32(180, true);
  }

  // 0xb8: u32
  get dwVSBFXCaps(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  get dwVSBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: u32
  get dwSSBCaps(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get dwSSBCKeyCaps(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: u32
  get dwSSBFXCaps(): number {
    return this.view.getUint32(208, true);
  }

  // 0xd4: pad4

  // 0xd8: pointer
  get dwSSBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: u32
  get dwMaxVideoPorts(): number {
    return this.view.getUint32(224, true);
  }

  // 0xe4: u32
  get dwCurrVideoPorts(): number {
    return this.view.getUint32(228, true);
  }

  // 0xe8: u32
  get dwSVBCaps2(): number {
    return this.view.getUint32(232, true);
  }

  // 0xec: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCaps2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwCKeyCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwFXCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFXAlphaCaps(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwPalCaps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwSVCaps(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwAlphaBltConstBitDepths(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwAlphaBltPixelBitDepths(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwAlphaBltSurfaceBitDepths(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwAlphaOverlayConstBitDepths(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwAlphaOverlayPixelBitDepths(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwAlphaOverlaySurfaceBitDepths(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwZBufferBitDepths(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwVidMemTotal(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwVidMemFree(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwMaxVisibleOverlays(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwCurrVisibleOverlays(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwNumFourCCCodes(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwAlignBoundarySrc(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwAlignSizeSrc(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwAlignBoundaryDest(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwAlignSizeDest(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set dwAlignStrideAlign(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set dwRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: u32
  set dwMinOverlayStretch(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set dwMaxOverlayStretch(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set dwMinLiveVideoStretch(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwMaxLiveVideoStretch(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set dwMinHwCodecStretch(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set dwMaxHwCodecStretch(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set dwReserved1(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set dwReserved2(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set dwReserved3(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set dwSVBCaps(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set dwSVBCKeyCaps(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set dwSVBFXCaps(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: pointer
  set dwSVBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: u32
  set dwVSBCaps(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: u32
  set dwVSBCKeyCaps(value: number) {
    this.view.setUint32(180, value, true);
  }

  // 0xb8: u32
  set dwVSBFXCaps(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  set dwVSBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: u32
  set dwSSBCaps(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set dwSSBCKeyCaps(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: u32
  set dwSSBFXCaps(value: number) {
    this.view.setUint32(208, value, true);
  }

  // 0xd4: pad4

  // 0xd8: pointer
  set dwSSBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: u32
  set dwMaxVideoPorts(value: number) {
    this.view.setUint32(224, value, true);
  }

  // 0xe4: u32
  set dwCurrVideoPorts(value: number) {
    this.view.setUint32(228, value, true);
  }

  // 0xe8: u32
  set dwSVBCaps2(value: number) {
    this.view.setUint32(232, value, true);
  }

  // 0xec: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DIRECTDRAW_GBL (size: 496)
 */
export interface DDRAWI_DIRECTDRAW_GBL {
  /** u32 */
  dwRefCnt: number;
  /** u32 */
  dwFlags: number;
  /** usize */
  fpPrimaryOrig: bigint | number;
  /** Windows.Win32.Graphics.DirectDraw.DDCORECAPS */
  ddCaps: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwInternal1: number;
  /** array */
  dwUnused1: Deno.PointerValue;
  /** ptr */
  lpDDCBtmp: Deno.PointerValue | Uint8Array;
  /** ptr */
  dsList: Deno.PointerValue | Uint8Array;
  /** ptr */
  palList: Deno.PointerValue | Uint8Array;
  /** ptr */
  clipperList: Deno.PointerValue | Uint8Array;
  /** ptr */
  lp16DD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwMaxOverlays: number;
  /** u32 */
  dwCurrOverlays: number;
  /** u32 */
  dwMonitorFrequency: number;
  /** Windows.Win32.Graphics.DirectDraw.DDCORECAPS */
  ddHELCaps: Uint8Array | Deno.PointerValue;
  /** array */
  dwUnused2: Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckCKDestOverlay: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ddckCKSrcOverlay: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.VIDMEMINFO */
  vmiData: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpDriverHandle: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpExclusiveOwner: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwModeIndex: number;
  /** u32 */
  dwModeIndexOrig: number;
  /** u32 */
  dwNumFourCC: number;
  /** ptr */
  lpdwFourCC: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumModes: number;
  /** ptr */
  lpModeInfo: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.PROCESS_LIST */
  plProcessList: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwSurfaceLockCount: number;
  /** u32 */
  dwAliasedLockCnt: number;
  /** usize */
  dwReserved3: bigint | number;
  /** usize */
  hDD: bigint | number;
  /** array */
  cObsolete: Deno.PointerValue;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** Windows.Win32.Graphics.DirectDraw.DBLNODE */
  dbnOverlayRoot: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpwPDeviceFlags: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwPDevice: number;
  /** u32 */
  dwWin16LockCnt: number;
  /** u32 */
  dwUnused3: number;
  /** u32 */
  hInstance: number;
  /** u32 */
  dwEvent16: number;
  /** u32 */
  dwSaveNumModes: number;
  /** usize */
  lpD3DGlobalDriverData: bigint | number;
  /** usize */
  lpD3DHALCallbacks: bigint | number;
  /** Windows.Win32.Graphics.DirectDraw.DDCORECAPS */
  ddBothCaps: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpDDVideoPortCaps: Deno.PointerValue | Uint8Array;
  /** ptr */
  dvpList: Deno.PointerValue | Uint8Array;
  /** usize */
  lpD3DHALCallbacks2: bigint | number;
  /** Windows.Win32.Foundation.RECT */
  rectDevice: Uint8Array | Deno.PointerValue;
  /** u32 */
  cMonitors: number;
  /** ptr */
  gpbmiSrc: Deno.PointerValue | Uint8Array;
  /** ptr */
  gpbmiDest: Deno.PointerValue | Uint8Array;
  /** ptr */
  phaiHeapAliases: Deno.PointerValue | Uint8Array;
  /** usize */
  hKernelHandle: bigint | number;
  /** usize */
  pfnNotifyProc: bigint | number;
  /** ptr */
  lpDDKernelCaps: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpddNLVCaps: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpddNLVHELCaps: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpddNLVBothCaps: Deno.PointerValue | Uint8Array;
  /** usize */
  lpD3DExtendedCaps: bigint | number;
  /** u32 */
  dwDOSBoxEvent: number;
  /** Windows.Win32.Foundation.RECT */
  rectDesktop: Uint8Array | Deno.PointerValue;
  /** array */
  cDriverName: Deno.PointerValue;
  /** usize */
  lpD3DHALCallbacks3: bigint | number;
  /** u32 */
  dwNumZPixelFormats: number;
  /** ptr */
  lpZPixelFormats: Deno.PointerValue | Uint8Array;
  /** ptr */
  mcList: Deno.PointerValue | Uint8Array;
  /** u32 */
  hDDVxd: number;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPSEX */
  ddsCapsMore: Uint8Array | Deno.PointerValue;
}

export const sizeofDDRAWI_DIRECTDRAW_GBL = 496;

export function allocDDRAWI_DIRECTDRAW_GBL(data?: Partial<DDRAWI_DIRECTDRAW_GBL>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DIRECTDRAW_GBL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwRefCnt !== undefined) view.setUint32(0, Number(data.dwRefCnt), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: usize
  if (data?.fpPrimaryOrig !== undefined) view.setBigUint64(8, BigInt(data.fpPrimaryOrig), true);
  // 0x10: pointer
  if (data?.ddCaps !== undefined) view.setBigUint64(16, data.ddCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddCaps))), true);
  // 0x18: u32
  if (data?.dwInternal1 !== undefined) view.setUint32(24, Number(data.dwInternal1), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.dwUnused1 !== undefined) view.setBigUint64(32, data.dwUnused1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwUnused1))), true);
  // 0x28: pointer
  if (data?.lpDDCBtmp !== undefined) view.setBigUint64(40, data.lpDDCBtmp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDCBtmp))), true);
  // 0x30: pointer
  if (data?.dsList !== undefined) view.setBigUint64(48, data.dsList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dsList))), true);
  // 0x38: pointer
  if (data?.palList !== undefined) view.setBigUint64(56, data.palList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.palList))), true);
  // 0x40: pointer
  if (data?.clipperList !== undefined) view.setBigUint64(64, data.clipperList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.clipperList))), true);
  // 0x48: pointer
  if (data?.lp16DD !== undefined) view.setBigUint64(72, data.lp16DD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lp16DD))), true);
  // 0x50: u32
  if (data?.dwMaxOverlays !== undefined) view.setUint32(80, Number(data.dwMaxOverlays), true);
  // 0x54: u32
  if (data?.dwCurrOverlays !== undefined) view.setUint32(84, Number(data.dwCurrOverlays), true);
  // 0x58: u32
  if (data?.dwMonitorFrequency !== undefined) view.setUint32(88, Number(data.dwMonitorFrequency), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.ddHELCaps !== undefined) view.setBigUint64(96, data.ddHELCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddHELCaps))), true);
  // 0x68: pointer
  if (data?.dwUnused2 !== undefined) view.setBigUint64(104, data.dwUnused2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwUnused2))), true);
  // 0x70: pointer
  if (data?.ddckCKDestOverlay !== undefined) view.setBigUint64(112, data.ddckCKDestOverlay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckCKDestOverlay))), true);
  // 0x78: pointer
  if (data?.ddckCKSrcOverlay !== undefined) view.setBigUint64(120, data.ddckCKSrcOverlay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddckCKSrcOverlay))), true);
  // 0x80: pointer
  if (data?.vmiData !== undefined) view.setBigUint64(128, data.vmiData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vmiData))), true);
  // 0x88: pointer
  if (data?.lpDriverHandle !== undefined) view.setBigUint64(136, data.lpDriverHandle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDriverHandle))), true);
  // 0x90: pointer
  if (data?.lpExclusiveOwner !== undefined) view.setBigUint64(144, data.lpExclusiveOwner === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpExclusiveOwner))), true);
  // 0x98: u32
  if (data?.dwModeIndex !== undefined) view.setUint32(152, Number(data.dwModeIndex), true);
  // 0x9c: u32
  if (data?.dwModeIndexOrig !== undefined) view.setUint32(156, Number(data.dwModeIndexOrig), true);
  // 0xa0: u32
  if (data?.dwNumFourCC !== undefined) view.setUint32(160, Number(data.dwNumFourCC), true);
  // 0xa4: pad4
  // 0xa8: pointer
  if (data?.lpdwFourCC !== undefined) view.setBigUint64(168, data.lpdwFourCC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpdwFourCC))), true);
  // 0xb0: u32
  if (data?.dwNumModes !== undefined) view.setUint32(176, Number(data.dwNumModes), true);
  // 0xb4: pad4
  // 0xb8: pointer
  if (data?.lpModeInfo !== undefined) view.setBigUint64(184, data.lpModeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpModeInfo))), true);
  // 0xc0: pointer
  if (data?.plProcessList !== undefined) view.setBigUint64(192, data.plProcessList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.plProcessList))), true);
  // 0xc8: u32
  if (data?.dwSurfaceLockCount !== undefined) view.setUint32(200, Number(data.dwSurfaceLockCount), true);
  // 0xcc: u32
  if (data?.dwAliasedLockCnt !== undefined) view.setUint32(204, Number(data.dwAliasedLockCnt), true);
  // 0xd0: usize
  if (data?.dwReserved3 !== undefined) view.setBigUint64(208, BigInt(data.dwReserved3), true);
  // 0xd8: usize
  if (data?.hDD !== undefined) view.setBigUint64(216, BigInt(data.hDD), true);
  // 0xe0: pointer
  if (data?.cObsolete !== undefined) view.setBigUint64(224, data.cObsolete === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cObsolete))), true);
  // 0xe8: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(232, Number(data.dwReserved1), true);
  // 0xec: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(236, Number(data.dwReserved2), true);
  // 0xf0: pointer
  if (data?.dbnOverlayRoot !== undefined) view.setBigUint64(240, data.dbnOverlayRoot === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dbnOverlayRoot))), true);
  // 0xf8: pointer
  if (data?.lpwPDeviceFlags !== undefined) view.setBigUint64(248, data.lpwPDeviceFlags === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpwPDeviceFlags))), true);
  // 0x100: u32
  if (data?.dwPDevice !== undefined) view.setUint32(256, Number(data.dwPDevice), true);
  // 0x104: u32
  if (data?.dwWin16LockCnt !== undefined) view.setUint32(260, Number(data.dwWin16LockCnt), true);
  // 0x108: u32
  if (data?.dwUnused3 !== undefined) view.setUint32(264, Number(data.dwUnused3), true);
  // 0x10c: u32
  if (data?.hInstance !== undefined) view.setUint32(268, Number(data.hInstance), true);
  // 0x110: u32
  if (data?.dwEvent16 !== undefined) view.setUint32(272, Number(data.dwEvent16), true);
  // 0x114: u32
  if (data?.dwSaveNumModes !== undefined) view.setUint32(276, Number(data.dwSaveNumModes), true);
  // 0x118: usize
  if (data?.lpD3DGlobalDriverData !== undefined) view.setBigUint64(280, BigInt(data.lpD3DGlobalDriverData), true);
  // 0x120: usize
  if (data?.lpD3DHALCallbacks !== undefined) view.setBigUint64(288, BigInt(data.lpD3DHALCallbacks), true);
  // 0x128: pointer
  if (data?.ddBothCaps !== undefined) view.setBigUint64(296, data.ddBothCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddBothCaps))), true);
  // 0x130: pointer
  if (data?.lpDDVideoPortCaps !== undefined) view.setBigUint64(304, data.lpDDVideoPortCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDVideoPortCaps))), true);
  // 0x138: pointer
  if (data?.dvpList !== undefined) view.setBigUint64(312, data.dvpList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dvpList))), true);
  // 0x140: usize
  if (data?.lpD3DHALCallbacks2 !== undefined) view.setBigUint64(320, BigInt(data.lpD3DHALCallbacks2), true);
  // 0x148: pointer
  if (data?.rectDevice !== undefined) view.setBigUint64(328, data.rectDevice === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rectDevice))), true);
  // 0x150: u32
  if (data?.cMonitors !== undefined) view.setUint32(336, Number(data.cMonitors), true);
  // 0x154: pad4
  // 0x158: pointer
  if (data?.gpbmiSrc !== undefined) view.setBigUint64(344, data.gpbmiSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gpbmiSrc))), true);
  // 0x160: pointer
  if (data?.gpbmiDest !== undefined) view.setBigUint64(352, data.gpbmiDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.gpbmiDest))), true);
  // 0x168: pointer
  if (data?.phaiHeapAliases !== undefined) view.setBigUint64(360, data.phaiHeapAliases === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.phaiHeapAliases))), true);
  // 0x170: usize
  if (data?.hKernelHandle !== undefined) view.setBigUint64(368, BigInt(data.hKernelHandle), true);
  // 0x178: usize
  if (data?.pfnNotifyProc !== undefined) view.setBigUint64(376, BigInt(data.pfnNotifyProc), true);
  // 0x180: pointer
  if (data?.lpDDKernelCaps !== undefined) view.setBigUint64(384, data.lpDDKernelCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDKernelCaps))), true);
  // 0x188: pointer
  if (data?.lpddNLVCaps !== undefined) view.setBigUint64(392, data.lpddNLVCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddNLVCaps))), true);
  // 0x190: pointer
  if (data?.lpddNLVHELCaps !== undefined) view.setBigUint64(400, data.lpddNLVHELCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddNLVHELCaps))), true);
  // 0x198: pointer
  if (data?.lpddNLVBothCaps !== undefined) view.setBigUint64(408, data.lpddNLVBothCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddNLVBothCaps))), true);
  // 0x1a0: usize
  if (data?.lpD3DExtendedCaps !== undefined) view.setBigUint64(416, BigInt(data.lpD3DExtendedCaps), true);
  // 0x1a8: u32
  if (data?.dwDOSBoxEvent !== undefined) view.setUint32(424, Number(data.dwDOSBoxEvent), true);
  // 0x1ac: pad4
  // 0x1b0: pointer
  if (data?.rectDesktop !== undefined) view.setBigUint64(432, data.rectDesktop === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rectDesktop))), true);
  // 0x1b8: pointer
  if (data?.cDriverName !== undefined) view.setBigUint64(440, data.cDriverName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.cDriverName))), true);
  // 0x1c0: usize
  if (data?.lpD3DHALCallbacks3 !== undefined) view.setBigUint64(448, BigInt(data.lpD3DHALCallbacks3), true);
  // 0x1c8: u32
  if (data?.dwNumZPixelFormats !== undefined) view.setUint32(456, Number(data.dwNumZPixelFormats), true);
  // 0x1cc: pad4
  // 0x1d0: pointer
  if (data?.lpZPixelFormats !== undefined) view.setBigUint64(464, data.lpZPixelFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpZPixelFormats))), true);
  // 0x1d8: pointer
  if (data?.mcList !== undefined) view.setBigUint64(472, data.mcList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.mcList))), true);
  // 0x1e0: u32
  if (data?.hDDVxd !== undefined) view.setUint32(480, Number(data.hDDVxd), true);
  // 0x1e4: pad4
  // 0x1e8: pointer
  if (data?.ddsCapsMore !== undefined) view.setBigUint64(488, data.ddsCapsMore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCapsMore))), true);
  return buf;
}

export class DDRAWI_DIRECTDRAW_GBLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwRefCnt(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: usize
  get fpPrimaryOrig(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get ddCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwInternal1(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get dwUnused1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get lpDDCBtmp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get dsList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get palList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get clipperList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get lp16DD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get dwMaxOverlays(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwCurrOverlays(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwMonitorFrequency(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get ddHELCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get dwUnused2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get ddckCKDestOverlay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get ddckCKSrcOverlay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get vmiData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get lpDriverHandle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get lpExclusiveOwner(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: u32
  get dwModeIndex(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get dwModeIndexOrig(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get dwNumFourCC(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: pad4

  // 0xa8: pointer
  get lpdwFourCC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: u32
  get dwNumModes(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: pad4

  // 0xb8: pointer
  get lpModeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(184, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc0: pointer
  get plProcessList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: u32
  get dwSurfaceLockCount(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get dwAliasedLockCnt(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: usize
  get dwReserved3(): bigint | number {
    return Number(this.view.getBigUint64(208, true));
  }

  // 0xd8: usize
  get hDD(): bigint | number {
    return Number(this.view.getBigUint64(216, true));
  }

  // 0xe0: pointer
  get cObsolete(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(224, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe8: u32
  get dwReserved1(): number {
    return this.view.getUint32(232, true);
  }

  // 0xec: u32
  get dwReserved2(): number {
    return this.view.getUint32(236, true);
  }

  // 0xf0: pointer
  get dbnOverlayRoot(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(240, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xf8: pointer
  get lpwPDeviceFlags(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(248, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x100: u32
  get dwPDevice(): number {
    return this.view.getUint32(256, true);
  }

  // 0x104: u32
  get dwWin16LockCnt(): number {
    return this.view.getUint32(260, true);
  }

  // 0x108: u32
  get dwUnused3(): number {
    return this.view.getUint32(264, true);
  }

  // 0x10c: u32
  get hInstance(): number {
    return this.view.getUint32(268, true);
  }

  // 0x110: u32
  get dwEvent16(): number {
    return this.view.getUint32(272, true);
  }

  // 0x114: u32
  get dwSaveNumModes(): number {
    return this.view.getUint32(276, true);
  }

  // 0x118: usize
  get lpD3DGlobalDriverData(): bigint | number {
    return Number(this.view.getBigUint64(280, true));
  }

  // 0x120: usize
  get lpD3DHALCallbacks(): bigint | number {
    return Number(this.view.getBigUint64(288, true));
  }

  // 0x128: pointer
  get ddBothCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(296, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x130: pointer
  get lpDDVideoPortCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(304, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x138: pointer
  get dvpList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(312, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x140: usize
  get lpD3DHALCallbacks2(): bigint | number {
    return Number(this.view.getBigUint64(320, true));
  }

  // 0x148: pointer
  get rectDevice(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(328, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x150: u32
  get cMonitors(): number {
    return this.view.getUint32(336, true);
  }

  // 0x154: pad4

  // 0x158: pointer
  get gpbmiSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(344, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x160: pointer
  get gpbmiDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(352, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x168: pointer
  get phaiHeapAliases(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(360, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x170: usize
  get hKernelHandle(): bigint | number {
    return Number(this.view.getBigUint64(368, true));
  }

  // 0x178: usize
  get pfnNotifyProc(): bigint | number {
    return Number(this.view.getBigUint64(376, true));
  }

  // 0x180: pointer
  get lpDDKernelCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(384, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x188: pointer
  get lpddNLVCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(392, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x190: pointer
  get lpddNLVHELCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(400, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x198: pointer
  get lpddNLVBothCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(408, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1a0: usize
  get lpD3DExtendedCaps(): bigint | number {
    return Number(this.view.getBigUint64(416, true));
  }

  // 0x1a8: u32
  get dwDOSBoxEvent(): number {
    return this.view.getUint32(424, true);
  }

  // 0x1ac: pad4

  // 0x1b0: pointer
  get rectDesktop(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(432, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1b8: pointer
  get cDriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(440, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1c0: usize
  get lpD3DHALCallbacks3(): bigint | number {
    return Number(this.view.getBigUint64(448, true));
  }

  // 0x1c8: u32
  get dwNumZPixelFormats(): number {
    return this.view.getUint32(456, true);
  }

  // 0x1cc: pad4

  // 0x1d0: pointer
  get lpZPixelFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(464, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1d8: pointer
  get mcList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(472, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x1e0: u32
  get hDDVxd(): number {
    return this.view.getUint32(480, true);
  }

  // 0x1e4: pad4

  // 0x1e8: pointer
  get ddsCapsMore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(488, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwRefCnt(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: usize
  set fpPrimaryOrig(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ddCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwInternal1(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set dwUnused1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set lpDDCBtmp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set dsList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set palList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set clipperList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set lp16DD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set dwMaxOverlays(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwCurrOverlays(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwMonitorFrequency(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set ddHELCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set dwUnused2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set ddckCKDestOverlay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set ddckCKSrcOverlay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set vmiData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set lpDriverHandle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set lpExclusiveOwner(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: u32
  set dwModeIndex(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set dwModeIndexOrig(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set dwNumFourCC(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: pad4

  // 0xa8: pointer
  set lpdwFourCC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: u32
  set dwNumModes(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: pad4

  // 0xb8: pointer
  set lpModeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc0: pointer
  set plProcessList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: u32
  set dwSurfaceLockCount(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set dwAliasedLockCnt(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: usize
  set dwReserved3(value: bigint | number) {
    this.view.setBigUint64(208, BigInt(value), true);
  }

  // 0xd8: usize
  set hDD(value: bigint | number) {
    this.view.setBigUint64(216, BigInt(value), true);
  }

  // 0xe0: pointer
  set cObsolete(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(224, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe8: u32
  set dwReserved1(value: number) {
    this.view.setUint32(232, value, true);
  }

  // 0xec: u32
  set dwReserved2(value: number) {
    this.view.setUint32(236, value, true);
  }

  // 0xf0: pointer
  set dbnOverlayRoot(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(240, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xf8: pointer
  set lpwPDeviceFlags(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(248, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x100: u32
  set dwPDevice(value: number) {
    this.view.setUint32(256, value, true);
  }

  // 0x104: u32
  set dwWin16LockCnt(value: number) {
    this.view.setUint32(260, value, true);
  }

  // 0x108: u32
  set dwUnused3(value: number) {
    this.view.setUint32(264, value, true);
  }

  // 0x10c: u32
  set hInstance(value: number) {
    this.view.setUint32(268, value, true);
  }

  // 0x110: u32
  set dwEvent16(value: number) {
    this.view.setUint32(272, value, true);
  }

  // 0x114: u32
  set dwSaveNumModes(value: number) {
    this.view.setUint32(276, value, true);
  }

  // 0x118: usize
  set lpD3DGlobalDriverData(value: bigint | number) {
    this.view.setBigUint64(280, BigInt(value), true);
  }

  // 0x120: usize
  set lpD3DHALCallbacks(value: bigint | number) {
    this.view.setBigUint64(288, BigInt(value), true);
  }

  // 0x128: pointer
  set ddBothCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(296, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x130: pointer
  set lpDDVideoPortCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(304, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x138: pointer
  set dvpList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(312, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x140: usize
  set lpD3DHALCallbacks2(value: bigint | number) {
    this.view.setBigUint64(320, BigInt(value), true);
  }

  // 0x148: pointer
  set rectDevice(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(328, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x150: u32
  set cMonitors(value: number) {
    this.view.setUint32(336, value, true);
  }

  // 0x154: pad4

  // 0x158: pointer
  set gpbmiSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(344, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x160: pointer
  set gpbmiDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(352, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x168: pointer
  set phaiHeapAliases(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(360, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x170: usize
  set hKernelHandle(value: bigint | number) {
    this.view.setBigUint64(368, BigInt(value), true);
  }

  // 0x178: usize
  set pfnNotifyProc(value: bigint | number) {
    this.view.setBigUint64(376, BigInt(value), true);
  }

  // 0x180: pointer
  set lpDDKernelCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(384, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x188: pointer
  set lpddNLVCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(392, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x190: pointer
  set lpddNLVHELCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(400, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x198: pointer
  set lpddNLVBothCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(408, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1a0: usize
  set lpD3DExtendedCaps(value: bigint | number) {
    this.view.setBigUint64(416, BigInt(value), true);
  }

  // 0x1a8: u32
  set dwDOSBoxEvent(value: number) {
    this.view.setUint32(424, value, true);
  }

  // 0x1ac: pad4

  // 0x1b0: pointer
  set rectDesktop(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(432, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1b8: pointer
  set cDriverName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(440, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1c0: usize
  set lpD3DHALCallbacks3(value: bigint | number) {
    this.view.setBigUint64(448, BigInt(value), true);
  }

  // 0x1c8: u32
  set dwNumZPixelFormats(value: number) {
    this.view.setUint32(456, value, true);
  }

  // 0x1cc: pad4

  // 0x1d0: pointer
  set lpZPixelFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(464, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1d8: pointer
  set mcList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(472, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x1e0: u32
  set hDDVxd(value: number) {
    this.view.setUint32(480, value, true);
  }

  // 0x1e4: pad4

  // 0x1e8: pointer
  set ddsCapsMore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(488, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HINSTANCE = bigint | number;

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DIRECTDRAW_LCL (size: 184)
 */
export interface DDRAWI_DIRECTDRAW_LCL {
  /** u32 */
  lpDDMore: number;
  /** ptr */
  lpGbl: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwUnused0: number;
  /** u32 */
  dwLocalFlags: number;
  /** u32 */
  dwLocalRefCnt: number;
  /** u32 */
  dwProcessId: number;
  /** Windows.Win32.System.Com.IUnknown */
  pUnkOuter: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwObsolete1: number;
  /** usize */
  hWnd: bigint | number;
  /** usize */
  hDC: bigint | number;
  /** u32 */
  dwErrorMode: number;
  /** ptr */
  lpPrimary: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpCB: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwPreferredMode: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hD3DInstance: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Com.IUnknown */
  pD3DIUnknown: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpDDCB: Deno.PointerValue | Uint8Array;
  /** usize */
  hDDVxd: bigint | number;
  /** u32 */
  dwAppHackFlags: number;
  /** usize */
  hFocusWnd: bigint | number;
  /** u32 */
  dwHotTracking: number;
  /** u32 */
  dwIMEState: number;
  /** usize */
  hWndPopup: bigint | number;
  /** usize */
  hDD: bigint | number;
  /** usize */
  hGammaCalibrator: bigint | number;
  /** Windows.Win32.Graphics.DirectDraw.LPDDGAMMACALIBRATORPROC */
  lpGammaCalibrator: Uint8Array | Deno.PointerValue;
}

export const sizeofDDRAWI_DIRECTDRAW_LCL = 184;

export function allocDDRAWI_DIRECTDRAW_LCL(data?: Partial<DDRAWI_DIRECTDRAW_LCL>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DIRECTDRAW_LCL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.lpDDMore !== undefined) view.setUint32(0, Number(data.lpDDMore), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpGbl !== undefined) view.setBigUint64(8, data.lpGbl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGbl))), true);
  // 0x10: u32
  if (data?.dwUnused0 !== undefined) view.setUint32(16, Number(data.dwUnused0), true);
  // 0x14: u32
  if (data?.dwLocalFlags !== undefined) view.setUint32(20, Number(data.dwLocalFlags), true);
  // 0x18: u32
  if (data?.dwLocalRefCnt !== undefined) view.setUint32(24, Number(data.dwLocalRefCnt), true);
  // 0x1c: u32
  if (data?.dwProcessId !== undefined) view.setUint32(28, Number(data.dwProcessId), true);
  // 0x20: pointer
  if (data?.pUnkOuter !== undefined) view.setBigUint64(32, data.pUnkOuter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pUnkOuter))), true);
  // 0x28: u32
  if (data?.dwObsolete1 !== undefined) view.setUint32(40, Number(data.dwObsolete1), true);
  // 0x2c: pad4
  // 0x30: usize
  if (data?.hWnd !== undefined) view.setBigUint64(48, BigInt(data.hWnd), true);
  // 0x38: usize
  if (data?.hDC !== undefined) view.setBigUint64(56, BigInt(data.hDC), true);
  // 0x40: u32
  if (data?.dwErrorMode !== undefined) view.setUint32(64, Number(data.dwErrorMode), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.lpPrimary !== undefined) view.setBigUint64(72, data.lpPrimary === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpPrimary))), true);
  // 0x50: pointer
  if (data?.lpCB !== undefined) view.setBigUint64(80, data.lpCB === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCB))), true);
  // 0x58: u32
  if (data?.dwPreferredMode !== undefined) view.setUint32(88, Number(data.dwPreferredMode), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.hD3DInstance !== undefined) view.setBigUint64(96, data.hD3DInstance === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hD3DInstance))), true);
  // 0x68: pointer
  if (data?.pD3DIUnknown !== undefined) view.setBigUint64(104, data.pD3DIUnknown === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pD3DIUnknown))), true);
  // 0x70: pointer
  if (data?.lpDDCB !== undefined) view.setBigUint64(112, data.lpDDCB === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDCB))), true);
  // 0x78: usize
  if (data?.hDDVxd !== undefined) view.setBigUint64(120, BigInt(data.hDDVxd), true);
  // 0x80: u32
  if (data?.dwAppHackFlags !== undefined) view.setUint32(128, Number(data.dwAppHackFlags), true);
  // 0x84: pad4
  // 0x88: usize
  if (data?.hFocusWnd !== undefined) view.setBigUint64(136, BigInt(data.hFocusWnd), true);
  // 0x90: u32
  if (data?.dwHotTracking !== undefined) view.setUint32(144, Number(data.dwHotTracking), true);
  // 0x94: u32
  if (data?.dwIMEState !== undefined) view.setUint32(148, Number(data.dwIMEState), true);
  // 0x98: usize
  if (data?.hWndPopup !== undefined) view.setBigUint64(152, BigInt(data.hWndPopup), true);
  // 0xa0: usize
  if (data?.hDD !== undefined) view.setBigUint64(160, BigInt(data.hDD), true);
  // 0xa8: usize
  if (data?.hGammaCalibrator !== undefined) view.setBigUint64(168, BigInt(data.hGammaCalibrator), true);
  // 0xb0: pointer
  if (data?.lpGammaCalibrator !== undefined) view.setBigUint64(176, data.lpGammaCalibrator === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGammaCalibrator))), true);
  return buf;
}

export class DDRAWI_DIRECTDRAW_LCLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get lpDDMore(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpGbl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwUnused0(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwLocalFlags(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwLocalRefCnt(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwProcessId(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get pUnkOuter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwObsolete1(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: usize
  get hWnd(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: usize
  get hDC(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: u32
  get dwErrorMode(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get lpPrimary(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lpCB(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u32
  get dwPreferredMode(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get hD3DInstance(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get pD3DIUnknown(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get lpDDCB(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: usize
  get hDDVxd(): bigint | number {
    return Number(this.view.getBigUint64(120, true));
  }

  // 0x80: u32
  get dwAppHackFlags(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x88: usize
  get hFocusWnd(): bigint | number {
    return Number(this.view.getBigUint64(136, true));
  }

  // 0x90: u32
  get dwHotTracking(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get dwIMEState(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: usize
  get hWndPopup(): bigint | number {
    return Number(this.view.getBigUint64(152, true));
  }

  // 0xa0: usize
  get hDD(): bigint | number {
    return Number(this.view.getBigUint64(160, true));
  }

  // 0xa8: usize
  get hGammaCalibrator(): bigint | number {
    return Number(this.view.getBigUint64(168, true));
  }

  // 0xb0: pointer
  get lpGammaCalibrator(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set lpDDMore(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpGbl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwUnused0(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwLocalFlags(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwLocalRefCnt(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwProcessId(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set pUnkOuter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwObsolete1(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: usize
  set hWnd(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: usize
  set hDC(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: u32
  set dwErrorMode(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set lpPrimary(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set lpCB(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u32
  set dwPreferredMode(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set hD3DInstance(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set pD3DIUnknown(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set lpDDCB(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: usize
  set hDDVxd(value: bigint | number) {
    this.view.setBigUint64(120, BigInt(value), true);
  }

  // 0x80: u32
  set dwAppHackFlags(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4

  // 0x88: usize
  set hFocusWnd(value: bigint | number) {
    this.view.setBigUint64(136, BigInt(value), true);
  }

  // 0x90: u32
  set dwHotTracking(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set dwIMEState(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: usize
  set hWndPopup(value: bigint | number) {
    this.view.setBigUint64(152, BigInt(value), true);
  }

  // 0xa0: usize
  set hDD(value: bigint | number) {
    this.view.setBigUint64(160, BigInt(value), true);
  }

  // 0xa8: usize
  set hGammaCalibrator(value: bigint | number) {
    this.view.setBigUint64(168, BigInt(value), true);
  }

  // 0xb0: pointer
  set lpGammaCalibrator(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDVIDEOPORT_INT (size: 32)
 */
export interface DDRAWI_DDVIDEOPORT_INT {
  /** ptr */
  lpVtbl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpLcl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpLink: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwIntRefCnt: number;
  /** u32 */
  dwFlags: number;
}

export const sizeofDDRAWI_DDVIDEOPORT_INT = 32;

export function allocDDRAWI_DDVIDEOPORT_INT(data?: Partial<DDRAWI_DDVIDEOPORT_INT>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDVIDEOPORT_INT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpVtbl !== undefined) view.setBigUint64(0, data.lpVtbl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVtbl))), true);
  // 0x08: pointer
  if (data?.lpLcl !== undefined) view.setBigUint64(8, data.lpLcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLcl))), true);
  // 0x10: pointer
  if (data?.lpLink !== undefined) view.setBigUint64(16, data.lpLink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLink))), true);
  // 0x18: u32
  if (data?.dwIntRefCnt !== undefined) view.setUint32(24, Number(data.dwIntRefCnt), true);
  // 0x1c: u32
  if (data?.dwFlags !== undefined) view.setUint32(28, Number(data.dwFlags), true);
  return buf;
}

export class DDRAWI_DDVIDEOPORT_INTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpVtbl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpLcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpLink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwIntRefCnt(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: pointer
  set lpVtbl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpLcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpLink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwIntRefCnt(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwFlags(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDVIDEOPORT_LCL (size: 160)
 */
export interface DDRAWI_DDVIDEOPORT_LCL {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTDESC */
  ddvpDesc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTINFO */
  ddvpInfo: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVBISurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpFlipInts: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumAutoflip: number;
  /** u32 */
  dwProcessID: number;
  /** u32 */
  dwStateFlags: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwRefCnt: number;
  /** usize */
  fpLastFlip: bigint | number;
  /** usize */
  dwReserved1: bigint | number;
  /** usize */
  dwReserved2: bigint | number;
  /** Windows.Win32.Foundation.HANDLE */
  hDDVideoPort: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwNumVBIAutoflip: number;
  /** ptr */
  lpVBIDesc: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoDesc: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVBIInfo: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoInfo: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwVBIProcessID: number;
  /** ptr */
  lpVPNotify: Deno.PointerValue | Uint8Array;
}

export const sizeofDDRAWI_DDVIDEOPORT_LCL = 160;

export function allocDDRAWI_DDVIDEOPORT_LCL(data?: Partial<DDRAWI_DDVIDEOPORT_LCL>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDVIDEOPORT_LCL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.ddvpDesc !== undefined) view.setBigUint64(8, data.ddvpDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddvpDesc))), true);
  // 0x10: pointer
  if (data?.ddvpInfo !== undefined) view.setBigUint64(16, data.ddvpInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddvpInfo))), true);
  // 0x18: pointer
  if (data?.lpSurface !== undefined) view.setBigUint64(24, data.lpSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurface))), true);
  // 0x20: pointer
  if (data?.lpVBISurface !== undefined) view.setBigUint64(32, data.lpVBISurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVBISurface))), true);
  // 0x28: pointer
  if (data?.lpFlipInts !== undefined) view.setBigUint64(40, data.lpFlipInts === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpFlipInts))), true);
  // 0x30: u32
  if (data?.dwNumAutoflip !== undefined) view.setUint32(48, Number(data.dwNumAutoflip), true);
  // 0x34: u32
  if (data?.dwProcessID !== undefined) view.setUint32(52, Number(data.dwProcessID), true);
  // 0x38: u32
  if (data?.dwStateFlags !== undefined) view.setUint32(56, Number(data.dwStateFlags), true);
  // 0x3c: u32
  if (data?.dwFlags !== undefined) view.setUint32(60, Number(data.dwFlags), true);
  // 0x40: u32
  if (data?.dwRefCnt !== undefined) view.setUint32(64, Number(data.dwRefCnt), true);
  // 0x44: pad4
  // 0x48: usize
  if (data?.fpLastFlip !== undefined) view.setBigUint64(72, BigInt(data.fpLastFlip), true);
  // 0x50: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(80, BigInt(data.dwReserved1), true);
  // 0x58: usize
  if (data?.dwReserved2 !== undefined) view.setBigUint64(88, BigInt(data.dwReserved2), true);
  // 0x60: pointer
  if (data?.hDDVideoPort !== undefined) view.setBigUint64(96, data.hDDVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDDVideoPort))), true);
  // 0x68: u32
  if (data?.dwNumVBIAutoflip !== undefined) view.setUint32(104, Number(data.dwNumVBIAutoflip), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.lpVBIDesc !== undefined) view.setBigUint64(112, data.lpVBIDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVBIDesc))), true);
  // 0x78: pointer
  if (data?.lpVideoDesc !== undefined) view.setBigUint64(120, data.lpVideoDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoDesc))), true);
  // 0x80: pointer
  if (data?.lpVBIInfo !== undefined) view.setBigUint64(128, data.lpVBIInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVBIInfo))), true);
  // 0x88: pointer
  if (data?.lpVideoInfo !== undefined) view.setBigUint64(136, data.lpVideoInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoInfo))), true);
  // 0x90: u32
  if (data?.dwVBIProcessID !== undefined) view.setUint32(144, Number(data.dwVBIProcessID), true);
  // 0x94: pad4
  // 0x98: pointer
  if (data?.lpVPNotify !== undefined) view.setBigUint64(152, data.lpVPNotify === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVPNotify))), true);
  return buf;
}

export class DDRAWI_DDVIDEOPORT_LCLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ddvpDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddvpInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpVBISurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get lpFlipInts(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwNumAutoflip(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwProcessID(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwStateFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwFlags(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwRefCnt(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: usize
  get fpLastFlip(): bigint | number {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x58: usize
  get dwReserved2(): bigint | number {
    return Number(this.view.getBigUint64(88, true));
  }

  // 0x60: pointer
  get hDDVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get dwNumVBIAutoflip(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  get lpVBIDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get lpVideoDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get lpVBIInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get lpVideoInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: u32
  get dwVBIProcessID(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: pad4

  // 0x98: pointer
  get lpVPNotify(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ddvpDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddvpInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpVBISurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set lpFlipInts(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwNumAutoflip(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwProcessID(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwStateFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwFlags(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwRefCnt(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: usize
  set fpLastFlip(value: bigint | number) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(80, BigInt(value), true);
  }

  // 0x58: usize
  set dwReserved2(value: bigint | number) {
    this.view.setBigUint64(88, BigInt(value), true);
  }

  // 0x60: pointer
  set hDDVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set dwNumVBIAutoflip(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: pad4

  // 0x70: pointer
  set lpVBIDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set lpVideoDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set lpVBIInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set lpVideoInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: u32
  set dwVBIProcessID(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: pad4

  // 0x98: pointer
  set lpVPNotify(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDMOTIONCOMP_INT (size: 32)
 */
export interface DDRAWI_DDMOTIONCOMP_INT {
  /** ptr */
  lpVtbl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpLcl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpLink: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwIntRefCnt: number;
}

export const sizeofDDRAWI_DDMOTIONCOMP_INT = 32;

export function allocDDRAWI_DDMOTIONCOMP_INT(data?: Partial<DDRAWI_DDMOTIONCOMP_INT>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDMOTIONCOMP_INT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpVtbl !== undefined) view.setBigUint64(0, data.lpVtbl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVtbl))), true);
  // 0x08: pointer
  if (data?.lpLcl !== undefined) view.setBigUint64(8, data.lpLcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLcl))), true);
  // 0x10: pointer
  if (data?.lpLink !== undefined) view.setBigUint64(16, data.lpLink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLink))), true);
  // 0x18: u32
  if (data?.dwIntRefCnt !== undefined) view.setUint32(24, Number(data.dwIntRefCnt), true);
  // 0x1c: pad4
  return buf;
}

export class DDRAWI_DDMOTIONCOMP_INTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpVtbl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpLcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpLink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwIntRefCnt(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set lpVtbl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpLcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpLink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwIntRefCnt(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDRAWI_DDMOTIONCOMP_LCL (size: 96)
 */
export interface DDRAWI_DDMOTIONCOMP_LCL {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwUncompWidth: number;
  /** u32 */
  dwUncompHeight: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddUncompPixelFormat: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwInternalFlags: number;
  /** u32 */
  dwRefCnt: number;
  /** u32 */
  dwProcessId: number;
  /** Windows.Win32.Foundation.HANDLE */
  hMoComp: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwDriverReserved1: number;
  /** u32 */
  dwDriverReserved2: number;
  /** u32 */
  dwDriverReserved3: number;
  /** ptr */
  lpDriverReserved1: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDriverReserved2: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDriverReserved3: Deno.PointerValue | Uint8Array;
}

export const sizeofDDRAWI_DDMOTIONCOMP_LCL = 96;

export function allocDDRAWI_DDMOTIONCOMP_LCL(data?: Partial<DDRAWI_DDMOTIONCOMP_LCL>): Uint8Array {
  const buf = new Uint8Array(sizeofDDRAWI_DDMOTIONCOMP_LCL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.guid !== undefined) view.setBigUint64(8, data.guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guid))), true);
  // 0x10: u32
  if (data?.dwUncompWidth !== undefined) view.setUint32(16, Number(data.dwUncompWidth), true);
  // 0x14: u32
  if (data?.dwUncompHeight !== undefined) view.setUint32(20, Number(data.dwUncompHeight), true);
  // 0x18: pointer
  if (data?.ddUncompPixelFormat !== undefined) view.setBigUint64(24, data.ddUncompPixelFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddUncompPixelFormat))), true);
  // 0x20: u32
  if (data?.dwInternalFlags !== undefined) view.setUint32(32, Number(data.dwInternalFlags), true);
  // 0x24: u32
  if (data?.dwRefCnt !== undefined) view.setUint32(36, Number(data.dwRefCnt), true);
  // 0x28: u32
  if (data?.dwProcessId !== undefined) view.setUint32(40, Number(data.dwProcessId), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.hMoComp !== undefined) view.setBigUint64(48, data.hMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hMoComp))), true);
  // 0x38: u32
  if (data?.dwDriverReserved1 !== undefined) view.setUint32(56, Number(data.dwDriverReserved1), true);
  // 0x3c: u32
  if (data?.dwDriverReserved2 !== undefined) view.setUint32(60, Number(data.dwDriverReserved2), true);
  // 0x40: u32
  if (data?.dwDriverReserved3 !== undefined) view.setUint32(64, Number(data.dwDriverReserved3), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.lpDriverReserved1 !== undefined) view.setBigUint64(72, data.lpDriverReserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDriverReserved1))), true);
  // 0x50: pointer
  if (data?.lpDriverReserved2 !== undefined) view.setBigUint64(80, data.lpDriverReserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDriverReserved2))), true);
  // 0x58: pointer
  if (data?.lpDriverReserved3 !== undefined) view.setBigUint64(88, data.lpDriverReserved3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDriverReserved3))), true);
  return buf;
}

export class DDRAWI_DDMOTIONCOMP_LCLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwUncompWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwUncompHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get ddUncompPixelFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwInternalFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwRefCnt(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwProcessId(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get hMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwDriverReserved1(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwDriverReserved2(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwDriverReserved3(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get lpDriverReserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get lpDriverReserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get lpDriverReserved3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwUncompWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwUncompHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set ddUncompPixelFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwInternalFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwRefCnt(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwProcessId(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set hMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwDriverReserved1(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwDriverReserved2(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwDriverReserved3(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set lpDriverReserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set lpDriverReserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set lpDriverReserved3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHALINFO (size: 144)
 */
export interface DDHALINFO {
  /** u32 */
  dwSize: number;
  /** ptr */
  lpDDCallbacks: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurfaceCallbacks: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDPaletteCallbacks: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.VIDMEMINFO */
  vmiData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDCORECAPS */
  ddCaps: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwMonitorFrequency: number;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_GETDRIVERINFO */
  GetDriverInfo: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwModeIndex: number;
  /** ptr */
  lpdwFourCC: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumModes: number;
  /** ptr */
  lpModeInfo: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpPDevice: Deno.PointerValue | Uint8Array;
  /** u32 */
  hInstance: number;
  /** usize */
  lpD3DGlobalDriverData: bigint | number;
  /** usize */
  lpD3DHALCallbacks: bigint | number;
  /** ptr */
  lpDDExeBufCallbacks: Deno.PointerValue | Uint8Array;
}

export const sizeofDDHALINFO = 144;

export function allocDDHALINFO(data?: Partial<DDHALINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHALINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDCallbacks !== undefined) view.setBigUint64(8, data.lpDDCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDCallbacks))), true);
  // 0x10: pointer
  if (data?.lpDDSurfaceCallbacks !== undefined) view.setBigUint64(16, data.lpDDSurfaceCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurfaceCallbacks))), true);
  // 0x18: pointer
  if (data?.lpDDPaletteCallbacks !== undefined) view.setBigUint64(24, data.lpDDPaletteCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDPaletteCallbacks))), true);
  // 0x20: pointer
  if (data?.vmiData !== undefined) view.setBigUint64(32, data.vmiData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vmiData))), true);
  // 0x28: pointer
  if (data?.ddCaps !== undefined) view.setBigUint64(40, data.ddCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddCaps))), true);
  // 0x30: u32
  if (data?.dwMonitorFrequency !== undefined) view.setUint32(48, Number(data.dwMonitorFrequency), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.GetDriverInfo !== undefined) view.setBigUint64(56, data.GetDriverInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetDriverInfo))), true);
  // 0x40: u32
  if (data?.dwModeIndex !== undefined) view.setUint32(64, Number(data.dwModeIndex), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.lpdwFourCC !== undefined) view.setBigUint64(72, data.lpdwFourCC === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpdwFourCC))), true);
  // 0x50: u32
  if (data?.dwNumModes !== undefined) view.setUint32(80, Number(data.dwNumModes), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.lpModeInfo !== undefined) view.setBigUint64(88, data.lpModeInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpModeInfo))), true);
  // 0x60: u32
  if (data?.dwFlags !== undefined) view.setUint32(96, Number(data.dwFlags), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.lpPDevice !== undefined) view.setBigUint64(104, data.lpPDevice === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpPDevice))), true);
  // 0x70: u32
  if (data?.hInstance !== undefined) view.setUint32(112, Number(data.hInstance), true);
  // 0x74: pad4
  // 0x78: usize
  if (data?.lpD3DGlobalDriverData !== undefined) view.setBigUint64(120, BigInt(data.lpD3DGlobalDriverData), true);
  // 0x80: usize
  if (data?.lpD3DHALCallbacks !== undefined) view.setBigUint64(128, BigInt(data.lpD3DHALCallbacks), true);
  // 0x88: pointer
  if (data?.lpDDExeBufCallbacks !== undefined) view.setBigUint64(136, data.lpDDExeBufCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDExeBufCallbacks))), true);
  return buf;
}

export class DDHALINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDDCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpDDSurfaceCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpDDPaletteCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get vmiData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ddCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwMonitorFrequency(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get GetDriverInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get dwModeIndex(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get lpdwFourCC(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get dwNumModes(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get lpModeInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get dwFlags(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get lpPDevice(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get hInstance(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: usize
  get lpD3DGlobalDriverData(): bigint | number {
    return Number(this.view.getBigUint64(120, true));
  }

  // 0x80: usize
  get lpD3DHALCallbacks(): bigint | number {
    return Number(this.view.getBigUint64(128, true));
  }

  // 0x88: pointer
  get lpDDExeBufCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDDCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpDDSurfaceCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpDDPaletteCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set vmiData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ddCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwMonitorFrequency(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set GetDriverInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set dwModeIndex(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set lpdwFourCC(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set dwNumModes(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set lpModeInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set dwFlags(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set lpPDevice(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set hInstance(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: usize
  set lpD3DGlobalDriverData(value: bigint | number) {
    this.view.setBigUint64(120, BigInt(value), true);
  }

  // 0x80: usize
  set lpD3DHALCallbacks(value: bigint | number) {
    this.view.setBigUint64(128, BigInt(value), true);
  }

  // 0x88: pointer
  set lpDDExeBufCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHALDDRAWFNS (size: 32)
 */
export interface DDHALDDRAWFNS {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_SETINFO */
  lpSetInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_VIDMEMALLOC */
  lpVidMemAlloc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_VIDMEMFREE */
  lpVidMemFree: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHALDDRAWFNS = 32;

export function allocDDHALDDRAWFNS(data?: Partial<DDHALDDRAWFNS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHALDDRAWFNS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpSetInfo !== undefined) view.setBigUint64(8, data.lpSetInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSetInfo))), true);
  // 0x10: pointer
  if (data?.lpVidMemAlloc !== undefined) view.setBigUint64(16, data.lpVidMemAlloc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVidMemAlloc))), true);
  // 0x18: pointer
  if (data?.lpVidMemFree !== undefined) view.setBigUint64(24, data.lpVidMemFree === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVidMemFree))), true);
  return buf;
}

export class DDHALDDRAWFNSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpSetInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpVidMemAlloc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpVidMemFree(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpSetInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpVidMemAlloc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpVidMemFree(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.RECTL (size: 16)
 */
export interface RECTL {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECTL = 16;

export function allocRECTL(data?: Partial<RECTL>): Uint8Array {
  const buf = new Uint8Array(sizeofRECTL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_BLTDATA (size: 112)
 */
export interface DDHAL_BLTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDDestSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.RECTL */
  rDest: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpDDSrcSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.RECTL */
  rSrc: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwROPFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.DDBLTFX */
  bltFX: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_BLT */
  Blt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  IsClipped: boolean;
  /** Windows.Win32.Foundation.RECTL */
  rOrigDest: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rOrigSrc: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwRectCnt: number;
  /** ptr */
  prDestRects: Deno.PointerValue | Uint8Array;
}

export const sizeofDDHAL_BLTDATA = 112;

export function allocDDHAL_BLTDATA(data?: Partial<DDHAL_BLTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_BLTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDDestSurface !== undefined) view.setBigUint64(8, data.lpDDDestSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDDestSurface))), true);
  // 0x10: pointer
  if (data?.rDest !== undefined) view.setBigUint64(16, data.rDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rDest))), true);
  // 0x18: pointer
  if (data?.lpDDSrcSurface !== undefined) view.setBigUint64(24, data.lpDDSrcSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSrcSurface))), true);
  // 0x20: pointer
  if (data?.rSrc !== undefined) view.setBigUint64(32, data.rSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rSrc))), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: u32
  if (data?.dwROPFlags !== undefined) view.setUint32(44, Number(data.dwROPFlags), true);
  // 0x30: pointer
  if (data?.bltFX !== undefined) view.setBigUint64(48, data.bltFX === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bltFX))), true);
  // 0x38: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(56, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x40: pointer
  if (data?.Blt !== undefined) view.setBigUint64(64, data.Blt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Blt))), true);
  // 0x48: i32
  if (data?.IsClipped !== undefined) view.setInt32(72, Number(data.IsClipped), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.rOrigDest !== undefined) view.setBigUint64(80, data.rOrigDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rOrigDest))), true);
  // 0x58: pointer
  if (data?.rOrigSrc !== undefined) view.setBigUint64(88, data.rOrigSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rOrigSrc))), true);
  // 0x60: u32
  if (data?.dwRectCnt !== undefined) view.setUint32(96, Number(data.dwRectCnt), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.prDestRects !== undefined) view.setBigUint64(104, data.prDestRects === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prDestRects))), true);
  return buf;
}

export class DDHAL_BLTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDDestSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpDDSrcSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get rSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwROPFlags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get bltFX(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get Blt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: i32
  get IsClipped(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get rOrigDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get rOrigSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get dwRectCnt(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get prDestRects(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDDestSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpDDSrcSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set rSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwROPFlags(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set bltFX(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set Blt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: i32
  set IsClipped(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set rOrigDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set rOrigSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set dwRectCnt(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set prDestRects(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_LOCKDATA (size: 64)
 */
export interface DDHAL_LOCKDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  bHasRect: number;
  /** Windows.Win32.Foundation.RECTL */
  rArea: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpSurfData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_LOCK */
  Lock: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofDDHAL_LOCKDATA = 64;

export function allocDDHAL_LOCKDATA(data?: Partial<DDHAL_LOCKDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_LOCKDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: u32
  if (data?.bHasRect !== undefined) view.setUint32(16, Number(data.bHasRect), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rArea !== undefined) view.setBigUint64(24, data.rArea === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rArea))), true);
  // 0x20: pointer
  if (data?.lpSurfData !== undefined) view.setBigUint64(32, data.lpSurfData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfData))), true);
  // 0x28: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(40, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x30: pointer
  if (data?.Lock !== undefined) view.setBigUint64(48, data.Lock === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Lock))), true);
  // 0x38: u32
  if (data?.dwFlags !== undefined) view.setUint32(56, Number(data.dwFlags), true);
  // 0x3c: pad4
  return buf;
}

export class DDHAL_LOCKDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get bHasRect(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rArea(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpSurfData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Lock(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set bHasRect(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rArea(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpSurfData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Lock(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_UNLOCKDATA (size: 32)
 */
export interface DDHAL_UNLOCKDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_UNLOCK */
  Unlock: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_UNLOCKDATA = 32;

export function allocDDHAL_UNLOCKDATA(data?: Partial<DDHAL_UNLOCKDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_UNLOCKDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.Unlock !== undefined) view.setBigUint64(24, data.Unlock === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Unlock))), true);
  return buf;
}

export class DDHAL_UNLOCKDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Unlock(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Unlock(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_UPDATEOVERLAYDATA (size: 72)
 */
export interface DDHAL_UPDATEOVERLAYDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDDestSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.RECTL */
  rDest: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpDDSrcSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.RECTL */
  rSrc: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.DDOVERLAYFX */
  overlayFX: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_UPDATEOVERLAY */
  UpdateOverlay: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_UPDATEOVERLAYDATA = 72;

export function allocDDHAL_UPDATEOVERLAYDATA(data?: Partial<DDHAL_UPDATEOVERLAYDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_UPDATEOVERLAYDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDDestSurface !== undefined) view.setBigUint64(8, data.lpDDDestSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDDestSurface))), true);
  // 0x10: pointer
  if (data?.rDest !== undefined) view.setBigUint64(16, data.rDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rDest))), true);
  // 0x18: pointer
  if (data?.lpDDSrcSurface !== undefined) view.setBigUint64(24, data.lpDDSrcSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSrcSurface))), true);
  // 0x20: pointer
  if (data?.rSrc !== undefined) view.setBigUint64(32, data.rSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rSrc))), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.overlayFX !== undefined) view.setBigUint64(48, data.overlayFX === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.overlayFX))), true);
  // 0x38: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(56, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x40: pointer
  if (data?.UpdateOverlay !== undefined) view.setBigUint64(64, data.UpdateOverlay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateOverlay))), true);
  return buf;
}

export class DDHAL_UPDATEOVERLAYDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDDestSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpDDSrcSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get rSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get overlayFX(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get UpdateOverlay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDDestSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpDDSrcSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set rSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set overlayFX(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set UpdateOverlay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_SETOVERLAYPOSITIONDATA (size: 48)
 */
export interface DDHAL_SETOVERLAYPOSITIONDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSrcSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDDestSurface: Deno.PointerValue | Uint8Array;
  /** i32 */
  lXPos: number;
  /** i32 */
  lYPos: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_SETOVERLAYPOSITION */
  SetOverlayPosition: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_SETOVERLAYPOSITIONDATA = 48;

export function allocDDHAL_SETOVERLAYPOSITIONDATA(data?: Partial<DDHAL_SETOVERLAYPOSITIONDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_SETOVERLAYPOSITIONDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSrcSurface !== undefined) view.setBigUint64(8, data.lpDDSrcSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSrcSurface))), true);
  // 0x10: pointer
  if (data?.lpDDDestSurface !== undefined) view.setBigUint64(16, data.lpDDDestSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDDestSurface))), true);
  // 0x18: i32
  if (data?.lXPos !== undefined) view.setInt32(24, Number(data.lXPos), true);
  // 0x1c: i32
  if (data?.lYPos !== undefined) view.setInt32(28, Number(data.lYPos), true);
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.SetOverlayPosition !== undefined) view.setBigUint64(40, data.SetOverlayPosition === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetOverlayPosition))), true);
  return buf;
}

export class DDHAL_SETOVERLAYPOSITIONDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSrcSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpDDDestSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get lXPos(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get lYPos(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get SetOverlayPosition(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSrcSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpDDDestSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set lXPos(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set lYPos(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set SetOverlayPosition(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_SETPALETTEDATA (size: 48)
 */
export interface DDHAL_SETPALETTEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDPalette: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_SETPALETTE */
  SetPalette: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  Attach: boolean;
}

export const sizeofDDHAL_SETPALETTEDATA = 48;

export function allocDDHAL_SETPALETTEDATA(data?: Partial<DDHAL_SETPALETTEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_SETPALETTEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: pointer
  if (data?.lpDDPalette !== undefined) view.setBigUint64(16, data.lpDDPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDPalette))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.SetPalette !== undefined) view.setBigUint64(32, data.SetPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetPalette))), true);
  // 0x28: i32
  if (data?.Attach !== undefined) view.setInt32(40, Number(data.Attach), true);
  // 0x2c: pad4
  return buf;
}

export class DDHAL_SETPALETTEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpDDPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get SetPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get Attach(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpDDPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set SetPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set Attach(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_FLIPDATA (size: 64)
 */
export interface DDHAL_FLIPDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfCurr: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfTarg: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_FLIP */
  Flip: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpSurfCurrLeft: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfTargLeft: Deno.PointerValue | Uint8Array;
}

export const sizeofDDHAL_FLIPDATA = 64;

export function allocDDHAL_FLIPDATA(data?: Partial<DDHAL_FLIPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_FLIPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpSurfCurr !== undefined) view.setBigUint64(8, data.lpSurfCurr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfCurr))), true);
  // 0x10: pointer
  if (data?.lpSurfTarg !== undefined) view.setBigUint64(16, data.lpSurfTarg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfTarg))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.Flip !== undefined) view.setBigUint64(40, data.Flip === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Flip))), true);
  // 0x30: pointer
  if (data?.lpSurfCurrLeft !== undefined) view.setBigUint64(48, data.lpSurfCurrLeft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfCurrLeft))), true);
  // 0x38: pointer
  if (data?.lpSurfTargLeft !== undefined) view.setBigUint64(56, data.lpSurfTargLeft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfTargLeft))), true);
  return buf;
}

export class DDHAL_FLIPDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpSurfCurr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpSurfTarg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Flip(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lpSurfCurrLeft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpSurfTargLeft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpSurfCurr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpSurfTarg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Flip(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lpSurfCurrLeft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpSurfTargLeft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DESTROYSURFACEDATA (size: 32)
 */
export interface DDHAL_DESTROYSURFACEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_DESTROYSURFACE */
  DestroySurface: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DESTROYSURFACEDATA = 32;

export function allocDDHAL_DESTROYSURFACEDATA(data?: Partial<DDHAL_DESTROYSURFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DESTROYSURFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.DestroySurface !== undefined) view.setBigUint64(24, data.DestroySurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroySurface))), true);
  return buf;
}

export class DDHAL_DESTROYSURFACEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DestroySurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DestroySurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_SETCLIPLISTDATA (size: 32)
 */
export interface DDHAL_SETCLIPLISTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_SETCLIPLIST */
  SetClipList: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_SETCLIPLISTDATA = 32;

export function allocDDHAL_SETCLIPLISTDATA(data?: Partial<DDHAL_SETCLIPLISTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_SETCLIPLISTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.SetClipList !== undefined) view.setBigUint64(24, data.SetClipList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetClipList))), true);
  return buf;
}

export class DDHAL_SETCLIPLISTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SetClipList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SetClipList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_ADDATTACHEDSURFACEDATA (size: 40)
 */
export interface DDHAL_ADDATTACHEDSURFACEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfAttached: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_ADDATTACHEDSURFACE */
  AddAttachedSurface: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_ADDATTACHEDSURFACEDATA = 40;

export function allocDDHAL_ADDATTACHEDSURFACEDATA(data?: Partial<DDHAL_ADDATTACHEDSURFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_ADDATTACHEDSURFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: pointer
  if (data?.lpSurfAttached !== undefined) view.setBigUint64(16, data.lpSurfAttached === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfAttached))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.AddAttachedSurface !== undefined) view.setBigUint64(32, data.AddAttachedSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddAttachedSurface))), true);
  return buf;
}

export class DDHAL_ADDATTACHEDSURFACEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpSurfAttached(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get AddAttachedSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpSurfAttached(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set AddAttachedSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_SETCOLORKEYDATA (size: 48)
 */
export interface DDHAL_SETCOLORKEYDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ckNew: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_SETCOLORKEY */
  SetColorKey: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_SETCOLORKEYDATA = 48;

export function allocDDHAL_SETCOLORKEYDATA(data?: Partial<DDHAL_SETCOLORKEYDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_SETCOLORKEYDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ckNew !== undefined) view.setBigUint64(24, data.ckNew === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ckNew))), true);
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.SetColorKey !== undefined) view.setBigUint64(40, data.SetColorKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetColorKey))), true);
  return buf;
}

export class DDHAL_SETCOLORKEYDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ckNew(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get SetColorKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ckNew(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set SetColorKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETBLTSTATUSDATA (size: 40)
 */
export interface DDHAL_GETBLTSTATUSDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_GETBLTSTATUS */
  GetBltStatus: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETBLTSTATUSDATA = 40;

export function allocDDHAL_GETBLTSTATUSDATA(data?: Partial<DDHAL_GETBLTSTATUSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETBLTSTATUSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.GetBltStatus !== undefined) view.setBigUint64(32, data.GetBltStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetBltStatus))), true);
  return buf;
}

export class DDHAL_GETBLTSTATUSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetBltStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetBltStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETFLIPSTATUSDATA (size: 40)
 */
export interface DDHAL_GETFLIPSTATUSDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALSURFCB_GETFLIPSTATUS */
  GetFlipStatus: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETFLIPSTATUSDATA = 40;

export function allocDDHAL_GETFLIPSTATUSDATA(data?: Partial<DDHAL_GETFLIPSTATUSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETFLIPSTATUSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.GetFlipStatus !== undefined) view.setBigUint64(32, data.GetFlipStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetFlipStatus))), true);
  return buf;
}

export class DDHAL_GETFLIPSTATUSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetFlipStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetFlipStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DESTROYPALETTEDATA (size: 32)
 */
export interface DDHAL_DESTROYPALETTEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDPalette: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALPALCB_DESTROYPALETTE */
  DestroyPalette: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DESTROYPALETTEDATA = 32;

export function allocDDHAL_DESTROYPALETTEDATA(data?: Partial<DDHAL_DESTROYPALETTEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DESTROYPALETTEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDPalette !== undefined) view.setBigUint64(8, data.lpDDPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDPalette))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.DestroyPalette !== undefined) view.setBigUint64(24, data.DestroyPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyPalette))), true);
  return buf;
}

export class DDHAL_DESTROYPALETTEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DestroyPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DestroyPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_SETENTRIESDATA (size: 48)
 */
export interface DDHAL_SETENTRIESDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDPalette: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwBase: number;
  /** u32 */
  dwNumEntries: number;
  /** ptr */
  lpEntries: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALPALCB_SETENTRIES */
  SetEntries: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_SETENTRIESDATA = 48;

export function allocDDHAL_SETENTRIESDATA(data?: Partial<DDHAL_SETENTRIESDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_SETENTRIESDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDPalette !== undefined) view.setBigUint64(8, data.lpDDPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDPalette))), true);
  // 0x10: u32
  if (data?.dwBase !== undefined) view.setUint32(16, Number(data.dwBase), true);
  // 0x14: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(20, Number(data.dwNumEntries), true);
  // 0x18: pointer
  if (data?.lpEntries !== undefined) view.setBigUint64(24, data.lpEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpEntries))), true);
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.SetEntries !== undefined) view.setBigUint64(40, data.SetEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetEntries))), true);
  return buf;
}

export class DDHAL_SETENTRIESDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwBase(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwNumEntries(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get lpEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get SetEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwBase(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set lpEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set SetEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_CREATESURFACEDATA (size: 48)
 */
export interface DDHAL_CREATESURFACEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurfaceDesc: Deno.PointerValue | Uint8Array;
  /** ptr */
  lplpSList: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwSCnt: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_CREATESURFACE */
  CreateSurface: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_CREATESURFACEDATA = 48;

export function allocDDHAL_CREATESURFACEDATA(data?: Partial<DDHAL_CREATESURFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_CREATESURFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurfaceDesc !== undefined) view.setBigUint64(8, data.lpDDSurfaceDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurfaceDesc))), true);
  // 0x10: pointer
  if (data?.lplpSList !== undefined) view.setBigUint64(16, data.lplpSList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lplpSList))), true);
  // 0x18: u32
  if (data?.dwSCnt !== undefined) view.setUint32(24, Number(data.dwSCnt), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.CreateSurface !== undefined) view.setBigUint64(40, data.CreateSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateSurface))), true);
  return buf;
}

export class DDHAL_CREATESURFACEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurfaceDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lplpSList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwSCnt(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get CreateSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurfaceDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lplpSList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwSCnt(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set CreateSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_CANCREATESURFACEDATA (size: 40)
 */
export interface DDHAL_CANCREATESURFACEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurfaceDesc: Deno.PointerValue | Uint8Array;
  /** u32 */
  bIsDifferentPixelFormat: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_CANCREATESURFACE */
  CanCreateSurface: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_CANCREATESURFACEDATA = 40;

export function allocDDHAL_CANCREATESURFACEDATA(data?: Partial<DDHAL_CANCREATESURFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_CANCREATESURFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurfaceDesc !== undefined) view.setBigUint64(8, data.lpDDSurfaceDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurfaceDesc))), true);
  // 0x10: u32
  if (data?.bIsDifferentPixelFormat !== undefined) view.setUint32(16, Number(data.bIsDifferentPixelFormat), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.CanCreateSurface !== undefined) view.setBigUint64(32, data.CanCreateSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CanCreateSurface))), true);
  return buf;
}

export class DDHAL_CANCREATESURFACEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurfaceDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get bIsDifferentPixelFormat(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get CanCreateSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurfaceDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set bIsDifferentPixelFormat(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set CanCreateSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_CREATEPALETTEDATA (size: 48)
 */
export interface DDHAL_CREATEPALETTEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDPalette: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpColorTable: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_CREATEPALETTE */
  CreatePalette: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  is_excl: boolean;
}

export const sizeofDDHAL_CREATEPALETTEDATA = 48;

export function allocDDHAL_CREATEPALETTEDATA(data?: Partial<DDHAL_CREATEPALETTEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_CREATEPALETTEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDPalette !== undefined) view.setBigUint64(8, data.lpDDPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDPalette))), true);
  // 0x10: pointer
  if (data?.lpColorTable !== undefined) view.setBigUint64(16, data.lpColorTable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpColorTable))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.CreatePalette !== undefined) view.setBigUint64(32, data.CreatePalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreatePalette))), true);
  // 0x28: i32
  if (data?.is_excl !== undefined) view.setInt32(40, Number(data.is_excl), true);
  // 0x2c: pad4
  return buf;
}

export class DDHAL_CREATEPALETTEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpColorTable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get CreatePalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get is_excl(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpColorTable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set CreatePalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set is_excl(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_WAITFORVERTICALBLANKDATA (size: 40)
 */
export interface DDHAL_WAITFORVERTICALBLANKDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** u32 */
  bIsInVB: number;
  /** usize */
  hEvent: bigint | number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_WAITFORVERTICALBLANK */
  WaitForVerticalBlank: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_WAITFORVERTICALBLANKDATA = 40;

export function allocDDHAL_WAITFORVERTICALBLANKDATA(data?: Partial<DDHAL_WAITFORVERTICALBLANKDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_WAITFORVERTICALBLANKDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.bIsInVB !== undefined) view.setUint32(12, Number(data.bIsInVB), true);
  // 0x10: usize
  if (data?.hEvent !== undefined) view.setBigUint64(16, BigInt(data.hEvent), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.WaitForVerticalBlank !== undefined) view.setBigUint64(32, data.WaitForVerticalBlank === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WaitForVerticalBlank))), true);
  return buf;
}

export class DDHAL_WAITFORVERTICALBLANKDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get bIsInVB(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: usize
  get hEvent(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get WaitForVerticalBlank(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set bIsInVB(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: usize
  set hEvent(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set WaitForVerticalBlank(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DESTROYDRIVERDATA (size: 24)
 */
export interface DDHAL_DESTROYDRIVERDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_DESTROYDRIVER */
  DestroyDriver: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DESTROYDRIVERDATA = 24;

export function allocDDHAL_DESTROYDRIVERDATA(data?: Partial<DDHAL_DESTROYDRIVERDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DESTROYDRIVERDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(8, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x10: pointer
  if (data?.DestroyDriver !== undefined) view.setBigUint64(16, data.DestroyDriver === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyDriver))), true);
  return buf;
}

export class DDHAL_DESTROYDRIVERDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get DestroyDriver(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set DestroyDriver(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_SETMODEDATA (size: 40)
 */
export interface DDHAL_SETMODEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwModeIndex: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_SETMODE */
  SetMode: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BOOL */
  inexcl: boolean;
  /** Windows.Win32.Foundation.BOOL */
  useRefreshRate: boolean;
}

export const sizeofDDHAL_SETMODEDATA = 40;

export function allocDDHAL_SETMODEDATA(data?: Partial<DDHAL_SETMODEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_SETMODEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwModeIndex !== undefined) view.setUint32(8, Number(data.dwModeIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.SetMode !== undefined) view.setBigUint64(24, data.SetMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetMode))), true);
  // 0x20: i32
  if (data?.inexcl !== undefined) view.setInt32(32, Number(data.inexcl), true);
  // 0x24: i32
  if (data?.useRefreshRate !== undefined) view.setInt32(36, Number(data.useRefreshRate), true);
  return buf;
}

export class DDHAL_SETMODEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwModeIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SetMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get inexcl(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get useRefreshRate(): number {
    return this.view.getInt32(36, true);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwModeIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SetMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set inexcl(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set useRefreshRate(value: number) {
    this.view.setInt32(36, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DRVSETCOLORKEYDATA (size: 40)
 */
export interface DDHAL_DRVSETCOLORKEYDATA {
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ckNew: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_SETCOLORKEY */
  SetColorKey: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DRVSETCOLORKEYDATA = 40;

export function allocDDHAL_DRVSETCOLORKEYDATA(data?: Partial<DDHAL_DRVSETCOLORKEYDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DRVSETCOLORKEYDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(0, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ckNew !== undefined) view.setBigUint64(16, data.ckNew === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ckNew))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.SetColorKey !== undefined) view.setBigUint64(32, data.SetColorKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetColorKey))), true);
  return buf;
}

export class DDHAL_DRVSETCOLORKEYDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ckNew(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get SetColorKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ckNew(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set SetColorKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETSCANLINEDATA (size: 32)
 */
export interface DDHAL_GETSCANLINEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwScanLine: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_GETSCANLINE */
  GetScanLine: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETSCANLINEDATA = 32;

export function allocDDHAL_GETSCANLINEDATA(data?: Partial<DDHAL_GETSCANLINEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETSCANLINEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwScanLine !== undefined) view.setUint32(8, Number(data.dwScanLine), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.GetScanLine !== undefined) view.setBigUint64(24, data.GetScanLine === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetScanLine))), true);
  return buf;
}

export class DDHAL_GETSCANLINEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwScanLine(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetScanLine(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwScanLine(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetScanLine(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_SETEXCLUSIVEMODEDATA (size: 32)
 */
export interface DDHAL_SETEXCLUSIVEMODEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwEnterExcl: number;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_SETEXCLUSIVEMODE */
  SetExclusiveMode: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_SETEXCLUSIVEMODEDATA = 32;

export function allocDDHAL_SETEXCLUSIVEMODEDATA(data?: Partial<DDHAL_SETEXCLUSIVEMODEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_SETEXCLUSIVEMODEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwEnterExcl !== undefined) view.setUint32(8, Number(data.dwEnterExcl), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.SetExclusiveMode !== undefined) view.setBigUint64(24, data.SetExclusiveMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetExclusiveMode))), true);
  return buf;
}

export class DDHAL_SETEXCLUSIVEMODEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwEnterExcl(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SetExclusiveMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwEnterExcl(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SetExclusiveMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_FLIPTOGDISURFACEDATA (size: 32)
 */
export interface DDHAL_FLIPTOGDISURFACEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwToGDI: number;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_FLIPTOGDISURFACE */
  FlipToGDISurface: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_FLIPTOGDISURFACEDATA = 32;

export function allocDDHAL_FLIPTOGDISURFACEDATA(data?: Partial<DDHAL_FLIPTOGDISURFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_FLIPTOGDISURFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwToGDI !== undefined) view.setUint32(8, Number(data.dwToGDI), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.FlipToGDISurface !== undefined) view.setBigUint64(24, data.FlipToGDISurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlipToGDISurface))), true);
  return buf;
}

export class DDHAL_FLIPTOGDISURFACEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwToGDI(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get FlipToGDISurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwToGDI(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set FlipToGDISurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_CANCREATEVPORTDATA (size: 32)
 */
export interface DDHAL_CANCREATEVPORTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDVideoPortDesc: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_CANCREATEVIDEOPORT */
  CanCreateVideoPort: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_CANCREATEVPORTDATA = 32;

export function allocDDHAL_CANCREATEVPORTDATA(data?: Partial<DDHAL_CANCREATEVPORTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_CANCREATEVPORTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDVideoPortDesc !== undefined) view.setBigUint64(8, data.lpDDVideoPortDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDVideoPortDesc))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.CanCreateVideoPort !== undefined) view.setBigUint64(24, data.CanCreateVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CanCreateVideoPort))), true);
  return buf;
}

export class DDHAL_CANCREATEVPORTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDVideoPortDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get CanCreateVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDVideoPortDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set CanCreateVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_CREATEVPORTDATA (size: 40)
 */
export interface DDHAL_CREATEVPORTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDVideoPortDesc: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_CREATEVIDEOPORT */
  CreateVideoPort: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_CREATEVPORTDATA = 40;

export function allocDDHAL_CREATEVPORTDATA(data?: Partial<DDHAL_CREATEVPORTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_CREATEVPORTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDVideoPortDesc !== undefined) view.setBigUint64(8, data.lpDDVideoPortDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDVideoPortDesc))), true);
  // 0x10: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(16, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.CreateVideoPort !== undefined) view.setBigUint64(32, data.CreateVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateVideoPort))), true);
  return buf;
}

export class DDHAL_CREATEVPORTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDVideoPortDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get CreateVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDVideoPortDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set CreateVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_FLIPVPORTDATA (size: 48)
 */
export interface DDHAL_FLIPVPORTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfCurr: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfTarg: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_FLIP */
  FlipVideoPort: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_FLIPVPORTDATA = 48;

export function allocDDHAL_FLIPVPORTDATA(data?: Partial<DDHAL_FLIPVPORTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_FLIPVPORTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: pointer
  if (data?.lpSurfCurr !== undefined) view.setBigUint64(16, data.lpSurfCurr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfCurr))), true);
  // 0x18: pointer
  if (data?.lpSurfTarg !== undefined) view.setBigUint64(24, data.lpSurfTarg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfTarg))), true);
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.FlipVideoPort !== undefined) view.setBigUint64(40, data.FlipVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlipVideoPort))), true);
  return buf;
}

export class DDHAL_FLIPVPORTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpSurfCurr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpSurfTarg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get FlipVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpSurfCurr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpSurfTarg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set FlipVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETVPORTBANDWIDTHDATA (size: 64)
 */
export interface DDHAL_GETVPORTBANDWIDTHDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpddpfFormat: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpBandwidth: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETBANDWIDTH */
  GetVideoPortBandwidth: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETVPORTBANDWIDTHDATA = 64;

export function allocDDHAL_GETVPORTBANDWIDTHDATA(data?: Partial<DDHAL_GETVPORTBANDWIDTHDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETVPORTBANDWIDTHDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: pointer
  if (data?.lpddpfFormat !== undefined) view.setBigUint64(16, data.lpddpfFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddpfFormat))), true);
  // 0x18: u32
  if (data?.dwWidth !== undefined) view.setUint32(24, Number(data.dwWidth), true);
  // 0x1c: u32
  if (data?.dwHeight !== undefined) view.setUint32(28, Number(data.dwHeight), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpBandwidth !== undefined) view.setBigUint64(40, data.lpBandwidth === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBandwidth))), true);
  // 0x30: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(48, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x38: pointer
  if (data?.GetVideoPortBandwidth !== undefined) view.setBigUint64(56, data.GetVideoPortBandwidth === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortBandwidth))), true);
  return buf;
}

export class DDHAL_GETVPORTBANDWIDTHDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpddpfFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwWidth(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwHeight(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lpBandwidth(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get GetVideoPortBandwidth(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpddpfFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwWidth(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwHeight(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lpBandwidth(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set GetVideoPortBandwidth(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETVPORTINPUTFORMATDATA (size: 56)
 */
export interface DDHAL_GETVPORTINPUTFORMATDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpddpfFormat: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumFormats: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETINPUTFORMATS */
  GetVideoPortInputFormats: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETVPORTINPUTFORMATDATA = 56;

export function allocDDHAL_GETVPORTINPUTFORMATDATA(data?: Partial<DDHAL_GETVPORTINPUTFORMATDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETVPORTINPUTFORMATDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpddpfFormat !== undefined) view.setBigUint64(24, data.lpddpfFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddpfFormat))), true);
  // 0x20: u32
  if (data?.dwNumFormats !== undefined) view.setUint32(32, Number(data.dwNumFormats), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(40, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x30: pointer
  if (data?.GetVideoPortInputFormats !== undefined) view.setBigUint64(48, data.GetVideoPortInputFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortInputFormats))), true);
  return buf;
}

export class DDHAL_GETVPORTINPUTFORMATDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpddpfFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwNumFormats(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get GetVideoPortInputFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpddpfFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwNumFormats(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set GetVideoPortInputFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETVPORTOUTPUTFORMATDATA (size: 64)
 */
export interface DDHAL_GETVPORTOUTPUTFORMATDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpddpfInputFormat: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpddpfOutputFormats: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumFormats: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETOUTPUTFORMATS */
  GetVideoPortOutputFormats: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETVPORTOUTPUTFORMATDATA = 64;

export function allocDDHAL_GETVPORTOUTPUTFORMATDATA(data?: Partial<DDHAL_GETVPORTOUTPUTFORMATDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETVPORTOUTPUTFORMATDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpddpfInputFormat !== undefined) view.setBigUint64(24, data.lpddpfInputFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddpfInputFormat))), true);
  // 0x20: pointer
  if (data?.lpddpfOutputFormats !== undefined) view.setBigUint64(32, data.lpddpfOutputFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddpfOutputFormats))), true);
  // 0x28: u32
  if (data?.dwNumFormats !== undefined) view.setUint32(40, Number(data.dwNumFormats), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(48, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x38: pointer
  if (data?.GetVideoPortOutputFormats !== undefined) view.setBigUint64(56, data.GetVideoPortOutputFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortOutputFormats))), true);
  return buf;
}

export class DDHAL_GETVPORTOUTPUTFORMATDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpddpfInputFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpddpfOutputFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwNumFormats(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get GetVideoPortOutputFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpddpfInputFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpddpfOutputFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwNumFormats(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set GetVideoPortOutputFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETVPORTFIELDDATA (size: 40)
 */
export interface DDHAL_GETVPORTFIELDDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  bField: boolean;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETFIELD */
  GetVideoPortField: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETVPORTFIELDDATA = 40;

export function allocDDHAL_GETVPORTFIELDDATA(data?: Partial<DDHAL_GETVPORTFIELDDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETVPORTFIELDDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: i32
  if (data?.bField !== undefined) view.setInt32(16, Number(data.bField), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.GetVideoPortField !== undefined) view.setBigUint64(32, data.GetVideoPortField === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortField))), true);
  return buf;
}

export class DDHAL_GETVPORTFIELDDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get bField(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetVideoPortField(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set bField(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetVideoPortField(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETVPORTLINEDATA (size: 40)
 */
export interface DDHAL_GETVPORTLINEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwLine: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETLINE */
  GetVideoPortLine: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETVPORTLINEDATA = 40;

export function allocDDHAL_GETVPORTLINEDATA(data?: Partial<DDHAL_GETVPORTLINEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETVPORTLINEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwLine !== undefined) view.setUint32(16, Number(data.dwLine), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.GetVideoPortLine !== undefined) view.setBigUint64(32, data.GetVideoPortLine === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortLine))), true);
  return buf;
}

export class DDHAL_GETVPORTLINEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwLine(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetVideoPortLine(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwLine(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetVideoPortLine(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETVPORTCONNECTDATA (size: 48)
 */
export interface DDHAL_GETVPORTCONNECTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwPortId: number;
  /** ptr */
  lpConnect: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumEntries: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETVPORTCONNECT */
  GetVideoPortConnectInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETVPORTCONNECTDATA = 48;

export function allocDDHAL_GETVPORTCONNECTDATA(data?: Partial<DDHAL_GETVPORTCONNECTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETVPORTCONNECTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwPortId !== undefined) view.setUint32(8, Number(data.dwPortId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpConnect !== undefined) view.setBigUint64(16, data.lpConnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpConnect))), true);
  // 0x18: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(24, Number(data.dwNumEntries), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.GetVideoPortConnectInfo !== undefined) view.setBigUint64(40, data.GetVideoPortConnectInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortConnectInfo))), true);
  return buf;
}

export class DDHAL_GETVPORTCONNECTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwPortId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lpConnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwNumEntries(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get GetVideoPortConnectInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwPortId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lpConnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set GetVideoPortConnectInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DESTROYVPORTDATA (size: 32)
 */
export interface DDHAL_DESTROYVPORTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_DESTROYVPORT */
  DestroyVideoPort: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DESTROYVPORTDATA = 32;

export function allocDDHAL_DESTROYVPORTDATA(data?: Partial<DDHAL_DESTROYVPORTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DESTROYVPORTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.DestroyVideoPort !== undefined) view.setBigUint64(24, data.DestroyVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyVideoPort))), true);
  return buf;
}

export class DDHAL_DESTROYVPORTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DestroyVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DestroyVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETVPORTFLIPSTATUSDATA (size: 32)
 */
export interface DDHAL_GETVPORTFLIPSTATUSDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** usize */
  fpSurface: bigint | number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETFLIPSTATUS */
  GetVideoPortFlipStatus: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETVPORTFLIPSTATUSDATA = 32;

export function allocDDHAL_GETVPORTFLIPSTATUSDATA(data?: Partial<DDHAL_GETVPORTFLIPSTATUSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETVPORTFLIPSTATUSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: usize
  if (data?.fpSurface !== undefined) view.setBigUint64(8, BigInt(data.fpSurface), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.GetVideoPortFlipStatus !== undefined) view.setBigUint64(24, data.GetVideoPortFlipStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortFlipStatus))), true);
  return buf;
}

export class DDHAL_GETVPORTFLIPSTATUSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get fpSurface(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetVideoPortFlipStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set fpSurface(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetVideoPortFlipStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_UPDATEVPORTDATA (size: 72)
 */
export interface DDHAL_UPDATEVPORTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** ptr */
  lplpDDSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lplpDDVBISurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoInfo: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwNumAutoflip: number;
  /** u32 */
  dwNumVBIAutoflip: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_UPDATE */
  UpdateVideoPort: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_UPDATEVPORTDATA = 72;

export function allocDDHAL_UPDATEVPORTDATA(data?: Partial<DDHAL_UPDATEVPORTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_UPDATEVPORTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: pointer
  if (data?.lplpDDSurface !== undefined) view.setBigUint64(16, data.lplpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lplpDDSurface))), true);
  // 0x18: pointer
  if (data?.lplpDDVBISurface !== undefined) view.setBigUint64(24, data.lplpDDVBISurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lplpDDVBISurface))), true);
  // 0x20: pointer
  if (data?.lpVideoInfo !== undefined) view.setBigUint64(32, data.lpVideoInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoInfo))), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: u32
  if (data?.dwNumAutoflip !== undefined) view.setUint32(44, Number(data.dwNumAutoflip), true);
  // 0x30: u32
  if (data?.dwNumVBIAutoflip !== undefined) view.setUint32(48, Number(data.dwNumVBIAutoflip), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(56, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x40: pointer
  if (data?.UpdateVideoPort !== undefined) view.setBigUint64(64, data.UpdateVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateVideoPort))), true);
  return buf;
}

export class DDHAL_UPDATEVPORTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lplpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lplpDDVBISurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpVideoInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwNumAutoflip(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwNumVBIAutoflip(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get UpdateVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lplpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lplpDDVBISurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpVideoInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwNumAutoflip(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwNumVBIAutoflip(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set UpdateVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_WAITFORVPORTSYNCDATA (size: 48)
 */
export interface DDHAL_WAITFORVPORTSYNCDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwLine: number;
  /** u32 */
  dwTimeOut: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_WAITFORSYNC */
  WaitForVideoPortSync: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_WAITFORVPORTSYNCDATA = 48;

export function allocDDHAL_WAITFORVPORTSYNCDATA(data?: Partial<DDHAL_WAITFORVPORTSYNCDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_WAITFORVPORTSYNCDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: u32
  if (data?.dwLine !== undefined) view.setUint32(20, Number(data.dwLine), true);
  // 0x18: u32
  if (data?.dwTimeOut !== undefined) view.setUint32(24, Number(data.dwTimeOut), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.WaitForVideoPortSync !== undefined) view.setBigUint64(40, data.WaitForVideoPortSync === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WaitForVideoPortSync))), true);
  return buf;
}

export class DDHAL_WAITFORVPORTSYNCDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwLine(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwTimeOut(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get WaitForVideoPortSync(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwLine(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwTimeOut(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set WaitForVideoPortSync(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETVPORTSIGNALDATA (size: 40)
 */
export interface DDHAL_GETVPORTSIGNALDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwStatus: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_GETSIGNALSTATUS */
  GetVideoSignalStatus: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETVPORTSIGNALDATA = 40;

export function allocDDHAL_GETVPORTSIGNALDATA(data?: Partial<DDHAL_GETVPORTSIGNALDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETVPORTSIGNALDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwStatus !== undefined) view.setUint32(16, Number(data.dwStatus), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.GetVideoSignalStatus !== undefined) view.setBigUint64(32, data.GetVideoSignalStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoSignalStatus))), true);
  return buf;
}

export class DDHAL_GETVPORTSIGNALDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwStatus(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetVideoSignalStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwStatus(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetVideoSignalStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_VPORTCOLORDATA (size: 48)
 */
export interface DDHAL_VPORTCOLORDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpColorData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALVPORTCB_COLORCONTROL */
  ColorControl: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_VPORTCOLORDATA = 48;

export function allocDDHAL_VPORTCOLORDATA(data?: Partial<DDHAL_VPORTCOLORDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_VPORTCOLORDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpColorData !== undefined) view.setBigUint64(24, data.lpColorData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpColorData))), true);
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.ColorControl !== undefined) view.setBigUint64(40, data.ColorControl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ColorControl))), true);
  return buf;
}

export class DDHAL_VPORTCOLORDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpColorData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ColorControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpColorData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ColorControl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_COLORCONTROLDATA (size: 48)
 */
export interface DDHAL_COLORCONTROLDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpColorData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALCOLORCB_COLORCONTROL */
  ColorControl: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_COLORCONTROLDATA = 48;

export function allocDDHAL_COLORCONTROLDATA(data?: Partial<DDHAL_COLORCONTROLDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_COLORCONTROLDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: pointer
  if (data?.lpColorData !== undefined) view.setBigUint64(16, data.lpColorData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpColorData))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.ColorControl !== undefined) view.setBigUint64(40, data.ColorControl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ColorControl))), true);
  return buf;
}

export class DDHAL_COLORCONTROLDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpColorData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ColorControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpColorData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ColorControl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETDRIVERINFODATA (size: 56)
 */
export interface DDHAL_GETDRIVERINFODATA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidInfo: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwExpectedSize: number;
  /** ptr */
  lpvData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwActualSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** usize */
  dwContext: bigint | number;
}

export const sizeofDDHAL_GETDRIVERINFODATA = 56;

export function allocDDHAL_GETDRIVERINFODATA(data?: Partial<DDHAL_GETDRIVERINFODATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETDRIVERINFODATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.guidInfo !== undefined) view.setBigUint64(8, data.guidInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidInfo))), true);
  // 0x10: u32
  if (data?.dwExpectedSize !== undefined) view.setUint32(16, Number(data.dwExpectedSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpvData !== undefined) view.setBigUint64(24, data.lpvData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpvData))), true);
  // 0x20: u32
  if (data?.dwActualSize !== undefined) view.setUint32(32, Number(data.dwActualSize), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(40, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x30: usize
  if (data?.dwContext !== undefined) view.setBigUint64(48, BigInt(data.dwContext), true);
  return buf;
}

export class DDHAL_GETDRIVERINFODATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get guidInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwExpectedSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpvData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwActualSize(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: usize
  get dwContext(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set guidInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwExpectedSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpvData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwActualSize(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: usize
  set dwContext(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETAVAILDRIVERMEMORYDATA (size: 48)
 */
export interface DDHAL_GETAVAILDRIVERMEMORYDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  DDSCaps: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwTotal: number;
  /** u32 */
  dwFree: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_GETAVAILDRIVERMEMORY */
  GetAvailDriverMemory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPSEX */
  ddsCapsEx: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETAVAILDRIVERMEMORYDATA = 48;

export function allocDDHAL_GETAVAILDRIVERMEMORYDATA(data?: Partial<DDHAL_GETAVAILDRIVERMEMORYDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETAVAILDRIVERMEMORYDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.DDSCaps !== undefined) view.setBigUint64(8, data.DDSCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DDSCaps))), true);
  // 0x10: u32
  if (data?.dwTotal !== undefined) view.setUint32(16, Number(data.dwTotal), true);
  // 0x14: u32
  if (data?.dwFree !== undefined) view.setUint32(20, Number(data.dwFree), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.GetAvailDriverMemory !== undefined) view.setBigUint64(32, data.GetAvailDriverMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetAvailDriverMemory))), true);
  // 0x28: pointer
  if (data?.ddsCapsEx !== undefined) view.setBigUint64(40, data.ddsCapsEx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCapsEx))), true);
  return buf;
}

export class DDHAL_GETAVAILDRIVERMEMORYDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DDSCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwTotal(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFree(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetAvailDriverMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ddsCapsEx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DDSCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwTotal(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFree(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetAvailDriverMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ddsCapsEx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_UPDATENONLOCALHEAPDATA (size: 56)
 */
export interface DDHAL_UPDATENONLOCALHEAPDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwHeap: number;
  /** usize */
  fpGARTLin: bigint | number;
  /** usize */
  fpGARTDev: bigint | number;
  /** usize */
  ulPolicyMaxBytes: bigint | number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_UPDATENONLOCALHEAP */
  UpdateNonLocalHeap: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_UPDATENONLOCALHEAPDATA = 56;

export function allocDDHAL_UPDATENONLOCALHEAPDATA(data?: Partial<DDHAL_UPDATENONLOCALHEAPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_UPDATENONLOCALHEAPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwHeap !== undefined) view.setUint32(8, Number(data.dwHeap), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.fpGARTLin !== undefined) view.setBigUint64(16, BigInt(data.fpGARTLin), true);
  // 0x18: usize
  if (data?.fpGARTDev !== undefined) view.setBigUint64(24, BigInt(data.fpGARTDev), true);
  // 0x20: usize
  if (data?.ulPolicyMaxBytes !== undefined) view.setBigUint64(32, BigInt(data.ulPolicyMaxBytes), true);
  // 0x28: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(40, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x30: pointer
  if (data?.UpdateNonLocalHeap !== undefined) view.setBigUint64(48, data.UpdateNonLocalHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateNonLocalHeap))), true);
  return buf;
}

export class DDHAL_UPDATENONLOCALHEAPDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwHeap(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  get fpGARTLin(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: usize
  get fpGARTDev(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: usize
  get ulPolicyMaxBytes(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get UpdateNonLocalHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwHeap(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  set fpGARTLin(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: usize
  set fpGARTDev(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: usize
  set ulPolicyMaxBytes(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set UpdateNonLocalHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETHEAPALIGNMENTDATA (size: 40)
 */
export interface DDHAL_GETHEAPALIGNMENTDATA {
  /** usize */
  dwInstance: bigint | number;
  /** u32 */
  dwHeap: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHAL_GETHEAPALIGNMENT */
  GetHeapAlignment: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.HEAPALIGNMENT */
  Alignment: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETHEAPALIGNMENTDATA = 40;

export function allocDDHAL_GETHEAPALIGNMENTDATA(data?: Partial<DDHAL_GETHEAPALIGNMENTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETHEAPALIGNMENTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwInstance !== undefined) view.setBigUint64(0, BigInt(data.dwInstance), true);
  // 0x08: u32
  if (data?.dwHeap !== undefined) view.setUint32(8, Number(data.dwHeap), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.GetHeapAlignment !== undefined) view.setBigUint64(24, data.GetHeapAlignment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetHeapAlignment))), true);
  // 0x20: pointer
  if (data?.Alignment !== undefined) view.setBigUint64(32, data.Alignment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Alignment))), true);
  return buf;
}

export class DDHAL_GETHEAPALIGNMENTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get dwInstance(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get dwHeap(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetHeapAlignment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Alignment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set dwInstance(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set dwHeap(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetHeapAlignment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Alignment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_CREATESURFACEEXDATA (size: 32)
 */
export interface DDHAL_CREATESURFACEEXDATA {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpDDLcl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSLcl: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_CREATESURFACEEXDATA = 32;

export function allocDDHAL_CREATESURFACEEXDATA(data?: Partial<DDHAL_CREATESURFACEEXDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_CREATESURFACEEXDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDLcl !== undefined) view.setBigUint64(8, data.lpDDLcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDLcl))), true);
  // 0x10: pointer
  if (data?.lpDDSLcl !== undefined) view.setBigUint64(16, data.lpDDSLcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSLcl))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DDHAL_CREATESURFACEEXDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDDLcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpDDSLcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDDLcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpDDSLcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETDRIVERSTATEDATA (size: 40)
 */
export interface DDHAL_GETDRIVERSTATEDATA {
  /** u32 */
  dwFlags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpdwStates: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwLength: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETDRIVERSTATEDATA = 40;

export function allocDDHAL_GETDRIVERSTATEDATA(data?: Partial<DDHAL_GETDRIVERSTATEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETDRIVERSTATEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x10: pointer
  if (data?.lpdwStates !== undefined) view.setBigUint64(16, data.lpdwStates === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpdwStates))), true);
  // 0x18: u32
  if (data?.dwLength !== undefined) view.setUint32(24, Number(data.dwLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DDHAL_GETDRIVERSTATEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpdwStates(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpdwStates(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DESTROYDDLOCALDATA (size: 24)
 */
export interface DDHAL_DESTROYDDLOCALDATA {
  /** u32 */
  dwFlags: number;
  /** ptr */
  pDDLcl: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DESTROYDDLOCALDATA = 24;

export function allocDDHAL_DESTROYDDLOCALDATA(data?: Partial<DDHAL_DESTROYDDLOCALDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DESTROYDDLOCALDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pDDLcl !== undefined) view.setBigUint64(8, data.pDDLcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDDLcl))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DDHAL_DESTROYDDLOCALDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pDDLcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pDDLcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_SYNCSURFACEDATA (size: 96)
 */
export interface DDHAL_SYNCSURFACEDATA {
  /** u32 */
  dwSize: number;
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwSurfaceOffset: number;
  /** usize */
  fpLockPtr: bigint | number;
  /** i32 */
  lPitch: number;
  /** u32 */
  dwOverlayOffset: number;
  /** u32 */
  dwOverlaySrcWidth: number;
  /** u32 */
  dwOverlaySrcHeight: number;
  /** u32 */
  dwOverlayDestWidth: number;
  /** u32 */
  dwOverlayDestHeight: number;
  /** usize */
  dwDriverReserved1: bigint | number;
  /** usize */
  dwDriverReserved2: bigint | number;
  /** usize */
  dwDriverReserved3: bigint | number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_SYNCSURFACEDATA = 96;

export function allocDDHAL_SYNCSURFACEDATA(data?: Partial<DDHAL_SYNCSURFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_SYNCSURFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(8, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x10: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(16, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x18: u32
  if (data?.dwSurfaceOffset !== undefined) view.setUint32(24, Number(data.dwSurfaceOffset), true);
  // 0x1c: pad4
  // 0x20: usize
  if (data?.fpLockPtr !== undefined) view.setBigUint64(32, BigInt(data.fpLockPtr), true);
  // 0x28: i32
  if (data?.lPitch !== undefined) view.setInt32(40, Number(data.lPitch), true);
  // 0x2c: u32
  if (data?.dwOverlayOffset !== undefined) view.setUint32(44, Number(data.dwOverlayOffset), true);
  // 0x30: u32
  if (data?.dwOverlaySrcWidth !== undefined) view.setUint32(48, Number(data.dwOverlaySrcWidth), true);
  // 0x34: u32
  if (data?.dwOverlaySrcHeight !== undefined) view.setUint32(52, Number(data.dwOverlaySrcHeight), true);
  // 0x38: u32
  if (data?.dwOverlayDestWidth !== undefined) view.setUint32(56, Number(data.dwOverlayDestWidth), true);
  // 0x3c: u32
  if (data?.dwOverlayDestHeight !== undefined) view.setUint32(60, Number(data.dwOverlayDestHeight), true);
  // 0x40: usize
  if (data?.dwDriverReserved1 !== undefined) view.setBigUint64(64, BigInt(data.dwDriverReserved1), true);
  // 0x48: usize
  if (data?.dwDriverReserved2 !== undefined) view.setBigUint64(72, BigInt(data.dwDriverReserved2), true);
  // 0x50: usize
  if (data?.dwDriverReserved3 !== undefined) view.setBigUint64(80, BigInt(data.dwDriverReserved3), true);
  // 0x58: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(88, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DDHAL_SYNCSURFACEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwSurfaceOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: usize
  get fpLockPtr(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: i32
  get lPitch(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u32
  get dwOverlayOffset(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwOverlaySrcWidth(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwOverlaySrcHeight(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwOverlayDestWidth(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwOverlayDestHeight(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: usize
  get dwDriverReserved1(): bigint | number {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: usize
  get dwDriverReserved2(): bigint | number {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: usize
  get dwDriverReserved3(): bigint | number {
    return Number(this.view.getBigUint64(80, true));
  }

  // 0x58: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwSurfaceOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: usize
  set fpLockPtr(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: i32
  set lPitch(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u32
  set dwOverlayOffset(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwOverlaySrcWidth(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwOverlaySrcHeight(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwOverlayDestWidth(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwOverlayDestHeight(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: usize
  set dwDriverReserved1(value: bigint | number) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: usize
  set dwDriverReserved2(value: bigint | number) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: usize
  set dwDriverReserved3(value: bigint | number) {
    this.view.setBigUint64(80, BigInt(value), true);
  }

  // 0x58: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_SYNCVIDEOPORTDATA (size: 72)
 */
export interface DDHAL_SYNCVIDEOPORTDATA {
  /** u32 */
  dwSize: number;
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwOriginOffset: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwVBIHeight: number;
  /** usize */
  dwDriverReserved1: bigint | number;
  /** usize */
  dwDriverReserved2: bigint | number;
  /** usize */
  dwDriverReserved3: bigint | number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_SYNCVIDEOPORTDATA = 72;

export function allocDDHAL_SYNCVIDEOPORTDATA(data?: Partial<DDHAL_SYNCVIDEOPORTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_SYNCVIDEOPORTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(8, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x10: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(16, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x18: u32
  if (data?.dwOriginOffset !== undefined) view.setUint32(24, Number(data.dwOriginOffset), true);
  // 0x1c: u32
  if (data?.dwHeight !== undefined) view.setUint32(28, Number(data.dwHeight), true);
  // 0x20: u32
  if (data?.dwVBIHeight !== undefined) view.setUint32(32, Number(data.dwVBIHeight), true);
  // 0x24: pad4
  // 0x28: usize
  if (data?.dwDriverReserved1 !== undefined) view.setBigUint64(40, BigInt(data.dwDriverReserved1), true);
  // 0x30: usize
  if (data?.dwDriverReserved2 !== undefined) view.setBigUint64(48, BigInt(data.dwDriverReserved2), true);
  // 0x38: usize
  if (data?.dwDriverReserved3 !== undefined) view.setBigUint64(56, BigInt(data.dwDriverReserved3), true);
  // 0x40: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(64, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DDHAL_SYNCVIDEOPORTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwOriginOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwHeight(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwVBIHeight(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: usize
  get dwDriverReserved1(): bigint | number {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x30: usize
  get dwDriverReserved2(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: usize
  get dwDriverReserved3(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwOriginOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwHeight(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwVBIHeight(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: usize
  set dwDriverReserved1(value: bigint | number) {
    this.view.setBigUint64(40, BigInt(value), true);
  }

  // 0x30: usize
  set dwDriverReserved2(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: usize
  set dwDriverReserved3(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETMOCOMPGUIDSDATA (size: 40)
 */
export interface DDHAL_GETMOCOMPGUIDSDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumGuids: number;
  /** ptr */
  lpGuids: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_GETGUIDS */
  GetMoCompGuids: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETMOCOMPGUIDSDATA = 40;

export function allocDDHAL_GETMOCOMPGUIDSDATA(data?: Partial<DDHAL_GETMOCOMPGUIDSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETMOCOMPGUIDSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwNumGuids !== undefined) view.setUint32(8, Number(data.dwNumGuids), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpGuids !== undefined) view.setBigUint64(16, data.lpGuids === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGuids))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.GetMoCompGuids !== undefined) view.setBigUint64(32, data.GetMoCompGuids === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetMoCompGuids))), true);
  return buf;
}

export class DDHAL_GETMOCOMPGUIDSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwNumGuids(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lpGuids(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetMoCompGuids(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwNumGuids(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lpGuids(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetMoCompGuids(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETMOCOMPFORMATSDATA (size: 48)
 */
export interface DDHAL_GETMOCOMPFORMATSDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpGuid: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumFormats: number;
  /** ptr */
  lpFormats: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_GETFORMATS */
  GetMoCompFormats: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETMOCOMPFORMATSDATA = 48;

export function allocDDHAL_GETMOCOMPFORMATSDATA(data?: Partial<DDHAL_GETMOCOMPFORMATSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETMOCOMPFORMATSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpGuid !== undefined) view.setBigUint64(8, data.lpGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGuid))), true);
  // 0x10: u32
  if (data?.dwNumFormats !== undefined) view.setUint32(16, Number(data.dwNumFormats), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpFormats !== undefined) view.setBigUint64(24, data.lpFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpFormats))), true);
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.GetMoCompFormats !== undefined) view.setBigUint64(40, data.GetMoCompFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetMoCompFormats))), true);
  return buf;
}

export class DDHAL_GETMOCOMPFORMATSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwNumFormats(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get GetMoCompFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwNumFormats(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set GetMoCompFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_CREATEMOCOMPDATA (size: 72)
 */
export interface DDHAL_CREATEMOCOMPDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpMoComp: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpGuid: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwUncompWidth: number;
  /** u32 */
  dwUncompHeight: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddUncompPixelFormat: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDataSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_CREATE */
  CreateMoComp: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_CREATEMOCOMPDATA = 72;

export function allocDDHAL_CREATEMOCOMPDATA(data?: Partial<DDHAL_CREATEMOCOMPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_CREATEMOCOMPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpMoComp !== undefined) view.setBigUint64(8, data.lpMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpMoComp))), true);
  // 0x10: pointer
  if (data?.lpGuid !== undefined) view.setBigUint64(16, data.lpGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGuid))), true);
  // 0x18: u32
  if (data?.dwUncompWidth !== undefined) view.setUint32(24, Number(data.dwUncompWidth), true);
  // 0x1c: u32
  if (data?.dwUncompHeight !== undefined) view.setUint32(28, Number(data.dwUncompHeight), true);
  // 0x20: pointer
  if (data?.ddUncompPixelFormat !== undefined) view.setBigUint64(32, data.ddUncompPixelFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddUncompPixelFormat))), true);
  // 0x28: pointer
  if (data?.lpData !== undefined) view.setBigUint64(40, data.lpData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpData))), true);
  // 0x30: u32
  if (data?.dwDataSize !== undefined) view.setUint32(48, Number(data.dwDataSize), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(56, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x40: pointer
  if (data?.CreateMoComp !== undefined) view.setBigUint64(64, data.CreateMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateMoComp))), true);
  return buf;
}

export class DDHAL_CREATEMOCOMPDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwUncompWidth(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwUncompHeight(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get ddUncompPixelFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get lpData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwDataSize(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get CreateMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwUncompWidth(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwUncompHeight(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set ddUncompPixelFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set lpData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwDataSize(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set CreateMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDMCCOMPBUFFERINFO (size: 40)
 */
export interface DDMCCOMPBUFFERINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwNumCompBuffers: number;
  /** u32 */
  dwWidthToCreate: number;
  /** u32 */
  dwHeightToCreate: number;
  /** u32 */
  dwBytesToAllocate: number;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS2 */
  ddCompCaps: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddPixelFormat: Uint8Array | Deno.PointerValue;
}

export const sizeofDDMCCOMPBUFFERINFO = 40;

export function allocDDMCCOMPBUFFERINFO(data?: Partial<DDMCCOMPBUFFERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDMCCOMPBUFFERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwNumCompBuffers !== undefined) view.setUint32(4, Number(data.dwNumCompBuffers), true);
  // 0x08: u32
  if (data?.dwWidthToCreate !== undefined) view.setUint32(8, Number(data.dwWidthToCreate), true);
  // 0x0c: u32
  if (data?.dwHeightToCreate !== undefined) view.setUint32(12, Number(data.dwHeightToCreate), true);
  // 0x10: u32
  if (data?.dwBytesToAllocate !== undefined) view.setUint32(16, Number(data.dwBytesToAllocate), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddCompCaps !== undefined) view.setBigUint64(24, data.ddCompCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddCompCaps))), true);
  // 0x20: pointer
  if (data?.ddPixelFormat !== undefined) view.setBigUint64(32, data.ddPixelFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddPixelFormat))), true);
  return buf;
}

export class DDMCCOMPBUFFERINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNumCompBuffers(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwWidthToCreate(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwHeightToCreate(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwBytesToAllocate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddCompCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddPixelFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNumCompBuffers(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwWidthToCreate(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwHeightToCreate(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwBytesToAllocate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddCompCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddPixelFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETMOCOMPCOMPBUFFDATA (size: 64)
 */
export interface DDHAL_GETMOCOMPCOMPBUFFDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpGuid: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddPixelFormat: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwNumTypesCompBuffs: number;
  /** ptr */
  lpCompBuffInfo: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_GETCOMPBUFFINFO */
  GetMoCompBuffInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETMOCOMPCOMPBUFFDATA = 64;

export function allocDDHAL_GETMOCOMPCOMPBUFFDATA(data?: Partial<DDHAL_GETMOCOMPCOMPBUFFDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETMOCOMPCOMPBUFFDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpGuid !== undefined) view.setBigUint64(8, data.lpGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGuid))), true);
  // 0x10: u32
  if (data?.dwWidth !== undefined) view.setUint32(16, Number(data.dwWidth), true);
  // 0x14: u32
  if (data?.dwHeight !== undefined) view.setUint32(20, Number(data.dwHeight), true);
  // 0x18: pointer
  if (data?.ddPixelFormat !== undefined) view.setBigUint64(24, data.ddPixelFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddPixelFormat))), true);
  // 0x20: u32
  if (data?.dwNumTypesCompBuffs !== undefined) view.setUint32(32, Number(data.dwNumTypesCompBuffs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpCompBuffInfo !== undefined) view.setBigUint64(40, data.lpCompBuffInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCompBuffInfo))), true);
  // 0x30: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(48, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x38: pointer
  if (data?.GetMoCompBuffInfo !== undefined) view.setBigUint64(56, data.GetMoCompBuffInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetMoCompBuffInfo))), true);
  return buf;
}

export class DDHAL_GETMOCOMPCOMPBUFFDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get ddPixelFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwNumTypesCompBuffs(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lpCompBuffInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get GetMoCompBuffInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set ddPixelFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwNumTypesCompBuffs(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lpCompBuffInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set GetMoCompBuffInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_GETINTERNALMOCOMPDATA (size: 56)
 */
export interface DDHAL_GETINTERNALMOCOMPDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpGuid: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddPixelFormat: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwScratchMemAlloc: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_GETINTERNALINFO */
  GetInternalMoCompInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_GETINTERNALMOCOMPDATA = 56;

export function allocDDHAL_GETINTERNALMOCOMPDATA(data?: Partial<DDHAL_GETINTERNALMOCOMPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_GETINTERNALMOCOMPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpGuid !== undefined) view.setBigUint64(8, data.lpGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGuid))), true);
  // 0x10: u32
  if (data?.dwWidth !== undefined) view.setUint32(16, Number(data.dwWidth), true);
  // 0x14: u32
  if (data?.dwHeight !== undefined) view.setUint32(20, Number(data.dwHeight), true);
  // 0x18: pointer
  if (data?.ddPixelFormat !== undefined) view.setBigUint64(24, data.ddPixelFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddPixelFormat))), true);
  // 0x20: u32
  if (data?.dwScratchMemAlloc !== undefined) view.setUint32(32, Number(data.dwScratchMemAlloc), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(40, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x30: pointer
  if (data?.GetInternalMoCompInfo !== undefined) view.setBigUint64(48, data.GetInternalMoCompInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetInternalMoCompInfo))), true);
  return buf;
}

export class DDHAL_GETINTERNALMOCOMPDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get ddPixelFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwScratchMemAlloc(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get GetInternalMoCompInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set ddPixelFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwScratchMemAlloc(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set GetInternalMoCompInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_BEGINMOCOMPFRAMEDATA (size: 72)
 */
export interface DDHAL_BEGINMOCOMPFRAMEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpMoComp: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDestSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwInputDataSize: number;
  /** ptr */
  lpInputData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwOutputDataSize: number;
  /** ptr */
  lpOutputData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_BEGINFRAME */
  BeginMoCompFrame: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_BEGINMOCOMPFRAMEDATA = 72;

export function allocDDHAL_BEGINMOCOMPFRAMEDATA(data?: Partial<DDHAL_BEGINMOCOMPFRAMEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_BEGINMOCOMPFRAMEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpMoComp !== undefined) view.setBigUint64(8, data.lpMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpMoComp))), true);
  // 0x10: pointer
  if (data?.lpDestSurface !== undefined) view.setBigUint64(16, data.lpDestSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDestSurface))), true);
  // 0x18: u32
  if (data?.dwInputDataSize !== undefined) view.setUint32(24, Number(data.dwInputDataSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpInputData !== undefined) view.setBigUint64(32, data.lpInputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpInputData))), true);
  // 0x28: u32
  if (data?.dwOutputDataSize !== undefined) view.setUint32(40, Number(data.dwOutputDataSize), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lpOutputData !== undefined) view.setBigUint64(48, data.lpOutputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOutputData))), true);
  // 0x38: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(56, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x40: pointer
  if (data?.BeginMoCompFrame !== undefined) view.setBigUint64(64, data.BeginMoCompFrame === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BeginMoCompFrame))), true);
  return buf;
}

export class DDHAL_BEGINMOCOMPFRAMEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpDestSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwInputDataSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lpInputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwOutputDataSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lpOutputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get BeginMoCompFrame(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpDestSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwInputDataSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lpInputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwOutputDataSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lpOutputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set BeginMoCompFrame(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_ENDMOCOMPFRAMEDATA (size: 48)
 */
export interface DDHAL_ENDMOCOMPFRAMEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpMoComp: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpInputData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwInputDataSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_ENDFRAME */
  EndMoCompFrame: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_ENDMOCOMPFRAMEDATA = 48;

export function allocDDHAL_ENDMOCOMPFRAMEDATA(data?: Partial<DDHAL_ENDMOCOMPFRAMEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_ENDMOCOMPFRAMEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpMoComp !== undefined) view.setBigUint64(8, data.lpMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpMoComp))), true);
  // 0x10: pointer
  if (data?.lpInputData !== undefined) view.setBigUint64(16, data.lpInputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpInputData))), true);
  // 0x18: u32
  if (data?.dwInputDataSize !== undefined) view.setUint32(24, Number(data.dwInputDataSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.EndMoCompFrame !== undefined) view.setBigUint64(40, data.EndMoCompFrame === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndMoCompFrame))), true);
  return buf;
}

export class DDHAL_ENDMOCOMPFRAMEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpInputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwInputDataSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get EndMoCompFrame(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpInputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwInputDataSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set EndMoCompFrame(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDMCBUFFERINFO (size: 32)
 */
export interface DDMCBUFFERINFO {
  /** u32 */
  dwSize: number;
  /** ptr */
  lpCompSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDataOffset: number;
  /** u32 */
  dwDataSize: number;
  /** ptr */
  lpPrivate: Deno.PointerValue | Uint8Array;
}

export const sizeofDDMCBUFFERINFO = 32;

export function allocDDMCBUFFERINFO(data?: Partial<DDMCBUFFERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDMCBUFFERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpCompSurface !== undefined) view.setBigUint64(8, data.lpCompSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCompSurface))), true);
  // 0x10: u32
  if (data?.dwDataOffset !== undefined) view.setUint32(16, Number(data.dwDataOffset), true);
  // 0x14: u32
  if (data?.dwDataSize !== undefined) view.setUint32(20, Number(data.dwDataSize), true);
  // 0x18: pointer
  if (data?.lpPrivate !== undefined) view.setBigUint64(24, data.lpPrivate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpPrivate))), true);
  return buf;
}

export class DDMCBUFFERINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpCompSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwDataOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwDataSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get lpPrivate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpCompSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwDataOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwDataSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set lpPrivate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_RENDERMOCOMPDATA (size: 88)
 */
export interface DDHAL_RENDERMOCOMPDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpMoComp: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumBuffers: number;
  /** ptr */
  lpBufferInfo: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFunction: number;
  /** ptr */
  lpInputData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwInputDataSize: number;
  /** ptr */
  lpOutputData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwOutputDataSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_RENDER */
  RenderMoComp: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_RENDERMOCOMPDATA = 88;

export function allocDDHAL_RENDERMOCOMPDATA(data?: Partial<DDHAL_RENDERMOCOMPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_RENDERMOCOMPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpMoComp !== undefined) view.setBigUint64(8, data.lpMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpMoComp))), true);
  // 0x10: u32
  if (data?.dwNumBuffers !== undefined) view.setUint32(16, Number(data.dwNumBuffers), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpBufferInfo !== undefined) view.setBigUint64(24, data.lpBufferInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBufferInfo))), true);
  // 0x20: u32
  if (data?.dwFunction !== undefined) view.setUint32(32, Number(data.dwFunction), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpInputData !== undefined) view.setBigUint64(40, data.lpInputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpInputData))), true);
  // 0x30: u32
  if (data?.dwInputDataSize !== undefined) view.setUint32(48, Number(data.dwInputDataSize), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.lpOutputData !== undefined) view.setBigUint64(56, data.lpOutputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOutputData))), true);
  // 0x40: u32
  if (data?.dwOutputDataSize !== undefined) view.setUint32(64, Number(data.dwOutputDataSize), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(72, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x50: pointer
  if (data?.RenderMoComp !== undefined) view.setBigUint64(80, data.RenderMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RenderMoComp))), true);
  return buf;
}

export class DDHAL_RENDERMOCOMPDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwNumBuffers(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpBufferInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwFunction(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lpInputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwInputDataSize(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get lpOutputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get dwOutputDataSize(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get RenderMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwNumBuffers(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpBufferInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwFunction(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lpInputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwInputDataSize(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set lpOutputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set dwOutputDataSize(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set RenderMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_QUERYMOCOMPSTATUSDATA (size: 48)
 */
export interface DDHAL_QUERYMOCOMPSTATUSDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpMoComp: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_QUERYSTATUS */
  QueryMoCompStatus: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_QUERYMOCOMPSTATUSDATA = 48;

export function allocDDHAL_QUERYMOCOMPSTATUSDATA(data?: Partial<DDHAL_QUERYMOCOMPSTATUSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_QUERYMOCOMPSTATUSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpMoComp !== undefined) view.setBigUint64(8, data.lpMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpMoComp))), true);
  // 0x10: pointer
  if (data?.lpSurface !== undefined) view.setBigUint64(16, data.lpSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurface))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.QueryMoCompStatus !== undefined) view.setBigUint64(40, data.QueryMoCompStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryMoCompStatus))), true);
  return buf;
}

export class DDHAL_QUERYMOCOMPSTATUSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get QueryMoCompStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set QueryMoCompStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDHAL_DESTROYMOCOMPDATA (size: 32)
 */
export interface DDHAL_DESTROYMOCOMPDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpMoComp: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.LPDDHALMOCOMPCB_DESTROY */
  DestroyMoComp: Uint8Array | Deno.PointerValue;
}

export const sizeofDDHAL_DESTROYMOCOMPDATA = 32;

export function allocDDHAL_DESTROYMOCOMPDATA(data?: Partial<DDHAL_DESTROYMOCOMPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDHAL_DESTROYMOCOMPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpMoComp !== undefined) view.setBigUint64(8, data.lpMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpMoComp))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.DestroyMoComp !== undefined) view.setBigUint64(24, data.DestroyMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyMoComp))), true);
  return buf;
}

export class DDHAL_DESTROYMOCOMPDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DestroyMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DestroyMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.VIDEOMEMORY (size: 48)
 */
export interface VIDEOMEMORY {
  /** u32 */
  dwFlags: number;
  /** usize */
  fpStart: bigint | number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsCaps: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsCapsAlt: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
}

export const sizeofVIDEOMEMORY = 48;

export function allocVIDEOMEMORY(data?: Partial<VIDEOMEMORY>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEOMEMORY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.fpStart !== undefined) view.setBigUint64(8, BigInt(data.fpStart), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(24, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  // 0x20: pointer
  if (data?.ddsCapsAlt !== undefined) view.setBigUint64(32, data.ddsCapsAlt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCapsAlt))), true);
  // 0x28: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(40, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  return buf;
}

export class VIDEOMEMORYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get fpStart(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddsCapsAlt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set fpStart(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddsCapsAlt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.VIDEOMEMORYINFO (size: 64)
 */
export interface VIDEOMEMORYINFO {
  /** usize */
  fpPrimary: bigint | number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwDisplayWidth: number;
  /** u32 */
  dwDisplayHeight: number;
  /** i32 */
  lDisplayPitch: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddpfDisplay: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwOffscreenAlign: number;
  /** u32 */
  dwOverlayAlign: number;
  /** u32 */
  dwTextureAlign: number;
  /** u32 */
  dwZBufferAlign: number;
  /** u32 */
  dwAlphaAlign: number;
  /** ptr */
  pvPrimary: Deno.PointerValue | Uint8Array;
}

export const sizeofVIDEOMEMORYINFO = 64;

export function allocVIDEOMEMORYINFO(data?: Partial<VIDEOMEMORYINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofVIDEOMEMORYINFO);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.fpPrimary !== undefined) view.setBigUint64(0, BigInt(data.fpPrimary), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.dwDisplayWidth !== undefined) view.setUint32(12, Number(data.dwDisplayWidth), true);
  // 0x10: u32
  if (data?.dwDisplayHeight !== undefined) view.setUint32(16, Number(data.dwDisplayHeight), true);
  // 0x14: i32
  if (data?.lDisplayPitch !== undefined) view.setInt32(20, Number(data.lDisplayPitch), true);
  // 0x18: pointer
  if (data?.ddpfDisplay !== undefined) view.setBigUint64(24, data.ddpfDisplay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddpfDisplay))), true);
  // 0x20: u32
  if (data?.dwOffscreenAlign !== undefined) view.setUint32(32, Number(data.dwOffscreenAlign), true);
  // 0x24: u32
  if (data?.dwOverlayAlign !== undefined) view.setUint32(36, Number(data.dwOverlayAlign), true);
  // 0x28: u32
  if (data?.dwTextureAlign !== undefined) view.setUint32(40, Number(data.dwTextureAlign), true);
  // 0x2c: u32
  if (data?.dwZBufferAlign !== undefined) view.setUint32(44, Number(data.dwZBufferAlign), true);
  // 0x30: u32
  if (data?.dwAlphaAlign !== undefined) view.setUint32(48, Number(data.dwAlphaAlign), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pvPrimary !== undefined) view.setBigUint64(56, data.pvPrimary === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvPrimary))), true);
  return buf;
}

export class VIDEOMEMORYINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get fpPrimary(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwDisplayWidth(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwDisplayHeight(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get lDisplayPitch(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: pointer
  get ddpfDisplay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwOffscreenAlign(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwOverlayAlign(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwTextureAlign(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwZBufferAlign(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwAlphaAlign(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get pvPrimary(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set fpPrimary(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwDisplayWidth(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwDisplayHeight(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set lDisplayPitch(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: pointer
  set ddpfDisplay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwOffscreenAlign(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwOverlayAlign(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwTextureAlign(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwZBufferAlign(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwAlphaAlign(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set pvPrimary(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_CALLBACKS (size: 80)
 */
export interface DD_CALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.PDD_DESTROYDRIVER */
  DestroyDriver: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_CREATESURFACE */
  CreateSurface: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SETCOLORKEY */
  SetColorKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SETMODE */
  SetMode: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_WAITFORVERTICALBLANK */
  WaitForVerticalBlank: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_CANCREATESURFACE */
  CanCreateSurface: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_CREATEPALETTE */
  CreatePalette: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_GETSCANLINE */
  GetScanLine: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_MAPMEMORY */
  MapMemory: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_CALLBACKS = 80;

export function allocDD_CALLBACKS(data?: Partial<DD_CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.DestroyDriver !== undefined) view.setBigUint64(8, data.DestroyDriver === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyDriver))), true);
  // 0x10: pointer
  if (data?.CreateSurface !== undefined) view.setBigUint64(16, data.CreateSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateSurface))), true);
  // 0x18: pointer
  if (data?.SetColorKey !== undefined) view.setBigUint64(24, data.SetColorKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetColorKey))), true);
  // 0x20: pointer
  if (data?.SetMode !== undefined) view.setBigUint64(32, data.SetMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetMode))), true);
  // 0x28: pointer
  if (data?.WaitForVerticalBlank !== undefined) view.setBigUint64(40, data.WaitForVerticalBlank === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WaitForVerticalBlank))), true);
  // 0x30: pointer
  if (data?.CanCreateSurface !== undefined) view.setBigUint64(48, data.CanCreateSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CanCreateSurface))), true);
  // 0x38: pointer
  if (data?.CreatePalette !== undefined) view.setBigUint64(56, data.CreatePalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreatePalette))), true);
  // 0x40: pointer
  if (data?.GetScanLine !== undefined) view.setBigUint64(64, data.GetScanLine === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetScanLine))), true);
  // 0x48: pointer
  if (data?.MapMemory !== undefined) view.setBigUint64(72, data.MapMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MapMemory))), true);
  return buf;
}

export class DD_CALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DestroyDriver(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SetColorKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get SetMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get WaitForVerticalBlank(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get CanCreateSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get CreatePalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get GetScanLine(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get MapMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DestroyDriver(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SetColorKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set SetMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set WaitForVerticalBlank(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set CanCreateSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set CreatePalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set GetScanLine(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set MapMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_MISCELLANEOUSCALLBACKS (size: 16)
 */
export interface DD_MISCELLANEOUSCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.PDD_GETAVAILDRIVERMEMORY */
  GetAvailDriverMemory: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_MISCELLANEOUSCALLBACKS = 16;

export function allocDD_MISCELLANEOUSCALLBACKS(data?: Partial<DD_MISCELLANEOUSCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_MISCELLANEOUSCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.GetAvailDriverMemory !== undefined) view.setBigUint64(8, data.GetAvailDriverMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetAvailDriverMemory))), true);
  return buf;
}

export class DD_MISCELLANEOUSCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get GetAvailDriverMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set GetAvailDriverMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_MISCELLANEOUS2CALLBACKS (size: 40)
 */
export interface DD_MISCELLANEOUS2CALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.PDD_ALPHABLT */
  AlphaBlt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_CREATESURFACEEX */
  CreateSurfaceEx: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_GETDRIVERSTATE */
  GetDriverState: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_DESTROYDDLOCAL */
  DestroyDDLocal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_MISCELLANEOUS2CALLBACKS = 40;

export function allocDD_MISCELLANEOUS2CALLBACKS(data?: Partial<DD_MISCELLANEOUS2CALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_MISCELLANEOUS2CALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.AlphaBlt !== undefined) view.setBigUint64(8, data.AlphaBlt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AlphaBlt))), true);
  // 0x10: pointer
  if (data?.CreateSurfaceEx !== undefined) view.setBigUint64(16, data.CreateSurfaceEx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateSurfaceEx))), true);
  // 0x18: pointer
  if (data?.GetDriverState !== undefined) view.setBigUint64(24, data.GetDriverState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetDriverState))), true);
  // 0x20: pointer
  if (data?.DestroyDDLocal !== undefined) view.setBigUint64(32, data.DestroyDDLocal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyDDLocal))), true);
  return buf;
}

export class DD_MISCELLANEOUS2CALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get AlphaBlt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateSurfaceEx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetDriverState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DestroyDDLocal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set AlphaBlt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateSurfaceEx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetDriverState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DestroyDDLocal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_NTCALLBACKS (size: 32)
 */
export interface DD_NTCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.PDD_FREEDRIVERMEMORY */
  FreeDriverMemory: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SETEXCLUSIVEMODE */
  SetExclusiveMode: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_FLIPTOGDISURFACE */
  FlipToGDISurface: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_NTCALLBACKS = 32;

export function allocDD_NTCALLBACKS(data?: Partial<DD_NTCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_NTCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.FreeDriverMemory !== undefined) view.setBigUint64(8, data.FreeDriverMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeDriverMemory))), true);
  // 0x10: pointer
  if (data?.SetExclusiveMode !== undefined) view.setBigUint64(16, data.SetExclusiveMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetExclusiveMode))), true);
  // 0x18: pointer
  if (data?.FlipToGDISurface !== undefined) view.setBigUint64(24, data.FlipToGDISurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlipToGDISurface))), true);
  return buf;
}

export class DD_NTCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get FreeDriverMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get SetExclusiveMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get FlipToGDISurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set FreeDriverMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set SetExclusiveMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set FlipToGDISurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_PALETTECALLBACKS (size: 24)
 */
export interface DD_PALETTECALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.PDD_PALCB_DESTROYPALETTE */
  DestroyPalette: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_PALCB_SETENTRIES */
  SetEntries: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_PALETTECALLBACKS = 24;

export function allocDD_PALETTECALLBACKS(data?: Partial<DD_PALETTECALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_PALETTECALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.DestroyPalette !== undefined) view.setBigUint64(8, data.DestroyPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyPalette))), true);
  // 0x10: pointer
  if (data?.SetEntries !== undefined) view.setBigUint64(16, data.SetEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetEntries))), true);
  return buf;
}

export class DD_PALETTECALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DestroyPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get SetEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DestroyPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set SetEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_SURFACECALLBACKS (size: 120)
 */
export interface DD_SURFACECALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_DESTROYSURFACE */
  DestroySurface: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_FLIP */
  Flip: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_SETCLIPLIST */
  SetClipList: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_LOCK */
  Lock: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_UNLOCK */
  Unlock: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_BLT */
  Blt: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_SETCOLORKEY */
  SetColorKey: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_ADDATTACHEDSURFACE */
  AddAttachedSurface: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_GETBLTSTATUS */
  GetBltStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_GETFLIPSTATUS */
  GetFlipStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_UPDATEOVERLAY */
  UpdateOverlay: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_SETOVERLAYPOSITION */
  SetOverlayPosition: Uint8Array | Deno.PointerValue;
  /** ptr */
  reserved4: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_SETPALETTE */
  SetPalette: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_SURFACECALLBACKS = 120;

export function allocDD_SURFACECALLBACKS(data?: Partial<DD_SURFACECALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_SURFACECALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.DestroySurface !== undefined) view.setBigUint64(8, data.DestroySurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroySurface))), true);
  // 0x10: pointer
  if (data?.Flip !== undefined) view.setBigUint64(16, data.Flip === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Flip))), true);
  // 0x18: pointer
  if (data?.SetClipList !== undefined) view.setBigUint64(24, data.SetClipList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetClipList))), true);
  // 0x20: pointer
  if (data?.Lock !== undefined) view.setBigUint64(32, data.Lock === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Lock))), true);
  // 0x28: pointer
  if (data?.Unlock !== undefined) view.setBigUint64(40, data.Unlock === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Unlock))), true);
  // 0x30: pointer
  if (data?.Blt !== undefined) view.setBigUint64(48, data.Blt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Blt))), true);
  // 0x38: pointer
  if (data?.SetColorKey !== undefined) view.setBigUint64(56, data.SetColorKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetColorKey))), true);
  // 0x40: pointer
  if (data?.AddAttachedSurface !== undefined) view.setBigUint64(64, data.AddAttachedSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddAttachedSurface))), true);
  // 0x48: pointer
  if (data?.GetBltStatus !== undefined) view.setBigUint64(72, data.GetBltStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetBltStatus))), true);
  // 0x50: pointer
  if (data?.GetFlipStatus !== undefined) view.setBigUint64(80, data.GetFlipStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetFlipStatus))), true);
  // 0x58: pointer
  if (data?.UpdateOverlay !== undefined) view.setBigUint64(88, data.UpdateOverlay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateOverlay))), true);
  // 0x60: pointer
  if (data?.SetOverlayPosition !== undefined) view.setBigUint64(96, data.SetOverlayPosition === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetOverlayPosition))), true);
  // 0x68: pointer
  if (data?.reserved4 !== undefined) view.setBigUint64(104, data.reserved4 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.reserved4))), true);
  // 0x70: pointer
  if (data?.SetPalette !== undefined) view.setBigUint64(112, data.SetPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetPalette))), true);
  return buf;
}

export class DD_SURFACECALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get DestroySurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Flip(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SetClipList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Lock(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Unlock(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Blt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get SetColorKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get AddAttachedSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get GetBltStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get GetFlipStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get UpdateOverlay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get SetOverlayPosition(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get reserved4(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get SetPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set DestroySurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Flip(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SetClipList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Lock(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Unlock(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Blt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set SetColorKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set AddAttachedSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set GetBltStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set GetFlipStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set UpdateOverlay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set SetOverlayPosition(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set reserved4(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set SetPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_VIDEOPORTCALLBACKS (size: 136)
 */
export interface DD_VIDEOPORTCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_CANCREATEVIDEOPORT */
  CanCreateVideoPort: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_CREATEVIDEOPORT */
  CreateVideoPort: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_FLIP */
  FlipVideoPort: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_GETBANDWIDTH */
  GetVideoPortBandwidth: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_GETINPUTFORMATS */
  GetVideoPortInputFormats: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_GETOUTPUTFORMATS */
  GetVideoPortOutputFormats: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpReserved1: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_GETFIELD */
  GetVideoPortField: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_GETLINE */
  GetVideoPortLine: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_GETVPORTCONNECT */
  GetVideoPortConnectInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_DESTROYVPORT */
  DestroyVideoPort: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_GETFLIPSTATUS */
  GetVideoPortFlipStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_UPDATE */
  UpdateVideoPort: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_WAITFORSYNC */
  WaitForVideoPortSync: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_GETSIGNALSTATUS */
  GetVideoSignalStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_VPORTCB_COLORCONTROL */
  ColorControl: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_VIDEOPORTCALLBACKS = 136;

export function allocDD_VIDEOPORTCALLBACKS(data?: Partial<DD_VIDEOPORTCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_VIDEOPORTCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.CanCreateVideoPort !== undefined) view.setBigUint64(8, data.CanCreateVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CanCreateVideoPort))), true);
  // 0x10: pointer
  if (data?.CreateVideoPort !== undefined) view.setBigUint64(16, data.CreateVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateVideoPort))), true);
  // 0x18: pointer
  if (data?.FlipVideoPort !== undefined) view.setBigUint64(24, data.FlipVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlipVideoPort))), true);
  // 0x20: pointer
  if (data?.GetVideoPortBandwidth !== undefined) view.setBigUint64(32, data.GetVideoPortBandwidth === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortBandwidth))), true);
  // 0x28: pointer
  if (data?.GetVideoPortInputFormats !== undefined) view.setBigUint64(40, data.GetVideoPortInputFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortInputFormats))), true);
  // 0x30: pointer
  if (data?.GetVideoPortOutputFormats !== undefined) view.setBigUint64(48, data.GetVideoPortOutputFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortOutputFormats))), true);
  // 0x38: pointer
  if (data?.lpReserved1 !== undefined) view.setBigUint64(56, data.lpReserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpReserved1))), true);
  // 0x40: pointer
  if (data?.GetVideoPortField !== undefined) view.setBigUint64(64, data.GetVideoPortField === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortField))), true);
  // 0x48: pointer
  if (data?.GetVideoPortLine !== undefined) view.setBigUint64(72, data.GetVideoPortLine === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortLine))), true);
  // 0x50: pointer
  if (data?.GetVideoPortConnectInfo !== undefined) view.setBigUint64(80, data.GetVideoPortConnectInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortConnectInfo))), true);
  // 0x58: pointer
  if (data?.DestroyVideoPort !== undefined) view.setBigUint64(88, data.DestroyVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyVideoPort))), true);
  // 0x60: pointer
  if (data?.GetVideoPortFlipStatus !== undefined) view.setBigUint64(96, data.GetVideoPortFlipStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortFlipStatus))), true);
  // 0x68: pointer
  if (data?.UpdateVideoPort !== undefined) view.setBigUint64(104, data.UpdateVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateVideoPort))), true);
  // 0x70: pointer
  if (data?.WaitForVideoPortSync !== undefined) view.setBigUint64(112, data.WaitForVideoPortSync === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WaitForVideoPortSync))), true);
  // 0x78: pointer
  if (data?.GetVideoSignalStatus !== undefined) view.setBigUint64(120, data.GetVideoSignalStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoSignalStatus))), true);
  // 0x80: pointer
  if (data?.ColorControl !== undefined) view.setBigUint64(128, data.ColorControl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ColorControl))), true);
  return buf;
}

export class DD_VIDEOPORTCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get CanCreateVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get FlipVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetVideoPortBandwidth(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get GetVideoPortInputFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get GetVideoPortOutputFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpReserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get GetVideoPortField(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get GetVideoPortLine(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get GetVideoPortConnectInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get DestroyVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get GetVideoPortFlipStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get UpdateVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get WaitForVideoPortSync(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get GetVideoSignalStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get ColorControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set CanCreateVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set FlipVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetVideoPortBandwidth(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set GetVideoPortInputFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set GetVideoPortOutputFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpReserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set GetVideoPortField(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set GetVideoPortLine(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set GetVideoPortConnectInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set DestroyVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set GetVideoPortFlipStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set UpdateVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set WaitForVideoPortSync(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set GetVideoSignalStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set ColorControl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_COLORCONTROLCALLBACKS (size: 16)
 */
export interface DD_COLORCONTROLCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.PDD_COLORCB_COLORCONTROL */
  ColorControl: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_COLORCONTROLCALLBACKS = 16;

export function allocDD_COLORCONTROLCALLBACKS(data?: Partial<DD_COLORCONTROLCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_COLORCONTROLCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.ColorControl !== undefined) view.setBigUint64(8, data.ColorControl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ColorControl))), true);
  return buf;
}

export class DD_COLORCONTROLCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get ColorControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set ColorControl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_KERNELCALLBACKS (size: 24)
 */
export interface DD_KERNELCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.PDD_KERNELCB_SYNCSURFACE */
  SyncSurfaceData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_KERNELCB_SYNCVIDEOPORT */
  SyncVideoPortData: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_KERNELCALLBACKS = 24;

export function allocDD_KERNELCALLBACKS(data?: Partial<DD_KERNELCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_KERNELCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.SyncSurfaceData !== undefined) view.setBigUint64(8, data.SyncSurfaceData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SyncSurfaceData))), true);
  // 0x10: pointer
  if (data?.SyncVideoPortData !== undefined) view.setBigUint64(16, data.SyncVideoPortData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SyncVideoPortData))), true);
  return buf;
}

export class DD_KERNELCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get SyncSurfaceData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get SyncVideoPortData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set SyncSurfaceData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set SyncVideoPortData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_MOTIONCOMPCALLBACKS (size: 88)
 */
export interface DD_MOTIONCOMPCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.PDD_MOCOMPCB_GETGUIDS */
  GetMoCompGuids: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_MOCOMPCB_GETFORMATS */
  GetMoCompFormats: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_MOCOMPCB_CREATE */
  CreateMoComp: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_MOCOMPCB_GETCOMPBUFFINFO */
  GetMoCompBuffInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_MOCOMPCB_GETINTERNALINFO */
  GetInternalMoCompInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_MOCOMPCB_BEGINFRAME */
  BeginMoCompFrame: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_MOCOMPCB_ENDFRAME */
  EndMoCompFrame: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_MOCOMPCB_RENDER */
  RenderMoComp: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_MOCOMPCB_QUERYSTATUS */
  QueryMoCompStatus: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_MOCOMPCB_DESTROY */
  DestroyMoComp: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_MOTIONCOMPCALLBACKS = 88;

export function allocDD_MOTIONCOMPCALLBACKS(data?: Partial<DD_MOTIONCOMPCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_MOTIONCOMPCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.GetMoCompGuids !== undefined) view.setBigUint64(8, data.GetMoCompGuids === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetMoCompGuids))), true);
  // 0x10: pointer
  if (data?.GetMoCompFormats !== undefined) view.setBigUint64(16, data.GetMoCompFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetMoCompFormats))), true);
  // 0x18: pointer
  if (data?.CreateMoComp !== undefined) view.setBigUint64(24, data.CreateMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateMoComp))), true);
  // 0x20: pointer
  if (data?.GetMoCompBuffInfo !== undefined) view.setBigUint64(32, data.GetMoCompBuffInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetMoCompBuffInfo))), true);
  // 0x28: pointer
  if (data?.GetInternalMoCompInfo !== undefined) view.setBigUint64(40, data.GetInternalMoCompInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetInternalMoCompInfo))), true);
  // 0x30: pointer
  if (data?.BeginMoCompFrame !== undefined) view.setBigUint64(48, data.BeginMoCompFrame === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.BeginMoCompFrame))), true);
  // 0x38: pointer
  if (data?.EndMoCompFrame !== undefined) view.setBigUint64(56, data.EndMoCompFrame === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.EndMoCompFrame))), true);
  // 0x40: pointer
  if (data?.RenderMoComp !== undefined) view.setBigUint64(64, data.RenderMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RenderMoComp))), true);
  // 0x48: pointer
  if (data?.QueryMoCompStatus !== undefined) view.setBigUint64(72, data.QueryMoCompStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.QueryMoCompStatus))), true);
  // 0x50: pointer
  if (data?.DestroyMoComp !== undefined) view.setBigUint64(80, data.DestroyMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyMoComp))), true);
  return buf;
}

export class DD_MOTIONCOMPCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get GetMoCompGuids(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get GetMoCompFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get CreateMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetMoCompBuffInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get GetInternalMoCompInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get BeginMoCompFrame(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get EndMoCompFrame(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get RenderMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get QueryMoCompStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get DestroyMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set GetMoCompGuids(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set GetMoCompFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set CreateMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetMoCompBuffInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set GetInternalMoCompInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set BeginMoCompFrame(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set EndMoCompFrame(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set RenderMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set QueryMoCompStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set DestroyMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_NONLOCALVIDMEMCAPS (size: 32)
 */
export interface DD_NONLOCALVIDMEMCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwNLVBCaps: number;
  /** u32 */
  dwNLVBCaps2: number;
  /** u32 */
  dwNLVBCKeyCaps: number;
  /** u32 */
  dwNLVBFXCaps: number;
  /** array */
  dwNLVBRops: Deno.PointerValue;
}

export const sizeofDD_NONLOCALVIDMEMCAPS = 32;

export function allocDD_NONLOCALVIDMEMCAPS(data?: Partial<DD_NONLOCALVIDMEMCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_NONLOCALVIDMEMCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwNLVBCaps !== undefined) view.setUint32(4, Number(data.dwNLVBCaps), true);
  // 0x08: u32
  if (data?.dwNLVBCaps2 !== undefined) view.setUint32(8, Number(data.dwNLVBCaps2), true);
  // 0x0c: u32
  if (data?.dwNLVBCKeyCaps !== undefined) view.setUint32(12, Number(data.dwNLVBCKeyCaps), true);
  // 0x10: u32
  if (data?.dwNLVBFXCaps !== undefined) view.setUint32(16, Number(data.dwNLVBFXCaps), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwNLVBRops !== undefined) view.setBigUint64(24, data.dwNLVBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwNLVBRops))), true);
  return buf;
}

export class DD_NONLOCALVIDMEMCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNLVBCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwNLVBCaps2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwNLVBCKeyCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwNLVBFXCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get dwNLVBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNLVBCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwNLVBCaps2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwNLVBCKeyCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwNLVBFXCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set dwNLVBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_PALETTE_GLOBAL (size: 8)
 */
export interface DD_PALETTE_GLOBAL {
  /** usize */
  dwReserved1: bigint | number;
}

export const sizeofDD_PALETTE_GLOBAL = 8;

export function allocDD_PALETTE_GLOBAL(data?: Partial<DD_PALETTE_GLOBAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_PALETTE_GLOBAL);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(0, BigInt(data.dwReserved1), true);
  return buf;
}

export class DD_PALETTE_GLOBALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_PALETTE_LOCAL (size: 16)
 */
export interface DD_PALETTE_LOCAL {
  /** u32 */
  dwReserved0: number;
  /** usize */
  dwReserved1: bigint | number;
}

export const sizeofDD_PALETTE_LOCAL = 16;

export function allocDD_PALETTE_LOCAL(data?: Partial<DD_PALETTE_LOCAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_PALETTE_LOCAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwReserved0 !== undefined) view.setUint32(0, Number(data.dwReserved0), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(8, BigInt(data.dwReserved1), true);
  return buf;
}

export class DD_PALETTE_LOCALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwReserved0(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u32
  set dwReserved0(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_CLIPPER_GLOBAL (size: 8)
 */
export interface DD_CLIPPER_GLOBAL {
  /** usize */
  dwReserved1: bigint | number;
}

export const sizeofDD_CLIPPER_GLOBAL = 8;

export function allocDD_CLIPPER_GLOBAL(data?: Partial<DD_CLIPPER_GLOBAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_CLIPPER_GLOBAL);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(0, BigInt(data.dwReserved1), true);
  return buf;
}

export class DD_CLIPPER_GLOBALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_CLIPPER_LOCAL (size: 8)
 */
export interface DD_CLIPPER_LOCAL {
  /** usize */
  dwReserved1: bigint | number;
}

export const sizeofDD_CLIPPER_LOCAL = 8;

export function allocDD_CLIPPER_LOCAL(data?: Partial<DD_CLIPPER_LOCAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_CLIPPER_LOCAL);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(0, BigInt(data.dwReserved1), true);
  return buf;
}

export class DD_CLIPPER_LOCALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_ATTACHLIST (size: 16)
 */
export interface DD_ATTACHLIST {
  /** ptr */
  lpLink: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpAttached: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_ATTACHLIST = 16;

export function allocDD_ATTACHLIST(data?: Partial<DD_ATTACHLIST>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_ATTACHLIST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpLink !== undefined) view.setBigUint64(0, data.lpLink === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLink))), true);
  // 0x08: pointer
  if (data?.lpAttached !== undefined) view.setBigUint64(8, data.lpAttached === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpAttached))), true);
  return buf;
}

export class DD_ATTACHLISTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpLink(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpAttached(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpLink(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpAttached(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_SURFACE_INT (size: 8)
 */
export interface DD_SURFACE_INT {
  /** ptr */
  lpLcl: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_SURFACE_INT = 8;

export function allocDD_SURFACE_INT(data?: Partial<DD_SURFACE_INT>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_SURFACE_INT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpLcl !== undefined) view.setBigUint64(0, data.lpLcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpLcl))), true);
  return buf;
}

export class DD_SURFACE_INTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpLcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpLcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_SURFACE_GLOBAL (size: 80)
 */
export interface DD_SURFACE_GLOBAL {
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** usize */
  fpVidMem: bigint | number;
  /** _Anonymous3_e__Union */
  Anonymous3: Uint8Array | Deno.PointerValue;
  /** i32 */
  yHint: number;
  /** i32 */
  xHint: number;
  /** u32 */
  wHeight: number;
  /** u32 */
  wWidth: number;
  /** usize */
  dwReserved1: bigint | number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddpfSurface: Uint8Array | Deno.PointerValue;
  /** usize */
  fpHeapOffset: bigint | number;
  /** Windows.Win32.Foundation.HANDLE */
  hCreatorProcess: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_SURFACE_GLOBAL = 80;

export function allocDD_SURFACE_GLOBAL(data?: Partial<DD_SURFACE_GLOBAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_SURFACE_GLOBAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(0, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x08: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(8, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x10: usize
  if (data?.fpVidMem !== undefined) view.setBigUint64(16, BigInt(data.fpVidMem), true);
  // 0x18: pointer
  if (data?.Anonymous3 !== undefined) view.setBigUint64(24, data.Anonymous3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous3))), true);
  // 0x20: i32
  if (data?.yHint !== undefined) view.setInt32(32, Number(data.yHint), true);
  // 0x24: i32
  if (data?.xHint !== undefined) view.setInt32(36, Number(data.xHint), true);
  // 0x28: u32
  if (data?.wHeight !== undefined) view.setUint32(40, Number(data.wHeight), true);
  // 0x2c: u32
  if (data?.wWidth !== undefined) view.setUint32(44, Number(data.wWidth), true);
  // 0x30: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(48, BigInt(data.dwReserved1), true);
  // 0x38: pointer
  if (data?.ddpfSurface !== undefined) view.setBigUint64(56, data.ddpfSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddpfSurface))), true);
  // 0x40: usize
  if (data?.fpHeapOffset !== undefined) view.setBigUint64(64, BigInt(data.fpHeapOffset), true);
  // 0x48: pointer
  if (data?.hCreatorProcess !== undefined) view.setBigUint64(72, data.hCreatorProcess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hCreatorProcess))), true);
  return buf;
}

export class DD_SURFACE_GLOBALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get fpVidMem(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get Anonymous3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get yHint(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get xHint(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: u32
  get wHeight(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get wWidth(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: pointer
  get ddpfSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: usize
  get fpHeapOffset(): bigint | number {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x48: pointer
  get hCreatorProcess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set fpVidMem(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set Anonymous3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set yHint(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set xHint(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: u32
  set wHeight(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set wWidth(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: pointer
  set ddpfSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: usize
  set fpHeapOffset(value: bigint | number) {
    this.view.setBigUint64(64, BigInt(value), true);
  }

  // 0x48: pointer
  set hCreatorProcess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_SURFACE_MORE (size: 40)
 */
export interface DD_SURFACE_MORE {
  /** u32 */
  dwMipMapCount: number;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwOverlayFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPSEX */
  ddsCapsEx: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwSurfaceHandle: number;
}

export const sizeofDD_SURFACE_MORE = 40;

export function allocDD_SURFACE_MORE(data?: Partial<DD_SURFACE_MORE>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_SURFACE_MORE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMipMapCount !== undefined) view.setUint32(0, Number(data.dwMipMapCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwOverlayFlags !== undefined) view.setUint32(16, Number(data.dwOverlayFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddsCapsEx !== undefined) view.setBigUint64(24, data.ddsCapsEx === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCapsEx))), true);
  // 0x20: u32
  if (data?.dwSurfaceHandle !== undefined) view.setUint32(32, Number(data.dwSurfaceHandle), true);
  // 0x24: pad4
  return buf;
}

export class DD_SURFACE_MOREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMipMapCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwOverlayFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddsCapsEx(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwSurfaceHandle(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwMipMapCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwOverlayFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddsCapsEx(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwSurfaceHandle(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_SURFACE_LOCAL (size: 80)
 */
export interface DD_SURFACE_LOCAL {
  /** ptr */
  lpGbl: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsCaps: Uint8Array | Deno.PointerValue;
  /** usize */
  dwReserved1: bigint | number;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpSurfMore: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpAttachList: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpAttachListFrom: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.RECT */
  rcOverlaySrc: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_SURFACE_LOCAL = 80;

export function allocDD_SURFACE_LOCAL(data?: Partial<DD_SURFACE_LOCAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_SURFACE_LOCAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpGbl !== undefined) view.setBigUint64(0, data.lpGbl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGbl))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(16, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  // 0x18: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(24, BigInt(data.dwReserved1), true);
  // 0x20: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(32, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x28: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(40, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x30: pointer
  if (data?.lpSurfMore !== undefined) view.setBigUint64(48, data.lpSurfMore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfMore))), true);
  // 0x38: pointer
  if (data?.lpAttachList !== undefined) view.setBigUint64(56, data.lpAttachList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpAttachList))), true);
  // 0x40: pointer
  if (data?.lpAttachListFrom !== undefined) view.setBigUint64(64, data.lpAttachListFrom === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpAttachListFrom))), true);
  // 0x48: pointer
  if (data?.rcOverlaySrc !== undefined) view.setBigUint64(72, data.rcOverlaySrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rcOverlaySrc))), true);
  return buf;
}

export class DD_SURFACE_LOCALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpGbl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lpSurfMore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpAttachList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lpAttachListFrom(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get rcOverlaySrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpGbl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lpSurfMore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpAttachList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lpAttachListFrom(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set rcOverlaySrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_MORECAPS (size: 40)
 */
export interface DD_MORECAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwAlphaCaps: number;
  /** u32 */
  dwSVBAlphaCaps: number;
  /** u32 */
  dwVSBAlphaCaps: number;
  /** u32 */
  dwSSBAlphaCaps: number;
  /** u32 */
  dwFilterCaps: number;
  /** u32 */
  dwSVBFilterCaps: number;
  /** u32 */
  dwVSBFilterCaps: number;
  /** u32 */
  dwSSBFilterCaps: number;
}

export const sizeofDD_MORECAPS = 40;

export function allocDD_MORECAPS(data?: Partial<DD_MORECAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_MORECAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwAlphaCaps !== undefined) view.setUint32(4, Number(data.dwAlphaCaps), true);
  // 0x08: u32
  if (data?.dwSVBAlphaCaps !== undefined) view.setUint32(8, Number(data.dwSVBAlphaCaps), true);
  // 0x0c: u32
  if (data?.dwVSBAlphaCaps !== undefined) view.setUint32(12, Number(data.dwVSBAlphaCaps), true);
  // 0x10: u32
  if (data?.dwSSBAlphaCaps !== undefined) view.setUint32(16, Number(data.dwSSBAlphaCaps), true);
  // 0x14: u32
  if (data?.dwFilterCaps !== undefined) view.setUint32(20, Number(data.dwFilterCaps), true);
  // 0x18: u32
  if (data?.dwSVBFilterCaps !== undefined) view.setUint32(24, Number(data.dwSVBFilterCaps), true);
  // 0x1c: u32
  if (data?.dwVSBFilterCaps !== undefined) view.setUint32(28, Number(data.dwVSBFilterCaps), true);
  // 0x20: u32
  if (data?.dwSSBFilterCaps !== undefined) view.setUint32(32, Number(data.dwSSBFilterCaps), true);
  // 0x24: pad4
  return buf;
}

export class DD_MORECAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwAlphaCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSVBAlphaCaps(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwVSBAlphaCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwSSBAlphaCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFilterCaps(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwSVBFilterCaps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwVSBFilterCaps(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwSSBFilterCaps(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwAlphaCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSVBAlphaCaps(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwVSBAlphaCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwSSBAlphaCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFilterCaps(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwSVBFilterCaps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwVSBFilterCaps(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwSSBFilterCaps(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDNTCORECAPS (size: 240)
 */
export interface DDNTCORECAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwCaps: number;
  /** u32 */
  dwCaps2: number;
  /** u32 */
  dwCKeyCaps: number;
  /** u32 */
  dwFXCaps: number;
  /** u32 */
  dwFXAlphaCaps: number;
  /** u32 */
  dwPalCaps: number;
  /** u32 */
  dwSVCaps: number;
  /** u32 */
  dwAlphaBltConstBitDepths: number;
  /** u32 */
  dwAlphaBltPixelBitDepths: number;
  /** u32 */
  dwAlphaBltSurfaceBitDepths: number;
  /** u32 */
  dwAlphaOverlayConstBitDepths: number;
  /** u32 */
  dwAlphaOverlayPixelBitDepths: number;
  /** u32 */
  dwAlphaOverlaySurfaceBitDepths: number;
  /** u32 */
  dwZBufferBitDepths: number;
  /** u32 */
  dwVidMemTotal: number;
  /** u32 */
  dwVidMemFree: number;
  /** u32 */
  dwMaxVisibleOverlays: number;
  /** u32 */
  dwCurrVisibleOverlays: number;
  /** u32 */
  dwNumFourCCCodes: number;
  /** u32 */
  dwAlignBoundarySrc: number;
  /** u32 */
  dwAlignSizeSrc: number;
  /** u32 */
  dwAlignBoundaryDest: number;
  /** u32 */
  dwAlignSizeDest: number;
  /** u32 */
  dwAlignStrideAlign: number;
  /** array */
  dwRops: Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  ddsCaps: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwMinOverlayStretch: number;
  /** u32 */
  dwMaxOverlayStretch: number;
  /** u32 */
  dwMinLiveVideoStretch: number;
  /** u32 */
  dwMaxLiveVideoStretch: number;
  /** u32 */
  dwMinHwCodecStretch: number;
  /** u32 */
  dwMaxHwCodecStretch: number;
  /** u32 */
  dwReserved1: number;
  /** u32 */
  dwReserved2: number;
  /** u32 */
  dwReserved3: number;
  /** u32 */
  dwSVBCaps: number;
  /** u32 */
  dwSVBCKeyCaps: number;
  /** u32 */
  dwSVBFXCaps: number;
  /** array */
  dwSVBRops: Deno.PointerValue;
  /** u32 */
  dwVSBCaps: number;
  /** u32 */
  dwVSBCKeyCaps: number;
  /** u32 */
  dwVSBFXCaps: number;
  /** array */
  dwVSBRops: Deno.PointerValue;
  /** u32 */
  dwSSBCaps: number;
  /** u32 */
  dwSSBCKeyCaps: number;
  /** u32 */
  dwSSBFXCaps: number;
  /** array */
  dwSSBRops: Deno.PointerValue;
  /** u32 */
  dwMaxVideoPorts: number;
  /** u32 */
  dwCurrVideoPorts: number;
  /** u32 */
  dwSVBCaps2: number;
}

export const sizeofDDNTCORECAPS = 240;

export function allocDDNTCORECAPS(data?: Partial<DDNTCORECAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDDNTCORECAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwCaps !== undefined) view.setUint32(4, Number(data.dwCaps), true);
  // 0x08: u32
  if (data?.dwCaps2 !== undefined) view.setUint32(8, Number(data.dwCaps2), true);
  // 0x0c: u32
  if (data?.dwCKeyCaps !== undefined) view.setUint32(12, Number(data.dwCKeyCaps), true);
  // 0x10: u32
  if (data?.dwFXCaps !== undefined) view.setUint32(16, Number(data.dwFXCaps), true);
  // 0x14: u32
  if (data?.dwFXAlphaCaps !== undefined) view.setUint32(20, Number(data.dwFXAlphaCaps), true);
  // 0x18: u32
  if (data?.dwPalCaps !== undefined) view.setUint32(24, Number(data.dwPalCaps), true);
  // 0x1c: u32
  if (data?.dwSVCaps !== undefined) view.setUint32(28, Number(data.dwSVCaps), true);
  // 0x20: u32
  if (data?.dwAlphaBltConstBitDepths !== undefined) view.setUint32(32, Number(data.dwAlphaBltConstBitDepths), true);
  // 0x24: u32
  if (data?.dwAlphaBltPixelBitDepths !== undefined) view.setUint32(36, Number(data.dwAlphaBltPixelBitDepths), true);
  // 0x28: u32
  if (data?.dwAlphaBltSurfaceBitDepths !== undefined) view.setUint32(40, Number(data.dwAlphaBltSurfaceBitDepths), true);
  // 0x2c: u32
  if (data?.dwAlphaOverlayConstBitDepths !== undefined) view.setUint32(44, Number(data.dwAlphaOverlayConstBitDepths), true);
  // 0x30: u32
  if (data?.dwAlphaOverlayPixelBitDepths !== undefined) view.setUint32(48, Number(data.dwAlphaOverlayPixelBitDepths), true);
  // 0x34: u32
  if (data?.dwAlphaOverlaySurfaceBitDepths !== undefined) view.setUint32(52, Number(data.dwAlphaOverlaySurfaceBitDepths), true);
  // 0x38: u32
  if (data?.dwZBufferBitDepths !== undefined) view.setUint32(56, Number(data.dwZBufferBitDepths), true);
  // 0x3c: u32
  if (data?.dwVidMemTotal !== undefined) view.setUint32(60, Number(data.dwVidMemTotal), true);
  // 0x40: u32
  if (data?.dwVidMemFree !== undefined) view.setUint32(64, Number(data.dwVidMemFree), true);
  // 0x44: u32
  if (data?.dwMaxVisibleOverlays !== undefined) view.setUint32(68, Number(data.dwMaxVisibleOverlays), true);
  // 0x48: u32
  if (data?.dwCurrVisibleOverlays !== undefined) view.setUint32(72, Number(data.dwCurrVisibleOverlays), true);
  // 0x4c: u32
  if (data?.dwNumFourCCCodes !== undefined) view.setUint32(76, Number(data.dwNumFourCCCodes), true);
  // 0x50: u32
  if (data?.dwAlignBoundarySrc !== undefined) view.setUint32(80, Number(data.dwAlignBoundarySrc), true);
  // 0x54: u32
  if (data?.dwAlignSizeSrc !== undefined) view.setUint32(84, Number(data.dwAlignSizeSrc), true);
  // 0x58: u32
  if (data?.dwAlignBoundaryDest !== undefined) view.setUint32(88, Number(data.dwAlignBoundaryDest), true);
  // 0x5c: u32
  if (data?.dwAlignSizeDest !== undefined) view.setUint32(92, Number(data.dwAlignSizeDest), true);
  // 0x60: u32
  if (data?.dwAlignStrideAlign !== undefined) view.setUint32(96, Number(data.dwAlignStrideAlign), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.dwRops !== undefined) view.setBigUint64(104, data.dwRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwRops))), true);
  // 0x70: pointer
  if (data?.ddsCaps !== undefined) view.setBigUint64(112, data.ddsCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCaps))), true);
  // 0x78: u32
  if (data?.dwMinOverlayStretch !== undefined) view.setUint32(120, Number(data.dwMinOverlayStretch), true);
  // 0x7c: u32
  if (data?.dwMaxOverlayStretch !== undefined) view.setUint32(124, Number(data.dwMaxOverlayStretch), true);
  // 0x80: u32
  if (data?.dwMinLiveVideoStretch !== undefined) view.setUint32(128, Number(data.dwMinLiveVideoStretch), true);
  // 0x84: u32
  if (data?.dwMaxLiveVideoStretch !== undefined) view.setUint32(132, Number(data.dwMaxLiveVideoStretch), true);
  // 0x88: u32
  if (data?.dwMinHwCodecStretch !== undefined) view.setUint32(136, Number(data.dwMinHwCodecStretch), true);
  // 0x8c: u32
  if (data?.dwMaxHwCodecStretch !== undefined) view.setUint32(140, Number(data.dwMaxHwCodecStretch), true);
  // 0x90: u32
  if (data?.dwReserved1 !== undefined) view.setUint32(144, Number(data.dwReserved1), true);
  // 0x94: u32
  if (data?.dwReserved2 !== undefined) view.setUint32(148, Number(data.dwReserved2), true);
  // 0x98: u32
  if (data?.dwReserved3 !== undefined) view.setUint32(152, Number(data.dwReserved3), true);
  // 0x9c: u32
  if (data?.dwSVBCaps !== undefined) view.setUint32(156, Number(data.dwSVBCaps), true);
  // 0xa0: u32
  if (data?.dwSVBCKeyCaps !== undefined) view.setUint32(160, Number(data.dwSVBCKeyCaps), true);
  // 0xa4: u32
  if (data?.dwSVBFXCaps !== undefined) view.setUint32(164, Number(data.dwSVBFXCaps), true);
  // 0xa8: pointer
  if (data?.dwSVBRops !== undefined) view.setBigUint64(168, data.dwSVBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwSVBRops))), true);
  // 0xb0: u32
  if (data?.dwVSBCaps !== undefined) view.setUint32(176, Number(data.dwVSBCaps), true);
  // 0xb4: u32
  if (data?.dwVSBCKeyCaps !== undefined) view.setUint32(180, Number(data.dwVSBCKeyCaps), true);
  // 0xb8: u32
  if (data?.dwVSBFXCaps !== undefined) view.setUint32(184, Number(data.dwVSBFXCaps), true);
  // 0xbc: pad4
  // 0xc0: pointer
  if (data?.dwVSBRops !== undefined) view.setBigUint64(192, data.dwVSBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwVSBRops))), true);
  // 0xc8: u32
  if (data?.dwSSBCaps !== undefined) view.setUint32(200, Number(data.dwSSBCaps), true);
  // 0xcc: u32
  if (data?.dwSSBCKeyCaps !== undefined) view.setUint32(204, Number(data.dwSSBCKeyCaps), true);
  // 0xd0: u32
  if (data?.dwSSBFXCaps !== undefined) view.setUint32(208, Number(data.dwSSBFXCaps), true);
  // 0xd4: pad4
  // 0xd8: pointer
  if (data?.dwSSBRops !== undefined) view.setBigUint64(216, data.dwSSBRops === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwSSBRops))), true);
  // 0xe0: u32
  if (data?.dwMaxVideoPorts !== undefined) view.setUint32(224, Number(data.dwMaxVideoPorts), true);
  // 0xe4: u32
  if (data?.dwCurrVideoPorts !== undefined) view.setUint32(228, Number(data.dwCurrVideoPorts), true);
  // 0xe8: u32
  if (data?.dwSVBCaps2 !== undefined) view.setUint32(232, Number(data.dwSVBCaps2), true);
  // 0xec: pad4
  return buf;
}

export class DDNTCORECAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwCaps2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwCKeyCaps(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwFXCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFXAlphaCaps(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwPalCaps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwSVCaps(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwAlphaBltConstBitDepths(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwAlphaBltPixelBitDepths(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwAlphaBltSurfaceBitDepths(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwAlphaOverlayConstBitDepths(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwAlphaOverlayPixelBitDepths(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwAlphaOverlaySurfaceBitDepths(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwZBufferBitDepths(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwVidMemTotal(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwVidMemFree(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwMaxVisibleOverlays(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwCurrVisibleOverlays(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwNumFourCCCodes(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwAlignBoundarySrc(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwAlignSizeSrc(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwAlignBoundaryDest(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwAlignSizeDest(): number {
    return this.view.getUint32(92, true);
  }

  // 0x60: u32
  get dwAlignStrideAlign(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get dwRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get ddsCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: u32
  get dwMinOverlayStretch(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get dwMaxOverlayStretch(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get dwMinLiveVideoStretch(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get dwMaxLiveVideoStretch(): number {
    return this.view.getUint32(132, true);
  }

  // 0x88: u32
  get dwMinHwCodecStretch(): number {
    return this.view.getUint32(136, true);
  }

  // 0x8c: u32
  get dwMaxHwCodecStretch(): number {
    return this.view.getUint32(140, true);
  }

  // 0x90: u32
  get dwReserved1(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get dwReserved2(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: u32
  get dwReserved3(): number {
    return this.view.getUint32(152, true);
  }

  // 0x9c: u32
  get dwSVBCaps(): number {
    return this.view.getUint32(156, true);
  }

  // 0xa0: u32
  get dwSVBCKeyCaps(): number {
    return this.view.getUint32(160, true);
  }

  // 0xa4: u32
  get dwSVBFXCaps(): number {
    return this.view.getUint32(164, true);
  }

  // 0xa8: pointer
  get dwSVBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: u32
  get dwVSBCaps(): number {
    return this.view.getUint32(176, true);
  }

  // 0xb4: u32
  get dwVSBCKeyCaps(): number {
    return this.view.getUint32(180, true);
  }

  // 0xb8: u32
  get dwVSBFXCaps(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  get dwVSBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc8: u32
  get dwSSBCaps(): number {
    return this.view.getUint32(200, true);
  }

  // 0xcc: u32
  get dwSSBCKeyCaps(): number {
    return this.view.getUint32(204, true);
  }

  // 0xd0: u32
  get dwSSBFXCaps(): number {
    return this.view.getUint32(208, true);
  }

  // 0xd4: pad4

  // 0xd8: pointer
  get dwSSBRops(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(216, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xe0: u32
  get dwMaxVideoPorts(): number {
    return this.view.getUint32(224, true);
  }

  // 0xe4: u32
  get dwCurrVideoPorts(): number {
    return this.view.getUint32(228, true);
  }

  // 0xe8: u32
  get dwSVBCaps2(): number {
    return this.view.getUint32(232, true);
  }

  // 0xec: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwCaps(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwCaps2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwCKeyCaps(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwFXCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFXAlphaCaps(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwPalCaps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwSVCaps(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwAlphaBltConstBitDepths(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwAlphaBltPixelBitDepths(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwAlphaBltSurfaceBitDepths(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwAlphaOverlayConstBitDepths(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwAlphaOverlayPixelBitDepths(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwAlphaOverlaySurfaceBitDepths(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwZBufferBitDepths(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwVidMemTotal(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwVidMemFree(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwMaxVisibleOverlays(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwCurrVisibleOverlays(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwNumFourCCCodes(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwAlignBoundarySrc(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwAlignSizeSrc(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwAlignBoundaryDest(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwAlignSizeDest(value: number) {
    this.view.setUint32(92, value, true);
  }

  // 0x60: u32
  set dwAlignStrideAlign(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set dwRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set ddsCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: u32
  set dwMinOverlayStretch(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set dwMaxOverlayStretch(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set dwMinLiveVideoStretch(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set dwMaxLiveVideoStretch(value: number) {
    this.view.setUint32(132, value, true);
  }

  // 0x88: u32
  set dwMinHwCodecStretch(value: number) {
    this.view.setUint32(136, value, true);
  }

  // 0x8c: u32
  set dwMaxHwCodecStretch(value: number) {
    this.view.setUint32(140, value, true);
  }

  // 0x90: u32
  set dwReserved1(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set dwReserved2(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: u32
  set dwReserved3(value: number) {
    this.view.setUint32(152, value, true);
  }

  // 0x9c: u32
  set dwSVBCaps(value: number) {
    this.view.setUint32(156, value, true);
  }

  // 0xa0: u32
  set dwSVBCKeyCaps(value: number) {
    this.view.setUint32(160, value, true);
  }

  // 0xa4: u32
  set dwSVBFXCaps(value: number) {
    this.view.setUint32(164, value, true);
  }

  // 0xa8: pointer
  set dwSVBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: u32
  set dwVSBCaps(value: number) {
    this.view.setUint32(176, value, true);
  }

  // 0xb4: u32
  set dwVSBCKeyCaps(value: number) {
    this.view.setUint32(180, value, true);
  }

  // 0xb8: u32
  set dwVSBFXCaps(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: pad4

  // 0xc0: pointer
  set dwVSBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc8: u32
  set dwSSBCaps(value: number) {
    this.view.setUint32(200, value, true);
  }

  // 0xcc: u32
  set dwSSBCKeyCaps(value: number) {
    this.view.setUint32(204, value, true);
  }

  // 0xd0: u32
  set dwSSBFXCaps(value: number) {
    this.view.setUint32(208, value, true);
  }

  // 0xd4: pad4

  // 0xd8: pointer
  set dwSSBRops(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(216, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xe0: u32
  set dwMaxVideoPorts(value: number) {
    this.view.setUint32(224, value, true);
  }

  // 0xe4: u32
  set dwCurrVideoPorts(value: number) {
    this.view.setUint32(228, value, true);
  }

  // 0xe8: u32
  set dwSVBCaps2(value: number) {
    this.view.setUint32(232, value, true);
  }

  // 0xec: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_D3DBUFCALLBACKS (size: 48)
 */
export interface DD_D3DBUFCALLBACKS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.PDD_CANCREATESURFACE */
  CanCreateD3DBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_CREATESURFACE */
  CreateD3DBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_DESTROYSURFACE */
  DestroyD3DBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_LOCK */
  LockD3DBuffer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_SURFCB_UNLOCK */
  UnlockD3DBuffer: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_D3DBUFCALLBACKS = 48;

export function allocDD_D3DBUFCALLBACKS(data?: Partial<DD_D3DBUFCALLBACKS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_D3DBUFCALLBACKS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: pointer
  if (data?.CanCreateD3DBuffer !== undefined) view.setBigUint64(8, data.CanCreateD3DBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CanCreateD3DBuffer))), true);
  // 0x10: pointer
  if (data?.CreateD3DBuffer !== undefined) view.setBigUint64(16, data.CreateD3DBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateD3DBuffer))), true);
  // 0x18: pointer
  if (data?.DestroyD3DBuffer !== undefined) view.setBigUint64(24, data.DestroyD3DBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyD3DBuffer))), true);
  // 0x20: pointer
  if (data?.LockD3DBuffer !== undefined) view.setBigUint64(32, data.LockD3DBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LockD3DBuffer))), true);
  // 0x28: pointer
  if (data?.UnlockD3DBuffer !== undefined) view.setBigUint64(40, data.UnlockD3DBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnlockD3DBuffer))), true);
  return buf;
}

export class DD_D3DBUFCALLBACKSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get CanCreateD3DBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateD3DBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DestroyD3DBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get LockD3DBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get UnlockD3DBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set CanCreateD3DBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateD3DBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DestroyD3DBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set LockD3DBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set UnlockD3DBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_HALINFO_V4 (size: 40)
 */
export interface DD_HALINFO_V4 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Graphics.DirectDraw.VIDEOMEMORYINFO */
  vmiData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDNTCORECAPS */
  ddCaps: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_GETDRIVERINFO */
  GetDriverInfo: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
}

export const sizeofDD_HALINFO_V4 = 40;

export function allocDD_HALINFO_V4(data?: Partial<DD_HALINFO_V4>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_HALINFO_V4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.vmiData !== undefined) view.setBigUint64(8, data.vmiData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vmiData))), true);
  // 0x10: pointer
  if (data?.ddCaps !== undefined) view.setBigUint64(16, data.ddCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddCaps))), true);
  // 0x18: pointer
  if (data?.GetDriverInfo !== undefined) view.setBigUint64(24, data.GetDriverInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetDriverInfo))), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  return buf;
}

export class DD_HALINFO_V4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get vmiData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetDriverInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set vmiData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetDriverInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_HALINFO (size: 64)
 */
export interface DD_HALINFO {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Graphics.DirectDraw.VIDEOMEMORYINFO */
  vmiData: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDNTCORECAPS */
  ddCaps: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDD_GETDRIVERINFO */
  GetDriverInfo: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpD3DGlobalDriverData: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpD3DHALCallbacks: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpD3DBufCallbacks: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_HALINFO = 64;

export function allocDD_HALINFO(data?: Partial<DD_HALINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_HALINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.vmiData !== undefined) view.setBigUint64(8, data.vmiData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.vmiData))), true);
  // 0x10: pointer
  if (data?.ddCaps !== undefined) view.setBigUint64(16, data.ddCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddCaps))), true);
  // 0x18: pointer
  if (data?.GetDriverInfo !== undefined) view.setBigUint64(24, data.GetDriverInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetDriverInfo))), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpD3DGlobalDriverData !== undefined) view.setBigUint64(40, data.lpD3DGlobalDriverData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpD3DGlobalDriverData))), true);
  // 0x30: pointer
  if (data?.lpD3DHALCallbacks !== undefined) view.setBigUint64(48, data.lpD3DHALCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpD3DHALCallbacks))), true);
  // 0x38: pointer
  if (data?.lpD3DBufCallbacks !== undefined) view.setBigUint64(56, data.lpD3DBufCallbacks === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpD3DBufCallbacks))), true);
  return buf;
}

export class DD_HALINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get vmiData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetDriverInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lpD3DGlobalDriverData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lpD3DHALCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpD3DBufCallbacks(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set vmiData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetDriverInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lpD3DGlobalDriverData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lpD3DHALCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpD3DBufCallbacks(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_DIRECTDRAW_GLOBAL (size: 32)
 */
export interface DD_DIRECTDRAW_GLOBAL {
  /** ptr */
  dhpdev: Deno.PointerValue | Uint8Array;
  /** usize */
  dwReserved1: bigint | number;
  /** usize */
  dwReserved2: bigint | number;
  /** ptr */
  lpDDVideoPortCaps: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_DIRECTDRAW_GLOBAL = 32;

export function allocDD_DIRECTDRAW_GLOBAL(data?: Partial<DD_DIRECTDRAW_GLOBAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_DIRECTDRAW_GLOBAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dhpdev !== undefined) view.setBigUint64(0, data.dhpdev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dhpdev))), true);
  // 0x08: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(8, BigInt(data.dwReserved1), true);
  // 0x10: usize
  if (data?.dwReserved2 !== undefined) view.setBigUint64(16, BigInt(data.dwReserved2), true);
  // 0x18: pointer
  if (data?.lpDDVideoPortCaps !== undefined) view.setBigUint64(24, data.lpDDVideoPortCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDVideoPortCaps))), true);
  return buf;
}

export class DD_DIRECTDRAW_GLOBALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dhpdev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: usize
  get dwReserved2(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get lpDDVideoPortCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set dhpdev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: usize
  set dwReserved2(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set lpDDVideoPortCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_DIRECTDRAW_LOCAL (size: 8)
 */
export interface DD_DIRECTDRAW_LOCAL {
  /** ptr */
  lpGbl: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_DIRECTDRAW_LOCAL = 8;

export function allocDD_DIRECTDRAW_LOCAL(data?: Partial<DD_DIRECTDRAW_LOCAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_DIRECTDRAW_LOCAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpGbl !== undefined) view.setBigUint64(0, data.lpGbl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGbl))), true);
  return buf;
}

export class DD_DIRECTDRAW_LOCALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpGbl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpGbl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_VIDEOPORT_LOCAL (size: 72)
 */
export interface DD_VIDEOPORT_LOCAL {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTDESC */
  ddvpDesc: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTINFO */
  ddvpInfo: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVBISurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumAutoflip: number;
  /** u32 */
  dwNumVBIAutoflip: number;
  /** usize */
  dwReserved1: bigint | number;
  /** usize */
  dwReserved2: bigint | number;
  /** usize */
  dwReserved3: bigint | number;
}

export const sizeofDD_VIDEOPORT_LOCAL = 72;

export function allocDD_VIDEOPORT_LOCAL(data?: Partial<DD_VIDEOPORT_LOCAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_VIDEOPORT_LOCAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.ddvpDesc !== undefined) view.setBigUint64(8, data.ddvpDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddvpDesc))), true);
  // 0x10: pointer
  if (data?.ddvpInfo !== undefined) view.setBigUint64(16, data.ddvpInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddvpInfo))), true);
  // 0x18: pointer
  if (data?.lpSurface !== undefined) view.setBigUint64(24, data.lpSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurface))), true);
  // 0x20: pointer
  if (data?.lpVBISurface !== undefined) view.setBigUint64(32, data.lpVBISurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVBISurface))), true);
  // 0x28: u32
  if (data?.dwNumAutoflip !== undefined) view.setUint32(40, Number(data.dwNumAutoflip), true);
  // 0x2c: u32
  if (data?.dwNumVBIAutoflip !== undefined) view.setUint32(44, Number(data.dwNumVBIAutoflip), true);
  // 0x30: usize
  if (data?.dwReserved1 !== undefined) view.setBigUint64(48, BigInt(data.dwReserved1), true);
  // 0x38: usize
  if (data?.dwReserved2 !== undefined) view.setBigUint64(56, BigInt(data.dwReserved2), true);
  // 0x40: usize
  if (data?.dwReserved3 !== undefined) view.setBigUint64(64, BigInt(data.dwReserved3), true);
  return buf;
}

export class DD_VIDEOPORT_LOCALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ddvpDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddvpInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpVBISurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwNumAutoflip(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwNumVBIAutoflip(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: usize
  get dwReserved1(): bigint | number {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: usize
  get dwReserved2(): bigint | number {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x40: usize
  get dwReserved3(): bigint | number {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ddvpDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddvpInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpVBISurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwNumAutoflip(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwNumVBIAutoflip(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: usize
  set dwReserved1(value: bigint | number) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: usize
  set dwReserved2(value: bigint | number) {
    this.view.setBigUint64(56, BigInt(value), true);
  }

  // 0x40: usize
  set dwReserved3(value: bigint | number) {
    this.view.setBigUint64(64, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_MOTIONCOMP_LOCAL (size: 72)
 */
export interface DD_MOTIONCOMP_LOCAL {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwUncompWidth: number;
  /** u32 */
  dwUncompHeight: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddUncompPixelFormat: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwDriverReserved1: number;
  /** u32 */
  dwDriverReserved2: number;
  /** u32 */
  dwDriverReserved3: number;
  /** ptr */
  lpDriverReserved1: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDriverReserved2: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDriverReserved3: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_MOTIONCOMP_LOCAL = 72;

export function allocDD_MOTIONCOMP_LOCAL(data?: Partial<DD_MOTIONCOMP_LOCAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_MOTIONCOMP_LOCAL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.guid !== undefined) view.setBigUint64(8, data.guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guid))), true);
  // 0x10: u32
  if (data?.dwUncompWidth !== undefined) view.setUint32(16, Number(data.dwUncompWidth), true);
  // 0x14: u32
  if (data?.dwUncompHeight !== undefined) view.setUint32(20, Number(data.dwUncompHeight), true);
  // 0x18: pointer
  if (data?.ddUncompPixelFormat !== undefined) view.setBigUint64(24, data.ddUncompPixelFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddUncompPixelFormat))), true);
  // 0x20: u32
  if (data?.dwDriverReserved1 !== undefined) view.setUint32(32, Number(data.dwDriverReserved1), true);
  // 0x24: u32
  if (data?.dwDriverReserved2 !== undefined) view.setUint32(36, Number(data.dwDriverReserved2), true);
  // 0x28: u32
  if (data?.dwDriverReserved3 !== undefined) view.setUint32(40, Number(data.dwDriverReserved3), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lpDriverReserved1 !== undefined) view.setBigUint64(48, data.lpDriverReserved1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDriverReserved1))), true);
  // 0x38: pointer
  if (data?.lpDriverReserved2 !== undefined) view.setBigUint64(56, data.lpDriverReserved2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDriverReserved2))), true);
  // 0x40: pointer
  if (data?.lpDriverReserved3 !== undefined) view.setBigUint64(64, data.lpDriverReserved3 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDriverReserved3))), true);
  return buf;
}

export class DD_MOTIONCOMP_LOCALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwUncompWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwUncompHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get ddUncompPixelFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwDriverReserved1(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwDriverReserved2(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwDriverReserved3(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lpDriverReserved1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpDriverReserved2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get lpDriverReserved3(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwUncompWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwUncompHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set ddUncompPixelFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwDriverReserved1(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwDriverReserved2(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwDriverReserved3(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lpDriverReserved1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpDriverReserved2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set lpDriverReserved3(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_MORESURFACECAPS (size: 24)
 */
export interface DD_MORESURFACECAPS {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPSEX */
  ddsCapsMore: Uint8Array | Deno.PointerValue;
  /** array */
  ddsExtendedHeapRestrictions: Deno.PointerValue;
}

export const sizeofDD_MORESURFACECAPS = 24;

export function allocDD_MORESURFACECAPS(data?: Partial<DD_MORESURFACECAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_MORESURFACECAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.ddsCapsMore !== undefined) view.setBigUint64(8, data.ddsCapsMore === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsCapsMore))), true);
  // 0x10: pointer
  if (data?.ddsExtendedHeapRestrictions !== undefined) view.setBigUint64(16, data.ddsExtendedHeapRestrictions === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddsExtendedHeapRestrictions))), true);
  return buf;
}

export class DD_MORESURFACECAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get ddsCapsMore(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddsExtendedHeapRestrictions(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set ddsCapsMore(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddsExtendedHeapRestrictions(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_STEREOMODE (size: 24)
 */
export interface DD_STEREOMODE {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwBpp: number;
  /** u32 */
  dwRefreshRate: number;
  /** Windows.Win32.Foundation.BOOL */
  bSupported: boolean;
}

export const sizeofDD_STEREOMODE = 24;

export function allocDD_STEREOMODE(data?: Partial<DD_STEREOMODE>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_STEREOMODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwHeight !== undefined) view.setUint32(4, Number(data.dwHeight), true);
  // 0x08: u32
  if (data?.dwWidth !== undefined) view.setUint32(8, Number(data.dwWidth), true);
  // 0x0c: u32
  if (data?.dwBpp !== undefined) view.setUint32(12, Number(data.dwBpp), true);
  // 0x10: u32
  if (data?.dwRefreshRate !== undefined) view.setUint32(16, Number(data.dwRefreshRate), true);
  // 0x14: i32
  if (data?.bSupported !== undefined) view.setInt32(20, Number(data.bSupported), true);
  return buf;
}

export class DD_STEREOMODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHeight(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwWidth(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwBpp(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwRefreshRate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get bSupported(): number {
    return this.view.getInt32(20, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHeight(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwWidth(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwBpp(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwRefreshRate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set bSupported(value: number) {
    this.view.setInt32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_UPDATENONLOCALHEAPDATA (size: 56)
 */
export interface DD_UPDATENONLOCALHEAPDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwHeap: number;
  /** usize */
  fpGARTLin: bigint | number;
  /** usize */
  fpGARTDev: bigint | number;
  /** usize */
  ulPolicyMaxBytes: bigint | number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  UpdateNonLocalHeap: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_UPDATENONLOCALHEAPDATA = 56;

export function allocDD_UPDATENONLOCALHEAPDATA(data?: Partial<DD_UPDATENONLOCALHEAPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_UPDATENONLOCALHEAPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwHeap !== undefined) view.setUint32(8, Number(data.dwHeap), true);
  // 0x0c: pad4
  // 0x10: usize
  if (data?.fpGARTLin !== undefined) view.setBigUint64(16, BigInt(data.fpGARTLin), true);
  // 0x18: usize
  if (data?.fpGARTDev !== undefined) view.setBigUint64(24, BigInt(data.fpGARTDev), true);
  // 0x20: usize
  if (data?.ulPolicyMaxBytes !== undefined) view.setBigUint64(32, BigInt(data.ulPolicyMaxBytes), true);
  // 0x28: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(40, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x30: pointer
  if (data?.UpdateNonLocalHeap !== undefined) view.setBigUint64(48, data.UpdateNonLocalHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateNonLocalHeap))), true);
  return buf;
}

export class DD_UPDATENONLOCALHEAPDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwHeap(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  get fpGARTLin(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: usize
  get fpGARTDev(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: usize
  get ulPolicyMaxBytes(): bigint | number {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get UpdateNonLocalHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwHeap(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: usize
  set fpGARTLin(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: usize
  set fpGARTDev(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: usize
  set ulPolicyMaxBytes(value: bigint | number) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set UpdateNonLocalHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_NTPRIVATEDRIVERCAPS (size: 8)
 */
export interface DD_NTPRIVATEDRIVERCAPS {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwPrivateCaps: number;
}

export const sizeofDD_NTPRIVATEDRIVERCAPS = 8;

export function allocDD_NTPRIVATEDRIVERCAPS(data?: Partial<DD_NTPRIVATEDRIVERCAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_NTPRIVATEDRIVERCAPS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwPrivateCaps !== undefined) view.setUint32(4, Number(data.dwPrivateCaps), true);
  return buf;
}

export class DD_NTPRIVATEDRIVERCAPSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPrivateCaps(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPrivateCaps(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_BLTDATA (size: 128)
 */
export interface DD_BLTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDDestSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.RECTL */
  rDest: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpDDSrcSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.RECTL */
  rSrc: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwROPFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.DDBLTFX */
  bltFX: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  Blt: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  IsClipped: boolean;
  /** Windows.Win32.Foundation.RECTL */
  rOrigDest: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rOrigSrc: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwRectCnt: number;
  /** ptr */
  prDestRects: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwAFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.DDARGB */
  ddargbScaleFactors: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_BLTDATA = 128;

export function allocDD_BLTDATA(data?: Partial<DD_BLTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_BLTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDDestSurface !== undefined) view.setBigUint64(8, data.lpDDDestSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDDestSurface))), true);
  // 0x10: pointer
  if (data?.rDest !== undefined) view.setBigUint64(16, data.rDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rDest))), true);
  // 0x18: pointer
  if (data?.lpDDSrcSurface !== undefined) view.setBigUint64(24, data.lpDDSrcSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSrcSurface))), true);
  // 0x20: pointer
  if (data?.rSrc !== undefined) view.setBigUint64(32, data.rSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rSrc))), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: u32
  if (data?.dwROPFlags !== undefined) view.setUint32(44, Number(data.dwROPFlags), true);
  // 0x30: pointer
  if (data?.bltFX !== undefined) view.setBigUint64(48, data.bltFX === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bltFX))), true);
  // 0x38: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(56, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x40: pointer
  if (data?.Blt !== undefined) view.setBigUint64(64, data.Blt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Blt))), true);
  // 0x48: i32
  if (data?.IsClipped !== undefined) view.setInt32(72, Number(data.IsClipped), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.rOrigDest !== undefined) view.setBigUint64(80, data.rOrigDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rOrigDest))), true);
  // 0x58: pointer
  if (data?.rOrigSrc !== undefined) view.setBigUint64(88, data.rOrigSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rOrigSrc))), true);
  // 0x60: u32
  if (data?.dwRectCnt !== undefined) view.setUint32(96, Number(data.dwRectCnt), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.prDestRects !== undefined) view.setBigUint64(104, data.prDestRects === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.prDestRects))), true);
  // 0x70: u32
  if (data?.dwAFlags !== undefined) view.setUint32(112, Number(data.dwAFlags), true);
  // 0x74: pad4
  // 0x78: pointer
  if (data?.ddargbScaleFactors !== undefined) view.setBigUint64(120, data.ddargbScaleFactors === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddargbScaleFactors))), true);
  return buf;
}

export class DD_BLTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDDestSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpDDSrcSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get rSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwROPFlags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: pointer
  get bltFX(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get Blt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: i32
  get IsClipped(): number {
    return this.view.getInt32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get rOrigDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get rOrigSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get dwRectCnt(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get prDestRects(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: u32
  get dwAFlags(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  get ddargbScaleFactors(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDDestSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpDDSrcSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set rSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwROPFlags(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: pointer
  set bltFX(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set Blt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: i32
  set IsClipped(value: number) {
    this.view.setInt32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set rOrigDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set rOrigSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set dwRectCnt(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set prDestRects(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: u32
  set dwAFlags(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: pad4

  // 0x78: pointer
  set ddargbScaleFactors(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_LOCKDATA (size: 72)
 */
export interface DD_LOCKDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  bHasRect: number;
  /** Windows.Win32.Foundation.RECTL */
  rArea: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpSurfData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  Lock: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** usize */
  fpProcess: bigint | number;
}

export const sizeofDD_LOCKDATA = 72;

export function allocDD_LOCKDATA(data?: Partial<DD_LOCKDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_LOCKDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: u32
  if (data?.bHasRect !== undefined) view.setUint32(16, Number(data.bHasRect), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.rArea !== undefined) view.setBigUint64(24, data.rArea === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rArea))), true);
  // 0x20: pointer
  if (data?.lpSurfData !== undefined) view.setBigUint64(32, data.lpSurfData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfData))), true);
  // 0x28: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(40, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x30: pointer
  if (data?.Lock !== undefined) view.setBigUint64(48, data.Lock === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Lock))), true);
  // 0x38: u32
  if (data?.dwFlags !== undefined) view.setUint32(56, Number(data.dwFlags), true);
  // 0x3c: pad4
  // 0x40: usize
  if (data?.fpProcess !== undefined) view.setBigUint64(64, BigInt(data.fpProcess), true);
  return buf;
}

export class DD_LOCKDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get bHasRect(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get rArea(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpSurfData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get Lock(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: usize
  get fpProcess(): bigint | number {
    return Number(this.view.getBigUint64(64, true));
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set bHasRect(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set rArea(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpSurfData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set Lock(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set dwFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: usize
  set fpProcess(value: bigint | number) {
    this.view.setBigUint64(64, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_UNLOCKDATA (size: 32)
 */
export interface DD_UNLOCKDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  Unlock: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_UNLOCKDATA = 32;

export function allocDD_UNLOCKDATA(data?: Partial<DD_UNLOCKDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_UNLOCKDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.Unlock !== undefined) view.setBigUint64(24, data.Unlock === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Unlock))), true);
  return buf;
}

export class DD_UNLOCKDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Unlock(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Unlock(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_UPDATEOVERLAYDATA (size: 72)
 */
export interface DD_UPDATEOVERLAYDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDDestSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.RECTL */
  rDest: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpDDSrcSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.RECTL */
  rSrc: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.DDOVERLAYFX */
  overlayFX: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  UpdateOverlay: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_UPDATEOVERLAYDATA = 72;

export function allocDD_UPDATEOVERLAYDATA(data?: Partial<DD_UPDATEOVERLAYDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_UPDATEOVERLAYDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDDestSurface !== undefined) view.setBigUint64(8, data.lpDDDestSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDDestSurface))), true);
  // 0x10: pointer
  if (data?.rDest !== undefined) view.setBigUint64(16, data.rDest === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rDest))), true);
  // 0x18: pointer
  if (data?.lpDDSrcSurface !== undefined) view.setBigUint64(24, data.lpDDSrcSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSrcSurface))), true);
  // 0x20: pointer
  if (data?.rSrc !== undefined) view.setBigUint64(32, data.rSrc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rSrc))), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.overlayFX !== undefined) view.setBigUint64(48, data.overlayFX === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.overlayFX))), true);
  // 0x38: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(56, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x40: pointer
  if (data?.UpdateOverlay !== undefined) view.setBigUint64(64, data.UpdateOverlay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateOverlay))), true);
  return buf;
}

export class DD_UPDATEOVERLAYDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDDestSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get rDest(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpDDSrcSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get rSrc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get overlayFX(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get UpdateOverlay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDDestSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set rDest(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpDDSrcSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set rSrc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set overlayFX(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set UpdateOverlay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_SETOVERLAYPOSITIONDATA (size: 48)
 */
export interface DD_SETOVERLAYPOSITIONDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSrcSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDDestSurface: Deno.PointerValue | Uint8Array;
  /** i32 */
  lXPos: number;
  /** i32 */
  lYPos: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  SetOverlayPosition: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_SETOVERLAYPOSITIONDATA = 48;

export function allocDD_SETOVERLAYPOSITIONDATA(data?: Partial<DD_SETOVERLAYPOSITIONDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_SETOVERLAYPOSITIONDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSrcSurface !== undefined) view.setBigUint64(8, data.lpDDSrcSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSrcSurface))), true);
  // 0x10: pointer
  if (data?.lpDDDestSurface !== undefined) view.setBigUint64(16, data.lpDDDestSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDDestSurface))), true);
  // 0x18: i32
  if (data?.lXPos !== undefined) view.setInt32(24, Number(data.lXPos), true);
  // 0x1c: i32
  if (data?.lYPos !== undefined) view.setInt32(28, Number(data.lYPos), true);
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.SetOverlayPosition !== undefined) view.setBigUint64(40, data.SetOverlayPosition === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetOverlayPosition))), true);
  return buf;
}

export class DD_SETOVERLAYPOSITIONDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSrcSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpDDDestSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get lXPos(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get lYPos(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get SetOverlayPosition(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSrcSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpDDDestSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set lXPos(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set lYPos(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set SetOverlayPosition(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_SETPALETTEDATA (size: 48)
 */
export interface DD_SETPALETTEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDPalette: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  SetPalette: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  Attach: boolean;
}

export const sizeofDD_SETPALETTEDATA = 48;

export function allocDD_SETPALETTEDATA(data?: Partial<DD_SETPALETTEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_SETPALETTEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: pointer
  if (data?.lpDDPalette !== undefined) view.setBigUint64(16, data.lpDDPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDPalette))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.SetPalette !== undefined) view.setBigUint64(32, data.SetPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetPalette))), true);
  // 0x28: i32
  if (data?.Attach !== undefined) view.setInt32(40, Number(data.Attach), true);
  // 0x2c: pad4
  return buf;
}

export class DD_SETPALETTEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpDDPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get SetPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get Attach(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpDDPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set SetPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set Attach(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_FLIPDATA (size: 64)
 */
export interface DD_FLIPDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfCurr: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfTarg: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  Flip: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfCurrLeft: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfTargLeft: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_FLIPDATA = 64;

export function allocDD_FLIPDATA(data?: Partial<DD_FLIPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_FLIPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpSurfCurr !== undefined) view.setBigUint64(8, data.lpSurfCurr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfCurr))), true);
  // 0x10: pointer
  if (data?.lpSurfTarg !== undefined) view.setBigUint64(16, data.lpSurfTarg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfTarg))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.Flip !== undefined) view.setBigUint64(40, data.Flip === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Flip))), true);
  // 0x30: pointer
  if (data?.lpSurfCurrLeft !== undefined) view.setBigUint64(48, data.lpSurfCurrLeft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfCurrLeft))), true);
  // 0x38: pointer
  if (data?.lpSurfTargLeft !== undefined) view.setBigUint64(56, data.lpSurfTargLeft === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfTargLeft))), true);
  return buf;
}

export class DD_FLIPDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpSurfCurr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpSurfTarg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Flip(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lpSurfCurrLeft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpSurfTargLeft(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpSurfCurr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpSurfTarg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Flip(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lpSurfCurrLeft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpSurfTargLeft(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_DESTROYSURFACEDATA (size: 32)
 */
export interface DD_DESTROYSURFACEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  DestroySurface: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_DESTROYSURFACEDATA = 32;

export function allocDD_DESTROYSURFACEDATA(data?: Partial<DD_DESTROYSURFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_DESTROYSURFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.DestroySurface !== undefined) view.setBigUint64(24, data.DestroySurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroySurface))), true);
  return buf;
}

export class DD_DESTROYSURFACEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DestroySurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DestroySurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_SETCLIPLISTDATA (size: 32)
 */
export interface DD_SETCLIPLISTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  SetClipList: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_SETCLIPLISTDATA = 32;

export function allocDD_SETCLIPLISTDATA(data?: Partial<DD_SETCLIPLISTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_SETCLIPLISTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.SetClipList !== undefined) view.setBigUint64(24, data.SetClipList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetClipList))), true);
  return buf;
}

export class DD_SETCLIPLISTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SetClipList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SetClipList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_ADDATTACHEDSURFACEDATA (size: 40)
 */
export interface DD_ADDATTACHEDSURFACEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfAttached: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  AddAttachedSurface: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_ADDATTACHEDSURFACEDATA = 40;

export function allocDD_ADDATTACHEDSURFACEDATA(data?: Partial<DD_ADDATTACHEDSURFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_ADDATTACHEDSURFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: pointer
  if (data?.lpSurfAttached !== undefined) view.setBigUint64(16, data.lpSurfAttached === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfAttached))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.AddAttachedSurface !== undefined) view.setBigUint64(32, data.AddAttachedSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.AddAttachedSurface))), true);
  return buf;
}

export class DD_ADDATTACHEDSURFACEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpSurfAttached(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get AddAttachedSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpSurfAttached(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set AddAttachedSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_SETCOLORKEYDATA (size: 48)
 */
export interface DD_SETCOLORKEYDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ckNew: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  SetColorKey: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_SETCOLORKEYDATA = 48;

export function allocDD_SETCOLORKEYDATA(data?: Partial<DD_SETCOLORKEYDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_SETCOLORKEYDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ckNew !== undefined) view.setBigUint64(24, data.ckNew === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ckNew))), true);
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.SetColorKey !== undefined) view.setBigUint64(40, data.SetColorKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetColorKey))), true);
  return buf;
}

export class DD_SETCOLORKEYDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ckNew(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get SetColorKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ckNew(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set SetColorKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETBLTSTATUSDATA (size: 40)
 */
export interface DD_GETBLTSTATUSDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  GetBltStatus: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_GETBLTSTATUSDATA = 40;

export function allocDD_GETBLTSTATUSDATA(data?: Partial<DD_GETBLTSTATUSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETBLTSTATUSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.GetBltStatus !== undefined) view.setBigUint64(32, data.GetBltStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetBltStatus))), true);
  return buf;
}

export class DD_GETBLTSTATUSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetBltStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetBltStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETFLIPSTATUSDATA (size: 40)
 */
export interface DD_GETFLIPSTATUSDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  GetFlipStatus: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_GETFLIPSTATUSDATA = 40;

export function allocDD_GETFLIPSTATUSDATA(data?: Partial<DD_GETFLIPSTATUSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETFLIPSTATUSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.GetFlipStatus !== undefined) view.setBigUint64(32, data.GetFlipStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetFlipStatus))), true);
  return buf;
}

export class DD_GETFLIPSTATUSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetFlipStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetFlipStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_DESTROYPALETTEDATA (size: 32)
 */
export interface DD_DESTROYPALETTEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDPalette: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  DestroyPalette: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_DESTROYPALETTEDATA = 32;

export function allocDD_DESTROYPALETTEDATA(data?: Partial<DD_DESTROYPALETTEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_DESTROYPALETTEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDPalette !== undefined) view.setBigUint64(8, data.lpDDPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDPalette))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.DestroyPalette !== undefined) view.setBigUint64(24, data.DestroyPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyPalette))), true);
  return buf;
}

export class DD_DESTROYPALETTEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DestroyPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DestroyPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_SETENTRIESDATA (size: 48)
 */
export interface DD_SETENTRIESDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDPalette: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwBase: number;
  /** u32 */
  dwNumEntries: number;
  /** ptr */
  lpEntries: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  SetEntries: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_SETENTRIESDATA = 48;

export function allocDD_SETENTRIESDATA(data?: Partial<DD_SETENTRIESDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_SETENTRIESDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDPalette !== undefined) view.setBigUint64(8, data.lpDDPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDPalette))), true);
  // 0x10: u32
  if (data?.dwBase !== undefined) view.setUint32(16, Number(data.dwBase), true);
  // 0x14: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(20, Number(data.dwNumEntries), true);
  // 0x18: pointer
  if (data?.lpEntries !== undefined) view.setBigUint64(24, data.lpEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpEntries))), true);
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.SetEntries !== undefined) view.setBigUint64(40, data.SetEntries === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetEntries))), true);
  return buf;
}

export class DD_SETENTRIESDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwBase(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwNumEntries(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get lpEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get SetEntries(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwBase(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set lpEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set SetEntries(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_CREATESURFACEDATA (size: 48)
 */
export interface DD_CREATESURFACEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurfaceDesc: Deno.PointerValue | Uint8Array;
  /** ptr */
  lplpSList: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwSCnt: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  CreateSurface: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_CREATESURFACEDATA = 48;

export function allocDD_CREATESURFACEDATA(data?: Partial<DD_CREATESURFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_CREATESURFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurfaceDesc !== undefined) view.setBigUint64(8, data.lpDDSurfaceDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurfaceDesc))), true);
  // 0x10: pointer
  if (data?.lplpSList !== undefined) view.setBigUint64(16, data.lplpSList === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lplpSList))), true);
  // 0x18: u32
  if (data?.dwSCnt !== undefined) view.setUint32(24, Number(data.dwSCnt), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.CreateSurface !== undefined) view.setBigUint64(40, data.CreateSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateSurface))), true);
  return buf;
}

export class DD_CREATESURFACEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurfaceDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lplpSList(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwSCnt(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get CreateSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurfaceDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lplpSList(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwSCnt(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set CreateSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_CANCREATESURFACEDATA (size: 40)
 */
export interface DD_CANCREATESURFACEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurfaceDesc: Deno.PointerValue | Uint8Array;
  /** u32 */
  bIsDifferentPixelFormat: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  CanCreateSurface: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_CANCREATESURFACEDATA = 40;

export function allocDD_CANCREATESURFACEDATA(data?: Partial<DD_CANCREATESURFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_CANCREATESURFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurfaceDesc !== undefined) view.setBigUint64(8, data.lpDDSurfaceDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurfaceDesc))), true);
  // 0x10: u32
  if (data?.bIsDifferentPixelFormat !== undefined) view.setUint32(16, Number(data.bIsDifferentPixelFormat), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.CanCreateSurface !== undefined) view.setBigUint64(32, data.CanCreateSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CanCreateSurface))), true);
  return buf;
}

export class DD_CANCREATESURFACEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurfaceDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get bIsDifferentPixelFormat(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get CanCreateSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurfaceDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set bIsDifferentPixelFormat(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set CanCreateSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_CREATEPALETTEDATA (size: 48)
 */
export interface DD_CREATEPALETTEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDPalette: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpColorTable: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  CreatePalette: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  is_excl: boolean;
}

export const sizeofDD_CREATEPALETTEDATA = 48;

export function allocDD_CREATEPALETTEDATA(data?: Partial<DD_CREATEPALETTEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_CREATEPALETTEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDPalette !== undefined) view.setBigUint64(8, data.lpDDPalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDPalette))), true);
  // 0x10: pointer
  if (data?.lpColorTable !== undefined) view.setBigUint64(16, data.lpColorTable === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpColorTable))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.CreatePalette !== undefined) view.setBigUint64(32, data.CreatePalette === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreatePalette))), true);
  // 0x28: i32
  if (data?.is_excl !== undefined) view.setInt32(40, Number(data.is_excl), true);
  // 0x2c: pad4
  return buf;
}

export class DD_CREATEPALETTEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDPalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpColorTable(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get CreatePalette(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i32
  get is_excl(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: pad4

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDPalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpColorTable(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set CreatePalette(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: i32
  set is_excl(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_WAITFORVERTICALBLANKDATA (size: 40)
 */
export interface DD_WAITFORVERTICALBLANKDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** u32 */
  bIsInVB: number;
  /** usize */
  hEvent: bigint | number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  WaitForVerticalBlank: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_WAITFORVERTICALBLANKDATA = 40;

export function allocDD_WAITFORVERTICALBLANKDATA(data?: Partial<DD_WAITFORVERTICALBLANKDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_WAITFORVERTICALBLANKDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: u32
  if (data?.bIsInVB !== undefined) view.setUint32(12, Number(data.bIsInVB), true);
  // 0x10: usize
  if (data?.hEvent !== undefined) view.setBigUint64(16, BigInt(data.hEvent), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.WaitForVerticalBlank !== undefined) view.setBigUint64(32, data.WaitForVerticalBlank === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WaitForVerticalBlank))), true);
  return buf;
}

export class DD_WAITFORVERTICALBLANKDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get bIsInVB(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: usize
  get hEvent(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get WaitForVerticalBlank(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set bIsInVB(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: usize
  set hEvent(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set WaitForVerticalBlank(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_DRVSETCOLORKEYDATA (size: 40)
 */
export interface DD_DRVSETCOLORKEYDATA {
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Graphics.DirectDraw.DDCOLORKEY */
  ckNew: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  SetColorKey: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_DRVSETCOLORKEYDATA = 40;

export function allocDD_DRVSETCOLORKEYDATA(data?: Partial<DD_DRVSETCOLORKEYDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_DRVSETCOLORKEYDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(0, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ckNew !== undefined) view.setBigUint64(16, data.ckNew === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ckNew))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.SetColorKey !== undefined) view.setBigUint64(32, data.SetColorKey === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetColorKey))), true);
  return buf;
}

export class DD_DRVSETCOLORKEYDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ckNew(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get SetColorKey(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ckNew(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set SetColorKey(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETSCANLINEDATA (size: 32)
 */
export interface DD_GETSCANLINEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwScanLine: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  GetScanLine: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_GETSCANLINEDATA = 32;

export function allocDD_GETSCANLINEDATA(data?: Partial<DD_GETSCANLINEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETSCANLINEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwScanLine !== undefined) view.setUint32(8, Number(data.dwScanLine), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.GetScanLine !== undefined) view.setBigUint64(24, data.GetScanLine === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetScanLine))), true);
  return buf;
}

export class DD_GETSCANLINEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwScanLine(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetScanLine(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwScanLine(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetScanLine(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_MAPMEMORYDATA (size: 40)
 */
export interface DD_MAPMEMORYDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  bMap: boolean;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue;
  /** usize */
  fpProcess: bigint | number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_MAPMEMORYDATA = 40;

export function allocDD_MAPMEMORYDATA(data?: Partial<DD_MAPMEMORYDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_MAPMEMORYDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: i32
  if (data?.bMap !== undefined) view.setInt32(8, Number(data.bMap), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(16, data.hProcess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hProcess))), true);
  // 0x18: usize
  if (data?.fpProcess !== undefined) view.setBigUint64(24, BigInt(data.fpProcess), true);
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_MAPMEMORYDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i32
  get bMap(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get hProcess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get fpProcess(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i32
  set bMap(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set fpProcess(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_CANCREATEVPORTDATA (size: 32)
 */
export interface DD_CANCREATEVPORTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDVideoPortDesc: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  CanCreateVideoPort: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_CANCREATEVPORTDATA = 32;

export function allocDD_CANCREATEVPORTDATA(data?: Partial<DD_CANCREATEVPORTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_CANCREATEVPORTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDVideoPortDesc !== undefined) view.setBigUint64(8, data.lpDDVideoPortDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDVideoPortDesc))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.CanCreateVideoPort !== undefined) view.setBigUint64(24, data.CanCreateVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CanCreateVideoPort))), true);
  return buf;
}

export class DD_CANCREATEVPORTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDVideoPortDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get CanCreateVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDVideoPortDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set CanCreateVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_CREATEVPORTDATA (size: 40)
 */
export interface DD_CREATEVPORTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDVideoPortDesc: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  CreateVideoPort: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_CREATEVPORTDATA = 40;

export function allocDD_CREATEVPORTDATA(data?: Partial<DD_CREATEVPORTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_CREATEVPORTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDVideoPortDesc !== undefined) view.setBigUint64(8, data.lpDDVideoPortDesc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDVideoPortDesc))), true);
  // 0x10: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(16, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.CreateVideoPort !== undefined) view.setBigUint64(32, data.CreateVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateVideoPort))), true);
  return buf;
}

export class DD_CREATEVPORTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDVideoPortDesc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get CreateVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDVideoPortDesc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set CreateVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_FLIPVPORTDATA (size: 48)
 */
export interface DD_FLIPVPORTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfCurr: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurfTarg: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  FlipVideoPort: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_FLIPVPORTDATA = 48;

export function allocDD_FLIPVPORTDATA(data?: Partial<DD_FLIPVPORTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_FLIPVPORTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: pointer
  if (data?.lpSurfCurr !== undefined) view.setBigUint64(16, data.lpSurfCurr === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfCurr))), true);
  // 0x18: pointer
  if (data?.lpSurfTarg !== undefined) view.setBigUint64(24, data.lpSurfTarg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfTarg))), true);
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.FlipVideoPort !== undefined) view.setBigUint64(40, data.FlipVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlipVideoPort))), true);
  return buf;
}

export class DD_FLIPVPORTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpSurfCurr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpSurfTarg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get FlipVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpSurfCurr(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpSurfTarg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set FlipVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETVPORTBANDWIDTHDATA (size: 64)
 */
export interface DD_GETVPORTBANDWIDTHDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpddpfFormat: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpBandwidth: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  GetVideoPortBandwidth: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_GETVPORTBANDWIDTHDATA = 64;

export function allocDD_GETVPORTBANDWIDTHDATA(data?: Partial<DD_GETVPORTBANDWIDTHDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETVPORTBANDWIDTHDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: pointer
  if (data?.lpddpfFormat !== undefined) view.setBigUint64(16, data.lpddpfFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddpfFormat))), true);
  // 0x18: u32
  if (data?.dwWidth !== undefined) view.setUint32(24, Number(data.dwWidth), true);
  // 0x1c: u32
  if (data?.dwHeight !== undefined) view.setUint32(28, Number(data.dwHeight), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpBandwidth !== undefined) view.setBigUint64(40, data.lpBandwidth === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBandwidth))), true);
  // 0x30: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(48, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x38: pointer
  if (data?.GetVideoPortBandwidth !== undefined) view.setBigUint64(56, data.GetVideoPortBandwidth === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortBandwidth))), true);
  return buf;
}

export class DD_GETVPORTBANDWIDTHDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpddpfFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwWidth(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwHeight(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lpBandwidth(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get GetVideoPortBandwidth(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpddpfFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwWidth(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwHeight(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lpBandwidth(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set GetVideoPortBandwidth(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETVPORTINPUTFORMATDATA (size: 56)
 */
export interface DD_GETVPORTINPUTFORMATDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpddpfFormat: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumFormats: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  GetVideoPortInputFormats: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_GETVPORTINPUTFORMATDATA = 56;

export function allocDD_GETVPORTINPUTFORMATDATA(data?: Partial<DD_GETVPORTINPUTFORMATDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETVPORTINPUTFORMATDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpddpfFormat !== undefined) view.setBigUint64(24, data.lpddpfFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddpfFormat))), true);
  // 0x20: u32
  if (data?.dwNumFormats !== undefined) view.setUint32(32, Number(data.dwNumFormats), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(40, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x30: pointer
  if (data?.GetVideoPortInputFormats !== undefined) view.setBigUint64(48, data.GetVideoPortInputFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortInputFormats))), true);
  return buf;
}

export class DD_GETVPORTINPUTFORMATDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpddpfFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwNumFormats(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get GetVideoPortInputFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpddpfFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwNumFormats(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set GetVideoPortInputFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETVPORTOUTPUTFORMATDATA (size: 64)
 */
export interface DD_GETVPORTOUTPUTFORMATDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpddpfInputFormat: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpddpfOutputFormats: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumFormats: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  GetVideoPortInputFormats: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_GETVPORTOUTPUTFORMATDATA = 64;

export function allocDD_GETVPORTOUTPUTFORMATDATA(data?: Partial<DD_GETVPORTOUTPUTFORMATDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETVPORTOUTPUTFORMATDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpddpfInputFormat !== undefined) view.setBigUint64(24, data.lpddpfInputFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddpfInputFormat))), true);
  // 0x20: pointer
  if (data?.lpddpfOutputFormats !== undefined) view.setBigUint64(32, data.lpddpfOutputFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpddpfOutputFormats))), true);
  // 0x28: u32
  if (data?.dwNumFormats !== undefined) view.setUint32(40, Number(data.dwNumFormats), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(48, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x38: pointer
  if (data?.GetVideoPortInputFormats !== undefined) view.setBigUint64(56, data.GetVideoPortInputFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortInputFormats))), true);
  return buf;
}

export class DD_GETVPORTOUTPUTFORMATDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpddpfInputFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpddpfOutputFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwNumFormats(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get GetVideoPortInputFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpddpfInputFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpddpfOutputFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwNumFormats(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set GetVideoPortInputFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETVPORTFIELDDATA (size: 40)
 */
export interface DD_GETVPORTFIELDDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  bField: boolean;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  GetVideoPortField: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_GETVPORTFIELDDATA = 40;

export function allocDD_GETVPORTFIELDDATA(data?: Partial<DD_GETVPORTFIELDDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETVPORTFIELDDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: i32
  if (data?.bField !== undefined) view.setInt32(16, Number(data.bField), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.GetVideoPortField !== undefined) view.setBigUint64(32, data.GetVideoPortField === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortField))), true);
  return buf;
}

export class DD_GETVPORTFIELDDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get bField(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetVideoPortField(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set bField(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetVideoPortField(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETVPORTLINEDATA (size: 40)
 */
export interface DD_GETVPORTLINEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwLine: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  GetVideoPortLine: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_GETVPORTLINEDATA = 40;

export function allocDD_GETVPORTLINEDATA(data?: Partial<DD_GETVPORTLINEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETVPORTLINEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwLine !== undefined) view.setUint32(16, Number(data.dwLine), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.GetVideoPortLine !== undefined) view.setBigUint64(32, data.GetVideoPortLine === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortLine))), true);
  return buf;
}

export class DD_GETVPORTLINEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwLine(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetVideoPortLine(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwLine(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetVideoPortLine(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETVPORTCONNECTDATA (size: 48)
 */
export interface DD_GETVPORTCONNECTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwPortId: number;
  /** ptr */
  lpConnect: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumEntries: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  GetVideoPortConnectInfo: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_GETVPORTCONNECTDATA = 48;

export function allocDD_GETVPORTCONNECTDATA(data?: Partial<DD_GETVPORTCONNECTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETVPORTCONNECTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwPortId !== undefined) view.setUint32(8, Number(data.dwPortId), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpConnect !== undefined) view.setBigUint64(16, data.lpConnect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpConnect))), true);
  // 0x18: u32
  if (data?.dwNumEntries !== undefined) view.setUint32(24, Number(data.dwNumEntries), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.GetVideoPortConnectInfo !== undefined) view.setBigUint64(40, data.GetVideoPortConnectInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortConnectInfo))), true);
  return buf;
}

export class DD_GETVPORTCONNECTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwPortId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lpConnect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwNumEntries(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get GetVideoPortConnectInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwPortId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lpConnect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwNumEntries(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set GetVideoPortConnectInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_DESTROYVPORTDATA (size: 32)
 */
export interface DD_DESTROYVPORTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  DestroyVideoPort: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_DESTROYVPORTDATA = 32;

export function allocDD_DESTROYVPORTDATA(data?: Partial<DD_DESTROYVPORTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_DESTROYVPORTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.DestroyVideoPort !== undefined) view.setBigUint64(24, data.DestroyVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DestroyVideoPort))), true);
  return buf;
}

export class DD_DESTROYVPORTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get DestroyVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set DestroyVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETVPORTFLIPSTATUSDATA (size: 32)
 */
export interface DD_GETVPORTFLIPSTATUSDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** usize */
  fpSurface: bigint | number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  GetVideoPortFlipStatus: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_GETVPORTFLIPSTATUSDATA = 32;

export function allocDD_GETVPORTFLIPSTATUSDATA(data?: Partial<DD_GETVPORTFLIPSTATUSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETVPORTFLIPSTATUSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: usize
  if (data?.fpSurface !== undefined) view.setBigUint64(8, BigInt(data.fpSurface), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.GetVideoPortFlipStatus !== undefined) view.setBigUint64(24, data.GetVideoPortFlipStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoPortFlipStatus))), true);
  return buf;
}

export class DD_GETVPORTFLIPSTATUSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: usize
  get fpSurface(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get GetVideoPortFlipStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: usize
  set fpSurface(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set GetVideoPortFlipStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_UPDATEVPORTDATA (size: 72)
 */
export interface DD_UPDATEVPORTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** ptr */
  lplpDDSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lplpDDVBISurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoInfo: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwNumAutoflip: number;
  /** u32 */
  dwNumVBIAutoflip: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  UpdateVideoPort: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_UPDATEVPORTDATA = 72;

export function allocDD_UPDATEVPORTDATA(data?: Partial<DD_UPDATEVPORTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_UPDATEVPORTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: pointer
  if (data?.lplpDDSurface !== undefined) view.setBigUint64(16, data.lplpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lplpDDSurface))), true);
  // 0x18: pointer
  if (data?.lplpDDVBISurface !== undefined) view.setBigUint64(24, data.lplpDDVBISurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lplpDDVBISurface))), true);
  // 0x20: pointer
  if (data?.lpVideoInfo !== undefined) view.setBigUint64(32, data.lpVideoInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoInfo))), true);
  // 0x28: u32
  if (data?.dwFlags !== undefined) view.setUint32(40, Number(data.dwFlags), true);
  // 0x2c: u32
  if (data?.dwNumAutoflip !== undefined) view.setUint32(44, Number(data.dwNumAutoflip), true);
  // 0x30: u32
  if (data?.dwNumVBIAutoflip !== undefined) view.setUint32(48, Number(data.dwNumVBIAutoflip), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(56, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x40: pointer
  if (data?.UpdateVideoPort !== undefined) view.setBigUint64(64, data.UpdateVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateVideoPort))), true);
  return buf;
}

export class DD_UPDATEVPORTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lplpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lplpDDVBISurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpVideoInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwFlags(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwNumAutoflip(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwNumVBIAutoflip(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get UpdateVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lplpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lplpDDVBISurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpVideoInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwFlags(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwNumAutoflip(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwNumVBIAutoflip(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set UpdateVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_WAITFORVPORTSYNCDATA (size: 48)
 */
export interface DD_WAITFORVPORTSYNCDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwLine: number;
  /** u32 */
  dwTimeOut: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  UpdateVideoPort: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_WAITFORVPORTSYNCDATA = 48;

export function allocDD_WAITFORVPORTSYNCDATA(data?: Partial<DD_WAITFORVPORTSYNCDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_WAITFORVPORTSYNCDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: u32
  if (data?.dwLine !== undefined) view.setUint32(20, Number(data.dwLine), true);
  // 0x18: u32
  if (data?.dwTimeOut !== undefined) view.setUint32(24, Number(data.dwTimeOut), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.UpdateVideoPort !== undefined) view.setBigUint64(40, data.UpdateVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UpdateVideoPort))), true);
  return buf;
}

export class DD_WAITFORVPORTSYNCDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwLine(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwTimeOut(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get UpdateVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwLine(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwTimeOut(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set UpdateVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETVPORTSIGNALDATA (size: 40)
 */
export interface DD_GETVPORTSIGNALDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwStatus: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  GetVideoSignalStatus: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_GETVPORTSIGNALDATA = 40;

export function allocDD_GETVPORTSIGNALDATA(data?: Partial<DD_GETVPORTSIGNALDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETVPORTSIGNALDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwStatus !== undefined) view.setUint32(16, Number(data.dwStatus), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.GetVideoSignalStatus !== undefined) view.setBigUint64(32, data.GetVideoSignalStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetVideoSignalStatus))), true);
  return buf;
}

export class DD_GETVPORTSIGNALDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwStatus(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetVideoSignalStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwStatus(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetVideoSignalStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_VPORTCOLORDATA (size: 48)
 */
export interface DD_VPORTCOLORDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpColorData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  ColorControl: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_VPORTCOLORDATA = 48;

export function allocDD_VPORTCOLORDATA(data?: Partial<DD_VPORTCOLORDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_VPORTCOLORDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpColorData !== undefined) view.setBigUint64(24, data.lpColorData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpColorData))), true);
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.ColorControl !== undefined) view.setBigUint64(40, data.ColorControl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ColorControl))), true);
  return buf;
}

export class DD_VPORTCOLORDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpColorData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ColorControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpColorData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ColorControl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_COLORCONTROLDATA (size: 48)
 */
export interface DD_COLORCONTROLDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpColorData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  ColorControl: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_COLORCONTROLDATA = 48;

export function allocDD_COLORCONTROLDATA(data?: Partial<DD_COLORCONTROLDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_COLORCONTROLDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: pointer
  if (data?.lpColorData !== undefined) view.setBigUint64(16, data.lpColorData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpColorData))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x28: pointer
  if (data?.ColorControl !== undefined) view.setBigUint64(40, data.ColorControl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ColorControl))), true);
  return buf;
}

export class DD_COLORCONTROLDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpColorData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get ColorControl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpColorData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set ColorControl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETDRIVERINFODATA (size: 56)
 */
export interface DD_GETDRIVERINFODATA {
  /** ptr */
  dhpdev: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwSize: number;
  /** u32 */
  dwFlags: number;
  /** System.Guid */
  guidInfo: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwExpectedSize: number;
  /** ptr */
  lpvData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwActualSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_GETDRIVERINFODATA = 56;

export function allocDD_GETDRIVERINFODATA(data?: Partial<DD_GETDRIVERINFODATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETDRIVERINFODATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.dhpdev !== undefined) view.setBigUint64(0, data.dhpdev === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dhpdev))), true);
  // 0x08: u32
  if (data?.dwSize !== undefined) view.setUint32(8, Number(data.dwSize), true);
  // 0x0c: u32
  if (data?.dwFlags !== undefined) view.setUint32(12, Number(data.dwFlags), true);
  // 0x10: pointer
  if (data?.guidInfo !== undefined) view.setBigUint64(16, data.guidInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guidInfo))), true);
  // 0x18: u32
  if (data?.dwExpectedSize !== undefined) view.setUint32(24, Number(data.dwExpectedSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpvData !== undefined) view.setBigUint64(32, data.lpvData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpvData))), true);
  // 0x28: u32
  if (data?.dwActualSize !== undefined) view.setUint32(40, Number(data.dwActualSize), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(48, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_GETDRIVERINFODATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get dhpdev(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get guidInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwExpectedSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lpvData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwActualSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set dhpdev(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set guidInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwExpectedSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lpvData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwActualSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETAVAILDRIVERMEMORYDATA (size: 40)
 */
export interface DD_GETAVAILDRIVERMEMORYDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS */
  DDSCaps: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwTotal: number;
  /** u32 */
  dwFree: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  GetAvailDriverMemory: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_GETAVAILDRIVERMEMORYDATA = 40;

export function allocDD_GETAVAILDRIVERMEMORYDATA(data?: Partial<DD_GETAVAILDRIVERMEMORYDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETAVAILDRIVERMEMORYDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.DDSCaps !== undefined) view.setBigUint64(8, data.DDSCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DDSCaps))), true);
  // 0x10: u32
  if (data?.dwTotal !== undefined) view.setUint32(16, Number(data.dwTotal), true);
  // 0x14: u32
  if (data?.dwFree !== undefined) view.setUint32(20, Number(data.dwFree), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x20: pointer
  if (data?.GetAvailDriverMemory !== undefined) view.setBigUint64(32, data.GetAvailDriverMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.GetAvailDriverMemory))), true);
  return buf;
}

export class DD_GETAVAILDRIVERMEMORYDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DDSCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwTotal(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwFree(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get GetAvailDriverMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DDSCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwTotal(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwFree(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set GetAvailDriverMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_FREEDRIVERMEMORYDATA (size: 32)
 */
export interface DD_FREEDRIVERMEMORYDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  FreeDriverMemory: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_FREEDRIVERMEMORYDATA = 32;

export function allocDD_FREEDRIVERMEMORYDATA(data?: Partial<DD_FREEDRIVERMEMORYDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_FREEDRIVERMEMORYDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.FreeDriverMemory !== undefined) view.setBigUint64(24, data.FreeDriverMemory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FreeDriverMemory))), true);
  return buf;
}

export class DD_FREEDRIVERMEMORYDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get FreeDriverMemory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set FreeDriverMemory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_SETEXCLUSIVEMODEDATA (size: 32)
 */
export interface DD_SETEXCLUSIVEMODEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwEnterExcl: number;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  SetExclusiveMode: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_SETEXCLUSIVEMODEDATA = 32;

export function allocDD_SETEXCLUSIVEMODEDATA(data?: Partial<DD_SETEXCLUSIVEMODEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_SETEXCLUSIVEMODEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwEnterExcl !== undefined) view.setUint32(8, Number(data.dwEnterExcl), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.SetExclusiveMode !== undefined) view.setBigUint64(24, data.SetExclusiveMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SetExclusiveMode))), true);
  return buf;
}

export class DD_SETEXCLUSIVEMODEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwEnterExcl(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get SetExclusiveMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwEnterExcl(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set SetExclusiveMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_FLIPTOGDISURFACEDATA (size: 32)
 */
export interface DD_FLIPTOGDISURFACEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwToGDI: number;
  /** u32 */
  dwReserved: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
  /** ptr */
  FlipToGDISurface: Deno.PointerValue | Uint8Array;
}

export const sizeofDD_FLIPTOGDISURFACEDATA = 32;

export function allocDD_FLIPTOGDISURFACEDATA(data?: Partial<DD_FLIPTOGDISURFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_FLIPTOGDISURFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwToGDI !== undefined) view.setUint32(8, Number(data.dwToGDI), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  // 0x18: pointer
  if (data?.FlipToGDISurface !== undefined) view.setBigUint64(24, data.FlipToGDISurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.FlipToGDISurface))), true);
  return buf;
}

export class DD_FLIPTOGDISURFACEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwToGDI(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get FlipToGDISurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwToGDI(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set FlipToGDISurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_SYNCSURFACEDATA (size: 64)
 */
export interface DD_SYNCSURFACEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwSurfaceOffset: number;
  /** usize */
  fpLockPtr: bigint | number;
  /** i32 */
  lPitch: number;
  /** u32 */
  dwOverlayOffset: number;
  /** u32 */
  dwDriverReserved1: number;
  /** u32 */
  dwDriverReserved2: number;
  /** u32 */
  dwDriverReserved3: number;
  /** u32 */
  dwDriverReserved4: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_SYNCSURFACEDATA = 64;

export function allocDD_SYNCSURFACEDATA(data?: Partial<DD_SYNCSURFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_SYNCSURFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpDDSurface !== undefined) view.setBigUint64(8, data.lpDDSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSurface))), true);
  // 0x10: u32
  if (data?.dwSurfaceOffset !== undefined) view.setUint32(16, Number(data.dwSurfaceOffset), true);
  // 0x14: pad4
  // 0x18: usize
  if (data?.fpLockPtr !== undefined) view.setBigUint64(24, BigInt(data.fpLockPtr), true);
  // 0x20: i32
  if (data?.lPitch !== undefined) view.setInt32(32, Number(data.lPitch), true);
  // 0x24: u32
  if (data?.dwOverlayOffset !== undefined) view.setUint32(36, Number(data.dwOverlayOffset), true);
  // 0x28: u32
  if (data?.dwDriverReserved1 !== undefined) view.setUint32(40, Number(data.dwDriverReserved1), true);
  // 0x2c: u32
  if (data?.dwDriverReserved2 !== undefined) view.setUint32(44, Number(data.dwDriverReserved2), true);
  // 0x30: u32
  if (data?.dwDriverReserved3 !== undefined) view.setUint32(48, Number(data.dwDriverReserved3), true);
  // 0x34: u32
  if (data?.dwDriverReserved4 !== undefined) view.setUint32(52, Number(data.dwDriverReserved4), true);
  // 0x38: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(56, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_SYNCSURFACEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpDDSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwSurfaceOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: usize
  get fpLockPtr(): bigint | number {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: i32
  get lPitch(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: u32
  get dwOverlayOffset(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwDriverReserved1(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwDriverReserved2(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwDriverReserved3(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwDriverReserved4(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpDDSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwSurfaceOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: usize
  set fpLockPtr(value: bigint | number) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: i32
  set lPitch(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: u32
  set dwOverlayOffset(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwDriverReserved1(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwDriverReserved2(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwDriverReserved3(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwDriverReserved4(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_SYNCVIDEOPORTDATA (size: 48)
 */
export interface DD_SYNCVIDEOPORTDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPort: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwOriginOffset: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwVBIHeight: number;
  /** u32 */
  dwDriverReserved1: number;
  /** u32 */
  dwDriverReserved2: number;
  /** u32 */
  dwDriverReserved3: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_SYNCVIDEOPORTDATA = 48;

export function allocDD_SYNCVIDEOPORTDATA(data?: Partial<DD_SYNCVIDEOPORTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_SYNCVIDEOPORTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpVideoPort !== undefined) view.setBigUint64(8, data.lpVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPort))), true);
  // 0x10: u32
  if (data?.dwOriginOffset !== undefined) view.setUint32(16, Number(data.dwOriginOffset), true);
  // 0x14: u32
  if (data?.dwHeight !== undefined) view.setUint32(20, Number(data.dwHeight), true);
  // 0x18: u32
  if (data?.dwVBIHeight !== undefined) view.setUint32(24, Number(data.dwVBIHeight), true);
  // 0x1c: u32
  if (data?.dwDriverReserved1 !== undefined) view.setUint32(28, Number(data.dwDriverReserved1), true);
  // 0x20: u32
  if (data?.dwDriverReserved2 !== undefined) view.setUint32(32, Number(data.dwDriverReserved2), true);
  // 0x24: u32
  if (data?.dwDriverReserved3 !== undefined) view.setUint32(36, Number(data.dwDriverReserved3), true);
  // 0x28: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(40, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_SYNCVIDEOPORTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwOriginOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwVBIHeight(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwDriverReserved1(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwDriverReserved2(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwDriverReserved3(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwOriginOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwVBIHeight(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwDriverReserved1(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwDriverReserved2(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwDriverReserved3(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETMOCOMPGUIDSDATA (size: 32)
 */
export interface DD_GETMOCOMPGUIDSDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumGuids: number;
  /** ptr */
  lpGuids: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_GETMOCOMPGUIDSDATA = 32;

export function allocDD_GETMOCOMPGUIDSDATA(data?: Partial<DD_GETMOCOMPGUIDSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETMOCOMPGUIDSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: u32
  if (data?.dwNumGuids !== undefined) view.setUint32(8, Number(data.dwNumGuids), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.lpGuids !== undefined) view.setBigUint64(16, data.lpGuids === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGuids))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_GETMOCOMPGUIDSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwNumGuids(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get lpGuids(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwNumGuids(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set lpGuids(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETMOCOMPFORMATSDATA (size: 40)
 */
export interface DD_GETMOCOMPFORMATSDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpGuid: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumFormats: number;
  /** ptr */
  lpFormats: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_GETMOCOMPFORMATSDATA = 40;

export function allocDD_GETMOCOMPFORMATSDATA(data?: Partial<DD_GETMOCOMPFORMATSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETMOCOMPFORMATSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpGuid !== undefined) view.setBigUint64(8, data.lpGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGuid))), true);
  // 0x10: u32
  if (data?.dwNumFormats !== undefined) view.setUint32(16, Number(data.dwNumFormats), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpFormats !== undefined) view.setBigUint64(24, data.lpFormats === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpFormats))), true);
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_GETMOCOMPFORMATSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwNumFormats(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpFormats(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwNumFormats(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpFormats(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_CREATEMOCOMPDATA (size: 64)
 */
export interface DD_CREATEMOCOMPDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpMoComp: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpGuid: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwUncompWidth: number;
  /** u32 */
  dwUncompHeight: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddUncompPixelFormat: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDataSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_CREATEMOCOMPDATA = 64;

export function allocDD_CREATEMOCOMPDATA(data?: Partial<DD_CREATEMOCOMPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_CREATEMOCOMPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpMoComp !== undefined) view.setBigUint64(8, data.lpMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpMoComp))), true);
  // 0x10: pointer
  if (data?.lpGuid !== undefined) view.setBigUint64(16, data.lpGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGuid))), true);
  // 0x18: u32
  if (data?.dwUncompWidth !== undefined) view.setUint32(24, Number(data.dwUncompWidth), true);
  // 0x1c: u32
  if (data?.dwUncompHeight !== undefined) view.setUint32(28, Number(data.dwUncompHeight), true);
  // 0x20: pointer
  if (data?.ddUncompPixelFormat !== undefined) view.setBigUint64(32, data.ddUncompPixelFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddUncompPixelFormat))), true);
  // 0x28: pointer
  if (data?.lpData !== undefined) view.setBigUint64(40, data.lpData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpData))), true);
  // 0x30: u32
  if (data?.dwDataSize !== undefined) view.setUint32(48, Number(data.dwDataSize), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(56, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_CREATEMOCOMPDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwUncompWidth(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwUncompHeight(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get ddUncompPixelFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get lpData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwDataSize(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwUncompWidth(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwUncompHeight(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set ddUncompPixelFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set lpData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwDataSize(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDCOMPBUFFERINFO (size: 40)
 */
export interface DDCOMPBUFFERINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwNumCompBuffers: number;
  /** u32 */
  dwWidthToCreate: number;
  /** u32 */
  dwHeightToCreate: number;
  /** u32 */
  dwBytesToAllocate: number;
  /** Windows.Win32.Graphics.DirectDraw.DDSCAPS2 */
  ddCompCaps: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddPixelFormat: Uint8Array | Deno.PointerValue;
}

export const sizeofDDCOMPBUFFERINFO = 40;

export function allocDDCOMPBUFFERINFO(data?: Partial<DDCOMPBUFFERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDCOMPBUFFERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwNumCompBuffers !== undefined) view.setUint32(4, Number(data.dwNumCompBuffers), true);
  // 0x08: u32
  if (data?.dwWidthToCreate !== undefined) view.setUint32(8, Number(data.dwWidthToCreate), true);
  // 0x0c: u32
  if (data?.dwHeightToCreate !== undefined) view.setUint32(12, Number(data.dwHeightToCreate), true);
  // 0x10: u32
  if (data?.dwBytesToAllocate !== undefined) view.setUint32(16, Number(data.dwBytesToAllocate), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.ddCompCaps !== undefined) view.setBigUint64(24, data.ddCompCaps === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddCompCaps))), true);
  // 0x20: pointer
  if (data?.ddPixelFormat !== undefined) view.setBigUint64(32, data.ddPixelFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddPixelFormat))), true);
  return buf;
}

export class DDCOMPBUFFERINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNumCompBuffers(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwWidthToCreate(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwHeightToCreate(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwBytesToAllocate(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get ddCompCaps(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ddPixelFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNumCompBuffers(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwWidthToCreate(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwHeightToCreate(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwBytesToAllocate(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set ddCompCaps(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ddPixelFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETMOCOMPCOMPBUFFDATA (size: 56)
 */
export interface DD_GETMOCOMPCOMPBUFFDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpGuid: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddPixelFormat: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwNumTypesCompBuffs: number;
  /** ptr */
  lpCompBuffInfo: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_GETMOCOMPCOMPBUFFDATA = 56;

export function allocDD_GETMOCOMPCOMPBUFFDATA(data?: Partial<DD_GETMOCOMPCOMPBUFFDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETMOCOMPCOMPBUFFDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpGuid !== undefined) view.setBigUint64(8, data.lpGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGuid))), true);
  // 0x10: u32
  if (data?.dwWidth !== undefined) view.setUint32(16, Number(data.dwWidth), true);
  // 0x14: u32
  if (data?.dwHeight !== undefined) view.setUint32(20, Number(data.dwHeight), true);
  // 0x18: pointer
  if (data?.ddPixelFormat !== undefined) view.setBigUint64(24, data.ddPixelFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddPixelFormat))), true);
  // 0x20: u32
  if (data?.dwNumTypesCompBuffs !== undefined) view.setUint32(32, Number(data.dwNumTypesCompBuffs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpCompBuffInfo !== undefined) view.setBigUint64(40, data.lpCompBuffInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCompBuffInfo))), true);
  // 0x30: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(48, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_GETMOCOMPCOMPBUFFDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get ddPixelFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwNumTypesCompBuffs(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lpCompBuffInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set ddPixelFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwNumTypesCompBuffs(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lpCompBuffInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETINTERNALMOCOMPDATA (size: 48)
 */
export interface DD_GETINTERNALMOCOMPDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpGuid: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** Windows.Win32.Graphics.DirectDraw.DDPIXELFORMAT */
  ddPixelFormat: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwScratchMemAlloc: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_GETINTERNALMOCOMPDATA = 48;

export function allocDD_GETINTERNALMOCOMPDATA(data?: Partial<DD_GETINTERNALMOCOMPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETINTERNALMOCOMPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpGuid !== undefined) view.setBigUint64(8, data.lpGuid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpGuid))), true);
  // 0x10: u32
  if (data?.dwWidth !== undefined) view.setUint32(16, Number(data.dwWidth), true);
  // 0x14: u32
  if (data?.dwHeight !== undefined) view.setUint32(20, Number(data.dwHeight), true);
  // 0x18: pointer
  if (data?.ddPixelFormat !== undefined) view.setBigUint64(24, data.ddPixelFormat === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddPixelFormat))), true);
  // 0x20: u32
  if (data?.dwScratchMemAlloc !== undefined) view.setUint32(32, Number(data.dwScratchMemAlloc), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(40, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_GETINTERNALMOCOMPDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpGuid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get ddPixelFormat(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwScratchMemAlloc(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpGuid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set ddPixelFormat(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwScratchMemAlloc(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_BEGINMOCOMPFRAMEDATA (size: 64)
 */
export interface DD_BEGINMOCOMPFRAMEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpMoComp: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDestSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwInputDataSize: number;
  /** ptr */
  lpInputData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwOutputDataSize: number;
  /** ptr */
  lpOutputData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_BEGINMOCOMPFRAMEDATA = 64;

export function allocDD_BEGINMOCOMPFRAMEDATA(data?: Partial<DD_BEGINMOCOMPFRAMEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_BEGINMOCOMPFRAMEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpMoComp !== undefined) view.setBigUint64(8, data.lpMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpMoComp))), true);
  // 0x10: pointer
  if (data?.lpDestSurface !== undefined) view.setBigUint64(16, data.lpDestSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDestSurface))), true);
  // 0x18: u32
  if (data?.dwInputDataSize !== undefined) view.setUint32(24, Number(data.dwInputDataSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpInputData !== undefined) view.setBigUint64(32, data.lpInputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpInputData))), true);
  // 0x28: u32
  if (data?.dwOutputDataSize !== undefined) view.setUint32(40, Number(data.dwOutputDataSize), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.lpOutputData !== undefined) view.setBigUint64(48, data.lpOutputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOutputData))), true);
  // 0x38: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(56, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_BEGINMOCOMPFRAMEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpDestSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwInputDataSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lpInputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwOutputDataSize(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get lpOutputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpDestSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwInputDataSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lpInputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwOutputDataSize(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set lpOutputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_ENDMOCOMPFRAMEDATA (size: 40)
 */
export interface DD_ENDMOCOMPFRAMEDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpMoComp: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpInputData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwInputDataSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_ENDMOCOMPFRAMEDATA = 40;

export function allocDD_ENDMOCOMPFRAMEDATA(data?: Partial<DD_ENDMOCOMPFRAMEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_ENDMOCOMPFRAMEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpMoComp !== undefined) view.setBigUint64(8, data.lpMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpMoComp))), true);
  // 0x10: pointer
  if (data?.lpInputData !== undefined) view.setBigUint64(16, data.lpInputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpInputData))), true);
  // 0x18: u32
  if (data?.dwInputDataSize !== undefined) view.setUint32(24, Number(data.dwInputDataSize), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_ENDMOCOMPFRAMEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpInputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwInputDataSize(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpInputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwInputDataSize(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDMOCOMPBUFFERINFO (size: 32)
 */
export interface DDMOCOMPBUFFERINFO {
  /** u32 */
  dwSize: number;
  /** ptr */
  lpCompSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDataOffset: number;
  /** u32 */
  dwDataSize: number;
  /** ptr */
  lpPrivate: Deno.PointerValue | Uint8Array;
}

export const sizeofDDMOCOMPBUFFERINFO = 32;

export function allocDDMOCOMPBUFFERINFO(data?: Partial<DDMOCOMPBUFFERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDMOCOMPBUFFERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpCompSurface !== undefined) view.setBigUint64(8, data.lpCompSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCompSurface))), true);
  // 0x10: u32
  if (data?.dwDataOffset !== undefined) view.setUint32(16, Number(data.dwDataOffset), true);
  // 0x14: u32
  if (data?.dwDataSize !== undefined) view.setUint32(20, Number(data.dwDataSize), true);
  // 0x18: pointer
  if (data?.lpPrivate !== undefined) view.setBigUint64(24, data.lpPrivate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpPrivate))), true);
  return buf;
}

export class DDMOCOMPBUFFERINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpCompSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwDataOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwDataSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get lpPrivate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpCompSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwDataOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwDataSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set lpPrivate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_RENDERMOCOMPDATA (size: 80)
 */
export interface DD_RENDERMOCOMPDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpMoComp: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwNumBuffers: number;
  /** ptr */
  lpBufferInfo: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFunction: number;
  /** ptr */
  lpInputData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwInputDataSize: number;
  /** ptr */
  lpOutputData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwOutputDataSize: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_RENDERMOCOMPDATA = 80;

export function allocDD_RENDERMOCOMPDATA(data?: Partial<DD_RENDERMOCOMPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_RENDERMOCOMPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpMoComp !== undefined) view.setBigUint64(8, data.lpMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpMoComp))), true);
  // 0x10: u32
  if (data?.dwNumBuffers !== undefined) view.setUint32(16, Number(data.dwNumBuffers), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.lpBufferInfo !== undefined) view.setBigUint64(24, data.lpBufferInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBufferInfo))), true);
  // 0x20: u32
  if (data?.dwFunction !== undefined) view.setUint32(32, Number(data.dwFunction), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.lpInputData !== undefined) view.setBigUint64(40, data.lpInputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpInputData))), true);
  // 0x30: u32
  if (data?.dwInputDataSize !== undefined) view.setUint32(48, Number(data.dwInputDataSize), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.lpOutputData !== undefined) view.setBigUint64(56, data.lpOutputData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpOutputData))), true);
  // 0x40: u32
  if (data?.dwOutputDataSize !== undefined) view.setUint32(64, Number(data.dwOutputDataSize), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(72, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_RENDERMOCOMPDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwNumBuffers(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get lpBufferInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwFunction(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get lpInputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwInputDataSize(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  get lpOutputData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get dwOutputDataSize(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwNumBuffers(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set lpBufferInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwFunction(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set lpInputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set dwInputDataSize(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: pad4

  // 0x38: pointer
  set lpOutputData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set dwOutputDataSize(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_QUERYMOCOMPSTATUSDATA (size: 40)
 */
export interface DD_QUERYMOCOMPSTATUSDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpMoComp: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_QUERYMOCOMPSTATUSDATA = 40;

export function allocDD_QUERYMOCOMPSTATUSDATA(data?: Partial<DD_QUERYMOCOMPSTATUSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_QUERYMOCOMPSTATUSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpMoComp !== undefined) view.setBigUint64(8, data.lpMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpMoComp))), true);
  // 0x10: pointer
  if (data?.lpSurface !== undefined) view.setBigUint64(16, data.lpSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurface))), true);
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_QUERYMOCOMPSTATUSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_DESTROYMOCOMPDATA (size: 24)
 */
export interface DD_DESTROYMOCOMPDATA {
  /** ptr */
  lpDD: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpMoComp: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_DESTROYMOCOMPDATA = 24;

export function allocDD_DESTROYMOCOMPDATA(data?: Partial<DD_DESTROYMOCOMPDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_DESTROYMOCOMPDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpDD !== undefined) view.setBigUint64(0, data.lpDD === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDD))), true);
  // 0x08: pointer
  if (data?.lpMoComp !== undefined) view.setBigUint64(8, data.lpMoComp === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpMoComp))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_DESTROYMOCOMPDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpDD(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpMoComp(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpDD(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpMoComp(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_CREATESURFACEEXDATA (size: 32)
 */
export interface DD_CREATESURFACEEXDATA {
  /** u32 */
  dwFlags: number;
  /** ptr */
  lpDDLcl: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpDDSLcl: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_CREATESURFACEEXDATA = 32;

export function allocDD_CREATESURFACEEXDATA(data?: Partial<DD_CREATESURFACEEXDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_CREATESURFACEEXDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.lpDDLcl !== undefined) view.setBigUint64(8, data.lpDDLcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDLcl))), true);
  // 0x10: pointer
  if (data?.lpDDSLcl !== undefined) view.setBigUint64(16, data.lpDDSLcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDDSLcl))), true);
  // 0x18: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(24, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_CREATESURFACEEXDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get lpDDLcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpDDSLcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set lpDDLcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpDDSLcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_GETDRIVERSTATEDATA (size: 40)
 */
export interface DD_GETDRIVERSTATEDATA {
  /** u32 */
  dwFlags: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpdwStates: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwLength: number;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_GETDRIVERSTATEDATA = 40;

export function allocDD_GETDRIVERSTATEDATA(data?: Partial<DD_GETDRIVERSTATEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_GETDRIVERSTATEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x10: pointer
  if (data?.lpdwStates !== undefined) view.setBigUint64(16, data.lpdwStates === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpdwStates))), true);
  // 0x18: u32
  if (data?.dwLength !== undefined) view.setUint32(24, Number(data.dwLength), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(32, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_GETDRIVERSTATEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpdwStates(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwLength(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpdwStates(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwLength(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DD_DESTROYDDLOCALDATA (size: 24)
 */
export interface DD_DESTROYDDLOCALDATA {
  /** u32 */
  dwFlags: number;
  /** ptr */
  pDDLcl: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HRESULT */
  ddRVal: Uint8Array | Deno.PointerValue;
}

export const sizeofDD_DESTROYDDLOCALDATA = 24;

export function allocDD_DESTROYDDLOCALDATA(data?: Partial<DD_DESTROYDDLOCALDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDD_DESTROYDDLOCALDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pDDLcl !== undefined) view.setBigUint64(8, data.pDDLcl === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDDLcl))), true);
  // 0x10: pointer
  if (data?.ddRVal !== undefined) view.setBigUint64(16, data.ddRVal === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ddRVal))), true);
  return buf;
}

export class DD_DESTROYDDLOCALDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pDDLcl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get ddRVal(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pDDLcl(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set ddRVal(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.MDL (size: 48)
 */
export interface MDL {
  /** ptr */
  MdlNext: Deno.PointerValue | Uint8Array;
  /** i16 */
  MdlSize: number;
  /** i16 */
  MdlFlags: number;
  /** ptr */
  Process: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpMappedSystemVa: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpStartVa: Deno.PointerValue | Uint8Array;
  /** u32 */
  ByteCount: number;
  /** u32 */
  ByteOffset: number;
}

export const sizeofMDL = 48;

export function allocMDL(data?: Partial<MDL>): Uint8Array {
  const buf = new Uint8Array(sizeofMDL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.MdlNext !== undefined) view.setBigUint64(0, data.MdlNext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MdlNext))), true);
  // 0x08: i16
  if (data?.MdlSize !== undefined) view.setInt16(8, Number(data.MdlSize), true);
  // 0x0a: i16
  if (data?.MdlFlags !== undefined) view.setInt16(10, Number(data.MdlFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Process !== undefined) view.setBigUint64(16, data.Process === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Process))), true);
  // 0x18: pointer
  if (data?.lpMappedSystemVa !== undefined) view.setBigUint64(24, data.lpMappedSystemVa === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpMappedSystemVa))), true);
  // 0x20: pointer
  if (data?.lpStartVa !== undefined) view.setBigUint64(32, data.lpStartVa === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpStartVa))), true);
  // 0x28: u32
  if (data?.ByteCount !== undefined) view.setUint32(40, Number(data.ByteCount), true);
  // 0x2c: u32
  if (data?.ByteOffset !== undefined) view.setUint32(44, Number(data.ByteOffset), true);
  return buf;
}

export class MDLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get MdlNext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: i16
  get MdlSize(): number {
    return this.view.getInt16(8, true);
  }

  // 0x0a: i16
  get MdlFlags(): number {
    return this.view.getInt16(10, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get Process(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpMappedSystemVa(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get lpStartVa(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get ByteCount(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get ByteOffset(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: pointer
  set MdlNext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: i16
  set MdlSize(value: number) {
    this.view.setInt16(8, value, true);
  }

  // 0x0a: i16
  set MdlFlags(value: number) {
    this.view.setInt16(10, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set Process(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpMappedSystemVa(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set lpStartVa(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set ByteCount(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set ByteOffset(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDSURFACEDATA (size: 96)
 */
export interface DDSURFACEDATA {
  /** u32 */
  ddsCaps: number;
  /** u32 */
  dwSurfaceOffset: number;
  /** usize */
  fpLockPtr: bigint | number;
  /** u32 */
  dwWidth: number;
  /** u32 */
  dwHeight: number;
  /** i32 */
  lPitch: number;
  /** u32 */
  dwOverlayFlags: number;
  /** u32 */
  dwOverlayOffset: number;
  /** u32 */
  dwOverlaySrcWidth: number;
  /** u32 */
  dwOverlaySrcHeight: number;
  /** u32 */
  dwOverlayDestWidth: number;
  /** u32 */
  dwOverlayDestHeight: number;
  /** u32 */
  dwVideoPortId: number;
  /** u32 */
  dwFormatFlags: number;
  /** u32 */
  dwFormatFourCC: number;
  /** u32 */
  dwFormatBitCount: number;
  /** u32 */
  dwRBitMask: number;
  /** u32 */
  dwGBitMask: number;
  /** u32 */
  dwBBitMask: number;
  /** u32 */
  dwDriverReserved1: number;
  /** u32 */
  dwDriverReserved2: number;
  /** u32 */
  dwDriverReserved3: number;
  /** u32 */
  dwDriverReserved4: number;
}

export const sizeofDDSURFACEDATA = 96;

export function allocDDSURFACEDATA(data?: Partial<DDSURFACEDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDSURFACEDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ddsCaps !== undefined) view.setUint32(0, Number(data.ddsCaps), true);
  // 0x04: u32
  if (data?.dwSurfaceOffset !== undefined) view.setUint32(4, Number(data.dwSurfaceOffset), true);
  // 0x08: usize
  if (data?.fpLockPtr !== undefined) view.setBigUint64(8, BigInt(data.fpLockPtr), true);
  // 0x10: u32
  if (data?.dwWidth !== undefined) view.setUint32(16, Number(data.dwWidth), true);
  // 0x14: u32
  if (data?.dwHeight !== undefined) view.setUint32(20, Number(data.dwHeight), true);
  // 0x18: i32
  if (data?.lPitch !== undefined) view.setInt32(24, Number(data.lPitch), true);
  // 0x1c: u32
  if (data?.dwOverlayFlags !== undefined) view.setUint32(28, Number(data.dwOverlayFlags), true);
  // 0x20: u32
  if (data?.dwOverlayOffset !== undefined) view.setUint32(32, Number(data.dwOverlayOffset), true);
  // 0x24: u32
  if (data?.dwOverlaySrcWidth !== undefined) view.setUint32(36, Number(data.dwOverlaySrcWidth), true);
  // 0x28: u32
  if (data?.dwOverlaySrcHeight !== undefined) view.setUint32(40, Number(data.dwOverlaySrcHeight), true);
  // 0x2c: u32
  if (data?.dwOverlayDestWidth !== undefined) view.setUint32(44, Number(data.dwOverlayDestWidth), true);
  // 0x30: u32
  if (data?.dwOverlayDestHeight !== undefined) view.setUint32(48, Number(data.dwOverlayDestHeight), true);
  // 0x34: u32
  if (data?.dwVideoPortId !== undefined) view.setUint32(52, Number(data.dwVideoPortId), true);
  // 0x38: u32
  if (data?.dwFormatFlags !== undefined) view.setUint32(56, Number(data.dwFormatFlags), true);
  // 0x3c: u32
  if (data?.dwFormatFourCC !== undefined) view.setUint32(60, Number(data.dwFormatFourCC), true);
  // 0x40: u32
  if (data?.dwFormatBitCount !== undefined) view.setUint32(64, Number(data.dwFormatBitCount), true);
  // 0x44: u32
  if (data?.dwRBitMask !== undefined) view.setUint32(68, Number(data.dwRBitMask), true);
  // 0x48: u32
  if (data?.dwGBitMask !== undefined) view.setUint32(72, Number(data.dwGBitMask), true);
  // 0x4c: u32
  if (data?.dwBBitMask !== undefined) view.setUint32(76, Number(data.dwBBitMask), true);
  // 0x50: u32
  if (data?.dwDriverReserved1 !== undefined) view.setUint32(80, Number(data.dwDriverReserved1), true);
  // 0x54: u32
  if (data?.dwDriverReserved2 !== undefined) view.setUint32(84, Number(data.dwDriverReserved2), true);
  // 0x58: u32
  if (data?.dwDriverReserved3 !== undefined) view.setUint32(88, Number(data.dwDriverReserved3), true);
  // 0x5c: u32
  if (data?.dwDriverReserved4 !== undefined) view.setUint32(92, Number(data.dwDriverReserved4), true);
  return buf;
}

export class DDSURFACEDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get ddsCaps(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSurfaceOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: usize
  get fpLockPtr(): bigint | number {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get dwWidth(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwHeight(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: i32
  get lPitch(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: u32
  get dwOverlayFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwOverlayOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwOverlaySrcWidth(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwOverlaySrcHeight(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwOverlayDestWidth(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwOverlayDestHeight(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwVideoPortId(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwFormatFlags(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get dwFormatFourCC(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get dwFormatBitCount(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwRBitMask(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwGBitMask(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwBBitMask(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwDriverReserved1(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: u32
  get dwDriverReserved2(): number {
    return this.view.getUint32(84, true);
  }

  // 0x58: u32
  get dwDriverReserved3(): number {
    return this.view.getUint32(88, true);
  }

  // 0x5c: u32
  get dwDriverReserved4(): number {
    return this.view.getUint32(92, true);
  }

  // 0x00: u32
  set ddsCaps(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSurfaceOffset(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: usize
  set fpLockPtr(value: bigint | number) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set dwWidth(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwHeight(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: i32
  set lPitch(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: u32
  set dwOverlayFlags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwOverlayOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwOverlaySrcWidth(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwOverlaySrcHeight(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwOverlayDestWidth(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwOverlayDestHeight(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwVideoPortId(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwFormatFlags(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set dwFormatFourCC(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set dwFormatBitCount(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwRBitMask(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwGBitMask(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwBBitMask(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwDriverReserved1(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: u32
  set dwDriverReserved2(value: number) {
    this.view.setUint32(84, value, true);
  }

  // 0x58: u32
  set dwDriverReserved3(value: number) {
    this.view.setUint32(88, value, true);
  }

  // 0x5c: u32
  set dwDriverReserved4(value: number) {
    this.view.setUint32(92, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDVIDEOPORTDATA (size: 32)
 */
export interface DDVIDEOPORTDATA {
  /** u32 */
  dwVideoPortId: number;
  /** u32 */
  dwVPFlags: number;
  /** u32 */
  dwOriginOffset: number;
  /** u32 */
  dwHeight: number;
  /** u32 */
  dwVBIHeight: number;
  /** u32 */
  dwDriverReserved1: number;
  /** u32 */
  dwDriverReserved2: number;
  /** u32 */
  dwDriverReserved3: number;
}

export const sizeofDDVIDEOPORTDATA = 32;

export function allocDDVIDEOPORTDATA(data?: Partial<DDVIDEOPORTDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDDVIDEOPORTDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVideoPortId !== undefined) view.setUint32(0, Number(data.dwVideoPortId), true);
  // 0x04: u32
  if (data?.dwVPFlags !== undefined) view.setUint32(4, Number(data.dwVPFlags), true);
  // 0x08: u32
  if (data?.dwOriginOffset !== undefined) view.setUint32(8, Number(data.dwOriginOffset), true);
  // 0x0c: u32
  if (data?.dwHeight !== undefined) view.setUint32(12, Number(data.dwHeight), true);
  // 0x10: u32
  if (data?.dwVBIHeight !== undefined) view.setUint32(16, Number(data.dwVBIHeight), true);
  // 0x14: u32
  if (data?.dwDriverReserved1 !== undefined) view.setUint32(20, Number(data.dwDriverReserved1), true);
  // 0x18: u32
  if (data?.dwDriverReserved2 !== undefined) view.setUint32(24, Number(data.dwDriverReserved2), true);
  // 0x1c: u32
  if (data?.dwDriverReserved3 !== undefined) view.setUint32(28, Number(data.dwDriverReserved3), true);
  return buf;
}

export class DDVIDEOPORTDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVideoPortId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVPFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwOriginOffset(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwHeight(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwVBIHeight(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwDriverReserved1(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwDriverReserved2(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwDriverReserved3(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set dwVideoPortId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVPFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwOriginOffset(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwHeight(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwVBIHeight(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwDriverReserved1(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwDriverReserved2(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwDriverReserved3(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DX_IRQDATA (size: 8)
 */
export interface DX_IRQDATA {
  /** u32 */
  dwIrqFlags: number;
}

export const sizeofDX_IRQDATA = 8;

export function allocDX_IRQDATA(data?: Partial<DX_IRQDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofDX_IRQDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIrqFlags !== undefined) view.setUint32(0, Number(data.dwIrqFlags), true);
  // 0x04: pad4
  return buf;
}

export class DX_IRQDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwIrqFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwIrqFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDGETIRQINFO (size: 8)
 */
export interface DDGETIRQINFO {
  /** u32 */
  dwFlags: number;
}

export const sizeofDDGETIRQINFO = 8;

export function allocDDGETIRQINFO(data?: Partial<DDGETIRQINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDGETIRQINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  return buf;
}

export class DDGETIRQINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDENABLEIRQINFO (size: 24)
 */
export interface DDENABLEIRQINFO {
  /** u32 */
  dwIRQSources: number;
  /** u32 */
  dwLine: number;
  /** Windows.Win32.Graphics.DirectDraw.PDX_IRQCALLBACK */
  IRQCallback: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpIRQData: Deno.PointerValue | Uint8Array;
}

export const sizeofDDENABLEIRQINFO = 24;

export function allocDDENABLEIRQINFO(data?: Partial<DDENABLEIRQINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDENABLEIRQINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwIRQSources !== undefined) view.setUint32(0, Number(data.dwIRQSources), true);
  // 0x04: u32
  if (data?.dwLine !== undefined) view.setUint32(4, Number(data.dwLine), true);
  // 0x08: pointer
  if (data?.IRQCallback !== undefined) view.setBigUint64(8, data.IRQCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.IRQCallback))), true);
  // 0x10: pointer
  if (data?.lpIRQData !== undefined) view.setBigUint64(16, data.lpIRQData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpIRQData))), true);
  return buf;
}

export class DDENABLEIRQINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwIRQSources(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwLine(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get IRQCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpIRQData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwIRQSources(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwLine(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set IRQCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpIRQData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDSKIPNEXTFIELDINFO (size: 16)
 */
export interface DDSKIPNEXTFIELDINFO {
  /** ptr */
  lpVideoPortData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwSkipFlags: number;
}

export const sizeofDDSKIPNEXTFIELDINFO = 16;

export function allocDDSKIPNEXTFIELDINFO(data?: Partial<DDSKIPNEXTFIELDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDSKIPNEXTFIELDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpVideoPortData !== undefined) view.setBigUint64(0, data.lpVideoPortData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPortData))), true);
  // 0x08: u32
  if (data?.dwSkipFlags !== undefined) view.setUint32(8, Number(data.dwSkipFlags), true);
  // 0x0c: pad4
  return buf;
}

export class DDSKIPNEXTFIELDINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpVideoPortData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwSkipFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set lpVideoPortData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwSkipFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDBOBNEXTFIELDINFO (size: 8)
 */
export interface DDBOBNEXTFIELDINFO {
  /** ptr */
  lpSurface: Deno.PointerValue | Uint8Array;
}

export const sizeofDDBOBNEXTFIELDINFO = 8;

export function allocDDBOBNEXTFIELDINFO(data?: Partial<DDBOBNEXTFIELDINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDBOBNEXTFIELDINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpSurface !== undefined) view.setBigUint64(0, data.lpSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurface))), true);
  return buf;
}

export class DDBOBNEXTFIELDINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDSETSTATEININFO (size: 16)
 */
export interface DDSETSTATEININFO {
  /** ptr */
  lpSurfaceData: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpVideoPortData: Deno.PointerValue | Uint8Array;
}

export const sizeofDDSETSTATEININFO = 16;

export function allocDDSETSTATEININFO(data?: Partial<DDSETSTATEININFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDSETSTATEININFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpSurfaceData !== undefined) view.setBigUint64(0, data.lpSurfaceData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfaceData))), true);
  // 0x08: pointer
  if (data?.lpVideoPortData !== undefined) view.setBigUint64(8, data.lpVideoPortData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPortData))), true);
  return buf;
}

export class DDSETSTATEININFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpSurfaceData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpVideoPortData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpSurfaceData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpVideoPortData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDSETSTATEOUTINFO (size: 16)
 */
export interface DDSETSTATEOUTINFO {
  /** Windows.Win32.Foundation.BOOL */
  bSoftwareAutoflip: boolean;
  /** u32 */
  dwSurfaceIndex: number;
  /** u32 */
  dwVBISurfaceIndex: number;
}

export const sizeofDDSETSTATEOUTINFO = 16;

export function allocDDSETSTATEOUTINFO(data?: Partial<DDSETSTATEOUTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDSETSTATEOUTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bSoftwareAutoflip !== undefined) view.setInt32(0, Number(data.bSoftwareAutoflip), true);
  // 0x04: u32
  if (data?.dwSurfaceIndex !== undefined) view.setUint32(4, Number(data.dwSurfaceIndex), true);
  // 0x08: u32
  if (data?.dwVBISurfaceIndex !== undefined) view.setUint32(8, Number(data.dwVBISurfaceIndex), true);
  // 0x0c: pad4
  return buf;
}

export class DDSETSTATEOUTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get bSoftwareAutoflip(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get dwSurfaceIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwVBISurfaceIndex(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set bSoftwareAutoflip(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set dwSurfaceIndex(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwVBISurfaceIndex(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDLOCKININFO (size: 8)
 */
export interface DDLOCKININFO {
  /** ptr */
  lpSurfaceData: Deno.PointerValue | Uint8Array;
}

export const sizeofDDLOCKININFO = 8;

export function allocDDLOCKININFO(data?: Partial<DDLOCKININFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDLOCKININFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpSurfaceData !== undefined) view.setBigUint64(0, data.lpSurfaceData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfaceData))), true);
  return buf;
}

export class DDLOCKININFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpSurfaceData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpSurfaceData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDLOCKOUTINFO (size: 8)
 */
export interface DDLOCKOUTINFO {
  /** usize */
  dwSurfacePtr: bigint | number;
}

export const sizeofDDLOCKOUTINFO = 8;

export function allocDDLOCKOUTINFO(data?: Partial<DDLOCKOUTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDLOCKOUTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwSurfacePtr !== undefined) view.setBigUint64(0, BigInt(data.dwSurfacePtr), true);
  return buf;
}

export class DDLOCKOUTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get dwSurfacePtr(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: usize
  set dwSurfacePtr(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDFLIPOVERLAYINFO (size: 24)
 */
export interface DDFLIPOVERLAYINFO {
  /** ptr */
  lpCurrentSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpTargetSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
}

export const sizeofDDFLIPOVERLAYINFO = 24;

export function allocDDFLIPOVERLAYINFO(data?: Partial<DDFLIPOVERLAYINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDFLIPOVERLAYINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpCurrentSurface !== undefined) view.setBigUint64(0, data.lpCurrentSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCurrentSurface))), true);
  // 0x08: pointer
  if (data?.lpTargetSurface !== undefined) view.setBigUint64(8, data.lpTargetSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpTargetSurface))), true);
  // 0x10: u32
  if (data?.dwFlags !== undefined) view.setUint32(16, Number(data.dwFlags), true);
  // 0x14: pad4
  return buf;
}

export class DDFLIPOVERLAYINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpCurrentSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpTargetSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set lpCurrentSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpTargetSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDFLIPVIDEOPORTINFO (size: 32)
 */
export interface DDFLIPVIDEOPORTINFO {
  /** ptr */
  lpVideoPortData: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpCurrentSurface: Deno.PointerValue | Uint8Array;
  /** ptr */
  lpTargetSurface: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlipVPFlags: number;
}

export const sizeofDDFLIPVIDEOPORTINFO = 32;

export function allocDDFLIPVIDEOPORTINFO(data?: Partial<DDFLIPVIDEOPORTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDFLIPVIDEOPORTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpVideoPortData !== undefined) view.setBigUint64(0, data.lpVideoPortData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPortData))), true);
  // 0x08: pointer
  if (data?.lpCurrentSurface !== undefined) view.setBigUint64(8, data.lpCurrentSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpCurrentSurface))), true);
  // 0x10: pointer
  if (data?.lpTargetSurface !== undefined) view.setBigUint64(16, data.lpTargetSurface === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpTargetSurface))), true);
  // 0x18: u32
  if (data?.dwFlipVPFlags !== undefined) view.setUint32(24, Number(data.dwFlipVPFlags), true);
  // 0x1c: pad4
  return buf;
}

export class DDFLIPVIDEOPORTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpVideoPortData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpCurrentSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpTargetSurface(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlipVPFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: pointer
  set lpVideoPortData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpCurrentSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpTargetSurface(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set dwFlipVPFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDGETPOLARITYININFO (size: 8)
 */
export interface DDGETPOLARITYININFO {
  /** ptr */
  lpVideoPortData: Deno.PointerValue | Uint8Array;
}

export const sizeofDDGETPOLARITYININFO = 8;

export function allocDDGETPOLARITYININFO(data?: Partial<DDGETPOLARITYININFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDGETPOLARITYININFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpVideoPortData !== undefined) view.setBigUint64(0, data.lpVideoPortData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPortData))), true);
  return buf;
}

export class DDGETPOLARITYININFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpVideoPortData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpVideoPortData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDGETPOLARITYOUTINFO (size: 8)
 */
export interface DDGETPOLARITYOUTINFO {
  /** u32 */
  bPolarity: number;
}

export const sizeofDDGETPOLARITYOUTINFO = 8;

export function allocDDGETPOLARITYOUTINFO(data?: Partial<DDGETPOLARITYOUTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDGETPOLARITYOUTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.bPolarity !== undefined) view.setUint32(0, Number(data.bPolarity), true);
  // 0x04: pad4
  return buf;
}

export class DDGETPOLARITYOUTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get bPolarity(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set bPolarity(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDGETCURRENTAUTOFLIPININFO (size: 8)
 */
export interface DDGETCURRENTAUTOFLIPININFO {
  /** ptr */
  lpVideoPortData: Deno.PointerValue | Uint8Array;
}

export const sizeofDDGETCURRENTAUTOFLIPININFO = 8;

export function allocDDGETCURRENTAUTOFLIPININFO(data?: Partial<DDGETCURRENTAUTOFLIPININFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDGETCURRENTAUTOFLIPININFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpVideoPortData !== undefined) view.setBigUint64(0, data.lpVideoPortData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPortData))), true);
  return buf;
}

export class DDGETCURRENTAUTOFLIPININFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpVideoPortData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpVideoPortData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDGETCURRENTAUTOFLIPOUTINFO (size: 8)
 */
export interface DDGETCURRENTAUTOFLIPOUTINFO {
  /** u32 */
  dwSurfaceIndex: number;
  /** u32 */
  dwVBISurfaceIndex: number;
}

export const sizeofDDGETCURRENTAUTOFLIPOUTINFO = 8;

export function allocDDGETCURRENTAUTOFLIPOUTINFO(data?: Partial<DDGETCURRENTAUTOFLIPOUTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDGETCURRENTAUTOFLIPOUTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSurfaceIndex !== undefined) view.setUint32(0, Number(data.dwSurfaceIndex), true);
  // 0x04: u32
  if (data?.dwVBISurfaceIndex !== undefined) view.setUint32(4, Number(data.dwVBISurfaceIndex), true);
  return buf;
}

export class DDGETCURRENTAUTOFLIPOUTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSurfaceIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVBISurfaceIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwSurfaceIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVBISurfaceIndex(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDGETPREVIOUSAUTOFLIPININFO (size: 8)
 */
export interface DDGETPREVIOUSAUTOFLIPININFO {
  /** ptr */
  lpVideoPortData: Deno.PointerValue | Uint8Array;
}

export const sizeofDDGETPREVIOUSAUTOFLIPININFO = 8;

export function allocDDGETPREVIOUSAUTOFLIPININFO(data?: Partial<DDGETPREVIOUSAUTOFLIPININFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDGETPREVIOUSAUTOFLIPININFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpVideoPortData !== undefined) view.setBigUint64(0, data.lpVideoPortData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpVideoPortData))), true);
  return buf;
}

export class DDGETPREVIOUSAUTOFLIPININFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpVideoPortData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpVideoPortData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDGETPREVIOUSAUTOFLIPOUTINFO (size: 8)
 */
export interface DDGETPREVIOUSAUTOFLIPOUTINFO {
  /** u32 */
  dwSurfaceIndex: number;
  /** u32 */
  dwVBISurfaceIndex: number;
}

export const sizeofDDGETPREVIOUSAUTOFLIPOUTINFO = 8;

export function allocDDGETPREVIOUSAUTOFLIPOUTINFO(data?: Partial<DDGETPREVIOUSAUTOFLIPOUTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDGETPREVIOUSAUTOFLIPOUTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSurfaceIndex !== undefined) view.setUint32(0, Number(data.dwSurfaceIndex), true);
  // 0x04: u32
  if (data?.dwVBISurfaceIndex !== undefined) view.setUint32(4, Number(data.dwVBISurfaceIndex), true);
  return buf;
}

export class DDGETPREVIOUSAUTOFLIPOUTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSurfaceIndex(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVBISurfaceIndex(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwSurfaceIndex(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVBISurfaceIndex(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDTRANSFERININFO (size: 40)
 */
export interface DDTRANSFERININFO {
  /** ptr */
  lpSurfaceData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwStartLine: number;
  /** u32 */
  dwEndLine: number;
  /** usize */
  dwTransferID: bigint | number;
  /** u32 */
  dwTransferFlags: number;
  /** ptr */
  lpDestMDL: Deno.PointerValue | Uint8Array;
}

export const sizeofDDTRANSFERININFO = 40;

export function allocDDTRANSFERININFO(data?: Partial<DDTRANSFERININFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDTRANSFERININFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpSurfaceData !== undefined) view.setBigUint64(0, data.lpSurfaceData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpSurfaceData))), true);
  // 0x08: u32
  if (data?.dwStartLine !== undefined) view.setUint32(8, Number(data.dwStartLine), true);
  // 0x0c: u32
  if (data?.dwEndLine !== undefined) view.setUint32(12, Number(data.dwEndLine), true);
  // 0x10: usize
  if (data?.dwTransferID !== undefined) view.setBigUint64(16, BigInt(data.dwTransferID), true);
  // 0x18: u32
  if (data?.dwTransferFlags !== undefined) view.setUint32(24, Number(data.dwTransferFlags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.lpDestMDL !== undefined) view.setBigUint64(32, data.lpDestMDL === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpDestMDL))), true);
  return buf;
}

export class DDTRANSFERININFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpSurfaceData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwStartLine(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwEndLine(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: usize
  get dwTransferID(): bigint | number {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: u32
  get dwTransferFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get lpDestMDL(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpSurfaceData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwStartLine(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwEndLine(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: usize
  set dwTransferID(value: bigint | number) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: u32
  set dwTransferFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set lpDestMDL(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDTRANSFEROUTINFO (size: 8)
 */
export interface DDTRANSFEROUTINFO {
  /** u32 */
  dwBufferPolarity: number;
}

export const sizeofDDTRANSFEROUTINFO = 8;

export function allocDDTRANSFEROUTINFO(data?: Partial<DDTRANSFEROUTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDTRANSFEROUTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBufferPolarity !== undefined) view.setUint32(0, Number(data.dwBufferPolarity), true);
  // 0x04: pad4
  return buf;
}

export class DDTRANSFEROUTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwBufferPolarity(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwBufferPolarity(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.DirectDraw.DDGETTRANSFERSTATUSOUTINFO (size: 8)
 */
export interface DDGETTRANSFERSTATUSOUTINFO {
  /** usize */
  dwTransferID: bigint | number;
}

export const sizeofDDGETTRANSFERSTATUSOUTINFO = 8;

export function allocDDGETTRANSFERSTATUSOUTINFO(data?: Partial<DDGETTRANSFERSTATUSOUTINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDDGETTRANSFERSTATUSOUTINFO);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.dwTransferID !== undefined) view.setBigUint64(0, BigInt(data.dwTransferID), true);
  return buf;
}

export class DDGETTRANSFERSTATUSOUTINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get dwTransferID(): bigint | number {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: usize
  set dwTransferID(value: bigint | number) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.DirectDraw.DXAPI_INTERFACE (size: 136)
 */
export interface DXAPI_INTERFACE {
  /** u16 */
  Size: number;
  /** u16 */
  Version: number;
  /** ptr */
  Context: Deno.PointerValue | Uint8Array;
  /** ptr */
  InterfaceReference: Deno.PointerValue | Uint8Array;
  /** ptr */
  InterfaceDereference: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.DirectDraw.PDX_GETIRQINFO */
  DxGetIrqInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDX_ENABLEIRQ */
  DxEnableIrq: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDX_SKIPNEXTFIELD */
  DxSkipNextField: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDX_BOBNEXTFIELD */
  DxBobNextField: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDX_SETSTATE */
  DxSetState: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDX_LOCK */
  DxLock: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDX_FLIPOVERLAY */
  DxFlipOverlay: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDX_FLIPVIDEOPORT */
  DxFlipVideoPort: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDX_GETPOLARITY */
  DxGetPolarity: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDX_GETCURRENTAUTOFLIP */
  DxGetCurrentAutoflip: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDX_GETPREVIOUSAUTOFLIP */
  DxGetPreviousAutoflip: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDX_TRANSFER */
  DxTransfer: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.DirectDraw.PDX_GETTRANSFERSTATUS */
  DxGetTransferStatus: Uint8Array | Deno.PointerValue;
}

export const sizeofDXAPI_INTERFACE = 136;

export function allocDXAPI_INTERFACE(data?: Partial<DXAPI_INTERFACE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXAPI_INTERFACE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Size !== undefined) view.setUint16(0, Number(data.Size), true);
  // 0x02: u16
  if (data?.Version !== undefined) view.setUint16(2, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Context !== undefined) view.setBigUint64(8, data.Context === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Context))), true);
  // 0x10: pointer
  if (data?.InterfaceReference !== undefined) view.setBigUint64(16, data.InterfaceReference === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceReference))), true);
  // 0x18: pointer
  if (data?.InterfaceDereference !== undefined) view.setBigUint64(24, data.InterfaceDereference === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.InterfaceDereference))), true);
  // 0x20: pointer
  if (data?.DxGetIrqInfo !== undefined) view.setBigUint64(32, data.DxGetIrqInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DxGetIrqInfo))), true);
  // 0x28: pointer
  if (data?.DxEnableIrq !== undefined) view.setBigUint64(40, data.DxEnableIrq === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DxEnableIrq))), true);
  // 0x30: pointer
  if (data?.DxSkipNextField !== undefined) view.setBigUint64(48, data.DxSkipNextField === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DxSkipNextField))), true);
  // 0x38: pointer
  if (data?.DxBobNextField !== undefined) view.setBigUint64(56, data.DxBobNextField === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DxBobNextField))), true);
  // 0x40: pointer
  if (data?.DxSetState !== undefined) view.setBigUint64(64, data.DxSetState === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DxSetState))), true);
  // 0x48: pointer
  if (data?.DxLock !== undefined) view.setBigUint64(72, data.DxLock === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DxLock))), true);
  // 0x50: pointer
  if (data?.DxFlipOverlay !== undefined) view.setBigUint64(80, data.DxFlipOverlay === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DxFlipOverlay))), true);
  // 0x58: pointer
  if (data?.DxFlipVideoPort !== undefined) view.setBigUint64(88, data.DxFlipVideoPort === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DxFlipVideoPort))), true);
  // 0x60: pointer
  if (data?.DxGetPolarity !== undefined) view.setBigUint64(96, data.DxGetPolarity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DxGetPolarity))), true);
  // 0x68: pointer
  if (data?.DxGetCurrentAutoflip !== undefined) view.setBigUint64(104, data.DxGetCurrentAutoflip === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DxGetCurrentAutoflip))), true);
  // 0x70: pointer
  if (data?.DxGetPreviousAutoflip !== undefined) view.setBigUint64(112, data.DxGetPreviousAutoflip === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DxGetPreviousAutoflip))), true);
  // 0x78: pointer
  if (data?.DxTransfer !== undefined) view.setBigUint64(120, data.DxTransfer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DxTransfer))), true);
  // 0x80: pointer
  if (data?.DxGetTransferStatus !== undefined) view.setBigUint64(128, data.DxGetTransferStatus === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DxGetTransferStatus))), true);
  return buf;
}

export class DXAPI_INTERFACEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Size(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Version(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Context(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get InterfaceReference(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get InterfaceDereference(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get DxGetIrqInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get DxEnableIrq(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get DxSkipNextField(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get DxBobNextField(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get DxSetState(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get DxLock(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get DxFlipOverlay(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get DxFlipVideoPort(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get DxGetPolarity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: pointer
  get DxGetCurrentAutoflip(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get DxGetPreviousAutoflip(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get DxTransfer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get DxGetTransferStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Size(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Version(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Context(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set InterfaceReference(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set InterfaceDereference(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set DxGetIrqInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set DxEnableIrq(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set DxSkipNextField(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set DxBobNextField(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set DxSetState(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set DxLock(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set DxFlipOverlay(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set DxFlipVideoPort(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set DxGetPolarity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: pointer
  set DxGetCurrentAutoflip(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set DxGetPreviousAutoflip(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set DxTransfer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set DxGetTransferStatus(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

// Native Libraries

try {
  var libDDRAW_dll = Deno.dlopen("DDRAW.dll", {
    DirectDrawEnumerateW: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DirectDrawEnumerateA: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DirectDrawEnumerateExW: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    DirectDrawEnumerateExA: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
      optional: true,
    },
    DirectDrawCreate: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DirectDrawCreateEx: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
    DirectDrawCreateClipper: {
      parameters: ["u32", "pointer", "pointer"],
      result: "pointer",
      optional: true,
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DirectDrawEnumerateW(
  lpCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.DirectDraw.LPDDENUMCALLBACKW */,
  lpContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDDRAW_dll.DirectDrawEnumerateW!(util.toPointer(lpCallback), util.toPointer(lpContext));
}

export function DirectDrawEnumerateA(
  lpCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.DirectDraw.LPDDENUMCALLBACKA */,
  lpContext: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDDRAW_dll.DirectDrawEnumerateA!(util.toPointer(lpCallback), util.toPointer(lpContext));
}

export function DirectDrawEnumerateExW(
  lpCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.DirectDraw.LPDDENUMCALLBACKEXW */,
  lpContext: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDDRAW_dll.DirectDrawEnumerateExW!(util.toPointer(lpCallback), util.toPointer(lpContext), dwFlags);
}

export function DirectDrawEnumerateExA(
  lpCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.DirectDraw.LPDDENUMCALLBACKEXA */,
  lpContext: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDDRAW_dll.DirectDrawEnumerateExA!(util.toPointer(lpCallback), util.toPointer(lpContext), dwFlags);
}

export function DirectDrawCreate(
  lpGUID: Deno.PointerValue | Uint8Array /* ptr */,
  lplpDD: Deno.PointerValue | Uint8Array /* ptr */,
  pUnkOuter: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDDRAW_dll.DirectDrawCreate!(util.toPointer(lpGUID), util.toPointer(lplpDD), util.toPointer(pUnkOuter));
}

export function DirectDrawCreateEx(
  lpGuid: Deno.PointerValue | Uint8Array /* ptr */,
  lplpDD: Deno.PointerValue | Uint8Array /* ptr */,
  iid: Deno.PointerValue | Uint8Array /* ptr */,
  pUnkOuter: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDDRAW_dll.DirectDrawCreateEx!(util.toPointer(lpGuid), util.toPointer(lplpDD), util.toPointer(iid), util.toPointer(pUnkOuter));
}

export function DirectDrawCreateClipper(
  dwFlags: number /* u32 */,
  lplpDDClipper: Deno.PointerValue | Uint8Array /* ptr */,
  pUnkOuter: Uint8Array | Deno.PointerValue /* Windows.Win32.System.Com.IUnknown */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libDDRAW_dll.DirectDrawCreateClipper!(dwFlags, util.toPointer(lplpDDClipper), util.toPointer(pUnkOuter));
}

