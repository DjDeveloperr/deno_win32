/// Auto-generated by Deno Win32: Windows.Win32.Graphics.Dxgi.Common.Apis

import * as util from "../../../util.ts";

// Enums
export type DXGI_COLOR_SPACE_TYPE = number;
export type DXGI_FORMAT = number;
export type DXGI_MODE_SCANLINE_ORDER = number;
export type DXGI_MODE_SCALING = number;
export type DXGI_MODE_ROTATION = number;
export type DXGI_ALPHA_MODE = number;

// Constants
export const _FACDXGI = 2170;
export const DXGI_CPU_ACCESS_NONE = 0;
export const DXGI_CPU_ACCESS_DYNAMIC = 1;
export const DXGI_CPU_ACCESS_READ_WRITE = 2;
export const DXGI_CPU_ACCESS_SCRATCH = 3;
export const DXGI_CPU_ACCESS_FIELD = 15;
export const DXGI_FORMAT_DEFINED = 1;
export const DXGI_STANDARD_MULTISAMPLE_QUALITY_PATTERN = 4294967295;
export const DXGI_CENTER_MULTISAMPLE_QUALITY_PATTERN = 4294967294;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 = 0;
export const DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709 = 1;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P709 = 2;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G22_NONE_P2020 = 3;
export const DXGI_COLOR_SPACE_RESERVED = 4;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 = 5;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 = 6;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P601 = 7;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 = 8;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P709 = 9;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 = 10;
export const DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 = 11;
export const DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020 = 12;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_LEFT_P2020 = 13;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G2084_NONE_P2020 = 14;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_TOPLEFT_P2020 = 15;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G2084_TOPLEFT_P2020 = 16;
export const DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P2020 = 17;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_GHLG_TOPLEFT_P2020 = 18;
export const DXGI_COLOR_SPACE_YCBCR_FULL_GHLG_TOPLEFT_P2020 = 19;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P709 = 20;
export const DXGI_COLOR_SPACE_RGB_STUDIO_G24_NONE_P2020 = 21;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P709 = 22;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_LEFT_P2020 = 23;
export const DXGI_COLOR_SPACE_YCBCR_STUDIO_G24_TOPLEFT_P2020 = 24;
export const DXGI_COLOR_SPACE_CUSTOM = `-1`;
export const DXGI_FORMAT_UNKNOWN = 0;
export const DXGI_FORMAT_R32G32B32A32_TYPELESS = 1;
export const DXGI_FORMAT_R32G32B32A32_FLOAT = 2;
export const DXGI_FORMAT_R32G32B32A32_UINT = 3;
export const DXGI_FORMAT_R32G32B32A32_SINT = 4;
export const DXGI_FORMAT_R32G32B32_TYPELESS = 5;
export const DXGI_FORMAT_R32G32B32_FLOAT = 6;
export const DXGI_FORMAT_R32G32B32_UINT = 7;
export const DXGI_FORMAT_R32G32B32_SINT = 8;
export const DXGI_FORMAT_R16G16B16A16_TYPELESS = 9;
export const DXGI_FORMAT_R16G16B16A16_FLOAT = 10;
export const DXGI_FORMAT_R16G16B16A16_UNORM = 11;
export const DXGI_FORMAT_R16G16B16A16_UINT = 12;
export const DXGI_FORMAT_R16G16B16A16_SNORM = 13;
export const DXGI_FORMAT_R16G16B16A16_SINT = 14;
export const DXGI_FORMAT_R32G32_TYPELESS = 15;
export const DXGI_FORMAT_R32G32_FLOAT = 16;
export const DXGI_FORMAT_R32G32_UINT = 17;
export const DXGI_FORMAT_R32G32_SINT = 18;
export const DXGI_FORMAT_R32G8X24_TYPELESS = 19;
export const DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20;
export const DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21;
export const DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22;
export const DXGI_FORMAT_R10G10B10A2_TYPELESS = 23;
export const DXGI_FORMAT_R10G10B10A2_UNORM = 24;
export const DXGI_FORMAT_R10G10B10A2_UINT = 25;
export const DXGI_FORMAT_R11G11B10_FLOAT = 26;
export const DXGI_FORMAT_R8G8B8A8_TYPELESS = 27;
export const DXGI_FORMAT_R8G8B8A8_UNORM = 28;
export const DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29;
export const DXGI_FORMAT_R8G8B8A8_UINT = 30;
export const DXGI_FORMAT_R8G8B8A8_SNORM = 31;
export const DXGI_FORMAT_R8G8B8A8_SINT = 32;
export const DXGI_FORMAT_R16G16_TYPELESS = 33;
export const DXGI_FORMAT_R16G16_FLOAT = 34;
export const DXGI_FORMAT_R16G16_UNORM = 35;
export const DXGI_FORMAT_R16G16_UINT = 36;
export const DXGI_FORMAT_R16G16_SNORM = 37;
export const DXGI_FORMAT_R16G16_SINT = 38;
export const DXGI_FORMAT_R32_TYPELESS = 39;
export const DXGI_FORMAT_D32_FLOAT = 40;
export const DXGI_FORMAT_R32_FLOAT = 41;
export const DXGI_FORMAT_R32_UINT = 42;
export const DXGI_FORMAT_R32_SINT = 43;
export const DXGI_FORMAT_R24G8_TYPELESS = 44;
export const DXGI_FORMAT_D24_UNORM_S8_UINT = 45;
export const DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46;
export const DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47;
export const DXGI_FORMAT_R8G8_TYPELESS = 48;
export const DXGI_FORMAT_R8G8_UNORM = 49;
export const DXGI_FORMAT_R8G8_UINT = 50;
export const DXGI_FORMAT_R8G8_SNORM = 51;
export const DXGI_FORMAT_R8G8_SINT = 52;
export const DXGI_FORMAT_R16_TYPELESS = 53;
export const DXGI_FORMAT_R16_FLOAT = 54;
export const DXGI_FORMAT_D16_UNORM = 55;
export const DXGI_FORMAT_R16_UNORM = 56;
export const DXGI_FORMAT_R16_UINT = 57;
export const DXGI_FORMAT_R16_SNORM = 58;
export const DXGI_FORMAT_R16_SINT = 59;
export const DXGI_FORMAT_R8_TYPELESS = 60;
export const DXGI_FORMAT_R8_UNORM = 61;
export const DXGI_FORMAT_R8_UINT = 62;
export const DXGI_FORMAT_R8_SNORM = 63;
export const DXGI_FORMAT_R8_SINT = 64;
export const DXGI_FORMAT_A8_UNORM = 65;
export const DXGI_FORMAT_R1_UNORM = 66;
export const DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67;
export const DXGI_FORMAT_R8G8_B8G8_UNORM = 68;
export const DXGI_FORMAT_G8R8_G8B8_UNORM = 69;
export const DXGI_FORMAT_BC1_TYPELESS = 70;
export const DXGI_FORMAT_BC1_UNORM = 71;
export const DXGI_FORMAT_BC1_UNORM_SRGB = 72;
export const DXGI_FORMAT_BC2_TYPELESS = 73;
export const DXGI_FORMAT_BC2_UNORM = 74;
export const DXGI_FORMAT_BC2_UNORM_SRGB = 75;
export const DXGI_FORMAT_BC3_TYPELESS = 76;
export const DXGI_FORMAT_BC3_UNORM = 77;
export const DXGI_FORMAT_BC3_UNORM_SRGB = 78;
export const DXGI_FORMAT_BC4_TYPELESS = 79;
export const DXGI_FORMAT_BC4_UNORM = 80;
export const DXGI_FORMAT_BC4_SNORM = 81;
export const DXGI_FORMAT_BC5_TYPELESS = 82;
export const DXGI_FORMAT_BC5_UNORM = 83;
export const DXGI_FORMAT_BC5_SNORM = 84;
export const DXGI_FORMAT_B5G6R5_UNORM = 85;
export const DXGI_FORMAT_B5G5R5A1_UNORM = 86;
export const DXGI_FORMAT_B8G8R8A8_UNORM = 87;
export const DXGI_FORMAT_B8G8R8X8_UNORM = 88;
export const DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89;
export const DXGI_FORMAT_B8G8R8A8_TYPELESS = 90;
export const DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91;
export const DXGI_FORMAT_B8G8R8X8_TYPELESS = 92;
export const DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93;
export const DXGI_FORMAT_BC6H_TYPELESS = 94;
export const DXGI_FORMAT_BC6H_UF16 = 95;
export const DXGI_FORMAT_BC6H_SF16 = 96;
export const DXGI_FORMAT_BC7_TYPELESS = 97;
export const DXGI_FORMAT_BC7_UNORM = 98;
export const DXGI_FORMAT_BC7_UNORM_SRGB = 99;
export const DXGI_FORMAT_AYUV = 100;
export const DXGI_FORMAT_Y410 = 101;
export const DXGI_FORMAT_Y416 = 102;
export const DXGI_FORMAT_NV12 = 103;
export const DXGI_FORMAT_P010 = 104;
export const DXGI_FORMAT_P016 = 105;
export const DXGI_FORMAT_420_OPAQUE = 106;
export const DXGI_FORMAT_YUY2 = 107;
export const DXGI_FORMAT_Y210 = 108;
export const DXGI_FORMAT_Y216 = 109;
export const DXGI_FORMAT_NV11 = 110;
export const DXGI_FORMAT_AI44 = 111;
export const DXGI_FORMAT_IA44 = 112;
export const DXGI_FORMAT_P8 = 113;
export const DXGI_FORMAT_A8P8 = 114;
export const DXGI_FORMAT_B4G4R4A4_UNORM = 115;
export const DXGI_FORMAT_P208 = 130;
export const DXGI_FORMAT_V208 = 131;
export const DXGI_FORMAT_V408 = 132;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190;
export const DXGI_FORMAT_FORCE_UINT = 4294967295;
export const DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED = 0;
export const DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE = 1;
export const DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST = 2;
export const DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST = 3;
export const DXGI_MODE_SCALING_UNSPECIFIED = 0;
export const DXGI_MODE_SCALING_CENTERED = 1;
export const DXGI_MODE_SCALING_STRETCHED = 2;
export const DXGI_MODE_ROTATION_UNSPECIFIED = 0;
export const DXGI_MODE_ROTATION_IDENTITY = 1;
export const DXGI_MODE_ROTATION_ROTATE90 = 2;
export const DXGI_MODE_ROTATION_ROTATE180 = 3;
export const DXGI_MODE_ROTATION_ROTATE270 = 4;
export const DXGI_ALPHA_MODE_UNSPECIFIED = 0;
export const DXGI_ALPHA_MODE_PREMULTIPLIED = 1;
export const DXGI_ALPHA_MODE_STRAIGHT = 2;
export const DXGI_ALPHA_MODE_IGNORE = 3;
export const DXGI_ALPHA_MODE_FORCE_DWORD = 4294967295;

// Structs

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL (size: 8)
 */
export interface DXGI_RATIONAL {
  /** u32 */
  Numerator: number;
  /** u32 */
  Denominator: number;
}

export const sizeofDXGI_RATIONAL = 8;

export function allocDXGI_RATIONAL(data?: Partial<DXGI_RATIONAL>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_RATIONAL);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Numerator !== undefined) view.setUint32(0, Number(data.Numerator), true);
  // 0x04: u32
  if (data?.Denominator !== undefined) view.setUint32(4, Number(data.Denominator), true);
  return buf;
}

export class DXGI_RATIONALView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Numerator(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Denominator(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Numerator(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Denominator(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC (size: 8)
 */
export interface DXGI_SAMPLE_DESC {
  /** u32 */
  Count: number;
  /** u32 */
  Quality: number;
}

export const sizeofDXGI_SAMPLE_DESC = 8;

export function allocDXGI_SAMPLE_DESC(data?: Partial<DXGI_SAMPLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_SAMPLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: u32
  if (data?.Quality !== undefined) view.setUint32(4, Number(data.Quality), true);
  return buf;
}

export class DXGI_SAMPLE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Count(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Quality(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set Count(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Quality(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_RGB (size: 16)
 */
export interface DXGI_RGB {
  /** f32 */
  Red: number;
  /** f32 */
  Green: number;
  /** f32 */
  Blue: number;
}

export const sizeofDXGI_RGB = 16;

export function allocDXGI_RGB(data?: Partial<DXGI_RGB>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_RGB);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Red !== undefined) view.setFloat32(0, Number(data.Red), true);
  // 0x04: f32
  if (data?.Green !== undefined) view.setFloat32(4, Number(data.Green), true);
  // 0x08: f32
  if (data?.Blue !== undefined) view.setFloat32(8, Number(data.Blue), true);
  // 0x0c: pad4
  return buf;
}

export class DXGI_RGBView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: f32
  get Red(): number {
    return this.view.getFloat32(0, true);
  }

  // 0x04: f32
  get Green(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get Blue(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: pad4

  // 0x00: f32
  set Red(value: number) {
    this.view.setFloat32(0, value, true);
  }

  // 0x04: f32
  set Green(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set Blue(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_GAMMA_CONTROL (size: 24)
 */
export interface DXGI_GAMMA_CONTROL {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RGB */
  Scale: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RGB */
  Offset: Uint8Array | Deno.PointerValue | null;
  /** array */
  GammaCurve: Deno.PointerValue | null;
}

export const sizeofDXGI_GAMMA_CONTROL = 24;

export function allocDXGI_GAMMA_CONTROL(data?: Partial<DXGI_GAMMA_CONTROL>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_GAMMA_CONTROL);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Scale !== undefined) view.setBigUint64(0, data.Scale === null ? 0n : BigInt(util.toPointer(data.Scale)), true);
  // 0x08: pointer
  if (data?.Offset !== undefined) view.setBigUint64(8, data.Offset === null ? 0n : BigInt(util.toPointer(data.Offset)), true);
  // 0x10: pointer
  if (data?.GammaCurve !== undefined) view.setBigUint64(16, data.GammaCurve === null ? 0n : BigInt(util.toPointer(data.GammaCurve)), true);
  return buf;
}

export class DXGI_GAMMA_CONTROLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Scale(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get Offset(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: pointer
  get GammaCurve(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Scale(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set Offset(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: pointer
  set GammaCurve(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_GAMMA_CONTROL_CAPABILITIES (size: 24)
 */
export interface DXGI_GAMMA_CONTROL_CAPABILITIES {
  /** Windows.Win32.Foundation.BOOL */
  ScaleAndOffsetSupported: boolean;
  /** f32 */
  MaxConvertedValue: number;
  /** f32 */
  MinConvertedValue: number;
  /** u32 */
  NumGammaControlPoints: number;
  /** array */
  ControlPointPositions: Deno.PointerValue | null;
}

export const sizeofDXGI_GAMMA_CONTROL_CAPABILITIES = 24;

export function allocDXGI_GAMMA_CONTROL_CAPABILITIES(data?: Partial<DXGI_GAMMA_CONTROL_CAPABILITIES>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_GAMMA_CONTROL_CAPABILITIES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ScaleAndOffsetSupported !== undefined) view.setInt32(0, Number(data.ScaleAndOffsetSupported), true);
  // 0x04: f32
  if (data?.MaxConvertedValue !== undefined) view.setFloat32(4, Number(data.MaxConvertedValue), true);
  // 0x08: f32
  if (data?.MinConvertedValue !== undefined) view.setFloat32(8, Number(data.MinConvertedValue), true);
  // 0x0c: u32
  if (data?.NumGammaControlPoints !== undefined) view.setUint32(12, Number(data.NumGammaControlPoints), true);
  // 0x10: pointer
  if (data?.ControlPointPositions !== undefined) view.setBigUint64(16, data.ControlPointPositions === null ? 0n : BigInt(util.toPointer(data.ControlPointPositions)), true);
  return buf;
}

export class DXGI_GAMMA_CONTROL_CAPABILITIESView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ScaleAndOffsetSupported(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: f32
  get MaxConvertedValue(): number {
    return this.view.getFloat32(4, true);
  }

  // 0x08: f32
  get MinConvertedValue(): number {
    return this.view.getFloat32(8, true);
  }

  // 0x0c: u32
  get NumGammaControlPoints(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get ControlPointPositions(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(16, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: i32
  set ScaleAndOffsetSupported(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: f32
  set MaxConvertedValue(value: number) {
    this.view.setFloat32(4, value, true);
  }

  // 0x08: f32
  set MinConvertedValue(value: number) {
    this.view.setFloat32(8, value, true);
  }

  // 0x0c: u32
  set NumGammaControlPoints(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set ControlPointPositions(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(16, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_DESC (size: 32)
 */
export interface DXGI_MODE_DESC {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_RATIONAL */
  RefreshRate: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_SCANLINE_ORDER */
  ScanlineOrdering: DXGI_MODE_SCANLINE_ORDER;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_MODE_SCALING */
  Scaling: DXGI_MODE_SCALING;
}

export const sizeofDXGI_MODE_DESC = 32;

export function allocDXGI_MODE_DESC(data?: Partial<DXGI_MODE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_MODE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: pointer
  if (data?.RefreshRate !== undefined) view.setBigUint64(8, data.RefreshRate === null ? 0n : BigInt(util.toPointer(data.RefreshRate)), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: i32
  if (data?.ScanlineOrdering !== undefined) view.setInt32(20, Number(data.ScanlineOrdering), true);
  // 0x18: i32
  if (data?.Scaling !== undefined) view.setInt32(24, Number(data.Scaling), true);
  // 0x1c: pad4
  return buf;
}

export class DXGI_MODE_DESCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Width(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Height(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get RefreshRate(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x10: u32
  get Format(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: i32
  get ScanlineOrdering(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get Scaling(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set Width(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Height(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set RefreshRate(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }

  // 0x10: u32
  set Format(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: i32
  set ScanlineOrdering(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set Scaling(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_JPEG_DC_HUFFMAN_TABLE (size: 16)
 */
export interface DXGI_JPEG_DC_HUFFMAN_TABLE {
  /** array */
  CodeCounts: Deno.PointerValue | null;
  /** array */
  CodeValues: Deno.PointerValue | null;
}

export const sizeofDXGI_JPEG_DC_HUFFMAN_TABLE = 16;

export function allocDXGI_JPEG_DC_HUFFMAN_TABLE(data?: Partial<DXGI_JPEG_DC_HUFFMAN_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_JPEG_DC_HUFFMAN_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CodeCounts !== undefined) view.setBigUint64(0, data.CodeCounts === null ? 0n : BigInt(util.toPointer(data.CodeCounts)), true);
  // 0x08: pointer
  if (data?.CodeValues !== undefined) view.setBigUint64(8, data.CodeValues === null ? 0n : BigInt(util.toPointer(data.CodeValues)), true);
  return buf;
}

export class DXGI_JPEG_DC_HUFFMAN_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CodeCounts(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get CodeValues(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set CodeCounts(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set CodeValues(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_JPEG_AC_HUFFMAN_TABLE (size: 16)
 */
export interface DXGI_JPEG_AC_HUFFMAN_TABLE {
  /** array */
  CodeCounts: Deno.PointerValue | null;
  /** array */
  CodeValues: Deno.PointerValue | null;
}

export const sizeofDXGI_JPEG_AC_HUFFMAN_TABLE = 16;

export function allocDXGI_JPEG_AC_HUFFMAN_TABLE(data?: Partial<DXGI_JPEG_AC_HUFFMAN_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_JPEG_AC_HUFFMAN_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CodeCounts !== undefined) view.setBigUint64(0, data.CodeCounts === null ? 0n : BigInt(util.toPointer(data.CodeCounts)), true);
  // 0x08: pointer
  if (data?.CodeValues !== undefined) view.setBigUint64(8, data.CodeValues === null ? 0n : BigInt(util.toPointer(data.CodeValues)), true);
  return buf;
}

export class DXGI_JPEG_AC_HUFFMAN_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CodeCounts(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: pointer
  get CodeValues(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set CodeCounts(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: pointer
  set CodeValues(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_JPEG_QUANTIZATION_TABLE (size: 8)
 */
export interface DXGI_JPEG_QUANTIZATION_TABLE {
  /** array */
  Elements: Deno.PointerValue | null;
}

export const sizeofDXGI_JPEG_QUANTIZATION_TABLE = 8;

export function allocDXGI_JPEG_QUANTIZATION_TABLE(data?: Partial<DXGI_JPEG_QUANTIZATION_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_JPEG_QUANTIZATION_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Elements !== undefined) view.setBigUint64(0, data.Elements === null ? 0n : BigInt(util.toPointer(data.Elements)), true);
  return buf;
}

export class DXGI_JPEG_QUANTIZATION_TABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Elements(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: pointer
  set Elements(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }
}

// Native Libraries

// Symbols

