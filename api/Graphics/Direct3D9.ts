/// Auto-generated by Deno Win32: Windows.Win32.Graphics.Direct3D9.Apis

import * as util from "../../util.ts";

// Enums
export type D3DLIGHTTYPE = number;
export type D3DSHADEMODE = number;
export type D3DFILLMODE = number;
export type D3DBLEND = number;
export type D3DBLENDOP = number;
export type D3DTEXTUREADDRESS = number;
export type D3DCULL = number;
export type D3DCMPFUNC = number;
export type D3DSTENCILOP = number;
export type D3DFOGMODE = number;
export type D3DZBUFFERTYPE = number;
export type D3DPRIMITIVETYPE = number;
export type D3DTRANSFORMSTATETYPE = number;
export type D3DRENDERSTATETYPE = number;
export type D3DMATERIALCOLORSOURCE = number;
export type D3DTEXTURESTAGESTATETYPE = number;
export type D3DSAMPLERSTATETYPE = number;
export type D3DTEXTUREOP = number;
export type D3DTEXTUREFILTERTYPE = number;
export type D3DDECLUSAGE = number;
export type D3DDECLMETHOD = number;
export type D3DDECLTYPE = number;
export type D3DSHADER_INSTRUCTION_OPCODE_TYPE = number;
export type D3DSHADER_COMPARISON = number;
export type D3DSAMPLER_TEXTURE_TYPE = number;
export type D3DSHADER_PARAM_REGISTER_TYPE = number;
export type D3DSHADER_MISCTYPE_OFFSETS = number;
export type D3DVS_RASTOUT_OFFSETS = number;
export type D3DVS_ADDRESSMODE_TYPE = number;
export type D3DSHADER_ADDRESSMODE_TYPE = number;
export type D3DSHADER_PARAM_SRCMOD_TYPE = number;
export type D3DSHADER_MIN_PRECISION = number;
export type D3DBASISTYPE = number;
export type D3DDEGREETYPE = number;
export type D3DPATCHEDGESTYLE = number;
export type D3DSTATEBLOCKTYPE = number;
export type D3DVERTEXBLENDFLAGS = number;
export type D3DTEXTURETRANSFORMFLAGS = number;
export type D3DDEVTYPE = number;
export type D3DMULTISAMPLE_TYPE = number;
export type D3DFORMAT = number;
export type D3DSWAPEFFECT = number;
export type D3DPOOL = number;
export type D3DBACKBUFFER_TYPE = number;
export type D3DRESOURCETYPE = number;
export type D3DCUBEMAP_FACES = number;
export type D3DDEBUGMONITORTOKENS = number;
export type D3DQUERYTYPE = number;
export type D3DCOMPOSERECTSOP = number;
export type D3DSCANLINEORDERING = number;
export type D3DDISPLAYROTATION = number;
export type D3DAUTHENTICATEDCHANNELTYPE = number;
export type D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE = number;
export type D3DBUSTYPE = number;

// Constants
export const D3DRTYPECOUNT = 8;
export const D3DCS_LEFT = 1;
export const D3DCS_RIGHT = 2;
export const D3DCS_TOP = 4;
export const D3DCS_BOTTOM = 8;
export const D3DCS_FRONT = 16;
export const D3DCS_BACK = 32;
export const D3DCS_PLANE0 = 64;
export const D3DCS_PLANE1 = 128;
export const D3DCS_PLANE2 = 256;
export const D3DCS_PLANE3 = 512;
export const D3DCS_PLANE4 = 1024;
export const D3DCS_PLANE5 = 2048;
export const D3D_MAX_SIMULTANEOUS_RENDERTARGETS = 4;
export const D3DWRAP_W = 4;
export const D3DDMAPSAMPLER = 256;
export const D3DVERTEXTEXTURESAMPLER0 = 257;
export const D3DVERTEXTEXTURESAMPLER1 = 258;
export const D3DVERTEXTEXTURESAMPLER2 = 259;
export const D3DVERTEXTEXTURESAMPLER3 = 260;
export const D3DTSS_TCI_SPHEREMAP = 262144;
export const D3DTA_TEMP = 5;
export const D3DTA_CONSTANT = 6;
export const D3DFVF_XYZW = 16386;
export const D3DFVF_PSIZE = 32;
export const D3DFVF_LASTBETA_UBYTE4 = 4096;
export const D3DFVF_LASTBETA_D3DCOLOR = 32768;
export const MAXD3DDECLUSAGEINDEX = 15;
export const MAXD3DDECLLENGTH = 64;
export const D3DSTREAMSOURCE_INDEXEDDATA = 1073741824;
export const D3DSTREAMSOURCE_INSTANCEDATA = 2147483648;
export const D3DSI_OPCODE_MASK = 65535;
export const D3DSI_INSTLENGTH_MASK = 251658240;
export const D3DSI_INSTLENGTH_SHIFT = 24;
export const D3DSI_COISSUE = 1073741824;
export const D3DSP_OPCODESPECIFICCONTROL_MASK = 16711680;
export const D3DSP_OPCODESPECIFICCONTROL_SHIFT = 16;
export const D3DSHADER_COMPARISON_SHIFT = 16;
export const D3DSP_DCL_USAGE_SHIFT = 0;
export const D3DSP_DCL_USAGE_MASK = 15;
export const D3DSP_DCL_USAGEINDEX_SHIFT = 16;
export const D3DSP_DCL_USAGEINDEX_MASK = 983040;
export const D3DSP_TEXTURETYPE_SHIFT = 27;
export const D3DSP_TEXTURETYPE_MASK = 2013265920;
export const D3DSP_REGNUM_MASK = 2047;
export const D3DSP_WRITEMASK_0 = 65536;
export const D3DSP_WRITEMASK_1 = 131072;
export const D3DSP_WRITEMASK_2 = 262144;
export const D3DSP_WRITEMASK_3 = 524288;
export const D3DSP_WRITEMASK_ALL = 983040;
export const D3DSP_DSTMOD_SHIFT = 20;
export const D3DSP_DSTMOD_MASK = 15728640;
export const D3DSP_DSTSHIFT_SHIFT = 24;
export const D3DSP_DSTSHIFT_MASK = 251658240;
export const D3DSP_REGTYPE_SHIFT = 28;
export const D3DSP_REGTYPE_SHIFT2 = 8;
export const D3DSP_REGTYPE_MASK = 1879048192;
export const D3DSP_REGTYPE_MASK2 = 6144;
export const D3DVS_ADDRESSMODE_SHIFT = 13;
export const D3DSHADER_ADDRESSMODE_SHIFT = 13;
export const D3DVS_SWIZZLE_SHIFT = 16;
export const D3DVS_SWIZZLE_MASK = 16711680;
export const D3DSP_SWIZZLE_SHIFT = 16;
export const D3DSP_SWIZZLE_MASK = 16711680;
export const D3DSP_SRCMOD_SHIFT = 24;
export const D3DSP_SRCMOD_MASK = 251658240;
export const D3DSP_MIN_PRECISION_SHIFT = 14;
export const D3DSP_MIN_PRECISION_MASK = 49152;
export const D3DSI_COMMENTSIZE_SHIFT = 16;
export const D3DSI_COMMENTSIZE_MASK = 2147418112;
export const D3DPRESENT_RATE_DEFAULT = 0;
export const D3DPRESENTFLAG_LOCKABLE_BACKBUFFER = 1;
export const D3DPRESENTFLAG_DISCARD_DEPTHSTENCIL = 2;
export const D3DPRESENTFLAG_DEVICECLIP = 4;
export const D3DPRESENTFLAG_VIDEO = 16;
export const D3DPRESENTFLAG_NOAUTOROTATE = 32;
export const D3DPRESENTFLAG_UNPRUNEDMODE = 64;
export const D3DPRESENTFLAG_OVERLAY_LIMITEDRGB = 128;
export const D3DPRESENTFLAG_OVERLAY_YCbCr_BT709 = 256;
export const D3DPRESENTFLAG_OVERLAY_YCbCr_xvYCC = 512;
export const D3DPRESENTFLAG_RESTRICTED_CONTENT = 1024;
export const D3DPRESENTFLAG_RESTRICT_SHARED_RESOURCE_DRIVER = 2048;
export const D3DUSAGE_RENDERTARGET = 1;
export const D3DUSAGE_DEPTHSTENCIL = 2;
export const D3DUSAGE_DYNAMIC = 512;
export const D3DUSAGE_NONSECURE = 8388608;
export const D3DUSAGE_AUTOGENMIPMAP = 1024;
export const D3DUSAGE_DMAP = 16384;
export const D3DUSAGE_QUERY_LEGACYBUMPMAP = 32768;
export const D3DUSAGE_QUERY_SRGBREAD = 65536;
export const D3DUSAGE_QUERY_FILTER = 131072;
export const D3DUSAGE_QUERY_SRGBWRITE = 262144;
export const D3DUSAGE_QUERY_POSTPIXELSHADER_BLENDING = 524288;
export const D3DUSAGE_QUERY_VERTEXTEXTURE = 1048576;
export const D3DUSAGE_QUERY_WRAPANDMIP = 2097152;
export const D3DUSAGE_WRITEONLY = 8;
export const D3DUSAGE_SOFTWAREPROCESSING = 16;
export const D3DUSAGE_DONOTCLIP = 32;
export const D3DUSAGE_POINTS = 64;
export const D3DUSAGE_RTPATCHES = 128;
export const D3DUSAGE_NPATCHES = 256;
export const D3DUSAGE_TEXTAPI = 268435456;
export const D3DUSAGE_RESTRICTED_CONTENT = 2048;
export const D3DUSAGE_RESTRICT_SHARED_RESOURCE = 8192;
export const D3DUSAGE_RESTRICT_SHARED_RESOURCE_DRIVER = 4096;
export const D3DLOCK_READONLY = 16;
export const D3DLOCK_DISCARD = 8192;
export const D3DLOCK_NOOVERWRITE = 4096;
export const D3DLOCK_NOSYSLOCK = 2048;
export const D3DLOCK_DONOTWAIT = 16384;
export const D3DLOCK_NO_DIRTY_UPDATE = 32768;
export const MAX_DEVICE_IDENTIFIER_STRING = 512;
export const D3DISSUE_END = 1;
export const D3DISSUE_BEGIN = 2;
export const D3DGETDATA_FLUSH = 1;
export const D3DCOMPOSERECTS_MAXNUMRECTS = 65535;
export const D3DCONVOLUTIONMONO_MAXWIDTH = 7;
export const D3DCONVOLUTIONMONO_MAXHEIGHT = 7;
export const D3DFMT_A1_SURFACE_MAXWIDTH = 8192;
export const D3DFMT_A1_SURFACE_MAXHEIGHT = 2048;
export const D3D9_RESOURCE_PRIORITY_MINIMUM = 671088640;
export const D3D9_RESOURCE_PRIORITY_LOW = 1342177280;
export const D3D9_RESOURCE_PRIORITY_NORMAL = 2013265920;
export const D3D9_RESOURCE_PRIORITY_HIGH = 2684354560;
export const D3D9_RESOURCE_PRIORITY_MAXIMUM = 3355443200;
export const D3D_OMAC_SIZE = 16;
export const D3DVS20CAPS_PREDICATION = 1;
export const D3DVS20_MAX_DYNAMICFLOWCONTROLDEPTH = 24;
export const D3DVS20_MIN_DYNAMICFLOWCONTROLDEPTH = 0;
export const D3DVS20_MAX_NUMTEMPS = 32;
export const D3DVS20_MIN_NUMTEMPS = 12;
export const D3DVS20_MAX_STATICFLOWCONTROLDEPTH = 4;
export const D3DVS20_MIN_STATICFLOWCONTROLDEPTH = 1;
export const D3DPS20CAPS_ARBITRARYSWIZZLE = 1;
export const D3DPS20CAPS_GRADIENTINSTRUCTIONS = 2;
export const D3DPS20CAPS_PREDICATION = 4;
export const D3DPS20CAPS_NODEPENDENTREADLIMIT = 8;
export const D3DPS20CAPS_NOTEXINSTRUCTIONLIMIT = 16;
export const D3DPS20_MAX_DYNAMICFLOWCONTROLDEPTH = 24;
export const D3DPS20_MIN_DYNAMICFLOWCONTROLDEPTH = 0;
export const D3DPS20_MAX_NUMTEMPS = 32;
export const D3DPS20_MIN_NUMTEMPS = 12;
export const D3DPS20_MAX_STATICFLOWCONTROLDEPTH = 4;
export const D3DPS20_MIN_STATICFLOWCONTROLDEPTH = 0;
export const D3DPS20_MAX_NUMINSTRUCTIONSLOTS = 512;
export const D3DPS20_MIN_NUMINSTRUCTIONSLOTS = 96;
export const D3DMIN30SHADERINSTRUCTIONS = 512;
export const D3DMAX30SHADERINSTRUCTIONS = 32768;
export const D3DOVERLAYCAPS_FULLRANGERGB = 1;
export const D3DOVERLAYCAPS_LIMITEDRANGERGB = 2;
export const D3DOVERLAYCAPS_YCbCr_BT601 = 4;
export const D3DOVERLAYCAPS_YCbCr_BT709 = 8;
export const D3DOVERLAYCAPS_YCbCr_BT601_xvYCC = 16;
export const D3DOVERLAYCAPS_YCbCr_BT709_xvYCC = 32;
export const D3DOVERLAYCAPS_STRETCHX = 64;
export const D3DOVERLAYCAPS_STRETCHY = 128;
export const D3DCPCAPS_SOFTWARE = 1;
export const D3DCPCAPS_HARDWARE = 2;
export const D3DCPCAPS_PROTECTIONALWAYSON = 4;
export const D3DCPCAPS_PARTIALDECRYPTION = 8;
export const D3DCPCAPS_CONTENTKEY = 16;
export const D3DCPCAPS_FRESHENSESSIONKEY = 32;
export const D3DCPCAPS_ENCRYPTEDREADBACK = 64;
export const D3DCPCAPS_ENCRYPTEDREADBACKKEY = 128;
export const D3DCPCAPS_SEQUENTIAL_CTR_IV = 256;
export const D3DCPCAPS_ENCRYPTSLICEDATAONLY = 512;
export const D3DCAPS_OVERLAY = 2048;
export const D3DCAPS_READ_SCANLINE = 131072;
export const D3DCAPS2_FULLSCREENGAMMA = 131072;
export const D3DCAPS2_CANCALIBRATEGAMMA = 1048576;
export const D3DCAPS2_RESERVED = 33554432;
export const D3DCAPS2_CANMANAGERESOURCE = 268435456;
export const D3DCAPS2_DYNAMICTEXTURES = 536870912;
export const D3DCAPS2_CANAUTOGENMIPMAP = 1073741824;
export const D3DCAPS2_CANSHARERESOURCE = `-2147483648`;
export const D3DCAPS3_RESERVED = `-2147483617`;
export const D3DCAPS3_ALPHA_FULLSCREEN_FLIP_OR_DISCARD = 32;
export const D3DCAPS3_LINEAR_TO_SRGB_PRESENTATION = 128;
export const D3DCAPS3_COPY_TO_VIDMEM = 256;
export const D3DCAPS3_COPY_TO_SYSTEMMEM = 512;
export const D3DCAPS3_DXVAHD = 1024;
export const D3DCAPS3_DXVAHD_LIMITED = 2048;
export const D3DPRESENT_INTERVAL_DEFAULT = 0;
export const D3DPRESENT_INTERVAL_ONE = 1;
export const D3DPRESENT_INTERVAL_TWO = 2;
export const D3DPRESENT_INTERVAL_THREE = 4;
export const D3DPRESENT_INTERVAL_FOUR = 8;
export const D3DPRESENT_INTERVAL_IMMEDIATE = `-2147483648`;
export const D3DCURSORCAPS_COLOR = 1;
export const D3DCURSORCAPS_LOWRES = 2;
export const D3DDEVCAPS_PUREDEVICE = 1048576;
export const D3DDEVCAPS_QUINTICRTPATCHES = 2097152;
export const D3DDEVCAPS_RTPATCHES = 4194304;
export const D3DDEVCAPS_RTPATCHHANDLEZERO = 8388608;
export const D3DDEVCAPS_NPATCHES = 16777216;
export const D3DPMISCCAPS_COLORWRITEENABLE = 128;
export const D3DPMISCCAPS_CLIPPLANESCALEDPOINTS = 256;
export const D3DPMISCCAPS_CLIPTLVERTS = 512;
export const D3DPMISCCAPS_TSSARGTEMP = 1024;
export const D3DPMISCCAPS_BLENDOP = 2048;
export const D3DPMISCCAPS_NULLREFERENCE = 4096;
export const D3DPMISCCAPS_INDEPENDENTWRITEMASKS = 16384;
export const D3DPMISCCAPS_PERSTAGECONSTANT = 32768;
export const D3DPMISCCAPS_FOGANDSPECULARALPHA = 65536;
export const D3DPMISCCAPS_SEPARATEALPHABLEND = 131072;
export const D3DPMISCCAPS_MRTINDEPENDENTBITDEPTHS = 262144;
export const D3DPMISCCAPS_MRTPOSTPIXELSHADERBLENDING = 524288;
export const D3DPMISCCAPS_FOGVERTEXCLAMPED = 1048576;
export const D3DPMISCCAPS_POSTBLENDSRGBCONVERT = 2097152;
export const D3DLINECAPS_TEXTURE = 1;
export const D3DLINECAPS_ZTEST = 2;
export const D3DLINECAPS_BLEND = 4;
export const D3DLINECAPS_ALPHACMP = 8;
export const D3DLINECAPS_FOG = 16;
export const D3DLINECAPS_ANTIALIAS = 32;
export const D3DPRASTERCAPS_COLORPERSPECTIVE = 4194304;
export const D3DPRASTERCAPS_SCISSORTEST = 16777216;
export const D3DPRASTERCAPS_SLOPESCALEDEPTHBIAS = 33554432;
export const D3DPRASTERCAPS_DEPTHBIAS = 67108864;
export const D3DPRASTERCAPS_MULTISAMPLE_TOGGLE = 134217728;
export const D3DPBLENDCAPS_BLENDFACTOR = 8192;
export const D3DPBLENDCAPS_SRCCOLOR2 = 16384;
export const D3DPBLENDCAPS_INVSRCCOLOR2 = 32768;
export const D3DPTEXTURECAPS_VOLUMEMAP = 8192;
export const D3DPTEXTURECAPS_MIPMAP = 16384;
export const D3DPTEXTURECAPS_MIPVOLUMEMAP = 32768;
export const D3DPTEXTURECAPS_MIPCUBEMAP = 65536;
export const D3DPTEXTURECAPS_CUBEMAP_POW2 = 131072;
export const D3DPTEXTURECAPS_VOLUMEMAP_POW2 = 262144;
export const D3DPTEXTURECAPS_NOPROJECTEDBUMPENV = 2097152;
export const D3DPTFILTERCAPS_MINFPYRAMIDALQUAD = 2048;
export const D3DPTFILTERCAPS_MINFGAUSSIANQUAD = 4096;
export const D3DPTFILTERCAPS_CONVOLUTIONMONO = 262144;
export const D3DPTFILTERCAPS_MAGFPYRAMIDALQUAD = 134217728;
export const D3DPTFILTERCAPS_MAGFGAUSSIANQUAD = 268435456;
export const D3DPTADDRESSCAPS_MIRRORONCE = 32;
export const D3DSTENCILCAPS_TWOSIDED = 256;
export const D3DTEXOPCAPS_MULTIPLYADD = 16777216;
export const D3DTEXOPCAPS_LERP = 33554432;
export const D3DFVFCAPS_PSIZE = 1048576;
export const D3DVTXPCAPS_TWEENING = 64;
export const D3DVTXPCAPS_TEXGEN_SPHEREMAP = 256;
export const D3DVTXPCAPS_NO_TEXGEN_NONLOCALVIEWER = 512;
export const D3DDEVCAPS2_STREAMOFFSET = 1;
export const D3DDEVCAPS2_DMAPNPATCH = 2;
export const D3DDEVCAPS2_ADAPTIVETESSRTPATCH = 4;
export const D3DDEVCAPS2_ADAPTIVETESSNPATCH = 8;
export const D3DDEVCAPS2_CAN_STRETCHRECT_FROM_TEXTURES = 16;
export const D3DDEVCAPS2_PRESAMPLEDDMAPNPATCH = 32;
export const D3DDEVCAPS2_VERTEXELEMENTSCANSHARESTREAMOFFSET = 64;
export const D3DDTCAPS_UBYTE4 = 1;
export const D3DDTCAPS_UBYTE4N = 2;
export const D3DDTCAPS_SHORT2N = 4;
export const D3DDTCAPS_SHORT4N = 8;
export const D3DDTCAPS_USHORT2N = 16;
export const D3DDTCAPS_USHORT4N = 32;
export const D3DDTCAPS_UDEC3 = 64;
export const D3DDTCAPS_DEC3N = 128;
export const D3DDTCAPS_FLOAT16_2 = 256;
export const D3DDTCAPS_FLOAT16_4 = 512;
export const D3DSPD_IUNKNOWN = 1;
export const D3DCREATE_FPU_PRESERVE = 2;
export const D3DCREATE_MULTITHREADED = 4;
export const D3DCREATE_PUREDEVICE = 16;
export const D3DCREATE_SOFTWARE_VERTEXPROCESSING = 32;
export const D3DCREATE_HARDWARE_VERTEXPROCESSING = 64;
export const D3DCREATE_MIXED_VERTEXPROCESSING = 128;
export const D3DCREATE_DISABLE_DRIVER_MANAGEMENT = 256;
export const D3DCREATE_ADAPTERGROUP_DEVICE = 512;
export const D3DADAPTER_DEFAULT = 0;
export const D3DENUM_NO_DRIVERVERSION = 4;
export const D3DPRESENT_BACK_BUFFERS_MAX = 3;
export const D3DSGR_NO_CALIBRATION = 0;
export const D3DSGR_CALIBRATE = 1;
export const D3DCURSOR_IMMEDIATE_UPDATE = 1;
export const D3DPRESENT_DONOTWAIT = 1;
export const D3DPRESENT_LINEAR_CONTENT = 2;
export const _FACD3D = 2166;
export const D3D_SDK_VERSION = 32;
export const D3D9b_SDK_VERSION = 31;
export const D3DCREATE_DISABLE_DRIVER_MANAGEMENT_EX = 1024;
export const D3DCREATE_NOWINDOWCHANGES = 2048;
export const D3DCREATE_DISABLE_PSGP_THREADING = 8192;
export const D3DCREATE_ENABLE_PRESENTSTATS = 16384;
export const D3DCREATE_DISABLE_PRINTSCREEN = 32768;
export const D3DCREATE_SCREENSAVER = 268435456;
export const D3DENUM_WHQL_LEVEL = 2;
export const D3DPRESENT_BACK_BUFFERS_MAX_EX = 30;
export const D3DPRESENT_DONOTFLIP = 4;
export const D3DPRESENT_FLIPRESTART = 8;
export const D3DPRESENT_VIDEO_RESTRICT_TO_MONITOR = 16;
export const D3DPRESENT_UPDATEOVERLAYONLY = 32;
export const D3DPRESENT_HIDEOVERLAY = 64;
export const D3DPRESENT_UPDATECOLORKEY = 128;
export const D3DPRESENT_FORCEIMMEDIATE = 256;
export const MAX_D3D9ON12_QUEUES = 2;
export const D3DLIGHT_POINT = 1;
export const D3DLIGHT_SPOT = 2;
export const D3DLIGHT_DIRECTIONAL = 3;
export const D3DLIGHT_FORCE_DWORD = 2147483647;
export const D3DSHADE_FLAT = 1;
export const D3DSHADE_GOURAUD = 2;
export const D3DSHADE_PHONG = 3;
export const D3DSHADE_FORCE_DWORD = 2147483647;
export const D3DFILL_POINT = 1;
export const D3DFILL_WIREFRAME = 2;
export const D3DFILL_SOLID = 3;
export const D3DFILL_FORCE_DWORD = 2147483647;
export const D3DBLEND_ZERO = 1;
export const D3DBLEND_ONE = 2;
export const D3DBLEND_SRCCOLOR = 3;
export const D3DBLEND_INVSRCCOLOR = 4;
export const D3DBLEND_SRCALPHA = 5;
export const D3DBLEND_INVSRCALPHA = 6;
export const D3DBLEND_DESTALPHA = 7;
export const D3DBLEND_INVDESTALPHA = 8;
export const D3DBLEND_DESTCOLOR = 9;
export const D3DBLEND_INVDESTCOLOR = 10;
export const D3DBLEND_SRCALPHASAT = 11;
export const D3DBLEND_BOTHSRCALPHA = 12;
export const D3DBLEND_BOTHINVSRCALPHA = 13;
export const D3DBLEND_BLENDFACTOR = 14;
export const D3DBLEND_INVBLENDFACTOR = 15;
export const D3DBLEND_SRCCOLOR2 = 16;
export const D3DBLEND_INVSRCCOLOR2 = 17;
export const D3DBLEND_FORCE_DWORD = 2147483647;
export const D3DBLENDOP_ADD = 1;
export const D3DBLENDOP_SUBTRACT = 2;
export const D3DBLENDOP_REVSUBTRACT = 3;
export const D3DBLENDOP_MIN = 4;
export const D3DBLENDOP_MAX = 5;
export const D3DBLENDOP_FORCE_DWORD = 2147483647;
export const D3DTADDRESS_WRAP = 1;
export const D3DTADDRESS_MIRROR = 2;
export const D3DTADDRESS_CLAMP = 3;
export const D3DTADDRESS_BORDER = 4;
export const D3DTADDRESS_MIRRORONCE = 5;
export const D3DTADDRESS_FORCE_DWORD = 2147483647;
export const D3DCULL_NONE = 1;
export const D3DCULL_CW = 2;
export const D3DCULL_CCW = 3;
export const D3DCULL_FORCE_DWORD = 2147483647;
export const D3DCMP_NEVER = 1;
export const D3DCMP_LESS = 2;
export const D3DCMP_EQUAL = 3;
export const D3DCMP_LESSEQUAL = 4;
export const D3DCMP_GREATER = 5;
export const D3DCMP_NOTEQUAL = 6;
export const D3DCMP_GREATEREQUAL = 7;
export const D3DCMP_ALWAYS = 8;
export const D3DCMP_FORCE_DWORD = 2147483647;
export const D3DSTENCILOP_KEEP = 1;
export const D3DSTENCILOP_ZERO = 2;
export const D3DSTENCILOP_REPLACE = 3;
export const D3DSTENCILOP_INCRSAT = 4;
export const D3DSTENCILOP_DECRSAT = 5;
export const D3DSTENCILOP_INVERT = 6;
export const D3DSTENCILOP_INCR = 7;
export const D3DSTENCILOP_DECR = 8;
export const D3DSTENCILOP_FORCE_DWORD = 2147483647;
export const D3DFOG_NONE = 0;
export const D3DFOG_EXP = 1;
export const D3DFOG_EXP2 = 2;
export const D3DFOG_LINEAR = 3;
export const D3DFOG_FORCE_DWORD = 2147483647;
export const D3DZB_FALSE = 0;
export const D3DZB_TRUE = 1;
export const D3DZB_USEW = 2;
export const D3DZB_FORCE_DWORD = 2147483647;
export const D3DPT_POINTLIST = 1;
export const D3DPT_LINELIST = 2;
export const D3DPT_LINESTRIP = 3;
export const D3DPT_TRIANGLELIST = 4;
export const D3DPT_TRIANGLESTRIP = 5;
export const D3DPT_TRIANGLEFAN = 6;
export const D3DPT_FORCE_DWORD = 2147483647;
export const D3DTS_VIEW = 2;
export const D3DTS_PROJECTION = 3;
export const D3DTS_TEXTURE0 = 16;
export const D3DTS_TEXTURE1 = 17;
export const D3DTS_TEXTURE2 = 18;
export const D3DTS_TEXTURE3 = 19;
export const D3DTS_TEXTURE4 = 20;
export const D3DTS_TEXTURE5 = 21;
export const D3DTS_TEXTURE6 = 22;
export const D3DTS_TEXTURE7 = 23;
export const D3DTS_FORCE_DWORD = 2147483647;
export const D3DTS_WORLD = 256;
export const D3DTS_WORLD1 = 257;
export const D3DTS_WORLD2 = 258;
export const D3DTS_WORLD3 = 259;
export const D3DRS_ZENABLE = 7;
export const D3DRS_FILLMODE = 8;
export const D3DRS_SHADEMODE = 9;
export const D3DRS_ZWRITEENABLE = 14;
export const D3DRS_ALPHATESTENABLE = 15;
export const D3DRS_LASTPIXEL = 16;
export const D3DRS_SRCBLEND = 19;
export const D3DRS_DESTBLEND = 20;
export const D3DRS_CULLMODE = 22;
export const D3DRS_ZFUNC = 23;
export const D3DRS_ALPHAREF = 24;
export const D3DRS_ALPHAFUNC = 25;
export const D3DRS_DITHERENABLE = 26;
export const D3DRS_ALPHABLENDENABLE = 27;
export const D3DRS_FOGENABLE = 28;
export const D3DRS_SPECULARENABLE = 29;
export const D3DRS_FOGCOLOR = 34;
export const D3DRS_FOGTABLEMODE = 35;
export const D3DRS_FOGSTART = 36;
export const D3DRS_FOGEND = 37;
export const D3DRS_FOGDENSITY = 38;
export const D3DRS_RANGEFOGENABLE = 48;
export const D3DRS_STENCILENABLE = 52;
export const D3DRS_STENCILFAIL = 53;
export const D3DRS_STENCILZFAIL = 54;
export const D3DRS_STENCILPASS = 55;
export const D3DRS_STENCILFUNC = 56;
export const D3DRS_STENCILREF = 57;
export const D3DRS_STENCILMASK = 58;
export const D3DRS_STENCILWRITEMASK = 59;
export const D3DRS_TEXTUREFACTOR = 60;
export const D3DRS_WRAP0 = 128;
export const D3DRS_WRAP1 = 129;
export const D3DRS_WRAP2 = 130;
export const D3DRS_WRAP3 = 131;
export const D3DRS_WRAP4 = 132;
export const D3DRS_WRAP5 = 133;
export const D3DRS_WRAP6 = 134;
export const D3DRS_WRAP7 = 135;
export const D3DRS_CLIPPING = 136;
export const D3DRS_LIGHTING = 137;
export const D3DRS_AMBIENT = 139;
export const D3DRS_FOGVERTEXMODE = 140;
export const D3DRS_COLORVERTEX = 141;
export const D3DRS_LOCALVIEWER = 142;
export const D3DRS_NORMALIZENORMALS = 143;
export const D3DRS_DIFFUSEMATERIALSOURCE = 145;
export const D3DRS_SPECULARMATERIALSOURCE = 146;
export const D3DRS_AMBIENTMATERIALSOURCE = 147;
export const D3DRS_EMISSIVEMATERIALSOURCE = 148;
export const D3DRS_VERTEXBLEND = 151;
export const D3DRS_CLIPPLANEENABLE = 152;
export const D3DRS_POINTSIZE = 154;
export const D3DRS_POINTSIZE_MIN = 155;
export const D3DRS_POINTSPRITEENABLE = 156;
export const D3DRS_POINTSCALEENABLE = 157;
export const D3DRS_POINTSCALE_A = 158;
export const D3DRS_POINTSCALE_B = 159;
export const D3DRS_POINTSCALE_C = 160;
export const D3DRS_MULTISAMPLEANTIALIAS = 161;
export const D3DRS_MULTISAMPLEMASK = 162;
export const D3DRS_PATCHEDGESTYLE = 163;
export const D3DRS_DEBUGMONITORTOKEN = 165;
export const D3DRS_POINTSIZE_MAX = 166;
export const D3DRS_INDEXEDVERTEXBLENDENABLE = 167;
export const D3DRS_COLORWRITEENABLE = 168;
export const D3DRS_TWEENFACTOR = 170;
export const D3DRS_BLENDOP = 171;
export const D3DRS_POSITIONDEGREE = 172;
export const D3DRS_NORMALDEGREE = 173;
export const D3DRS_SCISSORTESTENABLE = 174;
export const D3DRS_SLOPESCALEDEPTHBIAS = 175;
export const D3DRS_ANTIALIASEDLINEENABLE = 176;
export const D3DRS_MINTESSELLATIONLEVEL = 178;
export const D3DRS_MAXTESSELLATIONLEVEL = 179;
export const D3DRS_ADAPTIVETESS_X = 180;
export const D3DRS_ADAPTIVETESS_Y = 181;
export const D3DRS_ADAPTIVETESS_Z = 182;
export const D3DRS_ADAPTIVETESS_W = 183;
export const D3DRS_ENABLEADAPTIVETESSELLATION = 184;
export const D3DRS_TWOSIDEDSTENCILMODE = 185;
export const D3DRS_CCW_STENCILFAIL = 186;
export const D3DRS_CCW_STENCILZFAIL = 187;
export const D3DRS_CCW_STENCILPASS = 188;
export const D3DRS_CCW_STENCILFUNC = 189;
export const D3DRS_COLORWRITEENABLE1 = 190;
export const D3DRS_COLORWRITEENABLE2 = 191;
export const D3DRS_COLORWRITEENABLE3 = 192;
export const D3DRS_BLENDFACTOR = 193;
export const D3DRS_SRGBWRITEENABLE = 194;
export const D3DRS_DEPTHBIAS = 195;
export const D3DRS_WRAP8 = 198;
export const D3DRS_WRAP9 = 199;
export const D3DRS_WRAP10 = 200;
export const D3DRS_WRAP11 = 201;
export const D3DRS_WRAP12 = 202;
export const D3DRS_WRAP13 = 203;
export const D3DRS_WRAP14 = 204;
export const D3DRS_WRAP15 = 205;
export const D3DRS_SEPARATEALPHABLENDENABLE = 206;
export const D3DRS_SRCBLENDALPHA = 207;
export const D3DRS_DESTBLENDALPHA = 208;
export const D3DRS_BLENDOPALPHA = 209;
export const D3DRS_FORCE_DWORD = 2147483647;
export const D3DMCS_MATERIAL = 0;
export const D3DMCS_COLOR1 = 1;
export const D3DMCS_COLOR2 = 2;
export const D3DMCS_FORCE_DWORD = 2147483647;
export const D3DTSS_COLOROP = 1;
export const D3DTSS_COLORARG1 = 2;
export const D3DTSS_COLORARG2 = 3;
export const D3DTSS_ALPHAOP = 4;
export const D3DTSS_ALPHAARG1 = 5;
export const D3DTSS_ALPHAARG2 = 6;
export const D3DTSS_BUMPENVMAT00 = 7;
export const D3DTSS_BUMPENVMAT01 = 8;
export const D3DTSS_BUMPENVMAT10 = 9;
export const D3DTSS_BUMPENVMAT11 = 10;
export const D3DTSS_TEXCOORDINDEX = 11;
export const D3DTSS_BUMPENVLSCALE = 22;
export const D3DTSS_BUMPENVLOFFSET = 23;
export const D3DTSS_TEXTURETRANSFORMFLAGS = 24;
export const D3DTSS_COLORARG0 = 26;
export const D3DTSS_ALPHAARG0 = 27;
export const D3DTSS_RESULTARG = 28;
export const D3DTSS_CONSTANT = 32;
export const D3DTSS_FORCE_DWORD = 2147483647;
export const D3DSAMP_ADDRESSU = 1;
export const D3DSAMP_ADDRESSV = 2;
export const D3DSAMP_ADDRESSW = 3;
export const D3DSAMP_BORDERCOLOR = 4;
export const D3DSAMP_MAGFILTER = 5;
export const D3DSAMP_MINFILTER = 6;
export const D3DSAMP_MIPFILTER = 7;
export const D3DSAMP_MIPMAPLODBIAS = 8;
export const D3DSAMP_MAXMIPLEVEL = 9;
export const D3DSAMP_MAXANISOTROPY = 10;
export const D3DSAMP_SRGBTEXTURE = 11;
export const D3DSAMP_ELEMENTINDEX = 12;
export const D3DSAMP_DMAPOFFSET = 13;
export const D3DSAMP_FORCE_DWORD = 2147483647;
export const D3DTOP_DISABLE = 1;
export const D3DTOP_SELECTARG1 = 2;
export const D3DTOP_SELECTARG2 = 3;
export const D3DTOP_MODULATE = 4;
export const D3DTOP_MODULATE2X = 5;
export const D3DTOP_MODULATE4X = 6;
export const D3DTOP_ADD = 7;
export const D3DTOP_ADDSIGNED = 8;
export const D3DTOP_ADDSIGNED2X = 9;
export const D3DTOP_SUBTRACT = 10;
export const D3DTOP_ADDSMOOTH = 11;
export const D3DTOP_BLENDDIFFUSEALPHA = 12;
export const D3DTOP_BLENDTEXTUREALPHA = 13;
export const D3DTOP_BLENDFACTORALPHA = 14;
export const D3DTOP_BLENDTEXTUREALPHAPM = 15;
export const D3DTOP_BLENDCURRENTALPHA = 16;
export const D3DTOP_PREMODULATE = 17;
export const D3DTOP_MODULATEALPHA_ADDCOLOR = 18;
export const D3DTOP_MODULATECOLOR_ADDALPHA = 19;
export const D3DTOP_MODULATEINVALPHA_ADDCOLOR = 20;
export const D3DTOP_MODULATEINVCOLOR_ADDALPHA = 21;
export const D3DTOP_BUMPENVMAP = 22;
export const D3DTOP_BUMPENVMAPLUMINANCE = 23;
export const D3DTOP_DOTPRODUCT3 = 24;
export const D3DTOP_MULTIPLYADD = 25;
export const D3DTOP_LERP = 26;
export const D3DTOP_FORCE_DWORD = 2147483647;
export const D3DTEXF_NONE = 0;
export const D3DTEXF_POINT = 1;
export const D3DTEXF_LINEAR = 2;
export const D3DTEXF_ANISOTROPIC = 3;
export const D3DTEXF_PYRAMIDALQUAD = 6;
export const D3DTEXF_GAUSSIANQUAD = 7;
export const D3DTEXF_CONVOLUTIONMONO = 8;
export const D3DTEXF_FORCE_DWORD = 2147483647;
export const D3DDECLUSAGE_POSITION = 0;
export const D3DDECLUSAGE_BLENDWEIGHT = 1;
export const D3DDECLUSAGE_BLENDINDICES = 2;
export const D3DDECLUSAGE_NORMAL = 3;
export const D3DDECLUSAGE_PSIZE = 4;
export const D3DDECLUSAGE_TEXCOORD = 5;
export const D3DDECLUSAGE_TANGENT = 6;
export const D3DDECLUSAGE_BINORMAL = 7;
export const D3DDECLUSAGE_TESSFACTOR = 8;
export const D3DDECLUSAGE_POSITIONT = 9;
export const D3DDECLUSAGE_COLOR = 10;
export const D3DDECLUSAGE_FOG = 11;
export const D3DDECLUSAGE_DEPTH = 12;
export const D3DDECLUSAGE_SAMPLE = 13;
export const D3DDECLMETHOD_DEFAULT = 0;
export const D3DDECLMETHOD_PARTIALU = 1;
export const D3DDECLMETHOD_PARTIALV = 2;
export const D3DDECLMETHOD_CROSSUV = 3;
export const D3DDECLMETHOD_UV = 4;
export const D3DDECLMETHOD_LOOKUP = 5;
export const D3DDECLMETHOD_LOOKUPPRESAMPLED = 6;
export const D3DDECLTYPE_FLOAT1 = 0;
export const D3DDECLTYPE_FLOAT2 = 1;
export const D3DDECLTYPE_FLOAT3 = 2;
export const D3DDECLTYPE_FLOAT4 = 3;
export const D3DDECLTYPE_D3DCOLOR = 4;
export const D3DDECLTYPE_UBYTE4 = 5;
export const D3DDECLTYPE_SHORT2 = 6;
export const D3DDECLTYPE_SHORT4 = 7;
export const D3DDECLTYPE_UBYTE4N = 8;
export const D3DDECLTYPE_SHORT2N = 9;
export const D3DDECLTYPE_SHORT4N = 10;
export const D3DDECLTYPE_USHORT2N = 11;
export const D3DDECLTYPE_USHORT4N = 12;
export const D3DDECLTYPE_UDEC3 = 13;
export const D3DDECLTYPE_DEC3N = 14;
export const D3DDECLTYPE_FLOAT16_2 = 15;
export const D3DDECLTYPE_FLOAT16_4 = 16;
export const D3DDECLTYPE_UNUSED = 17;
export const D3DSIO_NOP = 0;
export const D3DSIO_MOV = 1;
export const D3DSIO_ADD = 2;
export const D3DSIO_SUB = 3;
export const D3DSIO_MAD = 4;
export const D3DSIO_MUL = 5;
export const D3DSIO_RCP = 6;
export const D3DSIO_RSQ = 7;
export const D3DSIO_DP3 = 8;
export const D3DSIO_DP4 = 9;
export const D3DSIO_MIN = 10;
export const D3DSIO_MAX = 11;
export const D3DSIO_SLT = 12;
export const D3DSIO_SGE = 13;
export const D3DSIO_EXP = 14;
export const D3DSIO_LOG = 15;
export const D3DSIO_LIT = 16;
export const D3DSIO_DST = 17;
export const D3DSIO_LRP = 18;
export const D3DSIO_FRC = 19;
export const D3DSIO_M4x4 = 20;
export const D3DSIO_M4x3 = 21;
export const D3DSIO_M3x4 = 22;
export const D3DSIO_M3x3 = 23;
export const D3DSIO_M3x2 = 24;
export const D3DSIO_CALL = 25;
export const D3DSIO_CALLNZ = 26;
export const D3DSIO_LOOP = 27;
export const D3DSIO_RET = 28;
export const D3DSIO_ENDLOOP = 29;
export const D3DSIO_LABEL = 30;
export const D3DSIO_DCL = 31;
export const D3DSIO_POW = 32;
export const D3DSIO_CRS = 33;
export const D3DSIO_SGN = 34;
export const D3DSIO_ABS = 35;
export const D3DSIO_NRM = 36;
export const D3DSIO_SINCOS = 37;
export const D3DSIO_REP = 38;
export const D3DSIO_ENDREP = 39;
export const D3DSIO_IF = 40;
export const D3DSIO_IFC = 41;
export const D3DSIO_ELSE = 42;
export const D3DSIO_ENDIF = 43;
export const D3DSIO_BREAK = 44;
export const D3DSIO_BREAKC = 45;
export const D3DSIO_MOVA = 46;
export const D3DSIO_DEFB = 47;
export const D3DSIO_DEFI = 48;
export const D3DSIO_TEXCOORD = 64;
export const D3DSIO_TEXKILL = 65;
export const D3DSIO_TEX = 66;
export const D3DSIO_TEXBEM = 67;
export const D3DSIO_TEXBEML = 68;
export const D3DSIO_TEXREG2AR = 69;
export const D3DSIO_TEXREG2GB = 70;
export const D3DSIO_TEXM3x2PAD = 71;
export const D3DSIO_TEXM3x2TEX = 72;
export const D3DSIO_TEXM3x3PAD = 73;
export const D3DSIO_TEXM3x3TEX = 74;
export const D3DSIO_RESERVED0 = 75;
export const D3DSIO_TEXM3x3SPEC = 76;
export const D3DSIO_TEXM3x3VSPEC = 77;
export const D3DSIO_EXPP = 78;
export const D3DSIO_LOGP = 79;
export const D3DSIO_CND = 80;
export const D3DSIO_DEF = 81;
export const D3DSIO_TEXREG2RGB = 82;
export const D3DSIO_TEXDP3TEX = 83;
export const D3DSIO_TEXM3x2DEPTH = 84;
export const D3DSIO_TEXDP3 = 85;
export const D3DSIO_TEXM3x3 = 86;
export const D3DSIO_TEXDEPTH = 87;
export const D3DSIO_CMP = 88;
export const D3DSIO_BEM = 89;
export const D3DSIO_DP2ADD = 90;
export const D3DSIO_DSX = 91;
export const D3DSIO_DSY = 92;
export const D3DSIO_TEXLDD = 93;
export const D3DSIO_SETP = 94;
export const D3DSIO_TEXLDL = 95;
export const D3DSIO_BREAKP = 96;
export const D3DSIO_PHASE = 65533;
export const D3DSIO_COMMENT = 65534;
export const D3DSIO_END = 65535;
export const D3DSIO_FORCE_DWORD = 2147483647;
export const D3DSPC_RESERVED0 = 0;
export const D3DSPC_GT = 1;
export const D3DSPC_EQ = 2;
export const D3DSPC_GE = 3;
export const D3DSPC_LT = 4;
export const D3DSPC_NE = 5;
export const D3DSPC_LE = 6;
export const D3DSPC_RESERVED1 = 7;
export const D3DSTT_UNKNOWN = 0;
export const D3DSTT_2D = 268435456;
export const D3DSTT_CUBE = 402653184;
export const D3DSTT_VOLUME = 536870912;
export const D3DSTT_FORCE_DWORD = 2147483647;
export const D3DSPR_TEMP = 0;
export const D3DSPR_INPUT = 1;
export const D3DSPR_CONST = 2;
export const D3DSPR_ADDR = 3;
export const D3DSPR_TEXTURE = 3;
export const D3DSPR_RASTOUT = 4;
export const D3DSPR_ATTROUT = 5;
export const D3DSPR_TEXCRDOUT = 6;
export const D3DSPR_OUTPUT = 6;
export const D3DSPR_CONSTINT = 7;
export const D3DSPR_COLOROUT = 8;
export const D3DSPR_DEPTHOUT = 9;
export const D3DSPR_SAMPLER = 10;
export const D3DSPR_CONST2 = 11;
export const D3DSPR_CONST3 = 12;
export const D3DSPR_CONST4 = 13;
export const D3DSPR_CONSTBOOL = 14;
export const D3DSPR_LOOP = 15;
export const D3DSPR_TEMPFLOAT16 = 16;
export const D3DSPR_MISCTYPE = 17;
export const D3DSPR_LABEL = 18;
export const D3DSPR_PREDICATE = 19;
export const D3DSPR_FORCE_DWORD = 2147483647;
export const D3DSMO_POSITION = 0;
export const D3DSMO_FACE = 1;
export const D3DSRO_POSITION = 0;
export const D3DSRO_FOG = 1;
export const D3DSRO_POINT_SIZE = 2;
export const D3DSRO_FORCE_DWORD = 2147483647;
export const D3DVS_ADDRMODE_ABSOLUTE = 0;
export const D3DVS_ADDRMODE_RELATIVE = 8192;
export const D3DVS_ADDRMODE_FORCE_DWORD = 2147483647;
export const D3DSHADER_ADDRMODE_ABSOLUTE = 0;
export const D3DSHADER_ADDRMODE_RELATIVE = 8192;
export const D3DSHADER_ADDRMODE_FORCE_DWORD = 2147483647;
export const D3DSPSM_NONE = 0;
export const D3DSPSM_NEG = 16777216;
export const D3DSPSM_BIAS = 33554432;
export const D3DSPSM_BIASNEG = 50331648;
export const D3DSPSM_SIGN = 67108864;
export const D3DSPSM_SIGNNEG = 83886080;
export const D3DSPSM_COMP = 100663296;
export const D3DSPSM_X2 = 117440512;
export const D3DSPSM_X2NEG = 134217728;
export const D3DSPSM_DZ = 150994944;
export const D3DSPSM_DW = 167772160;
export const D3DSPSM_ABS = 184549376;
export const D3DSPSM_ABSNEG = 201326592;
export const D3DSPSM_NOT = 218103808;
export const D3DSPSM_FORCE_DWORD = 2147483647;
export const D3DMP_DEFAULT = 0;
export const D3DMP_16 = 1;
export const D3DMP_2_8 = 2;
export const D3DBASIS_BEZIER = 0;
export const D3DBASIS_BSPLINE = 1;
export const D3DBASIS_CATMULL_ROM = 2;
export const D3DBASIS_FORCE_DWORD = 2147483647;
export const D3DDEGREE_LINEAR = 1;
export const D3DDEGREE_QUADRATIC = 2;
export const D3DDEGREE_CUBIC = 3;
export const D3DDEGREE_QUINTIC = 5;
export const D3DDEGREE_FORCE_DWORD = 2147483647;
export const D3DPATCHEDGE_DISCRETE = 0;
export const D3DPATCHEDGE_CONTINUOUS = 1;
export const D3DPATCHEDGE_FORCE_DWORD = 2147483647;
export const D3DSBT_ALL = 1;
export const D3DSBT_PIXELSTATE = 2;
export const D3DSBT_VERTEXSTATE = 3;
export const D3DSBT_FORCE_DWORD = 2147483647;
export const D3DVBF_DISABLE = 0;
export const D3DVBF_1WEIGHTS = 1;
export const D3DVBF_2WEIGHTS = 2;
export const D3DVBF_3WEIGHTS = 3;
export const D3DVBF_TWEENING = 255;
export const D3DVBF_0WEIGHTS = 256;
export const D3DVBF_FORCE_DWORD = 2147483647;
export const D3DTTFF_DISABLE = 0;
export const D3DTTFF_COUNT1 = 1;
export const D3DTTFF_COUNT2 = 2;
export const D3DTTFF_COUNT3 = 3;
export const D3DTTFF_COUNT4 = 4;
export const D3DTTFF_PROJECTED = 256;
export const D3DTTFF_FORCE_DWORD = 2147483647;
export const D3DDEVTYPE_HAL = 1;
export const D3DDEVTYPE_REF = 2;
export const D3DDEVTYPE_SW = 3;
export const D3DDEVTYPE_NULLREF = 4;
export const D3DDEVTYPE_FORCE_DWORD = 2147483647;
export const D3DMULTISAMPLE_NONE = 0;
export const D3DMULTISAMPLE_NONMASKABLE = 1;
export const D3DMULTISAMPLE_2_SAMPLES = 2;
export const D3DMULTISAMPLE_3_SAMPLES = 3;
export const D3DMULTISAMPLE_4_SAMPLES = 4;
export const D3DMULTISAMPLE_5_SAMPLES = 5;
export const D3DMULTISAMPLE_6_SAMPLES = 6;
export const D3DMULTISAMPLE_7_SAMPLES = 7;
export const D3DMULTISAMPLE_8_SAMPLES = 8;
export const D3DMULTISAMPLE_9_SAMPLES = 9;
export const D3DMULTISAMPLE_10_SAMPLES = 10;
export const D3DMULTISAMPLE_11_SAMPLES = 11;
export const D3DMULTISAMPLE_12_SAMPLES = 12;
export const D3DMULTISAMPLE_13_SAMPLES = 13;
export const D3DMULTISAMPLE_14_SAMPLES = 14;
export const D3DMULTISAMPLE_15_SAMPLES = 15;
export const D3DMULTISAMPLE_16_SAMPLES = 16;
export const D3DMULTISAMPLE_FORCE_DWORD = 2147483647;
export const D3DFMT_UNKNOWN = 0;
export const D3DFMT_R8G8B8 = 20;
export const D3DFMT_A8R8G8B8 = 21;
export const D3DFMT_X8R8G8B8 = 22;
export const D3DFMT_R5G6B5 = 23;
export const D3DFMT_X1R5G5B5 = 24;
export const D3DFMT_A1R5G5B5 = 25;
export const D3DFMT_A4R4G4B4 = 26;
export const D3DFMT_R3G3B2 = 27;
export const D3DFMT_A8 = 28;
export const D3DFMT_A8R3G3B2 = 29;
export const D3DFMT_X4R4G4B4 = 30;
export const D3DFMT_A2B10G10R10 = 31;
export const D3DFMT_A8B8G8R8 = 32;
export const D3DFMT_X8B8G8R8 = 33;
export const D3DFMT_G16R16 = 34;
export const D3DFMT_A2R10G10B10 = 35;
export const D3DFMT_A16B16G16R16 = 36;
export const D3DFMT_A8P8 = 40;
export const D3DFMT_P8 = 41;
export const D3DFMT_L8 = 50;
export const D3DFMT_A8L8 = 51;
export const D3DFMT_A4L4 = 52;
export const D3DFMT_V8U8 = 60;
export const D3DFMT_L6V5U5 = 61;
export const D3DFMT_X8L8V8U8 = 62;
export const D3DFMT_Q8W8V8U8 = 63;
export const D3DFMT_V16U16 = 64;
export const D3DFMT_A2W10V10U10 = 67;
export const D3DFMT_UYVY = 1498831189;
export const D3DFMT_R8G8_B8G8 = 1195525970;
export const D3DFMT_YUY2 = 844715353;
export const D3DFMT_G8R8_G8B8 = 1111970375;
export const D3DFMT_DXT1 = 827611204;
export const D3DFMT_DXT2 = 844388420;
export const D3DFMT_DXT3 = 861165636;
export const D3DFMT_DXT4 = 877942852;
export const D3DFMT_DXT5 = 894720068;
export const D3DFMT_D16_LOCKABLE = 70;
export const D3DFMT_D32 = 71;
export const D3DFMT_D15S1 = 73;
export const D3DFMT_D24S8 = 75;
export const D3DFMT_D24X8 = 77;
export const D3DFMT_D24X4S4 = 79;
export const D3DFMT_D16 = 80;
export const D3DFMT_D32F_LOCKABLE = 82;
export const D3DFMT_D24FS8 = 83;
export const D3DFMT_D32_LOCKABLE = 84;
export const D3DFMT_S8_LOCKABLE = 85;
export const D3DFMT_L16 = 81;
export const D3DFMT_VERTEXDATA = 100;
export const D3DFMT_INDEX16 = 101;
export const D3DFMT_INDEX32 = 102;
export const D3DFMT_Q16W16V16U16 = 110;
export const D3DFMT_MULTI2_ARGB8 = 827606349;
export const D3DFMT_R16F = 111;
export const D3DFMT_G16R16F = 112;
export const D3DFMT_A16B16G16R16F = 113;
export const D3DFMT_R32F = 114;
export const D3DFMT_G32R32F = 115;
export const D3DFMT_A32B32G32R32F = 116;
export const D3DFMT_CxV8U8 = 117;
export const D3DFMT_A1 = 118;
export const D3DFMT_A2B10G10R10_XR_BIAS = 119;
export const D3DFMT_BINARYBUFFER = 199;
export const D3DFMT_FORCE_DWORD = 2147483647;
export const D3DSWAPEFFECT_DISCARD = 1;
export const D3DSWAPEFFECT_FLIP = 2;
export const D3DSWAPEFFECT_COPY = 3;
export const D3DSWAPEFFECT_OVERLAY = 4;
export const D3DSWAPEFFECT_FLIPEX = 5;
export const D3DSWAPEFFECT_FORCE_DWORD = 2147483647;
export const D3DPOOL_DEFAULT = 0;
export const D3DPOOL_MANAGED = 1;
export const D3DPOOL_SYSTEMMEM = 2;
export const D3DPOOL_SCRATCH = 3;
export const D3DPOOL_FORCE_DWORD = 2147483647;
export const D3DBACKBUFFER_TYPE_MONO = 0;
export const D3DBACKBUFFER_TYPE_LEFT = 1;
export const D3DBACKBUFFER_TYPE_RIGHT = 2;
export const D3DBACKBUFFER_TYPE_FORCE_DWORD = 2147483647;
export const D3DRTYPE_SURFACE = 1;
export const D3DRTYPE_VOLUME = 2;
export const D3DRTYPE_TEXTURE = 3;
export const D3DRTYPE_VOLUMETEXTURE = 4;
export const D3DRTYPE_CUBETEXTURE = 5;
export const D3DRTYPE_VERTEXBUFFER = 6;
export const D3DRTYPE_INDEXBUFFER = 7;
export const D3DRTYPE_FORCE_DWORD = 2147483647;
export const D3DCUBEMAP_FACE_POSITIVE_X = 0;
export const D3DCUBEMAP_FACE_NEGATIVE_X = 1;
export const D3DCUBEMAP_FACE_POSITIVE_Y = 2;
export const D3DCUBEMAP_FACE_NEGATIVE_Y = 3;
export const D3DCUBEMAP_FACE_POSITIVE_Z = 4;
export const D3DCUBEMAP_FACE_NEGATIVE_Z = 5;
export const D3DCUBEMAP_FACE_FORCE_DWORD = 2147483647;
export const D3DDMT_ENABLE = 0;
export const D3DDMT_DISABLE = 1;
export const D3DDMT_FORCE_DWORD = 2147483647;
export const D3DQUERYTYPE_VCACHE = 4;
export const D3DQUERYTYPE_RESOURCEMANAGER = 5;
export const D3DQUERYTYPE_VERTEXSTATS = 6;
export const D3DQUERYTYPE_EVENT = 8;
export const D3DQUERYTYPE_OCCLUSION = 9;
export const D3DQUERYTYPE_TIMESTAMP = 10;
export const D3DQUERYTYPE_TIMESTAMPDISJOINT = 11;
export const D3DQUERYTYPE_TIMESTAMPFREQ = 12;
export const D3DQUERYTYPE_PIPELINETIMINGS = 13;
export const D3DQUERYTYPE_INTERFACETIMINGS = 14;
export const D3DQUERYTYPE_VERTEXTIMINGS = 15;
export const D3DQUERYTYPE_PIXELTIMINGS = 16;
export const D3DQUERYTYPE_BANDWIDTHTIMINGS = 17;
export const D3DQUERYTYPE_CACHEUTILIZATION = 18;
export const D3DQUERYTYPE_MEMORYPRESSURE = 19;
export const D3DCOMPOSERECTS_COPY = 1;
export const D3DCOMPOSERECTS_OR = 2;
export const D3DCOMPOSERECTS_AND = 3;
export const D3DCOMPOSERECTS_NEG = 4;
export const D3DCOMPOSERECTS_FORCE_DWORD = 2147483647;
export const D3DSCANLINEORDERING_UNKNOWN = 0;
export const D3DSCANLINEORDERING_PROGRESSIVE = 1;
export const D3DSCANLINEORDERING_INTERLACED = 2;
export const D3DDISPLAYROTATION_IDENTITY = 1;
export const D3DDISPLAYROTATION_90 = 2;
export const D3DDISPLAYROTATION_180 = 3;
export const D3DDISPLAYROTATION_270 = 4;
export const D3DAUTHENTICATEDCHANNEL_D3D9 = 1;
export const D3DAUTHENTICATEDCHANNEL_DRIVER_SOFTWARE = 2;
export const D3DAUTHENTICATEDCHANNEL_DRIVER_HARDWARE = 3;
export const PROCESSIDTYPE_UNKNOWN = 0;
export const PROCESSIDTYPE_DWM = 1;
export const PROCESSIDTYPE_HANDLE = 2;
export const D3DBUSTYPE_OTHER = 0;
export const D3DBUSTYPE_PCI = 1;
export const D3DBUSTYPE_PCIX = 2;
export const D3DBUSTYPE_PCIEXPRESS = 3;
export const D3DBUSTYPE_AGP = 4;
export const D3DBUSIMPL_MODIFIER_INSIDE_OF_CHIPSET = 65536;
export const D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072;
export const D3DBUSIMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608;
export const D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144;
export const D3DBUSIMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680;
export const D3DBUSIMPL_MODIFIER_NON_STANDARD = `-2147483648`;

// Structs

export type BOOL = number;

/**
 * Windows.Win32.Graphics.Direct3D9on12.D3D9ON12_ARGS (size: 32)
 */
export interface D3D9ON12_ARGS {
  /** Windows.Win32.Foundation.BOOL */
  Enable9On12: boolean;
  /** Windows.Win32.System.Com.IUnknown */
  pD3D12Device: Uint8Array | Deno.PointerValue | null;
  /** array */
  ppD3D12Queues: Deno.PointerValue | null;
  /** u32 */
  NumQueues: number;
  /** u32 */
  NodeMask: number;
}

export const sizeofD3D9ON12_ARGS = 32;

export function allocD3D9ON12_ARGS(data?: Partial<D3D9ON12_ARGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D9ON12_ARGS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Enable9On12 !== undefined) view.setInt32(0, Number(data.Enable9On12), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pD3D12Device !== undefined) view.setBigUint64(8, data.pD3D12Device === null ? 0n : BigInt(util.toPointer(data.pD3D12Device)), true);
  // 0x10: pointer
  if (data?.ppD3D12Queues !== undefined) view.setBigUint64(16, data.ppD3D12Queues === null ? 0n : BigInt(util.toPointer(data.ppD3D12Queues)), true);
  // 0x18: u32
  if (data?.NumQueues !== undefined) view.setUint32(24, Number(data.NumQueues), true);
  // 0x1c: u32
  if (data?.NodeMask !== undefined) view.setUint32(28, Number(data.NodeMask), true);
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * _u_e__Struct (size: 16)
 */
export interface _u_e__Struct {
  /** u32 */
  dwValue: number;
  /** Windows.Win32.Foundation.PWSTR */
  pwszName: string | null | Uint8Array | Uint16Array;
}

export const sizeof_u_e__Struct = 16;

export function alloc_u_e__Struct(data?: Partial<_u_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwValue !== undefined) view.setUint32(0, Number(data.dwValue), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pwszName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pwszName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Foundation.LARGE_INTEGER (size: 24)
 */
export interface LARGE_INTEGER {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** _u_e__Struct */
  u: Uint8Array | Deno.PointerValue | null;
  /** i64 */
  QuadPart: Deno.PointerValue;
}

export const sizeofLARGE_INTEGER = 24;

export function allocLARGE_INTEGER(data?: Partial<LARGE_INTEGER>): Uint8Array {
  const buf = new Uint8Array(sizeofLARGE_INTEGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(util.toPointer(data.u)), true);
  // 0x10: i64
  if (data?.QuadPart !== undefined) view.setBigInt64(16, BigInt(data.QuadPart), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DADAPTER_IDENTIFIER9 (size: 64)
 */
export interface D3DADAPTER_IDENTIFIER9 {
  /** array */
  Driver: Deno.PointerValue | null;
  /** array */
  Description: Deno.PointerValue | null;
  /** array */
  DeviceName: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  DriverVersion: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  VendorId: number;
  /** u32 */
  DeviceId: number;
  /** u32 */
  SubSysId: number;
  /** u32 */
  Revision: number;
  /** System.Guid */
  DeviceIdentifier: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  WHQLLevel: number;
}

export const sizeofD3DADAPTER_IDENTIFIER9 = 64;

export function allocD3DADAPTER_IDENTIFIER9(data?: Partial<D3DADAPTER_IDENTIFIER9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DADAPTER_IDENTIFIER9);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Driver !== undefined) view.setBigUint64(0, data.Driver === null ? 0n : BigInt(util.toPointer(data.Driver)), true);
  // 0x08: pointer
  if (data?.Description !== undefined) view.setBigUint64(8, data.Description === null ? 0n : BigInt(util.toPointer(data.Description)), true);
  // 0x10: pointer
  if (data?.DeviceName !== undefined) view.setBigUint64(16, data.DeviceName === null ? 0n : BigInt(util.toPointer(data.DeviceName)), true);
  // 0x18: pointer
  if (data?.DriverVersion !== undefined) view.setBigUint64(24, data.DriverVersion === null ? 0n : BigInt(util.toPointer(data.DriverVersion)), true);
  // 0x20: u32
  if (data?.VendorId !== undefined) view.setUint32(32, Number(data.VendorId), true);
  // 0x24: u32
  if (data?.DeviceId !== undefined) view.setUint32(36, Number(data.DeviceId), true);
  // 0x28: u32
  if (data?.SubSysId !== undefined) view.setUint32(40, Number(data.SubSysId), true);
  // 0x2c: u32
  if (data?.Revision !== undefined) view.setUint32(44, Number(data.Revision), true);
  // 0x30: pointer
  if (data?.DeviceIdentifier !== undefined) view.setBigUint64(48, data.DeviceIdentifier === null ? 0n : BigInt(util.toPointer(data.DeviceIdentifier)), true);
  // 0x38: u32
  if (data?.WHQLLevel !== undefined) view.setUint32(56, Number(data.WHQLLevel), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DMEMORYPRESSURE (size: 24)
 */
export interface D3DMEMORYPRESSURE {
  /** u64 */
  BytesEvictedFromProcess: Deno.PointerValue;
  /** u64 */
  SizeOfInefficientAllocation: Deno.PointerValue;
  /** u32 */
  LevelOfEfficiency: number;
}

export const sizeofD3DMEMORYPRESSURE = 24;

export function allocD3DMEMORYPRESSURE(data?: Partial<D3DMEMORYPRESSURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DMEMORYPRESSURE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BytesEvictedFromProcess !== undefined) view.setBigUint64(0, BigInt(data.BytesEvictedFromProcess), true);
  // 0x08: u64
  if (data?.SizeOfInefficientAllocation !== undefined) view.setBigUint64(8, BigInt(data.SizeOfInefficientAllocation), true);
  // 0x10: u32
  if (data?.LevelOfEfficiency !== undefined) view.setUint32(16, Number(data.LevelOfEfficiency), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DPRESENTSTATS (size: 32)
 */
export interface D3DPRESENTSTATS {
  /** u32 */
  PresentCount: number;
  /** u32 */
  PresentRefreshCount: number;
  /** u32 */
  SyncRefreshCount: number;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SyncQPCTime: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.LARGE_INTEGER */
  SyncGPUTime: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DPRESENTSTATS = 32;

export function allocD3DPRESENTSTATS(data?: Partial<D3DPRESENTSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DPRESENTSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.PresentCount !== undefined) view.setUint32(0, Number(data.PresentCount), true);
  // 0x04: u32
  if (data?.PresentRefreshCount !== undefined) view.setUint32(4, Number(data.PresentRefreshCount), true);
  // 0x08: u32
  if (data?.SyncRefreshCount !== undefined) view.setUint32(8, Number(data.SyncRefreshCount), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.SyncQPCTime !== undefined) view.setBigUint64(16, data.SyncQPCTime === null ? 0n : BigInt(util.toPointer(data.SyncQPCTime)), true);
  // 0x18: pointer
  if (data?.SyncGPUTime !== undefined) view.setBigUint64(24, data.SyncGPUTime === null ? 0n : BigInt(util.toPointer(data.SyncGPUTime)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3D_OMAC (size: 8)
 */
export interface D3D_OMAC {
  /** array */
  Omac: Deno.PointerValue | null;
}

export const sizeofD3D_OMAC = 8;

export function allocD3D_OMAC(data?: Partial<D3D_OMAC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D_OMAC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Omac !== undefined) view.setBigUint64(0, data.Omac === null ? 0n : BigInt(util.toPointer(data.Omac)), true);
  return buf;
}

export type HANDLE = Deno.PointerValue;

export type HRESULT = number;

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT (size: 40)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3D_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  QueryType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
  /** Windows.Win32.Foundation.HRESULT */
  ReturnCode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT = 40;

export function allocD3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : BigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.QueryType !== undefined) view.setBigUint64(8, data.QueryType === null ? 0n : BigInt(util.toPointer(data.QueryType)), true);
  // 0x10: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(16, data.hChannel === null ? 0n : BigInt(util.toPointer(data.hChannel)), true);
  // 0x18: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(24, Number(data.SequenceNumber), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ReturnCode !== undefined) view.setBigUint64(32, data.ReturnCode === null ? 0n : BigInt(util.toPointer(data.ReturnCode)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT (size: 40)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputIDIndex: number;
  /** u64 */
  OutputID: Deno.PointerValue;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT = 40;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : BigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: u32
  if (data?.OutputIDIndex !== undefined) view.setUint32(24, Number(data.OutputIDIndex), true);
  // 0x1c: pad4
  // 0x20: u64
  if (data?.OutputID !== undefined) view.setBigUint64(32, BigInt(data.OutputID), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAES_CTR_IV (size: 16)
 */
export interface D3DAES_CTR_IV {
  /** u64 */
  IV: Deno.PointerValue;
  /** u64 */
  Count: Deno.PointerValue;
}

export const sizeofD3DAES_CTR_IV = 16;

export function allocD3DAES_CTR_IV(data?: Partial<D3DAES_CTR_IV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAES_CTR_IV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IV !== undefined) view.setBigUint64(0, BigInt(data.IV), true);
  // 0x08: u64
  if (data?.Count !== undefined) view.setBigUint64(8, BigInt(data.Count), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE (size: 16)
 */
export interface D3DCOLORVALUE {
  /** f32 */
  r: number;
  /** f32 */
  g: number;
  /** f32 */
  b: number;
  /** f32 */
  a: number;
}

export const sizeofD3DCOLORVALUE = 16;

export function allocD3DCOLORVALUE(data?: Partial<D3DCOLORVALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DCOLORVALUE);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.r !== undefined) view.setFloat32(0, Number(data.r), true);
  // 0x04: f32
  if (data?.g !== undefined) view.setFloat32(4, Number(data.g), true);
  // 0x08: f32
  if (data?.b !== undefined) view.setFloat32(8, Number(data.b), true);
  // 0x0c: f32
  if (data?.a !== undefined) view.setFloat32(12, Number(data.a), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DRECT (size: 16)
 */
export interface D3DRECT {
  /** i32 */
  x1: number;
  /** i32 */
  y1: number;
  /** i32 */
  x2: number;
  /** i32 */
  y2: number;
}

export const sizeofD3DRECT = 16;

export function allocD3DRECT(data?: Partial<D3DRECT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x1 !== undefined) view.setInt32(0, Number(data.x1), true);
  // 0x04: i32
  if (data?.y1 !== undefined) view.setInt32(4, Number(data.y1), true);
  // 0x08: i32
  if (data?.x2 !== undefined) view.setInt32(8, Number(data.x2), true);
  // 0x0c: i32
  if (data?.y2 !== undefined) view.setInt32(12, Number(data.y2), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DVIEWPORT9 (size: 24)
 */
export interface D3DVIEWPORT9 {
  /** u32 */
  X: number;
  /** u32 */
  Y: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** f32 */
  MinZ: number;
  /** f32 */
  MaxZ: number;
}

export const sizeofD3DVIEWPORT9 = 24;

export function allocD3DVIEWPORT9(data?: Partial<D3DVIEWPORT9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVIEWPORT9);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.X !== undefined) view.setUint32(0, Number(data.X), true);
  // 0x04: u32
  if (data?.Y !== undefined) view.setUint32(4, Number(data.Y), true);
  // 0x08: u32
  if (data?.Width !== undefined) view.setUint32(8, Number(data.Width), true);
  // 0x0c: u32
  if (data?.Height !== undefined) view.setUint32(12, Number(data.Height), true);
  // 0x10: f32
  if (data?.MinZ !== undefined) view.setFloat32(16, Number(data.MinZ), true);
  // 0x14: f32
  if (data?.MaxZ !== undefined) view.setFloat32(20, Number(data.MaxZ), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DCLIPSTATUS9 (size: 8)
 */
export interface D3DCLIPSTATUS9 {
  /** u32 */
  ClipUnion: number;
  /** u32 */
  ClipIntersection: number;
}

export const sizeofD3DCLIPSTATUS9 = 8;

export function allocD3DCLIPSTATUS9(data?: Partial<D3DCLIPSTATUS9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DCLIPSTATUS9);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ClipUnion !== undefined) view.setUint32(0, Number(data.ClipUnion), true);
  // 0x04: u32
  if (data?.ClipIntersection !== undefined) view.setUint32(4, Number(data.ClipIntersection), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DMATERIAL9 (size: 40)
 */
export interface D3DMATERIAL9 {
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Diffuse: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Ambient: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Specular: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Emissive: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  Power: number;
}

export const sizeofD3DMATERIAL9 = 40;

export function allocD3DMATERIAL9(data?: Partial<D3DMATERIAL9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DMATERIAL9);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Diffuse !== undefined) view.setBigUint64(0, data.Diffuse === null ? 0n : BigInt(util.toPointer(data.Diffuse)), true);
  // 0x08: pointer
  if (data?.Ambient !== undefined) view.setBigUint64(8, data.Ambient === null ? 0n : BigInt(util.toPointer(data.Ambient)), true);
  // 0x10: pointer
  if (data?.Specular !== undefined) view.setBigUint64(16, data.Specular === null ? 0n : BigInt(util.toPointer(data.Specular)), true);
  // 0x18: pointer
  if (data?.Emissive !== undefined) view.setBigUint64(24, data.Emissive === null ? 0n : BigInt(util.toPointer(data.Emissive)), true);
  // 0x20: f32
  if (data?.Power !== undefined) view.setFloat32(32, Number(data.Power), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D.D3DVECTOR (size: 16)
 */
export interface D3DVECTOR {
  /** f32 */
  x: number;
  /** f32 */
  y: number;
  /** f32 */
  z: number;
}

export const sizeofD3DVECTOR = 16;

export function allocD3DVECTOR(data?: Partial<D3DVECTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVECTOR);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.x !== undefined) view.setFloat32(0, Number(data.x), true);
  // 0x04: f32
  if (data?.y !== undefined) view.setFloat32(4, Number(data.y), true);
  // 0x08: f32
  if (data?.z !== undefined) view.setFloat32(8, Number(data.z), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DLIGHT9 (size: 80)
 */
export interface D3DLIGHT9 {
  /** Windows.Win32.Graphics.Direct3D9.D3DLIGHTTYPE */
  Type: D3DLIGHTTYPE;
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Diffuse: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Specular: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DCOLORVALUE */
  Ambient: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  Position: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D.D3DVECTOR */
  Direction: Uint8Array | Deno.PointerValue | null;
  /** f32 */
  Range: number;
  /** f32 */
  Falloff: number;
  /** f32 */
  Attenuation0: number;
  /** f32 */
  Attenuation1: number;
  /** f32 */
  Attenuation2: number;
  /** f32 */
  Theta: number;
  /** f32 */
  Phi: number;
}

export const sizeofD3DLIGHT9 = 80;

export function allocD3DLIGHT9(data?: Partial<D3DLIGHT9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DLIGHT9);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Diffuse !== undefined) view.setBigUint64(8, data.Diffuse === null ? 0n : BigInt(util.toPointer(data.Diffuse)), true);
  // 0x10: pointer
  if (data?.Specular !== undefined) view.setBigUint64(16, data.Specular === null ? 0n : BigInt(util.toPointer(data.Specular)), true);
  // 0x18: pointer
  if (data?.Ambient !== undefined) view.setBigUint64(24, data.Ambient === null ? 0n : BigInt(util.toPointer(data.Ambient)), true);
  // 0x20: pointer
  if (data?.Position !== undefined) view.setBigUint64(32, data.Position === null ? 0n : BigInt(util.toPointer(data.Position)), true);
  // 0x28: pointer
  if (data?.Direction !== undefined) view.setBigUint64(40, data.Direction === null ? 0n : BigInt(util.toPointer(data.Direction)), true);
  // 0x30: f32
  if (data?.Range !== undefined) view.setFloat32(48, Number(data.Range), true);
  // 0x34: f32
  if (data?.Falloff !== undefined) view.setFloat32(52, Number(data.Falloff), true);
  // 0x38: f32
  if (data?.Attenuation0 !== undefined) view.setFloat32(56, Number(data.Attenuation0), true);
  // 0x3c: f32
  if (data?.Attenuation1 !== undefined) view.setFloat32(60, Number(data.Attenuation1), true);
  // 0x40: f32
  if (data?.Attenuation2 !== undefined) view.setFloat32(64, Number(data.Attenuation2), true);
  // 0x44: f32
  if (data?.Theta !== undefined) view.setFloat32(68, Number(data.Theta), true);
  // 0x48: f32
  if (data?.Phi !== undefined) view.setFloat32(72, Number(data.Phi), true);
  // 0x4c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DVERTEXELEMENT9 (size: 8)
 */
export interface D3DVERTEXELEMENT9 {
  /** u16 */
  Stream: number;
  /** u16 */
  Offset: number;
  /** u8 */
  Type: number;
  /** u8 */
  Method: number;
  /** u8 */
  Usage: number;
  /** u8 */
  UsageIndex: number;
}

export const sizeofD3DVERTEXELEMENT9 = 8;

export function allocD3DVERTEXELEMENT9(data?: Partial<D3DVERTEXELEMENT9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVERTEXELEMENT9);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Stream !== undefined) view.setUint16(0, Number(data.Stream), true);
  // 0x02: u16
  if (data?.Offset !== undefined) view.setUint16(2, Number(data.Offset), true);
  // 0x04: u8
  if (data?.Type !== undefined) view.setUint8(4, Number(data.Type));
  // 0x05: u8
  if (data?.Method !== undefined) view.setUint8(5, Number(data.Method));
  // 0x06: u8
  if (data?.Usage !== undefined) view.setUint8(6, Number(data.Usage));
  // 0x07: u8
  if (data?.UsageIndex !== undefined) view.setUint8(7, Number(data.UsageIndex));
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDISPLAYMODE (size: 16)
 */
export interface D3DDISPLAYMODE {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  RefreshRate: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
}

export const sizeofD3DDISPLAYMODE = 16;

export function allocD3DDISPLAYMODE(data?: Partial<D3DDISPLAYMODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDISPLAYMODE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.RefreshRate !== undefined) view.setUint32(8, Number(data.RefreshRate), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  return buf;
}

export type HWND = Deno.PointerValue;

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVICE_CREATION_PARAMETERS (size: 24)
 */
export interface D3DDEVICE_CREATION_PARAMETERS {
  /** u32 */
  AdapterOrdinal: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DDEVTYPE */
  DeviceType: D3DDEVTYPE;
  /** Windows.Win32.Foundation.HWND */
  hFocusWindow: Deno.PointerValue | null;
  /** u32 */
  BehaviorFlags: number;
}

export const sizeofD3DDEVICE_CREATION_PARAMETERS = 24;

export function allocD3DDEVICE_CREATION_PARAMETERS(data?: Partial<D3DDEVICE_CREATION_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVICE_CREATION_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.AdapterOrdinal !== undefined) view.setUint32(0, Number(data.AdapterOrdinal), true);
  // 0x04: u32
  if (data?.DeviceType !== undefined) view.setUint32(4, Number(data.DeviceType), true);
  // 0x08: pointer
  if (data?.hFocusWindow !== undefined) view.setBigUint64(8, data.hFocusWindow === null ? 0n : BigInt(util.toPointer(data.hFocusWindow)), true);
  // 0x10: u32
  if (data?.BehaviorFlags !== undefined) view.setUint32(16, Number(data.BehaviorFlags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DPRESENT_PARAMETERS (size: 64)
 */
export interface D3DPRESENT_PARAMETERS {
  /** u32 */
  BackBufferWidth: number;
  /** u32 */
  BackBufferHeight: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  BackBufferFormat: D3DFORMAT;
  /** u32 */
  BackBufferCount: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DMULTISAMPLE_TYPE */
  MultiSampleType: D3DMULTISAMPLE_TYPE;
  /** u32 */
  MultiSampleQuality: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DSWAPEFFECT */
  SwapEffect: D3DSWAPEFFECT;
  /** Windows.Win32.Foundation.HWND */
  hDeviceWindow: Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  Windowed: boolean;
  /** Windows.Win32.Foundation.BOOL */
  EnableAutoDepthStencil: boolean;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  AutoDepthStencilFormat: D3DFORMAT;
  /** u32 */
  Flags: number;
  /** u32 */
  FullScreen_RefreshRateInHz: number;
  /** u32 */
  PresentationInterval: number;
}

export const sizeofD3DPRESENT_PARAMETERS = 64;

export function allocD3DPRESENT_PARAMETERS(data?: Partial<D3DPRESENT_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DPRESENT_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BackBufferWidth !== undefined) view.setUint32(0, Number(data.BackBufferWidth), true);
  // 0x04: u32
  if (data?.BackBufferHeight !== undefined) view.setUint32(4, Number(data.BackBufferHeight), true);
  // 0x08: u32
  if (data?.BackBufferFormat !== undefined) view.setUint32(8, Number(data.BackBufferFormat), true);
  // 0x0c: u32
  if (data?.BackBufferCount !== undefined) view.setUint32(12, Number(data.BackBufferCount), true);
  // 0x10: i32
  if (data?.MultiSampleType !== undefined) view.setInt32(16, Number(data.MultiSampleType), true);
  // 0x14: u32
  if (data?.MultiSampleQuality !== undefined) view.setUint32(20, Number(data.MultiSampleQuality), true);
  // 0x18: u32
  if (data?.SwapEffect !== undefined) view.setUint32(24, Number(data.SwapEffect), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.hDeviceWindow !== undefined) view.setBigUint64(32, data.hDeviceWindow === null ? 0n : BigInt(util.toPointer(data.hDeviceWindow)), true);
  // 0x28: i32
  if (data?.Windowed !== undefined) view.setInt32(40, Number(data.Windowed), true);
  // 0x2c: i32
  if (data?.EnableAutoDepthStencil !== undefined) view.setInt32(44, Number(data.EnableAutoDepthStencil), true);
  // 0x30: u32
  if (data?.AutoDepthStencilFormat !== undefined) view.setUint32(48, Number(data.AutoDepthStencilFormat), true);
  // 0x34: u32
  if (data?.Flags !== undefined) view.setUint32(52, Number(data.Flags), true);
  // 0x38: u32
  if (data?.FullScreen_RefreshRateInHz !== undefined) view.setUint32(56, Number(data.FullScreen_RefreshRateInHz), true);
  // 0x3c: u32
  if (data?.PresentationInterval !== undefined) view.setUint32(60, Number(data.PresentationInterval), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DGAMMARAMP (size: 24)
 */
export interface D3DGAMMARAMP {
  /** array */
  red: Deno.PointerValue | null;
  /** array */
  green: Deno.PointerValue | null;
  /** array */
  blue: Deno.PointerValue | null;
}

export const sizeofD3DGAMMARAMP = 24;

export function allocD3DGAMMARAMP(data?: Partial<D3DGAMMARAMP>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DGAMMARAMP);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.red !== undefined) view.setBigUint64(0, data.red === null ? 0n : BigInt(util.toPointer(data.red)), true);
  // 0x08: pointer
  if (data?.green !== undefined) view.setBigUint64(8, data.green === null ? 0n : BigInt(util.toPointer(data.green)), true);
  // 0x10: pointer
  if (data?.blue !== undefined) view.setBigUint64(16, data.blue === null ? 0n : BigInt(util.toPointer(data.blue)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DVERTEXBUFFER_DESC (size: 24)
 */
export interface D3DVERTEXBUFFER_DESC {
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DRESOURCETYPE */
  Type: D3DRESOURCETYPE;
  /** u32 */
  Usage: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  Pool: D3DPOOL;
  /** u32 */
  Size: number;
  /** u32 */
  FVF: number;
}

export const sizeofD3DVERTEXBUFFER_DESC = 24;

export function allocD3DVERTEXBUFFER_DESC(data?: Partial<D3DVERTEXBUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVERTEXBUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Usage !== undefined) view.setUint32(8, Number(data.Usage), true);
  // 0x0c: u32
  if (data?.Pool !== undefined) view.setUint32(12, Number(data.Pool), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: u32
  if (data?.FVF !== undefined) view.setUint32(20, Number(data.FVF), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DINDEXBUFFER_DESC (size: 24)
 */
export interface D3DINDEXBUFFER_DESC {
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DRESOURCETYPE */
  Type: D3DRESOURCETYPE;
  /** u32 */
  Usage: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  Pool: D3DPOOL;
  /** u32 */
  Size: number;
}

export const sizeofD3DINDEXBUFFER_DESC = 24;

export function allocD3DINDEXBUFFER_DESC(data?: Partial<D3DINDEXBUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DINDEXBUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Usage !== undefined) view.setUint32(8, Number(data.Usage), true);
  // 0x0c: u32
  if (data?.Pool !== undefined) view.setUint32(12, Number(data.Pool), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DSURFACE_DESC (size: 32)
 */
export interface D3DSURFACE_DESC {
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DRESOURCETYPE */
  Type: D3DRESOURCETYPE;
  /** u32 */
  Usage: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  Pool: D3DPOOL;
  /** Windows.Win32.Graphics.Direct3D9.D3DMULTISAMPLE_TYPE */
  MultiSampleType: D3DMULTISAMPLE_TYPE;
  /** u32 */
  MultiSampleQuality: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
}

export const sizeofD3DSURFACE_DESC = 32;

export function allocD3DSURFACE_DESC(data?: Partial<D3DSURFACE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DSURFACE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Usage !== undefined) view.setUint32(8, Number(data.Usage), true);
  // 0x0c: u32
  if (data?.Pool !== undefined) view.setUint32(12, Number(data.Pool), true);
  // 0x10: i32
  if (data?.MultiSampleType !== undefined) view.setInt32(16, Number(data.MultiSampleType), true);
  // 0x14: u32
  if (data?.MultiSampleQuality !== undefined) view.setUint32(20, Number(data.MultiSampleQuality), true);
  // 0x18: u32
  if (data?.Width !== undefined) view.setUint32(24, Number(data.Width), true);
  // 0x1c: u32
  if (data?.Height !== undefined) view.setUint32(28, Number(data.Height), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DVOLUME_DESC (size: 32)
 */
export interface D3DVOLUME_DESC {
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DRESOURCETYPE */
  Type: D3DRESOURCETYPE;
  /** u32 */
  Usage: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DPOOL */
  Pool: D3DPOOL;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
}

export const sizeofD3DVOLUME_DESC = 32;

export function allocD3DVOLUME_DESC(data?: Partial<D3DVOLUME_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVOLUME_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Usage !== undefined) view.setUint32(8, Number(data.Usage), true);
  // 0x0c: u32
  if (data?.Pool !== undefined) view.setUint32(12, Number(data.Pool), true);
  // 0x10: u32
  if (data?.Width !== undefined) view.setUint32(16, Number(data.Width), true);
  // 0x14: u32
  if (data?.Height !== undefined) view.setUint32(20, Number(data.Height), true);
  // 0x18: u32
  if (data?.Depth !== undefined) view.setUint32(24, Number(data.Depth), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DLOCKED_RECT (size: 16)
 */
export interface D3DLOCKED_RECT {
  /** i32 */
  Pitch: number;
  /** ptr */
  pBits: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3DLOCKED_RECT = 16;

export function allocD3DLOCKED_RECT(data?: Partial<D3DLOCKED_RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DLOCKED_RECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Pitch !== undefined) view.setInt32(0, Number(data.Pitch), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pBits !== undefined) view.setBigUint64(8, data.pBits === null ? 0n : BigInt(util.toPointer(data.pBits)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DBOX (size: 24)
 */
export interface D3DBOX {
  /** u32 */
  Left: number;
  /** u32 */
  Top: number;
  /** u32 */
  Right: number;
  /** u32 */
  Bottom: number;
  /** u32 */
  Front: number;
  /** u32 */
  Back: number;
}

export const sizeofD3DBOX = 24;

export function allocD3DBOX(data?: Partial<D3DBOX>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DBOX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Left !== undefined) view.setUint32(0, Number(data.Left), true);
  // 0x04: u32
  if (data?.Top !== undefined) view.setUint32(4, Number(data.Top), true);
  // 0x08: u32
  if (data?.Right !== undefined) view.setUint32(8, Number(data.Right), true);
  // 0x0c: u32
  if (data?.Bottom !== undefined) view.setUint32(12, Number(data.Bottom), true);
  // 0x10: u32
  if (data?.Front !== undefined) view.setUint32(16, Number(data.Front), true);
  // 0x14: u32
  if (data?.Back !== undefined) view.setUint32(20, Number(data.Back), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DLOCKED_BOX (size: 16)
 */
export interface D3DLOCKED_BOX {
  /** i32 */
  RowPitch: number;
  /** i32 */
  SlicePitch: number;
  /** ptr */
  pBits: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3DLOCKED_BOX = 16;

export function allocD3DLOCKED_BOX(data?: Partial<D3DLOCKED_BOX>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DLOCKED_BOX);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.RowPitch !== undefined) view.setInt32(0, Number(data.RowPitch), true);
  // 0x04: i32
  if (data?.SlicePitch !== undefined) view.setInt32(4, Number(data.SlicePitch), true);
  // 0x08: pointer
  if (data?.pBits !== undefined) view.setBigUint64(8, data.pBits === null ? 0n : BigInt(util.toPointer(data.pBits)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DRANGE (size: 8)
 */
export interface D3DRANGE {
  /** u32 */
  Offset: number;
  /** u32 */
  Size: number;
}

export const sizeofD3DRANGE = 8;

export function allocD3DRANGE(data?: Partial<D3DRANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DRANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Offset !== undefined) view.setUint32(0, Number(data.Offset), true);
  // 0x04: u32
  if (data?.Size !== undefined) view.setUint32(4, Number(data.Size), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DRECTPATCH_INFO (size: 32)
 */
export interface D3DRECTPATCH_INFO {
  /** u32 */
  StartVertexOffsetWidth: number;
  /** u32 */
  StartVertexOffsetHeight: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Stride: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DBASISTYPE */
  Basis: D3DBASISTYPE;
  /** Windows.Win32.Graphics.Direct3D9.D3DDEGREETYPE */
  Degree: D3DDEGREETYPE;
}

export const sizeofD3DRECTPATCH_INFO = 32;

export function allocD3DRECTPATCH_INFO(data?: Partial<D3DRECTPATCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DRECTPATCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StartVertexOffsetWidth !== undefined) view.setUint32(0, Number(data.StartVertexOffsetWidth), true);
  // 0x04: u32
  if (data?.StartVertexOffsetHeight !== undefined) view.setUint32(4, Number(data.StartVertexOffsetHeight), true);
  // 0x08: u32
  if (data?.Width !== undefined) view.setUint32(8, Number(data.Width), true);
  // 0x0c: u32
  if (data?.Height !== undefined) view.setUint32(12, Number(data.Height), true);
  // 0x10: u32
  if (data?.Stride !== undefined) view.setUint32(16, Number(data.Stride), true);
  // 0x14: i32
  if (data?.Basis !== undefined) view.setInt32(20, Number(data.Basis), true);
  // 0x18: i32
  if (data?.Degree !== undefined) view.setInt32(24, Number(data.Degree), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DTRIPATCH_INFO (size: 16)
 */
export interface D3DTRIPATCH_INFO {
  /** u32 */
  StartVertexOffset: number;
  /** u32 */
  NumVertices: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DBASISTYPE */
  Basis: D3DBASISTYPE;
  /** Windows.Win32.Graphics.Direct3D9.D3DDEGREETYPE */
  Degree: D3DDEGREETYPE;
}

export const sizeofD3DTRIPATCH_INFO = 16;

export function allocD3DTRIPATCH_INFO(data?: Partial<D3DTRIPATCH_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DTRIPATCH_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.StartVertexOffset !== undefined) view.setUint32(0, Number(data.StartVertexOffset), true);
  // 0x04: u32
  if (data?.NumVertices !== undefined) view.setUint32(4, Number(data.NumVertices), true);
  // 0x08: i32
  if (data?.Basis !== undefined) view.setInt32(8, Number(data.Basis), true);
  // 0x0c: i32
  if (data?.Degree !== undefined) view.setInt32(12, Number(data.Degree), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DRASTER_STATUS (size: 8)
 */
export interface D3DRASTER_STATUS {
  /** Windows.Win32.Foundation.BOOL */
  InVBlank: boolean;
  /** u32 */
  ScanLine: number;
}

export const sizeofD3DRASTER_STATUS = 8;

export function allocD3DRASTER_STATUS(data?: Partial<D3DRASTER_STATUS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DRASTER_STATUS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.InVBlank !== undefined) view.setInt32(0, Number(data.InVBlank), true);
  // 0x04: u32
  if (data?.ScanLine !== undefined) view.setUint32(4, Number(data.ScanLine), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DRESOURCESTATS (size: 48)
 */
export interface D3DRESOURCESTATS {
  /** Windows.Win32.Foundation.BOOL */
  bThrashing: boolean;
  /** u32 */
  ApproxBytesDownloaded: number;
  /** u32 */
  NumEvicts: number;
  /** u32 */
  NumVidCreates: number;
  /** u32 */
  LastPri: number;
  /** u32 */
  NumUsed: number;
  /** u32 */
  NumUsedInVidMem: number;
  /** u32 */
  WorkingSet: number;
  /** u32 */
  WorkingSetBytes: number;
  /** u32 */
  TotalManaged: number;
  /** u32 */
  TotalBytes: number;
}

export const sizeofD3DRESOURCESTATS = 48;

export function allocD3DRESOURCESTATS(data?: Partial<D3DRESOURCESTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DRESOURCESTATS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.bThrashing !== undefined) view.setInt32(0, Number(data.bThrashing), true);
  // 0x04: u32
  if (data?.ApproxBytesDownloaded !== undefined) view.setUint32(4, Number(data.ApproxBytesDownloaded), true);
  // 0x08: u32
  if (data?.NumEvicts !== undefined) view.setUint32(8, Number(data.NumEvicts), true);
  // 0x0c: u32
  if (data?.NumVidCreates !== undefined) view.setUint32(12, Number(data.NumVidCreates), true);
  // 0x10: u32
  if (data?.LastPri !== undefined) view.setUint32(16, Number(data.LastPri), true);
  // 0x14: u32
  if (data?.NumUsed !== undefined) view.setUint32(20, Number(data.NumUsed), true);
  // 0x18: u32
  if (data?.NumUsedInVidMem !== undefined) view.setUint32(24, Number(data.NumUsedInVidMem), true);
  // 0x1c: u32
  if (data?.WorkingSet !== undefined) view.setUint32(28, Number(data.WorkingSet), true);
  // 0x20: u32
  if (data?.WorkingSetBytes !== undefined) view.setUint32(32, Number(data.WorkingSetBytes), true);
  // 0x24: u32
  if (data?.TotalManaged !== undefined) view.setUint32(36, Number(data.TotalManaged), true);
  // 0x28: u32
  if (data?.TotalBytes !== undefined) view.setUint32(40, Number(data.TotalBytes), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_RESOURCEMANAGER (size: 8)
 */
export interface D3DDEVINFO_RESOURCEMANAGER {
  /** array */
  stats: Deno.PointerValue | null;
}

export const sizeofD3DDEVINFO_RESOURCEMANAGER = 8;

export function allocD3DDEVINFO_RESOURCEMANAGER(data?: Partial<D3DDEVINFO_RESOURCEMANAGER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_RESOURCEMANAGER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.stats !== undefined) view.setBigUint64(0, data.stats === null ? 0n : BigInt(util.toPointer(data.stats)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_D3DVERTEXSTATS (size: 8)
 */
export interface D3DDEVINFO_D3DVERTEXSTATS {
  /** u32 */
  NumRenderedTriangles: number;
  /** u32 */
  NumExtraClippingTriangles: number;
}

export const sizeofD3DDEVINFO_D3DVERTEXSTATS = 8;

export function allocD3DDEVINFO_D3DVERTEXSTATS(data?: Partial<D3DDEVINFO_D3DVERTEXSTATS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_D3DVERTEXSTATS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumRenderedTriangles !== undefined) view.setUint32(0, Number(data.NumRenderedTriangles), true);
  // 0x04: u32
  if (data?.NumExtraClippingTriangles !== undefined) view.setUint32(4, Number(data.NumExtraClippingTriangles), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_VCACHE (size: 16)
 */
export interface D3DDEVINFO_VCACHE {
  /** u32 */
  Pattern: number;
  /** u32 */
  OptMethod: number;
  /** u32 */
  CacheSize: number;
  /** u32 */
  MagicNumber: number;
}

export const sizeofD3DDEVINFO_VCACHE = 16;

export function allocD3DDEVINFO_VCACHE(data?: Partial<D3DDEVINFO_VCACHE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_VCACHE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Pattern !== undefined) view.setUint32(0, Number(data.Pattern), true);
  // 0x04: u32
  if (data?.OptMethod !== undefined) view.setUint32(4, Number(data.OptMethod), true);
  // 0x08: u32
  if (data?.CacheSize !== undefined) view.setUint32(8, Number(data.CacheSize), true);
  // 0x0c: u32
  if (data?.MagicNumber !== undefined) view.setUint32(12, Number(data.MagicNumber), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_D3D9PIPELINETIMINGS (size: 16)
 */
export interface D3DDEVINFO_D3D9PIPELINETIMINGS {
  /** f32 */
  VertexProcessingTimePercent: number;
  /** f32 */
  PixelProcessingTimePercent: number;
  /** f32 */
  OtherGPUProcessingTimePercent: number;
  /** f32 */
  GPUIdleTimePercent: number;
}

export const sizeofD3DDEVINFO_D3D9PIPELINETIMINGS = 16;

export function allocD3DDEVINFO_D3D9PIPELINETIMINGS(data?: Partial<D3DDEVINFO_D3D9PIPELINETIMINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_D3D9PIPELINETIMINGS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.VertexProcessingTimePercent !== undefined) view.setFloat32(0, Number(data.VertexProcessingTimePercent), true);
  // 0x04: f32
  if (data?.PixelProcessingTimePercent !== undefined) view.setFloat32(4, Number(data.PixelProcessingTimePercent), true);
  // 0x08: f32
  if (data?.OtherGPUProcessingTimePercent !== undefined) view.setFloat32(8, Number(data.OtherGPUProcessingTimePercent), true);
  // 0x0c: f32
  if (data?.GPUIdleTimePercent !== undefined) view.setFloat32(12, Number(data.GPUIdleTimePercent), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_D3D9INTERFACETIMINGS (size: 24)
 */
export interface D3DDEVINFO_D3D9INTERFACETIMINGS {
  /** f32 */
  WaitingForGPUToUseApplicationResourceTimePercent: number;
  /** f32 */
  WaitingForGPUToAcceptMoreCommandsTimePercent: number;
  /** f32 */
  WaitingForGPUToStayWithinLatencyTimePercent: number;
  /** f32 */
  WaitingForGPUExclusiveResourceTimePercent: number;
  /** f32 */
  WaitingForGPUOtherTimePercent: number;
}

export const sizeofD3DDEVINFO_D3D9INTERFACETIMINGS = 24;

export function allocD3DDEVINFO_D3D9INTERFACETIMINGS(data?: Partial<D3DDEVINFO_D3D9INTERFACETIMINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_D3D9INTERFACETIMINGS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.WaitingForGPUToUseApplicationResourceTimePercent !== undefined) view.setFloat32(0, Number(data.WaitingForGPUToUseApplicationResourceTimePercent), true);
  // 0x04: f32
  if (data?.WaitingForGPUToAcceptMoreCommandsTimePercent !== undefined) view.setFloat32(4, Number(data.WaitingForGPUToAcceptMoreCommandsTimePercent), true);
  // 0x08: f32
  if (data?.WaitingForGPUToStayWithinLatencyTimePercent !== undefined) view.setFloat32(8, Number(data.WaitingForGPUToStayWithinLatencyTimePercent), true);
  // 0x0c: f32
  if (data?.WaitingForGPUExclusiveResourceTimePercent !== undefined) view.setFloat32(12, Number(data.WaitingForGPUExclusiveResourceTimePercent), true);
  // 0x10: f32
  if (data?.WaitingForGPUOtherTimePercent !== undefined) view.setFloat32(16, Number(data.WaitingForGPUOtherTimePercent), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_D3D9STAGETIMINGS (size: 8)
 */
export interface D3DDEVINFO_D3D9STAGETIMINGS {
  /** f32 */
  MemoryProcessingPercent: number;
  /** f32 */
  ComputationProcessingPercent: number;
}

export const sizeofD3DDEVINFO_D3D9STAGETIMINGS = 8;

export function allocD3DDEVINFO_D3D9STAGETIMINGS(data?: Partial<D3DDEVINFO_D3D9STAGETIMINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_D3D9STAGETIMINGS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.MemoryProcessingPercent !== undefined) view.setFloat32(0, Number(data.MemoryProcessingPercent), true);
  // 0x04: f32
  if (data?.ComputationProcessingPercent !== undefined) view.setFloat32(4, Number(data.ComputationProcessingPercent), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_D3D9BANDWIDTHTIMINGS (size: 24)
 */
export interface D3DDEVINFO_D3D9BANDWIDTHTIMINGS {
  /** f32 */
  MaxBandwidthUtilized: number;
  /** f32 */
  FrontEndUploadMemoryUtilizedPercent: number;
  /** f32 */
  VertexRateUtilizedPercent: number;
  /** f32 */
  TriangleSetupRateUtilizedPercent: number;
  /** f32 */
  FillRateUtilizedPercent: number;
}

export const sizeofD3DDEVINFO_D3D9BANDWIDTHTIMINGS = 24;

export function allocD3DDEVINFO_D3D9BANDWIDTHTIMINGS(data?: Partial<D3DDEVINFO_D3D9BANDWIDTHTIMINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_D3D9BANDWIDTHTIMINGS);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.MaxBandwidthUtilized !== undefined) view.setFloat32(0, Number(data.MaxBandwidthUtilized), true);
  // 0x04: f32
  if (data?.FrontEndUploadMemoryUtilizedPercent !== undefined) view.setFloat32(4, Number(data.FrontEndUploadMemoryUtilizedPercent), true);
  // 0x08: f32
  if (data?.VertexRateUtilizedPercent !== undefined) view.setFloat32(8, Number(data.VertexRateUtilizedPercent), true);
  // 0x0c: f32
  if (data?.TriangleSetupRateUtilizedPercent !== undefined) view.setFloat32(12, Number(data.TriangleSetupRateUtilizedPercent), true);
  // 0x10: f32
  if (data?.FillRateUtilizedPercent !== undefined) view.setFloat32(16, Number(data.FillRateUtilizedPercent), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDEVINFO_D3D9CACHEUTILIZATION (size: 8)
 */
export interface D3DDEVINFO_D3D9CACHEUTILIZATION {
  /** f32 */
  TextureCacheHitRate: number;
  /** f32 */
  PostTransformVertexCacheHitRate: number;
}

export const sizeofD3DDEVINFO_D3D9CACHEUTILIZATION = 8;

export function allocD3DDEVINFO_D3D9CACHEUTILIZATION(data?: Partial<D3DDEVINFO_D3D9CACHEUTILIZATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDEVINFO_D3D9CACHEUTILIZATION);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.TextureCacheHitRate !== undefined) view.setFloat32(0, Number(data.TextureCacheHitRate), true);
  // 0x04: f32
  if (data?.PostTransformVertexCacheHitRate !== undefined) view.setFloat32(4, Number(data.PostTransformVertexCacheHitRate), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DCOMPOSERECTDESC (size: 8)
 */
export interface D3DCOMPOSERECTDESC {
  /** u16 */
  X: number;
  /** u16 */
  Y: number;
  /** u16 */
  Width: number;
  /** u16 */
  Height: number;
}

export const sizeofD3DCOMPOSERECTDESC = 8;

export function allocD3DCOMPOSERECTDESC(data?: Partial<D3DCOMPOSERECTDESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DCOMPOSERECTDESC);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.X !== undefined) view.setUint16(0, Number(data.X), true);
  // 0x02: u16
  if (data?.Y !== undefined) view.setUint16(2, Number(data.Y), true);
  // 0x04: u16
  if (data?.Width !== undefined) view.setUint16(4, Number(data.Width), true);
  // 0x06: u16
  if (data?.Height !== undefined) view.setUint16(6, Number(data.Height), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DCOMPOSERECTDESTINATION (size: 8)
 */
export interface D3DCOMPOSERECTDESTINATION {
  /** u16 */
  SrcRectIndex: number;
  /** u16 */
  Reserved: number;
  /** i16 */
  X: number;
  /** i16 */
  Y: number;
}

export const sizeofD3DCOMPOSERECTDESTINATION = 8;

export function allocD3DCOMPOSERECTDESTINATION(data?: Partial<D3DCOMPOSERECTDESTINATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DCOMPOSERECTDESTINATION);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.SrcRectIndex !== undefined) view.setUint16(0, Number(data.SrcRectIndex), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: i16
  if (data?.X !== undefined) view.setInt16(4, Number(data.X), true);
  // 0x06: i16
  if (data?.Y !== undefined) view.setInt16(6, Number(data.Y), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDISPLAYMODEEX (size: 24)
 */
export interface D3DDISPLAYMODEEX {
  /** u32 */
  Size: number;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  RefreshRate: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DSCANLINEORDERING */
  ScanLineOrdering: D3DSCANLINEORDERING;
}

export const sizeofD3DDISPLAYMODEEX = 24;

export function allocD3DDISPLAYMODEEX(data?: Partial<D3DDISPLAYMODEEX>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDISPLAYMODEEX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Width !== undefined) view.setUint32(4, Number(data.Width), true);
  // 0x08: u32
  if (data?.Height !== undefined) view.setUint32(8, Number(data.Height), true);
  // 0x0c: u32
  if (data?.RefreshRate !== undefined) view.setUint32(12, Number(data.RefreshRate), true);
  // 0x10: u32
  if (data?.Format !== undefined) view.setUint32(16, Number(data.Format), true);
  // 0x14: i32
  if (data?.ScanLineOrdering !== undefined) view.setInt32(20, Number(data.ScanLineOrdering), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DDISPLAYMODEFILTER (size: 16)
 */
export interface D3DDISPLAYMODEFILTER {
  /** u32 */
  Size: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DFORMAT */
  Format: D3DFORMAT;
  /** Windows.Win32.Graphics.Direct3D9.D3DSCANLINEORDERING */
  ScanLineOrdering: D3DSCANLINEORDERING;
}

export const sizeofD3DDISPLAYMODEFILTER = 16;

export function allocD3DDISPLAYMODEFILTER(data?: Partial<D3DDISPLAYMODEFILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DDISPLAYMODEFILTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Format !== undefined) view.setUint32(4, Number(data.Format), true);
  // 0x08: i32
  if (data?.ScanLineOrdering !== undefined) view.setInt32(8, Number(data.ScanLineOrdering), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_INPUT (size: 24)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERY_INPUT {
  /** System.Guid */
  QueryType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERY_INPUT = 24;

export function allocD3DAUTHENTICATEDCHANNEL_QUERY_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERY_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERY_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.QueryType !== undefined) view.setBigUint64(0, data.QueryType === null ? 0n : BigInt(util.toPointer(data.QueryType)), true);
  // 0x08: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(8, data.hChannel === null ? 0n : BigInt(util.toPointer(data.hChannel)), true);
  // 0x10: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(16, Number(data.SequenceNumber), true);
  // 0x14: pad4
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS (size: 8)
 */
export interface D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS {
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS = 8;

export function allocD3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS(data?: Partial<D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS */
  ProtectionFlags: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYPROTECTION_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.ProtectionFlags !== undefined) view.setBigUint64(8, data.ProtectionFlags === null ? 0n : BigInt(util.toPointer(data.ProtectionFlags)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNELTYPE */
  ChannelType: D3DAUTHENTICATEDCHANNELTYPE;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYCHANNELTYPE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: i32
  if (data?.ChannelType !== undefined) view.setInt32(8, Number(data.ChannelType), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYDEVICEHANDLE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DXVA2DecodeHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : BigInt(util.toPointer(data.Input)), true);
  // 0x08: pointer
  if (data?.DXVA2DecodeHandle !== undefined) view.setBigUint64(8, data.DXVA2DecodeHandle === null ? 0n : BigInt(util.toPointer(data.DXVA2DecodeHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT (size: 32)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DXVA2DecodeHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT = 32;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYCRYPTOSESSION_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DXVA2DecodeHandle !== undefined) view.setBigUint64(8, data.DXVA2DecodeHandle === null ? 0n : BigInt(util.toPointer(data.DXVA2DecodeHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : BigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(24, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumRestrictedSharedResourceProcesses: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESSCOUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.NumRestrictedSharedResourceProcesses !== undefined) view.setUint32(8, Number(data.NumRestrictedSharedResourceProcesses), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProcessIndex: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : BigInt(util.toPointer(data.Input)), true);
  // 0x08: u32
  if (data?.ProcessIndex !== undefined) view.setUint32(8, Number(data.ProcessIndex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT (size: 24)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  ProcessIndex: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE */
  ProcessIdentifer: D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE;
  /** Windows.Win32.Foundation.HANDLE */
  ProcessHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT = 24;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYRESTRICTEDSHAREDRESOURCEPROCESS_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.ProcessIndex !== undefined) view.setUint32(8, Number(data.ProcessIndex), true);
  // 0x0c: i32
  if (data?.ProcessIdentifer !== undefined) view.setInt32(12, Number(data.ProcessIdentifer), true);
  // 0x10: pointer
  if (data?.ProcessHandle !== undefined) view.setBigUint64(16, data.ProcessHandle === null ? 0n : BigInt(util.toPointer(data.ProcessHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumUnrestrictedProtectedSharedResources: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYUNRESTRICTEDPROTECTEDSHAREDRESOURCECOUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.NumUnrestrictedProtectedSharedResources !== undefined) view.setUint32(8, Number(data.NumUnrestrictedProtectedSharedResources), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT (size: 24)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT = 24;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : BigInt(util.toPointer(data.Input)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : BigInt(util.toPointer(data.CryptoSessionHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT (size: 32)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumOutputIDs: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT = 32;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTIDCOUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : BigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: u32
  if (data?.NumOutputIDs !== undefined) view.setUint32(24, Number(data.NumOutputIDs), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT (size: 32)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  OutputIDIndex: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT = 32;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYOUTPUTID_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : BigInt(util.toPointer(data.Input)), true);
  // 0x08: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(8, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : BigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: u32
  if (data?.OutputIDIndex !== undefined) view.setUint32(24, Number(data.OutputIDIndex), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT (size: 24)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DBUSTYPE */
  BusType: D3DBUSTYPE;
  /** Windows.Win32.Foundation.BOOL */
  bAccessibleInContiguousBlocks: boolean;
  /** Windows.Win32.Foundation.BOOL */
  bAccessibleInNonContiguousBlocks: boolean;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT = 24;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYINFOBUSTYPE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: i32
  if (data?.BusType !== undefined) view.setInt32(8, Number(data.BusType), true);
  // 0x0c: i32
  if (data?.bAccessibleInContiguousBlocks !== undefined) view.setInt32(12, Number(data.bAccessibleInContiguousBlocks), true);
  // 0x10: i32
  if (data?.bAccessibleInNonContiguousBlocks !== undefined) view.setInt32(16, Number(data.bAccessibleInNonContiguousBlocks), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumEncryptionGuids: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUIDCOUNT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.NumEncryptionGuids !== undefined) view.setUint32(8, Number(data.NumEncryptionGuids), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_INPUT */
  Input: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EncryptionGuidIndex: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Input !== undefined) view.setBigUint64(0, data.Input === null ? 0n : BigInt(util.toPointer(data.Input)), true);
  // 0x08: u32
  if (data?.EncryptionGuidIndex !== undefined) view.setUint32(8, Number(data.EncryptionGuidIndex), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT (size: 24)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  EncryptionGuidIndex: number;
  /** System.Guid */
  EncryptionGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT = 24;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYEVICTIONENCRYPTIONGUID_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: u32
  if (data?.EncryptionGuidIndex !== undefined) view.setUint32(8, Number(data.EncryptionGuidIndex), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.EncryptionGuid !== undefined) view.setBigUint64(16, data.EncryptionGuid === null ? 0n : BigInt(util.toPointer(data.EncryptionGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_QUERY_OUTPUT */
  Output: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EncryptionGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT = 16;

export function allocD3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_QUERYUNCOMPRESSEDENCRYPTIONLEVEL_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Output !== undefined) view.setBigUint64(0, data.Output === null ? 0n : BigInt(util.toPointer(data.Output)), true);
  // 0x08: pointer
  if (data?.EncryptionGuid !== undefined) view.setBigUint64(8, data.EncryptionGuid === null ? 0n : BigInt(util.toPointer(data.EncryptionGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT (size: 32)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3D_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ConfigureType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT = 32;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : BigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.ConfigureType !== undefined) view.setBigUint64(8, data.ConfigureType === null ? 0n : BigInt(util.toPointer(data.ConfigureType)), true);
  // 0x10: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(16, data.hChannel === null ? 0n : BigInt(util.toPointer(data.hChannel)), true);
  // 0x18: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(24, Number(data.SequenceNumber), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT (size: 40)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT {
  /** Windows.Win32.Graphics.Direct3D9.D3D_OMAC */
  omac: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  ConfigureType: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  hChannel: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SequenceNumber: number;
  /** Windows.Win32.Foundation.HRESULT */
  ReturnCode: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT = 40;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.omac !== undefined) view.setBigUint64(0, data.omac === null ? 0n : BigInt(util.toPointer(data.omac)), true);
  // 0x08: pointer
  if (data?.ConfigureType !== undefined) view.setBigUint64(8, data.ConfigureType === null ? 0n : BigInt(util.toPointer(data.ConfigureType)), true);
  // 0x10: pointer
  if (data?.hChannel !== undefined) view.setBigUint64(16, data.hChannel === null ? 0n : BigInt(util.toPointer(data.hChannel)), true);
  // 0x18: u32
  if (data?.SequenceNumber !== undefined) view.setUint32(24, Number(data.SequenceNumber), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.ReturnCode !== undefined) view.setBigUint64(32, data.ReturnCode === null ? 0n : BigInt(util.toPointer(data.ReturnCode)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  StartSequenceQuery: number;
  /** u32 */
  StartSequenceConfigure: number;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE = 16;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGUREINITIALIZE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  // 0x08: u32
  if (data?.StartSequenceQuery !== undefined) view.setUint32(8, Number(data.StartSequenceQuery), true);
  // 0x0c: u32
  if (data?.StartSequenceConfigure !== undefined) view.setUint32(12, Number(data.StartSequenceConfigure), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_PROTECTION_FLAGS */
  Protections: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION = 16;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGUREPROTECTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  // 0x08: pointer
  if (data?.Protections !== undefined) view.setBigUint64(8, data.Protections === null ? 0n : BigInt(util.toPointer(data.Protections)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION (size: 32)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DXVA2DecodeHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  CryptoSessionHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.HANDLE */
  DeviceHandle: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION = 32;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURECRYPTOSESSION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  // 0x08: pointer
  if (data?.DXVA2DecodeHandle !== undefined) view.setBigUint64(8, data.DXVA2DecodeHandle === null ? 0n : BigInt(util.toPointer(data.DXVA2DecodeHandle)), true);
  // 0x10: pointer
  if (data?.CryptoSessionHandle !== undefined) view.setBigUint64(16, data.CryptoSessionHandle === null ? 0n : BigInt(util.toPointer(data.CryptoSessionHandle)), true);
  // 0x18: pointer
  if (data?.DeviceHandle !== undefined) view.setBigUint64(24, data.DeviceHandle === null ? 0n : BigInt(util.toPointer(data.DeviceHandle)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE (size: 32)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE */
  ProcessIdentiferType: D3DAUTHENTICATEDCHANNEL_PROCESSIDENTIFIERTYPE;
  /** Windows.Win32.Foundation.HANDLE */
  ProcessHandle: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  AllowAccess: boolean;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE = 32;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGURESHAREDRESOURCE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  // 0x08: i32
  if (data?.ProcessIdentiferType !== undefined) view.setInt32(8, Number(data.ProcessIdentiferType), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ProcessHandle !== undefined) view.setBigUint64(16, data.ProcessHandle === null ? 0n : BigInt(util.toPointer(data.ProcessHandle)), true);
  // 0x18: i32
  if (data?.AllowAccess !== undefined) view.setInt32(24, Number(data.AllowAccess), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION (size: 16)
 */
export interface D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION {
  /** Windows.Win32.Graphics.Direct3D9.D3DAUTHENTICATEDCHANNEL_CONFIGURE_INPUT */
  Parameters: Uint8Array | Deno.PointerValue | null;
  /** System.Guid */
  EncryptionGuid: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION = 16;

export function allocD3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION(data?: Partial<D3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DAUTHENTICATEDCHANNEL_CONFIGUREUNCOMPRESSEDENCRYPTION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Parameters !== undefined) view.setBigUint64(0, data.Parameters === null ? 0n : BigInt(util.toPointer(data.Parameters)), true);
  // 0x08: pointer
  if (data?.EncryptionGuid !== undefined) view.setBigUint64(8, data.EncryptionGuid === null ? 0n : BigInt(util.toPointer(data.EncryptionGuid)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DENCRYPTED_BLOCK_INFO (size: 16)
 */
export interface D3DENCRYPTED_BLOCK_INFO {
  /** u32 */
  NumEncryptedBytesAtBeginning: number;
  /** u32 */
  NumBytesInSkipPattern: number;
  /** u32 */
  NumBytesInEncryptPattern: number;
}

export const sizeofD3DENCRYPTED_BLOCK_INFO = 16;

export function allocD3DENCRYPTED_BLOCK_INFO(data?: Partial<D3DENCRYPTED_BLOCK_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DENCRYPTED_BLOCK_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumEncryptedBytesAtBeginning !== undefined) view.setUint32(0, Number(data.NumEncryptedBytesAtBeginning), true);
  // 0x04: u32
  if (data?.NumBytesInSkipPattern !== undefined) view.setUint32(4, Number(data.NumBytesInSkipPattern), true);
  // 0x08: u32
  if (data?.NumBytesInEncryptPattern !== undefined) view.setUint32(8, Number(data.NumBytesInEncryptPattern), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DVSHADERCAPS2_0 (size: 16)
 */
export interface D3DVSHADERCAPS2_0 {
  /** u32 */
  Caps: number;
  /** i32 */
  DynamicFlowControlDepth: number;
  /** i32 */
  NumTemps: number;
  /** i32 */
  StaticFlowControlDepth: number;
}

export const sizeofD3DVSHADERCAPS2_0 = 16;

export function allocD3DVSHADERCAPS2_0(data?: Partial<D3DVSHADERCAPS2_0>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DVSHADERCAPS2_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Caps !== undefined) view.setUint32(0, Number(data.Caps), true);
  // 0x04: i32
  if (data?.DynamicFlowControlDepth !== undefined) view.setInt32(4, Number(data.DynamicFlowControlDepth), true);
  // 0x08: i32
  if (data?.NumTemps !== undefined) view.setInt32(8, Number(data.NumTemps), true);
  // 0x0c: i32
  if (data?.StaticFlowControlDepth !== undefined) view.setInt32(12, Number(data.StaticFlowControlDepth), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DPSHADERCAPS2_0 (size: 24)
 */
export interface D3DPSHADERCAPS2_0 {
  /** u32 */
  Caps: number;
  /** i32 */
  DynamicFlowControlDepth: number;
  /** i32 */
  NumTemps: number;
  /** i32 */
  StaticFlowControlDepth: number;
  /** i32 */
  NumInstructionSlots: number;
}

export const sizeofD3DPSHADERCAPS2_0 = 24;

export function allocD3DPSHADERCAPS2_0(data?: Partial<D3DPSHADERCAPS2_0>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DPSHADERCAPS2_0);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Caps !== undefined) view.setUint32(0, Number(data.Caps), true);
  // 0x04: i32
  if (data?.DynamicFlowControlDepth !== undefined) view.setInt32(4, Number(data.DynamicFlowControlDepth), true);
  // 0x08: i32
  if (data?.NumTemps !== undefined) view.setInt32(8, Number(data.NumTemps), true);
  // 0x0c: i32
  if (data?.StaticFlowControlDepth !== undefined) view.setInt32(12, Number(data.StaticFlowControlDepth), true);
  // 0x10: i32
  if (data?.NumInstructionSlots !== undefined) view.setInt32(16, Number(data.NumInstructionSlots), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D9.D3DCAPS9 (size: 288)
 */
export interface D3DCAPS9 {
  /** Windows.Win32.Graphics.Direct3D9.D3DDEVTYPE */
  DeviceType: D3DDEVTYPE;
  /** u32 */
  AdapterOrdinal: number;
  /** u32 */
  Caps: number;
  /** u32 */
  Caps2: number;
  /** u32 */
  Caps3: number;
  /** u32 */
  PresentationIntervals: number;
  /** u32 */
  CursorCaps: number;
  /** u32 */
  DevCaps: number;
  /** u32 */
  PrimitiveMiscCaps: number;
  /** u32 */
  RasterCaps: number;
  /** u32 */
  ZCmpCaps: number;
  /** u32 */
  SrcBlendCaps: number;
  /** u32 */
  DestBlendCaps: number;
  /** u32 */
  AlphaCmpCaps: number;
  /** u32 */
  ShadeCaps: number;
  /** u32 */
  TextureCaps: number;
  /** u32 */
  TextureFilterCaps: number;
  /** u32 */
  CubeTextureFilterCaps: number;
  /** u32 */
  VolumeTextureFilterCaps: number;
  /** u32 */
  TextureAddressCaps: number;
  /** u32 */
  VolumeTextureAddressCaps: number;
  /** u32 */
  LineCaps: number;
  /** u32 */
  MaxTextureWidth: number;
  /** u32 */
  MaxTextureHeight: number;
  /** u32 */
  MaxVolumeExtent: number;
  /** u32 */
  MaxTextureRepeat: number;
  /** u32 */
  MaxTextureAspectRatio: number;
  /** u32 */
  MaxAnisotropy: number;
  /** f32 */
  MaxVertexW: number;
  /** f32 */
  GuardBandLeft: number;
  /** f32 */
  GuardBandTop: number;
  /** f32 */
  GuardBandRight: number;
  /** f32 */
  GuardBandBottom: number;
  /** f32 */
  ExtentsAdjust: number;
  /** u32 */
  StencilCaps: number;
  /** u32 */
  FVFCaps: number;
  /** u32 */
  TextureOpCaps: number;
  /** u32 */
  MaxTextureBlendStages: number;
  /** u32 */
  MaxSimultaneousTextures: number;
  /** u32 */
  VertexProcessingCaps: number;
  /** u32 */
  MaxActiveLights: number;
  /** u32 */
  MaxUserClipPlanes: number;
  /** u32 */
  MaxVertexBlendMatrices: number;
  /** u32 */
  MaxVertexBlendMatrixIndex: number;
  /** f32 */
  MaxPointSize: number;
  /** u32 */
  MaxPrimitiveCount: number;
  /** u32 */
  MaxVertexIndex: number;
  /** u32 */
  MaxStreams: number;
  /** u32 */
  MaxStreamStride: number;
  /** u32 */
  VertexShaderVersion: number;
  /** u32 */
  MaxVertexShaderConst: number;
  /** u32 */
  PixelShaderVersion: number;
  /** f32 */
  PixelShader1xMaxValue: number;
  /** u32 */
  DevCaps2: number;
  /** f32 */
  MaxNpatchTessellationLevel: number;
  /** u32 */
  Reserved5: number;
  /** u32 */
  MasterAdapterOrdinal: number;
  /** u32 */
  AdapterOrdinalInGroup: number;
  /** u32 */
  NumberOfAdaptersInGroup: number;
  /** u32 */
  DeclTypes: number;
  /** u32 */
  NumSimultaneousRTs: number;
  /** u32 */
  StretchRectFilterCaps: number;
  /** Windows.Win32.Graphics.Direct3D9.D3DVSHADERCAPS2_0 */
  VS20Caps: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D9.D3DPSHADERCAPS2_0 */
  PS20Caps: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  VertexTextureFilterCaps: number;
  /** u32 */
  MaxVShaderInstructionsExecuted: number;
  /** u32 */
  MaxPShaderInstructionsExecuted: number;
  /** u32 */
  MaxVertexShader30InstructionSlots: number;
  /** u32 */
  MaxPixelShader30InstructionSlots: number;
}

export const sizeofD3DCAPS9 = 288;

export function allocD3DCAPS9(data?: Partial<D3DCAPS9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3DCAPS9);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.DeviceType !== undefined) view.setUint32(0, Number(data.DeviceType), true);
  // 0x04: u32
  if (data?.AdapterOrdinal !== undefined) view.setUint32(4, Number(data.AdapterOrdinal), true);
  // 0x08: u32
  if (data?.Caps !== undefined) view.setUint32(8, Number(data.Caps), true);
  // 0x0c: u32
  if (data?.Caps2 !== undefined) view.setUint32(12, Number(data.Caps2), true);
  // 0x10: u32
  if (data?.Caps3 !== undefined) view.setUint32(16, Number(data.Caps3), true);
  // 0x14: u32
  if (data?.PresentationIntervals !== undefined) view.setUint32(20, Number(data.PresentationIntervals), true);
  // 0x18: u32
  if (data?.CursorCaps !== undefined) view.setUint32(24, Number(data.CursorCaps), true);
  // 0x1c: u32
  if (data?.DevCaps !== undefined) view.setUint32(28, Number(data.DevCaps), true);
  // 0x20: u32
  if (data?.PrimitiveMiscCaps !== undefined) view.setUint32(32, Number(data.PrimitiveMiscCaps), true);
  // 0x24: u32
  if (data?.RasterCaps !== undefined) view.setUint32(36, Number(data.RasterCaps), true);
  // 0x28: u32
  if (data?.ZCmpCaps !== undefined) view.setUint32(40, Number(data.ZCmpCaps), true);
  // 0x2c: u32
  if (data?.SrcBlendCaps !== undefined) view.setUint32(44, Number(data.SrcBlendCaps), true);
  // 0x30: u32
  if (data?.DestBlendCaps !== undefined) view.setUint32(48, Number(data.DestBlendCaps), true);
  // 0x34: u32
  if (data?.AlphaCmpCaps !== undefined) view.setUint32(52, Number(data.AlphaCmpCaps), true);
  // 0x38: u32
  if (data?.ShadeCaps !== undefined) view.setUint32(56, Number(data.ShadeCaps), true);
  // 0x3c: u32
  if (data?.TextureCaps !== undefined) view.setUint32(60, Number(data.TextureCaps), true);
  // 0x40: u32
  if (data?.TextureFilterCaps !== undefined) view.setUint32(64, Number(data.TextureFilterCaps), true);
  // 0x44: u32
  if (data?.CubeTextureFilterCaps !== undefined) view.setUint32(68, Number(data.CubeTextureFilterCaps), true);
  // 0x48: u32
  if (data?.VolumeTextureFilterCaps !== undefined) view.setUint32(72, Number(data.VolumeTextureFilterCaps), true);
  // 0x4c: u32
  if (data?.TextureAddressCaps !== undefined) view.setUint32(76, Number(data.TextureAddressCaps), true);
  // 0x50: u32
  if (data?.VolumeTextureAddressCaps !== undefined) view.setUint32(80, Number(data.VolumeTextureAddressCaps), true);
  // 0x54: u32
  if (data?.LineCaps !== undefined) view.setUint32(84, Number(data.LineCaps), true);
  // 0x58: u32
  if (data?.MaxTextureWidth !== undefined) view.setUint32(88, Number(data.MaxTextureWidth), true);
  // 0x5c: u32
  if (data?.MaxTextureHeight !== undefined) view.setUint32(92, Number(data.MaxTextureHeight), true);
  // 0x60: u32
  if (data?.MaxVolumeExtent !== undefined) view.setUint32(96, Number(data.MaxVolumeExtent), true);
  // 0x64: u32
  if (data?.MaxTextureRepeat !== undefined) view.setUint32(100, Number(data.MaxTextureRepeat), true);
  // 0x68: u32
  if (data?.MaxTextureAspectRatio !== undefined) view.setUint32(104, Number(data.MaxTextureAspectRatio), true);
  // 0x6c: u32
  if (data?.MaxAnisotropy !== undefined) view.setUint32(108, Number(data.MaxAnisotropy), true);
  // 0x70: f32
  if (data?.MaxVertexW !== undefined) view.setFloat32(112, Number(data.MaxVertexW), true);
  // 0x74: f32
  if (data?.GuardBandLeft !== undefined) view.setFloat32(116, Number(data.GuardBandLeft), true);
  // 0x78: f32
  if (data?.GuardBandTop !== undefined) view.setFloat32(120, Number(data.GuardBandTop), true);
  // 0x7c: f32
  if (data?.GuardBandRight !== undefined) view.setFloat32(124, Number(data.GuardBandRight), true);
  // 0x80: f32
  if (data?.GuardBandBottom !== undefined) view.setFloat32(128, Number(data.GuardBandBottom), true);
  // 0x84: f32
  if (data?.ExtentsAdjust !== undefined) view.setFloat32(132, Number(data.ExtentsAdjust), true);
  // 0x88: u32
  if (data?.StencilCaps !== undefined) view.setUint32(136, Number(data.StencilCaps), true);
  // 0x8c: u32
  if (data?.FVFCaps !== undefined) view.setUint32(140, Number(data.FVFCaps), true);
  // 0x90: u32
  if (data?.TextureOpCaps !== undefined) view.setUint32(144, Number(data.TextureOpCaps), true);
  // 0x94: u32
  if (data?.MaxTextureBlendStages !== undefined) view.setUint32(148, Number(data.MaxTextureBlendStages), true);
  // 0x98: u32
  if (data?.MaxSimultaneousTextures !== undefined) view.setUint32(152, Number(data.MaxSimultaneousTextures), true);
  // 0x9c: u32
  if (data?.VertexProcessingCaps !== undefined) view.setUint32(156, Number(data.VertexProcessingCaps), true);
  // 0xa0: u32
  if (data?.MaxActiveLights !== undefined) view.setUint32(160, Number(data.MaxActiveLights), true);
  // 0xa4: u32
  if (data?.MaxUserClipPlanes !== undefined) view.setUint32(164, Number(data.MaxUserClipPlanes), true);
  // 0xa8: u32
  if (data?.MaxVertexBlendMatrices !== undefined) view.setUint32(168, Number(data.MaxVertexBlendMatrices), true);
  // 0xac: u32
  if (data?.MaxVertexBlendMatrixIndex !== undefined) view.setUint32(172, Number(data.MaxVertexBlendMatrixIndex), true);
  // 0xb0: f32
  if (data?.MaxPointSize !== undefined) view.setFloat32(176, Number(data.MaxPointSize), true);
  // 0xb4: u32
  if (data?.MaxPrimitiveCount !== undefined) view.setUint32(180, Number(data.MaxPrimitiveCount), true);
  // 0xb8: u32
  if (data?.MaxVertexIndex !== undefined) view.setUint32(184, Number(data.MaxVertexIndex), true);
  // 0xbc: u32
  if (data?.MaxStreams !== undefined) view.setUint32(188, Number(data.MaxStreams), true);
  // 0xc0: u32
  if (data?.MaxStreamStride !== undefined) view.setUint32(192, Number(data.MaxStreamStride), true);
  // 0xc4: u32
  if (data?.VertexShaderVersion !== undefined) view.setUint32(196, Number(data.VertexShaderVersion), true);
  // 0xc8: u32
  if (data?.MaxVertexShaderConst !== undefined) view.setUint32(200, Number(data.MaxVertexShaderConst), true);
  // 0xcc: u32
  if (data?.PixelShaderVersion !== undefined) view.setUint32(204, Number(data.PixelShaderVersion), true);
  // 0xd0: f32
  if (data?.PixelShader1xMaxValue !== undefined) view.setFloat32(208, Number(data.PixelShader1xMaxValue), true);
  // 0xd4: u32
  if (data?.DevCaps2 !== undefined) view.setUint32(212, Number(data.DevCaps2), true);
  // 0xd8: f32
  if (data?.MaxNpatchTessellationLevel !== undefined) view.setFloat32(216, Number(data.MaxNpatchTessellationLevel), true);
  // 0xdc: u32
  if (data?.Reserved5 !== undefined) view.setUint32(220, Number(data.Reserved5), true);
  // 0xe0: u32
  if (data?.MasterAdapterOrdinal !== undefined) view.setUint32(224, Number(data.MasterAdapterOrdinal), true);
  // 0xe4: u32
  if (data?.AdapterOrdinalInGroup !== undefined) view.setUint32(228, Number(data.AdapterOrdinalInGroup), true);
  // 0xe8: u32
  if (data?.NumberOfAdaptersInGroup !== undefined) view.setUint32(232, Number(data.NumberOfAdaptersInGroup), true);
  // 0xec: u32
  if (data?.DeclTypes !== undefined) view.setUint32(236, Number(data.DeclTypes), true);
  // 0xf0: u32
  if (data?.NumSimultaneousRTs !== undefined) view.setUint32(240, Number(data.NumSimultaneousRTs), true);
  // 0xf4: u32
  if (data?.StretchRectFilterCaps !== undefined) view.setUint32(244, Number(data.StretchRectFilterCaps), true);
  // 0xf8: pointer
  if (data?.VS20Caps !== undefined) view.setBigUint64(248, data.VS20Caps === null ? 0n : BigInt(util.toPointer(data.VS20Caps)), true);
  // 0x100: pointer
  if (data?.PS20Caps !== undefined) view.setBigUint64(256, data.PS20Caps === null ? 0n : BigInt(util.toPointer(data.PS20Caps)), true);
  // 0x108: u32
  if (data?.VertexTextureFilterCaps !== undefined) view.setUint32(264, Number(data.VertexTextureFilterCaps), true);
  // 0x10c: u32
  if (data?.MaxVShaderInstructionsExecuted !== undefined) view.setUint32(268, Number(data.MaxVShaderInstructionsExecuted), true);
  // 0x110: u32
  if (data?.MaxPShaderInstructionsExecuted !== undefined) view.setUint32(272, Number(data.MaxPShaderInstructionsExecuted), true);
  // 0x114: u32
  if (data?.MaxVertexShader30InstructionSlots !== undefined) view.setUint32(276, Number(data.MaxVertexShader30InstructionSlots), true);
  // 0x118: u32
  if (data?.MaxPixelShader30InstructionSlots !== undefined) view.setUint32(280, Number(data.MaxPixelShader30InstructionSlots), true);
  // 0x11c: pad4
  return buf;
}

// Native Libraries

try {
  var libd3d9_dll = Deno.dlopen("d3d9.dll", {
    Direct3DCreate9: {
      parameters: ["u32"],
      result: "pointer",
    },
    D3DPERF_BeginEvent: {
      parameters: ["u32", "buffer"],
      result: "i32",
    },
    D3DPERF_EndEvent: {
      parameters: [],
      result: "i32",
    },
    D3DPERF_SetMarker: {
      parameters: ["u32", "buffer"],
      result: "void",
    },
    D3DPERF_SetRegion: {
      parameters: ["u32", "buffer"],
      result: "void",
    },
    D3DPERF_QueryRepeatFrame: {
      parameters: [],
      result: "i32",
    },
    D3DPERF_SetOptions: {
      parameters: ["u32"],
      result: "void",
    },
    D3DPERF_GetStatus: {
      parameters: [],
      result: "u32",
    },
    Direct3DCreate9Ex: {
      parameters: ["u32", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function Direct3DCreate9(
  SDKVersion: number /* u32 */,
): Deno.PointerValue | null /* Windows.Win32.Graphics.Direct3D9.IDirect3D9 */ {
  return util.pointerFromFfi(libd3d9_dll.Direct3DCreate9(SDKVersion));
}

export function D3DPERF_BeginEvent(
  col: number /* u32 */,
  wszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* i32 */ {
  return libd3d9_dll.D3DPERF_BeginEvent(col, util.pwstrToFfi(wszName));
}

export function D3DPERF_EndEvent(): number /* i32 */ {
  return libd3d9_dll.D3DPERF_EndEvent();
}

export function D3DPERF_SetMarker(
  col: number /* u32 */,
  wszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libd3d9_dll.D3DPERF_SetMarker(col, util.pwstrToFfi(wszName));
}

export function D3DPERF_SetRegion(
  col: number /* u32 */,
  wszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): void /* void */ {
  return libd3d9_dll.D3DPERF_SetRegion(col, util.pwstrToFfi(wszName));
}

export function D3DPERF_QueryRepeatFrame(): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libd3d9_dll.D3DPERF_QueryRepeatFrame());
}

export function D3DPERF_SetOptions(
  dwOptions: number /* u32 */,
): void /* void */ {
  return libd3d9_dll.D3DPERF_SetOptions(dwOptions);
}

export function D3DPERF_GetStatus(): number /* u32 */ {
  return libd3d9_dll.D3DPERF_GetStatus();
}

export function Direct3DCreate9Ex(
  SDKVersion: number /* u32 */,
  param1: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d9_dll.Direct3DCreate9Ex(SDKVersion, util.toPointer(param1)));
}

