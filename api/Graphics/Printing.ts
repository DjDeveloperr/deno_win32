/// Auto-generated by Deno Win32: Windows.Win32.Graphics.Printing.Apis

import * as util from "../../util.ts";

// Enums
export type PRINTER_ACCESS_RIGHTS = number;
export type EDefaultDevmodeType = number;
export type EPrintTicketScope = number;
export type EXpsCompressionOptions = number;
export type EXpsFontOptions = number;
export type EXpsJobConsumption = number;
export type EXpsFontRestriction = number;
export type RIP_INFO_TYPE = number;
export type BIDI_TYPE = number;
export type PRINTER_OPTION_FLAGS = number;
export type EPrintPropertyType = number;
export type EPrintXPSJobProgress = number;
export type EPrintXPSJobOperation = number;
export type PRINT_EXECUTION_CONTEXT = number;
export type MXDC_LANDSCAPE_ROTATION_ENUMS = number;
export type MXDC_IMAGE_TYPE_ENUMS = number;
export type MXDC_S0_PAGE_ENUMS = number;
export type EATTRIBUTE_DATATYPE = number;
export type SHIMOPTS = number;
export type PrintSchemaConstrainedSetting = number;
export type PrintSchemaSelectionType = number;
export type PrintSchemaParameterDataType = number;
export type PrintJobStatus = number;
export type PrintAsyncNotifyUserFilter = number;
export type PrintAsyncNotifyConversationStyle = number;
export type PrintAsyncNotifyError = number;
export type PAN_FAMILY_TYPE = number;
export type PAN_SERIF_STYLE = number;
export type PAN_WEIGHT = number;
export type PAN_PROPORTION = number;
export type PAN_CONTRAST = number;
export type PAN_STROKE_VARIATION = number;
export type PAN_ARM_STYLE = number;
export type PAN_LETT_FORM = number;
export type PAN_MIDLINE = number;
export type PAN_XHEIGHT = number;
export type EBranchOfficeJobEventType = number;
export type NOTIFICATION_CALLBACK_COMMANDS = number;
export type NOTIFICATION_CONFIG_FLAGS = number;
export type UI_TYPE = number;
export type XPSRAS_RENDERING_MODE = number;
export type XPSRAS_PIXEL_FORMAT = number;
export type XPSRAS_BACKGROUND_COLOR = number;
export type PageCountType = number;

// Constants
export const PRINTER_ALL_ACCESS = 983052;
export const PRINTER_READ = 131080;
export const PRINTER_WRITE = 131080;
export const PRINTER_EXECUTE = 131080;
export const SERVER_ALL_ACCESS = 983043;
export const SERVER_READ = 131074;
export const SERVER_WRITE = 131075;
export const SERVER_EXECUTE = 131074;
export const PRINTER_DELETE = 65536;
export const PRINTER_READ_CONTROL = 131072;
export const PRINTER_WRITE_DAC = 262144;
export const PRINTER_WRITE_OWNER = 524288;
export const PRINTER_SYNCHRONIZE = 1048576;
export const PRINTER_STANDARD_RIGHTS_REQUIRED = 983040;
export const PRINTER_STANDARD_RIGHTS_READ = 131072;
export const PRINTER_STANDARD_RIGHTS_WRITE = 131072;
export const PRINTER_STANDARD_RIGHTS_EXECUTE = 131072;
export const SERVER_ACCESS_ADMINISTER = 1;
export const SERVER_ACCESS_ENUMERATE = 2;
export const PRINTER_ACCESS_ADMINISTER = 4;
export const PRINTER_ACCESS_USE = 8;
export const PRINTER_ACCESS_MANAGE_LIMITED = 64;
export const USB_PRINTER_INTERFACE_CLASSIC = 1;
export const USB_PRINTER_INTERFACE_IPP = 2;
export const USB_PRINTER_INTERFACE_DUAL = 3;
export const USBPRINT_IOCTL_INDEX = 0;
export const IOCTL_USBPRINT_GET_LPT_STATUS = 2228272;
export const IOCTL_USBPRINT_GET_1284_ID = 2228276;
export const IOCTL_USBPRINT_VENDOR_SET_COMMAND = 2228280;
export const IOCTL_USBPRINT_VENDOR_GET_COMMAND = 2228284;
export const IOCTL_USBPRINT_SOFT_RESET = 2228288;
export const IOCTL_USBPRINT_GET_PROTOCOL = 2228292;
export const IOCTL_USBPRINT_SET_PROTOCOL = 2228296;
export const IOCTL_USBPRINT_GET_INTERFACE_TYPE = 2228300;
export const IOCTL_USBPRINT_SET_PORT_NUMBER = 2228304;
export const IOCTL_USBPRINT_ADD_MSIPP_COMPAT_ID = 2228308;
export const IOCTL_USBPRINT_SET_DEVICE_ID = 2228312;
export const IOCTL_USBPRINT_ADD_CHILD_DEVICE = 2228316;
export const IOCTL_USBPRINT_CYCLE_PORT = 2228320;
export const TVOT_2STATES = 0;
export const TVOT_3STATES = 1;
export const TVOT_UDARROW = 2;
export const TVOT_TRACKBAR = 3;
export const TVOT_SCROLLBAR = 4;
export const TVOT_LISTBOX = 5;
export const TVOT_COMBOBOX = 6;
export const TVOT_EDITBOX = 7;
export const TVOT_PUSHBUTTON = 8;
export const TVOT_CHKBOX = 9;
export const TVOT_NSTATES_EX = 10;
export const CHKBOXS_FALSE_TRUE = 0;
export const CHKBOXS_NO_YES = 1;
export const CHKBOXS_OFF_ON = 2;
export const CHKBOXS_FALSE_PDATA = 3;
export const CHKBOXS_NO_PDATA = 4;
export const CHKBOXS_OFF_PDATA = 5;
export const CHKBOXS_NONE_PDATA = 6;
export const PUSHBUTTON_TYPE_DLGPROC = 0;
export const PUSHBUTTON_TYPE_CALLBACK = 1;
export const PUSHBUTTON_TYPE_HTCLRADJ = 2;
export const PUSHBUTTON_TYPE_HTSETUP = 3;
export const MAX_RES_STR_CHARS = 160;
export const OPTPF_HIDE = 1;
export const OPTPF_DISABLED = 2;
export const OPTPF_ICONID_AS_HICON = 4;
export const OPTPF_OVERLAY_WARNING_ICON = 8;
export const OPTPF_OVERLAY_STOP_ICON = 16;
export const OPTPF_OVERLAY_NO_ICON = 32;
export const OPTPF_USE_HDLGTEMPLATE = 64;
export const OPTPF_MASK = 127;
export const OPTCF_HIDE = 1;
export const OPTCF_MASK = 1;
export const OPTTF_TYPE_DISABLED = 1;
export const OPTTF_NOSPACE_BEFORE_POSTFIX = 2;
export const OPTTF_MASK = 3;
export const OTS_LBCB_SORT = 1;
export const OTS_LBCB_PROPPAGE_LBUSECB = 2;
export const OTS_LBCB_PROPPAGE_CBUSELB = 4;
export const OTS_LBCB_INCL_ITEM_NONE = 8;
export const OTS_LBCB_NO_ICON16_IN_ITEM = 16;
export const OTS_PUSH_INCL_SETUP_TITLE = 32;
export const OTS_PUSH_NO_DOT_DOT_DOT = 64;
export const OTS_PUSH_ENABLE_ALWAYS = 128;
export const OTS_MASK = 255;
export const EPF_PUSH_TYPE_DLGPROC = 1;
export const EPF_INCL_SETUP_TITLE = 2;
export const EPF_NO_DOT_DOT_DOT = 4;
export const EPF_ICONID_AS_HICON = 8;
export const EPF_OVERLAY_WARNING_ICON = 16;
export const EPF_OVERLAY_STOP_ICON = 32;
export const EPF_OVERLAY_NO_ICON = 64;
export const EPF_USE_HDLGTEMPLATE = 128;
export const EPF_MASK = 255;
export const ECBF_CHECKNAME_AT_FRONT = 1;
export const ECBF_CHECKNAME_ONLY_ENABLED = 2;
export const ECBF_ICONID_AS_HICON = 4;
export const ECBF_OVERLAY_WARNING_ICON = 8;
export const ECBF_OVERLAY_ECBICON_IF_CHECKED = 16;
export const ECBF_OVERLAY_STOP_ICON = 32;
export const ECBF_OVERLAY_NO_ICON = 64;
export const ECBF_CHECKNAME_ONLY = 128;
export const ECBF_MASK = 255;
export const OPTIF_COLLAPSE = 1;
export const OPTIF_HIDE = 2;
export const OPTIF_CALLBACK = 4;
export const OPTIF_CHANGED = 8;
export const OPTIF_CHANGEONCE = 16;
export const OPTIF_DISABLED = 32;
export const OPTIF_ECB_CHECKED = 64;
export const OPTIF_EXT_HIDE = 128;
export const OPTIF_EXT_DISABLED = 256;
export const OPTIF_SEL_AS_HICON = 512;
export const OPTIF_EXT_IS_EXTPUSH = 1024;
export const OPTIF_NO_GROUPBOX_NAME = 2048;
export const OPTIF_OVERLAY_WARNING_ICON = 4096;
export const OPTIF_OVERLAY_STOP_ICON = 8192;
export const OPTIF_OVERLAY_NO_ICON = 16384;
export const OPTIF_INITIAL_TVITEM = 32768;
export const OPTIF_HAS_POIEXT = 65536;
export const OPTIF_MASK = 131071;
export const DMPUB_NONE = 0;
export const DMPUB_FIRST = 1;
export const DMPUB_ORIENTATION = 1;
export const DMPUB_SCALE = 2;
export const DMPUB_COPIES_COLLATE = 3;
export const DMPUB_DEFSOURCE = 4;
export const DMPUB_PRINTQUALITY = 5;
export const DMPUB_COLOR = 6;
export const DMPUB_DUPLEX = 7;
export const DMPUB_TTOPTION = 8;
export const DMPUB_FORMNAME = 9;
export const DMPUB_ICMMETHOD = 10;
export const DMPUB_ICMINTENT = 11;
export const DMPUB_MEDIATYPE = 12;
export const DMPUB_DITHERTYPE = 13;
export const DMPUB_OUTPUTBIN = 14;
export const DMPUB_QUALITY = 15;
export const DMPUB_NUP = 16;
export const DMPUB_PAGEORDER = 17;
export const DMPUB_NUP_DIRECTION = 18;
export const DMPUB_MANUAL_DUPLEX = 19;
export const DMPUB_STAPLE = 20;
export const DMPUB_BOOKLET_EDGE = 21;
export const DMPUB_LAST = 21;
export const DMPUB_OEM_PAPER_ITEM = 97;
export const DMPUB_OEM_GRAPHIC_ITEM = 98;
export const DMPUB_OEM_ROOT_ITEM = 99;
export const DMPUB_USER = 100;
export const OIEXTF_ANSI_STRING = 1;
export const CPSUICB_REASON_SEL_CHANGED = 0;
export const CPSUICB_REASON_PUSHBUTTON = 1;
export const CPSUICB_REASON_ECB_CHANGED = 2;
export const CPSUICB_REASON_DLGPROC = 3;
export const CPSUICB_REASON_UNDO_CHANGES = 4;
export const CPSUICB_REASON_EXTPUSH = 5;
export const CPSUICB_REASON_APPLYNOW = 6;
export const CPSUICB_REASON_OPTITEM_SETFOCUS = 7;
export const CPSUICB_REASON_ITEMS_REVERTED = 8;
export const CPSUICB_REASON_ABOUT = 9;
export const CPSUICB_REASON_SETACTIVE = 10;
export const CPSUICB_REASON_KILLACTIVE = 11;
export const CPSUICB_ACTION_NONE = 0;
export const CPSUICB_ACTION_OPTIF_CHANGED = 1;
export const CPSUICB_ACTION_REINIT_ITEMS = 2;
export const CPSUICB_ACTION_NO_APPLY_EXIT = 3;
export const CPSUICB_ACTION_ITEMS_APPLIED = 4;
export const DP_STD_TREEVIEWPAGE = 65535;
export const DP_STD_DOCPROPPAGE2 = 65534;
export const DP_STD_DOCPROPPAGE1 = 65533;
export const DP_STD_RESERVED_START = 65520;
export const MAX_DLGPAGE_COUNT = 64;
export const DPF_ICONID_AS_HICON = 1;
export const DPF_USE_HDLGTEMPLATE = 2;
export const CPSUIF_UPDATE_PERMISSION = 1;
export const CPSUIF_ICONID_AS_HICON = 2;
export const CPSUIF_ABOUT_CALLBACK = 4;
export const CPSFUNC_ADD_HPROPSHEETPAGE = 0;
export const CPSFUNC_ADD_PROPSHEETPAGEW = 1;
export const CPSFUNC_ADD_PCOMPROPSHEETUIA = 2;
export const CPSFUNC_ADD_PCOMPROPSHEETUIW = 3;
export const CPSFUNC_ADD_PFNPROPSHEETUIA = 4;
export const CPSFUNC_ADD_PFNPROPSHEETUIW = 5;
export const CPSFUNC_DELETE_HCOMPROPSHEET = 6;
export const CPSFUNC_SET_HSTARTPAGE = 7;
export const CPSFUNC_GET_PAGECOUNT = 8;
export const CPSFUNC_SET_RESULT = 9;
export const CPSFUNC_GET_HPSUIPAGES = 10;
export const CPSFUNC_LOAD_CPSUI_STRINGA = 11;
export const CPSFUNC_LOAD_CPSUI_STRINGW = 12;
export const CPSFUNC_LOAD_CPSUI_ICON = 13;
export const CPSFUNC_GET_PFNPROPSHEETUI_ICON = 14;
export const CPSFUNC_ADD_PROPSHEETPAGEA = 15;
export const CPSFUNC_INSERT_PSUIPAGEA = 16;
export const CPSFUNC_INSERT_PSUIPAGEW = 17;
export const CPSFUNC_SET_PSUIPAGE_TITLEA = 18;
export const CPSFUNC_SET_PSUIPAGE_TITLEW = 19;
export const CPSFUNC_SET_PSUIPAGE_ICON = 20;
export const CPSFUNC_SET_DATABLOCK = 21;
export const CPSFUNC_QUERY_DATABLOCK = 22;
export const CPSFUNC_SET_DMPUB_HIDEBITS = 23;
export const CPSFUNC_IGNORE_CPSUI_PSN_APPLY = 24;
export const CPSFUNC_DO_APPLY_CPSUI = 25;
export const CPSFUNC_SET_FUSION_CONTEXT = 26;
export const MAX_CPSFUNC_INDEX = 26;
export const CPSFUNC_ADD_PCOMPROPSHEETUI = 3;
export const CPSFUNC_ADD_PFNPROPSHEETUI = 5;
export const CPSFUNC_LOAD_CPSUI_STRING = 12;
export const CPSFUNC_ADD_PROPSHEETPAGE = 1;
export const CPSFUNC_INSERT_PSUIPAGE = 17;
export const CPSFUNC_SET_PSUIPAGE_TITLE = 19;
export const SR_OWNER = 0;
export const SR_OWNER_PARENT = 1;
export const PSUIPAGEINSERT_GROUP_PARENT = 0;
export const PSUIPAGEINSERT_PCOMPROPSHEETUI = 1;
export const PSUIPAGEINSERT_PFNPROPSHEETUI = 2;
export const PSUIPAGEINSERT_PROPSHEETPAGE = 3;
export const PSUIPAGEINSERT_HPROPSHEETPAGE = 4;
export const PSUIPAGEINSERT_DLL = 5;
export const MAX_PSUIPAGEINSERT_INDEX = 5;
export const INSPSUIPAGE_MODE_BEFORE = 0;
export const INSPSUIPAGE_MODE_AFTER = 1;
export const INSPSUIPAGE_MODE_FIRST_CHILD = 2;
export const INSPSUIPAGE_MODE_LAST_CHILD = 3;
export const INSPSUIPAGE_MODE_INDEX = 4;
export const SSP_TVPAGE = 10000;
export const SSP_STDPAGE1 = 10001;
export const SSP_STDPAGE2 = 10002;
export const APPLYCPSUI_NO_NEWDEF = 1;
export const APPLYCPSUI_OK_CANCEL_BUTTON = 2;
export const PROPSHEETUI_REASON_INIT = 0;
export const PROPSHEETUI_REASON_GET_INFO_HEADER = 1;
export const PROPSHEETUI_REASON_DESTROY = 2;
export const PROPSHEETUI_REASON_SET_RESULT = 3;
export const PROPSHEETUI_REASON_GET_ICON = 4;
export const PROPSHEETUI_REASON_BEFORE_INIT = 5;
export const MAX_PROPSHEETUI_REASON_INDEX = 5;
export const PROPSHEETUI_INFO_VERSION = 256;
export const PSUIINFO_UNICODE = 1;
export const PSUIHDRF_OBSOLETE = 1;
export const PSUIHDRF_NOAPPLYNOW = 2;
export const PSUIHDRF_PROPTITLE = 4;
export const PSUIHDRF_USEHICON = 8;
export const PSUIHDRF_DEFTITLE = 16;
export const PSUIHDRF_EXACT_PTITLE = 32;
export const CPSUI_CANCEL = 0;
export const CPSUI_OK = 1;
export const CPSUI_RESTARTWINDOWS = 2;
export const CPSUI_REBOOTSYSTEM = 3;
export const ERR_CPSUI_GETLASTERROR = `-1`;
export const ERR_CPSUI_ALLOCMEM_FAILED = `-2`;
export const ERR_CPSUI_INVALID_PDATA = `-3`;
export const ERR_CPSUI_INVALID_LPARAM = `-4`;
export const ERR_CPSUI_NULL_HINST = `-5`;
export const ERR_CPSUI_NULL_CALLERNAME = `-6`;
export const ERR_CPSUI_NULL_OPTITEMNAME = `-7`;
export const ERR_CPSUI_NO_PROPSHEETPAGE = `-8`;
export const ERR_CPSUI_TOO_MANY_PROPSHEETPAGES = `-9`;
export const ERR_CPSUI_CREATEPROPPAGE_FAILED = `-10`;
export const ERR_CPSUI_MORE_THAN_ONE_TVPAGE = `-11`;
export const ERR_CPSUI_MORE_THAN_ONE_STDPAGE = `-12`;
export const ERR_CPSUI_INVALID_PDLGPAGE = `-13`;
export const ERR_CPSUI_INVALID_DLGPAGE_CBSIZE = `-14`;
export const ERR_CPSUI_TOO_MANY_DLGPAGES = `-15`;
export const ERR_CPSUI_INVALID_DLGPAGEIDX = `-16`;
export const ERR_CPSUI_SUBITEM_DIFF_DLGPAGEIDX = `-17`;
export const ERR_CPSUI_NULL_POPTITEM = `-18`;
export const ERR_CPSUI_INVALID_OPTITEM_CBSIZE = `-19`;
export const ERR_CPSUI_INVALID_OPTTYPE_CBSIZE = `-20`;
export const ERR_CPSUI_INVALID_OPTTYPE_COUNT = `-21`;
export const ERR_CPSUI_NULL_POPTPARAM = `-22`;
export const ERR_CPSUI_INVALID_OPTPARAM_CBSIZE = `-23`;
export const ERR_CPSUI_INVALID_EDITBOX_PSEL = `-24`;
export const ERR_CPSUI_INVALID_EDITBOX_BUF_SIZE = `-25`;
export const ERR_CPSUI_INVALID_ECB_CBSIZE = `-26`;
export const ERR_CPSUI_NULL_ECB_PTITLE = `-27`;
export const ERR_CPSUI_NULL_ECB_PCHECKEDNAME = `-28`;
export const ERR_CPSUI_INVALID_DMPUBID = `-29`;
export const ERR_CPSUI_INVALID_DMPUB_TVOT = `-30`;
export const ERR_CPSUI_CREATE_TRACKBAR_FAILED = `-31`;
export const ERR_CPSUI_CREATE_UDARROW_FAILED = `-32`;
export const ERR_CPSUI_CREATE_IMAGELIST_FAILED = `-33`;
export const ERR_CPSUI_INVALID_TVOT_TYPE = `-34`;
export const ERR_CPSUI_INVALID_LBCB_TYPE = `-35`;
export const ERR_CPSUI_SUBITEM_DIFF_OPTIF_HIDE = `-36`;
export const ERR_CPSUI_INVALID_PUSHBUTTON_TYPE = `-38`;
export const ERR_CPSUI_INVALID_EXTPUSH_CBSIZE = `-39`;
export const ERR_CPSUI_NULL_EXTPUSH_DLGPROC = `-40`;
export const ERR_CPSUI_NO_EXTPUSH_DLGTEMPLATEID = `-41`;
export const ERR_CPSUI_NULL_EXTPUSH_CALLBACK = `-42`;
export const ERR_CPSUI_DMCOPIES_USE_EXTPUSH = `-43`;
export const ERR_CPSUI_ZERO_OPTITEM = `-44`;
export const ERR_CPSUI_FUNCTION_NOT_IMPLEMENTED = `-9999`;
export const ERR_CPSUI_INTERNAL_ERROR = `-10000`;
export const IDI_CPSUI_ICONID_FIRST = 64000;
export const IDI_CPSUI_EMPTY = 64000;
export const IDI_CPSUI_SEL_NONE = 64001;
export const IDI_CPSUI_WARNING = 64002;
export const IDI_CPSUI_NO = 64003;
export const IDI_CPSUI_YES = 64004;
export const IDI_CPSUI_FALSE = 64005;
export const IDI_CPSUI_TRUE = 64006;
export const IDI_CPSUI_OFF = 64007;
export const IDI_CPSUI_ON = 64008;
export const IDI_CPSUI_PAPER_OUTPUT = 64009;
export const IDI_CPSUI_ENVELOPE = 64010;
export const IDI_CPSUI_MEM = 64011;
export const IDI_CPSUI_FONTCARTHDR = 64012;
export const IDI_CPSUI_FONTCART = 64013;
export const IDI_CPSUI_STAPLER_ON = 64014;
export const IDI_CPSUI_STAPLER_OFF = 64015;
export const IDI_CPSUI_HT_HOST = 64016;
export const IDI_CPSUI_HT_DEVICE = 64017;
export const IDI_CPSUI_TT_PRINTASGRAPHIC = 64018;
export const IDI_CPSUI_TT_DOWNLOADSOFT = 64019;
export const IDI_CPSUI_TT_DOWNLOADVECT = 64020;
export const IDI_CPSUI_TT_SUBDEV = 64021;
export const IDI_CPSUI_PORTRAIT = 64022;
export const IDI_CPSUI_LANDSCAPE = 64023;
export const IDI_CPSUI_ROT_LAND = 64024;
export const IDI_CPSUI_AUTOSEL = 64025;
export const IDI_CPSUI_PAPER_TRAY = 64026;
export const IDI_CPSUI_PAPER_TRAY2 = 64027;
export const IDI_CPSUI_PAPER_TRAY3 = 64028;
export const IDI_CPSUI_TRANSPARENT = 64029;
export const IDI_CPSUI_COLLATE = 64030;
export const IDI_CPSUI_DUPLEX_NONE = 64031;
export const IDI_CPSUI_DUPLEX_HORZ = 64032;
export const IDI_CPSUI_DUPLEX_VERT = 64033;
export const IDI_CPSUI_RES_DRAFT = 64034;
export const IDI_CPSUI_RES_LOW = 64035;
export const IDI_CPSUI_RES_MEDIUM = 64036;
export const IDI_CPSUI_RES_HIGH = 64037;
export const IDI_CPSUI_RES_PRESENTATION = 64038;
export const IDI_CPSUI_MONO = 64039;
export const IDI_CPSUI_COLOR = 64040;
export const IDI_CPSUI_DITHER_NONE = 64041;
export const IDI_CPSUI_DITHER_COARSE = 64042;
export const IDI_CPSUI_DITHER_FINE = 64043;
export const IDI_CPSUI_DITHER_LINEART = 64044;
export const IDI_CPSUI_SCALING = 64045;
export const IDI_CPSUI_COPY = 64046;
export const IDI_CPSUI_HTCLRADJ = 64047;
export const IDI_CPSUI_HALFTONE_SETUP = 64048;
export const IDI_CPSUI_WATERMARK = 64049;
export const IDI_CPSUI_ERROR = 64050;
export const IDI_CPSUI_ICM_OPTION = 64051;
export const IDI_CPSUI_ICM_METHOD = 64052;
export const IDI_CPSUI_ICM_INTENT = 64053;
export const IDI_CPSUI_STD_FORM = 64054;
export const IDI_CPSUI_OUTBIN = 64055;
export const IDI_CPSUI_OUTPUT = 64056;
export const IDI_CPSUI_GRAPHIC = 64057;
export const IDI_CPSUI_ADVANCE = 64058;
export const IDI_CPSUI_DOCUMENT = 64059;
export const IDI_CPSUI_DEVICE = 64060;
export const IDI_CPSUI_DEVICE2 = 64061;
export const IDI_CPSUI_PRINTER = 64062;
export const IDI_CPSUI_PRINTER2 = 64063;
export const IDI_CPSUI_PRINTER3 = 64064;
export const IDI_CPSUI_PRINTER4 = 64065;
export const IDI_CPSUI_OPTION = 64066;
export const IDI_CPSUI_OPTION2 = 64067;
export const IDI_CPSUI_STOP = 64068;
export const IDI_CPSUI_NOTINSTALLED = 64069;
export const IDI_CPSUI_WARNING_OVERLAY = 64070;
export const IDI_CPSUI_STOP_WARNING_OVERLAY = 64071;
export const IDI_CPSUI_GENERIC_OPTION = 64072;
export const IDI_CPSUI_GENERIC_ITEM = 64073;
export const IDI_CPSUI_RUN_DIALOG = 64074;
export const IDI_CPSUI_QUESTION = 64075;
export const IDI_CPSUI_FORMTRAYASSIGN = 64076;
export const IDI_CPSUI_PRINTER_FOLDER = 64077;
export const IDI_CPSUI_INSTALLABLE_OPTION = 64078;
export const IDI_CPSUI_PRINTER_FEATURE = 64079;
export const IDI_CPSUI_DEVICE_FEATURE = 64080;
export const IDI_CPSUI_FONTSUB = 64081;
export const IDI_CPSUI_POSTSCRIPT = 64082;
export const IDI_CPSUI_TELEPHONE = 64083;
export const IDI_CPSUI_DUPLEX_NONE_L = 64084;
export const IDI_CPSUI_DUPLEX_HORZ_L = 64085;
export const IDI_CPSUI_DUPLEX_VERT_L = 64086;
export const IDI_CPSUI_LF_PEN_PLOTTER = 64087;
export const IDI_CPSUI_SF_PEN_PLOTTER = 64088;
export const IDI_CPSUI_LF_RASTER_PLOTTER = 64089;
export const IDI_CPSUI_SF_RASTER_PLOTTER = 64090;
export const IDI_CPSUI_ROLL_PAPER = 64091;
export const IDI_CPSUI_PEN_CARROUSEL = 64092;
export const IDI_CPSUI_PLOTTER_PEN = 64093;
export const IDI_CPSUI_MANUAL_FEED = 64094;
export const IDI_CPSUI_FAX = 64095;
export const IDI_CPSUI_PAGE_PROTECT = 64096;
export const IDI_CPSUI_ENVELOPE_FEED = 64097;
export const IDI_CPSUI_FONTCART_SLOT = 64098;
export const IDI_CPSUI_LAYOUT_BMP_PORTRAIT = 64099;
export const IDI_CPSUI_LAYOUT_BMP_ARROWL = 64100;
export const IDI_CPSUI_LAYOUT_BMP_ARROWS = 64101;
export const IDI_CPSUI_LAYOUT_BMP_BOOKLETL = 64102;
export const IDI_CPSUI_LAYOUT_BMP_BOOKLETP = 64103;
export const IDI_CPSUI_LAYOUT_BMP_ARROWLR = 64104;
export const IDI_CPSUI_LAYOUT_BMP_ROT_PORT = 64105;
export const IDI_CPSUI_LAYOUT_BMP_BOOKLETL_NB = 64106;
export const IDI_CPSUI_LAYOUT_BMP_BOOKLETP_NB = 64107;
export const IDI_CPSUI_ROT_PORT = 64110;
export const IDI_CPSUI_NUP_BORDER = 64111;
export const IDI_CPSUI_ICONID_LAST = 64111;
export const IDS_CPSUI_STRID_FIRST = 64700;
export const IDS_CPSUI_SETUP = 64700;
export const IDS_CPSUI_MORE = 64701;
export const IDS_CPSUI_CHANGE = 64702;
export const IDS_CPSUI_OPTION = 64703;
export const IDS_CPSUI_OF = 64704;
export const IDS_CPSUI_RANGE_FROM = 64705;
export const IDS_CPSUI_TO = 64706;
export const IDS_CPSUI_COLON_SEP = 64707;
export const IDS_CPSUI_LEFT_ANGLE = 64708;
export const IDS_CPSUI_RIGHT_ANGLE = 64709;
export const IDS_CPSUI_SLASH_SEP = 64710;
export const IDS_CPSUI_PERCENT = 64711;
export const IDS_CPSUI_LBCB_NOSEL = 64712;
export const IDS_CPSUI_PROPERTIES = 64713;
export const IDS_CPSUI_DEFAULTDOCUMENT = 64714;
export const IDS_CPSUI_DOCUMENT = 64715;
export const IDS_CPSUI_ADVANCEDOCUMENT = 64716;
export const IDS_CPSUI_PRINTER = 64717;
export const IDS_CPSUI_AUTOSELECT = 64718;
export const IDS_CPSUI_PAPER_OUTPUT = 64719;
export const IDS_CPSUI_GRAPHIC = 64720;
export const IDS_CPSUI_OPTIONS = 64721;
export const IDS_CPSUI_ADVANCED = 64722;
export const IDS_CPSUI_STDDOCPROPTAB = 64723;
export const IDS_CPSUI_STDDOCPROPTVTAB = 64724;
export const IDS_CPSUI_DEVICEOPTIONS = 64725;
export const IDS_CPSUI_FALSE = 64726;
export const IDS_CPSUI_TRUE = 64727;
export const IDS_CPSUI_NO = 64728;
export const IDS_CPSUI_YES = 64729;
export const IDS_CPSUI_OFF = 64730;
export const IDS_CPSUI_ON = 64731;
export const IDS_CPSUI_DEFAULT = 64732;
export const IDS_CPSUI_ERROR = 64733;
export const IDS_CPSUI_NONE = 64734;
export const IDS_CPSUI_NOT = 64735;
export const IDS_CPSUI_EXIST = 64736;
export const IDS_CPSUI_NOTINSTALLED = 64737;
export const IDS_CPSUI_ORIENTATION = 64738;
export const IDS_CPSUI_SCALING = 64739;
export const IDS_CPSUI_NUM_OF_COPIES = 64740;
export const IDS_CPSUI_SOURCE = 64741;
export const IDS_CPSUI_PRINTQUALITY = 64742;
export const IDS_CPSUI_RESOLUTION = 64743;
export const IDS_CPSUI_COLOR_APPERANCE = 64744;
export const IDS_CPSUI_DUPLEX = 64745;
export const IDS_CPSUI_TTOPTION = 64746;
export const IDS_CPSUI_FORMNAME = 64747;
export const IDS_CPSUI_ICM = 64748;
export const IDS_CPSUI_ICMMETHOD = 64749;
export const IDS_CPSUI_ICMINTENT = 64750;
export const IDS_CPSUI_MEDIA = 64751;
export const IDS_CPSUI_DITHERING = 64752;
export const IDS_CPSUI_PORTRAIT = 64753;
export const IDS_CPSUI_LANDSCAPE = 64754;
export const IDS_CPSUI_ROT_LAND = 64755;
export const IDS_CPSUI_COLLATE = 64756;
export const IDS_CPSUI_COLLATED = 64757;
export const IDS_CPSUI_PRINTFLDSETTING = 64758;
export const IDS_CPSUI_DRAFT = 64759;
export const IDS_CPSUI_LOW = 64760;
export const IDS_CPSUI_MEDIUM = 64761;
export const IDS_CPSUI_HIGH = 64762;
export const IDS_CPSUI_PRESENTATION = 64763;
export const IDS_CPSUI_COLOR = 64764;
export const IDS_CPSUI_GRAYSCALE = 64765;
export const IDS_CPSUI_MONOCHROME = 64766;
export const IDS_CPSUI_SIMPLEX = 64767;
export const IDS_CPSUI_HORIZONTAL = 64768;
export const IDS_CPSUI_VERTICAL = 64769;
export const IDS_CPSUI_LONG_SIDE = 64770;
export const IDS_CPSUI_SHORT_SIDE = 64771;
export const IDS_CPSUI_TT_PRINTASGRAPHIC = 64772;
export const IDS_CPSUI_TT_DOWNLOADSOFT = 64773;
export const IDS_CPSUI_TT_DOWNLOADVECT = 64774;
export const IDS_CPSUI_TT_SUBDEV = 64775;
export const IDS_CPSUI_ICM_BLACKWHITE = 64776;
export const IDS_CPSUI_ICM_NO = 64777;
export const IDS_CPSUI_ICM_YES = 64778;
export const IDS_CPSUI_ICM_SATURATION = 64779;
export const IDS_CPSUI_ICM_CONTRAST = 64780;
export const IDS_CPSUI_ICM_COLORMETRIC = 64781;
export const IDS_CPSUI_STANDARD = 64782;
export const IDS_CPSUI_GLOSSY = 64783;
export const IDS_CPSUI_TRANSPARENCY = 64784;
export const IDS_CPSUI_REGULAR = 64785;
export const IDS_CPSUI_BOND = 64786;
export const IDS_CPSUI_COARSE = 64787;
export const IDS_CPSUI_FINE = 64788;
export const IDS_CPSUI_LINEART = 64789;
export const IDS_CPSUI_ERRDIFFUSE = 64790;
export const IDS_CPSUI_HALFTONE = 64791;
export const IDS_CPSUI_HTCLRADJ = 64792;
export const IDS_CPSUI_USE_HOST_HT = 64793;
export const IDS_CPSUI_USE_DEVICE_HT = 64794;
export const IDS_CPSUI_USE_PRINTER_HT = 64795;
export const IDS_CPSUI_OUTBINASSIGN = 64796;
export const IDS_CPSUI_WATERMARK = 64797;
export const IDS_CPSUI_FORMTRAYASSIGN = 64798;
export const IDS_CPSUI_UPPER_TRAY = 64799;
export const IDS_CPSUI_ONLYONE = 64800;
export const IDS_CPSUI_LOWER_TRAY = 64801;
export const IDS_CPSUI_MIDDLE_TRAY = 64802;
export const IDS_CPSUI_MANUAL_TRAY = 64803;
export const IDS_CPSUI_ENVELOPE_TRAY = 64804;
export const IDS_CPSUI_ENVMANUAL_TRAY = 64805;
export const IDS_CPSUI_TRACTOR_TRAY = 64806;
export const IDS_CPSUI_SMALLFMT_TRAY = 64807;
export const IDS_CPSUI_LARGEFMT_TRAY = 64808;
export const IDS_CPSUI_LARGECAP_TRAY = 64809;
export const IDS_CPSUI_CASSETTE_TRAY = 64810;
export const IDS_CPSUI_DEFAULT_TRAY = 64811;
export const IDS_CPSUI_FORMSOURCE = 64812;
export const IDS_CPSUI_MANUALFEED = 64813;
export const IDS_CPSUI_PRINTERMEM_KB = 64814;
export const IDS_CPSUI_PRINTERMEM_MB = 64815;
export const IDS_CPSUI_PAGEPROTECT = 64816;
export const IDS_CPSUI_HALFTONE_SETUP = 64817;
export const IDS_CPSUI_INSTFONTCART = 64818;
export const IDS_CPSUI_SLOT1 = 64819;
export const IDS_CPSUI_SLOT2 = 64820;
export const IDS_CPSUI_SLOT3 = 64821;
export const IDS_CPSUI_SLOT4 = 64822;
export const IDS_CPSUI_LEFT_SLOT = 64823;
export const IDS_CPSUI_RIGHT_SLOT = 64824;
export const IDS_CPSUI_STAPLER = 64825;
export const IDS_CPSUI_STAPLER_ON = 64826;
export const IDS_CPSUI_STAPLER_OFF = 64827;
export const IDS_CPSUI_STACKER = 64828;
export const IDS_CPSUI_MAILBOX = 64829;
export const IDS_CPSUI_COPY = 64830;
export const IDS_CPSUI_COPIES = 64831;
export const IDS_CPSUI_TOTAL = 64832;
export const IDS_CPSUI_MAKE = 64833;
export const IDS_CPSUI_PRINT = 64834;
export const IDS_CPSUI_FAX = 64835;
export const IDS_CPSUI_PLOT = 64836;
export const IDS_CPSUI_SLOW = 64837;
export const IDS_CPSUI_FAST = 64838;
export const IDS_CPSUI_ROTATED = 64839;
export const IDS_CPSUI_RESET = 64840;
export const IDS_CPSUI_ALL = 64841;
export const IDS_CPSUI_DEVICE = 64842;
export const IDS_CPSUI_SETTINGS = 64843;
export const IDS_CPSUI_REVERT = 64844;
export const IDS_CPSUI_CHANGES = 64845;
export const IDS_CPSUI_CHANGED = 64846;
export const IDS_CPSUI_WARNING = 64847;
export const IDS_CPSUI_ABOUT = 64848;
export const IDS_CPSUI_VERSION = 64849;
export const IDS_CPSUI_NO_NAME = 64850;
export const IDS_CPSUI_SETTING = 64851;
export const IDS_CPSUI_DEVICE_SETTINGS = 64852;
export const IDS_CPSUI_STDDOCPROPTAB1 = 64853;
export const IDS_CPSUI_STDDOCPROPTAB2 = 64854;
export const IDS_CPSUI_PAGEORDER = 64855;
export const IDS_CPSUI_FRONTTOBACK = 64856;
export const IDS_CPSUI_BACKTOFRONT = 64857;
export const IDS_CPSUI_QUALITY_SETTINGS = 64858;
export const IDS_CPSUI_QUALITY_DRAFT = 64859;
export const IDS_CPSUI_QUALITY_BETTER = 64860;
export const IDS_CPSUI_QUALITY_BEST = 64861;
export const IDS_CPSUI_QUALITY_CUSTOM = 64862;
export const IDS_CPSUI_OUTPUTBIN = 64863;
export const IDS_CPSUI_NUP = 64864;
export const IDS_CPSUI_NUP_NORMAL = 64865;
export const IDS_CPSUI_NUP_TWOUP = 64866;
export const IDS_CPSUI_NUP_FOURUP = 64867;
export const IDS_CPSUI_NUP_SIXUP = 64868;
export const IDS_CPSUI_NUP_NINEUP = 64869;
export const IDS_CPSUI_NUP_SIXTEENUP = 64870;
export const IDS_CPSUI_SIDE1 = 64871;
export const IDS_CPSUI_SIDE2 = 64872;
export const IDS_CPSUI_BOOKLET = 64873;
export const IDS_CPSUI_POSTER = 64874;
export const IDS_CPSUI_POSTER_2x2 = 64875;
export const IDS_CPSUI_POSTER_3x3 = 64876;
export const IDS_CPSUI_POSTER_4x4 = 64877;
export const IDS_CPSUI_NUP_DIRECTION = 64878;
export const IDS_CPSUI_RIGHT_THEN_DOWN = 64879;
export const IDS_CPSUI_DOWN_THEN_RIGHT = 64880;
export const IDS_CPSUI_LEFT_THEN_DOWN = 64881;
export const IDS_CPSUI_DOWN_THEN_LEFT = 64882;
export const IDS_CPSUI_MANUAL_DUPLEX = 64883;
export const IDS_CPSUI_MANUAL_DUPLEX_ON = 64884;
export const IDS_CPSUI_MANUAL_DUPLEX_OFF = 64885;
export const IDS_CPSUI_ROT_PORT = 64886;
export const IDS_CPSUI_STAPLE = 64887;
export const IDS_CPSUI_BOOKLET_EDGE = 64888;
export const IDS_CPSUI_BOOKLET_EDGE_LEFT = 64889;
export const IDS_CPSUI_BOOKLET_EDGE_RIGHT = 64890;
export const IDS_CPSUI_NUP_BORDER = 64891;
export const IDS_CPSUI_NUP_BORDERED = 64892;
export const IDS_CPSUI_STRID_LAST = 64892;
export const XPS_FP_PRINTER_NAME = `PrinterName`;
export const XPS_FP_PROGRESS_REPORT = `ProgressReport`;
export const XPS_FP_PRINTER_HANDLE = `PrinterHandle`;
export const XPS_FP_USER_PRINT_TICKET = `PerUserPrintTicket`;
export const XPS_FP_USER_TOKEN = `UserSecurityToken`;
export const XPS_FP_JOB_ID = `PrintJobId`;
export const XPS_FP_PRINT_CLASS_FACTORY = `PrintClassFactory`;
export const XPS_FP_OUTPUT_FILE = `PrintOutputFileName`;
export const XPS_FP_MS_CONTENT_TYPE = `DriverMultiContentType`;
export const XPS_FP_MS_CONTENT_TYPE_XPS = `XPS`;
export const XPS_FP_MS_CONTENT_TYPE_OPENXPS = `OpenXPS`;
export const XPS_FP_DRIVER_PROPERTY_BAG = `DriverPropertyBag`;
export const XPS_FP_QUEUE_PROPERTY_BAG = `QueuePropertyBag`;
export const XPS_FP_MERGED_DATAFILE_PATH = `MergedDataFilePath`;
export const XPS_FP_RESOURCE_DLL_PATHS = `ResourceDLLPaths`;
export const XPS_FP_JOB_LEVEL_PRINTTICKET = `JobPrintTicket`;
export const XPS_FP_PRINTDEVICECAPABILITIES = `PrintDeviceCapabilities`;
export const MXDC_ESCAPE = 4122;
export const MXDCOP_GET_FILENAME = 14;
export const MXDCOP_PRINTTICKET_FIXED_DOC_SEQ = 22;
export const MXDCOP_PRINTTICKET_FIXED_DOC = 24;
export const MXDCOP_PRINTTICKET_FIXED_PAGE = 26;
export const MXDCOP_SET_S0PAGE = 28;
export const MXDCOP_SET_S0PAGE_RESOURCE = 30;
export const MXDCOP_SET_XPSPASSTHRU_MODE = 32;
export const S_DEVCAP_OUTPUT_FULL_REPLACEMENT = 1945556224435346433n;
export const E_VERSION_NOT_SUPPORTED = 2147745793;
export const S_NO_CONFLICT = 262145;
export const S_CONFLICT_RESOLVED = 262146;
export const PRINTER_OEMINTF_VERSION = 65536;
export const OEM_MODE_PUBLISHER = 1;
export const OEMGI_GETSIGNATURE = 1;
export const OEMGI_GETINTERFACEVERSION = 2;
export const OEMGI_GETVERSION = 3;
export const OEMGI_GETPUBLISHERINFO = 4;
export const OEMGI_GETREQUESTEDHELPERINTERFACES = 5;
export const OEMPUBLISH_DEFAULT = 0;
export const OEMPUBLISH_IPRINTCOREHELPER = 1;
export const OEMDM_SIZE = 1;
export const OEMDM_DEFAULT = 2;
export const OEMDM_CONVERT = 3;
export const OEMDM_MERGE = 4;
export const OEMGDS_MIN_DOCSTICKY = 1;
export const OEMGDS_PSDM_FLAGS = 1;
export const OEMGDS_PSDM_DIALECT = 2;
export const OEMGDS_PSDM_TTDLFMT = 3;
export const OEMGDS_PSDM_NUP = 4;
export const OEMGDS_PSDM_PSLEVEL = 5;
export const OEMGDS_PSDM_CUSTOMSIZE = 6;
export const OEMGDS_UNIDM_GPDVER = 16384;
export const OEMGDS_UNIDM_FLAGS = 16385;
export const OEMGDS_MIN_PRINTERSTICKY = 32768;
export const OEMGDS_PRINTFLAGS = 32768;
export const OEMGDS_FREEMEM = 32769;
export const OEMGDS_JOBTIMEOUT = 32770;
export const OEMGDS_WAITTIMEOUT = 32771;
export const OEMGDS_PROTOCOL = 32772;
export const OEMGDS_MINOUTLINE = 32773;
export const OEMGDS_MAXBITMAP = 32774;
export const OEMGDS_MAX = 65536;
export const GPD_OEMCUSTOMDATA = 1;
export const MV_UPDATE = 1;
export const MV_RELATIVE = 2;
export const MV_GRAPHICS = 4;
export const MV_PHYSICAL = 8;
export const MV_SENDXMOVECMD = 16;
export const MV_SENDYMOVECMD = 32;
export const OEMTTY_INFO_MARGINS = 1;
export const OEMTTY_INFO_CODEPAGE = 2;
export const OEMTTY_INFO_NUM_UFMS = 3;
export const OEMTTY_INFO_UFM_IDS = 4;
export const UFOFLAG_TTFONT = 1;
export const UFOFLAG_TTDOWNLOAD_BITMAP = 2;
export const UFOFLAG_TTDOWNLOAD_TTOUTLINE = 4;
export const UFOFLAG_TTOUTLINE_BOLD_SIM = 8;
export const UFOFLAG_TTOUTLINE_ITALIC_SIM = 16;
export const UFOFLAG_TTOUTLINE_VERTICAL = 32;
export const UFOFLAG_TTSUBSTITUTED = 64;
export const UFO_GETINFO_FONTOBJ = 1;
export const UFO_GETINFO_GLYPHSTRING = 2;
export const UFO_GETINFO_GLYPHBITMAP = 3;
export const UFO_GETINFO_GLYPHWIDTH = 4;
export const UFO_GETINFO_MEMORY = 5;
export const UFO_GETINFO_STDVARIABLE = 6;
export const FNT_INFO_PRINTDIRINCCDEGREES = 0;
export const FNT_INFO_GRAYPERCENTAGE = 1;
export const FNT_INFO_NEXTFONTID = 2;
export const FNT_INFO_NEXTGLYPH = 3;
export const FNT_INFO_FONTHEIGHT = 4;
export const FNT_INFO_FONTWIDTH = 5;
export const FNT_INFO_FONTBOLD = 6;
export const FNT_INFO_FONTITALIC = 7;
export const FNT_INFO_FONTUNDERLINE = 8;
export const FNT_INFO_FONTSTRIKETHRU = 9;
export const FNT_INFO_CURRENTFONTID = 10;
export const FNT_INFO_TEXTYRES = 11;
export const FNT_INFO_TEXTXRES = 12;
export const FNT_INFO_FONTMAXWIDTH = 13;
export const FNT_INFO_MAX = 14;
export const TTDOWNLOAD_DONTCARE = 0;
export const TTDOWNLOAD_GRAPHICS = 1;
export const TTDOWNLOAD_BITMAP = 2;
export const TTDOWNLOAD_TTOUTLINE = 3;
export const TYPE_UNICODE = 1;
export const TYPE_TRANSDATA = 2;
export const TYPE_GLYPHHANDLE = 3;
export const TYPE_GLYPHID = 4;
export const PDEV_ADJUST_PAPER_MARGIN_TYPE = 1;
export const PDEV_HOSTFONT_ENABLED_TYPE = 2;
export const PDEV_USE_TRUE_COLOR_TYPE = 3;
export const OEMCUIP_DOCPROP = 1;
export const OEMCUIP_PRNPROP = 2;
export const CUSTOMPARAM_WIDTH = 0;
export const CUSTOMPARAM_HEIGHT = 1;
export const CUSTOMPARAM_WIDTHOFFSET = 2;
export const CUSTOMPARAM_HEIGHTOFFSET = 3;
export const CUSTOMPARAM_ORIENTATION = 4;
export const CUSTOMPARAM_MAX = 5;
export const SETOPTIONS_FLAG_RESOLVE_CONFLICT = 1;
export const SETOPTIONS_FLAG_KEEP_CONFLICT = 2;
export const SETOPTIONS_RESULT_NO_CONFLICT = 0;
export const SETOPTIONS_RESULT_CONFLICT_RESOLVED = 1;
export const SETOPTIONS_RESULT_CONFLICT_REMAINED = 2;
export const UNIFM_VERSION_1_0 = 65536;
export const UFM_SOFT = 1;
export const UFM_CART = 2;
export const UFM_SCALABLE = 4;
export const DF_TYPE_HPINTELLIFONT = 0;
export const DF_TYPE_TRUETYPE = 1;
export const DF_TYPE_PST1 = 2;
export const DF_TYPE_CAPSL = 3;
export const DF_TYPE_OEM1 = 4;
export const DF_TYPE_OEM2 = 5;
export const DF_NOITALIC = 1;
export const DF_NOUNDER = 2;
export const DF_XM_CR = 4;
export const DF_NO_BOLD = 8;
export const DF_NO_DOUBLE_UNDERLINE = 16;
export const DF_NO_STRIKETHRU = 32;
export const DF_BKSP_OK = 64;
export const UNI_GLYPHSETDATA_VERSION_1_0 = 65536;
export const MTYPE_FORMAT_MASK = 7;
export const MTYPE_COMPOSE = 1;
export const MTYPE_DIRECT = 2;
export const MTYPE_PAIRED = 4;
export const MTYPE_DOUBLEBYTECHAR_MASK = 24;
export const MTYPE_SINGLE = 8;
export const MTYPE_DOUBLE = 16;
export const MTYPE_PREDEFIN_MASK = 224;
export const MTYPE_REPLACE = 32;
export const MTYPE_ADD = 64;
export const MTYPE_DISABLE = 128;
export const CC_NOPRECNV = 65535;
export const CC_DEFAULT = 0;
export const CC_CP437 = `-1`;
export const CC_CP850 = `-2`;
export const CC_CP863 = `-3`;
export const CC_BIG5 = `-10`;
export const CC_ISC = `-11`;
export const CC_JIS = `-12`;
export const CC_JIS_ANK = `-13`;
export const CC_NS86 = `-14`;
export const CC_TCA = `-15`;
export const CC_GB2312 = `-16`;
export const CC_SJIS = `-17`;
export const CC_WANSUNG = `-18`;
export const UFF_VERSION_NUMBER = 65537;
export const FONT_DIR_SORTED = 1;
export const FONT_FL_UFM = 1;
export const FONT_FL_IFI = 2;
export const FONT_FL_SOFTFONT = 4;
export const FONT_FL_PERMANENT_SF = 8;
export const FONT_FL_DEVICEFONT = 16;
export const FONT_FL_GLYPHSET_GTT = 32;
export const FONT_FL_GLYPHSET_RLE = 64;
export const FONT_FL_RESERVED = 32768;
export const FG_CANCHANGE = 128;
export const WM_FI_FILENAME = 900;
export const UNKNOWN_PROTOCOL = 0;
export const PROTOCOL_UNKNOWN_TYPE = 0;
export const RAWTCP = 1;
export const PROTOCOL_RAWTCP_TYPE = 1;
export const LPR = 2;
export const PROTOCOL_LPR_TYPE = 2;
export const MAX_PORTNAME_LEN = 64;
export const MAX_NETWORKNAME_LEN = 49;
export const MAX_NETWORKNAME2_LEN = 128;
export const MAX_SNMP_COMMUNITY_STR_LEN = 33;
export const MAX_QUEUENAME_LEN = 33;
export const MAX_IPADDR_STR_LEN = 16;
export const MAX_ADDRESS_STR_LEN = 13;
export const MAX_DEVICEDESCRIPTION_STR_LEN = 257;
export const DPS_NOPERMISSION = 1;
export const DM_ADVANCED = 16;
export const DM_NOPERMISSION = 32;
export const DM_USER_DEFAULT = 64;
export const DM_PROMPT_NON_MODAL = 1073741824;
export const DM_INVALIDATE_DRIVER_CACHE = 536870912;
export const DM_RESERVED = 2147483648;
export const CDM_CONVERT = 1;
export const CDM_CONVERT351 = 2;
export const CDM_DRIVER_DEFAULT = 4;
export const DOCUMENTEVENT_FIRST = 1;
export const DOCUMENTEVENT_CREATEDCPRE = 1;
export const DOCUMENTEVENT_CREATEDCPOST = 2;
export const DOCUMENTEVENT_RESETDCPRE = 3;
export const DOCUMENTEVENT_RESETDCPOST = 4;
export const DOCUMENTEVENT_STARTDOC = 5;
export const DOCUMENTEVENT_STARTDOCPRE = 5;
export const DOCUMENTEVENT_STARTPAGE = 6;
export const DOCUMENTEVENT_ENDPAGE = 7;
export const DOCUMENTEVENT_ENDDOC = 8;
export const DOCUMENTEVENT_ENDDOCPRE = 8;
export const DOCUMENTEVENT_ABORTDOC = 9;
export const DOCUMENTEVENT_DELETEDC = 10;
export const DOCUMENTEVENT_ESCAPE = 11;
export const DOCUMENTEVENT_ENDDOCPOST = 12;
export const DOCUMENTEVENT_STARTDOCPOST = 13;
export const DOCUMENTEVENT_QUERYFILTER = 14;
export const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTSEQUENCEPRE = 1;
export const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTPRE = 2;
export const DOCUMENTEVENT_XPS_ADDFIXEDPAGEEPRE = 3;
export const DOCUMENTEVENT_XPS_ADDFIXEDPAGEPOST = 4;
export const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTPOST = 5;
export const DOCUMENTEVENT_XPS_CANCELJOB = 6;
export const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTSEQUENCEPRINTTICKETPRE = 7;
export const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTPRINTTICKETPRE = 8;
export const DOCUMENTEVENT_XPS_ADDFIXEDPAGEPRINTTICKETPRE = 9;
export const DOCUMENTEVENT_XPS_ADDFIXEDPAGEPRINTTICKETPOST = 10;
export const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTPRINTTICKETPOST = 11;
export const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTSEQUENCEPRINTTICKETPOST = 12;
export const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTSEQUENCEPOST = 13;
export const DOCUMENTEVENT_LAST = 15;
export const DOCUMENTEVENT_SPOOLED = 65536;
export const DOCUMENTEVENT_SUCCESS = 1;
export const DOCUMENTEVENT_UNSUPPORTED = 0;
export const DOCUMENTEVENT_FAILURE = `-1`;
export const PRINTER_EVENT_CONFIGURATION_CHANGE = 0;
export const PRINTER_EVENT_ADD_CONNECTION = 1;
export const PRINTER_EVENT_DELETE_CONNECTION = 2;
export const PRINTER_EVENT_INITIALIZE = 3;
export const PRINTER_EVENT_DELETE = 4;
export const PRINTER_EVENT_CACHE_REFRESH = 5;
export const PRINTER_EVENT_CACHE_DELETE = 6;
export const PRINTER_EVENT_ATTRIBUTES_CHANGED = 7;
export const PRINTER_EVENT_CONFIGURATION_UPDATE = 8;
export const PRINTER_EVENT_ADD_CONNECTION_NO_UI = 9;
export const PRINTER_EVENT_DELETE_CONNECTION_NO_UI = 10;
export const PRINTER_EVENT_FLAG_NO_UI = 1;
export const DRIVER_EVENT_INITIALIZE = 1;
export const DRIVER_EVENT_DELETE = 2;
export const BORDER_PRINT = 0;
export const NO_BORDER_PRINT = 1;
export const NORMAL_PRINT = 0;
export const REVERSE_PRINT = 1;
export const BOOKLET_PRINT = 2;
export const NO_COLOR_OPTIMIZATION = 0;
export const COLOR_OPTIMIZATION = 1;
export const REVERSE_PAGES_FOR_REVERSE_DUPLEX = 1;
export const RIGHT_THEN_DOWN = 1;
export const BOOKLET_EDGE_LEFT = 0;
export const BOOKLET_EDGE_RIGHT = 1;
export const QCP_DEVICEPROFILE = 0;
export const QCP_SOURCEPROFILE = 1;
export const QCP_PROFILEMEMORY = 1;
export const QCP_PROFILEDISK = 2;
export const SPLPRINTER_USER_MODE_PRINTER_DRIVER = `SPLUserModePrinterDriver`;
export const EMF_PP_COLOR_OPTIMIZATION = 1;
export const PRINTER_NOTIFY_STATUS_ENDPOINT = 1;
export const PRINTER_NOTIFY_STATUS_POLL = 2;
export const PRINTER_NOTIFY_STATUS_INFO = 4;
export const ROUTER_UNKNOWN = 0;
export const ROUTER_SUCCESS = 1;
export const ROUTER_STOP_ROUTING = 2;
export const FILL_WITH_DEFAULTS = 1;
export const PRINTER_NOTIFY_INFO_DATA_COMPACT = 1;
export const COPYFILE_EVENT_SET_PRINTER_DATAEX = 1;
export const COPYFILE_EVENT_DELETE_PRINTER = 2;
export const COPYFILE_EVENT_ADD_PRINTER_CONNECTION = 3;
export const COPYFILE_EVENT_DELETE_PRINTER_CONNECTION = 4;
export const COPYFILE_EVENT_FILES_CHANGED = 5;
export const COPYFILE_FLAG_CLIENT_SPOOLER = 1;
export const COPYFILE_FLAG_SERVER_SPOOLER = 2;
export const DSPRINT_PUBLISH = 1;
export const DSPRINT_UPDATE = 2;
export const DSPRINT_UNPUBLISH = 4;
export const DSPRINT_REPUBLISH = 8;
export const DSPRINT_PENDING = 2147483648;
export const PRINTER_CONTROL_PAUSE = 1;
export const PRINTER_CONTROL_RESUME = 2;
export const PRINTER_CONTROL_PURGE = 3;
export const PRINTER_CONTROL_SET_STATUS = 4;
export const PRINTER_STATUS_PAUSED = 1;
export const PRINTER_STATUS_ERROR = 2;
export const PRINTER_STATUS_PENDING_DELETION = 4;
export const PRINTER_STATUS_PAPER_JAM = 8;
export const PRINTER_STATUS_PAPER_OUT = 16;
export const PRINTER_STATUS_MANUAL_FEED = 32;
export const PRINTER_STATUS_PAPER_PROBLEM = 64;
export const PRINTER_STATUS_OFFLINE = 128;
export const PRINTER_STATUS_IO_ACTIVE = 256;
export const PRINTER_STATUS_BUSY = 512;
export const PRINTER_STATUS_PRINTING = 1024;
export const PRINTER_STATUS_OUTPUT_BIN_FULL = 2048;
export const PRINTER_STATUS_NOT_AVAILABLE = 4096;
export const PRINTER_STATUS_WAITING = 8192;
export const PRINTER_STATUS_PROCESSING = 16384;
export const PRINTER_STATUS_INITIALIZING = 32768;
export const PRINTER_STATUS_WARMING_UP = 65536;
export const PRINTER_STATUS_TONER_LOW = 131072;
export const PRINTER_STATUS_NO_TONER = 262144;
export const PRINTER_STATUS_PAGE_PUNT = 524288;
export const PRINTER_STATUS_USER_INTERVENTION = 1048576;
export const PRINTER_STATUS_OUT_OF_MEMORY = 2097152;
export const PRINTER_STATUS_DOOR_OPEN = 4194304;
export const PRINTER_STATUS_SERVER_UNKNOWN = 8388608;
export const PRINTER_STATUS_POWER_SAVE = 16777216;
export const PRINTER_STATUS_SERVER_OFFLINE = 33554432;
export const PRINTER_STATUS_DRIVER_UPDATE_NEEDED = 67108864;
export const PRINTER_ATTRIBUTE_QUEUED = 1;
export const PRINTER_ATTRIBUTE_DIRECT = 2;
export const PRINTER_ATTRIBUTE_DEFAULT = 4;
export const PRINTER_ATTRIBUTE_SHARED = 8;
export const PRINTER_ATTRIBUTE_NETWORK = 16;
export const PRINTER_ATTRIBUTE_HIDDEN = 32;
export const PRINTER_ATTRIBUTE_LOCAL = 64;
export const PRINTER_ATTRIBUTE_ENABLE_DEVQ = 128;
export const PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS = 256;
export const PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST = 512;
export const PRINTER_ATTRIBUTE_WORK_OFFLINE = 1024;
export const PRINTER_ATTRIBUTE_ENABLE_BIDI = 2048;
export const PRINTER_ATTRIBUTE_RAW_ONLY = 4096;
export const PRINTER_ATTRIBUTE_PUBLISHED = 8192;
export const PRINTER_ATTRIBUTE_FAX = 16384;
export const PRINTER_ATTRIBUTE_TS = 32768;
export const PRINTER_ATTRIBUTE_PUSHED_USER = 131072;
export const PRINTER_ATTRIBUTE_PUSHED_MACHINE = 262144;
export const PRINTER_ATTRIBUTE_MACHINE = 524288;
export const PRINTER_ATTRIBUTE_FRIENDLY_NAME = 1048576;
export const PRINTER_ATTRIBUTE_TS_GENERIC_DRIVER = 2097152;
export const PRINTER_ATTRIBUTE_PER_USER = 4194304;
export const PRINTER_ATTRIBUTE_ENTERPRISE_CLOUD = 8388608;
export const NO_PRIORITY = 0;
export const MAX_PRIORITY = 99;
export const MIN_PRIORITY = 1;
export const DEF_PRIORITY = 1;
export const JOB_CONTROL_PAUSE = 1;
export const JOB_CONTROL_RESUME = 2;
export const JOB_CONTROL_CANCEL = 3;
export const JOB_CONTROL_RESTART = 4;
export const JOB_CONTROL_DELETE = 5;
export const JOB_CONTROL_SENT_TO_PRINTER = 6;
export const JOB_CONTROL_LAST_PAGE_EJECTED = 7;
export const JOB_CONTROL_RETAIN = 8;
export const JOB_CONTROL_RELEASE = 9;
export const JOB_STATUS_PAUSED = 1;
export const JOB_STATUS_ERROR = 2;
export const JOB_STATUS_DELETING = 4;
export const JOB_STATUS_SPOOLING = 8;
export const JOB_STATUS_PRINTING = 16;
export const JOB_STATUS_OFFLINE = 32;
export const JOB_STATUS_PAPEROUT = 64;
export const JOB_STATUS_PRINTED = 128;
export const JOB_STATUS_DELETED = 256;
export const JOB_STATUS_BLOCKED_DEVQ = 512;
export const JOB_STATUS_USER_INTERVENTION = 1024;
export const JOB_STATUS_RESTART = 2048;
export const JOB_STATUS_COMPLETE = 4096;
export const JOB_STATUS_RETAINED = 8192;
export const JOB_STATUS_RENDERING_LOCALLY = 16384;
export const JOB_POSITION_UNSPECIFIED = 0;
export const PRINTER_DRIVER_PACKAGE_AWARE = 1;
export const PRINTER_DRIVER_XPS = 2;
export const PRINTER_DRIVER_SANDBOX_ENABLED = 4;
export const PRINTER_DRIVER_CLASS = 8;
export const PRINTER_DRIVER_DERIVED = 16;
export const PRINTER_DRIVER_NOT_SHAREABLE = 32;
export const PRINTER_DRIVER_CATEGORY_FAX = 64;
export const PRINTER_DRIVER_CATEGORY_FILE = 128;
export const PRINTER_DRIVER_CATEGORY_VIRTUAL = 256;
export const PRINTER_DRIVER_CATEGORY_SERVICE = 512;
export const PRINTER_DRIVER_SOFT_RESET_REQUIRED = 1024;
export const PRINTER_DRIVER_SANDBOX_DISABLED = 2048;
export const PRINTER_DRIVER_CATEGORY_3D = 4096;
export const PRINTER_DRIVER_CATEGORY_CLOUD = 8192;
export const DRIVER_KERNELMODE = 1;
export const DRIVER_USERMODE = 2;
export const DPD_DELETE_UNUSED_FILES = 1;
export const DPD_DELETE_SPECIFIC_VERSION = 2;
export const DPD_DELETE_ALL_FILES = 4;
export const APD_STRICT_UPGRADE = 1;
export const APD_STRICT_DOWNGRADE = 2;
export const APD_COPY_ALL_FILES = 4;
export const APD_COPY_NEW_FILES = 8;
export const APD_COPY_FROM_DIRECTORY = 16;
export const STRING_NONE = 1;
export const STRING_MUIDLL = 2;
export const STRING_LANGPAIR = 4;
export const MAX_FORM_KEYWORD_LENGTH = 64;
export const DI_CHANNEL = 1;
export const DI_READ_SPOOL_JOB = 3;
export const DI_MEMORYMAP_WRITE = 1;
export const FORM_USER = 0;
export const FORM_BUILTIN = 1;
export const FORM_PRINTER = 2;
export const PPCAPS_RIGHT_THEN_DOWN = 1;
export const PPCAPS_BORDER_PRINT = 1;
export const PPCAPS_BOOKLET_EDGE = 1;
export const PPCAPS_REVERSE_PAGES_FOR_REVERSE_DUPLEX = 1;
export const PPCAPS_SQUARE_SCALING = 1;
export const PORT_TYPE_WRITE = 1;
export const PORT_TYPE_READ = 2;
export const PORT_TYPE_REDIRECTED = 4;
export const PORT_TYPE_NET_ATTACHED = 8;
export const PORT_STATUS_TYPE_ERROR = 1;
export const PORT_STATUS_TYPE_WARNING = 2;
export const PORT_STATUS_TYPE_INFO = 3;
export const PORT_STATUS_OFFLINE = 1;
export const PORT_STATUS_PAPER_JAM = 2;
export const PORT_STATUS_PAPER_OUT = 3;
export const PORT_STATUS_OUTPUT_BIN_FULL = 4;
export const PORT_STATUS_PAPER_PROBLEM = 5;
export const PORT_STATUS_NO_TONER = 6;
export const PORT_STATUS_DOOR_OPEN = 7;
export const PORT_STATUS_USER_INTERVENTION = 8;
export const PORT_STATUS_OUT_OF_MEMORY = 9;
export const PORT_STATUS_TONER_LOW = 10;
export const PORT_STATUS_WARMING_UP = 11;
export const PORT_STATUS_POWER_SAVE = 12;
export const PRINTER_ENUM_DEFAULT = 1;
export const PRINTER_ENUM_LOCAL = 2;
export const PRINTER_ENUM_CONNECTIONS = 4;
export const PRINTER_ENUM_FAVORITE = 4;
export const PRINTER_ENUM_NAME = 8;
export const PRINTER_ENUM_REMOTE = 16;
export const PRINTER_ENUM_SHARED = 32;
export const PRINTER_ENUM_NETWORK = 64;
export const PRINTER_ENUM_EXPAND = 16384;
export const PRINTER_ENUM_CONTAINER = 32768;
export const PRINTER_ENUM_ICONMASK = 16711680;
export const PRINTER_ENUM_ICON1 = 65536;
export const PRINTER_ENUM_ICON2 = 131072;
export const PRINTER_ENUM_ICON3 = 262144;
export const PRINTER_ENUM_ICON4 = 524288;
export const PRINTER_ENUM_ICON5 = 1048576;
export const PRINTER_ENUM_ICON6 = 2097152;
export const PRINTER_ENUM_ICON7 = 4194304;
export const PRINTER_ENUM_ICON8 = 8388608;
export const PRINTER_ENUM_HIDE = 16777216;
export const PRINTER_ENUM_CATEGORY_ALL = 33554432;
export const PRINTER_ENUM_CATEGORY_3D = 67108864;
export const SPOOL_FILE_PERSISTENT = 1;
export const SPOOL_FILE_TEMPORARY = 2;
export const PRINTER_NOTIFY_TYPE = 0;
export const JOB_NOTIFY_TYPE = 1;
export const SERVER_NOTIFY_TYPE = 2;
export const PRINTER_NOTIFY_FIELD_SERVER_NAME = 0;
export const PRINTER_NOTIFY_FIELD_PRINTER_NAME = 1;
export const PRINTER_NOTIFY_FIELD_SHARE_NAME = 2;
export const PRINTER_NOTIFY_FIELD_PORT_NAME = 3;
export const PRINTER_NOTIFY_FIELD_DRIVER_NAME = 4;
export const PRINTER_NOTIFY_FIELD_COMMENT = 5;
export const PRINTER_NOTIFY_FIELD_LOCATION = 6;
export const PRINTER_NOTIFY_FIELD_DEVMODE = 7;
export const PRINTER_NOTIFY_FIELD_SEPFILE = 8;
export const PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR = 9;
export const PRINTER_NOTIFY_FIELD_PARAMETERS = 10;
export const PRINTER_NOTIFY_FIELD_DATATYPE = 11;
export const PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR = 12;
export const PRINTER_NOTIFY_FIELD_ATTRIBUTES = 13;
export const PRINTER_NOTIFY_FIELD_PRIORITY = 14;
export const PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY = 15;
export const PRINTER_NOTIFY_FIELD_START_TIME = 16;
export const PRINTER_NOTIFY_FIELD_UNTIL_TIME = 17;
export const PRINTER_NOTIFY_FIELD_STATUS = 18;
export const PRINTER_NOTIFY_FIELD_STATUS_STRING = 19;
export const PRINTER_NOTIFY_FIELD_CJOBS = 20;
export const PRINTER_NOTIFY_FIELD_AVERAGE_PPM = 21;
export const PRINTER_NOTIFY_FIELD_TOTAL_PAGES = 22;
export const PRINTER_NOTIFY_FIELD_PAGES_PRINTED = 23;
export const PRINTER_NOTIFY_FIELD_TOTAL_BYTES = 24;
export const PRINTER_NOTIFY_FIELD_BYTES_PRINTED = 25;
export const PRINTER_NOTIFY_FIELD_OBJECT_GUID = 26;
export const PRINTER_NOTIFY_FIELD_FRIENDLY_NAME = 27;
export const PRINTER_NOTIFY_FIELD_BRANCH_OFFICE_PRINTING = 28;
export const JOB_NOTIFY_FIELD_PRINTER_NAME = 0;
export const JOB_NOTIFY_FIELD_MACHINE_NAME = 1;
export const JOB_NOTIFY_FIELD_PORT_NAME = 2;
export const JOB_NOTIFY_FIELD_USER_NAME = 3;
export const JOB_NOTIFY_FIELD_NOTIFY_NAME = 4;
export const JOB_NOTIFY_FIELD_DATATYPE = 5;
export const JOB_NOTIFY_FIELD_PRINT_PROCESSOR = 6;
export const JOB_NOTIFY_FIELD_PARAMETERS = 7;
export const JOB_NOTIFY_FIELD_DRIVER_NAME = 8;
export const JOB_NOTIFY_FIELD_DEVMODE = 9;
export const JOB_NOTIFY_FIELD_STATUS = 10;
export const JOB_NOTIFY_FIELD_STATUS_STRING = 11;
export const JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR = 12;
export const JOB_NOTIFY_FIELD_DOCUMENT = 13;
export const JOB_NOTIFY_FIELD_PRIORITY = 14;
export const JOB_NOTIFY_FIELD_POSITION = 15;
export const JOB_NOTIFY_FIELD_SUBMITTED = 16;
export const JOB_NOTIFY_FIELD_START_TIME = 17;
export const JOB_NOTIFY_FIELD_UNTIL_TIME = 18;
export const JOB_NOTIFY_FIELD_TIME = 19;
export const JOB_NOTIFY_FIELD_TOTAL_PAGES = 20;
export const JOB_NOTIFY_FIELD_PAGES_PRINTED = 21;
export const JOB_NOTIFY_FIELD_TOTAL_BYTES = 22;
export const JOB_NOTIFY_FIELD_BYTES_PRINTED = 23;
export const JOB_NOTIFY_FIELD_REMOTE_JOB_ID = 24;
export const SERVER_NOTIFY_FIELD_PRINT_DRIVER_ISOLATION_GROUP = 0;
export const PRINTER_NOTIFY_CATEGORY_ALL = 4096;
export const PRINTER_NOTIFY_CATEGORY_3D = 8192;
export const PRINTER_NOTIFY_OPTIONS_REFRESH = 1;
export const PRINTER_NOTIFY_INFO_DISCARDED = 1;
export const BIDI_ACTION_ENUM_SCHEMA = `EnumSchema`;
export const BIDI_ACTION_GET = `Get`;
export const BIDI_ACTION_SET = `Set`;
export const BIDI_ACTION_GET_ALL = `GetAll`;
export const BIDI_ACTION_GET_WITH_ARGUMENT = `GetWithArgument`;
export const BIDI_ACCESS_ADMINISTRATOR = 1;
export const BIDI_ACCESS_USER = 2;
export const ERROR_BIDI_STATUS_OK = 0;
export const ERROR_BIDI_ERROR_BASE = 13000;
export const ERROR_BIDI_STATUS_WARNING = 13001;
export const ERROR_BIDI_SCHEMA_READ_ONLY = 13002;
export const ERROR_BIDI_SERVER_OFFLINE = 13003;
export const ERROR_BIDI_DEVICE_OFFLINE = 13004;
export const ERROR_BIDI_SCHEMA_NOT_SUPPORTED = 13005;
export const ERROR_BIDI_SET_DIFFERENT_TYPE = 13006;
export const ERROR_BIDI_SET_MULTIPLE_SCHEMAPATH = 13007;
export const ERROR_BIDI_SET_INVALID_SCHEMAPATH = 13008;
export const ERROR_BIDI_SET_UNKNOWN_FAILURE = 13009;
export const ERROR_BIDI_SCHEMA_WRITE_ONLY = 13010;
export const ERROR_BIDI_GET_REQUIRES_ARGUMENT = 13011;
export const ERROR_BIDI_GET_ARGUMENT_NOT_SUPPORTED = 13012;
export const ERROR_BIDI_GET_MISSING_ARGUMENT = 13013;
export const ERROR_BIDI_DEVICE_CONFIG_UNCHANGED = 13014;
export const ERROR_BIDI_NO_LOCALIZED_RESOURCES = 13015;
export const ERROR_BIDI_NO_BIDI_SCHEMA_EXTENSIONS = 13016;
export const ERROR_BIDI_UNSUPPORTED_CLIENT_LANGUAGE = 13017;
export const ERROR_BIDI_UNSUPPORTED_RESOURCE_FORMAT = 13018;
export const PRINTER_CHANGE_ADD_PRINTER = 1;
export const PRINTER_CHANGE_SET_PRINTER = 2;
export const PRINTER_CHANGE_DELETE_PRINTER = 4;
export const PRINTER_CHANGE_FAILED_CONNECTION_PRINTER = 8;
export const PRINTER_CHANGE_PRINTER = 255;
export const PRINTER_CHANGE_ADD_JOB = 256;
export const PRINTER_CHANGE_SET_JOB = 512;
export const PRINTER_CHANGE_DELETE_JOB = 1024;
export const PRINTER_CHANGE_WRITE_JOB = 2048;
export const PRINTER_CHANGE_JOB = 65280;
export const PRINTER_CHANGE_ADD_FORM = 65536;
export const PRINTER_CHANGE_SET_FORM = 131072;
export const PRINTER_CHANGE_DELETE_FORM = 262144;
export const PRINTER_CHANGE_FORM = 458752;
export const PRINTER_CHANGE_ADD_PORT = 1048576;
export const PRINTER_CHANGE_CONFIGURE_PORT = 2097152;
export const PRINTER_CHANGE_DELETE_PORT = 4194304;
export const PRINTER_CHANGE_PORT = 7340032;
export const PRINTER_CHANGE_ADD_PRINT_PROCESSOR = 16777216;
export const PRINTER_CHANGE_DELETE_PRINT_PROCESSOR = 67108864;
export const PRINTER_CHANGE_PRINT_PROCESSOR = 117440512;
export const PRINTER_CHANGE_SERVER = 134217728;
export const PRINTER_CHANGE_ADD_PRINTER_DRIVER = 268435456;
export const PRINTER_CHANGE_SET_PRINTER_DRIVER = 536870912;
export const PRINTER_CHANGE_DELETE_PRINTER_DRIVER = 1073741824;
export const PRINTER_CHANGE_PRINTER_DRIVER = 1879048192;
export const PRINTER_CHANGE_TIMEOUT = 2147483648;
export const PRINTER_CHANGE_ALL = 2138570751;
export const PRINTER_ERROR_INFORMATION = 2147483648;
export const PRINTER_ERROR_WARNING = 1073741824;
export const PRINTER_ERROR_SEVERE = 536870912;
export const PRINTER_ERROR_OUTOFPAPER = 1;
export const PRINTER_ERROR_JAM = 2;
export const PRINTER_ERROR_OUTOFTONER = 4;
export const SPLREG_DEFAULT_SPOOL_DIRECTORY = `DefaultSpoolDirectory`;
export const SPLREG_PORT_THREAD_PRIORITY_DEFAULT = `PortThreadPriorityDefault`;
export const SPLREG_PORT_THREAD_PRIORITY = `PortThreadPriority`;
export const SPLREG_SCHEDULER_THREAD_PRIORITY_DEFAULT = `SchedulerThreadPriorityDefault`;
export const SPLREG_SCHEDULER_THREAD_PRIORITY = `SchedulerThreadPriority`;
export const SPLREG_BEEP_ENABLED = `BeepEnabled`;
export const SPLREG_NET_POPUP = `NetPopup`;
export const SPLREG_RETRY_POPUP = `RetryPopup`;
export const SPLREG_NET_POPUP_TO_COMPUTER = `NetPopupToComputer`;
export const SPLREG_EVENT_LOG = `EventLog`;
export const SPLREG_MAJOR_VERSION = `MajorVersion`;
export const SPLREG_MINOR_VERSION = `MinorVersion`;
export const SPLREG_ARCHITECTURE = `Architecture`;
export const SPLREG_OS_VERSION = `OSVersion`;
export const SPLREG_OS_VERSIONEX = `OSVersionEx`;
export const SPLREG_DS_PRESENT = `DsPresent`;
export const SPLREG_DS_PRESENT_FOR_USER = `DsPresentForUser`;
export const SPLREG_REMOTE_FAX = `RemoteFax`;
export const SPLREG_RESTART_JOB_ON_POOL_ERROR = `RestartJobOnPoolError`;
export const SPLREG_RESTART_JOB_ON_POOL_ENABLED = `RestartJobOnPoolEnabled`;
export const SPLREG_DNS_MACHINE_NAME = `DNSMachineName`;
export const SPLREG_ALLOW_USER_MANAGEFORMS = `AllowUserManageForms`;
export const SPLREG_WEBSHAREMGMT = `WebShareMgmt`;
export const SPLREG_PRINT_DRIVER_ISOLATION_GROUPS = `PrintDriverIsolationGroups`;
export const SPLREG_PRINT_DRIVER_ISOLATION_TIME_BEFORE_RECYCLE = `PrintDriverIsolationTimeBeforeRecycle`;
export const SPLREG_PRINT_DRIVER_ISOLATION_MAX_OBJECTS_BEFORE_RECYCLE = `PrintDriverIsolationMaxobjsBeforeRecycle`;
export const SPLREG_PRINT_DRIVER_ISOLATION_IDLE_TIMEOUT = `PrintDriverIsolationIdleTimeout`;
export const SPLREG_PRINT_DRIVER_ISOLATION_EXECUTION_POLICY = `PrintDriverIsolationExecutionPolicy`;
export const SPLREG_PRINT_DRIVER_ISOLATION_OVERRIDE_POLICY = `PrintDriverIsolationOverrideCompat`;
export const SPLREG_PRINT_QUEUE_V4_DRIVER_DIRECTORY = `PrintQueueV4DriverDirectory`;
export const JOB_ACCESS_ADMINISTER = 16;
export const JOB_ACCESS_READ = 32;
export const SPLDS_SPOOLER_KEY = `DsSpooler`;
export const SPLDS_DRIVER_KEY = `DsDriver`;
export const SPLDS_USER_KEY = `DsUser`;
export const SPLDS_ASSET_NUMBER = `assetNumber`;
export const SPLDS_BYTES_PER_MINUTE = `bytesPerMinute`;
export const SPLDS_DESCRIPTION = `description`;
export const SPLDS_DRIVER_NAME = `driverName`;
export const SPLDS_DRIVER_VERSION = `driverVersion`;
export const SPLDS_LOCATION = `location`;
export const SPLDS_PORT_NAME = `portName`;
export const SPLDS_PRINT_ATTRIBUTES = `printAttributes`;
export const SPLDS_PRINT_BIN_NAMES = `printBinNames`;
export const SPLDS_PRINT_COLLATE = `printCollate`;
export const SPLDS_PRINT_COLOR = `printColor`;
export const SPLDS_PRINT_DUPLEX_SUPPORTED = `printDuplexSupported`;
export const SPLDS_PRINT_END_TIME = `printEndTime`;
export const SPLDS_PRINTER_CLASS = `printQueue`;
export const SPLDS_PRINTER_NAME = `printerName`;
export const SPLDS_PRINT_KEEP_PRINTED_JOBS = `printKeepPrintedJobs`;
export const SPLDS_PRINT_LANGUAGE = `printLanguage`;
export const SPLDS_PRINT_MAC_ADDRESS = `printMACAddress`;
export const SPLDS_PRINT_MAX_X_EXTENT = `printMaxXExtent`;
export const SPLDS_PRINT_MAX_Y_EXTENT = `printMaxYExtent`;
export const SPLDS_PRINT_MAX_RESOLUTION_SUPPORTED = `printMaxResolutionSupported`;
export const SPLDS_PRINT_MEDIA_READY = `printMediaReady`;
export const SPLDS_PRINT_MEDIA_SUPPORTED = `printMediaSupported`;
export const SPLDS_PRINT_MEMORY = `printMemory`;
export const SPLDS_PRINT_MIN_X_EXTENT = `printMinXExtent`;
export const SPLDS_PRINT_MIN_Y_EXTENT = `printMinYExtent`;
export const SPLDS_PRINT_NETWORK_ADDRESS = `printNetworkAddress`;
export const SPLDS_PRINT_NOTIFY = `printNotify`;
export const SPLDS_PRINT_NUMBER_UP = `printNumberUp`;
export const SPLDS_PRINT_ORIENTATIONS_SUPPORTED = `printOrientationsSupported`;
export const SPLDS_PRINT_OWNER = `printOwner`;
export const SPLDS_PRINT_PAGES_PER_MINUTE = `printPagesPerMinute`;
export const SPLDS_PRINT_RATE = `printRate`;
export const SPLDS_PRINT_RATE_UNIT = `printRateUnit`;
export const SPLDS_PRINT_SEPARATOR_FILE = `printSeparatorFile`;
export const SPLDS_PRINT_SHARE_NAME = `printShareName`;
export const SPLDS_PRINT_SPOOLING = `printSpooling`;
export const SPLDS_PRINT_STAPLING_SUPPORTED = `printStaplingSupported`;
export const SPLDS_PRINT_START_TIME = `printStartTime`;
export const SPLDS_PRINT_STATUS = `printStatus`;
export const SPLDS_PRIORITY = `priority`;
export const SPLDS_SERVER_NAME = `serverName`;
export const SPLDS_SHORT_SERVER_NAME = `shortServerName`;
export const SPLDS_UNC_NAME = `uNCName`;
export const SPLDS_URL = `url`;
export const SPLDS_FLAGS = `flags`;
export const SPLDS_VERSION_NUMBER = `versionNumber`;
export const SPLDS_PRINTER_NAME_ALIASES = `printerNameAliases`;
export const SPLDS_PRINTER_LOCATIONS = `printerLocations`;
export const SPLDS_PRINTER_MODEL = `printerModel`;
export const PRINTER_CONNECTION_MISMATCH = 32;
export const PRINTER_CONNECTION_NO_UI = 64;
export const IPDFP_COPY_ALL_FILES = 1;
export const UPDP_SILENT_UPLOAD = 1;
export const UPDP_UPLOAD_ALWAYS = 2;
export const UPDP_CHECK_DRIVERSTORE = 4;
export const MS_PRINT_JOB_OUTPUT_FILE = `MsPrintJobOutputFile`;
export const DISPID_PRINTSCHEMA_ELEMENT = 10000;
export const DISPID_PRINTSCHEMA_ELEMENT_XMLNODE = 10001;
export const DISPID_PRINTSCHEMA_ELEMENT_NAME = 10002;
export const DISPID_PRINTSCHEMA_ELEMENT_NAMESPACEURI = 10003;
export const DISPID_PRINTSCHEMA_DISPLAYABLEELEMENT = 10100;
export const DISPID_PRINTSCHEMA_DISPLAYABLEELEMENT_DISPLAYNAME = 10101;
export const DISPID_PRINTSCHEMA_OPTION = 10200;
export const DISPID_PRINTSCHEMA_OPTION_SELECTED = 10201;
export const DISPID_PRINTSCHEMA_OPTION_CONSTRAINED = 10202;
export const DISPID_PRINTSCHEMA_OPTION_GETPROPERTYVALUE = 10203;
export const DISPID_PRINTSCHEMA_PAGEMEDIASIZEOPTION = 10300;
export const DISPID_PRINTSCHEMA_PAGEMEDIASIZEOPTION_WIDTH = 10301;
export const DISPID_PRINTSCHEMA_PAGEMEDIASIZEOPTION_HEIGHT = 10302;
export const DISPID_PRINTSCHEMA_NUPOPTION = 10400;
export const DISPID_PRINTSCHEMA_NUPOPTION_PAGESPERSHEET = 10401;
export const DISPID_PRINTSCHEMA_OPTIONCOLLECTION = 10500;
export const DISPID_PRINTSCHEMA_OPTIONCOLLECTION_COUNT = 10501;
export const DISPID_PRINTSCHEMA_OPTIONCOLLECTION_GETAT = 10502;
export const DISPID_PRINTSCHEMA_FEATURE = 10600;
export const DISPID_PRINTSCHEMA_FEATURE_SELECTEDOPTION = 10601;
export const DISPID_PRINTSCHEMA_FEATURE_SELECTIONTYPE = 10602;
export const DISPID_PRINTSCHEMA_FEATURE_GETOPTION = 10603;
export const DISPID_PRINTSCHEMA_FEATURE_DISPLAYUI = 10604;
export const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE = 10700;
export const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_IMAGEABLE_WIDTH = 10701;
export const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_IMAGEABLE_HEIGHT = 10702;
export const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_ORIGIN_WIDTH = 10703;
export const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_ORIGIN_HEIGHT = 10704;
export const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_EXTENT_WIDTH = 10705;
export const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_EXTENT_HEIGHT = 10706;
export const DISPID_PRINTSCHEMA_CAPABILITIES = 10800;
export const DISPID_PRINTSCHEMA_CAPABILITIES_GETFEATURE_KEYNAME = 10801;
export const DISPID_PRINTSCHEMA_CAPABILITIES_GETFEATURE = 10802;
export const DISPID_PRINTSCHEMA_CAPABILITIES_PAGEIMAGEABLESIZE = 10803;
export const DISPID_PRINTSCHEMA_CAPABILITIES_JOBCOPIESMINVALUE = 10804;
export const DISPID_PRINTSCHEMA_CAPABILITIES_JOBCOPIESMAXVALUE = 10805;
export const DISPID_PRINTSCHEMA_CAPABILITIES_GETSELECTEDOPTION = 10806;
export const DISPID_PRINTSCHEMA_CAPABILITIES_GETOPTIONS = 10807;
export const DISPID_PRINTSCHEMA_CAPABILITIES_GETPARAMETERDEFINITION = 10808;
export const DISPID_PRINTSCHEMA_ASYNCOPERATION = 10900;
export const DISPID_PRINTSCHEMA_ASYNCOPERATION_START = 10901;
export const DISPID_PRINTSCHEMA_ASYNCOPERATION_CANCEL = 10902;
export const DISPID_PRINTSCHEMA_TICKET = 11000;
export const DISPID_PRINTSCHEMA_TICKET_GETFEATURE_KEYNAME = 11001;
export const DISPID_PRINTSCHEMA_TICKET_GETFEATURE = 11002;
export const DISPID_PRINTSCHEMA_TICKET_VALIDATEASYNC = 11003;
export const DISPID_PRINTSCHEMA_TICKET_COMMITASYNC = 11004;
export const DISPID_PRINTSCHEMA_TICKET_NOTIFYXMLCHANGED = 11005;
export const DISPID_PRINTSCHEMA_TICKET_GETCAPABILITIES = 11006;
export const DISPID_PRINTSCHEMA_TICKET_JOBCOPIESALLDOCUMENTS = 11007;
export const DISPID_PRINTSCHEMA_TICKET_GETPARAMETERINITIALIZER = 11008;
export const DISPID_PRINTSCHEMA_ASYNCOPERATIONEVENT = 11100;
export const DISPID_PRINTSCHEMA_ASYNCOPERATIONEVENT_COMPLETED = 11101;
export const DISPID_PRINTERSCRIPTABLESEQUENTIALSTREAM = 11200;
export const DISPID_PRINTERSCRIPTABLESEQUENTIALSTREAM_READ = 11201;
export const DISPID_PRINTERSCRIPTABLESEQUENTIALSTREAM_WRITE = 11202;
export const DISPID_PRINTERSCRIPTABLESTREAM = 11300;
export const DISPID_PRINTERSCRIPTABLESTREAM_COMMIT = 11301;
export const DISPID_PRINTERSCRIPTABLESTREAM_SEEK = 11302;
export const DISPID_PRINTERSCRIPTABLESTREAM_SETSIZE = 11303;
export const DISPID_PRINTERPROPERTYBAG = 11400;
export const DISPID_PRINTERPROPERTYBAG_GETBOOL = 11401;
export const DISPID_PRINTERPROPERTYBAG_SETBOOL = 11402;
export const DISPID_PRINTERPROPERTYBAG_GETINT32 = 11403;
export const DISPID_PRINTERPROPERTYBAG_SETINT32 = 11404;
export const DISPID_PRINTERPROPERTYBAG_GETSTRING = 11405;
export const DISPID_PRINTERPROPERTYBAG_SETSTRING = 11406;
export const DISPID_PRINTERPROPERTYBAG_GETBYTES = 11407;
export const DISPID_PRINTERPROPERTYBAG_SETBYTES = 11408;
export const DISPID_PRINTERPROPERTYBAG_GETREADSTREAM = 11409;
export const DISPID_PRINTERPROPERTYBAG_GETWRITESTREAM = 11410;
export const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETSTREAMASXML = 11411;
export const DISPID_PRINTERSCRIPTABLEPROPERTYBAG = 11500;
export const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETBOOL = 11501;
export const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_SETBOOL = 11502;
export const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETINT32 = 11503;
export const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_SETINT32 = 11504;
export const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETSTRING = 11505;
export const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_SETSTRING = 11506;
export const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETBYTES = 11507;
export const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_SETBYTES = 11508;
export const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETREADSTREAM = 11509;
export const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETWRITESTREAM = 11510;
export const DISPID_PRINTERQUEUE = 11600;
export const DISPID_PRINTERQUEUE_HANDLE = 11601;
export const DISPID_PRINTERQUEUE_NAME = 11602;
export const DISPID_PRINTERQUEUE_SENDBIDIQUERY = 11603;
export const DISPID_PRINTERQUEUE_GETPROPERTIES = 11604;
export const DISPID_PRINTERQUEUE_SENDBIDISETREQUESTASYNC = 11605;
export const DISPID_PRINTERQUEUE_GETPRINTERQUEUEVIEW = 11606;
export const DISPID_PRINTERQUEUEEVENT = 11700;
export const DISPID_PRINTERQUEUEEVENT_ONBIDIRESPONSERECEIVED = 11701;
export const DISPID_PRINTEREXTENSION_CONTEXT = 11800;
export const DISPID_PRINTEREXTENSION_CONTEXT_PRINTERQUEUE = 11801;
export const DISPID_PRINTEREXTENSION_CONTEXT_PRINTSCHEMATICKET = 11802;
export const DISPID_PRINTEREXTENSION_CONTEXT_DRIVERPROPERTIES = 11803;
export const DISPID_PRINTEREXTENSION_CONTEXT_USERPROPERTIES = 11804;
export const DISPID_PRINTEREXTENSION_REQUEST = 11900;
export const DISPID_PRINTEREXTENSION_REQUEST_CANCEL = 11901;
export const DISPID_PRINTEREXTENSION_REQUEST_COMPLETE = 11902;
export const DISPID_PRINTEREXTENSION_EVENTARGS = 12000;
export const DISPID_PRINTEREXTENSION_EVENTARGS_BIDINOTIFICATION = 12001;
export const DISPID_PRINTEREXTENSION_EVENTARGS_REASONID = 12002;
export const DISPID_PRINTEREXTENSION_EVENTARGS_REQUEST = 12003;
export const DISPID_PRINTEREXTENSION_EVENTARGS_SOURCEAPPLICATION = 12004;
export const DISPID_PRINTEREXTENSION_EVENTARGS_DETAILEDREASONID = 12005;
export const DISPID_PRINTEREXTENSION_EVENTARGS_WINDOWMODAL = 12006;
export const DISPID_PRINTEREXTENSION_EVENTARGS_WINDOWPARENT = 12007;
export const DISPID_PRINTEREXTENSION_CONTEXTCOLLECTION = 12100;
export const DISPID_PRINTEREXTENSION_CONTEXTCOLLECTION_COUNT = 12101;
export const DISPID_PRINTEREXTENSION_CONTEXTCOLLECTION_GETAT = 12102;
export const DISPID_PRINTEREXTENSION_EVENT = 12200;
export const DISPID_PRINTEREXTENSION_EVENT_ONDRIVEREVENT = 12201;
export const DISPID_PRINTEREXTENSION_EVENT_ONPRINTERQUEUESENUMERATED = 12202;
export const DISPID_PRINTERSCRIPTCONTEXT = 12300;
export const DISPID_PRINTERSCRIPTCONTEXT_DRIVERPROPERTIES = 12301;
export const DISPID_PRINTERSCRIPTCONTEXT_QUEUEPROPERTIES = 12302;
export const DISPID_PRINTERSCRIPTCONTEXT_USERPROPERTIES = 12303;
export const DISPID_PRINTSCHEMA_PARAMETERINITIALIZER = 12400;
export const DISPID_PRINTSCHEMA_PARAMETERINITIALIZER_VALUE = 12401;
export const DISPID_PRINTSCHEMA_PARAMETERDEFINITION = 12500;
export const DISPID_PRINTSCHEMA_PARAMETERDEFINITION_USERINPUTREQUIRED = 12501;
export const DISPID_PRINTSCHEMA_PARAMETERDEFINITION_UNITTYPE = 12502;
export const DISPID_PRINTSCHEMA_PARAMETERDEFINITION_DATATYPE = 12503;
export const DISPID_PRINTSCHEMA_PARAMETERDEFINITION_RANGEMIN = 12504;
export const DISPID_PRINTSCHEMA_PARAMETERDEFINITION_RANGEMAX = 12505;
export const DISPID_PRINTJOBCOLLECTION = 12600;
export const DISPID_PRINTJOBCOLLECTION_COUNT = 12601;
export const DISPID_PRINTJOBCOLLECTION_GETAT = 12602;
export const DISPID_PRINTERQUEUEVIEW = 12700;
export const DISPID_PRINTERQUEUEVIEW_SETVIEWRANGE = 12701;
export const DISPID_PRINTERQUEUEVIEW_EVENT = 12800;
export const DISPID_PRINTERQUEUEVIEW_EVENT_ONCHANGED = 12801;
export const PRINTTICKET_ISTREAM_APIS = 1;
export const S_PT_NO_CONFLICT = 262145;
export const S_PT_CONFLICT_RESOLVED = 262146;
export const E_PRINTTICKET_FORMAT = 2147745795;
export const E_PRINTCAPABILITIES_FORMAT = 2147745796;
export const E_DELTA_PRINTTICKET_FORMAT = 2147745797;
export const E_PRINTDEVICECAPABILITIES_FORMAT = 2147745798;
export const kUserDefaultDevmode = 0;
export const kPrinterDefaultDevmode = 1;
export const kPTPageScope = 0;
export const kPTDocumentScope = 1;
export const kPTJobScope = 2;
export const Compression_NotCompressed = 0;
export const Compression_Normal = 1;
export const Compression_Small = 2;
export const Compression_Fast = 3;
export const Font_Normal = 0;
export const Font_Obfusticate = 1;
export const XpsJob_DocumentSequenceAdded = 0;
export const XpsJob_FixedDocumentAdded = 1;
export const XpsJob_FixedPageAdded = 2;
export const Xps_Restricted_Font_Installable = 0;
export const Xps_Restricted_Font_NoEmbedding = 2;
export const Xps_Restricted_Font_PreviewPrint = 4;
export const Xps_Restricted_Font_Editable = 8;
export const SLE_ERROR = 1;
export const SLE_MINORERROR = 2;
export const SLE_WARNING = 3;
export const BIDI_NULL = 0;
export const BIDI_INT = 1;
export const BIDI_FLOAT = 2;
export const BIDI_BOOL = 3;
export const BIDI_STRING = 4;
export const BIDI_TEXT = 5;
export const BIDI_ENUM = 6;
export const BIDI_BLOB = 7;
export const PRINTER_OPTION_NO_CACHE = 1;
export const PRINTER_OPTION_CACHE = 2;
export const PRINTER_OPTION_CLIENT_CHANGE = 4;
export const PRINTER_OPTION_NO_CLIENT_DATA = 8;
export const kPropertyTypeString = 1;
export const kPropertyTypeInt32 = 2;
export const kPropertyTypeInt64 = 3;
export const kPropertyTypeByte = 4;
export const kPropertyTypeTime = 5;
export const kPropertyTypeDevMode = 6;
export const kPropertyTypeSD = 7;
export const kPropertyTypeNotificationReply = 8;
export const kPropertyTypeNotificationOptions = 9;
export const kPropertyTypeBuffer = 10;
export const kAddingDocumentSequence = 0;
export const kDocumentSequenceAdded = 1;
export const kAddingFixedDocument = 2;
export const kFixedDocumentAdded = 3;
export const kAddingFixedPage = 4;
export const kFixedPageAdded = 5;
export const kResourceAdded = 6;
export const kFontAdded = 7;
export const kImageAdded = 8;
export const kXpsDocumentCommitted = 9;
export const kJobProduction = 1;
export const kJobConsumption = 2;
export const PRINT_EXECUTION_CONTEXT_APPLICATION = 0;
export const PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE = 1;
export const PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST = 2;
export const PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE = 3;
export const PRINT_EXECUTION_CONTEXT_WOW64 = 4;
export const MXDC_LANDSCAPE_ROTATE_COUNTERCLOCKWISE_90_DEGREES = 90;
export const MXDC_LANDSCAPE_ROTATE_NONE = 0;
export const MXDC_LANDSCAPE_ROTATE_COUNTERCLOCKWISE_270_DEGREES = `-90`;
export const MXDC_IMAGETYPE_JPEGHIGH_COMPRESSION = 1;
export const MXDC_IMAGETYPE_JPEGMEDIUM_COMPRESSION = 2;
export const MXDC_IMAGETYPE_JPEGLOW_COMPRESSION = 3;
export const MXDC_IMAGETYPE_PNG = 4;
export const MXDC_RESOURCE_TTF = 0;
export const MXDC_RESOURCE_JPEG = 1;
export const MXDC_RESOURCE_PNG = 2;
export const MXDC_RESOURCE_TIFF = 3;
export const MXDC_RESOURCE_WDP = 4;
export const MXDC_RESOURCE_DICTIONARY = 5;
export const MXDC_RESOURCE_ICC_PROFILE = 6;
export const MXDC_RESOURCE_JPEG_THUMBNAIL = 7;
export const MXDC_RESOURCE_PNG_THUMBNAIL = 8;
export const MXDC_RESOURCE_MAX = 9;
export const kADT_UNKNOWN = 0;
export const kADT_BOOL = 1;
export const kADT_INT = 2;
export const kADT_LONG = 3;
export const kADT_DWORD = 4;
export const kADT_ASCII = 5;
export const kADT_UNICODE = 6;
export const kADT_BINARY = 7;
export const kADT_SIZE = 8;
export const kADT_RECT = 9;
export const kADT_CUSTOMSIZEPARAMS = 10;
export const PTSHIM_DEFAULT = 0;
export const PTSHIM_NOSNAPSHOT = 1;
export const PrintSchemaConstrainedSetting_None = 0;
export const PrintSchemaConstrainedSetting_PrintTicket = 1;
export const PrintSchemaConstrainedSetting_Admin = 2;
export const PrintSchemaConstrainedSetting_Device = 3;
export const PrintSchemaSelectionType_PickOne = 0;
export const PrintSchemaSelectionType_PickMany = 1;
export const PrintSchemaParameterDataType_Integer = 0;
export const PrintSchemaParameterDataType_NumericString = 1;
export const PrintSchemaParameterDataType_String = 2;
export const PrintJobStatus_Paused = 1;
export const PrintJobStatus_Error = 2;
export const PrintJobStatus_Deleting = 4;
export const PrintJobStatus_Spooling = 8;
export const PrintJobStatus_Printing = 16;
export const PrintJobStatus_Offline = 32;
export const PrintJobStatus_PaperOut = 64;
export const PrintJobStatus_Printed = 128;
export const PrintJobStatus_Deleted = 256;
export const PrintJobStatus_BlockedDeviceQueue = 512;
export const PrintJobStatus_UserIntervention = 1024;
export const PrintJobStatus_Restarted = 2048;
export const PrintJobStatus_Complete = 4096;
export const PrintJobStatus_Retained = 8192;
export const kPerUser = 0;
export const kAllUsers = 1;
export const kBiDirectional = 0;
export const kUniDirectional = 1;
export const CHANNEL_CLOSED_BY_SERVER = 1;
export const CHANNEL_CLOSED_BY_ANOTHER_LISTENER = 2;
export const CHANNEL_CLOSED_BY_SAME_LISTENER = 3;
export const CHANNEL_RELEASED_BY_LISTENER = 4;
export const UNIRECTIONAL_NOTIFICATION_LOST = 5;
export const ASYNC_NOTIFICATION_FAILURE = 6;
export const NO_LISTENERS = 7;
export const CHANNEL_ALREADY_CLOSED = 8;
export const CHANNEL_ALREADY_OPENED = 9;
export const CHANNEL_WAITING_FOR_CLIENT_NOTIFICATION = 10;
export const CHANNEL_NOT_OPENED = 11;
export const ASYNC_CALL_ALREADY_PARKED = 12;
export const NOT_REGISTERED = 13;
export const ALREADY_UNREGISTERED = 14;
export const ALREADY_REGISTERED = 15;
export const CHANNEL_ACQUIRED = 16;
export const ASYNC_CALL_IN_PROGRESS = 17;
export const MAX_NOTIFICATION_SIZE_EXCEEDED = 18;
export const INTERNAL_NOTIFICATION_QUEUE_IS_FULL = 19;
export const INVALID_NOTIFICATION_TYPE = 20;
export const MAX_REGISTRATION_COUNT_EXCEEDED = 21;
export const MAX_CHANNEL_COUNT_EXCEEDED = 22;
export const LOCAL_ONLY_REGISTRATION = 23;
export const REMOTE_ONLY_REGISTRATION = 24;
export const PAN_FAMILY_ANY = 0;
export const PAN_FAMILY_NO_FIT = 1;
export const PAN_FAMILY_TEXT_DISPLAY = 2;
export const PAN_FAMILY_SCRIPT = 3;
export const PAN_FAMILY_DECORATIVE = 4;
export const PAN_FAMILY_PICTORIAL = 5;
export const PAN_SERIF_ANY = 0;
export const PAN_SERIF_NO_FIT = 1;
export const PAN_SERIF_COVE = 2;
export const PAN_SERIF_OBTUSE_COVE = 3;
export const PAN_SERIF_SQUARE_COVE = 4;
export const PAN_SERIF_OBTUSE_SQUARE_COVE = 5;
export const PAN_SERIF_SQUARE = 6;
export const PAN_SERIF_THIN = 7;
export const PAN_SERIF_BONE = 8;
export const PAN_SERIF_EXAGGERATED = 9;
export const PAN_SERIF_TRIANGLE = 10;
export const PAN_SERIF_NORMAL_SANS = 11;
export const PAN_SERIF_OBTUSE_SANS = 12;
export const PAN_SERIF_PERP_SANS = 13;
export const PAN_SERIF_FLARED = 14;
export const PAN_SERIF_ROUNDED = 15;
export const PAN_WEIGHT_ANY = 0;
export const PAN_WEIGHT_NO_FIT = 1;
export const PAN_WEIGHT_INDEX = 2;
export const PAN_WEIGHT_VERY_LIGHT = 2;
export const PAN_WEIGHT_LIGHT = 3;
export const PAN_WEIGHT_THIN = 4;
export const PAN_WEIGHT_BOOK = 5;
export const PAN_WEIGHT_MEDIUM = 6;
export const PAN_WEIGHT_DEMI = 7;
export const PAN_WEIGHT_BOLD = 8;
export const PAN_WEIGHT_HEAVY = 9;
export const PAN_WEIGHT_BLACK = 10;
export const PAN_WEIGHT_NORD = 11;
export const PAN_PROP_ANY = 0;
export const PAN_PROP_NO_FIT = 1;
export const PAN_PROP_OLD_STYLE = 2;
export const PAN_PROP_MODERN = 3;
export const PAN_PROP_EVEN_WIDTH = 4;
export const PAN_PROP_EXPANDED = 5;
export const PAN_PROP_CONDENSED = 6;
export const PAN_PROP_VERY_EXPANDED = 7;
export const PAN_PROP_VERY_CONDENSED = 8;
export const PAN_PROP_MONOSPACED = 9;
export const PAN_CONTRAST_ANY = 0;
export const PAN_CONTRAST_NO_FIT = 1;
export const PAN_CONTRAST_INDEX = 4;
export const PAN_CONTRAST_NONE = 2;
export const PAN_CONTRAST_VERY_LOW = 3;
export const PAN_CONTRAST_LOW = 4;
export const PAN_CONTRAST_MEDIUM_LOW = 5;
export const PAN_CONTRAST_MEDIUM = 6;
export const PAN_CONTRAST_MEDIUM_HIGH = 7;
export const PAN_CONTRAST_HIGH = 8;
export const PAN_CONTRAST_VERY_HIGH = 9;
export const PAN_STROKE_ANY = 0;
export const PAN_STROKE_NO_FIT = 1;
export const PAN_STROKE_GRADUAL_DIAG = 2;
export const PAN_STROKE_GRADUAL_TRAN = 3;
export const PAN_STROKE_GRADUAL_VERT = 4;
export const PAN_STROKE_GRADUAL_HORZ = 5;
export const PAN_STROKE_RAPID_VERT = 6;
export const PAN_STROKE_RAPID_HORZ = 7;
export const PAN_STROKE_INSTANT_VERT = 8;
export const PAN_ARM_ANY = 0;
export const PAN_ARM_NO_FIT = 1;
export const PAN_STRAIGHT_ARMS_HORZ = 2;
export const PAN_STRAIGHT_ARMS_WEDGE = 3;
export const PAN_STRAIGHT_ARMS_VERT = 4;
export const PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5;
export const PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6;
export const PAN_BENT_ARMS_HORZ = 7;
export const PAN_BENT_ARMS_WEDGE = 8;
export const PAN_BENT_ARMS_VERT = 9;
export const PAN_BENT_ARMS_SINGLE_SERIF = 10;
export const PAN_BENT_ARMS_DOUBLE_SERIF = 11;
export const PAN_LETT_FORM_ANY = 0;
export const PAN_LETT_FORM_NO_FIT = 1;
export const PAN_LETT_NORMAL_CONTACT = 2;
export const PAN_LETT_NORMAL_WEIGHTED = 3;
export const PAN_LETT_NORMAL_BOXED = 4;
export const PAN_LETT_NORMAL_FLATTENED = 5;
export const PAN_LETT_NORMAL_ROUNDED = 6;
export const PAN_LETT_NORMAL_OFF_CENTER = 7;
export const PAN_LETT_NORMAL_SQUARE = 8;
export const PAN_LETT_OBLIQUE_CONTACT = 9;
export const PAN_LETT_OBLIQUE_WEIGHTED = 10;
export const PAN_LETT_OBLIQUE_BOXED = 11;
export const PAN_LETT_OBLIQUE_FLATTENED = 12;
export const PAN_LETT_OBLIQUE_ROUNDED = 13;
export const PAN_LETT_OBLIQUE_OFF_CENTER = 14;
export const PAN_LETT_OBLIQUE_SQUARE = 15;
export const PAN_MIDLINE_ANY = 0;
export const PAN_MIDLINE_NO_FIT = 1;
export const PAN_MIDLINE_INDEX = 8;
export const PAN_MIDLINE_STANDARD_TRIMMED = 2;
export const PAN_MIDLINE_STANDARD_POINTED = 3;
export const PAN_MIDLINE_STANDARD_SERIFED = 4;
export const PAN_MIDLINE_HIGH_TRIMMED = 5;
export const PAN_MIDLINE_HIGH_POINTED = 6;
export const PAN_MIDLINE_HIGH_SERIFED = 7;
export const PAN_MIDLINE_CONSTANT_TRIMMED = 8;
export const PAN_MIDLINE_CONSTANT_POINTED = 9;
export const PAN_MIDLINE_CONSTANT_SERIFED = 10;
export const PAN_MIDLINE_LOW_TRIMMED = 11;
export const PAN_MIDLINE_LOW_POINTED = 12;
export const PAN_MIDLINE_LOW_SERIFED = 13;
export const PAN_XHEIGHT_ANY = 0;
export const PAN_XHEIGHT_NO_FIT = 1;
export const PAN_XHEIGHT_INDEX = 9;
export const PAN_XHEIGHT_CONSTANT_SMALL = 2;
export const PAN_XHEIGHT_CONSTANT_STD = 3;
export const PAN_XHEIGHT_CONSTANT_LARGE = 4;
export const PAN_XHEIGHT_DUCKING_SMALL = 5;
export const PAN_XHEIGHT_DUCKING_STD = 6;
export const PAN_XHEIGHT_DUCKING_LARGE = 7;
export const kInvalidJobState = 0;
export const kLogJobPrinted = 1;
export const kLogJobRendered = 2;
export const kLogJobError = 3;
export const kLogJobPipelineError = 4;
export const kLogOfflineFileFull = 5;
export const NOTIFICATION_COMMAND_NOTIFY = 0;
export const NOTIFICATION_COMMAND_CONTEXT_ACQUIRE = 1;
export const NOTIFICATION_COMMAND_CONTEXT_RELEASE = 2;
export const NOTIFICATION_CONFIG_CREATE_EVENT = 1;
export const NOTIFICATION_CONFIG_REGISTER_CALLBACK = 2;
export const NOTIFICATION_CONFIG_EVENT_TRIGGER = 4;
export const NOTIFICATION_CONFIG_ASYNC_CHANNEL = 8;
export const kMessageBox = 0;
export const XPSRAS_RENDERING_MODE_ANTIALIASED = 0;
export const XPSRAS_RENDERING_MODE_ALIASED = 1;
export const XPSRAS_PIXEL_FORMAT_32BPP_PBGRA_UINT_SRGB = 1;
export const XPSRAS_PIXEL_FORMAT_64BPP_PRGBA_HALF_SCRGB = 2;
export const XPSRAS_PIXEL_FORMAT_128BPP_PRGBA_FLOAT_SCRGB = 3;
export const XPSRAS_BACKGROUND_COLOR_TRANSPARENT = 0;
export const XPSRAS_BACKGROUND_COLOR_OPAQUE = 1;
export const FinalPageCount = 0;
export const IntermediatePageCount = 1;

// Structs

/**
 * Windows.Win32.Graphics.Printing.SPLCLIENT_INFO_2_WINXP (size: 8)
 */
export interface SPLCLIENT_INFO_2_WINXP {
  /** u64 */
  hSplPrinter: Deno.PointerValue;
}

export const sizeofSPLCLIENT_INFO_2_WINXP = 8;

export function allocSPLCLIENT_INFO_2_WINXP(data?: Partial<SPLCLIENT_INFO_2_WINXP>): Uint8Array {
  const buf = new Uint8Array(sizeofSPLCLIENT_INFO_2_WINXP);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.hSplPrinter !== undefined) view.setBigUint64(0, BigInt(data.hSplPrinter), true);
  return buf;
}

export class SPLCLIENT_INFO_2_WINXPView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get hSplPrinter(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: u64
  set hSplPrinter(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

export type BSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Graphics.Printing.ImgErrorInfo (size: 88)
 */
export interface ImgErrorInfo {
  /** Windows.Win32.Foundation.BSTR */
  description: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  guid: Uint8Array | Deno.PointerValue;
  /** u32 */
  helpContext: number;
  /** Windows.Win32.Foundation.BSTR */
  helpFile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BSTR */
  source: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.BSTR */
  devDescription: Uint8Array | Deno.PointerValue;
  /** System.Guid */
  errorID: Uint8Array | Deno.PointerValue;
  /** u32 */
  cUserParameters: number;
  /** ptr */
  aUserParameters: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BSTR */
  userFallback: Uint8Array | Deno.PointerValue;
  /** u32 */
  exceptionID: number;
}

export const sizeofImgErrorInfo = 88;

export function allocImgErrorInfo(data?: Partial<ImgErrorInfo>): Uint8Array {
  const buf = new Uint8Array(sizeofImgErrorInfo);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.description !== undefined) view.setBigUint64(0, data.description === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.description))), true);
  // 0x08: pointer
  if (data?.guid !== undefined) view.setBigUint64(8, data.guid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.guid))), true);
  // 0x10: u32
  if (data?.helpContext !== undefined) view.setUint32(16, Number(data.helpContext), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.helpFile !== undefined) view.setBigUint64(24, data.helpFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.helpFile))), true);
  // 0x20: pointer
  if (data?.source !== undefined) view.setBigUint64(32, data.source === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.source))), true);
  // 0x28: pointer
  if (data?.devDescription !== undefined) view.setBigUint64(40, data.devDescription === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.devDescription))), true);
  // 0x30: pointer
  if (data?.errorID !== undefined) view.setBigUint64(48, data.errorID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.errorID))), true);
  // 0x38: u32
  if (data?.cUserParameters !== undefined) view.setUint32(56, Number(data.cUserParameters), true);
  // 0x3c: pad4
  // 0x40: pointer
  if (data?.aUserParameters !== undefined) view.setBigUint64(64, data.aUserParameters === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aUserParameters))), true);
  // 0x48: pointer
  if (data?.userFallback !== undefined) view.setBigUint64(72, data.userFallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.userFallback))), true);
  // 0x50: u32
  if (data?.exceptionID !== undefined) view.setUint32(80, Number(data.exceptionID), true);
  // 0x54: pad4
  return buf;
}

export class ImgErrorInfoView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get description(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get guid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get helpContext(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get helpFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get source(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get devDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get errorID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get cUserParameters(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  get aUserParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get userFallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get exceptionID(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: pointer
  set description(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set guid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set helpContext(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set helpFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set source(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set devDescription(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set errorID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: u32
  set cUserParameters(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: pointer
  set aUserParameters(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set userFallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set exceptionID(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

export type LPARAM = Deno.PointerValue;

/**
 * Windows.Win32.Graphics.Printing.OPTPARAM (size: 40)
 */
export interface OPTPARAM {
  /** u16 */
  cbSize: number;
  /** u8 */
  Flags: number;
  /** u8 */
  Style: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array;
  /** usize */
  IconID: Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParam: Uint8Array | Deno.PointerValue;
  /** array */
  dwReserved: Deno.PointerValue;
}

export const sizeofOPTPARAM = 40;

export function allocOPTPARAM(data?: Partial<OPTPARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofOPTPARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u8
  if (data?.Flags !== undefined) view.setUint8(2, Number(data.Flags));
  // 0x03: u8
  if (data?.Style !== undefined) view.setUint8(3, Number(data.Style));
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pData))), true);
  // 0x10: usize
  if (data?.IconID !== undefined) view.setBigUint64(16, BigInt(data.IconID), true);
  // 0x18: pointer
  if (data?.lParam !== undefined) view.setBigUint64(24, data.lParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParam))), true);
  // 0x20: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(32, data.dwReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwReserved))), true);
  return buf;
}

export class OPTPARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Flags(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Style(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get IconID(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get lParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Flags(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Style(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: usize
  set IconID(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set lParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.OPTCOMBO (size: 32)
 */
export interface OPTCOMBO {
  /** u16 */
  cbSize: number;
  /** u8 */
  Flags: number;
  /** u16 */
  cListItem: number;
  /** ptr */
  pListItem: Deno.PointerValue | Uint8Array;
  /** i32 */
  Sel: number;
  /** array */
  dwReserved: Deno.PointerValue;
}

export const sizeofOPTCOMBO = 32;

export function allocOPTCOMBO(data?: Partial<OPTCOMBO>): Uint8Array {
  const buf = new Uint8Array(sizeofOPTCOMBO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u8
  if (data?.Flags !== undefined) view.setUint8(2, Number(data.Flags));
  // 0x03: u16
  if (data?.cListItem !== undefined) view.setUint16(3, Number(data.cListItem), true);
  // 0x05: pad3
  // 0x08: pointer
  if (data?.pListItem !== undefined) view.setBigUint64(8, data.pListItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pListItem))), true);
  // 0x10: i32
  if (data?.Sel !== undefined) view.setInt32(16, Number(data.Sel), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(24, data.dwReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwReserved))), true);
  return buf;
}

export class OPTCOMBOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Flags(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u16
  get cListItem(): number {
    return this.view.getUint16(3, true);
  }

  // 0x05: pad3

  // 0x08: pointer
  get pListItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get Sel(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Flags(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u16
  set cListItem(value: number) {
    this.view.setUint16(3, value, true);
  }

  // 0x05: pad3

  // 0x08: pointer
  set pListItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: i32
  set Sel(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.OPTTYPE (size: 40)
 */
export interface OPTTYPE {
  /** u16 */
  cbSize: number;
  /** u8 */
  Type: number;
  /** u8 */
  Flags: number;
  /** u16 */
  Count: number;
  /** u16 */
  BegCtrlID: number;
  /** ptr */
  pOptParam: Deno.PointerValue | Uint8Array;
  /** u16 */
  Style: number;
  /** array */
  wReserved: Deno.PointerValue;
  /** array */
  dwReserved: Deno.PointerValue;
}

export const sizeofOPTTYPE = 40;

export function allocOPTTYPE(data?: Partial<OPTTYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofOPTTYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u8
  if (data?.Type !== undefined) view.setUint8(2, Number(data.Type));
  // 0x03: u8
  if (data?.Flags !== undefined) view.setUint8(3, Number(data.Flags));
  // 0x04: u16
  if (data?.Count !== undefined) view.setUint16(4, Number(data.Count), true);
  // 0x06: u16
  if (data?.BegCtrlID !== undefined) view.setUint16(6, Number(data.BegCtrlID), true);
  // 0x08: pointer
  if (data?.pOptParam !== undefined) view.setBigUint64(8, data.pOptParam === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOptParam))), true);
  // 0x10: u16
  if (data?.Style !== undefined) view.setUint16(16, Number(data.Style), true);
  // 0x12: pad6
  // 0x18: pointer
  if (data?.wReserved !== undefined) view.setBigUint64(24, data.wReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wReserved))), true);
  // 0x20: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(32, data.dwReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwReserved))), true);
  return buf;
}

export class OPTTYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Type(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Flags(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u16
  get Count(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get BegCtrlID(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: pointer
  get pOptParam(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u16
  get Style(): number {
    return this.view.getUint16(16, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  get wReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Type(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Flags(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u16
  set Count(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set BegCtrlID(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: pointer
  set pOptParam(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u16
  set Style(value: number) {
    this.view.setUint16(16, value, true);
  }

  // 0x12: pad6

  // 0x18: pointer
  set wReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PWSTR = Deno.PointerValue | Uint8Array;

/**
 * _Anonymous1_e__Union (size: 64)
 */
export interface _Anonymous1_e__Union {
  /** usize */
  Data0: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  String: string | null | Uint8Array | Uint16Array;
  /** usize */
  u: Deno.PointerValue;
  /** ptr */
  psid: Deno.PointerValue | Uint8Array;
  /** ptr */
  pguid: Deno.PointerValue | Uint8Array;
  /** u32 */
  LogonId_LowPart: number;
  /** ptr */
  pObjectTypes: Deno.PointerValue | Uint8Array;
  /** ptr */
  pIpAddress: Deno.PointerValue | Uint8Array;
}

export const sizeof_Anonymous1_e__Union = 64;

export function alloc_Anonymous1_e__Union(data?: Partial<_Anonymous1_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous1_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data0 !== undefined) view.setBigUint64(0, BigInt(data.Data0), true);
  // 0x08: buffer
  if (data?.String !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.String);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: usize
  if (data?.u !== undefined) view.setBigUint64(16, BigInt(data.u), true);
  // 0x18: pointer
  if (data?.psid !== undefined) view.setBigUint64(24, data.psid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psid))), true);
  // 0x20: pointer
  if (data?.pguid !== undefined) view.setBigUint64(32, data.pguid === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pguid))), true);
  // 0x28: u32
  if (data?.LogonId_LowPart !== undefined) view.setUint32(40, Number(data.LogonId_LowPart), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.pObjectTypes !== undefined) view.setBigUint64(48, data.pObjectTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pObjectTypes))), true);
  // 0x38: pointer
  if (data?.pIpAddress !== undefined) view.setBigUint64(56, data.pIpAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pIpAddress))), true);
  return buf;
}

export class _Anonymous1_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data0(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: buffer
  get String(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: usize
  get u(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get psid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pguid(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get LogonId_LowPart(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get pObjectTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pIpAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: usize
  set Data0(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: buffer
  set String(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: usize
  set u(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set psid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pguid(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set LogonId_LowPart(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set pObjectTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pIpAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Anonymous2_e__Union (size: 16)
 */
export interface _Anonymous2_e__Union {
  /** usize */
  Data1: Deno.PointerValue;
  /** i32 */
  LogonId_HighPart: number;
}

export const sizeof_Anonymous2_e__Union = 16;

export function alloc_Anonymous2_e__Union(data?: Partial<_Anonymous2_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous2_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Data1 !== undefined) view.setBigUint64(0, BigInt(data.Data1), true);
  // 0x08: i32
  if (data?.LogonId_HighPart !== undefined) view.setInt32(8, Number(data.LogonId_HighPart), true);
  // 0x0c: pad4
  return buf;
}

export class _Anonymous2_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get Data1(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: i32
  get LogonId_HighPart(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: usize
  set Data1(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: i32
  set LogonId_HighPart(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.EXTPUSH (size: 48)
 */
export interface EXTPUSH {
  /** u16 */
  cbSize: number;
  /** u16 */
  Flags: number;
  /** ptr */
  pTitle: Deno.PointerValue | Uint8Array;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** usize */
  IconID: Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** array */
  dwReserved: Deno.PointerValue;
}

export const sizeofEXTPUSH = 48;

export function allocEXTPUSH(data?: Partial<EXTPUSH>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTPUSH);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pTitle !== undefined) view.setBigUint64(8, data.pTitle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTitle))), true);
  // 0x10: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(16, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x18: usize
  if (data?.IconID !== undefined) view.setBigUint64(24, BigInt(data.IconID), true);
  // 0x20: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(32, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x28: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(40, data.dwReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwReserved))), true);
  return buf;
}

export class EXTPUSHView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get IconID(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pTitle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set IconID(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.EXTCHKBOX (size: 56)
 */
export interface EXTCHKBOX {
  /** u16 */
  cbSize: number;
  /** u16 */
  Flags: number;
  /** ptr */
  pTitle: Deno.PointerValue | Uint8Array;
  /** ptr */
  pSeparator: Deno.PointerValue | Uint8Array;
  /** ptr */
  pCheckedName: Deno.PointerValue | Uint8Array;
  /** usize */
  IconID: Deno.PointerValue;
  /** array */
  wReserved: Deno.PointerValue;
  /** array */
  dwReserved: Deno.PointerValue;
}

export const sizeofEXTCHKBOX = 56;

export function allocEXTCHKBOX(data?: Partial<EXTCHKBOX>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTCHKBOX);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pTitle !== undefined) view.setBigUint64(8, data.pTitle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTitle))), true);
  // 0x10: pointer
  if (data?.pSeparator !== undefined) view.setBigUint64(16, data.pSeparator === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSeparator))), true);
  // 0x18: pointer
  if (data?.pCheckedName !== undefined) view.setBigUint64(24, data.pCheckedName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCheckedName))), true);
  // 0x20: usize
  if (data?.IconID !== undefined) view.setBigUint64(32, BigInt(data.IconID), true);
  // 0x28: pointer
  if (data?.wReserved !== undefined) view.setBigUint64(40, data.wReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wReserved))), true);
  // 0x30: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(48, data.dwReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwReserved))), true);
  return buf;
}

export class EXTCHKBOXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pSeparator(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pCheckedName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: usize
  get IconID(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: pointer
  get wReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pTitle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pSeparator(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pCheckedName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: usize
  set IconID(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: pointer
  set wReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HINSTANCE = Deno.PointerValue;

/**
 * Windows.Win32.Graphics.Printing.OIEXT (size: 32)
 */
export interface OIEXT {
  /** u16 */
  cbSize: number;
  /** u16 */
  Flags: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstCaller: Uint8Array | Deno.PointerValue;
  /** ptr */
  pHelpFile: Deno.PointerValue | Uint8Array;
  /** array */
  dwReserved: Deno.PointerValue;
}

export const sizeofOIEXT = 32;

export function allocOIEXT(data?: Partial<OIEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofOIEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hInstCaller !== undefined) view.setBigUint64(8, data.hInstCaller === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstCaller))), true);
  // 0x10: pointer
  if (data?.pHelpFile !== undefined) view.setBigUint64(16, data.pHelpFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pHelpFile))), true);
  // 0x18: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(24, data.dwReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwReserved))), true);
  return buf;
}

export class OIEXTView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hInstCaller(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pHelpFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hInstCaller(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pHelpFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.OPTITEM (size: 72)
 */
export interface OPTITEM {
  /** u16 */
  cbSize: number;
  /** u8 */
  Level: number;
  /** u8 */
  DlgPageIdx: number;
  /** u32 */
  Flags: number;
  /** usize */
  UserData: Deno.PointerValue;
  /** ptr */
  pName: Deno.PointerValue | Uint8Array;
  /** _Anonymous1_e__Union */
  Anonymous1: Uint8Array | Deno.PointerValue;
  /** _Anonymous2_e__Union */
  Anonymous2: Uint8Array | Deno.PointerValue;
  /** ptr */
  pOptType: Deno.PointerValue | Uint8Array;
  /** u32 */
  HelpIndex: number;
  /** u8 */
  DMPubID: number;
  /** u8 */
  UserItemID: number;
  /** u16 */
  wReserved: number;
  /** ptr */
  pOIExt: Deno.PointerValue | Uint8Array;
  /** array */
  dwReserved: Deno.PointerValue;
}

export const sizeofOPTITEM = 72;

export function allocOPTITEM(data?: Partial<OPTITEM>): Uint8Array {
  const buf = new Uint8Array(sizeofOPTITEM);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u8
  if (data?.Level !== undefined) view.setUint8(2, Number(data.Level));
  // 0x03: u8
  if (data?.DlgPageIdx !== undefined) view.setUint8(3, Number(data.DlgPageIdx));
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: usize
  if (data?.UserData !== undefined) view.setBigUint64(8, BigInt(data.UserData), true);
  // 0x10: pointer
  if (data?.pName !== undefined) view.setBigUint64(16, data.pName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pName))), true);
  // 0x18: pointer
  if (data?.Anonymous1 !== undefined) view.setBigUint64(24, data.Anonymous1 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous1))), true);
  // 0x20: pointer
  if (data?.Anonymous2 !== undefined) view.setBigUint64(32, data.Anonymous2 === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous2))), true);
  // 0x28: pointer
  if (data?.pOptType !== undefined) view.setBigUint64(40, data.pOptType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOptType))), true);
  // 0x30: u32
  if (data?.HelpIndex !== undefined) view.setUint32(48, Number(data.HelpIndex), true);
  // 0x34: u8
  if (data?.DMPubID !== undefined) view.setUint8(52, Number(data.DMPubID));
  // 0x35: u8
  if (data?.UserItemID !== undefined) view.setUint8(53, Number(data.UserItemID));
  // 0x36: u16
  if (data?.wReserved !== undefined) view.setUint16(54, Number(data.wReserved), true);
  // 0x38: pointer
  if (data?.pOIExt !== undefined) view.setBigUint64(56, data.pOIExt === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOIExt))), true);
  // 0x40: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(64, data.dwReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwReserved))), true);
  return buf;
}

export class OPTITEMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Level(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get DlgPageIdx(): number {
    return this.view.getUint8(3);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: usize
  get UserData(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: pointer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get Anonymous1(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Anonymous2(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pOptType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get HelpIndex(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u8
  get DMPubID(): number {
    return this.view.getUint8(52);
  }

  // 0x35: u8
  get UserItemID(): number {
    return this.view.getUint8(53);
  }

  // 0x36: u16
  get wReserved(): number {
    return this.view.getUint16(54, true);
  }

  // 0x38: pointer
  get pOIExt(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Level(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set DlgPageIdx(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: usize
  set UserData(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: pointer
  set pName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set Anonymous1(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Anonymous2(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pOptType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: u32
  set HelpIndex(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u8
  set DMPubID(value: number) {
    this.view.setUint8(52, value);
  }

  // 0x35: u8
  set UserItemID(value: number) {
    this.view.setUint8(53, value);
  }

  // 0x36: u16
  set wReserved(value: number) {
    this.view.setUint16(54, value, true);
  }

  // 0x38: pointer
  set pOIExt(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HWND = Deno.PointerValue;

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

export class _Anonymous_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get Alignment(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x08: u64
  get Region(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x00: u64
  set Alignment(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }

  // 0x08: u64
  set Region(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** array */
  X: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.X))), true);
  return buf;
}

export class _Anonymous_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get X(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set X(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.CPSUICBPARAM (size: 64)
 */
export interface CPSUICBPARAM {
  /** u16 */
  cbSize: number;
  /** u16 */
  Reason: number;
  /** Windows.Win32.Foundation.HWND */
  hDlg: Deno.PointerValue;
  /** ptr */
  pOptItem: Deno.PointerValue | Uint8Array;
  /** u16 */
  cOptItem: number;
  /** u16 */
  Flags: number;
  /** ptr */
  pCurItem: Deno.PointerValue | Uint8Array;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
  /** usize */
  UserData: Deno.PointerValue;
  /** usize */
  Result: Deno.PointerValue;
}

export const sizeofCPSUICBPARAM = 64;

export function allocCPSUICBPARAM(data?: Partial<CPSUICBPARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofCPSUICBPARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.Reason !== undefined) view.setUint16(2, Number(data.Reason), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hDlg !== undefined) view.setBigUint64(8, data.hDlg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hDlg))), true);
  // 0x10: pointer
  if (data?.pOptItem !== undefined) view.setBigUint64(16, data.pOptItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOptItem))), true);
  // 0x18: u16
  if (data?.cOptItem !== undefined) view.setUint16(24, Number(data.cOptItem), true);
  // 0x1a: u16
  if (data?.Flags !== undefined) view.setUint16(26, Number(data.Flags), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.pCurItem !== undefined) view.setBigUint64(32, data.pCurItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCurItem))), true);
  // 0x28: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(40, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  // 0x30: usize
  if (data?.UserData !== undefined) view.setBigUint64(48, BigInt(data.UserData), true);
  // 0x38: usize
  if (data?.Result !== undefined) view.setBigUint64(56, BigInt(data.Result), true);
  return buf;
}

export class CPSUICBPARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Reason(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hDlg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pOptItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u16
  get cOptItem(): number {
    return this.view.getUint16(24, true);
  }

  // 0x1a: u16
  get Flags(): number {
    return this.view.getUint16(26, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  get pCurItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: usize
  get UserData(): Deno.PointerValue {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x38: usize
  get Result(): Deno.PointerValue {
    return Number(this.view.getBigUint64(56, true));
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Reason(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hDlg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pOptItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u16
  set cOptItem(value: number) {
    this.view.setUint16(24, value, true);
  }

  // 0x1a: u16
  set Flags(value: number) {
    this.view.setUint16(26, value, true);
  }

  // 0x1c: pad4

  // 0x20: pointer
  set pCurItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: usize
  set UserData(value: Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(value), true);
  }

  // 0x38: usize
  set Result(value: Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DLGPAGE (size: 40)
 */
export interface DLGPAGE {
  /** u16 */
  cbSize: number;
  /** u16 */
  Flags: number;
  /** Windows.Win32.UI.WindowsAndMessaging.DLGPROC */
  DlgProc: Uint8Array | Deno.PointerValue;
  /** ptr */
  pTabName: Deno.PointerValue | Uint8Array;
  /** usize */
  IconID: Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofDLGPAGE = 40;

export function allocDLGPAGE(data?: Partial<DLGPAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofDLGPAGE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.DlgProc !== undefined) view.setBigUint64(8, data.DlgProc === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DlgProc))), true);
  // 0x10: pointer
  if (data?.pTabName !== undefined) view.setBigUint64(16, data.pTabName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTabName))), true);
  // 0x18: usize
  if (data?.IconID !== undefined) view.setBigUint64(24, BigInt(data.IconID), true);
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class DLGPAGEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get DlgProc(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pTabName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get IconID(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set DlgProc(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pTabName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set IconID(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.COMPROPSHEETUI (size: 104)
 */
export interface COMPROPSHEETUI {
  /** u16 */
  cbSize: number;
  /** u16 */
  Flags: number;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInstCaller: Uint8Array | Deno.PointerValue;
  /** ptr */
  pCallerName: Deno.PointerValue | Uint8Array;
  /** usize */
  UserData: Deno.PointerValue;
  /** ptr */
  pHelpFile: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.Printing._CPSUICALLBACK */
  pfnCallBack: Uint8Array | Deno.PointerValue;
  /** ptr */
  pOptItem: Deno.PointerValue | Uint8Array;
  /** ptr */
  pDlgPage: Deno.PointerValue | Uint8Array;
  /** u16 */
  cOptItem: number;
  /** u16 */
  cDlgPage: number;
  /** usize */
  IconID: Deno.PointerValue;
  /** ptr */
  pOptItemName: Deno.PointerValue | Uint8Array;
  /** u16 */
  CallerVersion: number;
  /** u16 */
  OptItemVersion: number;
  /** array */
  dwReserved: Deno.PointerValue;
}

export const sizeofCOMPROPSHEETUI = 104;

export function allocCOMPROPSHEETUI(data?: Partial<COMPROPSHEETUI>): Uint8Array {
  const buf = new Uint8Array(sizeofCOMPROPSHEETUI);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hInstCaller !== undefined) view.setBigUint64(8, data.hInstCaller === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInstCaller))), true);
  // 0x10: pointer
  if (data?.pCallerName !== undefined) view.setBigUint64(16, data.pCallerName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pCallerName))), true);
  // 0x18: usize
  if (data?.UserData !== undefined) view.setBigUint64(24, BigInt(data.UserData), true);
  // 0x20: pointer
  if (data?.pHelpFile !== undefined) view.setBigUint64(32, data.pHelpFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pHelpFile))), true);
  // 0x28: pointer
  if (data?.pfnCallBack !== undefined) view.setBigUint64(40, data.pfnCallBack === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnCallBack))), true);
  // 0x30: pointer
  if (data?.pOptItem !== undefined) view.setBigUint64(48, data.pOptItem === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOptItem))), true);
  // 0x38: pointer
  if (data?.pDlgPage !== undefined) view.setBigUint64(56, data.pDlgPage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDlgPage))), true);
  // 0x40: u16
  if (data?.cOptItem !== undefined) view.setUint16(64, Number(data.cOptItem), true);
  // 0x42: u16
  if (data?.cDlgPage !== undefined) view.setUint16(66, Number(data.cDlgPage), true);
  // 0x44: pad4
  // 0x48: usize
  if (data?.IconID !== undefined) view.setBigUint64(72, BigInt(data.IconID), true);
  // 0x50: pointer
  if (data?.pOptItemName !== undefined) view.setBigUint64(80, data.pOptItemName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOptItemName))), true);
  // 0x58: u16
  if (data?.CallerVersion !== undefined) view.setUint16(88, Number(data.CallerVersion), true);
  // 0x5a: u16
  if (data?.OptItemVersion !== undefined) view.setUint16(90, Number(data.OptItemVersion), true);
  // 0x5c: pad4
  // 0x60: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(96, data.dwReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwReserved))), true);
  return buf;
}

export class COMPROPSHEETUIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hInstCaller(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pCallerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: usize
  get UserData(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x20: pointer
  get pHelpFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pfnCallBack(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get pOptItem(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pDlgPage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u16
  get cOptItem(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: u16
  get cDlgPage(): number {
    return this.view.getUint16(66, true);
  }

  // 0x44: pad4

  // 0x48: usize
  get IconID(): Deno.PointerValue {
    return Number(this.view.getBigUint64(72, true));
  }

  // 0x50: pointer
  get pOptItemName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: u16
  get CallerVersion(): number {
    return this.view.getUint16(88, true);
  }

  // 0x5a: u16
  get OptItemVersion(): number {
    return this.view.getUint16(90, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hInstCaller(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pCallerName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: usize
  set UserData(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set pHelpFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pfnCallBack(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set pOptItem(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pDlgPage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u16
  set cOptItem(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: u16
  set cDlgPage(value: number) {
    this.view.setUint16(66, value, true);
  }

  // 0x44: pad4

  // 0x48: usize
  set IconID(value: Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(value), true);
  }

  // 0x50: pointer
  set pOptItemName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: u16
  set CallerVersion(value: number) {
    this.view.setUint16(88, value, true);
  }

  // 0x5a: u16
  set OptItemVersion(value: number) {
    this.view.setUint16(90, value, true);
  }

  // 0x5c: pad4

  // 0x60: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HANDLE = Deno.PointerValue;

export type LRESULT = Deno.PointerValue;

/**
 * Windows.Win32.Graphics.Printing.SETRESULT_INFO (size: 24)
 */
export interface SETRESULT_INFO {
  /** u16 */
  cbSize: number;
  /** u16 */
  wReserved: number;
  /** Windows.Win32.Foundation.HANDLE */
  hSetResult: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LRESULT */
  Result: Uint8Array | Deno.PointerValue;
}

export const sizeofSETRESULT_INFO = 24;

export function allocSETRESULT_INFO(data?: Partial<SETRESULT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofSETRESULT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.wReserved !== undefined) view.setUint16(2, Number(data.wReserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hSetResult !== undefined) view.setBigUint64(8, data.hSetResult === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hSetResult))), true);
  // 0x10: pointer
  if (data?.Result !== undefined) view.setBigUint64(16, data.Result === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Result))), true);
  return buf;
}

export class SETRESULT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wReserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hSetResult(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Result(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wReserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hSetResult(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set Result(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.INSERTPSUIPAGE_INFO (size: 32)
 */
export interface INSERTPSUIPAGE_INFO {
  /** u16 */
  cbSize: number;
  /** u8 */
  Type: number;
  /** u8 */
  Mode: number;
  /** usize */
  dwData1: Deno.PointerValue;
  /** usize */
  dwData2: Deno.PointerValue;
  /** usize */
  dwData3: Deno.PointerValue;
}

export const sizeofINSERTPSUIPAGE_INFO = 32;

export function allocINSERTPSUIPAGE_INFO(data?: Partial<INSERTPSUIPAGE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofINSERTPSUIPAGE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u8
  if (data?.Type !== undefined) view.setUint8(2, Number(data.Type));
  // 0x03: u8
  if (data?.Mode !== undefined) view.setUint8(3, Number(data.Mode));
  // 0x04: pad4
  // 0x08: usize
  if (data?.dwData1 !== undefined) view.setBigUint64(8, BigInt(data.dwData1), true);
  // 0x10: usize
  if (data?.dwData2 !== undefined) view.setBigUint64(16, BigInt(data.dwData2), true);
  // 0x18: usize
  if (data?.dwData3 !== undefined) view.setBigUint64(24, BigInt(data.dwData3), true);
  return buf;
}

export class INSERTPSUIPAGE_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u8
  get Type(): number {
    return this.view.getUint8(2);
  }

  // 0x03: u8
  get Mode(): number {
    return this.view.getUint8(3);
  }

  // 0x04: pad4

  // 0x08: usize
  get dwData1(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: usize
  get dwData2(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: usize
  get dwData3(): Deno.PointerValue {
    return Number(this.view.getBigUint64(24, true));
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u8
  set Type(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: u8
  set Mode(value: number) {
    this.view.setUint8(3, value);
  }

  // 0x04: pad4

  // 0x08: usize
  set dwData1(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: usize
  set dwData2(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: usize
  set dwData3(value: Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PSPINFO (size: 32)
 */
export interface PSPINFO {
  /** u16 */
  cbSize: number;
  /** u16 */
  wReserved: number;
  /** Windows.Win32.Foundation.HANDLE */
  hComPropSheet: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hCPSUIPage: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Printing.PFNCOMPROPSHEET */
  pfnComPropSheet: Uint8Array | Deno.PointerValue;
}

export const sizeofPSPINFO = 32;

export function allocPSPINFO(data?: Partial<PSPINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPSPINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.wReserved !== undefined) view.setUint16(2, Number(data.wReserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hComPropSheet !== undefined) view.setBigUint64(8, data.hComPropSheet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hComPropSheet))), true);
  // 0x10: pointer
  if (data?.hCPSUIPage !== undefined) view.setBigUint64(16, data.hCPSUIPage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hCPSUIPage))), true);
  // 0x18: pointer
  if (data?.pfnComPropSheet !== undefined) view.setBigUint64(24, data.pfnComPropSheet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnComPropSheet))), true);
  return buf;
}

export class PSPINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wReserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hComPropSheet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hCPSUIPage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pfnComPropSheet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wReserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hComPropSheet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hCPSUIPage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pfnComPropSheet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.CPSUIDATABLOCK (size: 16)
 */
export interface CPSUIDATABLOCK {
  /** u32 */
  cbData: number;
  /** ptr */
  pbData: Deno.PointerValue | Uint8Array;
}

export const sizeofCPSUIDATABLOCK = 16;

export function allocCPSUIDATABLOCK(data?: Partial<CPSUIDATABLOCK>): Uint8Array {
  const buf = new Uint8Array(sizeofCPSUIDATABLOCK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbData !== undefined) view.setUint32(0, Number(data.cbData), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pbData !== undefined) view.setBigUint64(8, data.pbData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbData))), true);
  return buf;
}

export class CPSUIDATABLOCKView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbData(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pbData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbData(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pbData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PROPSHEETUI_INFO (size: 48)
 */
export interface PROPSHEETUI_INFO {
  /** u16 */
  cbSize: number;
  /** u16 */
  Version: number;
  /** u16 */
  Flags: number;
  /** u16 */
  Reason: number;
  /** Windows.Win32.Foundation.HANDLE */
  hComPropSheet: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Printing.PFNCOMPROPSHEET */
  pfnComPropSheet: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.LPARAM */
  lParamInit: Uint8Array | Deno.PointerValue;
  /** usize */
  UserData: Deno.PointerValue;
  /** usize */
  Result: Deno.PointerValue;
}

export const sizeofPROPSHEETUI_INFO = 48;

export function allocPROPSHEETUI_INFO(data?: Partial<PROPSHEETUI_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETUI_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.Version !== undefined) view.setUint16(2, Number(data.Version), true);
  // 0x04: u16
  if (data?.Flags !== undefined) view.setUint16(4, Number(data.Flags), true);
  // 0x06: u16
  if (data?.Reason !== undefined) view.setUint16(6, Number(data.Reason), true);
  // 0x08: pointer
  if (data?.hComPropSheet !== undefined) view.setBigUint64(8, data.hComPropSheet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hComPropSheet))), true);
  // 0x10: pointer
  if (data?.pfnComPropSheet !== undefined) view.setBigUint64(16, data.pfnComPropSheet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnComPropSheet))), true);
  // 0x18: pointer
  if (data?.lParamInit !== undefined) view.setBigUint64(24, data.lParamInit === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lParamInit))), true);
  // 0x20: usize
  if (data?.UserData !== undefined) view.setBigUint64(32, BigInt(data.UserData), true);
  // 0x28: usize
  if (data?.Result !== undefined) view.setBigUint64(40, BigInt(data.Result), true);
  return buf;
}

export class PROPSHEETUI_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Version(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get Flags(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get Reason(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: pointer
  get hComPropSheet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pfnComPropSheet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lParamInit(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: usize
  get UserData(): Deno.PointerValue {
    return Number(this.view.getBigUint64(32, true));
  }

  // 0x28: usize
  get Result(): Deno.PointerValue {
    return Number(this.view.getBigUint64(40, true));
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Version(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set Flags(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set Reason(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: pointer
  set hComPropSheet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pfnComPropSheet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lParamInit(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: usize
  set UserData(value: Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(value), true);
  }

  // 0x28: usize
  set Result(value: Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(value), true);
  }
}

export type HICON = Deno.PointerValue;

/**
 * Windows.Win32.Graphics.Printing.PROPSHEETUI_GETICON_INFO (size: 16)
 */
export interface PROPSHEETUI_GETICON_INFO {
  /** u16 */
  cbSize: number;
  /** u16 */
  Flags: number;
  /** u16 */
  cxIcon: number;
  /** u16 */
  cyIcon: number;
  /** Windows.Win32.UI.WindowsAndMessaging.HICON */
  hIcon: Uint8Array | Deno.PointerValue;
}

export const sizeofPROPSHEETUI_GETICON_INFO = 16;

export function allocPROPSHEETUI_GETICON_INFO(data?: Partial<PROPSHEETUI_GETICON_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETUI_GETICON_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: u16
  if (data?.cxIcon !== undefined) view.setUint16(4, Number(data.cxIcon), true);
  // 0x06: u16
  if (data?.cyIcon !== undefined) view.setUint16(6, Number(data.cyIcon), true);
  // 0x08: pointer
  if (data?.hIcon !== undefined) view.setBigUint64(8, data.hIcon === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hIcon))), true);
  return buf;
}

export class PROPSHEETUI_GETICON_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get cxIcon(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get cyIcon(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: pointer
  get hIcon(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set cxIcon(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set cyIcon(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: pointer
  set hIcon(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PROPSHEETUI_INFO_HEADER (size: 40)
 */
export interface PROPSHEETUI_INFO_HEADER {
  /** u16 */
  cbSize: number;
  /** u16 */
  Flags: number;
  /** ptr */
  pTitle: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HWND */
  hWndParent: Deno.PointerValue;
  /** Windows.Win32.Foundation.HINSTANCE */
  hInst: Uint8Array | Deno.PointerValue;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue;
}

export const sizeofPROPSHEETUI_INFO_HEADER = 40;

export function allocPROPSHEETUI_INFO_HEADER(data?: Partial<PROPSHEETUI_INFO_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofPROPSHEETUI_INFO_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pTitle !== undefined) view.setBigUint64(8, data.pTitle === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTitle))), true);
  // 0x10: pointer
  if (data?.hWndParent !== undefined) view.setBigUint64(16, data.hWndParent === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hWndParent))), true);
  // 0x18: pointer
  if (data?.hInst !== undefined) view.setBigUint64(24, data.hInst === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hInst))), true);
  // 0x20: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(32, data.Anonymous === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Anonymous))), true);
  return buf;
}

export class PROPSHEETUI_INFO_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hWndParent(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get hInst(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get Anonymous(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pTitle(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hWndParent(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set hInst(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set Anonymous(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type PSTR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_1A (size: 32)
 */
export interface PRINTER_INFO_1A {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.PSTR */
  pDescription: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pComment: string | null | Uint8Array;
}

export const sizeofPRINTER_INFO_1A = 32;

export function allocPRINTER_INFO_1A(data?: Partial<PRINTER_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pDescription !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pDescription);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pComment !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class PRINTER_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_1W (size: 32)
 */
export interface PRINTER_INFO_1W {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pDescription: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pComment: string | null | Uint8Array | Uint16Array;
}

export const sizeofPRINTER_INFO_1W = 32;

export function allocPRINTER_INFO_1W(data?: Partial<PRINTER_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pDescription !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pDescription);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pComment !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pComment);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  return buf;
}

export class PRINTER_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }
}

export type PSECURITY_DESCRIPTOR = Deno.PointerValue | Uint8Array;

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_2A (size: 136)
 */
export interface PRINTER_INFO_2A {
  /** Windows.Win32.Foundation.PSTR */
  pServerName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pPrinterName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pShareName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pPortName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDriverName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pComment: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pLocation: string | null | Uint8Array;
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pSepFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pPrintProcessor: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDatatype: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pParameters: string | null | Uint8Array;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  pSecurityDescriptor: Uint8Array | Deno.PointerValue;
  /** u32 */
  Attributes: number;
  /** u32 */
  Priority: number;
  /** u32 */
  DefaultPriority: number;
  /** u32 */
  StartTime: number;
  /** u32 */
  UntilTime: number;
  /** u32 */
  Status: number;
  /** u32 */
  cJobs: number;
  /** u32 */
  AveragePPM: number;
}

export const sizeofPRINTER_INFO_2A = 136;

export function allocPRINTER_INFO_2A(data?: Partial<PRINTER_INFO_2A>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_2A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pServerName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pServerName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pPrinterName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pShareName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pShareName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pPortName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pPortName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDriverName !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pDriverName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pComment !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pComment);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pLocation !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pLocation);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(56, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  // 0x40: buffer
  if (data?.pSepFile !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.pSepFile);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pPrintProcessor !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.pPrintProcessor);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.pDatatype);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.pParameters !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.pParameters);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(96, data.pSecurityDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSecurityDescriptor))), true);
  // 0x68: u32
  if (data?.Attributes !== undefined) view.setUint32(104, Number(data.Attributes), true);
  // 0x6c: u32
  if (data?.Priority !== undefined) view.setUint32(108, Number(data.Priority), true);
  // 0x70: u32
  if (data?.DefaultPriority !== undefined) view.setUint32(112, Number(data.DefaultPriority), true);
  // 0x74: u32
  if (data?.StartTime !== undefined) view.setUint32(116, Number(data.StartTime), true);
  // 0x78: u32
  if (data?.UntilTime !== undefined) view.setUint32(120, Number(data.UntilTime), true);
  // 0x7c: u32
  if (data?.Status !== undefined) view.setUint32(124, Number(data.Status), true);
  // 0x80: u32
  if (data?.cJobs !== undefined) view.setUint32(128, Number(data.cJobs), true);
  // 0x84: u32
  if (data?.AveragePPM !== undefined) view.setUint32(132, Number(data.AveragePPM), true);
  return buf;
}

export class PRINTER_INFO_2AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pShareName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pPortName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pLocation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pSepFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pPrintProcessor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get pParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get pSecurityDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get Attributes(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get Priority(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get DefaultPriority(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get StartTime(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get UntilTime(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get Status(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get cJobs(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get AveragePPM(): number {
    return this.view.getUint32(132, true);
  }

  // 0x00: buffer
  set pServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pShareName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pPortName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDriverName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pLocation(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set pSepFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pPrintProcessor(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set pParameters(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: pointer
  set pSecurityDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set Attributes(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set Priority(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set DefaultPriority(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set StartTime(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set UntilTime(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set Status(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set cJobs(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set AveragePPM(value: number) {
    this.view.setUint32(132, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_2W (size: 136)
 */
export interface PRINTER_INFO_2W {
  /** Windows.Win32.Foundation.PWSTR */
  pServerName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pShareName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPortName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDriverName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pComment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pLocation: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pSepFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPrintProcessor: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDatatype: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pParameters: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  pSecurityDescriptor: Uint8Array | Deno.PointerValue;
  /** u32 */
  Attributes: number;
  /** u32 */
  Priority: number;
  /** u32 */
  DefaultPriority: number;
  /** u32 */
  StartTime: number;
  /** u32 */
  UntilTime: number;
  /** u32 */
  Status: number;
  /** u32 */
  cJobs: number;
  /** u32 */
  AveragePPM: number;
}

export const sizeofPRINTER_INFO_2W = 136;

export function allocPRINTER_INFO_2W(data?: Partial<PRINTER_INFO_2W>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_2W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pServerName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pServerName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pPrinterName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pShareName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pShareName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pPortName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pPortName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDriverName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pDriverName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pComment !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pComment);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pLocation !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pLocation);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(56, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  // 0x40: buffer
  if (data?.pSepFile !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pSepFile);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pPrintProcessor !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pPrintProcessor);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pDatatype);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: buffer
  if (data?.pParameters !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pParameters);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(96, data.pSecurityDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSecurityDescriptor))), true);
  // 0x68: u32
  if (data?.Attributes !== undefined) view.setUint32(104, Number(data.Attributes), true);
  // 0x6c: u32
  if (data?.Priority !== undefined) view.setUint32(108, Number(data.Priority), true);
  // 0x70: u32
  if (data?.DefaultPriority !== undefined) view.setUint32(112, Number(data.DefaultPriority), true);
  // 0x74: u32
  if (data?.StartTime !== undefined) view.setUint32(116, Number(data.StartTime), true);
  // 0x78: u32
  if (data?.UntilTime !== undefined) view.setUint32(120, Number(data.UntilTime), true);
  // 0x7c: u32
  if (data?.Status !== undefined) view.setUint32(124, Number(data.Status), true);
  // 0x80: u32
  if (data?.cJobs !== undefined) view.setUint32(128, Number(data.cJobs), true);
  // 0x84: u32
  if (data?.AveragePPM !== undefined) view.setUint32(132, Number(data.AveragePPM), true);
  return buf;
}

export class PRINTER_INFO_2WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pShareName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pPortName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pComment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pLocation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pSepFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pPrintProcessor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get pParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get pSecurityDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get Attributes(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get Priority(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get DefaultPriority(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get StartTime(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get UntilTime(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get Status(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get cJobs(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: u32
  get AveragePPM(): number {
    return this.view.getUint32(132, true);
  }

  // 0x00: buffer
  set pServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pShareName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pPortName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDriverName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pComment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pLocation(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: buffer
  set pSepFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pPrintProcessor(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: buffer
  set pParameters(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: pointer
  set pSecurityDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set Attributes(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set Priority(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set DefaultPriority(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set StartTime(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set UntilTime(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set Status(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set cJobs(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: u32
  set AveragePPM(value: number) {
    this.view.setUint32(132, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_3 (size: 8)
 */
export interface PRINTER_INFO_3 {
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  pSecurityDescriptor: Uint8Array | Deno.PointerValue;
}

export const sizeofPRINTER_INFO_3 = 8;

export function allocPRINTER_INFO_3(data?: Partial<PRINTER_INFO_3>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(0, data.pSecurityDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSecurityDescriptor))), true);
  return buf;
}

export class PRINTER_INFO_3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pSecurityDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pSecurityDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_4A (size: 24)
 */
export interface PRINTER_INFO_4A {
  /** Windows.Win32.Foundation.PSTR */
  pPrinterName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pServerName: string | null | Uint8Array;
  /** u32 */
  Attributes: number;
}

export const sizeofPRINTER_INFO_4A = 24;

export function allocPRINTER_INFO_4A(data?: Partial<PRINTER_INFO_4A>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_4A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pPrinterName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pServerName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pServerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.Attributes !== undefined) view.setUint32(16, Number(data.Attributes), true);
  // 0x14: pad4
  return buf;
}

export class PRINTER_INFO_4AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Attributes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set Attributes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_4W (size: 24)
 */
export interface PRINTER_INFO_4W {
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pServerName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Attributes: number;
}

export const sizeofPRINTER_INFO_4W = 24;

export function allocPRINTER_INFO_4W(data?: Partial<PRINTER_INFO_4W>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_4W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pPrinterName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pServerName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pServerName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.Attributes !== undefined) view.setUint32(16, Number(data.Attributes), true);
  // 0x14: pad4
  return buf;
}

export class PRINTER_INFO_4WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Attributes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set Attributes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_5A (size: 32)
 */
export interface PRINTER_INFO_5A {
  /** Windows.Win32.Foundation.PSTR */
  pPrinterName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pPortName: string | null | Uint8Array;
  /** u32 */
  Attributes: number;
  /** u32 */
  DeviceNotSelectedTimeout: number;
  /** u32 */
  TransmissionRetryTimeout: number;
}

export const sizeofPRINTER_INFO_5A = 32;

export function allocPRINTER_INFO_5A(data?: Partial<PRINTER_INFO_5A>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_5A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pPrinterName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pPortName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pPortName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.Attributes !== undefined) view.setUint32(16, Number(data.Attributes), true);
  // 0x14: u32
  if (data?.DeviceNotSelectedTimeout !== undefined) view.setUint32(20, Number(data.DeviceNotSelectedTimeout), true);
  // 0x18: u32
  if (data?.TransmissionRetryTimeout !== undefined) view.setUint32(24, Number(data.TransmissionRetryTimeout), true);
  // 0x1c: pad4
  return buf;
}

export class PRINTER_INFO_5AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pPortName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Attributes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DeviceNotSelectedTimeout(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get TransmissionRetryTimeout(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pPortName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set Attributes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DeviceNotSelectedTimeout(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set TransmissionRetryTimeout(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_5W (size: 32)
 */
export interface PRINTER_INFO_5W {
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPortName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Attributes: number;
  /** u32 */
  DeviceNotSelectedTimeout: number;
  /** u32 */
  TransmissionRetryTimeout: number;
}

export const sizeofPRINTER_INFO_5W = 32;

export function allocPRINTER_INFO_5W(data?: Partial<PRINTER_INFO_5W>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_5W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pPrinterName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pPortName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pPortName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.Attributes !== undefined) view.setUint32(16, Number(data.Attributes), true);
  // 0x14: u32
  if (data?.DeviceNotSelectedTimeout !== undefined) view.setUint32(20, Number(data.DeviceNotSelectedTimeout), true);
  // 0x18: u32
  if (data?.TransmissionRetryTimeout !== undefined) view.setUint32(24, Number(data.TransmissionRetryTimeout), true);
  // 0x1c: pad4
  return buf;
}

export class PRINTER_INFO_5WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pPortName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get Attributes(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get DeviceNotSelectedTimeout(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get TransmissionRetryTimeout(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pPortName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set Attributes(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set DeviceNotSelectedTimeout(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set TransmissionRetryTimeout(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_6 (size: 8)
 */
export interface PRINTER_INFO_6 {
  /** u32 */
  dwStatus: number;
}

export const sizeofPRINTER_INFO_6 = 8;

export function allocPRINTER_INFO_6(data?: Partial<PRINTER_INFO_6>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_6);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStatus !== undefined) view.setUint32(0, Number(data.dwStatus), true);
  // 0x04: pad4
  return buf;
}

export class PRINTER_INFO_6View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_7A (size: 16)
 */
export interface PRINTER_INFO_7A {
  /** Windows.Win32.Foundation.PSTR */
  pszObjectGUID: string | null | Uint8Array;
  /** u32 */
  dwAction: number;
}

export const sizeofPRINTER_INFO_7A = 16;

export function allocPRINTER_INFO_7A(data?: Partial<PRINTER_INFO_7A>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_7A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjectGUID !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszObjectGUID);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.dwAction !== undefined) view.setUint32(8, Number(data.dwAction), true);
  // 0x0c: pad4
  return buf;
}

export class PRINTER_INFO_7AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjectGUID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwAction(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set pszObjectGUID(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set dwAction(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_7W (size: 16)
 */
export interface PRINTER_INFO_7W {
  /** Windows.Win32.Foundation.PWSTR */
  pszObjectGUID: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwAction: number;
}

export const sizeofPRINTER_INFO_7W = 16;

export function allocPRINTER_INFO_7W(data?: Partial<PRINTER_INFO_7W>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_7W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszObjectGUID !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszObjectGUID);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.dwAction !== undefined) view.setUint32(8, Number(data.dwAction), true);
  // 0x0c: pad4
  return buf;
}

export class PRINTER_INFO_7WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszObjectGUID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwAction(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set pszObjectGUID(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set dwAction(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_8A (size: 8)
 */
export interface PRINTER_INFO_8A {
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
}

export const sizeofPRINTER_INFO_8A = 8;

export function allocPRINTER_INFO_8A(data?: Partial<PRINTER_INFO_8A>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_8A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(0, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  return buf;
}

export class PRINTER_INFO_8AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_8W (size: 8)
 */
export interface PRINTER_INFO_8W {
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
}

export const sizeofPRINTER_INFO_8W = 8;

export function allocPRINTER_INFO_8W(data?: Partial<PRINTER_INFO_8W>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_8W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(0, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  return buf;
}

export class PRINTER_INFO_8WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_9A (size: 8)
 */
export interface PRINTER_INFO_9A {
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
}

export const sizeofPRINTER_INFO_9A = 8;

export function allocPRINTER_INFO_9A(data?: Partial<PRINTER_INFO_9A>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_9A);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(0, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  return buf;
}

export class PRINTER_INFO_9AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_INFO_9W (size: 8)
 */
export interface PRINTER_INFO_9W {
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
}

export const sizeofPRINTER_INFO_9W = 8;

export function allocPRINTER_INFO_9W(data?: Partial<PRINTER_INFO_9W>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_INFO_9W);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(0, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  return buf;
}

export class PRINTER_INFO_9WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.SYSTEMTIME (size: 16)
 */
export interface SYSTEMTIME {
  /** u16 */
  wYear: number;
  /** u16 */
  wMonth: number;
  /** u16 */
  wDayOfWeek: number;
  /** u16 */
  wDay: number;
  /** u16 */
  wHour: number;
  /** u16 */
  wMinute: number;
  /** u16 */
  wSecond: number;
  /** u16 */
  wMilliseconds: number;
}

export const sizeofSYSTEMTIME = 16;

export function allocSYSTEMTIME(data?: Partial<SYSTEMTIME>): Uint8Array {
  const buf = new Uint8Array(sizeofSYSTEMTIME);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wYear !== undefined) view.setUint16(0, Number(data.wYear), true);
  // 0x02: u16
  if (data?.wMonth !== undefined) view.setUint16(2, Number(data.wMonth), true);
  // 0x04: u16
  if (data?.wDayOfWeek !== undefined) view.setUint16(4, Number(data.wDayOfWeek), true);
  // 0x06: u16
  if (data?.wDay !== undefined) view.setUint16(6, Number(data.wDay), true);
  // 0x08: u16
  if (data?.wHour !== undefined) view.setUint16(8, Number(data.wHour), true);
  // 0x0a: u16
  if (data?.wMinute !== undefined) view.setUint16(10, Number(data.wMinute), true);
  // 0x0c: u16
  if (data?.wSecond !== undefined) view.setUint16(12, Number(data.wSecond), true);
  // 0x0e: u16
  if (data?.wMilliseconds !== undefined) view.setUint16(14, Number(data.wMilliseconds), true);
  return buf;
}

export class SYSTEMTIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wYear(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wMonth(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u16
  get wDayOfWeek(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wDay(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u16
  get wHour(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get wMinute(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get wSecond(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get wMilliseconds(): number {
    return this.view.getUint16(14, true);
  }

  // 0x00: u16
  set wYear(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wMonth(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u16
  set wDayOfWeek(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wDay(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u16
  set wHour(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set wMinute(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set wSecond(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set wMilliseconds(value: number) {
    this.view.setUint16(14, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.JOB_INFO_1A (size: 88)
 */
export interface JOB_INFO_1A {
  /** u32 */
  JobId: number;
  /** Windows.Win32.Foundation.PSTR */
  pPrinterName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pMachineName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pUserName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDocument: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDatatype: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pStatus: string | null | Uint8Array;
  /** u32 */
  Status: number;
  /** u32 */
  Priority: number;
  /** u32 */
  Position: number;
  /** u32 */
  TotalPages: number;
  /** u32 */
  PagesPrinted: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  Submitted: Uint8Array | Deno.PointerValue;
}

export const sizeofJOB_INFO_1A = 88;

export function allocJOB_INFO_1A(data?: Partial<JOB_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofJOB_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.JobId !== undefined) view.setUint32(0, Number(data.JobId), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pPrinterName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pMachineName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pMachineName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pUserName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDocument !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pDocument);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pDatatype);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pStatus !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pStatus);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.Status !== undefined) view.setUint32(56, Number(data.Status), true);
  // 0x3c: u32
  if (data?.Priority !== undefined) view.setUint32(60, Number(data.Priority), true);
  // 0x40: u32
  if (data?.Position !== undefined) view.setUint32(64, Number(data.Position), true);
  // 0x44: u32
  if (data?.TotalPages !== undefined) view.setUint32(68, Number(data.TotalPages), true);
  // 0x48: u32
  if (data?.PagesPrinted !== undefined) view.setUint32(72, Number(data.PagesPrinted), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.Submitted !== undefined) view.setBigUint64(80, data.Submitted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Submitted))), true);
  return buf;
}

export class JOB_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get JobId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDocument(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get Status(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Priority(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get Position(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get TotalPages(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get PagesPrinted(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get Submitted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set JobId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDocument(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pStatus(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set Status(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Priority(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set Position(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set TotalPages(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set PagesPrinted(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set Submitted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.JOB_INFO_1W (size: 88)
 */
export interface JOB_INFO_1W {
  /** u32 */
  JobId: number;
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pMachineName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDocument: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDatatype: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pStatus: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Status: number;
  /** u32 */
  Priority: number;
  /** u32 */
  Position: number;
  /** u32 */
  TotalPages: number;
  /** u32 */
  PagesPrinted: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  Submitted: Uint8Array | Deno.PointerValue;
}

export const sizeofJOB_INFO_1W = 88;

export function allocJOB_INFO_1W(data?: Partial<JOB_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofJOB_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.JobId !== undefined) view.setUint32(0, Number(data.JobId), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pPrinterName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pMachineName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pMachineName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pUserName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDocument !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pDocument);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pDatatype);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pStatus !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pStatus);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.Status !== undefined) view.setUint32(56, Number(data.Status), true);
  // 0x3c: u32
  if (data?.Priority !== undefined) view.setUint32(60, Number(data.Priority), true);
  // 0x40: u32
  if (data?.Position !== undefined) view.setUint32(64, Number(data.Position), true);
  // 0x44: u32
  if (data?.TotalPages !== undefined) view.setUint32(68, Number(data.TotalPages), true);
  // 0x48: u32
  if (data?.PagesPrinted !== undefined) view.setUint32(72, Number(data.PagesPrinted), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.Submitted !== undefined) view.setBigUint64(80, data.Submitted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Submitted))), true);
  return buf;
}

export class JOB_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get JobId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDocument(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get Status(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get Priority(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: u32
  get Position(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get TotalPages(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get PagesPrinted(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get Submitted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set JobId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDocument(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pStatus(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set Status(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set Priority(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: u32
  set Position(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set TotalPages(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set PagesPrinted(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set Submitted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.JOB_INFO_2A (size: 152)
 */
export interface JOB_INFO_2A {
  /** u32 */
  JobId: number;
  /** Windows.Win32.Foundation.PSTR */
  pPrinterName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pMachineName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pUserName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDocument: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pNotifyName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDatatype: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pPrintProcessor: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pParameters: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDriverName: string | null | Uint8Array;
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pStatus: string | null | Uint8Array;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  pSecurityDescriptor: Uint8Array | Deno.PointerValue;
  /** u32 */
  Status: number;
  /** u32 */
  Priority: number;
  /** u32 */
  Position: number;
  /** u32 */
  StartTime: number;
  /** u32 */
  UntilTime: number;
  /** u32 */
  TotalPages: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  Submitted: Uint8Array | Deno.PointerValue;
  /** u32 */
  Time: number;
  /** u32 */
  PagesPrinted: number;
}

export const sizeofJOB_INFO_2A = 152;

export function allocJOB_INFO_2A(data?: Partial<JOB_INFO_2A>): Uint8Array {
  const buf = new Uint8Array(sizeofJOB_INFO_2A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.JobId !== undefined) view.setUint32(0, Number(data.JobId), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pPrinterName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pMachineName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pMachineName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pUserName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDocument !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pDocument);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pNotifyName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pNotifyName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pDatatype);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pPrintProcessor !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.pPrintProcessor);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.pParameters !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.pParameters);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pDriverName !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.pDriverName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(80, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  // 0x58: buffer
  if (data?.pStatus !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.pStatus);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(96, data.pSecurityDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSecurityDescriptor))), true);
  // 0x68: u32
  if (data?.Status !== undefined) view.setUint32(104, Number(data.Status), true);
  // 0x6c: u32
  if (data?.Priority !== undefined) view.setUint32(108, Number(data.Priority), true);
  // 0x70: u32
  if (data?.Position !== undefined) view.setUint32(112, Number(data.Position), true);
  // 0x74: u32
  if (data?.StartTime !== undefined) view.setUint32(116, Number(data.StartTime), true);
  // 0x78: u32
  if (data?.UntilTime !== undefined) view.setUint32(120, Number(data.UntilTime), true);
  // 0x7c: u32
  if (data?.TotalPages !== undefined) view.setUint32(124, Number(data.TotalPages), true);
  // 0x80: u32
  if (data?.Size !== undefined) view.setUint32(128, Number(data.Size), true);
  // 0x84: pad4
  // 0x88: pointer
  if (data?.Submitted !== undefined) view.setBigUint64(136, data.Submitted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Submitted))), true);
  // 0x90: u32
  if (data?.Time !== undefined) view.setUint32(144, Number(data.Time), true);
  // 0x94: u32
  if (data?.PagesPrinted !== undefined) view.setUint32(148, Number(data.PagesPrinted), true);
  return buf;
}

export class JOB_INFO_2AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get JobId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDocument(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pNotifyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pPrintProcessor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pDriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get pStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get pSecurityDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get Status(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get Priority(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get Position(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get StartTime(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get UntilTime(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get TotalPages(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get Size(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  get Submitted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: u32
  get Time(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get PagesPrinted(): number {
    return this.view.getUint32(148, true);
  }

  // 0x00: u32
  set JobId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDocument(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pNotifyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pPrintProcessor(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set pParameters(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pDriverName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: buffer
  set pStatus(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: pointer
  set pSecurityDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set Status(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set Priority(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set Position(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set StartTime(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set UntilTime(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set TotalPages(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set Size(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  set Submitted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: u32
  set Time(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set PagesPrinted(value: number) {
    this.view.setUint32(148, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.JOB_INFO_2W (size: 152)
 */
export interface JOB_INFO_2W {
  /** u32 */
  JobId: number;
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pMachineName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDocument: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pNotifyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDatatype: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPrintProcessor: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pParameters: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDriverName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pStatus: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  pSecurityDescriptor: Uint8Array | Deno.PointerValue;
  /** u32 */
  Status: number;
  /** u32 */
  Priority: number;
  /** u32 */
  Position: number;
  /** u32 */
  StartTime: number;
  /** u32 */
  UntilTime: number;
  /** u32 */
  TotalPages: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  Submitted: Uint8Array | Deno.PointerValue;
  /** u32 */
  Time: number;
  /** u32 */
  PagesPrinted: number;
}

export const sizeofJOB_INFO_2W = 152;

export function allocJOB_INFO_2W(data?: Partial<JOB_INFO_2W>): Uint8Array {
  const buf = new Uint8Array(sizeofJOB_INFO_2W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.JobId !== undefined) view.setUint32(0, Number(data.JobId), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pPrinterName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pMachineName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pMachineName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pUserName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDocument !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pDocument);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pNotifyName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pNotifyName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pDatatype);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pPrintProcessor !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pPrintProcessor);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.pParameters !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pParameters);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pDriverName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pDriverName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(80, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  // 0x58: buffer
  if (data?.pStatus !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pStatus);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(96, data.pSecurityDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSecurityDescriptor))), true);
  // 0x68: u32
  if (data?.Status !== undefined) view.setUint32(104, Number(data.Status), true);
  // 0x6c: u32
  if (data?.Priority !== undefined) view.setUint32(108, Number(data.Priority), true);
  // 0x70: u32
  if (data?.Position !== undefined) view.setUint32(112, Number(data.Position), true);
  // 0x74: u32
  if (data?.StartTime !== undefined) view.setUint32(116, Number(data.StartTime), true);
  // 0x78: u32
  if (data?.UntilTime !== undefined) view.setUint32(120, Number(data.UntilTime), true);
  // 0x7c: u32
  if (data?.TotalPages !== undefined) view.setUint32(124, Number(data.TotalPages), true);
  // 0x80: u32
  if (data?.Size !== undefined) view.setUint32(128, Number(data.Size), true);
  // 0x84: pad4
  // 0x88: pointer
  if (data?.Submitted !== undefined) view.setBigUint64(136, data.Submitted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Submitted))), true);
  // 0x90: u32
  if (data?.Time !== undefined) view.setUint32(144, Number(data.Time), true);
  // 0x94: u32
  if (data?.PagesPrinted !== undefined) view.setUint32(148, Number(data.PagesPrinted), true);
  return buf;
}

export class JOB_INFO_2WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get JobId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDocument(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pNotifyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pPrintProcessor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pDriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get pStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get pSecurityDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get Status(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get Priority(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get Position(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get StartTime(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get UntilTime(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get TotalPages(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get Size(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  get Submitted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: u32
  get Time(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get PagesPrinted(): number {
    return this.view.getUint32(148, true);
  }

  // 0x00: u32
  set JobId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDocument(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pNotifyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pPrintProcessor(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set pParameters(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pDriverName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: buffer
  set pStatus(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: pointer
  set pSecurityDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set Status(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set Priority(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set Position(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set StartTime(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set UntilTime(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set TotalPages(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set Size(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  set Submitted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: u32
  set Time(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set PagesPrinted(value: number) {
    this.view.setUint32(148, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.JOB_INFO_3 (size: 16)
 */
export interface JOB_INFO_3 {
  /** u32 */
  JobId: number;
  /** u32 */
  NextJobId: number;
  /** u32 */
  Reserved: number;
}

export const sizeofJOB_INFO_3 = 16;

export function allocJOB_INFO_3(data?: Partial<JOB_INFO_3>): Uint8Array {
  const buf = new Uint8Array(sizeofJOB_INFO_3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.JobId !== undefined) view.setUint32(0, Number(data.JobId), true);
  // 0x04: u32
  if (data?.NextJobId !== undefined) view.setUint32(4, Number(data.NextJobId), true);
  // 0x08: u32
  if (data?.Reserved !== undefined) view.setUint32(8, Number(data.Reserved), true);
  // 0x0c: pad4
  return buf;
}

export class JOB_INFO_3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get JobId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get NextJobId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Reserved(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set JobId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set NextJobId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Reserved(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.JOB_INFO_4A (size: 160)
 */
export interface JOB_INFO_4A {
  /** u32 */
  JobId: number;
  /** Windows.Win32.Foundation.PSTR */
  pPrinterName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pMachineName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pUserName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDocument: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pNotifyName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDatatype: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pPrintProcessor: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pParameters: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDriverName: string | null | Uint8Array;
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pStatus: string | null | Uint8Array;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  pSecurityDescriptor: Uint8Array | Deno.PointerValue;
  /** u32 */
  Status: number;
  /** u32 */
  Priority: number;
  /** u32 */
  Position: number;
  /** u32 */
  StartTime: number;
  /** u32 */
  UntilTime: number;
  /** u32 */
  TotalPages: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  Submitted: Uint8Array | Deno.PointerValue;
  /** u32 */
  Time: number;
  /** u32 */
  PagesPrinted: number;
  /** i32 */
  SizeHigh: number;
}

export const sizeofJOB_INFO_4A = 160;

export function allocJOB_INFO_4A(data?: Partial<JOB_INFO_4A>): Uint8Array {
  const buf = new Uint8Array(sizeofJOB_INFO_4A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.JobId !== undefined) view.setUint32(0, Number(data.JobId), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pPrinterName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pMachineName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pMachineName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pUserName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDocument !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pDocument);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pNotifyName !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pNotifyName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pDatatype);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pPrintProcessor !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.pPrintProcessor);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.pParameters !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.pParameters);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pDriverName !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.pDriverName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(80, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  // 0x58: buffer
  if (data?.pStatus !== undefined) {
    (buf as any)._f88 = util.pstrToFfi(data.pStatus);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(96, data.pSecurityDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSecurityDescriptor))), true);
  // 0x68: u32
  if (data?.Status !== undefined) view.setUint32(104, Number(data.Status), true);
  // 0x6c: u32
  if (data?.Priority !== undefined) view.setUint32(108, Number(data.Priority), true);
  // 0x70: u32
  if (data?.Position !== undefined) view.setUint32(112, Number(data.Position), true);
  // 0x74: u32
  if (data?.StartTime !== undefined) view.setUint32(116, Number(data.StartTime), true);
  // 0x78: u32
  if (data?.UntilTime !== undefined) view.setUint32(120, Number(data.UntilTime), true);
  // 0x7c: u32
  if (data?.TotalPages !== undefined) view.setUint32(124, Number(data.TotalPages), true);
  // 0x80: u32
  if (data?.Size !== undefined) view.setUint32(128, Number(data.Size), true);
  // 0x84: pad4
  // 0x88: pointer
  if (data?.Submitted !== undefined) view.setBigUint64(136, data.Submitted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Submitted))), true);
  // 0x90: u32
  if (data?.Time !== undefined) view.setUint32(144, Number(data.Time), true);
  // 0x94: u32
  if (data?.PagesPrinted !== undefined) view.setUint32(148, Number(data.PagesPrinted), true);
  // 0x98: i32
  if (data?.SizeHigh !== undefined) view.setInt32(152, Number(data.SizeHigh), true);
  // 0x9c: pad4
  return buf;
}

export class JOB_INFO_4AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get JobId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDocument(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pNotifyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pPrintProcessor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pDriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get pStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get pSecurityDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get Status(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get Priority(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get Position(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get StartTime(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get UntilTime(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get TotalPages(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get Size(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  get Submitted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: u32
  get Time(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get PagesPrinted(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: i32
  get SizeHigh(): number {
    return this.view.getInt32(152, true);
  }

  // 0x9c: pad4

  // 0x00: u32
  set JobId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDocument(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pNotifyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pPrintProcessor(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set pParameters(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pDriverName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: buffer
  set pStatus(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: pointer
  set pSecurityDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set Status(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set Priority(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set Position(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set StartTime(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set UntilTime(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set TotalPages(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set Size(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  set Submitted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: u32
  set Time(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set PagesPrinted(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: i32
  set SizeHigh(value: number) {
    this.view.setInt32(152, value, true);
  }

  // 0x9c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.JOB_INFO_4W (size: 160)
 */
export interface JOB_INFO_4W {
  /** u32 */
  JobId: number;
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pMachineName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDocument: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pNotifyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDatatype: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPrintProcessor: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pParameters: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDriverName: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pStatus: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Security.PSECURITY_DESCRIPTOR */
  pSecurityDescriptor: Uint8Array | Deno.PointerValue;
  /** u32 */
  Status: number;
  /** u32 */
  Priority: number;
  /** u32 */
  Position: number;
  /** u32 */
  StartTime: number;
  /** u32 */
  UntilTime: number;
  /** u32 */
  TotalPages: number;
  /** u32 */
  Size: number;
  /** Windows.Win32.Foundation.SYSTEMTIME */
  Submitted: Uint8Array | Deno.PointerValue;
  /** u32 */
  Time: number;
  /** u32 */
  PagesPrinted: number;
  /** i32 */
  SizeHigh: number;
}

export const sizeofJOB_INFO_4W = 160;

export function allocJOB_INFO_4W(data?: Partial<JOB_INFO_4W>): Uint8Array {
  const buf = new Uint8Array(sizeofJOB_INFO_4W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.JobId !== undefined) view.setUint32(0, Number(data.JobId), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pPrinterName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pMachineName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pMachineName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pUserName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDocument !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pDocument);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pNotifyName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pNotifyName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pDatatype);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pPrintProcessor !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pPrintProcessor);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.pParameters !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pParameters);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pDriverName !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pDriverName);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(80, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  // 0x58: buffer
  if (data?.pStatus !== undefined) {
    (buf as any)._f88 = util.pwstrToFfi(data.pStatus);
    view.setBigUint64(88, (buf as any)._f88 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f88))), true);
  }
  // 0x60: pointer
  if (data?.pSecurityDescriptor !== undefined) view.setBigUint64(96, data.pSecurityDescriptor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pSecurityDescriptor))), true);
  // 0x68: u32
  if (data?.Status !== undefined) view.setUint32(104, Number(data.Status), true);
  // 0x6c: u32
  if (data?.Priority !== undefined) view.setUint32(108, Number(data.Priority), true);
  // 0x70: u32
  if (data?.Position !== undefined) view.setUint32(112, Number(data.Position), true);
  // 0x74: u32
  if (data?.StartTime !== undefined) view.setUint32(116, Number(data.StartTime), true);
  // 0x78: u32
  if (data?.UntilTime !== undefined) view.setUint32(120, Number(data.UntilTime), true);
  // 0x7c: u32
  if (data?.TotalPages !== undefined) view.setUint32(124, Number(data.TotalPages), true);
  // 0x80: u32
  if (data?.Size !== undefined) view.setUint32(128, Number(data.Size), true);
  // 0x84: pad4
  // 0x88: pointer
  if (data?.Submitted !== undefined) view.setBigUint64(136, data.Submitted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Submitted))), true);
  // 0x90: u32
  if (data?.Time !== undefined) view.setUint32(144, Number(data.Time), true);
  // 0x94: u32
  if (data?.PagesPrinted !== undefined) view.setUint32(148, Number(data.PagesPrinted), true);
  // 0x98: i32
  if (data?.SizeHigh !== undefined) view.setInt32(152, Number(data.SizeHigh), true);
  // 0x9c: pad4
  return buf;
}

export class JOB_INFO_4WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get JobId(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDocument(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pNotifyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pPrintProcessor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pDriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: buffer
  get pStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get pSecurityDescriptor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x68: u32
  get Status(): number {
    return this.view.getUint32(104, true);
  }

  // 0x6c: u32
  get Priority(): number {
    return this.view.getUint32(108, true);
  }

  // 0x70: u32
  get Position(): number {
    return this.view.getUint32(112, true);
  }

  // 0x74: u32
  get StartTime(): number {
    return this.view.getUint32(116, true);
  }

  // 0x78: u32
  get UntilTime(): number {
    return this.view.getUint32(120, true);
  }

  // 0x7c: u32
  get TotalPages(): number {
    return this.view.getUint32(124, true);
  }

  // 0x80: u32
  get Size(): number {
    return this.view.getUint32(128, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  get Submitted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: u32
  get Time(): number {
    return this.view.getUint32(144, true);
  }

  // 0x94: u32
  get PagesPrinted(): number {
    return this.view.getUint32(148, true);
  }

  // 0x98: i32
  get SizeHigh(): number {
    return this.view.getInt32(152, true);
  }

  // 0x9c: pad4

  // 0x00: u32
  set JobId(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDocument(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pNotifyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pPrintProcessor(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set pParameters(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pDriverName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: buffer
  set pStatus(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f88 = value;
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f88))), true);
  }

  // 0x60: pointer
  set pSecurityDescriptor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x68: u32
  set Status(value: number) {
    this.view.setUint32(104, value, true);
  }

  // 0x6c: u32
  set Priority(value: number) {
    this.view.setUint32(108, value, true);
  }

  // 0x70: u32
  set Position(value: number) {
    this.view.setUint32(112, value, true);
  }

  // 0x74: u32
  set StartTime(value: number) {
    this.view.setUint32(116, value, true);
  }

  // 0x78: u32
  set UntilTime(value: number) {
    this.view.setUint32(120, value, true);
  }

  // 0x7c: u32
  set TotalPages(value: number) {
    this.view.setUint32(124, value, true);
  }

  // 0x80: u32
  set Size(value: number) {
    this.view.setUint32(128, value, true);
  }

  // 0x84: pad4

  // 0x88: pointer
  set Submitted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: u32
  set Time(value: number) {
    this.view.setUint32(144, value, true);
  }

  // 0x94: u32
  set PagesPrinted(value: number) {
    this.view.setUint32(148, value, true);
  }

  // 0x98: i32
  set SizeHigh(value: number) {
    this.view.setInt32(152, value, true);
  }

  // 0x9c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.ADDJOB_INFO_1A (size: 16)
 */
export interface ADDJOB_INFO_1A {
  /** Windows.Win32.Foundation.PSTR */
  Path: string | null | Uint8Array;
  /** u32 */
  JobId: number;
}

export const sizeofADDJOB_INFO_1A = 16;

export function allocADDJOB_INFO_1A(data?: Partial<ADDJOB_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofADDJOB_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Path !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Path);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.JobId !== undefined) view.setUint32(8, Number(data.JobId), true);
  // 0x0c: pad4
  return buf;
}

export class ADDJOB_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Path(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get JobId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set Path(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set JobId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.ADDJOB_INFO_1W (size: 16)
 */
export interface ADDJOB_INFO_1W {
  /** Windows.Win32.Foundation.PWSTR */
  Path: string | null | Uint8Array | Uint16Array;
  /** u32 */
  JobId: number;
}

export const sizeofADDJOB_INFO_1W = 16;

export function allocADDJOB_INFO_1W(data?: Partial<ADDJOB_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofADDJOB_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Path !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Path);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.JobId !== undefined) view.setUint32(8, Number(data.JobId), true);
  // 0x0c: pad4
  return buf;
}

export class ADDJOB_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Path(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get JobId(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set Path(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set JobId(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_1A (size: 8)
 */
export interface DRIVER_INFO_1A {
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
}

export const sizeofDRIVER_INFO_1A = 8;

export function allocDRIVER_INFO_1A(data?: Partial<DRIVER_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class DRIVER_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_1W (size: 8)
 */
export interface DRIVER_INFO_1W {
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDRIVER_INFO_1W = 8;

export function allocDRIVER_INFO_1W(data?: Partial<DRIVER_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class DRIVER_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_2A (size: 48)
 */
export interface DRIVER_INFO_2A {
  /** u32 */
  cVersion: number;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pEnvironment: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDriverPath: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDataFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pConfigFile: string | null | Uint8Array;
}

export const sizeofDRIVER_INFO_2A = 48;

export function allocDRIVER_INFO_2A(data?: Partial<DRIVER_INFO_2A>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_2A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cVersion !== undefined) view.setUint32(0, Number(data.cVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pEnvironment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pDriverPath !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pDriverPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDataFile !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pDataFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pConfigFile !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pConfigFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class DRIVER_INFO_2AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pDriverPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDataFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pConfigFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pDriverPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDataFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pConfigFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_2W (size: 48)
 */
export interface DRIVER_INFO_2W {
  /** u32 */
  cVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pEnvironment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDriverPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDataFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pConfigFile: string | null | Uint8Array | Uint16Array;
}

export const sizeofDRIVER_INFO_2W = 48;

export function allocDRIVER_INFO_2W(data?: Partial<DRIVER_INFO_2W>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_2W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cVersion !== undefined) view.setUint32(0, Number(data.cVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pEnvironment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pDriverPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pDriverPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDataFile !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pDataFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pConfigFile !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pConfigFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class DRIVER_INFO_2WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pDriverPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDataFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pConfigFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pDriverPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDataFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pConfigFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_3A (size: 80)
 */
export interface DRIVER_INFO_3A {
  /** u32 */
  cVersion: number;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pEnvironment: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDriverPath: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDataFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pConfigFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pHelpFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDependentFiles: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pMonitorName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDefaultDataType: string | null | Uint8Array;
}

export const sizeofDRIVER_INFO_3A = 80;

export function allocDRIVER_INFO_3A(data?: Partial<DRIVER_INFO_3A>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_3A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cVersion !== undefined) view.setUint32(0, Number(data.cVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pEnvironment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pDriverPath !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pDriverPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDataFile !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pDataFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pConfigFile !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pConfigFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pHelpFile !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pHelpFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pDependentFiles !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.pDependentFiles);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.pMonitorName !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.pMonitorName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pDefaultDataType !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.pDefaultDataType);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  return buf;
}

export class DRIVER_INFO_3AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pDriverPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDataFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pConfigFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pHelpFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pDependentFiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pMonitorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pDefaultDataType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pDriverPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDataFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pConfigFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pHelpFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pDependentFiles(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set pMonitorName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pDefaultDataType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_3W (size: 80)
 */
export interface DRIVER_INFO_3W {
  /** u32 */
  cVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pEnvironment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDriverPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDataFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pConfigFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pHelpFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDependentFiles: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pMonitorName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDefaultDataType: string | null | Uint8Array | Uint16Array;
}

export const sizeofDRIVER_INFO_3W = 80;

export function allocDRIVER_INFO_3W(data?: Partial<DRIVER_INFO_3W>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_3W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cVersion !== undefined) view.setUint32(0, Number(data.cVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pEnvironment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pDriverPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pDriverPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDataFile !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pDataFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pConfigFile !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pConfigFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pHelpFile !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pHelpFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pDependentFiles !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pDependentFiles);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.pMonitorName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pMonitorName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pDefaultDataType !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pDefaultDataType);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  return buf;
}

export class DRIVER_INFO_3WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pDriverPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDataFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pConfigFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pHelpFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pDependentFiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pMonitorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pDefaultDataType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pDriverPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDataFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pConfigFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pHelpFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pDependentFiles(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set pMonitorName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pDefaultDataType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_4A (size: 88)
 */
export interface DRIVER_INFO_4A {
  /** u32 */
  cVersion: number;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pEnvironment: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDriverPath: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDataFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pConfigFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pHelpFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDependentFiles: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pMonitorName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDefaultDataType: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszzPreviousNames: string | null | Uint8Array;
}

export const sizeofDRIVER_INFO_4A = 88;

export function allocDRIVER_INFO_4A(data?: Partial<DRIVER_INFO_4A>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_4A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cVersion !== undefined) view.setUint32(0, Number(data.cVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pEnvironment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pDriverPath !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pDriverPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDataFile !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pDataFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pConfigFile !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pConfigFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pHelpFile !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pHelpFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pDependentFiles !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.pDependentFiles);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.pMonitorName !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.pMonitorName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pDefaultDataType !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.pDefaultDataType);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pszzPreviousNames !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.pszzPreviousNames);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  return buf;
}

export class DRIVER_INFO_4AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pDriverPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDataFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pConfigFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pHelpFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pDependentFiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pMonitorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pDefaultDataType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pszzPreviousNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pDriverPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDataFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pConfigFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pHelpFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pDependentFiles(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set pMonitorName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pDefaultDataType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pszzPreviousNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_4W (size: 88)
 */
export interface DRIVER_INFO_4W {
  /** u32 */
  cVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pEnvironment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDriverPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDataFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pConfigFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pHelpFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDependentFiles: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pMonitorName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDefaultDataType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszzPreviousNames: string | null | Uint8Array | Uint16Array;
}

export const sizeofDRIVER_INFO_4W = 88;

export function allocDRIVER_INFO_4W(data?: Partial<DRIVER_INFO_4W>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_4W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cVersion !== undefined) view.setUint32(0, Number(data.cVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pEnvironment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pDriverPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pDriverPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDataFile !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pDataFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pConfigFile !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pConfigFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pHelpFile !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pHelpFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pDependentFiles !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pDependentFiles);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.pMonitorName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pMonitorName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pDefaultDataType !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pDefaultDataType);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pszzPreviousNames !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pszzPreviousNames);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  return buf;
}

export class DRIVER_INFO_4WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pDriverPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDataFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pConfigFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pHelpFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pDependentFiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pMonitorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pDefaultDataType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pszzPreviousNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pDriverPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDataFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pConfigFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pHelpFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pDependentFiles(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set pMonitorName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pDefaultDataType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pszzPreviousNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_5A (size: 64)
 */
export interface DRIVER_INFO_5A {
  /** u32 */
  cVersion: number;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pEnvironment: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDriverPath: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDataFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pConfigFile: string | null | Uint8Array;
  /** u32 */
  dwDriverAttributes: number;
  /** u32 */
  dwConfigVersion: number;
  /** u32 */
  dwDriverVersion: number;
}

export const sizeofDRIVER_INFO_5A = 64;

export function allocDRIVER_INFO_5A(data?: Partial<DRIVER_INFO_5A>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_5A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cVersion !== undefined) view.setUint32(0, Number(data.cVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pEnvironment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pDriverPath !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pDriverPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDataFile !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pDataFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pConfigFile !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pConfigFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.dwDriverAttributes !== undefined) view.setUint32(48, Number(data.dwDriverAttributes), true);
  // 0x34: u32
  if (data?.dwConfigVersion !== undefined) view.setUint32(52, Number(data.dwConfigVersion), true);
  // 0x38: u32
  if (data?.dwDriverVersion !== undefined) view.setUint32(56, Number(data.dwDriverVersion), true);
  // 0x3c: pad4
  return buf;
}

export class DRIVER_INFO_5AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pDriverPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDataFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pConfigFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwDriverAttributes(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwConfigVersion(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwDriverVersion(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set cVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pDriverPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDataFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pConfigFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set dwDriverAttributes(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwConfigVersion(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwDriverVersion(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_5W (size: 64)
 */
export interface DRIVER_INFO_5W {
  /** u32 */
  cVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pEnvironment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDriverPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDataFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pConfigFile: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwDriverAttributes: number;
  /** u32 */
  dwConfigVersion: number;
  /** u32 */
  dwDriverVersion: number;
}

export const sizeofDRIVER_INFO_5W = 64;

export function allocDRIVER_INFO_5W(data?: Partial<DRIVER_INFO_5W>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_5W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cVersion !== undefined) view.setUint32(0, Number(data.cVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pEnvironment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pDriverPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pDriverPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDataFile !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pDataFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pConfigFile !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pConfigFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: u32
  if (data?.dwDriverAttributes !== undefined) view.setUint32(48, Number(data.dwDriverAttributes), true);
  // 0x34: u32
  if (data?.dwConfigVersion !== undefined) view.setUint32(52, Number(data.dwConfigVersion), true);
  // 0x38: u32
  if (data?.dwDriverVersion !== undefined) view.setUint32(56, Number(data.dwDriverVersion), true);
  // 0x3c: pad4
  return buf;
}

export class DRIVER_INFO_5WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pDriverPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDataFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pConfigFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: u32
  get dwDriverAttributes(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwConfigVersion(): number {
    return this.view.getUint32(52, true);
  }

  // 0x38: u32
  get dwDriverVersion(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set cVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pDriverPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDataFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pConfigFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: u32
  set dwDriverAttributes(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwConfigVersion(value: number) {
    this.view.setUint32(52, value, true);
  }

  // 0x38: u32
  set dwDriverVersion(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Foundation.FILETIME (size: 8)
 */
export interface FILETIME {
  /** u32 */
  dwLowDateTime: number;
  /** u32 */
  dwHighDateTime: number;
}

export const sizeofFILETIME = 8;

export function allocFILETIME(data?: Partial<FILETIME>): Uint8Array {
  const buf = new Uint8Array(sizeofFILETIME);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLowDateTime !== undefined) view.setUint32(0, Number(data.dwLowDateTime), true);
  // 0x04: u32
  if (data?.dwHighDateTime !== undefined) view.setUint32(4, Number(data.dwHighDateTime), true);
  return buf;
}

export class FILETIMEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLowDateTime(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwHighDateTime(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwLowDateTime(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwHighDateTime(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_6A (size: 136)
 */
export interface DRIVER_INFO_6A {
  /** u32 */
  cVersion: number;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pEnvironment: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDriverPath: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDataFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pConfigFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pHelpFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDependentFiles: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pMonitorName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDefaultDataType: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszzPreviousNames: string | null | Uint8Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftDriverDate: Uint8Array | Deno.PointerValue;
  /** u64 */
  dwlDriverVersion: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszMfgName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszOEMUrl: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszHardwareID: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszProvider: string | null | Uint8Array;
}

export const sizeofDRIVER_INFO_6A = 136;

export function allocDRIVER_INFO_6A(data?: Partial<DRIVER_INFO_6A>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_6A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cVersion !== undefined) view.setUint32(0, Number(data.cVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pEnvironment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pDriverPath !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pDriverPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDataFile !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pDataFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pConfigFile !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pConfigFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pHelpFile !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pHelpFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pDependentFiles !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.pDependentFiles);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.pMonitorName !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.pMonitorName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pDefaultDataType !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.pDefaultDataType);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pszzPreviousNames !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.pszzPreviousNames);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: pointer
  if (data?.ftDriverDate !== undefined) view.setBigUint64(88, data.ftDriverDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftDriverDate))), true);
  // 0x60: u64
  if (data?.dwlDriverVersion !== undefined) view.setBigUint64(96, BigInt(data.dwlDriverVersion), true);
  // 0x68: buffer
  if (data?.pszMfgName !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.pszMfgName);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: buffer
  if (data?.pszOEMUrl !== undefined) {
    (buf as any)._f112 = util.pstrToFfi(data.pszOEMUrl);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f112))), true);
  }
  // 0x78: buffer
  if (data?.pszHardwareID !== undefined) {
    (buf as any)._f120 = util.pstrToFfi(data.pszHardwareID);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f120))), true);
  }
  // 0x80: buffer
  if (data?.pszProvider !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.pszProvider);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  return buf;
}

export class DRIVER_INFO_6AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pDriverPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDataFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pConfigFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pHelpFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pDependentFiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pMonitorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pDefaultDataType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pszzPreviousNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ftDriverDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u64
  get dwlDriverVersion(): Deno.PointerValue {
    return Number(this.view.getBigUint64(96, true));
  }

  // 0x68: buffer
  get pszMfgName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: buffer
  get pszOEMUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: buffer
  get pszHardwareID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get pszProvider(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pDriverPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDataFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pConfigFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pHelpFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pDependentFiles(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set pMonitorName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pDefaultDataType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pszzPreviousNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: pointer
  set ftDriverDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u64
  set dwlDriverVersion(value: Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(value), true);
  }

  // 0x68: buffer
  set pszMfgName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: buffer
  set pszOEMUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f112 = value;
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f112))), true);
  }

  // 0x78: buffer
  set pszHardwareID(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f120 = value;
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f120))), true);
  }

  // 0x80: buffer
  set pszProvider(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_6W (size: 136)
 */
export interface DRIVER_INFO_6W {
  /** u32 */
  cVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pEnvironment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDriverPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDataFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pConfigFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pHelpFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDependentFiles: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pMonitorName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDefaultDataType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszzPreviousNames: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftDriverDate: Uint8Array | Deno.PointerValue;
  /** u64 */
  dwlDriverVersion: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszMfgName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszOEMUrl: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszHardwareID: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszProvider: string | null | Uint8Array | Uint16Array;
}

export const sizeofDRIVER_INFO_6W = 136;

export function allocDRIVER_INFO_6W(data?: Partial<DRIVER_INFO_6W>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_6W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cVersion !== undefined) view.setUint32(0, Number(data.cVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pEnvironment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pDriverPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pDriverPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDataFile !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pDataFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pConfigFile !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pConfigFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pHelpFile !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pHelpFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pDependentFiles !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pDependentFiles);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.pMonitorName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pMonitorName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pDefaultDataType !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pDefaultDataType);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pszzPreviousNames !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pszzPreviousNames);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: pointer
  if (data?.ftDriverDate !== undefined) view.setBigUint64(88, data.ftDriverDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftDriverDate))), true);
  // 0x60: u64
  if (data?.dwlDriverVersion !== undefined) view.setBigUint64(96, BigInt(data.dwlDriverVersion), true);
  // 0x68: buffer
  if (data?.pszMfgName !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.pszMfgName);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: buffer
  if (data?.pszOEMUrl !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data.pszOEMUrl);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f112))), true);
  }
  // 0x78: buffer
  if (data?.pszHardwareID !== undefined) {
    (buf as any)._f120 = util.pwstrToFfi(data.pszHardwareID);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f120))), true);
  }
  // 0x80: buffer
  if (data?.pszProvider !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.pszProvider);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  return buf;
}

export class DRIVER_INFO_6WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pDriverPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDataFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pConfigFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pHelpFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pDependentFiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pMonitorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pDefaultDataType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pszzPreviousNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ftDriverDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u64
  get dwlDriverVersion(): Deno.PointerValue {
    return Number(this.view.getBigUint64(96, true));
  }

  // 0x68: buffer
  get pszMfgName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: buffer
  get pszOEMUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: buffer
  get pszHardwareID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get pszProvider(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pDriverPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDataFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pConfigFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pHelpFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pDependentFiles(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set pMonitorName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pDefaultDataType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pszzPreviousNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: pointer
  set ftDriverDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u64
  set dwlDriverVersion(value: Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(value), true);
  }

  // 0x68: buffer
  set pszMfgName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: buffer
  set pszOEMUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f112 = value;
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f112))), true);
  }

  // 0x78: buffer
  set pszHardwareID(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f120 = value;
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f120))), true);
  }

  // 0x80: buffer
  set pszProvider(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_8A (size: 200)
 */
export interface DRIVER_INFO_8A {
  /** u32 */
  cVersion: number;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pEnvironment: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDriverPath: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDataFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pConfigFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pHelpFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDependentFiles: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pMonitorName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDefaultDataType: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszzPreviousNames: string | null | Uint8Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftDriverDate: Uint8Array | Deno.PointerValue;
  /** u64 */
  dwlDriverVersion: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pszMfgName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszOEMUrl: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszHardwareID: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszProvider: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszPrintProcessor: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszVendorSetup: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszzColorProfiles: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszInfPath: string | null | Uint8Array;
  /** u32 */
  dwPrinterDriverAttributes: number;
  /** Windows.Win32.Foundation.PSTR */
  pszzCoreDriverDependencies: string | null | Uint8Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftMinInboxDriverVerDate: Uint8Array | Deno.PointerValue;
  /** u64 */
  dwlMinInboxDriverVerVersion: Deno.PointerValue;
}

export const sizeofDRIVER_INFO_8A = 200;

export function allocDRIVER_INFO_8A(data?: Partial<DRIVER_INFO_8A>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_8A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cVersion !== undefined) view.setUint32(0, Number(data.cVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pEnvironment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pDriverPath !== undefined) {
    (buf as any)._f24 = util.pstrToFfi(data.pDriverPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDataFile !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pDataFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pConfigFile !== undefined) {
    (buf as any)._f40 = util.pstrToFfi(data.pConfigFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pHelpFile !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pHelpFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pDependentFiles !== undefined) {
    (buf as any)._f56 = util.pstrToFfi(data.pDependentFiles);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.pMonitorName !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.pMonitorName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pDefaultDataType !== undefined) {
    (buf as any)._f72 = util.pstrToFfi(data.pDefaultDataType);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pszzPreviousNames !== undefined) {
    (buf as any)._f80 = util.pstrToFfi(data.pszzPreviousNames);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: pointer
  if (data?.ftDriverDate !== undefined) view.setBigUint64(88, data.ftDriverDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftDriverDate))), true);
  // 0x60: u64
  if (data?.dwlDriverVersion !== undefined) view.setBigUint64(96, BigInt(data.dwlDriverVersion), true);
  // 0x68: buffer
  if (data?.pszMfgName !== undefined) {
    (buf as any)._f104 = util.pstrToFfi(data.pszMfgName);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: buffer
  if (data?.pszOEMUrl !== undefined) {
    (buf as any)._f112 = util.pstrToFfi(data.pszOEMUrl);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f112))), true);
  }
  // 0x78: buffer
  if (data?.pszHardwareID !== undefined) {
    (buf as any)._f120 = util.pstrToFfi(data.pszHardwareID);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f120))), true);
  }
  // 0x80: buffer
  if (data?.pszProvider !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.pszProvider);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  // 0x88: buffer
  if (data?.pszPrintProcessor !== undefined) {
    (buf as any)._f136 = util.pstrToFfi(data.pszPrintProcessor);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f136))), true);
  }
  // 0x90: buffer
  if (data?.pszVendorSetup !== undefined) {
    (buf as any)._f144 = util.pstrToFfi(data.pszVendorSetup);
    view.setBigUint64(144, (buf as any)._f144 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f144))), true);
  }
  // 0x98: buffer
  if (data?.pszzColorProfiles !== undefined) {
    (buf as any)._f152 = util.pstrToFfi(data.pszzColorProfiles);
    view.setBigUint64(152, (buf as any)._f152 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f152))), true);
  }
  // 0xa0: buffer
  if (data?.pszInfPath !== undefined) {
    (buf as any)._f160 = util.pstrToFfi(data.pszInfPath);
    view.setBigUint64(160, (buf as any)._f160 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f160))), true);
  }
  // 0xa8: u32
  if (data?.dwPrinterDriverAttributes !== undefined) view.setUint32(168, Number(data.dwPrinterDriverAttributes), true);
  // 0xac: pad4
  // 0xb0: buffer
  if (data?.pszzCoreDriverDependencies !== undefined) {
    (buf as any)._f176 = util.pstrToFfi(data.pszzCoreDriverDependencies);
    view.setBigUint64(176, (buf as any)._f176 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f176))), true);
  }
  // 0xb8: pointer
  if (data?.ftMinInboxDriverVerDate !== undefined) view.setBigUint64(184, data.ftMinInboxDriverVerDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftMinInboxDriverVerDate))), true);
  // 0xc0: u64
  if (data?.dwlMinInboxDriverVerVersion !== undefined) view.setBigUint64(192, BigInt(data.dwlMinInboxDriverVerVersion), true);
  return buf;
}

export class DRIVER_INFO_8AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pDriverPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDataFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pConfigFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pHelpFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pDependentFiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pMonitorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pDefaultDataType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pszzPreviousNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ftDriverDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u64
  get dwlDriverVersion(): Deno.PointerValue {
    return Number(this.view.getBigUint64(96, true));
  }

  // 0x68: buffer
  get pszMfgName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: buffer
  get pszOEMUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: buffer
  get pszHardwareID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get pszProvider(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: buffer
  get pszPrintProcessor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: buffer
  get pszVendorSetup(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: buffer
  get pszzColorProfiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: buffer
  get pszInfPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: u32
  get dwPrinterDriverAttributes(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: pad4

  // 0xb0: buffer
  get pszzCoreDriverDependencies(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: pointer
  get ftMinInboxDriverVerDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(184, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc0: u64
  get dwlMinInboxDriverVerVersion(): Deno.PointerValue {
    return Number(this.view.getBigUint64(192, true));
  }

  // 0x00: u32
  set cVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pDriverPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDataFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pConfigFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pHelpFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pDependentFiles(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set pMonitorName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pDefaultDataType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pszzPreviousNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: pointer
  set ftDriverDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u64
  set dwlDriverVersion(value: Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(value), true);
  }

  // 0x68: buffer
  set pszMfgName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: buffer
  set pszOEMUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f112 = value;
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f112))), true);
  }

  // 0x78: buffer
  set pszHardwareID(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f120 = value;
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f120))), true);
  }

  // 0x80: buffer
  set pszProvider(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }

  // 0x88: buffer
  set pszPrintProcessor(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f136 = value;
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f136))), true);
  }

  // 0x90: buffer
  set pszVendorSetup(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f144 = value;
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f144))), true);
  }

  // 0x98: buffer
  set pszzColorProfiles(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f152 = value;
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f152))), true);
  }

  // 0xa0: buffer
  set pszInfPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f160 = value;
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f160))), true);
  }

  // 0xa8: u32
  set dwPrinterDriverAttributes(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: pad4

  // 0xb0: buffer
  set pszzCoreDriverDependencies(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f176 = value;
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f176))), true);
  }

  // 0xb8: pointer
  set ftMinInboxDriverVerDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc0: u64
  set dwlMinInboxDriverVerVersion(value: Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_INFO_8W (size: 200)
 */
export interface DRIVER_INFO_8W {
  /** u32 */
  cVersion: number;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pEnvironment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDriverPath: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDataFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pConfigFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pHelpFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDependentFiles: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pMonitorName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDefaultDataType: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszzPreviousNames: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftDriverDate: Uint8Array | Deno.PointerValue;
  /** u64 */
  dwlDriverVersion: Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pszMfgName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszOEMUrl: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszHardwareID: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszProvider: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszPrintProcessor: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszVendorSetup: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszzColorProfiles: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszInfPath: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwPrinterDriverAttributes: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszzCoreDriverDependencies: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.FILETIME */
  ftMinInboxDriverVerDate: Uint8Array | Deno.PointerValue;
  /** u64 */
  dwlMinInboxDriverVerVersion: Deno.PointerValue;
}

export const sizeofDRIVER_INFO_8W = 200;

export function allocDRIVER_INFO_8W(data?: Partial<DRIVER_INFO_8W>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_INFO_8W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cVersion !== undefined) view.setUint32(0, Number(data.cVersion), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pEnvironment);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pDriverPath !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pDriverPath);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDataFile !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pDataFile);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pConfigFile !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pConfigFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pHelpFile !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pHelpFile);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: buffer
  if (data?.pDependentFiles !== undefined) {
    (buf as any)._f56 = util.pwstrToFfi(data.pDependentFiles);
    view.setBigUint64(56, (buf as any)._f56 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f56))), true);
  }
  // 0x40: buffer
  if (data?.pMonitorName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pMonitorName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pDefaultDataType !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pDefaultDataType);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pszzPreviousNames !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pszzPreviousNames);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  // 0x58: pointer
  if (data?.ftDriverDate !== undefined) view.setBigUint64(88, data.ftDriverDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftDriverDate))), true);
  // 0x60: u64
  if (data?.dwlDriverVersion !== undefined) view.setBigUint64(96, BigInt(data.dwlDriverVersion), true);
  // 0x68: buffer
  if (data?.pszMfgName !== undefined) {
    (buf as any)._f104 = util.pwstrToFfi(data.pszMfgName);
    view.setBigUint64(104, (buf as any)._f104 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f104))), true);
  }
  // 0x70: buffer
  if (data?.pszOEMUrl !== undefined) {
    (buf as any)._f112 = util.pwstrToFfi(data.pszOEMUrl);
    view.setBigUint64(112, (buf as any)._f112 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f112))), true);
  }
  // 0x78: buffer
  if (data?.pszHardwareID !== undefined) {
    (buf as any)._f120 = util.pwstrToFfi(data.pszHardwareID);
    view.setBigUint64(120, (buf as any)._f120 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f120))), true);
  }
  // 0x80: buffer
  if (data?.pszProvider !== undefined) {
    (buf as any)._f128 = util.pwstrToFfi(data.pszProvider);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f128))), true);
  }
  // 0x88: buffer
  if (data?.pszPrintProcessor !== undefined) {
    (buf as any)._f136 = util.pwstrToFfi(data.pszPrintProcessor);
    view.setBigUint64(136, (buf as any)._f136 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f136))), true);
  }
  // 0x90: buffer
  if (data?.pszVendorSetup !== undefined) {
    (buf as any)._f144 = util.pwstrToFfi(data.pszVendorSetup);
    view.setBigUint64(144, (buf as any)._f144 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f144))), true);
  }
  // 0x98: buffer
  if (data?.pszzColorProfiles !== undefined) {
    (buf as any)._f152 = util.pwstrToFfi(data.pszzColorProfiles);
    view.setBigUint64(152, (buf as any)._f152 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f152))), true);
  }
  // 0xa0: buffer
  if (data?.pszInfPath !== undefined) {
    (buf as any)._f160 = util.pwstrToFfi(data.pszInfPath);
    view.setBigUint64(160, (buf as any)._f160 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f160))), true);
  }
  // 0xa8: u32
  if (data?.dwPrinterDriverAttributes !== undefined) view.setUint32(168, Number(data.dwPrinterDriverAttributes), true);
  // 0xac: pad4
  // 0xb0: buffer
  if (data?.pszzCoreDriverDependencies !== undefined) {
    (buf as any)._f176 = util.pwstrToFfi(data.pszzCoreDriverDependencies);
    view.setBigUint64(176, (buf as any)._f176 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f176))), true);
  }
  // 0xb8: pointer
  if (data?.ftMinInboxDriverVerDate !== undefined) view.setBigUint64(184, data.ftMinInboxDriverVerDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftMinInboxDriverVerDate))), true);
  // 0xc0: u64
  if (data?.dwlMinInboxDriverVerVersion !== undefined) view.setBigUint64(192, BigInt(data.dwlMinInboxDriverVerVersion), true);
  return buf;
}

export class DRIVER_INFO_8WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pDriverPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDataFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pConfigFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pHelpFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: buffer
  get pDependentFiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: buffer
  get pMonitorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pDefaultDataType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pszzPreviousNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get ftDriverDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u64
  get dwlDriverVersion(): Deno.PointerValue {
    return Number(this.view.getBigUint64(96, true));
  }

  // 0x68: buffer
  get pszMfgName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: buffer
  get pszOEMUrl(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: buffer
  get pszHardwareID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: buffer
  get pszProvider(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: buffer
  get pszPrintProcessor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: buffer
  get pszVendorSetup(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: buffer
  get pszzColorProfiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: buffer
  get pszInfPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: u32
  get dwPrinterDriverAttributes(): number {
    return this.view.getUint32(168, true);
  }

  // 0xac: pad4

  // 0xb0: buffer
  get pszzCoreDriverDependencies(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: pointer
  get ftMinInboxDriverVerDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(184, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xc0: u64
  get dwlMinInboxDriverVerVersion(): Deno.PointerValue {
    return Number(this.view.getBigUint64(192, true));
  }

  // 0x00: u32
  set cVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pDriverPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDataFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pConfigFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pHelpFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: buffer
  set pDependentFiles(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f56 = value;
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f56))), true);
  }

  // 0x40: buffer
  set pMonitorName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pDefaultDataType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pszzPreviousNames(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }

  // 0x58: pointer
  set ftDriverDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u64
  set dwlDriverVersion(value: Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(value), true);
  }

  // 0x68: buffer
  set pszMfgName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f104 = value;
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f104))), true);
  }

  // 0x70: buffer
  set pszOEMUrl(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f112 = value;
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f112))), true);
  }

  // 0x78: buffer
  set pszHardwareID(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f120 = value;
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f120))), true);
  }

  // 0x80: buffer
  set pszProvider(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f128 = value;
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f128))), true);
  }

  // 0x88: buffer
  set pszPrintProcessor(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f136 = value;
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f136))), true);
  }

  // 0x90: buffer
  set pszVendorSetup(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f144 = value;
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f144))), true);
  }

  // 0x98: buffer
  set pszzColorProfiles(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f152 = value;
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f152))), true);
  }

  // 0xa0: buffer
  set pszInfPath(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f160 = value;
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f160))), true);
  }

  // 0xa8: u32
  set dwPrinterDriverAttributes(value: number) {
    this.view.setUint32(168, value, true);
  }

  // 0xac: pad4

  // 0xb0: buffer
  set pszzCoreDriverDependencies(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f176 = value;
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f176))), true);
  }

  // 0xb8: pointer
  set ftMinInboxDriverVerDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(184, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xc0: u64
  set dwlMinInboxDriverVerVersion(value: Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DOC_INFO_1A (size: 24)
 */
export interface DOC_INFO_1A {
  /** Windows.Win32.Foundation.PSTR */
  pDocName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pOutputFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDatatype: string | null | Uint8Array;
}

export const sizeofDOC_INFO_1A = 24;

export function allocDOC_INFO_1A(data?: Partial<DOC_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofDOC_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pDocName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pDocName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pOutputFile !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pOutputFile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pDatatype);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DOC_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pDocName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pOutputFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pDocName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pOutputFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DOC_INFO_1W (size: 24)
 */
export interface DOC_INFO_1W {
  /** Windows.Win32.Foundation.PWSTR */
  pDocName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pOutputFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDatatype: string | null | Uint8Array | Uint16Array;
}

export const sizeofDOC_INFO_1W = 24;

export function allocDOC_INFO_1W(data?: Partial<DOC_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofDOC_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pDocName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pDocName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pOutputFile !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pOutputFile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pDatatype);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class DOC_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pDocName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pOutputFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pDocName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pOutputFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Foundation.SIZE (size: 8)
 */
export interface SIZE {
  /** i32 */
  cx: number;
  /** i32 */
  cy: number;
}

export const sizeofSIZE = 8;

export function allocSIZE(data?: Partial<SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofSIZE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.cx !== undefined) view.setInt32(0, Number(data.cx), true);
  // 0x04: i32
  if (data?.cy !== undefined) view.setInt32(4, Number(data.cy), true);
  return buf;
}

export class SIZEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get cx(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get cy(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set cx(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set cy(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Foundation.RECTL (size: 16)
 */
export interface RECTL {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECTL = 16;

export function allocRECTL(data?: Partial<RECTL>): Uint8Array {
  const buf = new Uint8Array(sizeofRECTL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

export class RECTLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get left(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get top(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get right(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get bottom(): number {
    return this.view.getInt32(12, true);
  }

  // 0x00: i32
  set left(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set top(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set right(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set bottom(value: number) {
    this.view.setInt32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.FORM_INFO_1A (size: 32)
 */
export interface FORM_INFO_1A {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.SIZE */
  Size: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  ImageableArea: Uint8Array | Deno.PointerValue;
}

export const sizeofFORM_INFO_1A = 32;

export function allocFORM_INFO_1A(data?: Partial<FORM_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofFORM_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.Size !== undefined) view.setBigUint64(16, data.Size === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Size))), true);
  // 0x18: pointer
  if (data?.ImageableArea !== undefined) view.setBigUint64(24, data.ImageableArea === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImageableArea))), true);
  return buf;
}

export class FORM_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Size(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ImageableArea(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set Size(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ImageableArea(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.FORM_INFO_1W (size: 32)
 */
export interface FORM_INFO_1W {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.SIZE */
  Size: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  ImageableArea: Uint8Array | Deno.PointerValue;
}

export const sizeofFORM_INFO_1W = 32;

export function allocFORM_INFO_1W(data?: Partial<FORM_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofFORM_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.Size !== undefined) view.setBigUint64(16, data.Size === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Size))), true);
  // 0x18: pointer
  if (data?.ImageableArea !== undefined) view.setBigUint64(24, data.ImageableArea === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImageableArea))), true);
  return buf;
}

export class FORM_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Size(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ImageableArea(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set Size(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ImageableArea(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.FORM_INFO_2A (size: 80)
 */
export interface FORM_INFO_2A {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.SIZE */
  Size: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  ImageableArea: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pKeyword: string | null | Uint8Array;
  /** u32 */
  StringType: number;
  /** Windows.Win32.Foundation.PSTR */
  pMuiDll: string | null | Uint8Array;
  /** u32 */
  dwResourceId: number;
  /** Windows.Win32.Foundation.PSTR */
  pDisplayName: string | null | Uint8Array;
  /** u16 */
  wLangId: number;
}

export const sizeofFORM_INFO_2A = 80;

export function allocFORM_INFO_2A(data?: Partial<FORM_INFO_2A>): Uint8Array {
  const buf = new Uint8Array(sizeofFORM_INFO_2A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.Size !== undefined) view.setBigUint64(16, data.Size === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Size))), true);
  // 0x18: pointer
  if (data?.ImageableArea !== undefined) view.setBigUint64(24, data.ImageableArea === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImageableArea))), true);
  // 0x20: buffer
  if (data?.pKeyword !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pKeyword);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.StringType !== undefined) view.setUint32(40, Number(data.StringType), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.pMuiDll !== undefined) {
    (buf as any)._f48 = util.pstrToFfi(data.pMuiDll);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.dwResourceId !== undefined) view.setUint32(56, Number(data.dwResourceId), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.pDisplayName !== undefined) {
    (buf as any)._f64 = util.pstrToFfi(data.pDisplayName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u16
  if (data?.wLangId !== undefined) view.setUint16(72, Number(data.wLangId), true);
  // 0x4a: pad6
  return buf;
}

export class FORM_INFO_2AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Size(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ImageableArea(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pKeyword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get StringType(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  get pMuiDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwResourceId(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get pDisplayName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u16
  get wLangId(): number {
    return this.view.getUint16(72, true);
  }

  // 0x4a: pad6

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set Size(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ImageableArea(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pKeyword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set StringType(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  set pMuiDll(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set dwResourceId(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set pDisplayName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u16
  set wLangId(value: number) {
    this.view.setUint16(72, value, true);
  }

  // 0x4a: pad6
}

/**
 * Windows.Win32.Graphics.Printing.FORM_INFO_2W (size: 80)
 */
export interface FORM_INFO_2W {
  /** u32 */
  Flags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.SIZE */
  Size: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  ImageableArea: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pKeyword: string | null | Uint8Array;
  /** u32 */
  StringType: number;
  /** Windows.Win32.Foundation.PWSTR */
  pMuiDll: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwResourceId: number;
  /** Windows.Win32.Foundation.PWSTR */
  pDisplayName: string | null | Uint8Array | Uint16Array;
  /** u16 */
  wLangId: number;
}

export const sizeofFORM_INFO_2W = 80;

export function allocFORM_INFO_2W(data?: Partial<FORM_INFO_2W>): Uint8Array {
  const buf = new Uint8Array(sizeofFORM_INFO_2W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.Size !== undefined) view.setBigUint64(16, data.Size === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Size))), true);
  // 0x18: pointer
  if (data?.ImageableArea !== undefined) view.setBigUint64(24, data.ImageableArea === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ImageableArea))), true);
  // 0x20: buffer
  if (data?.pKeyword !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.pKeyword);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: u32
  if (data?.StringType !== undefined) view.setUint32(40, Number(data.StringType), true);
  // 0x2c: pad4
  // 0x30: buffer
  if (data?.pMuiDll !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pMuiDll);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  // 0x38: u32
  if (data?.dwResourceId !== undefined) view.setUint32(56, Number(data.dwResourceId), true);
  // 0x3c: pad4
  // 0x40: buffer
  if (data?.pDisplayName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pDisplayName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: u16
  if (data?.wLangId !== undefined) view.setUint16(72, Number(data.wLangId), true);
  // 0x4a: pad6
  return buf;
}

export class FORM_INFO_2WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get Size(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ImageableArea(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pKeyword(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get StringType(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  get pMuiDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: u32
  get dwResourceId(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  get pDisplayName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u16
  get wLangId(): number {
    return this.view.getUint16(72, true);
  }

  // 0x4a: pad6

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set Size(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ImageableArea(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: buffer
  set pKeyword(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: u32
  set StringType(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: buffer
  set pMuiDll(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }

  // 0x38: u32
  set dwResourceId(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4

  // 0x40: buffer
  set pDisplayName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: u16
  set wLangId(value: number) {
    this.view.setUint16(72, value, true);
  }

  // 0x4a: pad6
}

/**
 * Windows.Win32.Graphics.Printing.DOC_INFO_2A (size: 32)
 */
export interface DOC_INFO_2A {
  /** Windows.Win32.Foundation.PSTR */
  pDocName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pOutputFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDatatype: string | null | Uint8Array;
  /** u32 */
  dwMode: number;
  /** u32 */
  JobId: number;
}

export const sizeofDOC_INFO_2A = 32;

export function allocDOC_INFO_2A(data?: Partial<DOC_INFO_2A>): Uint8Array {
  const buf = new Uint8Array(sizeofDOC_INFO_2A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pDocName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pDocName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pOutputFile !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pOutputFile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pDatatype);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwMode !== undefined) view.setUint32(24, Number(data.dwMode), true);
  // 0x1c: u32
  if (data?.JobId !== undefined) view.setUint32(28, Number(data.JobId), true);
  return buf;
}

export class DOC_INFO_2AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pDocName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pOutputFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwMode(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get JobId(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: buffer
  set pDocName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pOutputFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwMode(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set JobId(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DOC_INFO_2W (size: 32)
 */
export interface DOC_INFO_2W {
  /** Windows.Win32.Foundation.PWSTR */
  pDocName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pOutputFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDatatype: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwMode: number;
  /** u32 */
  JobId: number;
}

export const sizeofDOC_INFO_2W = 32;

export function allocDOC_INFO_2W(data?: Partial<DOC_INFO_2W>): Uint8Array {
  const buf = new Uint8Array(sizeofDOC_INFO_2W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pDocName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pDocName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pOutputFile !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pOutputFile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pDatatype);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwMode !== undefined) view.setUint32(24, Number(data.dwMode), true);
  // 0x1c: u32
  if (data?.JobId !== undefined) view.setUint32(28, Number(data.JobId), true);
  return buf;
}

export class DOC_INFO_2WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pDocName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pOutputFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwMode(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get JobId(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: buffer
  set pDocName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pOutputFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwMode(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set JobId(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DOC_INFO_3A (size: 32)
 */
export interface DOC_INFO_3A {
  /** Windows.Win32.Foundation.PSTR */
  pDocName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pOutputFile: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDatatype: string | null | Uint8Array;
  /** u32 */
  dwFlags: number;
}

export const sizeofDOC_INFO_3A = 32;

export function allocDOC_INFO_3A(data?: Partial<DOC_INFO_3A>): Uint8Array {
  const buf = new Uint8Array(sizeofDOC_INFO_3A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pDocName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pDocName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pOutputFile !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pOutputFile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pDatatype);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

export class DOC_INFO_3AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pDocName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pOutputFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: buffer
  set pDocName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pOutputFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.DOC_INFO_3W (size: 32)
 */
export interface DOC_INFO_3W {
  /** Windows.Win32.Foundation.PWSTR */
  pDocName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pOutputFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDatatype: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwFlags: number;
}

export const sizeofDOC_INFO_3W = 32;

export function allocDOC_INFO_3W(data?: Partial<DOC_INFO_3W>): Uint8Array {
  const buf = new Uint8Array(sizeofDOC_INFO_3W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pDocName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pDocName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pOutputFile !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pOutputFile);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pDatatype);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwFlags !== undefined) view.setUint32(24, Number(data.dwFlags), true);
  // 0x1c: pad4
  return buf;
}

export class DOC_INFO_3WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pDocName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pOutputFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwFlags(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: buffer
  set pDocName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pOutputFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwFlags(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PRINTPROCESSOR_INFO_1A (size: 8)
 */
export interface PRINTPROCESSOR_INFO_1A {
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
}

export const sizeofPRINTPROCESSOR_INFO_1A = 8;

export function allocPRINTPROCESSOR_INFO_1A(data?: Partial<PRINTPROCESSOR_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTPROCESSOR_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class PRINTPROCESSOR_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTPROCESSOR_INFO_1W (size: 8)
 */
export interface PRINTPROCESSOR_INFO_1W {
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
}

export const sizeofPRINTPROCESSOR_INFO_1W = 8;

export function allocPRINTPROCESSOR_INFO_1W(data?: Partial<PRINTPROCESSOR_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTPROCESSOR_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class PRINTPROCESSOR_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTPROCESSOR_CAPS_1 (size: 16)
 */
export interface PRINTPROCESSOR_CAPS_1 {
  /** u32 */
  dwLevel: number;
  /** u32 */
  dwNupOptions: number;
  /** u32 */
  dwPageOrderFlags: number;
  /** u32 */
  dwNumberOfCopies: number;
}

export const sizeofPRINTPROCESSOR_CAPS_1 = 16;

export function allocPRINTPROCESSOR_CAPS_1(data?: Partial<PRINTPROCESSOR_CAPS_1>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTPROCESSOR_CAPS_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLevel !== undefined) view.setUint32(0, Number(data.dwLevel), true);
  // 0x04: u32
  if (data?.dwNupOptions !== undefined) view.setUint32(4, Number(data.dwNupOptions), true);
  // 0x08: u32
  if (data?.dwPageOrderFlags !== undefined) view.setUint32(8, Number(data.dwPageOrderFlags), true);
  // 0x0c: u32
  if (data?.dwNumberOfCopies !== undefined) view.setUint32(12, Number(data.dwNumberOfCopies), true);
  return buf;
}

export class PRINTPROCESSOR_CAPS_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNupOptions(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwPageOrderFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwNumberOfCopies(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNupOptions(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwPageOrderFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwNumberOfCopies(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTPROCESSOR_CAPS_2 (size: 40)
 */
export interface PRINTPROCESSOR_CAPS_2 {
  /** u32 */
  dwLevel: number;
  /** u32 */
  dwNupOptions: number;
  /** u32 */
  dwPageOrderFlags: number;
  /** u32 */
  dwNumberOfCopies: number;
  /** u32 */
  dwDuplexHandlingCaps: number;
  /** u32 */
  dwNupDirectionCaps: number;
  /** u32 */
  dwNupBorderCaps: number;
  /** u32 */
  dwBookletHandlingCaps: number;
  /** u32 */
  dwScalingCaps: number;
}

export const sizeofPRINTPROCESSOR_CAPS_2 = 40;

export function allocPRINTPROCESSOR_CAPS_2(data?: Partial<PRINTPROCESSOR_CAPS_2>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTPROCESSOR_CAPS_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLevel !== undefined) view.setUint32(0, Number(data.dwLevel), true);
  // 0x04: u32
  if (data?.dwNupOptions !== undefined) view.setUint32(4, Number(data.dwNupOptions), true);
  // 0x08: u32
  if (data?.dwPageOrderFlags !== undefined) view.setUint32(8, Number(data.dwPageOrderFlags), true);
  // 0x0c: u32
  if (data?.dwNumberOfCopies !== undefined) view.setUint32(12, Number(data.dwNumberOfCopies), true);
  // 0x10: u32
  if (data?.dwDuplexHandlingCaps !== undefined) view.setUint32(16, Number(data.dwDuplexHandlingCaps), true);
  // 0x14: u32
  if (data?.dwNupDirectionCaps !== undefined) view.setUint32(20, Number(data.dwNupDirectionCaps), true);
  // 0x18: u32
  if (data?.dwNupBorderCaps !== undefined) view.setUint32(24, Number(data.dwNupBorderCaps), true);
  // 0x1c: u32
  if (data?.dwBookletHandlingCaps !== undefined) view.setUint32(28, Number(data.dwBookletHandlingCaps), true);
  // 0x20: u32
  if (data?.dwScalingCaps !== undefined) view.setUint32(32, Number(data.dwScalingCaps), true);
  // 0x24: pad4
  return buf;
}

export class PRINTPROCESSOR_CAPS_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwNupOptions(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwPageOrderFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwNumberOfCopies(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwDuplexHandlingCaps(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwNupDirectionCaps(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwNupBorderCaps(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwBookletHandlingCaps(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwScalingCaps(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwNupOptions(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwPageOrderFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwNumberOfCopies(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwDuplexHandlingCaps(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwNupDirectionCaps(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwNupBorderCaps(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwBookletHandlingCaps(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwScalingCaps(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PORT_INFO_1A (size: 8)
 */
export interface PORT_INFO_1A {
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
}

export const sizeofPORT_INFO_1A = 8;

export function allocPORT_INFO_1A(data?: Partial<PORT_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofPORT_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class PORT_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PORT_INFO_1W (size: 8)
 */
export interface PORT_INFO_1W {
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
}

export const sizeofPORT_INFO_1W = 8;

export function allocPORT_INFO_1W(data?: Partial<PORT_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofPORT_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class PORT_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PORT_INFO_2A (size: 32)
 */
export interface PORT_INFO_2A {
  /** Windows.Win32.Foundation.PSTR */
  pPortName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pMonitorName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDescription: string | null | Uint8Array;
  /** u32 */
  fPortType: number;
  /** u32 */
  Reserved: number;
}

export const sizeofPORT_INFO_2A = 32;

export function allocPORT_INFO_2A(data?: Partial<PORT_INFO_2A>): Uint8Array {
  const buf = new Uint8Array(sizeofPORT_INFO_2A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pPortName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pPortName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pMonitorName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pMonitorName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pDescription !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pDescription);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.fPortType !== undefined) view.setUint32(24, Number(data.fPortType), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  return buf;
}

export class PORT_INFO_2AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pPortName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pMonitorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get fPortType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Reserved(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: buffer
  set pPortName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pMonitorName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set fPortType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Reserved(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PORT_INFO_2W (size: 32)
 */
export interface PORT_INFO_2W {
  /** Windows.Win32.Foundation.PWSTR */
  pPortName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pMonitorName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDescription: string | null | Uint8Array | Uint16Array;
  /** u32 */
  fPortType: number;
  /** u32 */
  Reserved: number;
}

export const sizeofPORT_INFO_2W = 32;

export function allocPORT_INFO_2W(data?: Partial<PORT_INFO_2W>): Uint8Array {
  const buf = new Uint8Array(sizeofPORT_INFO_2W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pPortName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pPortName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pMonitorName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pMonitorName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pDescription !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pDescription);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.fPortType !== undefined) view.setUint32(24, Number(data.fPortType), true);
  // 0x1c: u32
  if (data?.Reserved !== undefined) view.setUint32(28, Number(data.Reserved), true);
  return buf;
}

export class PORT_INFO_2WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pPortName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pMonitorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get fPortType(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get Reserved(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: buffer
  set pPortName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pMonitorName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set fPortType(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set Reserved(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PORT_INFO_3A (size: 24)
 */
export interface PORT_INFO_3A {
  /** u32 */
  dwStatus: number;
  /** Windows.Win32.Foundation.PSTR */
  pszStatus: string | null | Uint8Array;
  /** u32 */
  dwSeverity: number;
}

export const sizeofPORT_INFO_3A = 24;

export function allocPORT_INFO_3A(data?: Partial<PORT_INFO_3A>): Uint8Array {
  const buf = new Uint8Array(sizeofPORT_INFO_3A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStatus !== undefined) view.setUint32(0, Number(data.dwStatus), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszStatus !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszStatus);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.dwSeverity !== undefined) view.setUint32(16, Number(data.dwSeverity), true);
  // 0x14: pad4
  return buf;
}

export class PORT_INFO_3AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwSeverity(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszStatus(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set dwSeverity(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PORT_INFO_3W (size: 24)
 */
export interface PORT_INFO_3W {
  /** u32 */
  dwStatus: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszStatus: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwSeverity: number;
}

export const sizeofPORT_INFO_3W = 24;

export function allocPORT_INFO_3W(data?: Partial<PORT_INFO_3W>): Uint8Array {
  const buf = new Uint8Array(sizeofPORT_INFO_3W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwStatus !== undefined) view.setUint32(0, Number(data.dwStatus), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszStatus !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszStatus);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: u32
  if (data?.dwSeverity !== undefined) view.setUint32(16, Number(data.dwSeverity), true);
  // 0x14: pad4
  return buf;
}

export class PORT_INFO_3WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwStatus(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszStatus(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwSeverity(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwStatus(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszStatus(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: u32
  set dwSeverity(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Printing.MONITOR_INFO_1A (size: 8)
 */
export interface MONITOR_INFO_1A {
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
}

export const sizeofMONITOR_INFO_1A = 8;

export function allocMONITOR_INFO_1A(data?: Partial<MONITOR_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITOR_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class MONITOR_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MONITOR_INFO_1W (size: 8)
 */
export interface MONITOR_INFO_1W {
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
}

export const sizeofMONITOR_INFO_1W = 8;

export function allocMONITOR_INFO_1W(data?: Partial<MONITOR_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITOR_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class MONITOR_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MONITOR_INFO_2A (size: 24)
 */
export interface MONITOR_INFO_2A {
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pEnvironment: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDLLName: string | null | Uint8Array;
}

export const sizeofMONITOR_INFO_2A = 24;

export function allocMONITOR_INFO_2A(data?: Partial<MONITOR_INFO_2A>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITOR_INFO_2A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pEnvironment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pDLLName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pDLLName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class MONITOR_INFO_2AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pDLLName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pDLLName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MONITOR_INFO_2W (size: 24)
 */
export interface MONITOR_INFO_2W {
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pEnvironment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDLLName: string | null | Uint8Array | Uint16Array;
}

export const sizeofMONITOR_INFO_2W = 24;

export function allocMONITOR_INFO_2W(data?: Partial<MONITOR_INFO_2W>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITOR_INFO_2W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pEnvironment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pDLLName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pDLLName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class MONITOR_INFO_2WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pDLLName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pDLLName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DATATYPES_INFO_1A (size: 8)
 */
export interface DATATYPES_INFO_1A {
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
}

export const sizeofDATATYPES_INFO_1A = 8;

export function allocDATATYPES_INFO_1A(data?: Partial<DATATYPES_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofDATATYPES_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class DATATYPES_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DATATYPES_INFO_1W (size: 8)
 */
export interface DATATYPES_INFO_1W {
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
}

export const sizeofDATATYPES_INFO_1W = 8;

export function allocDATATYPES_INFO_1W(data?: Partial<DATATYPES_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofDATATYPES_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class DATATYPES_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_DEFAULTSA (size: 24)
 */
export interface PRINTER_DEFAULTSA {
  /** Windows.Win32.Foundation.PSTR */
  pDatatype: string | null | Uint8Array;
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.Printing.PRINTER_ACCESS_RIGHTS */
  DesiredAccess: PRINTER_ACCESS_RIGHTS;
}

export const sizeofPRINTER_DEFAULTSA = 24;

export function allocPRINTER_DEFAULTSA(data?: Partial<PRINTER_DEFAULTSA>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_DEFAULTSA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pDatatype);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(8, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  // 0x10: u32
  if (data?.DesiredAccess !== undefined) view.setUint32(16, Number(data.DesiredAccess), true);
  // 0x14: pad4
  return buf;
}

export class PRINTER_DEFAULTSAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get DesiredAccess(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set DesiredAccess(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_DEFAULTSW (size: 24)
 */
export interface PRINTER_DEFAULTSW {
  /** Windows.Win32.Foundation.PWSTR */
  pDatatype: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.Printing.PRINTER_ACCESS_RIGHTS */
  DesiredAccess: PRINTER_ACCESS_RIGHTS;
}

export const sizeofPRINTER_DEFAULTSW = 24;

export function allocPRINTER_DEFAULTSW(data?: Partial<PRINTER_DEFAULTSW>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_DEFAULTSW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pDatatype);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(8, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  // 0x10: u32
  if (data?.DesiredAccess !== undefined) view.setUint32(16, Number(data.DesiredAccess), true);
  // 0x14: pad4
  return buf;
}

export class PRINTER_DEFAULTSWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get DesiredAccess(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set DesiredAccess(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_ENUM_VALUESA (size: 32)
 */
export interface PRINTER_ENUM_VALUESA {
  /** Windows.Win32.Foundation.PSTR */
  pValueName: string | null | Uint8Array;
  /** u32 */
  cbValueName: number;
  /** u32 */
  dwType: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbData: number;
}

export const sizeofPRINTER_ENUM_VALUESA = 32;

export function allocPRINTER_ENUM_VALUESA(data?: Partial<PRINTER_ENUM_VALUESA>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_ENUM_VALUESA);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pValueName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pValueName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.cbValueName !== undefined) view.setUint32(8, Number(data.cbValueName), true);
  // 0x0c: u32
  if (data?.dwType !== undefined) view.setUint32(12, Number(data.dwType), true);
  // 0x10: pointer
  if (data?.pData !== undefined) view.setBigUint64(16, data.pData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pData))), true);
  // 0x18: u32
  if (data?.cbData !== undefined) view.setUint32(24, Number(data.cbData), true);
  // 0x1c: pad4
  return buf;
}

export class PRINTER_ENUM_VALUESAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pValueName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cbValueName(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cbData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: buffer
  set pValueName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set cbValueName(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwType(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cbData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_ENUM_VALUESW (size: 32)
 */
export interface PRINTER_ENUM_VALUESW {
  /** Windows.Win32.Foundation.PWSTR */
  pValueName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cbValueName: number;
  /** u32 */
  dwType: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbData: number;
}

export const sizeofPRINTER_ENUM_VALUESW = 32;

export function allocPRINTER_ENUM_VALUESW(data?: Partial<PRINTER_ENUM_VALUESW>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_ENUM_VALUESW);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pValueName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pValueName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u32
  if (data?.cbValueName !== undefined) view.setUint32(8, Number(data.cbValueName), true);
  // 0x0c: u32
  if (data?.dwType !== undefined) view.setUint32(12, Number(data.dwType), true);
  // 0x10: pointer
  if (data?.pData !== undefined) view.setBigUint64(16, data.pData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pData))), true);
  // 0x18: u32
  if (data?.cbData !== undefined) view.setUint32(24, Number(data.cbData), true);
  // 0x1c: pad4
  return buf;
}

export class PRINTER_ENUM_VALUESWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pValueName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get cbValueName(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwType(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get cbData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: buffer
  set pValueName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u32
  set cbValueName(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwType(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: u32
  set cbData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_NOTIFY_OPTIONS_TYPE (size: 24)
 */
export interface PRINTER_NOTIFY_OPTIONS_TYPE {
  /** u16 */
  Type: number;
  /** u16 */
  Reserved0: number;
  /** u32 */
  Reserved1: number;
  /** u32 */
  Reserved2: number;
  /** u32 */
  Count: number;
  /** ptr */
  pFields: Deno.PointerValue | Uint8Array;
}

export const sizeofPRINTER_NOTIFY_OPTIONS_TYPE = 24;

export function allocPRINTER_NOTIFY_OPTIONS_TYPE(data?: Partial<PRINTER_NOTIFY_OPTIONS_TYPE>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_NOTIFY_OPTIONS_TYPE);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: u16
  if (data?.Reserved0 !== undefined) view.setUint16(2, Number(data.Reserved0), true);
  // 0x04: u32
  if (data?.Reserved1 !== undefined) view.setUint32(4, Number(data.Reserved1), true);
  // 0x08: u32
  if (data?.Reserved2 !== undefined) view.setUint32(8, Number(data.Reserved2), true);
  // 0x0c: u32
  if (data?.Count !== undefined) view.setUint32(12, Number(data.Count), true);
  // 0x10: pointer
  if (data?.pFields !== undefined) view.setBigUint64(16, data.pFields === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pFields))), true);
  return buf;
}

export class PRINTER_NOTIFY_OPTIONS_TYPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Reserved0(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get Reserved1(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Reserved2(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get Count(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get pFields(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Reserved0(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set Reserved1(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Reserved2(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set Count(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set pFields(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_NOTIFY_OPTIONS (size: 24)
 */
export interface PRINTER_NOTIFY_OPTIONS {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Count: number;
  /** ptr */
  pTypes: Deno.PointerValue | Uint8Array;
}

export const sizeofPRINTER_NOTIFY_OPTIONS = 24;

export function allocPRINTER_NOTIFY_OPTIONS(data?: Partial<PRINTER_NOTIFY_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_NOTIFY_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.Count !== undefined) view.setUint32(8, Number(data.Count), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pTypes !== undefined) view.setBigUint64(16, data.pTypes === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pTypes))), true);
  return buf;
}

export class PRINTER_NOTIFY_OPTIONSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Count(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get pTypes(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Count(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set pTypes(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _Data_e__Struct (size: 16)
 */
export interface _Data_e__Struct {
  /** ptr */
  pbBuffer: Deno.PointerValue | Uint8Array;
  /** u32 */
  ulBufferLength: number;
}

export const sizeof_Data_e__Struct = 16;

export function alloc_Data_e__Struct(data?: Partial<_Data_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Data_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pbBuffer !== undefined) view.setBigUint64(0, data.pbBuffer === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pbBuffer))), true);
  // 0x08: u32
  if (data?.ulBufferLength !== undefined) view.setUint32(8, Number(data.ulBufferLength), true);
  // 0x0c: pad4
  return buf;
}

export class _Data_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pbBuffer(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ulBufferLength(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set pbBuffer(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ulBufferLength(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * _NotifyData_e__Union (size: 16)
 */
export interface _NotifyData_e__Union {
  /** array */
  adwData: Deno.PointerValue;
  /** _Data_e__Struct */
  Data: Uint8Array | Deno.PointerValue;
}

export const sizeof_NotifyData_e__Union = 16;

export function alloc_NotifyData_e__Union(data?: Partial<_NotifyData_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_NotifyData_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.adwData !== undefined) view.setBigUint64(0, data.adwData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.adwData))), true);
  // 0x08: pointer
  if (data?.Data !== undefined) view.setBigUint64(8, data.Data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Data))), true);
  return buf;
}

export class _NotifyData_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get adwData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set adwData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_NOTIFY_INFO_DATA (size: 24)
 */
export interface PRINTER_NOTIFY_INFO_DATA {
  /** u16 */
  Type: number;
  /** u16 */
  Field: number;
  /** u32 */
  Reserved: number;
  /** u32 */
  Id: number;
  /** _NotifyData_e__Union */
  NotifyData: Uint8Array | Deno.PointerValue;
}

export const sizeofPRINTER_NOTIFY_INFO_DATA = 24;

export function allocPRINTER_NOTIFY_INFO_DATA(data?: Partial<PRINTER_NOTIFY_INFO_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_NOTIFY_INFO_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.Type !== undefined) view.setUint16(0, Number(data.Type), true);
  // 0x02: u16
  if (data?.Field !== undefined) view.setUint16(2, Number(data.Field), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u32
  if (data?.Id !== undefined) view.setUint32(8, Number(data.Id), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.NotifyData !== undefined) view.setBigUint64(16, data.NotifyData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.NotifyData))), true);
  return buf;
}

export class PRINTER_NOTIFY_INFO_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get Type(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Field(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Id(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get NotifyData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set Type(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Field(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Id(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set NotifyData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_NOTIFY_INFO (size: 24)
 */
export interface PRINTER_NOTIFY_INFO {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Count: number;
  /** array */
  aData: Deno.PointerValue;
}

export const sizeofPRINTER_NOTIFY_INFO = 24;

export function allocPRINTER_NOTIFY_INFO(data?: Partial<PRINTER_NOTIFY_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_NOTIFY_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.Count !== undefined) view.setUint32(8, Number(data.Count), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.aData !== undefined) view.setBigUint64(16, data.aData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aData))), true);
  return buf;
}

export class PRINTER_NOTIFY_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Count(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get aData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Count(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set aData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.BINARY_CONTAINER (size: 16)
 */
export interface BINARY_CONTAINER {
  /** u32 */
  cbBuf: number;
  /** ptr */
  pData: Deno.PointerValue | Uint8Array;
}

export const sizeofBINARY_CONTAINER = 16;

export function allocBINARY_CONTAINER(data?: Partial<BINARY_CONTAINER>): Uint8Array {
  const buf = new Uint8Array(sizeofBINARY_CONTAINER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbBuf !== undefined) view.setUint32(0, Number(data.cbBuf), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pData !== undefined) view.setBigUint64(8, data.pData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pData))), true);
  return buf;
}

export class BINARY_CONTAINERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbBuf(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbBuf(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type NTSTATUS = number;

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD (size: 48)
 */
export interface EXCEPTION_RECORD {
  /** Windows.Win32.Foundation.NTSTATUS */
  ExceptionCode: Uint8Array | Deno.PointerValue;
  /** u32 */
  ExceptionFlags: number;
  /** ptr */
  ExceptionRecord: Deno.PointerValue | Uint8Array;
  /** ptr */
  ExceptionAddress: Deno.PointerValue | Uint8Array;
  /** u32 */
  NumberParameters: number;
  /** array */
  ExceptionInformation: Deno.PointerValue;
}

export const sizeofEXCEPTION_RECORD = 48;

export function allocEXCEPTION_RECORD(data?: Partial<EXCEPTION_RECORD>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_RECORD);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionCode !== undefined) view.setBigUint64(0, data.ExceptionCode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionCode))), true);
  // 0x08: u32
  if (data?.ExceptionFlags !== undefined) view.setUint32(8, Number(data.ExceptionFlags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(16, data.ExceptionRecord === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionRecord))), true);
  // 0x18: pointer
  if (data?.ExceptionAddress !== undefined) view.setBigUint64(24, data.ExceptionAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionAddress))), true);
  // 0x20: u32
  if (data?.NumberParameters !== undefined) view.setUint32(32, Number(data.NumberParameters), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.ExceptionInformation !== undefined) view.setBigUint64(40, data.ExceptionInformation === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionInformation))), true);
  return buf;
}

export class EXCEPTION_RECORDView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionCode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get ExceptionFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ExceptionAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get NumberParameters(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get ExceptionInformation(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set ExceptionCode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set ExceptionFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ExceptionAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set NumberParameters(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set ExceptionInformation(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO (size: 16)
 */
export interface EXCEPTION_DEBUG_INFO {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_RECORD */
  ExceptionRecord: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFirstChance: number;
}

export const sizeofEXCEPTION_DEBUG_INFO = 16;

export function allocEXCEPTION_DEBUG_INFO(data?: Partial<EXCEPTION_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXCEPTION_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ExceptionRecord !== undefined) view.setBigUint64(0, data.ExceptionRecord === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExceptionRecord))), true);
  // 0x08: u32
  if (data?.dwFirstChance !== undefined) view.setUint32(8, Number(data.dwFirstChance), true);
  // 0x0c: pad4
  return buf;
}

export class EXCEPTION_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get ExceptionRecord(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwFirstChance(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set ExceptionRecord(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwFirstChance(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO (size: 24)
 */
export interface CREATE_THREAD_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue;
}

export const sizeofCREATE_THREAD_DEBUG_INFO = 24;

export function allocCREATE_THREAD_DEBUG_INFO(data?: Partial<CREATE_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hThread !== undefined) view.setBigUint64(0, data.hThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hThread))), true);
  // 0x08: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(8, data.lpThreadLocalBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpThreadLocalBase))), true);
  // 0x10: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(16, data.lpStartAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpStartAddress))), true);
  return buf;
}

export class CREATE_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set hThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO (size: 72)
 */
export interface CREATE_PROCESS_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hProcess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hThread: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpBaseOfImage: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpThreadLocalBase: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.System.Threading.LPTHREAD_START_ROUTINE */
  lpStartAddress: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array;
  /** u16 */
  fUnicode: number;
}

export const sizeofCREATE_PROCESS_DEBUG_INFO = 72;

export function allocCREATE_PROCESS_DEBUG_INFO(data?: Partial<CREATE_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofCREATE_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hFile))), true);
  // 0x08: pointer
  if (data?.hProcess !== undefined) view.setBigUint64(8, data.hProcess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hProcess))), true);
  // 0x10: pointer
  if (data?.hThread !== undefined) view.setBigUint64(16, data.hThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hThread))), true);
  // 0x18: pointer
  if (data?.lpBaseOfImage !== undefined) view.setBigUint64(24, data.lpBaseOfImage === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfImage))), true);
  // 0x20: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(32, Number(data.dwDebugInfoFileOffset), true);
  // 0x24: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(36, Number(data.nDebugInfoSize), true);
  // 0x28: pointer
  if (data?.lpThreadLocalBase !== undefined) view.setBigUint64(40, data.lpThreadLocalBase === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpThreadLocalBase))), true);
  // 0x30: pointer
  if (data?.lpStartAddress !== undefined) view.setBigUint64(48, data.lpStartAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpStartAddress))), true);
  // 0x38: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(56, data.lpImageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpImageName))), true);
  // 0x40: u16
  if (data?.fUnicode !== undefined) view.setUint16(64, Number(data.fUnicode), true);
  // 0x42: pad6
  return buf;
}

export class CREATE_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get hProcess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get lpBaseOfImage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get lpThreadLocalBase(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get lpStartAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u16
  get fUnicode(): number {
    return this.view.getUint16(64, true);
  }

  // 0x42: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set hProcess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set lpBaseOfImage(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set lpThreadLocalBase(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set lpStartAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u16
  set fUnicode(value: number) {
    this.view.setUint16(64, value, true);
  }

  // 0x42: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO (size: 8)
 */
export interface EXIT_THREAD_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_THREAD_DEBUG_INFO = 8;

export function allocEXIT_THREAD_DEBUG_INFO(data?: Partial<EXIT_THREAD_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_THREAD_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_THREAD_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO (size: 8)
 */
export interface EXIT_PROCESS_DEBUG_INFO {
  /** u32 */
  dwExitCode: number;
}

export const sizeofEXIT_PROCESS_DEBUG_INFO = 8;

export function allocEXIT_PROCESS_DEBUG_INFO(data?: Partial<EXIT_PROCESS_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofEXIT_PROCESS_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwExitCode !== undefined) view.setUint32(0, Number(data.dwExitCode), true);
  // 0x04: pad4
  return buf;
}

export class EXIT_PROCESS_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwExitCode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x00: u32
  set dwExitCode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO (size: 40)
 */
export interface LOAD_DLL_DEBUG_INFO {
  /** Windows.Win32.Foundation.HANDLE */
  hFile: Uint8Array | Deno.PointerValue;
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwDebugInfoFileOffset: number;
  /** u32 */
  nDebugInfoSize: number;
  /** ptr */
  lpImageName: Deno.PointerValue | Uint8Array;
  /** u16 */
  fUnicode: number;
}

export const sizeofLOAD_DLL_DEBUG_INFO = 40;

export function allocLOAD_DLL_DEBUG_INFO(data?: Partial<LOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.hFile !== undefined) view.setBigUint64(0, data.hFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hFile))), true);
  // 0x08: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(8, data.lpBaseOfDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfDll))), true);
  // 0x10: u32
  if (data?.dwDebugInfoFileOffset !== undefined) view.setUint32(16, Number(data.dwDebugInfoFileOffset), true);
  // 0x14: u32
  if (data?.nDebugInfoSize !== undefined) view.setUint32(20, Number(data.nDebugInfoSize), true);
  // 0x18: pointer
  if (data?.lpImageName !== undefined) view.setBigUint64(24, data.lpImageName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpImageName))), true);
  // 0x20: u16
  if (data?.fUnicode !== undefined) view.setUint16(32, Number(data.fUnicode), true);
  // 0x22: pad6
  return buf;
}

export class LOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get hFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwDebugInfoFileOffset(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get nDebugInfoSize(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get lpImageName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u16
  get fUnicode(): number {
    return this.view.getUint16(32, true);
  }

  // 0x22: pad6

  // 0x00: pointer
  set hFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwDebugInfoFileOffset(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set nDebugInfoSize(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set lpImageName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u16
  set fUnicode(value: number) {
    this.view.setUint16(32, value, true);
  }

  // 0x22: pad6
}

/**
 * Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO (size: 8)
 */
export interface UNLOAD_DLL_DEBUG_INFO {
  /** ptr */
  lpBaseOfDll: Deno.PointerValue | Uint8Array;
}

export const sizeofUNLOAD_DLL_DEBUG_INFO = 8;

export function allocUNLOAD_DLL_DEBUG_INFO(data?: Partial<UNLOAD_DLL_DEBUG_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNLOAD_DLL_DEBUG_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.lpBaseOfDll !== undefined) view.setBigUint64(0, data.lpBaseOfDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.lpBaseOfDll))), true);
  return buf;
}

export class UNLOAD_DLL_DEBUG_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get lpBaseOfDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set lpBaseOfDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO (size: 16)
 */
export interface OUTPUT_DEBUG_STRING_INFO {
  /** Windows.Win32.Foundation.PSTR */
  lpDebugStringData: string | null | Uint8Array;
  /** u16 */
  fUnicode: number;
  /** u16 */
  nDebugStringLength: number;
}

export const sizeofOUTPUT_DEBUG_STRING_INFO = 16;

export function allocOUTPUT_DEBUG_STRING_INFO(data?: Partial<OUTPUT_DEBUG_STRING_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofOUTPUT_DEBUG_STRING_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.lpDebugStringData !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.lpDebugStringData);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: u16
  if (data?.fUnicode !== undefined) view.setUint16(8, Number(data.fUnicode), true);
  // 0x0a: u16
  if (data?.nDebugStringLength !== undefined) view.setUint16(10, Number(data.nDebugStringLength), true);
  // 0x0c: pad4
  return buf;
}

export class OUTPUT_DEBUG_STRING_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get lpDebugStringData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get fUnicode(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get nDebugStringLength(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: pad4

  // 0x00: buffer
  set lpDebugStringData(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: u16
  set fUnicode(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set nDebugStringLength(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.System.Diagnostics.Debug.RIP_INFO (size: 8)
 */
export interface RIP_INFO {
  /** u32 */
  dwError: number;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO_TYPE */
  dwType: RIP_INFO_TYPE;
}

export const sizeofRIP_INFO = 8;

export function allocRIP_INFO(data?: Partial<RIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofRIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwError !== undefined) view.setUint32(0, Number(data.dwError), true);
  // 0x04: u32
  if (data?.dwType !== undefined) view.setUint32(4, Number(data.dwType), true);
  return buf;
}

export class RIP_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwError(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwError(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwType(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * _u_e__Union (size: 72)
 */
export interface _u_e__Union {
  /** Windows.Win32.System.Diagnostics.Debug.EXCEPTION_DEBUG_INFO */
  Exception: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_THREAD_DEBUG_INFO */
  CreateThread: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.CREATE_PROCESS_DEBUG_INFO */
  CreateProcessInfo: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_THREAD_DEBUG_INFO */
  ExitThread: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.EXIT_PROCESS_DEBUG_INFO */
  ExitProcess: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.LOAD_DLL_DEBUG_INFO */
  LoadDll: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.UNLOAD_DLL_DEBUG_INFO */
  UnloadDll: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.OUTPUT_DEBUG_STRING_INFO */
  DebugString: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Diagnostics.Debug.RIP_INFO */
  RipInfo: Uint8Array | Deno.PointerValue;
}

export const sizeof_u_e__Union = 72;

export function alloc_u_e__Union(data?: Partial<_u_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_u_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Exception !== undefined) view.setBigUint64(0, data.Exception === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Exception))), true);
  // 0x08: pointer
  if (data?.CreateThread !== undefined) view.setBigUint64(8, data.CreateThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateThread))), true);
  // 0x10: pointer
  if (data?.CreateProcessInfo !== undefined) view.setBigUint64(16, data.CreateProcessInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CreateProcessInfo))), true);
  // 0x18: pointer
  if (data?.ExitThread !== undefined) view.setBigUint64(24, data.ExitThread === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExitThread))), true);
  // 0x20: pointer
  if (data?.ExitProcess !== undefined) view.setBigUint64(32, data.ExitProcess === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ExitProcess))), true);
  // 0x28: pointer
  if (data?.LoadDll !== undefined) view.setBigUint64(40, data.LoadDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LoadDll))), true);
  // 0x30: pointer
  if (data?.UnloadDll !== undefined) view.setBigUint64(48, data.UnloadDll === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnloadDll))), true);
  // 0x38: pointer
  if (data?.DebugString !== undefined) view.setBigUint64(56, data.DebugString === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DebugString))), true);
  // 0x40: pointer
  if (data?.RipInfo !== undefined) view.setBigUint64(64, data.RipInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.RipInfo))), true);
  return buf;
}

export class _u_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Exception(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get CreateThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get CreateProcessInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get ExitThread(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get ExitProcess(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get LoadDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get UnloadDll(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get DebugString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get RipInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set Exception(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set CreateThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set CreateProcessInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set ExitThread(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set ExitProcess(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set LoadDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set UnloadDll(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set DebugString(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set RipInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.BIDI_DATA (size: 16)
 */
export interface BIDI_DATA {
  /** u32 */
  dwBidiType: number;
  /** _u_e__Union */
  u: Uint8Array | Deno.PointerValue;
}

export const sizeofBIDI_DATA = 16;

export function allocBIDI_DATA(data?: Partial<BIDI_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBIDI_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwBidiType !== undefined) view.setUint32(0, Number(data.dwBidiType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.u !== undefined) view.setBigUint64(8, data.u === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.u))), true);
  return buf;
}

export class BIDI_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwBidiType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get u(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwBidiType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set u(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.BIDI_REQUEST_DATA (size: 24)
 */
export interface BIDI_REQUEST_DATA {
  /** u32 */
  dwReqNumber: number;
  /** Windows.Win32.Foundation.PWSTR */
  pSchema: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Printing.BIDI_DATA */
  data: Uint8Array | Deno.PointerValue;
}

export const sizeofBIDI_REQUEST_DATA = 24;

export function allocBIDI_REQUEST_DATA(data?: Partial<BIDI_REQUEST_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBIDI_REQUEST_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwReqNumber !== undefined) view.setUint32(0, Number(data.dwReqNumber), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pSchema !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pSchema);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.data !== undefined) view.setBigUint64(16, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class BIDI_REQUEST_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwReqNumber(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pSchema(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwReqNumber(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pSchema(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.BIDI_REQUEST_CONTAINER (size: 24)
 */
export interface BIDI_REQUEST_CONTAINER {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Count: number;
  /** array */
  aData: Deno.PointerValue;
}

export const sizeofBIDI_REQUEST_CONTAINER = 24;

export function allocBIDI_REQUEST_CONTAINER(data?: Partial<BIDI_REQUEST_CONTAINER>): Uint8Array {
  const buf = new Uint8Array(sizeofBIDI_REQUEST_CONTAINER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.Count !== undefined) view.setUint32(8, Number(data.Count), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.aData !== undefined) view.setBigUint64(16, data.aData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aData))), true);
  return buf;
}

export class BIDI_REQUEST_CONTAINERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Count(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get aData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Count(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set aData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.BIDI_RESPONSE_DATA (size: 24)
 */
export interface BIDI_RESPONSE_DATA {
  /** u32 */
  dwResult: number;
  /** u32 */
  dwReqNumber: number;
  /** Windows.Win32.Foundation.PWSTR */
  pSchema: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Printing.BIDI_DATA */
  data: Uint8Array | Deno.PointerValue;
}

export const sizeofBIDI_RESPONSE_DATA = 24;

export function allocBIDI_RESPONSE_DATA(data?: Partial<BIDI_RESPONSE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofBIDI_RESPONSE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwResult !== undefined) view.setUint32(0, Number(data.dwResult), true);
  // 0x04: u32
  if (data?.dwReqNumber !== undefined) view.setUint32(4, Number(data.dwReqNumber), true);
  // 0x08: buffer
  if (data?.pSchema !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pSchema);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.data !== undefined) view.setBigUint64(16, data.data === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.data))), true);
  return buf;
}

export class BIDI_RESPONSE_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwResult(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwReqNumber(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: buffer
  get pSchema(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get data(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwResult(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwReqNumber(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: buffer
  set pSchema(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set data(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.BIDI_RESPONSE_CONTAINER (size: 24)
 */
export interface BIDI_RESPONSE_CONTAINER {
  /** u32 */
  Version: number;
  /** u32 */
  Flags: number;
  /** u32 */
  Count: number;
  /** array */
  aData: Deno.PointerValue;
}

export const sizeofBIDI_RESPONSE_CONTAINER = 24;

export function allocBIDI_RESPONSE_CONTAINER(data?: Partial<BIDI_RESPONSE_CONTAINER>): Uint8Array {
  const buf = new Uint8Array(sizeofBIDI_RESPONSE_CONTAINER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.Count !== undefined) view.setUint32(8, Number(data.Count), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.aData !== undefined) view.setBigUint64(16, data.aData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aData))), true);
  return buf;
}

export class BIDI_RESPONSE_CONTAINERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Version(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Flags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get Count(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  get aData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set Version(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Flags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set Count(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: pointer
  set aData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PROVIDOR_INFO_1A (size: 24)
 */
export interface PROVIDOR_INFO_1A {
  /** Windows.Win32.Foundation.PSTR */
  pName: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pEnvironment: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pDLLName: string | null | Uint8Array;
}

export const sizeofPROVIDOR_INFO_1A = 24;

export function allocPROVIDOR_INFO_1A(data?: Partial<PROVIDOR_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofPROVIDOR_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pEnvironment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pDLLName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pDLLName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class PROVIDOR_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pDLLName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pDLLName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PROVIDOR_INFO_1W (size: 24)
 */
export interface PROVIDOR_INFO_1W {
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pEnvironment: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDLLName: string | null | Uint8Array | Uint16Array;
}

export const sizeofPROVIDOR_INFO_1W = 24;

export function allocPROVIDOR_INFO_1W(data?: Partial<PROVIDOR_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofPROVIDOR_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pEnvironment !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pEnvironment);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pDLLName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pDLLName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class PROVIDOR_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pDLLName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pDLLName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PROVIDOR_INFO_2A (size: 8)
 */
export interface PROVIDOR_INFO_2A {
  /** Windows.Win32.Foundation.PSTR */
  pOrder: string | null | Uint8Array;
}

export const sizeofPROVIDOR_INFO_2A = 8;

export function allocPROVIDOR_INFO_2A(data?: Partial<PROVIDOR_INFO_2A>): Uint8Array {
  const buf = new Uint8Array(sizeofPROVIDOR_INFO_2A);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pOrder !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pOrder);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class PROVIDOR_INFO_2AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pOrder(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pOrder(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PROVIDOR_INFO_2W (size: 8)
 */
export interface PROVIDOR_INFO_2W {
  /** Windows.Win32.Foundation.PWSTR */
  pOrder: string | null | Uint8Array | Uint16Array;
}

export const sizeofPROVIDOR_INFO_2W = 8;

export function allocPROVIDOR_INFO_2W(data?: Partial<PROVIDOR_INFO_2W>): Uint8Array {
  const buf = new Uint8Array(sizeofPROVIDOR_INFO_2W);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pOrder !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pOrder);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class PROVIDOR_INFO_2WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pOrder(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pOrder(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_OPTIONSA (size: 8)
 */
export interface PRINTER_OPTIONSA {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Graphics.Printing.PRINTER_OPTION_FLAGS */
  dwFlags: PRINTER_OPTION_FLAGS;
}

export const sizeofPRINTER_OPTIONSA = 8;

export function allocPRINTER_OPTIONSA(data?: Partial<PRINTER_OPTIONSA>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_OPTIONSA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.dwFlags !== undefined) view.setInt32(4, Number(data.dwFlags), true);
  return buf;
}

export class PRINTER_OPTIONSAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get dwFlags(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set dwFlags(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_OPTIONSW (size: 8)
 */
export interface PRINTER_OPTIONSW {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Graphics.Printing.PRINTER_OPTION_FLAGS */
  dwFlags: PRINTER_OPTION_FLAGS;
}

export const sizeofPRINTER_OPTIONSW = 8;

export function allocPRINTER_OPTIONSW(data?: Partial<PRINTER_OPTIONSW>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_OPTIONSW);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: i32
  if (data?.dwFlags !== undefined) view.setInt32(4, Number(data.dwFlags), true);
  return buf;
}

export class PRINTER_OPTIONSWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: i32
  get dwFlags(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: i32
  set dwFlags(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_CONNECTION_INFO_1A (size: 16)
 */
export interface PRINTER_CONNECTION_INFO_1A {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PSTR */
  pszDriverName: string | null | Uint8Array;
}

export const sizeofPRINTER_CONNECTION_INFO_1A = 16;

export function allocPRINTER_CONNECTION_INFO_1A(data?: Partial<PRINTER_CONNECTION_INFO_1A>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_CONNECTION_INFO_1A);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszDriverName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszDriverName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class PRINTER_CONNECTION_INFO_1AView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszDriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszDriverName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_CONNECTION_INFO_1W (size: 16)
 */
export interface PRINTER_CONNECTION_INFO_1W {
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pszDriverName: string | null | Uint8Array | Uint16Array;
}

export const sizeofPRINTER_CONNECTION_INFO_1W = 16;

export function allocPRINTER_CONNECTION_INFO_1W(data?: Partial<PRINTER_CONNECTION_INFO_1W>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_CONNECTION_INFO_1W);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwFlags !== undefined) view.setUint32(0, Number(data.dwFlags), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pszDriverName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszDriverName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class PRINTER_CONNECTION_INFO_1WView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwFlags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pszDriverName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwFlags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pszDriverName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.CORE_PRINTER_DRIVERA (size: 32)
 */
export interface CORE_PRINTER_DRIVERA {
  /** System.Guid */
  CoreDriverGUID: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftDriverDate: Uint8Array | Deno.PointerValue;
  /** u64 */
  dwlDriverVersion: Deno.PointerValue;
  /** array */
  szPackageID: Deno.PointerValue;
}

export const sizeofCORE_PRINTER_DRIVERA = 32;

export function allocCORE_PRINTER_DRIVERA(data?: Partial<CORE_PRINTER_DRIVERA>): Uint8Array {
  const buf = new Uint8Array(sizeofCORE_PRINTER_DRIVERA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CoreDriverGUID !== undefined) view.setBigUint64(0, data.CoreDriverGUID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CoreDriverGUID))), true);
  // 0x08: pointer
  if (data?.ftDriverDate !== undefined) view.setBigUint64(8, data.ftDriverDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftDriverDate))), true);
  // 0x10: u64
  if (data?.dwlDriverVersion !== undefined) view.setBigUint64(16, BigInt(data.dwlDriverVersion), true);
  // 0x18: pointer
  if (data?.szPackageID !== undefined) view.setBigUint64(24, data.szPackageID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szPackageID))), true);
  return buf;
}

export class CORE_PRINTER_DRIVERAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CoreDriverGUID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ftDriverDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u64
  get dwlDriverVersion(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get szPackageID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CoreDriverGUID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ftDriverDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u64
  set dwlDriverVersion(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set szPackageID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.CORE_PRINTER_DRIVERW (size: 32)
 */
export interface CORE_PRINTER_DRIVERW {
  /** System.Guid */
  CoreDriverGUID: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.FILETIME */
  ftDriverDate: Uint8Array | Deno.PointerValue;
  /** u64 */
  dwlDriverVersion: Deno.PointerValue;
  /** array */
  szPackageID: Deno.PointerValue;
}

export const sizeofCORE_PRINTER_DRIVERW = 32;

export function allocCORE_PRINTER_DRIVERW(data?: Partial<CORE_PRINTER_DRIVERW>): Uint8Array {
  const buf = new Uint8Array(sizeofCORE_PRINTER_DRIVERW);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CoreDriverGUID !== undefined) view.setBigUint64(0, data.CoreDriverGUID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.CoreDriverGUID))), true);
  // 0x08: pointer
  if (data?.ftDriverDate !== undefined) view.setBigUint64(8, data.ftDriverDate === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ftDriverDate))), true);
  // 0x10: u64
  if (data?.dwlDriverVersion !== undefined) view.setBigUint64(16, BigInt(data.dwlDriverVersion), true);
  // 0x18: pointer
  if (data?.szPackageID !== undefined) view.setBigUint64(24, data.szPackageID === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szPackageID))), true);
  return buf;
}

export class CORE_PRINTER_DRIVERWView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get CoreDriverGUID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get ftDriverDate(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u64
  get dwlDriverVersion(): Deno.PointerValue {
    return Number(this.view.getBigUint64(16, true));
  }

  // 0x18: pointer
  get szPackageID(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set CoreDriverGUID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set ftDriverDate(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u64
  set dwlDriverVersion(value: Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(value), true);
  }

  // 0x18: pointer
  set szPackageID(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _propertyBlob_e__Struct (size: 16)
 */
export interface _propertyBlob_e__Struct {
  /** u32 */
  cbBuf: number;
  /** ptr */
  pBuf: Deno.PointerValue | Uint8Array;
}

export const sizeof_propertyBlob_e__Struct = 16;

export function alloc_propertyBlob_e__Struct(data?: Partial<_propertyBlob_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_propertyBlob_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbBuf !== undefined) view.setUint32(0, Number(data.cbBuf), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pBuf !== undefined) view.setBigUint64(8, data.pBuf === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pBuf))), true);
  return buf;
}

export class _propertyBlob_e__StructView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbBuf(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pBuf(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbBuf(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pBuf(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * _value_e__Union (size: 40)
 */
export interface _value_e__Union {
  /** u8 */
  propertyByte: number;
  /** Windows.Win32.Foundation.PWSTR */
  propertyString: string | null | Uint8Array | Uint16Array;
  /** i32 */
  propertyInt32: number;
  /** i64 */
  propertyInt64: Deno.PointerValue;
  /** _propertyBlob_e__Struct */
  propertyBlob: Uint8Array | Deno.PointerValue;
}

export const sizeof_value_e__Union = 40;

export function alloc_value_e__Union(data?: Partial<_value_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_value_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.propertyByte !== undefined) view.setUint8(0, Number(data.propertyByte));
  // 0x01: pad7
  // 0x08: buffer
  if (data?.propertyString !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.propertyString);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: i32
  if (data?.propertyInt32 !== undefined) view.setInt32(16, Number(data.propertyInt32), true);
  // 0x14: pad4
  // 0x18: i64
  if (data?.propertyInt64 !== undefined) view.setBigInt64(24, BigInt(data.propertyInt64), true);
  // 0x20: pointer
  if (data?.propertyBlob !== undefined) view.setBigUint64(32, data.propertyBlob === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.propertyBlob))), true);
  return buf;
}

export class _value_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get propertyByte(): number {
    return this.view.getUint8(0);
  }

  // 0x01: pad7

  // 0x08: buffer
  get propertyString(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: i32
  get propertyInt32(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: pad4

  // 0x18: i64
  get propertyInt64(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: pointer
  get propertyBlob(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set propertyByte(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: pad7

  // 0x08: buffer
  set propertyString(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: i32
  set propertyInt32(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: i64
  set propertyInt64(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: pointer
  set propertyBlob(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PrintPropertyValue (size: 16)
 */
export interface PrintPropertyValue {
  /** Windows.Win32.Graphics.Printing.EPrintPropertyType */
  ePropertyType: EPrintPropertyType;
  /** _value_e__Union */
  value: Uint8Array | Deno.PointerValue;
}

export const sizeofPrintPropertyValue = 16;

export function allocPrintPropertyValue(data?: Partial<PrintPropertyValue>): Uint8Array {
  const buf = new Uint8Array(sizeofPrintPropertyValue);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ePropertyType !== undefined) view.setInt32(0, Number(data.ePropertyType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.value !== undefined) view.setBigUint64(8, data.value === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.value))), true);
  return buf;
}

export class PrintPropertyValueView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get ePropertyType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get value(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set ePropertyType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set value(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PrintNamedProperty (size: 16)
 */
export interface PrintNamedProperty {
  /** Windows.Win32.Foundation.PWSTR */
  propertyName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Printing.PrintPropertyValue */
  propertyValue: Uint8Array | Deno.PointerValue;
}

export const sizeofPrintNamedProperty = 16;

export function allocPrintNamedProperty(data?: Partial<PrintNamedProperty>): Uint8Array {
  const buf = new Uint8Array(sizeofPrintNamedProperty);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.propertyName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.propertyName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: pointer
  if (data?.propertyValue !== undefined) view.setBigUint64(8, data.propertyValue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.propertyValue))), true);
  return buf;
}

export class PrintNamedPropertyView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get propertyName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get propertyValue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set propertyName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: pointer
  set propertyValue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PrintPropertiesCollection (size: 16)
 */
export interface PrintPropertiesCollection {
  /** u32 */
  numberOfProperties: number;
  /** ptr */
  propertiesCollection: Deno.PointerValue | Uint8Array;
}

export const sizeofPrintPropertiesCollection = 16;

export function allocPrintPropertiesCollection(data?: Partial<PrintPropertiesCollection>): Uint8Array {
  const buf = new Uint8Array(sizeofPrintPropertiesCollection);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.numberOfProperties !== undefined) view.setUint32(0, Number(data.numberOfProperties), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.propertiesCollection !== undefined) view.setBigUint64(8, data.propertiesCollection === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.propertiesCollection))), true);
  return buf;
}

export class PrintPropertiesCollectionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get numberOfProperties(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get propertiesCollection(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set numberOfProperties(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set propertiesCollection(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINT_EXECUTION_DATA (size: 8)
 */
export interface PRINT_EXECUTION_DATA {
  /** Windows.Win32.Graphics.Printing.PRINT_EXECUTION_CONTEXT */
  context: PRINT_EXECUTION_CONTEXT;
  /** u32 */
  clientAppPID: number;
}

export const sizeofPRINT_EXECUTION_DATA = 8;

export function allocPRINT_EXECUTION_DATA(data?: Partial<PRINT_EXECUTION_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINT_EXECUTION_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.context !== undefined) view.setInt32(0, Number(data.context), true);
  // 0x04: u32
  if (data?.clientAppPID !== undefined) view.setUint32(4, Number(data.clientAppPID), true);
  return buf;
}

export class PRINT_EXECUTION_DATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get context(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get clientAppPID(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: i32
  set context(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set clientAppPID(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MXDC_ESCAPE_HEADER_T (size: 16)
 */
export interface MXDC_ESCAPE_HEADER_T {
  /** u32 */
  cbInput: number;
  /** u32 */
  cbOutput: number;
  /** u32 */
  opCode: number;
}

export const sizeofMXDC_ESCAPE_HEADER_T = 16;

export function allocMXDC_ESCAPE_HEADER_T(data?: Partial<MXDC_ESCAPE_HEADER_T>): Uint8Array {
  const buf = new Uint8Array(sizeofMXDC_ESCAPE_HEADER_T);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbInput !== undefined) view.setUint32(0, Number(data.cbInput), true);
  // 0x04: u32
  if (data?.cbOutput !== undefined) view.setUint32(4, Number(data.cbOutput), true);
  // 0x08: u32
  if (data?.opCode !== undefined) view.setUint32(8, Number(data.opCode), true);
  // 0x0c: pad4
  return buf;
}

export class MXDC_ESCAPE_HEADER_TView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbInput(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cbOutput(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get opCode(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set cbInput(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cbOutput(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set opCode(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.MXDC_GET_FILENAME_DATA_T (size: 16)
 */
export interface MXDC_GET_FILENAME_DATA_T {
  /** u32 */
  cbOutput: number;
  /** array */
  wszData: Deno.PointerValue;
}

export const sizeofMXDC_GET_FILENAME_DATA_T = 16;

export function allocMXDC_GET_FILENAME_DATA_T(data?: Partial<MXDC_GET_FILENAME_DATA_T>): Uint8Array {
  const buf = new Uint8Array(sizeofMXDC_GET_FILENAME_DATA_T);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbOutput !== undefined) view.setUint32(0, Number(data.cbOutput), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.wszData !== undefined) view.setBigUint64(8, data.wszData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wszData))), true);
  return buf;
}

export class MXDC_GET_FILENAME_DATA_TView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbOutput(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get wszData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbOutput(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set wszData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MXDC_S0PAGE_DATA_T (size: 16)
 */
export interface MXDC_S0PAGE_DATA_T {
  /** u32 */
  dwSize: number;
  /** array */
  bData: Deno.PointerValue;
}

export const sizeofMXDC_S0PAGE_DATA_T = 16;

export function allocMXDC_S0PAGE_DATA_T(data?: Partial<MXDC_S0PAGE_DATA_T>): Uint8Array {
  const buf = new Uint8Array(sizeofMXDC_S0PAGE_DATA_T);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bData !== undefined) view.setBigUint64(8, data.bData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bData))), true);
  return buf;
}

export class MXDC_S0PAGE_DATA_TView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get bData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set bData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MXDC_XPS_S0PAGE_RESOURCE_T (size: 32)
 */
export interface MXDC_XPS_S0PAGE_RESOURCE_T {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwResourceType: number;
  /** array */
  szUri: Deno.PointerValue;
  /** u32 */
  dwDataSize: number;
  /** array */
  bData: Deno.PointerValue;
}

export const sizeofMXDC_XPS_S0PAGE_RESOURCE_T = 32;

export function allocMXDC_XPS_S0PAGE_RESOURCE_T(data?: Partial<MXDC_XPS_S0PAGE_RESOURCE_T>): Uint8Array {
  const buf = new Uint8Array(sizeofMXDC_XPS_S0PAGE_RESOURCE_T);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwResourceType !== undefined) view.setUint32(4, Number(data.dwResourceType), true);
  // 0x08: pointer
  if (data?.szUri !== undefined) view.setBigUint64(8, data.szUri === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.szUri))), true);
  // 0x10: u32
  if (data?.dwDataSize !== undefined) view.setUint32(16, Number(data.dwDataSize), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.bData !== undefined) view.setBigUint64(24, data.bData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bData))), true);
  return buf;
}

export class MXDC_XPS_S0PAGE_RESOURCE_TView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwResourceType(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get szUri(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwDataSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get bData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwResourceType(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set szUri(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwDataSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set bData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MXDC_PRINTTICKET_DATA_T (size: 16)
 */
export interface MXDC_PRINTTICKET_DATA_T {
  /** u32 */
  dwDataSize: number;
  /** array */
  bData: Deno.PointerValue;
}

export const sizeofMXDC_PRINTTICKET_DATA_T = 16;

export function allocMXDC_PRINTTICKET_DATA_T(data?: Partial<MXDC_PRINTTICKET_DATA_T>): Uint8Array {
  const buf = new Uint8Array(sizeofMXDC_PRINTTICKET_DATA_T);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwDataSize !== undefined) view.setUint32(0, Number(data.dwDataSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.bData !== undefined) view.setBigUint64(8, data.bData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.bData))), true);
  return buf;
}

export class MXDC_PRINTTICKET_DATA_TView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwDataSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get bData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwDataSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set bData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MXDC_PRINTTICKET_ESCAPE_T (size: 16)
 */
export interface MXDC_PRINTTICKET_ESCAPE_T {
  /** Windows.Win32.Graphics.Printing.MXDC_ESCAPE_HEADER_T */
  mxdcEscape: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Printing.MXDC_PRINTTICKET_DATA_T */
  printTicketData: Uint8Array | Deno.PointerValue;
}

export const sizeofMXDC_PRINTTICKET_ESCAPE_T = 16;

export function allocMXDC_PRINTTICKET_ESCAPE_T(data?: Partial<MXDC_PRINTTICKET_ESCAPE_T>): Uint8Array {
  const buf = new Uint8Array(sizeofMXDC_PRINTTICKET_ESCAPE_T);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.mxdcEscape !== undefined) view.setBigUint64(0, data.mxdcEscape === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.mxdcEscape))), true);
  // 0x08: pointer
  if (data?.printTicketData !== undefined) view.setBigUint64(8, data.printTicketData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.printTicketData))), true);
  return buf;
}

export class MXDC_PRINTTICKET_ESCAPE_TView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get mxdcEscape(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get printTicketData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set mxdcEscape(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set printTicketData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MXDC_S0PAGE_PASSTHROUGH_ESCAPE_T (size: 16)
 */
export interface MXDC_S0PAGE_PASSTHROUGH_ESCAPE_T {
  /** Windows.Win32.Graphics.Printing.MXDC_ESCAPE_HEADER_T */
  mxdcEscape: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Printing.MXDC_S0PAGE_DATA_T */
  xpsS0PageData: Uint8Array | Deno.PointerValue;
}

export const sizeofMXDC_S0PAGE_PASSTHROUGH_ESCAPE_T = 16;

export function allocMXDC_S0PAGE_PASSTHROUGH_ESCAPE_T(data?: Partial<MXDC_S0PAGE_PASSTHROUGH_ESCAPE_T>): Uint8Array {
  const buf = new Uint8Array(sizeofMXDC_S0PAGE_PASSTHROUGH_ESCAPE_T);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.mxdcEscape !== undefined) view.setBigUint64(0, data.mxdcEscape === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.mxdcEscape))), true);
  // 0x08: pointer
  if (data?.xpsS0PageData !== undefined) view.setBigUint64(8, data.xpsS0PageData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.xpsS0PageData))), true);
  return buf;
}

export class MXDC_S0PAGE_PASSTHROUGH_ESCAPE_TView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get mxdcEscape(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get xpsS0PageData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set mxdcEscape(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set xpsS0PageData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MXDC_S0PAGE_RESOURCE_ESCAPE_T (size: 16)
 */
export interface MXDC_S0PAGE_RESOURCE_ESCAPE_T {
  /** Windows.Win32.Graphics.Printing.MXDC_ESCAPE_HEADER_T */
  mxdcEscape: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Printing.MXDC_XPS_S0PAGE_RESOURCE_T */
  xpsS0PageResourcePassthrough: Uint8Array | Deno.PointerValue;
}

export const sizeofMXDC_S0PAGE_RESOURCE_ESCAPE_T = 16;

export function allocMXDC_S0PAGE_RESOURCE_ESCAPE_T(data?: Partial<MXDC_S0PAGE_RESOURCE_ESCAPE_T>): Uint8Array {
  const buf = new Uint8Array(sizeofMXDC_S0PAGE_RESOURCE_ESCAPE_T);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.mxdcEscape !== undefined) view.setBigUint64(0, data.mxdcEscape === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.mxdcEscape))), true);
  // 0x08: pointer
  if (data?.xpsS0PageResourcePassthrough !== undefined) view.setBigUint64(8, data.xpsS0PageResourcePassthrough === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.xpsS0PageResourcePassthrough))), true);
  return buf;
}

export class MXDC_S0PAGE_RESOURCE_ESCAPE_TView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get mxdcEscape(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get xpsS0PageResourcePassthrough(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set mxdcEscape(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set xpsS0PageResourcePassthrough(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DEVICEPROPERTYHEADER (size: 24)
 */
export interface DEVICEPROPERTYHEADER {
  /** u16 */
  cbSize: number;
  /** u16 */
  Flags: number;
  /** Windows.Win32.Foundation.HANDLE */
  hPrinter: Uint8Array | Deno.PointerValue;
  /** ptr */
  pszPrinterName: Deno.PointerValue | Uint8Array;
}

export const sizeofDEVICEPROPERTYHEADER = 24;

export function allocDEVICEPROPERTYHEADER(data?: Partial<DEVICEPROPERTYHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVICEPROPERTYHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.Flags !== undefined) view.setUint16(2, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hPrinter !== undefined) view.setBigUint64(8, data.hPrinter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hPrinter))), true);
  // 0x10: pointer
  if (data?.pszPrinterName !== undefined) view.setBigUint64(16, data.pszPrinterName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszPrinterName))), true);
  return buf;
}

export class DEVICEPROPERTYHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Flags(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hPrinter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pszPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Flags(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hPrinter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pszPrinterName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DOCUMENTPROPERTYHEADER (size: 48)
 */
export interface DOCUMENTPROPERTYHEADER {
  /** u16 */
  cbSize: number;
  /** u16 */
  Reserved: number;
  /** Windows.Win32.Foundation.HANDLE */
  hPrinter: Uint8Array | Deno.PointerValue;
  /** ptr */
  pszPrinterName: Deno.PointerValue | Uint8Array;
  /** ptr */
  pdmIn: Deno.PointerValue | Uint8Array;
  /** ptr */
  pdmOut: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbOut: number;
  /** u32 */
  fMode: number;
}

export const sizeofDOCUMENTPROPERTYHEADER = 48;

export function allocDOCUMENTPROPERTYHEADER(data?: Partial<DOCUMENTPROPERTYHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDOCUMENTPROPERTYHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.Reserved !== undefined) view.setUint16(2, Number(data.Reserved), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hPrinter !== undefined) view.setBigUint64(8, data.hPrinter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hPrinter))), true);
  // 0x10: pointer
  if (data?.pszPrinterName !== undefined) view.setBigUint64(16, data.pszPrinterName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszPrinterName))), true);
  // 0x18: pointer
  if (data?.pdmIn !== undefined) view.setBigUint64(24, data.pdmIn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pdmIn))), true);
  // 0x20: pointer
  if (data?.pdmOut !== undefined) view.setBigUint64(32, data.pdmOut === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pdmOut))), true);
  // 0x28: u32
  if (data?.cbOut !== undefined) view.setUint32(40, Number(data.cbOut), true);
  // 0x2c: u32
  if (data?.fMode !== undefined) view.setUint32(44, Number(data.fMode), true);
  return buf;
}

export class DOCUMENTPROPERTYHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Reserved(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hPrinter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pszPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pdmIn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pdmOut(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get cbOut(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get fMode(): number {
    return this.view.getUint32(44, true);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Reserved(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hPrinter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pszPrinterName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pdmIn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pdmOut(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set cbOut(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set fMode(value: number) {
    this.view.setUint32(44, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DEVQUERYPRINT_INFO (size: 40)
 */
export interface DEVQUERYPRINT_INFO {
  /** u16 */
  cbSize: number;
  /** u16 */
  Level: number;
  /** Windows.Win32.Foundation.HANDLE */
  hPrinter: Uint8Array | Deno.PointerValue;
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszErrorStr: string | null | Uint8Array | Uint16Array;
  /** u32 */
  cchErrorStr: number;
  /** u32 */
  cchNeeded: number;
}

export const sizeofDEVQUERYPRINT_INFO = 40;

export function allocDEVQUERYPRINT_INFO(data?: Partial<DEVQUERYPRINT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofDEVQUERYPRINT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.cbSize !== undefined) view.setUint16(0, Number(data.cbSize), true);
  // 0x02: u16
  if (data?.Level !== undefined) view.setUint16(2, Number(data.Level), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hPrinter !== undefined) view.setBigUint64(8, data.hPrinter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hPrinter))), true);
  // 0x10: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(16, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  // 0x18: buffer
  if (data?.pszErrorStr !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pszErrorStr);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.cchErrorStr !== undefined) view.setUint32(32, Number(data.cchErrorStr), true);
  // 0x24: u32
  if (data?.cchNeeded !== undefined) view.setUint32(36, Number(data.cchNeeded), true);
  return buf;
}

export class DEVQUERYPRINT_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get cbSize(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get Level(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hPrinter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pszErrorStr(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get cchErrorStr(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get cchNeeded(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u16
  set cbSize(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set Level(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hPrinter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pszErrorStr(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set cchErrorStr(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set cchNeeded(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_UPGRADE_INFO_1 (size: 16)
 */
export interface DRIVER_UPGRADE_INFO_1 {
  /** ptr */
  pPrinterName: Deno.PointerValue | Uint8Array;
  /** ptr */
  pOldDriverDirectory: Deno.PointerValue | Uint8Array;
}

export const sizeofDRIVER_UPGRADE_INFO_1 = 16;

export function allocDRIVER_UPGRADE_INFO_1(data?: Partial<DRIVER_UPGRADE_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_UPGRADE_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pPrinterName !== undefined) view.setBigUint64(0, data.pPrinterName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPrinterName))), true);
  // 0x08: pointer
  if (data?.pOldDriverDirectory !== undefined) view.setBigUint64(8, data.pOldDriverDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOldDriverDirectory))), true);
  return buf;
}

export class DRIVER_UPGRADE_INFO_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pOldDriverDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pOldDriverDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DRIVER_UPGRADE_INFO_2 (size: 104)
 */
export interface DRIVER_UPGRADE_INFO_2 {
  /** ptr */
  pPrinterName: Deno.PointerValue | Uint8Array;
  /** ptr */
  pOldDriverDirectory: Deno.PointerValue | Uint8Array;
  /** u32 */
  cVersion: number;
  /** ptr */
  pName: Deno.PointerValue | Uint8Array;
  /** ptr */
  pEnvironment: Deno.PointerValue | Uint8Array;
  /** ptr */
  pDriverPath: Deno.PointerValue | Uint8Array;
  /** ptr */
  pDataFile: Deno.PointerValue | Uint8Array;
  /** ptr */
  pConfigFile: Deno.PointerValue | Uint8Array;
  /** ptr */
  pHelpFile: Deno.PointerValue | Uint8Array;
  /** ptr */
  pDependentFiles: Deno.PointerValue | Uint8Array;
  /** ptr */
  pMonitorName: Deno.PointerValue | Uint8Array;
  /** ptr */
  pDefaultDataType: Deno.PointerValue | Uint8Array;
  /** ptr */
  pszzPreviousNames: Deno.PointerValue | Uint8Array;
}

export const sizeofDRIVER_UPGRADE_INFO_2 = 104;

export function allocDRIVER_UPGRADE_INFO_2(data?: Partial<DRIVER_UPGRADE_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofDRIVER_UPGRADE_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pPrinterName !== undefined) view.setBigUint64(0, data.pPrinterName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPrinterName))), true);
  // 0x08: pointer
  if (data?.pOldDriverDirectory !== undefined) view.setBigUint64(8, data.pOldDriverDirectory === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOldDriverDirectory))), true);
  // 0x10: u32
  if (data?.cVersion !== undefined) view.setUint32(16, Number(data.cVersion), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pName !== undefined) view.setBigUint64(24, data.pName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pName))), true);
  // 0x20: pointer
  if (data?.pEnvironment !== undefined) view.setBigUint64(32, data.pEnvironment === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pEnvironment))), true);
  // 0x28: pointer
  if (data?.pDriverPath !== undefined) view.setBigUint64(40, data.pDriverPath === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDriverPath))), true);
  // 0x30: pointer
  if (data?.pDataFile !== undefined) view.setBigUint64(48, data.pDataFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDataFile))), true);
  // 0x38: pointer
  if (data?.pConfigFile !== undefined) view.setBigUint64(56, data.pConfigFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pConfigFile))), true);
  // 0x40: pointer
  if (data?.pHelpFile !== undefined) view.setBigUint64(64, data.pHelpFile === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pHelpFile))), true);
  // 0x48: pointer
  if (data?.pDependentFiles !== undefined) view.setBigUint64(72, data.pDependentFiles === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDependentFiles))), true);
  // 0x50: pointer
  if (data?.pMonitorName !== undefined) view.setBigUint64(80, data.pMonitorName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMonitorName))), true);
  // 0x58: pointer
  if (data?.pDefaultDataType !== undefined) view.setBigUint64(88, data.pDefaultDataType === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDefaultDataType))), true);
  // 0x60: pointer
  if (data?.pszzPreviousNames !== undefined) view.setBigUint64(96, data.pszzPreviousNames === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pszzPreviousNames))), true);
  return buf;
}

export class DRIVER_UPGRADE_INFO_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get pOldDriverDirectory(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get cVersion(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  get pName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pEnvironment(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pDriverPath(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get pDataFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pConfigFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pHelpFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: pointer
  get pDependentFiles(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: pointer
  get pMonitorName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x58: pointer
  get pDefaultDataType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: pointer
  get pszzPreviousNames(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(96, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set pOldDriverDirectory(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set cVersion(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4

  // 0x18: pointer
  set pName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pEnvironment(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pDriverPath(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set pDataFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pConfigFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pHelpFile(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: pointer
  set pDependentFiles(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: pointer
  set pMonitorName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x58: pointer
  set pDefaultDataType(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: pointer
  set pszzPreviousNames(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(96, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DOCEVENT_FILTER (size: 24)
 */
export interface DOCEVENT_FILTER {
  /** u32 */
  cbSize: number;
  /** u32 */
  cElementsAllocated: number;
  /** u32 */
  cElementsNeeded: number;
  /** u32 */
  cElementsReturned: number;
  /** array */
  aDocEventCall: Deno.PointerValue;
}

export const sizeofDOCEVENT_FILTER = 24;

export function allocDOCEVENT_FILTER(data?: Partial<DOCEVENT_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofDOCEVENT_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.cElementsAllocated !== undefined) view.setUint32(4, Number(data.cElementsAllocated), true);
  // 0x08: u32
  if (data?.cElementsNeeded !== undefined) view.setUint32(8, Number(data.cElementsNeeded), true);
  // 0x0c: u32
  if (data?.cElementsReturned !== undefined) view.setUint32(12, Number(data.cElementsReturned), true);
  // 0x10: pointer
  if (data?.aDocEventCall !== undefined) view.setBigUint64(16, data.aDocEventCall === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.aDocEventCall))), true);
  return buf;
}

export class DOCEVENT_FILTERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cElementsAllocated(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get cElementsNeeded(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get cElementsReturned(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: pointer
  get aDocEventCall(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cElementsAllocated(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set cElementsNeeded(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set cElementsReturned(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: pointer
  set aDocEventCall(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type BOOL = number;

/**
 * Windows.Win32.Graphics.Printing.DOCEVENT_CREATEDCPRE (size: 32)
 */
export interface DOCEVENT_CREATEDCPRE {
  /** Windows.Win32.Foundation.PWSTR */
  pszDriver: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pszDevice: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pdm: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  bIC: boolean;
}

export const sizeofDOCEVENT_CREATEDCPRE = 32;

export function allocDOCEVENT_CREATEDCPRE(data?: Partial<DOCEVENT_CREATEDCPRE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOCEVENT_CREATEDCPRE);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszDriver !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pszDriver);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszDevice !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pszDevice);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: pointer
  if (data?.pdm !== undefined) view.setBigUint64(16, data.pdm === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pdm))), true);
  // 0x18: i32
  if (data?.bIC !== undefined) view.setInt32(24, Number(data.bIC), true);
  // 0x1c: pad4
  return buf;
}

export class DOCEVENT_CREATEDCPREView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszDriver(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszDevice(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pdm(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: i32
  get bIC(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: pad4

  // 0x00: buffer
  set pszDriver(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszDevice(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: pointer
  set pdm(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: i32
  set bIC(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.DOCEVENT_ESCAPE (size: 16)
 */
export interface DOCEVENT_ESCAPE {
  /** i32 */
  iEscape: number;
  /** i32 */
  cjInput: number;
  /** ptr */
  pvInData: Deno.PointerValue | Uint8Array;
}

export const sizeofDOCEVENT_ESCAPE = 16;

export function allocDOCEVENT_ESCAPE(data?: Partial<DOCEVENT_ESCAPE>): Uint8Array {
  const buf = new Uint8Array(sizeofDOCEVENT_ESCAPE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.iEscape !== undefined) view.setInt32(0, Number(data.iEscape), true);
  // 0x04: i32
  if (data?.cjInput !== undefined) view.setInt32(4, Number(data.cjInput), true);
  // 0x08: pointer
  if (data?.pvInData !== undefined) view.setBigUint64(8, data.pvInData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pvInData))), true);
  return buf;
}

export class DOCEVENT_ESCAPEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get iEscape(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get cjInput(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: pointer
  get pvInData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set iEscape(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set cjInput(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: pointer
  set pvInData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_EVENT_ATTRIBUTES_INFO (size: 16)
 */
export interface PRINTER_EVENT_ATTRIBUTES_INFO {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwOldAttributes: number;
  /** u32 */
  dwNewAttributes: number;
}

export const sizeofPRINTER_EVENT_ATTRIBUTES_INFO = 16;

export function allocPRINTER_EVENT_ATTRIBUTES_INFO(data?: Partial<PRINTER_EVENT_ATTRIBUTES_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_EVENT_ATTRIBUTES_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwOldAttributes !== undefined) view.setUint32(4, Number(data.dwOldAttributes), true);
  // 0x08: u32
  if (data?.dwNewAttributes !== undefined) view.setUint32(8, Number(data.dwNewAttributes), true);
  // 0x0c: pad4
  return buf;
}

export class PRINTER_EVENT_ATTRIBUTES_INFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwOldAttributes(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwNewAttributes(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwOldAttributes(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwNewAttributes(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.ATTRIBUTE_INFO_1 (size: 32)
 */
export interface ATTRIBUTE_INFO_1 {
  /** u32 */
  dwJobNumberOfPagesPerSide: number;
  /** u32 */
  dwDrvNumberOfPagesPerSide: number;
  /** u32 */
  dwNupBorderFlags: number;
  /** u32 */
  dwJobPageOrderFlags: number;
  /** u32 */
  dwDrvPageOrderFlags: number;
  /** u32 */
  dwJobNumberOfCopies: number;
  /** u32 */
  dwDrvNumberOfCopies: number;
}

export const sizeofATTRIBUTE_INFO_1 = 32;

export function allocATTRIBUTE_INFO_1(data?: Partial<ATTRIBUTE_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofATTRIBUTE_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwJobNumberOfPagesPerSide !== undefined) view.setUint32(0, Number(data.dwJobNumberOfPagesPerSide), true);
  // 0x04: u32
  if (data?.dwDrvNumberOfPagesPerSide !== undefined) view.setUint32(4, Number(data.dwDrvNumberOfPagesPerSide), true);
  // 0x08: u32
  if (data?.dwNupBorderFlags !== undefined) view.setUint32(8, Number(data.dwNupBorderFlags), true);
  // 0x0c: u32
  if (data?.dwJobPageOrderFlags !== undefined) view.setUint32(12, Number(data.dwJobPageOrderFlags), true);
  // 0x10: u32
  if (data?.dwDrvPageOrderFlags !== undefined) view.setUint32(16, Number(data.dwDrvPageOrderFlags), true);
  // 0x14: u32
  if (data?.dwJobNumberOfCopies !== undefined) view.setUint32(20, Number(data.dwJobNumberOfCopies), true);
  // 0x18: u32
  if (data?.dwDrvNumberOfCopies !== undefined) view.setUint32(24, Number(data.dwDrvNumberOfCopies), true);
  // 0x1c: pad4
  return buf;
}

export class ATTRIBUTE_INFO_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwJobNumberOfPagesPerSide(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwDrvNumberOfPagesPerSide(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwNupBorderFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwJobPageOrderFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwDrvPageOrderFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwJobNumberOfCopies(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwDrvNumberOfCopies(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: pad4

  // 0x00: u32
  set dwJobNumberOfPagesPerSide(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwDrvNumberOfPagesPerSide(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwNupBorderFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwJobPageOrderFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwDrvPageOrderFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwJobNumberOfCopies(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwDrvNumberOfCopies(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.ATTRIBUTE_INFO_2 (size: 32)
 */
export interface ATTRIBUTE_INFO_2 {
  /** u32 */
  dwJobNumberOfPagesPerSide: number;
  /** u32 */
  dwDrvNumberOfPagesPerSide: number;
  /** u32 */
  dwNupBorderFlags: number;
  /** u32 */
  dwJobPageOrderFlags: number;
  /** u32 */
  dwDrvPageOrderFlags: number;
  /** u32 */
  dwJobNumberOfCopies: number;
  /** u32 */
  dwDrvNumberOfCopies: number;
  /** u32 */
  dwColorOptimization: number;
}

export const sizeofATTRIBUTE_INFO_2 = 32;

export function allocATTRIBUTE_INFO_2(data?: Partial<ATTRIBUTE_INFO_2>): Uint8Array {
  const buf = new Uint8Array(sizeofATTRIBUTE_INFO_2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwJobNumberOfPagesPerSide !== undefined) view.setUint32(0, Number(data.dwJobNumberOfPagesPerSide), true);
  // 0x04: u32
  if (data?.dwDrvNumberOfPagesPerSide !== undefined) view.setUint32(4, Number(data.dwDrvNumberOfPagesPerSide), true);
  // 0x08: u32
  if (data?.dwNupBorderFlags !== undefined) view.setUint32(8, Number(data.dwNupBorderFlags), true);
  // 0x0c: u32
  if (data?.dwJobPageOrderFlags !== undefined) view.setUint32(12, Number(data.dwJobPageOrderFlags), true);
  // 0x10: u32
  if (data?.dwDrvPageOrderFlags !== undefined) view.setUint32(16, Number(data.dwDrvPageOrderFlags), true);
  // 0x14: u32
  if (data?.dwJobNumberOfCopies !== undefined) view.setUint32(20, Number(data.dwJobNumberOfCopies), true);
  // 0x18: u32
  if (data?.dwDrvNumberOfCopies !== undefined) view.setUint32(24, Number(data.dwDrvNumberOfCopies), true);
  // 0x1c: u32
  if (data?.dwColorOptimization !== undefined) view.setUint32(28, Number(data.dwColorOptimization), true);
  return buf;
}

export class ATTRIBUTE_INFO_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwJobNumberOfPagesPerSide(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwDrvNumberOfPagesPerSide(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwNupBorderFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwJobPageOrderFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwDrvPageOrderFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwJobNumberOfCopies(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwDrvNumberOfCopies(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwColorOptimization(): number {
    return this.view.getUint32(28, true);
  }

  // 0x00: u32
  set dwJobNumberOfPagesPerSide(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwDrvNumberOfPagesPerSide(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwNupBorderFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwJobPageOrderFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwDrvPageOrderFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwJobNumberOfCopies(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwDrvNumberOfCopies(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwColorOptimization(value: number) {
    this.view.setUint32(28, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.ATTRIBUTE_INFO_3 (size: 40)
 */
export interface ATTRIBUTE_INFO_3 {
  /** u32 */
  dwJobNumberOfPagesPerSide: number;
  /** u32 */
  dwDrvNumberOfPagesPerSide: number;
  /** u32 */
  dwNupBorderFlags: number;
  /** u32 */
  dwJobPageOrderFlags: number;
  /** u32 */
  dwDrvPageOrderFlags: number;
  /** u32 */
  dwJobNumberOfCopies: number;
  /** u32 */
  dwDrvNumberOfCopies: number;
  /** u32 */
  dwColorOptimization: number;
  /** i16 */
  dmPrintQuality: number;
  /** i16 */
  dmYResolution: number;
}

export const sizeofATTRIBUTE_INFO_3 = 40;

export function allocATTRIBUTE_INFO_3(data?: Partial<ATTRIBUTE_INFO_3>): Uint8Array {
  const buf = new Uint8Array(sizeofATTRIBUTE_INFO_3);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwJobNumberOfPagesPerSide !== undefined) view.setUint32(0, Number(data.dwJobNumberOfPagesPerSide), true);
  // 0x04: u32
  if (data?.dwDrvNumberOfPagesPerSide !== undefined) view.setUint32(4, Number(data.dwDrvNumberOfPagesPerSide), true);
  // 0x08: u32
  if (data?.dwNupBorderFlags !== undefined) view.setUint32(8, Number(data.dwNupBorderFlags), true);
  // 0x0c: u32
  if (data?.dwJobPageOrderFlags !== undefined) view.setUint32(12, Number(data.dwJobPageOrderFlags), true);
  // 0x10: u32
  if (data?.dwDrvPageOrderFlags !== undefined) view.setUint32(16, Number(data.dwDrvPageOrderFlags), true);
  // 0x14: u32
  if (data?.dwJobNumberOfCopies !== undefined) view.setUint32(20, Number(data.dwJobNumberOfCopies), true);
  // 0x18: u32
  if (data?.dwDrvNumberOfCopies !== undefined) view.setUint32(24, Number(data.dwDrvNumberOfCopies), true);
  // 0x1c: u32
  if (data?.dwColorOptimization !== undefined) view.setUint32(28, Number(data.dwColorOptimization), true);
  // 0x20: i16
  if (data?.dmPrintQuality !== undefined) view.setInt16(32, Number(data.dmPrintQuality), true);
  // 0x22: i16
  if (data?.dmYResolution !== undefined) view.setInt16(34, Number(data.dmYResolution), true);
  // 0x24: pad4
  return buf;
}

export class ATTRIBUTE_INFO_3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwJobNumberOfPagesPerSide(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwDrvNumberOfPagesPerSide(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwNupBorderFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwJobPageOrderFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwDrvPageOrderFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwJobNumberOfCopies(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwDrvNumberOfCopies(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwColorOptimization(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i16
  get dmPrintQuality(): number {
    return this.view.getInt16(32, true);
  }

  // 0x22: i16
  get dmYResolution(): number {
    return this.view.getInt16(34, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwJobNumberOfPagesPerSide(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwDrvNumberOfPagesPerSide(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwNupBorderFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwJobPageOrderFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwDrvPageOrderFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwJobNumberOfCopies(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwDrvNumberOfCopies(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwColorOptimization(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i16
  set dmPrintQuality(value: number) {
    this.view.setInt16(32, value, true);
  }

  // 0x22: i16
  set dmYResolution(value: number) {
    this.view.setInt16(34, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Printing.ATTRIBUTE_INFO_4 (size: 56)
 */
export interface ATTRIBUTE_INFO_4 {
  /** u32 */
  dwJobNumberOfPagesPerSide: number;
  /** u32 */
  dwDrvNumberOfPagesPerSide: number;
  /** u32 */
  dwNupBorderFlags: number;
  /** u32 */
  dwJobPageOrderFlags: number;
  /** u32 */
  dwDrvPageOrderFlags: number;
  /** u32 */
  dwJobNumberOfCopies: number;
  /** u32 */
  dwDrvNumberOfCopies: number;
  /** u32 */
  dwColorOptimization: number;
  /** i16 */
  dmPrintQuality: number;
  /** i16 */
  dmYResolution: number;
  /** u32 */
  dwDuplexFlags: number;
  /** u32 */
  dwNupDirection: number;
  /** u32 */
  dwBookletFlags: number;
  /** u32 */
  dwScalingPercentX: number;
  /** u32 */
  dwScalingPercentY: number;
}

export const sizeofATTRIBUTE_INFO_4 = 56;

export function allocATTRIBUTE_INFO_4(data?: Partial<ATTRIBUTE_INFO_4>): Uint8Array {
  const buf = new Uint8Array(sizeofATTRIBUTE_INFO_4);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwJobNumberOfPagesPerSide !== undefined) view.setUint32(0, Number(data.dwJobNumberOfPagesPerSide), true);
  // 0x04: u32
  if (data?.dwDrvNumberOfPagesPerSide !== undefined) view.setUint32(4, Number(data.dwDrvNumberOfPagesPerSide), true);
  // 0x08: u32
  if (data?.dwNupBorderFlags !== undefined) view.setUint32(8, Number(data.dwNupBorderFlags), true);
  // 0x0c: u32
  if (data?.dwJobPageOrderFlags !== undefined) view.setUint32(12, Number(data.dwJobPageOrderFlags), true);
  // 0x10: u32
  if (data?.dwDrvPageOrderFlags !== undefined) view.setUint32(16, Number(data.dwDrvPageOrderFlags), true);
  // 0x14: u32
  if (data?.dwJobNumberOfCopies !== undefined) view.setUint32(20, Number(data.dwJobNumberOfCopies), true);
  // 0x18: u32
  if (data?.dwDrvNumberOfCopies !== undefined) view.setUint32(24, Number(data.dwDrvNumberOfCopies), true);
  // 0x1c: u32
  if (data?.dwColorOptimization !== undefined) view.setUint32(28, Number(data.dwColorOptimization), true);
  // 0x20: i16
  if (data?.dmPrintQuality !== undefined) view.setInt16(32, Number(data.dmPrintQuality), true);
  // 0x22: i16
  if (data?.dmYResolution !== undefined) view.setInt16(34, Number(data.dmYResolution), true);
  // 0x24: u32
  if (data?.dwDuplexFlags !== undefined) view.setUint32(36, Number(data.dwDuplexFlags), true);
  // 0x28: u32
  if (data?.dwNupDirection !== undefined) view.setUint32(40, Number(data.dwNupDirection), true);
  // 0x2c: u32
  if (data?.dwBookletFlags !== undefined) view.setUint32(44, Number(data.dwBookletFlags), true);
  // 0x30: u32
  if (data?.dwScalingPercentX !== undefined) view.setUint32(48, Number(data.dwScalingPercentX), true);
  // 0x34: u32
  if (data?.dwScalingPercentY !== undefined) view.setUint32(52, Number(data.dwScalingPercentY), true);
  return buf;
}

export class ATTRIBUTE_INFO_4View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwJobNumberOfPagesPerSide(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwDrvNumberOfPagesPerSide(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwNupBorderFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwJobPageOrderFlags(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwDrvPageOrderFlags(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwJobNumberOfCopies(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get dwDrvNumberOfCopies(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwColorOptimization(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i16
  get dmPrintQuality(): number {
    return this.view.getInt16(32, true);
  }

  // 0x22: i16
  get dmYResolution(): number {
    return this.view.getInt16(34, true);
  }

  // 0x24: u32
  get dwDuplexFlags(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwNupDirection(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u32
  get dwBookletFlags(): number {
    return this.view.getUint32(44, true);
  }

  // 0x30: u32
  get dwScalingPercentX(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u32
  get dwScalingPercentY(): number {
    return this.view.getUint32(52, true);
  }

  // 0x00: u32
  set dwJobNumberOfPagesPerSide(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwDrvNumberOfPagesPerSide(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwNupBorderFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwJobPageOrderFlags(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwDrvPageOrderFlags(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwJobNumberOfCopies(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set dwDrvNumberOfCopies(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwColorOptimization(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i16
  set dmPrintQuality(value: number) {
    this.view.setInt16(32, value, true);
  }

  // 0x22: i16
  set dmYResolution(value: number) {
    this.view.setInt16(34, value, true);
  }

  // 0x24: u32
  set dwDuplexFlags(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwNupDirection(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u32
  set dwBookletFlags(value: number) {
    this.view.setUint32(44, value, true);
  }

  // 0x30: u32
  set dwScalingPercentX(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u32
  set dwScalingPercentY(value: number) {
    this.view.setUint32(52, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PSCRIPT5_PRIVATE_DEVMODE (size: 16)
 */
export interface PSCRIPT5_PRIVATE_DEVMODE {
  /** array */
  wReserved: Deno.PointerValue;
  /** u16 */
  wSize: number;
}

export const sizeofPSCRIPT5_PRIVATE_DEVMODE = 16;

export function allocPSCRIPT5_PRIVATE_DEVMODE(data?: Partial<PSCRIPT5_PRIVATE_DEVMODE>): Uint8Array {
  const buf = new Uint8Array(sizeofPSCRIPT5_PRIVATE_DEVMODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wReserved !== undefined) view.setBigUint64(0, data.wReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wReserved))), true);
  // 0x08: u16
  if (data?.wSize !== undefined) view.setUint16(8, Number(data.wSize), true);
  // 0x0a: pad6
  return buf;
}

export class PSCRIPT5_PRIVATE_DEVMODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get wSize(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set wReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set wSize(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Graphics.Printing.UNIDRV_PRIVATE_DEVMODE (size: 16)
 */
export interface UNIDRV_PRIVATE_DEVMODE {
  /** array */
  wReserved: Deno.PointerValue;
  /** u16 */
  wSize: number;
}

export const sizeofUNIDRV_PRIVATE_DEVMODE = 16;

export function allocUNIDRV_PRIVATE_DEVMODE(data?: Partial<UNIDRV_PRIVATE_DEVMODE>): Uint8Array {
  const buf = new Uint8Array(sizeofUNIDRV_PRIVATE_DEVMODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wReserved !== undefined) view.setBigUint64(0, data.wReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wReserved))), true);
  // 0x08: u16
  if (data?.wSize !== undefined) view.setUint16(8, Number(data.wSize), true);
  // 0x0a: pad6
  return buf;
}

export class UNIDRV_PRIVATE_DEVMODEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get wSize(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set wReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set wSize(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * Windows.Win32.Graphics.Printing.PUBLISHERINFO (size: 8)
 */
export interface PUBLISHERINFO {
  /** u32 */
  dwMode: number;
  /** u16 */
  wMinoutlinePPEM: number;
  /** u16 */
  wMaxbitmapPPEM: number;
}

export const sizeofPUBLISHERINFO = 8;

export function allocPUBLISHERINFO(data?: Partial<PUBLISHERINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofPUBLISHERINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMode !== undefined) view.setUint32(0, Number(data.dwMode), true);
  // 0x04: u16
  if (data?.wMinoutlinePPEM !== undefined) view.setUint16(4, Number(data.wMinoutlinePPEM), true);
  // 0x06: u16
  if (data?.wMaxbitmapPPEM !== undefined) view.setUint16(6, Number(data.wMaxbitmapPPEM), true);
  return buf;
}

export class PUBLISHERINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMode(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wMinoutlinePPEM(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wMaxbitmapPPEM(): number {
    return this.view.getUint16(6, true);
  }

  // 0x00: u32
  set dwMode(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wMinoutlinePPEM(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wMaxbitmapPPEM(value: number) {
    this.view.setUint16(6, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.OEMDMPARAM (size: 72)
 */
export interface OEMDMPARAM {
  /** u32 */
  cbSize: number;
  /** ptr */
  pdriverobj: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HANDLE */
  hPrinter: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hModule: Uint8Array | Deno.PointerValue;
  /** ptr */
  pPublicDMIn: Deno.PointerValue | Uint8Array;
  /** ptr */
  pPublicDMOut: Deno.PointerValue | Uint8Array;
  /** ptr */
  pOEMDMIn: Deno.PointerValue | Uint8Array;
  /** ptr */
  pOEMDMOut: Deno.PointerValue | Uint8Array;
  /** u32 */
  cbBufSize: number;
}

export const sizeofOEMDMPARAM = 72;

export function allocOEMDMPARAM(data?: Partial<OEMDMPARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofOEMDMPARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pdriverobj !== undefined) view.setBigUint64(8, data.pdriverobj === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pdriverobj))), true);
  // 0x10: pointer
  if (data?.hPrinter !== undefined) view.setBigUint64(16, data.hPrinter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hPrinter))), true);
  // 0x18: pointer
  if (data?.hModule !== undefined) view.setBigUint64(24, data.hModule === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hModule))), true);
  // 0x20: pointer
  if (data?.pPublicDMIn !== undefined) view.setBigUint64(32, data.pPublicDMIn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPublicDMIn))), true);
  // 0x28: pointer
  if (data?.pPublicDMOut !== undefined) view.setBigUint64(40, data.pPublicDMOut === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPublicDMOut))), true);
  // 0x30: pointer
  if (data?.pOEMDMIn !== undefined) view.setBigUint64(48, data.pOEMDMIn === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOEMDMIn))), true);
  // 0x38: pointer
  if (data?.pOEMDMOut !== undefined) view.setBigUint64(56, data.pOEMDMOut === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOEMDMOut))), true);
  // 0x40: u32
  if (data?.cbBufSize !== undefined) view.setUint32(64, Number(data.cbBufSize), true);
  // 0x44: pad4
  return buf;
}

export class OEMDMPARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pdriverobj(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hPrinter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get hModule(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get pPublicDMIn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get pPublicDMOut(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get pOEMDMIn(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pOEMDMOut(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get cbBufSize(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pdriverobj(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hPrinter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set hModule(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set pPublicDMIn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set pPublicDMOut(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set pOEMDMIn(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pOEMDMOut(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set cbBufSize(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4
}

/**
 * Windows.Win32.Graphics.Printing.OEM_DMEXTRAHEADER (size: 16)
 */
export interface OEM_DMEXTRAHEADER {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwSignature: number;
  /** u32 */
  dwVersion: number;
}

export const sizeofOEM_DMEXTRAHEADER = 16;

export function allocOEM_DMEXTRAHEADER(data?: Partial<OEM_DMEXTRAHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofOEM_DMEXTRAHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwSignature !== undefined) view.setUint32(4, Number(data.dwSignature), true);
  // 0x08: u32
  if (data?.dwVersion !== undefined) view.setUint32(8, Number(data.dwVersion), true);
  // 0x0c: pad4
  return buf;
}

export class OEM_DMEXTRAHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwSignature(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwSignature(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.USERDATA (size: 32)
 */
export interface USERDATA {
  /** u32 */
  dwSize: number;
  /** usize */
  dwItemID: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  pKeyWordName: string | null | Uint8Array;
  /** array */
  dwReserved: Deno.PointerValue;
}

export const sizeofUSERDATA = 32;

export function allocUSERDATA(data?: Partial<USERDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofUSERDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: usize
  if (data?.dwItemID !== undefined) view.setBigUint64(8, BigInt(data.dwItemID), true);
  // 0x10: buffer
  if (data?.pKeyWordName !== undefined) {
    (buf as any)._f16 = util.pstrToFfi(data.pKeyWordName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(24, data.dwReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwReserved))), true);
  return buf;
}

export class USERDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: usize
  get dwItemID(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: buffer
  get pKeyWordName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: usize
  set dwItemID(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: buffer
  set pKeyWordName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.SIMULATE_CAPS_1 (size: 24)
 */
export interface SIMULATE_CAPS_1 {
  /** u32 */
  dwLevel: number;
  /** u32 */
  dwPageOrderFlags: number;
  /** u32 */
  dwNumberOfCopies: number;
  /** u32 */
  dwCollate: number;
  /** u32 */
  dwNupOptions: number;
}

export const sizeofSIMULATE_CAPS_1 = 24;

export function allocSIMULATE_CAPS_1(data?: Partial<SIMULATE_CAPS_1>): Uint8Array {
  const buf = new Uint8Array(sizeofSIMULATE_CAPS_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwLevel !== undefined) view.setUint32(0, Number(data.dwLevel), true);
  // 0x04: u32
  if (data?.dwPageOrderFlags !== undefined) view.setUint32(4, Number(data.dwPageOrderFlags), true);
  // 0x08: u32
  if (data?.dwNumberOfCopies !== undefined) view.setUint32(8, Number(data.dwNumberOfCopies), true);
  // 0x0c: u32
  if (data?.dwCollate !== undefined) view.setUint32(12, Number(data.dwCollate), true);
  // 0x10: u32
  if (data?.dwNupOptions !== undefined) view.setUint32(16, Number(data.dwNupOptions), true);
  // 0x14: pad4
  return buf;
}

export class SIMULATE_CAPS_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwLevel(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwPageOrderFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwNumberOfCopies(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwCollate(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get dwNupOptions(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: u32
  set dwLevel(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwPageOrderFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwNumberOfCopies(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwCollate(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set dwNupOptions(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

/**
 * Windows.Win32.Graphics.Printing.OEMUIPROCS (size: 16)
 */
export interface OEMUIPROCS {
  /** Windows.Win32.Graphics.Printing.PFN_DrvGetDriverSetting */
  DrvGetDriverSetting: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Printing.PFN_DrvUpdateUISetting */
  DrvUpdateUISetting: Uint8Array | Deno.PointerValue;
}

export const sizeofOEMUIPROCS = 16;

export function allocOEMUIPROCS(data?: Partial<OEMUIPROCS>): Uint8Array {
  const buf = new Uint8Array(sizeofOEMUIPROCS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DrvGetDriverSetting !== undefined) view.setBigUint64(0, data.DrvGetDriverSetting === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DrvGetDriverSetting))), true);
  // 0x08: pointer
  if (data?.DrvUpdateUISetting !== undefined) view.setBigUint64(8, data.DrvUpdateUISetting === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.DrvUpdateUISetting))), true);
  return buf;
}

export class OEMUIPROCSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get DrvGetDriverSetting(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get DrvUpdateUISetting(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set DrvGetDriverSetting(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set DrvUpdateUISetting(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.OEMUIOBJ (size: 16)
 */
export interface OEMUIOBJ {
  /** u32 */
  cbSize: number;
  /** ptr */
  pOemUIProcs: Deno.PointerValue | Uint8Array;
}

export const sizeofOEMUIOBJ = 16;

export function allocOEMUIOBJ(data?: Partial<OEMUIOBJ>): Uint8Array {
  const buf = new Uint8Array(sizeofOEMUIOBJ);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pOemUIProcs !== undefined) view.setBigUint64(8, data.pOemUIProcs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOemUIProcs))), true);
  return buf;
}

export class OEMUIOBJView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get pOemUIProcs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set pOemUIProcs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.OEMCUIPPARAM (size: 120)
 */
export interface OEMCUIPPARAM {
  /** u32 */
  cbSize: number;
  /** ptr */
  poemuiobj: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HANDLE */
  hPrinter: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HANDLE */
  hModule: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hOEMHeap: Uint8Array | Deno.PointerValue;
  /** ptr */
  pPublicDM: Deno.PointerValue | Uint8Array;
  /** ptr */
  pOEMDM: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  pDrvOptItems: Deno.PointerValue | Uint8Array;
  /** u32 */
  cDrvOptItems: number;
  /** ptr */
  pOEMOptItems: Deno.PointerValue | Uint8Array;
  /** u32 */
  cOEMOptItems: number;
  /** ptr */
  pOEMUserData: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Graphics.Printing.OEMCUIPCALLBACK */
  OEMCUIPCallback: Uint8Array | Deno.PointerValue;
}

export const sizeofOEMCUIPPARAM = 120;

export function allocOEMCUIPPARAM(data?: Partial<OEMCUIPPARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofOEMCUIPPARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.poemuiobj !== undefined) view.setBigUint64(8, data.poemuiobj === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.poemuiobj))), true);
  // 0x10: pointer
  if (data?.hPrinter !== undefined) view.setBigUint64(16, data.hPrinter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hPrinter))), true);
  // 0x18: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pPrinterName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.hModule !== undefined) view.setBigUint64(32, data.hModule === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hModule))), true);
  // 0x28: pointer
  if (data?.hOEMHeap !== undefined) view.setBigUint64(40, data.hOEMHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hOEMHeap))), true);
  // 0x30: pointer
  if (data?.pPublicDM !== undefined) view.setBigUint64(48, data.pPublicDM === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPublicDM))), true);
  // 0x38: pointer
  if (data?.pOEMDM !== undefined) view.setBigUint64(56, data.pOEMDM === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOEMDM))), true);
  // 0x40: u32
  if (data?.dwFlags !== undefined) view.setUint32(64, Number(data.dwFlags), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.pDrvOptItems !== undefined) view.setBigUint64(72, data.pDrvOptItems === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDrvOptItems))), true);
  // 0x50: u32
  if (data?.cDrvOptItems !== undefined) view.setUint32(80, Number(data.cDrvOptItems), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pOEMOptItems !== undefined) view.setBigUint64(88, data.pOEMOptItems === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOEMOptItems))), true);
  // 0x60: u32
  if (data?.cOEMOptItems !== undefined) view.setUint32(96, Number(data.cOEMOptItems), true);
  // 0x64: pad4
  // 0x68: pointer
  if (data?.pOEMUserData !== undefined) view.setBigUint64(104, data.pOEMUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOEMUserData))), true);
  // 0x70: pointer
  if (data?.OEMCUIPCallback !== undefined) view.setBigUint64(112, data.OEMCUIPCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.OEMCUIPCallback))), true);
  return buf;
}

export class OEMCUIPPARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get poemuiobj(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hPrinter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get hModule(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get hOEMHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get pPublicDM(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pOEMDM(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get dwFlags(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  get pDrvOptItems(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: u32
  get cDrvOptItems(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  get pOEMOptItems(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(88, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x60: u32
  get cOEMOptItems(): number {
    return this.view.getUint32(96, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  get pOEMUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(104, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x70: pointer
  get OEMCUIPCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set poemuiobj(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hPrinter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set hModule(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set hOEMHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set pPublicDM(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pOEMDM(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set dwFlags(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: pad4

  // 0x48: pointer
  set pDrvOptItems(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x50: u32
  set cDrvOptItems(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4

  // 0x58: pointer
  set pOEMOptItems(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(88, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x60: u32
  set cOEMOptItems(value: number) {
    this.view.setUint32(96, value, true);
  }

  // 0x64: pad4

  // 0x68: pointer
  set pOEMUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(104, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x70: pointer
  set OEMCUIPCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.OEMUIPSPARAM (size: 88)
 */
export interface OEMUIPSPARAM {
  /** u32 */
  cbSize: number;
  /** ptr */
  poemuiobj: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.HANDLE */
  hPrinter: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.HANDLE */
  hModule: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hOEMHeap: Uint8Array | Deno.PointerValue;
  /** ptr */
  pPublicDM: Deno.PointerValue | Uint8Array;
  /** ptr */
  pOEMDM: Deno.PointerValue | Uint8Array;
  /** ptr */
  pOEMUserData: Deno.PointerValue | Uint8Array;
  /** u32 */
  dwFlags: number;
  /** ptr */
  pOemEntry: Deno.PointerValue | Uint8Array;
}

export const sizeofOEMUIPSPARAM = 88;

export function allocOEMUIPSPARAM(data?: Partial<OEMUIPSPARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofOEMUIPSPARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.poemuiobj !== undefined) view.setBigUint64(8, data.poemuiobj === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.poemuiobj))), true);
  // 0x10: pointer
  if (data?.hPrinter !== undefined) view.setBigUint64(16, data.hPrinter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hPrinter))), true);
  // 0x18: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pPrinterName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: pointer
  if (data?.hModule !== undefined) view.setBigUint64(32, data.hModule === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hModule))), true);
  // 0x28: pointer
  if (data?.hOEMHeap !== undefined) view.setBigUint64(40, data.hOEMHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hOEMHeap))), true);
  // 0x30: pointer
  if (data?.pPublicDM !== undefined) view.setBigUint64(48, data.pPublicDM === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPublicDM))), true);
  // 0x38: pointer
  if (data?.pOEMDM !== undefined) view.setBigUint64(56, data.pOEMDM === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOEMDM))), true);
  // 0x40: pointer
  if (data?.pOEMUserData !== undefined) view.setBigUint64(64, data.pOEMUserData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOEMUserData))), true);
  // 0x48: u32
  if (data?.dwFlags !== undefined) view.setUint32(72, Number(data.dwFlags), true);
  // 0x4c: pad4
  // 0x50: pointer
  if (data?.pOemEntry !== undefined) view.setBigUint64(80, data.pOemEntry === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pOemEntry))), true);
  return buf;
}

export class OEMUIPSPARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get poemuiobj(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hPrinter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get hModule(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get hOEMHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: pointer
  get pPublicDM(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get pOEMDM(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get pOEMUserData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get dwFlags(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  get pOemEntry(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set poemuiobj(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hPrinter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: pointer
  set hModule(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set hOEMHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x30: pointer
  set pPublicDM(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set pOEMDM(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set pOEMUserData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set dwFlags(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: pad4

  // 0x50: pointer
  set pOemEntry(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.CUSTOMSIZEPARAM (size: 16)
 */
export interface CUSTOMSIZEPARAM {
  /** i32 */
  dwOrder: number;
  /** i32 */
  lMinVal: number;
  /** i32 */
  lMaxVal: number;
}

export const sizeofCUSTOMSIZEPARAM = 16;

export function allocCUSTOMSIZEPARAM(data?: Partial<CUSTOMSIZEPARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofCUSTOMSIZEPARAM);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.dwOrder !== undefined) view.setInt32(0, Number(data.dwOrder), true);
  // 0x04: i32
  if (data?.lMinVal !== undefined) view.setInt32(4, Number(data.lMinVal), true);
  // 0x08: i32
  if (data?.lMaxVal !== undefined) view.setInt32(8, Number(data.lMaxVal), true);
  // 0x0c: pad4
  return buf;
}

export class CUSTOMSIZEPARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get dwOrder(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get lMinVal(): number {
    return this.view.getInt32(4, true);
  }

  // 0x08: i32
  get lMaxVal(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: pad4

  // 0x00: i32
  set dwOrder(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set lMinVal(value: number) {
    this.view.setInt32(4, value, true);
  }

  // 0x08: i32
  set lMaxVal(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PRINT_FEATURE_OPTION (size: 16)
 */
export interface PRINT_FEATURE_OPTION {
  /** Windows.Win32.Foundation.PSTR */
  pszFeature: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  pszOption: string | null | Uint8Array;
}

export const sizeofPRINT_FEATURE_OPTION = 16;

export function allocPRINT_FEATURE_OPTION(data?: Partial<PRINT_FEATURE_OPTION>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINT_FEATURE_OPTION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pszFeature !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.pszFeature);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pszOption !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.pszOption);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  return buf;
}

export class PRINT_FEATURE_OPTIONView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pszFeature(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pszOption(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pszFeature(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pszOption(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.UNIFM_HDR (size: 48)
 */
export interface UNIFM_HDR {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  ulDefaultCodepage: number;
  /** i32 */
  lGlyphSetDataRCID: number;
  /** u32 */
  loUnidrvInfo: number;
  /** u32 */
  loIFIMetrics: number;
  /** u32 */
  loExtTextMetric: number;
  /** u32 */
  loWidthTable: number;
  /** u32 */
  loKernPair: number;
  /** array */
  dwReserved: Deno.PointerValue;
}

export const sizeofUNIFM_HDR = 48;

export function allocUNIFM_HDR(data?: Partial<UNIFM_HDR>): Uint8Array {
  const buf = new Uint8Array(sizeofUNIFM_HDR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: u32
  if (data?.ulDefaultCodepage !== undefined) view.setUint32(8, Number(data.ulDefaultCodepage), true);
  // 0x0c: i32
  if (data?.lGlyphSetDataRCID !== undefined) view.setInt32(12, Number(data.lGlyphSetDataRCID), true);
  // 0x10: u32
  if (data?.loUnidrvInfo !== undefined) view.setUint32(16, Number(data.loUnidrvInfo), true);
  // 0x14: u32
  if (data?.loIFIMetrics !== undefined) view.setUint32(20, Number(data.loIFIMetrics), true);
  // 0x18: u32
  if (data?.loExtTextMetric !== undefined) view.setUint32(24, Number(data.loExtTextMetric), true);
  // 0x1c: u32
  if (data?.loWidthTable !== undefined) view.setUint32(28, Number(data.loWidthTable), true);
  // 0x20: u32
  if (data?.loKernPair !== undefined) view.setUint32(32, Number(data.loKernPair), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(40, data.dwReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwReserved))), true);
  return buf;
}

export class UNIFM_HDRView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get ulDefaultCodepage(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get lGlyphSetDataRCID(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get loUnidrvInfo(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get loIFIMetrics(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get loExtTextMetric(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get loWidthTable(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get loKernPair(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set ulDefaultCodepage(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set lGlyphSetDataRCID(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set loUnidrvInfo(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set loIFIMetrics(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set loExtTextMetric(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set loWidthTable(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set loKernPair(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.INVOC (size: 8)
 */
export interface INVOC {
  /** u32 */
  dwCount: number;
  /** u32 */
  loOffset: number;
}

export const sizeofINVOC = 8;

export function allocINVOC(data?: Partial<INVOC>): Uint8Array {
  const buf = new Uint8Array(sizeofINVOC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCount !== undefined) view.setUint32(0, Number(data.dwCount), true);
  // 0x04: u32
  if (data?.loOffset !== undefined) view.setUint32(4, Number(data.loOffset), true);
  return buf;
}

export class INVOCView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCount(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get loOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u32
  set dwCount(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set loOffset(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.UNIDRVINFO (size: 48)
 */
export interface UNIDRVINFO {
  /** u32 */
  dwSize: number;
  /** u32 */
  flGenFlags: number;
  /** u16 */
  wType: number;
  /** u16 */
  fCaps: number;
  /** u16 */
  wXRes: number;
  /** u16 */
  wYRes: number;
  /** i16 */
  sYAdjust: number;
  /** i16 */
  sYMoved: number;
  /** u16 */
  wPrivateData: number;
  /** i16 */
  sShift: number;
  /** Windows.Win32.Graphics.Printing.INVOC */
  SelectFont: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Printing.INVOC */
  UnSelectFont: Uint8Array | Deno.PointerValue;
  /** array */
  wReserved: Deno.PointerValue;
}

export const sizeofUNIDRVINFO = 48;

export function allocUNIDRVINFO(data?: Partial<UNIDRVINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNIDRVINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.flGenFlags !== undefined) view.setUint32(4, Number(data.flGenFlags), true);
  // 0x08: u16
  if (data?.wType !== undefined) view.setUint16(8, Number(data.wType), true);
  // 0x0a: u16
  if (data?.fCaps !== undefined) view.setUint16(10, Number(data.fCaps), true);
  // 0x0c: u16
  if (data?.wXRes !== undefined) view.setUint16(12, Number(data.wXRes), true);
  // 0x0e: u16
  if (data?.wYRes !== undefined) view.setUint16(14, Number(data.wYRes), true);
  // 0x10: i16
  if (data?.sYAdjust !== undefined) view.setInt16(16, Number(data.sYAdjust), true);
  // 0x12: i16
  if (data?.sYMoved !== undefined) view.setInt16(18, Number(data.sYMoved), true);
  // 0x14: u16
  if (data?.wPrivateData !== undefined) view.setUint16(20, Number(data.wPrivateData), true);
  // 0x16: i16
  if (data?.sShift !== undefined) view.setInt16(22, Number(data.sShift), true);
  // 0x18: pointer
  if (data?.SelectFont !== undefined) view.setBigUint64(24, data.SelectFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SelectFont))), true);
  // 0x20: pointer
  if (data?.UnSelectFont !== undefined) view.setBigUint64(32, data.UnSelectFont === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnSelectFont))), true);
  // 0x28: pointer
  if (data?.wReserved !== undefined) view.setBigUint64(40, data.wReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wReserved))), true);
  return buf;
}

export class UNIDRVINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get flGenFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u16
  get wType(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: u16
  get fCaps(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u16
  get wXRes(): number {
    return this.view.getUint16(12, true);
  }

  // 0x0e: u16
  get wYRes(): number {
    return this.view.getUint16(14, true);
  }

  // 0x10: i16
  get sYAdjust(): number {
    return this.view.getInt16(16, true);
  }

  // 0x12: i16
  get sYMoved(): number {
    return this.view.getInt16(18, true);
  }

  // 0x14: u16
  get wPrivateData(): number {
    return this.view.getUint16(20, true);
  }

  // 0x16: i16
  get sShift(): number {
    return this.view.getInt16(22, true);
  }

  // 0x18: pointer
  get SelectFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get UnSelectFont(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: pointer
  get wReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set flGenFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u16
  set wType(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: u16
  set fCaps(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u16
  set wXRes(value: number) {
    this.view.setUint16(12, value, true);
  }

  // 0x0e: u16
  set wYRes(value: number) {
    this.view.setUint16(14, value, true);
  }

  // 0x10: i16
  set sYAdjust(value: number) {
    this.view.setInt16(16, value, true);
  }

  // 0x12: i16
  set sYMoved(value: number) {
    this.view.setInt16(18, value, true);
  }

  // 0x14: u16
  set wPrivateData(value: number) {
    this.view.setUint16(20, value, true);
  }

  // 0x16: i16
  set sShift(value: number) {
    this.view.setInt16(22, value, true);
  }

  // 0x18: pointer
  set SelectFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set UnSelectFont(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: pointer
  set wReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Foundation.POINTL (size: 8)
 */
export interface POINTL {
  /** i32 */
  x: number;
  /** i32 */
  y: number;
}

export const sizeofPOINTL = 8;

export function allocPOINTL(data?: Partial<POINTL>): Uint8Array {
  const buf = new Uint8Array(sizeofPOINTL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.x !== undefined) view.setInt32(0, Number(data.x), true);
  // 0x04: i32
  if (data?.y !== undefined) view.setInt32(4, Number(data.y), true);
  return buf;
}

export class POINTLView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get x(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: i32
  get y(): number {
    return this.view.getInt32(4, true);
  }

  // 0x00: i32
  set x(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: i32
  set y(value: number) {
    this.view.setInt32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Gdi.PANOSE (size: 40)
 */
export interface PANOSE {
  /** Windows.Win32.Graphics.Gdi.PAN_FAMILY_TYPE */
  bFamilyType: PAN_FAMILY_TYPE;
  /** Windows.Win32.Graphics.Gdi.PAN_SERIF_STYLE */
  bSerifStyle: PAN_SERIF_STYLE;
  /** Windows.Win32.Graphics.Gdi.PAN_WEIGHT */
  bWeight: PAN_WEIGHT;
  /** Windows.Win32.Graphics.Gdi.PAN_PROPORTION */
  bProportion: PAN_PROPORTION;
  /** Windows.Win32.Graphics.Gdi.PAN_CONTRAST */
  bContrast: PAN_CONTRAST;
  /** Windows.Win32.Graphics.Gdi.PAN_STROKE_VARIATION */
  bStrokeVariation: PAN_STROKE_VARIATION;
  /** Windows.Win32.Graphics.Gdi.PAN_ARM_STYLE */
  bArmStyle: PAN_ARM_STYLE;
  /** Windows.Win32.Graphics.Gdi.PAN_LETT_FORM */
  bLetterform: PAN_LETT_FORM;
  /** Windows.Win32.Graphics.Gdi.PAN_MIDLINE */
  bMidline: PAN_MIDLINE;
  /** Windows.Win32.Graphics.Gdi.PAN_XHEIGHT */
  bXHeight: PAN_XHEIGHT;
}

export const sizeofPANOSE = 40;

export function allocPANOSE(data?: Partial<PANOSE>): Uint8Array {
  const buf = new Uint8Array(sizeofPANOSE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.bFamilyType !== undefined) view.setUint32(0, Number(data.bFamilyType), true);
  // 0x04: u32
  if (data?.bSerifStyle !== undefined) view.setUint32(4, Number(data.bSerifStyle), true);
  // 0x08: u32
  if (data?.bWeight !== undefined) view.setUint32(8, Number(data.bWeight), true);
  // 0x0c: u32
  if (data?.bProportion !== undefined) view.setUint32(12, Number(data.bProportion), true);
  // 0x10: u32
  if (data?.bContrast !== undefined) view.setUint32(16, Number(data.bContrast), true);
  // 0x14: u32
  if (data?.bStrokeVariation !== undefined) view.setUint32(20, Number(data.bStrokeVariation), true);
  // 0x18: u32
  if (data?.bArmStyle !== undefined) view.setUint32(24, Number(data.bArmStyle), true);
  // 0x1c: u32
  if (data?.bLetterform !== undefined) view.setUint32(28, Number(data.bLetterform), true);
  // 0x20: u32
  if (data?.bMidline !== undefined) view.setUint32(32, Number(data.bMidline), true);
  // 0x24: u32
  if (data?.bXHeight !== undefined) view.setUint32(36, Number(data.bXHeight), true);
  return buf;
}

export class PANOSEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get bFamilyType(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get bSerifStyle(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get bWeight(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get bProportion(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get bContrast(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get bStrokeVariation(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get bArmStyle(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get bLetterform(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get bMidline(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get bXHeight(): number {
    return this.view.getUint32(36, true);
  }

  // 0x00: u32
  set bFamilyType(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set bSerifStyle(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set bWeight(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set bProportion(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set bContrast(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set bStrokeVariation(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set bArmStyle(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set bLetterform(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set bMidline(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set bXHeight(value: number) {
    this.view.setUint32(36, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTIFI32 (size: 200)
 */
export interface PRINTIFI32 {
  /** u32 */
  cjThis: number;
  /** u32 */
  cjIfiExtra: number;
  /** i32 */
  dpwszFamilyName: number;
  /** i32 */
  dpwszStyleName: number;
  /** i32 */
  dpwszFaceName: number;
  /** i32 */
  dpwszUniqueName: number;
  /** i32 */
  dpFontSim: number;
  /** i32 */
  lEmbedId: number;
  /** i32 */
  lItalicAngle: number;
  /** i32 */
  lCharBias: number;
  /** i32 */
  dpCharSets: number;
  /** u8 */
  jWinCharSet: number;
  /** u8 */
  jWinPitchAndFamily: number;
  /** u16 */
  usWinWeight: number;
  /** u32 */
  flInfo: number;
  /** u16 */
  fsSelection: number;
  /** u16 */
  fsType: number;
  /** i16 */
  fwdUnitsPerEm: number;
  /** i16 */
  fwdLowestPPEm: number;
  /** i16 */
  fwdWinAscender: number;
  /** i16 */
  fwdWinDescender: number;
  /** i16 */
  fwdMacAscender: number;
  /** i16 */
  fwdMacDescender: number;
  /** i16 */
  fwdMacLineGap: number;
  /** i16 */
  fwdTypoAscender: number;
  /** i16 */
  fwdTypoDescender: number;
  /** i16 */
  fwdTypoLineGap: number;
  /** i16 */
  fwdAveCharWidth: number;
  /** i16 */
  fwdMaxCharInc: number;
  /** i16 */
  fwdCapHeight: number;
  /** i16 */
  fwdXHeight: number;
  /** i16 */
  fwdSubscriptXSize: number;
  /** i16 */
  fwdSubscriptYSize: number;
  /** i16 */
  fwdSubscriptXOffset: number;
  /** i16 */
  fwdSubscriptYOffset: number;
  /** i16 */
  fwdSuperscriptXSize: number;
  /** i16 */
  fwdSuperscriptYSize: number;
  /** i16 */
  fwdSuperscriptXOffset: number;
  /** i16 */
  fwdSuperscriptYOffset: number;
  /** i16 */
  fwdUnderscoreSize: number;
  /** i16 */
  fwdUnderscorePosition: number;
  /** i16 */
  fwdStrikeoutSize: number;
  /** i16 */
  fwdStrikeoutPosition: number;
  /** u8 */
  chFirstChar: number;
  /** u8 */
  chLastChar: number;
  /** u8 */
  chDefaultChar: number;
  /** u8 */
  chBreakChar: number;
  /** char */
  wcFirstChar: Uint8Array | Deno.PointerValue;
  /** char */
  wcLastChar: Uint8Array | Deno.PointerValue;
  /** char */
  wcDefaultChar: Uint8Array | Deno.PointerValue;
  /** char */
  wcBreakChar: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINTL */
  ptlBaseline: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINTL */
  ptlAspect: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.POINTL */
  ptlCaret: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.RECTL */
  rclFontBox: Uint8Array | Deno.PointerValue;
  /** array */
  achVendId: Deno.PointerValue;
  /** u32 */
  cKerningPairs: number;
  /** u32 */
  ulPanoseCulture: number;
  /** Windows.Win32.Graphics.Gdi.PANOSE */
  panose: Uint8Array | Deno.PointerValue;
}

export const sizeofPRINTIFI32 = 200;

export function allocPRINTIFI32(data?: Partial<PRINTIFI32>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTIFI32);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cjThis !== undefined) view.setUint32(0, Number(data.cjThis), true);
  // 0x04: u32
  if (data?.cjIfiExtra !== undefined) view.setUint32(4, Number(data.cjIfiExtra), true);
  // 0x08: i32
  if (data?.dpwszFamilyName !== undefined) view.setInt32(8, Number(data.dpwszFamilyName), true);
  // 0x0c: i32
  if (data?.dpwszStyleName !== undefined) view.setInt32(12, Number(data.dpwszStyleName), true);
  // 0x10: i32
  if (data?.dpwszFaceName !== undefined) view.setInt32(16, Number(data.dpwszFaceName), true);
  // 0x14: i32
  if (data?.dpwszUniqueName !== undefined) view.setInt32(20, Number(data.dpwszUniqueName), true);
  // 0x18: i32
  if (data?.dpFontSim !== undefined) view.setInt32(24, Number(data.dpFontSim), true);
  // 0x1c: i32
  if (data?.lEmbedId !== undefined) view.setInt32(28, Number(data.lEmbedId), true);
  // 0x20: i32
  if (data?.lItalicAngle !== undefined) view.setInt32(32, Number(data.lItalicAngle), true);
  // 0x24: i32
  if (data?.lCharBias !== undefined) view.setInt32(36, Number(data.lCharBias), true);
  // 0x28: i32
  if (data?.dpCharSets !== undefined) view.setInt32(40, Number(data.dpCharSets), true);
  // 0x2c: u8
  if (data?.jWinCharSet !== undefined) view.setUint8(44, Number(data.jWinCharSet));
  // 0x2d: u8
  if (data?.jWinPitchAndFamily !== undefined) view.setUint8(45, Number(data.jWinPitchAndFamily));
  // 0x2e: u16
  if (data?.usWinWeight !== undefined) view.setUint16(46, Number(data.usWinWeight), true);
  // 0x30: u32
  if (data?.flInfo !== undefined) view.setUint32(48, Number(data.flInfo), true);
  // 0x34: u16
  if (data?.fsSelection !== undefined) view.setUint16(52, Number(data.fsSelection), true);
  // 0x36: u16
  if (data?.fsType !== undefined) view.setUint16(54, Number(data.fsType), true);
  // 0x38: i16
  if (data?.fwdUnitsPerEm !== undefined) view.setInt16(56, Number(data.fwdUnitsPerEm), true);
  // 0x3a: i16
  if (data?.fwdLowestPPEm !== undefined) view.setInt16(58, Number(data.fwdLowestPPEm), true);
  // 0x3c: i16
  if (data?.fwdWinAscender !== undefined) view.setInt16(60, Number(data.fwdWinAscender), true);
  // 0x3e: i16
  if (data?.fwdWinDescender !== undefined) view.setInt16(62, Number(data.fwdWinDescender), true);
  // 0x40: i16
  if (data?.fwdMacAscender !== undefined) view.setInt16(64, Number(data.fwdMacAscender), true);
  // 0x42: i16
  if (data?.fwdMacDescender !== undefined) view.setInt16(66, Number(data.fwdMacDescender), true);
  // 0x44: i16
  if (data?.fwdMacLineGap !== undefined) view.setInt16(68, Number(data.fwdMacLineGap), true);
  // 0x46: i16
  if (data?.fwdTypoAscender !== undefined) view.setInt16(70, Number(data.fwdTypoAscender), true);
  // 0x48: i16
  if (data?.fwdTypoDescender !== undefined) view.setInt16(72, Number(data.fwdTypoDescender), true);
  // 0x4a: i16
  if (data?.fwdTypoLineGap !== undefined) view.setInt16(74, Number(data.fwdTypoLineGap), true);
  // 0x4c: i16
  if (data?.fwdAveCharWidth !== undefined) view.setInt16(76, Number(data.fwdAveCharWidth), true);
  // 0x4e: i16
  if (data?.fwdMaxCharInc !== undefined) view.setInt16(78, Number(data.fwdMaxCharInc), true);
  // 0x50: i16
  if (data?.fwdCapHeight !== undefined) view.setInt16(80, Number(data.fwdCapHeight), true);
  // 0x52: i16
  if (data?.fwdXHeight !== undefined) view.setInt16(82, Number(data.fwdXHeight), true);
  // 0x54: i16
  if (data?.fwdSubscriptXSize !== undefined) view.setInt16(84, Number(data.fwdSubscriptXSize), true);
  // 0x56: i16
  if (data?.fwdSubscriptYSize !== undefined) view.setInt16(86, Number(data.fwdSubscriptYSize), true);
  // 0x58: i16
  if (data?.fwdSubscriptXOffset !== undefined) view.setInt16(88, Number(data.fwdSubscriptXOffset), true);
  // 0x5a: i16
  if (data?.fwdSubscriptYOffset !== undefined) view.setInt16(90, Number(data.fwdSubscriptYOffset), true);
  // 0x5c: i16
  if (data?.fwdSuperscriptXSize !== undefined) view.setInt16(92, Number(data.fwdSuperscriptXSize), true);
  // 0x5e: i16
  if (data?.fwdSuperscriptYSize !== undefined) view.setInt16(94, Number(data.fwdSuperscriptYSize), true);
  // 0x60: i16
  if (data?.fwdSuperscriptXOffset !== undefined) view.setInt16(96, Number(data.fwdSuperscriptXOffset), true);
  // 0x62: i16
  if (data?.fwdSuperscriptYOffset !== undefined) view.setInt16(98, Number(data.fwdSuperscriptYOffset), true);
  // 0x64: i16
  if (data?.fwdUnderscoreSize !== undefined) view.setInt16(100, Number(data.fwdUnderscoreSize), true);
  // 0x66: i16
  if (data?.fwdUnderscorePosition !== undefined) view.setInt16(102, Number(data.fwdUnderscorePosition), true);
  // 0x68: i16
  if (data?.fwdStrikeoutSize !== undefined) view.setInt16(104, Number(data.fwdStrikeoutSize), true);
  // 0x6a: i16
  if (data?.fwdStrikeoutPosition !== undefined) view.setInt16(106, Number(data.fwdStrikeoutPosition), true);
  // 0x6c: u8
  if (data?.chFirstChar !== undefined) view.setUint8(108, Number(data.chFirstChar));
  // 0x6d: u8
  if (data?.chLastChar !== undefined) view.setUint8(109, Number(data.chLastChar));
  // 0x6e: u8
  if (data?.chDefaultChar !== undefined) view.setUint8(110, Number(data.chDefaultChar));
  // 0x6f: u8
  if (data?.chBreakChar !== undefined) view.setUint8(111, Number(data.chBreakChar));
  // 0x70: pointer
  if (data?.wcFirstChar !== undefined) view.setBigUint64(112, data.wcFirstChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wcFirstChar))), true);
  // 0x78: pointer
  if (data?.wcLastChar !== undefined) view.setBigUint64(120, data.wcLastChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wcLastChar))), true);
  // 0x80: pointer
  if (data?.wcDefaultChar !== undefined) view.setBigUint64(128, data.wcDefaultChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wcDefaultChar))), true);
  // 0x88: pointer
  if (data?.wcBreakChar !== undefined) view.setBigUint64(136, data.wcBreakChar === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wcBreakChar))), true);
  // 0x90: pointer
  if (data?.ptlBaseline !== undefined) view.setBigUint64(144, data.ptlBaseline === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptlBaseline))), true);
  // 0x98: pointer
  if (data?.ptlAspect !== undefined) view.setBigUint64(152, data.ptlAspect === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptlAspect))), true);
  // 0xa0: pointer
  if (data?.ptlCaret !== undefined) view.setBigUint64(160, data.ptlCaret === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ptlCaret))), true);
  // 0xa8: pointer
  if (data?.rclFontBox !== undefined) view.setBigUint64(168, data.rclFontBox === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.rclFontBox))), true);
  // 0xb0: pointer
  if (data?.achVendId !== undefined) view.setBigUint64(176, data.achVendId === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.achVendId))), true);
  // 0xb8: u32
  if (data?.cKerningPairs !== undefined) view.setUint32(184, Number(data.cKerningPairs), true);
  // 0xbc: u32
  if (data?.ulPanoseCulture !== undefined) view.setUint32(188, Number(data.ulPanoseCulture), true);
  // 0xc0: pointer
  if (data?.panose !== undefined) view.setBigUint64(192, data.panose === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.panose))), true);
  return buf;
}

export class PRINTIFI32View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cjThis(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cjIfiExtra(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: i32
  get dpwszFamilyName(): number {
    return this.view.getInt32(8, true);
  }

  // 0x0c: i32
  get dpwszStyleName(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: i32
  get dpwszFaceName(): number {
    return this.view.getInt32(16, true);
  }

  // 0x14: i32
  get dpwszUniqueName(): number {
    return this.view.getInt32(20, true);
  }

  // 0x18: i32
  get dpFontSim(): number {
    return this.view.getInt32(24, true);
  }

  // 0x1c: i32
  get lEmbedId(): number {
    return this.view.getInt32(28, true);
  }

  // 0x20: i32
  get lItalicAngle(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: i32
  get lCharBias(): number {
    return this.view.getInt32(36, true);
  }

  // 0x28: i32
  get dpCharSets(): number {
    return this.view.getInt32(40, true);
  }

  // 0x2c: u8
  get jWinCharSet(): number {
    return this.view.getUint8(44);
  }

  // 0x2d: u8
  get jWinPitchAndFamily(): number {
    return this.view.getUint8(45);
  }

  // 0x2e: u16
  get usWinWeight(): number {
    return this.view.getUint16(46, true);
  }

  // 0x30: u32
  get flInfo(): number {
    return this.view.getUint32(48, true);
  }

  // 0x34: u16
  get fsSelection(): number {
    return this.view.getUint16(52, true);
  }

  // 0x36: u16
  get fsType(): number {
    return this.view.getUint16(54, true);
  }

  // 0x38: i16
  get fwdUnitsPerEm(): number {
    return this.view.getInt16(56, true);
  }

  // 0x3a: i16
  get fwdLowestPPEm(): number {
    return this.view.getInt16(58, true);
  }

  // 0x3c: i16
  get fwdWinAscender(): number {
    return this.view.getInt16(60, true);
  }

  // 0x3e: i16
  get fwdWinDescender(): number {
    return this.view.getInt16(62, true);
  }

  // 0x40: i16
  get fwdMacAscender(): number {
    return this.view.getInt16(64, true);
  }

  // 0x42: i16
  get fwdMacDescender(): number {
    return this.view.getInt16(66, true);
  }

  // 0x44: i16
  get fwdMacLineGap(): number {
    return this.view.getInt16(68, true);
  }

  // 0x46: i16
  get fwdTypoAscender(): number {
    return this.view.getInt16(70, true);
  }

  // 0x48: i16
  get fwdTypoDescender(): number {
    return this.view.getInt16(72, true);
  }

  // 0x4a: i16
  get fwdTypoLineGap(): number {
    return this.view.getInt16(74, true);
  }

  // 0x4c: i16
  get fwdAveCharWidth(): number {
    return this.view.getInt16(76, true);
  }

  // 0x4e: i16
  get fwdMaxCharInc(): number {
    return this.view.getInt16(78, true);
  }

  // 0x50: i16
  get fwdCapHeight(): number {
    return this.view.getInt16(80, true);
  }

  // 0x52: i16
  get fwdXHeight(): number {
    return this.view.getInt16(82, true);
  }

  // 0x54: i16
  get fwdSubscriptXSize(): number {
    return this.view.getInt16(84, true);
  }

  // 0x56: i16
  get fwdSubscriptYSize(): number {
    return this.view.getInt16(86, true);
  }

  // 0x58: i16
  get fwdSubscriptXOffset(): number {
    return this.view.getInt16(88, true);
  }

  // 0x5a: i16
  get fwdSubscriptYOffset(): number {
    return this.view.getInt16(90, true);
  }

  // 0x5c: i16
  get fwdSuperscriptXSize(): number {
    return this.view.getInt16(92, true);
  }

  // 0x5e: i16
  get fwdSuperscriptYSize(): number {
    return this.view.getInt16(94, true);
  }

  // 0x60: i16
  get fwdSuperscriptXOffset(): number {
    return this.view.getInt16(96, true);
  }

  // 0x62: i16
  get fwdSuperscriptYOffset(): number {
    return this.view.getInt16(98, true);
  }

  // 0x64: i16
  get fwdUnderscoreSize(): number {
    return this.view.getInt16(100, true);
  }

  // 0x66: i16
  get fwdUnderscorePosition(): number {
    return this.view.getInt16(102, true);
  }

  // 0x68: i16
  get fwdStrikeoutSize(): number {
    return this.view.getInt16(104, true);
  }

  // 0x6a: i16
  get fwdStrikeoutPosition(): number {
    return this.view.getInt16(106, true);
  }

  // 0x6c: u8
  get chFirstChar(): number {
    return this.view.getUint8(108);
  }

  // 0x6d: u8
  get chLastChar(): number {
    return this.view.getUint8(109);
  }

  // 0x6e: u8
  get chDefaultChar(): number {
    return this.view.getUint8(110);
  }

  // 0x6f: u8
  get chBreakChar(): number {
    return this.view.getUint8(111);
  }

  // 0x70: pointer
  get wcFirstChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(112, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x78: pointer
  get wcLastChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(120, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x80: pointer
  get wcDefaultChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(128, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x88: pointer
  get wcBreakChar(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(136, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x90: pointer
  get ptlBaseline(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(144, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x98: pointer
  get ptlAspect(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(152, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa0: pointer
  get ptlCaret(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(160, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xa8: pointer
  get rclFontBox(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(168, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb0: pointer
  get achVendId(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(176, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0xb8: u32
  get cKerningPairs(): number {
    return this.view.getUint32(184, true);
  }

  // 0xbc: u32
  get ulPanoseCulture(): number {
    return this.view.getUint32(188, true);
  }

  // 0xc0: pointer
  get panose(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(192, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cjThis(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cjIfiExtra(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: i32
  set dpwszFamilyName(value: number) {
    this.view.setInt32(8, value, true);
  }

  // 0x0c: i32
  set dpwszStyleName(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: i32
  set dpwszFaceName(value: number) {
    this.view.setInt32(16, value, true);
  }

  // 0x14: i32
  set dpwszUniqueName(value: number) {
    this.view.setInt32(20, value, true);
  }

  // 0x18: i32
  set dpFontSim(value: number) {
    this.view.setInt32(24, value, true);
  }

  // 0x1c: i32
  set lEmbedId(value: number) {
    this.view.setInt32(28, value, true);
  }

  // 0x20: i32
  set lItalicAngle(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: i32
  set lCharBias(value: number) {
    this.view.setInt32(36, value, true);
  }

  // 0x28: i32
  set dpCharSets(value: number) {
    this.view.setInt32(40, value, true);
  }

  // 0x2c: u8
  set jWinCharSet(value: number) {
    this.view.setUint8(44, value);
  }

  // 0x2d: u8
  set jWinPitchAndFamily(value: number) {
    this.view.setUint8(45, value);
  }

  // 0x2e: u16
  set usWinWeight(value: number) {
    this.view.setUint16(46, value, true);
  }

  // 0x30: u32
  set flInfo(value: number) {
    this.view.setUint32(48, value, true);
  }

  // 0x34: u16
  set fsSelection(value: number) {
    this.view.setUint16(52, value, true);
  }

  // 0x36: u16
  set fsType(value: number) {
    this.view.setUint16(54, value, true);
  }

  // 0x38: i16
  set fwdUnitsPerEm(value: number) {
    this.view.setInt16(56, value, true);
  }

  // 0x3a: i16
  set fwdLowestPPEm(value: number) {
    this.view.setInt16(58, value, true);
  }

  // 0x3c: i16
  set fwdWinAscender(value: number) {
    this.view.setInt16(60, value, true);
  }

  // 0x3e: i16
  set fwdWinDescender(value: number) {
    this.view.setInt16(62, value, true);
  }

  // 0x40: i16
  set fwdMacAscender(value: number) {
    this.view.setInt16(64, value, true);
  }

  // 0x42: i16
  set fwdMacDescender(value: number) {
    this.view.setInt16(66, value, true);
  }

  // 0x44: i16
  set fwdMacLineGap(value: number) {
    this.view.setInt16(68, value, true);
  }

  // 0x46: i16
  set fwdTypoAscender(value: number) {
    this.view.setInt16(70, value, true);
  }

  // 0x48: i16
  set fwdTypoDescender(value: number) {
    this.view.setInt16(72, value, true);
  }

  // 0x4a: i16
  set fwdTypoLineGap(value: number) {
    this.view.setInt16(74, value, true);
  }

  // 0x4c: i16
  set fwdAveCharWidth(value: number) {
    this.view.setInt16(76, value, true);
  }

  // 0x4e: i16
  set fwdMaxCharInc(value: number) {
    this.view.setInt16(78, value, true);
  }

  // 0x50: i16
  set fwdCapHeight(value: number) {
    this.view.setInt16(80, value, true);
  }

  // 0x52: i16
  set fwdXHeight(value: number) {
    this.view.setInt16(82, value, true);
  }

  // 0x54: i16
  set fwdSubscriptXSize(value: number) {
    this.view.setInt16(84, value, true);
  }

  // 0x56: i16
  set fwdSubscriptYSize(value: number) {
    this.view.setInt16(86, value, true);
  }

  // 0x58: i16
  set fwdSubscriptXOffset(value: number) {
    this.view.setInt16(88, value, true);
  }

  // 0x5a: i16
  set fwdSubscriptYOffset(value: number) {
    this.view.setInt16(90, value, true);
  }

  // 0x5c: i16
  set fwdSuperscriptXSize(value: number) {
    this.view.setInt16(92, value, true);
  }

  // 0x5e: i16
  set fwdSuperscriptYSize(value: number) {
    this.view.setInt16(94, value, true);
  }

  // 0x60: i16
  set fwdSuperscriptXOffset(value: number) {
    this.view.setInt16(96, value, true);
  }

  // 0x62: i16
  set fwdSuperscriptYOffset(value: number) {
    this.view.setInt16(98, value, true);
  }

  // 0x64: i16
  set fwdUnderscoreSize(value: number) {
    this.view.setInt16(100, value, true);
  }

  // 0x66: i16
  set fwdUnderscorePosition(value: number) {
    this.view.setInt16(102, value, true);
  }

  // 0x68: i16
  set fwdStrikeoutSize(value: number) {
    this.view.setInt16(104, value, true);
  }

  // 0x6a: i16
  set fwdStrikeoutPosition(value: number) {
    this.view.setInt16(106, value, true);
  }

  // 0x6c: u8
  set chFirstChar(value: number) {
    this.view.setUint8(108, value);
  }

  // 0x6d: u8
  set chLastChar(value: number) {
    this.view.setUint8(109, value);
  }

  // 0x6e: u8
  set chDefaultChar(value: number) {
    this.view.setUint8(110, value);
  }

  // 0x6f: u8
  set chBreakChar(value: number) {
    this.view.setUint8(111, value);
  }

  // 0x70: pointer
  set wcFirstChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(112, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x78: pointer
  set wcLastChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(120, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x80: pointer
  set wcDefaultChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(128, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x88: pointer
  set wcBreakChar(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(136, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x90: pointer
  set ptlBaseline(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(144, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x98: pointer
  set ptlAspect(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(152, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa0: pointer
  set ptlCaret(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(160, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xa8: pointer
  set rclFontBox(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(168, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb0: pointer
  set achVendId(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(176, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0xb8: u32
  set cKerningPairs(value: number) {
    this.view.setUint32(184, value, true);
  }

  // 0xbc: u32
  set ulPanoseCulture(value: number) {
    this.view.setUint32(188, value, true);
  }

  // 0xc0: pointer
  set panose(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(192, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.EXTTEXTMETRIC (size: 56)
 */
export interface EXTTEXTMETRIC {
  /** i16 */
  emSize: number;
  /** i16 */
  emPointSize: number;
  /** i16 */
  emOrientation: number;
  /** i16 */
  emMasterHeight: number;
  /** i16 */
  emMinScale: number;
  /** i16 */
  emMaxScale: number;
  /** i16 */
  emMasterUnits: number;
  /** i16 */
  emCapHeight: number;
  /** i16 */
  emXHeight: number;
  /** i16 */
  emLowerCaseAscent: number;
  /** i16 */
  emLowerCaseDescent: number;
  /** i16 */
  emSlant: number;
  /** i16 */
  emSuperScript: number;
  /** i16 */
  emSubScript: number;
  /** i16 */
  emSuperScriptSize: number;
  /** i16 */
  emSubScriptSize: number;
  /** i16 */
  emUnderlineOffset: number;
  /** i16 */
  emUnderlineWidth: number;
  /** i16 */
  emDoubleUpperUnderlineOffset: number;
  /** i16 */
  emDoubleLowerUnderlineOffset: number;
  /** i16 */
  emDoubleUpperUnderlineWidth: number;
  /** i16 */
  emDoubleLowerUnderlineWidth: number;
  /** i16 */
  emStrikeOutOffset: number;
  /** i16 */
  emStrikeOutWidth: number;
  /** u16 */
  emKernPairs: number;
  /** u16 */
  emKernTracks: number;
}

export const sizeofEXTTEXTMETRIC = 56;

export function allocEXTTEXTMETRIC(data?: Partial<EXTTEXTMETRIC>): Uint8Array {
  const buf = new Uint8Array(sizeofEXTTEXTMETRIC);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.emSize !== undefined) view.setInt16(0, Number(data.emSize), true);
  // 0x02: i16
  if (data?.emPointSize !== undefined) view.setInt16(2, Number(data.emPointSize), true);
  // 0x04: i16
  if (data?.emOrientation !== undefined) view.setInt16(4, Number(data.emOrientation), true);
  // 0x06: i16
  if (data?.emMasterHeight !== undefined) view.setInt16(6, Number(data.emMasterHeight), true);
  // 0x08: i16
  if (data?.emMinScale !== undefined) view.setInt16(8, Number(data.emMinScale), true);
  // 0x0a: i16
  if (data?.emMaxScale !== undefined) view.setInt16(10, Number(data.emMaxScale), true);
  // 0x0c: i16
  if (data?.emMasterUnits !== undefined) view.setInt16(12, Number(data.emMasterUnits), true);
  // 0x0e: i16
  if (data?.emCapHeight !== undefined) view.setInt16(14, Number(data.emCapHeight), true);
  // 0x10: i16
  if (data?.emXHeight !== undefined) view.setInt16(16, Number(data.emXHeight), true);
  // 0x12: i16
  if (data?.emLowerCaseAscent !== undefined) view.setInt16(18, Number(data.emLowerCaseAscent), true);
  // 0x14: i16
  if (data?.emLowerCaseDescent !== undefined) view.setInt16(20, Number(data.emLowerCaseDescent), true);
  // 0x16: i16
  if (data?.emSlant !== undefined) view.setInt16(22, Number(data.emSlant), true);
  // 0x18: i16
  if (data?.emSuperScript !== undefined) view.setInt16(24, Number(data.emSuperScript), true);
  // 0x1a: i16
  if (data?.emSubScript !== undefined) view.setInt16(26, Number(data.emSubScript), true);
  // 0x1c: i16
  if (data?.emSuperScriptSize !== undefined) view.setInt16(28, Number(data.emSuperScriptSize), true);
  // 0x1e: i16
  if (data?.emSubScriptSize !== undefined) view.setInt16(30, Number(data.emSubScriptSize), true);
  // 0x20: i16
  if (data?.emUnderlineOffset !== undefined) view.setInt16(32, Number(data.emUnderlineOffset), true);
  // 0x22: i16
  if (data?.emUnderlineWidth !== undefined) view.setInt16(34, Number(data.emUnderlineWidth), true);
  // 0x24: i16
  if (data?.emDoubleUpperUnderlineOffset !== undefined) view.setInt16(36, Number(data.emDoubleUpperUnderlineOffset), true);
  // 0x26: i16
  if (data?.emDoubleLowerUnderlineOffset !== undefined) view.setInt16(38, Number(data.emDoubleLowerUnderlineOffset), true);
  // 0x28: i16
  if (data?.emDoubleUpperUnderlineWidth !== undefined) view.setInt16(40, Number(data.emDoubleUpperUnderlineWidth), true);
  // 0x2a: i16
  if (data?.emDoubleLowerUnderlineWidth !== undefined) view.setInt16(42, Number(data.emDoubleLowerUnderlineWidth), true);
  // 0x2c: i16
  if (data?.emStrikeOutOffset !== undefined) view.setInt16(44, Number(data.emStrikeOutOffset), true);
  // 0x2e: i16
  if (data?.emStrikeOutWidth !== undefined) view.setInt16(46, Number(data.emStrikeOutWidth), true);
  // 0x30: u16
  if (data?.emKernPairs !== undefined) view.setUint16(48, Number(data.emKernPairs), true);
  // 0x32: u16
  if (data?.emKernTracks !== undefined) view.setUint16(50, Number(data.emKernTracks), true);
  // 0x34: pad4
  return buf;
}

export class EXTTEXTMETRICView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get emSize(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: i16
  get emPointSize(): number {
    return this.view.getInt16(2, true);
  }

  // 0x04: i16
  get emOrientation(): number {
    return this.view.getInt16(4, true);
  }

  // 0x06: i16
  get emMasterHeight(): number {
    return this.view.getInt16(6, true);
  }

  // 0x08: i16
  get emMinScale(): number {
    return this.view.getInt16(8, true);
  }

  // 0x0a: i16
  get emMaxScale(): number {
    return this.view.getInt16(10, true);
  }

  // 0x0c: i16
  get emMasterUnits(): number {
    return this.view.getInt16(12, true);
  }

  // 0x0e: i16
  get emCapHeight(): number {
    return this.view.getInt16(14, true);
  }

  // 0x10: i16
  get emXHeight(): number {
    return this.view.getInt16(16, true);
  }

  // 0x12: i16
  get emLowerCaseAscent(): number {
    return this.view.getInt16(18, true);
  }

  // 0x14: i16
  get emLowerCaseDescent(): number {
    return this.view.getInt16(20, true);
  }

  // 0x16: i16
  get emSlant(): number {
    return this.view.getInt16(22, true);
  }

  // 0x18: i16
  get emSuperScript(): number {
    return this.view.getInt16(24, true);
  }

  // 0x1a: i16
  get emSubScript(): number {
    return this.view.getInt16(26, true);
  }

  // 0x1c: i16
  get emSuperScriptSize(): number {
    return this.view.getInt16(28, true);
  }

  // 0x1e: i16
  get emSubScriptSize(): number {
    return this.view.getInt16(30, true);
  }

  // 0x20: i16
  get emUnderlineOffset(): number {
    return this.view.getInt16(32, true);
  }

  // 0x22: i16
  get emUnderlineWidth(): number {
    return this.view.getInt16(34, true);
  }

  // 0x24: i16
  get emDoubleUpperUnderlineOffset(): number {
    return this.view.getInt16(36, true);
  }

  // 0x26: i16
  get emDoubleLowerUnderlineOffset(): number {
    return this.view.getInt16(38, true);
  }

  // 0x28: i16
  get emDoubleUpperUnderlineWidth(): number {
    return this.view.getInt16(40, true);
  }

  // 0x2a: i16
  get emDoubleLowerUnderlineWidth(): number {
    return this.view.getInt16(42, true);
  }

  // 0x2c: i16
  get emStrikeOutOffset(): number {
    return this.view.getInt16(44, true);
  }

  // 0x2e: i16
  get emStrikeOutWidth(): number {
    return this.view.getInt16(46, true);
  }

  // 0x30: u16
  get emKernPairs(): number {
    return this.view.getUint16(48, true);
  }

  // 0x32: u16
  get emKernTracks(): number {
    return this.view.getUint16(50, true);
  }

  // 0x34: pad4

  // 0x00: i16
  set emSize(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: i16
  set emPointSize(value: number) {
    this.view.setInt16(2, value, true);
  }

  // 0x04: i16
  set emOrientation(value: number) {
    this.view.setInt16(4, value, true);
  }

  // 0x06: i16
  set emMasterHeight(value: number) {
    this.view.setInt16(6, value, true);
  }

  // 0x08: i16
  set emMinScale(value: number) {
    this.view.setInt16(8, value, true);
  }

  // 0x0a: i16
  set emMaxScale(value: number) {
    this.view.setInt16(10, value, true);
  }

  // 0x0c: i16
  set emMasterUnits(value: number) {
    this.view.setInt16(12, value, true);
  }

  // 0x0e: i16
  set emCapHeight(value: number) {
    this.view.setInt16(14, value, true);
  }

  // 0x10: i16
  set emXHeight(value: number) {
    this.view.setInt16(16, value, true);
  }

  // 0x12: i16
  set emLowerCaseAscent(value: number) {
    this.view.setInt16(18, value, true);
  }

  // 0x14: i16
  set emLowerCaseDescent(value: number) {
    this.view.setInt16(20, value, true);
  }

  // 0x16: i16
  set emSlant(value: number) {
    this.view.setInt16(22, value, true);
  }

  // 0x18: i16
  set emSuperScript(value: number) {
    this.view.setInt16(24, value, true);
  }

  // 0x1a: i16
  set emSubScript(value: number) {
    this.view.setInt16(26, value, true);
  }

  // 0x1c: i16
  set emSuperScriptSize(value: number) {
    this.view.setInt16(28, value, true);
  }

  // 0x1e: i16
  set emSubScriptSize(value: number) {
    this.view.setInt16(30, value, true);
  }

  // 0x20: i16
  set emUnderlineOffset(value: number) {
    this.view.setInt16(32, value, true);
  }

  // 0x22: i16
  set emUnderlineWidth(value: number) {
    this.view.setInt16(34, value, true);
  }

  // 0x24: i16
  set emDoubleUpperUnderlineOffset(value: number) {
    this.view.setInt16(36, value, true);
  }

  // 0x26: i16
  set emDoubleLowerUnderlineOffset(value: number) {
    this.view.setInt16(38, value, true);
  }

  // 0x28: i16
  set emDoubleUpperUnderlineWidth(value: number) {
    this.view.setInt16(40, value, true);
  }

  // 0x2a: i16
  set emDoubleLowerUnderlineWidth(value: number) {
    this.view.setInt16(42, value, true);
  }

  // 0x2c: i16
  set emStrikeOutOffset(value: number) {
    this.view.setInt16(44, value, true);
  }

  // 0x2e: i16
  set emStrikeOutWidth(value: number) {
    this.view.setInt16(46, value, true);
  }

  // 0x30: u16
  set emKernPairs(value: number) {
    this.view.setUint16(48, value, true);
  }

  // 0x32: u16
  set emKernTracks(value: number) {
    this.view.setUint16(50, value, true);
  }

  // 0x34: pad4
}

/**
 * Windows.Win32.Graphics.Printing.WIDTHRUN (size: 8)
 */
export interface WIDTHRUN {
  /** u16 */
  wStartGlyph: number;
  /** u16 */
  wGlyphCount: number;
  /** u32 */
  loCharWidthOffset: number;
}

export const sizeofWIDTHRUN = 8;

export function allocWIDTHRUN(data?: Partial<WIDTHRUN>): Uint8Array {
  const buf = new Uint8Array(sizeofWIDTHRUN);
  const view = new DataView(buf.buffer);
  // 0x00: u16
  if (data?.wStartGlyph !== undefined) view.setUint16(0, Number(data.wStartGlyph), true);
  // 0x02: u16
  if (data?.wGlyphCount !== undefined) view.setUint16(2, Number(data.wGlyphCount), true);
  // 0x04: u32
  if (data?.loCharWidthOffset !== undefined) view.setUint32(4, Number(data.loCharWidthOffset), true);
  return buf;
}

export class WIDTHRUNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u16
  get wStartGlyph(): number {
    return this.view.getUint16(0, true);
  }

  // 0x02: u16
  get wGlyphCount(): number {
    return this.view.getUint16(2, true);
  }

  // 0x04: u32
  get loCharWidthOffset(): number {
    return this.view.getUint32(4, true);
  }

  // 0x00: u16
  set wStartGlyph(value: number) {
    this.view.setUint16(0, value, true);
  }

  // 0x02: u16
  set wGlyphCount(value: number) {
    this.view.setUint16(2, value, true);
  }

  // 0x04: u32
  set loCharWidthOffset(value: number) {
    this.view.setUint32(4, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.WIDTHTABLE (size: 16)
 */
export interface WIDTHTABLE {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwRunNum: number;
  /** array */
  WidthRun: Deno.PointerValue;
}

export const sizeofWIDTHTABLE = 16;

export function allocWIDTHTABLE(data?: Partial<WIDTHTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofWIDTHTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwRunNum !== undefined) view.setUint32(4, Number(data.dwRunNum), true);
  // 0x08: pointer
  if (data?.WidthRun !== undefined) view.setBigUint64(8, data.WidthRun === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.WidthRun))), true);
  return buf;
}

export class WIDTHTABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwRunNum(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get WidthRun(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwRunNum(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set WidthRun(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.KERNDATA (size: 16)
 */
export interface KERNDATA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwKernPairNum: number;
  /** array */
  KernPair: Deno.PointerValue;
}

export const sizeofKERNDATA = 16;

export function allocKERNDATA(data?: Partial<KERNDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofKERNDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwKernPairNum !== undefined) view.setUint32(4, Number(data.dwKernPairNum), true);
  // 0x08: pointer
  if (data?.KernPair !== undefined) view.setBigUint64(8, data.KernPair === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.KernPair))), true);
  return buf;
}

export class KERNDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwKernPairNum(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get KernPair(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwKernPairNum(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set KernPair(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.UNI_GLYPHSETDATA (size: 48)
 */
export interface UNI_GLYPHSETDATA {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwFlags: number;
  /** i32 */
  lPredefinedID: number;
  /** u32 */
  dwGlyphCount: number;
  /** u32 */
  dwRunCount: number;
  /** u32 */
  loRunOffset: number;
  /** u32 */
  dwCodePageCount: number;
  /** u32 */
  loCodePageOffset: number;
  /** u32 */
  loMapTableOffset: number;
  /** array */
  dwReserved: Deno.PointerValue;
}

export const sizeofUNI_GLYPHSETDATA = 48;

export function allocUNI_GLYPHSETDATA(data?: Partial<UNI_GLYPHSETDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofUNI_GLYPHSETDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: u32
  if (data?.dwFlags !== undefined) view.setUint32(8, Number(data.dwFlags), true);
  // 0x0c: i32
  if (data?.lPredefinedID !== undefined) view.setInt32(12, Number(data.lPredefinedID), true);
  // 0x10: u32
  if (data?.dwGlyphCount !== undefined) view.setUint32(16, Number(data.dwGlyphCount), true);
  // 0x14: u32
  if (data?.dwRunCount !== undefined) view.setUint32(20, Number(data.dwRunCount), true);
  // 0x18: u32
  if (data?.loRunOffset !== undefined) view.setUint32(24, Number(data.loRunOffset), true);
  // 0x1c: u32
  if (data?.dwCodePageCount !== undefined) view.setUint32(28, Number(data.dwCodePageCount), true);
  // 0x20: u32
  if (data?.loCodePageOffset !== undefined) view.setUint32(32, Number(data.loCodePageOffset), true);
  // 0x24: u32
  if (data?.loMapTableOffset !== undefined) view.setUint32(36, Number(data.loMapTableOffset), true);
  // 0x28: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(40, data.dwReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwReserved))), true);
  return buf;
}

export class UNI_GLYPHSETDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwFlags(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i32
  get lPredefinedID(): number {
    return this.view.getInt32(12, true);
  }

  // 0x10: u32
  get dwGlyphCount(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwRunCount(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get loRunOffset(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwCodePageCount(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get loCodePageOffset(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get loMapTableOffset(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwFlags(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i32
  set lPredefinedID(value: number) {
    this.view.setInt32(12, value, true);
  }

  // 0x10: u32
  set dwGlyphCount(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwRunCount(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set loRunOffset(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwCodePageCount(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set loCodePageOffset(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set loMapTableOffset(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.UNI_CODEPAGEINFO (size: 24)
 */
export interface UNI_CODEPAGEINFO {
  /** u32 */
  dwCodePage: number;
  /** Windows.Win32.Graphics.Printing.INVOC */
  SelectSymbolSet: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Printing.INVOC */
  UnSelectSymbolSet: Uint8Array | Deno.PointerValue;
}

export const sizeofUNI_CODEPAGEINFO = 24;

export function allocUNI_CODEPAGEINFO(data?: Partial<UNI_CODEPAGEINFO>): Uint8Array {
  const buf = new Uint8Array(sizeofUNI_CODEPAGEINFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwCodePage !== undefined) view.setUint32(0, Number(data.dwCodePage), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.SelectSymbolSet !== undefined) view.setBigUint64(8, data.SelectSymbolSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.SelectSymbolSet))), true);
  // 0x10: pointer
  if (data?.UnSelectSymbolSet !== undefined) view.setBigUint64(16, data.UnSelectSymbolSet === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.UnSelectSymbolSet))), true);
  return buf;
}

export class UNI_CODEPAGEINFOView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwCodePage(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get SelectSymbolSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get UnSelectSymbolSet(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwCodePage(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set SelectSymbolSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set UnSelectSymbolSet(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.GLYPHRUN (size: 16)
 */
export interface GLYPHRUN {
  /** char */
  wcLow: Uint8Array | Deno.PointerValue;
  /** u16 */
  wGlyphCount: number;
}

export const sizeofGLYPHRUN = 16;

export function allocGLYPHRUN(data?: Partial<GLYPHRUN>): Uint8Array {
  const buf = new Uint8Array(sizeofGLYPHRUN);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.wcLow !== undefined) view.setBigUint64(0, data.wcLow === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.wcLow))), true);
  // 0x08: u16
  if (data?.wGlyphCount !== undefined) view.setUint16(8, Number(data.wGlyphCount), true);
  // 0x0a: pad6
  return buf;
}

export class GLYPHRUNView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get wcLow(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u16
  get wGlyphCount(): number {
    return this.view.getUint16(8, true);
  }

  // 0x0a: pad6

  // 0x00: pointer
  set wcLow(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u16
  set wGlyphCount(value: number) {
    this.view.setUint16(8, value, true);
  }

  // 0x0a: pad6
}

/**
 * _uCode_e__Union (size: 16)
 */
export interface _uCode_e__Union {
  /** i16 */
  sCode: number;
  /** u8 */
  ubCode: number;
  /** array */
  ubPairs: Deno.PointerValue;
}

export const sizeof_uCode_e__Union = 16;

export function alloc_uCode_e__Union(data?: Partial<_uCode_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_uCode_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: i16
  if (data?.sCode !== undefined) view.setInt16(0, Number(data.sCode), true);
  // 0x02: u8
  if (data?.ubCode !== undefined) view.setUint8(2, Number(data.ubCode));
  // 0x03: pad5
  // 0x08: pointer
  if (data?.ubPairs !== undefined) view.setBigUint64(8, data.ubPairs === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.ubPairs))), true);
  return buf;
}

export class _uCode_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i16
  get sCode(): number {
    return this.view.getInt16(0, true);
  }

  // 0x02: u8
  get ubCode(): number {
    return this.view.getUint8(2);
  }

  // 0x03: pad5

  // 0x08: pointer
  get ubPairs(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i16
  set sCode(value: number) {
    this.view.setInt16(0, value, true);
  }

  // 0x02: u8
  set ubCode(value: number) {
    this.view.setUint8(2, value);
  }

  // 0x03: pad5

  // 0x08: pointer
  set ubPairs(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.TRANSDATA (size: 16)
 */
export interface TRANSDATA {
  /** u8 */
  ubCodePageID: number;
  /** u8 */
  ubType: number;
  /** _uCode_e__Union */
  uCode: Uint8Array | Deno.PointerValue;
}

export const sizeofTRANSDATA = 16;

export function allocTRANSDATA(data?: Partial<TRANSDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofTRANSDATA);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.ubCodePageID !== undefined) view.setUint8(0, Number(data.ubCodePageID));
  // 0x01: u8
  if (data?.ubType !== undefined) view.setUint8(1, Number(data.ubType));
  // 0x02: pad6
  // 0x08: pointer
  if (data?.uCode !== undefined) view.setBigUint64(8, data.uCode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.uCode))), true);
  return buf;
}

export class TRANSDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u8
  get ubCodePageID(): number {
    return this.view.getUint8(0);
  }

  // 0x01: u8
  get ubType(): number {
    return this.view.getUint8(1);
  }

  // 0x02: pad6

  // 0x08: pointer
  get uCode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u8
  set ubCodePageID(value: number) {
    this.view.setUint8(0, value);
  }

  // 0x01: u8
  set ubType(value: number) {
    this.view.setUint8(1, value);
  }

  // 0x02: pad6

  // 0x08: pointer
  set uCode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MAPTABLE (size: 16)
 */
export interface MAPTABLE {
  /** u32 */
  dwSize: number;
  /** u32 */
  dwGlyphNum: number;
  /** array */
  Trans: Deno.PointerValue;
}

export const sizeofMAPTABLE = 16;

export function allocMAPTABLE(data?: Partial<MAPTABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofMAPTABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: u32
  if (data?.dwGlyphNum !== undefined) view.setUint32(4, Number(data.dwGlyphNum), true);
  // 0x08: pointer
  if (data?.Trans !== undefined) view.setBigUint64(8, data.Trans === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Trans))), true);
  return buf;
}

export class MAPTABLEView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwGlyphNum(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get Trans(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwGlyphNum(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set Trans(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.UFF_FILEHEADER (size: 40)
 */
export interface UFF_FILEHEADER {
  /** u32 */
  dwSignature: number;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwSize: number;
  /** u32 */
  nFonts: number;
  /** u32 */
  nGlyphSets: number;
  /** u32 */
  nVarData: number;
  /** u32 */
  offFontDir: number;
  /** u32 */
  dwFlags: number;
  /** array */
  dwReserved: Deno.PointerValue;
}

export const sizeofUFF_FILEHEADER = 40;

export function allocUFF_FILEHEADER(data?: Partial<UFF_FILEHEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofUFF_FILEHEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSignature !== undefined) view.setUint32(0, Number(data.dwSignature), true);
  // 0x04: u32
  if (data?.dwVersion !== undefined) view.setUint32(4, Number(data.dwVersion), true);
  // 0x08: u32
  if (data?.dwSize !== undefined) view.setUint32(8, Number(data.dwSize), true);
  // 0x0c: u32
  if (data?.nFonts !== undefined) view.setUint32(12, Number(data.nFonts), true);
  // 0x10: u32
  if (data?.nGlyphSets !== undefined) view.setUint32(16, Number(data.nGlyphSets), true);
  // 0x14: u32
  if (data?.nVarData !== undefined) view.setUint32(20, Number(data.nVarData), true);
  // 0x18: u32
  if (data?.offFontDir !== undefined) view.setUint32(24, Number(data.offFontDir), true);
  // 0x1c: u32
  if (data?.dwFlags !== undefined) view.setUint32(28, Number(data.dwFlags), true);
  // 0x20: pointer
  if (data?.dwReserved !== undefined) view.setBigUint64(32, data.dwReserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.dwReserved))), true);
  return buf;
}

export class UFF_FILEHEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSignature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwVersion(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get nFonts(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get nGlyphSets(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get nVarData(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get offFontDir(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwFlags(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: pointer
  get dwReserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwSignature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwVersion(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set nFonts(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set nGlyphSets(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set nVarData(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set offFontDir(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwFlags(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: pointer
  set dwReserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.UFF_FONTDIRECTORY (size: 40)
 */
export interface UFF_FONTDIRECTORY {
  /** u32 */
  dwSignature: number;
  /** u16 */
  wSize: number;
  /** u16 */
  wFontID: number;
  /** i16 */
  sGlyphID: number;
  /** u16 */
  wFlags: number;
  /** u32 */
  dwInstallerSig: number;
  /** u32 */
  offFontName: number;
  /** u32 */
  offCartridgeName: number;
  /** u32 */
  offFontData: number;
  /** u32 */
  offGlyphData: number;
  /** u32 */
  offVarData: number;
}

export const sizeofUFF_FONTDIRECTORY = 40;

export function allocUFF_FONTDIRECTORY(data?: Partial<UFF_FONTDIRECTORY>): Uint8Array {
  const buf = new Uint8Array(sizeofUFF_FONTDIRECTORY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSignature !== undefined) view.setUint32(0, Number(data.dwSignature), true);
  // 0x04: u16
  if (data?.wSize !== undefined) view.setUint16(4, Number(data.wSize), true);
  // 0x06: u16
  if (data?.wFontID !== undefined) view.setUint16(6, Number(data.wFontID), true);
  // 0x08: i16
  if (data?.sGlyphID !== undefined) view.setInt16(8, Number(data.sGlyphID), true);
  // 0x0a: u16
  if (data?.wFlags !== undefined) view.setUint16(10, Number(data.wFlags), true);
  // 0x0c: u32
  if (data?.dwInstallerSig !== undefined) view.setUint32(12, Number(data.dwInstallerSig), true);
  // 0x10: u32
  if (data?.offFontName !== undefined) view.setUint32(16, Number(data.offFontName), true);
  // 0x14: u32
  if (data?.offCartridgeName !== undefined) view.setUint32(20, Number(data.offCartridgeName), true);
  // 0x18: u32
  if (data?.offFontData !== undefined) view.setUint32(24, Number(data.offFontData), true);
  // 0x1c: u32
  if (data?.offGlyphData !== undefined) view.setUint32(28, Number(data.offGlyphData), true);
  // 0x20: u32
  if (data?.offVarData !== undefined) view.setUint32(32, Number(data.offVarData), true);
  // 0x24: pad4
  return buf;
}

export class UFF_FONTDIRECTORYView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSignature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wSize(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wFontID(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: i16
  get sGlyphID(): number {
    return this.view.getInt16(8, true);
  }

  // 0x0a: u16
  get wFlags(): number {
    return this.view.getUint16(10, true);
  }

  // 0x0c: u32
  get dwInstallerSig(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get offFontName(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get offCartridgeName(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: u32
  get offFontData(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get offGlyphData(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get offVarData(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set dwSignature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wSize(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wFontID(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: i16
  set sGlyphID(value: number) {
    this.view.setInt16(8, value, true);
  }

  // 0x0a: u16
  set wFlags(value: number) {
    this.view.setUint16(10, value, true);
  }

  // 0x0c: u32
  set dwInstallerSig(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set offFontName(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set offCartridgeName(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: u32
  set offFontData(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set offGlyphData(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set offVarData(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Printing.DATA_HEADER (size: 16)
 */
export interface DATA_HEADER {
  /** u32 */
  dwSignature: number;
  /** u16 */
  wSize: number;
  /** u16 */
  wDataID: number;
  /** u32 */
  dwDataSize: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofDATA_HEADER = 16;

export function allocDATA_HEADER(data?: Partial<DATA_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofDATA_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSignature !== undefined) view.setUint32(0, Number(data.dwSignature), true);
  // 0x04: u16
  if (data?.wSize !== undefined) view.setUint16(4, Number(data.wSize), true);
  // 0x06: u16
  if (data?.wDataID !== undefined) view.setUint16(6, Number(data.wDataID), true);
  // 0x08: u32
  if (data?.dwDataSize !== undefined) view.setUint32(8, Number(data.dwDataSize), true);
  // 0x0c: u32
  if (data?.dwReserved !== undefined) view.setUint32(12, Number(data.dwReserved), true);
  return buf;
}

export class DATA_HEADERView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSignature(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u16
  get wSize(): number {
    return this.view.getUint16(4, true);
  }

  // 0x06: u16
  get wDataID(): number {
    return this.view.getUint16(6, true);
  }

  // 0x08: u32
  get dwDataSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwReserved(): number {
    return this.view.getUint32(12, true);
  }

  // 0x00: u32
  set dwSignature(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u16
  set wSize(value: number) {
    this.view.setUint16(4, value, true);
  }

  // 0x06: u16
  set wDataID(value: number) {
    this.view.setUint16(6, value, true);
  }

  // 0x08: u32
  set dwDataSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwReserved(value: number) {
    this.view.setUint32(12, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.OEMFONTINSTPARAM (size: 48)
 */
export interface OEMFONTINSTPARAM {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HANDLE */
  hPrinter: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hModule: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Foundation.HANDLE */
  hHeap: Uint8Array | Deno.PointerValue;
  /** u32 */
  dwFlags: number;
  /** Windows.Win32.Foundation.PWSTR */
  pFontInstallerName: string | null | Uint8Array | Uint16Array;
}

export const sizeofOEMFONTINSTPARAM = 48;

export function allocOEMFONTINSTPARAM(data?: Partial<OEMFONTINSTPARAM>): Uint8Array {
  const buf = new Uint8Array(sizeofOEMFONTINSTPARAM);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hPrinter !== undefined) view.setBigUint64(8, data.hPrinter === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hPrinter))), true);
  // 0x10: pointer
  if (data?.hModule !== undefined) view.setBigUint64(16, data.hModule === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hModule))), true);
  // 0x18: pointer
  if (data?.hHeap !== undefined) view.setBigUint64(24, data.hHeap === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hHeap))), true);
  // 0x20: u32
  if (data?.dwFlags !== undefined) view.setUint32(32, Number(data.dwFlags), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.pFontInstallerName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pFontInstallerName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class OEMFONTINSTPARAMView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hPrinter(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hModule(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get hHeap(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwFlags(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get pFontInstallerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hPrinter(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hModule(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set hHeap(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: u32
  set dwFlags(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set pFontInstallerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PORT_DATA_1 (size: 88)
 */
export interface PORT_DATA_1 {
  /** array */
  sztPortName: Deno.PointerValue;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwProtocol: number;
  /** u32 */
  cbSize: number;
  /** u32 */
  dwReserved: number;
  /** array */
  sztHostAddress: Deno.PointerValue;
  /** array */
  sztSNMPCommunity: Deno.PointerValue;
  /** u32 */
  dwDoubleSpool: number;
  /** array */
  sztQueue: Deno.PointerValue;
  /** array */
  sztIPAddress: Deno.PointerValue;
  /** array */
  Reserved: Deno.PointerValue;
  /** u32 */
  dwPortNumber: number;
  /** u32 */
  dwSNMPEnabled: number;
  /** u32 */
  dwSNMPDevIndex: number;
}

export const sizeofPORT_DATA_1 = 88;

export function allocPORT_DATA_1(data?: Partial<PORT_DATA_1>): Uint8Array {
  const buf = new Uint8Array(sizeofPORT_DATA_1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sztPortName !== undefined) view.setBigUint64(0, data.sztPortName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sztPortName))), true);
  // 0x08: u32
  if (data?.dwVersion !== undefined) view.setUint32(8, Number(data.dwVersion), true);
  // 0x0c: u32
  if (data?.dwProtocol !== undefined) view.setUint32(12, Number(data.dwProtocol), true);
  // 0x10: u32
  if (data?.cbSize !== undefined) view.setUint32(16, Number(data.cbSize), true);
  // 0x14: u32
  if (data?.dwReserved !== undefined) view.setUint32(20, Number(data.dwReserved), true);
  // 0x18: pointer
  if (data?.sztHostAddress !== undefined) view.setBigUint64(24, data.sztHostAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sztHostAddress))), true);
  // 0x20: pointer
  if (data?.sztSNMPCommunity !== undefined) view.setBigUint64(32, data.sztSNMPCommunity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sztSNMPCommunity))), true);
  // 0x28: u32
  if (data?.dwDoubleSpool !== undefined) view.setUint32(40, Number(data.dwDoubleSpool), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.sztQueue !== undefined) view.setBigUint64(48, data.sztQueue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sztQueue))), true);
  // 0x38: pointer
  if (data?.sztIPAddress !== undefined) view.setBigUint64(56, data.sztIPAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sztIPAddress))), true);
  // 0x40: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(64, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x48: u32
  if (data?.dwPortNumber !== undefined) view.setUint32(72, Number(data.dwPortNumber), true);
  // 0x4c: u32
  if (data?.dwSNMPEnabled !== undefined) view.setUint32(76, Number(data.dwSNMPEnabled), true);
  // 0x50: u32
  if (data?.dwSNMPDevIndex !== undefined) view.setUint32(80, Number(data.dwSNMPDevIndex), true);
  // 0x54: pad4
  return buf;
}

export class PORT_DATA_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sztPortName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwProtocol(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwReserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get sztHostAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get sztSNMPCommunity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwDoubleSpool(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get sztQueue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get sztIPAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: u32
  get dwPortNumber(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwSNMPEnabled(): number {
    return this.view.getUint32(76, true);
  }

  // 0x50: u32
  get dwSNMPDevIndex(): number {
    return this.view.getUint32(80, true);
  }

  // 0x54: pad4

  // 0x00: pointer
  set sztPortName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwProtocol(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwReserved(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set sztHostAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set sztSNMPCommunity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwDoubleSpool(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set sztQueue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set sztIPAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x48: u32
  set dwPortNumber(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwSNMPEnabled(value: number) {
    this.view.setUint32(76, value, true);
  }

  // 0x50: u32
  set dwSNMPDevIndex(value: number) {
    this.view.setUint32(80, value, true);
  }

  // 0x54: pad4
}

/**
 * Windows.Win32.Graphics.Printing.PORT_DATA_2 (size: 80)
 */
export interface PORT_DATA_2 {
  /** array */
  sztPortName: Deno.PointerValue;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwProtocol: number;
  /** u32 */
  cbSize: number;
  /** u32 */
  dwReserved: number;
  /** array */
  sztHostAddress: Deno.PointerValue;
  /** array */
  sztSNMPCommunity: Deno.PointerValue;
  /** u32 */
  dwDoubleSpool: number;
  /** array */
  sztQueue: Deno.PointerValue;
  /** array */
  Reserved: Deno.PointerValue;
  /** u32 */
  dwPortNumber: number;
  /** u32 */
  dwSNMPEnabled: number;
  /** u32 */
  dwSNMPDevIndex: number;
  /** u32 */
  dwPortMonitorMibIndex: number;
}

export const sizeofPORT_DATA_2 = 80;

export function allocPORT_DATA_2(data?: Partial<PORT_DATA_2>): Uint8Array {
  const buf = new Uint8Array(sizeofPORT_DATA_2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.sztPortName !== undefined) view.setBigUint64(0, data.sztPortName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sztPortName))), true);
  // 0x08: u32
  if (data?.dwVersion !== undefined) view.setUint32(8, Number(data.dwVersion), true);
  // 0x0c: u32
  if (data?.dwProtocol !== undefined) view.setUint32(12, Number(data.dwProtocol), true);
  // 0x10: u32
  if (data?.cbSize !== undefined) view.setUint32(16, Number(data.cbSize), true);
  // 0x14: u32
  if (data?.dwReserved !== undefined) view.setUint32(20, Number(data.dwReserved), true);
  // 0x18: pointer
  if (data?.sztHostAddress !== undefined) view.setBigUint64(24, data.sztHostAddress === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sztHostAddress))), true);
  // 0x20: pointer
  if (data?.sztSNMPCommunity !== undefined) view.setBigUint64(32, data.sztSNMPCommunity === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sztSNMPCommunity))), true);
  // 0x28: u32
  if (data?.dwDoubleSpool !== undefined) view.setUint32(40, Number(data.dwDoubleSpool), true);
  // 0x2c: pad4
  // 0x30: pointer
  if (data?.sztQueue !== undefined) view.setBigUint64(48, data.sztQueue === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.sztQueue))), true);
  // 0x38: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(56, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x40: u32
  if (data?.dwPortNumber !== undefined) view.setUint32(64, Number(data.dwPortNumber), true);
  // 0x44: u32
  if (data?.dwSNMPEnabled !== undefined) view.setUint32(68, Number(data.dwSNMPEnabled), true);
  // 0x48: u32
  if (data?.dwSNMPDevIndex !== undefined) view.setUint32(72, Number(data.dwSNMPDevIndex), true);
  // 0x4c: u32
  if (data?.dwPortMonitorMibIndex !== undefined) view.setUint32(76, Number(data.dwPortMonitorMibIndex), true);
  return buf;
}

export class PORT_DATA_2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get sztPortName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: u32
  get dwProtocol(): number {
    return this.view.getUint32(12, true);
  }

  // 0x10: u32
  get cbSize(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwReserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x18: pointer
  get sztHostAddress(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get sztSNMPCommunity(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: u32
  get dwDoubleSpool(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  get sztQueue(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x38: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(56, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x40: u32
  get dwPortNumber(): number {
    return this.view.getUint32(64, true);
  }

  // 0x44: u32
  get dwSNMPEnabled(): number {
    return this.view.getUint32(68, true);
  }

  // 0x48: u32
  get dwSNMPDevIndex(): number {
    return this.view.getUint32(72, true);
  }

  // 0x4c: u32
  get dwPortMonitorMibIndex(): number {
    return this.view.getUint32(76, true);
  }

  // 0x00: pointer
  set sztPortName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: u32
  set dwProtocol(value: number) {
    this.view.setUint32(12, value, true);
  }

  // 0x10: u32
  set cbSize(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwReserved(value: number) {
    this.view.setUint32(20, value, true);
  }

  // 0x18: pointer
  set sztHostAddress(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set sztSNMPCommunity(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x28: u32
  set dwDoubleSpool(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: pad4

  // 0x30: pointer
  set sztQueue(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x38: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(56, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x40: u32
  set dwPortNumber(value: number) {
    this.view.setUint32(64, value, true);
  }

  // 0x44: u32
  set dwSNMPEnabled(value: number) {
    this.view.setUint32(68, value, true);
  }

  // 0x48: u32
  set dwSNMPDevIndex(value: number) {
    this.view.setUint32(72, value, true);
  }

  // 0x4c: u32
  set dwPortMonitorMibIndex(value: number) {
    this.view.setUint32(76, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PORT_DATA_LIST_1 (size: 16)
 */
export interface PORT_DATA_LIST_1 {
  /** u32 */
  dwVersion: number;
  /** u32 */
  cPortData: number;
  /** array */
  pPortData: Deno.PointerValue;
}

export const sizeofPORT_DATA_LIST_1 = 16;

export function allocPORT_DATA_LIST_1(data?: Partial<PORT_DATA_LIST_1>): Uint8Array {
  const buf = new Uint8Array(sizeofPORT_DATA_LIST_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwVersion !== undefined) view.setUint32(0, Number(data.dwVersion), true);
  // 0x04: u32
  if (data?.cPortData !== undefined) view.setUint32(4, Number(data.cPortData), true);
  // 0x08: pointer
  if (data?.pPortData !== undefined) view.setBigUint64(8, data.pPortData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pPortData))), true);
  return buf;
}

export class PORT_DATA_LIST_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwVersion(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get cPortData(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pPortData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwVersion(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set cPortData(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pPortData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.DELETE_PORT_DATA_1 (size: 24)
 */
export interface DELETE_PORT_DATA_1 {
  /** array */
  psztPortName: Deno.PointerValue;
  /** array */
  Reserved: Deno.PointerValue;
  /** u32 */
  dwVersion: number;
  /** u32 */
  dwReserved: number;
}

export const sizeofDELETE_PORT_DATA_1 = 24;

export function allocDELETE_PORT_DATA_1(data?: Partial<DELETE_PORT_DATA_1>): Uint8Array {
  const buf = new Uint8Array(sizeofDELETE_PORT_DATA_1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.psztPortName !== undefined) view.setBigUint64(0, data.psztPortName === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.psztPortName))), true);
  // 0x08: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(8, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x10: u32
  if (data?.dwVersion !== undefined) view.setUint32(16, Number(data.dwVersion), true);
  // 0x14: u32
  if (data?.dwReserved !== undefined) view.setUint32(20, Number(data.dwReserved), true);
  return buf;
}

export class DELETE_PORT_DATA_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get psztPortName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: u32
  get dwVersion(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: u32
  get dwReserved(): number {
    return this.view.getUint32(20, true);
  }

  // 0x00: pointer
  set psztPortName(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: u32
  set dwVersion(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: u32
  set dwReserved(value: number) {
    this.view.setUint32(20, value, true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.CONFIG_INFO_DATA_1 (size: 16)
 */
export interface CONFIG_INFO_DATA_1 {
  /** array */
  Reserved: Deno.PointerValue;
  /** u32 */
  dwVersion: number;
}

export const sizeofCONFIG_INFO_DATA_1 = 16;

export function allocCONFIG_INFO_DATA_1(data?: Partial<CONFIG_INFO_DATA_1>): Uint8Array {
  const buf = new Uint8Array(sizeofCONFIG_INFO_DATA_1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Reserved !== undefined) view.setBigUint64(0, data.Reserved === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Reserved))), true);
  // 0x08: u32
  if (data?.dwVersion !== undefined) view.setUint32(8, Number(data.dwVersion), true);
  // 0x0c: pad4
  return buf;
}

export class CONFIG_INFO_DATA_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Reserved(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: u32
  get dwVersion(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: pointer
  set Reserved(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: u32
  set dwVersion(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.BranchOfficeJobDataPrinted (size: 64)
 */
export interface BranchOfficeJobDataPrinted {
  /** u32 */
  Status: number;
  /** Windows.Win32.Foundation.PWSTR */
  pDocumentName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pMachineName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPortName: string | null | Uint8Array | Uint16Array;
  /** i64 */
  Size: Deno.PointerValue;
  /** u32 */
  TotalPages: number;
}

export const sizeofBranchOfficeJobDataPrinted = 64;

export function allocBranchOfficeJobDataPrinted(data?: Partial<BranchOfficeJobDataPrinted>): Uint8Array {
  const buf = new Uint8Array(sizeofBranchOfficeJobDataPrinted);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Status !== undefined) view.setUint32(0, Number(data.Status), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pDocumentName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pDocumentName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pUserName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pMachineName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pMachineName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pPrinterName);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: buffer
  if (data?.pPortName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pPortName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: i64
  if (data?.Size !== undefined) view.setBigInt64(48, BigInt(data.Size), true);
  // 0x38: u32
  if (data?.TotalPages !== undefined) view.setUint32(56, Number(data.TotalPages), true);
  // 0x3c: pad4
  return buf;
}

export class BranchOfficeJobDataPrintedView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Status(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pDocumentName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: buffer
  get pPortName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: i64
  get Size(): Deno.PointerValue {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: u32
  get TotalPages(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: pad4

  // 0x00: u32
  set Status(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pDocumentName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: buffer
  set pPortName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: i64
  set Size(value: Deno.PointerValue) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: u32
  set TotalPages(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.BranchOfficeJobDataError (size: 88)
 */
export interface BranchOfficeJobDataError {
  /** u32 */
  LastError: number;
  /** Windows.Win32.Foundation.PWSTR */
  pDocumentName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pUserName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDataType: string | null | Uint8Array | Uint16Array;
  /** i64 */
  TotalSize: Deno.PointerValue;
  /** i64 */
  PrintedSize: Deno.PointerValue;
  /** u32 */
  TotalPages: number;
  /** u32 */
  PrintedPages: number;
  /** Windows.Win32.Foundation.PWSTR */
  pMachineName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pJobError: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pErrorDescription: string | null | Uint8Array | Uint16Array;
}

export const sizeofBranchOfficeJobDataError = 88;

export function allocBranchOfficeJobDataError(data?: Partial<BranchOfficeJobDataError>): Uint8Array {
  const buf = new Uint8Array(sizeofBranchOfficeJobDataError);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.LastError !== undefined) view.setUint32(0, Number(data.LastError), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pDocumentName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pDocumentName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pUserName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pPrinterName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: buffer
  if (data?.pDataType !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.pDataType);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f32))), true);
  }
  // 0x28: i64
  if (data?.TotalSize !== undefined) view.setBigInt64(40, BigInt(data.TotalSize), true);
  // 0x30: i64
  if (data?.PrintedSize !== undefined) view.setBigInt64(48, BigInt(data.PrintedSize), true);
  // 0x38: u32
  if (data?.TotalPages !== undefined) view.setUint32(56, Number(data.TotalPages), true);
  // 0x3c: u32
  if (data?.PrintedPages !== undefined) view.setUint32(60, Number(data.PrintedPages), true);
  // 0x40: buffer
  if (data?.pMachineName !== undefined) {
    (buf as any)._f64 = util.pwstrToFfi(data.pMachineName);
    view.setBigUint64(64, (buf as any)._f64 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f64))), true);
  }
  // 0x48: buffer
  if (data?.pJobError !== undefined) {
    (buf as any)._f72 = util.pwstrToFfi(data.pJobError);
    view.setBigUint64(72, (buf as any)._f72 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f72))), true);
  }
  // 0x50: buffer
  if (data?.pErrorDescription !== undefined) {
    (buf as any)._f80 = util.pwstrToFfi(data.pErrorDescription);
    view.setBigUint64(80, (buf as any)._f80 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f80))), true);
  }
  return buf;
}

export class BranchOfficeJobDataErrorView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get LastError(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pDocumentName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: buffer
  get pDataType(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x28: i64
  get TotalSize(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: i64
  get PrintedSize(): Deno.PointerValue {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: u32
  get TotalPages(): number {
    return this.view.getUint32(56, true);
  }

  // 0x3c: u32
  get PrintedPages(): number {
    return this.view.getUint32(60, true);
  }

  // 0x40: buffer
  get pMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(64, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x48: buffer
  get pJobError(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(72, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x50: buffer
  get pErrorDescription(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(80, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set LastError(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pDocumentName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: buffer
  set pDataType(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f32 = value;
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f32))), true);
  }

  // 0x28: i64
  set TotalSize(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: i64
  set PrintedSize(value: Deno.PointerValue) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: u32
  set TotalPages(value: number) {
    this.view.setUint32(56, value, true);
  }

  // 0x3c: u32
  set PrintedPages(value: number) {
    this.view.setUint32(60, value, true);
  }

  // 0x40: buffer
  set pMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f64 = value;
    this.view.setBigUint64(64, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f64))), true);
  }

  // 0x48: buffer
  set pJobError(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f72 = value;
    this.view.setBigUint64(72, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f72))), true);
  }

  // 0x50: buffer
  set pErrorDescription(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f80 = value;
    this.view.setBigUint64(80, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f80))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.BranchOfficeJobDataRendered (size: 24)
 */
export interface BranchOfficeJobDataRendered {
  /** i64 */
  Size: Deno.PointerValue;
  /** u32 */
  ICMMethod: number;
  /** i16 */
  Color: number;
  /** i16 */
  PrintQuality: number;
  /** i16 */
  YResolution: number;
  /** i16 */
  Copies: number;
  /** i16 */
  TTOption: number;
}

export const sizeofBranchOfficeJobDataRendered = 24;

export function allocBranchOfficeJobDataRendered(data?: Partial<BranchOfficeJobDataRendered>): Uint8Array {
  const buf = new Uint8Array(sizeofBranchOfficeJobDataRendered);
  const view = new DataView(buf.buffer);
  // 0x00: i64
  if (data?.Size !== undefined) view.setBigInt64(0, BigInt(data.Size), true);
  // 0x08: u32
  if (data?.ICMMethod !== undefined) view.setUint32(8, Number(data.ICMMethod), true);
  // 0x0c: i16
  if (data?.Color !== undefined) view.setInt16(12, Number(data.Color), true);
  // 0x0e: i16
  if (data?.PrintQuality !== undefined) view.setInt16(14, Number(data.PrintQuality), true);
  // 0x10: i16
  if (data?.YResolution !== undefined) view.setInt16(16, Number(data.YResolution), true);
  // 0x12: i16
  if (data?.Copies !== undefined) view.setInt16(18, Number(data.Copies), true);
  // 0x14: i16
  if (data?.TTOption !== undefined) view.setInt16(20, Number(data.TTOption), true);
  // 0x16: pad2
  return buf;
}

export class BranchOfficeJobDataRenderedView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i64
  get Size(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: u32
  get ICMMethod(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: i16
  get Color(): number {
    return this.view.getInt16(12, true);
  }

  // 0x0e: i16
  get PrintQuality(): number {
    return this.view.getInt16(14, true);
  }

  // 0x10: i16
  get YResolution(): number {
    return this.view.getInt16(16, true);
  }

  // 0x12: i16
  get Copies(): number {
    return this.view.getInt16(18, true);
  }

  // 0x14: i16
  get TTOption(): number {
    return this.view.getInt16(20, true);
  }

  // 0x16: pad2

  // 0x00: i64
  set Size(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: u32
  set ICMMethod(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: i16
  set Color(value: number) {
    this.view.setInt16(12, value, true);
  }

  // 0x0e: i16
  set PrintQuality(value: number) {
    this.view.setInt16(14, value, true);
  }

  // 0x10: i16
  set YResolution(value: number) {
    this.view.setInt16(16, value, true);
  }

  // 0x12: i16
  set Copies(value: number) {
    this.view.setInt16(18, value, true);
  }

  // 0x14: i16
  set TTOption(value: number) {
    this.view.setInt16(20, value, true);
  }

  // 0x16: pad2
}

/**
 * Windows.Win32.Graphics.Printing.BranchOfficeJobDataPipelineFailed (size: 24)
 */
export interface BranchOfficeJobDataPipelineFailed {
  /** Windows.Win32.Foundation.PWSTR */
  pDocumentName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pExtraErrorInfo: string | null | Uint8Array | Uint16Array;
}

export const sizeofBranchOfficeJobDataPipelineFailed = 24;

export function allocBranchOfficeJobDataPipelineFailed(data?: Partial<BranchOfficeJobDataPipelineFailed>): Uint8Array {
  const buf = new Uint8Array(sizeofBranchOfficeJobDataPipelineFailed);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pDocumentName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pDocumentName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  // 0x08: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pPrinterName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pExtraErrorInfo !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pExtraErrorInfo);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  return buf;
}

export class BranchOfficeJobDataPipelineFailedView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pDocumentName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pExtraErrorInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pDocumentName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }

  // 0x08: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pExtraErrorInfo(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.BranchOfficeLogOfflineFileFull (size: 8)
 */
export interface BranchOfficeLogOfflineFileFull {
  /** Windows.Win32.Foundation.PWSTR */
  pMachineName: string | null | Uint8Array | Uint16Array;
}

export const sizeofBranchOfficeLogOfflineFileFull = 8;

export function allocBranchOfficeLogOfflineFileFull(data?: Partial<BranchOfficeLogOfflineFileFull>): Uint8Array {
  const buf = new Uint8Array(sizeofBranchOfficeLogOfflineFileFull);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pMachineName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pMachineName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f0))), true);
  }
  return buf;
}

export class BranchOfficeLogOfflineFileFullView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: buffer
  set pMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f0))), true);
  }
}

/**
 * _JobInfo_e__Union (size: 40)
 */
export interface _JobInfo_e__Union {
  /** Windows.Win32.Graphics.Printing.BranchOfficeJobDataPrinted */
  LogJobPrinted: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Printing.BranchOfficeJobDataRendered */
  LogJobRendered: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Printing.BranchOfficeJobDataError */
  LogJobError: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Printing.BranchOfficeJobDataPipelineFailed */
  LogPipelineFailed: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.Graphics.Printing.BranchOfficeLogOfflineFileFull */
  LogOfflineFileFull: Uint8Array | Deno.PointerValue;
}

export const sizeof_JobInfo_e__Union = 40;

export function alloc_JobInfo_e__Union(data?: Partial<_JobInfo_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_JobInfo_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.LogJobPrinted !== undefined) view.setBigUint64(0, data.LogJobPrinted === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogJobPrinted))), true);
  // 0x08: pointer
  if (data?.LogJobRendered !== undefined) view.setBigUint64(8, data.LogJobRendered === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogJobRendered))), true);
  // 0x10: pointer
  if (data?.LogJobError !== undefined) view.setBigUint64(16, data.LogJobError === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogJobError))), true);
  // 0x18: pointer
  if (data?.LogPipelineFailed !== undefined) view.setBigUint64(24, data.LogPipelineFailed === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogPipelineFailed))), true);
  // 0x20: pointer
  if (data?.LogOfflineFileFull !== undefined) view.setBigUint64(32, data.LogOfflineFileFull === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.LogOfflineFileFull))), true);
  return buf;
}

export class _JobInfo_e__UnionView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get LogJobPrinted(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: pointer
  get LogJobRendered(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get LogJobError(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get LogPipelineFailed(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: pointer
  get LogOfflineFileFull(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(32, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set LogJobPrinted(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: pointer
  set LogJobRendered(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set LogJobError(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set LogPipelineFailed(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: pointer
  set LogOfflineFileFull(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(32, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.BranchOfficeJobData (size: 16)
 */
export interface BranchOfficeJobData {
  /** Windows.Win32.Graphics.Printing.EBranchOfficeJobEventType */
  eEventType: EBranchOfficeJobEventType;
  /** u32 */
  JobId: number;
  /** _JobInfo_e__Union */
  JobInfo: Uint8Array | Deno.PointerValue;
}

export const sizeofBranchOfficeJobData = 16;

export function allocBranchOfficeJobData(data?: Partial<BranchOfficeJobData>): Uint8Array {
  const buf = new Uint8Array(sizeofBranchOfficeJobData);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.eEventType !== undefined) view.setInt32(0, Number(data.eEventType), true);
  // 0x04: u32
  if (data?.JobId !== undefined) view.setUint32(4, Number(data.JobId), true);
  // 0x08: pointer
  if (data?.JobInfo !== undefined) view.setBigUint64(8, data.JobInfo === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.JobInfo))), true);
  return buf;
}

export class BranchOfficeJobDataView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get eEventType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: u32
  get JobId(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get JobInfo(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set eEventType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: u32
  set JobId(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set JobInfo(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.BranchOfficeJobDataContainer (size: 16)
 */
export interface BranchOfficeJobDataContainer {
  /** u32 */
  cJobDataEntries: number;
  /** array */
  JobData: Deno.PointerValue;
}

export const sizeofBranchOfficeJobDataContainer = 16;

export function allocBranchOfficeJobDataContainer(data?: Partial<BranchOfficeJobDataContainer>): Uint8Array {
  const buf = new Uint8Array(sizeofBranchOfficeJobDataContainer);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cJobDataEntries !== undefined) view.setUint32(0, Number(data.cJobDataEntries), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.JobData !== undefined) view.setBigUint64(8, data.JobData === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.JobData))), true);
  return buf;
}

export class BranchOfficeJobDataContainerView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cJobDataEntries(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get JobData(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cJobDataEntries(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set JobData(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTER_NOTIFY_INIT (size: 16)
 */
export interface PRINTER_NOTIFY_INIT {
  /** u32 */
  Size: number;
  /** u32 */
  Reserved: number;
  /** u32 */
  PollTime: number;
}

export const sizeofPRINTER_NOTIFY_INIT = 16;

export function allocPRINTER_NOTIFY_INIT(data?: Partial<PRINTER_NOTIFY_INIT>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTER_NOTIFY_INIT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Size !== undefined) view.setUint32(0, Number(data.Size), true);
  // 0x04: u32
  if (data?.Reserved !== undefined) view.setUint32(4, Number(data.Reserved), true);
  // 0x08: u32
  if (data?.PollTime !== undefined) view.setUint32(8, Number(data.PollTime), true);
  // 0x0c: pad4
  return buf;
}

export class PRINTER_NOTIFY_INITView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Size(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get Reserved(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get PollTime(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x00: u32
  set Size(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set Reserved(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set PollTime(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4
}

/**
 * Windows.Win32.Graphics.Printing.SPLCLIENT_INFO_1 (size: 40)
 */
export interface SPLCLIENT_INFO_1 {
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pMachineName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pUserName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwBuildNum: number;
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
  /** u16 */
  wProcessorArchitecture: number;
}

export const sizeofSPLCLIENT_INFO_1 = 40;

export function allocSPLCLIENT_INFO_1(data?: Partial<SPLCLIENT_INFO_1>): Uint8Array {
  const buf = new Uint8Array(sizeofSPLCLIENT_INFO_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwSize !== undefined) view.setUint32(0, Number(data.dwSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pMachineName !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pMachineName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pUserName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.dwBuildNum !== undefined) view.setUint32(24, Number(data.dwBuildNum), true);
  // 0x1c: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(28, Number(data.dwMajorVersion), true);
  // 0x20: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(32, Number(data.dwMinorVersion), true);
  // 0x24: u16
  if (data?.wProcessorArchitecture !== undefined) view.setUint16(36, Number(data.wProcessorArchitecture), true);
  // 0x26: pad2
  return buf;
}

export class SPLCLIENT_INFO_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get dwBuildNum(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwMajorVersion(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: u32
  get dwMinorVersion(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u16
  get wProcessorArchitecture(): number {
    return this.view.getUint16(36, true);
  }

  // 0x26: pad2

  // 0x00: u32
  set dwSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set dwBuildNum(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwMajorVersion(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: u32
  set dwMinorVersion(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u16
  set wProcessorArchitecture(value: number) {
    this.view.setUint16(36, value, true);
  }

  // 0x26: pad2
}

/**
 * Windows.Win32.Graphics.Printing.SPLCLIENT_INFO_2_W2K (size: 8)
 */
export interface SPLCLIENT_INFO_2_W2K {
  /** usize */
  hSplPrinter: Deno.PointerValue;
}

export const sizeofSPLCLIENT_INFO_2_W2K = 8;

export function allocSPLCLIENT_INFO_2_W2K(data?: Partial<SPLCLIENT_INFO_2_W2K>): Uint8Array {
  const buf = new Uint8Array(sizeofSPLCLIENT_INFO_2_W2K);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.hSplPrinter !== undefined) view.setBigUint64(0, BigInt(data.hSplPrinter), true);
  return buf;
}

export class SPLCLIENT_INFO_2_W2KView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: usize
  get hSplPrinter(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: usize
  set hSplPrinter(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing._SPLCLIENT_INFO_2_V3 (size: 8)
 */
export interface _SPLCLIENT_INFO_2_V3 {
  /** u64 */
  hSplPrinter: Deno.PointerValue;
}

export const sizeof_SPLCLIENT_INFO_2_V3 = 8;

export function alloc_SPLCLIENT_INFO_2_V3(data?: Partial<_SPLCLIENT_INFO_2_V3>): Uint8Array {
  const buf = new Uint8Array(sizeof_SPLCLIENT_INFO_2_V3);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.hSplPrinter !== undefined) view.setBigUint64(0, BigInt(data.hSplPrinter), true);
  return buf;
}

export class _SPLCLIENT_INFO_2_V3View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u64
  get hSplPrinter(): Deno.PointerValue {
    return Number(this.view.getBigUint64(0, true));
  }

  // 0x00: u64
  set hSplPrinter(value: Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.SPLCLIENT_INFO_3_VISTA (size: 56)
 */
export interface SPLCLIENT_INFO_3_VISTA {
  /** u32 */
  cbSize: number;
  /** u32 */
  dwFlags: number;
  /** u32 */
  dwSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pMachineName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pUserName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  dwBuildNum: number;
  /** u32 */
  dwMajorVersion: number;
  /** u32 */
  dwMinorVersion: number;
  /** u16 */
  wProcessorArchitecture: number;
  /** u64 */
  hSplPrinter: Deno.PointerValue;
}

export const sizeofSPLCLIENT_INFO_3_VISTA = 56;

export function allocSPLCLIENT_INFO_3_VISTA(data?: Partial<SPLCLIENT_INFO_3_VISTA>): Uint8Array {
  const buf = new Uint8Array(sizeofSPLCLIENT_INFO_3_VISTA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.dwFlags !== undefined) view.setUint32(4, Number(data.dwFlags), true);
  // 0x08: u32
  if (data?.dwSize !== undefined) view.setUint32(8, Number(data.dwSize), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.pMachineName !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pMachineName);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pUserName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pUserName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.dwBuildNum !== undefined) view.setUint32(32, Number(data.dwBuildNum), true);
  // 0x24: u32
  if (data?.dwMajorVersion !== undefined) view.setUint32(36, Number(data.dwMajorVersion), true);
  // 0x28: u32
  if (data?.dwMinorVersion !== undefined) view.setUint32(40, Number(data.dwMinorVersion), true);
  // 0x2c: u16
  if (data?.wProcessorArchitecture !== undefined) view.setUint16(44, Number(data.wProcessorArchitecture), true);
  // 0x2e: pad2
  // 0x30: u64
  if (data?.hSplPrinter !== undefined) view.setBigUint64(48, BigInt(data.hSplPrinter), true);
  return buf;
}

export class SPLCLIENT_INFO_3_VISTAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get dwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: u32
  get dwSize(): number {
    return this.view.getUint32(8, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  get pMachineName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pUserName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get dwBuildNum(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: u32
  get dwMajorVersion(): number {
    return this.view.getUint32(36, true);
  }

  // 0x28: u32
  get dwMinorVersion(): number {
    return this.view.getUint32(40, true);
  }

  // 0x2c: u16
  get wProcessorArchitecture(): number {
    return this.view.getUint16(44, true);
  }

  // 0x2e: pad2

  // 0x30: u64
  get hSplPrinter(): Deno.PointerValue {
    return Number(this.view.getBigUint64(48, true));
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set dwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: u32
  set dwSize(value: number) {
    this.view.setUint32(8, value, true);
  }

  // 0x0c: pad4

  // 0x10: buffer
  set pMachineName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pUserName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set dwBuildNum(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: u32
  set dwMajorVersion(value: number) {
    this.view.setUint32(36, value, true);
  }

  // 0x28: u32
  set dwMinorVersion(value: number) {
    this.view.setUint32(40, value, true);
  }

  // 0x2c: u16
  set wProcessorArchitecture(value: number) {
    this.view.setUint16(44, value, true);
  }

  // 0x2e: pad2

  // 0x30: u64
  set hSplPrinter(value: Deno.PointerValue) {
    this.view.setBigUint64(48, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTPROVIDOR (size: 848)
 */
export interface PRINTPROVIDOR {
  /** isize */
  fpOpenPrinter: Deno.PointerValue;
  /** isize */
  fpSetJob: Deno.PointerValue;
  /** isize */
  fpGetJob: Deno.PointerValue;
  /** isize */
  fpEnumJobs: Deno.PointerValue;
  /** isize */
  fpAddPrinter: Deno.PointerValue;
  /** isize */
  fpDeletePrinter: Deno.PointerValue;
  /** isize */
  fpSetPrinter: Deno.PointerValue;
  /** isize */
  fpGetPrinter: Deno.PointerValue;
  /** isize */
  fpEnumPrinters: Deno.PointerValue;
  /** isize */
  fpAddPrinterDriver: Deno.PointerValue;
  /** isize */
  fpEnumPrinterDrivers: Deno.PointerValue;
  /** isize */
  fpGetPrinterDriver: Deno.PointerValue;
  /** isize */
  fpGetPrinterDriverDirectory: Deno.PointerValue;
  /** isize */
  fpDeletePrinterDriver: Deno.PointerValue;
  /** isize */
  fpAddPrintProcessor: Deno.PointerValue;
  /** isize */
  fpEnumPrintProcessors: Deno.PointerValue;
  /** isize */
  fpGetPrintProcessorDirectory: Deno.PointerValue;
  /** isize */
  fpDeletePrintProcessor: Deno.PointerValue;
  /** isize */
  fpEnumPrintProcessorDatatypes: Deno.PointerValue;
  /** isize */
  fpStartDocPrinter: Deno.PointerValue;
  /** isize */
  fpStartPagePrinter: Deno.PointerValue;
  /** isize */
  fpWritePrinter: Deno.PointerValue;
  /** isize */
  fpEndPagePrinter: Deno.PointerValue;
  /** isize */
  fpAbortPrinter: Deno.PointerValue;
  /** isize */
  fpReadPrinter: Deno.PointerValue;
  /** isize */
  fpEndDocPrinter: Deno.PointerValue;
  /** isize */
  fpAddJob: Deno.PointerValue;
  /** isize */
  fpScheduleJob: Deno.PointerValue;
  /** isize */
  fpGetPrinterData: Deno.PointerValue;
  /** isize */
  fpSetPrinterData: Deno.PointerValue;
  /** isize */
  fpWaitForPrinterChange: Deno.PointerValue;
  /** isize */
  fpClosePrinter: Deno.PointerValue;
  /** isize */
  fpAddForm: Deno.PointerValue;
  /** isize */
  fpDeleteForm: Deno.PointerValue;
  /** isize */
  fpGetForm: Deno.PointerValue;
  /** isize */
  fpSetForm: Deno.PointerValue;
  /** isize */
  fpEnumForms: Deno.PointerValue;
  /** isize */
  fpEnumMonitors: Deno.PointerValue;
  /** isize */
  fpEnumPorts: Deno.PointerValue;
  /** isize */
  fpAddPort: Deno.PointerValue;
  /** isize */
  fpConfigurePort: Deno.PointerValue;
  /** isize */
  fpDeletePort: Deno.PointerValue;
  /** isize */
  fpCreatePrinterIC: Deno.PointerValue;
  /** isize */
  fpPlayGdiScriptOnPrinterIC: Deno.PointerValue;
  /** isize */
  fpDeletePrinterIC: Deno.PointerValue;
  /** isize */
  fpAddPrinterConnection: Deno.PointerValue;
  /** isize */
  fpDeletePrinterConnection: Deno.PointerValue;
  /** isize */
  fpPrinterMessageBox: Deno.PointerValue;
  /** isize */
  fpAddMonitor: Deno.PointerValue;
  /** isize */
  fpDeleteMonitor: Deno.PointerValue;
  /** isize */
  fpResetPrinter: Deno.PointerValue;
  /** isize */
  fpGetPrinterDriverEx: Deno.PointerValue;
  /** isize */
  fpFindFirstPrinterChangeNotification: Deno.PointerValue;
  /** isize */
  fpFindClosePrinterChangeNotification: Deno.PointerValue;
  /** isize */
  fpAddPortEx: Deno.PointerValue;
  /** isize */
  fpShutDown: Deno.PointerValue;
  /** isize */
  fpRefreshPrinterChangeNotification: Deno.PointerValue;
  /** isize */
  fpOpenPrinterEx: Deno.PointerValue;
  /** isize */
  fpAddPrinterEx: Deno.PointerValue;
  /** isize */
  fpSetPort: Deno.PointerValue;
  /** isize */
  fpEnumPrinterData: Deno.PointerValue;
  /** isize */
  fpDeletePrinterData: Deno.PointerValue;
  /** isize */
  fpClusterSplOpen: Deno.PointerValue;
  /** isize */
  fpClusterSplClose: Deno.PointerValue;
  /** isize */
  fpClusterSplIsAlive: Deno.PointerValue;
  /** isize */
  fpSetPrinterDataEx: Deno.PointerValue;
  /** isize */
  fpGetPrinterDataEx: Deno.PointerValue;
  /** isize */
  fpEnumPrinterDataEx: Deno.PointerValue;
  /** isize */
  fpEnumPrinterKey: Deno.PointerValue;
  /** isize */
  fpDeletePrinterDataEx: Deno.PointerValue;
  /** isize */
  fpDeletePrinterKey: Deno.PointerValue;
  /** isize */
  fpSeekPrinter: Deno.PointerValue;
  /** isize */
  fpDeletePrinterDriverEx: Deno.PointerValue;
  /** isize */
  fpAddPerMachineConnection: Deno.PointerValue;
  /** isize */
  fpDeletePerMachineConnection: Deno.PointerValue;
  /** isize */
  fpEnumPerMachineConnections: Deno.PointerValue;
  /** isize */
  fpXcvData: Deno.PointerValue;
  /** isize */
  fpAddPrinterDriverEx: Deno.PointerValue;
  /** isize */
  fpSplReadPrinter: Deno.PointerValue;
  /** isize */
  fpDriverUnloadComplete: Deno.PointerValue;
  /** isize */
  fpGetSpoolFileInfo: Deno.PointerValue;
  /** isize */
  fpCommitSpoolData: Deno.PointerValue;
  /** isize */
  fpCloseSpoolFileHandle: Deno.PointerValue;
  /** isize */
  fpFlushPrinter: Deno.PointerValue;
  /** isize */
  fpSendRecvBidiData: Deno.PointerValue;
  /** isize */
  fpAddPrinterConnection2: Deno.PointerValue;
  /** isize */
  fpGetPrintClassObject: Deno.PointerValue;
  /** isize */
  fpReportJobProcessingProgress: Deno.PointerValue;
  /** isize */
  fpEnumAndLogProvidorObjects: Deno.PointerValue;
  /** isize */
  fpInternalGetPrinterDriver: Deno.PointerValue;
  /** isize */
  fpFindCompatibleDriver: Deno.PointerValue;
  /** isize */
  fpGetJobNamedPropertyValue: Deno.PointerValue;
  /** isize */
  fpSetJobNamedProperty: Deno.PointerValue;
  /** isize */
  fpDeleteJobNamedProperty: Deno.PointerValue;
  /** isize */
  fpEnumJobNamedProperties: Deno.PointerValue;
  /** isize */
  fpPowerEvent: Deno.PointerValue;
  /** isize */
  fpGetUserPropertyBag: Deno.PointerValue;
  /** isize */
  fpCanShutdown: Deno.PointerValue;
  /** isize */
  fpLogJobInfoForBranchOffice: Deno.PointerValue;
  /** isize */
  fpRegeneratePrintDeviceCapabilities: Deno.PointerValue;
  /** isize */
  fpPrintSupportOperation: Deno.PointerValue;
  /** isize */
  fpIppCreateJobOnPrinter: Deno.PointerValue;
  /** isize */
  fpIppGetJobAttributes: Deno.PointerValue;
  /** isize */
  fpIppSetJobAttributes: Deno.PointerValue;
  /** isize */
  fpIppGetPrinterAttributes: Deno.PointerValue;
  /** isize */
  fpIppSetPrinterAttributes: Deno.PointerValue;
}

export const sizeofPRINTPROVIDOR = 848;

export function allocPRINTPROVIDOR(data?: Partial<PRINTPROVIDOR>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTPROVIDOR);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.fpOpenPrinter !== undefined) view.setBigInt64(0, BigInt(data.fpOpenPrinter), true);
  // 0x08: isize
  if (data?.fpSetJob !== undefined) view.setBigInt64(8, BigInt(data.fpSetJob), true);
  // 0x10: isize
  if (data?.fpGetJob !== undefined) view.setBigInt64(16, BigInt(data.fpGetJob), true);
  // 0x18: isize
  if (data?.fpEnumJobs !== undefined) view.setBigInt64(24, BigInt(data.fpEnumJobs), true);
  // 0x20: isize
  if (data?.fpAddPrinter !== undefined) view.setBigInt64(32, BigInt(data.fpAddPrinter), true);
  // 0x28: isize
  if (data?.fpDeletePrinter !== undefined) view.setBigInt64(40, BigInt(data.fpDeletePrinter), true);
  // 0x30: isize
  if (data?.fpSetPrinter !== undefined) view.setBigInt64(48, BigInt(data.fpSetPrinter), true);
  // 0x38: isize
  if (data?.fpGetPrinter !== undefined) view.setBigInt64(56, BigInt(data.fpGetPrinter), true);
  // 0x40: isize
  if (data?.fpEnumPrinters !== undefined) view.setBigInt64(64, BigInt(data.fpEnumPrinters), true);
  // 0x48: isize
  if (data?.fpAddPrinterDriver !== undefined) view.setBigInt64(72, BigInt(data.fpAddPrinterDriver), true);
  // 0x50: isize
  if (data?.fpEnumPrinterDrivers !== undefined) view.setBigInt64(80, BigInt(data.fpEnumPrinterDrivers), true);
  // 0x58: isize
  if (data?.fpGetPrinterDriver !== undefined) view.setBigInt64(88, BigInt(data.fpGetPrinterDriver), true);
  // 0x60: isize
  if (data?.fpGetPrinterDriverDirectory !== undefined) view.setBigInt64(96, BigInt(data.fpGetPrinterDriverDirectory), true);
  // 0x68: isize
  if (data?.fpDeletePrinterDriver !== undefined) view.setBigInt64(104, BigInt(data.fpDeletePrinterDriver), true);
  // 0x70: isize
  if (data?.fpAddPrintProcessor !== undefined) view.setBigInt64(112, BigInt(data.fpAddPrintProcessor), true);
  // 0x78: isize
  if (data?.fpEnumPrintProcessors !== undefined) view.setBigInt64(120, BigInt(data.fpEnumPrintProcessors), true);
  // 0x80: isize
  if (data?.fpGetPrintProcessorDirectory !== undefined) view.setBigInt64(128, BigInt(data.fpGetPrintProcessorDirectory), true);
  // 0x88: isize
  if (data?.fpDeletePrintProcessor !== undefined) view.setBigInt64(136, BigInt(data.fpDeletePrintProcessor), true);
  // 0x90: isize
  if (data?.fpEnumPrintProcessorDatatypes !== undefined) view.setBigInt64(144, BigInt(data.fpEnumPrintProcessorDatatypes), true);
  // 0x98: isize
  if (data?.fpStartDocPrinter !== undefined) view.setBigInt64(152, BigInt(data.fpStartDocPrinter), true);
  // 0xa0: isize
  if (data?.fpStartPagePrinter !== undefined) view.setBigInt64(160, BigInt(data.fpStartPagePrinter), true);
  // 0xa8: isize
  if (data?.fpWritePrinter !== undefined) view.setBigInt64(168, BigInt(data.fpWritePrinter), true);
  // 0xb0: isize
  if (data?.fpEndPagePrinter !== undefined) view.setBigInt64(176, BigInt(data.fpEndPagePrinter), true);
  // 0xb8: isize
  if (data?.fpAbortPrinter !== undefined) view.setBigInt64(184, BigInt(data.fpAbortPrinter), true);
  // 0xc0: isize
  if (data?.fpReadPrinter !== undefined) view.setBigInt64(192, BigInt(data.fpReadPrinter), true);
  // 0xc8: isize
  if (data?.fpEndDocPrinter !== undefined) view.setBigInt64(200, BigInt(data.fpEndDocPrinter), true);
  // 0xd0: isize
  if (data?.fpAddJob !== undefined) view.setBigInt64(208, BigInt(data.fpAddJob), true);
  // 0xd8: isize
  if (data?.fpScheduleJob !== undefined) view.setBigInt64(216, BigInt(data.fpScheduleJob), true);
  // 0xe0: isize
  if (data?.fpGetPrinterData !== undefined) view.setBigInt64(224, BigInt(data.fpGetPrinterData), true);
  // 0xe8: isize
  if (data?.fpSetPrinterData !== undefined) view.setBigInt64(232, BigInt(data.fpSetPrinterData), true);
  // 0xf0: isize
  if (data?.fpWaitForPrinterChange !== undefined) view.setBigInt64(240, BigInt(data.fpWaitForPrinterChange), true);
  // 0xf8: isize
  if (data?.fpClosePrinter !== undefined) view.setBigInt64(248, BigInt(data.fpClosePrinter), true);
  // 0x100: isize
  if (data?.fpAddForm !== undefined) view.setBigInt64(256, BigInt(data.fpAddForm), true);
  // 0x108: isize
  if (data?.fpDeleteForm !== undefined) view.setBigInt64(264, BigInt(data.fpDeleteForm), true);
  // 0x110: isize
  if (data?.fpGetForm !== undefined) view.setBigInt64(272, BigInt(data.fpGetForm), true);
  // 0x118: isize
  if (data?.fpSetForm !== undefined) view.setBigInt64(280, BigInt(data.fpSetForm), true);
  // 0x120: isize
  if (data?.fpEnumForms !== undefined) view.setBigInt64(288, BigInt(data.fpEnumForms), true);
  // 0x128: isize
  if (data?.fpEnumMonitors !== undefined) view.setBigInt64(296, BigInt(data.fpEnumMonitors), true);
  // 0x130: isize
  if (data?.fpEnumPorts !== undefined) view.setBigInt64(304, BigInt(data.fpEnumPorts), true);
  // 0x138: isize
  if (data?.fpAddPort !== undefined) view.setBigInt64(312, BigInt(data.fpAddPort), true);
  // 0x140: isize
  if (data?.fpConfigurePort !== undefined) view.setBigInt64(320, BigInt(data.fpConfigurePort), true);
  // 0x148: isize
  if (data?.fpDeletePort !== undefined) view.setBigInt64(328, BigInt(data.fpDeletePort), true);
  // 0x150: isize
  if (data?.fpCreatePrinterIC !== undefined) view.setBigInt64(336, BigInt(data.fpCreatePrinterIC), true);
  // 0x158: isize
  if (data?.fpPlayGdiScriptOnPrinterIC !== undefined) view.setBigInt64(344, BigInt(data.fpPlayGdiScriptOnPrinterIC), true);
  // 0x160: isize
  if (data?.fpDeletePrinterIC !== undefined) view.setBigInt64(352, BigInt(data.fpDeletePrinterIC), true);
  // 0x168: isize
  if (data?.fpAddPrinterConnection !== undefined) view.setBigInt64(360, BigInt(data.fpAddPrinterConnection), true);
  // 0x170: isize
  if (data?.fpDeletePrinterConnection !== undefined) view.setBigInt64(368, BigInt(data.fpDeletePrinterConnection), true);
  // 0x178: isize
  if (data?.fpPrinterMessageBox !== undefined) view.setBigInt64(376, BigInt(data.fpPrinterMessageBox), true);
  // 0x180: isize
  if (data?.fpAddMonitor !== undefined) view.setBigInt64(384, BigInt(data.fpAddMonitor), true);
  // 0x188: isize
  if (data?.fpDeleteMonitor !== undefined) view.setBigInt64(392, BigInt(data.fpDeleteMonitor), true);
  // 0x190: isize
  if (data?.fpResetPrinter !== undefined) view.setBigInt64(400, BigInt(data.fpResetPrinter), true);
  // 0x198: isize
  if (data?.fpGetPrinterDriverEx !== undefined) view.setBigInt64(408, BigInt(data.fpGetPrinterDriverEx), true);
  // 0x1a0: isize
  if (data?.fpFindFirstPrinterChangeNotification !== undefined) view.setBigInt64(416, BigInt(data.fpFindFirstPrinterChangeNotification), true);
  // 0x1a8: isize
  if (data?.fpFindClosePrinterChangeNotification !== undefined) view.setBigInt64(424, BigInt(data.fpFindClosePrinterChangeNotification), true);
  // 0x1b0: isize
  if (data?.fpAddPortEx !== undefined) view.setBigInt64(432, BigInt(data.fpAddPortEx), true);
  // 0x1b8: isize
  if (data?.fpShutDown !== undefined) view.setBigInt64(440, BigInt(data.fpShutDown), true);
  // 0x1c0: isize
  if (data?.fpRefreshPrinterChangeNotification !== undefined) view.setBigInt64(448, BigInt(data.fpRefreshPrinterChangeNotification), true);
  // 0x1c8: isize
  if (data?.fpOpenPrinterEx !== undefined) view.setBigInt64(456, BigInt(data.fpOpenPrinterEx), true);
  // 0x1d0: isize
  if (data?.fpAddPrinterEx !== undefined) view.setBigInt64(464, BigInt(data.fpAddPrinterEx), true);
  // 0x1d8: isize
  if (data?.fpSetPort !== undefined) view.setBigInt64(472, BigInt(data.fpSetPort), true);
  // 0x1e0: isize
  if (data?.fpEnumPrinterData !== undefined) view.setBigInt64(480, BigInt(data.fpEnumPrinterData), true);
  // 0x1e8: isize
  if (data?.fpDeletePrinterData !== undefined) view.setBigInt64(488, BigInt(data.fpDeletePrinterData), true);
  // 0x1f0: isize
  if (data?.fpClusterSplOpen !== undefined) view.setBigInt64(496, BigInt(data.fpClusterSplOpen), true);
  // 0x1f8: isize
  if (data?.fpClusterSplClose !== undefined) view.setBigInt64(504, BigInt(data.fpClusterSplClose), true);
  // 0x200: isize
  if (data?.fpClusterSplIsAlive !== undefined) view.setBigInt64(512, BigInt(data.fpClusterSplIsAlive), true);
  // 0x208: isize
  if (data?.fpSetPrinterDataEx !== undefined) view.setBigInt64(520, BigInt(data.fpSetPrinterDataEx), true);
  // 0x210: isize
  if (data?.fpGetPrinterDataEx !== undefined) view.setBigInt64(528, BigInt(data.fpGetPrinterDataEx), true);
  // 0x218: isize
  if (data?.fpEnumPrinterDataEx !== undefined) view.setBigInt64(536, BigInt(data.fpEnumPrinterDataEx), true);
  // 0x220: isize
  if (data?.fpEnumPrinterKey !== undefined) view.setBigInt64(544, BigInt(data.fpEnumPrinterKey), true);
  // 0x228: isize
  if (data?.fpDeletePrinterDataEx !== undefined) view.setBigInt64(552, BigInt(data.fpDeletePrinterDataEx), true);
  // 0x230: isize
  if (data?.fpDeletePrinterKey !== undefined) view.setBigInt64(560, BigInt(data.fpDeletePrinterKey), true);
  // 0x238: isize
  if (data?.fpSeekPrinter !== undefined) view.setBigInt64(568, BigInt(data.fpSeekPrinter), true);
  // 0x240: isize
  if (data?.fpDeletePrinterDriverEx !== undefined) view.setBigInt64(576, BigInt(data.fpDeletePrinterDriverEx), true);
  // 0x248: isize
  if (data?.fpAddPerMachineConnection !== undefined) view.setBigInt64(584, BigInt(data.fpAddPerMachineConnection), true);
  // 0x250: isize
  if (data?.fpDeletePerMachineConnection !== undefined) view.setBigInt64(592, BigInt(data.fpDeletePerMachineConnection), true);
  // 0x258: isize
  if (data?.fpEnumPerMachineConnections !== undefined) view.setBigInt64(600, BigInt(data.fpEnumPerMachineConnections), true);
  // 0x260: isize
  if (data?.fpXcvData !== undefined) view.setBigInt64(608, BigInt(data.fpXcvData), true);
  // 0x268: isize
  if (data?.fpAddPrinterDriverEx !== undefined) view.setBigInt64(616, BigInt(data.fpAddPrinterDriverEx), true);
  // 0x270: isize
  if (data?.fpSplReadPrinter !== undefined) view.setBigInt64(624, BigInt(data.fpSplReadPrinter), true);
  // 0x278: isize
  if (data?.fpDriverUnloadComplete !== undefined) view.setBigInt64(632, BigInt(data.fpDriverUnloadComplete), true);
  // 0x280: isize
  if (data?.fpGetSpoolFileInfo !== undefined) view.setBigInt64(640, BigInt(data.fpGetSpoolFileInfo), true);
  // 0x288: isize
  if (data?.fpCommitSpoolData !== undefined) view.setBigInt64(648, BigInt(data.fpCommitSpoolData), true);
  // 0x290: isize
  if (data?.fpCloseSpoolFileHandle !== undefined) view.setBigInt64(656, BigInt(data.fpCloseSpoolFileHandle), true);
  // 0x298: isize
  if (data?.fpFlushPrinter !== undefined) view.setBigInt64(664, BigInt(data.fpFlushPrinter), true);
  // 0x2a0: isize
  if (data?.fpSendRecvBidiData !== undefined) view.setBigInt64(672, BigInt(data.fpSendRecvBidiData), true);
  // 0x2a8: isize
  if (data?.fpAddPrinterConnection2 !== undefined) view.setBigInt64(680, BigInt(data.fpAddPrinterConnection2), true);
  // 0x2b0: isize
  if (data?.fpGetPrintClassObject !== undefined) view.setBigInt64(688, BigInt(data.fpGetPrintClassObject), true);
  // 0x2b8: isize
  if (data?.fpReportJobProcessingProgress !== undefined) view.setBigInt64(696, BigInt(data.fpReportJobProcessingProgress), true);
  // 0x2c0: isize
  if (data?.fpEnumAndLogProvidorObjects !== undefined) view.setBigInt64(704, BigInt(data.fpEnumAndLogProvidorObjects), true);
  // 0x2c8: isize
  if (data?.fpInternalGetPrinterDriver !== undefined) view.setBigInt64(712, BigInt(data.fpInternalGetPrinterDriver), true);
  // 0x2d0: isize
  if (data?.fpFindCompatibleDriver !== undefined) view.setBigInt64(720, BigInt(data.fpFindCompatibleDriver), true);
  // 0x2d8: isize
  if (data?.fpGetJobNamedPropertyValue !== undefined) view.setBigInt64(728, BigInt(data.fpGetJobNamedPropertyValue), true);
  // 0x2e0: isize
  if (data?.fpSetJobNamedProperty !== undefined) view.setBigInt64(736, BigInt(data.fpSetJobNamedProperty), true);
  // 0x2e8: isize
  if (data?.fpDeleteJobNamedProperty !== undefined) view.setBigInt64(744, BigInt(data.fpDeleteJobNamedProperty), true);
  // 0x2f0: isize
  if (data?.fpEnumJobNamedProperties !== undefined) view.setBigInt64(752, BigInt(data.fpEnumJobNamedProperties), true);
  // 0x2f8: isize
  if (data?.fpPowerEvent !== undefined) view.setBigInt64(760, BigInt(data.fpPowerEvent), true);
  // 0x300: isize
  if (data?.fpGetUserPropertyBag !== undefined) view.setBigInt64(768, BigInt(data.fpGetUserPropertyBag), true);
  // 0x308: isize
  if (data?.fpCanShutdown !== undefined) view.setBigInt64(776, BigInt(data.fpCanShutdown), true);
  // 0x310: isize
  if (data?.fpLogJobInfoForBranchOffice !== undefined) view.setBigInt64(784, BigInt(data.fpLogJobInfoForBranchOffice), true);
  // 0x318: isize
  if (data?.fpRegeneratePrintDeviceCapabilities !== undefined) view.setBigInt64(792, BigInt(data.fpRegeneratePrintDeviceCapabilities), true);
  // 0x320: isize
  if (data?.fpPrintSupportOperation !== undefined) view.setBigInt64(800, BigInt(data.fpPrintSupportOperation), true);
  // 0x328: isize
  if (data?.fpIppCreateJobOnPrinter !== undefined) view.setBigInt64(808, BigInt(data.fpIppCreateJobOnPrinter), true);
  // 0x330: isize
  if (data?.fpIppGetJobAttributes !== undefined) view.setBigInt64(816, BigInt(data.fpIppGetJobAttributes), true);
  // 0x338: isize
  if (data?.fpIppSetJobAttributes !== undefined) view.setBigInt64(824, BigInt(data.fpIppSetJobAttributes), true);
  // 0x340: isize
  if (data?.fpIppGetPrinterAttributes !== undefined) view.setBigInt64(832, BigInt(data.fpIppGetPrinterAttributes), true);
  // 0x348: isize
  if (data?.fpIppSetPrinterAttributes !== undefined) view.setBigInt64(840, BigInt(data.fpIppSetPrinterAttributes), true);
  return buf;
}

export class PRINTPROVIDORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get fpOpenPrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get fpSetJob(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get fpGetJob(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get fpEnumJobs(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get fpAddPrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get fpDeletePrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get fpSetPrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get fpGetPrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get fpEnumPrinters(): Deno.PointerValue {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get fpAddPrinterDriver(): Deno.PointerValue {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get fpEnumPrinterDrivers(): Deno.PointerValue {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get fpGetPrinterDriver(): Deno.PointerValue {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x60: isize
  get fpGetPrinterDriverDirectory(): Deno.PointerValue {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x68: isize
  get fpDeletePrinterDriver(): Deno.PointerValue {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: isize
  get fpAddPrintProcessor(): Deno.PointerValue {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x78: isize
  get fpEnumPrintProcessors(): Deno.PointerValue {
    return Number(this.view.getBigInt64(120, true));
  }

  // 0x80: isize
  get fpGetPrintProcessorDirectory(): Deno.PointerValue {
    return Number(this.view.getBigInt64(128, true));
  }

  // 0x88: isize
  get fpDeletePrintProcessor(): Deno.PointerValue {
    return Number(this.view.getBigInt64(136, true));
  }

  // 0x90: isize
  get fpEnumPrintProcessorDatatypes(): Deno.PointerValue {
    return Number(this.view.getBigInt64(144, true));
  }

  // 0x98: isize
  get fpStartDocPrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(152, true));
  }

  // 0xa0: isize
  get fpStartPagePrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(160, true));
  }

  // 0xa8: isize
  get fpWritePrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(168, true));
  }

  // 0xb0: isize
  get fpEndPagePrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(176, true));
  }

  // 0xb8: isize
  get fpAbortPrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(184, true));
  }

  // 0xc0: isize
  get fpReadPrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(192, true));
  }

  // 0xc8: isize
  get fpEndDocPrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(200, true));
  }

  // 0xd0: isize
  get fpAddJob(): Deno.PointerValue {
    return Number(this.view.getBigInt64(208, true));
  }

  // 0xd8: isize
  get fpScheduleJob(): Deno.PointerValue {
    return Number(this.view.getBigInt64(216, true));
  }

  // 0xe0: isize
  get fpGetPrinterData(): Deno.PointerValue {
    return Number(this.view.getBigInt64(224, true));
  }

  // 0xe8: isize
  get fpSetPrinterData(): Deno.PointerValue {
    return Number(this.view.getBigInt64(232, true));
  }

  // 0xf0: isize
  get fpWaitForPrinterChange(): Deno.PointerValue {
    return Number(this.view.getBigInt64(240, true));
  }

  // 0xf8: isize
  get fpClosePrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(248, true));
  }

  // 0x100: isize
  get fpAddForm(): Deno.PointerValue {
    return Number(this.view.getBigInt64(256, true));
  }

  // 0x108: isize
  get fpDeleteForm(): Deno.PointerValue {
    return Number(this.view.getBigInt64(264, true));
  }

  // 0x110: isize
  get fpGetForm(): Deno.PointerValue {
    return Number(this.view.getBigInt64(272, true));
  }

  // 0x118: isize
  get fpSetForm(): Deno.PointerValue {
    return Number(this.view.getBigInt64(280, true));
  }

  // 0x120: isize
  get fpEnumForms(): Deno.PointerValue {
    return Number(this.view.getBigInt64(288, true));
  }

  // 0x128: isize
  get fpEnumMonitors(): Deno.PointerValue {
    return Number(this.view.getBigInt64(296, true));
  }

  // 0x130: isize
  get fpEnumPorts(): Deno.PointerValue {
    return Number(this.view.getBigInt64(304, true));
  }

  // 0x138: isize
  get fpAddPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(312, true));
  }

  // 0x140: isize
  get fpConfigurePort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(320, true));
  }

  // 0x148: isize
  get fpDeletePort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(328, true));
  }

  // 0x150: isize
  get fpCreatePrinterIC(): Deno.PointerValue {
    return Number(this.view.getBigInt64(336, true));
  }

  // 0x158: isize
  get fpPlayGdiScriptOnPrinterIC(): Deno.PointerValue {
    return Number(this.view.getBigInt64(344, true));
  }

  // 0x160: isize
  get fpDeletePrinterIC(): Deno.PointerValue {
    return Number(this.view.getBigInt64(352, true));
  }

  // 0x168: isize
  get fpAddPrinterConnection(): Deno.PointerValue {
    return Number(this.view.getBigInt64(360, true));
  }

  // 0x170: isize
  get fpDeletePrinterConnection(): Deno.PointerValue {
    return Number(this.view.getBigInt64(368, true));
  }

  // 0x178: isize
  get fpPrinterMessageBox(): Deno.PointerValue {
    return Number(this.view.getBigInt64(376, true));
  }

  // 0x180: isize
  get fpAddMonitor(): Deno.PointerValue {
    return Number(this.view.getBigInt64(384, true));
  }

  // 0x188: isize
  get fpDeleteMonitor(): Deno.PointerValue {
    return Number(this.view.getBigInt64(392, true));
  }

  // 0x190: isize
  get fpResetPrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(400, true));
  }

  // 0x198: isize
  get fpGetPrinterDriverEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(408, true));
  }

  // 0x1a0: isize
  get fpFindFirstPrinterChangeNotification(): Deno.PointerValue {
    return Number(this.view.getBigInt64(416, true));
  }

  // 0x1a8: isize
  get fpFindClosePrinterChangeNotification(): Deno.PointerValue {
    return Number(this.view.getBigInt64(424, true));
  }

  // 0x1b0: isize
  get fpAddPortEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(432, true));
  }

  // 0x1b8: isize
  get fpShutDown(): Deno.PointerValue {
    return Number(this.view.getBigInt64(440, true));
  }

  // 0x1c0: isize
  get fpRefreshPrinterChangeNotification(): Deno.PointerValue {
    return Number(this.view.getBigInt64(448, true));
  }

  // 0x1c8: isize
  get fpOpenPrinterEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(456, true));
  }

  // 0x1d0: isize
  get fpAddPrinterEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(464, true));
  }

  // 0x1d8: isize
  get fpSetPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(472, true));
  }

  // 0x1e0: isize
  get fpEnumPrinterData(): Deno.PointerValue {
    return Number(this.view.getBigInt64(480, true));
  }

  // 0x1e8: isize
  get fpDeletePrinterData(): Deno.PointerValue {
    return Number(this.view.getBigInt64(488, true));
  }

  // 0x1f0: isize
  get fpClusterSplOpen(): Deno.PointerValue {
    return Number(this.view.getBigInt64(496, true));
  }

  // 0x1f8: isize
  get fpClusterSplClose(): Deno.PointerValue {
    return Number(this.view.getBigInt64(504, true));
  }

  // 0x200: isize
  get fpClusterSplIsAlive(): Deno.PointerValue {
    return Number(this.view.getBigInt64(512, true));
  }

  // 0x208: isize
  get fpSetPrinterDataEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(520, true));
  }

  // 0x210: isize
  get fpGetPrinterDataEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(528, true));
  }

  // 0x218: isize
  get fpEnumPrinterDataEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(536, true));
  }

  // 0x220: isize
  get fpEnumPrinterKey(): Deno.PointerValue {
    return Number(this.view.getBigInt64(544, true));
  }

  // 0x228: isize
  get fpDeletePrinterDataEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(552, true));
  }

  // 0x230: isize
  get fpDeletePrinterKey(): Deno.PointerValue {
    return Number(this.view.getBigInt64(560, true));
  }

  // 0x238: isize
  get fpSeekPrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(568, true));
  }

  // 0x240: isize
  get fpDeletePrinterDriverEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(576, true));
  }

  // 0x248: isize
  get fpAddPerMachineConnection(): Deno.PointerValue {
    return Number(this.view.getBigInt64(584, true));
  }

  // 0x250: isize
  get fpDeletePerMachineConnection(): Deno.PointerValue {
    return Number(this.view.getBigInt64(592, true));
  }

  // 0x258: isize
  get fpEnumPerMachineConnections(): Deno.PointerValue {
    return Number(this.view.getBigInt64(600, true));
  }

  // 0x260: isize
  get fpXcvData(): Deno.PointerValue {
    return Number(this.view.getBigInt64(608, true));
  }

  // 0x268: isize
  get fpAddPrinterDriverEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(616, true));
  }

  // 0x270: isize
  get fpSplReadPrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(624, true));
  }

  // 0x278: isize
  get fpDriverUnloadComplete(): Deno.PointerValue {
    return Number(this.view.getBigInt64(632, true));
  }

  // 0x280: isize
  get fpGetSpoolFileInfo(): Deno.PointerValue {
    return Number(this.view.getBigInt64(640, true));
  }

  // 0x288: isize
  get fpCommitSpoolData(): Deno.PointerValue {
    return Number(this.view.getBigInt64(648, true));
  }

  // 0x290: isize
  get fpCloseSpoolFileHandle(): Deno.PointerValue {
    return Number(this.view.getBigInt64(656, true));
  }

  // 0x298: isize
  get fpFlushPrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(664, true));
  }

  // 0x2a0: isize
  get fpSendRecvBidiData(): Deno.PointerValue {
    return Number(this.view.getBigInt64(672, true));
  }

  // 0x2a8: isize
  get fpAddPrinterConnection2(): Deno.PointerValue {
    return Number(this.view.getBigInt64(680, true));
  }

  // 0x2b0: isize
  get fpGetPrintClassObject(): Deno.PointerValue {
    return Number(this.view.getBigInt64(688, true));
  }

  // 0x2b8: isize
  get fpReportJobProcessingProgress(): Deno.PointerValue {
    return Number(this.view.getBigInt64(696, true));
  }

  // 0x2c0: isize
  get fpEnumAndLogProvidorObjects(): Deno.PointerValue {
    return Number(this.view.getBigInt64(704, true));
  }

  // 0x2c8: isize
  get fpInternalGetPrinterDriver(): Deno.PointerValue {
    return Number(this.view.getBigInt64(712, true));
  }

  // 0x2d0: isize
  get fpFindCompatibleDriver(): Deno.PointerValue {
    return Number(this.view.getBigInt64(720, true));
  }

  // 0x2d8: isize
  get fpGetJobNamedPropertyValue(): Deno.PointerValue {
    return Number(this.view.getBigInt64(728, true));
  }

  // 0x2e0: isize
  get fpSetJobNamedProperty(): Deno.PointerValue {
    return Number(this.view.getBigInt64(736, true));
  }

  // 0x2e8: isize
  get fpDeleteJobNamedProperty(): Deno.PointerValue {
    return Number(this.view.getBigInt64(744, true));
  }

  // 0x2f0: isize
  get fpEnumJobNamedProperties(): Deno.PointerValue {
    return Number(this.view.getBigInt64(752, true));
  }

  // 0x2f8: isize
  get fpPowerEvent(): Deno.PointerValue {
    return Number(this.view.getBigInt64(760, true));
  }

  // 0x300: isize
  get fpGetUserPropertyBag(): Deno.PointerValue {
    return Number(this.view.getBigInt64(768, true));
  }

  // 0x308: isize
  get fpCanShutdown(): Deno.PointerValue {
    return Number(this.view.getBigInt64(776, true));
  }

  // 0x310: isize
  get fpLogJobInfoForBranchOffice(): Deno.PointerValue {
    return Number(this.view.getBigInt64(784, true));
  }

  // 0x318: isize
  get fpRegeneratePrintDeviceCapabilities(): Deno.PointerValue {
    return Number(this.view.getBigInt64(792, true));
  }

  // 0x320: isize
  get fpPrintSupportOperation(): Deno.PointerValue {
    return Number(this.view.getBigInt64(800, true));
  }

  // 0x328: isize
  get fpIppCreateJobOnPrinter(): Deno.PointerValue {
    return Number(this.view.getBigInt64(808, true));
  }

  // 0x330: isize
  get fpIppGetJobAttributes(): Deno.PointerValue {
    return Number(this.view.getBigInt64(816, true));
  }

  // 0x338: isize
  get fpIppSetJobAttributes(): Deno.PointerValue {
    return Number(this.view.getBigInt64(824, true));
  }

  // 0x340: isize
  get fpIppGetPrinterAttributes(): Deno.PointerValue {
    return Number(this.view.getBigInt64(832, true));
  }

  // 0x348: isize
  get fpIppSetPrinterAttributes(): Deno.PointerValue {
    return Number(this.view.getBigInt64(840, true));
  }

  // 0x00: isize
  set fpOpenPrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set fpSetJob(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set fpGetJob(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set fpEnumJobs(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set fpAddPrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set fpDeletePrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set fpSetPrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set fpGetPrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set fpEnumPrinters(value: Deno.PointerValue) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set fpAddPrinterDriver(value: Deno.PointerValue) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set fpEnumPrinterDrivers(value: Deno.PointerValue) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set fpGetPrinterDriver(value: Deno.PointerValue) {
    this.view.setBigInt64(88, BigInt(value), true);
  }

  // 0x60: isize
  set fpGetPrinterDriverDirectory(value: Deno.PointerValue) {
    this.view.setBigInt64(96, BigInt(value), true);
  }

  // 0x68: isize
  set fpDeletePrinterDriver(value: Deno.PointerValue) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: isize
  set fpAddPrintProcessor(value: Deno.PointerValue) {
    this.view.setBigInt64(112, BigInt(value), true);
  }

  // 0x78: isize
  set fpEnumPrintProcessors(value: Deno.PointerValue) {
    this.view.setBigInt64(120, BigInt(value), true);
  }

  // 0x80: isize
  set fpGetPrintProcessorDirectory(value: Deno.PointerValue) {
    this.view.setBigInt64(128, BigInt(value), true);
  }

  // 0x88: isize
  set fpDeletePrintProcessor(value: Deno.PointerValue) {
    this.view.setBigInt64(136, BigInt(value), true);
  }

  // 0x90: isize
  set fpEnumPrintProcessorDatatypes(value: Deno.PointerValue) {
    this.view.setBigInt64(144, BigInt(value), true);
  }

  // 0x98: isize
  set fpStartDocPrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(152, BigInt(value), true);
  }

  // 0xa0: isize
  set fpStartPagePrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(160, BigInt(value), true);
  }

  // 0xa8: isize
  set fpWritePrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(168, BigInt(value), true);
  }

  // 0xb0: isize
  set fpEndPagePrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(176, BigInt(value), true);
  }

  // 0xb8: isize
  set fpAbortPrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(184, BigInt(value), true);
  }

  // 0xc0: isize
  set fpReadPrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(192, BigInt(value), true);
  }

  // 0xc8: isize
  set fpEndDocPrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(200, BigInt(value), true);
  }

  // 0xd0: isize
  set fpAddJob(value: Deno.PointerValue) {
    this.view.setBigInt64(208, BigInt(value), true);
  }

  // 0xd8: isize
  set fpScheduleJob(value: Deno.PointerValue) {
    this.view.setBigInt64(216, BigInt(value), true);
  }

  // 0xe0: isize
  set fpGetPrinterData(value: Deno.PointerValue) {
    this.view.setBigInt64(224, BigInt(value), true);
  }

  // 0xe8: isize
  set fpSetPrinterData(value: Deno.PointerValue) {
    this.view.setBigInt64(232, BigInt(value), true);
  }

  // 0xf0: isize
  set fpWaitForPrinterChange(value: Deno.PointerValue) {
    this.view.setBigInt64(240, BigInt(value), true);
  }

  // 0xf8: isize
  set fpClosePrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(248, BigInt(value), true);
  }

  // 0x100: isize
  set fpAddForm(value: Deno.PointerValue) {
    this.view.setBigInt64(256, BigInt(value), true);
  }

  // 0x108: isize
  set fpDeleteForm(value: Deno.PointerValue) {
    this.view.setBigInt64(264, BigInt(value), true);
  }

  // 0x110: isize
  set fpGetForm(value: Deno.PointerValue) {
    this.view.setBigInt64(272, BigInt(value), true);
  }

  // 0x118: isize
  set fpSetForm(value: Deno.PointerValue) {
    this.view.setBigInt64(280, BigInt(value), true);
  }

  // 0x120: isize
  set fpEnumForms(value: Deno.PointerValue) {
    this.view.setBigInt64(288, BigInt(value), true);
  }

  // 0x128: isize
  set fpEnumMonitors(value: Deno.PointerValue) {
    this.view.setBigInt64(296, BigInt(value), true);
  }

  // 0x130: isize
  set fpEnumPorts(value: Deno.PointerValue) {
    this.view.setBigInt64(304, BigInt(value), true);
  }

  // 0x138: isize
  set fpAddPort(value: Deno.PointerValue) {
    this.view.setBigInt64(312, BigInt(value), true);
  }

  // 0x140: isize
  set fpConfigurePort(value: Deno.PointerValue) {
    this.view.setBigInt64(320, BigInt(value), true);
  }

  // 0x148: isize
  set fpDeletePort(value: Deno.PointerValue) {
    this.view.setBigInt64(328, BigInt(value), true);
  }

  // 0x150: isize
  set fpCreatePrinterIC(value: Deno.PointerValue) {
    this.view.setBigInt64(336, BigInt(value), true);
  }

  // 0x158: isize
  set fpPlayGdiScriptOnPrinterIC(value: Deno.PointerValue) {
    this.view.setBigInt64(344, BigInt(value), true);
  }

  // 0x160: isize
  set fpDeletePrinterIC(value: Deno.PointerValue) {
    this.view.setBigInt64(352, BigInt(value), true);
  }

  // 0x168: isize
  set fpAddPrinterConnection(value: Deno.PointerValue) {
    this.view.setBigInt64(360, BigInt(value), true);
  }

  // 0x170: isize
  set fpDeletePrinterConnection(value: Deno.PointerValue) {
    this.view.setBigInt64(368, BigInt(value), true);
  }

  // 0x178: isize
  set fpPrinterMessageBox(value: Deno.PointerValue) {
    this.view.setBigInt64(376, BigInt(value), true);
  }

  // 0x180: isize
  set fpAddMonitor(value: Deno.PointerValue) {
    this.view.setBigInt64(384, BigInt(value), true);
  }

  // 0x188: isize
  set fpDeleteMonitor(value: Deno.PointerValue) {
    this.view.setBigInt64(392, BigInt(value), true);
  }

  // 0x190: isize
  set fpResetPrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(400, BigInt(value), true);
  }

  // 0x198: isize
  set fpGetPrinterDriverEx(value: Deno.PointerValue) {
    this.view.setBigInt64(408, BigInt(value), true);
  }

  // 0x1a0: isize
  set fpFindFirstPrinterChangeNotification(value: Deno.PointerValue) {
    this.view.setBigInt64(416, BigInt(value), true);
  }

  // 0x1a8: isize
  set fpFindClosePrinterChangeNotification(value: Deno.PointerValue) {
    this.view.setBigInt64(424, BigInt(value), true);
  }

  // 0x1b0: isize
  set fpAddPortEx(value: Deno.PointerValue) {
    this.view.setBigInt64(432, BigInt(value), true);
  }

  // 0x1b8: isize
  set fpShutDown(value: Deno.PointerValue) {
    this.view.setBigInt64(440, BigInt(value), true);
  }

  // 0x1c0: isize
  set fpRefreshPrinterChangeNotification(value: Deno.PointerValue) {
    this.view.setBigInt64(448, BigInt(value), true);
  }

  // 0x1c8: isize
  set fpOpenPrinterEx(value: Deno.PointerValue) {
    this.view.setBigInt64(456, BigInt(value), true);
  }

  // 0x1d0: isize
  set fpAddPrinterEx(value: Deno.PointerValue) {
    this.view.setBigInt64(464, BigInt(value), true);
  }

  // 0x1d8: isize
  set fpSetPort(value: Deno.PointerValue) {
    this.view.setBigInt64(472, BigInt(value), true);
  }

  // 0x1e0: isize
  set fpEnumPrinterData(value: Deno.PointerValue) {
    this.view.setBigInt64(480, BigInt(value), true);
  }

  // 0x1e8: isize
  set fpDeletePrinterData(value: Deno.PointerValue) {
    this.view.setBigInt64(488, BigInt(value), true);
  }

  // 0x1f0: isize
  set fpClusterSplOpen(value: Deno.PointerValue) {
    this.view.setBigInt64(496, BigInt(value), true);
  }

  // 0x1f8: isize
  set fpClusterSplClose(value: Deno.PointerValue) {
    this.view.setBigInt64(504, BigInt(value), true);
  }

  // 0x200: isize
  set fpClusterSplIsAlive(value: Deno.PointerValue) {
    this.view.setBigInt64(512, BigInt(value), true);
  }

  // 0x208: isize
  set fpSetPrinterDataEx(value: Deno.PointerValue) {
    this.view.setBigInt64(520, BigInt(value), true);
  }

  // 0x210: isize
  set fpGetPrinterDataEx(value: Deno.PointerValue) {
    this.view.setBigInt64(528, BigInt(value), true);
  }

  // 0x218: isize
  set fpEnumPrinterDataEx(value: Deno.PointerValue) {
    this.view.setBigInt64(536, BigInt(value), true);
  }

  // 0x220: isize
  set fpEnumPrinterKey(value: Deno.PointerValue) {
    this.view.setBigInt64(544, BigInt(value), true);
  }

  // 0x228: isize
  set fpDeletePrinterDataEx(value: Deno.PointerValue) {
    this.view.setBigInt64(552, BigInt(value), true);
  }

  // 0x230: isize
  set fpDeletePrinterKey(value: Deno.PointerValue) {
    this.view.setBigInt64(560, BigInt(value), true);
  }

  // 0x238: isize
  set fpSeekPrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(568, BigInt(value), true);
  }

  // 0x240: isize
  set fpDeletePrinterDriverEx(value: Deno.PointerValue) {
    this.view.setBigInt64(576, BigInt(value), true);
  }

  // 0x248: isize
  set fpAddPerMachineConnection(value: Deno.PointerValue) {
    this.view.setBigInt64(584, BigInt(value), true);
  }

  // 0x250: isize
  set fpDeletePerMachineConnection(value: Deno.PointerValue) {
    this.view.setBigInt64(592, BigInt(value), true);
  }

  // 0x258: isize
  set fpEnumPerMachineConnections(value: Deno.PointerValue) {
    this.view.setBigInt64(600, BigInt(value), true);
  }

  // 0x260: isize
  set fpXcvData(value: Deno.PointerValue) {
    this.view.setBigInt64(608, BigInt(value), true);
  }

  // 0x268: isize
  set fpAddPrinterDriverEx(value: Deno.PointerValue) {
    this.view.setBigInt64(616, BigInt(value), true);
  }

  // 0x270: isize
  set fpSplReadPrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(624, BigInt(value), true);
  }

  // 0x278: isize
  set fpDriverUnloadComplete(value: Deno.PointerValue) {
    this.view.setBigInt64(632, BigInt(value), true);
  }

  // 0x280: isize
  set fpGetSpoolFileInfo(value: Deno.PointerValue) {
    this.view.setBigInt64(640, BigInt(value), true);
  }

  // 0x288: isize
  set fpCommitSpoolData(value: Deno.PointerValue) {
    this.view.setBigInt64(648, BigInt(value), true);
  }

  // 0x290: isize
  set fpCloseSpoolFileHandle(value: Deno.PointerValue) {
    this.view.setBigInt64(656, BigInt(value), true);
  }

  // 0x298: isize
  set fpFlushPrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(664, BigInt(value), true);
  }

  // 0x2a0: isize
  set fpSendRecvBidiData(value: Deno.PointerValue) {
    this.view.setBigInt64(672, BigInt(value), true);
  }

  // 0x2a8: isize
  set fpAddPrinterConnection2(value: Deno.PointerValue) {
    this.view.setBigInt64(680, BigInt(value), true);
  }

  // 0x2b0: isize
  set fpGetPrintClassObject(value: Deno.PointerValue) {
    this.view.setBigInt64(688, BigInt(value), true);
  }

  // 0x2b8: isize
  set fpReportJobProcessingProgress(value: Deno.PointerValue) {
    this.view.setBigInt64(696, BigInt(value), true);
  }

  // 0x2c0: isize
  set fpEnumAndLogProvidorObjects(value: Deno.PointerValue) {
    this.view.setBigInt64(704, BigInt(value), true);
  }

  // 0x2c8: isize
  set fpInternalGetPrinterDriver(value: Deno.PointerValue) {
    this.view.setBigInt64(712, BigInt(value), true);
  }

  // 0x2d0: isize
  set fpFindCompatibleDriver(value: Deno.PointerValue) {
    this.view.setBigInt64(720, BigInt(value), true);
  }

  // 0x2d8: isize
  set fpGetJobNamedPropertyValue(value: Deno.PointerValue) {
    this.view.setBigInt64(728, BigInt(value), true);
  }

  // 0x2e0: isize
  set fpSetJobNamedProperty(value: Deno.PointerValue) {
    this.view.setBigInt64(736, BigInt(value), true);
  }

  // 0x2e8: isize
  set fpDeleteJobNamedProperty(value: Deno.PointerValue) {
    this.view.setBigInt64(744, BigInt(value), true);
  }

  // 0x2f0: isize
  set fpEnumJobNamedProperties(value: Deno.PointerValue) {
    this.view.setBigInt64(752, BigInt(value), true);
  }

  // 0x2f8: isize
  set fpPowerEvent(value: Deno.PointerValue) {
    this.view.setBigInt64(760, BigInt(value), true);
  }

  // 0x300: isize
  set fpGetUserPropertyBag(value: Deno.PointerValue) {
    this.view.setBigInt64(768, BigInt(value), true);
  }

  // 0x308: isize
  set fpCanShutdown(value: Deno.PointerValue) {
    this.view.setBigInt64(776, BigInt(value), true);
  }

  // 0x310: isize
  set fpLogJobInfoForBranchOffice(value: Deno.PointerValue) {
    this.view.setBigInt64(784, BigInt(value), true);
  }

  // 0x318: isize
  set fpRegeneratePrintDeviceCapabilities(value: Deno.PointerValue) {
    this.view.setBigInt64(792, BigInt(value), true);
  }

  // 0x320: isize
  set fpPrintSupportOperation(value: Deno.PointerValue) {
    this.view.setBigInt64(800, BigInt(value), true);
  }

  // 0x328: isize
  set fpIppCreateJobOnPrinter(value: Deno.PointerValue) {
    this.view.setBigInt64(808, BigInt(value), true);
  }

  // 0x330: isize
  set fpIppGetJobAttributes(value: Deno.PointerValue) {
    this.view.setBigInt64(816, BigInt(value), true);
  }

  // 0x338: isize
  set fpIppSetJobAttributes(value: Deno.PointerValue) {
    this.view.setBigInt64(824, BigInt(value), true);
  }

  // 0x340: isize
  set fpIppGetPrinterAttributes(value: Deno.PointerValue) {
    this.view.setBigInt64(832, BigInt(value), true);
  }

  // 0x348: isize
  set fpIppSetPrinterAttributes(value: Deno.PointerValue) {
    this.view.setBigInt64(840, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.PRINTPROCESSOROPENDATA (size: 56)
 */
export interface PRINTPROCESSOROPENDATA {
  /** ptr */
  pDevMode: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDatatype: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pParameters: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pDocumentName: string | null | Uint8Array | Uint16Array;
  /** u32 */
  JobId: number;
  /** Windows.Win32.Foundation.PWSTR */
  pOutputFile: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pPrinterName: string | null | Uint8Array | Uint16Array;
}

export const sizeofPRINTPROCESSOROPENDATA = 56;

export function allocPRINTPROCESSOROPENDATA(data?: Partial<PRINTPROCESSOROPENDATA>): Uint8Array {
  const buf = new Uint8Array(sizeofPRINTPROCESSOROPENDATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pDevMode !== undefined) view.setBigUint64(0, data.pDevMode === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pDevMode))), true);
  // 0x08: buffer
  if (data?.pDatatype !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pDatatype);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pParameters !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pParameters);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: buffer
  if (data?.pDocumentName !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pDocumentName);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f24))), true);
  }
  // 0x20: u32
  if (data?.JobId !== undefined) view.setUint32(32, Number(data.JobId), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.pOutputFile !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pOutputFile);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  // 0x30: buffer
  if (data?.pPrinterName !== undefined) {
    (buf as any)._f48 = util.pwstrToFfi(data.pPrinterName);
    view.setBigUint64(48, (buf as any)._f48 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f48))), true);
  }
  return buf;
}

export class PRINTPROCESSOROPENDATAView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get pDevMode(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(0, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x08: buffer
  get pDatatype(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pParameters(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: buffer
  get pDocumentName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: u32
  get JobId(): number {
    return this.view.getUint32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get pOutputFile(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x30: buffer
  get pPrinterName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(48, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: pointer
  set pDevMode(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(0, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x08: buffer
  set pDatatype(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pParameters(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: buffer
  set pDocumentName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f24 = value;
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f24))), true);
  }

  // 0x20: u32
  set JobId(value: number) {
    this.view.setUint32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set pOutputFile(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }

  // 0x30: buffer
  set pPrinterName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f48 = value;
    this.view.setBigUint64(48, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f48))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MONITORREG (size: 88)
 */
export interface MONITORREG {
  /** u32 */
  cbSize: number;
  /** isize */
  fpCreateKey: Deno.PointerValue;
  /** isize */
  fpOpenKey: Deno.PointerValue;
  /** isize */
  fpCloseKey: Deno.PointerValue;
  /** isize */
  fpDeleteKey: Deno.PointerValue;
  /** isize */
  fpEnumKey: Deno.PointerValue;
  /** isize */
  fpQueryInfoKey: Deno.PointerValue;
  /** isize */
  fpSetValue: Deno.PointerValue;
  /** isize */
  fpDeleteValue: Deno.PointerValue;
  /** isize */
  fpEnumValue: Deno.PointerValue;
  /** isize */
  fpQueryValue: Deno.PointerValue;
}

export const sizeofMONITORREG = 88;

export function allocMONITORREG(data?: Partial<MONITORREG>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITORREG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.fpCreateKey !== undefined) view.setBigInt64(8, BigInt(data.fpCreateKey), true);
  // 0x10: isize
  if (data?.fpOpenKey !== undefined) view.setBigInt64(16, BigInt(data.fpOpenKey), true);
  // 0x18: isize
  if (data?.fpCloseKey !== undefined) view.setBigInt64(24, BigInt(data.fpCloseKey), true);
  // 0x20: isize
  if (data?.fpDeleteKey !== undefined) view.setBigInt64(32, BigInt(data.fpDeleteKey), true);
  // 0x28: isize
  if (data?.fpEnumKey !== undefined) view.setBigInt64(40, BigInt(data.fpEnumKey), true);
  // 0x30: isize
  if (data?.fpQueryInfoKey !== undefined) view.setBigInt64(48, BigInt(data.fpQueryInfoKey), true);
  // 0x38: isize
  if (data?.fpSetValue !== undefined) view.setBigInt64(56, BigInt(data.fpSetValue), true);
  // 0x40: isize
  if (data?.fpDeleteValue !== undefined) view.setBigInt64(64, BigInt(data.fpDeleteValue), true);
  // 0x48: isize
  if (data?.fpEnumValue !== undefined) view.setBigInt64(72, BigInt(data.fpEnumValue), true);
  // 0x50: isize
  if (data?.fpQueryValue !== undefined) view.setBigInt64(80, BigInt(data.fpQueryValue), true);
  return buf;
}

export class MONITORREGView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: isize
  get fpCreateKey(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get fpOpenKey(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get fpCloseKey(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get fpDeleteKey(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get fpEnumKey(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get fpQueryInfoKey(): Deno.PointerValue {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get fpSetValue(): Deno.PointerValue {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get fpDeleteValue(): Deno.PointerValue {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get fpEnumValue(): Deno.PointerValue {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get fpQueryValue(): Deno.PointerValue {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: isize
  set fpCreateKey(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set fpOpenKey(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set fpCloseKey(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set fpDeleteKey(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set fpEnumKey(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set fpQueryInfoKey(value: Deno.PointerValue) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set fpSetValue(value: Deno.PointerValue) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set fpDeleteValue(value: Deno.PointerValue) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set fpEnumValue(value: Deno.PointerValue) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set fpQueryValue(value: Deno.PointerValue) {
    this.view.setBigInt64(80, BigInt(value), true);
  }
}

export type HKEY = Deno.PointerValue;

/**
 * Windows.Win32.Graphics.Printing.MONITORINIT (size: 48)
 */
export interface MONITORINIT {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.HANDLE */
  hSpooler: Uint8Array | Deno.PointerValue;
  /** Windows.Win32.System.Registry.HKEY */
  hckRegistryRoot: Uint8Array | Deno.PointerValue;
  /** ptr */
  pMonitorReg: Deno.PointerValue | Uint8Array;
  /** Windows.Win32.Foundation.BOOL */
  bLocal: boolean;
  /** Windows.Win32.Foundation.PWSTR */
  pszServerName: string | null | Uint8Array | Uint16Array;
}

export const sizeofMONITORINIT = 48;

export function allocMONITORINIT(data?: Partial<MONITORINIT>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITORINIT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.hSpooler !== undefined) view.setBigUint64(8, data.hSpooler === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hSpooler))), true);
  // 0x10: pointer
  if (data?.hckRegistryRoot !== undefined) view.setBigUint64(16, data.hckRegistryRoot === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.hckRegistryRoot))), true);
  // 0x18: pointer
  if (data?.pMonitorReg !== undefined) view.setBigUint64(24, data.pMonitorReg === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pMonitorReg))), true);
  // 0x20: i32
  if (data?.bLocal !== undefined) view.setInt32(32, Number(data.bLocal), true);
  // 0x24: pad4
  // 0x28: buffer
  if (data?.pszServerName !== undefined) {
    (buf as any)._f40 = util.pwstrToFfi(data.pszServerName);
    view.setBigUint64(40, (buf as any)._f40 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f40))), true);
  }
  return buf;
}

export class MONITORINITView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get hSpooler(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get hckRegistryRoot(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: pointer
  get pMonitorReg(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(24, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x20: i32
  get bLocal(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  get pszServerName(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(40, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set hSpooler(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set hckRegistryRoot(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x18: pointer
  set pMonitorReg(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(24, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x20: i32
  set bLocal(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4

  // 0x28: buffer
  set pszServerName(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f40 = value;
    this.view.setBigUint64(40, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f40))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MONITOR (size: 136)
 */
export interface MONITOR {
  /** isize */
  pfnEnumPorts: Deno.PointerValue;
  /** isize */
  pfnOpenPort: Deno.PointerValue;
  /** isize */
  pfnOpenPortEx: Deno.PointerValue;
  /** isize */
  pfnStartDocPort: Deno.PointerValue;
  /** isize */
  pfnWritePort: Deno.PointerValue;
  /** isize */
  pfnReadPort: Deno.PointerValue;
  /** isize */
  pfnEndDocPort: Deno.PointerValue;
  /** isize */
  pfnClosePort: Deno.PointerValue;
  /** isize */
  pfnAddPort: Deno.PointerValue;
  /** isize */
  pfnAddPortEx: Deno.PointerValue;
  /** isize */
  pfnConfigurePort: Deno.PointerValue;
  /** isize */
  pfnDeletePort: Deno.PointerValue;
  /** isize */
  pfnGetPrinterDataFromPort: Deno.PointerValue;
  /** isize */
  pfnSetPortTimeOuts: Deno.PointerValue;
  /** isize */
  pfnXcvOpenPort: Deno.PointerValue;
  /** isize */
  pfnXcvDataPort: Deno.PointerValue;
  /** isize */
  pfnXcvClosePort: Deno.PointerValue;
}

export const sizeofMONITOR = 136;

export function allocMONITOR(data?: Partial<MONITOR>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITOR);
  const view = new DataView(buf.buffer);
  // 0x00: isize
  if (data?.pfnEnumPorts !== undefined) view.setBigInt64(0, BigInt(data.pfnEnumPorts), true);
  // 0x08: isize
  if (data?.pfnOpenPort !== undefined) view.setBigInt64(8, BigInt(data.pfnOpenPort), true);
  // 0x10: isize
  if (data?.pfnOpenPortEx !== undefined) view.setBigInt64(16, BigInt(data.pfnOpenPortEx), true);
  // 0x18: isize
  if (data?.pfnStartDocPort !== undefined) view.setBigInt64(24, BigInt(data.pfnStartDocPort), true);
  // 0x20: isize
  if (data?.pfnWritePort !== undefined) view.setBigInt64(32, BigInt(data.pfnWritePort), true);
  // 0x28: isize
  if (data?.pfnReadPort !== undefined) view.setBigInt64(40, BigInt(data.pfnReadPort), true);
  // 0x30: isize
  if (data?.pfnEndDocPort !== undefined) view.setBigInt64(48, BigInt(data.pfnEndDocPort), true);
  // 0x38: isize
  if (data?.pfnClosePort !== undefined) view.setBigInt64(56, BigInt(data.pfnClosePort), true);
  // 0x40: isize
  if (data?.pfnAddPort !== undefined) view.setBigInt64(64, BigInt(data.pfnAddPort), true);
  // 0x48: isize
  if (data?.pfnAddPortEx !== undefined) view.setBigInt64(72, BigInt(data.pfnAddPortEx), true);
  // 0x50: isize
  if (data?.pfnConfigurePort !== undefined) view.setBigInt64(80, BigInt(data.pfnConfigurePort), true);
  // 0x58: isize
  if (data?.pfnDeletePort !== undefined) view.setBigInt64(88, BigInt(data.pfnDeletePort), true);
  // 0x60: isize
  if (data?.pfnGetPrinterDataFromPort !== undefined) view.setBigInt64(96, BigInt(data.pfnGetPrinterDataFromPort), true);
  // 0x68: isize
  if (data?.pfnSetPortTimeOuts !== undefined) view.setBigInt64(104, BigInt(data.pfnSetPortTimeOuts), true);
  // 0x70: isize
  if (data?.pfnXcvOpenPort !== undefined) view.setBigInt64(112, BigInt(data.pfnXcvOpenPort), true);
  // 0x78: isize
  if (data?.pfnXcvDataPort !== undefined) view.setBigInt64(120, BigInt(data.pfnXcvDataPort), true);
  // 0x80: isize
  if (data?.pfnXcvClosePort !== undefined) view.setBigInt64(128, BigInt(data.pfnXcvClosePort), true);
  return buf;
}

export class MONITORView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: isize
  get pfnEnumPorts(): Deno.PointerValue {
    return Number(this.view.getBigInt64(0, true));
  }

  // 0x08: isize
  get pfnOpenPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get pfnOpenPortEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get pfnStartDocPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get pfnWritePort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get pfnReadPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get pfnEndDocPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get pfnClosePort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get pfnAddPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get pfnAddPortEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get pfnConfigurePort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get pfnDeletePort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x60: isize
  get pfnGetPrinterDataFromPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x68: isize
  get pfnSetPortTimeOuts(): Deno.PointerValue {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: isize
  get pfnXcvOpenPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x78: isize
  get pfnXcvDataPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(120, true));
  }

  // 0x80: isize
  get pfnXcvClosePort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(128, true));
  }

  // 0x00: isize
  set pfnEnumPorts(value: Deno.PointerValue) {
    this.view.setBigInt64(0, BigInt(value), true);
  }

  // 0x08: isize
  set pfnOpenPort(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set pfnOpenPortEx(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set pfnStartDocPort(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set pfnWritePort(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set pfnReadPort(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set pfnEndDocPort(value: Deno.PointerValue) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set pfnClosePort(value: Deno.PointerValue) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set pfnAddPort(value: Deno.PointerValue) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set pfnAddPortEx(value: Deno.PointerValue) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set pfnConfigurePort(value: Deno.PointerValue) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set pfnDeletePort(value: Deno.PointerValue) {
    this.view.setBigInt64(88, BigInt(value), true);
  }

  // 0x60: isize
  set pfnGetPrinterDataFromPort(value: Deno.PointerValue) {
    this.view.setBigInt64(96, BigInt(value), true);
  }

  // 0x68: isize
  set pfnSetPortTimeOuts(value: Deno.PointerValue) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: isize
  set pfnXcvOpenPort(value: Deno.PointerValue) {
    this.view.setBigInt64(112, BigInt(value), true);
  }

  // 0x78: isize
  set pfnXcvDataPort(value: Deno.PointerValue) {
    this.view.setBigInt64(120, BigInt(value), true);
  }

  // 0x80: isize
  set pfnXcvClosePort(value: Deno.PointerValue) {
    this.view.setBigInt64(128, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MONITOREX (size: 16)
 */
export interface MONITOREX {
  /** u32 */
  dwMonitorSize: number;
  /** Windows.Win32.Graphics.Printing.MONITOR */
  Monitor: Uint8Array | Deno.PointerValue;
}

export const sizeofMONITOREX = 16;

export function allocMONITOREX(data?: Partial<MONITOREX>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITOREX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMonitorSize !== undefined) view.setUint32(0, Number(data.dwMonitorSize), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Monitor !== undefined) view.setBigUint64(8, data.Monitor === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.Monitor))), true);
  return buf;
}

export class MONITOREXView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMonitorSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get Monitor(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set dwMonitorSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set Monitor(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MONITOR2 (size: 184)
 */
export interface MONITOR2 {
  /** u32 */
  cbSize: number;
  /** isize */
  pfnEnumPorts: Deno.PointerValue;
  /** isize */
  pfnOpenPort: Deno.PointerValue;
  /** isize */
  pfnOpenPortEx: Deno.PointerValue;
  /** isize */
  pfnStartDocPort: Deno.PointerValue;
  /** isize */
  pfnWritePort: Deno.PointerValue;
  /** isize */
  pfnReadPort: Deno.PointerValue;
  /** isize */
  pfnEndDocPort: Deno.PointerValue;
  /** isize */
  pfnClosePort: Deno.PointerValue;
  /** isize */
  pfnAddPort: Deno.PointerValue;
  /** isize */
  pfnAddPortEx: Deno.PointerValue;
  /** isize */
  pfnConfigurePort: Deno.PointerValue;
  /** isize */
  pfnDeletePort: Deno.PointerValue;
  /** isize */
  pfnGetPrinterDataFromPort: Deno.PointerValue;
  /** isize */
  pfnSetPortTimeOuts: Deno.PointerValue;
  /** isize */
  pfnXcvOpenPort: Deno.PointerValue;
  /** isize */
  pfnXcvDataPort: Deno.PointerValue;
  /** isize */
  pfnXcvClosePort: Deno.PointerValue;
  /** isize */
  pfnShutdown: Deno.PointerValue;
  /** isize */
  pfnSendRecvBidiDataFromPort: Deno.PointerValue;
  /** isize */
  pfnNotifyUsedPorts: Deno.PointerValue;
  /** isize */
  pfnNotifyUnusedPorts: Deno.PointerValue;
  /** isize */
  pfnPowerEvent: Deno.PointerValue;
}

export const sizeofMONITOR2 = 184;

export function allocMONITOR2(data?: Partial<MONITOR2>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITOR2);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.pfnEnumPorts !== undefined) view.setBigInt64(8, BigInt(data.pfnEnumPorts), true);
  // 0x10: isize
  if (data?.pfnOpenPort !== undefined) view.setBigInt64(16, BigInt(data.pfnOpenPort), true);
  // 0x18: isize
  if (data?.pfnOpenPortEx !== undefined) view.setBigInt64(24, BigInt(data.pfnOpenPortEx), true);
  // 0x20: isize
  if (data?.pfnStartDocPort !== undefined) view.setBigInt64(32, BigInt(data.pfnStartDocPort), true);
  // 0x28: isize
  if (data?.pfnWritePort !== undefined) view.setBigInt64(40, BigInt(data.pfnWritePort), true);
  // 0x30: isize
  if (data?.pfnReadPort !== undefined) view.setBigInt64(48, BigInt(data.pfnReadPort), true);
  // 0x38: isize
  if (data?.pfnEndDocPort !== undefined) view.setBigInt64(56, BigInt(data.pfnEndDocPort), true);
  // 0x40: isize
  if (data?.pfnClosePort !== undefined) view.setBigInt64(64, BigInt(data.pfnClosePort), true);
  // 0x48: isize
  if (data?.pfnAddPort !== undefined) view.setBigInt64(72, BigInt(data.pfnAddPort), true);
  // 0x50: isize
  if (data?.pfnAddPortEx !== undefined) view.setBigInt64(80, BigInt(data.pfnAddPortEx), true);
  // 0x58: isize
  if (data?.pfnConfigurePort !== undefined) view.setBigInt64(88, BigInt(data.pfnConfigurePort), true);
  // 0x60: isize
  if (data?.pfnDeletePort !== undefined) view.setBigInt64(96, BigInt(data.pfnDeletePort), true);
  // 0x68: isize
  if (data?.pfnGetPrinterDataFromPort !== undefined) view.setBigInt64(104, BigInt(data.pfnGetPrinterDataFromPort), true);
  // 0x70: isize
  if (data?.pfnSetPortTimeOuts !== undefined) view.setBigInt64(112, BigInt(data.pfnSetPortTimeOuts), true);
  // 0x78: isize
  if (data?.pfnXcvOpenPort !== undefined) view.setBigInt64(120, BigInt(data.pfnXcvOpenPort), true);
  // 0x80: isize
  if (data?.pfnXcvDataPort !== undefined) view.setBigInt64(128, BigInt(data.pfnXcvDataPort), true);
  // 0x88: isize
  if (data?.pfnXcvClosePort !== undefined) view.setBigInt64(136, BigInt(data.pfnXcvClosePort), true);
  // 0x90: isize
  if (data?.pfnShutdown !== undefined) view.setBigInt64(144, BigInt(data.pfnShutdown), true);
  // 0x98: isize
  if (data?.pfnSendRecvBidiDataFromPort !== undefined) view.setBigInt64(152, BigInt(data.pfnSendRecvBidiDataFromPort), true);
  // 0xa0: isize
  if (data?.pfnNotifyUsedPorts !== undefined) view.setBigInt64(160, BigInt(data.pfnNotifyUsedPorts), true);
  // 0xa8: isize
  if (data?.pfnNotifyUnusedPorts !== undefined) view.setBigInt64(168, BigInt(data.pfnNotifyUnusedPorts), true);
  // 0xb0: isize
  if (data?.pfnPowerEvent !== undefined) view.setBigInt64(176, BigInt(data.pfnPowerEvent), true);
  return buf;
}

export class MONITOR2View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: isize
  get pfnEnumPorts(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get pfnOpenPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get pfnOpenPortEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x20: isize
  get pfnStartDocPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(32, true));
  }

  // 0x28: isize
  get pfnWritePort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(40, true));
  }

  // 0x30: isize
  get pfnReadPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(48, true));
  }

  // 0x38: isize
  get pfnEndDocPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(56, true));
  }

  // 0x40: isize
  get pfnClosePort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(64, true));
  }

  // 0x48: isize
  get pfnAddPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(72, true));
  }

  // 0x50: isize
  get pfnAddPortEx(): Deno.PointerValue {
    return Number(this.view.getBigInt64(80, true));
  }

  // 0x58: isize
  get pfnConfigurePort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(88, true));
  }

  // 0x60: isize
  get pfnDeletePort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(96, true));
  }

  // 0x68: isize
  get pfnGetPrinterDataFromPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(104, true));
  }

  // 0x70: isize
  get pfnSetPortTimeOuts(): Deno.PointerValue {
    return Number(this.view.getBigInt64(112, true));
  }

  // 0x78: isize
  get pfnXcvOpenPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(120, true));
  }

  // 0x80: isize
  get pfnXcvDataPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(128, true));
  }

  // 0x88: isize
  get pfnXcvClosePort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(136, true));
  }

  // 0x90: isize
  get pfnShutdown(): Deno.PointerValue {
    return Number(this.view.getBigInt64(144, true));
  }

  // 0x98: isize
  get pfnSendRecvBidiDataFromPort(): Deno.PointerValue {
    return Number(this.view.getBigInt64(152, true));
  }

  // 0xa0: isize
  get pfnNotifyUsedPorts(): Deno.PointerValue {
    return Number(this.view.getBigInt64(160, true));
  }

  // 0xa8: isize
  get pfnNotifyUnusedPorts(): Deno.PointerValue {
    return Number(this.view.getBigInt64(168, true));
  }

  // 0xb0: isize
  get pfnPowerEvent(): Deno.PointerValue {
    return Number(this.view.getBigInt64(176, true));
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: isize
  set pfnEnumPorts(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set pfnOpenPort(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set pfnOpenPortEx(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }

  // 0x20: isize
  set pfnStartDocPort(value: Deno.PointerValue) {
    this.view.setBigInt64(32, BigInt(value), true);
  }

  // 0x28: isize
  set pfnWritePort(value: Deno.PointerValue) {
    this.view.setBigInt64(40, BigInt(value), true);
  }

  // 0x30: isize
  set pfnReadPort(value: Deno.PointerValue) {
    this.view.setBigInt64(48, BigInt(value), true);
  }

  // 0x38: isize
  set pfnEndDocPort(value: Deno.PointerValue) {
    this.view.setBigInt64(56, BigInt(value), true);
  }

  // 0x40: isize
  set pfnClosePort(value: Deno.PointerValue) {
    this.view.setBigInt64(64, BigInt(value), true);
  }

  // 0x48: isize
  set pfnAddPort(value: Deno.PointerValue) {
    this.view.setBigInt64(72, BigInt(value), true);
  }

  // 0x50: isize
  set pfnAddPortEx(value: Deno.PointerValue) {
    this.view.setBigInt64(80, BigInt(value), true);
  }

  // 0x58: isize
  set pfnConfigurePort(value: Deno.PointerValue) {
    this.view.setBigInt64(88, BigInt(value), true);
  }

  // 0x60: isize
  set pfnDeletePort(value: Deno.PointerValue) {
    this.view.setBigInt64(96, BigInt(value), true);
  }

  // 0x68: isize
  set pfnGetPrinterDataFromPort(value: Deno.PointerValue) {
    this.view.setBigInt64(104, BigInt(value), true);
  }

  // 0x70: isize
  set pfnSetPortTimeOuts(value: Deno.PointerValue) {
    this.view.setBigInt64(112, BigInt(value), true);
  }

  // 0x78: isize
  set pfnXcvOpenPort(value: Deno.PointerValue) {
    this.view.setBigInt64(120, BigInt(value), true);
  }

  // 0x80: isize
  set pfnXcvDataPort(value: Deno.PointerValue) {
    this.view.setBigInt64(128, BigInt(value), true);
  }

  // 0x88: isize
  set pfnXcvClosePort(value: Deno.PointerValue) {
    this.view.setBigInt64(136, BigInt(value), true);
  }

  // 0x90: isize
  set pfnShutdown(value: Deno.PointerValue) {
    this.view.setBigInt64(144, BigInt(value), true);
  }

  // 0x98: isize
  set pfnSendRecvBidiDataFromPort(value: Deno.PointerValue) {
    this.view.setBigInt64(152, BigInt(value), true);
  }

  // 0xa0: isize
  set pfnNotifyUsedPorts(value: Deno.PointerValue) {
    this.view.setBigInt64(160, BigInt(value), true);
  }

  // 0xa8: isize
  set pfnNotifyUnusedPorts(value: Deno.PointerValue) {
    this.view.setBigInt64(168, BigInt(value), true);
  }

  // 0xb0: isize
  set pfnPowerEvent(value: Deno.PointerValue) {
    this.view.setBigInt64(176, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MONITORUI (size: 32)
 */
export interface MONITORUI {
  /** u32 */
  dwMonitorUISize: number;
  /** isize */
  pfnAddPortUI: Deno.PointerValue;
  /** isize */
  pfnConfigurePortUI: Deno.PointerValue;
  /** isize */
  pfnDeletePortUI: Deno.PointerValue;
}

export const sizeofMONITORUI = 32;

export function allocMONITORUI(data?: Partial<MONITORUI>): Uint8Array {
  const buf = new Uint8Array(sizeofMONITORUI);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.dwMonitorUISize !== undefined) view.setUint32(0, Number(data.dwMonitorUISize), true);
  // 0x04: pad4
  // 0x08: isize
  if (data?.pfnAddPortUI !== undefined) view.setBigInt64(8, BigInt(data.pfnAddPortUI), true);
  // 0x10: isize
  if (data?.pfnConfigurePortUI !== undefined) view.setBigInt64(16, BigInt(data.pfnConfigurePortUI), true);
  // 0x18: isize
  if (data?.pfnDeletePortUI !== undefined) view.setBigInt64(24, BigInt(data.pfnDeletePortUI), true);
  return buf;
}

export class MONITORUIView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get dwMonitorUISize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: isize
  get pfnAddPortUI(): Deno.PointerValue {
    return Number(this.view.getBigInt64(8, true));
  }

  // 0x10: isize
  get pfnConfigurePortUI(): Deno.PointerValue {
    return Number(this.view.getBigInt64(16, true));
  }

  // 0x18: isize
  get pfnDeletePortUI(): Deno.PointerValue {
    return Number(this.view.getBigInt64(24, true));
  }

  // 0x00: u32
  set dwMonitorUISize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: isize
  set pfnAddPortUI(value: Deno.PointerValue) {
    this.view.setBigInt64(8, BigInt(value), true);
  }

  // 0x10: isize
  set pfnConfigurePortUI(value: Deno.PointerValue) {
    this.view.setBigInt64(16, BigInt(value), true);
  }

  // 0x18: isize
  set pfnDeletePortUI(value: Deno.PointerValue) {
    this.view.setBigInt64(24, BigInt(value), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.NOTIFICATION_CONFIG_1 (size: 24)
 */
export interface NOTIFICATION_CONFIG_1 {
  /** u32 */
  cbSize: number;
  /** u32 */
  fdwFlags: number;
  /** Windows.Win32.Graphics.Printing.ROUTER_NOTIFY_CALLBACK */
  pfnNotifyCallback: Uint8Array | Deno.PointerValue;
  /** ptr */
  pContext: Deno.PointerValue | Uint8Array;
}

export const sizeofNOTIFICATION_CONFIG_1 = 24;

export function allocNOTIFICATION_CONFIG_1(data?: Partial<NOTIFICATION_CONFIG_1>): Uint8Array {
  const buf = new Uint8Array(sizeofNOTIFICATION_CONFIG_1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: u32
  if (data?.fdwFlags !== undefined) view.setUint32(4, Number(data.fdwFlags), true);
  // 0x08: pointer
  if (data?.pfnNotifyCallback !== undefined) view.setBigUint64(8, data.pfnNotifyCallback === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pfnNotifyCallback))), true);
  // 0x10: pointer
  if (data?.pContext !== undefined) view.setBigUint64(16, data.pContext === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.pContext))), true);
  return buf;
}

export class NOTIFICATION_CONFIG_1View {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: u32
  get fdwFlags(): number {
    return this.view.getUint32(4, true);
  }

  // 0x08: pointer
  get pfnNotifyCallback(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: pointer
  get pContext(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: u32
  set fdwFlags(value: number) {
    this.view.setUint32(4, value, true);
  }

  // 0x08: pointer
  set pfnNotifyCallback(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }

  // 0x10: pointer
  set pContext(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

/**
 * Windows.Win32.Graphics.Printing.MESSAGEBOX_PARAMS (size: 40)
 */
export interface MESSAGEBOX_PARAMS {
  /** u32 */
  cbSize: number;
  /** Windows.Win32.Foundation.PWSTR */
  pTitle: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pMessage: string | null | Uint8Array | Uint16Array;
  /** u32 */
  Style: number;
  /** u32 */
  dwTimeout: number;
  /** Windows.Win32.Foundation.BOOL */
  bWait: boolean;
}

export const sizeofMESSAGEBOX_PARAMS = 40;

export function allocMESSAGEBOX_PARAMS(data?: Partial<MESSAGEBOX_PARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofMESSAGEBOX_PARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.cbSize !== undefined) view.setUint32(0, Number(data.cbSize), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pTitle !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pTitle);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f8))), true);
  }
  // 0x10: buffer
  if (data?.pMessage !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.pMessage);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.value(Deno.UnsafePointer.of((buf as any)._f16))), true);
  }
  // 0x18: u32
  if (data?.Style !== undefined) view.setUint32(24, Number(data.Style), true);
  // 0x1c: u32
  if (data?.dwTimeout !== undefined) view.setUint32(28, Number(data.dwTimeout), true);
  // 0x20: i32
  if (data?.bWait !== undefined) view.setInt32(32, Number(data.bWait), true);
  // 0x24: pad4
  return buf;
}

export class MESSAGEBOX_PARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get cbSize(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  get pTitle(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x10: buffer
  get pMessage(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(16, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x18: u32
  get Style(): number {
    return this.view.getUint32(24, true);
  }

  // 0x1c: u32
  get dwTimeout(): number {
    return this.view.getUint32(28, true);
  }

  // 0x20: i32
  get bWait(): number {
    return this.view.getInt32(32, true);
  }

  // 0x24: pad4

  // 0x00: u32
  set cbSize(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: buffer
  set pTitle(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f8))), true);
  }

  // 0x10: buffer
  set pMessage(value: Uint8Array | Deno.PointerValue) {
    (this.buf as any)._f16 = value;
    this.view.setBigUint64(16, BigInt(Deno.UnsafePointer.value(util.toPointer((this.buf as any)._f16))), true);
  }

  // 0x18: u32
  set Style(value: number) {
    this.view.setUint32(24, value, true);
  }

  // 0x1c: u32
  set dwTimeout(value: number) {
    this.view.setUint32(28, value, true);
  }

  // 0x20: i32
  set bWait(value: number) {
    this.view.setInt32(32, value, true);
  }

  // 0x24: pad4
}

/**
 * Windows.Win32.Graphics.Printing.SHOWUIPARAMS (size: 16)
 */
export interface SHOWUIPARAMS {
  /** Windows.Win32.Graphics.Printing.UI_TYPE */
  UIType: UI_TYPE;
  /** Windows.Win32.Graphics.Printing.MESSAGEBOX_PARAMS */
  MessageBoxParams: Uint8Array | Deno.PointerValue;
}

export const sizeofSHOWUIPARAMS = 16;

export function allocSHOWUIPARAMS(data?: Partial<SHOWUIPARAMS>): Uint8Array {
  const buf = new Uint8Array(sizeofSHOWUIPARAMS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.UIType !== undefined) view.setInt32(0, Number(data.UIType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.MessageBoxParams !== undefined) view.setBigUint64(8, data.MessageBoxParams === null ? 0n : BigInt(Deno.UnsafePointer.value(util.toPointer(data.MessageBoxParams))), true);
  return buf;
}

export class SHOWUIPARAMSView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: i32
  get UIType(): number {
    return this.view.getInt32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get MessageBoxParams(): Uint8Array | Deno.PointerValue {
    const ptr = this.view.getBigUint64(8, true);
    return Deno.UnsafePointer.create(ptr);
  }

  // 0x00: i32
  set UIType(value: number) {
    this.view.setInt32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set MessageBoxParams(value: Uint8Array | Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(Deno.UnsafePointer.value(util.toPointer(value))), true);
  }
}

export type HRESULT = number;

export type HDC = Deno.PointerValue;

// Native Libraries

try {
  var libCOMPSTUI_dll = Deno.dlopen("COMPSTUI.dll", {
    CommonPropertySheetUIA: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    CommonPropertySheetUIW: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GetCPSUIUserData: {
      parameters: ["pointer"],
      result: "usize",
    },
    SetCPSUIUserData: {
      parameters: ["pointer", "usize"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libwinspool_drv = Deno.dlopen("winspool.drv", {
    EnumPrintersA: {
      parameters: ["u32", "buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EnumPrintersW: {
      parameters: ["u32", "buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    GetSpoolFileHandle: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CommitSpoolData: {
      parameters: ["pointer", "pointer", "u32"],
      result: "pointer",
    },
    CloseSpoolFileHandle: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    OpenPrinterA: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    OpenPrinterW: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    ResetPrinterA: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    ResetPrinterW: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    SetJobA: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetJobW: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32"],
      result: "i32",
    },
    GetJobA: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetJobW: {
      parameters: ["pointer", "u32", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    EnumJobsA: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EnumJobsW: {
      parameters: ["pointer", "u32", "u32", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    AddPrinterA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "pointer",
    },
    AddPrinterW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "pointer",
    },
    DeletePrinter: {
      parameters: ["pointer"],
      result: "i32",
    },
    SetPrinterA: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    SetPrinterW: {
      parameters: ["pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    GetPrinterA: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetPrinterW: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    AddPrinterDriverA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    AddPrinterDriverW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    AddPrinterDriverExA: {
      parameters: ["buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    AddPrinterDriverExW: {
      parameters: ["buffer", "u32", "pointer", "u32"],
      result: "i32",
    },
    EnumPrinterDriversA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EnumPrinterDriversW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    GetPrinterDriverA: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetPrinterDriverW: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetPrinterDriverDirectoryA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetPrinterDriverDirectoryW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    DeletePrinterDriverA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    DeletePrinterDriverW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    DeletePrinterDriverExA: {
      parameters: ["buffer", "buffer", "buffer", "u32", "u32"],
      result: "i32",
    },
    DeletePrinterDriverExW: {
      parameters: ["buffer", "buffer", "buffer", "u32", "u32"],
      result: "i32",
    },
    AddPrintProcessorA: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    AddPrintProcessorW: {
      parameters: ["buffer", "buffer", "buffer", "buffer"],
      result: "i32",
    },
    EnumPrintProcessorsA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EnumPrintProcessorsW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    GetPrintProcessorDirectoryA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetPrintProcessorDirectoryW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    EnumPrintProcessorDatatypesA: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EnumPrintProcessorDatatypesW: {
      parameters: ["buffer", "buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    DeletePrintProcessorA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    DeletePrintProcessorW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    StartDocPrinterA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    StartDocPrinterW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    StartPagePrinter: {
      parameters: ["pointer"],
      result: "i32",
    },
    WritePrinter: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    FlushPrinter: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32"],
      result: "i32",
    },
    EndPagePrinter: {
      parameters: ["pointer"],
      result: "i32",
    },
    AbortPrinter: {
      parameters: ["pointer"],
      result: "i32",
    },
    ReadPrinter: {
      parameters: ["pointer", "pointer", "u32", "pointer"],
      result: "i32",
    },
    EndDocPrinter: {
      parameters: ["pointer"],
      result: "i32",
    },
    AddJobA: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    AddJobW: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    ScheduleJob: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    PrinterProperties: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    DocumentPropertiesA: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    DocumentPropertiesW: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer", "u32"],
      result: "i32",
    },
    AdvancedDocumentPropertiesA: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    AdvancedDocumentPropertiesW: {
      parameters: ["pointer", "pointer", "buffer", "pointer", "pointer"],
      result: "i32",
    },
    ExtDeviceMode: {
      parameters: ["pointer", "pointer", "pointer", "buffer", "buffer", "pointer", "buffer", "u32"],
      result: "i32",
    },
    GetPrinterDataA: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    GetPrinterDataW: {
      parameters: ["pointer", "buffer", "pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    GetPrinterDataExA: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    GetPrinterDataExW: {
      parameters: ["pointer", "buffer", "buffer", "pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    EnumPrinterDataA: {
      parameters: ["pointer", "u32", "buffer", "u32", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    EnumPrinterDataW: {
      parameters: ["pointer", "u32", "buffer", "u32", "pointer", "pointer", "pointer", "u32", "pointer"],
      result: "u32",
    },
    EnumPrinterDataExA: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    EnumPrinterDataExW: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    EnumPrinterKeyA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    EnumPrinterKeyW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer"],
      result: "u32",
    },
    SetPrinterDataA: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    SetPrinterDataW: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    SetPrinterDataExA: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    SetPrinterDataExW: {
      parameters: ["pointer", "buffer", "buffer", "u32", "pointer", "u32"],
      result: "u32",
    },
    DeletePrinterDataA: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    DeletePrinterDataW: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    DeletePrinterDataExA: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "u32",
    },
    DeletePrinterDataExW: {
      parameters: ["pointer", "buffer", "buffer"],
      result: "u32",
    },
    DeletePrinterKeyA: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    DeletePrinterKeyW: {
      parameters: ["pointer", "buffer"],
      result: "u32",
    },
    WaitForPrinterChange: {
      parameters: ["pointer", "u32"],
      result: "u32",
    },
    FindFirstPrinterChangeNotification: {
      parameters: ["pointer", "u32", "u32", "pointer"],
      result: "pointer",
    },
    FindNextPrinterChangeNotification: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    FreePrinterNotifyInfo: {
      parameters: ["pointer"],
      result: "i32",
    },
    FindClosePrinterChangeNotification: {
      parameters: ["pointer"],
      result: "i32",
    },
    PrinterMessageBoxA: {
      parameters: ["pointer", "u32", "pointer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    PrinterMessageBoxW: {
      parameters: ["pointer", "u32", "pointer", "buffer", "buffer", "u32"],
      result: "u32",
    },
    ClosePrinter: {
      parameters: ["pointer"],
      result: "i32",
    },
    AddFormA: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    AddFormW: {
      parameters: ["pointer", "u32", "pointer"],
      result: "i32",
    },
    DeleteFormA: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    DeleteFormW: {
      parameters: ["pointer", "buffer"],
      result: "i32",
    },
    GetFormA: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetFormW: {
      parameters: ["pointer", "buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    SetFormA: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetFormW: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    EnumFormsA: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EnumFormsW: {
      parameters: ["pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EnumMonitorsA: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EnumMonitorsW: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    AddMonitorA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    AddMonitorW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    DeleteMonitorA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    DeleteMonitorW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    EnumPortsA: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    EnumPortsW: {
      parameters: ["buffer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    AddPortA: {
      parameters: ["buffer", "pointer", "buffer"],
      result: "i32",
    },
    AddPortW: {
      parameters: ["buffer", "pointer", "buffer"],
      result: "i32",
    },
    ConfigurePortA: {
      parameters: ["buffer", "pointer", "buffer"],
      result: "i32",
    },
    ConfigurePortW: {
      parameters: ["buffer", "pointer", "buffer"],
      result: "i32",
    },
    DeletePortA: {
      parameters: ["buffer", "pointer", "buffer"],
      result: "i32",
    },
    DeletePortW: {
      parameters: ["buffer", "pointer", "buffer"],
      result: "i32",
    },
    XcvDataW: {
      parameters: ["pointer", "buffer", "pointer", "u32", "pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    GetDefaultPrinterA: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    GetDefaultPrinterW: {
      parameters: ["buffer", "pointer"],
      result: "i32",
    },
    SetDefaultPrinterA: {
      parameters: ["buffer"],
      result: "i32",
    },
    SetDefaultPrinterW: {
      parameters: ["buffer"],
      result: "i32",
    },
    SetPortA: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    SetPortW: {
      parameters: ["buffer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    AddPrinterConnectionA: {
      parameters: ["buffer"],
      result: "i32",
    },
    AddPrinterConnectionW: {
      parameters: ["buffer"],
      result: "i32",
    },
    DeletePrinterConnectionA: {
      parameters: ["buffer"],
      result: "i32",
    },
    DeletePrinterConnectionW: {
      parameters: ["buffer"],
      result: "i32",
    },
    ConnectToPrinterDlg: {
      parameters: ["pointer", "u32"],
      result: "pointer",
    },
    AddPrintProvidorA: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    AddPrintProvidorW: {
      parameters: ["buffer", "u32", "pointer"],
      result: "i32",
    },
    DeletePrintProvidorA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    DeletePrintProvidorW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "i32",
    },
    IsValidDevmodeA: {
      parameters: ["pointer", "usize"],
      result: "i32",
    },
    IsValidDevmodeW: {
      parameters: ["pointer", "usize"],
      result: "i32",
    },
    OpenPrinter2A: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    OpenPrinter2W: {
      parameters: ["buffer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    AddPrinterConnection2A: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    AddPrinterConnection2W: {
      parameters: ["pointer", "buffer", "u32", "pointer"],
      result: "i32",
    },
    InstallPrinterDriverFromPackageA: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    InstallPrinterDriverFromPackageW: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "u32"],
      result: "pointer",
    },
    UploadPrinterDriverPackageA: {
      parameters: ["buffer", "buffer", "buffer", "u32", "pointer", "buffer", "pointer"],
      result: "pointer",
    },
    UploadPrinterDriverPackageW: {
      parameters: ["buffer", "buffer", "buffer", "u32", "pointer", "buffer", "pointer"],
      result: "pointer",
    },
    GetCorePrinterDriversA: {
      parameters: ["buffer", "buffer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    GetCorePrinterDriversW: {
      parameters: ["buffer", "buffer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    CorePrinterDriverInstalledA: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "u64", "pointer"],
      result: "pointer",
    },
    CorePrinterDriverInstalledW: {
      parameters: ["buffer", "buffer", "pointer", "pointer", "u64", "pointer"],
      result: "pointer",
    },
    GetPrinterDriverPackagePathA: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    GetPrinterDriverPackagePathW: {
      parameters: ["buffer", "buffer", "buffer", "buffer", "buffer", "u32", "pointer"],
      result: "pointer",
    },
    DeletePrinterDriverPackageA: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
    DeletePrinterDriverPackageW: {
      parameters: ["buffer", "buffer", "buffer"],
      result: "pointer",
    },
    ReportJobProcessingProgress: {
      parameters: ["pointer", "u32", "i32", "i32"],
      result: "pointer",
    },
    GetPrinterDriver2A: {
      parameters: ["pointer", "pointer", "buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetPrinterDriver2W: {
      parameters: ["pointer", "pointer", "buffer", "u32", "pointer", "u32", "pointer"],
      result: "i32",
    },
    GetPrintExecutionData: {
      parameters: ["pointer"],
      result: "i32",
    },
    GetJobNamedPropertyValue: {
      parameters: ["pointer", "u32", "buffer", "pointer"],
      result: "u32",
    },
    FreePrintPropertyValue: {
      parameters: ["pointer"],
      result: "void",
    },
    FreePrintNamedPropertyArray: {
      parameters: ["u32", "pointer"],
      result: "void",
    },
    SetJobNamedProperty: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    DeleteJobNamedProperty: {
      parameters: ["pointer", "u32", "buffer"],
      result: "u32",
    },
    EnumJobNamedProperties: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "u32",
    },
    GetPrintOutputInfo: {
      parameters: ["pointer", "buffer", "pointer", "pointer"],
      result: "pointer",
    },
    DevQueryPrintEx: {
      parameters: ["pointer"],
      result: "i32",
    },
    RegisterForPrintAsyncNotifications: {
      parameters: ["buffer", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    UnRegisterForPrintAsyncNotifications: {
      parameters: ["pointer"],
      result: "pointer",
    },
    CreatePrintAsyncNotifyChannel: {
      parameters: ["buffer", "pointer", "i32", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    CreatePrinterIC: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    PlayGdiScriptOnPrinterIC: {
      parameters: ["pointer", "pointer", "u32", "pointer", "u32", "u32"],
      result: "i32",
    },
    DeletePrinterIC: {
      parameters: ["pointer"],
      result: "i32",
    },
    DevQueryPrint: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "i32",
    },
    RouterFreeBidiResponseContainer: {
      parameters: ["pointer"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libGDI32_dll = Deno.dlopen("GDI32.dll", {
    GdiGetSpoolFileHandle: {
      parameters: ["buffer", "pointer", "buffer"],
      result: "pointer",
    },
    GdiDeleteSpoolFileHandle: {
      parameters: ["pointer"],
      result: "i32",
    },
    GdiGetPageCount: {
      parameters: ["pointer"],
      result: "u32",
    },
    GdiGetDC: {
      parameters: ["pointer"],
      result: "pointer",
    },
    GdiGetPageHandle: {
      parameters: ["pointer", "u32", "pointer"],
      result: "pointer",
    },
    GdiStartDocEMF: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    GdiStartPageEMF: {
      parameters: ["pointer"],
      result: "i32",
    },
    GdiPlayPageEMF: {
      parameters: ["pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    GdiEndPageEMF: {
      parameters: ["pointer", "u32"],
      result: "i32",
    },
    GdiEndDocEMF: {
      parameters: ["pointer"],
      result: "i32",
    },
    GdiGetDevmodeForPage: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    GdiResetDCEMF: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libSPOOLSS_dll = Deno.dlopen("SPOOLSS.dll", {
    GetJobAttributes: {
      parameters: ["buffer", "pointer", "pointer"],
      result: "i32",
    },
    GetJobAttributesEx: {
      parameters: ["buffer", "pointer", "u32", "pointer", "u32", "u32"],
      result: "i32",
    },
    RevertToPrinterSelf: {
      parameters: [],
      result: "pointer",
    },
    ImpersonatePrinterClient: {
      parameters: ["pointer"],
      result: "i32",
    },
    ReplyPrinterChangeNotification: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    ReplyPrinterChangeNotificationEx: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "i32",
    },
    PartialReplyPrinterChangeNotification: {
      parameters: ["pointer", "pointer"],
      result: "i32",
    },
    RouterAllocPrinterNotifyInfo: {
      parameters: ["u32"],
      result: "pointer",
    },
    RouterFreePrinterNotifyInfo: {
      parameters: ["pointer"],
      result: "i32",
    },
    RouterAllocBidiResponseContainer: {
      parameters: ["u32"],
      result: "pointer",
    },
    RouterAllocBidiMem: {
      parameters: ["usize"],
      result: "pointer",
    },
    RouterFreeBidiMem: {
      parameters: ["pointer"],
      result: "void",
    },
    AppendPrinterNotifyInfoData: {
      parameters: ["pointer", "pointer", "u32"],
      result: "i32",
    },
    CallRouterFindFirstPrinterChangeNotification: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer"],
      result: "u32",
    },
    ProvidorFindFirstPrinterChangeNotification: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    ProvidorFindClosePrinterChangeNotification: {
      parameters: ["pointer"],
      result: "i32",
    },
    SpoolerFindFirstPrinterChangeNotification: {
      parameters: ["pointer", "u32", "u32", "pointer", "pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SpoolerFindNextPrinterChangeNotification: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "i32",
    },
    SpoolerRefreshPrinterChangeNotification: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SpoolerFreePrinterNotifyInfo: {
      parameters: ["pointer"],
      result: "void",
    },
    SpoolerFindClosePrinterChangeNotification: {
      parameters: ["pointer"],
      result: "i32",
    },
    SplPromptUIInUsersSession: {
      parameters: ["pointer", "u32", "pointer", "pointer"],
      result: "i32",
    },
    SplIsSessionZero: {
      parameters: ["pointer", "u32", "pointer"],
      result: "u32",
    },
    AddPrintDeviceObject: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    UpdatePrintDeviceObject: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    RemovePrintDeviceObject: {
      parameters: ["pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

try {
  var libmscms_dll = Deno.dlopen("mscms.dll", {
    SpoolerCopyFileEvent: {
      parameters: ["buffer", "buffer", "u32"],
      result: "i32",
    },
    GenerateCopyFilePaths: {
      parameters: ["buffer", "buffer", "pointer", "u32", "buffer", "pointer", "buffer", "pointer", "u32"],
      result: "u32",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function CommonPropertySheetUIA(
  hWndOwner: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pfnPropSheetUI: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Printing.PFNPROPSHEETUI */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
  pResult: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libCOMPSTUI_dll.CommonPropertySheetUIA((hWndOwner), util.toPointer(pfnPropSheetUI), util.toPointer(lParam), util.toPointer(pResult));
}

export function CommonPropertySheetUIW(
  hWndOwner: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pfnPropSheetUI: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Printing.PFNPROPSHEETUI */,
  lParam: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.LPARAM */,
  pResult: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libCOMPSTUI_dll.CommonPropertySheetUIW((hWndOwner), util.toPointer(pfnPropSheetUI), util.toPointer(lParam), util.toPointer(pResult));
}

export function GetCPSUIUserData(
  hDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
): Deno.PointerValue /* usize */ {
  return libCOMPSTUI_dll.GetCPSUIUserData((hDlg));
}

export function SetCPSUIUserData(
  hDlg: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  CPSUIUserData: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libCOMPSTUI_dll.SetCPSUIUserData((hDlg), CPSUIUserData));
}

export function EnumPrintersA(
  Flags: number /* u32 */,
  Name: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pPrinterEnum: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumPrintersA(Flags, util.pstrToFfi(Name), Level, util.toPointer(pPrinterEnum), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function EnumPrintersW(
  Flags: number /* u32 */,
  Name: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pPrinterEnum: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumPrintersW(Flags, util.pwstrToFfi(Name), Level, util.toPointer(pPrinterEnum), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function GetSpoolFileHandle(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libwinspool_drv.GetSpoolFileHandle(util.toPointer(hPrinter));
}

export function CommitSpoolData(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  hSpoolFile: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  cbCommit: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libwinspool_drv.CommitSpoolData(util.toPointer(hPrinter), util.toPointer(hSpoolFile), cbCommit);
}

export function CloseSpoolFileHandle(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  hSpoolFile: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.CloseSpoolFileHandle(util.toPointer(hPrinter), util.toPointer(hSpoolFile)));
}

export function OpenPrinterA(
  pPrinterName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  phPrinter: Deno.PointerValue | Uint8Array /* ptr */,
  pDefault: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.OpenPrinterA(util.pstrToFfi(pPrinterName), util.toPointer(phPrinter), util.toPointer(pDefault)));
}

export function OpenPrinterW(
  pPrinterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phPrinter: Deno.PointerValue | Uint8Array /* ptr */,
  pDefault: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.OpenPrinterW(util.pwstrToFfi(pPrinterName), util.toPointer(phPrinter), util.toPointer(pDefault)));
}

export function ResetPrinterA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pDefault: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.ResetPrinterA(util.toPointer(hPrinter), util.toPointer(pDefault)));
}

export function ResetPrinterW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pDefault: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.ResetPrinterW(util.toPointer(hPrinter), util.toPointer(pDefault)));
}

export function SetJobA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  Level: number /* u32 */,
  pJob: Deno.PointerValue | Uint8Array /* ptr */,
  Command: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.SetJobA(util.toPointer(hPrinter), JobId, Level, util.toPointer(pJob), Command));
}

export function SetJobW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  Level: number /* u32 */,
  pJob: Deno.PointerValue | Uint8Array /* ptr */,
  Command: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.SetJobW(util.toPointer(hPrinter), JobId, Level, util.toPointer(pJob), Command));
}

export function GetJobA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  Level: number /* u32 */,
  pJob: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetJobA(util.toPointer(hPrinter), JobId, Level, util.toPointer(pJob), cbBuf, util.toPointer(pcbNeeded)));
}

export function GetJobW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  Level: number /* u32 */,
  pJob: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetJobW(util.toPointer(hPrinter), JobId, Level, util.toPointer(pJob), cbBuf, util.toPointer(pcbNeeded)));
}

export function EnumJobsA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  FirstJob: number /* u32 */,
  NoJobs: number /* u32 */,
  Level: number /* u32 */,
  pJob: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumJobsA(util.toPointer(hPrinter), FirstJob, NoJobs, Level, util.toPointer(pJob), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function EnumJobsW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  FirstJob: number /* u32 */,
  NoJobs: number /* u32 */,
  Level: number /* u32 */,
  pJob: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumJobsW(util.toPointer(hPrinter), FirstJob, NoJobs, Level, util.toPointer(pJob), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function AddPrinterA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pPrinter: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libwinspool_drv.AddPrinterA(util.pstrToFfi(pName), Level, util.toPointer(pPrinter));
}

export function AddPrinterW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pPrinter: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libwinspool_drv.AddPrinterW(util.pwstrToFfi(pName), Level, util.toPointer(pPrinter));
}

export function DeletePrinter(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePrinter(util.toPointer(hPrinter)));
}

export function SetPrinterA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Level: number /* u32 */,
  pPrinter: Deno.PointerValue | Uint8Array /* ptr */,
  Command: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.SetPrinterA(util.toPointer(hPrinter), Level, util.toPointer(pPrinter), Command));
}

export function SetPrinterW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Level: number /* u32 */,
  pPrinter: Deno.PointerValue | Uint8Array /* ptr */,
  Command: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.SetPrinterW(util.toPointer(hPrinter), Level, util.toPointer(pPrinter), Command));
}

export function GetPrinterA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Level: number /* u32 */,
  pPrinter: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetPrinterA(util.toPointer(hPrinter), Level, util.toPointer(pPrinter), cbBuf, util.toPointer(pcbNeeded)));
}

export function GetPrinterW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Level: number /* u32 */,
  pPrinter: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetPrinterW(util.toPointer(hPrinter), Level, util.toPointer(pPrinter), cbBuf, util.toPointer(pcbNeeded)));
}

export function AddPrinterDriverA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pDriverInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPrinterDriverA(util.pstrToFfi(pName), Level, util.toPointer(pDriverInfo)));
}

export function AddPrinterDriverW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pDriverInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPrinterDriverW(util.pwstrToFfi(pName), Level, util.toPointer(pDriverInfo)));
}

export function AddPrinterDriverExA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  lpbDriverInfo: Deno.PointerValue | Uint8Array /* ptr */,
  dwFileCopyFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPrinterDriverExA(util.pstrToFfi(pName), Level, util.toPointer(lpbDriverInfo), dwFileCopyFlags));
}

export function AddPrinterDriverExW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  lpbDriverInfo: Deno.PointerValue | Uint8Array /* ptr */,
  dwFileCopyFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPrinterDriverExW(util.pwstrToFfi(pName), Level, util.toPointer(lpbDriverInfo), dwFileCopyFlags));
}

export function EnumPrinterDriversA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pDriverInfo: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumPrinterDriversA(util.pstrToFfi(pName), util.pstrToFfi(pEnvironment), Level, util.toPointer(pDriverInfo), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function EnumPrinterDriversW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pDriverInfo: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumPrinterDriversW(util.pwstrToFfi(pName), util.pwstrToFfi(pEnvironment), Level, util.toPointer(pDriverInfo), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function GetPrinterDriverA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pDriverInfo: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetPrinterDriverA(util.toPointer(hPrinter), util.pstrToFfi(pEnvironment), Level, util.toPointer(pDriverInfo), cbBuf, util.toPointer(pcbNeeded)));
}

export function GetPrinterDriverW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pDriverInfo: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetPrinterDriverW(util.toPointer(hPrinter), util.pwstrToFfi(pEnvironment), Level, util.toPointer(pDriverInfo), cbBuf, util.toPointer(pcbNeeded)));
}

export function GetPrinterDriverDirectoryA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pDriverDirectory: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetPrinterDriverDirectoryA(util.pstrToFfi(pName), util.pstrToFfi(pEnvironment), Level, util.toPointer(pDriverDirectory), cbBuf, util.toPointer(pcbNeeded)));
}

export function GetPrinterDriverDirectoryW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pDriverDirectory: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetPrinterDriverDirectoryW(util.pwstrToFfi(pName), util.pwstrToFfi(pEnvironment), Level, util.toPointer(pDriverDirectory), cbBuf, util.toPointer(pcbNeeded)));
}

export function DeletePrinterDriverA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pDriverName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePrinterDriverA(util.pstrToFfi(pName), util.pstrToFfi(pEnvironment), util.pstrToFfi(pDriverName)));
}

export function DeletePrinterDriverW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDriverName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePrinterDriverW(util.pwstrToFfi(pName), util.pwstrToFfi(pEnvironment), util.pwstrToFfi(pDriverName)));
}

export function DeletePrinterDriverExA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pDriverName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwDeleteFlag: number /* u32 */,
  dwVersionFlag: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePrinterDriverExA(util.pstrToFfi(pName), util.pstrToFfi(pEnvironment), util.pstrToFfi(pDriverName), dwDeleteFlag, dwVersionFlag));
}

export function DeletePrinterDriverExW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDriverName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwDeleteFlag: number /* u32 */,
  dwVersionFlag: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePrinterDriverExW(util.pwstrToFfi(pName), util.pwstrToFfi(pEnvironment), util.pwstrToFfi(pDriverName), dwDeleteFlag, dwVersionFlag));
}

export function AddPrintProcessorA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pPathName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pPrintProcessorName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPrintProcessorA(util.pstrToFfi(pName), util.pstrToFfi(pEnvironment), util.pstrToFfi(pPathName), util.pstrToFfi(pPrintProcessorName)));
}

export function AddPrintProcessorW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pPathName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pPrintProcessorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPrintProcessorW(util.pwstrToFfi(pName), util.pwstrToFfi(pEnvironment), util.pwstrToFfi(pPathName), util.pwstrToFfi(pPrintProcessorName)));
}

export function EnumPrintProcessorsA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pPrintProcessorInfo: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumPrintProcessorsA(util.pstrToFfi(pName), util.pstrToFfi(pEnvironment), Level, util.toPointer(pPrintProcessorInfo), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function EnumPrintProcessorsW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pPrintProcessorInfo: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumPrintProcessorsW(util.pwstrToFfi(pName), util.pwstrToFfi(pEnvironment), Level, util.toPointer(pPrintProcessorInfo), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function GetPrintProcessorDirectoryA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pPrintProcessorInfo: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetPrintProcessorDirectoryA(util.pstrToFfi(pName), util.pstrToFfi(pEnvironment), Level, util.toPointer(pPrintProcessorInfo), cbBuf, util.toPointer(pcbNeeded)));
}

export function GetPrintProcessorDirectoryW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pPrintProcessorInfo: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetPrintProcessorDirectoryW(util.pwstrToFfi(pName), util.pwstrToFfi(pEnvironment), Level, util.toPointer(pPrintProcessorInfo), cbBuf, util.toPointer(pcbNeeded)));
}

export function EnumPrintProcessorDatatypesA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pPrintProcessorName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pDatatypes: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumPrintProcessorDatatypesA(util.pstrToFfi(pName), util.pstrToFfi(pPrintProcessorName), Level, util.toPointer(pDatatypes), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function EnumPrintProcessorDatatypesW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pPrintProcessorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pDatatypes: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumPrintProcessorDatatypesW(util.pwstrToFfi(pName), util.pwstrToFfi(pPrintProcessorName), Level, util.toPointer(pDatatypes), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function DeletePrintProcessorA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pPrintProcessorName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePrintProcessorA(util.pstrToFfi(pName), util.pstrToFfi(pEnvironment), util.pstrToFfi(pPrintProcessorName)));
}

export function DeletePrintProcessorW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pPrintProcessorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePrintProcessorW(util.pwstrToFfi(pName), util.pwstrToFfi(pEnvironment), util.pwstrToFfi(pPrintProcessorName)));
}

export function StartDocPrinterA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Level: number /* u32 */,
  pDocInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.StartDocPrinterA(util.toPointer(hPrinter), Level, util.toPointer(pDocInfo));
}

export function StartDocPrinterW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Level: number /* u32 */,
  pDocInfo: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.StartDocPrinterW(util.toPointer(hPrinter), Level, util.toPointer(pDocInfo));
}

export function StartPagePrinter(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.StartPagePrinter(util.toPointer(hPrinter)));
}

export function WritePrinter(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pBuf: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcWritten: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.WritePrinter(util.toPointer(hPrinter), util.toPointer(pBuf), cbBuf, util.toPointer(pcWritten)));
}

export function FlushPrinter(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pBuf: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcWritten: Deno.PointerValue | Uint8Array /* ptr */,
  cSleep: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.FlushPrinter(util.toPointer(hPrinter), util.toPointer(pBuf), cbBuf, util.toPointer(pcWritten), cSleep));
}

export function EndPagePrinter(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EndPagePrinter(util.toPointer(hPrinter)));
}

export function AbortPrinter(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AbortPrinter(util.toPointer(hPrinter)));
}

export function ReadPrinter(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pBuf: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pNoBytesRead: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.ReadPrinter(util.toPointer(hPrinter), util.toPointer(pBuf), cbBuf, util.toPointer(pNoBytesRead)));
}

export function EndDocPrinter(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EndDocPrinter(util.toPointer(hPrinter)));
}

export function AddJobA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Level: number /* u32 */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddJobA(util.toPointer(hPrinter), Level, util.toPointer(pData), cbBuf, util.toPointer(pcbNeeded)));
}

export function AddJobW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Level: number /* u32 */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddJobW(util.toPointer(hPrinter), Level, util.toPointer(pData), cbBuf, util.toPointer(pcbNeeded)));
}

export function ScheduleJob(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.ScheduleJob(util.toPointer(hPrinter), JobId));
}

export function PrinterProperties(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.PrinterProperties((hWnd), util.toPointer(hPrinter)));
}

export function DocumentPropertiesA(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pDeviceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pDevModeOutput: Deno.PointerValue | Uint8Array /* ptr */,
  pDevModeInput: Deno.PointerValue | Uint8Array /* ptr */,
  fMode: number /* u32 */,
): number /* i32 */ {
  return libwinspool_drv.DocumentPropertiesA((hWnd), util.toPointer(hPrinter), util.pstrToFfi(pDeviceName), util.toPointer(pDevModeOutput), util.toPointer(pDevModeInput), fMode);
}

export function DocumentPropertiesW(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDevModeOutput: Deno.PointerValue | Uint8Array /* ptr */,
  pDevModeInput: Deno.PointerValue | Uint8Array /* ptr */,
  fMode: number /* u32 */,
): number /* i32 */ {
  return libwinspool_drv.DocumentPropertiesW((hWnd), util.toPointer(hPrinter), util.pwstrToFfi(pDeviceName), util.toPointer(pDevModeOutput), util.toPointer(pDevModeInput), fMode);
}

export function AdvancedDocumentPropertiesA(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pDeviceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pDevModeOutput: Deno.PointerValue | Uint8Array /* ptr */,
  pDevModeInput: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libwinspool_drv.AdvancedDocumentPropertiesA((hWnd), util.toPointer(hPrinter), util.pstrToFfi(pDeviceName), util.toPointer(pDevModeOutput), util.toPointer(pDevModeInput));
}

export function AdvancedDocumentPropertiesW(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pDeviceName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDevModeOutput: Deno.PointerValue | Uint8Array /* ptr */,
  pDevModeInput: Deno.PointerValue | Uint8Array /* ptr */,
): number /* i32 */ {
  return libwinspool_drv.AdvancedDocumentPropertiesW((hWnd), util.toPointer(hPrinter), util.pwstrToFfi(pDeviceName), util.toPointer(pDevModeOutput), util.toPointer(pDevModeInput));
}

export function ExtDeviceMode(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hInst: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pDevModeOutput: Deno.PointerValue | Uint8Array /* ptr */,
  pDeviceName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pPort: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pDevModeInput: Deno.PointerValue | Uint8Array /* ptr */,
  pProfile: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  fMode: number /* u32 */,
): number /* i32 */ {
  return libwinspool_drv.ExtDeviceMode((hWnd), util.toPointer(hInst), util.toPointer(pDevModeOutput), util.pstrToFfi(pDeviceName), util.pstrToFfi(pPort), util.toPointer(pDevModeInput), util.pstrToFfi(pProfile), fMode);
}

export function GetPrinterDataA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pValueName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pType: Deno.PointerValue | Uint8Array /* ptr */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.GetPrinterDataA(util.toPointer(hPrinter), util.pstrToFfi(pValueName), util.toPointer(pType), util.toPointer(pData), nSize, util.toPointer(pcbNeeded));
}

export function GetPrinterDataW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pType: Deno.PointerValue | Uint8Array /* ptr */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.GetPrinterDataW(util.toPointer(hPrinter), util.pwstrToFfi(pValueName), util.toPointer(pType), util.toPointer(pData), nSize, util.toPointer(pcbNeeded));
}

export function GetPrinterDataExA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pKeyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pValueName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pType: Deno.PointerValue | Uint8Array /* ptr */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.GetPrinterDataExA(util.toPointer(hPrinter), util.pstrToFfi(pKeyName), util.pstrToFfi(pValueName), util.toPointer(pType), util.toPointer(pData), nSize, util.toPointer(pcbNeeded));
}

export function GetPrinterDataExW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pKeyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pType: Deno.PointerValue | Uint8Array /* ptr */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.GetPrinterDataExW(util.toPointer(hPrinter), util.pwstrToFfi(pKeyName), util.pwstrToFfi(pValueName), util.toPointer(pType), util.toPointer(pData), nSize, util.toPointer(pcbNeeded));
}

export function EnumPrinterDataA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwIndex: number /* u32 */,
  pValueName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cbValueName: number /* u32 */,
  pcbValueName: Deno.PointerValue | Uint8Array /* ptr */,
  pType: Deno.PointerValue | Uint8Array /* ptr */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  cbData: number /* u32 */,
  pcbData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.EnumPrinterDataA(util.toPointer(hPrinter), dwIndex, util.pstrToFfi(pValueName), cbValueName, util.toPointer(pcbValueName), util.toPointer(pType), util.toPointer(pData), cbData, util.toPointer(pcbData));
}

export function EnumPrinterDataW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwIndex: number /* u32 */,
  pValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cbValueName: number /* u32 */,
  pcbValueName: Deno.PointerValue | Uint8Array /* ptr */,
  pType: Deno.PointerValue | Uint8Array /* ptr */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  cbData: number /* u32 */,
  pcbData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.EnumPrinterDataW(util.toPointer(hPrinter), dwIndex, util.pwstrToFfi(pValueName), cbValueName, util.toPointer(pcbValueName), util.toPointer(pType), util.toPointer(pData), cbData, util.toPointer(pcbData));
}

export function EnumPrinterDataExA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pKeyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pEnumValues: Deno.PointerValue | Uint8Array /* ptr */,
  cbEnumValues: number /* u32 */,
  pcbEnumValues: Deno.PointerValue | Uint8Array /* ptr */,
  pnEnumValues: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.EnumPrinterDataExA(util.toPointer(hPrinter), util.pstrToFfi(pKeyName), util.toPointer(pEnumValues), cbEnumValues, util.toPointer(pcbEnumValues), util.toPointer(pnEnumValues));
}

export function EnumPrinterDataExW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pKeyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pEnumValues: Deno.PointerValue | Uint8Array /* ptr */,
  cbEnumValues: number /* u32 */,
  pcbEnumValues: Deno.PointerValue | Uint8Array /* ptr */,
  pnEnumValues: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.EnumPrinterDataExW(util.toPointer(hPrinter), util.pwstrToFfi(pKeyName), util.toPointer(pEnumValues), cbEnumValues, util.toPointer(pcbEnumValues), util.toPointer(pnEnumValues));
}

export function EnumPrinterKeyA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pKeyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pSubkey: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cbSubkey: number /* u32 */,
  pcbSubkey: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.EnumPrinterKeyA(util.toPointer(hPrinter), util.pstrToFfi(pKeyName), util.pstrToFfi(pSubkey), cbSubkey, util.toPointer(pcbSubkey));
}

export function EnumPrinterKeyW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pKeyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pSubkey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cbSubkey: number /* u32 */,
  pcbSubkey: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.EnumPrinterKeyW(util.toPointer(hPrinter), util.pwstrToFfi(pKeyName), util.pwstrToFfi(pSubkey), cbSubkey, util.toPointer(pcbSubkey));
}

export function SetPrinterDataA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pValueName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Type: number /* u32 */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  cbData: number /* u32 */,
): number /* u32 */ {
  return libwinspool_drv.SetPrinterDataA(util.toPointer(hPrinter), util.pstrToFfi(pValueName), Type, util.toPointer(pData), cbData);
}

export function SetPrinterDataW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Type: number /* u32 */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  cbData: number /* u32 */,
): number /* u32 */ {
  return libwinspool_drv.SetPrinterDataW(util.toPointer(hPrinter), util.pwstrToFfi(pValueName), Type, util.toPointer(pData), cbData);
}

export function SetPrinterDataExA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pKeyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pValueName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Type: number /* u32 */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  cbData: number /* u32 */,
): number /* u32 */ {
  return libwinspool_drv.SetPrinterDataExA(util.toPointer(hPrinter), util.pstrToFfi(pKeyName), util.pstrToFfi(pValueName), Type, util.toPointer(pData), cbData);
}

export function SetPrinterDataExW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pKeyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Type: number /* u32 */,
  pData: Deno.PointerValue | Uint8Array /* ptr */,
  cbData: number /* u32 */,
): number /* u32 */ {
  return libwinspool_drv.SetPrinterDataExW(util.toPointer(hPrinter), util.pwstrToFfi(pKeyName), util.pwstrToFfi(pValueName), Type, util.toPointer(pData), cbData);
}

export function DeletePrinterDataA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pValueName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libwinspool_drv.DeletePrinterDataA(util.toPointer(hPrinter), util.pstrToFfi(pValueName));
}

export function DeletePrinterDataW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libwinspool_drv.DeletePrinterDataW(util.toPointer(hPrinter), util.pwstrToFfi(pValueName));
}

export function DeletePrinterDataExA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pKeyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pValueName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libwinspool_drv.DeletePrinterDataExA(util.toPointer(hPrinter), util.pstrToFfi(pKeyName), util.pstrToFfi(pValueName));
}

export function DeletePrinterDataExW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pKeyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pValueName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libwinspool_drv.DeletePrinterDataExW(util.toPointer(hPrinter), util.pwstrToFfi(pKeyName), util.pwstrToFfi(pValueName));
}

export function DeletePrinterKeyA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pKeyName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): number /* u32 */ {
  return libwinspool_drv.DeletePrinterKeyA(util.toPointer(hPrinter), util.pstrToFfi(pKeyName));
}

export function DeletePrinterKeyW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pKeyName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libwinspool_drv.DeletePrinterKeyW(util.toPointer(hPrinter), util.pwstrToFfi(pKeyName));
}

export function WaitForPrinterChange(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Flags: number /* u32 */,
): number /* u32 */ {
  return libwinspool_drv.WaitForPrinterChange(util.toPointer(hPrinter), Flags);
}

export function FindFirstPrinterChangeNotification(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  fdwFilter: number /* u32 */,
  fdwOptions: number /* u32 */,
  pPrinterNotifyOptions: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libwinspool_drv.FindFirstPrinterChangeNotification(util.toPointer(hPrinter), fdwFilter, fdwOptions, util.toPointer(pPrinterNotifyOptions));
}

export function FindNextPrinterChangeNotification(
  hChange: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pdwChange: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
  ppPrinterNotifyInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.FindNextPrinterChangeNotification(util.toPointer(hChange), util.toPointer(pdwChange), util.toPointer(pvReserved), util.toPointer(ppPrinterNotifyInfo)));
}

export function FreePrinterNotifyInfo(
  pPrinterNotifyInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.FreePrinterNotifyInfo(util.toPointer(pPrinterNotifyInfo)));
}

export function FindClosePrinterChangeNotification(
  hChange: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.FindClosePrinterChangeNotification(util.toPointer(hChange)));
}

export function PrinterMessageBoxA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Error: number /* u32 */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pText: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pCaption: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwType: number /* u32 */,
): number /* u32 */ {
  return libwinspool_drv.PrinterMessageBoxA(util.toPointer(hPrinter), Error, (hWnd), util.pstrToFfi(pText), util.pstrToFfi(pCaption), dwType);
}

export function PrinterMessageBoxW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Error: number /* u32 */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pText: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pCaption: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwType: number /* u32 */,
): number /* u32 */ {
  return libwinspool_drv.PrinterMessageBoxW(util.toPointer(hPrinter), Error, (hWnd), util.pwstrToFfi(pText), util.pwstrToFfi(pCaption), dwType);
}

export function ClosePrinter(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.ClosePrinter(util.toPointer(hPrinter)));
}

export function AddFormA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Level: number /* u32 */,
  pForm: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddFormA(util.toPointer(hPrinter), Level, util.toPointer(pForm)));
}

export function AddFormW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Level: number /* u32 */,
  pForm: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddFormW(util.toPointer(hPrinter), Level, util.toPointer(pForm)));
}

export function DeleteFormA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pFormName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeleteFormA(util.toPointer(hPrinter), util.pstrToFfi(pFormName)));
}

export function DeleteFormW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pFormName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeleteFormW(util.toPointer(hPrinter), util.pwstrToFfi(pFormName)));
}

export function GetFormA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pFormName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pForm: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetFormA(util.toPointer(hPrinter), util.pstrToFfi(pFormName), Level, util.toPointer(pForm), cbBuf, util.toPointer(pcbNeeded)));
}

export function GetFormW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pFormName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pForm: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetFormW(util.toPointer(hPrinter), util.pwstrToFfi(pFormName), Level, util.toPointer(pForm), cbBuf, util.toPointer(pcbNeeded)));
}

export function SetFormA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pFormName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pForm: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.SetFormA(util.toPointer(hPrinter), util.pstrToFfi(pFormName), Level, util.toPointer(pForm)));
}

export function SetFormW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pFormName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pForm: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.SetFormW(util.toPointer(hPrinter), util.pwstrToFfi(pFormName), Level, util.toPointer(pForm)));
}

export function EnumFormsA(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Level: number /* u32 */,
  pForm: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumFormsA(util.toPointer(hPrinter), Level, util.toPointer(pForm), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function EnumFormsW(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Level: number /* u32 */,
  pForm: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumFormsW(util.toPointer(hPrinter), Level, util.toPointer(pForm), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function EnumMonitorsA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pMonitor: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumMonitorsA(util.pstrToFfi(pName), Level, util.toPointer(pMonitor), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function EnumMonitorsW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pMonitor: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumMonitorsW(util.pwstrToFfi(pName), Level, util.toPointer(pMonitor), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function AddMonitorA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pMonitors: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddMonitorA(util.pstrToFfi(pName), Level, util.toPointer(pMonitors)));
}

export function AddMonitorW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pMonitors: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddMonitorW(util.pwstrToFfi(pName), Level, util.toPointer(pMonitors)));
}

export function DeleteMonitorA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pMonitorName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeleteMonitorA(util.pstrToFfi(pName), util.pstrToFfi(pEnvironment), util.pstrToFfi(pMonitorName)));
}

export function DeleteMonitorW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pMonitorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeleteMonitorW(util.pwstrToFfi(pName), util.pwstrToFfi(pEnvironment), util.pwstrToFfi(pMonitorName)));
}

export function EnumPortsA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pPort: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumPortsA(util.pstrToFfi(pName), Level, util.toPointer(pPort), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function EnumPortsW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pPort: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pcReturned: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.EnumPortsW(util.pwstrToFfi(pName), Level, util.toPointer(pPort), cbBuf, util.toPointer(pcbNeeded), util.toPointer(pcReturned)));
}

export function AddPortA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pMonitorName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPortA(util.pstrToFfi(pName), (hWnd), util.pstrToFfi(pMonitorName)));
}

export function AddPortW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pMonitorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPortW(util.pwstrToFfi(pName), (hWnd), util.pwstrToFfi(pMonitorName)));
}

export function ConfigurePortA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pPortName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.ConfigurePortA(util.pstrToFfi(pName), (hWnd), util.pstrToFfi(pPortName)));
}

export function ConfigurePortW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pPortName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.ConfigurePortW(util.pwstrToFfi(pName), (hWnd), util.pwstrToFfi(pPortName)));
}

export function DeletePortA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pPortName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePortA(util.pstrToFfi(pName), (hWnd), util.pstrToFfi(pPortName)));
}

export function DeletePortW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pPortName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePortW(util.pwstrToFfi(pName), (hWnd), util.pwstrToFfi(pPortName)));
}

export function XcvDataW(
  hXcv: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pszDataName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pInputData: Deno.PointerValue | Uint8Array /* ptr */,
  cbInputData: number /* u32 */,
  pOutputData: Deno.PointerValue | Uint8Array /* ptr */,
  cbOutputData: number /* u32 */,
  pcbOutputNeeded: Deno.PointerValue | Uint8Array /* ptr */,
  pdwStatus: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.XcvDataW(util.toPointer(hXcv), util.pwstrToFfi(pszDataName), util.toPointer(pInputData), cbInputData, util.toPointer(pOutputData), cbOutputData, util.toPointer(pcbOutputNeeded), util.toPointer(pdwStatus)));
}

export function GetDefaultPrinterA(
  pszBuffer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetDefaultPrinterA(util.pstrToFfi(pszBuffer), util.toPointer(pcchBuffer)));
}

export function GetDefaultPrinterW(
  pszBuffer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchBuffer: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetDefaultPrinterW(util.pwstrToFfi(pszBuffer), util.toPointer(pcchBuffer)));
}

export function SetDefaultPrinterA(
  pszPrinter: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.SetDefaultPrinterA(util.pstrToFfi(pszPrinter)));
}

export function SetDefaultPrinterW(
  pszPrinter: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.SetDefaultPrinterW(util.pwstrToFfi(pszPrinter)));
}

export function SetPortA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pPortName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwLevel: number /* u32 */,
  pPortInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.SetPortA(util.pstrToFfi(pName), util.pstrToFfi(pPortName), dwLevel, util.toPointer(pPortInfo)));
}

export function SetPortW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pPortName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwLevel: number /* u32 */,
  pPortInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.SetPortW(util.pwstrToFfi(pName), util.pwstrToFfi(pPortName), dwLevel, util.toPointer(pPortInfo)));
}

export function AddPrinterConnectionA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPrinterConnectionA(util.pstrToFfi(pName)));
}

export function AddPrinterConnectionW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPrinterConnectionW(util.pwstrToFfi(pName)));
}

export function DeletePrinterConnectionA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePrinterConnectionA(util.pstrToFfi(pName)));
}

export function DeletePrinterConnectionW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePrinterConnectionW(util.pwstrToFfi(pName)));
}

export function ConnectToPrinterDlg(
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  Flags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libwinspool_drv.ConnectToPrinterDlg((hwnd), Flags);
}

export function AddPrintProvidorA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pProvidorInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPrintProvidorA(util.pstrToFfi(pName), Level, util.toPointer(pProvidorInfo)));
}

export function AddPrintProvidorW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pProvidorInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPrintProvidorW(util.pwstrToFfi(pName), Level, util.toPointer(pProvidorInfo)));
}

export function DeletePrintProvidorA(
  pName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pPrintProvidorName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePrintProvidorA(util.pstrToFfi(pName), util.pstrToFfi(pEnvironment), util.pstrToFfi(pPrintProvidorName)));
}

export function DeletePrintProvidorW(
  pName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pPrintProvidorName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePrintProvidorW(util.pwstrToFfi(pName), util.pwstrToFfi(pEnvironment), util.pwstrToFfi(pPrintProvidorName)));
}

export function IsValidDevmodeA(
  pDevmode: Deno.PointerValue | Uint8Array /* ptr */,
  DevmodeSize: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.IsValidDevmodeA(util.toPointer(pDevmode), DevmodeSize));
}

export function IsValidDevmodeW(
  pDevmode: Deno.PointerValue | Uint8Array /* ptr */,
  DevmodeSize: Deno.PointerValue /* usize */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.IsValidDevmodeW(util.toPointer(pDevmode), DevmodeSize));
}

export function OpenPrinter2A(
  pPrinterName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  phPrinter: Deno.PointerValue | Uint8Array /* ptr */,
  pDefault: Deno.PointerValue | Uint8Array /* ptr */,
  pOptions: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.OpenPrinter2A(util.pstrToFfi(pPrinterName), util.toPointer(phPrinter), util.toPointer(pDefault), util.toPointer(pOptions)));
}

export function OpenPrinter2W(
  pPrinterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phPrinter: Deno.PointerValue | Uint8Array /* ptr */,
  pDefault: Deno.PointerValue | Uint8Array /* ptr */,
  pOptions: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.OpenPrinter2W(util.pwstrToFfi(pPrinterName), util.toPointer(phPrinter), util.toPointer(pDefault), util.toPointer(pOptions)));
}

export function AddPrinterConnection2A(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwLevel: number /* u32 */,
  pConnectionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPrinterConnection2A((hWnd), util.pstrToFfi(pszName), dwLevel, util.toPointer(pConnectionInfo)));
}

export function AddPrinterConnection2W(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwLevel: number /* u32 */,
  pConnectionInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.AddPrinterConnection2W((hWnd), util.pwstrToFfi(pszName), dwLevel, util.toPointer(pConnectionInfo)));
}

export function InstallPrinterDriverFromPackageA(
  pszServer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszInfPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszDriverName: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.InstallPrinterDriverFromPackageA(util.pstrToFfi(pszServer), util.pstrToFfi(pszInfPath), util.pstrToFfi(pszDriverName), util.pstrToFfi(pszEnvironment), dwFlags);
}

export function InstallPrinterDriverFromPackageW(
  pszServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszInfPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszDriverName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.InstallPrinterDriverFromPackageW(util.pwstrToFfi(pszServer), util.pwstrToFfi(pszInfPath), util.pwstrToFfi(pszDriverName), util.pwstrToFfi(pszEnvironment), dwFlags);
}

export function UploadPrinterDriverPackageA(
  pszServer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszInfPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  dwFlags: number /* u32 */,
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszDestInfPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pcchDestInfPath: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.UploadPrinterDriverPackageA(util.pstrToFfi(pszServer), util.pstrToFfi(pszInfPath), util.pstrToFfi(pszEnvironment), dwFlags, (hwnd), util.pstrToFfi(pszDestInfPath), util.toPointer(pcchDestInfPath));
}

export function UploadPrinterDriverPackageW(
  pszServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszInfPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwFlags: number /* u32 */,
  hwnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszDestInfPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchDestInfPath: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.UploadPrinterDriverPackageW(util.pwstrToFfi(pszServer), util.pwstrToFfi(pszInfPath), util.pwstrToFfi(pszEnvironment), dwFlags, (hwnd), util.pwstrToFfi(pszDestInfPath), util.toPointer(pcchDestInfPath));
}

export function GetCorePrinterDriversA(
  pszServer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszzCoreDriverDependencies: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cCorePrinterDrivers: number /* u32 */,
  pCorePrinterDrivers: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.GetCorePrinterDriversA(util.pstrToFfi(pszServer), util.pstrToFfi(pszEnvironment), util.pstrToFfi(pszzCoreDriverDependencies), cCorePrinterDrivers, util.toPointer(pCorePrinterDrivers));
}

export function GetCorePrinterDriversW(
  pszServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszzCoreDriverDependencies: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cCorePrinterDrivers: number /* u32 */,
  pCorePrinterDrivers: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.GetCorePrinterDriversW(util.pwstrToFfi(pszServer), util.pwstrToFfi(pszEnvironment), util.pwstrToFfi(pszzCoreDriverDependencies), cCorePrinterDrivers, util.toPointer(pCorePrinterDrivers));
}

export function CorePrinterDriverInstalledA(
  pszServer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  CoreDriverGUID: Uint8Array | Deno.PointerValue /* System.Guid */,
  ftDriverDate: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.FILETIME */,
  dwlDriverVersion: Deno.PointerValue /* u64 */,
  pbDriverInstalled: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.CorePrinterDriverInstalledA(util.pstrToFfi(pszServer), util.pstrToFfi(pszEnvironment), util.toPointer(CoreDriverGUID), util.toPointer(ftDriverDate), dwlDriverVersion, util.toPointer(pbDriverInstalled));
}

export function CorePrinterDriverInstalledW(
  pszServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  CoreDriverGUID: Uint8Array | Deno.PointerValue /* System.Guid */,
  ftDriverDate: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.FILETIME */,
  dwlDriverVersion: Deno.PointerValue /* u64 */,
  pbDriverInstalled: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.CorePrinterDriverInstalledW(util.pwstrToFfi(pszServer), util.pwstrToFfi(pszEnvironment), util.toPointer(CoreDriverGUID), util.toPointer(ftDriverDate), dwlDriverVersion, util.toPointer(pbDriverInstalled));
}

export function GetPrinterDriverPackagePathA(
  pszServer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszLanguage: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszPackageID: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszDriverPackageCab: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  cchDriverPackageCab: number /* u32 */,
  pcchRequiredSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.GetPrinterDriverPackagePathA(util.pstrToFfi(pszServer), util.pstrToFfi(pszEnvironment), util.pstrToFfi(pszLanguage), util.pstrToFfi(pszPackageID), util.pstrToFfi(pszDriverPackageCab), cchDriverPackageCab, util.toPointer(pcchRequiredSize));
}

export function GetPrinterDriverPackagePathW(
  pszServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszLanguage: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszPackageID: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszDriverPackageCab: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  cchDriverPackageCab: number /* u32 */,
  pcchRequiredSize: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.GetPrinterDriverPackagePathW(util.pwstrToFfi(pszServer), util.pwstrToFfi(pszEnvironment), util.pwstrToFfi(pszLanguage), util.pwstrToFfi(pszPackageID), util.pwstrToFfi(pszDriverPackageCab), cchDriverPackageCab, util.toPointer(pcchRequiredSize));
}

export function DeletePrinterDriverPackageA(
  pszServer: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszInfPath: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  pszEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.DeletePrinterDriverPackageA(util.pstrToFfi(pszServer), util.pstrToFfi(pszInfPath), util.pstrToFfi(pszEnvironment));
}

export function DeletePrinterDriverPackageW(
  pszServer: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszInfPath: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.DeletePrinterDriverPackageW(util.pwstrToFfi(pszServer), util.pwstrToFfi(pszInfPath), util.pwstrToFfi(pszEnvironment));
}

export function ReportJobProcessingProgress(
  printerHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  jobId: number /* u32 */,
  jobOperation: EPrintXPSJobOperation /* Windows.Win32.Graphics.Printing.EPrintXPSJobOperation */,
  jobProgress: EPrintXPSJobProgress /* Windows.Win32.Graphics.Printing.EPrintXPSJobProgress */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.ReportJobProcessingProgress(util.toPointer(printerHandle), jobId, jobOperation, jobProgress);
}

export function GetPrinterDriver2A(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pEnvironment: string | null | Uint8Array /* Windows.Win32.Foundation.PSTR */,
  Level: number /* u32 */,
  pDriverInfo: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetPrinterDriver2A((hWnd), util.toPointer(hPrinter), util.pstrToFfi(pEnvironment), Level, util.toPointer(pDriverInfo), cbBuf, util.toPointer(pcbNeeded)));
}

export function GetPrinterDriver2W(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pEnvironment: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  Level: number /* u32 */,
  pDriverInfo: Deno.PointerValue | Uint8Array /* ptr */,
  cbBuf: number /* u32 */,
  pcbNeeded: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetPrinterDriver2W((hWnd), util.toPointer(hPrinter), util.pwstrToFfi(pEnvironment), Level, util.toPointer(pDriverInfo), cbBuf, util.toPointer(pcbNeeded)));
}

export function GetPrintExecutionData(
  pData: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.GetPrintExecutionData(util.toPointer(pData)));
}

export function GetJobNamedPropertyValue(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pValue: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.GetJobNamedPropertyValue(util.toPointer(hPrinter), JobId, util.pwstrToFfi(pszName), util.toPointer(pValue));
}

export function FreePrintPropertyValue(
  pValue: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libwinspool_drv.FreePrintPropertyValue(util.toPointer(pValue));
}

export function FreePrintNamedPropertyArray(
  cProperties: number /* u32 */,
  ppProperties: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libwinspool_drv.FreePrintNamedPropertyArray(cProperties, util.toPointer(ppProperties));
}

export function SetJobNamedProperty(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  pProperty: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.SetJobNamedProperty(util.toPointer(hPrinter), JobId, util.toPointer(pProperty));
}

export function DeleteJobNamedProperty(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): number /* u32 */ {
  return libwinspool_drv.DeleteJobNamedProperty(util.toPointer(hPrinter), JobId, util.pwstrToFfi(pszName));
}

export function EnumJobNamedProperties(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  pcProperties: Deno.PointerValue | Uint8Array /* ptr */,
  ppProperties: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.EnumJobNamedProperties(util.toPointer(hPrinter), JobId, util.toPointer(pcProperties), util.toPointer(ppProperties));
}

export function GetPrintOutputInfo(
  hWnd: Deno.PointerValue /* Windows.Win32.Foundation.HWND */,
  pszPrinter: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  phFile: Deno.PointerValue | Uint8Array /* ptr */,
  ppszOutputFile: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.GetPrintOutputInfo((hWnd), util.pwstrToFfi(pszPrinter), util.toPointer(phFile), util.toPointer(ppszOutputFile));
}

export function DevQueryPrintEx(
  pDQPInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DevQueryPrintEx(util.toPointer(pDQPInfo)));
}

export function RegisterForPrintAsyncNotifications(
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pNotificationType: Deno.PointerValue | Uint8Array /* ptr */,
  eUserFilter: PrintAsyncNotifyUserFilter /* Windows.Win32.Graphics.Printing.PrintAsyncNotifyUserFilter */,
  eConversationStyle: PrintAsyncNotifyConversationStyle /* Windows.Win32.Graphics.Printing.PrintAsyncNotifyConversationStyle */,
  pCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Printing.IPrintAsyncNotifyCallback */,
  phNotify: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.RegisterForPrintAsyncNotifications(util.pwstrToFfi(pszName), util.toPointer(pNotificationType), eUserFilter, eConversationStyle, util.toPointer(pCallback), util.toPointer(phNotify));
}

export function UnRegisterForPrintAsyncNotifications(
  param0: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.UnRegisterForPrintAsyncNotifications(util.toPointer(param0));
}

export function CreatePrintAsyncNotifyChannel(
  pszName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pNotificationType: Deno.PointerValue | Uint8Array /* ptr */,
  eUserFilter: PrintAsyncNotifyUserFilter /* Windows.Win32.Graphics.Printing.PrintAsyncNotifyUserFilter */,
  eConversationStyle: PrintAsyncNotifyConversationStyle /* Windows.Win32.Graphics.Printing.PrintAsyncNotifyConversationStyle */,
  pCallback: Uint8Array | Deno.PointerValue /* Windows.Win32.Graphics.Printing.IPrintAsyncNotifyCallback */,
  ppIAsynchNotification: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libwinspool_drv.CreatePrintAsyncNotifyChannel(util.pwstrToFfi(pszName), util.toPointer(pNotificationType), eUserFilter, eConversationStyle, util.toPointer(pCallback), util.toPointer(ppIAsynchNotification));
}

export function GdiGetSpoolFileHandle(
  pwszPrinterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDevmode: Deno.PointerValue | Uint8Array /* ptr */,
  pwszDocName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libGDI32_dll.GdiGetSpoolFileHandle(util.pwstrToFfi(pwszPrinterName), util.toPointer(pDevmode), util.pwstrToFfi(pwszDocName));
}

export function GdiDeleteSpoolFileHandle(
  SpoolFileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GdiDeleteSpoolFileHandle(util.toPointer(SpoolFileHandle)));
}

export function GdiGetPageCount(
  SpoolFileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): number /* u32 */ {
  return libGDI32_dll.GdiGetPageCount(util.toPointer(SpoolFileHandle));
}

export function GdiGetDC(
  SpoolFileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Graphics.Gdi.HDC */ {
  return libGDI32_dll.GdiGetDC(util.toPointer(SpoolFileHandle));
}

export function GdiGetPageHandle(
  SpoolFileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  Page: number /* u32 */,
  pdwPageType: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libGDI32_dll.GdiGetPageHandle(util.toPointer(SpoolFileHandle), Page, util.toPointer(pdwPageType));
}

export function GdiStartDocEMF(
  SpoolFileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pDocInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GdiStartDocEMF(util.toPointer(SpoolFileHandle), util.toPointer(pDocInfo)));
}

export function GdiStartPageEMF(
  SpoolFileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GdiStartPageEMF(util.toPointer(SpoolFileHandle)));
}

export function GdiPlayPageEMF(
  SpoolFileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  hemf: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  prectDocument: Deno.PointerValue | Uint8Array /* ptr */,
  prectBorder: Deno.PointerValue | Uint8Array /* ptr */,
  prectClip: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GdiPlayPageEMF(util.toPointer(SpoolFileHandle), util.toPointer(hemf), util.toPointer(prectDocument), util.toPointer(prectBorder), util.toPointer(prectClip)));
}

export function GdiEndPageEMF(
  SpoolFileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwOptimization: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GdiEndPageEMF(util.toPointer(SpoolFileHandle), dwOptimization));
}

export function GdiEndDocEMF(
  SpoolFileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GdiEndDocEMF(util.toPointer(SpoolFileHandle)));
}

export function GdiGetDevmodeForPage(
  SpoolFileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwPageNumber: number /* u32 */,
  pCurrDM: Deno.PointerValue | Uint8Array /* ptr */,
  pLastDM: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GdiGetDevmodeForPage(util.toPointer(SpoolFileHandle), dwPageNumber, util.toPointer(pCurrDM), util.toPointer(pLastDM)));
}

export function GdiResetDCEMF(
  SpoolFileHandle: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pCurrDM: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libGDI32_dll.GdiResetDCEMF(util.toPointer(SpoolFileHandle), util.toPointer(pCurrDM)));
}

export function GetJobAttributes(
  pPrinterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDevmode: Deno.PointerValue | Uint8Array /* ptr */,
  pAttributeInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.GetJobAttributes(util.pwstrToFfi(pPrinterName), util.toPointer(pDevmode), util.toPointer(pAttributeInfo)));
}

export function GetJobAttributesEx(
  pPrinterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pDevmode: Deno.PointerValue | Uint8Array /* ptr */,
  dwLevel: number /* u32 */,
  pAttributeInfo: Deno.PointerValue | Uint8Array /* ptr */,
  nSize: number /* u32 */,
  dwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.GetJobAttributesEx(util.pwstrToFfi(pPrinterName), util.toPointer(pDevmode), dwLevel, util.toPointer(pAttributeInfo), nSize, dwFlags));
}

export function CreatePrinterIC(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pDevMode: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libwinspool_drv.CreatePrinterIC(util.toPointer(hPrinter), util.toPointer(pDevMode));
}

export function PlayGdiScriptOnPrinterIC(
  hPrinterIC: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pIn: Deno.PointerValue | Uint8Array /* ptr */,
  cIn: number /* u32 */,
  pOut: Deno.PointerValue | Uint8Array /* ptr */,
  cOut: number /* u32 */,
  ul: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.PlayGdiScriptOnPrinterIC(util.toPointer(hPrinterIC), util.toPointer(pIn), cIn, util.toPointer(pOut), cOut, ul));
}

export function DeletePrinterIC(
  hPrinterIC: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DeletePrinterIC(util.toPointer(hPrinterIC)));
}

export function DevQueryPrint(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pDevMode: Deno.PointerValue | Uint8Array /* ptr */,
  pResID: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libwinspool_drv.DevQueryPrint(util.toPointer(hPrinter), util.toPointer(pDevMode), util.toPointer(pResID)));
}

export function RevertToPrinterSelf(): Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */ {
  return libSPOOLSS_dll.RevertToPrinterSelf();
}

export function ImpersonatePrinterClient(
  hToken: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.ImpersonatePrinterClient(util.toPointer(hToken)));
}

export function ReplyPrinterChangeNotification(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  fdwChangeFlags: number /* u32 */,
  pdwResult: Deno.PointerValue | Uint8Array /* ptr */,
  pPrinterNotifyInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.ReplyPrinterChangeNotification(util.toPointer(hPrinter), fdwChangeFlags, util.toPointer(pdwResult), util.toPointer(pPrinterNotifyInfo)));
}

export function ReplyPrinterChangeNotificationEx(
  hNotify: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwColor: number /* u32 */,
  fdwFlags: number /* u32 */,
  pdwResult: Deno.PointerValue | Uint8Array /* ptr */,
  pPrinterNotifyInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.ReplyPrinterChangeNotificationEx(util.toPointer(hNotify), dwColor, fdwFlags, util.toPointer(pdwResult), util.toPointer(pPrinterNotifyInfo)));
}

export function PartialReplyPrinterChangeNotification(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pDataSrc: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.PartialReplyPrinterChangeNotification(util.toPointer(hPrinter), util.toPointer(pDataSrc)));
}

export function RouterAllocPrinterNotifyInfo(
  cPrinterNotifyInfoData: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libSPOOLSS_dll.RouterAllocPrinterNotifyInfo(cPrinterNotifyInfoData);
}

export function RouterFreePrinterNotifyInfo(
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.RouterFreePrinterNotifyInfo(util.toPointer(pInfo)));
}

export function RouterAllocBidiResponseContainer(
  Count: number /* u32 */,
): Deno.PointerValue /* ptr */ {
  return libSPOOLSS_dll.RouterAllocBidiResponseContainer(Count);
}

export function RouterAllocBidiMem(
  NumBytes: Deno.PointerValue /* usize */,
): Deno.PointerValue /* ptr */ {
  return libSPOOLSS_dll.RouterAllocBidiMem(NumBytes);
}

export function RouterFreeBidiResponseContainer(
  pData: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libwinspool_drv.RouterFreeBidiResponseContainer(util.toPointer(pData));
}

export function RouterFreeBidiMem(
  pMemPointer: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libSPOOLSS_dll.RouterFreeBidiMem(util.toPointer(pMemPointer));
}

export function AppendPrinterNotifyInfoData(
  pInfoDest: Deno.PointerValue | Uint8Array /* ptr */,
  pDataSrc: Deno.PointerValue | Uint8Array /* ptr */,
  fdwFlags: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.AppendPrinterNotifyInfoData(util.toPointer(pInfoDest), util.toPointer(pDataSrc), fdwFlags));
}

export function CallRouterFindFirstPrinterChangeNotification(
  hPrinterRPC: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  fdwFilterFlags: number /* u32 */,
  fdwOptions: number /* u32 */,
  hNotify: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pPrinterNotifyOptions: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libSPOOLSS_dll.CallRouterFindFirstPrinterChangeNotification(util.toPointer(hPrinterRPC), fdwFilterFlags, fdwOptions, util.toPointer(hNotify), util.toPointer(pPrinterNotifyOptions));
}

export function ProvidorFindFirstPrinterChangeNotification(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  fdwFlags: number /* u32 */,
  fdwOptions: number /* u32 */,
  hNotify: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pPrinterNotifyOptions: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved1: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.ProvidorFindFirstPrinterChangeNotification(util.toPointer(hPrinter), fdwFlags, fdwOptions, util.toPointer(hNotify), util.toPointer(pPrinterNotifyOptions), util.toPointer(pvReserved1)));
}

export function ProvidorFindClosePrinterChangeNotification(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.ProvidorFindClosePrinterChangeNotification(util.toPointer(hPrinter)));
}

export function SpoolerFindFirstPrinterChangeNotification(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  fdwFilterFlags: number /* u32 */,
  fdwOptions: number /* u32 */,
  pPrinterNotifyOptions: Deno.PointerValue | Uint8Array /* ptr */,
  pvReserved: Deno.PointerValue | Uint8Array /* ptr */,
  pNotificationConfig: Deno.PointerValue | Uint8Array /* ptr */,
  phNotify: Deno.PointerValue | Uint8Array /* ptr */,
  phEvent: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.SpoolerFindFirstPrinterChangeNotification(util.toPointer(hPrinter), fdwFilterFlags, fdwOptions, util.toPointer(pPrinterNotifyOptions), util.toPointer(pvReserved), util.toPointer(pNotificationConfig), util.toPointer(phNotify), util.toPointer(phEvent)));
}

export function SpoolerFindNextPrinterChangeNotification(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  pfdwChange: Deno.PointerValue | Uint8Array /* ptr */,
  pPrinterNotifyOptions: Deno.PointerValue | Uint8Array /* ptr */,
  ppPrinterNotifyInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.SpoolerFindNextPrinterChangeNotification(util.toPointer(hPrinter), util.toPointer(pfdwChange), util.toPointer(pPrinterNotifyOptions), util.toPointer(ppPrinterNotifyInfo)));
}

export function SpoolerRefreshPrinterChangeNotification(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  dwColor: number /* u32 */,
  pOptions: Deno.PointerValue | Uint8Array /* ptr */,
  ppInfo: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.SpoolerRefreshPrinterChangeNotification(util.toPointer(hPrinter), dwColor, util.toPointer(pOptions), util.toPointer(ppInfo)));
}

export function SpoolerFreePrinterNotifyInfo(
  pInfo: Deno.PointerValue | Uint8Array /* ptr */,
): void /* void */ {
  return libSPOOLSS_dll.SpoolerFreePrinterNotifyInfo(util.toPointer(pInfo));
}

export function SpoolerFindClosePrinterChangeNotification(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.SpoolerFindClosePrinterChangeNotification(util.toPointer(hPrinter)));
}

export function SpoolerCopyFileEvent(
  pszPrinterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszKey: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  dwCopyFileEvent: number /* u32 */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libmscms_dll.SpoolerCopyFileEvent(util.pwstrToFfi(pszPrinterName), util.pwstrToFfi(pszKey), dwCopyFileEvent));
}

export function GenerateCopyFilePaths(
  pszPrinterName: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pszDirectory: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pSplClientInfo: Deno.PointerValue | Uint8Array /* ptr */,
  dwLevel: number /* u32 */,
  pszSourceDir: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchSourceDirSize: Deno.PointerValue | Uint8Array /* ptr */,
  pszTargetDir: string | null | Uint8Array | Uint16Array /* Windows.Win32.Foundation.PWSTR */,
  pcchTargetDirSize: Deno.PointerValue | Uint8Array /* ptr */,
  dwFlags: number /* u32 */,
): number /* u32 */ {
  return libmscms_dll.GenerateCopyFilePaths(util.pwstrToFfi(pszPrinterName), util.pwstrToFfi(pszDirectory), util.toPointer(pSplClientInfo), dwLevel, util.pwstrToFfi(pszSourceDir), util.toPointer(pcchSourceDirSize), util.pwstrToFfi(pszTargetDir), util.toPointer(pcchTargetDirSize), dwFlags);
}

export function SplPromptUIInUsersSession(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  pUIParams: Deno.PointerValue | Uint8Array /* ptr */,
  pResponse: Deno.PointerValue | Uint8Array /* ptr */,
): boolean /* Windows.Win32.Foundation.BOOL */ {
  return util.boolFromFfi(libSPOOLSS_dll.SplPromptUIInUsersSession(util.toPointer(hPrinter), JobId, util.toPointer(pUIParams), util.toPointer(pResponse)));
}

export function SplIsSessionZero(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  JobId: number /* u32 */,
  pIsSessionZero: Deno.PointerValue | Uint8Array /* ptr */,
): number /* u32 */ {
  return libSPOOLSS_dll.SplIsSessionZero(util.toPointer(hPrinter), JobId, util.toPointer(pIsSessionZero));
}

export function AddPrintDeviceObject(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  phDeviceObject: Deno.PointerValue | Uint8Array /* ptr */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSPOOLSS_dll.AddPrintDeviceObject(util.toPointer(hPrinter), util.toPointer(phDeviceObject));
}

export function UpdatePrintDeviceObject(
  hPrinter: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
  hDeviceObject: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSPOOLSS_dll.UpdatePrintDeviceObject(util.toPointer(hPrinter), util.toPointer(hDeviceObject));
}

export function RemovePrintDeviceObject(
  hDeviceObject: Uint8Array | Deno.PointerValue /* Windows.Win32.Foundation.HANDLE */,
): Deno.PointerValue /* Windows.Win32.Foundation.HRESULT */ {
  return libSPOOLSS_dll.RemovePrintDeviceObject(util.toPointer(hDeviceObject));
}

