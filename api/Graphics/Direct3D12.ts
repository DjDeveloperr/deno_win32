/// Auto-generated by Deno Win32: Windows.Win32.Graphics.Direct3D12.Apis

import * as util from "../../util.ts";

// Enums
export type D3D12_COMMAND_LIST_TYPE = number;
export type D3D12_COMMAND_QUEUE_FLAGS = number;
export type D3D12_COMMAND_QUEUE_PRIORITY = number;
export type D3D12_PRIMITIVE_TOPOLOGY_TYPE = number;
export type D3D12_INPUT_CLASSIFICATION = number;
export type DXGI_FORMAT = number;
export type D3D12_FILL_MODE = number;
export type D3D12_CULL_MODE = number;
export type D3D12_COMPARISON_FUNC = number;
export type D3D12_DEPTH_WRITE_MASK = number;
export type D3D12_STENCIL_OP = number;
export type D3D12_BLEND = number;
export type D3D12_BLEND_OP = number;
export type D3D12_COLOR_WRITE_ENABLE = number;
export type D3D12_LOGIC_OP = number;
export type D3D12_CONSERVATIVE_RASTERIZATION_MODE = number;
export type D3D12_INDEX_BUFFER_STRIP_CUT_VALUE = number;
export type D3D12_PIPELINE_STATE_FLAGS = number;
export type D3D12_PIPELINE_STATE_SUBOBJECT_TYPE = number;
export type D3D12_FEATURE = number;
export type D3D12_SHADER_MIN_PRECISION_SUPPORT = number;
export type D3D12_TILED_RESOURCES_TIER = number;
export type D3D12_RESOURCE_BINDING_TIER = number;
export type D3D12_CONSERVATIVE_RASTERIZATION_TIER = number;
export type D3D12_FORMAT_SUPPORT1 = number;
export type D3D12_FORMAT_SUPPORT2 = number;
export type D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS = number;
export type D3D12_CROSS_NODE_SHARING_TIER = number;
export type D3D12_RESOURCE_HEAP_TIER = number;
export type D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER = number;
export type D3D12_VIEW_INSTANCING_TIER = number;
export type D3D_ROOT_SIGNATURE_VERSION = number;
export type D3D_FEATURE_LEVEL = number;
export type D3D_SHADER_MODEL = number;
export type D3D12_SHADER_CACHE_SUPPORT_FLAGS = number;
export type D3D12_COMMAND_LIST_SUPPORT_FLAGS = number;
export type D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER = number;
export type D3D12_HEAP_SERIALIZATION_TIER = number;
export type D3D12_RENDER_PASS_TIER = number;
export type D3D12_RAYTRACING_TIER = number;
export type D3D12_VARIABLE_SHADING_RATE_TIER = number;
export type D3D12_MESH_SHADER_TIER = number;
export type D3D12_SAMPLER_FEEDBACK_TIER = number;
export type D3D12_WAVE_MMA_TIER = number;
export type D3D12_HEAP_TYPE = number;
export type D3D12_CPU_PAGE_PROPERTY = number;
export type D3D12_MEMORY_POOL = number;
export type D3D12_HEAP_FLAGS = number;
export type D3D12_RESOURCE_DIMENSION = number;
export type D3D12_TEXTURE_LAYOUT = number;
export type D3D12_RESOURCE_FLAGS = number;
export type D3D12_TILE_RANGE_FLAGS = number;
export type D3D12_TILE_MAPPING_FLAGS = number;
export type D3D12_TILE_COPY_FLAGS = number;
export type D3D12_RESOURCE_STATES = number;
export type D3D12_RESOURCE_BARRIER_TYPE = number;
export type D3D12_RESOURCE_BARRIER_FLAGS = number;
export type D3D12_TEXTURE_COPY_TYPE = number;
export type D3D12_RESOLVE_MODE = number;
export type D3D12_VIEW_INSTANCING_FLAGS = number;
export type D3D12_SHADER_COMPONENT_MAPPING = number;
export type D3D12_BUFFER_SRV_FLAGS = number;
export type D3D12_SRV_DIMENSION = number;
export type D3D12_FILTER = number;
export type D3D12_FILTER_TYPE = number;
export type D3D12_FILTER_REDUCTION_TYPE = number;
export type D3D12_TEXTURE_ADDRESS_MODE = number;
export type D3D12_BUFFER_UAV_FLAGS = number;
export type D3D12_UAV_DIMENSION = number;
export type D3D12_RTV_DIMENSION = number;
export type D3D12_DSV_FLAGS = number;
export type D3D12_DSV_DIMENSION = number;
export type D3D12_CLEAR_FLAGS = number;
export type D3D12_FENCE_FLAGS = number;
export type D3D12_DESCRIPTOR_HEAP_TYPE = number;
export type D3D12_DESCRIPTOR_HEAP_FLAGS = number;
export type D3D12_DESCRIPTOR_RANGE_TYPE = number;
export type D3D12_SHADER_VISIBILITY = number;
export type D3D12_ROOT_PARAMETER_TYPE = number;
export type D3D12_ROOT_SIGNATURE_FLAGS = number;
export type D3D12_STATIC_BORDER_COLOR = number;
export type D3D12_DESCRIPTOR_RANGE_FLAGS = number;
export type D3D12_ROOT_DESCRIPTOR_FLAGS = number;
export type D3D12_QUERY_HEAP_TYPE = number;
export type D3D12_QUERY_TYPE = number;
export type D3D12_PREDICATION_OP = number;
export type D3D12_INDIRECT_ARGUMENT_TYPE = number;
export type D3D12_WRITEBUFFERIMMEDIATE_MODE = number;
export type D3D12_MULTIPLE_FENCE_WAIT_FLAGS = number;
export type D3D12_RESIDENCY_PRIORITY = number;
export type D3D12_RESIDENCY_FLAGS = number;
export type D3D12_COMMAND_LIST_FLAGS = number;
export type D3D12_COMMAND_POOL_FLAGS = number;
export type D3D12_COMMAND_RECORDER_FLAGS = number;
export type D3D12_PROTECTED_SESSION_STATUS = number;
export type D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS = number;
export type D3D12_PROTECTED_RESOURCE_SESSION_FLAGS = number;
export type D3D12_LIFETIME_STATE = number;
export type D3D12_META_COMMAND_PARAMETER_TYPE = number;
export type D3D12_META_COMMAND_PARAMETER_FLAGS = number;
export type D3D12_META_COMMAND_PARAMETER_STAGE = number;
export type D3D12_GRAPHICS_STATES = number;
export type D3D12_STATE_SUBOBJECT_TYPE = number;
export type D3D12_STATE_OBJECT_FLAGS = number;
export type D3D12_EXPORT_FLAGS = number;
export type D3D12_HIT_GROUP_TYPE = number;
export type D3D12_RAYTRACING_PIPELINE_FLAGS = number;
export type D3D12_STATE_OBJECT_TYPE = number;
export type D3D12_RAYTRACING_GEOMETRY_FLAGS = number;
export type D3D12_RAYTRACING_GEOMETRY_TYPE = number;
export type D3D12_RAYTRACING_INSTANCE_FLAGS = number;
export type D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS = number;
export type D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE = number;
export type D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE = number;
export type D3D12_ELEMENTS_LAYOUT = number;
export type D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE = number;
export type D3D12_SERIALIZED_DATA_TYPE = number;
export type D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS = number;
export type D3D12_RAY_FLAGS = number;
export type D3D12_HIT_KIND = number;
export type D3D12_AUTO_BREADCRUMB_OP = number;
export type D3D12_DRED_VERSION = number;
export type D3D12_DRED_FLAGS = number;
export type D3D12_DRED_ENABLEMENT = number;
export type D3D12_DRED_ALLOCATION_TYPE = number;
export type D3D12_DRED_PAGE_FAULT_FLAGS = number;
export type D3D12_DRED_DEVICE_STATE = number;
export type D3D12_BACKGROUND_PROCESSING_MODE = number;
export type D3D12_MEASUREMENTS_ACTION = number;
export type D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE = number;
export type D3D12_RENDER_PASS_ENDING_ACCESS_TYPE = number;
export type D3D12_RENDER_PASS_FLAGS = number;
export type D3D12_SHADER_CACHE_MODE = number;
export type D3D12_SHADER_CACHE_FLAGS = number;
export type D3D12_SHADER_CACHE_KIND_FLAGS = number;
export type D3D12_SHADER_CACHE_CONTROL_FLAGS = number;
export type D3D12_GPU_BASED_VALIDATION_FLAGS = number;
export type D3D12_RLDO_FLAGS = number;
export type D3D12_DEBUG_DEVICE_PARAMETER_TYPE = number;
export type D3D12_DEBUG_FEATURE = number;
export type D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE = number;
export type D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS = number;
export type D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE = number;
export type D3D12_MESSAGE_CATEGORY = number;
export type D3D12_MESSAGE_SEVERITY = number;
export type D3D12_MESSAGE_ID = number;
export type D3D12_MESSAGE_CALLBACK_FLAGS = number;
export type D3D12_AXIS_SHADING_RATE = number;
export type D3D12_SHADING_RATE = number;
export type D3D12_SHADING_RATE_COMBINER = number;
export type D3D12_SHADER_VERSION_TYPE = number;
export type D3D_NAME = number;
export type D3D_REGISTER_COMPONENT_TYPE = number;
export type D3D_MIN_PRECISION = number;
export type D3D_CBUFFER_TYPE = number;
export type D3D_SHADER_VARIABLE_CLASS = number;
export type D3D_SHADER_VARIABLE_TYPE = number;
export type D3D_PRIMITIVE_TOPOLOGY = number;
export type D3D_PRIMITIVE = number;
export type D3D_TESSELLATOR_OUTPUT_PRIMITIVE = number;
export type D3D_TESSELLATOR_PARTITIONING = number;
export type D3D_TESSELLATOR_DOMAIN = number;
export type D3D_SHADER_INPUT_TYPE = number;
export type D3D_RESOURCE_RETURN_TYPE = number;
export type D3D_SRV_DIMENSION = number;
export type D3D_INTERPOLATION_MODE = number;
export type D3D_PARAMETER_FLAGS = number;

// Constants
export const D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES = 4096;
export const D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING = 5768;
export const D3D12_16BIT_INDEX_STRIP_CUT_VALUE = 65535;
export const D3D12_32BIT_INDEX_STRIP_CUT_VALUE = 4294967295;
export const D3D12_8BIT_INDEX_STRIP_CUT_VALUE = 255;
export const D3D12_APPEND_ALIGNED_ELEMENT = 4294967295;
export const D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
export const D3D12_CLIP_OR_CULL_DISTANCE_COUNT = 8;
export const D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
export const D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
export const D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
export const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
export const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
export const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
export const D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
export const D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
export const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
export const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
export const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
export const D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
export const D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
export const D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
export const D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
export const D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
export const D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
export const D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
export const D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
export const D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
export const D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
export const D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
export const D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
export const D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
export const D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = `-10`;
export const D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = `-8`;
export const D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
export const D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT = 256;
export const D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
export const D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
export const D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
export const D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
export const D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
export const D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
export const D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
export const D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
export const D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
export const D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
export const D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
export const D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
export const D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
export const D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
export const D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
export const D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
export const D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
export const D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
export const D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
export const D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
export const D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
export const D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
export const D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
export const D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
export const D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
export const D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
export const D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
export const D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
export const D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
export const D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
export const D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
export const D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
export const D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
export const D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
export const D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
export const D3D12_CS_4_X_THREAD_GROUP_MAX_X = 768;
export const D3D12_CS_4_X_THREAD_GROUP_MAX_Y = 768;
export const D3D12_CS_4_X_UAV_REGISTER_COUNT = 1;
export const D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
export const D3D12_CS_TGSM_REGISTER_COUNT = 8192;
export const D3D12_CS_TGSM_REGISTER_READS_PER_INST = 1;
export const D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
export const D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
export const D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS = 3;
export const D3D12_CS_THREADGROUPID_REGISTER_COUNT = 1;
export const D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1;
export const D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1;
export const D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3;
export const D3D12_CS_THREADIDINGROUP_REGISTER_COUNT = 1;
export const D3D12_CS_THREADID_REGISTER_COMPONENTS = 3;
export const D3D12_CS_THREADID_REGISTER_COUNT = 1;
export const D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
export const D3D12_CS_THREAD_GROUP_MAX_X = 1024;
export const D3D12_CS_THREAD_GROUP_MAX_Y = 1024;
export const D3D12_CS_THREAD_GROUP_MAX_Z = 64;
export const D3D12_CS_THREAD_GROUP_MIN_X = 1;
export const D3D12_CS_THREAD_GROUP_MIN_Y = 1;
export const D3D12_CS_THREAD_GROUP_MIN_Z = 1;
export const D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
export const D3D12_DEFAULT_BLEND_FACTOR_ALPHA = 1;
export const D3D12_DEFAULT_BLEND_FACTOR_BLUE = 1;
export const D3D12_DEFAULT_BLEND_FACTOR_GREEN = 1;
export const D3D12_DEFAULT_BLEND_FACTOR_RED = 1;
export const D3D12_DEFAULT_BORDER_COLOR_COMPONENT = 0;
export const D3D12_DEFAULT_DEPTH_BIAS = 0;
export const D3D12_DEFAULT_DEPTH_BIAS_CLAMP = 0;
export const D3D12_DEFAULT_MAX_ANISOTROPY = 16;
export const D3D12_DEFAULT_MIP_LOD_BIAS = 0;
export const D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 4194304;
export const D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
export const D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
export const D3D12_DEFAULT_SAMPLE_MASK = 4294967295;
export const D3D12_DEFAULT_SCISSOR_ENDX = 0;
export const D3D12_DEFAULT_SCISSOR_ENDY = 0;
export const D3D12_DEFAULT_SCISSOR_STARTX = 0;
export const D3D12_DEFAULT_SCISSOR_STARTY = 0;
export const D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0;
export const D3D12_DEFAULT_STENCIL_READ_MASK = 255;
export const D3D12_DEFAULT_STENCIL_REFERENCE = 0;
export const D3D12_DEFAULT_STENCIL_WRITE_MASK = 255;
export const D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
export const D3D12_DEFAULT_VIEWPORT_HEIGHT = 0;
export const D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = 0;
export const D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = 0;
export const D3D12_DEFAULT_VIEWPORT_TOPLEFTX = 0;
export const D3D12_DEFAULT_VIEWPORT_TOPLEFTY = 0;
export const D3D12_DEFAULT_VIEWPORT_WIDTH = 0;
export const D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = 4294967295;
export const D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END = 4294967287;
export const D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START = 4294967280;
export const D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
export const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
export const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
export const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
export const D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
export const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
export const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
export const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
export const D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
export const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
export const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
export const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
export const D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
export const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
export const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
export const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
export const D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
export const D3D12_DS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_DS_OUTPUT_REGISTER_COUNT = 32;
export const D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP = `0.6`;
export const D3D12_FLOAT32_MAX = `3.4028234663852886e+38`;
export const D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = `0.6000000238418579`;
export const D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = `2.4000000953674316`;
export const D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1;
export const D3D12_FLOAT_TO_SRGB_OFFSET = `0.054999999701976776`;
export const D3D12_FLOAT_TO_SRGB_SCALE_1 = `12.920000076293945`;
export const D3D12_FLOAT_TO_SRGB_SCALE_2 = `1.0549999475479126`;
export const D3D12_FLOAT_TO_SRGB_THRESHOLD = `0.0031308000907301903`;
export const D3D12_FTOI_INSTRUCTION_MAX_INPUT = 2147483648;
export const D3D12_FTOI_INSTRUCTION_MIN_INPUT = `-2147483648`;
export const D3D12_FTOU_INSTRUCTION_MAX_INPUT = 4294967296;
export const D3D12_FTOU_INSTRUCTION_MIN_INPUT = 0;
export const D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
export const D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
export const D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
export const D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
export const D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
export const D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
export const D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
export const D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
export const D3D12_GS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_GS_INPUT_REGISTER_COUNT = 32;
export const D3D12_GS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D12_GS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D12_GS_INPUT_REGISTER_VERTICES = 32;
export const D3D12_GS_MAX_INSTANCE_COUNT = 32;
export const D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
export const D3D12_GS_OUTPUT_ELEMENTS = 32;
export const D3D12_GS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_GS_OUTPUT_REGISTER_COUNT = 32;
export const D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
export const D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
export const D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
export const D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
export const D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
export const D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295;
export const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
export const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
export const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
export const D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
export const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
export const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
export const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
export const D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
export const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
export const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
export const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
export const D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
export const D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = 4294967295;
export const D3D12_HS_MAXTESSFACTOR_LOWER_BOUND = 1;
export const D3D12_HS_MAXTESSFACTOR_UPPER_BOUND = 64;
export const D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
export const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
export const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
export const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
export const D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
export const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
export const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
export const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
export const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
export const D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128;
export const D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
export const D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
export const D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
export const D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
export const D3D12_IA_INSTANCE_ID_BIT_COUNT = 32;
export const D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
export const D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
export const D3D12_IA_PRIMITIVE_ID_BIT_COUNT = 32;
export const D3D12_IA_VERTEX_ID_BIT_COUNT = 32;
export const D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
export const D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
export const D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
export const D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = 4294967295;
export const D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER = 4294967295;
export const D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 4294967295;
export const D3D12_KEEP_UNORDERED_ACCESS_VIEWS = 4294967295;
export const D3D12_LINEAR_GAMMA = 1;
export const D3D12_MAJOR_VERSION = 12;
export const D3D12_MAX_BORDER_COLOR_COMPONENT = 1;
export const D3D12_MAX_DEPTH = 1;
export const D3D12_MAX_LIVE_STATIC_SAMPLERS = 2032;
export const D3D12_MAX_MAXANISOTROPY = 16;
export const D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
export const D3D12_MAX_POSITION_VALUE = `3.4028235832468283e+34`;
export const D3D12_MAX_ROOT_COST = 64;
export const D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 = 1000000;
export const D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 = 1000000;
export const D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE = 2048;
export const D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
export const D3D12_MAX_VIEW_INSTANCE_COUNT = 4;
export const D3D12_MINOR_VERSION = 0;
export const D3D12_MIN_BORDER_COLOR_COMPONENT = 0;
export const D3D12_MIN_DEPTH = 0;
export const D3D12_MIN_MAXANISOTROPY = 0;
export const D3D12_MIP_LOD_BIAS_MAX = `15.989999771118164`;
export const D3D12_MIP_LOD_BIAS_MIN = `-16`;
export const D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;
export const D3D12_MIP_LOD_RANGE_BIT_COUNT = 8;
export const D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = `1.399999976158142`;
export const D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
export const D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = 4294967295;
export const D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = 4294967288;
export const D3D12_PACKED_TILE = 4294967295;
export const D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
export const D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
export const D3D12_PS_CS_UAV_REGISTER_COMPONENTS = 1;
export const D3D12_PS_CS_UAV_REGISTER_COUNT = 8;
export const D3D12_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
export const D3D12_PS_CS_UAV_REGISTER_READ_PORTS = 1;
export const D3D12_PS_FRONTFACING_DEFAULT_VALUE = 4294967295;
export const D3D12_PS_FRONTFACING_FALSE_VALUE = 0;
export const D3D12_PS_FRONTFACING_TRUE_VALUE = 4294967295;
export const D3D12_PS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_PS_INPUT_REGISTER_COUNT = 32;
export const D3D12_PS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D12_PS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0;
export const D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
export const D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
export const D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
export const D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
export const D3D12_PS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_PS_OUTPUT_REGISTER_COUNT = 8;
export const D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = `0.5`;
export const D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
export const D3D12_RAYTRACING_AABB_BYTE_ALIGNMENT = 8;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT = 256;
export const D3D12_RAYTRACING_INSTANCE_DESCS_BYTE_ALIGNMENT = 16;
export const D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES = 32;
export const D3D12_RAYTRACING_MAX_DECLARABLE_TRACE_RECURSION_DEPTH = 31;
export const D3D12_RAYTRACING_MAX_GEOMETRIES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = 16777216;
export const D3D12_RAYTRACING_MAX_INSTANCES_PER_TOP_LEVEL_ACCELERATION_STRUCTURE = 16777216;
export const D3D12_RAYTRACING_MAX_PRIMITIVES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = 536870912;
export const D3D12_RAYTRACING_MAX_RAY_GENERATION_SHADER_THREADS = 1073741824;
export const D3D12_RAYTRACING_MAX_SHADER_RECORD_STRIDE = 4096;
export const D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT = 32;
export const D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT = 64;
export const D3D12_RAYTRACING_TRANSFORM3X4_BYTE_ALIGNMENT = 16;
export const D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
export const D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
export const D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
export const D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
export const D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
export const D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
export const D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
export const D3D12_REQ_MAXANISOTROPY = 16;
export const D3D12_REQ_MIP_LEVELS = 15;
export const D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
export const D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
export const D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
export const D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = `0.25`;
export const D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048;
export const D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
export const D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
export const D3D12_REQ_SUBRESOURCES = 30720;
export const D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
export const D3D12_REQ_TEXTURE1D_U_DIMENSION = 16384;
export const D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
export const D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
export const D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
export const D3D12_REQ_TEXTURECUBE_DIMENSION = 16384;
export const D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
export const D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = 4294967295;
export const D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT = 2;
export const D3D12_SDK_VERSION = 5;
export const D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES = 32;
export const D3D12_SHADER_MAJOR_VERSION = 5;
export const D3D12_SHADER_MAX_INSTANCES = 65535;
export const D3D12_SHADER_MAX_INTERFACES = 253;
export const D3D12_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
export const D3D12_SHADER_MAX_TYPES = 65535;
export const D3D12_SHADER_MINOR_VERSION = 1;
export const D3D12_SHIFT_INSTRUCTION_PAD_VALUE = 0;
export const D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
export const D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
export const D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
export const D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT = 4096;
export const D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
export const D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
export const D3D12_SO_BUFFER_SLOT_COUNT = 4;
export const D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 4294967295;
export const D3D12_SO_NO_RASTERIZED_STREAM = 4294967295;
export const D3D12_SO_OUTPUT_COMPONENT_COUNT = 128;
export const D3D12_SO_STREAM_COUNT = 4;
export const D3D12_SPEC_DATE_DAY = 14;
export const D3D12_SPEC_DATE_MONTH = 11;
export const D3D12_SPEC_DATE_YEAR = 2014;
export const D3D12_SPEC_VERSION = `1.16`;
export const D3D12_SRGB_GAMMA = `2.200000047683716`;
export const D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 = `12.920000076293945`;
export const D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 = `1.0549999475479126`;
export const D3D12_SRGB_TO_FLOAT_EXPONENT = `2.4000000953674316`;
export const D3D12_SRGB_TO_FLOAT_OFFSET = `0.054999999701976776`;
export const D3D12_SRGB_TO_FLOAT_THRESHOLD = `0.040449999272823334`;
export const D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = `0.5`;
export const D3D12_STANDARD_COMPONENT_BIT_COUNT = 32;
export const D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
export const D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
export const D3D12_STANDARD_PIXEL_COMPONENT_COUNT = 128;
export const D3D12_STANDARD_PIXEL_ELEMENT_COUNT = 32;
export const D3D12_STANDARD_VECTOR_SIZE = 4;
export const D3D12_STANDARD_VERTEX_ELEMENT_COUNT = 32;
export const D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
export const D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
export const D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
export const D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END = 4294967295;
export const D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START = 4294967280;
export const D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
export const D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
export const D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
export const D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
export const D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
export const D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
export const D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
export const D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
export const D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = 256;
export const D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = 512;
export const D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536;
export const D3D12_TRACKED_WORKLOAD_MAX_INSTANCES = 32;
export const D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = 4096;
export const D3D12_UAV_SLOT_COUNT = 64;
export const D3D12_UNBOUND_MEMORY_ACCESS_RESULT = 0;
export const D3D12_VIDEO_DECODE_MAX_ARGUMENTS = 10;
export const D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS = 4;
export const D3D12_VIDEO_DECODE_MIN_BITSTREAM_OFFSET_ALIGNMENT = 256;
export const D3D12_VIDEO_DECODE_MIN_HISTOGRAM_OFFSET_ALIGNMENT = 256;
export const D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN = 4294967295;
export const D3D12_VIDEO_PROCESS_MAX_FILTERS = 32;
export const D3D12_VIDEO_PROCESS_STEREO_VIEWS = 2;
export const D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
export const D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
export const D3D12_VIEWPORT_BOUNDS_MAX = 32767;
export const D3D12_VIEWPORT_BOUNDS_MIN = `-32768`;
export const D3D12_VS_INPUT_REGISTER_COMPONENTS = 4;
export const D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_VS_INPUT_REGISTER_COUNT = 32;
export const D3D12_VS_INPUT_REGISTER_READS_PER_INST = 2;
export const D3D12_VS_INPUT_REGISTER_READ_PORTS = 1;
export const D3D12_VS_OUTPUT_REGISTER_COMPONENTS = 4;
export const D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
export const D3D12_VS_OUTPUT_REGISTER_COUNT = 32;
export const D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
export const D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
export const D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;
export const D3D12_SHADER_COMPONENT_MAPPING_MASK = 7;
export const D3D12_SHADER_COMPONENT_MAPPING_SHIFT = 3;
export const D3D12_FILTER_REDUCTION_TYPE_MASK = 3;
export const D3D12_FILTER_REDUCTION_TYPE_SHIFT = 7;
export const D3D12_FILTER_TYPE_MASK = 3;
export const D3D12_MIN_FILTER_SHIFT = 4;
export const D3D12_MAG_FILTER_SHIFT = 2;
export const D3D12_MIP_FILTER_SHIFT = 0;
export const D3D12_ANISOTROPIC_FILTERING_BIT = 64;
export const LUID_DEFINED = 1;
export const D3D12_SHADING_RATE_X_AXIS_SHIFT = 2;
export const D3D12_SHADING_RATE_VALID_MASK = 3;
export const D3D12_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024;
export const D3D_SHADER_REQUIRES_STENCIL_REF = 512;
export const D3D_SHADER_REQUIRES_INNER_COVERAGE = 1024;
export const D3D_SHADER_REQUIRES_TYPED_UAV_LOAD_ADDITIONAL_FORMATS = 2048;
export const D3D_SHADER_REQUIRES_ROVS = 4096;
export const D3D_SHADER_REQUIRES_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER = 8192;
export const D3D_SHADER_REQUIRES_WAVE_OPS = 16384;
export const D3D_SHADER_REQUIRES_INT64_OPS = 32768;
export const D3D_SHADER_REQUIRES_VIEW_ID = 65536;
export const D3D_SHADER_REQUIRES_BARYCENTRICS = 131072;
export const D3D_SHADER_REQUIRES_NATIVE_16BIT_OPS = 262144;
export const D3D_SHADER_REQUIRES_SHADING_RATE = 524288;
export const D3D_SHADER_REQUIRES_RAYTRACING_TIER_1_1 = 1048576;
export const D3D_SHADER_REQUIRES_SAMPLER_FEEDBACK = 2097152;
export const D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_TYPED_RESOURCE = 4194304;
export const D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_GROUP_SHARED = 8388608;
export const D3D_SHADER_REQUIRES_DERIVATIVES_IN_MESH_AND_AMPLIFICATION_SHADERS = 16777216;
export const D3D_SHADER_REQUIRES_RESOURCE_DESCRIPTOR_HEAP_INDEXING = 33554432;
export const D3D_SHADER_REQUIRES_SAMPLER_DESCRIPTOR_HEAP_INDEXING = 67108864;
export const D3D_SHADER_REQUIRES_WAVE_MMA = 134217728;
export const D3D_SHADER_REQUIRES_ATOMIC_INT64_ON_DESCRIPTOR_HEAP_RESOURCE = 268435456;
export const D3D12_COMMAND_LIST_TYPE_DIRECT = 0;
export const D3D12_COMMAND_LIST_TYPE_BUNDLE = 1;
export const D3D12_COMMAND_LIST_TYPE_COMPUTE = 2;
export const D3D12_COMMAND_LIST_TYPE_COPY = 3;
export const D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE = 4;
export const D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS = 5;
export const D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE = 6;
export const D3D12_COMMAND_QUEUE_FLAG_NONE = 0;
export const D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 1;
export const D3D12_COMMAND_QUEUE_PRIORITY_NORMAL = 0;
export const D3D12_COMMAND_QUEUE_PRIORITY_HIGH = 100;
export const D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME = 10000;
export const D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0;
export const D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT = 1;
export const D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE = 2;
export const D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3;
export const D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4;
export const D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA = 0;
export const D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1;
export const DXGI_FORMAT_UNKNOWN = 0;
export const DXGI_FORMAT_R32G32B32A32_TYPELESS = 1;
export const DXGI_FORMAT_R32G32B32A32_FLOAT = 2;
export const DXGI_FORMAT_R32G32B32A32_UINT = 3;
export const DXGI_FORMAT_R32G32B32A32_SINT = 4;
export const DXGI_FORMAT_R32G32B32_TYPELESS = 5;
export const DXGI_FORMAT_R32G32B32_FLOAT = 6;
export const DXGI_FORMAT_R32G32B32_UINT = 7;
export const DXGI_FORMAT_R32G32B32_SINT = 8;
export const DXGI_FORMAT_R16G16B16A16_TYPELESS = 9;
export const DXGI_FORMAT_R16G16B16A16_FLOAT = 10;
export const DXGI_FORMAT_R16G16B16A16_UNORM = 11;
export const DXGI_FORMAT_R16G16B16A16_UINT = 12;
export const DXGI_FORMAT_R16G16B16A16_SNORM = 13;
export const DXGI_FORMAT_R16G16B16A16_SINT = 14;
export const DXGI_FORMAT_R32G32_TYPELESS = 15;
export const DXGI_FORMAT_R32G32_FLOAT = 16;
export const DXGI_FORMAT_R32G32_UINT = 17;
export const DXGI_FORMAT_R32G32_SINT = 18;
export const DXGI_FORMAT_R32G8X24_TYPELESS = 19;
export const DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20;
export const DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21;
export const DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22;
export const DXGI_FORMAT_R10G10B10A2_TYPELESS = 23;
export const DXGI_FORMAT_R10G10B10A2_UNORM = 24;
export const DXGI_FORMAT_R10G10B10A2_UINT = 25;
export const DXGI_FORMAT_R11G11B10_FLOAT = 26;
export const DXGI_FORMAT_R8G8B8A8_TYPELESS = 27;
export const DXGI_FORMAT_R8G8B8A8_UNORM = 28;
export const DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29;
export const DXGI_FORMAT_R8G8B8A8_UINT = 30;
export const DXGI_FORMAT_R8G8B8A8_SNORM = 31;
export const DXGI_FORMAT_R8G8B8A8_SINT = 32;
export const DXGI_FORMAT_R16G16_TYPELESS = 33;
export const DXGI_FORMAT_R16G16_FLOAT = 34;
export const DXGI_FORMAT_R16G16_UNORM = 35;
export const DXGI_FORMAT_R16G16_UINT = 36;
export const DXGI_FORMAT_R16G16_SNORM = 37;
export const DXGI_FORMAT_R16G16_SINT = 38;
export const DXGI_FORMAT_R32_TYPELESS = 39;
export const DXGI_FORMAT_D32_FLOAT = 40;
export const DXGI_FORMAT_R32_FLOAT = 41;
export const DXGI_FORMAT_R32_UINT = 42;
export const DXGI_FORMAT_R32_SINT = 43;
export const DXGI_FORMAT_R24G8_TYPELESS = 44;
export const DXGI_FORMAT_D24_UNORM_S8_UINT = 45;
export const DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46;
export const DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47;
export const DXGI_FORMAT_R8G8_TYPELESS = 48;
export const DXGI_FORMAT_R8G8_UNORM = 49;
export const DXGI_FORMAT_R8G8_UINT = 50;
export const DXGI_FORMAT_R8G8_SNORM = 51;
export const DXGI_FORMAT_R8G8_SINT = 52;
export const DXGI_FORMAT_R16_TYPELESS = 53;
export const DXGI_FORMAT_R16_FLOAT = 54;
export const DXGI_FORMAT_D16_UNORM = 55;
export const DXGI_FORMAT_R16_UNORM = 56;
export const DXGI_FORMAT_R16_UINT = 57;
export const DXGI_FORMAT_R16_SNORM = 58;
export const DXGI_FORMAT_R16_SINT = 59;
export const DXGI_FORMAT_R8_TYPELESS = 60;
export const DXGI_FORMAT_R8_UNORM = 61;
export const DXGI_FORMAT_R8_UINT = 62;
export const DXGI_FORMAT_R8_SNORM = 63;
export const DXGI_FORMAT_R8_SINT = 64;
export const DXGI_FORMAT_A8_UNORM = 65;
export const DXGI_FORMAT_R1_UNORM = 66;
export const DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67;
export const DXGI_FORMAT_R8G8_B8G8_UNORM = 68;
export const DXGI_FORMAT_G8R8_G8B8_UNORM = 69;
export const DXGI_FORMAT_BC1_TYPELESS = 70;
export const DXGI_FORMAT_BC1_UNORM = 71;
export const DXGI_FORMAT_BC1_UNORM_SRGB = 72;
export const DXGI_FORMAT_BC2_TYPELESS = 73;
export const DXGI_FORMAT_BC2_UNORM = 74;
export const DXGI_FORMAT_BC2_UNORM_SRGB = 75;
export const DXGI_FORMAT_BC3_TYPELESS = 76;
export const DXGI_FORMAT_BC3_UNORM = 77;
export const DXGI_FORMAT_BC3_UNORM_SRGB = 78;
export const DXGI_FORMAT_BC4_TYPELESS = 79;
export const DXGI_FORMAT_BC4_UNORM = 80;
export const DXGI_FORMAT_BC4_SNORM = 81;
export const DXGI_FORMAT_BC5_TYPELESS = 82;
export const DXGI_FORMAT_BC5_UNORM = 83;
export const DXGI_FORMAT_BC5_SNORM = 84;
export const DXGI_FORMAT_B5G6R5_UNORM = 85;
export const DXGI_FORMAT_B5G5R5A1_UNORM = 86;
export const DXGI_FORMAT_B8G8R8A8_UNORM = 87;
export const DXGI_FORMAT_B8G8R8X8_UNORM = 88;
export const DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89;
export const DXGI_FORMAT_B8G8R8A8_TYPELESS = 90;
export const DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91;
export const DXGI_FORMAT_B8G8R8X8_TYPELESS = 92;
export const DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93;
export const DXGI_FORMAT_BC6H_TYPELESS = 94;
export const DXGI_FORMAT_BC6H_UF16 = 95;
export const DXGI_FORMAT_BC6H_SF16 = 96;
export const DXGI_FORMAT_BC7_TYPELESS = 97;
export const DXGI_FORMAT_BC7_UNORM = 98;
export const DXGI_FORMAT_BC7_UNORM_SRGB = 99;
export const DXGI_FORMAT_AYUV = 100;
export const DXGI_FORMAT_Y410 = 101;
export const DXGI_FORMAT_Y416 = 102;
export const DXGI_FORMAT_NV12 = 103;
export const DXGI_FORMAT_P010 = 104;
export const DXGI_FORMAT_P016 = 105;
export const DXGI_FORMAT_420_OPAQUE = 106;
export const DXGI_FORMAT_YUY2 = 107;
export const DXGI_FORMAT_Y210 = 108;
export const DXGI_FORMAT_Y216 = 109;
export const DXGI_FORMAT_NV11 = 110;
export const DXGI_FORMAT_AI44 = 111;
export const DXGI_FORMAT_IA44 = 112;
export const DXGI_FORMAT_P8 = 113;
export const DXGI_FORMAT_A8P8 = 114;
export const DXGI_FORMAT_B4G4R4A4_UNORM = 115;
export const DXGI_FORMAT_P208 = 130;
export const DXGI_FORMAT_V208 = 131;
export const DXGI_FORMAT_V408 = 132;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE = 189;
export const DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE = 190;
export const DXGI_FORMAT_FORCE_UINT = 4294967295;
export const D3D12_FILL_MODE_WIREFRAME = 2;
export const D3D12_FILL_MODE_SOLID = 3;
export const D3D12_CULL_MODE_NONE = 1;
export const D3D12_CULL_MODE_FRONT = 2;
export const D3D12_CULL_MODE_BACK = 3;
export const D3D12_COMPARISON_FUNC_NEVER = 1;
export const D3D12_COMPARISON_FUNC_LESS = 2;
export const D3D12_COMPARISON_FUNC_EQUAL = 3;
export const D3D12_COMPARISON_FUNC_LESS_EQUAL = 4;
export const D3D12_COMPARISON_FUNC_GREATER = 5;
export const D3D12_COMPARISON_FUNC_NOT_EQUAL = 6;
export const D3D12_COMPARISON_FUNC_GREATER_EQUAL = 7;
export const D3D12_COMPARISON_FUNC_ALWAYS = 8;
export const D3D12_DEPTH_WRITE_MASK_ZERO = 0;
export const D3D12_DEPTH_WRITE_MASK_ALL = 1;
export const D3D12_STENCIL_OP_KEEP = 1;
export const D3D12_STENCIL_OP_ZERO = 2;
export const D3D12_STENCIL_OP_REPLACE = 3;
export const D3D12_STENCIL_OP_INCR_SAT = 4;
export const D3D12_STENCIL_OP_DECR_SAT = 5;
export const D3D12_STENCIL_OP_INVERT = 6;
export const D3D12_STENCIL_OP_INCR = 7;
export const D3D12_STENCIL_OP_DECR = 8;
export const D3D12_BLEND_ZERO = 1;
export const D3D12_BLEND_ONE = 2;
export const D3D12_BLEND_SRC_COLOR = 3;
export const D3D12_BLEND_INV_SRC_COLOR = 4;
export const D3D12_BLEND_SRC_ALPHA = 5;
export const D3D12_BLEND_INV_SRC_ALPHA = 6;
export const D3D12_BLEND_DEST_ALPHA = 7;
export const D3D12_BLEND_INV_DEST_ALPHA = 8;
export const D3D12_BLEND_DEST_COLOR = 9;
export const D3D12_BLEND_INV_DEST_COLOR = 10;
export const D3D12_BLEND_SRC_ALPHA_SAT = 11;
export const D3D12_BLEND_BLEND_FACTOR = 14;
export const D3D12_BLEND_INV_BLEND_FACTOR = 15;
export const D3D12_BLEND_SRC1_COLOR = 16;
export const D3D12_BLEND_INV_SRC1_COLOR = 17;
export const D3D12_BLEND_SRC1_ALPHA = 18;
export const D3D12_BLEND_INV_SRC1_ALPHA = 19;
export const D3D12_BLEND_OP_ADD = 1;
export const D3D12_BLEND_OP_SUBTRACT = 2;
export const D3D12_BLEND_OP_REV_SUBTRACT = 3;
export const D3D12_BLEND_OP_MIN = 4;
export const D3D12_BLEND_OP_MAX = 5;
export const D3D12_COLOR_WRITE_ENABLE_RED = 1;
export const D3D12_COLOR_WRITE_ENABLE_GREEN = 2;
export const D3D12_COLOR_WRITE_ENABLE_BLUE = 4;
export const D3D12_COLOR_WRITE_ENABLE_ALPHA = 8;
export const D3D12_COLOR_WRITE_ENABLE_ALL = 15;
export const D3D12_LOGIC_OP_CLEAR = 0;
export const D3D12_LOGIC_OP_SET = 1;
export const D3D12_LOGIC_OP_COPY = 2;
export const D3D12_LOGIC_OP_COPY_INVERTED = 3;
export const D3D12_LOGIC_OP_NOOP = 4;
export const D3D12_LOGIC_OP_INVERT = 5;
export const D3D12_LOGIC_OP_AND = 6;
export const D3D12_LOGIC_OP_NAND = 7;
export const D3D12_LOGIC_OP_OR = 8;
export const D3D12_LOGIC_OP_NOR = 9;
export const D3D12_LOGIC_OP_XOR = 10;
export const D3D12_LOGIC_OP_EQUIV = 11;
export const D3D12_LOGIC_OP_AND_REVERSE = 12;
export const D3D12_LOGIC_OP_AND_INVERTED = 13;
export const D3D12_LOGIC_OP_OR_REVERSE = 14;
export const D3D12_LOGIC_OP_OR_INVERTED = 15;
export const D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0;
export const D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON = 1;
export const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED = 0;
export const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF = 1;
export const D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF = 2;
export const D3D12_PIPELINE_STATE_FLAG_NONE = 0;
export const D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG = 1;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE = 0;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS = 1;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS = 2;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS = 3;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS = 4;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS = 5;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS = 6;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT = 7;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND = 8;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK = 9;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER = 10;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL = 11;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT = 12;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE = 13;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY = 14;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS = 15;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT = 16;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC = 17;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK = 18;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO = 19;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS = 20;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 = 21;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING = 22;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS = 24;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS = 25;
export const D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID = 26;
export const D3D12_FEATURE_D3D12_OPTIONS = 0;
export const D3D12_FEATURE_ARCHITECTURE = 1;
export const D3D12_FEATURE_FEATURE_LEVELS = 2;
export const D3D12_FEATURE_FORMAT_SUPPORT = 3;
export const D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS = 4;
export const D3D12_FEATURE_FORMAT_INFO = 5;
export const D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 6;
export const D3D12_FEATURE_SHADER_MODEL = 7;
export const D3D12_FEATURE_D3D12_OPTIONS1 = 8;
export const D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT = 10;
export const D3D12_FEATURE_ROOT_SIGNATURE = 12;
export const D3D12_FEATURE_ARCHITECTURE1 = 16;
export const D3D12_FEATURE_D3D12_OPTIONS2 = 18;
export const D3D12_FEATURE_SHADER_CACHE = 19;
export const D3D12_FEATURE_COMMAND_QUEUE_PRIORITY = 20;
export const D3D12_FEATURE_D3D12_OPTIONS3 = 21;
export const D3D12_FEATURE_EXISTING_HEAPS = 22;
export const D3D12_FEATURE_D3D12_OPTIONS4 = 23;
export const D3D12_FEATURE_SERIALIZATION = 24;
export const D3D12_FEATURE_CROSS_NODE = 25;
export const D3D12_FEATURE_D3D12_OPTIONS5 = 27;
export const D3D12_FEATURE_DISPLAYABLE = 28;
export const D3D12_FEATURE_D3D12_OPTIONS6 = 30;
export const D3D12_FEATURE_QUERY_META_COMMAND = 31;
export const D3D12_FEATURE_D3D12_OPTIONS7 = 32;
export const D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT = 33;
export const D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES = 34;
export const D3D12_FEATURE_D3D12_OPTIONS8 = 36;
export const D3D12_FEATURE_D3D12_OPTIONS9 = 37;
export const D3D12_FEATURE_D3D12_OPTIONS10 = 39;
export const D3D12_FEATURE_D3D12_OPTIONS11 = 40;
export const D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE = 0;
export const D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT = 1;
export const D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT = 2;
export const D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED = 0;
export const D3D12_TILED_RESOURCES_TIER_1 = 1;
export const D3D12_TILED_RESOURCES_TIER_2 = 2;
export const D3D12_TILED_RESOURCES_TIER_3 = 3;
export const D3D12_TILED_RESOURCES_TIER_4 = 4;
export const D3D12_RESOURCE_BINDING_TIER_1 = 1;
export const D3D12_RESOURCE_BINDING_TIER_2 = 2;
export const D3D12_RESOURCE_BINDING_TIER_3 = 3;
export const D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = 0;
export const D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 = 1;
export const D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 = 2;
export const D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 = 3;
export const D3D12_FORMAT_SUPPORT1_NONE = 0;
export const D3D12_FORMAT_SUPPORT1_BUFFER = 1;
export const D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER = 2;
export const D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER = 4;
export const D3D12_FORMAT_SUPPORT1_SO_BUFFER = 8;
export const D3D12_FORMAT_SUPPORT1_TEXTURE1D = 16;
export const D3D12_FORMAT_SUPPORT1_TEXTURE2D = 32;
export const D3D12_FORMAT_SUPPORT1_TEXTURE3D = 64;
export const D3D12_FORMAT_SUPPORT1_TEXTURECUBE = 128;
export const D3D12_FORMAT_SUPPORT1_SHADER_LOAD = 256;
export const D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE = 512;
export const D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON = 1024;
export const D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT = 2048;
export const D3D12_FORMAT_SUPPORT1_MIP = 4096;
export const D3D12_FORMAT_SUPPORT1_RENDER_TARGET = 16384;
export const D3D12_FORMAT_SUPPORT1_BLENDABLE = 32768;
export const D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL = 65536;
export const D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE = 262144;
export const D3D12_FORMAT_SUPPORT1_DISPLAY = 524288;
export const D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT = 1048576;
export const D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET = 2097152;
export const D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD = 4194304;
export const D3D12_FORMAT_SUPPORT1_SHADER_GATHER = 8388608;
export const D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST = 16777216;
export const D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = 33554432;
export const D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON = 67108864;
export const D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT = 134217728;
export const D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT = 268435456;
export const D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT = 536870912;
export const D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER = 1073741824;
export const D3D12_FORMAT_SUPPORT2_NONE = 0;
export const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 1;
export const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 2;
export const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 4;
export const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 8;
export const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 16;
export const D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 32;
export const D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 64;
export const D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE = 128;
export const D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 256;
export const D3D12_FORMAT_SUPPORT2_TILED = 512;
export const D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 16384;
export const D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK = 32768;
export const D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE = 0;
export const D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = 1;
export const D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED = 0;
export const D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED = 1;
export const D3D12_CROSS_NODE_SHARING_TIER_1 = 2;
export const D3D12_CROSS_NODE_SHARING_TIER_2 = 3;
export const D3D12_CROSS_NODE_SHARING_TIER_3 = 4;
export const D3D12_RESOURCE_HEAP_TIER_1 = 1;
export const D3D12_RESOURCE_HEAP_TIER_2 = 2;
export const D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED = 0;
export const D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1 = 1;
export const D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2 = 2;
export const D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED = 0;
export const D3D12_VIEW_INSTANCING_TIER_1 = 1;
export const D3D12_VIEW_INSTANCING_TIER_2 = 2;
export const D3D12_VIEW_INSTANCING_TIER_3 = 3;
export const D3D_ROOT_SIGNATURE_VERSION_1 = 1;
export const D3D_ROOT_SIGNATURE_VERSION_1_0 = 1;
export const D3D_ROOT_SIGNATURE_VERSION_1_1 = 2;
export const D3D_FEATURE_LEVEL_1_0_CORE = 4096;
export const D3D_FEATURE_LEVEL_9_1 = 37120;
export const D3D_FEATURE_LEVEL_9_2 = 37376;
export const D3D_FEATURE_LEVEL_9_3 = 37632;
export const D3D_FEATURE_LEVEL_10_0 = 40960;
export const D3D_FEATURE_LEVEL_10_1 = 41216;
export const D3D_FEATURE_LEVEL_11_0 = 45056;
export const D3D_FEATURE_LEVEL_11_1 = 45312;
export const D3D_FEATURE_LEVEL_12_0 = 49152;
export const D3D_FEATURE_LEVEL_12_1 = 49408;
export const D3D_FEATURE_LEVEL_12_2 = 49664;
export const D3D_SHADER_MODEL_5_1 = 81;
export const D3D_SHADER_MODEL_6_0 = 96;
export const D3D_SHADER_MODEL_6_1 = 97;
export const D3D_SHADER_MODEL_6_2 = 98;
export const D3D_SHADER_MODEL_6_3 = 99;
export const D3D_SHADER_MODEL_6_4 = 100;
export const D3D_SHADER_MODEL_6_5 = 101;
export const D3D_SHADER_MODEL_6_6 = 102;
export const D3D_SHADER_MODEL_6_7 = 103;
export const D3D12_SHADER_CACHE_SUPPORT_NONE = 0;
export const D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO = 1;
export const D3D12_SHADER_CACHE_SUPPORT_LIBRARY = 2;
export const D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 4;
export const D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 8;
export const D3D12_SHADER_CACHE_SUPPORT_DRIVER_MANAGED_CACHE = 16;
export const D3D12_SHADER_CACHE_SUPPORT_SHADER_CONTROL_CLEAR = 32;
export const D3D12_SHADER_CACHE_SUPPORT_SHADER_SESSION_DELETE = 64;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE = 0;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT = 1;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE = 2;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE = 4;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY = 8;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE = 16;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS = 32;
export const D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE = 64;
export const D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 = 0;
export const D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1 = 1;
export const D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2 = 2;
export const D3D12_HEAP_SERIALIZATION_TIER_0 = 0;
export const D3D12_HEAP_SERIALIZATION_TIER_10 = 10;
export const D3D12_RENDER_PASS_TIER_0 = 0;
export const D3D12_RENDER_PASS_TIER_1 = 1;
export const D3D12_RENDER_PASS_TIER_2 = 2;
export const D3D12_RAYTRACING_TIER_NOT_SUPPORTED = 0;
export const D3D12_RAYTRACING_TIER_1_0 = 10;
export const D3D12_RAYTRACING_TIER_1_1 = 11;
export const D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED = 0;
export const D3D12_VARIABLE_SHADING_RATE_TIER_1 = 1;
export const D3D12_VARIABLE_SHADING_RATE_TIER_2 = 2;
export const D3D12_MESH_SHADER_TIER_NOT_SUPPORTED = 0;
export const D3D12_MESH_SHADER_TIER_1 = 10;
export const D3D12_SAMPLER_FEEDBACK_TIER_NOT_SUPPORTED = 0;
export const D3D12_SAMPLER_FEEDBACK_TIER_0_9 = 90;
export const D3D12_SAMPLER_FEEDBACK_TIER_1_0 = 100;
export const D3D12_WAVE_MMA_TIER_NOT_SUPPORTED = 0;
export const D3D12_WAVE_MMA_TIER_1_0 = 10;
export const D3D12_HEAP_TYPE_DEFAULT = 1;
export const D3D12_HEAP_TYPE_UPLOAD = 2;
export const D3D12_HEAP_TYPE_READBACK = 3;
export const D3D12_HEAP_TYPE_CUSTOM = 4;
export const D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0;
export const D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1;
export const D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE = 2;
export const D3D12_CPU_PAGE_PROPERTY_WRITE_BACK = 3;
export const D3D12_MEMORY_POOL_UNKNOWN = 0;
export const D3D12_MEMORY_POOL_L0 = 1;
export const D3D12_MEMORY_POOL_L1 = 2;
export const D3D12_HEAP_FLAG_NONE = 0;
export const D3D12_HEAP_FLAG_SHARED = 1;
export const D3D12_HEAP_FLAG_DENY_BUFFERS = 4;
export const D3D12_HEAP_FLAG_ALLOW_DISPLAY = 8;
export const D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER = 32;
export const D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES = 64;
export const D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES = 128;
export const D3D12_HEAP_FLAG_HARDWARE_PROTECTED = 256;
export const D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH = 512;
export const D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS = 1024;
export const D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT = 2048;
export const D3D12_HEAP_FLAG_CREATE_NOT_ZEROED = 4096;
export const D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES = 0;
export const D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS = 192;
export const D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES = 68;
export const D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES = 132;
export const D3D12_RESOURCE_DIMENSION_UNKNOWN = 0;
export const D3D12_RESOURCE_DIMENSION_BUFFER = 1;
export const D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2;
export const D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3;
export const D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4;
export const D3D12_TEXTURE_LAYOUT_UNKNOWN = 0;
export const D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1;
export const D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2;
export const D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = 3;
export const D3D12_RESOURCE_FLAG_NONE = 0;
export const D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = 1;
export const D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = 2;
export const D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = 4;
export const D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = 8;
export const D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = 16;
export const D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = 32;
export const D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY = 64;
export const D3D12_RESOURCE_FLAG_VIDEO_ENCODE_REFERENCE_ONLY = 128;
export const D3D12_TILE_RANGE_FLAG_NONE = 0;
export const D3D12_TILE_RANGE_FLAG_NULL = 1;
export const D3D12_TILE_RANGE_FLAG_SKIP = 2;
export const D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4;
export const D3D12_TILE_MAPPING_FLAG_NONE = 0;
export const D3D12_TILE_MAPPING_FLAG_NO_HAZARD = 1;
export const D3D12_TILE_COPY_FLAG_NONE = 0;
export const D3D12_TILE_COPY_FLAG_NO_HAZARD = 1;
export const D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 2;
export const D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 4;
export const D3D12_RESOURCE_STATE_COMMON = 0;
export const D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = 1;
export const D3D12_RESOURCE_STATE_INDEX_BUFFER = 2;
export const D3D12_RESOURCE_STATE_RENDER_TARGET = 4;
export const D3D12_RESOURCE_STATE_UNORDERED_ACCESS = 8;
export const D3D12_RESOURCE_STATE_DEPTH_WRITE = 16;
export const D3D12_RESOURCE_STATE_DEPTH_READ = 32;
export const D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = 64;
export const D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE = 128;
export const D3D12_RESOURCE_STATE_STREAM_OUT = 256;
export const D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT = 512;
export const D3D12_RESOURCE_STATE_COPY_DEST = 1024;
export const D3D12_RESOURCE_STATE_COPY_SOURCE = 2048;
export const D3D12_RESOURCE_STATE_RESOLVE_DEST = 4096;
export const D3D12_RESOURCE_STATE_RESOLVE_SOURCE = 8192;
export const D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE = 4194304;
export const D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE = 16777216;
export const D3D12_RESOURCE_STATE_GENERIC_READ = 2755;
export const D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE = 192;
export const D3D12_RESOURCE_STATE_PRESENT = 0;
export const D3D12_RESOURCE_STATE_PREDICATION = 512;
export const D3D12_RESOURCE_STATE_VIDEO_DECODE_READ = 65536;
export const D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE = 131072;
export const D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ = 262144;
export const D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE = 524288;
export const D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ = 2097152;
export const D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE = 8388608;
export const D3D12_RESOURCE_BARRIER_TYPE_TRANSITION = 0;
export const D3D12_RESOURCE_BARRIER_TYPE_ALIASING = 1;
export const D3D12_RESOURCE_BARRIER_TYPE_UAV = 2;
export const D3D12_RESOURCE_BARRIER_FLAG_NONE = 0;
export const D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY = 1;
export const D3D12_RESOURCE_BARRIER_FLAG_END_ONLY = 2;
export const D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX = 0;
export const D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT = 1;
export const D3D12_RESOLVE_MODE_DECOMPRESS = 0;
export const D3D12_RESOLVE_MODE_MIN = 1;
export const D3D12_RESOLVE_MODE_MAX = 2;
export const D3D12_RESOLVE_MODE_AVERAGE = 3;
export const D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK = 4;
export const D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK = 5;
export const D3D12_VIEW_INSTANCING_FLAG_NONE = 0;
export const D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING = 1;
export const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 = 0;
export const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 = 1;
export const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 = 2;
export const D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 = 3;
export const D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 = 4;
export const D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 = 5;
export const D3D12_BUFFER_SRV_FLAG_NONE = 0;
export const D3D12_BUFFER_SRV_FLAG_RAW = 1;
export const D3D12_SRV_DIMENSION_UNKNOWN = 0;
export const D3D12_SRV_DIMENSION_BUFFER = 1;
export const D3D12_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D12_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D12_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D12_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D12_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D12_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D12_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE = 11;
export const D3D12_FILTER_MIN_MAG_MIP_POINT = 0;
export const D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1;
export const D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4;
export const D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5;
export const D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16;
export const D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17;
export const D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20;
export const D3D12_FILTER_MIN_MAG_MIP_LINEAR = 21;
export const D3D12_FILTER_ANISOTROPIC = 85;
export const D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128;
export const D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129;
export const D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132;
export const D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133;
export const D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144;
export const D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145;
export const D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148;
export const D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149;
export const D3D12_FILTER_COMPARISON_ANISOTROPIC = 213;
export const D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 256;
export const D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 257;
export const D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 260;
export const D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 261;
export const D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 272;
export const D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 273;
export const D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 276;
export const D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 277;
export const D3D12_FILTER_MINIMUM_ANISOTROPIC = 341;
export const D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 384;
export const D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 385;
export const D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 388;
export const D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 389;
export const D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 400;
export const D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 401;
export const D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 404;
export const D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 405;
export const D3D12_FILTER_MAXIMUM_ANISOTROPIC = 469;
export const D3D12_FILTER_TYPE_POINT = 0;
export const D3D12_FILTER_TYPE_LINEAR = 1;
export const D3D12_FILTER_REDUCTION_TYPE_STANDARD = 0;
export const D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1;
export const D3D12_FILTER_REDUCTION_TYPE_MINIMUM = 2;
export const D3D12_FILTER_REDUCTION_TYPE_MAXIMUM = 3;
export const D3D12_TEXTURE_ADDRESS_MODE_WRAP = 1;
export const D3D12_TEXTURE_ADDRESS_MODE_MIRROR = 2;
export const D3D12_TEXTURE_ADDRESS_MODE_CLAMP = 3;
export const D3D12_TEXTURE_ADDRESS_MODE_BORDER = 4;
export const D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE = 5;
export const D3D12_BUFFER_UAV_FLAG_NONE = 0;
export const D3D12_BUFFER_UAV_FLAG_RAW = 1;
export const D3D12_UAV_DIMENSION_UNKNOWN = 0;
export const D3D12_UAV_DIMENSION_BUFFER = 1;
export const D3D12_UAV_DIMENSION_TEXTURE1D = 2;
export const D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D12_UAV_DIMENSION_TEXTURE2D = 4;
export const D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D12_UAV_DIMENSION_TEXTURE3D = 8;
export const D3D12_RTV_DIMENSION_UNKNOWN = 0;
export const D3D12_RTV_DIMENSION_BUFFER = 1;
export const D3D12_RTV_DIMENSION_TEXTURE1D = 2;
export const D3D12_RTV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D12_RTV_DIMENSION_TEXTURE2D = 4;
export const D3D12_RTV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D12_RTV_DIMENSION_TEXTURE2DMS = 6;
export const D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D12_RTV_DIMENSION_TEXTURE3D = 8;
export const D3D12_DSV_FLAG_NONE = 0;
export const D3D12_DSV_FLAG_READ_ONLY_DEPTH = 1;
export const D3D12_DSV_FLAG_READ_ONLY_STENCIL = 2;
export const D3D12_DSV_DIMENSION_UNKNOWN = 0;
export const D3D12_DSV_DIMENSION_TEXTURE1D = 1;
export const D3D12_DSV_DIMENSION_TEXTURE1DARRAY = 2;
export const D3D12_DSV_DIMENSION_TEXTURE2D = 3;
export const D3D12_DSV_DIMENSION_TEXTURE2DARRAY = 4;
export const D3D12_DSV_DIMENSION_TEXTURE2DMS = 5;
export const D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6;
export const D3D12_CLEAR_FLAG_DEPTH = 1;
export const D3D12_CLEAR_FLAG_STENCIL = 2;
export const D3D12_FENCE_FLAG_NONE = 0;
export const D3D12_FENCE_FLAG_SHARED = 1;
export const D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER = 2;
export const D3D12_FENCE_FLAG_NON_MONITORED = 4;
export const D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV = 0;
export const D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER = 1;
export const D3D12_DESCRIPTOR_HEAP_TYPE_RTV = 2;
export const D3D12_DESCRIPTOR_HEAP_TYPE_DSV = 3;
export const D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES = 4;
export const D3D12_DESCRIPTOR_HEAP_FLAG_NONE = 0;
export const D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE = 1;
export const D3D12_DESCRIPTOR_RANGE_TYPE_SRV = 0;
export const D3D12_DESCRIPTOR_RANGE_TYPE_UAV = 1;
export const D3D12_DESCRIPTOR_RANGE_TYPE_CBV = 2;
export const D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER = 3;
export const D3D12_SHADER_VISIBILITY_ALL = 0;
export const D3D12_SHADER_VISIBILITY_VERTEX = 1;
export const D3D12_SHADER_VISIBILITY_HULL = 2;
export const D3D12_SHADER_VISIBILITY_DOMAIN = 3;
export const D3D12_SHADER_VISIBILITY_GEOMETRY = 4;
export const D3D12_SHADER_VISIBILITY_PIXEL = 5;
export const D3D12_SHADER_VISIBILITY_AMPLIFICATION = 6;
export const D3D12_SHADER_VISIBILITY_MESH = 7;
export const D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE = 0;
export const D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS = 1;
export const D3D12_ROOT_PARAMETER_TYPE_CBV = 2;
export const D3D12_ROOT_PARAMETER_TYPE_SRV = 3;
export const D3D12_ROOT_PARAMETER_TYPE_UAV = 4;
export const D3D12_ROOT_SIGNATURE_FLAG_NONE = 0;
export const D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 1;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS = 2;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS = 4;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS = 8;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS = 16;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS = 32;
export const D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT = 64;
export const D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE = 128;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS = 256;
export const D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS = 512;
export const D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED = 1024;
export const D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED = 2048;
export const D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK = 0;
export const D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK = 1;
export const D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE = 2;
export const D3D12_DESCRIPTOR_RANGE_FLAG_NONE = 0;
export const D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE = 1;
export const D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE = 2;
export const D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4;
export const D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC = 8;
export const D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS = 65536;
export const D3D12_ROOT_DESCRIPTOR_FLAG_NONE = 0;
export const D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE = 2;
export const D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4;
export const D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC = 8;
export const D3D12_QUERY_HEAP_TYPE_OCCLUSION = 0;
export const D3D12_QUERY_HEAP_TYPE_TIMESTAMP = 1;
export const D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS = 2;
export const D3D12_QUERY_HEAP_TYPE_SO_STATISTICS = 3;
export const D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS = 4;
export const D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP = 5;
export const D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS1 = 7;
export const D3D12_QUERY_TYPE_OCCLUSION = 0;
export const D3D12_QUERY_TYPE_BINARY_OCCLUSION = 1;
export const D3D12_QUERY_TYPE_TIMESTAMP = 2;
export const D3D12_QUERY_TYPE_PIPELINE_STATISTICS = 3;
export const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 = 4;
export const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 = 5;
export const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 = 6;
export const D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 = 7;
export const D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS = 8;
export const D3D12_QUERY_TYPE_PIPELINE_STATISTICS1 = 10;
export const D3D12_PREDICATION_OP_EQUAL_ZERO = 0;
export const D3D12_PREDICATION_OP_NOT_EQUAL_ZERO = 1;
export const D3D12_INDIRECT_ARGUMENT_TYPE_DRAW = 0;
export const D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED = 1;
export const D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH = 2;
export const D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW = 3;
export const D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW = 4;
export const D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT = 5;
export const D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW = 6;
export const D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW = 7;
export const D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW = 8;
export const D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS = 9;
export const D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH = 10;
export const D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT = 0;
export const D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN = 1;
export const D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT = 2;
export const D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE = 0;
export const D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY = 1;
export const D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL = 0;
export const D3D12_RESIDENCY_PRIORITY_MINIMUM = 671088640;
export const D3D12_RESIDENCY_PRIORITY_LOW = 1342177280;
export const D3D12_RESIDENCY_PRIORITY_NORMAL = 2013265920;
export const D3D12_RESIDENCY_PRIORITY_HIGH = `-1610547200`;
export const D3D12_RESIDENCY_PRIORITY_MAXIMUM = `-939524096`;
export const D3D12_RESIDENCY_FLAG_NONE = 0;
export const D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET = 1;
export const D3D12_COMMAND_LIST_FLAG_NONE = 0;
export const D3D12_COMMAND_POOL_FLAG_NONE = 0;
export const D3D12_COMMAND_RECORDER_FLAG_NONE = 0;
export const D3D12_PROTECTED_SESSION_STATUS_OK = 0;
export const D3D12_PROTECTED_SESSION_STATUS_INVALID = 1;
export const D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE = 0;
export const D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED = 1;
export const D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE = 0;
export const D3D12_LIFETIME_STATE_IN_USE = 0;
export const D3D12_LIFETIME_STATE_NOT_IN_USE = 1;
export const D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT = 0;
export const D3D12_META_COMMAND_PARAMETER_TYPE_UINT64 = 1;
export const D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS = 2;
export const D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 3;
export const D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 4;
export const D3D12_META_COMMAND_PARAMETER_FLAG_INPUT = 1;
export const D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT = 2;
export const D3D12_META_COMMAND_PARAMETER_STAGE_CREATION = 0;
export const D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1;
export const D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION = 2;
export const D3D12_GRAPHICS_STATE_NONE = 0;
export const D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS = 1;
export const D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER = 2;
export const D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY = 4;
export const D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP = 8;
export const D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE = 16;
export const D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE = 32;
export const D3D12_GRAPHICS_STATE_RS_VIEWPORTS = 64;
export const D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS = 128;
export const D3D12_GRAPHICS_STATE_PREDICATION = 256;
export const D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS = 512;
export const D3D12_GRAPHICS_STATE_OM_STENCIL_REF = 1024;
export const D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR = 2048;
export const D3D12_GRAPHICS_STATE_PIPELINE_STATE = 4096;
export const D3D12_GRAPHICS_STATE_SO_TARGETS = 8192;
export const D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS = 16384;
export const D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS = 32768;
export const D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK = 65536;
export const D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG = 0;
export const D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE = 1;
export const D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE = 2;
export const D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK = 3;
export const D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY = 5;
export const D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION = 6;
export const D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 7;
export const D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 8;
export const D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG = 9;
export const D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG = 10;
export const D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP = 11;
export const D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1 = 12;
export const D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID = 13;
export const D3D12_STATE_OBJECT_FLAG_NONE = 0;
export const D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS = 1;
export const D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS = 2;
export const D3D12_STATE_OBJECT_FLAG_ALLOW_STATE_OBJECT_ADDITIONS = 4;
export const D3D12_EXPORT_FLAG_NONE = 0;
export const D3D12_HIT_GROUP_TYPE_TRIANGLES = 0;
export const D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE = 1;
export const D3D12_RAYTRACING_PIPELINE_FLAG_NONE = 0;
export const D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES = 256;
export const D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 512;
export const D3D12_STATE_OBJECT_TYPE_COLLECTION = 0;
export const D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE = 3;
export const D3D12_RAYTRACING_GEOMETRY_FLAG_NONE = 0;
export const D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE = 1;
export const D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION = 2;
export const D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES = 0;
export const D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS = 1;
export const D3D12_RAYTRACING_INSTANCE_FLAG_NONE = 0;
export const D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE = 1;
export const D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE = 2;
export const D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE = 4;
export const D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE = 8;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE = 0;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE = 1;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION = 2;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE = 4;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD = 8;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY = 16;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE = 32;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE = 0;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT = 1;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS = 2;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE = 3;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE = 4;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL = 0;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL = 1;
export const D3D12_ELEMENTS_LAYOUT_ARRAY = 0;
export const D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS = 1;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE = 0;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION = 1;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION = 2;
export const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE = 3;
export const D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE = 0;
export const D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE = 0;
export const D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE = 1;
export const D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED = 2;
export const D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION = 3;
export const D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE = 4;
export const D3D12_RAY_FLAG_NONE = 0;
export const D3D12_RAY_FLAG_FORCE_OPAQUE = 1;
export const D3D12_RAY_FLAG_FORCE_NON_OPAQUE = 2;
export const D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH = 4;
export const D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER = 8;
export const D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES = 16;
export const D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES = 32;
export const D3D12_RAY_FLAG_CULL_OPAQUE = 64;
export const D3D12_RAY_FLAG_CULL_NON_OPAQUE = 128;
export const D3D12_RAY_FLAG_SKIP_TRIANGLES = 256;
export const D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 512;
export const D3D12_HIT_KIND_TRIANGLE_FRONT_FACE = 254;
export const D3D12_HIT_KIND_TRIANGLE_BACK_FACE = 255;
export const D3D12_AUTO_BREADCRUMB_OP_SETMARKER = 0;
export const D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT = 1;
export const D3D12_AUTO_BREADCRUMB_OP_ENDEVENT = 2;
export const D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED = 3;
export const D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED = 4;
export const D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT = 5;
export const D3D12_AUTO_BREADCRUMB_OP_DISPATCH = 6;
export const D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION = 7;
export const D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION = 8;
export const D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE = 9;
export const D3D12_AUTO_BREADCRUMB_OP_COPYTILES = 10;
export const D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE = 11;
export const D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW = 12;
export const D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW = 13;
export const D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW = 14;
export const D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER = 15;
export const D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE = 16;
export const D3D12_AUTO_BREADCRUMB_OP_PRESENT = 17;
export const D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA = 18;
export const D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION = 19;
export const D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION = 20;
export const D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME = 21;
export const D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES = 22;
export const D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT = 23;
export const D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64 = 24;
export const D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION = 25;
export const D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE = 26;
export const D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1 = 27;
export const D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION = 28;
export const D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2 = 29;
export const D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1 = 30;
export const D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE = 31;
export const D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO = 32;
export const D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE = 33;
export const D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS = 34;
export const D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND = 35;
export const D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND = 36;
export const D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION = 37;
export const D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP = 38;
export const D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1 = 39;
export const D3D12_AUTO_BREADCRUMB_OP_INITIALIZEEXTENSIONCOMMAND = 40;
export const D3D12_AUTO_BREADCRUMB_OP_EXECUTEEXTENSIONCOMMAND = 41;
export const D3D12_AUTO_BREADCRUMB_OP_DISPATCHMESH = 42;
export const D3D12_AUTO_BREADCRUMB_OP_ENCODEFRAME = 43;
export const D3D12_AUTO_BREADCRUMB_OP_RESOLVEENCODEROUTPUTMETADATA = 44;
export const D3D12_DRED_VERSION_1_0 = 1;
export const D3D12_DRED_VERSION_1_1 = 2;
export const D3D12_DRED_VERSION_1_2 = 3;
export const D3D12_DRED_VERSION_1_3 = 4;
export const D3D12_DRED_FLAG_NONE = 0;
export const D3D12_DRED_FLAG_FORCE_ENABLE = 1;
export const D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS = 2;
export const D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED = 0;
export const D3D12_DRED_ENABLEMENT_FORCED_OFF = 1;
export const D3D12_DRED_ENABLEMENT_FORCED_ON = 2;
export const D3D12_DRED_ALLOCATION_TYPE_COMMAND_QUEUE = 19;
export const D3D12_DRED_ALLOCATION_TYPE_COMMAND_ALLOCATOR = 20;
export const D3D12_DRED_ALLOCATION_TYPE_PIPELINE_STATE = 21;
export const D3D12_DRED_ALLOCATION_TYPE_COMMAND_LIST = 22;
export const D3D12_DRED_ALLOCATION_TYPE_FENCE = 23;
export const D3D12_DRED_ALLOCATION_TYPE_DESCRIPTOR_HEAP = 24;
export const D3D12_DRED_ALLOCATION_TYPE_HEAP = 25;
export const D3D12_DRED_ALLOCATION_TYPE_QUERY_HEAP = 27;
export const D3D12_DRED_ALLOCATION_TYPE_COMMAND_SIGNATURE = 28;
export const D3D12_DRED_ALLOCATION_TYPE_PIPELINE_LIBRARY = 29;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER = 30;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_PROCESSOR = 32;
export const D3D12_DRED_ALLOCATION_TYPE_RESOURCE = 34;
export const D3D12_DRED_ALLOCATION_TYPE_PASS = 35;
export const D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSION = 36;
export const D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSIONPOLICY = 37;
export const D3D12_DRED_ALLOCATION_TYPE_PROTECTEDRESOURCESESSION = 38;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER_HEAP = 39;
export const D3D12_DRED_ALLOCATION_TYPE_COMMAND_POOL = 40;
export const D3D12_DRED_ALLOCATION_TYPE_COMMAND_RECORDER = 41;
export const D3D12_DRED_ALLOCATION_TYPE_STATE_OBJECT = 42;
export const D3D12_DRED_ALLOCATION_TYPE_METACOMMAND = 43;
export const D3D12_DRED_ALLOCATION_TYPE_SCHEDULINGGROUP = 44;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_ESTIMATOR = 45;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_VECTOR_HEAP = 46;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_EXTENSION_COMMAND = 47;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER = 48;
export const D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER_HEAP = 49;
export const D3D12_DRED_ALLOCATION_TYPE_INVALID = `-1`;
export const D3D12_DRED_PAGE_FAULT_FLAGS_NONE = 0;
export const D3D12_DRED_DEVICE_STATE_UNKNOWN = 0;
export const D3D12_DRED_DEVICE_STATE_HUNG = 3;
export const D3D12_DRED_DEVICE_STATE_FAULT = 6;
export const D3D12_DRED_DEVICE_STATE_PAGEFAULT = 7;
export const D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED = 0;
export const D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS = 1;
export const D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK = 2;
export const D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM = 3;
export const D3D12_MEASUREMENTS_ACTION_KEEP_ALL = 0;
export const D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS = 1;
export const D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY = 2;
export const D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS = 3;
export const D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD = 0;
export const D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE = 1;
export const D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR = 2;
export const D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS = 3;
export const D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD = 0;
export const D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE = 1;
export const D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE = 2;
export const D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS = 3;
export const D3D12_RENDER_PASS_FLAG_NONE = 0;
export const D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES = 1;
export const D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS = 2;
export const D3D12_RENDER_PASS_FLAG_RESUMING_PASS = 4;
export const D3D12_SHADER_CACHE_MODE_MEMORY = 0;
export const D3D12_SHADER_CACHE_MODE_DISK = 1;
export const D3D12_SHADER_CACHE_FLAG_NONE = 0;
export const D3D12_SHADER_CACHE_FLAG_DRIVER_VERSIONED = 1;
export const D3D12_SHADER_CACHE_FLAG_USE_WORKING_DIR = 2;
export const D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CACHE_FOR_DRIVER = 1;
export const D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CONVERSIONS = 2;
export const D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_DRIVER_MANAGED = 4;
export const D3D12_SHADER_CACHE_KIND_FLAG_APPLICATION_MANAGED = 8;
export const D3D12_SHADER_CACHE_CONTROL_FLAG_DISABLE = 1;
export const D3D12_SHADER_CACHE_CONTROL_FLAG_ENABLE = 2;
export const D3D12_SHADER_CACHE_CONTROL_FLAG_CLEAR = 4;
export const D3D12_GPU_BASED_VALIDATION_FLAGS_NONE = 0;
export const D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING = 1;
export const D3D12_RLDO_NONE = 0;
export const D3D12_RLDO_SUMMARY = 1;
export const D3D12_RLDO_DETAIL = 2;
export const D3D12_RLDO_IGNORE_INTERNAL = 4;
export const D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS = 0;
export const D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 1;
export const D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR = 2;
export const D3D12_DEBUG_FEATURE_NONE = 0;
export const D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS = 1;
export const D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING = 2;
export const D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION = 4;
export const D3D12_DEBUG_FEATURE_EMULATE_WINDOWS7 = 8;
export const D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE = 0;
export const D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY = 1;
export const D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION = 2;
export const D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION = 3;
export const NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES = 4;
export const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE = 0;
export const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS = 1;
export const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS = 2;
export const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS = 4;
export const D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK = 7;
export const D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 0;
export const D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0;
export const D3D12_MESSAGE_CATEGORY_MISCELLANEOUS = 1;
export const D3D12_MESSAGE_CATEGORY_INITIALIZATION = 2;
export const D3D12_MESSAGE_CATEGORY_CLEANUP = 3;
export const D3D12_MESSAGE_CATEGORY_COMPILATION = 4;
export const D3D12_MESSAGE_CATEGORY_STATE_CREATION = 5;
export const D3D12_MESSAGE_CATEGORY_STATE_SETTING = 6;
export const D3D12_MESSAGE_CATEGORY_STATE_GETTING = 7;
export const D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8;
export const D3D12_MESSAGE_CATEGORY_EXECUTION = 9;
export const D3D12_MESSAGE_CATEGORY_SHADER = 10;
export const D3D12_MESSAGE_SEVERITY_CORRUPTION = 0;
export const D3D12_MESSAGE_SEVERITY_ERROR = 1;
export const D3D12_MESSAGE_SEVERITY_WARNING = 2;
export const D3D12_MESSAGE_SEVERITY_INFO = 3;
export const D3D12_MESSAGE_SEVERITY_MESSAGE = 4;
export const D3D12_MESSAGE_ID_UNKNOWN = 0;
export const D3D12_MESSAGE_ID_STRING_FROM_APPLICATION = 1;
export const D3D12_MESSAGE_ID_CORRUPTED_THIS = 2;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1 = 3;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2 = 4;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3 = 5;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4 = 6;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5 = 7;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6 = 8;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7 = 9;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8 = 10;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9 = 11;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10 = 12;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11 = 13;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12 = 14;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13 = 15;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14 = 16;
export const D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15 = 17;
export const D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING = 18;
export const D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 19;
export const D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 20;
export const D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 21;
export const D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 24;
export const D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 25;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 26;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 27;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 28;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE = 29;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE = 30;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 31;
export const D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 32;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 35;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 36;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 37;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 38;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE = 39;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE = 40;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 41;
export const D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 42;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 45;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 46;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 47;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 48;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 49;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 52;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 53;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 54;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 55;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 56;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 57;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 58;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 59;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 60;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 61;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 62;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 63;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 64;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 65;
export const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 66;
export const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 67;
export const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 68;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 69;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 70;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 71;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 72;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 73;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 74;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 75;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 76;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 79;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 80;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 81;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 82;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 83;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 84;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 85;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 86;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 87;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 88;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 89;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 90;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 91;
export const D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 92;
export const D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 93;
export const D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 94;
export const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 95;
export const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 96;
export const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 97;
export const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 98;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 100;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 101;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 102;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 103;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 104;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 105;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 106;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 107;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 108;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 109;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 111;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 112;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 113;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 114;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 115;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 116;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 117;
export const D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 135;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET = 200;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH = 201;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET = 202;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 209;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL = 210;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET = 211;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID = 212;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL = 213;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY = 219;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED = 221;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED = 222;
export const D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 232;
export const D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 233;
export const D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 234;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 239;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 240;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 245;
export const D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 253;
export const D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 255;
export const D3D12_MESSAGE_ID_LIVE_DEVICE = 274;
export const D3D12_MESSAGE_ID_LIVE_SWAPCHAIN = 275;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 276;
export const D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 277;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 278;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 280;
export const D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 283;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 284;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 285;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 286;
export const D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 287;
export const D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 289;
export const D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 290;
export const D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 291;
export const D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 292;
export const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 294;
export const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 295;
export const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 296;
export const D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 297;
export const D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 310;
export const D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 318;
export const D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 321;
export const D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 322;
export const D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 323;
export const D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 331;
export const D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 332;
export const D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 333;
export const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 334;
export const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 335;
export const D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 336;
export const D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 337;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 340;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 341;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 342;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE = 343;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE = 344;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 345;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 346;
export const D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 354;
export const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 401;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = 403;
export const D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 410;
export const D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 412;
export const D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 414;
export const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 416;
export const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 418;
export const D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 420;
export const D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 422;
export const D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 425;
export const D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = 426;
export const D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 427;
export const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 428;
export const D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 429;
export const D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 430;
export const D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 431;
export const D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = 447;
export const D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = 448;
export const D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER = 493;
export const D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER = 494;
export const D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS = 506;
export const D3D12_MESSAGE_ID_CREATEDEVICE_WARNING = 507;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE = 519;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER = 520;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE = 521;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS = 522;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS = 523;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS = 524;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES = 525;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION = 526;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH = 527;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE = 528;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT = 529;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS = 530;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS = 531;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT = 532;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER = 533;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END = 534;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN = 535;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG = 536;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE = 537;
export const D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE = 538;
export const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION = 540;
export const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET = 541;
export const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE = 542;
export const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET = 543;
export const D3D12_MESSAGE_ID_COMMAND_LIST_OPEN = 544;
export const D3D12_MESSAGE_ID_INVALID_BUNDLE_API = 546;
export const D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED = 547;
export const D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE = 549;
export const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC = 552;
export const D3D12_MESSAGE_ID_COMMAND_LIST_SYNC = 553;
export const D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID = 554;
export const D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE = 557;
export const D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR = 558;
export const D3D12_MESSAGE_ID_CREATE_PIPELINESTATE = 559;
export const D3D12_MESSAGE_ID_CREATE_COMMANDLIST12 = 560;
export const D3D12_MESSAGE_ID_CREATE_RESOURCE = 562;
export const D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP = 563;
export const D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE = 564;
export const D3D12_MESSAGE_ID_CREATE_LIBRARY = 565;
export const D3D12_MESSAGE_ID_CREATE_HEAP = 566;
export const D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE = 567;
export const D3D12_MESSAGE_ID_CREATE_QUERYHEAP = 568;
export const D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE = 569;
export const D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE = 570;
export const D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR = 571;
export const D3D12_MESSAGE_ID_LIVE_PIPELINESTATE = 572;
export const D3D12_MESSAGE_ID_LIVE_COMMANDLIST12 = 573;
export const D3D12_MESSAGE_ID_LIVE_RESOURCE = 575;
export const D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP = 576;
export const D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE = 577;
export const D3D12_MESSAGE_ID_LIVE_LIBRARY = 578;
export const D3D12_MESSAGE_ID_LIVE_HEAP = 579;
export const D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE = 580;
export const D3D12_MESSAGE_ID_LIVE_QUERYHEAP = 581;
export const D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE = 582;
export const D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE = 583;
export const D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR = 584;
export const D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE = 585;
export const D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12 = 586;
export const D3D12_MESSAGE_ID_DESTROY_RESOURCE = 588;
export const D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP = 589;
export const D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE = 590;
export const D3D12_MESSAGE_ID_DESTROY_LIBRARY = 591;
export const D3D12_MESSAGE_ID_DESTROY_HEAP = 592;
export const D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE = 593;
export const D3D12_MESSAGE_ID_DESTROY_QUERYHEAP = 594;
export const D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE = 595;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS = 597;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS = 599;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN = 602;
export const D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN = 603;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC = 604;
export const D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE = 607;
export const D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 608;
export const D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 609;
export const D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH = 610;
export const D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE = 611;
export const D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE = 613;
export const D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 614;
export const D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE = 615;
export const D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 616;
export const D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE = 622;
export const D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC = 623;
export const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE = 624;
export const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE = 625;
export const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 626;
export const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL = 627;
export const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES = 628;
export const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT = 629;
export const D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS = 630;
export const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS = 631;
export const D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN = 632;
export const D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN = 633;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES = 634;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE = 635;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 636;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL = 637;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES = 638;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS = 639;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS = 640;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN = 641;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN = 642;
export const D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE = 643;
export const D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE = 644;
export const D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC = 645;
export const D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE = 646;
export const D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE = 647;
export const D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE = 649;
export const D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC = 650;
export const D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE = 652;
export const D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES = 653;
export const D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR = 654;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN = 655;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT = 656;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET = 657;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET = 658;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH = 659;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX = 660;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE = 661;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK = 662;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE = 663;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 664;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION = 665;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 666;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH = 667;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 668;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 669;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 670;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 671;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 672;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY = 673;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE = 674;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 675;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 676;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH = 677;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 678;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET = 679;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET = 680;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH = 681;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT = 682;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS = 683;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES = 684;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC = 685;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH = 686;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH = 687;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH = 688;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH = 689;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH = 690;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE = 691;
export const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE = 692;
export const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH = 693;
export const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE = 694;
export const D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE = 695;
export const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND = 696;
export const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED = 697;
export const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION = 698;
export const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE = 699;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES = 700;
export const D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP = 701;
export const D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS = 702;
export const D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY = 703;
export const D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY = 705;
export const D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID = 708;
export const D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID = 709;
export const D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID = 710;
export const D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID = 711;
export const D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID = 712;
export const D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC = 713;
export const D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC = 715;
export const D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC = 717;
export const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY = 718;
export const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT = 719;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY = 720;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT = 721;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS = 722;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC = 723;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT = 724;
export const D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID = 725;
export const D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID = 726;
export const D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID = 727;
export const D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID = 728;
export const D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS = 729;
export const D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS = 731;
export const D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY = 732;
export const D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS = 733;
export const D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS = 734;
export const D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED = 735;
export const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT = 737;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT = 738;
export const D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDSUBRESOURCERANGE = 739;
export const D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDBASEOFFSET = 740;
export const D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE = 739;
export const D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET = 740;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP = 741;
export const D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID = 742;
export const D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID = 743;
export const D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS = 744;
export const D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION = 745;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE = 815;
export const D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT = 816;
export const D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT = 817;
export const D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH = 818;
export const D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE = 820;
export const D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE = 821;
export const D3D12_MESSAGE_ID_MAP_INVALIDHEAP = 822;
export const D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP = 823;
export const D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE = 824;
export const D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE = 825;
export const D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE = 826;
export const D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE = 827;
export const D3D12_MESSAGE_ID_MAP_INVALIDRANGE = 828;
export const D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE = 829;
export const D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER = 832;
export const D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN = 833;
export const D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN = 834;
export const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED = 835;
export const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH = 836;
export const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST = 837;
export const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST = 838;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST = 839;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION = 840;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS = 841;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC = 842;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION = 843;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS = 844;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS = 845;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST = 846;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE = 847;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION = 848;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE = 849;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE = 850;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET = 851;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT = 852;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT = 853;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS = 854;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH = 855;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT = 856;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT = 857;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS = 858;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC = 859;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE = 860;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION = 861;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE = 862;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE = 863;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET = 864;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT = 865;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT = 866;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS = 867;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH = 868;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT = 869;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT = 870;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS = 871;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES = 872;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX = 873;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH = 874;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX = 875;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS = 876;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX = 877;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT = 878;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH = 879;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT = 880;
export const D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER = 881;
export const D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH = 882;
export const D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE = 883;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB = 884;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH = 885;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH = 886;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH = 887;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED = 888;
export const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP = 889;
export const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE = 890;
export const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX = 891;
export const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE = 892;
export const D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX = 893;
export const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP = 894;
export const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE = 895;
export const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX = 896;
export const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE = 897;
export const D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX = 898;
export const D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED = 899;
export const D3D12_MESSAGE_ID_INVALID_NODE_INDEX = 900;
export const D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE = 901;
export const D3D12_MESSAGE_ID_NODE_MASK_MISMATCH = 902;
export const D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY = 903;
export const D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES = 904;
export const D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES = 905;
export const D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES = 906;
export const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE = 907;
export const D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS = 908;
export const D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE = 909;
export const D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS = 910;
export const D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS = 911;
export const D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT = 912;
export const D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS = 913;
export const D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES = 914;
export const D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE = 915;
export const D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT = 916;
export const D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT = 917;
export const D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY = 918;
export const D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE = 919;
export const D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY = 920;
export const D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE = 921;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS = 922;
export const D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE = 923;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED = 924;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT = 925;
export const D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS = 926;
export const D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED = 927;
export const D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY = 929;
export const D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE = 930;
export const D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE = 931;
export const D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT = 932;
export const D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT = 933;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED = 934;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED = 935;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS = 936;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS = 937;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED = 938;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH = 939;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH = 940;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH = 941;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE = 942;
export const D3D12_MESSAGE_ID_COPYRESOURCE_NULLDST = 943;
export const D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDSTRESOURCE = 944;
export const D3D12_MESSAGE_ID_COPYRESOURCE_NULLSRC = 945;
export const D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSRCRESOURCE = 946;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLDST = 947;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDDSTRESOURCE = 948;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLSRC = 949;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDSRCRESOURCE = 950;
export const D3D12_MESSAGE_ID_PIPELINE_STATE_TYPE_MISMATCH = 951;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET = 952;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH = 953;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_ZERO_BARRIERS = 954;
export const D3D12_MESSAGE_ID_BEGIN_END_EVENT_MISMATCH = 955;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH = 956;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_BEGIN_END = 957;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INVALID_RESOURCE = 958;
export const D3D12_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT = 959;
export const D3D12_MESSAGE_ID_OBJECT_EVICTED_WHILE_STILL_IN_USE = 960;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS = 961;
export const D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB = 962;
export const D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH = 963;
export const D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH = 964;
export const D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_UNSUPPORTED = 965;
export const D3D12_MESSAGE_ID_CREATE_PIPELINELIBRARY = 966;
export const D3D12_MESSAGE_ID_LIVE_PIPELINELIBRARY = 967;
export const D3D12_MESSAGE_ID_DESTROY_PIPELINELIBRARY = 968;
export const D3D12_MESSAGE_ID_STOREPIPELINE_NONAME = 969;
export const D3D12_MESSAGE_ID_STOREPIPELINE_DUPLICATENAME = 970;
export const D3D12_MESSAGE_ID_LOADPIPELINE_NAMENOTFOUND = 971;
export const D3D12_MESSAGE_ID_LOADPIPELINE_INVALIDDESC = 972;
export const D3D12_MESSAGE_ID_PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY = 973;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH = 974;
export const D3D12_MESSAGE_ID_SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS = 975;
export const D3D12_MESSAGE_ID_CREATE_QUEUE_VIDEO_NOT_SUPPORTED = 976;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED = 977;
export const D3D12_MESSAGE_ID_CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED = 978;
export const D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDLIST = 979;
export const D3D12_MESSAGE_ID_CREATE_VIDEODECODER = 980;
export const D3D12_MESSAGE_ID_CREATE_VIDEODECODESTREAM = 981;
export const D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDLIST = 982;
export const D3D12_MESSAGE_ID_LIVE_VIDEODECODER = 983;
export const D3D12_MESSAGE_ID_LIVE_VIDEODECODESTREAM = 984;
export const D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDLIST = 985;
export const D3D12_MESSAGE_ID_DESTROY_VIDEODECODER = 986;
export const D3D12_MESSAGE_ID_DESTROY_VIDEODECODESTREAM = 987;
export const D3D12_MESSAGE_ID_DECODE_FRAME_INVALID_PARAMETERS = 988;
export const D3D12_MESSAGE_ID_DEPRECATED_API = 989;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE = 990;
export const D3D12_MESSAGE_ID_COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET = 991;
export const D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET = 992;
export const D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET = 993;
export const D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET = 994;
export const D3D12_MESSAGE_ID_DISCARD_INVALID_SUBRESOURCE_RANGE = 995;
export const D3D12_MESSAGE_ID_DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS = 996;
export const D3D12_MESSAGE_ID_DISCARD_NO_RECTS_FOR_NON_TEXTURE2D = 997;
export const D3D12_MESSAGE_ID_COPY_ON_SAME_SUBRESOURCE = 998;
export const D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PAGEABLE = 999;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UNSUPPORTED = 1000;
export const D3D12_MESSAGE_ID_STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE = 1001;
export const D3D12_MESSAGE_ID_DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE = 1002;
export const D3D12_MESSAGE_ID_DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE = 1003;
export const D3D12_MESSAGE_ID_EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET = 1004;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS = 1005;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH = 1006;
export const D3D12_MESSAGE_ID_CREATE_FENCE_INVALID_FLAGS = 1007;
export const D3D12_MESSAGE_ID_RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS = 1008;
export const D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PRIORITY = 1009;
export const D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS = 1013;
export const D3D12_MESSAGE_ID_BEGIN_EVENT = 1014;
export const D3D12_MESSAGE_ID_END_EVENT = 1015;
export const D3D12_MESSAGE_ID_CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS = 1016;
export const D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED = 1017;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT = 1018;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT = 1019;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_ZERO_SIZE_STREAM = 1020;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_STREAM = 1021;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE = 1022;
export const D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH = 1023;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME = 1024;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME = 1025;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_ARCHITECTURE = 1026;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DST = 1027;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION = 1028;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS = 1029;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_SRC = 1030;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION = 1031;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS = 1032;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT = 1033;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES = 1034;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES = 1035;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE = 1036;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE = 1037;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS = 1038;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS = 1039;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_ZERO_DEPENDENCIES = 1040;
export const D3D12_MESSAGE_ID_DEVICE_CREATE_SHARED_HANDLE_INVALIDARG = 1041;
export const D3D12_MESSAGE_ID_DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE = 1042;
export const D3D12_MESSAGE_ID_SETDEPTHBOUNDS_INVALIDARGS = 1043;
export const D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE = 1044;
export const D3D12_MESSAGE_ID_COMMAND_LIST_PIPELINE_STATE_NOT_SET = 1045;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH = 1046;
export const D3D12_MESSAGE_ID_OBJECT_ACCESSED_WHILE_STILL_IN_USE = 1047;
export const D3D12_MESSAGE_ID_PROGRAMMABLE_MSAA_UNSUPPORTED = 1048;
export const D3D12_MESSAGE_ID_SETSAMPLEPOSITIONS_INVALIDARGS = 1049;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCEREGION_INVALID_RECT = 1050;
export const D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDQUEUE = 1051;
export const D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDLIST = 1052;
export const D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDQUEUE = 1053;
export const D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDQUEUE = 1054;
export const D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDLIST = 1055;
export const D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDQUEUE = 1056;
export const D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDQUEUE = 1057;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDLIST = 1058;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDQUEUE = 1059;
export const D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSOR = 1060;
export const D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSSTREAM = 1061;
export const D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSOR = 1062;
export const D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSSTREAM = 1063;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = 1064;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSSTREAM = 1065;
export const D3D12_MESSAGE_ID_PROCESS_FRAME_INVALID_PARAMETERS = 1066;
export const D3D12_MESSAGE_ID_COPY_INVALIDLAYOUT = 1067;
export const D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION = 1068;
export const D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION_POLICY = 1069;
export const D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION = 1070;
export const D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION = 1071;
export const D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION_POLICY = 1072;
export const D3D12_MESSAGE_ID_LIVE_PROTECTED_RESOURCE_SESSION = 1073;
export const D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION = 1074;
export const D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION_POLICY = 1075;
export const D3D12_MESSAGE_ID_DESTROY_PROTECTED_RESOURCE_SESSION = 1076;
export const D3D12_MESSAGE_ID_PROTECTED_RESOURCE_SESSION_UNSUPPORTED = 1077;
export const D3D12_MESSAGE_ID_FENCE_INVALIDOPERATION = 1078;
export const D3D12_MESSAGE_ID_CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED = 1079;
export const D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_DEFERRED = 1080;
export const D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE = 1081;
export const D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR = 1082;
export const D3D12_MESSAGE_ID_CREATE_VIDEODECODERHEAP = 1083;
export const D3D12_MESSAGE_ID_LIVE_VIDEODECODERHEAP = 1084;
export const D3D12_MESSAGE_ID_DESTROY_VIDEODECODERHEAP = 1085;
export const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDARG_RETURN = 1086;
export const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_OUTOFMEMORY_RETURN = 1087;
export const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDADDRESS = 1088;
export const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDHANDLE = 1089;
export const D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_DEST = 1090;
export const D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_MODE = 1091;
export const D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT = 1092;
export const D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_NOT_SUPPORTED = 1093;
export const D3D12_MESSAGE_ID_SETVIEWINSTANCEMASK_INVALIDARGS = 1094;
export const D3D12_MESSAGE_ID_VIEW_INSTANCING_UNSUPPORTED = 1095;
export const D3D12_MESSAGE_ID_VIEW_INSTANCING_INVALIDARGS = 1096;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1097;
export const D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1098;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE = 1099;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED = 1100;
export const D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_INVALID_INPUT = 1101;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_DECODER_UNSUPPORTED = 1102;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR = 1103;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED = 1104;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR = 1105;
export const D3D12_MESSAGE_ID_NO_VIDEO_API_SUPPORT = 1106;
export const D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_INVALID_INPUT = 1107;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_PROCESSOR_CAPS_FAILURE = 1108;
export const D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT = 1109;
export const D3D12_MESSAGE_ID_VIDEO_DECODE_FRAME_INVALID_ARGUMENT = 1110;
export const D3D12_MESSAGE_ID_ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS = 1111;
export const D3D12_MESSAGE_ID_OPENEXISTINGHEAP_UNSUPPORTED = 1112;
export const D3D12_MESSAGE_ID_VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT = 1113;
export const D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_UNSUPPORTED = 1114;
export const D3D12_MESSAGE_ID_CREATE_COMMANDRECORDER = 1115;
export const D3D12_MESSAGE_ID_LIVE_COMMANDRECORDER = 1116;
export const D3D12_MESSAGE_ID_DESTROY_COMMANDRECORDER = 1117;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED = 1118;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS = 1119;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_FLAGS = 1120;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS = 1121;
export const D3D12_MESSAGE_ID_CREATE_COMMANDPOOL = 1122;
export const D3D12_MESSAGE_ID_LIVE_COMMANDPOOL = 1123;
export const D3D12_MESSAGE_ID_DESTROY_COMMANDPOOL = 1124;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_POOL_INVALID_FLAGS = 1125;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED = 1126;
export const D3D12_MESSAGE_ID_COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH = 1127;
export const D3D12_MESSAGE_ID_COMMAND_RECORDER_CONTENTION = 1128;
export const D3D12_MESSAGE_ID_COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST = 1129;
export const D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST = 1130;
export const D3D12_MESSAGE_ID_CANNOT_EXECUTE_EMPTY_COMMAND_LIST = 1131;
export const D3D12_MESSAGE_ID_CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS = 1132;
export const D3D12_MESSAGE_ID_CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET = 1133;
export const D3D12_MESSAGE_ID_CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING = 1134;
export const D3D12_MESSAGE_ID_COMMAND_POOL_SYNC = 1135;
export const D3D12_MESSAGE_ID_EVICT_UNDERFLOW = 1136;
export const D3D12_MESSAGE_ID_CREATE_META_COMMAND = 1137;
export const D3D12_MESSAGE_ID_LIVE_META_COMMAND = 1138;
export const D3D12_MESSAGE_ID_DESTROY_META_COMMAND = 1139;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_DST_RESOURCE = 1140;
export const D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_SRC_RESOURCE = 1141;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE = 1142;
export const D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE = 1143;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER = 1144;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC = 1145;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED = 1146;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION = 1147;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS = 1148;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET = 1149;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION = 1150;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS = 1151;
export const D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN = 1152;
export const D3D12_MESSAGE_ID_CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER = 1153;
export const D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES = 1154;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE = 1155;
export const D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS = 1156;
export const D3D12_MESSAGE_ID_COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED = 1157;
export const D3D12_MESSAGE_ID_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1158;
export const D3D12_MESSAGE_ID_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID = 1159;
export const D3D12_MESSAGE_ID_COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1160;
export const D3D12_MESSAGE_ID_DISPATCH_RAYS_INVALID = 1161;
export const D3D12_MESSAGE_ID_GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID = 1162;
export const D3D12_MESSAGE_ID_CREATE_LIFETIMETRACKER = 1163;
export const D3D12_MESSAGE_ID_LIVE_LIFETIMETRACKER = 1164;
export const D3D12_MESSAGE_ID_DESTROY_LIFETIMETRACKER = 1165;
export const D3D12_MESSAGE_ID_DESTROYOWNEDOBJECT_OBJECTNOTOWNED = 1166;
export const D3D12_MESSAGE_ID_CREATE_TRACKEDWORKLOAD = 1167;
export const D3D12_MESSAGE_ID_LIVE_TRACKEDWORKLOAD = 1168;
export const D3D12_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD = 1169;
export const D3D12_MESSAGE_ID_RENDER_PASS_ERROR = 1170;
export const D3D12_MESSAGE_ID_META_COMMAND_ID_INVALID = 1171;
export const D3D12_MESSAGE_ID_META_COMMAND_UNSUPPORTED_PARAMS = 1172;
export const D3D12_MESSAGE_ID_META_COMMAND_FAILED_ENUMERATION = 1173;
export const D3D12_MESSAGE_ID_META_COMMAND_PARAMETER_SIZE_MISMATCH = 1174;
export const D3D12_MESSAGE_ID_UNINITIALIZED_META_COMMAND = 1175;
export const D3D12_MESSAGE_ID_META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS = 1176;
export const D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDLIST = 1177;
export const D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDLIST = 1178;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDLIST = 1179;
export const D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDQUEUE = 1180;
export const D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDQUEUE = 1181;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDQUEUE = 1182;
export const D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONESTIMATOR = 1183;
export const D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONESTIMATOR = 1184;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONESTIMATOR = 1185;
export const D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONVECTORHEAP = 1186;
export const D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONVECTORHEAP = 1187;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONVECTORHEAP = 1188;
export const D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS = 1189;
export const D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS = 1190;
export const D3D12_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR = 1191;
export const D3D12_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD = 1192;
export const D3D12_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR = 1193;
export const D3D12_MESSAGE_ID_CREATE_STATE_OBJECT_ERROR = 1194;
export const D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_ERROR = 1195;
export const D3D12_MESSAGE_ID_GET_SHADER_STACK_SIZE_ERROR = 1196;
export const D3D12_MESSAGE_ID_GET_PIPELINE_STACK_SIZE_ERROR = 1197;
export const D3D12_MESSAGE_ID_SET_PIPELINE_STACK_SIZE_ERROR = 1198;
export const D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_SIZE_INVALID = 1199;
export const D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID = 1200;
export const D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE = 1201;
export const D3D12_MESSAGE_ID_RENDER_PASS_INVALID_RESOURCE_BARRIER = 1202;
export const D3D12_MESSAGE_ID_RENDER_PASS_DISALLOWED_API_CALLED = 1203;
export const D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_NEST_RENDER_PASSES = 1204;
export const D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_END_WITHOUT_BEGIN = 1205;
export const D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST = 1206;
export const D3D12_MESSAGE_ID_RENDER_PASS_GPU_WORK_WHILE_SUSPENDED = 1207;
export const D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_SUSPEND_RESUME = 1208;
export const D3D12_MESSAGE_ID_RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS = 1209;
export const D3D12_MESSAGE_ID_RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS = 1210;
export const D3D12_MESSAGE_ID_TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH = 1211;
export const D3D12_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED = 1212;
export const D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_NO_ACCESS = 1213;
export const D3D12_MESSAGE_ID_RENDER_PASS_UNSUPPORTED_RESOLVE = 1214;
export const D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INVALID_RESOURCE_PTR = 1215;
export const D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_SIGNAL = 1216;
export const D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_WAIT = 1217;
export const D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_ESTIMATOR_INVALID_ARGUMENT = 1218;
export const D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1219;
export const D3D12_MESSAGE_ID_ESTIMATE_MOTION_INVALID_ARGUMENT = 1220;
export const D3D12_MESSAGE_ID_RESOLVE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1221;
export const D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_HEAP_TYPE = 1222;
export const D3D12_MESSAGE_ID_SET_BACKGROUND_PROCESSING_MODE_INVALID_ARGUMENT = 1223;
export const D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE_FOR_FEATURE_LEVEL = 1224;
export const D3D12_MESSAGE_ID_CREATE_VIDEOEXTENSIONCOMMAND = 1225;
export const D3D12_MESSAGE_ID_LIVE_VIDEOEXTENSIONCOMMAND = 1226;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOEXTENSIONCOMMAND = 1227;
export const D3D12_MESSAGE_ID_INVALID_VIDEO_EXTENSION_COMMAND_ID = 1228;
export const D3D12_MESSAGE_ID_VIDEO_EXTENSION_COMMAND_INVALID_ARGUMENT = 1229;
export const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_UNIQUE_IN_DXIL_LIBRARY = 1230;
export const D3D12_MESSAGE_ID_VARIABLE_SHADING_RATE_NOT_ALLOWED_WITH_TIR = 1231;
export const D3D12_MESSAGE_ID_GEOMETRY_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1232;
export const D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_SHADING_RATE = 1233;
export const D3D12_MESSAGE_ID_RSSETSHADING_RATE_SHADING_RATE_NOT_PERMITTED_BY_CAP = 1234;
export const D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_COMBINER = 1235;
export const D3D12_MESSAGE_ID_RSSETSHADINGRATEIMAGE_REQUIRES_TIER_2 = 1236;
export const D3D12_MESSAGE_ID_RSSETSHADINGRATE_REQUIRES_TIER_1 = 1237;
export const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_FORMAT = 1238;
export const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_ARRAY_SIZE = 1239;
export const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_MIP_LEVEL = 1240;
export const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_COUNT = 1241;
export const D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_QUALITY = 1242;
export const D3D12_MESSAGE_ID_NON_RETAIL_SHADER_MODEL_WONT_VALIDATE = 1243;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_ROOT_SIGNATURE_MISMATCH = 1244;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_ROOT_SIGNATURE_MISMATCH = 1245;
export const D3D12_MESSAGE_ID_ADD_TO_STATE_OBJECT_ERROR = 1246;
export const D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION_INVALID_ARGUMENT = 1247;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_PSO_DESC_MISMATCH = 1248;
export const D3D12_MESSAGE_ID_CREATEPIPELINESTATE_MS_INCOMPLETE_TYPE = 1249;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_NOT_MS_MISMATCH = 1250;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_NOT_PS_MISMATCH = 1251;
export const D3D12_MESSAGE_ID_NONZERO_SAMPLER_FEEDBACK_MIP_REGION_WITH_INCOMPATIBLE_FORMAT = 1252;
export const D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_SHADER_MISMATCH = 1253;
export const D3D12_MESSAGE_ID_EMPTY_DISPATCH = 1254;
export const D3D12_MESSAGE_ID_RESOURCE_FORMAT_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1255;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_MIP_REGION = 1256;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_DIMENSION = 1257;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_COUNT = 1258;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_QUALITY = 1259;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_LAYOUT = 1260;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_REQUIRES_UNORDERED_ACCESS_FLAG = 1261;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_NULL_ARGUMENTS = 1262;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_UAV_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1263;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_REQUIRES_FEEDBACK_MAP_FORMAT = 1264;
export const D3D12_MESSAGE_ID_CREATEMESHSHADER_INVALIDSHADERBYTECODE = 1265;
export const D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTOFMEMORY = 1266;
export const D3D12_MESSAGE_ID_CREATEMESHSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 1267;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_INVALID_FORMAT = 1268;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_INVALID_MIP_LEVEL_COUNT = 1269;
export const D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_ARRAY_SIZE_MISMATCH = 1270;
export const D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_MISMATCHING_TARGETED_RESOURCE = 1271;
export const D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTPUTEXCEEDSMAXSIZE = 1272;
export const D3D12_MESSAGE_ID_CREATEMESHSHADER_GROUPSHAREDEXCEEDSMAXSIZE = 1273;
export const D3D12_MESSAGE_ID_VERTEX_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1274;
export const D3D12_MESSAGE_ID_MESH_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1275;
export const D3D12_MESSAGE_ID_CREATEMESHSHADER_MISMATCHEDASMSPAYLOADSIZE = 1276;
export const D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_UNBOUNDED_STATIC_DESCRIPTORS = 1277;
export const D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_INVALIDSHADERBYTECODE = 1278;
export const D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_OUTOFMEMORY = 1279;
export const D3D12_MESSAGE_ID_CREATE_SHADERCACHESESSION = 1280;
export const D3D12_MESSAGE_ID_LIVE_SHADERCACHESESSION = 1281;
export const D3D12_MESSAGE_ID_DESTROY_SHADERCACHESESSION = 1282;
export const D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_INVALIDARGS = 1283;
export const D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_DISABLED = 1284;
export const D3D12_MESSAGE_ID_CREATESHADERCACHESESSION_ALREADYOPEN = 1285;
export const D3D12_MESSAGE_ID_SHADERCACHECONTROL_DEVELOPERMODE = 1286;
export const D3D12_MESSAGE_ID_SHADERCACHECONTROL_INVALIDFLAGS = 1287;
export const D3D12_MESSAGE_ID_SHADERCACHECONTROL_STATEALREADYSET = 1288;
export const D3D12_MESSAGE_ID_SHADERCACHECONTROL_IGNOREDFLAG = 1289;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_ALREADYPRESENT = 1290;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_HASHCOLLISION = 1291;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_STOREVALUE_CACHEFULL = 1292;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_FINDVALUE_NOTFOUND = 1293;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_CORRUPT = 1294;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_DISABLED = 1295;
export const D3D12_MESSAGE_ID_OVERSIZED_DISPATCH = 1296;
export const D3D12_MESSAGE_ID_CREATE_VIDEOENCODER = 1297;
export const D3D12_MESSAGE_ID_LIVE_VIDEOENCODER = 1298;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOENCODER = 1299;
export const D3D12_MESSAGE_ID_CREATE_VIDEOENCODERHEAP = 1300;
export const D3D12_MESSAGE_ID_LIVE_VIDEOENCODERHEAP = 1301;
export const D3D12_MESSAGE_ID_DESTROY_VIDEOENCODERHEAP = 1302;
export const D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG = 1303;
export const D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_ENCODE_REFERENCE_ONLY_FLAG = 1304;
export const D3D12_MESSAGE_ID_ENCODE_FRAME_INVALID_PARAMETERS = 1305;
export const D3D12_MESSAGE_ID_ENCODE_FRAME_UNSUPPORTED_PARAMETERS = 1306;
export const D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_INVALID_PARAMETERS = 1307;
export const D3D12_MESSAGE_ID_RESOLVE_ENCODER_OUTPUT_METADATA_UNSUPPORTED_PARAMETERS = 1308;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_INVALID_PARAMETERS = 1309;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_UNSUPPORTED_PARAMETERS = 1310;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_INVALID_PARAMETERS = 1311;
export const D3D12_MESSAGE_ID_CREATE_VIDEO_ENCODER_HEAP_UNSUPPORTED_PARAMETERS = 1312;
export const D3D12_MESSAGE_ID_CREATECOMMANDLIST_NULL_COMMANDALLOCATOR = 1313;
export const D3D12_MESSAGE_ID_CLEAR_UNORDERED_ACCESS_VIEW_INVALID_DESCRIPTOR_HANDLE = 1314;
export const D3D12_MESSAGE_ID_DESCRIPTOR_HEAP_NOT_SHADER_VISIBLE = 1315;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOP_WARNING = 1316;
export const D3D12_MESSAGE_ID_CREATEBLENDSTATE_BLENDOPALPHA_WARNING = 1317;
export const D3D12_MESSAGE_ID_WRITE_COMBINE_PERFORMANCE_WARNING = 1318;
export const D3D12_MESSAGE_ID_RESOLVE_QUERY_INVALID_QUERY_STATE = 1319;
export const D3D12_MESSAGE_ID_SETPRIVATEDATA_NO_ACCESS = 1320;
export const D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_SAMPLER_MODE_MISMATCH = 1321;
export const D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_UNSUPPORTED_BUFFER_WIDTH = 1322;
export const D3D12_MESSAGE_ID_CREATEMESHSHADER_TOPOLOGY_MISMATCH = 1323;
export const D3D12_MESSAGE_ID_VRS_SUM_COMBINER_REQUIRES_CAPABILITY = 1324;
export const D3D12_MESSAGE_ID_SETTING_SHADING_RATE_FROM_MS_REQUIRES_CAPABILITY = 1325;
export const D3D12_MESSAGE_ID_SHADERCACHESESSION_SHADERCACHEDELETE_NOTSUPPORTED = 1326;
export const D3D12_MESSAGE_ID_SHADERCACHECONTROL_SHADERCACHECLEAR_NOTSUPPORTED = 1327;
export const D3D12_MESSAGE_ID_D3D12_MESSAGES_END = 1328;
export const D3D12_MESSAGE_CALLBACK_FLAG_NONE = 0;
export const D3D12_MESSAGE_CALLBACK_IGNORE_FILTERS = 1;
export const D3D12_AXIS_SHADING_RATE_1X = 0;
export const D3D12_AXIS_SHADING_RATE_2X = 1;
export const D3D12_AXIS_SHADING_RATE_4X = 2;
export const D3D12_SHADING_RATE_1X1 = 0;
export const D3D12_SHADING_RATE_1X2 = 1;
export const D3D12_SHADING_RATE_2X1 = 4;
export const D3D12_SHADING_RATE_2X2 = 5;
export const D3D12_SHADING_RATE_2X4 = 6;
export const D3D12_SHADING_RATE_4X2 = 9;
export const D3D12_SHADING_RATE_4X4 = 10;
export const D3D12_SHADING_RATE_COMBINER_PASSTHROUGH = 0;
export const D3D12_SHADING_RATE_COMBINER_OVERRIDE = 1;
export const D3D12_SHADING_RATE_COMBINER_MIN = 2;
export const D3D12_SHADING_RATE_COMBINER_MAX = 3;
export const D3D12_SHADING_RATE_COMBINER_SUM = 4;
export const D3D12_SHVER_PIXEL_SHADER = 0;
export const D3D12_SHVER_VERTEX_SHADER = 1;
export const D3D12_SHVER_GEOMETRY_SHADER = 2;
export const D3D12_SHVER_HULL_SHADER = 3;
export const D3D12_SHVER_DOMAIN_SHADER = 4;
export const D3D12_SHVER_COMPUTE_SHADER = 5;
export const D3D12_SHVER_RESERVED0 = 65520;
export const D3D_NAME_UNDEFINED = 0;
export const D3D_NAME_POSITION = 1;
export const D3D_NAME_CLIP_DISTANCE = 2;
export const D3D_NAME_CULL_DISTANCE = 3;
export const D3D_NAME_RENDER_TARGET_ARRAY_INDEX = 4;
export const D3D_NAME_VIEWPORT_ARRAY_INDEX = 5;
export const D3D_NAME_VERTEX_ID = 6;
export const D3D_NAME_PRIMITIVE_ID = 7;
export const D3D_NAME_INSTANCE_ID = 8;
export const D3D_NAME_IS_FRONT_FACE = 9;
export const D3D_NAME_SAMPLE_INDEX = 10;
export const D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11;
export const D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12;
export const D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13;
export const D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14;
export const D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15;
export const D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16;
export const D3D_NAME_BARYCENTRICS = 23;
export const D3D_NAME_SHADINGRATE = 24;
export const D3D_NAME_CULLPRIMITIVE = 25;
export const D3D_NAME_TARGET = 64;
export const D3D_NAME_DEPTH = 65;
export const D3D_NAME_COVERAGE = 66;
export const D3D_NAME_DEPTH_GREATER_EQUAL = 67;
export const D3D_NAME_DEPTH_LESS_EQUAL = 68;
export const D3D_NAME_STENCIL_REF = 69;
export const D3D_NAME_INNER_COVERAGE = 70;
export const D3D10_NAME_UNDEFINED = 0;
export const D3D10_NAME_POSITION = 1;
export const D3D10_NAME_CLIP_DISTANCE = 2;
export const D3D10_NAME_CULL_DISTANCE = 3;
export const D3D10_NAME_RENDER_TARGET_ARRAY_INDEX = 4;
export const D3D10_NAME_VIEWPORT_ARRAY_INDEX = 5;
export const D3D10_NAME_VERTEX_ID = 6;
export const D3D10_NAME_PRIMITIVE_ID = 7;
export const D3D10_NAME_INSTANCE_ID = 8;
export const D3D10_NAME_IS_FRONT_FACE = 9;
export const D3D10_NAME_SAMPLE_INDEX = 10;
export const D3D10_NAME_TARGET = 64;
export const D3D10_NAME_DEPTH = 65;
export const D3D10_NAME_COVERAGE = 66;
export const D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11;
export const D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12;
export const D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13;
export const D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14;
export const D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15;
export const D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16;
export const D3D11_NAME_DEPTH_GREATER_EQUAL = 67;
export const D3D11_NAME_DEPTH_LESS_EQUAL = 68;
export const D3D11_NAME_STENCIL_REF = 69;
export const D3D11_NAME_INNER_COVERAGE = 70;
export const D3D12_NAME_BARYCENTRICS = 23;
export const D3D12_NAME_SHADINGRATE = 24;
export const D3D12_NAME_CULLPRIMITIVE = 25;
export const D3D_REGISTER_COMPONENT_UNKNOWN = 0;
export const D3D_REGISTER_COMPONENT_UINT32 = 1;
export const D3D_REGISTER_COMPONENT_SINT32 = 2;
export const D3D_REGISTER_COMPONENT_FLOAT32 = 3;
export const D3D10_REGISTER_COMPONENT_UNKNOWN = 0;
export const D3D10_REGISTER_COMPONENT_UINT32 = 1;
export const D3D10_REGISTER_COMPONENT_SINT32 = 2;
export const D3D10_REGISTER_COMPONENT_FLOAT32 = 3;
export const D3D_MIN_PRECISION_DEFAULT = 0;
export const D3D_MIN_PRECISION_FLOAT_16 = 1;
export const D3D_MIN_PRECISION_FLOAT_2_8 = 2;
export const D3D_MIN_PRECISION_RESERVED = 3;
export const D3D_MIN_PRECISION_SINT_16 = 4;
export const D3D_MIN_PRECISION_UINT_16 = 5;
export const D3D_MIN_PRECISION_ANY_16 = 240;
export const D3D_MIN_PRECISION_ANY_10 = 241;
export const D3D_CT_CBUFFER = 0;
export const D3D_CT_TBUFFER = 1;
export const D3D_CT_INTERFACE_POINTERS = 2;
export const D3D_CT_RESOURCE_BIND_INFO = 3;
export const D3D10_CT_CBUFFER = 0;
export const D3D10_CT_TBUFFER = 1;
export const D3D11_CT_CBUFFER = 0;
export const D3D11_CT_TBUFFER = 1;
export const D3D11_CT_INTERFACE_POINTERS = 2;
export const D3D11_CT_RESOURCE_BIND_INFO = 3;
export const D3D_SVC_SCALAR = 0;
export const D3D_SVC_VECTOR = 1;
export const D3D_SVC_MATRIX_ROWS = 2;
export const D3D_SVC_MATRIX_COLUMNS = 3;
export const D3D_SVC_OBJECT = 4;
export const D3D_SVC_STRUCT = 5;
export const D3D_SVC_INTERFACE_CLASS = 6;
export const D3D_SVC_INTERFACE_POINTER = 7;
export const D3D10_SVC_SCALAR = 0;
export const D3D10_SVC_VECTOR = 1;
export const D3D10_SVC_MATRIX_ROWS = 2;
export const D3D10_SVC_MATRIX_COLUMNS = 3;
export const D3D10_SVC_OBJECT = 4;
export const D3D10_SVC_STRUCT = 5;
export const D3D11_SVC_INTERFACE_CLASS = 6;
export const D3D11_SVC_INTERFACE_POINTER = 7;
export const D3D_SVC_FORCE_DWORD = 2147483647;
export const D3D_SVT_VOID = 0;
export const D3D_SVT_BOOL = 1;
export const D3D_SVT_INT = 2;
export const D3D_SVT_FLOAT = 3;
export const D3D_SVT_STRING = 4;
export const D3D_SVT_TEXTURE = 5;
export const D3D_SVT_TEXTURE1D = 6;
export const D3D_SVT_TEXTURE2D = 7;
export const D3D_SVT_TEXTURE3D = 8;
export const D3D_SVT_TEXTURECUBE = 9;
export const D3D_SVT_SAMPLER = 10;
export const D3D_SVT_SAMPLER1D = 11;
export const D3D_SVT_SAMPLER2D = 12;
export const D3D_SVT_SAMPLER3D = 13;
export const D3D_SVT_SAMPLERCUBE = 14;
export const D3D_SVT_PIXELSHADER = 15;
export const D3D_SVT_VERTEXSHADER = 16;
export const D3D_SVT_PIXELFRAGMENT = 17;
export const D3D_SVT_VERTEXFRAGMENT = 18;
export const D3D_SVT_UINT = 19;
export const D3D_SVT_UINT8 = 20;
export const D3D_SVT_GEOMETRYSHADER = 21;
export const D3D_SVT_RASTERIZER = 22;
export const D3D_SVT_DEPTHSTENCIL = 23;
export const D3D_SVT_BLEND = 24;
export const D3D_SVT_BUFFER = 25;
export const D3D_SVT_CBUFFER = 26;
export const D3D_SVT_TBUFFER = 27;
export const D3D_SVT_TEXTURE1DARRAY = 28;
export const D3D_SVT_TEXTURE2DARRAY = 29;
export const D3D_SVT_RENDERTARGETVIEW = 30;
export const D3D_SVT_DEPTHSTENCILVIEW = 31;
export const D3D_SVT_TEXTURE2DMS = 32;
export const D3D_SVT_TEXTURE2DMSARRAY = 33;
export const D3D_SVT_TEXTURECUBEARRAY = 34;
export const D3D_SVT_HULLSHADER = 35;
export const D3D_SVT_DOMAINSHADER = 36;
export const D3D_SVT_INTERFACE_POINTER = 37;
export const D3D_SVT_COMPUTESHADER = 38;
export const D3D_SVT_DOUBLE = 39;
export const D3D_SVT_RWTEXTURE1D = 40;
export const D3D_SVT_RWTEXTURE1DARRAY = 41;
export const D3D_SVT_RWTEXTURE2D = 42;
export const D3D_SVT_RWTEXTURE2DARRAY = 43;
export const D3D_SVT_RWTEXTURE3D = 44;
export const D3D_SVT_RWBUFFER = 45;
export const D3D_SVT_BYTEADDRESS_BUFFER = 46;
export const D3D_SVT_RWBYTEADDRESS_BUFFER = 47;
export const D3D_SVT_STRUCTURED_BUFFER = 48;
export const D3D_SVT_RWSTRUCTURED_BUFFER = 49;
export const D3D_SVT_APPEND_STRUCTURED_BUFFER = 50;
export const D3D_SVT_CONSUME_STRUCTURED_BUFFER = 51;
export const D3D_SVT_MIN8FLOAT = 52;
export const D3D_SVT_MIN10FLOAT = 53;
export const D3D_SVT_MIN16FLOAT = 54;
export const D3D_SVT_MIN12INT = 55;
export const D3D_SVT_MIN16INT = 56;
export const D3D_SVT_MIN16UINT = 57;
export const D3D_SVT_INT16 = 58;
export const D3D_SVT_UINT16 = 59;
export const D3D_SVT_FLOAT16 = 60;
export const D3D_SVT_INT64 = 61;
export const D3D_SVT_UINT64 = 62;
export const D3D10_SVT_VOID = 0;
export const D3D10_SVT_BOOL = 1;
export const D3D10_SVT_INT = 2;
export const D3D10_SVT_FLOAT = 3;
export const D3D10_SVT_STRING = 4;
export const D3D10_SVT_TEXTURE = 5;
export const D3D10_SVT_TEXTURE1D = 6;
export const D3D10_SVT_TEXTURE2D = 7;
export const D3D10_SVT_TEXTURE3D = 8;
export const D3D10_SVT_TEXTURECUBE = 9;
export const D3D10_SVT_SAMPLER = 10;
export const D3D10_SVT_SAMPLER1D = 11;
export const D3D10_SVT_SAMPLER2D = 12;
export const D3D10_SVT_SAMPLER3D = 13;
export const D3D10_SVT_SAMPLERCUBE = 14;
export const D3D10_SVT_PIXELSHADER = 15;
export const D3D10_SVT_VERTEXSHADER = 16;
export const D3D10_SVT_PIXELFRAGMENT = 17;
export const D3D10_SVT_VERTEXFRAGMENT = 18;
export const D3D10_SVT_UINT = 19;
export const D3D10_SVT_UINT8 = 20;
export const D3D10_SVT_GEOMETRYSHADER = 21;
export const D3D10_SVT_RASTERIZER = 22;
export const D3D10_SVT_DEPTHSTENCIL = 23;
export const D3D10_SVT_BLEND = 24;
export const D3D10_SVT_BUFFER = 25;
export const D3D10_SVT_CBUFFER = 26;
export const D3D10_SVT_TBUFFER = 27;
export const D3D10_SVT_TEXTURE1DARRAY = 28;
export const D3D10_SVT_TEXTURE2DARRAY = 29;
export const D3D10_SVT_RENDERTARGETVIEW = 30;
export const D3D10_SVT_DEPTHSTENCILVIEW = 31;
export const D3D10_SVT_TEXTURE2DMS = 32;
export const D3D10_SVT_TEXTURE2DMSARRAY = 33;
export const D3D10_SVT_TEXTURECUBEARRAY = 34;
export const D3D11_SVT_HULLSHADER = 35;
export const D3D11_SVT_DOMAINSHADER = 36;
export const D3D11_SVT_INTERFACE_POINTER = 37;
export const D3D11_SVT_COMPUTESHADER = 38;
export const D3D11_SVT_DOUBLE = 39;
export const D3D11_SVT_RWTEXTURE1D = 40;
export const D3D11_SVT_RWTEXTURE1DARRAY = 41;
export const D3D11_SVT_RWTEXTURE2D = 42;
export const D3D11_SVT_RWTEXTURE2DARRAY = 43;
export const D3D11_SVT_RWTEXTURE3D = 44;
export const D3D11_SVT_RWBUFFER = 45;
export const D3D11_SVT_BYTEADDRESS_BUFFER = 46;
export const D3D11_SVT_RWBYTEADDRESS_BUFFER = 47;
export const D3D11_SVT_STRUCTURED_BUFFER = 48;
export const D3D11_SVT_RWSTRUCTURED_BUFFER = 49;
export const D3D11_SVT_APPEND_STRUCTURED_BUFFER = 50;
export const D3D11_SVT_CONSUME_STRUCTURED_BUFFER = 51;
export const D3D_SVT_FORCE_DWORD = 2147483647;
export const D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0;
export const D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 1;
export const D3D_PRIMITIVE_TOPOLOGY_LINELIST = 2;
export const D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 3;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5;
export const D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10;
export const D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12;
export const D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13;
export const D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33;
export const D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34;
export const D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35;
export const D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36;
export const D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37;
export const D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38;
export const D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39;
export const D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40;
export const D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41;
export const D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42;
export const D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43;
export const D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44;
export const D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45;
export const D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46;
export const D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47;
export const D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48;
export const D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49;
export const D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50;
export const D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51;
export const D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52;
export const D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53;
export const D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54;
export const D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55;
export const D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56;
export const D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57;
export const D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58;
export const D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59;
export const D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60;
export const D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61;
export const D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62;
export const D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63;
export const D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64;
export const D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED = 0;
export const D3D10_PRIMITIVE_TOPOLOGY_POINTLIST = 1;
export const D3D10_PRIMITIVE_TOPOLOGY_LINELIST = 2;
export const D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP = 3;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5;
export const D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10;
export const D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12;
export const D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13;
export const D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED = 0;
export const D3D11_PRIMITIVE_TOPOLOGY_POINTLIST = 1;
export const D3D11_PRIMITIVE_TOPOLOGY_LINELIST = 2;
export const D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP = 3;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5;
export const D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10;
export const D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12;
export const D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13;
export const D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33;
export const D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34;
export const D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35;
export const D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36;
export const D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37;
export const D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38;
export const D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39;
export const D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40;
export const D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41;
export const D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42;
export const D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43;
export const D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44;
export const D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45;
export const D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46;
export const D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47;
export const D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48;
export const D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49;
export const D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50;
export const D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51;
export const D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52;
export const D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53;
export const D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54;
export const D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55;
export const D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56;
export const D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57;
export const D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58;
export const D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59;
export const D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60;
export const D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61;
export const D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62;
export const D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63;
export const D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64;
export const D3D_PRIMITIVE_UNDEFINED = 0;
export const D3D_PRIMITIVE_POINT = 1;
export const D3D_PRIMITIVE_LINE = 2;
export const D3D_PRIMITIVE_TRIANGLE = 3;
export const D3D_PRIMITIVE_LINE_ADJ = 6;
export const D3D_PRIMITIVE_TRIANGLE_ADJ = 7;
export const D3D_PRIMITIVE_1_CONTROL_POINT_PATCH = 8;
export const D3D_PRIMITIVE_2_CONTROL_POINT_PATCH = 9;
export const D3D_PRIMITIVE_3_CONTROL_POINT_PATCH = 10;
export const D3D_PRIMITIVE_4_CONTROL_POINT_PATCH = 11;
export const D3D_PRIMITIVE_5_CONTROL_POINT_PATCH = 12;
export const D3D_PRIMITIVE_6_CONTROL_POINT_PATCH = 13;
export const D3D_PRIMITIVE_7_CONTROL_POINT_PATCH = 14;
export const D3D_PRIMITIVE_8_CONTROL_POINT_PATCH = 15;
export const D3D_PRIMITIVE_9_CONTROL_POINT_PATCH = 16;
export const D3D_PRIMITIVE_10_CONTROL_POINT_PATCH = 17;
export const D3D_PRIMITIVE_11_CONTROL_POINT_PATCH = 18;
export const D3D_PRIMITIVE_12_CONTROL_POINT_PATCH = 19;
export const D3D_PRIMITIVE_13_CONTROL_POINT_PATCH = 20;
export const D3D_PRIMITIVE_14_CONTROL_POINT_PATCH = 21;
export const D3D_PRIMITIVE_15_CONTROL_POINT_PATCH = 22;
export const D3D_PRIMITIVE_16_CONTROL_POINT_PATCH = 23;
export const D3D_PRIMITIVE_17_CONTROL_POINT_PATCH = 24;
export const D3D_PRIMITIVE_18_CONTROL_POINT_PATCH = 25;
export const D3D_PRIMITIVE_19_CONTROL_POINT_PATCH = 26;
export const D3D_PRIMITIVE_20_CONTROL_POINT_PATCH = 27;
export const D3D_PRIMITIVE_21_CONTROL_POINT_PATCH = 28;
export const D3D_PRIMITIVE_22_CONTROL_POINT_PATCH = 29;
export const D3D_PRIMITIVE_23_CONTROL_POINT_PATCH = 30;
export const D3D_PRIMITIVE_24_CONTROL_POINT_PATCH = 31;
export const D3D_PRIMITIVE_25_CONTROL_POINT_PATCH = 32;
export const D3D_PRIMITIVE_26_CONTROL_POINT_PATCH = 33;
export const D3D_PRIMITIVE_27_CONTROL_POINT_PATCH = 34;
export const D3D_PRIMITIVE_28_CONTROL_POINT_PATCH = 35;
export const D3D_PRIMITIVE_29_CONTROL_POINT_PATCH = 36;
export const D3D_PRIMITIVE_30_CONTROL_POINT_PATCH = 37;
export const D3D_PRIMITIVE_31_CONTROL_POINT_PATCH = 38;
export const D3D_PRIMITIVE_32_CONTROL_POINT_PATCH = 39;
export const D3D10_PRIMITIVE_UNDEFINED = 0;
export const D3D10_PRIMITIVE_POINT = 1;
export const D3D10_PRIMITIVE_LINE = 2;
export const D3D10_PRIMITIVE_TRIANGLE = 3;
export const D3D10_PRIMITIVE_LINE_ADJ = 6;
export const D3D10_PRIMITIVE_TRIANGLE_ADJ = 7;
export const D3D11_PRIMITIVE_UNDEFINED = 0;
export const D3D11_PRIMITIVE_POINT = 1;
export const D3D11_PRIMITIVE_LINE = 2;
export const D3D11_PRIMITIVE_TRIANGLE = 3;
export const D3D11_PRIMITIVE_LINE_ADJ = 6;
export const D3D11_PRIMITIVE_TRIANGLE_ADJ = 7;
export const D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH = 8;
export const D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH = 9;
export const D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH = 10;
export const D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH = 11;
export const D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH = 12;
export const D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH = 13;
export const D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH = 14;
export const D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH = 15;
export const D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH = 16;
export const D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH = 17;
export const D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH = 18;
export const D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH = 19;
export const D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH = 20;
export const D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH = 21;
export const D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH = 22;
export const D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH = 23;
export const D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH = 24;
export const D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH = 25;
export const D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH = 26;
export const D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH = 27;
export const D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH = 28;
export const D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH = 29;
export const D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH = 30;
export const D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH = 31;
export const D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH = 32;
export const D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH = 33;
export const D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH = 34;
export const D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH = 35;
export const D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH = 36;
export const D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH = 37;
export const D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH = 38;
export const D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH = 39;
export const D3D_TESSELLATOR_OUTPUT_UNDEFINED = 0;
export const D3D_TESSELLATOR_OUTPUT_POINT = 1;
export const D3D_TESSELLATOR_OUTPUT_LINE = 2;
export const D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW = 3;
export const D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4;
export const D3D11_TESSELLATOR_OUTPUT_UNDEFINED = 0;
export const D3D11_TESSELLATOR_OUTPUT_POINT = 1;
export const D3D11_TESSELLATOR_OUTPUT_LINE = 2;
export const D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW = 3;
export const D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4;
export const D3D_TESSELLATOR_PARTITIONING_UNDEFINED = 0;
export const D3D_TESSELLATOR_PARTITIONING_INTEGER = 1;
export const D3D_TESSELLATOR_PARTITIONING_POW2 = 2;
export const D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3;
export const D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4;
export const D3D11_TESSELLATOR_PARTITIONING_UNDEFINED = 0;
export const D3D11_TESSELLATOR_PARTITIONING_INTEGER = 1;
export const D3D11_TESSELLATOR_PARTITIONING_POW2 = 2;
export const D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3;
export const D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4;
export const D3D_TESSELLATOR_DOMAIN_UNDEFINED = 0;
export const D3D_TESSELLATOR_DOMAIN_ISOLINE = 1;
export const D3D_TESSELLATOR_DOMAIN_TRI = 2;
export const D3D_TESSELLATOR_DOMAIN_QUAD = 3;
export const D3D11_TESSELLATOR_DOMAIN_UNDEFINED = 0;
export const D3D11_TESSELLATOR_DOMAIN_ISOLINE = 1;
export const D3D11_TESSELLATOR_DOMAIN_TRI = 2;
export const D3D11_TESSELLATOR_DOMAIN_QUAD = 3;
export const D3D_SIT_CBUFFER = 0;
export const D3D_SIT_TBUFFER = 1;
export const D3D_SIT_TEXTURE = 2;
export const D3D_SIT_SAMPLER = 3;
export const D3D_SIT_UAV_RWTYPED = 4;
export const D3D_SIT_STRUCTURED = 5;
export const D3D_SIT_UAV_RWSTRUCTURED = 6;
export const D3D_SIT_BYTEADDRESS = 7;
export const D3D_SIT_UAV_RWBYTEADDRESS = 8;
export const D3D_SIT_UAV_APPEND_STRUCTURED = 9;
export const D3D_SIT_UAV_CONSUME_STRUCTURED = 10;
export const D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 11;
export const D3D_SIT_RTACCELERATIONSTRUCTURE = 12;
export const D3D_SIT_UAV_FEEDBACKTEXTURE = 13;
export const D3D10_SIT_CBUFFER = 0;
export const D3D10_SIT_TBUFFER = 1;
export const D3D10_SIT_TEXTURE = 2;
export const D3D10_SIT_SAMPLER = 3;
export const D3D11_SIT_UAV_RWTYPED = 4;
export const D3D11_SIT_STRUCTURED = 5;
export const D3D11_SIT_UAV_RWSTRUCTURED = 6;
export const D3D11_SIT_BYTEADDRESS = 7;
export const D3D11_SIT_UAV_RWBYTEADDRESS = 8;
export const D3D11_SIT_UAV_APPEND_STRUCTURED = 9;
export const D3D11_SIT_UAV_CONSUME_STRUCTURED = 10;
export const D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 11;
export const D3D_RETURN_TYPE_UNORM = 1;
export const D3D_RETURN_TYPE_SNORM = 2;
export const D3D_RETURN_TYPE_SINT = 3;
export const D3D_RETURN_TYPE_UINT = 4;
export const D3D_RETURN_TYPE_FLOAT = 5;
export const D3D_RETURN_TYPE_MIXED = 6;
export const D3D_RETURN_TYPE_DOUBLE = 7;
export const D3D_RETURN_TYPE_CONTINUED = 8;
export const D3D10_RETURN_TYPE_UNORM = 1;
export const D3D10_RETURN_TYPE_SNORM = 2;
export const D3D10_RETURN_TYPE_SINT = 3;
export const D3D10_RETURN_TYPE_UINT = 4;
export const D3D10_RETURN_TYPE_FLOAT = 5;
export const D3D10_RETURN_TYPE_MIXED = 6;
export const D3D11_RETURN_TYPE_UNORM = 1;
export const D3D11_RETURN_TYPE_SNORM = 2;
export const D3D11_RETURN_TYPE_SINT = 3;
export const D3D11_RETURN_TYPE_UINT = 4;
export const D3D11_RETURN_TYPE_FLOAT = 5;
export const D3D11_RETURN_TYPE_MIXED = 6;
export const D3D11_RETURN_TYPE_DOUBLE = 7;
export const D3D11_RETURN_TYPE_CONTINUED = 8;
export const D3D_SRV_DIMENSION_UNKNOWN = 0;
export const D3D_SRV_DIMENSION_BUFFER = 1;
export const D3D_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D_SRV_DIMENSION_BUFFEREX = 11;
export const D3D10_SRV_DIMENSION_UNKNOWN = 0;
export const D3D10_SRV_DIMENSION_BUFFER = 1;
export const D3D10_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D10_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D10_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D10_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D10_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D10_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D10_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D10_1_SRV_DIMENSION_UNKNOWN = 0;
export const D3D10_1_SRV_DIMENSION_BUFFER = 1;
export const D3D10_1_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D10_1_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D10_1_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D10_1_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D10_1_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D11_SRV_DIMENSION_UNKNOWN = 0;
export const D3D11_SRV_DIMENSION_BUFFER = 1;
export const D3D11_SRV_DIMENSION_TEXTURE1D = 2;
export const D3D11_SRV_DIMENSION_TEXTURE1DARRAY = 3;
export const D3D11_SRV_DIMENSION_TEXTURE2D = 4;
export const D3D11_SRV_DIMENSION_TEXTURE2DARRAY = 5;
export const D3D11_SRV_DIMENSION_TEXTURE2DMS = 6;
export const D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY = 7;
export const D3D11_SRV_DIMENSION_TEXTURE3D = 8;
export const D3D11_SRV_DIMENSION_TEXTURECUBE = 9;
export const D3D11_SRV_DIMENSION_TEXTURECUBEARRAY = 10;
export const D3D11_SRV_DIMENSION_BUFFEREX = 11;
export const D3D_INTERPOLATION_UNDEFINED = 0;
export const D3D_INTERPOLATION_CONSTANT = 1;
export const D3D_INTERPOLATION_LINEAR = 2;
export const D3D_INTERPOLATION_LINEAR_CENTROID = 3;
export const D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE = 4;
export const D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID = 5;
export const D3D_INTERPOLATION_LINEAR_SAMPLE = 6;
export const D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE = 7;
export const D3D_PF_NONE = 0;
export const D3D_PF_IN = 1;
export const D3D_PF_OUT = 2;
export const D3D_PF_FORCE_DWORD = 2147483647;

// Structs

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_DESC (size: 16)
 */
export interface D3D12_COMMAND_QUEUE_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE */
  Type: D3D12_COMMAND_LIST_TYPE;
  /** i32 */
  Priority: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_QUEUE_FLAGS */
  Flags: D3D12_COMMAND_QUEUE_FLAGS;
  /** u32 */
  NodeMask: number;
}

export const sizeofD3D12_COMMAND_QUEUE_DESC = 16;

export function allocD3D12_COMMAND_QUEUE_DESC(data?: Partial<D3D12_COMMAND_QUEUE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_COMMAND_QUEUE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.Priority !== undefined) view.setInt32(4, Number(data.Priority), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.NodeMask !== undefined) view.setUint32(12, Number(data.NodeMask), true);
  return buf;
}

export type PSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_INPUT_ELEMENT_DESC (size: 32)
 */
export interface D3D12_INPUT_ELEMENT_DESC {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** u32 */
  SemanticIndex: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** u32 */
  InputSlot: number;
  /** u32 */
  AlignedByteOffset: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_INPUT_CLASSIFICATION */
  InputSlotClass: D3D12_INPUT_CLASSIFICATION;
  /** u32 */
  InstanceDataStepRate: number;
}

export const sizeofD3D12_INPUT_ELEMENT_DESC = 32;

export function allocD3D12_INPUT_ELEMENT_DESC(data?: Partial<D3D12_INPUT_ELEMENT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_INPUT_ELEMENT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  // 0x10: u32
  if (data?.InputSlot !== undefined) view.setUint32(16, Number(data.InputSlot), true);
  // 0x14: u32
  if (data?.AlignedByteOffset !== undefined) view.setUint32(20, Number(data.AlignedByteOffset), true);
  // 0x18: i32
  if (data?.InputSlotClass !== undefined) view.setInt32(24, Number(data.InputSlotClass), true);
  // 0x1c: u32
  if (data?.InstanceDataStepRate !== undefined) view.setUint32(28, Number(data.InstanceDataStepRate), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SO_DECLARATION_ENTRY (size: 24)
 */
export interface D3D12_SO_DECLARATION_ENTRY {
  /** u32 */
  Stream: number;
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** u32 */
  SemanticIndex: number;
  /** u8 */
  StartComponent: number;
  /** u8 */
  ComponentCount: number;
  /** u8 */
  OutputSlot: number;
}

export const sizeofD3D12_SO_DECLARATION_ENTRY = 24;

export function allocD3D12_SO_DECLARATION_ENTRY(data?: Partial<D3D12_SO_DECLARATION_ENTRY>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SO_DECLARATION_ENTRY);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Stream !== undefined) view.setUint32(0, Number(data.Stream), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(16, Number(data.SemanticIndex), true);
  // 0x14: u8
  if (data?.StartComponent !== undefined) view.setUint8(20, Number(data.StartComponent));
  // 0x15: u8
  if (data?.ComponentCount !== undefined) view.setUint8(21, Number(data.ComponentCount));
  // 0x16: u8
  if (data?.OutputSlot !== undefined) view.setUint8(22, Number(data.OutputSlot));
  // 0x17: pad1
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_VIEWPORT (size: 24)
 */
export interface D3D12_VIEWPORT {
  /** f32 */
  TopLeftX: number;
  /** f32 */
  TopLeftY: number;
  /** f32 */
  Width: number;
  /** f32 */
  Height: number;
  /** f32 */
  MinDepth: number;
  /** f32 */
  MaxDepth: number;
}

export const sizeofD3D12_VIEWPORT = 24;

export function allocD3D12_VIEWPORT(data?: Partial<D3D12_VIEWPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIEWPORT);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.TopLeftX !== undefined) view.setFloat32(0, Number(data.TopLeftX), true);
  // 0x04: f32
  if (data?.TopLeftY !== undefined) view.setFloat32(4, Number(data.TopLeftY), true);
  // 0x08: f32
  if (data?.Width !== undefined) view.setFloat32(8, Number(data.Width), true);
  // 0x0c: f32
  if (data?.Height !== undefined) view.setFloat32(12, Number(data.Height), true);
  // 0x10: f32
  if (data?.MinDepth !== undefined) view.setFloat32(16, Number(data.MinDepth), true);
  // 0x14: f32
  if (data?.MaxDepth !== undefined) view.setFloat32(20, Number(data.MaxDepth), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BOX (size: 24)
 */
export interface D3D12_BOX {
  /** u32 */
  left: number;
  /** u32 */
  top: number;
  /** u32 */
  front: number;
  /** u32 */
  right: number;
  /** u32 */
  bottom: number;
  /** u32 */
  back: number;
}

export const sizeofD3D12_BOX = 24;

export function allocD3D12_BOX(data?: Partial<D3D12_BOX>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BOX);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.left !== undefined) view.setUint32(0, Number(data.left), true);
  // 0x04: u32
  if (data?.top !== undefined) view.setUint32(4, Number(data.top), true);
  // 0x08: u32
  if (data?.front !== undefined) view.setUint32(8, Number(data.front), true);
  // 0x0c: u32
  if (data?.right !== undefined) view.setUint32(12, Number(data.right), true);
  // 0x10: u32
  if (data?.bottom !== undefined) view.setUint32(16, Number(data.bottom), true);
  // 0x14: u32
  if (data?.back !== undefined) view.setUint32(20, Number(data.back), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCILOP_DESC (size: 16)
 */
export interface D3D12_DEPTH_STENCILOP_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STENCIL_OP */
  StencilFailOp: D3D12_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STENCIL_OP */
  StencilDepthFailOp: D3D12_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STENCIL_OP */
  StencilPassOp: D3D12_STENCIL_OP;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMPARISON_FUNC */
  StencilFunc: D3D12_COMPARISON_FUNC;
}

export const sizeofD3D12_DEPTH_STENCILOP_DESC = 16;

export function allocD3D12_DEPTH_STENCILOP_DESC(data?: Partial<D3D12_DEPTH_STENCILOP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEPTH_STENCILOP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.StencilFailOp !== undefined) view.setInt32(0, Number(data.StencilFailOp), true);
  // 0x04: i32
  if (data?.StencilDepthFailOp !== undefined) view.setInt32(4, Number(data.StencilDepthFailOp), true);
  // 0x08: i32
  if (data?.StencilPassOp !== undefined) view.setInt32(8, Number(data.StencilPassOp), true);
  // 0x0c: i32
  if (data?.StencilFunc !== undefined) view.setInt32(12, Number(data.StencilFunc), true);
  return buf;
}

export type BOOL = number;

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_DESC (size: 40)
 */
export interface D3D12_DEPTH_STENCIL_DESC {
  /** Windows.Win32.Foundation.BOOL */
  DepthEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_WRITE_MASK */
  DepthWriteMask: D3D12_DEPTH_WRITE_MASK;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMPARISON_FUNC */
  DepthFunc: D3D12_COMPARISON_FUNC;
  /** Windows.Win32.Foundation.BOOL */
  StencilEnable: boolean;
  /** u8 */
  StencilReadMask: number;
  /** u8 */
  StencilWriteMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCILOP_DESC */
  FrontFace: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCILOP_DESC */
  BackFace: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_DEPTH_STENCIL_DESC = 40;

export function allocD3D12_DEPTH_STENCIL_DESC(data?: Partial<D3D12_DEPTH_STENCIL_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEPTH_STENCIL_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DepthEnable !== undefined) view.setInt32(0, Number(data.DepthEnable), true);
  // 0x04: i32
  if (data?.DepthWriteMask !== undefined) view.setInt32(4, Number(data.DepthWriteMask), true);
  // 0x08: i32
  if (data?.DepthFunc !== undefined) view.setInt32(8, Number(data.DepthFunc), true);
  // 0x0c: i32
  if (data?.StencilEnable !== undefined) view.setInt32(12, Number(data.StencilEnable), true);
  // 0x10: u8
  if (data?.StencilReadMask !== undefined) view.setUint8(16, Number(data.StencilReadMask));
  // 0x11: u8
  if (data?.StencilWriteMask !== undefined) view.setUint8(17, Number(data.StencilWriteMask));
  // 0x12: pad6
  // 0x18: pointer
  if (data?.FrontFace !== undefined) view.setBigUint64(24, data.FrontFace === null ? 0n : BigInt(util.toPointer(data.FrontFace)), true);
  // 0x20: pointer
  if (data?.BackFace !== undefined) view.setBigUint64(32, data.BackFace === null ? 0n : BigInt(util.toPointer(data.BackFace)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_DESC1 (size: 48)
 */
export interface D3D12_DEPTH_STENCIL_DESC1 {
  /** Windows.Win32.Foundation.BOOL */
  DepthEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_WRITE_MASK */
  DepthWriteMask: D3D12_DEPTH_WRITE_MASK;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMPARISON_FUNC */
  DepthFunc: D3D12_COMPARISON_FUNC;
  /** Windows.Win32.Foundation.BOOL */
  StencilEnable: boolean;
  /** u8 */
  StencilReadMask: number;
  /** u8 */
  StencilWriteMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCILOP_DESC */
  FrontFace: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCILOP_DESC */
  BackFace: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.BOOL */
  DepthBoundsTestEnable: boolean;
}

export const sizeofD3D12_DEPTH_STENCIL_DESC1 = 48;

export function allocD3D12_DEPTH_STENCIL_DESC1(data?: Partial<D3D12_DEPTH_STENCIL_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEPTH_STENCIL_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DepthEnable !== undefined) view.setInt32(0, Number(data.DepthEnable), true);
  // 0x04: i32
  if (data?.DepthWriteMask !== undefined) view.setInt32(4, Number(data.DepthWriteMask), true);
  // 0x08: i32
  if (data?.DepthFunc !== undefined) view.setInt32(8, Number(data.DepthFunc), true);
  // 0x0c: i32
  if (data?.StencilEnable !== undefined) view.setInt32(12, Number(data.StencilEnable), true);
  // 0x10: u8
  if (data?.StencilReadMask !== undefined) view.setUint8(16, Number(data.StencilReadMask));
  // 0x11: u8
  if (data?.StencilWriteMask !== undefined) view.setUint8(17, Number(data.StencilWriteMask));
  // 0x12: pad6
  // 0x18: pointer
  if (data?.FrontFace !== undefined) view.setBigUint64(24, data.FrontFace === null ? 0n : BigInt(util.toPointer(data.FrontFace)), true);
  // 0x20: pointer
  if (data?.BackFace !== undefined) view.setBigUint64(32, data.BackFace === null ? 0n : BigInt(util.toPointer(data.BackFace)), true);
  // 0x28: i32
  if (data?.DepthBoundsTestEnable !== undefined) view.setInt32(40, Number(data.DepthBoundsTestEnable), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_BLEND_DESC (size: 40)
 */
export interface D3D12_RENDER_TARGET_BLEND_DESC {
  /** Windows.Win32.Foundation.BOOL */
  BlendEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  LogicOpEnable: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND */
  SrcBlend: D3D12_BLEND;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND */
  DestBlend: D3D12_BLEND;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND_OP */
  BlendOp: D3D12_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND */
  SrcBlendAlpha: D3D12_BLEND;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND */
  DestBlendAlpha: D3D12_BLEND;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND_OP */
  BlendOpAlpha: D3D12_BLEND_OP;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_LOGIC_OP */
  LogicOp: D3D12_LOGIC_OP;
  /** u8 */
  RenderTargetWriteMask: number;
}

export const sizeofD3D12_RENDER_TARGET_BLEND_DESC = 40;

export function allocD3D12_RENDER_TARGET_BLEND_DESC(data?: Partial<D3D12_RENDER_TARGET_BLEND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_TARGET_BLEND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.BlendEnable !== undefined) view.setInt32(0, Number(data.BlendEnable), true);
  // 0x04: i32
  if (data?.LogicOpEnable !== undefined) view.setInt32(4, Number(data.LogicOpEnable), true);
  // 0x08: i32
  if (data?.SrcBlend !== undefined) view.setInt32(8, Number(data.SrcBlend), true);
  // 0x0c: i32
  if (data?.DestBlend !== undefined) view.setInt32(12, Number(data.DestBlend), true);
  // 0x10: i32
  if (data?.BlendOp !== undefined) view.setInt32(16, Number(data.BlendOp), true);
  // 0x14: i32
  if (data?.SrcBlendAlpha !== undefined) view.setInt32(20, Number(data.SrcBlendAlpha), true);
  // 0x18: i32
  if (data?.DestBlendAlpha !== undefined) view.setInt32(24, Number(data.DestBlendAlpha), true);
  // 0x1c: i32
  if (data?.BlendOpAlpha !== undefined) view.setInt32(28, Number(data.BlendOpAlpha), true);
  // 0x20: i32
  if (data?.LogicOp !== undefined) view.setInt32(32, Number(data.LogicOp), true);
  // 0x24: u8
  if (data?.RenderTargetWriteMask !== undefined) view.setUint8(36, Number(data.RenderTargetWriteMask));
  // 0x25: pad3
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BLEND_DESC (size: 16)
 */
export interface D3D12_BLEND_DESC {
  /** Windows.Win32.Foundation.BOOL */
  AlphaToCoverageEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IndependentBlendEnable: boolean;
  /** array */
  RenderTarget: Deno.PointerValue | null;
}

export const sizeofD3D12_BLEND_DESC = 16;

export function allocD3D12_BLEND_DESC(data?: Partial<D3D12_BLEND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BLEND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AlphaToCoverageEnable !== undefined) view.setInt32(0, Number(data.AlphaToCoverageEnable), true);
  // 0x04: i32
  if (data?.IndependentBlendEnable !== undefined) view.setInt32(4, Number(data.IndependentBlendEnable), true);
  // 0x08: pointer
  if (data?.RenderTarget !== undefined) view.setBigUint64(8, data.RenderTarget === null ? 0n : BigInt(util.toPointer(data.RenderTarget)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RASTERIZER_DESC (size: 48)
 */
export interface D3D12_RASTERIZER_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_FILL_MODE */
  FillMode: D3D12_FILL_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CULL_MODE */
  CullMode: D3D12_CULL_MODE;
  /** Windows.Win32.Foundation.BOOL */
  FrontCounterClockwise: boolean;
  /** i32 */
  DepthBias: number;
  /** f32 */
  DepthBiasClamp: number;
  /** f32 */
  SlopeScaledDepthBias: number;
  /** Windows.Win32.Foundation.BOOL */
  DepthClipEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MultisampleEnable: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AntialiasedLineEnable: boolean;
  /** u32 */
  ForcedSampleCount: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CONSERVATIVE_RASTERIZATION_MODE */
  ConservativeRaster: D3D12_CONSERVATIVE_RASTERIZATION_MODE;
}

export const sizeofD3D12_RASTERIZER_DESC = 48;

export function allocD3D12_RASTERIZER_DESC(data?: Partial<D3D12_RASTERIZER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RASTERIZER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.FillMode !== undefined) view.setInt32(0, Number(data.FillMode), true);
  // 0x04: i32
  if (data?.CullMode !== undefined) view.setInt32(4, Number(data.CullMode), true);
  // 0x08: i32
  if (data?.FrontCounterClockwise !== undefined) view.setInt32(8, Number(data.FrontCounterClockwise), true);
  // 0x0c: i32
  if (data?.DepthBias !== undefined) view.setInt32(12, Number(data.DepthBias), true);
  // 0x10: f32
  if (data?.DepthBiasClamp !== undefined) view.setFloat32(16, Number(data.DepthBiasClamp), true);
  // 0x14: f32
  if (data?.SlopeScaledDepthBias !== undefined) view.setFloat32(20, Number(data.SlopeScaledDepthBias), true);
  // 0x18: i32
  if (data?.DepthClipEnable !== undefined) view.setInt32(24, Number(data.DepthClipEnable), true);
  // 0x1c: i32
  if (data?.MultisampleEnable !== undefined) view.setInt32(28, Number(data.MultisampleEnable), true);
  // 0x20: i32
  if (data?.AntialiasedLineEnable !== undefined) view.setInt32(32, Number(data.AntialiasedLineEnable), true);
  // 0x24: u32
  if (data?.ForcedSampleCount !== undefined) view.setUint32(36, Number(data.ForcedSampleCount), true);
  // 0x28: i32
  if (data?.ConservativeRaster !== undefined) view.setInt32(40, Number(data.ConservativeRaster), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE (size: 16)
 */
export interface D3D12_SHADER_BYTECODE {
  /** ptr */
  pShaderBytecode: Deno.PointerValue | Uint8Array | null;
  /** usize */
  BytecodeLength: Deno.PointerValue;
}

export const sizeofD3D12_SHADER_BYTECODE = 16;

export function allocD3D12_SHADER_BYTECODE(data?: Partial<D3D12_SHADER_BYTECODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_BYTECODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pShaderBytecode !== undefined) view.setBigUint64(0, data.pShaderBytecode === null ? 0n : BigInt(util.toPointer(data.pShaderBytecode)), true);
  // 0x08: usize
  if (data?.BytecodeLength !== undefined) view.setBigUint64(8, BigInt(data.BytecodeLength), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_DESC (size: 32)
 */
export interface D3D12_STREAM_OUTPUT_DESC {
  /** ptr */
  pSODeclaration: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumEntries: number;
  /** ptr */
  pBufferStrides: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumStrides: number;
  /** u32 */
  RasterizedStream: number;
}

export const sizeofD3D12_STREAM_OUTPUT_DESC = 32;

export function allocD3D12_STREAM_OUTPUT_DESC(data?: Partial<D3D12_STREAM_OUTPUT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_STREAM_OUTPUT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSODeclaration !== undefined) view.setBigUint64(0, data.pSODeclaration === null ? 0n : BigInt(util.toPointer(data.pSODeclaration)), true);
  // 0x08: u32
  if (data?.NumEntries !== undefined) view.setUint32(8, Number(data.NumEntries), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pBufferStrides !== undefined) view.setBigUint64(16, data.pBufferStrides === null ? 0n : BigInt(util.toPointer(data.pBufferStrides)), true);
  // 0x18: u32
  if (data?.NumStrides !== undefined) view.setUint32(24, Number(data.NumStrides), true);
  // 0x1c: u32
  if (data?.RasterizedStream !== undefined) view.setUint32(28, Number(data.RasterizedStream), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_INPUT_LAYOUT_DESC (size: 16)
 */
export interface D3D12_INPUT_LAYOUT_DESC {
  /** ptr */
  pInputElementDescs: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumElements: number;
}

export const sizeofD3D12_INPUT_LAYOUT_DESC = 16;

export function allocD3D12_INPUT_LAYOUT_DESC(data?: Partial<D3D12_INPUT_LAYOUT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_INPUT_LAYOUT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pInputElementDescs !== undefined) view.setBigUint64(0, data.pInputElementDescs === null ? 0n : BigInt(util.toPointer(data.pInputElementDescs)), true);
  // 0x08: u32
  if (data?.NumElements !== undefined) view.setUint32(8, Number(data.NumElements), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_CACHED_PIPELINE_STATE (size: 16)
 */
export interface D3D12_CACHED_PIPELINE_STATE {
  /** ptr */
  pCachedBlob: Deno.PointerValue | Uint8Array | null;
  /** usize */
  CachedBlobSizeInBytes: Deno.PointerValue;
}

export const sizeofD3D12_CACHED_PIPELINE_STATE = 16;

export function allocD3D12_CACHED_PIPELINE_STATE(data?: Partial<D3D12_CACHED_PIPELINE_STATE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_CACHED_PIPELINE_STATE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCachedBlob !== undefined) view.setBigUint64(0, data.pCachedBlob === null ? 0n : BigInt(util.toPointer(data.pCachedBlob)), true);
  // 0x08: usize
  if (data?.CachedBlobSizeInBytes !== undefined) view.setBigUint64(8, BigInt(data.CachedBlobSizeInBytes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC (size: 8)
 */
export interface DXGI_SAMPLE_DESC {
  /** u32 */
  Count: number;
  /** u32 */
  Quality: number;
}

export const sizeofDXGI_SAMPLE_DESC = 8;

export function allocDXGI_SAMPLE_DESC(data?: Partial<DXGI_SAMPLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofDXGI_SAMPLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Count !== undefined) view.setUint32(0, Number(data.Count), true);
  // 0x04: u32
  if (data?.Quality !== undefined) view.setUint32(4, Number(data.Quality), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_GRAPHICS_PIPELINE_STATE_DESC (size: 160)
 */
export interface D3D12_GRAPHICS_PIPELINE_STATE_DESC {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12RootSignature */
  pRootSignature: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  VS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  PS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  DS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  HS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  GS: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_DESC */
  StreamOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BLEND_DESC */
  BlendState: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SampleMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RASTERIZER_DESC */
  RasterizerState: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_DESC */
  DepthStencilState: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_INPUT_LAYOUT_DESC */
  InputLayout: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_STRIP_CUT_VALUE */
  IBStripCutValue: D3D12_INDEX_BUFFER_STRIP_CUT_VALUE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PRIMITIVE_TOPOLOGY_TYPE */
  PrimitiveTopologyType: D3D12_PRIMITIVE_TOPOLOGY_TYPE;
  /** u32 */
  NumRenderTargets: number;
  /** array */
  RTVFormats: Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  DSVFormat: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CACHED_PIPELINE_STATE */
  CachedPSO: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PIPELINE_STATE_FLAGS */
  Flags: D3D12_PIPELINE_STATE_FLAGS;
}

export const sizeofD3D12_GRAPHICS_PIPELINE_STATE_DESC = 160;

export function allocD3D12_GRAPHICS_PIPELINE_STATE_DESC(data?: Partial<D3D12_GRAPHICS_PIPELINE_STATE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_GRAPHICS_PIPELINE_STATE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pRootSignature !== undefined) view.setBigUint64(0, data.pRootSignature === null ? 0n : BigInt(util.toPointer(data.pRootSignature)), true);
  // 0x08: pointer
  if (data?.VS !== undefined) view.setBigUint64(8, data.VS === null ? 0n : BigInt(util.toPointer(data.VS)), true);
  // 0x10: pointer
  if (data?.PS !== undefined) view.setBigUint64(16, data.PS === null ? 0n : BigInt(util.toPointer(data.PS)), true);
  // 0x18: pointer
  if (data?.DS !== undefined) view.setBigUint64(24, data.DS === null ? 0n : BigInt(util.toPointer(data.DS)), true);
  // 0x20: pointer
  if (data?.HS !== undefined) view.setBigUint64(32, data.HS === null ? 0n : BigInt(util.toPointer(data.HS)), true);
  // 0x28: pointer
  if (data?.GS !== undefined) view.setBigUint64(40, data.GS === null ? 0n : BigInt(util.toPointer(data.GS)), true);
  // 0x30: pointer
  if (data?.StreamOutput !== undefined) view.setBigUint64(48, data.StreamOutput === null ? 0n : BigInt(util.toPointer(data.StreamOutput)), true);
  // 0x38: pointer
  if (data?.BlendState !== undefined) view.setBigUint64(56, data.BlendState === null ? 0n : BigInt(util.toPointer(data.BlendState)), true);
  // 0x40: u32
  if (data?.SampleMask !== undefined) view.setUint32(64, Number(data.SampleMask), true);
  // 0x44: pad4
  // 0x48: pointer
  if (data?.RasterizerState !== undefined) view.setBigUint64(72, data.RasterizerState === null ? 0n : BigInt(util.toPointer(data.RasterizerState)), true);
  // 0x50: pointer
  if (data?.DepthStencilState !== undefined) view.setBigUint64(80, data.DepthStencilState === null ? 0n : BigInt(util.toPointer(data.DepthStencilState)), true);
  // 0x58: pointer
  if (data?.InputLayout !== undefined) view.setBigUint64(88, data.InputLayout === null ? 0n : BigInt(util.toPointer(data.InputLayout)), true);
  // 0x60: i32
  if (data?.IBStripCutValue !== undefined) view.setInt32(96, Number(data.IBStripCutValue), true);
  // 0x64: i32
  if (data?.PrimitiveTopologyType !== undefined) view.setInt32(100, Number(data.PrimitiveTopologyType), true);
  // 0x68: u32
  if (data?.NumRenderTargets !== undefined) view.setUint32(104, Number(data.NumRenderTargets), true);
  // 0x6c: pad4
  // 0x70: pointer
  if (data?.RTVFormats !== undefined) view.setBigUint64(112, data.RTVFormats === null ? 0n : BigInt(util.toPointer(data.RTVFormats)), true);
  // 0x78: u32
  if (data?.DSVFormat !== undefined) view.setUint32(120, Number(data.DSVFormat), true);
  // 0x7c: pad4
  // 0x80: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(128, data.SampleDesc === null ? 0n : BigInt(util.toPointer(data.SampleDesc)), true);
  // 0x88: u32
  if (data?.NodeMask !== undefined) view.setUint32(136, Number(data.NodeMask), true);
  // 0x8c: pad4
  // 0x90: pointer
  if (data?.CachedPSO !== undefined) view.setBigUint64(144, data.CachedPSO === null ? 0n : BigInt(util.toPointer(data.CachedPSO)), true);
  // 0x98: u32
  if (data?.Flags !== undefined) view.setUint32(152, Number(data.Flags), true);
  // 0x9c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_COMPUTE_PIPELINE_STATE_DESC (size: 40)
 */
export interface D3D12_COMPUTE_PIPELINE_STATE_DESC {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12RootSignature */
  pRootSignature: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  CS: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CACHED_PIPELINE_STATE */
  CachedPSO: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PIPELINE_STATE_FLAGS */
  Flags: D3D12_PIPELINE_STATE_FLAGS;
}

export const sizeofD3D12_COMPUTE_PIPELINE_STATE_DESC = 40;

export function allocD3D12_COMPUTE_PIPELINE_STATE_DESC(data?: Partial<D3D12_COMPUTE_PIPELINE_STATE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_COMPUTE_PIPELINE_STATE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pRootSignature !== undefined) view.setBigUint64(0, data.pRootSignature === null ? 0n : BigInt(util.toPointer(data.pRootSignature)), true);
  // 0x08: pointer
  if (data?.CS !== undefined) view.setBigUint64(8, data.CS === null ? 0n : BigInt(util.toPointer(data.CS)), true);
  // 0x10: u32
  if (data?.NodeMask !== undefined) view.setUint32(16, Number(data.NodeMask), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.CachedPSO !== undefined) view.setBigUint64(24, data.CachedPSO === null ? 0n : BigInt(util.toPointer(data.CachedPSO)), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RT_FORMAT_ARRAY (size: 16)
 */
export interface D3D12_RT_FORMAT_ARRAY {
  /** array */
  RTFormats: Deno.PointerValue | null;
  /** u32 */
  NumRenderTargets: number;
}

export const sizeofD3D12_RT_FORMAT_ARRAY = 16;

export function allocD3D12_RT_FORMAT_ARRAY(data?: Partial<D3D12_RT_FORMAT_ARRAY>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RT_FORMAT_ARRAY);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RTFormats !== undefined) view.setBigUint64(0, data.RTFormats === null ? 0n : BigInt(util.toPointer(data.RTFormats)), true);
  // 0x08: u32
  if (data?.NumRenderTargets !== undefined) view.setUint32(8, Number(data.NumRenderTargets), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_PIPELINE_STATE_STREAM_DESC (size: 16)
 */
export interface D3D12_PIPELINE_STATE_STREAM_DESC {
  /** usize */
  SizeInBytes: Deno.PointerValue;
  /** ptr */
  pPipelineStateSubobjectStream: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_PIPELINE_STATE_STREAM_DESC = 16;

export function allocD3D12_PIPELINE_STATE_STREAM_DESC(data?: Partial<D3D12_PIPELINE_STATE_STREAM_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_PIPELINE_STATE_STREAM_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.SizeInBytes !== undefined) view.setBigUint64(0, BigInt(data.SizeInBytes), true);
  // 0x08: pointer
  if (data?.pPipelineStateSubobjectStream !== undefined) view.setBigUint64(8, data.pPipelineStateSubobjectStream === null ? 0n : BigInt(util.toPointer(data.pPipelineStateSubobjectStream)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS (size: 64)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS {
  /** Windows.Win32.Foundation.BOOL */
  DoublePrecisionFloatShaderOps: boolean;
  /** Windows.Win32.Foundation.BOOL */
  OutputMergerLogicOp: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_MIN_PRECISION_SUPPORT */
  MinPrecisionSupport: D3D12_SHADER_MIN_PRECISION_SUPPORT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TILED_RESOURCES_TIER */
  TiledResourcesTier: D3D12_TILED_RESOURCES_TIER;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_BINDING_TIER */
  ResourceBindingTier: D3D12_RESOURCE_BINDING_TIER;
  /** Windows.Win32.Foundation.BOOL */
  PSSpecifiedStencilRefSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  TypedUAVLoadAdditionalFormats: boolean;
  /** Windows.Win32.Foundation.BOOL */
  ROVsSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CONSERVATIVE_RASTERIZATION_TIER */
  ConservativeRasterizationTier: D3D12_CONSERVATIVE_RASTERIZATION_TIER;
  /** u32 */
  MaxGPUVirtualAddressBitsPerResource: number;
  /** Windows.Win32.Foundation.BOOL */
  StandardSwizzle64KBSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CROSS_NODE_SHARING_TIER */
  CrossNodeSharingTier: D3D12_CROSS_NODE_SHARING_TIER;
  /** Windows.Win32.Foundation.BOOL */
  CrossAdapterRowMajorTextureSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_HEAP_TIER */
  ResourceHeapTier: D3D12_RESOURCE_HEAP_TIER;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS = 64;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DoublePrecisionFloatShaderOps !== undefined) view.setInt32(0, Number(data.DoublePrecisionFloatShaderOps), true);
  // 0x04: i32
  if (data?.OutputMergerLogicOp !== undefined) view.setInt32(4, Number(data.OutputMergerLogicOp), true);
  // 0x08: u32
  if (data?.MinPrecisionSupport !== undefined) view.setUint32(8, Number(data.MinPrecisionSupport), true);
  // 0x0c: i32
  if (data?.TiledResourcesTier !== undefined) view.setInt32(12, Number(data.TiledResourcesTier), true);
  // 0x10: i32
  if (data?.ResourceBindingTier !== undefined) view.setInt32(16, Number(data.ResourceBindingTier), true);
  // 0x14: i32
  if (data?.PSSpecifiedStencilRefSupported !== undefined) view.setInt32(20, Number(data.PSSpecifiedStencilRefSupported), true);
  // 0x18: i32
  if (data?.TypedUAVLoadAdditionalFormats !== undefined) view.setInt32(24, Number(data.TypedUAVLoadAdditionalFormats), true);
  // 0x1c: i32
  if (data?.ROVsSupported !== undefined) view.setInt32(28, Number(data.ROVsSupported), true);
  // 0x20: i32
  if (data?.ConservativeRasterizationTier !== undefined) view.setInt32(32, Number(data.ConservativeRasterizationTier), true);
  // 0x24: u32
  if (data?.MaxGPUVirtualAddressBitsPerResource !== undefined) view.setUint32(36, Number(data.MaxGPUVirtualAddressBitsPerResource), true);
  // 0x28: i32
  if (data?.StandardSwizzle64KBSupported !== undefined) view.setInt32(40, Number(data.StandardSwizzle64KBSupported), true);
  // 0x2c: i32
  if (data?.CrossNodeSharingTier !== undefined) view.setInt32(44, Number(data.CrossNodeSharingTier), true);
  // 0x30: i32
  if (data?.CrossAdapterRowMajorTextureSupported !== undefined) view.setInt32(48, Number(data.CrossAdapterRowMajorTextureSupported), true);
  // 0x34: i32
  if (data?.VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation !== undefined) view.setInt32(52, Number(data.VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation), true);
  // 0x38: i32
  if (data?.ResourceHeapTier !== undefined) view.setInt32(56, Number(data.ResourceHeapTier), true);
  // 0x3c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS1 (size: 24)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS1 {
  /** Windows.Win32.Foundation.BOOL */
  WaveOps: boolean;
  /** u32 */
  WaveLaneCountMin: number;
  /** u32 */
  WaveLaneCountMax: number;
  /** u32 */
  TotalLaneCount: number;
  /** Windows.Win32.Foundation.BOOL */
  ExpandedComputeResourceStates: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Int64ShaderOps: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS1 = 24;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS1(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.WaveOps !== undefined) view.setInt32(0, Number(data.WaveOps), true);
  // 0x04: u32
  if (data?.WaveLaneCountMin !== undefined) view.setUint32(4, Number(data.WaveLaneCountMin), true);
  // 0x08: u32
  if (data?.WaveLaneCountMax !== undefined) view.setUint32(8, Number(data.WaveLaneCountMax), true);
  // 0x0c: u32
  if (data?.TotalLaneCount !== undefined) view.setUint32(12, Number(data.TotalLaneCount), true);
  // 0x10: i32
  if (data?.ExpandedComputeResourceStates !== undefined) view.setInt32(16, Number(data.ExpandedComputeResourceStates), true);
  // 0x14: i32
  if (data?.Int64ShaderOps !== undefined) view.setInt32(20, Number(data.Int64ShaderOps), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS2 (size: 8)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS2 {
  /** Windows.Win32.Foundation.BOOL */
  DepthBoundsTestSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER */
  ProgrammableSamplePositionsTier: D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS2 = 8;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS2(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS2);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DepthBoundsTestSupported !== undefined) view.setInt32(0, Number(data.DepthBoundsTestSupported), true);
  // 0x04: i32
  if (data?.ProgrammableSamplePositionsTier !== undefined) view.setInt32(4, Number(data.ProgrammableSamplePositionsTier), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_ROOT_SIGNATURE (size: 8)
 */
export interface D3D12_FEATURE_DATA_ROOT_SIGNATURE {
  /** Windows.Win32.Graphics.Direct3D12.D3D_ROOT_SIGNATURE_VERSION */
  HighestVersion: D3D_ROOT_SIGNATURE_VERSION;
}

export const sizeofD3D12_FEATURE_DATA_ROOT_SIGNATURE = 8;

export function allocD3D12_FEATURE_DATA_ROOT_SIGNATURE(data?: Partial<D3D12_FEATURE_DATA_ROOT_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_ROOT_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.HighestVersion !== undefined) view.setInt32(0, Number(data.HighestVersion), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_ARCHITECTURE (size: 16)
 */
export interface D3D12_FEATURE_DATA_ARCHITECTURE {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  TileBasedRenderer: boolean;
  /** Windows.Win32.Foundation.BOOL */
  UMA: boolean;
  /** Windows.Win32.Foundation.BOOL */
  CacheCoherentUMA: boolean;
}

export const sizeofD3D12_FEATURE_DATA_ARCHITECTURE = 16;

export function allocD3D12_FEATURE_DATA_ARCHITECTURE(data?: Partial<D3D12_FEATURE_DATA_ARCHITECTURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_ARCHITECTURE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.TileBasedRenderer !== undefined) view.setInt32(4, Number(data.TileBasedRenderer), true);
  // 0x08: i32
  if (data?.UMA !== undefined) view.setInt32(8, Number(data.UMA), true);
  // 0x0c: i32
  if (data?.CacheCoherentUMA !== undefined) view.setInt32(12, Number(data.CacheCoherentUMA), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_ARCHITECTURE1 (size: 24)
 */
export interface D3D12_FEATURE_DATA_ARCHITECTURE1 {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Foundation.BOOL */
  TileBasedRenderer: boolean;
  /** Windows.Win32.Foundation.BOOL */
  UMA: boolean;
  /** Windows.Win32.Foundation.BOOL */
  CacheCoherentUMA: boolean;
  /** Windows.Win32.Foundation.BOOL */
  IsolatedMMU: boolean;
}

export const sizeofD3D12_FEATURE_DATA_ARCHITECTURE1 = 24;

export function allocD3D12_FEATURE_DATA_ARCHITECTURE1(data?: Partial<D3D12_FEATURE_DATA_ARCHITECTURE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_ARCHITECTURE1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.TileBasedRenderer !== undefined) view.setInt32(4, Number(data.TileBasedRenderer), true);
  // 0x08: i32
  if (data?.UMA !== undefined) view.setInt32(8, Number(data.UMA), true);
  // 0x0c: i32
  if (data?.CacheCoherentUMA !== undefined) view.setInt32(12, Number(data.CacheCoherentUMA), true);
  // 0x10: i32
  if (data?.IsolatedMMU !== undefined) view.setInt32(16, Number(data.IsolatedMMU), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_FEATURE_LEVELS (size: 24)
 */
export interface D3D12_FEATURE_DATA_FEATURE_LEVELS {
  /** u32 */
  NumFeatureLevels: number;
  /** ptr */
  pFeatureLevelsRequested: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL */
  MaxSupportedFeatureLevel: D3D_FEATURE_LEVEL;
}

export const sizeofD3D12_FEATURE_DATA_FEATURE_LEVELS = 24;

export function allocD3D12_FEATURE_DATA_FEATURE_LEVELS(data?: Partial<D3D12_FEATURE_DATA_FEATURE_LEVELS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_FEATURE_LEVELS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumFeatureLevels !== undefined) view.setUint32(0, Number(data.NumFeatureLevels), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pFeatureLevelsRequested !== undefined) view.setBigUint64(8, data.pFeatureLevelsRequested === null ? 0n : BigInt(util.toPointer(data.pFeatureLevelsRequested)), true);
  // 0x10: i32
  if (data?.MaxSupportedFeatureLevel !== undefined) view.setInt32(16, Number(data.MaxSupportedFeatureLevel), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_SHADER_MODEL (size: 8)
 */
export interface D3D12_FEATURE_DATA_SHADER_MODEL {
  /** Windows.Win32.Graphics.Direct3D12.D3D_SHADER_MODEL */
  HighestShaderModel: D3D_SHADER_MODEL;
}

export const sizeofD3D12_FEATURE_DATA_SHADER_MODEL = 8;

export function allocD3D12_FEATURE_DATA_SHADER_MODEL(data?: Partial<D3D12_FEATURE_DATA_SHADER_MODEL>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_SHADER_MODEL);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.HighestShaderModel !== undefined) view.setInt32(0, Number(data.HighestShaderModel), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_FORMAT_SUPPORT (size: 16)
 */
export interface D3D12_FEATURE_DATA_FORMAT_SUPPORT {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_FORMAT_SUPPORT1 */
  Support1: D3D12_FORMAT_SUPPORT1;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_FORMAT_SUPPORT2 */
  Support2: D3D12_FORMAT_SUPPORT2;
}

export const sizeofD3D12_FEATURE_DATA_FORMAT_SUPPORT = 16;

export function allocD3D12_FEATURE_DATA_FORMAT_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_FORMAT_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_FORMAT_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: u32
  if (data?.Support1 !== undefined) view.setUint32(4, Number(data.Support1), true);
  // 0x08: u32
  if (data?.Support2 !== undefined) view.setUint32(8, Number(data.Support2), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS (size: 16)
 */
export interface D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** u32 */
  SampleCount: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS */
  Flags: D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS;
  /** u32 */
  NumQualityLevels: number;
}

export const sizeofD3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS = 16;

export function allocD3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS(data?: Partial<D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: u32
  if (data?.SampleCount !== undefined) view.setUint32(4, Number(data.SampleCount), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.NumQualityLevels !== undefined) view.setUint32(12, Number(data.NumQualityLevels), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_FORMAT_INFO (size: 8)
 */
export interface D3D12_FEATURE_DATA_FORMAT_INFO {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** u8 */
  PlaneCount: number;
}

export const sizeofD3D12_FEATURE_DATA_FORMAT_INFO = 8;

export function allocD3D12_FEATURE_DATA_FORMAT_INFO(data?: Partial<D3D12_FEATURE_DATA_FORMAT_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_FORMAT_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: u8
  if (data?.PlaneCount !== undefined) view.setUint8(4, Number(data.PlaneCount));
  // 0x05: pad3
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT (size: 8)
 */
export interface D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
  /** u32 */
  MaxGPUVirtualAddressBitsPerResource: number;
  /** u32 */
  MaxGPUVirtualAddressBitsPerProcess: number;
}

export const sizeofD3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT = 8;

export function allocD3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxGPUVirtualAddressBitsPerResource !== undefined) view.setUint32(0, Number(data.MaxGPUVirtualAddressBitsPerResource), true);
  // 0x04: u32
  if (data?.MaxGPUVirtualAddressBitsPerProcess !== undefined) view.setUint32(4, Number(data.MaxGPUVirtualAddressBitsPerProcess), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_SHADER_CACHE (size: 8)
 */
export interface D3D12_FEATURE_DATA_SHADER_CACHE {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_CACHE_SUPPORT_FLAGS */
  SupportFlags: D3D12_SHADER_CACHE_SUPPORT_FLAGS;
}

export const sizeofD3D12_FEATURE_DATA_SHADER_CACHE = 8;

export function allocD3D12_FEATURE_DATA_SHADER_CACHE(data?: Partial<D3D12_FEATURE_DATA_SHADER_CACHE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_SHADER_CACHE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SupportFlags !== undefined) view.setUint32(0, Number(data.SupportFlags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY (size: 16)
 */
export interface D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_TYPE */
  CommandListType: D3D12_COMMAND_LIST_TYPE;
  /** u32 */
  Priority: number;
  /** Windows.Win32.Foundation.BOOL */
  PriorityForTypeIsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY = 16;

export function allocD3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY(data?: Partial<D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CommandListType !== undefined) view.setInt32(0, Number(data.CommandListType), true);
  // 0x04: u32
  if (data?.Priority !== undefined) view.setUint32(4, Number(data.Priority), true);
  // 0x08: i32
  if (data?.PriorityForTypeIsSupported !== undefined) view.setInt32(8, Number(data.PriorityForTypeIsSupported), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS3 (size: 24)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS3 {
  /** Windows.Win32.Foundation.BOOL */
  CopyQueueTimestampQueriesSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  CastingFullyTypedFormatSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_LIST_SUPPORT_FLAGS */
  WriteBufferImmediateSupportFlags: D3D12_COMMAND_LIST_SUPPORT_FLAGS;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_VIEW_INSTANCING_TIER */
  ViewInstancingTier: D3D12_VIEW_INSTANCING_TIER;
  /** Windows.Win32.Foundation.BOOL */
  BarycentricsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS3 = 24;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS3(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS3>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS3);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.CopyQueueTimestampQueriesSupported !== undefined) view.setInt32(0, Number(data.CopyQueueTimestampQueriesSupported), true);
  // 0x04: i32
  if (data?.CastingFullyTypedFormatSupported !== undefined) view.setInt32(4, Number(data.CastingFullyTypedFormatSupported), true);
  // 0x08: u32
  if (data?.WriteBufferImmediateSupportFlags !== undefined) view.setUint32(8, Number(data.WriteBufferImmediateSupportFlags), true);
  // 0x0c: i32
  if (data?.ViewInstancingTier !== undefined) view.setInt32(12, Number(data.ViewInstancingTier), true);
  // 0x10: i32
  if (data?.BarycentricsSupported !== undefined) view.setInt32(16, Number(data.BarycentricsSupported), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_EXISTING_HEAPS (size: 8)
 */
export interface D3D12_FEATURE_DATA_EXISTING_HEAPS {
  /** Windows.Win32.Foundation.BOOL */
  Supported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_EXISTING_HEAPS = 8;

export function allocD3D12_FEATURE_DATA_EXISTING_HEAPS(data?: Partial<D3D12_FEATURE_DATA_EXISTING_HEAPS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_EXISTING_HEAPS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Supported !== undefined) view.setInt32(0, Number(data.Supported), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_DISPLAYABLE (size: 8)
 */
export interface D3D12_FEATURE_DATA_DISPLAYABLE {
  /** Windows.Win32.Foundation.BOOL */
  DisplayableTexture: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER */
  SharedResourceCompatibilityTier: D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER;
}

export const sizeofD3D12_FEATURE_DATA_DISPLAYABLE = 8;

export function allocD3D12_FEATURE_DATA_DISPLAYABLE(data?: Partial<D3D12_FEATURE_DATA_DISPLAYABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_DISPLAYABLE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.DisplayableTexture !== undefined) view.setInt32(0, Number(data.DisplayableTexture), true);
  // 0x04: i32
  if (data?.SharedResourceCompatibilityTier !== undefined) view.setInt32(4, Number(data.SharedResourceCompatibilityTier), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS4 (size: 16)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS4 {
  /** Windows.Win32.Foundation.BOOL */
  MSAA64KBAlignedTextureSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER */
  SharedResourceCompatibilityTier: D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER;
  /** Windows.Win32.Foundation.BOOL */
  Native16BitShaderOpsSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS4 = 16;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS4(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS4>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS4);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MSAA64KBAlignedTextureSupported !== undefined) view.setInt32(0, Number(data.MSAA64KBAlignedTextureSupported), true);
  // 0x04: i32
  if (data?.SharedResourceCompatibilityTier !== undefined) view.setInt32(4, Number(data.SharedResourceCompatibilityTier), true);
  // 0x08: i32
  if (data?.Native16BitShaderOpsSupported !== undefined) view.setInt32(8, Number(data.Native16BitShaderOpsSupported), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_SERIALIZATION (size: 8)
 */
export interface D3D12_FEATURE_DATA_SERIALIZATION {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_HEAP_SERIALIZATION_TIER */
  HeapSerializationTier: D3D12_HEAP_SERIALIZATION_TIER;
}

export const sizeofD3D12_FEATURE_DATA_SERIALIZATION = 8;

export function allocD3D12_FEATURE_DATA_SERIALIZATION(data?: Partial<D3D12_FEATURE_DATA_SERIALIZATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_SERIALIZATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: i32
  if (data?.HeapSerializationTier !== undefined) view.setInt32(4, Number(data.HeapSerializationTier), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_CROSS_NODE (size: 8)
 */
export interface D3D12_FEATURE_DATA_CROSS_NODE {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CROSS_NODE_SHARING_TIER */
  SharingTier: D3D12_CROSS_NODE_SHARING_TIER;
  /** Windows.Win32.Foundation.BOOL */
  AtomicShaderInstructions: boolean;
}

export const sizeofD3D12_FEATURE_DATA_CROSS_NODE = 8;

export function allocD3D12_FEATURE_DATA_CROSS_NODE(data?: Partial<D3D12_FEATURE_DATA_CROSS_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_CROSS_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SharingTier !== undefined) view.setInt32(0, Number(data.SharingTier), true);
  // 0x04: i32
  if (data?.AtomicShaderInstructions !== undefined) view.setInt32(4, Number(data.AtomicShaderInstructions), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS5 (size: 16)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS5 {
  /** Windows.Win32.Foundation.BOOL */
  SRVOnlyTiledResourceTier3: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_TIER */
  RenderPassesTier: D3D12_RENDER_PASS_TIER;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_TIER */
  RaytracingTier: D3D12_RAYTRACING_TIER;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS5 = 16;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS5(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS5>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS5);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.SRVOnlyTiledResourceTier3 !== undefined) view.setInt32(0, Number(data.SRVOnlyTiledResourceTier3), true);
  // 0x04: i32
  if (data?.RenderPassesTier !== undefined) view.setInt32(4, Number(data.RenderPassesTier), true);
  // 0x08: i32
  if (data?.RaytracingTier !== undefined) view.setInt32(8, Number(data.RaytracingTier), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS6 (size: 24)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS6 {
  /** Windows.Win32.Foundation.BOOL */
  AdditionalShadingRatesSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  PerPrimitiveShadingRateSupportedWithViewportIndexing: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_VARIABLE_SHADING_RATE_TIER */
  VariableShadingRateTier: D3D12_VARIABLE_SHADING_RATE_TIER;
  /** u32 */
  ShadingRateImageTileSize: number;
  /** Windows.Win32.Foundation.BOOL */
  BackgroundProcessingSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS6 = 24;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS6(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS6>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS6);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AdditionalShadingRatesSupported !== undefined) view.setInt32(0, Number(data.AdditionalShadingRatesSupported), true);
  // 0x04: i32
  if (data?.PerPrimitiveShadingRateSupportedWithViewportIndexing !== undefined) view.setInt32(4, Number(data.PerPrimitiveShadingRateSupportedWithViewportIndexing), true);
  // 0x08: i32
  if (data?.VariableShadingRateTier !== undefined) view.setInt32(8, Number(data.VariableShadingRateTier), true);
  // 0x0c: u32
  if (data?.ShadingRateImageTileSize !== undefined) view.setUint32(12, Number(data.ShadingRateImageTileSize), true);
  // 0x10: i32
  if (data?.BackgroundProcessingSupported !== undefined) view.setInt32(16, Number(data.BackgroundProcessingSupported), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS7 (size: 8)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS7 {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MESH_SHADER_TIER */
  MeshShaderTier: D3D12_MESH_SHADER_TIER;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SAMPLER_FEEDBACK_TIER */
  SamplerFeedbackTier: D3D12_SAMPLER_FEEDBACK_TIER;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS7 = 8;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS7(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS7>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS7);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MeshShaderTier !== undefined) view.setInt32(0, Number(data.MeshShaderTier), true);
  // 0x04: i32
  if (data?.SamplerFeedbackTier !== undefined) view.setInt32(4, Number(data.SamplerFeedbackTier), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_QUERY_META_COMMAND (size: 48)
 */
export interface D3D12_FEATURE_DATA_QUERY_META_COMMAND {
  /** System.Guid */
  CommandId: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NodeMask: number;
  /** ptr */
  pQueryInputData: Deno.PointerValue | Uint8Array | null;
  /** usize */
  QueryInputDataSizeInBytes: Deno.PointerValue;
  /** ptr */
  pQueryOutputData: Deno.PointerValue | Uint8Array | null;
  /** usize */
  QueryOutputDataSizeInBytes: Deno.PointerValue;
}

export const sizeofD3D12_FEATURE_DATA_QUERY_META_COMMAND = 48;

export function allocD3D12_FEATURE_DATA_QUERY_META_COMMAND(data?: Partial<D3D12_FEATURE_DATA_QUERY_META_COMMAND>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_QUERY_META_COMMAND);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.CommandId !== undefined) view.setBigUint64(0, data.CommandId === null ? 0n : BigInt(util.toPointer(data.CommandId)), true);
  // 0x08: u32
  if (data?.NodeMask !== undefined) view.setUint32(8, Number(data.NodeMask), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pQueryInputData !== undefined) view.setBigUint64(16, data.pQueryInputData === null ? 0n : BigInt(util.toPointer(data.pQueryInputData)), true);
  // 0x18: usize
  if (data?.QueryInputDataSizeInBytes !== undefined) view.setBigUint64(24, BigInt(data.QueryInputDataSizeInBytes), true);
  // 0x20: pointer
  if (data?.pQueryOutputData !== undefined) view.setBigUint64(32, data.pQueryOutputData === null ? 0n : BigInt(util.toPointer(data.pQueryOutputData)), true);
  // 0x28: usize
  if (data?.QueryOutputDataSizeInBytes !== undefined) view.setBigUint64(40, BigInt(data.QueryOutputDataSizeInBytes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS8 (size: 8)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS8 {
  /** Windows.Win32.Foundation.BOOL */
  UnalignedBlockTexturesSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS8 = 8;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS8(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS8>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS8);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.UnalignedBlockTexturesSupported !== undefined) view.setInt32(0, Number(data.UnalignedBlockTexturesSupported), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS9 (size: 24)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS9 {
  /** Windows.Win32.Foundation.BOOL */
  MeshShaderPipelineStatsSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MeshShaderSupportsFullRangeRenderTargetArrayIndex: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AtomicInt64OnTypedResourceSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  AtomicInt64OnGroupSharedSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  DerivativesInMeshAndAmplificationShadersSupported: boolean;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_WAVE_MMA_TIER */
  WaveMMATier: D3D12_WAVE_MMA_TIER;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS9 = 24;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS9(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS9>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS9);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.MeshShaderPipelineStatsSupported !== undefined) view.setInt32(0, Number(data.MeshShaderPipelineStatsSupported), true);
  // 0x04: i32
  if (data?.MeshShaderSupportsFullRangeRenderTargetArrayIndex !== undefined) view.setInt32(4, Number(data.MeshShaderSupportsFullRangeRenderTargetArrayIndex), true);
  // 0x08: i32
  if (data?.AtomicInt64OnTypedResourceSupported !== undefined) view.setInt32(8, Number(data.AtomicInt64OnTypedResourceSupported), true);
  // 0x0c: i32
  if (data?.AtomicInt64OnGroupSharedSupported !== undefined) view.setInt32(12, Number(data.AtomicInt64OnGroupSharedSupported), true);
  // 0x10: i32
  if (data?.DerivativesInMeshAndAmplificationShadersSupported !== undefined) view.setInt32(16, Number(data.DerivativesInMeshAndAmplificationShadersSupported), true);
  // 0x14: i32
  if (data?.WaveMMATier !== undefined) view.setInt32(20, Number(data.WaveMMATier), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS10 (size: 8)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS10 {
  /** Windows.Win32.Foundation.BOOL */
  VariableRateShadingSumCombinerSupported: boolean;
  /** Windows.Win32.Foundation.BOOL */
  MeshShaderPerPrimitiveShadingRateSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS10 = 8;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS10(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS10>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS10);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.VariableRateShadingSumCombinerSupported !== undefined) view.setInt32(0, Number(data.VariableRateShadingSumCombinerSupported), true);
  // 0x04: i32
  if (data?.MeshShaderPerPrimitiveShadingRateSupported !== undefined) view.setInt32(4, Number(data.MeshShaderPerPrimitiveShadingRateSupported), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_D3D12_OPTIONS11 (size: 8)
 */
export interface D3D12_FEATURE_DATA_D3D12_OPTIONS11 {
  /** Windows.Win32.Foundation.BOOL */
  AtomicInt64OnDescriptorHeapResourceSupported: boolean;
}

export const sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS11 = 8;

export function allocD3D12_FEATURE_DATA_D3D12_OPTIONS11(data?: Partial<D3D12_FEATURE_DATA_D3D12_OPTIONS11>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_D3D12_OPTIONS11);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.AtomicInt64OnDescriptorHeapResourceSupported !== undefined) view.setInt32(0, Number(data.AtomicInt64OnDescriptorHeapResourceSupported), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO (size: 16)
 */
export interface D3D12_RESOURCE_ALLOCATION_INFO {
  /** u64 */
  SizeInBytes: Deno.PointerValue;
  /** u64 */
  Alignment: Deno.PointerValue;
}

export const sizeofD3D12_RESOURCE_ALLOCATION_INFO = 16;

export function allocD3D12_RESOURCE_ALLOCATION_INFO(data?: Partial<D3D12_RESOURCE_ALLOCATION_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_ALLOCATION_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(0, BigInt(data.SizeInBytes), true);
  // 0x08: u64
  if (data?.Alignment !== undefined) view.setBigUint64(8, BigInt(data.Alignment), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_ALLOCATION_INFO1 (size: 24)
 */
export interface D3D12_RESOURCE_ALLOCATION_INFO1 {
  /** u64 */
  Offset: Deno.PointerValue;
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  SizeInBytes: Deno.PointerValue;
}

export const sizeofD3D12_RESOURCE_ALLOCATION_INFO1 = 24;

export function allocD3D12_RESOURCE_ALLOCATION_INFO1(data?: Partial<D3D12_RESOURCE_ALLOCATION_INFO1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_ALLOCATION_INFO1);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, BigInt(data.Offset), true);
  // 0x08: u64
  if (data?.Alignment !== undefined) view.setBigUint64(8, BigInt(data.Alignment), true);
  // 0x10: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(16, BigInt(data.SizeInBytes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES (size: 24)
 */
export interface D3D12_HEAP_PROPERTIES {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_HEAP_TYPE */
  Type: D3D12_HEAP_TYPE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CPU_PAGE_PROPERTY */
  CPUPageProperty: D3D12_CPU_PAGE_PROPERTY;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MEMORY_POOL */
  MemoryPoolPreference: D3D12_MEMORY_POOL;
  /** u32 */
  CreationNodeMask: number;
  /** u32 */
  VisibleNodeMask: number;
}

export const sizeofD3D12_HEAP_PROPERTIES = 24;

export function allocD3D12_HEAP_PROPERTIES(data?: Partial<D3D12_HEAP_PROPERTIES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_HEAP_PROPERTIES);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: i32
  if (data?.CPUPageProperty !== undefined) view.setInt32(4, Number(data.CPUPageProperty), true);
  // 0x08: i32
  if (data?.MemoryPoolPreference !== undefined) view.setInt32(8, Number(data.MemoryPoolPreference), true);
  // 0x0c: u32
  if (data?.CreationNodeMask !== undefined) view.setUint32(12, Number(data.CreationNodeMask), true);
  // 0x10: u32
  if (data?.VisibleNodeMask !== undefined) view.setUint32(16, Number(data.VisibleNodeMask), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_HEAP_DESC (size: 32)
 */
export interface D3D12_HEAP_DESC {
  /** u64 */
  SizeInBytes: Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_HEAP_PROPERTIES */
  Properties: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  Alignment: Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_HEAP_FLAGS */
  Flags: D3D12_HEAP_FLAGS;
}

export const sizeofD3D12_HEAP_DESC = 32;

export function allocD3D12_HEAP_DESC(data?: Partial<D3D12_HEAP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_HEAP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(0, BigInt(data.SizeInBytes), true);
  // 0x08: pointer
  if (data?.Properties !== undefined) view.setBigUint64(8, data.Properties === null ? 0n : BigInt(util.toPointer(data.Properties)), true);
  // 0x10: u64
  if (data?.Alignment !== undefined) view.setBigUint64(16, BigInt(data.Alignment), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_MIP_REGION (size: 16)
 */
export interface D3D12_MIP_REGION {
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
}

export const sizeofD3D12_MIP_REGION = 16;

export function allocD3D12_MIP_REGION(data?: Partial<D3D12_MIP_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_MIP_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Width !== undefined) view.setUint32(0, Number(data.Width), true);
  // 0x04: u32
  if (data?.Height !== undefined) view.setUint32(4, Number(data.Height), true);
  // 0x08: u32
  if (data?.Depth !== undefined) view.setUint32(8, Number(data.Depth), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC (size: 56)
 */
export interface D3D12_RESOURCE_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_DIMENSION */
  Dimension: D3D12_RESOURCE_DIMENSION;
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Width: Deno.PointerValue;
  /** u32 */
  Height: number;
  /** u16 */
  DepthOrArraySize: number;
  /** u16 */
  MipLevels: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_LAYOUT */
  Layout: D3D12_TEXTURE_LAYOUT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_FLAGS */
  Flags: D3D12_RESOURCE_FLAGS;
}

export const sizeofD3D12_RESOURCE_DESC = 56;

export function allocD3D12_RESOURCE_DESC(data?: Partial<D3D12_RESOURCE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Dimension !== undefined) view.setInt32(0, Number(data.Dimension), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Alignment !== undefined) view.setBigUint64(8, BigInt(data.Alignment), true);
  // 0x10: u64
  if (data?.Width !== undefined) view.setBigUint64(16, BigInt(data.Width), true);
  // 0x18: u32
  if (data?.Height !== undefined) view.setUint32(24, Number(data.Height), true);
  // 0x1c: u16
  if (data?.DepthOrArraySize !== undefined) view.setUint16(28, Number(data.DepthOrArraySize), true);
  // 0x1e: u16
  if (data?.MipLevels !== undefined) view.setUint16(30, Number(data.MipLevels), true);
  // 0x20: u32
  if (data?.Format !== undefined) view.setUint32(32, Number(data.Format), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(40, data.SampleDesc === null ? 0n : BigInt(util.toPointer(data.SampleDesc)), true);
  // 0x30: i32
  if (data?.Layout !== undefined) view.setInt32(48, Number(data.Layout), true);
  // 0x34: u32
  if (data?.Flags !== undefined) view.setUint32(52, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_DESC1 (size: 64)
 */
export interface D3D12_RESOURCE_DESC1 {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_DIMENSION */
  Dimension: D3D12_RESOURCE_DIMENSION;
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Width: Deno.PointerValue;
  /** u32 */
  Height: number;
  /** u16 */
  DepthOrArraySize: number;
  /** u16 */
  MipLevels: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_SAMPLE_DESC */
  SampleDesc: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_LAYOUT */
  Layout: D3D12_TEXTURE_LAYOUT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_FLAGS */
  Flags: D3D12_RESOURCE_FLAGS;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MIP_REGION */
  SamplerFeedbackMipRegion: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RESOURCE_DESC1 = 64;

export function allocD3D12_RESOURCE_DESC1(data?: Partial<D3D12_RESOURCE_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Dimension !== undefined) view.setInt32(0, Number(data.Dimension), true);
  // 0x04: pad4
  // 0x08: u64
  if (data?.Alignment !== undefined) view.setBigUint64(8, BigInt(data.Alignment), true);
  // 0x10: u64
  if (data?.Width !== undefined) view.setBigUint64(16, BigInt(data.Width), true);
  // 0x18: u32
  if (data?.Height !== undefined) view.setUint32(24, Number(data.Height), true);
  // 0x1c: u16
  if (data?.DepthOrArraySize !== undefined) view.setUint16(28, Number(data.DepthOrArraySize), true);
  // 0x1e: u16
  if (data?.MipLevels !== undefined) view.setUint16(30, Number(data.MipLevels), true);
  // 0x20: u32
  if (data?.Format !== undefined) view.setUint32(32, Number(data.Format), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.SampleDesc !== undefined) view.setBigUint64(40, data.SampleDesc === null ? 0n : BigInt(util.toPointer(data.SampleDesc)), true);
  // 0x30: i32
  if (data?.Layout !== undefined) view.setInt32(48, Number(data.Layout), true);
  // 0x34: u32
  if (data?.Flags !== undefined) view.setUint32(52, Number(data.Flags), true);
  // 0x38: pointer
  if (data?.SamplerFeedbackMipRegion !== undefined) view.setBigUint64(56, data.SamplerFeedbackMipRegion === null ? 0n : BigInt(util.toPointer(data.SamplerFeedbackMipRegion)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VALUE (size: 8)
 */
export interface D3D12_DEPTH_STENCIL_VALUE {
  /** f32 */
  Depth: number;
  /** u8 */
  Stencil: number;
}

export const sizeofD3D12_DEPTH_STENCIL_VALUE = 8;

export function allocD3D12_DEPTH_STENCIL_VALUE(data?: Partial<D3D12_DEPTH_STENCIL_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEPTH_STENCIL_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.Depth !== undefined) view.setFloat32(0, Number(data.Depth), true);
  // 0x04: u8
  if (data?.Stencil !== undefined) view.setUint8(4, Number(data.Stencil));
  // 0x05: pad3
  return buf;
}

/**
 * _Anonymous_e__Struct (size: 16)
 */
export interface _Anonymous_e__Struct {
  /** u64 */
  Alignment: Deno.PointerValue;
  /** u64 */
  Region: Deno.PointerValue;
}

export const sizeof_Anonymous_e__Struct = 16;

export function alloc_Anonymous_e__Struct(data?: Partial<_Anonymous_e__Struct>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Struct);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Alignment !== undefined) view.setBigUint64(0, BigInt(data.Alignment), true);
  // 0x08: u64
  if (data?.Region !== undefined) view.setBigUint64(8, BigInt(data.Region), true);
  return buf;
}

/**
 * _Anonymous_e__Union (size: 16)
 */
export interface _Anonymous_e__Union {
  /** _Anonymous_e__Struct */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** array */
  X: Deno.PointerValue | null;
}

export const sizeof_Anonymous_e__Union = 16;

export function alloc_Anonymous_e__Union(data?: Partial<_Anonymous_e__Union>): Uint8Array {
  const buf = new Uint8Array(sizeof_Anonymous_e__Union);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(0, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x08: pointer
  if (data?.X !== undefined) view.setBigUint64(8, data.X === null ? 0n : BigInt(util.toPointer(data.X)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE (size: 16)
 */
export interface D3D12_CLEAR_VALUE {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_CLEAR_VALUE = 16;

export function allocD3D12_CLEAR_VALUE(data?: Partial<D3D12_CLEAR_VALUE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_CLEAR_VALUE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RANGE (size: 16)
 */
export interface D3D12_RANGE {
  /** usize */
  Begin: Deno.PointerValue;
  /** usize */
  End: Deno.PointerValue;
}

export const sizeofD3D12_RANGE = 16;

export function allocD3D12_RANGE(data?: Partial<D3D12_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.Begin !== undefined) view.setBigUint64(0, BigInt(data.Begin), true);
  // 0x08: usize
  if (data?.End !== undefined) view.setBigUint64(8, BigInt(data.End), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RANGE_UINT64 (size: 16)
 */
export interface D3D12_RANGE_UINT64 {
  /** u64 */
  Begin: Deno.PointerValue;
  /** u64 */
  End: Deno.PointerValue;
}

export const sizeofD3D12_RANGE_UINT64 = 16;

export function allocD3D12_RANGE_UINT64(data?: Partial<D3D12_RANGE_UINT64>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RANGE_UINT64);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Begin !== undefined) view.setBigUint64(0, BigInt(data.Begin), true);
  // 0x08: u64
  if (data?.End !== undefined) view.setBigUint64(8, BigInt(data.End), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_RANGE_UINT64 (size: 16)
 */
export interface D3D12_SUBRESOURCE_RANGE_UINT64 {
  /** u32 */
  Subresource: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RANGE_UINT64 */
  Range: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_SUBRESOURCE_RANGE_UINT64 = 16;

export function allocD3D12_SUBRESOURCE_RANGE_UINT64(data?: Partial<D3D12_SUBRESOURCE_RANGE_UINT64>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SUBRESOURCE_RANGE_UINT64);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Subresource !== undefined) view.setUint32(0, Number(data.Subresource), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Range !== undefined) view.setBigUint64(8, data.Range === null ? 0n : BigInt(util.toPointer(data.Range)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_INFO (size: 16)
 */
export interface D3D12_SUBRESOURCE_INFO {
  /** u64 */
  Offset: Deno.PointerValue;
  /** u32 */
  RowPitch: number;
  /** u32 */
  DepthPitch: number;
}

export const sizeofD3D12_SUBRESOURCE_INFO = 16;

export function allocD3D12_SUBRESOURCE_INFO(data?: Partial<D3D12_SUBRESOURCE_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SUBRESOURCE_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, BigInt(data.Offset), true);
  // 0x08: u32
  if (data?.RowPitch !== undefined) view.setUint32(8, Number(data.RowPitch), true);
  // 0x0c: u32
  if (data?.DepthPitch !== undefined) view.setUint32(12, Number(data.DepthPitch), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TILED_RESOURCE_COORDINATE (size: 16)
 */
export interface D3D12_TILED_RESOURCE_COORDINATE {
  /** u32 */
  X: number;
  /** u32 */
  Y: number;
  /** u32 */
  Z: number;
  /** u32 */
  Subresource: number;
}

export const sizeofD3D12_TILED_RESOURCE_COORDINATE = 16;

export function allocD3D12_TILED_RESOURCE_COORDINATE(data?: Partial<D3D12_TILED_RESOURCE_COORDINATE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TILED_RESOURCE_COORDINATE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.X !== undefined) view.setUint32(0, Number(data.X), true);
  // 0x04: u32
  if (data?.Y !== undefined) view.setUint32(4, Number(data.Y), true);
  // 0x08: u32
  if (data?.Z !== undefined) view.setUint32(8, Number(data.Z), true);
  // 0x0c: u32
  if (data?.Subresource !== undefined) view.setUint32(12, Number(data.Subresource), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TILE_REGION_SIZE (size: 16)
 */
export interface D3D12_TILE_REGION_SIZE {
  /** u32 */
  NumTiles: number;
  /** Windows.Win32.Foundation.BOOL */
  UseBox: boolean;
  /** u32 */
  Width: number;
  /** u16 */
  Height: number;
  /** u16 */
  Depth: number;
}

export const sizeofD3D12_TILE_REGION_SIZE = 16;

export function allocD3D12_TILE_REGION_SIZE(data?: Partial<D3D12_TILE_REGION_SIZE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TILE_REGION_SIZE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumTiles !== undefined) view.setUint32(0, Number(data.NumTiles), true);
  // 0x04: i32
  if (data?.UseBox !== undefined) view.setInt32(4, Number(data.UseBox), true);
  // 0x08: u32
  if (data?.Width !== undefined) view.setUint32(8, Number(data.Width), true);
  // 0x0c: u16
  if (data?.Height !== undefined) view.setUint16(12, Number(data.Height), true);
  // 0x0e: u16
  if (data?.Depth !== undefined) view.setUint16(14, Number(data.Depth), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_TILING (size: 16)
 */
export interface D3D12_SUBRESOURCE_TILING {
  /** u32 */
  WidthInTiles: number;
  /** u16 */
  HeightInTiles: number;
  /** u16 */
  DepthInTiles: number;
  /** u32 */
  StartTileIndexInOverallResource: number;
}

export const sizeofD3D12_SUBRESOURCE_TILING = 16;

export function allocD3D12_SUBRESOURCE_TILING(data?: Partial<D3D12_SUBRESOURCE_TILING>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SUBRESOURCE_TILING);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WidthInTiles !== undefined) view.setUint32(0, Number(data.WidthInTiles), true);
  // 0x04: u16
  if (data?.HeightInTiles !== undefined) view.setUint16(4, Number(data.HeightInTiles), true);
  // 0x06: u16
  if (data?.DepthInTiles !== undefined) view.setUint16(6, Number(data.DepthInTiles), true);
  // 0x08: u32
  if (data?.StartTileIndexInOverallResource !== undefined) view.setUint32(8, Number(data.StartTileIndexInOverallResource), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TILE_SHAPE (size: 16)
 */
export interface D3D12_TILE_SHAPE {
  /** u32 */
  WidthInTexels: number;
  /** u32 */
  HeightInTexels: number;
  /** u32 */
  DepthInTexels: number;
}

export const sizeofD3D12_TILE_SHAPE = 16;

export function allocD3D12_TILE_SHAPE(data?: Partial<D3D12_TILE_SHAPE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TILE_SHAPE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.WidthInTexels !== undefined) view.setUint32(0, Number(data.WidthInTexels), true);
  // 0x04: u32
  if (data?.HeightInTexels !== undefined) view.setUint32(4, Number(data.HeightInTexels), true);
  // 0x08: u32
  if (data?.DepthInTexels !== undefined) view.setUint32(8, Number(data.DepthInTexels), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_PACKED_MIP_INFO (size: 16)
 */
export interface D3D12_PACKED_MIP_INFO {
  /** u8 */
  NumStandardMips: number;
  /** u8 */
  NumPackedMips: number;
  /** u32 */
  NumTilesForPackedMips: number;
  /** u32 */
  StartTileIndexInOverallResource: number;
}

export const sizeofD3D12_PACKED_MIP_INFO = 16;

export function allocD3D12_PACKED_MIP_INFO(data?: Partial<D3D12_PACKED_MIP_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_PACKED_MIP_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u8
  if (data?.NumStandardMips !== undefined) view.setUint8(0, Number(data.NumStandardMips));
  // 0x01: u8
  if (data?.NumPackedMips !== undefined) view.setUint8(1, Number(data.NumPackedMips));
  // 0x02: u32
  if (data?.NumTilesForPackedMips !== undefined) view.setUint32(2, Number(data.NumTilesForPackedMips), true);
  // 0x06: u32
  if (data?.StartTileIndexInOverallResource !== undefined) view.setUint32(6, Number(data.StartTileIndexInOverallResource), true);
  // 0x0a: pad6
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_TRANSITION_BARRIER (size: 24)
 */
export interface D3D12_RESOURCE_TRANSITION_BARRIER {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pResource: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Subresource: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES */
  StateBefore: D3D12_RESOURCE_STATES;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES */
  StateAfter: D3D12_RESOURCE_STATES;
}

export const sizeofD3D12_RESOURCE_TRANSITION_BARRIER = 24;

export function allocD3D12_RESOURCE_TRANSITION_BARRIER(data?: Partial<D3D12_RESOURCE_TRANSITION_BARRIER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_TRANSITION_BARRIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pResource !== undefined) view.setBigUint64(0, data.pResource === null ? 0n : BigInt(util.toPointer(data.pResource)), true);
  // 0x08: u32
  if (data?.Subresource !== undefined) view.setUint32(8, Number(data.Subresource), true);
  // 0x0c: u32
  if (data?.StateBefore !== undefined) view.setUint32(12, Number(data.StateBefore), true);
  // 0x10: u32
  if (data?.StateAfter !== undefined) view.setUint32(16, Number(data.StateAfter), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_ALIASING_BARRIER (size: 16)
 */
export interface D3D12_RESOURCE_ALIASING_BARRIER {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pResourceBefore: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pResourceAfter: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RESOURCE_ALIASING_BARRIER = 16;

export function allocD3D12_RESOURCE_ALIASING_BARRIER(data?: Partial<D3D12_RESOURCE_ALIASING_BARRIER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_ALIASING_BARRIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pResourceBefore !== undefined) view.setBigUint64(0, data.pResourceBefore === null ? 0n : BigInt(util.toPointer(data.pResourceBefore)), true);
  // 0x08: pointer
  if (data?.pResourceAfter !== undefined) view.setBigUint64(8, data.pResourceAfter === null ? 0n : BigInt(util.toPointer(data.pResourceAfter)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_UAV_BARRIER (size: 8)
 */
export interface D3D12_RESOURCE_UAV_BARRIER {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pResource: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RESOURCE_UAV_BARRIER = 8;

export function allocD3D12_RESOURCE_UAV_BARRIER(data?: Partial<D3D12_RESOURCE_UAV_BARRIER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_UAV_BARRIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pResource !== undefined) view.setBigUint64(0, data.pResource === null ? 0n : BigInt(util.toPointer(data.pResource)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER (size: 16)
 */
export interface D3D12_RESOURCE_BARRIER {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER_TYPE */
  Type: D3D12_RESOURCE_BARRIER_TYPE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_BARRIER_FLAGS */
  Flags: D3D12_RESOURCE_BARRIER_FLAGS;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RESOURCE_BARRIER = 16;

export function allocD3D12_RESOURCE_BARRIER(data?: Partial<D3D12_RESOURCE_BARRIER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RESOURCE_BARRIER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_FOOTPRINT (size: 24)
 */
export interface D3D12_SUBRESOURCE_FOOTPRINT {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
  /** u32 */
  RowPitch: number;
}

export const sizeofD3D12_SUBRESOURCE_FOOTPRINT = 24;

export function allocD3D12_SUBRESOURCE_FOOTPRINT(data?: Partial<D3D12_SUBRESOURCE_FOOTPRINT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SUBRESOURCE_FOOTPRINT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: u32
  if (data?.Width !== undefined) view.setUint32(4, Number(data.Width), true);
  // 0x08: u32
  if (data?.Height !== undefined) view.setUint32(8, Number(data.Height), true);
  // 0x0c: u32
  if (data?.Depth !== undefined) view.setUint32(12, Number(data.Depth), true);
  // 0x10: u32
  if (data?.RowPitch !== undefined) view.setUint32(16, Number(data.RowPitch), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_PLACED_SUBRESOURCE_FOOTPRINT (size: 16)
 */
export interface D3D12_PLACED_SUBRESOURCE_FOOTPRINT {
  /** u64 */
  Offset: Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_FOOTPRINT */
  Footprint: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_PLACED_SUBRESOURCE_FOOTPRINT = 16;

export function allocD3D12_PLACED_SUBRESOURCE_FOOTPRINT(data?: Partial<D3D12_PLACED_SUBRESOURCE_FOOTPRINT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_PLACED_SUBRESOURCE_FOOTPRINT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Offset !== undefined) view.setBigUint64(0, BigInt(data.Offset), true);
  // 0x08: pointer
  if (data?.Footprint !== undefined) view.setBigUint64(8, data.Footprint === null ? 0n : BigInt(util.toPointer(data.Footprint)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_LOCATION (size: 24)
 */
export interface D3D12_TEXTURE_COPY_LOCATION {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pResource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_COPY_TYPE */
  Type: D3D12_TEXTURE_COPY_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_TEXTURE_COPY_LOCATION = 24;

export function allocD3D12_TEXTURE_COPY_LOCATION(data?: Partial<D3D12_TEXTURE_COPY_LOCATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEXTURE_COPY_LOCATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pResource !== undefined) view.setBigUint64(0, data.pResource === null ? 0n : BigInt(util.toPointer(data.pResource)), true);
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SAMPLE_POSITION (size: 8)
 */
export interface D3D12_SAMPLE_POSITION {
  /** i8 */
  X: number;
  /** i8 */
  Y: number;
}

export const sizeofD3D12_SAMPLE_POSITION = 8;

export function allocD3D12_SAMPLE_POSITION(data?: Partial<D3D12_SAMPLE_POSITION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SAMPLE_POSITION);
  const view = new DataView(buf.buffer);
  // 0x00: i8
  if (data?.X !== undefined) view.setInt8(0, Number(data.X));
  // 0x01: i8
  if (data?.Y !== undefined) view.setInt8(1, Number(data.Y));
  // 0x02: pad6
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_VIEW_INSTANCE_LOCATION (size: 8)
 */
export interface D3D12_VIEW_INSTANCE_LOCATION {
  /** u32 */
  ViewportArrayIndex: number;
  /** u32 */
  RenderTargetArrayIndex: number;
}

export const sizeofD3D12_VIEW_INSTANCE_LOCATION = 8;

export function allocD3D12_VIEW_INSTANCE_LOCATION(data?: Partial<D3D12_VIEW_INSTANCE_LOCATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIEW_INSTANCE_LOCATION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ViewportArrayIndex !== undefined) view.setUint32(0, Number(data.ViewportArrayIndex), true);
  // 0x04: u32
  if (data?.RenderTargetArrayIndex !== undefined) view.setUint32(4, Number(data.RenderTargetArrayIndex), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_VIEW_INSTANCING_DESC (size: 24)
 */
export interface D3D12_VIEW_INSTANCING_DESC {
  /** u32 */
  ViewInstanceCount: number;
  /** ptr */
  pViewInstanceLocations: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_VIEW_INSTANCING_FLAGS */
  Flags: D3D12_VIEW_INSTANCING_FLAGS;
}

export const sizeofD3D12_VIEW_INSTANCING_DESC = 24;

export function allocD3D12_VIEW_INSTANCING_DESC(data?: Partial<D3D12_VIEW_INSTANCING_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VIEW_INSTANCING_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ViewInstanceCount !== undefined) view.setUint32(0, Number(data.ViewInstanceCount), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pViewInstanceLocations !== undefined) view.setBigUint64(8, data.pViewInstanceLocations === null ? 0n : BigInt(util.toPointer(data.pViewInstanceLocations)), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BUFFER_SRV (size: 24)
 */
export interface D3D12_BUFFER_SRV {
  /** u64 */
  FirstElement: Deno.PointerValue;
  /** u32 */
  NumElements: number;
  /** u32 */
  StructureByteStride: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BUFFER_SRV_FLAGS */
  Flags: D3D12_BUFFER_SRV_FLAGS;
}

export const sizeofD3D12_BUFFER_SRV = 24;

export function allocD3D12_BUFFER_SRV(data?: Partial<D3D12_BUFFER_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BUFFER_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.FirstElement !== undefined) view.setBigUint64(0, BigInt(data.FirstElement), true);
  // 0x08: u32
  if (data?.NumElements !== undefined) view.setUint32(8, Number(data.NumElements), true);
  // 0x0c: u32
  if (data?.StructureByteStride !== undefined) view.setUint32(12, Number(data.StructureByteStride), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_SRV (size: 16)
 */
export interface D3D12_TEX1D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEX1D_SRV = 16;

export function allocD3D12_TEX1D_SRV(data?: Partial<D3D12_TEX1D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(8, Number(data.ResourceMinLODClamp), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_ARRAY_SRV (size: 24)
 */
export interface D3D12_TEX1D_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEX1D_ARRAY_SRV = 24;

export function allocD3D12_TEX1D_ARRAY_SRV(data?: Partial<D3D12_TEX1D_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  // 0x10: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(16, Number(data.ResourceMinLODClamp), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_SRV (size: 16)
 */
export interface D3D12_TEX2D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  PlaneSlice: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEX2D_SRV = 16;

export function allocD3D12_TEX2D_SRV(data?: Partial<D3D12_TEX2D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(8, Number(data.PlaneSlice), true);
  // 0x0c: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(12, Number(data.ResourceMinLODClamp), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_ARRAY_SRV (size: 24)
 */
export interface D3D12_TEX2D_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** u32 */
  PlaneSlice: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEX2D_ARRAY_SRV = 24;

export function allocD3D12_TEX2D_ARRAY_SRV(data?: Partial<D3D12_TEX2D_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(8, Number(data.FirstArraySlice), true);
  // 0x0c: u32
  if (data?.ArraySize !== undefined) view.setUint32(12, Number(data.ArraySize), true);
  // 0x10: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(16, Number(data.PlaneSlice), true);
  // 0x14: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(20, Number(data.ResourceMinLODClamp), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX3D_SRV (size: 16)
 */
export interface D3D12_TEX3D_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEX3D_SRV = 16;

export function allocD3D12_TEX3D_SRV(data?: Partial<D3D12_TEX3D_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX3D_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(8, Number(data.ResourceMinLODClamp), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEXCUBE_SRV (size: 16)
 */
export interface D3D12_TEXCUBE_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEXCUBE_SRV = 16;

export function allocD3D12_TEXCUBE_SRV(data?: Partial<D3D12_TEXCUBE_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEXCUBE_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(8, Number(data.ResourceMinLODClamp), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEXCUBE_ARRAY_SRV (size: 24)
 */
export interface D3D12_TEXCUBE_ARRAY_SRV {
  /** u32 */
  MostDetailedMip: number;
  /** u32 */
  MipLevels: number;
  /** u32 */
  First2DArrayFace: number;
  /** u32 */
  NumCubes: number;
  /** f32 */
  ResourceMinLODClamp: number;
}

export const sizeofD3D12_TEXCUBE_ARRAY_SRV = 24;

export function allocD3D12_TEXCUBE_ARRAY_SRV(data?: Partial<D3D12_TEXCUBE_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEXCUBE_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MostDetailedMip !== undefined) view.setUint32(0, Number(data.MostDetailedMip), true);
  // 0x04: u32
  if (data?.MipLevels !== undefined) view.setUint32(4, Number(data.MipLevels), true);
  // 0x08: u32
  if (data?.First2DArrayFace !== undefined) view.setUint32(8, Number(data.First2DArrayFace), true);
  // 0x0c: u32
  if (data?.NumCubes !== undefined) view.setUint32(12, Number(data.NumCubes), true);
  // 0x10: f32
  if (data?.ResourceMinLODClamp !== undefined) view.setFloat32(16, Number(data.ResourceMinLODClamp), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2DMS_SRV (size: 8)
 */
export interface D3D12_TEX2DMS_SRV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D12_TEX2DMS_SRV = 8;

export function allocD3D12_TEX2DMS_SRV(data?: Partial<D3D12_TEX2DMS_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2DMS_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2DMS_ARRAY_SRV (size: 8)
 */
export interface D3D12_TEX2DMS_ARRAY_SRV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX2DMS_ARRAY_SRV = 8;

export function allocD3D12_TEX2DMS_ARRAY_SRV(data?: Partial<D3D12_TEX2DMS_ARRAY_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2DMS_ARRAY_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV (size: 8)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV {
  /** u64 */
  Location: Deno.PointerValue;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV = 8;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Location !== undefined) view.setBigUint64(0, BigInt(data.Location), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_RESOURCE_VIEW_DESC (size: 24)
 */
export interface D3D12_SHADER_RESOURCE_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SRV_DIMENSION */
  ViewDimension: D3D12_SRV_DIMENSION;
  /** u32 */
  Shader4ComponentMapping: number;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_SHADER_RESOURCE_VIEW_DESC = 24;

export function allocD3D12_SHADER_RESOURCE_VIEW_DESC(data?: Partial<D3D12_SHADER_RESOURCE_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_RESOURCE_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: u32
  if (data?.Shader4ComponentMapping !== undefined) view.setUint32(8, Number(data.Shader4ComponentMapping), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_CONSTANT_BUFFER_VIEW_DESC (size: 16)
 */
export interface D3D12_CONSTANT_BUFFER_VIEW_DESC {
  /** u64 */
  BufferLocation: Deno.PointerValue;
  /** u32 */
  SizeInBytes: number;
}

export const sizeofD3D12_CONSTANT_BUFFER_VIEW_DESC = 16;

export function allocD3D12_CONSTANT_BUFFER_VIEW_DESC(data?: Partial<D3D12_CONSTANT_BUFFER_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_CONSTANT_BUFFER_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BufferLocation !== undefined) view.setBigUint64(0, BigInt(data.BufferLocation), true);
  // 0x08: u32
  if (data?.SizeInBytes !== undefined) view.setUint32(8, Number(data.SizeInBytes), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SAMPLER_DESC (size: 48)
 */
export interface D3D12_SAMPLER_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_FILTER */
  Filter: D3D12_FILTER;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_ADDRESS_MODE */
  AddressU: D3D12_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_ADDRESS_MODE */
  AddressV: D3D12_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_ADDRESS_MODE */
  AddressW: D3D12_TEXTURE_ADDRESS_MODE;
  /** f32 */
  MipLODBias: number;
  /** u32 */
  MaxAnisotropy: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMPARISON_FUNC */
  ComparisonFunc: D3D12_COMPARISON_FUNC;
  /** array */
  BorderColor: Deno.PointerValue | null;
  /** f32 */
  MinLOD: number;
  /** f32 */
  MaxLOD: number;
}

export const sizeofD3D12_SAMPLER_DESC = 48;

export function allocD3D12_SAMPLER_DESC(data?: Partial<D3D12_SAMPLER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SAMPLER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Filter !== undefined) view.setInt32(0, Number(data.Filter), true);
  // 0x04: i32
  if (data?.AddressU !== undefined) view.setInt32(4, Number(data.AddressU), true);
  // 0x08: i32
  if (data?.AddressV !== undefined) view.setInt32(8, Number(data.AddressV), true);
  // 0x0c: i32
  if (data?.AddressW !== undefined) view.setInt32(12, Number(data.AddressW), true);
  // 0x10: f32
  if (data?.MipLODBias !== undefined) view.setFloat32(16, Number(data.MipLODBias), true);
  // 0x14: u32
  if (data?.MaxAnisotropy !== undefined) view.setUint32(20, Number(data.MaxAnisotropy), true);
  // 0x18: i32
  if (data?.ComparisonFunc !== undefined) view.setInt32(24, Number(data.ComparisonFunc), true);
  // 0x1c: pad4
  // 0x20: pointer
  if (data?.BorderColor !== undefined) view.setBigUint64(32, data.BorderColor === null ? 0n : BigInt(util.toPointer(data.BorderColor)), true);
  // 0x28: f32
  if (data?.MinLOD !== undefined) view.setFloat32(40, Number(data.MinLOD), true);
  // 0x2c: f32
  if (data?.MaxLOD !== undefined) view.setFloat32(44, Number(data.MaxLOD), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BUFFER_UAV (size: 32)
 */
export interface D3D12_BUFFER_UAV {
  /** u64 */
  FirstElement: Deno.PointerValue;
  /** u32 */
  NumElements: number;
  /** u32 */
  StructureByteStride: number;
  /** u64 */
  CounterOffsetInBytes: Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BUFFER_UAV_FLAGS */
  Flags: D3D12_BUFFER_UAV_FLAGS;
}

export const sizeofD3D12_BUFFER_UAV = 32;

export function allocD3D12_BUFFER_UAV(data?: Partial<D3D12_BUFFER_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BUFFER_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.FirstElement !== undefined) view.setBigUint64(0, BigInt(data.FirstElement), true);
  // 0x08: u32
  if (data?.NumElements !== undefined) view.setUint32(8, Number(data.NumElements), true);
  // 0x0c: u32
  if (data?.StructureByteStride !== undefined) view.setUint32(12, Number(data.StructureByteStride), true);
  // 0x10: u64
  if (data?.CounterOffsetInBytes !== undefined) view.setBigUint64(16, BigInt(data.CounterOffsetInBytes), true);
  // 0x18: u32
  if (data?.Flags !== undefined) view.setUint32(24, Number(data.Flags), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_UAV (size: 8)
 */
export interface D3D12_TEX1D_UAV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D12_TEX1D_UAV = 8;

export function allocD3D12_TEX1D_UAV(data?: Partial<D3D12_TEX1D_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_ARRAY_UAV (size: 16)
 */
export interface D3D12_TEX1D_ARRAY_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX1D_ARRAY_UAV = 16;

export function allocD3D12_TEX1D_ARRAY_UAV(data?: Partial<D3D12_TEX1D_ARRAY_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_ARRAY_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_UAV (size: 8)
 */
export interface D3D12_TEX2D_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D12_TEX2D_UAV = 8;

export function allocD3D12_TEX2D_UAV(data?: Partial<D3D12_TEX2D_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(4, Number(data.PlaneSlice), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_ARRAY_UAV (size: 16)
 */
export interface D3D12_TEX2D_ARRAY_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D12_TEX2D_ARRAY_UAV = 16;

export function allocD3D12_TEX2D_ARRAY_UAV(data?: Partial<D3D12_TEX2D_ARRAY_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_ARRAY_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(12, Number(data.PlaneSlice), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX3D_UAV (size: 16)
 */
export interface D3D12_TEX3D_UAV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstWSlice: number;
  /** u32 */
  WSize: number;
}

export const sizeofD3D12_TEX3D_UAV = 16;

export function allocD3D12_TEX3D_UAV(data?: Partial<D3D12_TEX3D_UAV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX3D_UAV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstWSlice !== undefined) view.setUint32(4, Number(data.FirstWSlice), true);
  // 0x08: u32
  if (data?.WSize !== undefined) view.setUint32(8, Number(data.WSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_UNORDERED_ACCESS_VIEW_DESC (size: 16)
 */
export interface D3D12_UNORDERED_ACCESS_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_UAV_DIMENSION */
  ViewDimension: D3D12_UAV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_UNORDERED_ACCESS_VIEW_DESC = 16;

export function allocD3D12_UNORDERED_ACCESS_VIEW_DESC(data?: Partial<D3D12_UNORDERED_ACCESS_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_UNORDERED_ACCESS_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BUFFER_RTV (size: 16)
 */
export interface D3D12_BUFFER_RTV {
  /** u64 */
  FirstElement: Deno.PointerValue;
  /** u32 */
  NumElements: number;
}

export const sizeofD3D12_BUFFER_RTV = 16;

export function allocD3D12_BUFFER_RTV(data?: Partial<D3D12_BUFFER_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BUFFER_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.FirstElement !== undefined) view.setBigUint64(0, BigInt(data.FirstElement), true);
  // 0x08: u32
  if (data?.NumElements !== undefined) view.setUint32(8, Number(data.NumElements), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_RTV (size: 8)
 */
export interface D3D12_TEX1D_RTV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D12_TEX1D_RTV = 8;

export function allocD3D12_TEX1D_RTV(data?: Partial<D3D12_TEX1D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_ARRAY_RTV (size: 16)
 */
export interface D3D12_TEX1D_ARRAY_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX1D_ARRAY_RTV = 16;

export function allocD3D12_TEX1D_ARRAY_RTV(data?: Partial<D3D12_TEX1D_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_RTV (size: 8)
 */
export interface D3D12_TEX2D_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D12_TEX2D_RTV = 8;

export function allocD3D12_TEX2D_RTV(data?: Partial<D3D12_TEX2D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(4, Number(data.PlaneSlice), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2DMS_RTV (size: 8)
 */
export interface D3D12_TEX2DMS_RTV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D12_TEX2DMS_RTV = 8;

export function allocD3D12_TEX2DMS_RTV(data?: Partial<D3D12_TEX2DMS_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2DMS_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_ARRAY_RTV (size: 16)
 */
export interface D3D12_TEX2D_ARRAY_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
  /** u32 */
  PlaneSlice: number;
}

export const sizeofD3D12_TEX2D_ARRAY_RTV = 16;

export function allocD3D12_TEX2D_ARRAY_RTV(data?: Partial<D3D12_TEX2D_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: u32
  if (data?.PlaneSlice !== undefined) view.setUint32(12, Number(data.PlaneSlice), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2DMS_ARRAY_RTV (size: 8)
 */
export interface D3D12_TEX2DMS_ARRAY_RTV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX2DMS_ARRAY_RTV = 8;

export function allocD3D12_TEX2DMS_ARRAY_RTV(data?: Partial<D3D12_TEX2DMS_ARRAY_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2DMS_ARRAY_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX3D_RTV (size: 16)
 */
export interface D3D12_TEX3D_RTV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstWSlice: number;
  /** u32 */
  WSize: number;
}

export const sizeofD3D12_TEX3D_RTV = 16;

export function allocD3D12_TEX3D_RTV(data?: Partial<D3D12_TEX3D_RTV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX3D_RTV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstWSlice !== undefined) view.setUint32(4, Number(data.FirstWSlice), true);
  // 0x08: u32
  if (data?.WSize !== undefined) view.setUint32(8, Number(data.WSize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_TARGET_VIEW_DESC (size: 16)
 */
export interface D3D12_RENDER_TARGET_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RTV_DIMENSION */
  ViewDimension: D3D12_RTV_DIMENSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_TARGET_VIEW_DESC = 16;

export function allocD3D12_RENDER_TARGET_VIEW_DESC(data?: Partial<D3D12_RENDER_TARGET_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_TARGET_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_DSV (size: 8)
 */
export interface D3D12_TEX1D_DSV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D12_TEX1D_DSV = 8;

export function allocD3D12_TEX1D_DSV(data?: Partial<D3D12_TEX1D_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX1D_ARRAY_DSV (size: 16)
 */
export interface D3D12_TEX1D_ARRAY_DSV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX1D_ARRAY_DSV = 16;

export function allocD3D12_TEX1D_ARRAY_DSV(data?: Partial<D3D12_TEX1D_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX1D_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_DSV (size: 8)
 */
export interface D3D12_TEX2D_DSV {
  /** u32 */
  MipSlice: number;
}

export const sizeofD3D12_TEX2D_DSV = 8;

export function allocD3D12_TEX2D_DSV(data?: Partial<D3D12_TEX2D_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2D_ARRAY_DSV (size: 16)
 */
export interface D3D12_TEX2D_ARRAY_DSV {
  /** u32 */
  MipSlice: number;
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX2D_ARRAY_DSV = 16;

export function allocD3D12_TEX2D_ARRAY_DSV(data?: Partial<D3D12_TEX2D_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2D_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MipSlice !== undefined) view.setUint32(0, Number(data.MipSlice), true);
  // 0x04: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(4, Number(data.FirstArraySlice), true);
  // 0x08: u32
  if (data?.ArraySize !== undefined) view.setUint32(8, Number(data.ArraySize), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2DMS_DSV (size: 8)
 */
export interface D3D12_TEX2DMS_DSV {
  /** u32 */
  UnusedField_NothingToDefine: number;
}

export const sizeofD3D12_TEX2DMS_DSV = 8;

export function allocD3D12_TEX2DMS_DSV(data?: Partial<D3D12_TEX2DMS_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2DMS_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.UnusedField_NothingToDefine !== undefined) view.setUint32(0, Number(data.UnusedField_NothingToDefine), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_TEX2DMS_ARRAY_DSV (size: 8)
 */
export interface D3D12_TEX2DMS_ARRAY_DSV {
  /** u32 */
  FirstArraySlice: number;
  /** u32 */
  ArraySize: number;
}

export const sizeofD3D12_TEX2DMS_ARRAY_DSV = 8;

export function allocD3D12_TEX2DMS_ARRAY_DSV(data?: Partial<D3D12_TEX2DMS_ARRAY_DSV>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_TEX2DMS_ARRAY_DSV);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.FirstArraySlice !== undefined) view.setUint32(0, Number(data.FirstArraySlice), true);
  // 0x04: u32
  if (data?.ArraySize !== undefined) view.setUint32(4, Number(data.ArraySize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEPTH_STENCIL_VIEW_DESC (size: 24)
 */
export interface D3D12_DEPTH_STENCIL_VIEW_DESC {
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DSV_DIMENSION */
  ViewDimension: D3D12_DSV_DIMENSION;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DSV_FLAGS */
  Flags: D3D12_DSV_FLAGS;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_DEPTH_STENCIL_VIEW_DESC = 24;

export function allocD3D12_DEPTH_STENCIL_VIEW_DESC(data?: Partial<D3D12_DEPTH_STENCIL_VIEW_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEPTH_STENCIL_VIEW_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Format !== undefined) view.setUint32(0, Number(data.Format), true);
  // 0x04: i32
  if (data?.ViewDimension !== undefined) view.setInt32(4, Number(data.ViewDimension), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_DESC (size: 16)
 */
export interface D3D12_DESCRIPTOR_HEAP_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_TYPE */
  Type: D3D12_DESCRIPTOR_HEAP_TYPE;
  /** u32 */
  NumDescriptors: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_HEAP_FLAGS */
  Flags: D3D12_DESCRIPTOR_HEAP_FLAGS;
  /** u32 */
  NodeMask: number;
}

export const sizeofD3D12_DESCRIPTOR_HEAP_DESC = 16;

export function allocD3D12_DESCRIPTOR_HEAP_DESC(data?: Partial<D3D12_DESCRIPTOR_HEAP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DESCRIPTOR_HEAP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.NumDescriptors !== undefined) view.setUint32(4, Number(data.NumDescriptors), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.NodeMask !== undefined) view.setUint32(12, Number(data.NodeMask), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_RANGE (size: 24)
 */
export interface D3D12_DESCRIPTOR_RANGE {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_RANGE_TYPE */
  RangeType: D3D12_DESCRIPTOR_RANGE_TYPE;
  /** u32 */
  NumDescriptors: number;
  /** u32 */
  BaseShaderRegister: number;
  /** u32 */
  RegisterSpace: number;
  /** u32 */
  OffsetInDescriptorsFromTableStart: number;
}

export const sizeofD3D12_DESCRIPTOR_RANGE = 24;

export function allocD3D12_DESCRIPTOR_RANGE(data?: Partial<D3D12_DESCRIPTOR_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DESCRIPTOR_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.RangeType !== undefined) view.setInt32(0, Number(data.RangeType), true);
  // 0x04: u32
  if (data?.NumDescriptors !== undefined) view.setUint32(4, Number(data.NumDescriptors), true);
  // 0x08: u32
  if (data?.BaseShaderRegister !== undefined) view.setUint32(8, Number(data.BaseShaderRegister), true);
  // 0x0c: u32
  if (data?.RegisterSpace !== undefined) view.setUint32(12, Number(data.RegisterSpace), true);
  // 0x10: u32
  if (data?.OffsetInDescriptorsFromTableStart !== undefined) view.setUint32(16, Number(data.OffsetInDescriptorsFromTableStart), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_DESCRIPTOR_TABLE (size: 16)
 */
export interface D3D12_ROOT_DESCRIPTOR_TABLE {
  /** u32 */
  NumDescriptorRanges: number;
  /** ptr */
  pDescriptorRanges: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_ROOT_DESCRIPTOR_TABLE = 16;

export function allocD3D12_ROOT_DESCRIPTOR_TABLE(data?: Partial<D3D12_ROOT_DESCRIPTOR_TABLE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_DESCRIPTOR_TABLE);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumDescriptorRanges !== undefined) view.setUint32(0, Number(data.NumDescriptorRanges), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pDescriptorRanges !== undefined) view.setBigUint64(8, data.pDescriptorRanges === null ? 0n : BigInt(util.toPointer(data.pDescriptorRanges)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_CONSTANTS (size: 16)
 */
export interface D3D12_ROOT_CONSTANTS {
  /** u32 */
  ShaderRegister: number;
  /** u32 */
  RegisterSpace: number;
  /** u32 */
  Num32BitValues: number;
}

export const sizeofD3D12_ROOT_CONSTANTS = 16;

export function allocD3D12_ROOT_CONSTANTS(data?: Partial<D3D12_ROOT_CONSTANTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_CONSTANTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ShaderRegister !== undefined) view.setUint32(0, Number(data.ShaderRegister), true);
  // 0x04: u32
  if (data?.RegisterSpace !== undefined) view.setUint32(4, Number(data.RegisterSpace), true);
  // 0x08: u32
  if (data?.Num32BitValues !== undefined) view.setUint32(8, Number(data.Num32BitValues), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_DESCRIPTOR (size: 8)
 */
export interface D3D12_ROOT_DESCRIPTOR {
  /** u32 */
  ShaderRegister: number;
  /** u32 */
  RegisterSpace: number;
}

export const sizeofD3D12_ROOT_DESCRIPTOR = 8;

export function allocD3D12_ROOT_DESCRIPTOR(data?: Partial<D3D12_ROOT_DESCRIPTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_DESCRIPTOR);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ShaderRegister !== undefined) view.setUint32(0, Number(data.ShaderRegister), true);
  // 0x04: u32
  if (data?.RegisterSpace !== undefined) view.setUint32(4, Number(data.RegisterSpace), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_PARAMETER (size: 24)
 */
export interface D3D12_ROOT_PARAMETER {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_PARAMETER_TYPE */
  ParameterType: D3D12_ROOT_PARAMETER_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_VISIBILITY */
  ShaderVisibility: D3D12_SHADER_VISIBILITY;
}

export const sizeofD3D12_ROOT_PARAMETER = 24;

export function allocD3D12_ROOT_PARAMETER(data?: Partial<D3D12_ROOT_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ParameterType !== undefined) view.setInt32(0, Number(data.ParameterType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: i32
  if (data?.ShaderVisibility !== undefined) view.setInt32(16, Number(data.ShaderVisibility), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_STATIC_SAMPLER_DESC (size: 56)
 */
export interface D3D12_STATIC_SAMPLER_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_FILTER */
  Filter: D3D12_FILTER;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_ADDRESS_MODE */
  AddressU: D3D12_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_ADDRESS_MODE */
  AddressV: D3D12_TEXTURE_ADDRESS_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_TEXTURE_ADDRESS_MODE */
  AddressW: D3D12_TEXTURE_ADDRESS_MODE;
  /** f32 */
  MipLODBias: number;
  /** u32 */
  MaxAnisotropy: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_COMPARISON_FUNC */
  ComparisonFunc: D3D12_COMPARISON_FUNC;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STATIC_BORDER_COLOR */
  BorderColor: D3D12_STATIC_BORDER_COLOR;
  /** f32 */
  MinLOD: number;
  /** f32 */
  MaxLOD: number;
  /** u32 */
  ShaderRegister: number;
  /** u32 */
  RegisterSpace: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_VISIBILITY */
  ShaderVisibility: D3D12_SHADER_VISIBILITY;
}

export const sizeofD3D12_STATIC_SAMPLER_DESC = 56;

export function allocD3D12_STATIC_SAMPLER_DESC(data?: Partial<D3D12_STATIC_SAMPLER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_STATIC_SAMPLER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Filter !== undefined) view.setInt32(0, Number(data.Filter), true);
  // 0x04: i32
  if (data?.AddressU !== undefined) view.setInt32(4, Number(data.AddressU), true);
  // 0x08: i32
  if (data?.AddressV !== undefined) view.setInt32(8, Number(data.AddressV), true);
  // 0x0c: i32
  if (data?.AddressW !== undefined) view.setInt32(12, Number(data.AddressW), true);
  // 0x10: f32
  if (data?.MipLODBias !== undefined) view.setFloat32(16, Number(data.MipLODBias), true);
  // 0x14: u32
  if (data?.MaxAnisotropy !== undefined) view.setUint32(20, Number(data.MaxAnisotropy), true);
  // 0x18: i32
  if (data?.ComparisonFunc !== undefined) view.setInt32(24, Number(data.ComparisonFunc), true);
  // 0x1c: i32
  if (data?.BorderColor !== undefined) view.setInt32(28, Number(data.BorderColor), true);
  // 0x20: f32
  if (data?.MinLOD !== undefined) view.setFloat32(32, Number(data.MinLOD), true);
  // 0x24: f32
  if (data?.MaxLOD !== undefined) view.setFloat32(36, Number(data.MaxLOD), true);
  // 0x28: u32
  if (data?.ShaderRegister !== undefined) view.setUint32(40, Number(data.ShaderRegister), true);
  // 0x2c: u32
  if (data?.RegisterSpace !== undefined) view.setUint32(44, Number(data.RegisterSpace), true);
  // 0x30: i32
  if (data?.ShaderVisibility !== undefined) view.setInt32(48, Number(data.ShaderVisibility), true);
  // 0x34: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_SIGNATURE_DESC (size: 40)
 */
export interface D3D12_ROOT_SIGNATURE_DESC {
  /** u32 */
  NumParameters: number;
  /** ptr */
  pParameters: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumStaticSamplers: number;
  /** ptr */
  pStaticSamplers: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_SIGNATURE_FLAGS */
  Flags: D3D12_ROOT_SIGNATURE_FLAGS;
}

export const sizeofD3D12_ROOT_SIGNATURE_DESC = 40;

export function allocD3D12_ROOT_SIGNATURE_DESC(data?: Partial<D3D12_ROOT_SIGNATURE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_SIGNATURE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumParameters !== undefined) view.setUint32(0, Number(data.NumParameters), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pParameters !== undefined) view.setBigUint64(8, data.pParameters === null ? 0n : BigInt(util.toPointer(data.pParameters)), true);
  // 0x10: u32
  if (data?.NumStaticSamplers !== undefined) view.setUint32(16, Number(data.NumStaticSamplers), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pStaticSamplers !== undefined) view.setBigUint64(24, data.pStaticSamplers === null ? 0n : BigInt(util.toPointer(data.pStaticSamplers)), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_RANGE1 (size: 24)
 */
export interface D3D12_DESCRIPTOR_RANGE1 {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_RANGE_TYPE */
  RangeType: D3D12_DESCRIPTOR_RANGE_TYPE;
  /** u32 */
  NumDescriptors: number;
  /** u32 */
  BaseShaderRegister: number;
  /** u32 */
  RegisterSpace: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DESCRIPTOR_RANGE_FLAGS */
  Flags: D3D12_DESCRIPTOR_RANGE_FLAGS;
  /** u32 */
  OffsetInDescriptorsFromTableStart: number;
}

export const sizeofD3D12_DESCRIPTOR_RANGE1 = 24;

export function allocD3D12_DESCRIPTOR_RANGE1(data?: Partial<D3D12_DESCRIPTOR_RANGE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DESCRIPTOR_RANGE1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.RangeType !== undefined) view.setInt32(0, Number(data.RangeType), true);
  // 0x04: u32
  if (data?.NumDescriptors !== undefined) view.setUint32(4, Number(data.NumDescriptors), true);
  // 0x08: u32
  if (data?.BaseShaderRegister !== undefined) view.setUint32(8, Number(data.BaseShaderRegister), true);
  // 0x0c: u32
  if (data?.RegisterSpace !== undefined) view.setUint32(12, Number(data.RegisterSpace), true);
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.OffsetInDescriptorsFromTableStart !== undefined) view.setUint32(20, Number(data.OffsetInDescriptorsFromTableStart), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_DESCRIPTOR_TABLE1 (size: 16)
 */
export interface D3D12_ROOT_DESCRIPTOR_TABLE1 {
  /** u32 */
  NumDescriptorRanges: number;
  /** ptr */
  pDescriptorRanges: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_ROOT_DESCRIPTOR_TABLE1 = 16;

export function allocD3D12_ROOT_DESCRIPTOR_TABLE1(data?: Partial<D3D12_ROOT_DESCRIPTOR_TABLE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_DESCRIPTOR_TABLE1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumDescriptorRanges !== undefined) view.setUint32(0, Number(data.NumDescriptorRanges), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pDescriptorRanges !== undefined) view.setBigUint64(8, data.pDescriptorRanges === null ? 0n : BigInt(util.toPointer(data.pDescriptorRanges)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_DESCRIPTOR1 (size: 16)
 */
export interface D3D12_ROOT_DESCRIPTOR1 {
  /** u32 */
  ShaderRegister: number;
  /** u32 */
  RegisterSpace: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_DESCRIPTOR_FLAGS */
  Flags: D3D12_ROOT_DESCRIPTOR_FLAGS;
}

export const sizeofD3D12_ROOT_DESCRIPTOR1 = 16;

export function allocD3D12_ROOT_DESCRIPTOR1(data?: Partial<D3D12_ROOT_DESCRIPTOR1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_DESCRIPTOR1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ShaderRegister !== undefined) view.setUint32(0, Number(data.ShaderRegister), true);
  // 0x04: u32
  if (data?.RegisterSpace !== undefined) view.setUint32(4, Number(data.RegisterSpace), true);
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_PARAMETER1 (size: 24)
 */
export interface D3D12_ROOT_PARAMETER1 {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_PARAMETER_TYPE */
  ParameterType: D3D12_ROOT_PARAMETER_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_VISIBILITY */
  ShaderVisibility: D3D12_SHADER_VISIBILITY;
}

export const sizeofD3D12_ROOT_PARAMETER1 = 24;

export function allocD3D12_ROOT_PARAMETER1(data?: Partial<D3D12_ROOT_PARAMETER1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_PARAMETER1);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ParameterType !== undefined) view.setInt32(0, Number(data.ParameterType), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  // 0x10: i32
  if (data?.ShaderVisibility !== undefined) view.setInt32(16, Number(data.ShaderVisibility), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_SIGNATURE_DESC1 (size: 40)
 */
export interface D3D12_ROOT_SIGNATURE_DESC1 {
  /** u32 */
  NumParameters: number;
  /** ptr */
  pParameters: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumStaticSamplers: number;
  /** ptr */
  pStaticSamplers: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_ROOT_SIGNATURE_FLAGS */
  Flags: D3D12_ROOT_SIGNATURE_FLAGS;
}

export const sizeofD3D12_ROOT_SIGNATURE_DESC1 = 40;

export function allocD3D12_ROOT_SIGNATURE_DESC1(data?: Partial<D3D12_ROOT_SIGNATURE_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_ROOT_SIGNATURE_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumParameters !== undefined) view.setUint32(0, Number(data.NumParameters), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pParameters !== undefined) view.setBigUint64(8, data.pParameters === null ? 0n : BigInt(util.toPointer(data.pParameters)), true);
  // 0x10: u32
  if (data?.NumStaticSamplers !== undefined) view.setUint32(16, Number(data.NumStaticSamplers), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pStaticSamplers !== undefined) view.setBigUint64(24, data.pStaticSamplers === null ? 0n : BigInt(util.toPointer(data.pStaticSamplers)), true);
  // 0x20: u32
  if (data?.Flags !== undefined) view.setUint32(32, Number(data.Flags), true);
  // 0x24: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_VERSIONED_ROOT_SIGNATURE_DESC (size: 16)
 */
export interface D3D12_VERSIONED_ROOT_SIGNATURE_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D_ROOT_SIGNATURE_VERSION */
  Version: D3D_ROOT_SIGNATURE_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VERSIONED_ROOT_SIGNATURE_DESC = 16;

export function allocD3D12_VERSIONED_ROOT_SIGNATURE_DESC(data?: Partial<D3D12_VERSIONED_ROOT_SIGNATURE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VERSIONED_ROOT_SIGNATURE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE (size: 8)
 */
export interface D3D12_CPU_DESCRIPTOR_HANDLE {
  /** usize */
  ptr: Deno.PointerValue;
}

export const sizeofD3D12_CPU_DESCRIPTOR_HANDLE = 8;

export function allocD3D12_CPU_DESCRIPTOR_HANDLE(data?: Partial<D3D12_CPU_DESCRIPTOR_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_CPU_DESCRIPTOR_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: usize
  if (data?.ptr !== undefined) view.setBigUint64(0, BigInt(data.ptr), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_GPU_DESCRIPTOR_HANDLE (size: 8)
 */
export interface D3D12_GPU_DESCRIPTOR_HANDLE {
  /** u64 */
  ptr: Deno.PointerValue;
}

export const sizeofD3D12_GPU_DESCRIPTOR_HANDLE = 8;

export function allocD3D12_GPU_DESCRIPTOR_HANDLE(data?: Partial<D3D12_GPU_DESCRIPTOR_HANDLE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_GPU_DESCRIPTOR_HANDLE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ptr !== undefined) view.setBigUint64(0, BigInt(data.ptr), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DISCARD_REGION (size: 24)
 */
export interface D3D12_DISCARD_REGION {
  /** u32 */
  NumRects: number;
  /** ptr */
  pRects: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  FirstSubresource: number;
  /** u32 */
  NumSubresources: number;
}

export const sizeofD3D12_DISCARD_REGION = 24;

export function allocD3D12_DISCARD_REGION(data?: Partial<D3D12_DISCARD_REGION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DISCARD_REGION);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumRects !== undefined) view.setUint32(0, Number(data.NumRects), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pRects !== undefined) view.setBigUint64(8, data.pRects === null ? 0n : BigInt(util.toPointer(data.pRects)), true);
  // 0x10: u32
  if (data?.FirstSubresource !== undefined) view.setUint32(16, Number(data.FirstSubresource), true);
  // 0x14: u32
  if (data?.NumSubresources !== undefined) view.setUint32(20, Number(data.NumSubresources), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_DESC (size: 16)
 */
export interface D3D12_QUERY_HEAP_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_QUERY_HEAP_TYPE */
  Type: D3D12_QUERY_HEAP_TYPE;
  /** u32 */
  Count: number;
  /** u32 */
  NodeMask: number;
}

export const sizeofD3D12_QUERY_HEAP_DESC = 16;

export function allocD3D12_QUERY_HEAP_DESC(data?: Partial<D3D12_QUERY_HEAP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_QUERY_HEAP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  // 0x08: u32
  if (data?.NodeMask !== undefined) view.setUint32(8, Number(data.NodeMask), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_QUERY_DATA_PIPELINE_STATISTICS (size: 88)
 */
export interface D3D12_QUERY_DATA_PIPELINE_STATISTICS {
  /** u64 */
  IAVertices: Deno.PointerValue;
  /** u64 */
  IAPrimitives: Deno.PointerValue;
  /** u64 */
  VSInvocations: Deno.PointerValue;
  /** u64 */
  GSInvocations: Deno.PointerValue;
  /** u64 */
  GSPrimitives: Deno.PointerValue;
  /** u64 */
  CInvocations: Deno.PointerValue;
  /** u64 */
  CPrimitives: Deno.PointerValue;
  /** u64 */
  PSInvocations: Deno.PointerValue;
  /** u64 */
  HSInvocations: Deno.PointerValue;
  /** u64 */
  DSInvocations: Deno.PointerValue;
  /** u64 */
  CSInvocations: Deno.PointerValue;
}

export const sizeofD3D12_QUERY_DATA_PIPELINE_STATISTICS = 88;

export function allocD3D12_QUERY_DATA_PIPELINE_STATISTICS(data?: Partial<D3D12_QUERY_DATA_PIPELINE_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_QUERY_DATA_PIPELINE_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IAVertices !== undefined) view.setBigUint64(0, BigInt(data.IAVertices), true);
  // 0x08: u64
  if (data?.IAPrimitives !== undefined) view.setBigUint64(8, BigInt(data.IAPrimitives), true);
  // 0x10: u64
  if (data?.VSInvocations !== undefined) view.setBigUint64(16, BigInt(data.VSInvocations), true);
  // 0x18: u64
  if (data?.GSInvocations !== undefined) view.setBigUint64(24, BigInt(data.GSInvocations), true);
  // 0x20: u64
  if (data?.GSPrimitives !== undefined) view.setBigUint64(32, BigInt(data.GSPrimitives), true);
  // 0x28: u64
  if (data?.CInvocations !== undefined) view.setBigUint64(40, BigInt(data.CInvocations), true);
  // 0x30: u64
  if (data?.CPrimitives !== undefined) view.setBigUint64(48, BigInt(data.CPrimitives), true);
  // 0x38: u64
  if (data?.PSInvocations !== undefined) view.setBigUint64(56, BigInt(data.PSInvocations), true);
  // 0x40: u64
  if (data?.HSInvocations !== undefined) view.setBigUint64(64, BigInt(data.HSInvocations), true);
  // 0x48: u64
  if (data?.DSInvocations !== undefined) view.setBigUint64(72, BigInt(data.DSInvocations), true);
  // 0x50: u64
  if (data?.CSInvocations !== undefined) view.setBigUint64(80, BigInt(data.CSInvocations), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_QUERY_DATA_PIPELINE_STATISTICS1 (size: 112)
 */
export interface D3D12_QUERY_DATA_PIPELINE_STATISTICS1 {
  /** u64 */
  IAVertices: Deno.PointerValue;
  /** u64 */
  IAPrimitives: Deno.PointerValue;
  /** u64 */
  VSInvocations: Deno.PointerValue;
  /** u64 */
  GSInvocations: Deno.PointerValue;
  /** u64 */
  GSPrimitives: Deno.PointerValue;
  /** u64 */
  CInvocations: Deno.PointerValue;
  /** u64 */
  CPrimitives: Deno.PointerValue;
  /** u64 */
  PSInvocations: Deno.PointerValue;
  /** u64 */
  HSInvocations: Deno.PointerValue;
  /** u64 */
  DSInvocations: Deno.PointerValue;
  /** u64 */
  CSInvocations: Deno.PointerValue;
  /** u64 */
  ASInvocations: Deno.PointerValue;
  /** u64 */
  MSInvocations: Deno.PointerValue;
  /** u64 */
  MSPrimitives: Deno.PointerValue;
}

export const sizeofD3D12_QUERY_DATA_PIPELINE_STATISTICS1 = 112;

export function allocD3D12_QUERY_DATA_PIPELINE_STATISTICS1(data?: Partial<D3D12_QUERY_DATA_PIPELINE_STATISTICS1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_QUERY_DATA_PIPELINE_STATISTICS1);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.IAVertices !== undefined) view.setBigUint64(0, BigInt(data.IAVertices), true);
  // 0x08: u64
  if (data?.IAPrimitives !== undefined) view.setBigUint64(8, BigInt(data.IAPrimitives), true);
  // 0x10: u64
  if (data?.VSInvocations !== undefined) view.setBigUint64(16, BigInt(data.VSInvocations), true);
  // 0x18: u64
  if (data?.GSInvocations !== undefined) view.setBigUint64(24, BigInt(data.GSInvocations), true);
  // 0x20: u64
  if (data?.GSPrimitives !== undefined) view.setBigUint64(32, BigInt(data.GSPrimitives), true);
  // 0x28: u64
  if (data?.CInvocations !== undefined) view.setBigUint64(40, BigInt(data.CInvocations), true);
  // 0x30: u64
  if (data?.CPrimitives !== undefined) view.setBigUint64(48, BigInt(data.CPrimitives), true);
  // 0x38: u64
  if (data?.PSInvocations !== undefined) view.setBigUint64(56, BigInt(data.PSInvocations), true);
  // 0x40: u64
  if (data?.HSInvocations !== undefined) view.setBigUint64(64, BigInt(data.HSInvocations), true);
  // 0x48: u64
  if (data?.DSInvocations !== undefined) view.setBigUint64(72, BigInt(data.DSInvocations), true);
  // 0x50: u64
  if (data?.CSInvocations !== undefined) view.setBigUint64(80, BigInt(data.CSInvocations), true);
  // 0x58: u64
  if (data?.ASInvocations !== undefined) view.setBigUint64(88, BigInt(data.ASInvocations), true);
  // 0x60: u64
  if (data?.MSInvocations !== undefined) view.setBigUint64(96, BigInt(data.MSInvocations), true);
  // 0x68: u64
  if (data?.MSPrimitives !== undefined) view.setBigUint64(104, BigInt(data.MSPrimitives), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_QUERY_DATA_SO_STATISTICS (size: 16)
 */
export interface D3D12_QUERY_DATA_SO_STATISTICS {
  /** u64 */
  NumPrimitivesWritten: Deno.PointerValue;
  /** u64 */
  PrimitivesStorageNeeded: Deno.PointerValue;
}

export const sizeofD3D12_QUERY_DATA_SO_STATISTICS = 16;

export function allocD3D12_QUERY_DATA_SO_STATISTICS(data?: Partial<D3D12_QUERY_DATA_SO_STATISTICS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_QUERY_DATA_SO_STATISTICS);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.NumPrimitivesWritten !== undefined) view.setBigUint64(0, BigInt(data.NumPrimitivesWritten), true);
  // 0x08: u64
  if (data?.PrimitivesStorageNeeded !== undefined) view.setBigUint64(8, BigInt(data.PrimitivesStorageNeeded), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_STREAM_OUTPUT_BUFFER_VIEW (size: 24)
 */
export interface D3D12_STREAM_OUTPUT_BUFFER_VIEW {
  /** u64 */
  BufferLocation: Deno.PointerValue;
  /** u64 */
  SizeInBytes: Deno.PointerValue;
  /** u64 */
  BufferFilledSizeLocation: Deno.PointerValue;
}

export const sizeofD3D12_STREAM_OUTPUT_BUFFER_VIEW = 24;

export function allocD3D12_STREAM_OUTPUT_BUFFER_VIEW(data?: Partial<D3D12_STREAM_OUTPUT_BUFFER_VIEW>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_STREAM_OUTPUT_BUFFER_VIEW);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BufferLocation !== undefined) view.setBigUint64(0, BigInt(data.BufferLocation), true);
  // 0x08: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(8, BigInt(data.SizeInBytes), true);
  // 0x10: u64
  if (data?.BufferFilledSizeLocation !== undefined) view.setBigUint64(16, BigInt(data.BufferFilledSizeLocation), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRAW_ARGUMENTS (size: 16)
 */
export interface D3D12_DRAW_ARGUMENTS {
  /** u32 */
  VertexCountPerInstance: number;
  /** u32 */
  InstanceCount: number;
  /** u32 */
  StartVertexLocation: number;
  /** u32 */
  StartInstanceLocation: number;
}

export const sizeofD3D12_DRAW_ARGUMENTS = 16;

export function allocD3D12_DRAW_ARGUMENTS(data?: Partial<D3D12_DRAW_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRAW_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.VertexCountPerInstance !== undefined) view.setUint32(0, Number(data.VertexCountPerInstance), true);
  // 0x04: u32
  if (data?.InstanceCount !== undefined) view.setUint32(4, Number(data.InstanceCount), true);
  // 0x08: u32
  if (data?.StartVertexLocation !== undefined) view.setUint32(8, Number(data.StartVertexLocation), true);
  // 0x0c: u32
  if (data?.StartInstanceLocation !== undefined) view.setUint32(12, Number(data.StartInstanceLocation), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRAW_INDEXED_ARGUMENTS (size: 24)
 */
export interface D3D12_DRAW_INDEXED_ARGUMENTS {
  /** u32 */
  IndexCountPerInstance: number;
  /** u32 */
  InstanceCount: number;
  /** u32 */
  StartIndexLocation: number;
  /** i32 */
  BaseVertexLocation: number;
  /** u32 */
  StartInstanceLocation: number;
}

export const sizeofD3D12_DRAW_INDEXED_ARGUMENTS = 24;

export function allocD3D12_DRAW_INDEXED_ARGUMENTS(data?: Partial<D3D12_DRAW_INDEXED_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRAW_INDEXED_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.IndexCountPerInstance !== undefined) view.setUint32(0, Number(data.IndexCountPerInstance), true);
  // 0x04: u32
  if (data?.InstanceCount !== undefined) view.setUint32(4, Number(data.InstanceCount), true);
  // 0x08: u32
  if (data?.StartIndexLocation !== undefined) view.setUint32(8, Number(data.StartIndexLocation), true);
  // 0x0c: i32
  if (data?.BaseVertexLocation !== undefined) view.setInt32(12, Number(data.BaseVertexLocation), true);
  // 0x10: u32
  if (data?.StartInstanceLocation !== undefined) view.setUint32(16, Number(data.StartInstanceLocation), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DISPATCH_ARGUMENTS (size: 16)
 */
export interface D3D12_DISPATCH_ARGUMENTS {
  /** u32 */
  ThreadGroupCountX: number;
  /** u32 */
  ThreadGroupCountY: number;
  /** u32 */
  ThreadGroupCountZ: number;
}

export const sizeofD3D12_DISPATCH_ARGUMENTS = 16;

export function allocD3D12_DISPATCH_ARGUMENTS(data?: Partial<D3D12_DISPATCH_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DISPATCH_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadGroupCountX !== undefined) view.setUint32(0, Number(data.ThreadGroupCountX), true);
  // 0x04: u32
  if (data?.ThreadGroupCountY !== undefined) view.setUint32(4, Number(data.ThreadGroupCountY), true);
  // 0x08: u32
  if (data?.ThreadGroupCountZ !== undefined) view.setUint32(8, Number(data.ThreadGroupCountZ), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_VERTEX_BUFFER_VIEW (size: 16)
 */
export interface D3D12_VERTEX_BUFFER_VIEW {
  /** u64 */
  BufferLocation: Deno.PointerValue;
  /** u32 */
  SizeInBytes: number;
  /** u32 */
  StrideInBytes: number;
}

export const sizeofD3D12_VERTEX_BUFFER_VIEW = 16;

export function allocD3D12_VERTEX_BUFFER_VIEW(data?: Partial<D3D12_VERTEX_BUFFER_VIEW>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VERTEX_BUFFER_VIEW);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BufferLocation !== undefined) view.setBigUint64(0, BigInt(data.BufferLocation), true);
  // 0x08: u32
  if (data?.SizeInBytes !== undefined) view.setUint32(8, Number(data.SizeInBytes), true);
  // 0x0c: u32
  if (data?.StrideInBytes !== undefined) view.setUint32(12, Number(data.StrideInBytes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_INDEX_BUFFER_VIEW (size: 16)
 */
export interface D3D12_INDEX_BUFFER_VIEW {
  /** u64 */
  BufferLocation: Deno.PointerValue;
  /** u32 */
  SizeInBytes: number;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
}

export const sizeofD3D12_INDEX_BUFFER_VIEW = 16;

export function allocD3D12_INDEX_BUFFER_VIEW(data?: Partial<D3D12_INDEX_BUFFER_VIEW>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_INDEX_BUFFER_VIEW);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.BufferLocation !== undefined) view.setBigUint64(0, BigInt(data.BufferLocation), true);
  // 0x08: u32
  if (data?.SizeInBytes !== undefined) view.setUint32(8, Number(data.SizeInBytes), true);
  // 0x0c: u32
  if (data?.Format !== undefined) view.setUint32(12, Number(data.Format), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_INDIRECT_ARGUMENT_DESC (size: 16)
 */
export interface D3D12_INDIRECT_ARGUMENT_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_INDIRECT_ARGUMENT_TYPE */
  Type: D3D12_INDIRECT_ARGUMENT_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_INDIRECT_ARGUMENT_DESC = 16;

export function allocD3D12_INDIRECT_ARGUMENT_DESC(data?: Partial<D3D12_INDIRECT_ARGUMENT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_INDIRECT_ARGUMENT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_COMMAND_SIGNATURE_DESC (size: 24)
 */
export interface D3D12_COMMAND_SIGNATURE_DESC {
  /** u32 */
  ByteStride: number;
  /** u32 */
  NumArgumentDescs: number;
  /** ptr */
  pArgumentDescs: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NodeMask: number;
}

export const sizeofD3D12_COMMAND_SIGNATURE_DESC = 24;

export function allocD3D12_COMMAND_SIGNATURE_DESC(data?: Partial<D3D12_COMMAND_SIGNATURE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_COMMAND_SIGNATURE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ByteStride !== undefined) view.setUint32(0, Number(data.ByteStride), true);
  // 0x04: u32
  if (data?.NumArgumentDescs !== undefined) view.setUint32(4, Number(data.NumArgumentDescs), true);
  // 0x08: pointer
  if (data?.pArgumentDescs !== undefined) view.setBigUint64(8, data.pArgumentDescs === null ? 0n : BigInt(util.toPointer(data.pArgumentDescs)), true);
  // 0x10: u32
  if (data?.NodeMask !== undefined) view.setUint32(16, Number(data.NodeMask), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_WRITEBUFFERIMMEDIATE_PARAMETER (size: 16)
 */
export interface D3D12_WRITEBUFFERIMMEDIATE_PARAMETER {
  /** u64 */
  Dest: Deno.PointerValue;
  /** u32 */
  Value: number;
}

export const sizeofD3D12_WRITEBUFFERIMMEDIATE_PARAMETER = 16;

export function allocD3D12_WRITEBUFFERIMMEDIATE_PARAMETER(data?: Partial<D3D12_WRITEBUFFERIMMEDIATE_PARAMETER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_WRITEBUFFERIMMEDIATE_PARAMETER);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Dest !== undefined) view.setBigUint64(0, BigInt(data.Dest), true);
  // 0x08: u32
  if (data?.Value !== undefined) view.setUint32(8, Number(data.Value), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT (size: 8)
 */
export interface D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT {
  /** u32 */
  NodeIndex: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS */
  Support: D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS;
}

export const sizeofD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT = 8;

export function allocD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT(data?: Partial<D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.Support !== undefined) view.setUint32(4, Number(data.Support), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_DESC (size: 8)
 */
export interface D3D12_PROTECTED_RESOURCE_SESSION_DESC {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_FLAGS */
  Flags: D3D12_PROTECTED_RESOURCE_SESSION_FLAGS;
}

export const sizeofD3D12_PROTECTED_RESOURCE_SESSION_DESC = 8;

export function allocD3D12_PROTECTED_RESOURCE_SESSION_DESC(data?: Partial<D3D12_PROTECTED_RESOURCE_SESSION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_PROTECTED_RESOURCE_SESSION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_META_COMMAND_PARAMETER_DESC (size: 24)
 */
export interface D3D12_META_COMMAND_PARAMETER_DESC {
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_META_COMMAND_PARAMETER_TYPE */
  Type: D3D12_META_COMMAND_PARAMETER_TYPE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_META_COMMAND_PARAMETER_FLAGS */
  Flags: D3D12_META_COMMAND_PARAMETER_FLAGS;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOURCE_STATES */
  RequiredResourceState: D3D12_RESOURCE_STATES;
  /** u32 */
  StructureOffset: number;
}

export const sizeofD3D12_META_COMMAND_PARAMETER_DESC = 24;

export function allocD3D12_META_COMMAND_PARAMETER_DESC(data?: Partial<D3D12_META_COMMAND_PARAMETER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_META_COMMAND_PARAMETER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.RequiredResourceState !== undefined) view.setUint32(16, Number(data.RequiredResourceState), true);
  // 0x14: u32
  if (data?.StructureOffset !== undefined) view.setUint32(20, Number(data.StructureOffset), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_META_COMMAND_DESC (size: 24)
 */
export interface D3D12_META_COMMAND_DESC {
  /** System.Guid */
  Id: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GRAPHICS_STATES */
  InitializationDirtyState: D3D12_GRAPHICS_STATES;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GRAPHICS_STATES */
  ExecutionDirtyState: D3D12_GRAPHICS_STATES;
}

export const sizeofD3D12_META_COMMAND_DESC = 24;

export function allocD3D12_META_COMMAND_DESC(data?: Partial<D3D12_META_COMMAND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_META_COMMAND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Id !== undefined) view.setBigUint64(0, data.Id === null ? 0n : BigInt(util.toPointer(data.Id)), true);
  // 0x08: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Name);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.InitializationDirtyState !== undefined) view.setUint32(16, Number(data.InitializationDirtyState), true);
  // 0x14: u32
  if (data?.ExecutionDirtyState !== undefined) view.setUint32(20, Number(data.ExecutionDirtyState), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_STATE_SUBOBJECT (size: 16)
 */
export interface D3D12_STATE_SUBOBJECT {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STATE_SUBOBJECT_TYPE */
  Type: D3D12_STATE_SUBOBJECT_TYPE;
  /** ptr */
  pDesc: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_STATE_SUBOBJECT = 16;

export function allocD3D12_STATE_SUBOBJECT(data?: Partial<D3D12_STATE_SUBOBJECT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_STATE_SUBOBJECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pDesc !== undefined) view.setBigUint64(8, data.pDesc === null ? 0n : BigInt(util.toPointer(data.pDesc)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_STATE_OBJECT_CONFIG (size: 8)
 */
export interface D3D12_STATE_OBJECT_CONFIG {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STATE_OBJECT_FLAGS */
  Flags: D3D12_STATE_OBJECT_FLAGS;
}

export const sizeofD3D12_STATE_OBJECT_CONFIG = 8;

export function allocD3D12_STATE_OBJECT_CONFIG(data?: Partial<D3D12_STATE_OBJECT_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_STATE_OBJECT_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_GLOBAL_ROOT_SIGNATURE (size: 8)
 */
export interface D3D12_GLOBAL_ROOT_SIGNATURE {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12RootSignature */
  pGlobalRootSignature: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_GLOBAL_ROOT_SIGNATURE = 8;

export function allocD3D12_GLOBAL_ROOT_SIGNATURE(data?: Partial<D3D12_GLOBAL_ROOT_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_GLOBAL_ROOT_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pGlobalRootSignature !== undefined) view.setBigUint64(0, data.pGlobalRootSignature === null ? 0n : BigInt(util.toPointer(data.pGlobalRootSignature)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_LOCAL_ROOT_SIGNATURE (size: 8)
 */
export interface D3D12_LOCAL_ROOT_SIGNATURE {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12RootSignature */
  pLocalRootSignature: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_LOCAL_ROOT_SIGNATURE = 8;

export function allocD3D12_LOCAL_ROOT_SIGNATURE(data?: Partial<D3D12_LOCAL_ROOT_SIGNATURE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_LOCAL_ROOT_SIGNATURE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pLocalRootSignature !== undefined) view.setBigUint64(0, data.pLocalRootSignature === null ? 0n : BigInt(util.toPointer(data.pLocalRootSignature)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_NODE_MASK (size: 8)
 */
export interface D3D12_NODE_MASK {
  /** u32 */
  NodeMask: number;
}

export const sizeofD3D12_NODE_MASK = 8;

export function allocD3D12_NODE_MASK(data?: Partial<D3D12_NODE_MASK>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_NODE_MASK);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_EXPORT_DESC (size: 24)
 */
export interface D3D12_EXPORT_DESC {
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ExportToRename: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_EXPORT_FLAGS */
  Flags: D3D12_EXPORT_FLAGS;
}

export const sizeofD3D12_EXPORT_DESC = 24;

export function allocD3D12_EXPORT_DESC(data?: Partial<D3D12_EXPORT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_EXPORT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.ExportToRename !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ExportToRename);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DXIL_LIBRARY_DESC (size: 24)
 */
export interface D3D12_DXIL_LIBRARY_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BYTECODE */
  DXILLibrary: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumExports: number;
  /** ptr */
  pExports: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DXIL_LIBRARY_DESC = 24;

export function allocD3D12_DXIL_LIBRARY_DESC(data?: Partial<D3D12_DXIL_LIBRARY_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DXIL_LIBRARY_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DXILLibrary !== undefined) view.setBigUint64(0, data.DXILLibrary === null ? 0n : BigInt(util.toPointer(data.DXILLibrary)), true);
  // 0x08: u32
  if (data?.NumExports !== undefined) view.setUint32(8, Number(data.NumExports), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pExports !== undefined) view.setBigUint64(16, data.pExports === null ? 0n : BigInt(util.toPointer(data.pExports)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_EXISTING_COLLECTION_DESC (size: 24)
 */
export interface D3D12_EXISTING_COLLECTION_DESC {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12StateObject */
  pExistingCollection: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  NumExports: number;
  /** ptr */
  pExports: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_EXISTING_COLLECTION_DESC = 24;

export function allocD3D12_EXISTING_COLLECTION_DESC(data?: Partial<D3D12_EXISTING_COLLECTION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_EXISTING_COLLECTION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pExistingCollection !== undefined) view.setBigUint64(0, data.pExistingCollection === null ? 0n : BigInt(util.toPointer(data.pExistingCollection)), true);
  // 0x08: u32
  if (data?.NumExports !== undefined) view.setUint32(8, Number(data.NumExports), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pExports !== undefined) view.setBigUint64(16, data.pExports === null ? 0n : BigInt(util.toPointer(data.pExports)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION (size: 24)
 */
export interface D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
  /** ptr */
  pSubobjectToAssociate: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumExports: number;
  /** ptr */
  pExports: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 24;

export function allocD3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION(data?: Partial<D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSubobjectToAssociate !== undefined) view.setBigUint64(0, data.pSubobjectToAssociate === null ? 0n : BigInt(util.toPointer(data.pSubobjectToAssociate)), true);
  // 0x08: u32
  if (data?.NumExports !== undefined) view.setUint32(8, Number(data.NumExports), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pExports !== undefined) view.setBigUint64(16, data.pExports === null ? 0n : BigInt(util.toPointer(data.pExports)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION (size: 24)
 */
export interface D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION {
  /** Windows.Win32.Foundation.PWSTR */
  SubobjectToAssociate: string | null | Uint8Array | Uint16Array;
  /** u32 */
  NumExports: number;
  /** ptr */
  pExports: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 24;

export function allocD3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION(data?: Partial<D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SubobjectToAssociate !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.SubobjectToAssociate);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.NumExports !== undefined) view.setUint32(8, Number(data.NumExports), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pExports !== undefined) view.setBigUint64(16, data.pExports === null ? 0n : BigInt(util.toPointer(data.pExports)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_HIT_GROUP_DESC (size: 40)
 */
export interface D3D12_HIT_GROUP_DESC {
  /** Windows.Win32.Foundation.PWSTR */
  HitGroupExport: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_HIT_GROUP_TYPE */
  Type: D3D12_HIT_GROUP_TYPE;
  /** Windows.Win32.Foundation.PWSTR */
  AnyHitShaderImport: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  ClosestHitShaderImport: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  IntersectionShaderImport: string | null | Uint8Array | Uint16Array;
}

export const sizeofD3D12_HIT_GROUP_DESC = 40;

export function allocD3D12_HIT_GROUP_DESC(data?: Partial<D3D12_HIT_GROUP_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_HIT_GROUP_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.HitGroupExport !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.HitGroupExport);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: pad4
  // 0x10: buffer
  if (data?.AnyHitShaderImport !== undefined) {
    (buf as any)._f16 = util.pwstrToFfi(data.AnyHitShaderImport);
    view.setBigUint64(16, (buf as any)._f16 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f16)), true);
  }
  // 0x18: buffer
  if (data?.ClosestHitShaderImport !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.ClosestHitShaderImport);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: buffer
  if (data?.IntersectionShaderImport !== undefined) {
    (buf as any)._f32 = util.pwstrToFfi(data.IntersectionShaderImport);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_SHADER_CONFIG (size: 8)
 */
export interface D3D12_RAYTRACING_SHADER_CONFIG {
  /** u32 */
  MaxPayloadSizeInBytes: number;
  /** u32 */
  MaxAttributeSizeInBytes: number;
}

export const sizeofD3D12_RAYTRACING_SHADER_CONFIG = 8;

export function allocD3D12_RAYTRACING_SHADER_CONFIG(data?: Partial<D3D12_RAYTRACING_SHADER_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_SHADER_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxPayloadSizeInBytes !== undefined) view.setUint32(0, Number(data.MaxPayloadSizeInBytes), true);
  // 0x04: u32
  if (data?.MaxAttributeSizeInBytes !== undefined) view.setUint32(4, Number(data.MaxAttributeSizeInBytes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_PIPELINE_CONFIG (size: 8)
 */
export interface D3D12_RAYTRACING_PIPELINE_CONFIG {
  /** u32 */
  MaxTraceRecursionDepth: number;
}

export const sizeofD3D12_RAYTRACING_PIPELINE_CONFIG = 8;

export function allocD3D12_RAYTRACING_PIPELINE_CONFIG(data?: Partial<D3D12_RAYTRACING_PIPELINE_CONFIG>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_PIPELINE_CONFIG);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxTraceRecursionDepth !== undefined) view.setUint32(0, Number(data.MaxTraceRecursionDepth), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_PIPELINE_CONFIG1 (size: 8)
 */
export interface D3D12_RAYTRACING_PIPELINE_CONFIG1 {
  /** u32 */
  MaxTraceRecursionDepth: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_PIPELINE_FLAGS */
  Flags: D3D12_RAYTRACING_PIPELINE_FLAGS;
}

export const sizeofD3D12_RAYTRACING_PIPELINE_CONFIG1 = 8;

export function allocD3D12_RAYTRACING_PIPELINE_CONFIG1(data?: Partial<D3D12_RAYTRACING_PIPELINE_CONFIG1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_PIPELINE_CONFIG1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxTraceRecursionDepth !== undefined) view.setUint32(0, Number(data.MaxTraceRecursionDepth), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_STATE_OBJECT_DESC (size: 16)
 */
export interface D3D12_STATE_OBJECT_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_STATE_OBJECT_TYPE */
  Type: D3D12_STATE_OBJECT_TYPE;
  /** u32 */
  NumSubobjects: number;
  /** ptr */
  pSubobjects: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_STATE_OBJECT_DESC = 16;

export function allocD3D12_STATE_OBJECT_DESC(data?: Partial<D3D12_STATE_OBJECT_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_STATE_OBJECT_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.NumSubobjects !== undefined) view.setUint32(4, Number(data.NumSubobjects), true);
  // 0x08: pointer
  if (data?.pSubobjects !== undefined) view.setBigUint64(8, data.pSubobjects === null ? 0n : BigInt(util.toPointer(data.pSubobjects)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE (size: 16)
 */
export interface D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE {
  /** u64 */
  StartAddress: Deno.PointerValue;
  /** u64 */
  StrideInBytes: Deno.PointerValue;
}

export const sizeofD3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE = 16;

export function allocD3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE(data?: Partial<D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartAddress !== undefined) view.setBigUint64(0, BigInt(data.StartAddress), true);
  // 0x08: u64
  if (data?.StrideInBytes !== undefined) view.setBigUint64(8, BigInt(data.StrideInBytes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_RANGE (size: 16)
 */
export interface D3D12_GPU_VIRTUAL_ADDRESS_RANGE {
  /** u64 */
  StartAddress: Deno.PointerValue;
  /** u64 */
  SizeInBytes: Deno.PointerValue;
}

export const sizeofD3D12_GPU_VIRTUAL_ADDRESS_RANGE = 16;

export function allocD3D12_GPU_VIRTUAL_ADDRESS_RANGE(data?: Partial<D3D12_GPU_VIRTUAL_ADDRESS_RANGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_GPU_VIRTUAL_ADDRESS_RANGE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartAddress !== undefined) view.setBigUint64(0, BigInt(data.StartAddress), true);
  // 0x08: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(8, BigInt(data.SizeInBytes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE (size: 24)
 */
export interface D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE {
  /** u64 */
  StartAddress: Deno.PointerValue;
  /** u64 */
  SizeInBytes: Deno.PointerValue;
  /** u64 */
  StrideInBytes: Deno.PointerValue;
}

export const sizeofD3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE = 24;

export function allocD3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE(data?: Partial<D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.StartAddress !== undefined) view.setBigUint64(0, BigInt(data.StartAddress), true);
  // 0x08: u64
  if (data?.SizeInBytes !== undefined) view.setBigUint64(8, BigInt(data.SizeInBytes), true);
  // 0x10: u64
  if (data?.StrideInBytes !== undefined) view.setBigUint64(16, BigInt(data.StrideInBytes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC (size: 40)
 */
export interface D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC {
  /** u64 */
  Transform3x4: Deno.PointerValue;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  IndexFormat: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  VertexFormat: DXGI_FORMAT;
  /** u32 */
  IndexCount: number;
  /** u32 */
  VertexCount: number;
  /** u64 */
  IndexBuffer: Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE */
  VertexBuffer: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC = 40;

export function allocD3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC(data?: Partial<D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.Transform3x4 !== undefined) view.setBigUint64(0, BigInt(data.Transform3x4), true);
  // 0x08: u32
  if (data?.IndexFormat !== undefined) view.setUint32(8, Number(data.IndexFormat), true);
  // 0x0c: u32
  if (data?.VertexFormat !== undefined) view.setUint32(12, Number(data.VertexFormat), true);
  // 0x10: u32
  if (data?.IndexCount !== undefined) view.setUint32(16, Number(data.IndexCount), true);
  // 0x14: u32
  if (data?.VertexCount !== undefined) view.setUint32(20, Number(data.VertexCount), true);
  // 0x18: u64
  if (data?.IndexBuffer !== undefined) view.setBigUint64(24, BigInt(data.IndexBuffer), true);
  // 0x20: pointer
  if (data?.VertexBuffer !== undefined) view.setBigUint64(32, data.VertexBuffer === null ? 0n : BigInt(util.toPointer(data.VertexBuffer)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_AABB (size: 24)
 */
export interface D3D12_RAYTRACING_AABB {
  /** f32 */
  MinX: number;
  /** f32 */
  MinY: number;
  /** f32 */
  MinZ: number;
  /** f32 */
  MaxX: number;
  /** f32 */
  MaxY: number;
  /** f32 */
  MaxZ: number;
}

export const sizeofD3D12_RAYTRACING_AABB = 24;

export function allocD3D12_RAYTRACING_AABB(data?: Partial<D3D12_RAYTRACING_AABB>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_AABB);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.MinX !== undefined) view.setFloat32(0, Number(data.MinX), true);
  // 0x04: f32
  if (data?.MinY !== undefined) view.setFloat32(4, Number(data.MinY), true);
  // 0x08: f32
  if (data?.MinZ !== undefined) view.setFloat32(8, Number(data.MinZ), true);
  // 0x0c: f32
  if (data?.MaxX !== undefined) view.setFloat32(12, Number(data.MaxX), true);
  // 0x10: f32
  if (data?.MaxY !== undefined) view.setFloat32(16, Number(data.MaxY), true);
  // 0x14: f32
  if (data?.MaxZ !== undefined) view.setFloat32(20, Number(data.MaxZ), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_GEOMETRY_AABBS_DESC (size: 16)
 */
export interface D3D12_RAYTRACING_GEOMETRY_AABBS_DESC {
  /** u64 */
  AABBCount: Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE */
  AABBs: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RAYTRACING_GEOMETRY_AABBS_DESC = 16;

export function allocD3D12_RAYTRACING_GEOMETRY_AABBS_DESC(data?: Partial<D3D12_RAYTRACING_GEOMETRY_AABBS_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_GEOMETRY_AABBS_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.AABBCount !== undefined) view.setBigUint64(0, BigInt(data.AABBCount), true);
  // 0x08: pointer
  if (data?.AABBs !== undefined) view.setBigUint64(8, data.AABBs === null ? 0n : BigInt(util.toPointer(data.AABBs)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC (size: 16)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC {
  /** u64 */
  DestBuffer: Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE */
  InfoType: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC = 16;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.DestBuffer !== undefined) view.setBigUint64(0, BigInt(data.DestBuffer), true);
  // 0x08: i32
  if (data?.InfoType !== undefined) view.setInt32(8, Number(data.InfoType), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC (size: 8)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC {
  /** u64 */
  CompactedSizeInBytes: Deno.PointerValue;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC = 8;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.CompactedSizeInBytes !== undefined) view.setBigUint64(0, BigInt(data.CompactedSizeInBytes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC (size: 8)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC {
  /** u64 */
  DecodedSizeInBytes: Deno.PointerValue;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC = 8;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.DecodedSizeInBytes !== undefined) view.setBigUint64(0, BigInt(data.DecodedSizeInBytes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER (size: 8)
 */
export interface D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE */
  Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE;
  /** u32 */
  NumDescs: number;
}

export const sizeofD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER = 8;

export function allocD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER(data?: Partial<D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.NumDescs !== undefined) view.setUint32(4, Number(data.NumDescs), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC (size: 16)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC {
  /** u64 */
  SerializedSizeInBytes: Deno.PointerValue;
  /** u64 */
  NumBottomLevelAccelerationStructurePointers: Deno.PointerValue;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC = 16;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.SerializedSizeInBytes !== undefined) view.setBigUint64(0, BigInt(data.SerializedSizeInBytes), true);
  // 0x08: u64
  if (data?.NumBottomLevelAccelerationStructurePointers !== undefined) view.setBigUint64(8, BigInt(data.NumBottomLevelAccelerationStructurePointers), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER (size: 16)
 */
export interface D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER {
  /** System.Guid */
  DriverOpaqueGUID: Uint8Array | Deno.PointerValue | null;
  /** array */
  DriverOpaqueVersioningData: Deno.PointerValue | null;
}

export const sizeofD3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER = 16;

export function allocD3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER(data?: Partial<D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DriverOpaqueGUID !== undefined) view.setBigUint64(0, data.DriverOpaqueGUID === null ? 0n : BigInt(util.toPointer(data.DriverOpaqueGUID)), true);
  // 0x08: pointer
  if (data?.DriverOpaqueVersioningData !== undefined) view.setBigUint64(8, data.DriverOpaqueVersioningData === null ? 0n : BigInt(util.toPointer(data.DriverOpaqueVersioningData)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER (size: 32)
 */
export interface D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER */
  DriverMatchingIdentifier: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  SerializedSizeInBytesIncludingHeader: Deno.PointerValue;
  /** u64 */
  DeserializedSizeInBytes: Deno.PointerValue;
  /** u64 */
  NumBottomLevelAccelerationStructurePointersAfterHeader: Deno.PointerValue;
}

export const sizeofD3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER = 32;

export function allocD3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER(data?: Partial<D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DriverMatchingIdentifier !== undefined) view.setBigUint64(0, data.DriverMatchingIdentifier === null ? 0n : BigInt(util.toPointer(data.DriverMatchingIdentifier)), true);
  // 0x08: u64
  if (data?.SerializedSizeInBytesIncludingHeader !== undefined) view.setBigUint64(8, BigInt(data.SerializedSizeInBytesIncludingHeader), true);
  // 0x10: u64
  if (data?.DeserializedSizeInBytes !== undefined) view.setBigUint64(16, BigInt(data.DeserializedSizeInBytes), true);
  // 0x18: u64
  if (data?.NumBottomLevelAccelerationStructurePointersAfterHeader !== undefined) view.setBigUint64(24, BigInt(data.NumBottomLevelAccelerationStructurePointersAfterHeader), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC (size: 8)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC {
  /** u64 */
  CurrentSizeInBytes: Deno.PointerValue;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC = 8;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.CurrentSizeInBytes !== undefined) view.setBigUint64(0, BigInt(data.CurrentSizeInBytes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_INSTANCE_DESC (size: 24)
 */
export interface D3D12_RAYTRACING_INSTANCE_DESC {
  /** array */
  Transform: Deno.PointerValue | null;
  /** u32 */
  _bitfield1: number;
  /** u32 */
  _bitfield2: number;
  /** u64 */
  AccelerationStructure: Deno.PointerValue;
}

export const sizeofD3D12_RAYTRACING_INSTANCE_DESC = 24;

export function allocD3D12_RAYTRACING_INSTANCE_DESC(data?: Partial<D3D12_RAYTRACING_INSTANCE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_INSTANCE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Transform !== undefined) view.setBigUint64(0, data.Transform === null ? 0n : BigInt(util.toPointer(data.Transform)), true);
  // 0x08: u32
  if (data?._bitfield1 !== undefined) view.setUint32(8, Number(data._bitfield1), true);
  // 0x0c: u32
  if (data?._bitfield2 !== undefined) view.setUint32(12, Number(data._bitfield2), true);
  // 0x10: u64
  if (data?.AccelerationStructure !== undefined) view.setBigUint64(16, BigInt(data.AccelerationStructure), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_GEOMETRY_DESC (size: 16)
 */
export interface D3D12_RAYTRACING_GEOMETRY_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_GEOMETRY_TYPE */
  Type: D3D12_RAYTRACING_GEOMETRY_TYPE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_GEOMETRY_FLAGS */
  Flags: D3D12_RAYTRACING_GEOMETRY_FLAGS;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RAYTRACING_GEOMETRY_DESC = 16;

export function allocD3D12_RAYTRACING_GEOMETRY_DESC(data?: Partial<D3D12_RAYTRACING_GEOMETRY_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_GEOMETRY_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS (size: 24)
 */
export interface D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE */
  Type: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS */
  Flags: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS;
  /** u32 */
  NumDescs: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_ELEMENTS_LAYOUT */
  DescsLayout: D3D12_ELEMENTS_LAYOUT;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS = 24;

export function allocD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS(data?: Partial<D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: u32
  if (data?.NumDescs !== undefined) view.setUint32(8, Number(data.NumDescs), true);
  // 0x0c: i32
  if (data?.DescsLayout !== undefined) view.setInt32(12, Number(data.DescsLayout), true);
  // 0x10: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(16, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC (size: 32)
 */
export interface D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC {
  /** u64 */
  DestAccelerationStructureData: Deno.PointerValue;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS */
  Inputs: Uint8Array | Deno.PointerValue | null;
  /** u64 */
  SourceAccelerationStructureData: Deno.PointerValue;
  /** u64 */
  ScratchAccelerationStructureData: Deno.PointerValue;
}

export const sizeofD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC = 32;

export function allocD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC(data?: Partial<D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.DestAccelerationStructureData !== undefined) view.setBigUint64(0, BigInt(data.DestAccelerationStructureData), true);
  // 0x08: pointer
  if (data?.Inputs !== undefined) view.setBigUint64(8, data.Inputs === null ? 0n : BigInt(util.toPointer(data.Inputs)), true);
  // 0x10: u64
  if (data?.SourceAccelerationStructureData !== undefined) view.setBigUint64(16, BigInt(data.SourceAccelerationStructureData), true);
  // 0x18: u64
  if (data?.ScratchAccelerationStructureData !== undefined) view.setBigUint64(24, BigInt(data.ScratchAccelerationStructureData), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO (size: 24)
 */
export interface D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO {
  /** u64 */
  ResultDataMaxSizeInBytes: Deno.PointerValue;
  /** u64 */
  ScratchDataSizeInBytes: Deno.PointerValue;
  /** u64 */
  UpdateScratchDataSizeInBytes: Deno.PointerValue;
}

export const sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO = 24;

export function allocD3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO(data?: Partial<D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.ResultDataMaxSizeInBytes !== undefined) view.setBigUint64(0, BigInt(data.ResultDataMaxSizeInBytes), true);
  // 0x08: u64
  if (data?.ScratchDataSizeInBytes !== undefined) view.setBigUint64(8, BigInt(data.ScratchDataSizeInBytes), true);
  // 0x10: u64
  if (data?.UpdateScratchDataSizeInBytes !== undefined) view.setBigUint64(16, BigInt(data.UpdateScratchDataSizeInBytes), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_AUTO_BREADCRUMB_NODE (size: 80)
 */
export interface D3D12_AUTO_BREADCRUMB_NODE {
  /** ptr */
  pCommandListDebugNameA: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pCommandListDebugNameW: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pCommandQueueDebugNameA: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pCommandQueueDebugNameW: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12GraphicsCommandList */
  pCommandList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12CommandQueue */
  pCommandQueue: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BreadcrumbCount: number;
  /** ptr */
  pLastBreadcrumbValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCommandHistory: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_AUTO_BREADCRUMB_NODE = 80;

export function allocD3D12_AUTO_BREADCRUMB_NODE(data?: Partial<D3D12_AUTO_BREADCRUMB_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_AUTO_BREADCRUMB_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCommandListDebugNameA !== undefined) view.setBigUint64(0, data.pCommandListDebugNameA === null ? 0n : BigInt(util.toPointer(data.pCommandListDebugNameA)), true);
  // 0x08: buffer
  if (data?.pCommandListDebugNameW !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pCommandListDebugNameW);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pCommandQueueDebugNameA !== undefined) view.setBigUint64(16, data.pCommandQueueDebugNameA === null ? 0n : BigInt(util.toPointer(data.pCommandQueueDebugNameA)), true);
  // 0x18: buffer
  if (data?.pCommandQueueDebugNameW !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pCommandQueueDebugNameW);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.pCommandList !== undefined) view.setBigUint64(32, data.pCommandList === null ? 0n : BigInt(util.toPointer(data.pCommandList)), true);
  // 0x28: pointer
  if (data?.pCommandQueue !== undefined) view.setBigUint64(40, data.pCommandQueue === null ? 0n : BigInt(util.toPointer(data.pCommandQueue)), true);
  // 0x30: u32
  if (data?.BreadcrumbCount !== undefined) view.setUint32(48, Number(data.BreadcrumbCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pLastBreadcrumbValue !== undefined) view.setBigUint64(56, data.pLastBreadcrumbValue === null ? 0n : BigInt(util.toPointer(data.pLastBreadcrumbValue)), true);
  // 0x40: pointer
  if (data?.pCommandHistory !== undefined) view.setBigUint64(64, data.pCommandHistory === null ? 0n : BigInt(util.toPointer(data.pCommandHistory)), true);
  // 0x48: pointer
  if (data?.pNext !== undefined) view.setBigUint64(72, data.pNext === null ? 0n : BigInt(util.toPointer(data.pNext)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_BREADCRUMB_CONTEXT (size: 16)
 */
export interface D3D12_DRED_BREADCRUMB_CONTEXT {
  /** u32 */
  BreadcrumbIndex: number;
  /** Windows.Win32.Foundation.PWSTR */
  pContextString: string | null | Uint8Array | Uint16Array;
}

export const sizeofD3D12_DRED_BREADCRUMB_CONTEXT = 16;

export function allocD3D12_DRED_BREADCRUMB_CONTEXT(data?: Partial<D3D12_DRED_BREADCRUMB_CONTEXT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_BREADCRUMB_CONTEXT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.BreadcrumbIndex !== undefined) view.setUint32(0, Number(data.BreadcrumbIndex), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.pContextString !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pContextString);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_AUTO_BREADCRUMB_NODE1 (size: 96)
 */
export interface D3D12_AUTO_BREADCRUMB_NODE1 {
  /** ptr */
  pCommandListDebugNameA: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pCommandListDebugNameW: string | null | Uint8Array | Uint16Array;
  /** ptr */
  pCommandQueueDebugNameA: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  pCommandQueueDebugNameW: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12GraphicsCommandList */
  pCommandList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12CommandQueue */
  pCommandQueue: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  BreadcrumbCount: number;
  /** ptr */
  pLastBreadcrumbValue: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pCommandHistory: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  BreadcrumbContextsCount: number;
  /** ptr */
  pBreadcrumbContexts: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_AUTO_BREADCRUMB_NODE1 = 96;

export function allocD3D12_AUTO_BREADCRUMB_NODE1(data?: Partial<D3D12_AUTO_BREADCRUMB_NODE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_AUTO_BREADCRUMB_NODE1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pCommandListDebugNameA !== undefined) view.setBigUint64(0, data.pCommandListDebugNameA === null ? 0n : BigInt(util.toPointer(data.pCommandListDebugNameA)), true);
  // 0x08: buffer
  if (data?.pCommandListDebugNameW !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pCommandListDebugNameW);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: pointer
  if (data?.pCommandQueueDebugNameA !== undefined) view.setBigUint64(16, data.pCommandQueueDebugNameA === null ? 0n : BigInt(util.toPointer(data.pCommandQueueDebugNameA)), true);
  // 0x18: buffer
  if (data?.pCommandQueueDebugNameW !== undefined) {
    (buf as any)._f24 = util.pwstrToFfi(data.pCommandQueueDebugNameW);
    view.setBigUint64(24, (buf as any)._f24 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f24)), true);
  }
  // 0x20: pointer
  if (data?.pCommandList !== undefined) view.setBigUint64(32, data.pCommandList === null ? 0n : BigInt(util.toPointer(data.pCommandList)), true);
  // 0x28: pointer
  if (data?.pCommandQueue !== undefined) view.setBigUint64(40, data.pCommandQueue === null ? 0n : BigInt(util.toPointer(data.pCommandQueue)), true);
  // 0x30: u32
  if (data?.BreadcrumbCount !== undefined) view.setUint32(48, Number(data.BreadcrumbCount), true);
  // 0x34: pad4
  // 0x38: pointer
  if (data?.pLastBreadcrumbValue !== undefined) view.setBigUint64(56, data.pLastBreadcrumbValue === null ? 0n : BigInt(util.toPointer(data.pLastBreadcrumbValue)), true);
  // 0x40: pointer
  if (data?.pCommandHistory !== undefined) view.setBigUint64(64, data.pCommandHistory === null ? 0n : BigInt(util.toPointer(data.pCommandHistory)), true);
  // 0x48: pointer
  if (data?.pNext !== undefined) view.setBigUint64(72, data.pNext === null ? 0n : BigInt(util.toPointer(data.pNext)), true);
  // 0x50: u32
  if (data?.BreadcrumbContextsCount !== undefined) view.setUint32(80, Number(data.BreadcrumbContextsCount), true);
  // 0x54: pad4
  // 0x58: pointer
  if (data?.pBreadcrumbContexts !== undefined) view.setBigUint64(88, data.pBreadcrumbContexts === null ? 0n : BigInt(util.toPointer(data.pBreadcrumbContexts)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEVICE_REMOVED_EXTENDED_DATA (size: 16)
 */
export interface D3D12_DEVICE_REMOVED_EXTENDED_DATA {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_FLAGS */
  Flags: D3D12_DRED_FLAGS;
  /** ptr */
  pHeadAutoBreadcrumbNode: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA = 16;

export function allocD3D12_DEVICE_REMOVED_EXTENDED_DATA(data?: Partial<D3D12_DEVICE_REMOVED_EXTENDED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pHeadAutoBreadcrumbNode !== undefined) view.setBigUint64(8, data.pHeadAutoBreadcrumbNode === null ? 0n : BigInt(util.toPointer(data.pHeadAutoBreadcrumbNode)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_ALLOCATION_NODE (size: 32)
 */
export interface D3D12_DRED_ALLOCATION_NODE {
  /** ptr */
  ObjectNameA: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  ObjectNameW: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_ALLOCATION_TYPE */
  AllocationType: D3D12_DRED_ALLOCATION_TYPE;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DRED_ALLOCATION_NODE = 32;

export function allocD3D12_DRED_ALLOCATION_NODE(data?: Partial<D3D12_DRED_ALLOCATION_NODE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_ALLOCATION_NODE);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectNameA !== undefined) view.setBigUint64(0, data.ObjectNameA === null ? 0n : BigInt(util.toPointer(data.ObjectNameA)), true);
  // 0x08: buffer
  if (data?.ObjectNameW !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ObjectNameW);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.AllocationType !== undefined) view.setInt32(16, Number(data.AllocationType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pNext !== undefined) view.setBigUint64(24, data.pNext === null ? 0n : BigInt(util.toPointer(data.pNext)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_ALLOCATION_NODE1 (size: 40)
 */
export interface D3D12_DRED_ALLOCATION_NODE1 {
  /** ptr */
  ObjectNameA: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Foundation.PWSTR */
  ObjectNameW: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_ALLOCATION_TYPE */
  AllocationType: D3D12_DRED_ALLOCATION_TYPE;
  /** ptr */
  pNext: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.System.Com.IUnknown */
  pObject: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_DRED_ALLOCATION_NODE1 = 40;

export function allocD3D12_DRED_ALLOCATION_NODE1(data?: Partial<D3D12_DRED_ALLOCATION_NODE1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_ALLOCATION_NODE1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ObjectNameA !== undefined) view.setBigUint64(0, data.ObjectNameA === null ? 0n : BigInt(util.toPointer(data.ObjectNameA)), true);
  // 0x08: buffer
  if (data?.ObjectNameW !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.ObjectNameW);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.AllocationType !== undefined) view.setInt32(16, Number(data.AllocationType), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pNext !== undefined) view.setBigUint64(24, data.pNext === null ? 0n : BigInt(util.toPointer(data.pNext)), true);
  // 0x20: pointer
  if (data?.pObject !== undefined) view.setBigUint64(32, data.pObject === null ? 0n : BigInt(util.toPointer(data.pObject)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT (size: 8)
 */
export interface D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT {
  /** ptr */
  pHeadAutoBreadcrumbNode: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DRED_AUTO_BREADCRUMBS_OUTPUT = 8;

export function allocD3D12_DRED_AUTO_BREADCRUMBS_OUTPUT(data?: Partial<D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_AUTO_BREADCRUMBS_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pHeadAutoBreadcrumbNode !== undefined) view.setBigUint64(0, data.pHeadAutoBreadcrumbNode === null ? 0n : BigInt(util.toPointer(data.pHeadAutoBreadcrumbNode)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 (size: 8)
 */
export interface D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 {
  /** ptr */
  pHeadAutoBreadcrumbNode: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 = 8;

export function allocD3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1(data?: Partial<D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pHeadAutoBreadcrumbNode !== undefined) view.setBigUint64(0, data.pHeadAutoBreadcrumbNode === null ? 0n : BigInt(util.toPointer(data.pHeadAutoBreadcrumbNode)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_OUTPUT (size: 24)
 */
export interface D3D12_DRED_PAGE_FAULT_OUTPUT {
  /** u64 */
  PageFaultVA: Deno.PointerValue;
  /** ptr */
  pHeadExistingAllocationNode: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pHeadRecentFreedAllocationNode: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DRED_PAGE_FAULT_OUTPUT = 24;

export function allocD3D12_DRED_PAGE_FAULT_OUTPUT(data?: Partial<D3D12_DRED_PAGE_FAULT_OUTPUT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_PAGE_FAULT_OUTPUT);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PageFaultVA !== undefined) view.setBigUint64(0, BigInt(data.PageFaultVA), true);
  // 0x08: pointer
  if (data?.pHeadExistingAllocationNode !== undefined) view.setBigUint64(8, data.pHeadExistingAllocationNode === null ? 0n : BigInt(util.toPointer(data.pHeadExistingAllocationNode)), true);
  // 0x10: pointer
  if (data?.pHeadRecentFreedAllocationNode !== undefined) view.setBigUint64(16, data.pHeadRecentFreedAllocationNode === null ? 0n : BigInt(util.toPointer(data.pHeadRecentFreedAllocationNode)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_OUTPUT1 (size: 24)
 */
export interface D3D12_DRED_PAGE_FAULT_OUTPUT1 {
  /** u64 */
  PageFaultVA: Deno.PointerValue;
  /** ptr */
  pHeadExistingAllocationNode: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pHeadRecentFreedAllocationNode: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_DRED_PAGE_FAULT_OUTPUT1 = 24;

export function allocD3D12_DRED_PAGE_FAULT_OUTPUT1(data?: Partial<D3D12_DRED_PAGE_FAULT_OUTPUT1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_PAGE_FAULT_OUTPUT1);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PageFaultVA !== undefined) view.setBigUint64(0, BigInt(data.PageFaultVA), true);
  // 0x08: pointer
  if (data?.pHeadExistingAllocationNode !== undefined) view.setBigUint64(8, data.pHeadExistingAllocationNode === null ? 0n : BigInt(util.toPointer(data.pHeadExistingAllocationNode)), true);
  // 0x10: pointer
  if (data?.pHeadRecentFreedAllocationNode !== undefined) view.setBigUint64(16, data.pHeadRecentFreedAllocationNode === null ? 0n : BigInt(util.toPointer(data.pHeadRecentFreedAllocationNode)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_OUTPUT2 (size: 32)
 */
export interface D3D12_DRED_PAGE_FAULT_OUTPUT2 {
  /** u64 */
  PageFaultVA: Deno.PointerValue;
  /** ptr */
  pHeadExistingAllocationNode: Deno.PointerValue | Uint8Array | null;
  /** ptr */
  pHeadRecentFreedAllocationNode: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_FLAGS */
  PageFaultFlags: D3D12_DRED_PAGE_FAULT_FLAGS;
}

export const sizeofD3D12_DRED_PAGE_FAULT_OUTPUT2 = 32;

export function allocD3D12_DRED_PAGE_FAULT_OUTPUT2(data?: Partial<D3D12_DRED_PAGE_FAULT_OUTPUT2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DRED_PAGE_FAULT_OUTPUT2);
  const view = new DataView(buf.buffer);
  // 0x00: u64
  if (data?.PageFaultVA !== undefined) view.setBigUint64(0, BigInt(data.PageFaultVA), true);
  // 0x08: pointer
  if (data?.pHeadExistingAllocationNode !== undefined) view.setBigUint64(8, data.pHeadExistingAllocationNode === null ? 0n : BigInt(util.toPointer(data.pHeadExistingAllocationNode)), true);
  // 0x10: pointer
  if (data?.pHeadRecentFreedAllocationNode !== undefined) view.setBigUint64(16, data.pHeadRecentFreedAllocationNode === null ? 0n : BigInt(util.toPointer(data.pHeadRecentFreedAllocationNode)), true);
  // 0x18: u32
  if (data?.PageFaultFlags !== undefined) view.setUint32(24, Number(data.PageFaultFlags), true);
  // 0x1c: pad4
  return buf;
}

export type HRESULT = number;

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEVICE_REMOVED_EXTENDED_DATA1 (size: 24)
 */
export interface D3D12_DEVICE_REMOVED_EXTENDED_DATA1 {
  /** Windows.Win32.Foundation.HRESULT */
  DeviceRemovedReason: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT */
  AutoBreadcrumbsOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_OUTPUT */
  PageFaultOutput: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA1 = 24;

export function allocD3D12_DEVICE_REMOVED_EXTENDED_DATA1(data?: Partial<D3D12_DEVICE_REMOVED_EXTENDED_DATA1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA1);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceRemovedReason !== undefined) view.setBigUint64(0, data.DeviceRemovedReason === null ? 0n : BigInt(util.toPointer(data.DeviceRemovedReason)), true);
  // 0x08: pointer
  if (data?.AutoBreadcrumbsOutput !== undefined) view.setBigUint64(8, data.AutoBreadcrumbsOutput === null ? 0n : BigInt(util.toPointer(data.AutoBreadcrumbsOutput)), true);
  // 0x10: pointer
  if (data?.PageFaultOutput !== undefined) view.setBigUint64(16, data.PageFaultOutput === null ? 0n : BigInt(util.toPointer(data.PageFaultOutput)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEVICE_REMOVED_EXTENDED_DATA2 (size: 24)
 */
export interface D3D12_DEVICE_REMOVED_EXTENDED_DATA2 {
  /** Windows.Win32.Foundation.HRESULT */
  DeviceRemovedReason: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 */
  AutoBreadcrumbsOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_OUTPUT1 */
  PageFaultOutput: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA2 = 24;

export function allocD3D12_DEVICE_REMOVED_EXTENDED_DATA2(data?: Partial<D3D12_DEVICE_REMOVED_EXTENDED_DATA2>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA2);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceRemovedReason !== undefined) view.setBigUint64(0, data.DeviceRemovedReason === null ? 0n : BigInt(util.toPointer(data.DeviceRemovedReason)), true);
  // 0x08: pointer
  if (data?.AutoBreadcrumbsOutput !== undefined) view.setBigUint64(8, data.AutoBreadcrumbsOutput === null ? 0n : BigInt(util.toPointer(data.AutoBreadcrumbsOutput)), true);
  // 0x10: pointer
  if (data?.PageFaultOutput !== undefined) view.setBigUint64(16, data.PageFaultOutput === null ? 0n : BigInt(util.toPointer(data.PageFaultOutput)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEVICE_REMOVED_EXTENDED_DATA3 (size: 32)
 */
export interface D3D12_DEVICE_REMOVED_EXTENDED_DATA3 {
  /** Windows.Win32.Foundation.HRESULT */
  DeviceRemovedReason: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 */
  AutoBreadcrumbsOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_PAGE_FAULT_OUTPUT2 */
  PageFaultOutput: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_DEVICE_STATE */
  DeviceState: D3D12_DRED_DEVICE_STATE;
}

export const sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA3 = 32;

export function allocD3D12_DEVICE_REMOVED_EXTENDED_DATA3(data?: Partial<D3D12_DEVICE_REMOVED_EXTENDED_DATA3>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEVICE_REMOVED_EXTENDED_DATA3);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.DeviceRemovedReason !== undefined) view.setBigUint64(0, data.DeviceRemovedReason === null ? 0n : BigInt(util.toPointer(data.DeviceRemovedReason)), true);
  // 0x08: pointer
  if (data?.AutoBreadcrumbsOutput !== undefined) view.setBigUint64(8, data.AutoBreadcrumbsOutput === null ? 0n : BigInt(util.toPointer(data.AutoBreadcrumbsOutput)), true);
  // 0x10: pointer
  if (data?.PageFaultOutput !== undefined) view.setBigUint64(16, data.PageFaultOutput === null ? 0n : BigInt(util.toPointer(data.PageFaultOutput)), true);
  // 0x18: i32
  if (data?.DeviceState !== undefined) view.setInt32(24, Number(data.DeviceState), true);
  // 0x1c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA (size: 16)
 */
export interface D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_DRED_VERSION */
  Version: D3D12_DRED_VERSION;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA = 16;

export function allocD3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA(data?: Partial<D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Version !== undefined) view.setInt32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT (size: 8)
 */
export interface D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  Count: number;
}

export const sizeofD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT = 8;

export function allocD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT(data?: Partial<D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES (size: 16)
 */
export interface D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES {
  /** u32 */
  NodeIndex: number;
  /** u32 */
  Count: number;
  /** ptr */
  pTypes: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES = 16;

export function allocD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES(data?: Partial<D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeIndex !== undefined) view.setUint32(0, Number(data.NodeIndex), true);
  // 0x04: u32
  if (data?.Count !== undefined) view.setUint32(4, Number(data.Count), true);
  // 0x08: pointer
  if (data?.pTypes !== undefined) view.setBigUint64(8, data.pTypes === null ? 0n : BigInt(util.toPointer(data.pTypes)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_DESC1 (size: 16)
 */
export interface D3D12_PROTECTED_RESOURCE_SESSION_DESC1 {
  /** u32 */
  NodeMask: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_PROTECTED_RESOURCE_SESSION_FLAGS */
  Flags: D3D12_PROTECTED_RESOURCE_SESSION_FLAGS;
  /** System.Guid */
  ProtectionType: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_PROTECTED_RESOURCE_SESSION_DESC1 = 16;

export function allocD3D12_PROTECTED_RESOURCE_SESSION_DESC1(data?: Partial<D3D12_PROTECTED_RESOURCE_SESSION_DESC1>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_PROTECTED_RESOURCE_SESSION_DESC1);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NodeMask !== undefined) view.setUint32(0, Number(data.NodeMask), true);
  // 0x04: u32
  if (data?.Flags !== undefined) view.setUint32(4, Number(data.Flags), true);
  // 0x08: pointer
  if (data?.ProtectionType !== undefined) view.setBigUint64(8, data.ProtectionType === null ? 0n : BigInt(util.toPointer(data.ProtectionType)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS (size: 8)
 */
export interface D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CLEAR_VALUE */
  ClearValue: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS = 8;

export function allocD3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS(data?: Partial<D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.ClearValue !== undefined) view.setBigUint64(0, data.ClearValue === null ? 0n : BigInt(util.toPointer(data.ClearValue)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_BEGINNING_ACCESS (size: 16)
 */
export interface D3D12_RENDER_PASS_BEGINNING_ACCESS {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE */
  Type: D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_PASS_BEGINNING_ACCESS = 16;

export function allocD3D12_RENDER_PASS_BEGINNING_ACCESS(data?: Partial<D3D12_RENDER_PASS_BEGINNING_ACCESS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_BEGINNING_ACCESS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Foundation.RECT (size: 16)
 */
export interface RECT {
  /** i32 */
  left: number;
  /** i32 */
  top: number;
  /** i32 */
  right: number;
  /** i32 */
  bottom: number;
}

export const sizeofRECT = 16;

export function allocRECT(data?: Partial<RECT>): Uint8Array {
  const buf = new Uint8Array(sizeofRECT);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.left !== undefined) view.setInt32(0, Number(data.left), true);
  // 0x04: i32
  if (data?.top !== undefined) view.setInt32(4, Number(data.top), true);
  // 0x08: i32
  if (data?.right !== undefined) view.setInt32(8, Number(data.right), true);
  // 0x0c: i32
  if (data?.bottom !== undefined) view.setInt32(12, Number(data.bottom), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS (size: 24)
 */
export interface D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS {
  /** u32 */
  SrcSubresource: number;
  /** u32 */
  DstSubresource: number;
  /** u32 */
  DstX: number;
  /** u32 */
  DstY: number;
  /** Windows.Win32.Foundation.RECT */
  SrcRect: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS = 24;

export function allocD3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS(data?: Partial<D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.SrcSubresource !== undefined) view.setUint32(0, Number(data.SrcSubresource), true);
  // 0x04: u32
  if (data?.DstSubresource !== undefined) view.setUint32(4, Number(data.DstSubresource), true);
  // 0x08: u32
  if (data?.DstX !== undefined) view.setUint32(8, Number(data.DstX), true);
  // 0x0c: u32
  if (data?.DstY !== undefined) view.setUint32(12, Number(data.DstY), true);
  // 0x10: pointer
  if (data?.SrcRect !== undefined) view.setBigUint64(16, data.SrcRect === null ? 0n : BigInt(util.toPointer(data.SrcRect)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS (size: 48)
 */
export interface D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS {
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pSrcResource: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.ID3D12Resource */
  pDstResource: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  SubresourceCount: number;
  /** ptr */
  pSubresourceParameters: Deno.PointerValue | Uint8Array | null;
  /** Windows.Win32.Graphics.Dxgi.Common.DXGI_FORMAT */
  Format: DXGI_FORMAT;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RESOLVE_MODE */
  ResolveMode: D3D12_RESOLVE_MODE;
  /** Windows.Win32.Foundation.BOOL */
  PreserveResolveSource: boolean;
}

export const sizeofD3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS = 48;

export function allocD3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS(data?: Partial<D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pSrcResource !== undefined) view.setBigUint64(0, data.pSrcResource === null ? 0n : BigInt(util.toPointer(data.pSrcResource)), true);
  // 0x08: pointer
  if (data?.pDstResource !== undefined) view.setBigUint64(8, data.pDstResource === null ? 0n : BigInt(util.toPointer(data.pDstResource)), true);
  // 0x10: u32
  if (data?.SubresourceCount !== undefined) view.setUint32(16, Number(data.SubresourceCount), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pSubresourceParameters !== undefined) view.setBigUint64(24, data.pSubresourceParameters === null ? 0n : BigInt(util.toPointer(data.pSubresourceParameters)), true);
  // 0x20: u32
  if (data?.Format !== undefined) view.setUint32(32, Number(data.Format), true);
  // 0x24: i32
  if (data?.ResolveMode !== undefined) view.setInt32(36, Number(data.ResolveMode), true);
  // 0x28: i32
  if (data?.PreserveResolveSource !== undefined) view.setInt32(40, Number(data.PreserveResolveSource), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS (size: 16)
 */
export interface D3D12_RENDER_PASS_ENDING_ACCESS {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS_TYPE */
  Type: D3D12_RENDER_PASS_ENDING_ACCESS_TYPE;
  /** _Anonymous_e__Union */
  Anonymous: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_PASS_ENDING_ACCESS = 16;

export function allocD3D12_RENDER_PASS_ENDING_ACCESS(data?: Partial<D3D12_RENDER_PASS_ENDING_ACCESS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_ENDING_ACCESS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Type !== undefined) view.setInt32(0, Number(data.Type), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.Anonymous !== undefined) view.setBigUint64(8, data.Anonymous === null ? 0n : BigInt(util.toPointer(data.Anonymous)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_RENDER_TARGET_DESC (size: 24)
 */
export interface D3D12_RENDER_PASS_RENDER_TARGET_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE */
  cpuDescriptor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_BEGINNING_ACCESS */
  BeginningAccess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS */
  EndingAccess: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_PASS_RENDER_TARGET_DESC = 24;

export function allocD3D12_RENDER_PASS_RENDER_TARGET_DESC(data?: Partial<D3D12_RENDER_PASS_RENDER_TARGET_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_RENDER_TARGET_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.cpuDescriptor !== undefined) view.setBigUint64(0, data.cpuDescriptor === null ? 0n : BigInt(util.toPointer(data.cpuDescriptor)), true);
  // 0x08: pointer
  if (data?.BeginningAccess !== undefined) view.setBigUint64(8, data.BeginningAccess === null ? 0n : BigInt(util.toPointer(data.BeginningAccess)), true);
  // 0x10: pointer
  if (data?.EndingAccess !== undefined) view.setBigUint64(16, data.EndingAccess === null ? 0n : BigInt(util.toPointer(data.EndingAccess)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_DEPTH_STENCIL_DESC (size: 40)
 */
export interface D3D12_RENDER_PASS_DEPTH_STENCIL_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_CPU_DESCRIPTOR_HANDLE */
  cpuDescriptor: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_BEGINNING_ACCESS */
  DepthBeginningAccess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_BEGINNING_ACCESS */
  StencilBeginningAccess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS */
  DepthEndingAccess: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_RENDER_PASS_ENDING_ACCESS */
  StencilEndingAccess: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_RENDER_PASS_DEPTH_STENCIL_DESC = 40;

export function allocD3D12_RENDER_PASS_DEPTH_STENCIL_DESC(data?: Partial<D3D12_RENDER_PASS_DEPTH_STENCIL_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_RENDER_PASS_DEPTH_STENCIL_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.cpuDescriptor !== undefined) view.setBigUint64(0, data.cpuDescriptor === null ? 0n : BigInt(util.toPointer(data.cpuDescriptor)), true);
  // 0x08: pointer
  if (data?.DepthBeginningAccess !== undefined) view.setBigUint64(8, data.DepthBeginningAccess === null ? 0n : BigInt(util.toPointer(data.DepthBeginningAccess)), true);
  // 0x10: pointer
  if (data?.StencilBeginningAccess !== undefined) view.setBigUint64(16, data.StencilBeginningAccess === null ? 0n : BigInt(util.toPointer(data.StencilBeginningAccess)), true);
  // 0x18: pointer
  if (data?.DepthEndingAccess !== undefined) view.setBigUint64(24, data.DepthEndingAccess === null ? 0n : BigInt(util.toPointer(data.DepthEndingAccess)), true);
  // 0x20: pointer
  if (data?.StencilEndingAccess !== undefined) view.setBigUint64(32, data.StencilEndingAccess === null ? 0n : BigInt(util.toPointer(data.StencilEndingAccess)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DISPATCH_RAYS_DESC (size: 48)
 */
export interface D3D12_DISPATCH_RAYS_DESC {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_RANGE */
  RayGenerationShaderRecord: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE */
  MissShaderTable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE */
  HitGroupTable: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE */
  CallableShaderTable: Uint8Array | Deno.PointerValue | null;
  /** u32 */
  Width: number;
  /** u32 */
  Height: number;
  /** u32 */
  Depth: number;
}

export const sizeofD3D12_DISPATCH_RAYS_DESC = 48;

export function allocD3D12_DISPATCH_RAYS_DESC(data?: Partial<D3D12_DISPATCH_RAYS_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DISPATCH_RAYS_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.RayGenerationShaderRecord !== undefined) view.setBigUint64(0, data.RayGenerationShaderRecord === null ? 0n : BigInt(util.toPointer(data.RayGenerationShaderRecord)), true);
  // 0x08: pointer
  if (data?.MissShaderTable !== undefined) view.setBigUint64(8, data.MissShaderTable === null ? 0n : BigInt(util.toPointer(data.MissShaderTable)), true);
  // 0x10: pointer
  if (data?.HitGroupTable !== undefined) view.setBigUint64(16, data.HitGroupTable === null ? 0n : BigInt(util.toPointer(data.HitGroupTable)), true);
  // 0x18: pointer
  if (data?.CallableShaderTable !== undefined) view.setBigUint64(24, data.CallableShaderTable === null ? 0n : BigInt(util.toPointer(data.CallableShaderTable)), true);
  // 0x20: u32
  if (data?.Width !== undefined) view.setUint32(32, Number(data.Width), true);
  // 0x24: u32
  if (data?.Height !== undefined) view.setUint32(36, Number(data.Height), true);
  // 0x28: u32
  if (data?.Depth !== undefined) view.setUint32(40, Number(data.Depth), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_CACHE_SESSION_DESC (size: 40)
 */
export interface D3D12_SHADER_CACHE_SESSION_DESC {
  /** System.Guid */
  Identifier: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_CACHE_MODE */
  Mode: D3D12_SHADER_CACHE_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_CACHE_FLAGS */
  Flags: D3D12_SHADER_CACHE_FLAGS;
  /** u32 */
  MaximumInMemoryCacheSizeBytes: number;
  /** u32 */
  MaximumInMemoryCacheEntries: number;
  /** u32 */
  MaximumValueFileSizeBytes: number;
  /** u64 */
  Version: Deno.PointerValue;
}

export const sizeofD3D12_SHADER_CACHE_SESSION_DESC = 40;

export function allocD3D12_SHADER_CACHE_SESSION_DESC(data?: Partial<D3D12_SHADER_CACHE_SESSION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_CACHE_SESSION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Identifier !== undefined) view.setBigUint64(0, data.Identifier === null ? 0n : BigInt(util.toPointer(data.Identifier)), true);
  // 0x08: i32
  if (data?.Mode !== undefined) view.setInt32(8, Number(data.Mode), true);
  // 0x0c: u32
  if (data?.Flags !== undefined) view.setUint32(12, Number(data.Flags), true);
  // 0x10: u32
  if (data?.MaximumInMemoryCacheSizeBytes !== undefined) view.setUint32(16, Number(data.MaximumInMemoryCacheSizeBytes), true);
  // 0x14: u32
  if (data?.MaximumInMemoryCacheEntries !== undefined) view.setUint32(20, Number(data.MaximumInMemoryCacheEntries), true);
  // 0x18: u32
  if (data?.MaximumValueFileSizeBytes !== undefined) view.setUint32(24, Number(data.MaximumValueFileSizeBytes), true);
  // 0x1c: pad4
  // 0x20: u64
  if (data?.Version !== undefined) view.setBigUint64(32, BigInt(data.Version), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SUBRESOURCE_DATA (size: 24)
 */
export interface D3D12_SUBRESOURCE_DATA {
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** isize */
  RowPitch: Deno.PointerValue;
  /** isize */
  SlicePitch: Deno.PointerValue;
}

export const sizeofD3D12_SUBRESOURCE_DATA = 24;

export function allocD3D12_SUBRESOURCE_DATA(data?: Partial<D3D12_SUBRESOURCE_DATA>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SUBRESOURCE_DATA);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pData !== undefined) view.setBigUint64(0, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  // 0x08: isize
  if (data?.RowPitch !== undefined) view.setBigInt64(8, BigInt(data.RowPitch), true);
  // 0x10: isize
  if (data?.SlicePitch !== undefined) view.setBigInt64(16, BigInt(data.SlicePitch), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_MEMCPY_DEST (size: 24)
 */
export interface D3D12_MEMCPY_DEST {
  /** ptr */
  pData: Deno.PointerValue | Uint8Array | null;
  /** usize */
  RowPitch: Deno.PointerValue;
  /** usize */
  SlicePitch: Deno.PointerValue;
}

export const sizeofD3D12_MEMCPY_DEST = 24;

export function allocD3D12_MEMCPY_DEST(data?: Partial<D3D12_MEMCPY_DEST>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_MEMCPY_DEST);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.pData !== undefined) view.setBigUint64(0, data.pData === null ? 0n : BigInt(util.toPointer(data.pData)), true);
  // 0x08: usize
  if (data?.RowPitch !== undefined) view.setBigUint64(8, BigInt(data.RowPitch), true);
  // 0x10: usize
  if (data?.SlicePitch !== undefined) view.setBigUint64(16, BigInt(data.SlicePitch), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS (size: 16)
 */
export interface D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS {
  /** u32 */
  MaxMessagesPerCommandList: number;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE */
  DefaultShaderPatchMode: D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS */
  PipelineStateCreateFlags: D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS;
}

export const sizeofD3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS = 16;

export function allocD3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS(data?: Partial<D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.MaxMessagesPerCommandList !== undefined) view.setUint32(0, Number(data.MaxMessagesPerCommandList), true);
  // 0x04: i32
  if (data?.DefaultShaderPatchMode !== undefined) view.setInt32(4, Number(data.DefaultShaderPatchMode), true);
  // 0x08: i32
  if (data?.PipelineStateCreateFlags !== undefined) view.setInt32(8, Number(data.PipelineStateCreateFlags), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR (size: 8)
 */
export interface D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR {
  /** f32 */
  SlowdownFactor: number;
}

export const sizeofD3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR = 8;

export function allocD3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR(data?: Partial<D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR);
  const view = new DataView(buf.buffer);
  // 0x00: f32
  if (data?.SlowdownFactor !== undefined) view.setFloat32(0, Number(data.SlowdownFactor), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS (size: 8)
 */
export interface D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE */
  ShaderPatchMode: D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE;
}

export const sizeofD3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS = 8;

export function allocD3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS(data?: Partial<D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.ShaderPatchMode !== undefined) view.setInt32(0, Number(data.ShaderPatchMode), true);
  // 0x04: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_MESSAGE (size: 32)
 */
export interface D3D12_MESSAGE {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MESSAGE_CATEGORY */
  Category: D3D12_MESSAGE_CATEGORY;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MESSAGE_SEVERITY */
  Severity: D3D12_MESSAGE_SEVERITY;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_MESSAGE_ID */
  ID: D3D12_MESSAGE_ID;
  /** ptr */
  pDescription: Deno.PointerValue | Uint8Array | null;
  /** usize */
  DescriptionByteLength: Deno.PointerValue;
}

export const sizeofD3D12_MESSAGE = 32;

export function allocD3D12_MESSAGE(data?: Partial<D3D12_MESSAGE>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_MESSAGE);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Category !== undefined) view.setInt32(0, Number(data.Category), true);
  // 0x04: i32
  if (data?.Severity !== undefined) view.setInt32(4, Number(data.Severity), true);
  // 0x08: i32
  if (data?.ID !== undefined) view.setInt32(8, Number(data.ID), true);
  // 0x0c: pad4
  // 0x10: pointer
  if (data?.pDescription !== undefined) view.setBigUint64(16, data.pDescription === null ? 0n : BigInt(util.toPointer(data.pDescription)), true);
  // 0x18: usize
  if (data?.DescriptionByteLength !== undefined) view.setBigUint64(24, BigInt(data.DescriptionByteLength), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER_DESC (size: 48)
 */
export interface D3D12_INFO_QUEUE_FILTER_DESC {
  /** u32 */
  NumCategories: number;
  /** ptr */
  pCategoryList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumSeverities: number;
  /** ptr */
  pSeverityList: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  NumIDs: number;
  /** ptr */
  pIDList: Deno.PointerValue | Uint8Array | null;
}

export const sizeofD3D12_INFO_QUEUE_FILTER_DESC = 48;

export function allocD3D12_INFO_QUEUE_FILTER_DESC(data?: Partial<D3D12_INFO_QUEUE_FILTER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_INFO_QUEUE_FILTER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.NumCategories !== undefined) view.setUint32(0, Number(data.NumCategories), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.pCategoryList !== undefined) view.setBigUint64(8, data.pCategoryList === null ? 0n : BigInt(util.toPointer(data.pCategoryList)), true);
  // 0x10: u32
  if (data?.NumSeverities !== undefined) view.setUint32(16, Number(data.NumSeverities), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.pSeverityList !== undefined) view.setBigUint64(24, data.pSeverityList === null ? 0n : BigInt(util.toPointer(data.pSeverityList)), true);
  // 0x20: u32
  if (data?.NumIDs !== undefined) view.setUint32(32, Number(data.NumIDs), true);
  // 0x24: pad4
  // 0x28: pointer
  if (data?.pIDList !== undefined) view.setBigUint64(40, data.pIDList === null ? 0n : BigInt(util.toPointer(data.pIDList)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER (size: 16)
 */
export interface D3D12_INFO_QUEUE_FILTER {
  /** Windows.Win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER_DESC */
  AllowList: Uint8Array | Deno.PointerValue | null;
  /** Windows.Win32.Graphics.Direct3D12.D3D12_INFO_QUEUE_FILTER_DESC */
  DenyList: Uint8Array | Deno.PointerValue | null;
}

export const sizeofD3D12_INFO_QUEUE_FILTER = 16;

export function allocD3D12_INFO_QUEUE_FILTER(data?: Partial<D3D12_INFO_QUEUE_FILTER>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_INFO_QUEUE_FILTER);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.AllowList !== undefined) view.setBigUint64(0, data.AllowList === null ? 0n : BigInt(util.toPointer(data.AllowList)), true);
  // 0x08: pointer
  if (data?.DenyList !== undefined) view.setBigUint64(8, data.DenyList === null ? 0n : BigInt(util.toPointer(data.DenyList)), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_DISPATCH_MESH_ARGUMENTS (size: 16)
 */
export interface D3D12_DISPATCH_MESH_ARGUMENTS {
  /** u32 */
  ThreadGroupCountX: number;
  /** u32 */
  ThreadGroupCountY: number;
  /** u32 */
  ThreadGroupCountZ: number;
}

export const sizeofD3D12_DISPATCH_MESH_ARGUMENTS = 16;

export function allocD3D12_DISPATCH_MESH_ARGUMENTS(data?: Partial<D3D12_DISPATCH_MESH_ARGUMENTS>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_DISPATCH_MESH_ARGUMENTS);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.ThreadGroupCountX !== undefined) view.setUint32(0, Number(data.ThreadGroupCountX), true);
  // 0x04: u32
  if (data?.ThreadGroupCountY !== undefined) view.setUint32(4, Number(data.ThreadGroupCountY), true);
  // 0x08: u32
  if (data?.ThreadGroupCountZ !== undefined) view.setUint32(8, Number(data.ThreadGroupCountZ), true);
  // 0x0c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SIGNATURE_PARAMETER_DESC (size: 40)
 */
export interface D3D12_SIGNATURE_PARAMETER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** u32 */
  SemanticIndex: number;
  /** u32 */
  Register: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_NAME */
  SystemValueType: D3D_NAME;
  /** Windows.Win32.Graphics.Direct3D.D3D_REGISTER_COMPONENT_TYPE */
  ComponentType: D3D_REGISTER_COMPONENT_TYPE;
  /** u8 */
  Mask: number;
  /** u8 */
  ReadWriteMask: number;
  /** u32 */
  Stream: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_MIN_PRECISION */
  MinPrecision: D3D_MIN_PRECISION;
}

export const sizeofD3D12_SIGNATURE_PARAMETER_DESC = 40;

export function allocD3D12_SIGNATURE_PARAMETER_DESC(data?: Partial<D3D12_SIGNATURE_PARAMETER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SIGNATURE_PARAMETER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.SemanticIndex !== undefined) view.setUint32(8, Number(data.SemanticIndex), true);
  // 0x0c: u32
  if (data?.Register !== undefined) view.setUint32(12, Number(data.Register), true);
  // 0x10: i32
  if (data?.SystemValueType !== undefined) view.setInt32(16, Number(data.SystemValueType), true);
  // 0x14: i32
  if (data?.ComponentType !== undefined) view.setInt32(20, Number(data.ComponentType), true);
  // 0x18: u8
  if (data?.Mask !== undefined) view.setUint8(24, Number(data.Mask));
  // 0x19: u8
  if (data?.ReadWriteMask !== undefined) view.setUint8(25, Number(data.ReadWriteMask));
  // 0x1a: u32
  if (data?.Stream !== undefined) view.setUint32(26, Number(data.Stream), true);
  // 0x1e: i32
  if (data?.MinPrecision !== undefined) view.setInt32(30, Number(data.MinPrecision), true);
  // 0x22: pad6
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_BUFFER_DESC (size: 24)
 */
export interface D3D12_SHADER_BUFFER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Direct3D.D3D_CBUFFER_TYPE */
  Type: D3D_CBUFFER_TYPE;
  /** u32 */
  Variables: number;
  /** u32 */
  Size: number;
  /** u32 */
  uFlags: number;
}

export const sizeofD3D12_SHADER_BUFFER_DESC = 24;

export function allocD3D12_SHADER_BUFFER_DESC(data?: Partial<D3D12_SHADER_BUFFER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_BUFFER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.Variables !== undefined) view.setUint32(12, Number(data.Variables), true);
  // 0x10: u32
  if (data?.Size !== undefined) view.setUint32(16, Number(data.Size), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_VARIABLE_DESC (size: 48)
 */
export interface D3D12_SHADER_VARIABLE_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** u32 */
  StartOffset: number;
  /** u32 */
  Size: number;
  /** u32 */
  uFlags: number;
  /** ptr */
  DefaultValue: Deno.PointerValue | Uint8Array | null;
  /** u32 */
  StartTexture: number;
  /** u32 */
  TextureSize: number;
  /** u32 */
  StartSampler: number;
  /** u32 */
  SamplerSize: number;
}

export const sizeofD3D12_SHADER_VARIABLE_DESC = 48;

export function allocD3D12_SHADER_VARIABLE_DESC(data?: Partial<D3D12_SHADER_VARIABLE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_VARIABLE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.StartOffset !== undefined) view.setUint32(8, Number(data.StartOffset), true);
  // 0x0c: u32
  if (data?.Size !== undefined) view.setUint32(12, Number(data.Size), true);
  // 0x10: u32
  if (data?.uFlags !== undefined) view.setUint32(16, Number(data.uFlags), true);
  // 0x14: pad4
  // 0x18: pointer
  if (data?.DefaultValue !== undefined) view.setBigUint64(24, data.DefaultValue === null ? 0n : BigInt(util.toPointer(data.DefaultValue)), true);
  // 0x20: u32
  if (data?.StartTexture !== undefined) view.setUint32(32, Number(data.StartTexture), true);
  // 0x24: u32
  if (data?.TextureSize !== undefined) view.setUint32(36, Number(data.TextureSize), true);
  // 0x28: u32
  if (data?.StartSampler !== undefined) view.setUint32(40, Number(data.StartSampler), true);
  // 0x2c: u32
  if (data?.SamplerSize !== undefined) view.setUint32(44, Number(data.SamplerSize), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_TYPE_DESC (size: 40)
 */
export interface D3D12_SHADER_TYPE_DESC {
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** u32 */
  Elements: number;
  /** u32 */
  Members: number;
  /** u32 */
  Offset: number;
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
}

export const sizeofD3D12_SHADER_TYPE_DESC = 40;

export function allocD3D12_SHADER_TYPE_DESC(data?: Partial<D3D12_SHADER_TYPE_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_TYPE_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: i32
  if (data?.Class !== undefined) view.setInt32(0, Number(data.Class), true);
  // 0x04: i32
  if (data?.Type !== undefined) view.setInt32(4, Number(data.Type), true);
  // 0x08: u32
  if (data?.Rows !== undefined) view.setUint32(8, Number(data.Rows), true);
  // 0x0c: u32
  if (data?.Columns !== undefined) view.setUint32(12, Number(data.Columns), true);
  // 0x10: u32
  if (data?.Elements !== undefined) view.setUint32(16, Number(data.Elements), true);
  // 0x14: u32
  if (data?.Members !== undefined) view.setUint32(20, Number(data.Members), true);
  // 0x18: u32
  if (data?.Offset !== undefined) view.setUint32(24, Number(data.Offset), true);
  // 0x1c: pad4
  // 0x20: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f32 = util.pstrToFfi(data.Name);
    view.setBigUint64(32, (buf as any)._f32 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f32)), true);
  }
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_DESC (size: 160)
 */
export interface D3D12_SHADER_DESC {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  ConstantBuffers: number;
  /** u32 */
  BoundResources: number;
  /** u32 */
  InputParameters: number;
  /** u32 */
  OutputParameters: number;
  /** u32 */
  InstructionCount: number;
  /** u32 */
  TempRegisterCount: number;
  /** u32 */
  TempArrayCount: number;
  /** u32 */
  DefCount: number;
  /** u32 */
  DclCount: number;
  /** u32 */
  TextureNormalInstructions: number;
  /** u32 */
  TextureLoadInstructions: number;
  /** u32 */
  TextureCompInstructions: number;
  /** u32 */
  TextureBiasInstructions: number;
  /** u32 */
  TextureGradientInstructions: number;
  /** u32 */
  FloatInstructionCount: number;
  /** u32 */
  IntInstructionCount: number;
  /** u32 */
  UintInstructionCount: number;
  /** u32 */
  StaticFlowControlCount: number;
  /** u32 */
  DynamicFlowControlCount: number;
  /** u32 */
  MacroInstructionCount: number;
  /** u32 */
  ArrayInstructionCount: number;
  /** u32 */
  CutInstructionCount: number;
  /** u32 */
  EmitInstructionCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE_TOPOLOGY */
  GSOutputTopology: D3D_PRIMITIVE_TOPOLOGY;
  /** u32 */
  GSMaxOutputVertexCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_PRIMITIVE */
  InputPrimitive: D3D_PRIMITIVE;
  /** u32 */
  PatchConstantParameters: number;
  /** u32 */
  cGSInstanceCount: number;
  /** u32 */
  cControlPoints: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_TESSELLATOR_OUTPUT_PRIMITIVE */
  HSOutputPrimitive: D3D_TESSELLATOR_OUTPUT_PRIMITIVE;
  /** Windows.Win32.Graphics.Direct3D.D3D_TESSELLATOR_PARTITIONING */
  HSPartitioning: D3D_TESSELLATOR_PARTITIONING;
  /** Windows.Win32.Graphics.Direct3D.D3D_TESSELLATOR_DOMAIN */
  TessellatorDomain: D3D_TESSELLATOR_DOMAIN;
  /** u32 */
  cBarrierInstructions: number;
  /** u32 */
  cInterlockedInstructions: number;
  /** u32 */
  cTextureStoreInstructions: number;
}

export const sizeofD3D12_SHADER_DESC = 160;

export function allocD3D12_SHADER_DESC(data?: Partial<D3D12_SHADER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Creator);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ConstantBuffers !== undefined) view.setUint32(20, Number(data.ConstantBuffers), true);
  // 0x18: u32
  if (data?.BoundResources !== undefined) view.setUint32(24, Number(data.BoundResources), true);
  // 0x1c: u32
  if (data?.InputParameters !== undefined) view.setUint32(28, Number(data.InputParameters), true);
  // 0x20: u32
  if (data?.OutputParameters !== undefined) view.setUint32(32, Number(data.OutputParameters), true);
  // 0x24: u32
  if (data?.InstructionCount !== undefined) view.setUint32(36, Number(data.InstructionCount), true);
  // 0x28: u32
  if (data?.TempRegisterCount !== undefined) view.setUint32(40, Number(data.TempRegisterCount), true);
  // 0x2c: u32
  if (data?.TempArrayCount !== undefined) view.setUint32(44, Number(data.TempArrayCount), true);
  // 0x30: u32
  if (data?.DefCount !== undefined) view.setUint32(48, Number(data.DefCount), true);
  // 0x34: u32
  if (data?.DclCount !== undefined) view.setUint32(52, Number(data.DclCount), true);
  // 0x38: u32
  if (data?.TextureNormalInstructions !== undefined) view.setUint32(56, Number(data.TextureNormalInstructions), true);
  // 0x3c: u32
  if (data?.TextureLoadInstructions !== undefined) view.setUint32(60, Number(data.TextureLoadInstructions), true);
  // 0x40: u32
  if (data?.TextureCompInstructions !== undefined) view.setUint32(64, Number(data.TextureCompInstructions), true);
  // 0x44: u32
  if (data?.TextureBiasInstructions !== undefined) view.setUint32(68, Number(data.TextureBiasInstructions), true);
  // 0x48: u32
  if (data?.TextureGradientInstructions !== undefined) view.setUint32(72, Number(data.TextureGradientInstructions), true);
  // 0x4c: u32
  if (data?.FloatInstructionCount !== undefined) view.setUint32(76, Number(data.FloatInstructionCount), true);
  // 0x50: u32
  if (data?.IntInstructionCount !== undefined) view.setUint32(80, Number(data.IntInstructionCount), true);
  // 0x54: u32
  if (data?.UintInstructionCount !== undefined) view.setUint32(84, Number(data.UintInstructionCount), true);
  // 0x58: u32
  if (data?.StaticFlowControlCount !== undefined) view.setUint32(88, Number(data.StaticFlowControlCount), true);
  // 0x5c: u32
  if (data?.DynamicFlowControlCount !== undefined) view.setUint32(92, Number(data.DynamicFlowControlCount), true);
  // 0x60: u32
  if (data?.MacroInstructionCount !== undefined) view.setUint32(96, Number(data.MacroInstructionCount), true);
  // 0x64: u32
  if (data?.ArrayInstructionCount !== undefined) view.setUint32(100, Number(data.ArrayInstructionCount), true);
  // 0x68: u32
  if (data?.CutInstructionCount !== undefined) view.setUint32(104, Number(data.CutInstructionCount), true);
  // 0x6c: u32
  if (data?.EmitInstructionCount !== undefined) view.setUint32(108, Number(data.EmitInstructionCount), true);
  // 0x70: i32
  if (data?.GSOutputTopology !== undefined) view.setInt32(112, Number(data.GSOutputTopology), true);
  // 0x74: u32
  if (data?.GSMaxOutputVertexCount !== undefined) view.setUint32(116, Number(data.GSMaxOutputVertexCount), true);
  // 0x78: i32
  if (data?.InputPrimitive !== undefined) view.setInt32(120, Number(data.InputPrimitive), true);
  // 0x7c: u32
  if (data?.PatchConstantParameters !== undefined) view.setUint32(124, Number(data.PatchConstantParameters), true);
  // 0x80: u32
  if (data?.cGSInstanceCount !== undefined) view.setUint32(128, Number(data.cGSInstanceCount), true);
  // 0x84: u32
  if (data?.cControlPoints !== undefined) view.setUint32(132, Number(data.cControlPoints), true);
  // 0x88: i32
  if (data?.HSOutputPrimitive !== undefined) view.setInt32(136, Number(data.HSOutputPrimitive), true);
  // 0x8c: i32
  if (data?.HSPartitioning !== undefined) view.setInt32(140, Number(data.HSPartitioning), true);
  // 0x90: i32
  if (data?.TessellatorDomain !== undefined) view.setInt32(144, Number(data.TessellatorDomain), true);
  // 0x94: u32
  if (data?.cBarrierInstructions !== undefined) view.setUint32(148, Number(data.cBarrierInstructions), true);
  // 0x98: u32
  if (data?.cInterlockedInstructions !== undefined) view.setUint32(152, Number(data.cInterlockedInstructions), true);
  // 0x9c: u32
  if (data?.cTextureStoreInstructions !== undefined) view.setUint32(156, Number(data.cTextureStoreInstructions), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_SHADER_INPUT_BIND_DESC (size: 48)
 */
export interface D3D12_SHADER_INPUT_BIND_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_INPUT_TYPE */
  Type: D3D_SHADER_INPUT_TYPE;
  /** u32 */
  BindPoint: number;
  /** u32 */
  BindCount: number;
  /** u32 */
  uFlags: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_RESOURCE_RETURN_TYPE */
  ReturnType: D3D_RESOURCE_RETURN_TYPE;
  /** Windows.Win32.Graphics.Direct3D.D3D_SRV_DIMENSION */
  Dimension: D3D_SRV_DIMENSION;
  /** u32 */
  NumSamples: number;
  /** u32 */
  Space: number;
  /** u32 */
  uID: number;
}

export const sizeofD3D12_SHADER_INPUT_BIND_DESC = 48;

export function allocD3D12_SHADER_INPUT_BIND_DESC(data?: Partial<D3D12_SHADER_INPUT_BIND_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_SHADER_INPUT_BIND_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: i32
  if (data?.Type !== undefined) view.setInt32(8, Number(data.Type), true);
  // 0x0c: u32
  if (data?.BindPoint !== undefined) view.setUint32(12, Number(data.BindPoint), true);
  // 0x10: u32
  if (data?.BindCount !== undefined) view.setUint32(16, Number(data.BindCount), true);
  // 0x14: u32
  if (data?.uFlags !== undefined) view.setUint32(20, Number(data.uFlags), true);
  // 0x18: i32
  if (data?.ReturnType !== undefined) view.setInt32(24, Number(data.ReturnType), true);
  // 0x1c: i32
  if (data?.Dimension !== undefined) view.setInt32(28, Number(data.Dimension), true);
  // 0x20: u32
  if (data?.NumSamples !== undefined) view.setUint32(32, Number(data.NumSamples), true);
  // 0x24: u32
  if (data?.Space !== undefined) view.setUint32(36, Number(data.Space), true);
  // 0x28: u32
  if (data?.uID !== undefined) view.setUint32(40, Number(data.uID), true);
  // 0x2c: pad4
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_LIBRARY_DESC (size: 16)
 */
export interface D3D12_LIBRARY_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  FunctionCount: number;
}

export const sizeofD3D12_LIBRARY_DESC = 16;

export function allocD3D12_LIBRARY_DESC(data?: Partial<D3D12_LIBRARY_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_LIBRARY_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Creator);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: u32
  if (data?.Flags !== undefined) view.setUint32(8, Number(data.Flags), true);
  // 0x0c: u32
  if (data?.FunctionCount !== undefined) view.setUint32(12, Number(data.FunctionCount), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_FUNCTION_DESC (size: 152)
 */
export interface D3D12_FUNCTION_DESC {
  /** u32 */
  Version: number;
  /** Windows.Win32.Foundation.PSTR */
  Creator: string | null | Uint8Array;
  /** u32 */
  Flags: number;
  /** u32 */
  ConstantBuffers: number;
  /** u32 */
  BoundResources: number;
  /** u32 */
  InstructionCount: number;
  /** u32 */
  TempRegisterCount: number;
  /** u32 */
  TempArrayCount: number;
  /** u32 */
  DefCount: number;
  /** u32 */
  DclCount: number;
  /** u32 */
  TextureNormalInstructions: number;
  /** u32 */
  TextureLoadInstructions: number;
  /** u32 */
  TextureCompInstructions: number;
  /** u32 */
  TextureBiasInstructions: number;
  /** u32 */
  TextureGradientInstructions: number;
  /** u32 */
  FloatInstructionCount: number;
  /** u32 */
  IntInstructionCount: number;
  /** u32 */
  UintInstructionCount: number;
  /** u32 */
  StaticFlowControlCount: number;
  /** u32 */
  DynamicFlowControlCount: number;
  /** u32 */
  MacroInstructionCount: number;
  /** u32 */
  ArrayInstructionCount: number;
  /** u32 */
  MovInstructionCount: number;
  /** u32 */
  MovcInstructionCount: number;
  /** u32 */
  ConversionInstructionCount: number;
  /** u32 */
  BitwiseInstructionCount: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL */
  MinFeatureLevel: D3D_FEATURE_LEVEL;
  /** u64 */
  RequiredFeatureFlags: Deno.PointerValue;
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** i32 */
  FunctionParameterCount: number;
  /** Windows.Win32.Foundation.BOOL */
  HasReturn: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Has10Level9VertexShader: boolean;
  /** Windows.Win32.Foundation.BOOL */
  Has10Level9PixelShader: boolean;
}

export const sizeofD3D12_FUNCTION_DESC = 152;

export function allocD3D12_FUNCTION_DESC(data?: Partial<D3D12_FUNCTION_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_FUNCTION_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Version !== undefined) view.setUint32(0, Number(data.Version), true);
  // 0x04: pad4
  // 0x08: buffer
  if (data?.Creator !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.Creator);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: u32
  if (data?.Flags !== undefined) view.setUint32(16, Number(data.Flags), true);
  // 0x14: u32
  if (data?.ConstantBuffers !== undefined) view.setUint32(20, Number(data.ConstantBuffers), true);
  // 0x18: u32
  if (data?.BoundResources !== undefined) view.setUint32(24, Number(data.BoundResources), true);
  // 0x1c: u32
  if (data?.InstructionCount !== undefined) view.setUint32(28, Number(data.InstructionCount), true);
  // 0x20: u32
  if (data?.TempRegisterCount !== undefined) view.setUint32(32, Number(data.TempRegisterCount), true);
  // 0x24: u32
  if (data?.TempArrayCount !== undefined) view.setUint32(36, Number(data.TempArrayCount), true);
  // 0x28: u32
  if (data?.DefCount !== undefined) view.setUint32(40, Number(data.DefCount), true);
  // 0x2c: u32
  if (data?.DclCount !== undefined) view.setUint32(44, Number(data.DclCount), true);
  // 0x30: u32
  if (data?.TextureNormalInstructions !== undefined) view.setUint32(48, Number(data.TextureNormalInstructions), true);
  // 0x34: u32
  if (data?.TextureLoadInstructions !== undefined) view.setUint32(52, Number(data.TextureLoadInstructions), true);
  // 0x38: u32
  if (data?.TextureCompInstructions !== undefined) view.setUint32(56, Number(data.TextureCompInstructions), true);
  // 0x3c: u32
  if (data?.TextureBiasInstructions !== undefined) view.setUint32(60, Number(data.TextureBiasInstructions), true);
  // 0x40: u32
  if (data?.TextureGradientInstructions !== undefined) view.setUint32(64, Number(data.TextureGradientInstructions), true);
  // 0x44: u32
  if (data?.FloatInstructionCount !== undefined) view.setUint32(68, Number(data.FloatInstructionCount), true);
  // 0x48: u32
  if (data?.IntInstructionCount !== undefined) view.setUint32(72, Number(data.IntInstructionCount), true);
  // 0x4c: u32
  if (data?.UintInstructionCount !== undefined) view.setUint32(76, Number(data.UintInstructionCount), true);
  // 0x50: u32
  if (data?.StaticFlowControlCount !== undefined) view.setUint32(80, Number(data.StaticFlowControlCount), true);
  // 0x54: u32
  if (data?.DynamicFlowControlCount !== undefined) view.setUint32(84, Number(data.DynamicFlowControlCount), true);
  // 0x58: u32
  if (data?.MacroInstructionCount !== undefined) view.setUint32(88, Number(data.MacroInstructionCount), true);
  // 0x5c: u32
  if (data?.ArrayInstructionCount !== undefined) view.setUint32(92, Number(data.ArrayInstructionCount), true);
  // 0x60: u32
  if (data?.MovInstructionCount !== undefined) view.setUint32(96, Number(data.MovInstructionCount), true);
  // 0x64: u32
  if (data?.MovcInstructionCount !== undefined) view.setUint32(100, Number(data.MovcInstructionCount), true);
  // 0x68: u32
  if (data?.ConversionInstructionCount !== undefined) view.setUint32(104, Number(data.ConversionInstructionCount), true);
  // 0x6c: u32
  if (data?.BitwiseInstructionCount !== undefined) view.setUint32(108, Number(data.BitwiseInstructionCount), true);
  // 0x70: i32
  if (data?.MinFeatureLevel !== undefined) view.setInt32(112, Number(data.MinFeatureLevel), true);
  // 0x74: pad4
  // 0x78: u64
  if (data?.RequiredFeatureFlags !== undefined) view.setBigUint64(120, BigInt(data.RequiredFeatureFlags), true);
  // 0x80: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f128 = util.pstrToFfi(data.Name);
    view.setBigUint64(128, (buf as any)._f128 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f128)), true);
  }
  // 0x88: i32
  if (data?.FunctionParameterCount !== undefined) view.setInt32(136, Number(data.FunctionParameterCount), true);
  // 0x8c: i32
  if (data?.HasReturn !== undefined) view.setInt32(140, Number(data.HasReturn), true);
  // 0x90: i32
  if (data?.Has10Level9VertexShader !== undefined) view.setInt32(144, Number(data.Has10Level9VertexShader), true);
  // 0x94: i32
  if (data?.Has10Level9PixelShader !== undefined) view.setInt32(148, Number(data.Has10Level9PixelShader), true);
  return buf;
}

/**
 * Windows.Win32.Graphics.Direct3D12.D3D12_PARAMETER_DESC (size: 56)
 */
export interface D3D12_PARAMETER_DESC {
  /** Windows.Win32.Foundation.PSTR */
  Name: string | null | Uint8Array;
  /** Windows.Win32.Foundation.PSTR */
  SemanticName: string | null | Uint8Array;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_TYPE */
  Type: D3D_SHADER_VARIABLE_TYPE;
  /** Windows.Win32.Graphics.Direct3D.D3D_SHADER_VARIABLE_CLASS */
  Class: D3D_SHADER_VARIABLE_CLASS;
  /** u32 */
  Rows: number;
  /** u32 */
  Columns: number;
  /** Windows.Win32.Graphics.Direct3D.D3D_INTERPOLATION_MODE */
  InterpolationMode: D3D_INTERPOLATION_MODE;
  /** Windows.Win32.Graphics.Direct3D.D3D_PARAMETER_FLAGS */
  Flags: D3D_PARAMETER_FLAGS;
  /** u32 */
  FirstInRegister: number;
  /** u32 */
  FirstInComponent: number;
  /** u32 */
  FirstOutRegister: number;
  /** u32 */
  FirstOutComponent: number;
}

export const sizeofD3D12_PARAMETER_DESC = 56;

export function allocD3D12_PARAMETER_DESC(data?: Partial<D3D12_PARAMETER_DESC>): Uint8Array {
  const buf = new Uint8Array(sizeofD3D12_PARAMETER_DESC);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.SemanticName !== undefined) {
    (buf as any)._f8 = util.pstrToFfi(data.SemanticName);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  // 0x10: i32
  if (data?.Type !== undefined) view.setInt32(16, Number(data.Type), true);
  // 0x14: i32
  if (data?.Class !== undefined) view.setInt32(20, Number(data.Class), true);
  // 0x18: u32
  if (data?.Rows !== undefined) view.setUint32(24, Number(data.Rows), true);
  // 0x1c: u32
  if (data?.Columns !== undefined) view.setUint32(28, Number(data.Columns), true);
  // 0x20: i32
  if (data?.InterpolationMode !== undefined) view.setInt32(32, Number(data.InterpolationMode), true);
  // 0x24: i32
  if (data?.Flags !== undefined) view.setInt32(36, Number(data.Flags), true);
  // 0x28: u32
  if (data?.FirstInRegister !== undefined) view.setUint32(40, Number(data.FirstInRegister), true);
  // 0x2c: u32
  if (data?.FirstInComponent !== undefined) view.setUint32(44, Number(data.FirstInComponent), true);
  // 0x30: u32
  if (data?.FirstOutRegister !== undefined) view.setUint32(48, Number(data.FirstOutRegister), true);
  // 0x34: u32
  if (data?.FirstOutComponent !== undefined) view.setUint32(52, Number(data.FirstOutComponent), true);
  return buf;
}

// Native Libraries

try {
  var libd3d12_dll = Deno.dlopen("d3d12.dll", {
    D3D12SerializeRootSignature: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    D3D12CreateRootSignatureDeserializer: {
      parameters: ["pointer", "usize", "pointer", "pointer"],
      result: "pointer",
    },
    D3D12SerializeVersionedRootSignature: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    D3D12CreateVersionedRootSignatureDeserializer: {
      parameters: ["pointer", "usize", "pointer", "pointer"],
      result: "pointer",
    },
    D3D12CreateDevice: {
      parameters: ["pointer", "i32", "pointer", "pointer"],
      result: "pointer",
    },
    D3D12GetDebugInterface: {
      parameters: ["pointer", "pointer"],
      result: "pointer",
    },
    D3D12EnableExperimentalFeatures: {
      parameters: ["u32", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
    D3D12GetInterface: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function D3D12SerializeRootSignature(
  pRootSignature: Deno.PointerValue | Uint8Array | null /* ptr */,
  Version: D3D_ROOT_SIGNATURE_VERSION /* Windows.Win32.Graphics.Direct3D12.D3D_ROOT_SIGNATURE_VERSION */,
  ppBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppErrorBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d12_dll.D3D12SerializeRootSignature(util.toPointer(pRootSignature), Version, util.toPointer(ppBlob), util.toPointer(ppErrorBlob)));
}

export function D3D12CreateRootSignatureDeserializer(
  pSrcData: Deno.PointerValue | Uint8Array | null /* ptr */,
  SrcDataSizeInBytes: Deno.PointerValue /* usize */,
  pRootSignatureDeserializerInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppRootSignatureDeserializer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d12_dll.D3D12CreateRootSignatureDeserializer(util.toPointer(pSrcData), SrcDataSizeInBytes, util.toPointer(pRootSignatureDeserializerInterface), util.toPointer(ppRootSignatureDeserializer)));
}

export function D3D12SerializeVersionedRootSignature(
  pRootSignature: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppErrorBlob: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d12_dll.D3D12SerializeVersionedRootSignature(util.toPointer(pRootSignature), util.toPointer(ppBlob), util.toPointer(ppErrorBlob)));
}

export function D3D12CreateVersionedRootSignatureDeserializer(
  pSrcData: Deno.PointerValue | Uint8Array | null /* ptr */,
  SrcDataSizeInBytes: Deno.PointerValue /* usize */,
  pRootSignatureDeserializerInterface: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppRootSignatureDeserializer: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d12_dll.D3D12CreateVersionedRootSignatureDeserializer(util.toPointer(pSrcData), SrcDataSizeInBytes, util.toPointer(pRootSignatureDeserializerInterface), util.toPointer(ppRootSignatureDeserializer)));
}

export function D3D12CreateDevice(
  pAdapter: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IUnknown */,
  MinimumFeatureLevel: D3D_FEATURE_LEVEL /* Windows.Win32.Graphics.Direct3D.D3D_FEATURE_LEVEL */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppDevice: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d12_dll.D3D12CreateDevice(util.toPointer(pAdapter), MinimumFeatureLevel, util.toPointer(riid), util.toPointer(ppDevice)));
}

export function D3D12GetDebugInterface(
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvDebug: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d12_dll.D3D12GetDebugInterface(util.toPointer(riid), util.toPointer(ppvDebug)));
}

export function D3D12EnableExperimentalFeatures(
  NumFeatures: number /* u32 */,
  pIIDs: Deno.PointerValue | Uint8Array | null /* ptr */,
  pConfigurationStructs: Deno.PointerValue | Uint8Array | null /* ptr */,
  pConfigurationStructSizes: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d12_dll.D3D12EnableExperimentalFeatures(NumFeatures, util.toPointer(pIIDs), util.toPointer(pConfigurationStructs), util.toPointer(pConfigurationStructSizes)));
}

export function D3D12GetInterface(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppvDebug: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libd3d12_dll.D3D12GetInterface(util.toPointer(rclsid), util.toPointer(riid), util.toPointer(ppvDebug)));
}

