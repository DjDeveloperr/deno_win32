/// Auto-generated by Deno Win32: Windows.Win32.Graphics.Direct3D.Dxc.Apis

import * as util from "../../../util.ts";

// Enums
export type DXC_CP = number;
export type DXC_OUT_KIND = number;

// Constants
export const DXC_CP_ACP = 0;
export const DXC_CP_UTF16 = 1200;
export const DXC_CP_UTF8 = 65001;
export const DXC_HASHFLAG_INCLUDES_SOURCE = 1;
export const DXC_ARG_DEBUG = `-Zi`;
export const DXC_ARG_SKIP_VALIDATION = `-Vd`;
export const DXC_ARG_SKIP_OPTIMIZATIONS = `-Od`;
export const DXC_ARG_PACK_MATRIX_ROW_MAJOR = `-Zpr`;
export const DXC_ARG_PACK_MATRIX_COLUMN_MAJOR = `-Zpc`;
export const DXC_ARG_AVOID_FLOW_CONTROL = `-Gfa`;
export const DXC_ARG_PREFER_FLOW_CONTROL = `-Gfp`;
export const DXC_ARG_ENABLE_STRICTNESS = `-Ges`;
export const DXC_ARG_ENABLE_BACKWARDS_COMPATIBILITY = `-Gec`;
export const DXC_ARG_IEEE_STRICTNESS = `-Gis`;
export const DXC_ARG_OPTIMIZATION_LEVEL0 = `-O0`;
export const DXC_ARG_OPTIMIZATION_LEVEL1 = `-O1`;
export const DXC_ARG_OPTIMIZATION_LEVEL2 = `-O2`;
export const DXC_ARG_OPTIMIZATION_LEVEL3 = `-O3`;
export const DXC_ARG_WARNINGS_ARE_ERRORS = `-WX`;
export const DXC_ARG_RESOURCES_MAY_ALIAS = `-res_may_alias`;
export const DXC_ARG_ALL_RESOURCES_BOUND = `-all_resources_bound`;
export const DXC_ARG_DEBUG_NAME_FOR_SOURCE = `-Zss`;
export const DXC_ARG_DEBUG_NAME_FOR_BINARY = `-Zsb`;
export const DXC_EXTRA_OUTPUT_NAME_STDOUT = `*stdout*`;
export const DXC_EXTRA_OUTPUT_NAME_STDERR = `*stderr*`;
export const DxcValidatorFlags_Default = 0;
export const DxcValidatorFlags_InPlaceEdit = 1;
export const DxcValidatorFlags_RootSignatureOnly = 2;
export const DxcValidatorFlags_ModuleOnly = 4;
export const DxcValidatorFlags_ValidMask = 7;
export const DxcVersionInfoFlags_None = 0;
export const DxcVersionInfoFlags_Debug = 1;
export const DxcVersionInfoFlags_Internal = 2;
export const DXC_OUT_NONE = 0;
export const DXC_OUT_OBJECT = 1;
export const DXC_OUT_ERRORS = 2;
export const DXC_OUT_PDB = 3;
export const DXC_OUT_SHADER_HASH = 4;
export const DXC_OUT_DISASSEMBLY = 5;
export const DXC_OUT_HLSL = 6;
export const DXC_OUT_TEXT = 7;
export const DXC_OUT_REFLECTION = 8;
export const DXC_OUT_ROOT_SIGNATURE = 9;
export const DXC_OUT_EXTRA_OUTPUTS = 10;
export const DXC_OUT_FORCE_DWORD = `-1`;

// Structs

/**
 * Windows.Win32.Graphics.Direct3D.Dxc.DxcShaderHash (size: 16)
 */
export interface DxcShaderHash {
  /** u32 */
  Flags: number;
  /** array */
  HashDigest: Deno.PointerValue | null;
}

export const sizeofDxcShaderHash = 16;

export function allocDxcShaderHash(data?: Partial<DxcShaderHash>): Uint8Array {
  const buf = new Uint8Array(sizeofDxcShaderHash);
  const view = new DataView(buf.buffer);
  // 0x00: u32
  if (data?.Flags !== undefined) view.setUint32(0, Number(data.Flags), true);
  // 0x04: pad4
  // 0x08: pointer
  if (data?.HashDigest !== undefined) view.setBigUint64(8, data.HashDigest === null ? 0n : BigInt(util.toPointer(data.HashDigest)), true);
  return buf;
}

export class DxcShaderHashView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: u32
  get Flags(): number {
    return this.view.getUint32(0, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  get HashDigest(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: u32
  set Flags(value: number) {
    this.view.setUint32(0, value, true);
  }

  // 0x04: pad4

  // 0x08: pointer
  set HashDigest(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(8, BigInt(util.toPointer(value)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D.Dxc.DxcBuffer (size: 24)
 */
export interface DxcBuffer {
  /** ptr */
  Ptr: Deno.PointerValue | Uint8Array | null;
  /** usize */
  Size: Deno.PointerValue;
  /** u32 */
  Encoding: number;
}

export const sizeofDxcBuffer = 24;

export function allocDxcBuffer(data?: Partial<DxcBuffer>): Uint8Array {
  const buf = new Uint8Array(sizeofDxcBuffer);
  const view = new DataView(buf.buffer);
  // 0x00: pointer
  if (data?.Ptr !== undefined) view.setBigUint64(0, data.Ptr === null ? 0n : BigInt(util.toPointer(data.Ptr)), true);
  // 0x08: usize
  if (data?.Size !== undefined) view.setBigUint64(8, BigInt(data.Size), true);
  // 0x10: u32
  if (data?.Encoding !== undefined) view.setUint32(16, Number(data.Encoding), true);
  // 0x14: pad4
  return buf;
}

export class DxcBufferView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: pointer
  get Ptr(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: usize
  get Size(): Deno.PointerValue {
    return Number(this.view.getBigUint64(8, true));
  }

  // 0x10: u32
  get Encoding(): number {
    return this.view.getUint32(16, true);
  }

  // 0x14: pad4

  // 0x00: pointer
  set Ptr(value: Uint8Array | Deno.PointerValue | null) {
    this.view.setBigUint64(0, BigInt(util.toPointer(value)), true);
  }

  // 0x08: usize
  set Size(value: Deno.PointerValue) {
    this.view.setBigUint64(8, BigInt(value), true);
  }

  // 0x10: u32
  set Encoding(value: number) {
    this.view.setUint32(16, value, true);
  }

  // 0x14: pad4
}

export type PWSTR = Deno.PointerValue | Uint8Array | null;

/**
 * Windows.Win32.Graphics.Direct3D.Dxc.DxcDefine (size: 16)
 */
export interface DxcDefine {
  /** Windows.Win32.Foundation.PWSTR */
  Name: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  Value: string | null | Uint8Array | Uint16Array;
}

export const sizeofDxcDefine = 16;

export function allocDxcDefine(data?: Partial<DxcDefine>): Uint8Array {
  const buf = new Uint8Array(sizeofDxcDefine);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.Name !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.Name);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.Value !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.Value);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class DxcDefineView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get Name(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get Value(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set Name(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set Value(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

/**
 * Windows.Win32.Graphics.Direct3D.Dxc.DxcArgPair (size: 16)
 */
export interface DxcArgPair {
  /** Windows.Win32.Foundation.PWSTR */
  pName: string | null | Uint8Array | Uint16Array;
  /** Windows.Win32.Foundation.PWSTR */
  pValue: string | null | Uint8Array | Uint16Array;
}

export const sizeofDxcArgPair = 16;

export function allocDxcArgPair(data?: Partial<DxcArgPair>): Uint8Array {
  const buf = new Uint8Array(sizeofDxcArgPair);
  const view = new DataView(buf.buffer);
  // 0x00: buffer
  if (data?.pName !== undefined) {
    (buf as any)._f0 = util.pwstrToFfi(data.pName);
    view.setBigUint64(0, (buf as any)._f0 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f0)), true);
  }
  // 0x08: buffer
  if (data?.pValue !== undefined) {
    (buf as any)._f8 = util.pwstrToFfi(data.pValue);
    view.setBigUint64(8, (buf as any)._f8 === null ? 0n : BigInt(Deno.UnsafePointer.of((buf as any)._f8)), true);
  }
  return buf;
}

export class DxcArgPairView {
  private readonly view: DataView;
  constructor(private readonly buf: Uint8Array) {
    this.view = new DataView(buf.buffer);
  }

  get buffer(): Uint8Array {
    return this.buf;
  }

  // 0x00: buffer
  get pName(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(0, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x08: buffer
  get pValue(): Uint8Array | Deno.PointerValue | null {
    const ptr = this.view.getBigUint64(8, true);
    return util.pointerFromFfi(ptr);
  }

  // 0x00: buffer
  set pName(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f0 = value;
    this.view.setBigUint64(0, BigInt(util.toPointer((this.buf as any)._f0)), true);
  }

  // 0x08: buffer
  set pValue(value: Uint8Array | Deno.PointerValue | null) {
    (this.buf as any)._f8 = value;
    this.view.setBigUint64(8, BigInt(util.toPointer((this.buf as any)._f8)), true);
  }
}

export type HRESULT = number;

// Native Libraries

try {
  var libdxcompiler_dll = Deno.dlopen("dxcompiler.dll", {
    DxcCreateInstance: {
      parameters: ["pointer", "pointer", "pointer"],
      result: "pointer",
    },
    DxcCreateInstance2: {
      parameters: ["pointer", "pointer", "pointer", "pointer"],
      result: "pointer",
    },
  }).symbols;
} catch(e) { /* ignore */ }

// Symbols

export function DxcCreateInstance(
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdxcompiler_dll.DxcCreateInstance(util.toPointer(rclsid), util.toPointer(riid), util.toPointer(ppv)));
}

export function DxcCreateInstance2(
  pMalloc: Uint8Array | Deno.PointerValue | null /* Windows.Win32.System.Com.IMalloc */,
  rclsid: Deno.PointerValue | Uint8Array | null /* ptr */,
  riid: Deno.PointerValue | Uint8Array | null /* ptr */,
  ppv: Deno.PointerValue | Uint8Array | null /* ptr */,
): Deno.PointerValue | null /* Windows.Win32.Foundation.HRESULT */ {
  return util.pointerFromFfi(libdxcompiler_dll.DxcCreateInstance2(util.toPointer(pMalloc), util.toPointer(rclsid), util.toPointer(riid), util.toPointer(ppv)));
}

